// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/detectedissue-mitigation-action|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Kinds of mitigating actions and observations that can be associated with a detected issue or contraindication, such as 'added concurrent therapy', 'prior therapy documented', etc.
 */
export const DetectedissueMitigationActionCodings = {
    /**
     * _ActAdministrativeDetectedIssueManagementCode: Codes dealing with the management of Detected Issue observations for the administrative and patient administrative acts domains.
     */
    ActAdministrativeDetectedIssueManagementCode: new Coding({
        display: "ActAdministrativeDetectedIssueManagementCode",
        code: "_ActAdministrativeDetectedIssueManagementCode",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * _ActDetectedIssueManagementCode: Codes dealing with the management of Detected Issue observations
     */
    ActDetectedIssueManagementCode: new Coding({
        display: "ActDetectedIssueManagementCode",
        code: "_ActDetectedIssueManagementCode",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * _AuthorizationIssueManagementCode: Authorization Issue Management Code
     */
    AuthorizationIssueManagementCode: new Coding({
        display: "Authorization Issue Management Code",
        code: "_AuthorizationIssueManagementCode",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 1: Confirmed drug therapy appropriate
     */
    TherapyAppropriate: new Coding({
        display: "Therapy Appropriate",
        code: "1",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 10: Provided education or training to the patient on appropriate therapy use
     */
    ProvidedPatientEducation: new Coding({
        display: "Provided Patient Education",
        code: "10",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 11: Instituted an additional therapy to mitigate potential negative effects
     */
    AddedConcurrentTherapy: new Coding({
        display: "Added Concurrent Therapy",
        code: "11",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 12: Suspended existing therapy that triggered interaction for the duration of this therapy
     */
    TemporarilySuspendedConcurrentTherapy: new Coding({
        display: "Temporarily Suspended Concurrent Therapy",
        code: "12",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 13: Aborted existing therapy that triggered interaction.
     */
    StoppedConcurrentTherapy: new Coding({
        display: "Stopped Concurrent Therapy",
        code: "13",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 14: Confirmed supply action appropriate
     */
    SupplyAppropriate: new Coding({
        display: "Supply Appropriate",
        code: "14",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 15: Patient's existing supply was lost/wasted
     */
    Replacement: new Coding({
        display: "Replacement",
        code: "15",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 16: Supply date is due to patient vacation
     */
    VacationSupply: new Coding({
        display: "Vacation Supply",
        code: "16",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 17: Supply date is intended to carry patient over weekend
     */
    WeekendSupply: new Coding({
        display: "Weekend Supply",
        code: "17",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 18: Supply is intended for use during a leave of absence from an institution.
     */
    LeaveOfAbsence: new Coding({
        display: "Leave of Absence",
        code: "18",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 19: Consulted other supplier/pharmacy, therapy confirmed
     */
    ConsultedSupplier: new Coding({
        display: "Consulted Supplier",
        code: "19",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 2: Assessed patient, therapy is appropriate
     */
    AssessedPatient: new Coding({
        display: "Assessed Patient",
        code: "2",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 20: Description: Supply is different than expected as an additional quantity has been supplied in a separate dispense.
     */
    AdditionalQuantityOnSeparateDispense: new Coding({
        display: "additional quantity on separate dispense",
        code: "20",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 21: Description: Indicates that the permissions have been externally verified and the request should be processed.
     */
    AuthorizationConfirmed: new Coding({
        display: "authorization confirmed",
        code: "21",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 22: Description: The patient has the appropriate indication or diagnosis for the action to be taken.
     */
    AppropriateIndicationOrDiagnosis: new Coding({
        display: "appropriate indication or diagnosis",
        code: "22",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 23: Description: It has been confirmed that the appropriate pre-requisite therapy has been tried.
     */
    PriorTherapyDocumented: new Coding({
        display: "prior therapy documented",
        code: "23",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 3: Patient gave adequate explanation
     */
    PatientExplanation: new Coding({
        display: "Patient Explanation",
        code: "3",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 4: Consulted other supply source, therapy still appropriate
     */
    ConsultedOtherSource: new Coding({
        display: "Consulted Other Source",
        code: "4",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 5: Consulted prescriber, therapy confirmed
     */
    ConsultedPrescriber: new Coding({
        display: "Consulted Prescriber",
        code: "5",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 6: Consulted prescriber and recommended change, prescriber declined
     */
    PrescriberDeclinedChange: new Coding({
        display: "Prescriber Declined Change",
        code: "6",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 7: Concurrent therapy triggering alert is no longer on-going or planned
     */
    InteractingTherapyNoLongerActivePlanned: new Coding({
        display: "Interacting Therapy No Longer Active/Planned",
        code: "7",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 8: Order is performed as issued, but other action taken to mitigate potential adverse effects
     */
    OtherActionTaken: new Coding({
        display: "Other Action Taken",
        code: "8",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * 9: Arranged to monitor patient for adverse effects
     */
    InstitutedOngoingMonitoringProgram: new Coding({
        display: "Instituted Ongoing Monitoring Program",
        code: "9",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * EMAUTH: Used to temporarily override normal authorization rules to gain access to data in a case of emergency. Use of this override code will typically be monitored, and a procedure to verify its proper use may be triggered when used.
     */
    EmergencyAuthorizationOverride: new Coding({
        display: "emergency authorization override",
        code: "EMAUTH",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
};
//# sourceMappingURL=data:application/json;base64,