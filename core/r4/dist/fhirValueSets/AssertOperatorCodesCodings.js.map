{"version":3,"file":"AssertOperatorCodesCodings.js","sources":["../../src/fhirValueSets/AssertOperatorCodesCodings.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ValueSet: http://hl7.org/fhir/ValueSet/assert-operator-codes|4.0.1\r\n\r\nimport { Coding } from '../fhir/Coding.js'\r\n\r\n/**\r\n * The type of operator to use for assertion.\r\n */\r\nexport const AssertOperatorCodesCodings = {\r\n  /**\r\n   * contains: Compare value string contains a known value.\r\n   */\r\n  Contains: new Coding({\r\n    display: \"contains\",\r\n    code: \"contains\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * empty: Compare value is empty.\r\n   */\r\n  Empty: new Coding({\r\n    display: \"empty\",\r\n    code: \"empty\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * equals: Default value. Equals comparison.\r\n   */\r\n  Equals: new Coding({\r\n    display: \"equals\",\r\n    code: \"equals\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * eval: Evaluate the FHIRPath expression as a boolean condition.\r\n   */\r\n  Evaluate: new Coding({\r\n    display: \"evaluate\",\r\n    code: \"eval\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * greaterThan: Compare value to be greater than a known value.\r\n   */\r\n  GreaterThan: new Coding({\r\n    display: \"greaterThan\",\r\n    code: \"greaterThan\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * in: Compare value within a known set of values.\r\n   */\r\n  In: new Coding({\r\n    display: \"in\",\r\n    code: \"in\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * lessThan: Compare value to be less than a known value.\r\n   */\r\n  LessThan: new Coding({\r\n    display: \"lessThan\",\r\n    code: \"lessThan\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * notContains: Compare value string does not contain a known value.\r\n   */\r\n  NotContains: new Coding({\r\n    display: \"notContains\",\r\n    code: \"notContains\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * notEmpty: Compare value is not empty.\r\n   */\r\n  NotEmpty: new Coding({\r\n    display: \"notEmpty\",\r\n    code: \"notEmpty\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * notEquals: Not equals comparison.\r\n   */\r\n  NotEquals: new Coding({\r\n    display: \"notEquals\",\r\n    code: \"notEquals\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n  /**\r\n   * notIn: Compare value not within a known set of values.\r\n   */\r\n  NotIn: new Coding({\r\n    display: \"notIn\",\r\n    code: \"notIn\",\r\n    system: \"http://hl7.org/fhir/assert-operator-codes\",\r\n  }),\r\n} as const;\r\n\r\n/**\r\n * The type of operator to use for assertion.\r\n */\r\nexport type AssertOperatorCodesCodingType = typeof AssertOperatorCodesCodings;\r\n"],"names":[],"mappings":";;;;AAAA;AAOA;;AAEG;AACU,IAAA,0BAA0B,GAAG;AACxC;;AAEG;IACH,QAAQ,EAAE,IAAI,MAAM,CAAC;AACnB,QAAA,OAAO,EAAE,UAAU;AACnB,QAAA,IAAI,EAAE,UAAU;AAChB,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,KAAK,EAAE,IAAI,MAAM,CAAC;AAChB,QAAA,OAAO,EAAE,OAAO;AAChB,QAAA,IAAI,EAAE,OAAO;AACb,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,MAAM,EAAE,IAAI,MAAM,CAAC;AACjB,QAAA,OAAO,EAAE,QAAQ;AACjB,QAAA,IAAI,EAAE,QAAQ;AACd,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,QAAQ,EAAE,IAAI,MAAM,CAAC;AACnB,QAAA,OAAO,EAAE,UAAU;AACnB,QAAA,IAAI,EAAE,MAAM;AACZ,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,WAAW,EAAE,IAAI,MAAM,CAAC;AACtB,QAAA,OAAO,EAAE,aAAa;AACtB,QAAA,IAAI,EAAE,aAAa;AACnB,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,EAAE,EAAE,IAAI,MAAM,CAAC;AACb,QAAA,OAAO,EAAE,IAAI;AACb,QAAA,IAAI,EAAE,IAAI;AACV,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,QAAQ,EAAE,IAAI,MAAM,CAAC;AACnB,QAAA,OAAO,EAAE,UAAU;AACnB,QAAA,IAAI,EAAE,UAAU;AAChB,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,WAAW,EAAE,IAAI,MAAM,CAAC;AACtB,QAAA,OAAO,EAAE,aAAa;AACtB,QAAA,IAAI,EAAE,aAAa;AACnB,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,QAAQ,EAAE,IAAI,MAAM,CAAC;AACnB,QAAA,OAAO,EAAE,UAAU;AACnB,QAAA,IAAI,EAAE,UAAU;AAChB,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,SAAS,EAAE,IAAI,MAAM,CAAC;AACpB,QAAA,OAAO,EAAE,WAAW;AACpB,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;AACF;;AAEG;IACH,KAAK,EAAE,IAAI,MAAM,CAAC;AAChB,QAAA,OAAO,EAAE,OAAO;AAChB,QAAA,IAAI,EAAE,OAAO;AACb,QAAA,MAAM,EAAE,2CAA2C;KACpD,CAAC;;;;;"}