// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/compartment-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Which type a compartment definition describes.
 */
export const CompartmentTypeCodings = {
    /**
     * Device: The compartment definition is for the device compartment.
     */
    Device: new Coding({
        display: "Device",
        code: "Device",
        system: "http://hl7.org/fhir/compartment-type",
    }),
    /**
     * Encounter: The compartment definition is for the encounter compartment.
     */
    Encounter: new Coding({
        display: "Encounter",
        code: "Encounter",
        system: "http://hl7.org/fhir/compartment-type",
    }),
    /**
     * Patient: The compartment definition is for the patient compartment.
     */
    Patient: new Coding({
        display: "Patient",
        code: "Patient",
        system: "http://hl7.org/fhir/compartment-type",
    }),
    /**
     * Practitioner: The compartment definition is for the practitioner compartment.
     */
    Practitioner: new Coding({
        display: "Practitioner",
        code: "Practitioner",
        system: "http://hl7.org/fhir/compartment-type",
    }),
    /**
     * RelatedPerson: The compartment definition is for the related-person compartment.
     */
    RelatedPerson: new Coding({
        display: "RelatedPerson",
        code: "RelatedPerson",
        system: "http://hl7.org/fhir/compartment-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGFydG1lbnRUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29tcGFydG1lbnRUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxRUFBcUU7QUFFckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDcEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsc0NBQXNDO0tBQy9DLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DLENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxzQ0FBc0M7S0FDL0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSxzQ0FBc0M7S0FDL0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxzQ0FBc0M7S0FDL0MsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29tcGFydG1lbnQtdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogV2hpY2ggdHlwZSBhIGNvbXBhcnRtZW50IGRlZmluaXRpb24gZGVzY3JpYmVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvbXBhcnRtZW50VHlwZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogRGV2aWNlOiBUaGUgY29tcGFydG1lbnQgZGVmaW5pdGlvbiBpcyBmb3IgdGhlIGRldmljZSBjb21wYXJ0bWVudC5cclxuICAgKi9cclxuICBEZXZpY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEZXZpY2VcIixcclxuICAgIGNvZGU6IFwiRGV2aWNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb21wYXJ0bWVudC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogRW5jb3VudGVyOiBUaGUgY29tcGFydG1lbnQgZGVmaW5pdGlvbiBpcyBmb3IgdGhlIGVuY291bnRlciBjb21wYXJ0bWVudC5cclxuICAgKi9cclxuICBFbmNvdW50ZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbmNvdW50ZXJcIixcclxuICAgIGNvZGU6IFwiRW5jb3VudGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb21wYXJ0bWVudC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUGF0aWVudDogVGhlIGNvbXBhcnRtZW50IGRlZmluaXRpb24gaXMgZm9yIHRoZSBwYXRpZW50IGNvbXBhcnRtZW50LlxyXG4gICAqL1xyXG4gIFBhdGllbnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQYXRpZW50XCIsXHJcbiAgICBjb2RlOiBcIlBhdGllbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbXBhcnRtZW50LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBQcmFjdGl0aW9uZXI6IFRoZSBjb21wYXJ0bWVudCBkZWZpbml0aW9uIGlzIGZvciB0aGUgcHJhY3RpdGlvbmVyIGNvbXBhcnRtZW50LlxyXG4gICAqL1xyXG4gIFByYWN0aXRpb25lcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlByYWN0aXRpb25lclwiLFxyXG4gICAgY29kZTogXCJQcmFjdGl0aW9uZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbXBhcnRtZW50LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBSZWxhdGVkUGVyc29uOiBUaGUgY29tcGFydG1lbnQgZGVmaW5pdGlvbiBpcyBmb3IgdGhlIHJlbGF0ZWQtcGVyc29uIGNvbXBhcnRtZW50LlxyXG4gICAqL1xyXG4gIFJlbGF0ZWRQZXJzb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZWxhdGVkUGVyc29uXCIsXHJcbiAgICBjb2RlOiBcIlJlbGF0ZWRQZXJzb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbXBhcnRtZW50LXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBXaGljaCB0eXBlIGEgY29tcGFydG1lbnQgZGVmaW5pdGlvbiBkZXNjcmliZXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb21wYXJ0bWVudFR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIENvbXBhcnRtZW50VHlwZUNvZGluZ3M7XHJcbiJdfQ==