// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/container-cap|4.0.1
/**
 * Color of the container cap.
 */
export const ContainerCapCodings = {
    /**
     * black: black cap.
     */
    BlackCap: {
        display: "black cap",
        code: "black",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * brown: brown cap.
     */
    BrownCap: {
        display: "brown cap",
        code: "brown",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * dark-yellow: dark yellow cap.
     */
    DarkYellowCap: {
        display: "dark yellow cap",
        code: "dark-yellow",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * green: green cap.
     */
    GreenCap: {
        display: "green cap",
        code: "green",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * grey: grey cap.
     */
    GreyCap: {
        display: "grey cap",
        code: "grey",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * lavender: lavender cap.
     */
    LavenderCap: {
        display: "lavender cap",
        code: "lavender",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * light-blue: light blue cap.
     */
    LightBlueCap: {
        display: "light blue cap",
        code: "light-blue",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * light-green: light green cap.
     */
    LightGreenCap: {
        display: "light green cap",
        code: "light-green",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * pink: pink cap.
     */
    PinkCap: {
        display: "pink cap",
        code: "pink",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * red: red cap.
     */
    RedCap: {
        display: "red cap",
        code: "red",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * white: white cap.
     */
    WhiteCap: {
        display: "white cap",
        code: "white",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
    /**
     * yellow: yellow cap.
     */
    YellowCap: {
        display: "yellow cap",
        code: "yellow",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFpbmVyQ2FwQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udGFpbmVyQ2FwQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrRUFBa0U7QUEwRGxFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbnRhaW5lci1jYXB8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb2xvciBvZiB0aGUgY29udGFpbmVyIGNhcC5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnRhaW5lckNhcENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYmxhY2s6IGJsYWNrIGNhcC5cclxuICAgKi9cclxuICBCbGFja0NhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBicm93bjogYnJvd24gY2FwLlxyXG4gICAqL1xyXG4gIEJyb3duQ2FwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhcmsteWVsbG93OiBkYXJrIHllbGxvdyBjYXAuXHJcbiAgICovXHJcbiAgRGFya1llbGxvd0NhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBncmVlbjogZ3JlZW4gY2FwLlxyXG4gICAqL1xyXG4gIEdyZWVuQ2FwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGdyZXk6IGdyZXkgY2FwLlxyXG4gICAqL1xyXG4gIEdyZXlDYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGF2ZW5kZXI6IGxhdmVuZGVyIGNhcC5cclxuICAgKi9cclxuICBMYXZlbmRlckNhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsaWdodC1ibHVlOiBsaWdodCBibHVlIGNhcC5cclxuICAgKi9cclxuICBMaWdodEJsdWVDYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGlnaHQtZ3JlZW46IGxpZ2h0IGdyZWVuIGNhcC5cclxuICAgKi9cclxuICBMaWdodEdyZWVuQ2FwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBpbms6IHBpbmsgY2FwLlxyXG4gICAqL1xyXG4gIFBpbmtDYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVkOiByZWQgY2FwLlxyXG4gICAqL1xyXG4gIFJlZENhcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3aGl0ZTogd2hpdGUgY2FwLlxyXG4gICAqL1xyXG4gIFdoaXRlQ2FwOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHllbGxvdzogeWVsbG93IGNhcC5cclxuICAgKi9cclxuICBZZWxsb3dDYXA6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2xvciBvZiB0aGUgY29udGFpbmVyIGNhcC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDb250YWluZXJDYXBDb2RpbmdzOkNvbnRhaW5lckNhcENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYmxhY2s6IGJsYWNrIGNhcC5cclxuICAgKi9cclxuICBCbGFja0NhcDoge1xyXG4gICAgZGlzcGxheTogXCJibGFjayBjYXBcIixcclxuICAgIGNvZGU6IFwiYmxhY2tcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGJyb3duOiBicm93biBjYXAuXHJcbiAgICovXHJcbiAgQnJvd25DYXA6IHtcclxuICAgIGRpc3BsYXk6IFwiYnJvd24gY2FwXCIsXHJcbiAgICBjb2RlOiBcImJyb3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXJrLXllbGxvdzogZGFyayB5ZWxsb3cgY2FwLlxyXG4gICAqL1xyXG4gIERhcmtZZWxsb3dDYXA6IHtcclxuICAgIGRpc3BsYXk6IFwiZGFyayB5ZWxsb3cgY2FwXCIsXHJcbiAgICBjb2RlOiBcImRhcmsteWVsbG93XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBncmVlbjogZ3JlZW4gY2FwLlxyXG4gICAqL1xyXG4gIEdyZWVuQ2FwOiB7XHJcbiAgICBkaXNwbGF5OiBcImdyZWVuIGNhcFwiLFxyXG4gICAgY29kZTogXCJncmVlblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZ3JleTogZ3JleSBjYXAuXHJcbiAgICovXHJcbiAgR3JleUNhcDoge1xyXG4gICAgZGlzcGxheTogXCJncmV5IGNhcFwiLFxyXG4gICAgY29kZTogXCJncmV5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsYXZlbmRlcjogbGF2ZW5kZXIgY2FwLlxyXG4gICAqL1xyXG4gIExhdmVuZGVyQ2FwOiB7XHJcbiAgICBkaXNwbGF5OiBcImxhdmVuZGVyIGNhcFwiLFxyXG4gICAgY29kZTogXCJsYXZlbmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbGlnaHQtYmx1ZTogbGlnaHQgYmx1ZSBjYXAuXHJcbiAgICovXHJcbiAgTGlnaHRCbHVlQ2FwOiB7XHJcbiAgICBkaXNwbGF5OiBcImxpZ2h0IGJsdWUgY2FwXCIsXHJcbiAgICBjb2RlOiBcImxpZ2h0LWJsdWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxpZ2h0LWdyZWVuOiBsaWdodCBncmVlbiBjYXAuXHJcbiAgICovXHJcbiAgTGlnaHRHcmVlbkNhcDoge1xyXG4gICAgZGlzcGxheTogXCJsaWdodCBncmVlbiBjYXBcIixcclxuICAgIGNvZGU6IFwibGlnaHQtZ3JlZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBpbms6IHBpbmsgY2FwLlxyXG4gICAqL1xyXG4gIFBpbmtDYXA6IHtcclxuICAgIGRpc3BsYXk6IFwicGluayBjYXBcIixcclxuICAgIGNvZGU6IFwicGlua1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVkOiByZWQgY2FwLlxyXG4gICAqL1xyXG4gIFJlZENhcDoge1xyXG4gICAgZGlzcGxheTogXCJyZWQgY2FwXCIsXHJcbiAgICBjb2RlOiBcInJlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd2hpdGU6IHdoaXRlIGNhcC5cclxuICAgKi9cclxuICBXaGl0ZUNhcDoge1xyXG4gICAgZGlzcGxheTogXCJ3aGl0ZSBjYXBcIixcclxuICAgIGNvZGU6IFwid2hpdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHllbGxvdzogeWVsbG93IGNhcC5cclxuICAgKi9cclxuICBZZWxsb3dDYXA6IHtcclxuICAgIGRpc3BsYXk6IFwieWVsbG93IGNhcFwiLFxyXG4gICAgY29kZTogXCJ5ZWxsb3dcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=