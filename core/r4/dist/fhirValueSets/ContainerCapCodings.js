// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/container-cap|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Color of the container cap.
 */
export const ContainerCapCodings = {
    /**
     * black: black cap.
     */
    BlackCap: new Coding({
        display: "black cap",
        code: "black",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * brown: brown cap.
     */
    BrownCap: new Coding({
        display: "brown cap",
        code: "brown",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * dark-yellow: dark yellow cap.
     */
    DarkYellowCap: new Coding({
        display: "dark yellow cap",
        code: "dark-yellow",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * green: green cap.
     */
    GreenCap: new Coding({
        display: "green cap",
        code: "green",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * grey: grey cap.
     */
    GreyCap: new Coding({
        display: "grey cap",
        code: "grey",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * lavender: lavender cap.
     */
    LavenderCap: new Coding({
        display: "lavender cap",
        code: "lavender",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * light-blue: light blue cap.
     */
    LightBlueCap: new Coding({
        display: "light blue cap",
        code: "light-blue",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * light-green: light green cap.
     */
    LightGreenCap: new Coding({
        display: "light green cap",
        code: "light-green",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * pink: pink cap.
     */
    PinkCap: new Coding({
        display: "pink cap",
        code: "pink",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * red: red cap.
     */
    RedCap: new Coding({
        display: "red cap",
        code: "red",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * white: white cap.
     */
    WhiteCap: new Coding({
        display: "white cap",
        code: "white",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
    /**
     * yellow: yellow cap.
     */
    YellowCap: new Coding({
        display: "yellow cap",
        code: "yellow",
        system: "http://terminology.hl7.org/CodeSystem/container-cap",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFpbmVyQ2FwQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udGFpbmVyQ2FwQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrRUFBa0U7QUFFbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUc7SUFDakM7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxxREFBcUQ7S0FDOUQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29udGFpbmVyLWNhcHw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29sb3Igb2YgdGhlIGNvbnRhaW5lciBjYXAuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyQ2FwQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBibGFjazogYmxhY2sgY2FwLlxyXG4gICAqL1xyXG4gIEJsYWNrQ2FwOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiYmxhY2sgY2FwXCIsXHJcbiAgICBjb2RlOiBcImJsYWNrXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogYnJvd246IGJyb3duIGNhcC5cclxuICAgKi9cclxuICBCcm93bkNhcDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImJyb3duIGNhcFwiLFxyXG4gICAgY29kZTogXCJicm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGRhcmsteWVsbG93OiBkYXJrIHllbGxvdyBjYXAuXHJcbiAgICovXHJcbiAgRGFya1llbGxvd0NhcDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImRhcmsgeWVsbG93IGNhcFwiLFxyXG4gICAgY29kZTogXCJkYXJrLXllbGxvd1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGdyZWVuOiBncmVlbiBjYXAuXHJcbiAgICovXHJcbiAgR3JlZW5DYXA6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJncmVlbiBjYXBcIixcclxuICAgIGNvZGU6IFwiZ3JlZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBncmV5OiBncmV5IGNhcC5cclxuICAgKi9cclxuICBHcmV5Q2FwOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiZ3JleSBjYXBcIixcclxuICAgIGNvZGU6IFwiZ3JleVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFpbmVyLWNhcFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGxhdmVuZGVyOiBsYXZlbmRlciBjYXAuXHJcbiAgICovXHJcbiAgTGF2ZW5kZXJDYXA6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJsYXZlbmRlciBjYXBcIixcclxuICAgIGNvZGU6IFwibGF2ZW5kZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBsaWdodC1ibHVlOiBsaWdodCBibHVlIGNhcC5cclxuICAgKi9cclxuICBMaWdodEJsdWVDYXA6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJsaWdodCBibHVlIGNhcFwiLFxyXG4gICAgY29kZTogXCJsaWdodC1ibHVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbGlnaHQtZ3JlZW46IGxpZ2h0IGdyZWVuIGNhcC5cclxuICAgKi9cclxuICBMaWdodEdyZWVuQ2FwOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwibGlnaHQgZ3JlZW4gY2FwXCIsXHJcbiAgICBjb2RlOiBcImxpZ2h0LWdyZWVuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcGluazogcGluayBjYXAuXHJcbiAgICovXHJcbiAgUGlua0NhcDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInBpbmsgY2FwXCIsXHJcbiAgICBjb2RlOiBcInBpbmtcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWQ6IHJlZCBjYXAuXHJcbiAgICovXHJcbiAgUmVkQ2FwOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwicmVkIGNhcFwiLFxyXG4gICAgY29kZTogXCJyZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhaW5lci1jYXBcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB3aGl0ZTogd2hpdGUgY2FwLlxyXG4gICAqL1xyXG4gIFdoaXRlQ2FwOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwid2hpdGUgY2FwXCIsXHJcbiAgICBjb2RlOiBcIndoaXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogeWVsbG93OiB5ZWxsb3cgY2FwLlxyXG4gICAqL1xyXG4gIFllbGxvd0NhcDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInllbGxvdyBjYXBcIixcclxuICAgIGNvZGU6IFwieWVsbG93XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWluZXItY2FwXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29sb3Igb2YgdGhlIGNvbnRhaW5lciBjYXAuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250YWluZXJDYXBDb2RpbmdUeXBlID0gdHlwZW9mIENvbnRhaW5lckNhcENvZGluZ3M7XHJcbiJdfQ==