// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-xpath-usage|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * How a search parameter relates to the set of elements returned by evaluating its xpath query.
 */
export const SearchXpathUsageCodings = {
    /**
     * distance: The search parameter is based on a spatial transform of the selected nodes, using physical distance from the middle.
     */
    Distance: new Coding({
        display: "Distance",
        code: "distance",
        system: "http://hl7.org/fhir/search-xpath-usage",
    }),
    /**
     * nearby: The search parameter is based on a spatial transform of the selected nodes.
     */
    Nearby: new Coding({
        display: "Nearby",
        code: "nearby",
        system: "http://hl7.org/fhir/search-xpath-usage",
    }),
    /**
     * normal: The search parameter is derived directly from the selected nodes based on the type definitions.
     */
    Normal: new Coding({
        display: "Normal",
        code: "normal",
        system: "http://hl7.org/fhir/search-xpath-usage",
    }),
    /**
     * other: The interpretation of the xpath statement is unknown (and can't be automated).
     */
    Other: new Coding({
        display: "Other",
        code: "other",
        system: "http://hl7.org/fhir/search-xpath-usage",
    }),
    /**
     * phonetic: The search parameter is derived by a phonetic transform from the selected nodes.
     */
    Phonetic: new Coding({
        display: "Phonetic",
        code: "phonetic",
        system: "http://hl7.org/fhir/search-xpath-usage",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoWHBhdGhVc2FnZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlYXJjaFhwYXRoVXNhZ2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHVFQUF1RTtBQUV2RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNyQzs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pELENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHdDQUF3QztLQUNqRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pELENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NlYXJjaC14cGF0aC11c2FnZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSG93IGEgc2VhcmNoIHBhcmFtZXRlciByZWxhdGVzIHRvIHRoZSBzZXQgb2YgZWxlbWVudHMgcmV0dXJuZWQgYnkgZXZhbHVhdGluZyBpdHMgeHBhdGggcXVlcnkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU2VhcmNoWHBhdGhVc2FnZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogZGlzdGFuY2U6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGJhc2VkIG9uIGEgc3BhdGlhbCB0cmFuc2Zvcm0gb2YgdGhlIHNlbGVjdGVkIG5vZGVzLCB1c2luZyBwaHlzaWNhbCBkaXN0YW5jZSBmcm9tIHRoZSBtaWRkbGUuXHJcbiAgICovXHJcbiAgRGlzdGFuY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEaXN0YW5jZVwiLFxyXG4gICAgY29kZTogXCJkaXN0YW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXhwYXRoLXVzYWdlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbmVhcmJ5OiBUaGUgc2VhcmNoIHBhcmFtZXRlciBpcyBiYXNlZCBvbiBhIHNwYXRpYWwgdHJhbnNmb3JtIG9mIHRoZSBzZWxlY3RlZCBub2Rlcy5cclxuICAgKi9cclxuICBOZWFyYnk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOZWFyYnlcIixcclxuICAgIGNvZGU6IFwibmVhcmJ5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gteHBhdGgtdXNhZ2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBub3JtYWw6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGRlcml2ZWQgZGlyZWN0bHkgZnJvbSB0aGUgc2VsZWN0ZWQgbm9kZXMgYmFzZWQgb24gdGhlIHR5cGUgZGVmaW5pdGlvbnMuXHJcbiAgICovXHJcbiAgTm9ybWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTm9ybWFsXCIsXHJcbiAgICBjb2RlOiBcIm5vcm1hbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXhwYXRoLXVzYWdlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IFRoZSBpbnRlcnByZXRhdGlvbiBvZiB0aGUgeHBhdGggc3RhdGVtZW50IGlzIHVua25vd24gKGFuZCBjYW4ndCBiZSBhdXRvbWF0ZWQpLlxyXG4gICAqL1xyXG4gIE90aGVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT3RoZXJcIixcclxuICAgIGNvZGU6IFwib3RoZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC14cGF0aC11c2FnZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHBob25ldGljOiBUaGUgc2VhcmNoIHBhcmFtZXRlciBpcyBkZXJpdmVkIGJ5IGEgcGhvbmV0aWMgdHJhbnNmb3JtIGZyb20gdGhlIHNlbGVjdGVkIG5vZGVzLlxyXG4gICAqL1xyXG4gIFBob25ldGljOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUGhvbmV0aWNcIixcclxuICAgIGNvZGU6IFwicGhvbmV0aWNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC14cGF0aC11c2FnZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEhvdyBhIHNlYXJjaCBwYXJhbWV0ZXIgcmVsYXRlcyB0byB0aGUgc2V0IG9mIGVsZW1lbnRzIHJldHVybmVkIGJ5IGV2YWx1YXRpbmcgaXRzIHhwYXRoIHF1ZXJ5LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU2VhcmNoWHBhdGhVc2FnZUNvZGluZ1R5cGUgPSB0eXBlb2YgU2VhcmNoWHBhdGhVc2FnZUNvZGluZ3M7XHJcbiJdfQ==