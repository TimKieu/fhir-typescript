// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/testscript-operation-codes|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set defines a set of codes that are used to indicate the supported operations of a testing engine or tool.
 */
export const TestscriptOperationCodesCodings = {
    /**
     * apply: Realizes an ActivityDefinition in a specific context
     */
    Apply: new Coding({
        display: "$apply",
        code: "apply",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * batch: Update, create or delete a set of resources as independent actions.
     */
    Batch: new Coding({
        display: "Batch",
        code: "batch",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * capabilities: Get a capability statement for the system.
     */
    Capabilities: new Coding({
        display: "Capabilities",
        code: "capabilities",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * closure: Closure Table Maintenance
     */
    Closure: new Coding({
        display: "$closure",
        code: "closure",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * conforms: Compare two systems CapabilityStatements
     */
    Conforms: new Coding({
        display: "$conforms",
        code: "conforms",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: new Coding({
        display: "Create",
        code: "create",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * data-requirements: Aggregates and returns the parameters and data requirements for a resource and all its dependencies as a single module definition
     */
    DataRequirements: new Coding({
        display: "$data-requirements",
        code: "data-requirements",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * delete: Delete a resource.
     */
    Delete: new Coding({
        display: "Delete",
        code: "delete",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * deleteCondMultiple: Conditionally delete one or more resources based on search parameters.
     */
    DeleteCondMultiple: new Coding({
        display: "Conditional Delete Multiple",
        code: "deleteCondMultiple",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * deleteCondSingle: Conditionally delete a single resource based on search parameters.
     */
    DeleteCondSingle: new Coding({
        display: "Conditional Delete Single",
        code: "deleteCondSingle",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * document: Generate a Document
     */
    Document: new Coding({
        display: "$document",
        code: "document",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * evaluate: Request clinical decision support guidance based on a specific decision support module
     */
    Evaluate: new Coding({
        display: "$evaluate",
        code: "evaluate",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * evaluate-measure: Invoke an eMeasure and obtain the results
     */
    EvaluateMeasure: new Coding({
        display: "$evaluate-measure",
        code: "evaluate-measure",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * everything: Return all the related information as described in the Encounter or Patient
     */
    Everything: new Coding({
        display: "$everything",
        code: "everything",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * expand: Value Set Expansion
     */
    Expand: new Coding({
        display: "$expand",
        code: "expand",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * find: Find a functional list
     */
    Find: new Coding({
        display: "$find",
        code: "find",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * find-matches: Finding Codes based on supplied properties
     */
    FindMatches: new Coding({
        display: "$find-matches",
        code: "find-matches",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * graphql: Invoke a GraphQL query
     */
    Graphql: new Coding({
        display: "$graphql",
        code: "graphql",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * history: Retrieve the change history for a particular resource or resource type.
     */
    History: new Coding({
        display: "History",
        code: "history",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * implements: Test if a server implements a client's required operations
     */
    Implements: new Coding({
        display: "$implements",
        code: "implements",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * lastn: Last N Observations Query
     */
    Lastn: new Coding({
        display: "$lastn",
        code: "lastn",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * lookup: Concept Look Up and Decomposition
     */
    Lookup: new Coding({
        display: "$lookup",
        code: "lookup",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * match: Find patient matches using MPI based logic
     */
    Match: new Coding({
        display: "$match",
        code: "match",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * meta: Access a list of profiles, tags, and security labels
     */
    Meta: new Coding({
        display: "$meta",
        code: "meta",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * meta-add: Add profiles, tags, and security labels to a resource
     */
    MetaAdd: new Coding({
        display: "$meta-add",
        code: "meta-add",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * meta-delete: Delete profiles, tags, and security labels for a resource
     */
    MetaDelete: new Coding({
        display: "$meta-delete",
        code: "meta-delete",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * patch: Patch an existing resource by its id.
     */
    Patch: new Coding({
        display: "Patch",
        code: "patch",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * populate: Populate Questionnaire
     */
    Populate: new Coding({
        display: "$populate",
        code: "populate",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * populatehtml: Generate HTML for Questionnaire
     */
    Populatehtml: new Coding({
        display: "$populatehtml",
        code: "populatehtml",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * populatelink: Generate a link to a Questionnaire completion webpage
     */
    Populatelink: new Coding({
        display: "$populatelink",
        code: "populatelink",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * process-message: Process a message according to the defined event
     */
    ProcessMessage: new Coding({
        display: "$process-message",
        code: "process-message",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * questionnaire: Build Questionnaire
     */
    Questionnaire: new Coding({
        display: "$questionnaire",
        code: "questionnaire",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * read: Read the current state of the resource.
     */
    Read: new Coding({
        display: "Read",
        code: "read",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * search: Search based on some filter criteria.
     */
    Search: new Coding({
        display: "Search",
        code: "search",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * stats: Observation Statistics
     */
    Stats: new Coding({
        display: "$stats",
        code: "stats",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * subset: Fetch a subset of the CapabilityStatement resource
     */
    Subset: new Coding({
        display: "$subset",
        code: "subset",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * subsumes: CodeSystem Subsumption Testing
     */
    Subsumes: new Coding({
        display: "$subsumes",
        code: "subsumes",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * transaction: Update, create or delete a set of resources as a single transaction.
     */
    Transaction: new Coding({
        display: "Transaction",
        code: "transaction",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * transform: Model Instance Transformation
     */
    Transform: new Coding({
        display: "$transform",
        code: "transform",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * translate: Concept Translation
     */
    Translate: new Coding({
        display: "$translate",
        code: "translate",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * update: Update an existing resource by its id.
     */
    Update: new Coding({
        display: "Update",
        code: "update",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * updateCreate: Update an existing resource by its id (or create it if it is new).
     */
    UpdateCreate: new Coding({
        display: "Create using Update",
        code: "updateCreate",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * validate: Validate a resource
     */
    Validate: new Coding({
        display: "$validate",
        code: "validate",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * validate-code: ValueSet based Validation
     */
    ValidateCode: new Coding({
        display: "$validate-code",
        code: "validate-code",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
    /**
     * vread: Read the state of a specific version of the resource.
     */
    Vread: new Coding({
        display: "Version Read",
        code: "vread",
        system: "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
    }),
};
//# sourceMappingURL=data:application/json;base64,