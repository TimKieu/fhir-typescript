// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/identifier-type|4.0.1
/**
 * A coded type for an identifier that can be used to determine which identifier to use for a specific purpose.
 */
export const IdentifierTypeCodings = {
    /**
     * Code: ACSN
     */
    AccessionID: {
        display: "Accession ID",
        code: "ACSN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: BRN
     */
    BreedRegistryNumber: {
        display: "Breed Registry Number",
        code: "BRN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: DL
     */
    DriverQuoteSLicenseNumber: {
        display: "Driver's license number",
        code: "DL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: DR
     */
    DonorRegistrationNumber: {
        display: "Donor Registration Number",
        code: "DR",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: EN
     */
    EmployerNumber: {
        display: "Employer number",
        code: "EN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: FILL
     */
    FillerIdentifier: {
        display: "Filler Identifier",
        code: "FILL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: JHN
     */
    JurisdictionalHealthNumberCanada: {
        display: "Jurisdictional health number (Canada)",
        code: "JHN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: MCN
     */
    MicrochipNumber: {
        display: "Microchip Number",
        code: "MCN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: MD
     */
    MedicalLicenseNumber: {
        display: "Medical License number",
        code: "MD",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: MR
     */
    MedicalRecordNumber: {
        display: "Medical record number",
        code: "MR",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: NIIP
     */
    NationalInsurancePayorIdentifierPayor: {
        display: "National Insurance Payor Identifier (Payor)",
        code: "NIIP",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: PLAC
     */
    PlacerIdentifier: {
        display: "Placer Identifier",
        code: "PLAC",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: PPN
     */
    PassportNumber: {
        display: "Passport number",
        code: "PPN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: PRN
     */
    ProviderNumber: {
        display: "Provider number",
        code: "PRN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: SB
     */
    SocialBeneficiaryIdentifier: {
        display: "Social Beneficiary Identifier",
        code: "SB",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: SNO
     */
    SerialNumber: {
        display: "Serial Number",
        code: "SNO",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: TAX
     */
    TaxIDNumber: {
        display: "Tax ID number",
        code: "TAX",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
    /**
     * Code: UDI
     */
    UniversalDeviceIdentifier: {
        display: "Universal Device Identifier",
        code: "UDI",
        system: "http://terminology.hl7.org/CodeSystem/v2-0203",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWRlbnRpZmllclR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JZGVudGlmaWVyVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBa0ZwRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUU7UUFDbkIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILHlCQUF5QixFQUFFO1FBQ3pCLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCx1QkFBdUIsRUFBRTtRQUN2QixPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxnQ0FBZ0MsRUFBRTtRQUNoQyxPQUFPLEVBQUUsdUNBQXVDO1FBQ2hELElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gscUNBQXFDLEVBQUU7UUFDckMsT0FBTyxFQUFFLDZDQUE2QztRQUN0RCxJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILDJCQUEyQixFQUFFO1FBQzNCLE9BQU8sRUFBRSwrQkFBK0I7UUFDeEMsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gseUJBQXlCLEVBQUU7UUFDekIsT0FBTyxFQUFFLDZCQUE2QjtRQUN0QyxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2lkZW50aWZpZXItdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEEgY29kZWQgdHlwZSBmb3IgYW4gaWRlbnRpZmllciB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSB3aGljaCBpZGVudGlmaWVyIHRvIHVzZSBmb3IgYSBzcGVjaWZpYyBwdXJwb3NlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSWRlbnRpZmllclR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFDU05cclxuICAgKi9cclxuICBBY2Nlc3Npb25JRDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBCUk5cclxuICAgKi9cclxuICBCcmVlZFJlZ2lzdHJ5TnVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IERMXHJcbiAgICovXHJcbiAgRHJpdmVyUXVvdGVTTGljZW5zZU51bWJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBEUlxyXG4gICAqL1xyXG4gIERvbm9yUmVnaXN0cmF0aW9uTnVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVOXHJcbiAgICovXHJcbiAgRW1wbG95ZXJOdW1iZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogRklMTFxyXG4gICAqL1xyXG4gIEZpbGxlcklkZW50aWZpZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogSkhOXHJcbiAgICovXHJcbiAgSnVyaXNkaWN0aW9uYWxIZWFsdGhOdW1iZXJDYW5hZGE6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogTUNOXHJcbiAgICovXHJcbiAgTWljcm9jaGlwTnVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1EXHJcbiAgICovXHJcbiAgTWVkaWNhbExpY2Vuc2VOdW1iZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogTVJcclxuICAgKi9cclxuICBNZWRpY2FsUmVjb3JkTnVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5JSVBcclxuICAgKi9cclxuICBOYXRpb25hbEluc3VyYW5jZVBheW9ySWRlbnRpZmllclBheW9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBMQUNcclxuICAgKi9cclxuICBQbGFjZXJJZGVudGlmaWVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBQTlxyXG4gICAqL1xyXG4gIFBhc3Nwb3J0TnVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBSTlxyXG4gICAqL1xyXG4gIFByb3ZpZGVyTnVtYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNCXHJcbiAgICovXHJcbiAgU29jaWFsQmVuZWZpY2lhcnlJZGVudGlmaWVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNOT1xyXG4gICAqL1xyXG4gIFNlcmlhbE51bWJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBUQVhcclxuICAgKi9cclxuICBUYXhJRE51bWJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiBVRElcclxuICAgKi9cclxuICBVbml2ZXJzYWxEZXZpY2VJZGVudGlmaWVyOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBjb2RlZCB0eXBlIGZvciBhbiBpZGVudGlmaWVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGlkZW50aWZpZXIgdG8gdXNlIGZvciBhIHNwZWNpZmljIHB1cnBvc2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSWRlbnRpZmllclR5cGVDb2RpbmdzOklkZW50aWZpZXJUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiBBQ1NOXHJcbiAgICovXHJcbiAgQWNjZXNzaW9uSUQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQWNjZXNzaW9uIElEXCIsXHJcbiAgICBjb2RlOiBcIkFDU05cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAyMDNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJSTlxyXG4gICAqL1xyXG4gIEJyZWVkUmVnaXN0cnlOdW1iZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiQnJlZWQgUmVnaXN0cnkgTnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIkJSTlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRExcclxuICAgKi9cclxuICBEcml2ZXJRdW90ZVNMaWNlbnNlTnVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRyaXZlcidzIGxpY2Vuc2UgbnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIkRMXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMjAzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBEUlxyXG4gICAqL1xyXG4gIERvbm9yUmVnaXN0cmF0aW9uTnVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRvbm9yIFJlZ2lzdHJhdGlvbiBOdW1iZXJcIixcclxuICAgIGNvZGU6IFwiRFJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAyMDNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVOXHJcbiAgICovXHJcbiAgRW1wbG95ZXJOdW1iZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRW1wbG95ZXIgbnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIkVOXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMjAzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBGSUxMXHJcbiAgICovXHJcbiAgRmlsbGVySWRlbnRpZmllcjoge1xyXG4gICAgZGlzcGxheTogXCJGaWxsZXIgSWRlbnRpZmllclwiLFxyXG4gICAgY29kZTogXCJGSUxMXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMjAzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBKSE5cclxuICAgKi9cclxuICBKdXJpc2RpY3Rpb25hbEhlYWx0aE51bWJlckNhbmFkYToge1xyXG4gICAgZGlzcGxheTogXCJKdXJpc2RpY3Rpb25hbCBoZWFsdGggbnVtYmVyIChDYW5hZGEpXCIsXHJcbiAgICBjb2RlOiBcIkpITlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTUNOXHJcbiAgICovXHJcbiAgTWljcm9jaGlwTnVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1pY3JvY2hpcCBOdW1iZXJcIixcclxuICAgIGNvZGU6IFwiTUNOXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMjAzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiBNRFxyXG4gICAqL1xyXG4gIE1lZGljYWxMaWNlbnNlTnVtYmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1lZGljYWwgTGljZW5zZSBudW1iZXJcIixcclxuICAgIGNvZGU6IFwiTURcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAyMDNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1SXHJcbiAgICovXHJcbiAgTWVkaWNhbFJlY29yZE51bWJlcjoge1xyXG4gICAgZGlzcGxheTogXCJNZWRpY2FsIHJlY29yZCBudW1iZXJcIixcclxuICAgIGNvZGU6IFwiTVJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAyMDNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5JSVBcclxuICAgKi9cclxuICBOYXRpb25hbEluc3VyYW5jZVBheW9ySWRlbnRpZmllclBheW9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5hdGlvbmFsIEluc3VyYW5jZSBQYXlvciBJZGVudGlmaWVyIChQYXlvcilcIixcclxuICAgIGNvZGU6IFwiTklJUFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUExBQ1xyXG4gICAqL1xyXG4gIFBsYWNlcklkZW50aWZpZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUGxhY2VyIElkZW50aWZpZXJcIixcclxuICAgIGNvZGU6IFwiUExBQ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUFBOXHJcbiAgICovXHJcbiAgUGFzc3BvcnROdW1iZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUGFzc3BvcnQgbnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIlBQTlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUFJOXHJcbiAgICovXHJcbiAgUHJvdmlkZXJOdW1iZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvdmlkZXIgbnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIlBSTlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU0JcclxuICAgKi9cclxuICBTb2NpYWxCZW5lZmljaWFyeUlkZW50aWZpZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiU29jaWFsIEJlbmVmaWNpYXJ5IElkZW50aWZpZXJcIixcclxuICAgIGNvZGU6IFwiU0JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAyMDNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNOT1xyXG4gICAqL1xyXG4gIFNlcmlhbE51bWJlcjoge1xyXG4gICAgZGlzcGxheTogXCJTZXJpYWwgTnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIlNOT1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVEFYXHJcbiAgICovXHJcbiAgVGF4SUROdW1iZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiVGF4IElEIG51bWJlclwiLFxyXG4gICAgY29kZTogXCJUQVhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAyMDNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFVESVxyXG4gICAqL1xyXG4gIFVuaXZlcnNhbERldmljZUlkZW50aWZpZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiVW5pdmVyc2FsIERldmljZSBJZGVudGlmaWVyXCIsXHJcbiAgICBjb2RlOiBcIlVESVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwM1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==