// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/assert-response-code-types|4.0.1
/**
 * The type of response code to use for assertion.
 */
export const AssertResponseCodeTypesCodings = {
    /**
     * bad: Response code is 400.
     */
    Bad: {
        display: "bad",
        code: "bad",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * conflict: Response code is 409.
     */
    Conflict: {
        display: "conflict",
        code: "conflict",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * created: Response code is 201.
     */
    Created: {
        display: "created",
        code: "created",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * forbidden: Response code is 403.
     */
    Forbidden: {
        display: "forbidden",
        code: "forbidden",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * gone: Response code is 410.
     */
    Gone: {
        display: "gone",
        code: "gone",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * methodNotAllowed: Response code is 405.
     */
    MethodNotAllowed: {
        display: "methodNotAllowed",
        code: "methodNotAllowed",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * noContent: Response code is 204.
     */
    NoContent: {
        display: "noContent",
        code: "noContent",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * notFound: Response code is 404.
     */
    NotFound: {
        display: "notFound",
        code: "notFound",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * notModified: Response code is 304.
     */
    NotModified: {
        display: "notModified",
        code: "notModified",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * okay: Response code is 200.
     */
    Okay: {
        display: "okay",
        code: "okay",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * preconditionFailed: Response code is 412.
     */
    PreconditionFailed: {
        display: "preconditionFailed",
        code: "preconditionFailed",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
    /**
     * unprocessable: Response code is 422.
     */
    Unprocessable: {
        display: "unprocessable",
        code: "unprocessable",
        system: "http://hl7.org/fhir/assert-response-code-types",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Bc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBMEQvRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RDtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLG9CQUFvQjtRQUMxQixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0lBQ0Q7O09BRUc7SUFDSCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIHJlc3BvbnNlIGNvZGUgdG8gdXNlIGZvciBhc3NlcnRpb24uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYmFkOiBSZXNwb25zZSBjb2RlIGlzIDQwMC5cclxuICAgKi9cclxuICBCYWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29uZmxpY3Q6IFJlc3BvbnNlIGNvZGUgaXMgNDA5LlxyXG4gICAqL1xyXG4gIENvbmZsaWN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZWQ6IFJlc3BvbnNlIGNvZGUgaXMgMjAxLlxyXG4gICAqL1xyXG4gIENyZWF0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZm9yYmlkZGVuOiBSZXNwb25zZSBjb2RlIGlzIDQwMy5cclxuICAgKi9cclxuICBGb3JiaWRkZW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ29uZTogUmVzcG9uc2UgY29kZSBpcyA0MTAuXHJcbiAgICovXHJcbiAgR29uZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtZXRob2ROb3RBbGxvd2VkOiBSZXNwb25zZSBjb2RlIGlzIDQwNS5cclxuICAgKi9cclxuICBNZXRob2ROb3RBbGxvd2VkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vQ29udGVudDogUmVzcG9uc2UgY29kZSBpcyAyMDQuXHJcbiAgICovXHJcbiAgTm9Db250ZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdEZvdW5kOiBSZXNwb25zZSBjb2RlIGlzIDQwNC5cclxuICAgKi9cclxuICBOb3RGb3VuZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3RNb2RpZmllZDogUmVzcG9uc2UgY29kZSBpcyAzMDQuXHJcbiAgICovXHJcbiAgTm90TW9kaWZpZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb2theTogUmVzcG9uc2UgY29kZSBpcyAyMDAuXHJcbiAgICovXHJcbiAgT2theTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcmVjb25kaXRpb25GYWlsZWQ6IFJlc3BvbnNlIGNvZGUgaXMgNDEyLlxyXG4gICAqL1xyXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bnByb2Nlc3NhYmxlOiBSZXNwb25zZSBjb2RlIGlzIDQyMi5cclxuICAgKi9cclxuICBVbnByb2Nlc3NhYmxlOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgcmVzcG9uc2UgY29kZSB0byB1c2UgZm9yIGFzc2VydGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGluZ3M6QXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJhZDogUmVzcG9uc2UgY29kZSBpcyA0MDAuXHJcbiAgICovXHJcbiAgQmFkOiB7XHJcbiAgICBkaXNwbGF5OiBcImJhZFwiLFxyXG4gICAgY29kZTogXCJiYWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb25mbGljdDogUmVzcG9uc2UgY29kZSBpcyA0MDkuXHJcbiAgICovXHJcbiAgQ29uZmxpY3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiY29uZmxpY3RcIixcclxuICAgIGNvZGU6IFwiY29uZmxpY3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjcmVhdGVkOiBSZXNwb25zZSBjb2RlIGlzIDIwMS5cclxuICAgKi9cclxuICBDcmVhdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcImNyZWF0ZWRcIixcclxuICAgIGNvZGU6IFwiY3JlYXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZvcmJpZGRlbjogUmVzcG9uc2UgY29kZSBpcyA0MDMuXHJcbiAgICovXHJcbiAgRm9yYmlkZGVuOiB7XHJcbiAgICBkaXNwbGF5OiBcImZvcmJpZGRlblwiLFxyXG4gICAgY29kZTogXCJmb3JiaWRkZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBnb25lOiBSZXNwb25zZSBjb2RlIGlzIDQxMC5cclxuICAgKi9cclxuICBHb25lOiB7XHJcbiAgICBkaXNwbGF5OiBcImdvbmVcIixcclxuICAgIGNvZGU6IFwiZ29uZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1ldGhvZE5vdEFsbG93ZWQ6IFJlc3BvbnNlIGNvZGUgaXMgNDA1LlxyXG4gICAqL1xyXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwibWV0aG9kTm90QWxsb3dlZFwiLFxyXG4gICAgY29kZTogXCJtZXRob2ROb3RBbGxvd2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm9Db250ZW50OiBSZXNwb25zZSBjb2RlIGlzIDIwNC5cclxuICAgKi9cclxuICBOb0NvbnRlbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwibm9Db250ZW50XCIsXHJcbiAgICBjb2RlOiBcIm5vQ29udGVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vdEZvdW5kOiBSZXNwb25zZSBjb2RlIGlzIDQwNC5cclxuICAgKi9cclxuICBOb3RGb3VuZDoge1xyXG4gICAgZGlzcGxheTogXCJub3RGb3VuZFwiLFxyXG4gICAgY29kZTogXCJub3RGb3VuZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vdE1vZGlmaWVkOiBSZXNwb25zZSBjb2RlIGlzIDMwNC5cclxuICAgKi9cclxuICBOb3RNb2RpZmllZDoge1xyXG4gICAgZGlzcGxheTogXCJub3RNb2RpZmllZFwiLFxyXG4gICAgY29kZTogXCJub3RNb2RpZmllZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9rYXk6IFJlc3BvbnNlIGNvZGUgaXMgMjAwLlxyXG4gICAqL1xyXG4gIE9rYXk6IHtcclxuICAgIGRpc3BsYXk6IFwib2theVwiLFxyXG4gICAgY29kZTogXCJva2F5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJlY29uZGl0aW9uRmFpbGVkOiBSZXNwb25zZSBjb2RlIGlzIDQxMi5cclxuICAgKi9cclxuICBQcmVjb25kaXRpb25GYWlsZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwicHJlY29uZGl0aW9uRmFpbGVkXCIsXHJcbiAgICBjb2RlOiBcInByZWNvbmRpdGlvbkZhaWxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHVucHJvY2Vzc2FibGU6IFJlc3BvbnNlIGNvZGUgaXMgNDIyLlxyXG4gICAqL1xyXG4gIFVucHJvY2Vzc2FibGU6IHtcclxuICAgIGRpc3BsYXk6IFwidW5wcm9jZXNzYWJsZVwiLFxyXG4gICAgY29kZTogXCJ1bnByb2Nlc3NhYmxlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==