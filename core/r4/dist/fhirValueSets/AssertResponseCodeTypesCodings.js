// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/assert-response-code-types|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The type of response code to use for assertion.
 */
export const AssertResponseCodeTypesCodings = {
    /**
     * bad: Response code is 400.
     */
    Bad: new Coding({
        display: "bad",
        code: "bad",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * conflict: Response code is 409.
     */
    Conflict: new Coding({
        display: "conflict",
        code: "conflict",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * created: Response code is 201.
     */
    Created: new Coding({
        display: "created",
        code: "created",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * forbidden: Response code is 403.
     */
    Forbidden: new Coding({
        display: "forbidden",
        code: "forbidden",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * gone: Response code is 410.
     */
    Gone: new Coding({
        display: "gone",
        code: "gone",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * methodNotAllowed: Response code is 405.
     */
    MethodNotAllowed: new Coding({
        display: "methodNotAllowed",
        code: "methodNotAllowed",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * noContent: Response code is 204.
     */
    NoContent: new Coding({
        display: "noContent",
        code: "noContent",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * notFound: Response code is 404.
     */
    NotFound: new Coding({
        display: "notFound",
        code: "notFound",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * notModified: Response code is 304.
     */
    NotModified: new Coding({
        display: "notModified",
        code: "notModified",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * okay: Response code is 200.
     */
    Okay: new Coding({
        display: "okay",
        code: "okay",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * preconditionFailed: Response code is 412.
     */
    PreconditionFailed: new Coding({
        display: "preconditionFailed",
        code: "preconditionFailed",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
    /**
     * unprocessable: Response code is 422.
     */
    Unprocessable: new Coding({
        display: "unprocessable",
        code: "unprocessable",
        system: "http://hl7.org/fhir/assert-response-code-types",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Bc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBRS9FLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHO0lBQzVDOztPQUVHO0lBQ0gsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2QsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMzQixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxrQkFBa0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM3QixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxvQkFBb0I7UUFDMUIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgcmVzcG9uc2UgY29kZSB0byB1c2UgZm9yIGFzc2VydGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBc3NlcnRSZXNwb25zZUNvZGVUeXBlc0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYmFkOiBSZXNwb25zZSBjb2RlIGlzIDQwMC5cclxuICAgKi9cclxuICBCYWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJiYWRcIixcclxuICAgIGNvZGU6IFwiYmFkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvbmZsaWN0OiBSZXNwb25zZSBjb2RlIGlzIDQwOS5cclxuICAgKi9cclxuICBDb25mbGljdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImNvbmZsaWN0XCIsXHJcbiAgICBjb2RlOiBcImNvbmZsaWN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZWQ6IFJlc3BvbnNlIGNvZGUgaXMgMjAxLlxyXG4gICAqL1xyXG4gIENyZWF0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJjcmVhdGVkXCIsXHJcbiAgICBjb2RlOiBcImNyZWF0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZm9yYmlkZGVuOiBSZXNwb25zZSBjb2RlIGlzIDQwMy5cclxuICAgKi9cclxuICBGb3JiaWRkZW46IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJmb3JiaWRkZW5cIixcclxuICAgIGNvZGU6IFwiZm9yYmlkZGVuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtcmVzcG9uc2UtY29kZS10eXBlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGdvbmU6IFJlc3BvbnNlIGNvZGUgaXMgNDEwLlxyXG4gICAqL1xyXG4gIEdvbmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJnb25lXCIsXHJcbiAgICBjb2RlOiBcImdvbmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbWV0aG9kTm90QWxsb3dlZDogUmVzcG9uc2UgY29kZSBpcyA0MDUuXHJcbiAgICovXHJcbiAgTWV0aG9kTm90QWxsb3dlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIm1ldGhvZE5vdEFsbG93ZWRcIixcclxuICAgIGNvZGU6IFwibWV0aG9kTm90QWxsb3dlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBub0NvbnRlbnQ6IFJlc3BvbnNlIGNvZGUgaXMgMjA0LlxyXG4gICAqL1xyXG4gIE5vQ29udGVudDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIm5vQ29udGVudFwiLFxyXG4gICAgY29kZTogXCJub0NvbnRlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbm90Rm91bmQ6IFJlc3BvbnNlIGNvZGUgaXMgNDA0LlxyXG4gICAqL1xyXG4gIE5vdEZvdW5kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwibm90Rm91bmRcIixcclxuICAgIGNvZGU6IFwibm90Rm91bmRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbm90TW9kaWZpZWQ6IFJlc3BvbnNlIGNvZGUgaXMgMzA0LlxyXG4gICAqL1xyXG4gIE5vdE1vZGlmaWVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwibm90TW9kaWZpZWRcIixcclxuICAgIGNvZGU6IFwibm90TW9kaWZpZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb2theTogUmVzcG9uc2UgY29kZSBpcyAyMDAuXHJcbiAgICovXHJcbiAgT2theTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIm9rYXlcIixcclxuICAgIGNvZGU6IFwib2theVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwcmVjb25kaXRpb25GYWlsZWQ6IFJlc3BvbnNlIGNvZGUgaXMgNDEyLlxyXG4gICAqL1xyXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInByZWNvbmRpdGlvbkZhaWxlZFwiLFxyXG4gICAgY29kZTogXCJwcmVjb25kaXRpb25GYWlsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1yZXNwb25zZS1jb2RlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdW5wcm9jZXNzYWJsZTogUmVzcG9uc2UgY29kZSBpcyA0MjIuXHJcbiAgICovXHJcbiAgVW5wcm9jZXNzYWJsZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInVucHJvY2Vzc2FibGVcIixcclxuICAgIGNvZGU6IFwidW5wcm9jZXNzYWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LXJlc3BvbnNlLWNvZGUtdHlwZXNcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiByZXNwb25zZSBjb2RlIHRvIHVzZSBmb3IgYXNzZXJ0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXNzZXJ0UmVzcG9uc2VDb2RlVHlwZXNDb2RpbmdUeXBlID0gdHlwZW9mIEFzc2VydFJlc3BvbnNlQ29kZVR5cGVzQ29kaW5ncztcclxuIl19