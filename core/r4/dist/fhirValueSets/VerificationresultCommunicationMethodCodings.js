// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/verificationresult-communication-method|4.0.1
/**
 * Attested information may be validated by process that are manual or automated. For automated processes it may accomplished by the system of record reaching out through another system's API or information may be sent to the system of record. This value set defines a set of codes to describing the process, the how, a resource or data element is validated.
 */
export const VerificationresultCommunicationMethodCodings = {
    /**
     * manual: The information is submitted/retrieved manually (e.g. by phone, fax, paper-based)
     */
    Manual: {
        display: "Manual",
        code: "manual",
        system: "http://terminology.hl7.org/CodeSystem/verificationresult-communication-method",
    },
    /**
     * portal: The information is submitted/retrieved via a portal
     */
    Portal: {
        display: "Portal",
        code: "portal",
        system: "http://terminology.hl7.org/CodeSystem/verificationresult-communication-method",
    },
    /**
     * pull: The information is retrieved (i.e. pulled) from a source (e.g. over an API)
     */
    Pull: {
        display: "Pull",
        code: "pull",
        system: "http://terminology.hl7.org/CodeSystem/verificationresult-communication-method",
    },
    /**
     * push: The information is sent (i.e. pushed) from a source (e.g. over an API, asynchronously, secure messaging)
     */
    Push: {
        display: "Push",
        code: "push",
        system: "http://terminology.hl7.org/CodeSystem/verificationresult-communication-method",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmVyaWZpY2F0aW9ucmVzdWx0Q29tbXVuaWNhdGlvbk1ldGhvZENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1ZlcmlmaWNhdGlvbnJlc3VsdENvbW11bmljYXRpb25NZXRob2RDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDRGQUE0RjtBQTBCNUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw0Q0FBNEMsR0FBbUQ7SUFDMUc7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwrRUFBK0U7S0FDeEY7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLCtFQUErRTtLQUN4RjtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwrRUFBK0U7S0FDeEY7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0VBQStFO0tBQ3hGO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC92ZXJpZmljYXRpb25yZXN1bHQtY29tbXVuaWNhdGlvbi1tZXRob2R8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBBdHRlc3RlZCBpbmZvcm1hdGlvbiBtYXkgYmUgdmFsaWRhdGVkIGJ5IHByb2Nlc3MgdGhhdCBhcmUgbWFudWFsIG9yIGF1dG9tYXRlZC4gRm9yIGF1dG9tYXRlZCBwcm9jZXNzZXMgaXQgbWF5IGFjY29tcGxpc2hlZCBieSB0aGUgc3lzdGVtIG9mIHJlY29yZCByZWFjaGluZyBvdXQgdGhyb3VnaCBhbm90aGVyIHN5c3RlbSdzIEFQSSBvciBpbmZvcm1hdGlvbiBtYXkgYmUgc2VudCB0byB0aGUgc3lzdGVtIG9mIHJlY29yZC4gVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0byBkZXNjcmliaW5nIHRoZSBwcm9jZXNzLCB0aGUgaG93LCBhIHJlc291cmNlIG9yIGRhdGEgZWxlbWVudCBpcyB2YWxpZGF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBWZXJpZmljYXRpb25yZXN1bHRDb21tdW5pY2F0aW9uTWV0aG9kQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBtYW51YWw6IFRoZSBpbmZvcm1hdGlvbiBpcyBzdWJtaXR0ZWQvcmV0cmlldmVkIG1hbnVhbGx5IChlLmcuIGJ5IHBob25lLCBmYXgsIHBhcGVyLWJhc2VkKVxyXG4gICAqL1xyXG4gIE1hbnVhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwb3J0YWw6IFRoZSBpbmZvcm1hdGlvbiBpcyBzdWJtaXR0ZWQvcmV0cmlldmVkIHZpYSBhIHBvcnRhbFxyXG4gICAqL1xyXG4gIFBvcnRhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwdWxsOiBUaGUgaW5mb3JtYXRpb24gaXMgcmV0cmlldmVkIChpLmUuIHB1bGxlZCkgZnJvbSBhIHNvdXJjZSAoZS5nLiBvdmVyIGFuIEFQSSlcclxuICAgKi9cclxuICBQdWxsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHB1c2g6IFRoZSBpbmZvcm1hdGlvbiBpcyBzZW50IChpLmUuIHB1c2hlZCkgZnJvbSBhIHNvdXJjZSAoZS5nLiBvdmVyIGFuIEFQSSwgYXN5bmNocm9ub3VzbHksIHNlY3VyZSBtZXNzYWdpbmcpXHJcbiAgICovXHJcbiAgUHVzaDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEF0dGVzdGVkIGluZm9ybWF0aW9uIG1heSBiZSB2YWxpZGF0ZWQgYnkgcHJvY2VzcyB0aGF0IGFyZSBtYW51YWwgb3IgYXV0b21hdGVkLiBGb3IgYXV0b21hdGVkIHByb2Nlc3NlcyBpdCBtYXkgYWNjb21wbGlzaGVkIGJ5IHRoZSBzeXN0ZW0gb2YgcmVjb3JkIHJlYWNoaW5nIG91dCB0aHJvdWdoIGFub3RoZXIgc3lzdGVtJ3MgQVBJIG9yIGluZm9ybWF0aW9uIG1heSBiZSBzZW50IHRvIHRoZSBzeXN0ZW0gb2YgcmVjb3JkLiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRvIGRlc2NyaWJpbmcgdGhlIHByb2Nlc3MsIHRoZSBob3csIGEgcmVzb3VyY2Ugb3IgZGF0YSBlbGVtZW50IGlzIHZhbGlkYXRlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBWZXJpZmljYXRpb25yZXN1bHRDb21tdW5pY2F0aW9uTWV0aG9kQ29kaW5nczpWZXJpZmljYXRpb25yZXN1bHRDb21tdW5pY2F0aW9uTWV0aG9kQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBtYW51YWw6IFRoZSBpbmZvcm1hdGlvbiBpcyBzdWJtaXR0ZWQvcmV0cmlldmVkIG1hbnVhbGx5IChlLmcuIGJ5IHBob25lLCBmYXgsIHBhcGVyLWJhc2VkKVxyXG4gICAqL1xyXG4gIE1hbnVhbDoge1xyXG4gICAgZGlzcGxheTogXCJNYW51YWxcIixcclxuICAgIGNvZGU6IFwibWFudWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92ZXJpZmljYXRpb25yZXN1bHQtY29tbXVuaWNhdGlvbi1tZXRob2RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBvcnRhbDogVGhlIGluZm9ybWF0aW9uIGlzIHN1Ym1pdHRlZC9yZXRyaWV2ZWQgdmlhIGEgcG9ydGFsXHJcbiAgICovXHJcbiAgUG9ydGFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBvcnRhbFwiLFxyXG4gICAgY29kZTogXCJwb3J0YWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3ZlcmlmaWNhdGlvbnJlc3VsdC1jb21tdW5pY2F0aW9uLW1ldGhvZFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHVsbDogVGhlIGluZm9ybWF0aW9uIGlzIHJldHJpZXZlZCAoaS5lLiBwdWxsZWQpIGZyb20gYSBzb3VyY2UgKGUuZy4gb3ZlciBhbiBBUEkpXHJcbiAgICovXHJcbiAgUHVsbDoge1xyXG4gICAgZGlzcGxheTogXCJQdWxsXCIsXHJcbiAgICBjb2RlOiBcInB1bGxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3ZlcmlmaWNhdGlvbnJlc3VsdC1jb21tdW5pY2F0aW9uLW1ldGhvZFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHVzaDogVGhlIGluZm9ybWF0aW9uIGlzIHNlbnQgKGkuZS4gcHVzaGVkKSBmcm9tIGEgc291cmNlIChlLmcuIG92ZXIgYW4gQVBJLCBhc3luY2hyb25vdXNseSwgc2VjdXJlIG1lc3NhZ2luZylcclxuICAgKi9cclxuICBQdXNoOiB7XHJcbiAgICBkaXNwbGF5OiBcIlB1c2hcIixcclxuICAgIGNvZGU6IFwicHVzaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdmVyaWZpY2F0aW9ucmVzdWx0LWNvbW11bmljYXRpb24tbWV0aG9kXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19