// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationdispense-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * MedicationDispense Status Codes
 */
export const MedicationdispenseStatusCodings = {
    /**
     * cancelled: The dispensed product was not and will never be picked up by the patient.
     */
    Cancelled: new Coding({
        display: "Cancelled",
        code: "cancelled",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * completed: The dispensed product has been picked up.
     */
    Completed: new Coding({
        display: "Completed",
        code: "completed",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * declined: The dispense was declined and not performed.
     */
    Declined: new Coding({
        display: "Declined",
        code: "declined",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * entered-in-error: The dispense was entered in error and therefore nullified.
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * in-progress: The dispensed product is ready for pickup.
     */
    InProgress: new Coding({
        display: "In Progress",
        code: "in-progress",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * on-hold: The dispense process is paused while waiting for an external event to reactivate the dispense.  For example, new stock has arrived or the prescriber has called.
     */
    OnHold: new Coding({
        display: "On Hold",
        code: "on-hold",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * preparation: The core event has not started yet, but some staging activities have begun (e.g. initial compounding or packaging of medication). Preparation stages may be tracked for billing purposes.
     */
    Preparation: new Coding({
        display: "Preparation",
        code: "preparation",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * stopped: Actions implied by the dispense have been permanently halted, before all of them occurred.
     */
    Stopped: new Coding({
        display: "Stopped",
        code: "stopped",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
    /**
     * unknown: The authoring system does not know which of the status values applies for this medication dispense.  Note: this concept is not to be used for other - one of the listed statuses is presumed to apply, it's just now known which one.
     */
    Unknown: new Coding({
        display: "Unknown",
        code: "unknown",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw4RUFBOEU7QUFFOUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUc7SUFDN0M7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSxpRUFBaUU7S0FDMUUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxpRUFBaUU7S0FDMUUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLGlFQUFpRTtLQUMxRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsaUVBQWlFO0tBQzFFLENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxpRUFBaUU7S0FDMUUsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVkaWNhdGlvbmRpc3BlbnNlLXN0YXR1c3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvbkRpc3BlbnNlIFN0YXR1cyBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lZGljYXRpb25kaXNwZW5zZVN0YXR1c0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgZGlzcGVuc2VkIHByb2R1Y3Qgd2FzIG5vdCBhbmQgd2lsbCBuZXZlciBiZSBwaWNrZWQgdXAgYnkgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2FuY2VsbGVkXCIsXHJcbiAgICBjb2RlOiBcImNhbmNlbGxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmRpc3BlbnNlLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIGRpc3BlbnNlZCBwcm9kdWN0IGhhcyBiZWVuIHBpY2tlZCB1cC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb21wbGV0ZWRcIixcclxuICAgIGNvZGU6IFwiY29tcGxldGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9uZGlzcGVuc2Utc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZGVjbGluZWQ6IFRoZSBkaXNwZW5zZSB3YXMgZGVjbGluZWQgYW5kIG5vdCBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgRGVjbGluZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEZWNsaW5lZFwiLFxyXG4gICAgY29kZTogXCJkZWNsaW5lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmRpc3BlbnNlLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBkaXNwZW5zZSB3YXMgZW50ZXJlZCBpbiBlcnJvciBhbmQgdGhlcmVmb3JlIG51bGxpZmllZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmRpc3BlbnNlLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgZGlzcGVuc2VkIHByb2R1Y3QgaXMgcmVhZHkgZm9yIHBpY2t1cC5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW4gUHJvZ3Jlc3NcIixcclxuICAgIGNvZGU6IFwiaW4tcHJvZ3Jlc3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZGljYXRpb25kaXNwZW5zZS1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBvbi1ob2xkOiBUaGUgZGlzcGVuc2UgcHJvY2VzcyBpcyBwYXVzZWQgd2hpbGUgd2FpdGluZyBmb3IgYW4gZXh0ZXJuYWwgZXZlbnQgdG8gcmVhY3RpdmF0ZSB0aGUgZGlzcGVuc2UuICBGb3IgZXhhbXBsZSwgbmV3IHN0b2NrIGhhcyBhcnJpdmVkIG9yIHRoZSBwcmVzY3JpYmVyIGhhcyBjYWxsZWQuXHJcbiAgICovXHJcbiAgT25Ib2xkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT24gSG9sZFwiLFxyXG4gICAgY29kZTogXCJvbi1ob2xkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9uZGlzcGVuc2Utc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHJlcGFyYXRpb246IFRoZSBjb3JlIGV2ZW50IGhhcyBub3Qgc3RhcnRlZCB5ZXQsIGJ1dCBzb21lIHN0YWdpbmcgYWN0aXZpdGllcyBoYXZlIGJlZ3VuIChlLmcuIGluaXRpYWwgY29tcG91bmRpbmcgb3IgcGFja2FnaW5nIG9mIG1lZGljYXRpb24pLiBQcmVwYXJhdGlvbiBzdGFnZXMgbWF5IGJlIHRyYWNrZWQgZm9yIGJpbGxpbmcgcHVycG9zZXMuXHJcbiAgICovXHJcbiAgUHJlcGFyYXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQcmVwYXJhdGlvblwiLFxyXG4gICAgY29kZTogXCJwcmVwYXJhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmRpc3BlbnNlLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHN0b3BwZWQ6IEFjdGlvbnMgaW1wbGllZCBieSB0aGUgZGlzcGVuc2UgaGF2ZSBiZWVuIHBlcm1hbmVudGx5IGhhbHRlZCwgYmVmb3JlIGFsbCBvZiB0aGVtIG9jY3VycmVkLlxyXG4gICAqL1xyXG4gIFN0b3BwZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTdG9wcGVkXCIsXHJcbiAgICBjb2RlOiBcInN0b3BwZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZGljYXRpb25kaXNwZW5zZS1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgYXV0aG9yaW5nIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoIG9mIHRoZSBzdGF0dXMgdmFsdWVzIGFwcGxpZXMgZm9yIHRoaXMgbWVkaWNhdGlvbiBkaXNwZW5zZS4gIE5vdGU6IHRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3Igb3RoZXIgLSBvbmUgb2YgdGhlIGxpc3RlZCBzdGF0dXNlcyBpcyBwcmVzdW1lZCB0byBhcHBseSwgaXQncyBqdXN0IG5vdyBrbm93biB3aGljaCBvbmUuXHJcbiAgICovXHJcbiAgVW5rbm93bjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd25cIixcclxuICAgIGNvZGU6IFwidW5rbm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmRpc3BlbnNlLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25EaXNwZW5zZSBTdGF0dXMgQ29kZXNcclxuICovXHJcbmV4cG9ydCB0eXBlIE1lZGljYXRpb25kaXNwZW5zZVN0YXR1c0NvZGluZ1R5cGUgPSB0eXBlb2YgTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kaW5ncztcclxuIl19