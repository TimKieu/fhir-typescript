// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationrequest-intent|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * MedicationRequest Intent Codes
 */
export const MedicationrequestIntentCodings = {
    /**
     * filler-order: The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order.
     */
    FillerOrder: new Coding({
        display: "Filler Order",
        code: "filler-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
    /**
     * instance-order: The request represents an instance for the particular order, for example a medication administration record.
     */
    InstanceOrder: new Coding({
        display: "Instance Order",
        code: "instance-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
    /**
     * option: The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or  other constraints among a set of requests.
     */
    Option: new Coding({
        display: "Option",
        code: "option",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
    /**
     * order: The request represents a request/demand and authorization for action
     */
    Order: new Coding({
        display: "Order",
        code: "order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
    /**
     * original-order: The request represents the original authorization for the medication request.
     */
    OriginalOrder: new Coding({
        display: "Original Order",
        code: "original-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
    /**
     * plan: The request represents an intention to ensure something occurs without providing an authorization for others to act.
     */
    Plan: new Coding({
        display: "Plan",
        code: "plan",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
    /**
     * proposal: The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act
     */
    Proposal: new Coding({
        display: "Proposal",
        code: "proposal",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
    /**
     * reflex-order: The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization..
     */
    ReflexOrder: new Coding({
        display: "Reflex Order",
        code: "reflex-order",
        system: "http://hl7.org/fhir/CodeSystem/medicationrequest-intent",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWRpY2F0aW9ucmVxdWVzdEludGVudENvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsNkVBQTZFO0FBRTdFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHO0lBQzVDOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUseURBQXlEO0tBQ2xFLENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlEQUF5RDtLQUNsRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2YsT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSx5REFBeUQ7S0FDbEUsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVkaWNhdGlvbnJlcXVlc3QtaW50ZW50fDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uUmVxdWVzdCBJbnRlbnQgQ29kZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWRpY2F0aW9ucmVxdWVzdEludGVudENvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogZmlsbGVyLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSB2aWV3IG9mIGFuIGF1dGhvcml6YXRpb24gaW5zdGFudGlhdGVkIGJ5IGEgZnVsZmlsbGluZyBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBmdWxmaWxsZXIncyBpbnRlbnRpb24gdG8gYWN0IHVwb24gYSBzdWJtaXR0ZWQgb3JkZXIuXHJcbiAgICovXHJcbiAgRmlsbGVyT3JkZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGaWxsZXIgT3JkZXJcIixcclxuICAgIGNvZGU6IFwiZmlsbGVyLW9yZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb25yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGluc3RhbmNlIGZvciB0aGUgcGFydGljdWxhciBvcmRlciwgZm9yIGV4YW1wbGUgYSBtZWRpY2F0aW9uIGFkbWluaXN0cmF0aW9uIHJlY29yZC5cclxuICAgKi9cclxuICBJbnN0YW5jZU9yZGVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW5zdGFuY2UgT3JkZXJcIixcclxuICAgIGNvZGU6IFwiaW5zdGFuY2Utb3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbnJlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb3B0aW9uOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgY29tcG9uZW50IG9yIG9wdGlvbiBmb3IgYSBSZXF1ZXN0R3JvdXAgdGhhdCBlc3RhYmxpc2hlcyB0aW1pbmcsIGNvbmRpdGlvbmFsaXR5IGFuZC9vciAgb3RoZXIgY29uc3RyYWludHMgYW1vbmcgYSBzZXQgb2YgcmVxdWVzdHMuXHJcbiAgICovXHJcbiAgT3B0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT3B0aW9uXCIsXHJcbiAgICBjb2RlOiBcIm9wdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS9tZWRpY2F0aW9ucmVxdWVzdC1pbnRlbnRcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBvcmRlcjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyBhIHJlcXVlc3QvZGVtYW5kIGFuZCBhdXRob3JpemF0aW9uIGZvciBhY3Rpb25cclxuICAgKi9cclxuICBPcmRlcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9yZGVyXCIsXHJcbiAgICBjb2RlOiBcIm9yZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb25yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG9yaWdpbmFsLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSBvcmlnaW5hbCBhdXRob3JpemF0aW9uIGZvciB0aGUgbWVkaWNhdGlvbiByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIE9yaWdpbmFsT3JkZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPcmlnaW5hbCBPcmRlclwiLFxyXG4gICAgY29kZTogXCJvcmlnaW5hbC1vcmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS9tZWRpY2F0aW9ucmVxdWVzdC1pbnRlbnRcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwbGFuOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGludGVudGlvbiB0byBlbnN1cmUgc29tZXRoaW5nIG9jY3VycyB3aXRob3V0IHByb3ZpZGluZyBhbiBhdXRob3JpemF0aW9uIGZvciBvdGhlcnMgdG8gYWN0LlxyXG4gICAqL1xyXG4gIFBsYW46IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQbGFuXCIsXHJcbiAgICBjb2RlOiBcInBsYW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbnJlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zYWw6IFRoZSByZXF1ZXN0IGlzIGEgc3VnZ2VzdGlvbiBtYWRlIGJ5IHNvbWVvbmUvc29tZXRoaW5nIHRoYXQgZG9lc24ndCBoYXZlIGFuIGludGVudGlvbiB0byBlbnN1cmUgaXQgb2NjdXJzIGFuZCB3aXRob3V0IHByb3ZpZGluZyBhbiBhdXRob3JpemF0aW9uIHRvIGFjdFxyXG4gICAqL1xyXG4gIFByb3Bvc2FsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUHJvcG9zYWxcIixcclxuICAgIGNvZGU6IFwicHJvcG9zYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbnJlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcmVmbGV4LW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHN1cHBsZW1lbnRhbCBhdXRob3JpemF0aW9uIGZvciBhY3Rpb24gYmFzZWQgb24gYSBwYXJlbnQgYXV0aG9yaXphdGlvbiB0b2dldGhlciB3aXRoIGluaXRpYWwgcmVzdWx0cyBvZiB0aGUgYWN0aW9uIHRha2VuIGFnYWluc3QgdGhhdCBwYXJlbnQgYXV0aG9yaXphdGlvbi4uXHJcbiAgICovXHJcbiAgUmVmbGV4T3JkZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZWZsZXggT3JkZXJcIixcclxuICAgIGNvZGU6IFwicmVmbGV4LW9yZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb25yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25SZXF1ZXN0IEludGVudCBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2RpbmdUeXBlID0gdHlwZW9mIE1lZGljYXRpb25yZXF1ZXN0SW50ZW50Q29kaW5ncztcclxuIl19