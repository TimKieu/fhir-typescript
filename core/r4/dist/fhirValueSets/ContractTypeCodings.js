// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contract-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set includes sample Contract Type codes.
 */
export const ContractTypeCodings = {
    /**
     * consent: Consent Directive.
     */
    Consent: new Coding({
        display: "Consent",
        code: "consent",
        system: "http://terminology.hl7.org/CodeSystem/contract-type",
    }),
    /**
     * disclosure: Information disclosure policy.
     */
    Disclosure: new Coding({
        display: "Disclosure",
        code: "disclosure",
        system: "http://terminology.hl7.org/CodeSystem/contract-type",
    }),
    /**
     * healthinsurance: Health Insurance policy.
     */
    HealthInsurance: new Coding({
        display: "Health Insurance",
        code: "healthinsurance",
        system: "http://terminology.hl7.org/CodeSystem/contract-type",
    }),
    /**
     * privacy: Privacy policy.
     */
    Privacy: new Coding({
        display: "Privacy",
        code: "privacy",
        system: "http://terminology.hl7.org/CodeSystem/contract-type",
    }),
    /**
     * supply: Contract to supply goods or services.
     */
    SupplyContract: new Coding({
        display: "Supply Contract",
        code: "supply",
        system: "http://terminology.hl7.org/CodeSystem/contract-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJhY3RUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29udHJhY3RUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrRUFBa0U7QUFFbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUc7SUFDakM7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHFEQUFxRDtLQUM5RCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb250cmFjdC10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBzYW1wbGUgQ29udHJhY3QgVHlwZSBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDb250cmFjdFR5cGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbnNlbnQ6IENvbnNlbnQgRGlyZWN0aXZlLlxyXG4gICAqL1xyXG4gIENvbnNlbnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb25zZW50XCIsXHJcbiAgICBjb2RlOiBcImNvbnNlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyYWN0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkaXNjbG9zdXJlOiBJbmZvcm1hdGlvbiBkaXNjbG9zdXJlIHBvbGljeS5cclxuICAgKi9cclxuICBEaXNjbG9zdXJlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGlzY2xvc3VyZVwiLFxyXG4gICAgY29kZTogXCJkaXNjbG9zdXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250cmFjdC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaGVhbHRoaW5zdXJhbmNlOiBIZWFsdGggSW5zdXJhbmNlIHBvbGljeS5cclxuICAgKi9cclxuICBIZWFsdGhJbnN1cmFuY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJIZWFsdGggSW5zdXJhbmNlXCIsXHJcbiAgICBjb2RlOiBcImhlYWx0aGluc3VyYW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udHJhY3QtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHByaXZhY3k6IFByaXZhY3kgcG9saWN5LlxyXG4gICAqL1xyXG4gIFByaXZhY3k6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQcml2YWN5XCIsXHJcbiAgICBjb2RlOiBcInByaXZhY3lcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyYWN0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzdXBwbHk6IENvbnRyYWN0IHRvIHN1cHBseSBnb29kcyBvciBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBTdXBwbHlDb250cmFjdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN1cHBseSBDb250cmFjdFwiLFxyXG4gICAgY29kZTogXCJzdXBwbHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRyYWN0LXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBzYW1wbGUgQ29udHJhY3QgVHlwZSBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnRyYWN0VHlwZUNvZGluZ1R5cGUgPSB0eXBlb2YgQ29udHJhY3RUeXBlQ29kaW5ncztcclxuIl19