// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-evaluation-target-disease|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the disease that the evaluation is against. This value set is provided as a suggestive example and includes the SNOMED CT concepts from the 64572001 (Disease) hierarchy.
 */
export const ImmunizationEvaluationTargetDiseaseCodings = {
    /**
     * Code: 14189004
     */
    VAL14189004: new Coding({
        code: "14189004",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 1857005
     */
    VAL1857005: new Coding({
        code: "1857005",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 27836007
     */
    VAL27836007: new Coding({
        code: "27836007",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 36653000
     */
    VAL36653000: new Coding({
        code: "36653000",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 36989005
     */
    VAL36989005: new Coding({
        code: "36989005",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 397430003
     */
    VAL397430003: new Coding({
        code: "397430003",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 398102009
     */
    VAL398102009: new Coding({
        code: "398102009",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 709410003
     */
    VAL709410003: new Coding({
        code: "709410003",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 76902006
     */
    VAL76902006: new Coding({
        code: "76902006",
        system: "http://snomed.info/sct",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uRXZhbHVhdGlvblRhcmdldERpc2Vhc2VDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JbW11bml6YXRpb25FdmFsdWF0aW9uVGFyZ2V0RGlzZWFzZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMkZBQTJGO0FBRTNGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBDQUEwQyxHQUFHO0lBQ3hEOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9pbW11bml6YXRpb24tZXZhbHVhdGlvbi10YXJnZXQtZGlzZWFzZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSBkaXNlYXNlIHRoYXQgdGhlIGV2YWx1YXRpb24gaXMgYWdhaW5zdC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUgYW5kIGluY2x1ZGVzIHRoZSBTTk9NRUQgQ1QgY29uY2VwdHMgZnJvbSB0aGUgNjQ1NzIwMDEgKERpc2Vhc2UpIGhpZXJhcmNoeS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJbW11bml6YXRpb25FdmFsdWF0aW9uVGFyZ2V0RGlzZWFzZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTQxODkwMDRcclxuICAgKi9cclxuICBWQUwxNDE4OTAwNDogbmV3IENvZGluZyh7XHJcbiAgICBjb2RlOiBcIjE0MTg5MDA0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE4NTcwMDVcclxuICAgKi9cclxuICBWQUwxODU3MDA1OiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiMTg1NzAwNVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiAyNzgzNjAwN1xyXG4gICAqL1xyXG4gIFZBTDI3ODM2MDA3OiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiMjc4MzYwMDdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMzY2NTMwMDBcclxuICAgKi9cclxuICBWQUwzNjY1MzAwMDogbmV3IENvZGluZyh7XHJcbiAgICBjb2RlOiBcIjM2NjUzMDAwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDM2OTg5MDA1XHJcbiAgICovXHJcbiAgVkFMMzY5ODkwMDU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIzNjk4OTAwNVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzOTc0MzAwMDNcclxuICAgKi9cclxuICBWQUwzOTc0MzAwMDM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIzOTc0MzAwMDNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMzk4MTAyMDA5XHJcbiAgICovXHJcbiAgVkFMMzk4MTAyMDA5OiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiMzk4MTAyMDA5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDcwOTQxMDAwM1xyXG4gICAqL1xyXG4gIFZBTDcwOTQxMDAwMzogbmV3IENvZGluZyh7XHJcbiAgICBjb2RlOiBcIjcwOTQxMDAwM1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiA3NjkwMjAwNlxyXG4gICAqL1xyXG4gIFZBTDc2OTAyMDA2OiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiNzY5MDIwMDZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSBkaXNlYXNlIHRoYXQgdGhlIGV2YWx1YXRpb24gaXMgYWdhaW5zdC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUgYW5kIGluY2x1ZGVzIHRoZSBTTk9NRUQgQ1QgY29uY2VwdHMgZnJvbSB0aGUgNjQ1NzIwMDEgKERpc2Vhc2UpIGhpZXJhcmNoeS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltbXVuaXphdGlvbkV2YWx1YXRpb25UYXJnZXREaXNlYXNlQ29kaW5nVHlwZSA9IHR5cGVvZiBJbW11bml6YXRpb25FdmFsdWF0aW9uVGFyZ2V0RGlzZWFzZUNvZGluZ3M7XHJcbiJdfQ==