// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/item-type|4.0.1
/**
 * Distinguishes groups from questions and display text and indicates data type for questions.
 */
export const ItemTypeCodes = {
    /**
     * attachment: Question with binary content such as an image, PDF, etc. as an answer (valueAttachment).
     */
    Attachment: "attachment",
    /**
     * boolean: Question with a yes/no answer (valueBoolean).
     */
    Boolean: "boolean",
    /**
     * choice: Question with a Coding drawn from a list of possible answers (specified in either the answerOption property, or via the valueset referenced in the answerValueSet property) as an answer (valueCoding).
     */
    Choice: "choice",
    /**
     * date: Question with a date answer (valueDate).
     */
    Date: "date",
    /**
     * dateTime: Question with a date and time answer (valueDateTime).
     */
    DateTime: "dateTime",
    /**
     * decimal: Question with is a real number answer (valueDecimal).
     */
    Decimal: "decimal",
    /**
     * display: Text for display that will not capture an answer or have child items.
     */
    Display: "display",
    /**
     * group: An item with no direct answer but should have at least one child item.
     */
    Group: "group",
    /**
     * integer: Question with an integer answer (valueInteger).
     */
    Integer: "integer",
    /**
     * open-choice: Answer is a Coding drawn from a list of possible answers (as with the choice type) or a free-text entry in a string (valueCoding or valueString).
     */
    OpenChoice: "open-choice",
    /**
     * quantity: Question with a combination of a numeric value and unit, potentially with a comparator (&lt;, &gt;, etc.) as an answer. (valueQuantity) There is an extension 'http://hl7.org/fhir/StructureDefinition/questionnaire-unit' that can be used to define what unit should be captured (or the unit that has a ucum conversion from the provided unit).
     */
    Quantity: "quantity",
    /**
     * question: An item that defines a specific answer to be captured, and which may have child items. (the answer provided in the QuestionnaireResponse should be of the defined datatype).
     */
    Question: "question",
    /**
     * reference: Question with a reference to another resource (practitioner, organization, etc.) as an answer (valueReference).
     */
    Reference: "reference",
    /**
     * string: Question with a short (few words to short sentence) free-text entry answer (valueString).
     */
    String: "string",
    /**
     * text: Question with a long (potentially multi-paragraph) free-text entry answer (valueString).
     */
    Text: "text",
    /**
     * time: Question with a time (hour:minute:second) answer independent of date. (valueTime).
     */
    Time: "time",
    /**
     * url: Question with a URL (website, FTP site, etc.) answer (valueUri).
     */
    Url: "url",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRlbVR5cGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvSXRlbVR5cGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw4REFBOEQ7QUFFOUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUc7SUFDM0I7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtJQUN4Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLGFBQWE7SUFDekI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2l0ZW0tdHlwZXw0LjAuMVxyXG5cclxuLyoqXHJcbiAqIERpc3Rpbmd1aXNoZXMgZ3JvdXBzIGZyb20gcXVlc3Rpb25zIGFuZCBkaXNwbGF5IHRleHQgYW5kIGluZGljYXRlcyBkYXRhIHR5cGUgZm9yIHF1ZXN0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJdGVtVHlwZUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGF0dGFjaG1lbnQ6IFF1ZXN0aW9uIHdpdGggYmluYXJ5IGNvbnRlbnQgc3VjaCBhcyBhbiBpbWFnZSwgUERGLCBldGMuIGFzIGFuIGFuc3dlciAodmFsdWVBdHRhY2htZW50KS5cclxuICAgKi9cclxuICBBdHRhY2htZW50OiBcImF0dGFjaG1lbnRcIixcclxuICAvKipcclxuICAgKiBib29sZWFuOiBRdWVzdGlvbiB3aXRoIGEgeWVzL25vIGFuc3dlciAodmFsdWVCb29sZWFuKS5cclxuICAgKi9cclxuICBCb29sZWFuOiBcImJvb2xlYW5cIixcclxuICAvKipcclxuICAgKiBjaG9pY2U6IFF1ZXN0aW9uIHdpdGggYSBDb2RpbmcgZHJhd24gZnJvbSBhIGxpc3Qgb2YgcG9zc2libGUgYW5zd2VycyAoc3BlY2lmaWVkIGluIGVpdGhlciB0aGUgYW5zd2VyT3B0aW9uIHByb3BlcnR5LCBvciB2aWEgdGhlIHZhbHVlc2V0IHJlZmVyZW5jZWQgaW4gdGhlIGFuc3dlclZhbHVlU2V0IHByb3BlcnR5KSBhcyBhbiBhbnN3ZXIgKHZhbHVlQ29kaW5nKS5cclxuICAgKi9cclxuICBDaG9pY2U6IFwiY2hvaWNlXCIsXHJcbiAgLyoqXHJcbiAgICogZGF0ZTogUXVlc3Rpb24gd2l0aCBhIGRhdGUgYW5zd2VyICh2YWx1ZURhdGUpLlxyXG4gICAqL1xyXG4gIERhdGU6IFwiZGF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIGRhdGVUaW1lOiBRdWVzdGlvbiB3aXRoIGEgZGF0ZSBhbmQgdGltZSBhbnN3ZXIgKHZhbHVlRGF0ZVRpbWUpLlxyXG4gICAqL1xyXG4gIERhdGVUaW1lOiBcImRhdGVUaW1lXCIsXHJcbiAgLyoqXHJcbiAgICogZGVjaW1hbDogUXVlc3Rpb24gd2l0aCBpcyBhIHJlYWwgbnVtYmVyIGFuc3dlciAodmFsdWVEZWNpbWFsKS5cclxuICAgKi9cclxuICBEZWNpbWFsOiBcImRlY2ltYWxcIixcclxuICAvKipcclxuICAgKiBkaXNwbGF5OiBUZXh0IGZvciBkaXNwbGF5IHRoYXQgd2lsbCBub3QgY2FwdHVyZSBhbiBhbnN3ZXIgb3IgaGF2ZSBjaGlsZCBpdGVtcy5cclxuICAgKi9cclxuICBEaXNwbGF5OiBcImRpc3BsYXlcIixcclxuICAvKipcclxuICAgKiBncm91cDogQW4gaXRlbSB3aXRoIG5vIGRpcmVjdCBhbnN3ZXIgYnV0IHNob3VsZCBoYXZlIGF0IGxlYXN0IG9uZSBjaGlsZCBpdGVtLlxyXG4gICAqL1xyXG4gIEdyb3VwOiBcImdyb3VwXCIsXHJcbiAgLyoqXHJcbiAgICogaW50ZWdlcjogUXVlc3Rpb24gd2l0aCBhbiBpbnRlZ2VyIGFuc3dlciAodmFsdWVJbnRlZ2VyKS5cclxuICAgKi9cclxuICBJbnRlZ2VyOiBcImludGVnZXJcIixcclxuICAvKipcclxuICAgKiBvcGVuLWNob2ljZTogQW5zd2VyIGlzIGEgQ29kaW5nIGRyYXduIGZyb20gYSBsaXN0IG9mIHBvc3NpYmxlIGFuc3dlcnMgKGFzIHdpdGggdGhlIGNob2ljZSB0eXBlKSBvciBhIGZyZWUtdGV4dCBlbnRyeSBpbiBhIHN0cmluZyAodmFsdWVDb2Rpbmcgb3IgdmFsdWVTdHJpbmcpLlxyXG4gICAqL1xyXG4gIE9wZW5DaG9pY2U6IFwib3Blbi1jaG9pY2VcIixcclxuICAvKipcclxuICAgKiBxdWFudGl0eTogUXVlc3Rpb24gd2l0aCBhIGNvbWJpbmF0aW9uIG9mIGEgbnVtZXJpYyB2YWx1ZSBhbmQgdW5pdCwgcG90ZW50aWFsbHkgd2l0aCBhIGNvbXBhcmF0b3IgKCZsdDssICZndDssIGV0Yy4pIGFzIGFuIGFuc3dlci4gKHZhbHVlUXVhbnRpdHkpIFRoZXJlIGlzIGFuIGV4dGVuc2lvbiAnaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3F1ZXN0aW9ubmFpcmUtdW5pdCcgdGhhdCBjYW4gYmUgdXNlZCB0byBkZWZpbmUgd2hhdCB1bml0IHNob3VsZCBiZSBjYXB0dXJlZCAob3IgdGhlIHVuaXQgdGhhdCBoYXMgYSB1Y3VtIGNvbnZlcnNpb24gZnJvbSB0aGUgcHJvdmlkZWQgdW5pdCkuXHJcbiAgICovXHJcbiAgUXVhbnRpdHk6IFwicXVhbnRpdHlcIixcclxuICAvKipcclxuICAgKiBxdWVzdGlvbjogQW4gaXRlbSB0aGF0IGRlZmluZXMgYSBzcGVjaWZpYyBhbnN3ZXIgdG8gYmUgY2FwdHVyZWQsIGFuZCB3aGljaCBtYXkgaGF2ZSBjaGlsZCBpdGVtcy4gKHRoZSBhbnN3ZXIgcHJvdmlkZWQgaW4gdGhlIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSBzaG91bGQgYmUgb2YgdGhlIGRlZmluZWQgZGF0YXR5cGUpLlxyXG4gICAqL1xyXG4gIFF1ZXN0aW9uOiBcInF1ZXN0aW9uXCIsXHJcbiAgLyoqXHJcbiAgICogcmVmZXJlbmNlOiBRdWVzdGlvbiB3aXRoIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgcmVzb3VyY2UgKHByYWN0aXRpb25lciwgb3JnYW5pemF0aW9uLCBldGMuKSBhcyBhbiBhbnN3ZXIgKHZhbHVlUmVmZXJlbmNlKS5cclxuICAgKi9cclxuICBSZWZlcmVuY2U6IFwicmVmZXJlbmNlXCIsXHJcbiAgLyoqXHJcbiAgICogc3RyaW5nOiBRdWVzdGlvbiB3aXRoIGEgc2hvcnQgKGZldyB3b3JkcyB0byBzaG9ydCBzZW50ZW5jZSkgZnJlZS10ZXh0IGVudHJ5IGFuc3dlciAodmFsdWVTdHJpbmcpLlxyXG4gICAqL1xyXG4gIFN0cmluZzogXCJzdHJpbmdcIixcclxuICAvKipcclxuICAgKiB0ZXh0OiBRdWVzdGlvbiB3aXRoIGEgbG9uZyAocG90ZW50aWFsbHkgbXVsdGktcGFyYWdyYXBoKSBmcmVlLXRleHQgZW50cnkgYW5zd2VyICh2YWx1ZVN0cmluZykuXHJcbiAgICovXHJcbiAgVGV4dDogXCJ0ZXh0XCIsXHJcbiAgLyoqXHJcbiAgICogdGltZTogUXVlc3Rpb24gd2l0aCBhIHRpbWUgKGhvdXI6bWludXRlOnNlY29uZCkgYW5zd2VyIGluZGVwZW5kZW50IG9mIGRhdGUuICh2YWx1ZVRpbWUpLlxyXG4gICAqL1xyXG4gIFRpbWU6IFwidGltZVwiLFxyXG4gIC8qKlxyXG4gICAqIHVybDogUXVlc3Rpb24gd2l0aCBhIFVSTCAod2Vic2l0ZSwgRlRQIHNpdGUsIGV0Yy4pIGFuc3dlciAodmFsdWVVcmkpLlxyXG4gICAqL1xyXG4gIFVybDogXCJ1cmxcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBEaXN0aW5ndWlzaGVzIGdyb3VwcyBmcm9tIHF1ZXN0aW9ucyBhbmQgZGlzcGxheSB0ZXh0IGFuZCBpbmRpY2F0ZXMgZGF0YSB0eXBlIGZvciBxdWVzdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJdGVtVHlwZUNvZGVUeXBlID0gdHlwZW9mIEl0ZW1UeXBlQ29kZXNba2V5b2YgdHlwZW9mIEl0ZW1UeXBlQ29kZXNdO1xyXG4iXX0=