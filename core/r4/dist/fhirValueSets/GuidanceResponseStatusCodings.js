// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/guidance-response-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The status of a guidance response.
 */
export const GuidanceResponseStatusCodings = {
    /**
     * data-requested: The request was processed successfully, but more data may result in a more complete evaluation.
     */
    DataRequested: new Coding({
        display: "Data Requested",
        code: "data-requested",
        system: "http://hl7.org/fhir/guidance-response-status",
    }),
    /**
     * data-required: The request was processed, but more data is required to complete the evaluation.
     */
    DataRequired: new Coding({
        display: "Data Required",
        code: "data-required",
        system: "http://hl7.org/fhir/guidance-response-status",
    }),
    /**
     * entered-in-error: The response was entered in error.
     */
    EnteredInError: new Coding({
        display: "Entered In Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/guidance-response-status",
    }),
    /**
     * failure: The request was not processed successfully.
     */
    Failure: new Coding({
        display: "Failure",
        code: "failure",
        system: "http://hl7.org/fhir/guidance-response-status",
    }),
    /**
     * in-progress: The request is currently being processed.
     */
    InProgress: new Coding({
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/guidance-response-status",
    }),
    /**
     * success: The request was processed successfully.
     */
    Success: new Coding({
        display: "Success",
        code: "success",
        system: "http://hl7.org/fhir/guidance-response-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VpZGFuY2VSZXNwb25zZVN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0d1aWRhbmNlUmVzcG9uc2VTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQUU3RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQzs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsOENBQThDO0tBQ3ZELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2d1aWRhbmNlLXJlc3BvbnNlLXN0YXR1c3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHN0YXR1cyBvZiBhIGd1aWRhbmNlIHJlc3BvbnNlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEd1aWRhbmNlUmVzcG9uc2VTdGF0dXNDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtcmVxdWVzdGVkOiBUaGUgcmVxdWVzdCB3YXMgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseSwgYnV0IG1vcmUgZGF0YSBtYXkgcmVzdWx0IGluIGEgbW9yZSBjb21wbGV0ZSBldmFsdWF0aW9uLlxyXG4gICAqL1xyXG4gIERhdGFSZXF1ZXN0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEYXRhIFJlcXVlc3RlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLXJlcXVlc3RlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGFuY2UtcmVzcG9uc2Utc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZGF0YS1yZXF1aXJlZDogVGhlIHJlcXVlc3Qgd2FzIHByb2Nlc3NlZCwgYnV0IG1vcmUgZGF0YSBpcyByZXF1aXJlZCB0byBjb21wbGV0ZSB0aGUgZXZhbHVhdGlvbi5cclxuICAgKi9cclxuICBEYXRhUmVxdWlyZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEYXRhIFJlcXVpcmVkXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtcmVxdWlyZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRhbmNlLXJlc3BvbnNlLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSByZXNwb25zZSB3YXMgZW50ZXJlZCBpbiBlcnJvci5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgSW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGFuY2UtcmVzcG9uc2Utc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZmFpbHVyZTogVGhlIHJlcXVlc3Qgd2FzIG5vdCBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LlxyXG4gICAqL1xyXG4gIEZhaWx1cmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGYWlsdXJlXCIsXHJcbiAgICBjb2RlOiBcImZhaWx1cmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRhbmNlLXJlc3BvbnNlLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgcmVxdWVzdCBpcyBjdXJyZW50bHkgYmVpbmcgcHJvY2Vzc2VkLlxyXG4gICAqL1xyXG4gIEluUHJvZ3Jlc3M6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJpbi1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGFuY2UtcmVzcG9uc2Utc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc3VjY2VzczogVGhlIHJlcXVlc3Qgd2FzIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuXHJcbiAgICovXHJcbiAgU3VjY2VzczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN1Y2Nlc3NcIixcclxuICAgIGNvZGU6IFwic3VjY2Vzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGFuY2UtcmVzcG9uc2Utc3RhdHVzXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHN0YXR1cyBvZiBhIGd1aWRhbmNlIHJlc3BvbnNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR3VpZGFuY2VSZXNwb25zZVN0YXR1c0NvZGluZ1R5cGUgPSB0eXBlb2YgR3VpZGFuY2VSZXNwb25zZVN0YXR1c0NvZGluZ3M7XHJcbiJdfQ==