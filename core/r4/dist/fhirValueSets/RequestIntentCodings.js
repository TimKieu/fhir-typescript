// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/request-intent|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes indicating the degree of authority/intentionality associated with a request.
 */
export const RequestIntentCodings = {
    /**
     * directive: The request represents a legally binding instruction authored by a Patient or RelatedPerson.
     */
    Directive: new Coding({
        display: "Directive",
        code: "directive",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * filler-order: The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order.
     */
    FillerOrder: new Coding({
        display: "Filler Order",
        code: "filler-order",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * instance-order: An order created in fulfillment of a broader order that represents the authorization for a single activity occurrence.  E.g. The administration of a single dose of a drug.
     */
    InstanceOrder: new Coding({
        display: "Instance Order",
        code: "instance-order",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * option: The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or other constraints among a set of requests.  Refer to [[[RequestGroup]]] for additional information on how this status is used.
     */
    Option: new Coding({
        display: "Option",
        code: "option",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * order: The request represents a request/demand and authorization for action by a Practitioner.
     */
    Order: new Coding({
        display: "Order",
        code: "order",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * original-order: The request represents an original authorization for action.
     */
    OriginalOrder: new Coding({
        display: "Original Order",
        code: "original-order",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * plan: The request represents an intention to ensure something occurs without providing an authorization for others to act.
     */
    Plan: new Coding({
        display: "Plan",
        code: "plan",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * proposal: The request is a suggestion made by someone/something that does not have an intention to ensure it occurs and without providing an authorization to act.
     */
    Proposal: new Coding({
        display: "Proposal",
        code: "proposal",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * reflex-order: The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization.
     */
    ReflexOrder: new Coding({
        display: "Reflex Order",
        code: "reflex-order",
        system: "http://hl7.org/fhir/request-intent",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdEludGVudENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1JlcXVlc3RJbnRlbnRDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQUVuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQzs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLG9DQUFvQztLQUM3QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3JlcXVlc3QtaW50ZW50fDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpbmRpY2F0aW5nIHRoZSBkZWdyZWUgb2YgYXV0aG9yaXR5L2ludGVudGlvbmFsaXR5IGFzc29jaWF0ZWQgd2l0aCBhIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUmVxdWVzdEludGVudENvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogZGlyZWN0aXZlOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgbGVnYWxseSBiaW5kaW5nIGluc3RydWN0aW9uIGF1dGhvcmVkIGJ5IGEgUGF0aWVudCBvciBSZWxhdGVkUGVyc29uLlxyXG4gICAqL1xyXG4gIERpcmVjdGl2ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRpcmVjdGl2ZVwiLFxyXG4gICAgY29kZTogXCJkaXJlY3RpdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZmlsbGVyLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSB2aWV3IG9mIGFuIGF1dGhvcml6YXRpb24gaW5zdGFudGlhdGVkIGJ5IGEgZnVsZmlsbGluZyBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBmdWxmaWxsZXIncyBpbnRlbnRpb24gdG8gYWN0IHVwb24gYSBzdWJtaXR0ZWQgb3JkZXIuXHJcbiAgICovXHJcbiAgRmlsbGVyT3JkZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGaWxsZXIgT3JkZXJcIixcclxuICAgIGNvZGU6IFwiZmlsbGVyLW9yZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlLW9yZGVyOiBBbiBvcmRlciBjcmVhdGVkIGluIGZ1bGZpbGxtZW50IG9mIGEgYnJvYWRlciBvcmRlciB0aGF0IHJlcHJlc2VudHMgdGhlIGF1dGhvcml6YXRpb24gZm9yIGEgc2luZ2xlIGFjdGl2aXR5IG9jY3VycmVuY2UuICBFLmcuIFRoZSBhZG1pbmlzdHJhdGlvbiBvZiBhIHNpbmdsZSBkb3NlIG9mIGEgZHJ1Zy5cclxuICAgKi9cclxuICBJbnN0YW5jZU9yZGVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW5zdGFuY2UgT3JkZXJcIixcclxuICAgIGNvZGU6IFwiaW5zdGFuY2Utb3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb3B0aW9uOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgY29tcG9uZW50IG9yIG9wdGlvbiBmb3IgYSBSZXF1ZXN0R3JvdXAgdGhhdCBlc3RhYmxpc2hlcyB0aW1pbmcsIGNvbmRpdGlvbmFsaXR5IGFuZC9vciBvdGhlciBjb25zdHJhaW50cyBhbW9uZyBhIHNldCBvZiByZXF1ZXN0cy4gIFJlZmVyIHRvIFtbW1JlcXVlc3RHcm91cF1dXSBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBvbiBob3cgdGhpcyBzdGF0dXMgaXMgdXNlZC5cclxuICAgKi9cclxuICBPcHRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPcHRpb25cIixcclxuICAgIGNvZGU6IFwib3B0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGEgcmVxdWVzdC9kZW1hbmQgYW5kIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvbiBieSBhIFByYWN0aXRpb25lci5cclxuICAgKi9cclxuICBPcmRlcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9yZGVyXCIsXHJcbiAgICBjb2RlOiBcIm9yZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG9yaWdpbmFsLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIG9yaWdpbmFsIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvbi5cclxuICAgKi9cclxuICBPcmlnaW5hbE9yZGVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT3JpZ2luYWwgT3JkZXJcIixcclxuICAgIGNvZGU6IFwib3JpZ2luYWwtb3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcGxhbjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyBhbiBpbnRlbnRpb24gdG8gZW5zdXJlIHNvbWV0aGluZyBvY2N1cnMgd2l0aG91dCBwcm92aWRpbmcgYW4gYXV0aG9yaXphdGlvbiBmb3Igb3RoZXJzIHRvIGFjdC5cclxuICAgKi9cclxuICBQbGFuOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUGxhblwiLFxyXG4gICAgY29kZTogXCJwbGFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHByb3Bvc2FsOiBUaGUgcmVxdWVzdCBpcyBhIHN1Z2dlc3Rpb24gbWFkZSBieSBzb21lb25lL3NvbWV0aGluZyB0aGF0IGRvZXMgbm90IGhhdmUgYW4gaW50ZW50aW9uIHRvIGVuc3VyZSBpdCBvY2N1cnMgYW5kIHdpdGhvdXQgcHJvdmlkaW5nIGFuIGF1dGhvcml6YXRpb24gdG8gYWN0LlxyXG4gICAqL1xyXG4gIFByb3Bvc2FsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUHJvcG9zYWxcIixcclxuICAgIGNvZGU6IFwicHJvcG9zYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcmVmbGV4LW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIGFuIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHN1cHBsZW1lbnRhbCBhdXRob3JpemF0aW9uIGZvciBhY3Rpb24gYmFzZWQgb24gYSBwYXJlbnQgYXV0aG9yaXphdGlvbiB0b2dldGhlciB3aXRoIGluaXRpYWwgcmVzdWx0cyBvZiB0aGUgYWN0aW9uIHRha2VuIGFnYWluc3QgdGhhdCBwYXJlbnQgYXV0aG9yaXphdGlvbi5cclxuICAgKi9cclxuICBSZWZsZXhPcmRlcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlZmxleCBPcmRlclwiLFxyXG4gICAgY29kZTogXCJyZWZsZXgtb3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29kZXMgaW5kaWNhdGluZyB0aGUgZGVncmVlIG9mIGF1dGhvcml0eS9pbnRlbnRpb25hbGl0eSBhc3NvY2lhdGVkIHdpdGggYSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVxdWVzdEludGVudENvZGluZ1R5cGUgPSB0eXBlb2YgUmVxdWVzdEludGVudENvZGluZ3M7XHJcbiJdfQ==