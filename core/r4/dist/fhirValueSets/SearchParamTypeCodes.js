// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-param-type|4.0.1
/**
 * Data types allowed to be used for search parameters.
 */
export const SearchParamTypeCodes = {
    /**
     * composite: A composite search parameter that combines a search on two values together.
     */
    Composite: "composite",
    /**
     * date: Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.
     */
    DateDateTime: "date",
    /**
     * number: Search parameter SHALL be a number (a whole number, or a decimal).
     */
    Number: "number",
    /**
     * quantity: A search parameter that searches on a quantity.
     */
    Quantity: "quantity",
    /**
     * reference: A reference to another resource (Reference or canonical).
     */
    Reference: "reference",
    /**
     * special: Special logic applies to this parameter per the description of the search parameter.
     */
    Special: "special",
    /**
     * string: Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.
     */
    String: "string",
    /**
     * token: Search parameter on a coded element or identifier. May be used to search through the text, display, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.
     */
    Token: "token",
    /**
     * uri: A search parameter that searches on a URI (RFC 3986).
     */
    URI: "uri",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoUGFyYW1UeXBlQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlYXJjaFBhcmFtVHlwZUNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHNFQUFzRTtBQUV0RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHO0lBQ2xDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxZQUFZLEVBQUUsTUFBTTtJQUNwQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztJQUNkOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NlYXJjaC1wYXJhbS10eXBlfDQuMC4xXHJcblxyXG4vKipcclxuICogRGF0YSB0eXBlcyBhbGxvd2VkIHRvIGJlIHVzZWQgZm9yIHNlYXJjaCBwYXJhbWV0ZXJzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNlYXJjaFBhcmFtVHlwZUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbXBvc2l0ZTogQSBjb21wb3NpdGUgc2VhcmNoIHBhcmFtZXRlciB0aGF0IGNvbWJpbmVzIGEgc2VhcmNoIG9uIHR3byB2YWx1ZXMgdG9nZXRoZXIuXHJcbiAgICovXHJcbiAgQ29tcG9zaXRlOiBcImNvbXBvc2l0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIGRhdGU6IFNlYXJjaCBwYXJhbWV0ZXIgaXMgb24gYSBkYXRlL3RpbWUuIFRoZSBkYXRlIGZvcm1hdCBpcyB0aGUgc3RhbmRhcmQgWE1MIGZvcm1hdCwgdGhvdWdoIG90aGVyIGZvcm1hdHMgbWF5IGJlIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBEYXRlRGF0ZVRpbWU6IFwiZGF0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIG51bWJlcjogU2VhcmNoIHBhcmFtZXRlciBTSEFMTCBiZSBhIG51bWJlciAoYSB3aG9sZSBudW1iZXIsIG9yIGEgZGVjaW1hbCkuXHJcbiAgICovXHJcbiAgTnVtYmVyOiBcIm51bWJlclwiLFxyXG4gIC8qKlxyXG4gICAqIHF1YW50aXR5OiBBIHNlYXJjaCBwYXJhbWV0ZXIgdGhhdCBzZWFyY2hlcyBvbiBhIHF1YW50aXR5LlxyXG4gICAqL1xyXG4gIFF1YW50aXR5OiBcInF1YW50aXR5XCIsXHJcbiAgLyoqXHJcbiAgICogcmVmZXJlbmNlOiBBIHJlZmVyZW5jZSB0byBhbm90aGVyIHJlc291cmNlIChSZWZlcmVuY2Ugb3IgY2Fub25pY2FsKS5cclxuICAgKi9cclxuICBSZWZlcmVuY2U6IFwicmVmZXJlbmNlXCIsXHJcbiAgLyoqXHJcbiAgICogc3BlY2lhbDogU3BlY2lhbCBsb2dpYyBhcHBsaWVzIHRvIHRoaXMgcGFyYW1ldGVyIHBlciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHNlYXJjaCBwYXJhbWV0ZXIuXHJcbiAgICovXHJcbiAgU3BlY2lhbDogXCJzcGVjaWFsXCIsXHJcbiAgLyoqXHJcbiAgICogc3RyaW5nOiBTZWFyY2ggcGFyYW1ldGVyIGlzIGEgc2ltcGxlIHN0cmluZywgbGlrZSBhIG5hbWUgcGFydC4gU2VhcmNoIGlzIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGFjY2VudC1pbnNlbnNpdGl2ZS4gTWF5IG1hdGNoIGp1c3QgdGhlIHN0YXJ0IG9mIGEgc3RyaW5nLiBTdHJpbmcgcGFyYW1ldGVycyBtYXkgY29udGFpbiBzcGFjZXMuXHJcbiAgICovXHJcbiAgU3RyaW5nOiBcInN0cmluZ1wiLFxyXG4gIC8qKlxyXG4gICAqIHRva2VuOiBTZWFyY2ggcGFyYW1ldGVyIG9uIGEgY29kZWQgZWxlbWVudCBvciBpZGVudGlmaWVyLiBNYXkgYmUgdXNlZCB0byBzZWFyY2ggdGhyb3VnaCB0aGUgdGV4dCwgZGlzcGxheSwgY29kZSBhbmQgY29kZS9jb2Rlc3lzdGVtIChmb3IgY29kZXMpIGFuZCBsYWJlbCwgc3lzdGVtIGFuZCBrZXkgKGZvciBpZGVudGlmaWVyKS4gSXRzIHZhbHVlIGlzIGVpdGhlciBhIHN0cmluZyBvciBhIHBhaXIgb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgc2VwYXJhdGVkIGJ5IGEgXCJ8XCIsIGRlcGVuZGluZyBvbiB0aGUgbW9kaWZpZXIgdXNlZC5cclxuICAgKi9cclxuICBUb2tlbjogXCJ0b2tlblwiLFxyXG4gIC8qKlxyXG4gICAqIHVyaTogQSBzZWFyY2ggcGFyYW1ldGVyIHRoYXQgc2VhcmNoZXMgb24gYSBVUkkgKFJGQyAzOTg2KS5cclxuICAgKi9cclxuICBVUkk6IFwidXJpXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogRGF0YSB0eXBlcyBhbGxvd2VkIHRvIGJlIHVzZWQgZm9yIHNlYXJjaCBwYXJhbWV0ZXJzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU2VhcmNoUGFyYW1UeXBlQ29kZVR5cGUgPSB0eXBlb2YgU2VhcmNoUGFyYW1UeXBlQ29kZXNba2V5b2YgdHlwZW9mIFNlYXJjaFBhcmFtVHlwZUNvZGVzXTtcclxuIl19