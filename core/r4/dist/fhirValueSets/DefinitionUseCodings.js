// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/definition-use|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Structure Definition Use Codes / Keywords
 */
export const DefinitionUseCodings = {
    /**
     * archetype: This structure captures an analysis of a domain
     */
    DomainAnalysisModel: new Coding({
        display: "Domain Analysis Model",
        code: "archetype",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    }),
    /**
     * custom-resource: This structure is intended to be treated like a FHIR resource (e.g. on the FHIR API)
     */
    CustomResource: new Coding({
        display: "Custom Resource",
        code: "custom-resource",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    }),
    /**
     * dam: This structure captures an analysis of a domain
     */
    DomainAnalysisModelDam: new Coding({
        display: "Domain Analysis Model",
        code: "dam",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    }),
    /**
     * fhir-structure: This structure is defined as part of the base FHIR Specification
     */
    FHIRStructure: new Coding({
        display: "FHIR Structure",
        code: "fhir-structure",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    }),
    /**
     * template: This structure is a template (n.b: 'template' has many meanings)
     */
    Template: new Coding({
        display: "Template",
        code: "template",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    }),
    /**
     * wire-format: This structure represents and existing structure (e.g. CDA, HL7 v2)
     */
    WireFormat: new Coding({
        display: "Wire Format",
        code: "wire-format",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmaW5pdGlvblVzZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0RlZmluaXRpb25Vc2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQUVuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQzs7T0FFRztJQUNILG1CQUFtQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzlCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakMsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2RlZmluaXRpb24tdXNlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBTdHJ1Y3R1cmUgRGVmaW5pdGlvbiBVc2UgQ29kZXMgLyBLZXl3b3Jkc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERlZmluaXRpb25Vc2VDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFyY2hldHlwZTogVGhpcyBzdHJ1Y3R1cmUgY2FwdHVyZXMgYW4gYW5hbHlzaXMgb2YgYSBkb21haW5cclxuICAgKi9cclxuICBEb21haW5BbmFseXNpc01vZGVsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRG9tYWluIEFuYWx5c2lzIE1vZGVsXCIsXHJcbiAgICBjb2RlOiBcImFyY2hldHlwZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGVmaW5pdGlvbi11c2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjdXN0b20tcmVzb3VyY2U6IFRoaXMgc3RydWN0dXJlIGlzIGludGVuZGVkIHRvIGJlIHRyZWF0ZWQgbGlrZSBhIEZISVIgcmVzb3VyY2UgKGUuZy4gb24gdGhlIEZISVIgQVBJKVxyXG4gICAqL1xyXG4gIEN1c3RvbVJlc291cmNlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ3VzdG9tIFJlc291cmNlXCIsXHJcbiAgICBjb2RlOiBcImN1c3RvbS1yZXNvdXJjZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGVmaW5pdGlvbi11c2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkYW06IFRoaXMgc3RydWN0dXJlIGNhcHR1cmVzIGFuIGFuYWx5c2lzIG9mIGEgZG9tYWluXHJcbiAgICovXHJcbiAgRG9tYWluQW5hbHlzaXNNb2RlbERhbTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRvbWFpbiBBbmFseXNpcyBNb2RlbFwiLFxyXG4gICAgY29kZTogXCJkYW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RlZmluaXRpb24tdXNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZmhpci1zdHJ1Y3R1cmU6IFRoaXMgc3RydWN0dXJlIGlzIGRlZmluZWQgYXMgcGFydCBvZiB0aGUgYmFzZSBGSElSIFNwZWNpZmljYXRpb25cclxuICAgKi9cclxuICBGSElSU3RydWN0dXJlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRkhJUiBTdHJ1Y3R1cmVcIixcclxuICAgIGNvZGU6IFwiZmhpci1zdHJ1Y3R1cmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RlZmluaXRpb24tdXNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdGVtcGxhdGU6IFRoaXMgc3RydWN0dXJlIGlzIGEgdGVtcGxhdGUgKG4uYjogJ3RlbXBsYXRlJyBoYXMgbWFueSBtZWFuaW5ncylcclxuICAgKi9cclxuICBUZW1wbGF0ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlRlbXBsYXRlXCIsXHJcbiAgICBjb2RlOiBcInRlbXBsYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZWZpbml0aW9uLXVzZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHdpcmUtZm9ybWF0OiBUaGlzIHN0cnVjdHVyZSByZXByZXNlbnRzIGFuZCBleGlzdGluZyBzdHJ1Y3R1cmUgKGUuZy4gQ0RBLCBITDcgdjIpXHJcbiAgICovXHJcbiAgV2lyZUZvcm1hdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIldpcmUgRm9ybWF0XCIsXHJcbiAgICBjb2RlOiBcIndpcmUtZm9ybWF0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZWZpbml0aW9uLXVzZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFN0cnVjdHVyZSBEZWZpbml0aW9uIFVzZSBDb2RlcyAvIEtleXdvcmRzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEZWZpbml0aW9uVXNlQ29kaW5nVHlwZSA9IHR5cGVvZiBEZWZpbml0aW9uVXNlQ29kaW5ncztcclxuIl19