// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/definition-use|4.0.1
/**
 * Structure Definition Use Codes / Keywords
 */
export const DefinitionUseCodings = {
    /**
     * archetype: This structure captures an analysis of a domain
     */
    DomainAnalysisModel: {
        display: "Domain Analysis Model",
        code: "archetype",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * custom-resource: This structure is intended to be treated like a FHIR resource (e.g. on the FHIR API)
     */
    CustomResource: {
        display: "Custom Resource",
        code: "custom-resource",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * dam: This structure captures an analysis of a domain
     */
    DomainAnalysisModelDam: {
        display: "Domain Analysis Model",
        code: "dam",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * fhir-structure: This structure is defined as part of the base FHIR Specification
     */
    FHIRStructure: {
        display: "FHIR Structure",
        code: "fhir-structure",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * template: This structure is a template (n.b: 'template' has many meanings)
     */
    Template: {
        display: "Template",
        code: "template",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
    /**
     * wire-format: This structure represents and existing structure (e.g. CDA, HL7 v2)
     */
    WireFormat: {
        display: "Wire Format",
        code: "wire-format",
        system: "http://terminology.hl7.org/CodeSystem/definition-use",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmaW5pdGlvblVzZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0RlZmluaXRpb25Vc2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQWtDbkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBMkI7SUFDMUQ7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsc0RBQXNEO0tBQy9EO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2RlZmluaXRpb24tdXNlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogU3RydWN0dXJlIERlZmluaXRpb24gVXNlIENvZGVzIC8gS2V5d29yZHNcclxuICovXHJcbmV4cG9ydCB0eXBlIERlZmluaXRpb25Vc2VDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFyY2hldHlwZTogVGhpcyBzdHJ1Y3R1cmUgY2FwdHVyZXMgYW4gYW5hbHlzaXMgb2YgYSBkb21haW5cclxuICAgKi9cclxuICBEb21haW5BbmFseXNpc01vZGVsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGN1c3RvbS1yZXNvdXJjZTogVGhpcyBzdHJ1Y3R1cmUgaXMgaW50ZW5kZWQgdG8gYmUgdHJlYXRlZCBsaWtlIGEgRkhJUiByZXNvdXJjZSAoZS5nLiBvbiB0aGUgRkhJUiBBUEkpXHJcbiAgICovXHJcbiAgQ3VzdG9tUmVzb3VyY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGFtOiBUaGlzIHN0cnVjdHVyZSBjYXB0dXJlcyBhbiBhbmFseXNpcyBvZiBhIGRvbWFpblxyXG4gICAqL1xyXG4gIERvbWFpbkFuYWx5c2lzTW9kZWxEYW06IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZmhpci1zdHJ1Y3R1cmU6IFRoaXMgc3RydWN0dXJlIGlzIGRlZmluZWQgYXMgcGFydCBvZiB0aGUgYmFzZSBGSElSIFNwZWNpZmljYXRpb25cclxuICAgKi9cclxuICBGSElSU3RydWN0dXJlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRlbXBsYXRlOiBUaGlzIHN0cnVjdHVyZSBpcyBhIHRlbXBsYXRlIChuLmI6ICd0ZW1wbGF0ZScgaGFzIG1hbnkgbWVhbmluZ3MpXHJcbiAgICovXHJcbiAgVGVtcGxhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd2lyZS1mb3JtYXQ6IFRoaXMgc3RydWN0dXJlIHJlcHJlc2VudHMgYW5kIGV4aXN0aW5nIHN0cnVjdHVyZSAoZS5nLiBDREEsIEhMNyB2MilcclxuICAgKi9cclxuICBXaXJlRm9ybWF0OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogU3RydWN0dXJlIERlZmluaXRpb24gVXNlIENvZGVzIC8gS2V5d29yZHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBEZWZpbml0aW9uVXNlQ29kaW5nczpEZWZpbml0aW9uVXNlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhcmNoZXR5cGU6IFRoaXMgc3RydWN0dXJlIGNhcHR1cmVzIGFuIGFuYWx5c2lzIG9mIGEgZG9tYWluXHJcbiAgICovXHJcbiAgRG9tYWluQW5hbHlzaXNNb2RlbDoge1xyXG4gICAgZGlzcGxheTogXCJEb21haW4gQW5hbHlzaXMgTW9kZWxcIixcclxuICAgIGNvZGU6IFwiYXJjaGV0eXBlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZWZpbml0aW9uLXVzZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY3VzdG9tLXJlc291cmNlOiBUaGlzIHN0cnVjdHVyZSBpcyBpbnRlbmRlZCB0byBiZSB0cmVhdGVkIGxpa2UgYSBGSElSIHJlc291cmNlIChlLmcuIG9uIHRoZSBGSElSIEFQSSlcclxuICAgKi9cclxuICBDdXN0b21SZXNvdXJjZToge1xyXG4gICAgZGlzcGxheTogXCJDdXN0b20gUmVzb3VyY2VcIixcclxuICAgIGNvZGU6IFwiY3VzdG9tLXJlc291cmNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kZWZpbml0aW9uLXVzZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGFtOiBUaGlzIHN0cnVjdHVyZSBjYXB0dXJlcyBhbiBhbmFseXNpcyBvZiBhIGRvbWFpblxyXG4gICAqL1xyXG4gIERvbWFpbkFuYWx5c2lzTW9kZWxEYW06IHtcclxuICAgIGRpc3BsYXk6IFwiRG9tYWluIEFuYWx5c2lzIE1vZGVsXCIsXHJcbiAgICBjb2RlOiBcImRhbVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGVmaW5pdGlvbi11c2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZoaXItc3RydWN0dXJlOiBUaGlzIHN0cnVjdHVyZSBpcyBkZWZpbmVkIGFzIHBhcnQgb2YgdGhlIGJhc2UgRkhJUiBTcGVjaWZpY2F0aW9uXHJcbiAgICovXHJcbiAgRkhJUlN0cnVjdHVyZToge1xyXG4gICAgZGlzcGxheTogXCJGSElSIFN0cnVjdHVyZVwiLFxyXG4gICAgY29kZTogXCJmaGlyLXN0cnVjdHVyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGVmaW5pdGlvbi11c2VcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHRlbXBsYXRlOiBUaGlzIHN0cnVjdHVyZSBpcyBhIHRlbXBsYXRlIChuLmI6ICd0ZW1wbGF0ZScgaGFzIG1hbnkgbWVhbmluZ3MpXHJcbiAgICovXHJcbiAgVGVtcGxhdGU6IHtcclxuICAgIGRpc3BsYXk6IFwiVGVtcGxhdGVcIixcclxuICAgIGNvZGU6IFwidGVtcGxhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RlZmluaXRpb24tdXNlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB3aXJlLWZvcm1hdDogVGhpcyBzdHJ1Y3R1cmUgcmVwcmVzZW50cyBhbmQgZXhpc3Rpbmcgc3RydWN0dXJlIChlLmcuIENEQSwgSEw3IHYyKVxyXG4gICAqL1xyXG4gIFdpcmVGb3JtYXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiV2lyZSBGb3JtYXRcIixcclxuICAgIGNvZGU6IFwid2lyZS1mb3JtYXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RlZmluaXRpb24tdXNlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19