// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/messageheader-response-request|4.0.1
/**
 * HL7-defined table of codes which identify conditions under which acknowledgments are required to be returned in response to a message.
 */
export const MessageheaderResponseRequestCodings = {
    /**
     * always: initiator expects a response for this message.
     */
    Always: {
        display: "Always",
        code: "always",
        system: "http://hl7.org/fhir/messageheader-response-request",
    },
    /**
     * never: initiator does not expect a response.
     */
    Never: {
        display: "Never",
        code: "never",
        system: "http://hl7.org/fhir/messageheader-response-request",
    },
    /**
     * on-error: initiator expects a response only if in error.
     */
    ErrorRejectConditionsOnly: {
        display: "Error/reject conditions only",
        code: "on-error",
        system: "http://hl7.org/fhir/messageheader-response-request",
    },
    /**
     * on-success: initiator expects a response only if successful.
     */
    SuccessfulCompletionOnly: {
        display: "Successful completion only",
        code: "on-success",
        system: "http://hl7.org/fhir/messageheader-response-request",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZWhlYWRlclJlc3BvbnNlUmVxdWVzdENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01lc3NhZ2VoZWFkZXJSZXNwb25zZVJlcXVlc3RDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1GQUFtRjtBQTBCbkY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBMEM7SUFDeEY7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gseUJBQXlCLEVBQUU7UUFDekIsT0FBTyxFQUFFLDhCQUE4QjtRQUN2QyxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdEO0lBQ0Q7O09BRUc7SUFDSCx3QkFBd0IsRUFBRTtRQUN4QixPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lc3NhZ2VoZWFkZXItcmVzcG9uc2UtcmVxdWVzdHw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEhMNy1kZWZpbmVkIHRhYmxlIG9mIGNvZGVzIHdoaWNoIGlkZW50aWZ5IGNvbmRpdGlvbnMgdW5kZXIgd2hpY2ggYWNrbm93bGVkZ21lbnRzIGFyZSByZXF1aXJlZCB0byBiZSByZXR1cm5lZCBpbiByZXNwb25zZSB0byBhIG1lc3NhZ2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZXNzYWdlaGVhZGVyUmVzcG9uc2VSZXF1ZXN0Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbHdheXM6IGluaXRpYXRvciBleHBlY3RzIGEgcmVzcG9uc2UgZm9yIHRoaXMgbWVzc2FnZS5cclxuICAgKi9cclxuICBBbHdheXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbmV2ZXI6IGluaXRpYXRvciBkb2VzIG5vdCBleHBlY3QgYSByZXNwb25zZS5cclxuICAgKi9cclxuICBOZXZlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbi1lcnJvcjogaW5pdGlhdG9yIGV4cGVjdHMgYSByZXNwb25zZSBvbmx5IGlmIGluIGVycm9yLlxyXG4gICAqL1xyXG4gIEVycm9yUmVqZWN0Q29uZGl0aW9uc09ubHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb24tc3VjY2VzczogaW5pdGlhdG9yIGV4cGVjdHMgYSByZXNwb25zZSBvbmx5IGlmIHN1Y2Nlc3NmdWwuXHJcbiAgICovXHJcbiAgU3VjY2Vzc2Z1bENvbXBsZXRpb25Pbmx5OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogSEw3LWRlZmluZWQgdGFibGUgb2YgY29kZXMgd2hpY2ggaWRlbnRpZnkgY29uZGl0aW9ucyB1bmRlciB3aGljaCBhY2tub3dsZWRnbWVudHMgYXJlIHJlcXVpcmVkIHRvIGJlIHJldHVybmVkIGluIHJlc3BvbnNlIHRvIGEgbWVzc2FnZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNZXNzYWdlaGVhZGVyUmVzcG9uc2VSZXF1ZXN0Q29kaW5nczpNZXNzYWdlaGVhZGVyUmVzcG9uc2VSZXF1ZXN0Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbHdheXM6IGluaXRpYXRvciBleHBlY3RzIGEgcmVzcG9uc2UgZm9yIHRoaXMgbWVzc2FnZS5cclxuICAgKi9cclxuICBBbHdheXM6IHtcclxuICAgIGRpc3BsYXk6IFwiQWx3YXlzXCIsXHJcbiAgICBjb2RlOiBcImFsd2F5c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVzc2FnZWhlYWRlci1yZXNwb25zZS1yZXF1ZXN0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuZXZlcjogaW5pdGlhdG9yIGRvZXMgbm90IGV4cGVjdCBhIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIE5ldmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5ldmVyXCIsXHJcbiAgICBjb2RlOiBcIm5ldmVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXNzYWdlaGVhZGVyLXJlc3BvbnNlLXJlcXVlc3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9uLWVycm9yOiBpbml0aWF0b3IgZXhwZWN0cyBhIHJlc3BvbnNlIG9ubHkgaWYgaW4gZXJyb3IuXHJcbiAgICovXHJcbiAgRXJyb3JSZWplY3RDb25kaXRpb25zT25seToge1xyXG4gICAgZGlzcGxheTogXCJFcnJvci9yZWplY3QgY29uZGl0aW9ucyBvbmx5XCIsXHJcbiAgICBjb2RlOiBcIm9uLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXNzYWdlaGVhZGVyLXJlc3BvbnNlLXJlcXVlc3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9uLXN1Y2Nlc3M6IGluaXRpYXRvciBleHBlY3RzIGEgcmVzcG9uc2Ugb25seSBpZiBzdWNjZXNzZnVsLlxyXG4gICAqL1xyXG4gIFN1Y2Nlc3NmdWxDb21wbGV0aW9uT25seToge1xyXG4gICAgZGlzcGxheTogXCJTdWNjZXNzZnVsIGNvbXBsZXRpb24gb25seVwiLFxyXG4gICAgY29kZTogXCJvbi1zdWNjZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXNzYWdlaGVhZGVyLXJlc3BvbnNlLXJlcXVlc3RcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=