// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/messageheader-response-request|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * HL7-defined table of codes which identify conditions under which acknowledgments are required to be returned in response to a message.
 */
export const MessageheaderResponseRequestCodings = {
    /**
     * always: initiator expects a response for this message.
     */
    Always: new Coding({
        display: "Always",
        code: "always",
        system: "http://hl7.org/fhir/messageheader-response-request",
    }),
    /**
     * never: initiator does not expect a response.
     */
    Never: new Coding({
        display: "Never",
        code: "never",
        system: "http://hl7.org/fhir/messageheader-response-request",
    }),
    /**
     * on-error: initiator expects a response only if in error.
     */
    ErrorRejectConditionsOnly: new Coding({
        display: "Error/reject conditions only",
        code: "on-error",
        system: "http://hl7.org/fhir/messageheader-response-request",
    }),
    /**
     * on-success: initiator expects a response only if successful.
     */
    SuccessfulCompletionOnly: new Coding({
        display: "Successful completion only",
        code: "on-success",
        system: "http://hl7.org/fhir/messageheader-response-request",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZWhlYWRlclJlc3BvbnNlUmVxdWVzdENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01lc3NhZ2VoZWFkZXJSZXNwb25zZVJlcXVlc3RDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1GQUFtRjtBQUVuRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBRztJQUNqRDs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCx5QkFBeUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQyxPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsd0JBQXdCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkMsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lc3NhZ2VoZWFkZXItcmVzcG9uc2UtcmVxdWVzdHw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSEw3LWRlZmluZWQgdGFibGUgb2YgY29kZXMgd2hpY2ggaWRlbnRpZnkgY29uZGl0aW9ucyB1bmRlciB3aGljaCBhY2tub3dsZWRnbWVudHMgYXJlIHJlcXVpcmVkIHRvIGJlIHJldHVybmVkIGluIHJlc3BvbnNlIHRvIGEgbWVzc2FnZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNZXNzYWdlaGVhZGVyUmVzcG9uc2VSZXF1ZXN0Q29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBhbHdheXM6IGluaXRpYXRvciBleHBlY3RzIGEgcmVzcG9uc2UgZm9yIHRoaXMgbWVzc2FnZS5cclxuICAgKi9cclxuICBBbHdheXM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBbHdheXNcIixcclxuICAgIGNvZGU6IFwiYWx3YXlzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXNzYWdlaGVhZGVyLXJlc3BvbnNlLXJlcXVlc3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBuZXZlcjogaW5pdGlhdG9yIGRvZXMgbm90IGV4cGVjdCBhIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIE5ldmVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTmV2ZXJcIixcclxuICAgIGNvZGU6IFwibmV2ZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lc3NhZ2VoZWFkZXItcmVzcG9uc2UtcmVxdWVzdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG9uLWVycm9yOiBpbml0aWF0b3IgZXhwZWN0cyBhIHJlc3BvbnNlIG9ubHkgaWYgaW4gZXJyb3IuXHJcbiAgICovXHJcbiAgRXJyb3JSZWplY3RDb25kaXRpb25zT25seTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkVycm9yL3JlamVjdCBjb25kaXRpb25zIG9ubHlcIixcclxuICAgIGNvZGU6IFwib24tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lc3NhZ2VoZWFkZXItcmVzcG9uc2UtcmVxdWVzdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG9uLXN1Y2Nlc3M6IGluaXRpYXRvciBleHBlY3RzIGEgcmVzcG9uc2Ugb25seSBpZiBzdWNjZXNzZnVsLlxyXG4gICAqL1xyXG4gIFN1Y2Nlc3NmdWxDb21wbGV0aW9uT25seTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvbmx5XCIsXHJcbiAgICBjb2RlOiBcIm9uLXN1Y2Nlc3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lc3NhZ2VoZWFkZXItcmVzcG9uc2UtcmVxdWVzdFwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEhMNy1kZWZpbmVkIHRhYmxlIG9mIGNvZGVzIHdoaWNoIGlkZW50aWZ5IGNvbmRpdGlvbnMgdW5kZXIgd2hpY2ggYWNrbm93bGVkZ21lbnRzIGFyZSByZXF1aXJlZCB0byBiZSByZXR1cm5lZCBpbiByZXNwb25zZSB0byBhIG1lc3NhZ2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZXNzYWdlaGVhZGVyUmVzcG9uc2VSZXF1ZXN0Q29kaW5nVHlwZSA9IHR5cGVvZiBNZXNzYWdlaGVhZGVyUmVzcG9uc2VSZXF1ZXN0Q29kaW5ncztcclxuIl19