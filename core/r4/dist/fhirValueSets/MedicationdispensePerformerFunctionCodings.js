// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationdispense-performer-function|4.0.1
/**
 * MedicationDispense Performer Function Codes
 */
export const MedicationdispensePerformerFunctionCodings = {
    /**
     * checker: Performed initial quality assurance on the prepared medication
     */
    Checker: {
        display: "Checker",
        code: "checker",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
    /**
     * dataenterer: Recorded the details of the request
     */
    DataEnterer: {
        display: "Data Enterer",
        code: "dataenterer",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
    /**
     * finalchecker: Performed the final quality assurance on the prepared medication against the request. Typically, this is a pharmacist function.
     */
    FinalChecker: {
        display: "Final Checker",
        code: "finalchecker",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
    /**
     * packager: Prepared the medication.
     */
    Packager: {
        display: "Packager",
        code: "packager",
        system: "http://terminology.hl7.org/CodeSystem/medicationdispense-performer-function",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbmRpc3BlbnNlUGVyZm9ybWVyRnVuY3Rpb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWRpY2F0aW9uZGlzcGVuc2VQZXJmb3JtZXJGdW5jdGlvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMEZBQTBGO0FBMEIxRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBDQUEwQyxHQUFpRDtJQUN0Rzs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDZFQUE2RTtLQUN0RjtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVkaWNhdGlvbmRpc3BlbnNlLXBlcmZvcm1lci1mdW5jdGlvbnw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25EaXNwZW5zZSBQZXJmb3JtZXIgRnVuY3Rpb24gQ29kZXNcclxuICovXHJcbmV4cG9ydCB0eXBlIE1lZGljYXRpb25kaXNwZW5zZVBlcmZvcm1lckZ1bmN0aW9uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjaGVja2VyOiBQZXJmb3JtZWQgaW5pdGlhbCBxdWFsaXR5IGFzc3VyYW5jZSBvbiB0aGUgcHJlcGFyZWQgbWVkaWNhdGlvblxyXG4gICAqL1xyXG4gIENoZWNrZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0YWVudGVyZXI6IFJlY29yZGVkIHRoZSBkZXRhaWxzIG9mIHRoZSByZXF1ZXN0XHJcbiAgICovXHJcbiAgRGF0YUVudGVyZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZmluYWxjaGVja2VyOiBQZXJmb3JtZWQgdGhlIGZpbmFsIHF1YWxpdHkgYXNzdXJhbmNlIG9uIHRoZSBwcmVwYXJlZCBtZWRpY2F0aW9uIGFnYWluc3QgdGhlIHJlcXVlc3QuIFR5cGljYWxseSwgdGhpcyBpcyBhIHBoYXJtYWNpc3QgZnVuY3Rpb24uXHJcbiAgICovXHJcbiAgRmluYWxDaGVja2VyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBhY2thZ2VyOiBQcmVwYXJlZCB0aGUgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBQYWNrYWdlcjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25EaXNwZW5zZSBQZXJmb3JtZXIgRnVuY3Rpb24gQ29kZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWRpY2F0aW9uZGlzcGVuc2VQZXJmb3JtZXJGdW5jdGlvbkNvZGluZ3M6TWVkaWNhdGlvbmRpc3BlbnNlUGVyZm9ybWVyRnVuY3Rpb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNoZWNrZXI6IFBlcmZvcm1lZCBpbml0aWFsIHF1YWxpdHkgYXNzdXJhbmNlIG9uIHRoZSBwcmVwYXJlZCBtZWRpY2F0aW9uXHJcbiAgICovXHJcbiAgQ2hlY2tlcjoge1xyXG4gICAgZGlzcGxheTogXCJDaGVja2VyXCIsXHJcbiAgICBjb2RlOiBcImNoZWNrZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZGljYXRpb25kaXNwZW5zZS1wZXJmb3JtZXItZnVuY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGFlbnRlcmVyOiBSZWNvcmRlZCB0aGUgZGV0YWlscyBvZiB0aGUgcmVxdWVzdFxyXG4gICAqL1xyXG4gIERhdGFFbnRlcmVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgRW50ZXJlclwiLFxyXG4gICAgY29kZTogXCJkYXRhZW50ZXJlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmRpc3BlbnNlLXBlcmZvcm1lci1mdW5jdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZmluYWxjaGVja2VyOiBQZXJmb3JtZWQgdGhlIGZpbmFsIHF1YWxpdHkgYXNzdXJhbmNlIG9uIHRoZSBwcmVwYXJlZCBtZWRpY2F0aW9uIGFnYWluc3QgdGhlIHJlcXVlc3QuIFR5cGljYWxseSwgdGhpcyBpcyBhIHBoYXJtYWNpc3QgZnVuY3Rpb24uXHJcbiAgICovXHJcbiAgRmluYWxDaGVja2VyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkZpbmFsIENoZWNrZXJcIixcclxuICAgIGNvZGU6IFwiZmluYWxjaGVja2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9uZGlzcGVuc2UtcGVyZm9ybWVyLWZ1bmN0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwYWNrYWdlcjogUHJlcGFyZWQgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgUGFja2FnZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUGFja2FnZXJcIixcclxuICAgIGNvZGU6IFwicGFja2FnZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZGljYXRpb25kaXNwZW5zZS1wZXJmb3JtZXItZnVuY3Rpb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=