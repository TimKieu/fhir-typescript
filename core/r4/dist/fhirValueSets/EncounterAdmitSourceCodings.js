// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-admit-source|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set defines a set of codes that can be used to indicate from where the patient came in.
 */
export const EncounterAdmitSourceCodings = {
    /**
     * born: The patient is a newborn and the encounter will track the baby related activities (as opposed to the Mothers encounter - that may be associated using the newborn encounters partof property)
     */
    BornInHospital: new Coding({
        display: "Born in hospital",
        code: "born",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * emd: The patient has been transferred from the emergency department within the hospital. This is typically used in the transition to an inpatient encounter
     */
    FromAccidentEmergencyDepartment: new Coding({
        display: "From accident/emergency department",
        code: "emd",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * gp: The patient has been admitted due to a referred from a General Practitioner.
     */
    GeneralPractitionerReferral: new Coding({
        display: "General Practitioner referral",
        code: "gp",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * hosp-trans: The Patient has been transferred from another hospital for this encounter.
     */
    TransferredFromOtherHospital: new Coding({
        display: "Transferred from other hospital",
        code: "hosp-trans",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * mp: The patient has been admitted due to a referred from a Specialist (as opposed to a General Practitioner).
     */
    MedicalPractitionerPhysicianReferral: new Coding({
        display: "Medical Practitioner/physician referral",
        code: "mp",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * nursing: The patient has been transferred from a nursing home.
     */
    FromNursingHome: new Coding({
        display: "From nursing home",
        code: "nursing",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * other: The patient has been admitted from a source otherwise not specified here.
     */
    Other: new Coding({
        display: "Other",
        code: "other",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * outp: The patient has been transferred from an outpatient department within the hospital.
     */
    FromOutpatientDepartment: new Coding({
        display: "From outpatient department",
        code: "outp",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * psych: The patient has been transferred from a psychiatric facility.
     */
    FromPsychiatricHospital: new Coding({
        display: "From psychiatric hospital",
        code: "psych",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
    /**
     * rehab: The patient has been transferred from a rehabilitation facility or clinic.
     */
    FromRehabilitationFacility: new Coding({
        display: "From rehabilitation facility",
        code: "rehab",
        system: "http://terminology.hl7.org/CodeSystem/admit-source",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyQWRtaXRTb3VyY2VDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJBZG1pdFNvdXJjZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMkVBQTJFO0FBRTNFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHO0lBQ3pDOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILCtCQUErQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFDLE9BQU8sRUFBRSxvQ0FBb0M7UUFDN0MsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILDJCQUEyQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RDLE9BQU8sRUFBRSwrQkFBK0I7UUFDeEMsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILDRCQUE0QixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZDLE9BQU8sRUFBRSxpQ0FBaUM7UUFDMUMsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxvQ0FBb0MsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMvQyxPQUFPLEVBQUUseUNBQXlDO1FBQ2xELElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDMUIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCx3QkFBd0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQyxPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCx1QkFBdUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQyxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCwwQkFBMEIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQyxPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbmNvdW50ZXItYWRtaXQtc291cmNlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZnJvbSB3aGVyZSB0aGUgcGF0aWVudCBjYW1lIGluLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVuY291bnRlckFkbWl0U291cmNlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBib3JuOiBUaGUgcGF0aWVudCBpcyBhIG5ld2Jvcm4gYW5kIHRoZSBlbmNvdW50ZXIgd2lsbCB0cmFjayB0aGUgYmFieSByZWxhdGVkIGFjdGl2aXRpZXMgKGFzIG9wcG9zZWQgdG8gdGhlIE1vdGhlcnMgZW5jb3VudGVyIC0gdGhhdCBtYXkgYmUgYXNzb2NpYXRlZCB1c2luZyB0aGUgbmV3Ym9ybiBlbmNvdW50ZXJzIHBhcnRvZiBwcm9wZXJ0eSlcclxuICAgKi9cclxuICBCb3JuSW5Ib3NwaXRhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJvcm4gaW4gaG9zcGl0YWxcIixcclxuICAgIGNvZGU6IFwiYm9yblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWRtaXQtc291cmNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZW1kOiBUaGUgcGF0aWVudCBoYXMgYmVlbiB0cmFuc2ZlcnJlZCBmcm9tIHRoZSBlbWVyZ2VuY3kgZGVwYXJ0bWVudCB3aXRoaW4gdGhlIGhvc3BpdGFsLiBUaGlzIGlzIHR5cGljYWxseSB1c2VkIGluIHRoZSB0cmFuc2l0aW9uIHRvIGFuIGlucGF0aWVudCBlbmNvdW50ZXJcclxuICAgKi9cclxuICBGcm9tQWNjaWRlbnRFbWVyZ2VuY3lEZXBhcnRtZW50OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRnJvbSBhY2NpZGVudC9lbWVyZ2VuY3kgZGVwYXJ0bWVudFwiLFxyXG4gICAgY29kZTogXCJlbWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FkbWl0LXNvdXJjZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGdwOiBUaGUgcGF0aWVudCBoYXMgYmVlbiBhZG1pdHRlZCBkdWUgdG8gYSByZWZlcnJlZCBmcm9tIGEgR2VuZXJhbCBQcmFjdGl0aW9uZXIuXHJcbiAgICovXHJcbiAgR2VuZXJhbFByYWN0aXRpb25lclJlZmVycmFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiR2VuZXJhbCBQcmFjdGl0aW9uZXIgcmVmZXJyYWxcIixcclxuICAgIGNvZGU6IFwiZ3BcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FkbWl0LXNvdXJjZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGhvc3AtdHJhbnM6IFRoZSBQYXRpZW50IGhhcyBiZWVuIHRyYW5zZmVycmVkIGZyb20gYW5vdGhlciBob3NwaXRhbCBmb3IgdGhpcyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgVHJhbnNmZXJyZWRGcm9tT3RoZXJIb3NwaXRhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlRyYW5zZmVycmVkIGZyb20gb3RoZXIgaG9zcGl0YWxcIixcclxuICAgIGNvZGU6IFwiaG9zcC10cmFuc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWRtaXQtc291cmNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbXA6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGFkbWl0dGVkIGR1ZSB0byBhIHJlZmVycmVkIGZyb20gYSBTcGVjaWFsaXN0IChhcyBvcHBvc2VkIHRvIGEgR2VuZXJhbCBQcmFjdGl0aW9uZXIpLlxyXG4gICAqL1xyXG4gIE1lZGljYWxQcmFjdGl0aW9uZXJQaHlzaWNpYW5SZWZlcnJhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1lZGljYWwgUHJhY3RpdGlvbmVyL3BoeXNpY2lhbiByZWZlcnJhbFwiLFxyXG4gICAgY29kZTogXCJtcFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWRtaXQtc291cmNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbnVyc2luZzogVGhlIHBhdGllbnQgaGFzIGJlZW4gdHJhbnNmZXJyZWQgZnJvbSBhIG51cnNpbmcgaG9tZS5cclxuICAgKi9cclxuICBGcm9tTnVyc2luZ0hvbWU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGcm9tIG51cnNpbmcgaG9tZVwiLFxyXG4gICAgY29kZTogXCJudXJzaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hZG1pdC1zb3VyY2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBvdGhlcjogVGhlIHBhdGllbnQgaGFzIGJlZW4gYWRtaXR0ZWQgZnJvbSBhIHNvdXJjZSBvdGhlcndpc2Ugbm90IHNwZWNpZmllZCBoZXJlLlxyXG4gICAqL1xyXG4gIE90aGVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT3RoZXJcIixcclxuICAgIGNvZGU6IFwib3RoZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FkbWl0LXNvdXJjZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG91dHA6IFRoZSBwYXRpZW50IGhhcyBiZWVuIHRyYW5zZmVycmVkIGZyb20gYW4gb3V0cGF0aWVudCBkZXBhcnRtZW50IHdpdGhpbiB0aGUgaG9zcGl0YWwuXHJcbiAgICovXHJcbiAgRnJvbU91dHBhdGllbnREZXBhcnRtZW50OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRnJvbSBvdXRwYXRpZW50IGRlcGFydG1lbnRcIixcclxuICAgIGNvZGU6IFwib3V0cFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWRtaXQtc291cmNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHN5Y2g6IFRoZSBwYXRpZW50IGhhcyBiZWVuIHRyYW5zZmVycmVkIGZyb20gYSBwc3ljaGlhdHJpYyBmYWNpbGl0eS5cclxuICAgKi9cclxuICBGcm9tUHN5Y2hpYXRyaWNIb3NwaXRhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkZyb20gcHN5Y2hpYXRyaWMgaG9zcGl0YWxcIixcclxuICAgIGNvZGU6IFwicHN5Y2hcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FkbWl0LXNvdXJjZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJlaGFiOiBUaGUgcGF0aWVudCBoYXMgYmVlbiB0cmFuc2ZlcnJlZCBmcm9tIGEgcmVoYWJpbGl0YXRpb24gZmFjaWxpdHkgb3IgY2xpbmljLlxyXG4gICAqL1xyXG4gIEZyb21SZWhhYmlsaXRhdGlvbkZhY2lsaXR5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRnJvbSByZWhhYmlsaXRhdGlvbiBmYWNpbGl0eVwiLFxyXG4gICAgY29kZTogXCJyZWhhYlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWRtaXQtc291cmNlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGZyb20gd2hlcmUgdGhlIHBhdGllbnQgY2FtZSBpbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIEVuY291bnRlckFkbWl0U291cmNlQ29kaW5nVHlwZSA9IHR5cGVvZiBFbmNvdW50ZXJBZG1pdFNvdXJjZUNvZGluZ3M7XHJcbiJdfQ==