// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/namingsystem-identifier-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Identifies the style of unique identifier used to identify a namespace.
 */
export const NamingsystemIdentifierTypeCodings = {
    /**
     * oid: An ISO object identifier; e.g. 1.2.3.4.5.
     */
    OID: new Coding({
        display: "OID",
        code: "oid",
        system: "http://hl7.org/fhir/namingsystem-identifier-type",
    }),
    /**
     * other: Some other type of unique identifier; e.g. HL7-assigned reserved string such as LN for LOINC.
     */
    Other: new Coding({
        display: "Other",
        code: "other",
        system: "http://hl7.org/fhir/namingsystem-identifier-type",
    }),
    /**
     * uri: A uniform resource identifier (ideally a URL - uniform resource locator); e.g. http://unitsofmeasure.org.
     */
    URI: new Coding({
        display: "URI",
        code: "uri",
        system: "http://hl7.org/fhir/namingsystem-identifier-type",
    }),
    /**
     * uuid: A universally unique identifier of the form a5afddf4-e880-459b-876e-e4591b0acc11.
     */
    UUID: new Coding({
        display: "UUID",
        code: "uuid",
        system: "http://hl7.org/fhir/namingsystem-identifier-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmFtaW5nc3lzdGVtSWRlbnRpZmllclR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9OYW1pbmdzeXN0ZW1JZGVudGlmaWVyVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUZBQWlGO0FBRWpGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHO0lBQy9DOztPQUVHO0lBQ0gsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2QsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxHQUFHLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9uYW1pbmdzeXN0ZW0taWRlbnRpZmllci10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBJZGVudGlmaWVzIHRoZSBzdHlsZSBvZiB1bmlxdWUgaWRlbnRpZmllciB1c2VkIHRvIGlkZW50aWZ5IGEgbmFtZXNwYWNlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE5hbWluZ3N5c3RlbUlkZW50aWZpZXJUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBvaWQ6IEFuIElTTyBvYmplY3QgaWRlbnRpZmllcjsgZS5nLiAxLjIuMy40LjUuXHJcbiAgICovXHJcbiAgT0lEOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT0lEXCIsXHJcbiAgICBjb2RlOiBcIm9pZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbmFtaW5nc3lzdGVtLWlkZW50aWZpZXItdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG90aGVyOiBTb21lIG90aGVyIHR5cGUgb2YgdW5pcXVlIGlkZW50aWZpZXI7IGUuZy4gSEw3LWFzc2lnbmVkIHJlc2VydmVkIHN0cmluZyBzdWNoIGFzIExOIGZvciBMT0lOQy5cclxuICAgKi9cclxuICBPdGhlcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk90aGVyXCIsXHJcbiAgICBjb2RlOiBcIm90aGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9uYW1pbmdzeXN0ZW0taWRlbnRpZmllci10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdXJpOiBBIHVuaWZvcm0gcmVzb3VyY2UgaWRlbnRpZmllciAoaWRlYWxseSBhIFVSTCAtIHVuaWZvcm0gcmVzb3VyY2UgbG9jYXRvcik7IGUuZy4gaHR0cDovL3VuaXRzb2ZtZWFzdXJlLm9yZy5cclxuICAgKi9cclxuICBVUkk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJVUklcIixcclxuICAgIGNvZGU6IFwidXJpXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9uYW1pbmdzeXN0ZW0taWRlbnRpZmllci10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdXVpZDogQSB1bml2ZXJzYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgZm9ybSBhNWFmZGRmNC1lODgwLTQ1OWItODc2ZS1lNDU5MWIwYWNjMTEuXHJcbiAgICovXHJcbiAgVVVJRDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVVSURcIixcclxuICAgIGNvZGU6IFwidXVpZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbmFtaW5nc3lzdGVtLWlkZW50aWZpZXItdHlwZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIElkZW50aWZpZXMgdGhlIHN0eWxlIG9mIHVuaXF1ZSBpZGVudGlmaWVyIHVzZWQgdG8gaWRlbnRpZnkgYSBuYW1lc3BhY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBOYW1pbmdzeXN0ZW1JZGVudGlmaWVyVHlwZUNvZGluZ1R5cGUgPSB0eXBlb2YgTmFtaW5nc3lzdGVtSWRlbnRpZmllclR5cGVDb2RpbmdzO1xyXG4iXX0=