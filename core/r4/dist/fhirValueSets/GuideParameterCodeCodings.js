// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/guide-parameter-code|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Code of parameter that is input to the guide.
 */
export const GuideParameterCodeCodings = {
    /**
     * apply: If the value of this string 0..* parameter is one of the metadata fields then all conformance resources will have any specified [Resource].[field] overwritten with the ImplementationGuide.[field], where field is one of: version, date, status, publisher, contact, copyright, experimental, jurisdiction, useContext.
     */
    ApplyMetadataValue: new Coding({
        display: "Apply Metadata Value",
        code: "apply",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * expansion-parameter: The value of this string 0..* parameter is a parameter (name=value) when expanding value sets for this implementation guide. This is particularly used to specify the versions of published terminologies such as SNOMED CT.
     */
    ExpansionProfile: new Coding({
        display: "Expansion Profile",
        code: "expansion-parameter",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * generate-json: The value of this boolean 0..1 parameter specifies whether the IG publisher creates examples in JSON format. If not present, the Publication Tool decides whether to generate JSON.
     */
    GenerateJSON: new Coding({
        display: "Generate JSON",
        code: "generate-json",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * generate-turtle: The value of this boolean 0..1 parameter specifies whether the IG publisher creates examples in Turtle format. If not present, the Publication Tool decides whether to generate Turtle.
     */
    GenerateTurtle: new Coding({
        display: "Generate Turtle",
        code: "generate-turtle",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * generate-xml: The value of this boolean 0..1 parameter specifies whether the IG publisher creates examples in XML format. If not present, the Publication Tool decides whether to generate XML.
     */
    GenerateXML: new Coding({
        display: "Generate XML",
        code: "generate-xml",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * html-template: The value of this string singleton parameter is the name of the file to use as the builder template for each generated page (see templating).
     */
    HTMLTemplate: new Coding({
        display: "HTML Template",
        code: "html-template",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * path-pages: The value of this string 0..1 parameter is a subfolder of the build context's location that contains files that are part of the html content processed by the builder.
     */
    PagesPath: new Coding({
        display: "Pages Path",
        code: "path-pages",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * path-resource: The value of this string 0..* parameter is a subfolder of the build context's location that is to be scanned to load resources. Scope is (if present) a particular resource type.
     */
    ResourcePath: new Coding({
        display: "Resource Path",
        code: "path-resource",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * path-tx-cache: The value of this string 0..1 parameter is a subfolder of the build context's location that is used as the terminology cache. If this is not present, the terminology cache is on the local system, not under version control.
     */
    TerminologyCachePath: new Coding({
        display: "Terminology Cache Path",
        code: "path-tx-cache",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
    /**
     * rule-broken-links: The value of this string 0..1 parameter is either "warning" or "error" (default = "error"). If the value is "warning" then IG build tools allow the IG to be considered successfully build even when there is no internal broken links.
     */
    BrokenLinksRule: new Coding({
        display: "Broken Links Rule",
        code: "rule-broken-links",
        system: "http://hl7.org/fhir/guide-parameter-code",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VpZGVQYXJhbWV0ZXJDb2RlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvR3VpZGVQYXJhbWV0ZXJDb2RlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFFekUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkM7O09BRUc7SUFDSCxrQkFBa0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM3QixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMzQixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDL0IsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxtQkFBbUI7UUFDekIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9ndWlkZS1wYXJhbWV0ZXItY29kZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZSBvZiBwYXJhbWV0ZXIgdGhhdCBpcyBpbnB1dCB0byB0aGUgZ3VpZGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgR3VpZGVQYXJhbWV0ZXJDb2RlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBhcHBseTogSWYgdGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nIDAuLiogcGFyYW1ldGVyIGlzIG9uZSBvZiB0aGUgbWV0YWRhdGEgZmllbGRzIHRoZW4gYWxsIGNvbmZvcm1hbmNlIHJlc291cmNlcyB3aWxsIGhhdmUgYW55IHNwZWNpZmllZCBbUmVzb3VyY2VdLltmaWVsZF0gb3ZlcndyaXR0ZW4gd2l0aCB0aGUgSW1wbGVtZW50YXRpb25HdWlkZS5bZmllbGRdLCB3aGVyZSBmaWVsZCBpcyBvbmUgb2Y6IHZlcnNpb24sIGRhdGUsIHN0YXR1cywgcHVibGlzaGVyLCBjb250YWN0LCBjb3B5cmlnaHQsIGV4cGVyaW1lbnRhbCwganVyaXNkaWN0aW9uLCB1c2VDb250ZXh0LlxyXG4gICAqL1xyXG4gIEFwcGx5TWV0YWRhdGFWYWx1ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFwcGx5IE1ldGFkYXRhIFZhbHVlXCIsXHJcbiAgICBjb2RlOiBcImFwcGx5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9ndWlkZS1wYXJhbWV0ZXItY29kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGV4cGFuc2lvbi1wYXJhbWV0ZXI6IFRoZSB2YWx1ZSBvZiB0aGlzIHN0cmluZyAwLi4qIHBhcmFtZXRlciBpcyBhIHBhcmFtZXRlciAobmFtZT12YWx1ZSkgd2hlbiBleHBhbmRpbmcgdmFsdWUgc2V0cyBmb3IgdGhpcyBpbXBsZW1lbnRhdGlvbiBndWlkZS4gVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZCB0byBzcGVjaWZ5IHRoZSB2ZXJzaW9ucyBvZiBwdWJsaXNoZWQgdGVybWlub2xvZ2llcyBzdWNoIGFzIFNOT01FRCBDVC5cclxuICAgKi9cclxuICBFeHBhbnNpb25Qcm9maWxlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRXhwYW5zaW9uIFByb2ZpbGVcIixcclxuICAgIGNvZGU6IFwiZXhwYW5zaW9uLXBhcmFtZXRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGUtcGFyYW1ldGVyLWNvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBnZW5lcmF0ZS1qc29uOiBUaGUgdmFsdWUgb2YgdGhpcyBib29sZWFuIDAuLjEgcGFyYW1ldGVyIHNwZWNpZmllcyB3aGV0aGVyIHRoZSBJRyBwdWJsaXNoZXIgY3JlYXRlcyBleGFtcGxlcyBpbiBKU09OIGZvcm1hdC4gSWYgbm90IHByZXNlbnQsIHRoZSBQdWJsaWNhdGlvbiBUb29sIGRlY2lkZXMgd2hldGhlciB0byBnZW5lcmF0ZSBKU09OLlxyXG4gICAqL1xyXG4gIEdlbmVyYXRlSlNPTjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdlbmVyYXRlIEpTT05cIixcclxuICAgIGNvZGU6IFwiZ2VuZXJhdGUtanNvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGUtcGFyYW1ldGVyLWNvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBnZW5lcmF0ZS10dXJ0bGU6IFRoZSB2YWx1ZSBvZiB0aGlzIGJvb2xlYW4gMC4uMSBwYXJhbWV0ZXIgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIElHIHB1Ymxpc2hlciBjcmVhdGVzIGV4YW1wbGVzIGluIFR1cnRsZSBmb3JtYXQuIElmIG5vdCBwcmVzZW50LCB0aGUgUHVibGljYXRpb24gVG9vbCBkZWNpZGVzIHdoZXRoZXIgdG8gZ2VuZXJhdGUgVHVydGxlLlxyXG4gICAqL1xyXG4gIEdlbmVyYXRlVHVydGxlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiR2VuZXJhdGUgVHVydGxlXCIsXHJcbiAgICBjb2RlOiBcImdlbmVyYXRlLXR1cnRsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGUtcGFyYW1ldGVyLWNvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBnZW5lcmF0ZS14bWw6IFRoZSB2YWx1ZSBvZiB0aGlzIGJvb2xlYW4gMC4uMSBwYXJhbWV0ZXIgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIElHIHB1Ymxpc2hlciBjcmVhdGVzIGV4YW1wbGVzIGluIFhNTCBmb3JtYXQuIElmIG5vdCBwcmVzZW50LCB0aGUgUHVibGljYXRpb24gVG9vbCBkZWNpZGVzIHdoZXRoZXIgdG8gZ2VuZXJhdGUgWE1MLlxyXG4gICAqL1xyXG4gIEdlbmVyYXRlWE1MOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiR2VuZXJhdGUgWE1MXCIsXHJcbiAgICBjb2RlOiBcImdlbmVyYXRlLXhtbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGUtcGFyYW1ldGVyLWNvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBodG1sLXRlbXBsYXRlOiBUaGUgdmFsdWUgb2YgdGhpcyBzdHJpbmcgc2luZ2xldG9uIHBhcmFtZXRlciBpcyB0aGUgbmFtZSBvZiB0aGUgZmlsZSB0byB1c2UgYXMgdGhlIGJ1aWxkZXIgdGVtcGxhdGUgZm9yIGVhY2ggZ2VuZXJhdGVkIHBhZ2UgKHNlZSB0ZW1wbGF0aW5nKS5cclxuICAgKi9cclxuICBIVE1MVGVtcGxhdGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJIVE1MIFRlbXBsYXRlXCIsXHJcbiAgICBjb2RlOiBcImh0bWwtdGVtcGxhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRlLXBhcmFtZXRlci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcGF0aC1wYWdlczogVGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nIDAuLjEgcGFyYW1ldGVyIGlzIGEgc3ViZm9sZGVyIG9mIHRoZSBidWlsZCBjb250ZXh0J3MgbG9jYXRpb24gdGhhdCBjb250YWlucyBmaWxlcyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBodG1sIGNvbnRlbnQgcHJvY2Vzc2VkIGJ5IHRoZSBidWlsZGVyLlxyXG4gICAqL1xyXG4gIFBhZ2VzUGF0aDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBhZ2VzIFBhdGhcIixcclxuICAgIGNvZGU6IFwicGF0aC1wYWdlc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZ3VpZGUtcGFyYW1ldGVyLWNvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwYXRoLXJlc291cmNlOiBUaGUgdmFsdWUgb2YgdGhpcyBzdHJpbmcgMC4uKiBwYXJhbWV0ZXIgaXMgYSBzdWJmb2xkZXIgb2YgdGhlIGJ1aWxkIGNvbnRleHQncyBsb2NhdGlvbiB0aGF0IGlzIHRvIGJlIHNjYW5uZWQgdG8gbG9hZCByZXNvdXJjZXMuIFNjb3BlIGlzIChpZiBwcmVzZW50KSBhIHBhcnRpY3VsYXIgcmVzb3VyY2UgdHlwZS5cclxuICAgKi9cclxuICBSZXNvdXJjZVBhdGg6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZXNvdXJjZSBQYXRoXCIsXHJcbiAgICBjb2RlOiBcInBhdGgtcmVzb3VyY2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRlLXBhcmFtZXRlci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcGF0aC10eC1jYWNoZTogVGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nIDAuLjEgcGFyYW1ldGVyIGlzIGEgc3ViZm9sZGVyIG9mIHRoZSBidWlsZCBjb250ZXh0J3MgbG9jYXRpb24gdGhhdCBpcyB1c2VkIGFzIHRoZSB0ZXJtaW5vbG9neSBjYWNoZS4gSWYgdGhpcyBpcyBub3QgcHJlc2VudCwgdGhlIHRlcm1pbm9sb2d5IGNhY2hlIGlzIG9uIHRoZSBsb2NhbCBzeXN0ZW0sIG5vdCB1bmRlciB2ZXJzaW9uIGNvbnRyb2wuXHJcbiAgICovXHJcbiAgVGVybWlub2xvZ3lDYWNoZVBhdGg6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUZXJtaW5vbG9neSBDYWNoZSBQYXRoXCIsXHJcbiAgICBjb2RlOiBcInBhdGgtdHgtY2FjaGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRlLXBhcmFtZXRlci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcnVsZS1icm9rZW4tbGlua3M6IFRoZSB2YWx1ZSBvZiB0aGlzIHN0cmluZyAwLi4xIHBhcmFtZXRlciBpcyBlaXRoZXIgXCJ3YXJuaW5nXCIgb3IgXCJlcnJvclwiIChkZWZhdWx0ID0gXCJlcnJvclwiKS4gSWYgdGhlIHZhbHVlIGlzIFwid2FybmluZ1wiIHRoZW4gSUcgYnVpbGQgdG9vbHMgYWxsb3cgdGhlIElHIHRvIGJlIGNvbnNpZGVyZWQgc3VjY2Vzc2Z1bGx5IGJ1aWxkIGV2ZW4gd2hlbiB0aGVyZSBpcyBubyBpbnRlcm5hbCBicm9rZW4gbGlua3MuXHJcbiAgICovXHJcbiAgQnJva2VuTGlua3NSdWxlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQnJva2VuIExpbmtzIFJ1bGVcIixcclxuICAgIGNvZGU6IFwicnVsZS1icm9rZW4tbGlua3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2d1aWRlLXBhcmFtZXRlci1jb2RlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29kZSBvZiBwYXJhbWV0ZXIgdGhhdCBpcyBpbnB1dCB0byB0aGUgZ3VpZGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBHdWlkZVBhcmFtZXRlckNvZGVDb2RpbmdUeXBlID0gdHlwZW9mIEd1aWRlUGFyYW1ldGVyQ29kZUNvZGluZ3M7XHJcbiJdfQ==