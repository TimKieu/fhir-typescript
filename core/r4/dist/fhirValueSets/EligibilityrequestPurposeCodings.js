// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/eligibilityrequest-purpose|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A code specifying the types of information being requested.
 */
export const EligibilityrequestPurposeCodings = {
    /**
     * auth-requirements: The prior authorization requirements for the listed, or discovered if specified, converages for the categories of service and/or specifed biling codes are requested.
     */
    CoverageAuthRequirements: new Coding({
        display: "Coverage auth-requirements",
        code: "auth-requirements",
        system: "http://hl7.org/fhir/eligibilityrequest-purpose",
    }),
    /**
     * benefits: The plan benefits and optionally benefits consumed  for the listed, or discovered if specified, converages are requested.
     */
    CoverageBenefits: new Coding({
        display: "Coverage benefits",
        code: "benefits",
        system: "http://hl7.org/fhir/eligibilityrequest-purpose",
    }),
    /**
     * discovery: The insurer is requested to report on any coverages which they are aware of in addition to any specifed.
     */
    CoverageDiscovery: new Coding({
        display: "Coverage Discovery",
        code: "discovery",
        system: "http://hl7.org/fhir/eligibilityrequest-purpose",
    }),
    /**
     * validation: A check that the specified coverages are in-force is requested.
     */
    CoverageValidation: new Coding({
        display: "Coverage Validation",
        code: "validation",
        system: "http://hl7.org/fhir/eligibilityrequest-purpose",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxpZ2liaWxpdHlyZXF1ZXN0UHVycG9zZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0VsaWdpYmlsaXR5cmVxdWVzdFB1cnBvc2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLCtFQUErRTtBQUUvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRztJQUM5Qzs7T0FFRztJQUNILHdCQUF3QixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25DLE9BQU8sRUFBRSw0QkFBNEI7UUFDckMsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pELENBQUM7SUFDRjs7T0FFRztJQUNILGdCQUFnQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzNCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGdEQUFnRDtLQUN6RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM1QixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDN0IsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2VsaWdpYmlsaXR5cmVxdWVzdC1wdXJwb3NlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBBIGNvZGUgc3BlY2lmeWluZyB0aGUgdHlwZXMgb2YgaW5mb3JtYXRpb24gYmVpbmcgcmVxdWVzdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVsaWdpYmlsaXR5cmVxdWVzdFB1cnBvc2VDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGF1dGgtcmVxdWlyZW1lbnRzOiBUaGUgcHJpb3IgYXV0aG9yaXphdGlvbiByZXF1aXJlbWVudHMgZm9yIHRoZSBsaXN0ZWQsIG9yIGRpc2NvdmVyZWQgaWYgc3BlY2lmaWVkLCBjb252ZXJhZ2VzIGZvciB0aGUgY2F0ZWdvcmllcyBvZiBzZXJ2aWNlIGFuZC9vciBzcGVjaWZlZCBiaWxpbmcgY29kZXMgYXJlIHJlcXVlc3RlZC5cclxuICAgKi9cclxuICBDb3ZlcmFnZUF1dGhSZXF1aXJlbWVudHM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb3ZlcmFnZSBhdXRoLXJlcXVpcmVtZW50c1wiLFxyXG4gICAgY29kZTogXCJhdXRoLXJlcXVpcmVtZW50c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZWxpZ2liaWxpdHlyZXF1ZXN0LXB1cnBvc2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBiZW5lZml0czogVGhlIHBsYW4gYmVuZWZpdHMgYW5kIG9wdGlvbmFsbHkgYmVuZWZpdHMgY29uc3VtZWQgIGZvciB0aGUgbGlzdGVkLCBvciBkaXNjb3ZlcmVkIGlmIHNwZWNpZmllZCwgY29udmVyYWdlcyBhcmUgcmVxdWVzdGVkLlxyXG4gICAqL1xyXG4gIENvdmVyYWdlQmVuZWZpdHM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb3ZlcmFnZSBiZW5lZml0c1wiLFxyXG4gICAgY29kZTogXCJiZW5lZml0c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZWxpZ2liaWxpdHlyZXF1ZXN0LXB1cnBvc2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkaXNjb3Zlcnk6IFRoZSBpbnN1cmVyIGlzIHJlcXVlc3RlZCB0byByZXBvcnQgb24gYW55IGNvdmVyYWdlcyB3aGljaCB0aGV5IGFyZSBhd2FyZSBvZiBpbiBhZGRpdGlvbiB0byBhbnkgc3BlY2lmZWQuXHJcbiAgICovXHJcbiAgQ292ZXJhZ2VEaXNjb3Zlcnk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb3ZlcmFnZSBEaXNjb3ZlcnlcIixcclxuICAgIGNvZGU6IFwiZGlzY292ZXJ5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbGlnaWJpbGl0eXJlcXVlc3QtcHVycG9zZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHZhbGlkYXRpb246IEEgY2hlY2sgdGhhdCB0aGUgc3BlY2lmaWVkIGNvdmVyYWdlcyBhcmUgaW4tZm9yY2UgaXMgcmVxdWVzdGVkLlxyXG4gICAqL1xyXG4gIENvdmVyYWdlVmFsaWRhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvdmVyYWdlIFZhbGlkYXRpb25cIixcclxuICAgIGNvZGU6IFwidmFsaWRhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZWxpZ2liaWxpdHlyZXF1ZXN0LXB1cnBvc2VcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBBIGNvZGUgc3BlY2lmeWluZyB0aGUgdHlwZXMgb2YgaW5mb3JtYXRpb24gYmVpbmcgcmVxdWVzdGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRWxpZ2liaWxpdHlyZXF1ZXN0UHVycG9zZUNvZGluZ1R5cGUgPSB0eXBlb2YgRWxpZ2liaWxpdHlyZXF1ZXN0UHVycG9zZUNvZGluZ3M7XHJcbiJdfQ==