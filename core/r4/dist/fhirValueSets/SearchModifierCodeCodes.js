// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-modifier-code|4.0.1
/**
 * A supported modifier for a search parameter.
 */
export const SearchModifierCodeCodes = {
    /**
     * above: The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
     */
    Above: "above",
    /**
     * below: The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
     */
    Below: "below",
    /**
     * contains: The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
     */
    Contains: "contains",
    /**
     * exact: The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
     */
    Exact: "exact",
    /**
     * identifier: The search parameter applies to the identifier on the resource, not the reference.
     */
    Identifier: "identifier",
    /**
     * in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
     */
    In: "in",
    /**
     * missing: The search parameter returns resources that have a value or not.
     */
    Missing: "missing",
    /**
     * not: The search parameter returns resources that do not contain a match.
     */
    Not: "not",
    /**
     * not-in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
     */
    NotIn: "not-in",
    /**
     * ofType: The search parameter has the format system|code|value, where the system and code refer to an Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present.
     */
    OfType: "ofType",
    /**
     * text: The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
     */
    Text: "text",
    /**
     * type: The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
     */
    Type: "type",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoTW9kaWZpZXJDb2RlQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlYXJjaE1vZGlmaWVyQ29kZUNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHlFQUF5RTtBQUV6RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHO0lBQ3JDOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtJQUN4Qjs7T0FFRztJQUNILEVBQUUsRUFBRSxJQUFJO0lBQ1I7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILEdBQUcsRUFBRSxLQUFLO0lBQ1Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsUUFBUTtJQUNmOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NlYXJjaC1tb2RpZmllci1jb2RlfDQuMC4xXHJcblxyXG4vKipcclxuICogQSBzdXBwb3J0ZWQgbW9kaWZpZXIgZm9yIGEgc2VhcmNoIHBhcmFtZXRlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hNb2RpZmllckNvZGVDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBhYm92ZTogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgdmFsdWUgaW4gYSByZXNvdXJjZSBzdWJzdW1lcyB0aGUgc3BlY2lmaWVkIHZhbHVlIChpcy1hLCBvciBoaWVyYXJjaGljYWwgcmVsYXRpb25zaGlwcykuXHJcbiAgICovXHJcbiAgQWJvdmU6IFwiYWJvdmVcIixcclxuICAvKipcclxuICAgKiBiZWxvdzogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgdmFsdWUgaW4gYSByZXNvdXJjZSBpcyBzdWJzdW1lZCBieSB0aGUgc3BlY2lmaWVkIHZhbHVlIChpcy1hLCBvciBoaWVyYXJjaGljYWwgcmVsYXRpb25zaGlwcykuXHJcbiAgICovXHJcbiAgQmVsb3c6IFwiYmVsb3dcIixcclxuICAvKipcclxuICAgKiBjb250YWluczogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgcmV0dXJucyByZXNvdXJjZXMgdGhhdCBpbmNsdWRlIHRoZSBzdXBwbGllZCBwYXJhbWV0ZXIgdmFsdWUgYW55d2hlcmUgd2l0aGluIHRoZSBmaWVsZCBiZWluZyBzZWFyY2hlZC5cclxuICAgKi9cclxuICBDb250YWluczogXCJjb250YWluc1wiLFxyXG4gIC8qKlxyXG4gICAqIGV4YWN0OiBUaGUgc2VhcmNoIHBhcmFtZXRlciByZXR1cm5zIHJlc291cmNlcyB0aGF0IGhhdmUgYSB2YWx1ZSB0aGF0IGV4YWN0bHkgbWF0Y2hlcyB0aGUgc3VwcGxpZWQgcGFyYW1ldGVyICh0aGUgd2hvbGUgc3RyaW5nLCBpbmNsdWRpbmcgY2FzaW5nIGFuZCBhY2NlbnRzKS5cclxuICAgKi9cclxuICBFeGFjdDogXCJleGFjdFwiLFxyXG4gIC8qKlxyXG4gICAqIGlkZW50aWZpZXI6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGFwcGxpZXMgdG8gdGhlIGlkZW50aWZpZXIgb24gdGhlIHJlc291cmNlLCBub3QgdGhlIHJlZmVyZW5jZS5cclxuICAgKi9cclxuICBJZGVudGlmaWVyOiBcImlkZW50aWZpZXJcIixcclxuICAvKipcclxuICAgKiBpbjogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgaXMgYSBVUkkgKHJlbGF0aXZlIG9yIGFic29sdXRlKSB0aGF0IGlkZW50aWZpZXMgYSB2YWx1ZSBzZXQsIGFuZCB0aGUgc2VhcmNoIHBhcmFtZXRlciB0ZXN0cyB3aGV0aGVyIHRoZSBjb2RpbmcgaXMgaW4gdGhlIHNwZWNpZmllZCB2YWx1ZSBzZXQuXHJcbiAgICovXHJcbiAgSW46IFwiaW5cIixcclxuICAvKipcclxuICAgKiBtaXNzaW5nOiBUaGUgc2VhcmNoIHBhcmFtZXRlciByZXR1cm5zIHJlc291cmNlcyB0aGF0IGhhdmUgYSB2YWx1ZSBvciBub3QuXHJcbiAgICovXHJcbiAgTWlzc2luZzogXCJtaXNzaW5nXCIsXHJcbiAgLyoqXHJcbiAgICogbm90OiBUaGUgc2VhcmNoIHBhcmFtZXRlciByZXR1cm5zIHJlc291cmNlcyB0aGF0IGRvIG5vdCBjb250YWluIGEgbWF0Y2guXHJcbiAgICovXHJcbiAgTm90OiBcIm5vdFwiLFxyXG4gIC8qKlxyXG4gICAqIG5vdC1pbjogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgaXMgYSBVUkkgKHJlbGF0aXZlIG9yIGFic29sdXRlKSB0aGF0IGlkZW50aWZpZXMgYSB2YWx1ZSBzZXQsIGFuZCB0aGUgc2VhcmNoIHBhcmFtZXRlciB0ZXN0cyB3aGV0aGVyIHRoZSBjb2RpbmcgaXMgbm90IGluIHRoZSBzcGVjaWZpZWQgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIE5vdEluOiBcIm5vdC1pblwiLFxyXG4gIC8qKlxyXG4gICAqIG9mVHlwZTogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgaGFzIHRoZSBmb3JtYXQgc3lzdGVtfGNvZGV8dmFsdWUsIHdoZXJlIHRoZSBzeXN0ZW0gYW5kIGNvZGUgcmVmZXIgdG8gYW4gSWRlbnRpZmllci50eXBlLmNvZGluZy5zeXN0ZW0gYW5kIC5jb2RlLCBhbmQgbWF0Y2ggaWYgYW55IG9mIHRoZSB0eXBlIGNvZGVzIG1hdGNoLiBBbGwgMyBwYXJ0cyBtdXN0IGJlIHByZXNlbnQuXHJcbiAgICovXHJcbiAgT2ZUeXBlOiBcIm9mVHlwZVwiLFxyXG4gIC8qKlxyXG4gICAqIHRleHQ6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIHByb2Nlc3NlZCBhcyBhIHN0cmluZyB0aGF0IHNlYXJjaGVzIHRleHQgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb2RlL3ZhbHVlIC0gZWl0aGVyIENvZGVhYmxlQ29uY2VwdC50ZXh0LCBDb2RpbmcuZGlzcGxheSwgb3IgSWRlbnRpZmllci50eXBlLnRleHQuXHJcbiAgICovXHJcbiAgVGV4dDogXCJ0ZXh0XCIsXHJcbiAgLyoqXHJcbiAgICogdHlwZTogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgb25seSBhcHBsaWVzIHRvIHRoZSBSZXNvdXJjZSBUeXBlIHNwZWNpZmllZCBhcyBhIG1vZGlmaWVyIChlLmcuIHRoZSBtb2RpZmllciBpcyBub3QgYWN0dWFsbHkgOnR5cGUsIGJ1dCA6UGF0aWVudCBldGMuKS5cclxuICAgKi9cclxuICBUeXBlOiBcInR5cGVcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBBIHN1cHBvcnRlZCBtb2RpZmllciBmb3IgYSBzZWFyY2ggcGFyYW1ldGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU2VhcmNoTW9kaWZpZXJDb2RlQ29kZVR5cGUgPSB0eXBlb2YgU2VhcmNoTW9kaWZpZXJDb2RlQ29kZXNba2V5b2YgdHlwZW9mIFNlYXJjaE1vZGlmaWVyQ29kZUNvZGVzXTtcclxuIl19