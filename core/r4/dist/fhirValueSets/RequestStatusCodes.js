// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/request-status|4.0.1
/**
 * Codes identifying the lifecycle stage of a request.
 */
export const RequestStatusCodes = {
    /**
     * active: The request is in force and ready to be acted upon.
     */
    Active: "active",
    /**
     * completed: The activity described by the request has been fully performed.  No further activity will occur.
     */
    Completed: "completed",
    /**
     * draft: The request has been created but is not yet complete or ready for action.
     */
    Draft: "draft",
    /**
     * entered-in-error: This request should never have existed and should be considered 'void'.  (It is possible that real-world decisions were based on it.  If real-world activity has occurred, the status should be "revoked" rather than "entered-in-error".).
     */
    EnteredInError: "entered-in-error",
    /**
     * on-hold: The request (and any implicit authorization to act) has been temporarily withdrawn but is expected to resume in the future.
     */
    OnHold: "on-hold",
    /**
     * revoked: The request (and any implicit authorization to act) has been terminated prior to the known full completion of the intended actions.  No further activity should occur.
     */
    Revoked: "revoked",
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this request.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which.
     */
    Unknown: "unknown",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdFN0YXR1c0NvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZXF1ZXN0U3RhdHVzQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsbUVBQW1FO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUc7SUFDaEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGNBQWMsRUFBRSxrQkFBa0I7SUFDbEM7O09BRUc7SUFDSCxNQUFNLEVBQUUsU0FBUztJQUNqQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7Q0FDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3JlcXVlc3Qtc3RhdHVzfDQuMC4xXHJcblxyXG4vKipcclxuICogQ29kZXMgaWRlbnRpZnlpbmcgdGhlIGxpZmVjeWNsZSBzdGFnZSBvZiBhIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUmVxdWVzdFN0YXR1c0NvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZTogVGhlIHJlcXVlc3QgaXMgaW4gZm9yY2UgYW5kIHJlYWR5IHRvIGJlIGFjdGVkIHVwb24uXHJcbiAgICovXHJcbiAgQWN0aXZlOiBcImFjdGl2ZVwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIGFjdGl2aXR5IGRlc2NyaWJlZCBieSB0aGUgcmVxdWVzdCBoYXMgYmVlbiBmdWxseSBwZXJmb3JtZWQuICBObyBmdXJ0aGVyIGFjdGl2aXR5IHdpbGwgb2NjdXIuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBcImNvbXBsZXRlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBjcmVhdGVkIGJ1dCBpcyBub3QgeWV0IGNvbXBsZXRlIG9yIHJlYWR5IGZvciBhY3Rpb24uXHJcbiAgICovXHJcbiAgRHJhZnQ6IFwiZHJhZnRcIixcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGlzIHJlcXVlc3Qgc2hvdWxkIG5ldmVyIGhhdmUgZXhpc3RlZCBhbmQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgJ3ZvaWQnLiAgKEl0IGlzIHBvc3NpYmxlIHRoYXQgcmVhbC13b3JsZCBkZWNpc2lvbnMgd2VyZSBiYXNlZCBvbiBpdC4gIElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcInJldm9rZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAvKipcclxuICAgKiBvbi1ob2xkOiBUaGUgcmVxdWVzdCAoYW5kIGFueSBpbXBsaWNpdCBhdXRob3JpemF0aW9uIHRvIGFjdCkgaGFzIGJlZW4gdGVtcG9yYXJpbHkgd2l0aGRyYXduIGJ1dCBpcyBleHBlY3RlZCB0byByZXN1bWUgaW4gdGhlIGZ1dHVyZS5cclxuICAgKi9cclxuICBPbkhvbGQ6IFwib24taG9sZFwiLFxyXG4gIC8qKlxyXG4gICAqIHJldm9rZWQ6IFRoZSByZXF1ZXN0IChhbmQgYW55IGltcGxpY2l0IGF1dGhvcml6YXRpb24gdG8gYWN0KSBoYXMgYmVlbiB0ZXJtaW5hdGVkIHByaW9yIHRvIHRoZSBrbm93biBmdWxsIGNvbXBsZXRpb24gb2YgdGhlIGludGVuZGVkIGFjdGlvbnMuICBObyBmdXJ0aGVyIGFjdGl2aXR5IHNob3VsZCBvY2N1ci5cclxuICAgKi9cclxuICBSZXZva2VkOiBcInJldm9rZWRcIixcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgYXV0aG9yaW5nL3NvdXJjZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaCBvZiB0aGUgc3RhdHVzIHZhbHVlcyBjdXJyZW50bHkgYXBwbGllcyBmb3IgdGhpcyByZXF1ZXN0LiAgTm90ZTogVGhpcyBjb25jZXB0IGlzIG5vdCB0byBiZSB1c2VkIGZvciBcIm90aGVyXCIgLSBvbmUgb2YgdGhlIGxpc3RlZCBzdGF0dXNlcyBpcyBwcmVzdW1lZCB0byBhcHBseSwgIGJ1dCB0aGUgYXV0aG9yaW5nL3NvdXJjZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaC5cclxuICAgKi9cclxuICBVbmtub3duOiBcInVua25vd25cIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpZGVudGlmeWluZyB0aGUgbGlmZWN5Y2xlIHN0YWdlIG9mIGEgcmVxdWVzdC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFJlcXVlc3RTdGF0dXNDb2RlVHlwZSA9IHR5cGVvZiBSZXF1ZXN0U3RhdHVzQ29kZXNba2V5b2YgdHlwZW9mIFJlcXVlc3RTdGF0dXNDb2Rlc107XHJcbiJdfQ==