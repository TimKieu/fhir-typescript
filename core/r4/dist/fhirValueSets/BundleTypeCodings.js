// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/bundle-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Indicates the purpose of a bundle - how it is intended to be used.
 */
export const BundleTypeCodings = {
    /**
     * batch: The bundle is a set of actions - intended to be processed by a server as a group of independent actions.
     */
    Batch: new Coding({
        display: "Batch",
        code: "batch",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * batch-response: The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
     */
    BatchResponse: new Coding({
        display: "Batch Response",
        code: "batch-response",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * collection: The bundle is a set of resources collected into a single package for ease of distribution that imposes no processing obligations or behavioral rules beyond persistence.
     */
    Collection: new Coding({
        display: "Collection",
        code: "collection",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * document: The bundle is a document. The first resource is a Composition.
     */
    Document: new Coding({
        display: "Document",
        code: "document",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * history: The bundle is a list of resources from a history interaction on a server.
     */
    HistoryList: new Coding({
        display: "History List",
        code: "history",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * message: The bundle is a message. The first resource is a MessageHeader.
     */
    Message: new Coding({
        display: "Message",
        code: "message",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * searchset: The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
     */
    SearchResults: new Coding({
        display: "Search Results",
        code: "searchset",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * transaction: The bundle is a transaction - intended to be processed by a server as an atomic commit.
     */
    Transaction: new Coding({
        display: "Transaction",
        code: "transaction",
        system: "http://hl7.org/fhir/bundle-type",
    }),
    /**
     * transaction-response: The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free.
     */
    TransactionResponse: new Coding({
        display: "Transaction Response",
        code: "transaction-response",
        system: "http://hl7.org/fhir/bundle-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVuZGxlVHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0J1bmRsZVR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGdFQUFnRTtBQUVoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRztJQUMvQjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxpQ0FBaUM7S0FDMUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxpQ0FBaUM7S0FDMUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGlDQUFpQztLQUMxQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILG1CQUFtQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzlCLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2J1bmRsZS10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhlIHB1cnBvc2Ugb2YgYSBidW5kbGUgLSBob3cgaXQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBCdW5kbGVUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBiYXRjaDogVGhlIGJ1bmRsZSBpcyBhIHNldCBvZiBhY3Rpb25zIC0gaW50ZW5kZWQgdG8gYmUgcHJvY2Vzc2VkIGJ5IGEgc2VydmVyIGFzIGEgZ3JvdXAgb2YgaW5kZXBlbmRlbnQgYWN0aW9ucy5cclxuICAgKi9cclxuICBCYXRjaDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJhdGNoXCIsXHJcbiAgICBjb2RlOiBcImJhdGNoXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9idW5kbGUtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGJhdGNoLXJlc3BvbnNlOiBUaGUgYnVuZGxlIGlzIGEgYmF0Y2ggcmVzcG9uc2UuIE5vdGUgdGhhdCBhcyBhIGJhdGNoLCBzb21lIHJlc3BvbnNlcyBtYXkgaW5kaWNhdGUgZmFpbHVyZSBhbmQgb3RoZXJzIHN1Y2Nlc3MuXHJcbiAgICovXHJcbiAgQmF0Y2hSZXNwb25zZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJhdGNoIFJlc3BvbnNlXCIsXHJcbiAgICBjb2RlOiBcImJhdGNoLXJlc3BvbnNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9idW5kbGUtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvbGxlY3Rpb246IFRoZSBidW5kbGUgaXMgYSBzZXQgb2YgcmVzb3VyY2VzIGNvbGxlY3RlZCBpbnRvIGEgc2luZ2xlIHBhY2thZ2UgZm9yIGVhc2Ugb2YgZGlzdHJpYnV0aW9uIHRoYXQgaW1wb3NlcyBubyBwcm9jZXNzaW5nIG9ibGlnYXRpb25zIG9yIGJlaGF2aW9yYWwgcnVsZXMgYmV5b25kIHBlcnNpc3RlbmNlLlxyXG4gICAqL1xyXG4gIENvbGxlY3Rpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb2xsZWN0aW9uXCIsXHJcbiAgICBjb2RlOiBcImNvbGxlY3Rpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2J1bmRsZS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZG9jdW1lbnQ6IFRoZSBidW5kbGUgaXMgYSBkb2N1bWVudC4gVGhlIGZpcnN0IHJlc291cmNlIGlzIGEgQ29tcG9zaXRpb24uXHJcbiAgICovXHJcbiAgRG9jdW1lbnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEb2N1bWVudFwiLFxyXG4gICAgY29kZTogXCJkb2N1bWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYnVuZGxlLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBoaXN0b3J5OiBUaGUgYnVuZGxlIGlzIGEgbGlzdCBvZiByZXNvdXJjZXMgZnJvbSBhIGhpc3RvcnkgaW50ZXJhY3Rpb24gb24gYSBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgSGlzdG9yeUxpc3Q6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJIaXN0b3J5IExpc3RcIixcclxuICAgIGNvZGU6IFwiaGlzdG9yeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYnVuZGxlLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBtZXNzYWdlOiBUaGUgYnVuZGxlIGlzIGEgbWVzc2FnZS4gVGhlIGZpcnN0IHJlc291cmNlIGlzIGEgTWVzc2FnZUhlYWRlci5cclxuICAgKi9cclxuICBNZXNzYWdlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTWVzc2FnZVwiLFxyXG4gICAgY29kZTogXCJtZXNzYWdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9idW5kbGUtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHNlYXJjaHNldDogVGhlIGJ1bmRsZSBpcyBhIGxpc3Qgb2YgcmVzb3VyY2VzIHJldHVybmVkIGFzIGEgcmVzdWx0IG9mIGEgc2VhcmNoL3F1ZXJ5IGludGVyYWN0aW9uLCBvcGVyYXRpb24sIG9yIG1lc3NhZ2UuXHJcbiAgICovXHJcbiAgU2VhcmNoUmVzdWx0czogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNlYXJjaCBSZXN1bHRzXCIsXHJcbiAgICBjb2RlOiBcInNlYXJjaHNldFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYnVuZGxlLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB0cmFuc2FjdGlvbjogVGhlIGJ1bmRsZSBpcyBhIHRyYW5zYWN0aW9uIC0gaW50ZW5kZWQgdG8gYmUgcHJvY2Vzc2VkIGJ5IGEgc2VydmVyIGFzIGFuIGF0b21pYyBjb21taXQuXHJcbiAgICovXHJcbiAgVHJhbnNhY3Rpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUcmFuc2FjdGlvblwiLFxyXG4gICAgY29kZTogXCJ0cmFuc2FjdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYnVuZGxlLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB0cmFuc2FjdGlvbi1yZXNwb25zZTogVGhlIGJ1bmRsZSBpcyBhIHRyYW5zYWN0aW9uIHJlc3BvbnNlLiBCZWNhdXNlIHRoZSByZXNwb25zZSBpcyBhIHRyYW5zYWN0aW9uIHJlc3BvbnNlLCB0aGUgdHJhbnNhY3Rpb24gaGFzIHN1Y2NlZWRlZCwgYW5kIGFsbCByZXNwb25zZXMgYXJlIGVycm9yIGZyZWUuXHJcbiAgICovXHJcbiAgVHJhbnNhY3Rpb25SZXNwb25zZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlRyYW5zYWN0aW9uIFJlc3BvbnNlXCIsXHJcbiAgICBjb2RlOiBcInRyYW5zYWN0aW9uLXJlc3BvbnNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9idW5kbGUtdHlwZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyB0aGUgcHVycG9zZSBvZiBhIGJ1bmRsZSAtIGhvdyBpdCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQnVuZGxlVHlwZUNvZGluZ1R5cGUgPSB0eXBlb2YgQnVuZGxlVHlwZUNvZGluZ3M7XHJcbiJdfQ==