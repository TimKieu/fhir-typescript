// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/coverageeligibilityresponse-ex-auth-support|4.0.1
/**
 * This value set includes CoverageEligibilityResponse Auth Support codes.
 */
export const CoverageeligibilityresponseExAuthSupportCodings = {
    /**
     * accidentreport: A formal accident report as would be filed with police or a simlar official body.
     */
    AccidentReport: {
        display: "Accident Report",
        code: "accidentreport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * diagnosticimageorder: A request or authorization for diagnostic imaging.
     */
    DiagnosticImageOrder: {
        display: "Diagnostic Image Order",
        code: "diagnosticimageorder",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * diagnosticimagereport: A report on diagnostic image(s).
     */
    DiagnosticImageReport: {
        display: "Diagnostic Image Report",
        code: "diagnosticimagereport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * laborder: A request or authorization for laboratory diagnostic tests.
     */
    LabOrder: {
        display: "Lab Order",
        code: "laborder",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * labreport: A report on laboratory diagnostic test(s).
     */
    LabReport: {
        display: "Lab Report",
        code: "labreport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * model: A physical model of the affected area.
     */
    Model: {
        display: "Model",
        code: "model",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * picture: A photograph of the affected area.
     */
    Picture: {
        display: "Picture",
        code: "picture",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
    /**
     * professionalreport: A report from a licensed professional regarding the siutation, condition or proposed treatment.
     */
    ProfessionalReport: {
        display: "Professional Report",
        code: "professionalreport",
        system: "http://terminology.hl7.org/CodeSystem/coverageeligibilityresponse-ex-auth-support",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlRXhBdXRoU3VwcG9ydENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZUV4QXV0aFN1cHBvcnRDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGdHQUFnRztBQTBDaEc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwrQ0FBK0MsR0FBc0Q7SUFDaEg7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLG1GQUFtRjtLQUM1RjtJQUNEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxJQUFJLEVBQUUsc0JBQXNCO1FBQzVCLE1BQU0sRUFBRSxtRkFBbUY7S0FDNUY7SUFDRDs7T0FFRztJQUNILHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsSUFBSSxFQUFFLHVCQUF1QjtRQUM3QixNQUFNLEVBQUUsbUZBQW1GO0tBQzVGO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsbUZBQW1GO0tBQzVGO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsbUZBQW1GO0tBQzVGO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxtRkFBbUY7S0FDNUY7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG1GQUFtRjtLQUM1RjtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLE1BQU0sRUFBRSxtRkFBbUY7S0FDNUY7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnR8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBDb3ZlcmFnZUVsaWdpYmlsaXR5UmVzcG9uc2UgQXV0aCBTdXBwb3J0IGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlRXhBdXRoU3VwcG9ydENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNjaWRlbnRyZXBvcnQ6IEEgZm9ybWFsIGFjY2lkZW50IHJlcG9ydCBhcyB3b3VsZCBiZSBmaWxlZCB3aXRoIHBvbGljZSBvciBhIHNpbWxhciBvZmZpY2lhbCBib2R5LlxyXG4gICAqL1xyXG4gIEFjY2lkZW50UmVwb3J0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRpYWdub3N0aWNpbWFnZW9yZGVyOiBBIHJlcXVlc3Qgb3IgYXV0aG9yaXphdGlvbiBmb3IgZGlhZ25vc3RpYyBpbWFnaW5nLlxyXG4gICAqL1xyXG4gIERpYWdub3N0aWNJbWFnZU9yZGVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRpYWdub3N0aWNpbWFnZXJlcG9ydDogQSByZXBvcnQgb24gZGlhZ25vc3RpYyBpbWFnZShzKS5cclxuICAgKi9cclxuICBEaWFnbm9zdGljSW1hZ2VSZXBvcnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGFib3JkZXI6IEEgcmVxdWVzdCBvciBhdXRob3JpemF0aW9uIGZvciBsYWJvcmF0b3J5IGRpYWdub3N0aWMgdGVzdHMuXHJcbiAgICovXHJcbiAgTGFiT3JkZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbGFicmVwb3J0OiBBIHJlcG9ydCBvbiBsYWJvcmF0b3J5IGRpYWdub3N0aWMgdGVzdChzKS5cclxuICAgKi9cclxuICBMYWJSZXBvcnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbW9kZWw6IEEgcGh5c2ljYWwgbW9kZWwgb2YgdGhlIGFmZmVjdGVkIGFyZWEuXHJcbiAgICovXHJcbiAgTW9kZWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGljdHVyZTogQSBwaG90b2dyYXBoIG9mIHRoZSBhZmZlY3RlZCBhcmVhLlxyXG4gICAqL1xyXG4gIFBpY3R1cmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcHJvZmVzc2lvbmFscmVwb3J0OiBBIHJlcG9ydCBmcm9tIGEgbGljZW5zZWQgcHJvZmVzc2lvbmFsIHJlZ2FyZGluZyB0aGUgc2l1dGF0aW9uLCBjb25kaXRpb24gb3IgcHJvcG9zZWQgdHJlYXRtZW50LlxyXG4gICAqL1xyXG4gIFByb2Zlc3Npb25hbFJlcG9ydDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIENvdmVyYWdlRWxpZ2liaWxpdHlSZXNwb25zZSBBdXRoIFN1cHBvcnQgY29kZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlRXhBdXRoU3VwcG9ydENvZGluZ3M6Q292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlRXhBdXRoU3VwcG9ydENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNjaWRlbnRyZXBvcnQ6IEEgZm9ybWFsIGFjY2lkZW50IHJlcG9ydCBhcyB3b3VsZCBiZSBmaWxlZCB3aXRoIHBvbGljZSBvciBhIHNpbWxhciBvZmZpY2lhbCBib2R5LlxyXG4gICAqL1xyXG4gIEFjY2lkZW50UmVwb3J0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjY2lkZW50IFJlcG9ydFwiLFxyXG4gICAgY29kZTogXCJhY2NpZGVudHJlcG9ydFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlLWV4LWF1dGgtc3VwcG9ydFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGlhZ25vc3RpY2ltYWdlb3JkZXI6IEEgcmVxdWVzdCBvciBhdXRob3JpemF0aW9uIGZvciBkaWFnbm9zdGljIGltYWdpbmcuXHJcbiAgICovXHJcbiAgRGlhZ25vc3RpY0ltYWdlT3JkZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRGlhZ25vc3RpYyBJbWFnZSBPcmRlclwiLFxyXG4gICAgY29kZTogXCJkaWFnbm9zdGljaW1hZ2VvcmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlLWV4LWF1dGgtc3VwcG9ydFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGlhZ25vc3RpY2ltYWdlcmVwb3J0OiBBIHJlcG9ydCBvbiBkaWFnbm9zdGljIGltYWdlKHMpLlxyXG4gICAqL1xyXG4gIERpYWdub3N0aWNJbWFnZVJlcG9ydDoge1xyXG4gICAgZGlzcGxheTogXCJEaWFnbm9zdGljIEltYWdlIFJlcG9ydFwiLFxyXG4gICAgY29kZTogXCJkaWFnbm9zdGljaW1hZ2VyZXBvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxhYm9yZGVyOiBBIHJlcXVlc3Qgb3IgYXV0aG9yaXphdGlvbiBmb3IgbGFib3JhdG9yeSBkaWFnbm9zdGljIHRlc3RzLlxyXG4gICAqL1xyXG4gIExhYk9yZGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIkxhYiBPcmRlclwiLFxyXG4gICAgY29kZTogXCJsYWJvcmRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2VlbGlnaWJpbGl0eXJlc3BvbnNlLWV4LWF1dGgtc3VwcG9ydFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbGFicmVwb3J0OiBBIHJlcG9ydCBvbiBsYWJvcmF0b3J5IGRpYWdub3N0aWMgdGVzdChzKS5cclxuICAgKi9cclxuICBMYWJSZXBvcnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTGFiIFJlcG9ydFwiLFxyXG4gICAgY29kZTogXCJsYWJyZXBvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1vZGVsOiBBIHBoeXNpY2FsIG1vZGVsIG9mIHRoZSBhZmZlY3RlZCBhcmVhLlxyXG4gICAqL1xyXG4gIE1vZGVsOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1vZGVsXCIsXHJcbiAgICBjb2RlOiBcIm1vZGVsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZWVsaWdpYmlsaXR5cmVzcG9uc2UtZXgtYXV0aC1zdXBwb3J0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwaWN0dXJlOiBBIHBob3RvZ3JhcGggb2YgdGhlIGFmZmVjdGVkIGFyZWEuXHJcbiAgICovXHJcbiAgUGljdHVyZToge1xyXG4gICAgZGlzcGxheTogXCJQaWN0dXJlXCIsXHJcbiAgICBjb2RlOiBcInBpY3R1cmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHByb2Zlc3Npb25hbHJlcG9ydDogQSByZXBvcnQgZnJvbSBhIGxpY2Vuc2VkIHByb2Zlc3Npb25hbCByZWdhcmRpbmcgdGhlIHNpdXRhdGlvbiwgY29uZGl0aW9uIG9yIHByb3Bvc2VkIHRyZWF0bWVudC5cclxuICAgKi9cclxuICBQcm9mZXNzaW9uYWxSZXBvcnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvZmVzc2lvbmFsIFJlcG9ydFwiLFxyXG4gICAgY29kZTogXCJwcm9mZXNzaW9uYWxyZXBvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlZWxpZ2liaWxpdHlyZXNwb25zZS1leC1hdXRoLXN1cHBvcnRcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=