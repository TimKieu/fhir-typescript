// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://terminology.hl7.org/ValueSet/v2-0371|2.9
import { Coding } from '../fhir/Coding.js';
/**
 * FHIR Value set/code system definition for HL7 v2 table 0371 ( Additive)
 */
export const V20371Codings = {
    /**
     * Code: ACDA
     */
    ACDSolutionA: new Coding({
        display: "ACD Solution A",
        code: "ACDA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: ACDB
     */
    ACDSolutionB: new Coding({
        display: "ACD Solution B",
        code: "ACDB",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: ACET
     */
    AceticAcid: new Coding({
        display: "Acetic Acid",
        code: "ACET",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: AMIES
     */
    AmiesTransportMedium: new Coding({
        display: "Amies transport medium",
        code: "AMIES",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: BACTM
     */
    BacterialTransportMedium: new Coding({
        display: "Bacterial Transport medium",
        code: "BACTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: BF10
     */
    Buffered10PercentFormalin: new Coding({
        display: "Buffered 10% formalin",
        code: "BF10",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: BOR
     */
    BorateBoricAcid: new Coding({
        display: "Borate Boric Acid",
        code: "BOR",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: BOUIN
     */
    BouinQuoteSSolution: new Coding({
        display: "Bouin's solution",
        code: "BOUIN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: BSKM
     */
    BufferedSkimMilk: new Coding({
        display: "Buffered skim milk",
        code: "BSKM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: C32
     */
    VAL32PercentCitrate: new Coding({
        display: "3.2%  Citrate",
        code: "C32",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: C38
     */
    VAL38PercentCitrate: new Coding({
        display: "3.8% Citrate",
        code: "C38",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: CARS
     */
    CarsonQuoteSModified10PercentFormalin: new Coding({
        display: "Carson's Modified 10% formalin",
        code: "CARS",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: CARY
     */
    CaryBlairMedium: new Coding({
        display: "Cary Blair Medium",
        code: "CARY",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: CHLTM
     */
    ChlamydiaTransportMedium: new Coding({
        display: "Chlamydia transport medium",
        code: "CHLTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: CTAD
     */
    CTADThisShouldBeSpelledOutIfNotUniversallyUnderstood: new Coding({
        display: "CTAD (this should be spelled out if not universally understood)",
        code: "CTAD",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: EDTK
     */
    PotassiumKEDTA: new Coding({
        display: "Potassium/K EDTA",
        code: "EDTK",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: EDTK15
     */
    PotassiumKEDTA15Percent: new Coding({
        display: "Potassium/K EDTA 15%",
        code: "EDTK15",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: EDTK75
     */
    PotassiumKEDTA75Percent: new Coding({
        display: "Potassium/K EDTA 7.5%",
        code: "EDTK75",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: EDTN
     */
    SodiumNaEDTA: new Coding({
        display: "Sodium/Na EDTA",
        code: "EDTN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: ENT
     */
    EntericBacteriaTransportMedium: new Coding({
        display: "Enteric bacteria transport medium",
        code: "ENT",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: ENT+
     */
    EntericPlus: new Coding({
        display: "Enteric plus",
        code: "ENT+",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: F10
     */
    VAL10PercentFormalin: new Coding({
        display: "10% Formalin",
        code: "F10",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: FDP
     */
    ThrombinNIHSoybeanTrypsinInhibitorFibrinDegradationProducts: new Coding({
        display: "Thrombin NIH; soybean trypsin inhibitor (Fibrin Degradation Products)",
        code: "FDP",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: FL10
     */
    SodiumFluoride10mg: new Coding({
        display: "Sodium Fluoride, 10mg",
        code: "FL10",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: FL100
     */
    SodiumFluoride100mg: new Coding({
        display: "Sodium Fluoride, 100mg",
        code: "FL100",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: HCL6
     */
    VAL6NHCL: new Coding({
        display: "6N HCL",
        code: "HCL6",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: HEPA
     */
    AmmoniumHeparin: new Coding({
        display: "Ammonium heparin",
        code: "HEPA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: HEPL
     */
    LithiumLiHeparin: new Coding({
        display: "Lithium/Li  Heparin",
        code: "HEPL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: HEPN
     */
    SodiumNaHeparin: new Coding({
        display: "Sodium/Na  Heparin",
        code: "HEPN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: HNO3
     */
    NitricAcid: new Coding({
        display: "Nitric Acid",
        code: "HNO3",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: JKM
     */
    JonesKendrickMedium: new Coding({
        display: "Jones Kendrick Medium",
        code: "JKM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: KARN
     */
    KarnovskyQuoteSFixative: new Coding({
        display: "Karnovsky's fixative",
        code: "KARN",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: KOX
     */
    PotassiumOxalate: new Coding({
        display: "Potassium Oxalate",
        code: "KOX",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: LIA
     */
    LithiumIodoacetate: new Coding({
        display: "Lithium iodoacetate",
        code: "LIA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: M4
     */
    M4: new Coding({
        display: "M4",
        code: "M4",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: M4RT
     */
    M4RT: new Coding({
        display: "M4-RT",
        code: "M4RT",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: M5
     */
    M5: new Coding({
        display: "M5",
        code: "M5",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: MICHTM
     */
    MichelQuoteSTransportMedium: new Coding({
        display: "Michel's transport medium",
        code: "MICHTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: MMDTM
     */
    MMDTransportMedium: new Coding({
        display: "MMD transport medium",
        code: "MMDTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: NAF
     */
    SodiumFluoride: new Coding({
        display: "Sodium Fluoride",
        code: "NAF",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: NAPS
     */
    SodiumPolyanetholSulfonate035PercentIn085PercentSodiumChloride: new Coding({
        display: "Sodium polyanethol sulfonate 0.35% in 0.85% sodium chloride",
        code: "NAPS",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: NONE
     */
    None: new Coding({
        display: "None",
        code: "NONE",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: PAGE
     */
    PagesQuoteSSaline: new Coding({
        display: "Pages's Saline",
        code: "PAGE",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: PHENOL
     */
    Phenol: new Coding({
        display: "Phenol",
        code: "PHENOL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: PVA
     */
    PVAPolyvinylalcohol: new Coding({
        display: "PVA (polyvinylalcohol)",
        code: "PVA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: RLM
     */
    ReaganLoweMedium: new Coding({
        display: "Reagan Lowe Medium",
        code: "RLM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: SILICA
     */
    SiliceousEarth12Mg: new Coding({
        display: "Siliceous earth, 12 mg",
        code: "SILICA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: SPS
     */
    SPSThisShouldBeSpelledOutIfNotUniversallyUnderstood: new Coding({
        display: "SPS(this should be spelled out if not universally understood)",
        code: "SPS",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: SST
     */
    SerumSeparatorTubePolymerGel: new Coding({
        display: "Serum Separator Tube (Polymer Gel)",
        code: "SST",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: STUTM
     */
    StuartTransportMedium: new Coding({
        display: "Stuart transport medium",
        code: "STUTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: THROM
     */
    Thrombin: new Coding({
        display: "Thrombin",
        code: "THROM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: THYMOL
     */
    Thymol: new Coding({
        display: "Thymol",
        code: "THYMOL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: THYO
     */
    ThyoglycollateBroth: new Coding({
        display: "Thyoglycollate broth",
        code: "THYO",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: TOLU
     */
    Toluene: new Coding({
        display: "Toluene",
        code: "TOLU",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: URETM
     */
    UreaplasmaTransportMedium: new Coding({
        display: "Ureaplasma transport medium",
        code: "URETM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: VIRTM
     */
    ViralTransportMedium: new Coding({
        display: "Viral Transport medium",
        code: "VIRTM",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
    /**
     * Code: WEST
     */
    BufferedCitrateWestergrenSedimentationRate: new Coding({
        display: "Buffered Citrate (Westergren Sedimentation Rate)",
        code: "WEST",
        system: "http://terminology.hl7.org/CodeSystem/v2-0371",
    }),
};
//# sourceMappingURL=data:application/json;base64,