// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/certainty-subcomponent-rating|4.0.1
/**
 * The quality rating of the subcomponent of a quality of evidence rating.
 */
export const CertaintySubcomponentRatingCodings = {
    /**
     * absent: possible reason for increasing quality rating was checked and found to be absent.
     */
    Absent: {
        display: "absent",
        code: "absent",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * critical-concern: critical concern.
     */
    CriticalConcern: {
        display: "critical concern",
        code: "critical-concern",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * downcode1: reduce quality rating by 1.
     */
    ReduceRating1: {
        display: "reduce rating: -1",
        code: "downcode1",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * downcode2: reduce quality rating by 2.
     */
    ReduceRating2: {
        display: "reduce rating: -2",
        code: "downcode2",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * downcode3: reduce quality rating by 3.
     */
    ReduceRating3: {
        display: "reduce rating: -3",
        code: "downcode3",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * no-change: no change to quality rating.
     */
    NoChangeToRating: {
        display: "no change to rating",
        code: "no-change",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * no-concern: no serious concern.
     */
    NoSeriousConcern: {
        display: "no serious concern",
        code: "no-concern",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * present: possible reason for increasing quality rating was checked and found to bepresent.
     */
    Present: {
        display: "present",
        code: "present",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * serious-concern: serious concern.
     */
    SeriousConcern: {
        display: "serious concern",
        code: "serious-concern",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * upcode1: increase quality rating by 1.
     */
    IncreaseRatingPlus1: {
        display: "increase rating: +1",
        code: "upcode1",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
    /**
     * upcode2: increase quality rating by 2.
     */
    IncreaseRatingPlus2: {
        display: "increase rating: +2",
        code: "upcode2",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating",
    },
};
//# sourceMappingURL=data:application/json;base64,