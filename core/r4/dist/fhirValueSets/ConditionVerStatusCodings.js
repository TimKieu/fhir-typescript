// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/condition-ver-status|4.0.1
/**
 * The verification status to support or decline the clinical status of the condition or diagnosis.
 */
export const ConditionVerStatusCodings = {
    /**
     * confirmed: There is sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
     */
    Confirmed: {
        display: "Confirmed",
        code: "confirmed",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * differential: One of a set of potential (and typically mutually exclusive) diagnoses asserted to further guide the diagnostic process and preliminary treatment.
     */
    Differential: {
        display: "Differential",
        code: "differential",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * entered-in-error: The statement was entered in error and is not valid.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * provisional: This is a tentative diagnosis - still a candidate that is under consideration.
     */
    Provisional: {
        display: "Provisional",
        code: "provisional",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * refuted: This condition has been ruled out by diagnostic and clinical evidence.
     */
    Refuted: {
        display: "Refuted",
        code: "refuted",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
    /**
     * unconfirmed: There is not sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
     */
    Unconfirmed: {
        display: "Unconfirmed",
        code: "unconfirmed",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFrQ3pFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29uZGl0aW9uLXZlci1zdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmVyaWZpY2F0aW9uIHN0YXR1cyB0byBzdXBwb3J0IG9yIGRlY2xpbmUgdGhlIGNsaW5pY2FsIHN0YXR1cyBvZiB0aGUgY29uZGl0aW9uIG9yIGRpYWdub3Npcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbmRpdGlvblZlclN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29uZmlybWVkOiBUaGVyZSBpcyBzdWZmaWNpZW50IGRpYWdub3N0aWMgYW5kL29yIGNsaW5pY2FsIGV2aWRlbmNlIHRvIHRyZWF0IHRoaXMgYXMgYSBjb25maXJtZWQgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIENvbmZpcm1lZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkaWZmZXJlbnRpYWw6IE9uZSBvZiBhIHNldCBvZiBwb3RlbnRpYWwgKGFuZCB0eXBpY2FsbHkgbXV0dWFsbHkgZXhjbHVzaXZlKSBkaWFnbm9zZXMgYXNzZXJ0ZWQgdG8gZnVydGhlciBndWlkZSB0aGUgZGlhZ25vc3RpYyBwcm9jZXNzIGFuZCBwcmVsaW1pbmFyeSB0cmVhdG1lbnQuXHJcbiAgICovXHJcbiAgRGlmZmVyZW50aWFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBzdGF0ZW1lbnQgd2FzIGVudGVyZWQgaW4gZXJyb3IgYW5kIGlzIG5vdCB2YWxpZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm92aXNpb25hbDogVGhpcyBpcyBhIHRlbnRhdGl2ZSBkaWFnbm9zaXMgLSBzdGlsbCBhIGNhbmRpZGF0ZSB0aGF0IGlzIHVuZGVyIGNvbnNpZGVyYXRpb24uXHJcbiAgICovXHJcbiAgUHJvdmlzaW9uYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVmdXRlZDogVGhpcyBjb25kaXRpb24gaGFzIGJlZW4gcnVsZWQgb3V0IGJ5IGRpYWdub3N0aWMgYW5kIGNsaW5pY2FsIGV2aWRlbmNlLlxyXG4gICAqL1xyXG4gIFJlZnV0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdW5jb25maXJtZWQ6IFRoZXJlIGlzIG5vdCBzdWZmaWNpZW50IGRpYWdub3N0aWMgYW5kL29yIGNsaW5pY2FsIGV2aWRlbmNlIHRvIHRyZWF0IHRoaXMgYXMgYSBjb25maXJtZWQgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIFVuY29uZmlybWVkOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHZlcmlmaWNhdGlvbiBzdGF0dXMgdG8gc3VwcG9ydCBvciBkZWNsaW5lIHRoZSBjbGluaWNhbCBzdGF0dXMgb2YgdGhlIGNvbmRpdGlvbiBvciBkaWFnbm9zaXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5nczpDb25kaXRpb25WZXJTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbmZpcm1lZDogVGhlcmUgaXMgc3VmZmljaWVudCBkaWFnbm9zdGljIGFuZC9vciBjbGluaWNhbCBldmlkZW5jZSB0byB0cmVhdCB0aGlzIGFzIGEgY29uZmlybWVkIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBDb25maXJtZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29uZmlybWVkXCIsXHJcbiAgICBjb2RlOiBcImNvbmZpcm1lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRpZmZlcmVudGlhbDogT25lIG9mIGEgc2V0IG9mIHBvdGVudGlhbCAoYW5kIHR5cGljYWxseSBtdXR1YWxseSBleGNsdXNpdmUpIGRpYWdub3NlcyBhc3NlcnRlZCB0byBmdXJ0aGVyIGd1aWRlIHRoZSBkaWFnbm9zdGljIHByb2Nlc3MgYW5kIHByZWxpbWluYXJ5IHRyZWF0bWVudC5cclxuICAgKi9cclxuICBEaWZmZXJlbnRpYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiRGlmZmVyZW50aWFsXCIsXHJcbiAgICBjb2RlOiBcImRpZmZlcmVudGlhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBzdGF0ZW1lbnQgd2FzIGVudGVyZWQgaW4gZXJyb3IgYW5kIGlzIG5vdCB2YWxpZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjoge1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcm92aXNpb25hbDogVGhpcyBpcyBhIHRlbnRhdGl2ZSBkaWFnbm9zaXMgLSBzdGlsbCBhIGNhbmRpZGF0ZSB0aGF0IGlzIHVuZGVyIGNvbnNpZGVyYXRpb24uXHJcbiAgICovXHJcbiAgUHJvdmlzaW9uYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiUHJvdmlzaW9uYWxcIixcclxuICAgIGNvZGU6IFwicHJvdmlzaW9uYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWZ1dGVkOiBUaGlzIGNvbmRpdGlvbiBoYXMgYmVlbiBydWxlZCBvdXQgYnkgZGlhZ25vc3RpYyBhbmQgY2xpbmljYWwgZXZpZGVuY2UuXHJcbiAgICovXHJcbiAgUmVmdXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJSZWZ1dGVkXCIsXHJcbiAgICBjb2RlOiBcInJlZnV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bmNvbmZpcm1lZDogVGhlcmUgaXMgbm90IHN1ZmZpY2llbnQgZGlhZ25vc3RpYyBhbmQvb3IgY2xpbmljYWwgZXZpZGVuY2UgdG8gdHJlYXQgdGhpcyBhcyBhIGNvbmZpcm1lZCBjb25kaXRpb24uXHJcbiAgICovXHJcbiAgVW5jb25maXJtZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiVW5jb25maXJtZWRcIixcclxuICAgIGNvZGU6IFwidW5jb25maXJtZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19