// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/condition-ver-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The verification status to support or decline the clinical status of the condition or diagnosis.
 */
export const ConditionVerStatusCodings = {
    /**
     * confirmed: There is sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
     */
    Confirmed: new Coding({
        display: "Confirmed",
        code: "confirmed",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    }),
    /**
     * differential: One of a set of potential (and typically mutually exclusive) diagnoses asserted to further guide the diagnostic process and preliminary treatment.
     */
    Differential: new Coding({
        display: "Differential",
        code: "differential",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    }),
    /**
     * entered-in-error: The statement was entered in error and is not valid.
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    }),
    /**
     * provisional: This is a tentative diagnosis - still a candidate that is under consideration.
     */
    Provisional: new Coding({
        display: "Provisional",
        code: "provisional",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    }),
    /**
     * refuted: This condition has been ruled out by diagnostic and clinical evidence.
     */
    Refuted: new Coding({
        display: "Refuted",
        code: "refuted",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    }),
    /**
     * unconfirmed: There is not sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
     */
    Unconfirmed: new Coding({
        display: "Unconfirmed",
        code: "unconfirmed",
        system: "http://terminology.hl7.org/CodeSystem/condition-ver-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFFekUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkM7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw0REFBNEQ7S0FDckUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDREQUE0RDtLQUNyRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDREQUE0RDtLQUNyRSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb25kaXRpb24tdmVyLXN0YXR1c3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHZlcmlmaWNhdGlvbiBzdGF0dXMgdG8gc3VwcG9ydCBvciBkZWNsaW5lIHRoZSBjbGluaWNhbCBzdGF0dXMgb2YgdGhlIGNvbmRpdGlvbiBvciBkaWFnbm9zaXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29uZGl0aW9uVmVyU3RhdHVzQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBjb25maXJtZWQ6IFRoZXJlIGlzIHN1ZmZpY2llbnQgZGlhZ25vc3RpYyBhbmQvb3IgY2xpbmljYWwgZXZpZGVuY2UgdG8gdHJlYXQgdGhpcyBhcyBhIGNvbmZpcm1lZCBjb25kaXRpb24uXHJcbiAgICovXHJcbiAgQ29uZmlybWVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29uZmlybWVkXCIsXHJcbiAgICBjb2RlOiBcImNvbmZpcm1lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkaWZmZXJlbnRpYWw6IE9uZSBvZiBhIHNldCBvZiBwb3RlbnRpYWwgKGFuZCB0eXBpY2FsbHkgbXV0dWFsbHkgZXhjbHVzaXZlKSBkaWFnbm9zZXMgYXNzZXJ0ZWQgdG8gZnVydGhlciBndWlkZSB0aGUgZGlhZ25vc3RpYyBwcm9jZXNzIGFuZCBwcmVsaW1pbmFyeSB0cmVhdG1lbnQuXHJcbiAgICovXHJcbiAgRGlmZmVyZW50aWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGlmZmVyZW50aWFsXCIsXHJcbiAgICBjb2RlOiBcImRpZmZlcmVudGlhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgc3RhdGVtZW50IHdhcyBlbnRlcmVkIGluIGVycm9yIGFuZCBpcyBub3QgdmFsaWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHJvdmlzaW9uYWw6IFRoaXMgaXMgYSB0ZW50YXRpdmUgZGlhZ25vc2lzIC0gc3RpbGwgYSBjYW5kaWRhdGUgdGhhdCBpcyB1bmRlciBjb25zaWRlcmF0aW9uLlxyXG4gICAqL1xyXG4gIFByb3Zpc2lvbmFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUHJvdmlzaW9uYWxcIixcclxuICAgIGNvZGU6IFwicHJvdmlzaW9uYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcmVmdXRlZDogVGhpcyBjb25kaXRpb24gaGFzIGJlZW4gcnVsZWQgb3V0IGJ5IGRpYWdub3N0aWMgYW5kIGNsaW5pY2FsIGV2aWRlbmNlLlxyXG4gICAqL1xyXG4gIFJlZnV0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZWZ1dGVkXCIsXHJcbiAgICBjb2RlOiBcInJlZnV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdW5jb25maXJtZWQ6IFRoZXJlIGlzIG5vdCBzdWZmaWNpZW50IGRpYWdub3N0aWMgYW5kL29yIGNsaW5pY2FsIGV2aWRlbmNlIHRvIHRyZWF0IHRoaXMgYXMgYSBjb25maXJtZWQgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIFVuY29uZmlybWVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVW5jb25maXJtZWRcIixcclxuICAgIGNvZGU6IFwidW5jb25maXJtZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHZlcmlmaWNhdGlvbiBzdGF0dXMgdG8gc3VwcG9ydCBvciBkZWNsaW5lIHRoZSBjbGluaWNhbCBzdGF0dXMgb2YgdGhlIGNvbmRpdGlvbiBvciBkaWFnbm9zaXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb25kaXRpb25WZXJTdGF0dXNDb2RpbmdUeXBlID0gdHlwZW9mIENvbmRpdGlvblZlclN0YXR1c0NvZGluZ3M7XHJcbiJdfQ==