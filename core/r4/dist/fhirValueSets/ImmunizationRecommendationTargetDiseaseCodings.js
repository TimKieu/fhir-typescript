// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-recommendation-target-disease|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the disease targeted by a vaccination recommendation. This value set is provided as a suggestive example and includes the SNOMED CT concepts from the 64572001 (Disease) hierarchy.
 */
export const ImmunizationRecommendationTargetDiseaseCodings = {
    /**
     * Code: 14189004
     */
    VAL14189004: new Coding({
        code: "14189004",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 1857005
     */
    VAL1857005: new Coding({
        code: "1857005",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 27836007
     */
    VAL27836007: new Coding({
        code: "27836007",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 36653000
     */
    VAL36653000: new Coding({
        code: "36653000",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 36989005
     */
    VAL36989005: new Coding({
        code: "36989005",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 397430003
     */
    VAL397430003: new Coding({
        code: "397430003",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 398102009
     */
    VAL398102009: new Coding({
        code: "398102009",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 709410003
     */
    VAL709410003: new Coding({
        code: "709410003",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 76902006
     */
    VAL76902006: new Coding({
        code: "76902006",
        system: "http://snomed.info/sct",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25UYXJnZXREaXNlYXNlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25UYXJnZXREaXNlYXNlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrRkFBK0Y7QUFFL0YsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOENBQThDLEdBQUc7SUFDNUQ7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2ltbXVuaXphdGlvbi1yZWNvbW1lbmRhdGlvbi10YXJnZXQtZGlzZWFzZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSBkaXNlYXNlIHRhcmdldGVkIGJ5IGEgdmFjY2luYXRpb24gcmVjb21tZW5kYXRpb24uIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlIGFuZCBpbmNsdWRlcyB0aGUgU05PTUVEIENUIGNvbmNlcHRzIGZyb20gdGhlIDY0NTcyMDAxIChEaXNlYXNlKSBoaWVyYXJjaHkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25UYXJnZXREaXNlYXNlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiAxNDE4OTAwNFxyXG4gICAqL1xyXG4gIFZBTDE0MTg5MDA0OiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiMTQxODkwMDRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTg1NzAwNVxyXG4gICAqL1xyXG4gIFZBTDE4NTcwMDU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIxODU3MDA1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDI3ODM2MDA3XHJcbiAgICovXHJcbiAgVkFMMjc4MzYwMDc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIyNzgzNjAwN1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzNjY1MzAwMFxyXG4gICAqL1xyXG4gIFZBTDM2NjUzMDAwOiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiMzY2NTMwMDBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMzY5ODkwMDVcclxuICAgKi9cclxuICBWQUwzNjk4OTAwNTogbmV3IENvZGluZyh7XHJcbiAgICBjb2RlOiBcIjM2OTg5MDA1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDM5NzQzMDAwM1xyXG4gICAqL1xyXG4gIFZBTDM5NzQzMDAwMzogbmV3IENvZGluZyh7XHJcbiAgICBjb2RlOiBcIjM5NzQzMDAwM1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzOTgxMDIwMDlcclxuICAgKi9cclxuICBWQUwzOTgxMDIwMDk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIzOTgxMDIwMDlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogNzA5NDEwMDAzXHJcbiAgICovXHJcbiAgVkFMNzA5NDEwMDAzOiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiNzA5NDEwMDAzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDc2OTAyMDA2XHJcbiAgICovXHJcbiAgVkFMNzY5MDIwMDY6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCI3NjkwMjAwNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIGRpc2Vhc2UgdGFyZ2V0ZWQgYnkgYSB2YWNjaW5hdGlvbiByZWNvbW1lbmRhdGlvbi4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUgYW5kIGluY2x1ZGVzIHRoZSBTTk9NRUQgQ1QgY29uY2VwdHMgZnJvbSB0aGUgNjQ1NzIwMDEgKERpc2Vhc2UpIGhpZXJhcmNoeS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltbXVuaXphdGlvblJlY29tbWVuZGF0aW9uVGFyZ2V0RGlzZWFzZUNvZGluZ1R5cGUgPSB0eXBlb2YgSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25UYXJnZXREaXNlYXNlQ29kaW5ncztcclxuIl19