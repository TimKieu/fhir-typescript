// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/list-order|4.0.1
/**
 * Base values for the order of the items in a list resource.
 */
export const ListOrderCodings = {
    /**
     * alphabetic: The list is sorted alphabetically by an unspecified property of the items in the list.
     */
    SortedAlphabetically: {
        display: "Sorted Alphabetically",
        code: "alphabetic",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * category: The list is sorted categorically by an unspecified property of the items in the list.
     */
    SortedByCategory: {
        display: "Sorted by Category",
        code: "category",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * entry-date: The list is sorted by the date the item was added to the list. Note that the date added to the list is not explicit in the list itself.
     */
    SortedByItemDate: {
        display: "Sorted by Item Date",
        code: "entry-date",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * event-date: The list is sorted by the data of the event. This can be used when the list has items which are dates with past or future events.
     */
    SortedByEventDate: {
        display: "Sorted by Event Date",
        code: "event-date",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * patient: The list is sorted by patient, with items for each patient grouped together.
     */
    SortedByPatient: {
        display: "Sorted by Patient",
        code: "patient",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * priority: The list is sorted by priority. The exact method in which priority has been determined is not specified.
     */
    SortedByPriority: {
        display: "Sorted by Priority",
        code: "priority",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * system: The list was sorted by the system. The criteria the user used are not specified; define additional codes to specify a particular order (or use other defined codes).
     */
    SortedBySystem: {
        display: "Sorted by System",
        code: "system",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
    /**
     * user: The list was sorted by a user. The criteria the user used are not specified.
     */
    SortedByUser: {
        display: "Sorted by User",
        code: "user",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdE9yZGVyQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTGlzdE9yZGVyQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrREFBK0Q7QUEwQy9EOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQXVCO0lBQ2xEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2xpc3Qtb3JkZXJ8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBCYXNlIHZhbHVlcyBmb3IgdGhlIG9yZGVyIG9mIHRoZSBpdGVtcyBpbiBhIGxpc3QgcmVzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaXN0T3JkZXJDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFscGhhYmV0aWM6IFRoZSBsaXN0IGlzIHNvcnRlZCBhbHBoYWJldGljYWxseSBieSBhbiB1bnNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgaXRlbXMgaW4gdGhlIGxpc3QuXHJcbiAgICovXHJcbiAgU29ydGVkQWxwaGFiZXRpY2FsbHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2F0ZWdvcnk6IFRoZSBsaXN0IGlzIHNvcnRlZCBjYXRlZ29yaWNhbGx5IGJ5IGFuIHVuc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBpdGVtcyBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBTb3J0ZWRCeUNhdGVnb3J5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudHJ5LWRhdGU6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSB0aGUgZGF0ZSB0aGUgaXRlbSB3YXMgYWRkZWQgdG8gdGhlIGxpc3QuIE5vdGUgdGhhdCB0aGUgZGF0ZSBhZGRlZCB0byB0aGUgbGlzdCBpcyBub3QgZXhwbGljaXQgaW4gdGhlIGxpc3QgaXRzZWxmLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5SXRlbURhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZXZlbnQtZGF0ZTogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHRoZSBkYXRhIG9mIHRoZSBldmVudC4gVGhpcyBjYW4gYmUgdXNlZCB3aGVuIHRoZSBsaXN0IGhhcyBpdGVtcyB3aGljaCBhcmUgZGF0ZXMgd2l0aCBwYXN0IG9yIGZ1dHVyZSBldmVudHMuXHJcbiAgICovXHJcbiAgU29ydGVkQnlFdmVudERhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGF0aWVudDogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHBhdGllbnQsIHdpdGggaXRlbXMgZm9yIGVhY2ggcGF0aWVudCBncm91cGVkIHRvZ2V0aGVyLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5UGF0aWVudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcmlvcml0eTogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHByaW9yaXR5LiBUaGUgZXhhY3QgbWV0aG9kIGluIHdoaWNoIHByaW9yaXR5IGhhcyBiZWVuIGRldGVybWluZWQgaXMgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBTb3J0ZWRCeVByaW9yaXR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN5c3RlbTogVGhlIGxpc3Qgd2FzIHNvcnRlZCBieSB0aGUgc3lzdGVtLiBUaGUgY3JpdGVyaWEgdGhlIHVzZXIgdXNlZCBhcmUgbm90IHNwZWNpZmllZDsgZGVmaW5lIGFkZGl0aW9uYWwgY29kZXMgdG8gc3BlY2lmeSBhIHBhcnRpY3VsYXIgb3JkZXIgKG9yIHVzZSBvdGhlciBkZWZpbmVkIGNvZGVzKS5cclxuICAgKi9cclxuICBTb3J0ZWRCeVN5c3RlbTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1c2VyOiBUaGUgbGlzdCB3YXMgc29ydGVkIGJ5IGEgdXNlci4gVGhlIGNyaXRlcmlhIHRoZSB1c2VyIHVzZWQgYXJlIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgU29ydGVkQnlVc2VyOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQmFzZSB2YWx1ZXMgZm9yIHRoZSBvcmRlciBvZiB0aGUgaXRlbXMgaW4gYSBsaXN0IHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IExpc3RPcmRlckNvZGluZ3M6TGlzdE9yZGVyQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbHBoYWJldGljOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkgYnkgYW4gdW5zcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGl0ZW1zIGluIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIFNvcnRlZEFscGhhYmV0aWNhbGx5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBBbHBoYWJldGljYWxseVwiLFxyXG4gICAgY29kZTogXCJhbHBoYWJldGljXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LW9yZGVyXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjYXRlZ29yeTogVGhlIGxpc3QgaXMgc29ydGVkIGNhdGVnb3JpY2FsbHkgYnkgYW4gdW5zcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGl0ZW1zIGluIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5Q2F0ZWdvcnk6IHtcclxuICAgIGRpc3BsYXk6IFwiU29ydGVkIGJ5IENhdGVnb3J5XCIsXHJcbiAgICBjb2RlOiBcImNhdGVnb3J5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LW9yZGVyXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbnRyeS1kYXRlOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYnkgdGhlIGRhdGUgdGhlIGl0ZW0gd2FzIGFkZGVkIHRvIHRoZSBsaXN0LiBOb3RlIHRoYXQgdGhlIGRhdGUgYWRkZWQgdG8gdGhlIGxpc3QgaXMgbm90IGV4cGxpY2l0IGluIHRoZSBsaXN0IGl0c2VsZi5cclxuICAgKi9cclxuICBTb3J0ZWRCeUl0ZW1EYXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBJdGVtIERhdGVcIixcclxuICAgIGNvZGU6IFwiZW50cnktZGF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZXZlbnQtZGF0ZTogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHRoZSBkYXRhIG9mIHRoZSBldmVudC4gVGhpcyBjYW4gYmUgdXNlZCB3aGVuIHRoZSBsaXN0IGhhcyBpdGVtcyB3aGljaCBhcmUgZGF0ZXMgd2l0aCBwYXN0IG9yIGZ1dHVyZSBldmVudHMuXHJcbiAgICovXHJcbiAgU29ydGVkQnlFdmVudERhdGU6IHtcclxuICAgIGRpc3BsYXk6IFwiU29ydGVkIGJ5IEV2ZW50IERhdGVcIixcclxuICAgIGNvZGU6IFwiZXZlbnQtZGF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGF0aWVudDogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHBhdGllbnQsIHdpdGggaXRlbXMgZm9yIGVhY2ggcGF0aWVudCBncm91cGVkIHRvZ2V0aGVyLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5UGF0aWVudDoge1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgUGF0aWVudFwiLFxyXG4gICAgY29kZTogXCJwYXRpZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LW9yZGVyXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBwcmlvcml0eTogVGhlIGxpc3QgaXMgc29ydGVkIGJ5IHByaW9yaXR5LiBUaGUgZXhhY3QgbWV0aG9kIGluIHdoaWNoIHByaW9yaXR5IGhhcyBiZWVuIGRldGVybWluZWQgaXMgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBTb3J0ZWRCeVByaW9yaXR5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBQcmlvcml0eVwiLFxyXG4gICAgY29kZTogXCJwcmlvcml0eVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3lzdGVtOiBUaGUgbGlzdCB3YXMgc29ydGVkIGJ5IHRoZSBzeXN0ZW0uIFRoZSBjcml0ZXJpYSB0aGUgdXNlciB1c2VkIGFyZSBub3Qgc3BlY2lmaWVkOyBkZWZpbmUgYWRkaXRpb25hbCBjb2RlcyB0byBzcGVjaWZ5IGEgcGFydGljdWxhciBvcmRlciAob3IgdXNlIG90aGVyIGRlZmluZWQgY29kZXMpLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5U3lzdGVtOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBTeXN0ZW1cIixcclxuICAgIGNvZGU6IFwic3lzdGVtXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LW9yZGVyXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1c2VyOiBUaGUgbGlzdCB3YXMgc29ydGVkIGJ5IGEgdXNlci4gVGhlIGNyaXRlcmlhIHRoZSB1c2VyIHVzZWQgYXJlIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgU29ydGVkQnlVc2VyOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBVc2VyXCIsXHJcbiAgICBjb2RlOiBcInVzZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3Qtb3JkZXJcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=