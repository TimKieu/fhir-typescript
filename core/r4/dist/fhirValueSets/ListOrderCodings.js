// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/list-order|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Base values for the order of the items in a list resource.
 */
export const ListOrderCodings = {
    /**
     * alphabetic: The list is sorted alphabetically by an unspecified property of the items in the list.
     */
    SortedAlphabetically: new Coding({
        display: "Sorted Alphabetically",
        code: "alphabetic",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
    /**
     * category: The list is sorted categorically by an unspecified property of the items in the list.
     */
    SortedByCategory: new Coding({
        display: "Sorted by Category",
        code: "category",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
    /**
     * entry-date: The list is sorted by the date the item was added to the list. Note that the date added to the list is not explicit in the list itself.
     */
    SortedByItemDate: new Coding({
        display: "Sorted by Item Date",
        code: "entry-date",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
    /**
     * event-date: The list is sorted by the data of the event. This can be used when the list has items which are dates with past or future events.
     */
    SortedByEventDate: new Coding({
        display: "Sorted by Event Date",
        code: "event-date",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
    /**
     * patient: The list is sorted by patient, with items for each patient grouped together.
     */
    SortedByPatient: new Coding({
        display: "Sorted by Patient",
        code: "patient",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
    /**
     * priority: The list is sorted by priority. The exact method in which priority has been determined is not specified.
     */
    SortedByPriority: new Coding({
        display: "Sorted by Priority",
        code: "priority",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
    /**
     * system: The list was sorted by the system. The criteria the user used are not specified; define additional codes to specify a particular order (or use other defined codes).
     */
    SortedBySystem: new Coding({
        display: "Sorted by System",
        code: "system",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
    /**
     * user: The list was sorted by a user. The criteria the user used are not specified.
     */
    SortedByUser: new Coding({
        display: "Sorted by User",
        code: "user",
        system: "http://terminology.hl7.org/CodeSystem/list-order",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdE9yZGVyQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTGlzdE9yZGVyQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrREFBK0Q7QUFFL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUc7SUFDOUI7O09BRUc7SUFDSCxvQkFBb0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMvQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDM0IsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNELENBQUM7SUFDRjs7T0FFRztJQUNILGdCQUFnQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzNCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM1QixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0RBQWtEO0tBQzNELENBQUM7SUFDRjs7T0FFRztJQUNILGdCQUFnQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzNCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsa0RBQWtEO0tBQzNELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2xpc3Qtb3JkZXJ8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEJhc2UgdmFsdWVzIGZvciB0aGUgb3JkZXIgb2YgdGhlIGl0ZW1zIGluIGEgbGlzdCByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBMaXN0T3JkZXJDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFscGhhYmV0aWM6IFRoZSBsaXN0IGlzIHNvcnRlZCBhbHBoYWJldGljYWxseSBieSBhbiB1bnNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgaXRlbXMgaW4gdGhlIGxpc3QuXHJcbiAgICovXHJcbiAgU29ydGVkQWxwaGFiZXRpY2FsbHk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgQWxwaGFiZXRpY2FsbHlcIixcclxuICAgIGNvZGU6IFwiYWxwaGFiZXRpY1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNhdGVnb3J5OiBUaGUgbGlzdCBpcyBzb3J0ZWQgY2F0ZWdvcmljYWxseSBieSBhbiB1bnNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgaXRlbXMgaW4gdGhlIGxpc3QuXHJcbiAgICovXHJcbiAgU29ydGVkQnlDYXRlZ29yeTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBDYXRlZ29yeVwiLFxyXG4gICAgY29kZTogXCJjYXRlZ29yeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGVudHJ5LWRhdGU6IFRoZSBsaXN0IGlzIHNvcnRlZCBieSB0aGUgZGF0ZSB0aGUgaXRlbSB3YXMgYWRkZWQgdG8gdGhlIGxpc3QuIE5vdGUgdGhhdCB0aGUgZGF0ZSBhZGRlZCB0byB0aGUgbGlzdCBpcyBub3QgZXhwbGljaXQgaW4gdGhlIGxpc3QgaXRzZWxmLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5SXRlbURhdGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgSXRlbSBEYXRlXCIsXHJcbiAgICBjb2RlOiBcImVudHJ5LWRhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3Qtb3JkZXJcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBldmVudC1kYXRlOiBUaGUgbGlzdCBpcyBzb3J0ZWQgYnkgdGhlIGRhdGEgb2YgdGhlIGV2ZW50LiBUaGlzIGNhbiBiZSB1c2VkIHdoZW4gdGhlIGxpc3QgaGFzIGl0ZW1zIHdoaWNoIGFyZSBkYXRlcyB3aXRoIHBhc3Qgb3IgZnV0dXJlIGV2ZW50cy5cclxuICAgKi9cclxuICBTb3J0ZWRCeUV2ZW50RGF0ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNvcnRlZCBieSBFdmVudCBEYXRlXCIsXHJcbiAgICBjb2RlOiBcImV2ZW50LWRhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3Qtb3JkZXJcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwYXRpZW50OiBUaGUgbGlzdCBpcyBzb3J0ZWQgYnkgcGF0aWVudCwgd2l0aCBpdGVtcyBmb3IgZWFjaCBwYXRpZW50IGdyb3VwZWQgdG9nZXRoZXIuXHJcbiAgICovXHJcbiAgU29ydGVkQnlQYXRpZW50OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU29ydGVkIGJ5IFBhdGllbnRcIixcclxuICAgIGNvZGU6IFwicGF0aWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHByaW9yaXR5OiBUaGUgbGlzdCBpcyBzb3J0ZWQgYnkgcHJpb3JpdHkuIFRoZSBleGFjdCBtZXRob2QgaW4gd2hpY2ggcHJpb3JpdHkgaGFzIGJlZW4gZGV0ZXJtaW5lZCBpcyBub3Qgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIFNvcnRlZEJ5UHJpb3JpdHk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgUHJpb3JpdHlcIixcclxuICAgIGNvZGU6IFwicHJpb3JpdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3Qtb3JkZXJcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzeXN0ZW06IFRoZSBsaXN0IHdhcyBzb3J0ZWQgYnkgdGhlIHN5c3RlbS4gVGhlIGNyaXRlcmlhIHRoZSB1c2VyIHVzZWQgYXJlIG5vdCBzcGVjaWZpZWQ7IGRlZmluZSBhZGRpdGlvbmFsIGNvZGVzIHRvIHNwZWNpZnkgYSBwYXJ0aWN1bGFyIG9yZGVyIChvciB1c2Ugb3RoZXIgZGVmaW5lZCBjb2RlcykuXHJcbiAgICovXHJcbiAgU29ydGVkQnlTeXN0ZW06IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgU3lzdGVtXCIsXHJcbiAgICBjb2RlOiBcInN5c3RlbVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1vcmRlclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHVzZXI6IFRoZSBsaXN0IHdhcyBzb3J0ZWQgYnkgYSB1c2VyLiBUaGUgY3JpdGVyaWEgdGhlIHVzZXIgdXNlZCBhcmUgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBTb3J0ZWRCeVVzZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTb3J0ZWQgYnkgVXNlclwiLFxyXG4gICAgY29kZTogXCJ1c2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LW9yZGVyXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQmFzZSB2YWx1ZXMgZm9yIHRoZSBvcmRlciBvZiB0aGUgaXRlbXMgaW4gYSBsaXN0IHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTGlzdE9yZGVyQ29kaW5nVHlwZSA9IHR5cGVvZiBMaXN0T3JkZXJDb2RpbmdzO1xyXG4iXX0=