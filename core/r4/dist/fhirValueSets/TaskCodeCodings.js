// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/task-code|4.0.1
/**
 * Codes indicating the type of action that is expected to be performed
 */
export const TaskCodeCodings = {
    /**
     * abort: Abort, cancel or withdraw the focal resource, as appropriate for the type of resource.
     */
    MarkTheFocalResourceAsNoLongerActive: {
        display: "Mark the focal resource as no longer active",
        code: "abort",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * approve: Take what actions are needed to transition the focus resource from 'draft' to 'active' or 'in-progress', as appropriate for the resource type.  This may involve additing additional content, approval, validation, etc.
     */
    ActivateApproveTheFocalResource: {
        display: "Activate/approve the focal resource",
        code: "approve",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * change: Update the focal resource of the owning system to reflect the content specified as the Task.focus
     */
    ChangeTheFocalResource: {
        display: "Change the focal resource",
        code: "change",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * fulfill: Act to perform the actions defined in the focus request.  This might result in a 'more assertive' request (order for a plan or proposal, filler order for a placer order), but is intend to eventually result in events.  The degree of fulfillment requested might be limited by Task.restriction.
     */
    FulfillTheFocalRequest: {
        display: "Fulfill the focal request",
        code: "fulfill",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * replace: Replace the focal resource with the specified input resource
     */
    ReplaceTheFocalResourceWithTheInputResource: {
        display: "Replace the focal resource with the input resource",
        code: "replace",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * resume: Transition the focal resource from 'suspended' to 'active' or 'in-progress' as appropriate for the resource type.
     */
    ReActivateTheFocalResource: {
        display: "Re-activate the focal resource",
        code: "resume",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * suspend: Transition the focal resource from 'active' or 'in-progress' to 'suspended'
     */
    SuspendTheFocalResource: {
        display: "Suspend the focal resource",
        code: "suspend",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza0NvZGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UYXNrQ29kZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOERBQThEO0FBc0M5RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBc0I7SUFDaEQ7O09BRUc7SUFDSCxvQ0FBb0MsRUFBRTtRQUNwQyxPQUFPLEVBQUUsNkNBQTZDO1FBQ3RELElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsK0JBQStCLEVBQUU7UUFDL0IsT0FBTyxFQUFFLHFDQUFxQztRQUM5QyxJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILHNCQUFzQixFQUFFO1FBQ3RCLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsMkNBQTJDLEVBQUU7UUFDM0MsT0FBTyxFQUFFLG9EQUFvRDtRQUM3RCxJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILDBCQUEwQixFQUFFO1FBQzFCLE9BQU8sRUFBRSxnQ0FBZ0M7UUFDekMsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCx1QkFBdUIsRUFBRTtRQUN2QixPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdGFzay1jb2RlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZXMgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBhY3Rpb24gdGhhdCBpcyBleHBlY3RlZCB0byBiZSBwZXJmb3JtZWRcclxuICovXHJcbmV4cG9ydCB0eXBlIFRhc2tDb2RlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhYm9ydDogQWJvcnQsIGNhbmNlbCBvciB3aXRoZHJhdyB0aGUgZm9jYWwgcmVzb3VyY2UsIGFzIGFwcHJvcHJpYXRlIGZvciB0aGUgdHlwZSBvZiByZXNvdXJjZS5cclxuICAgKi9cclxuICBNYXJrVGhlRm9jYWxSZXNvdXJjZUFzTm9Mb25nZXJBY3RpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYXBwcm92ZTogVGFrZSB3aGF0IGFjdGlvbnMgYXJlIG5lZWRlZCB0byB0cmFuc2l0aW9uIHRoZSBmb2N1cyByZXNvdXJjZSBmcm9tICdkcmFmdCcgdG8gJ2FjdGl2ZScgb3IgJ2luLXByb2dyZXNzJywgYXMgYXBwcm9wcmlhdGUgZm9yIHRoZSByZXNvdXJjZSB0eXBlLiAgVGhpcyBtYXkgaW52b2x2ZSBhZGRpdGluZyBhZGRpdGlvbmFsIGNvbnRlbnQsIGFwcHJvdmFsLCB2YWxpZGF0aW9uLCBldGMuXHJcbiAgICovXHJcbiAgQWN0aXZhdGVBcHByb3ZlVGhlRm9jYWxSZXNvdXJjZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjaGFuZ2U6IFVwZGF0ZSB0aGUgZm9jYWwgcmVzb3VyY2Ugb2YgdGhlIG93bmluZyBzeXN0ZW0gdG8gcmVmbGVjdCB0aGUgY29udGVudCBzcGVjaWZpZWQgYXMgdGhlIFRhc2suZm9jdXNcclxuICAgKi9cclxuICBDaGFuZ2VUaGVGb2NhbFJlc291cmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZ1bGZpbGw6IEFjdCB0byBwZXJmb3JtIHRoZSBhY3Rpb25zIGRlZmluZWQgaW4gdGhlIGZvY3VzIHJlcXVlc3QuICBUaGlzIG1pZ2h0IHJlc3VsdCBpbiBhICdtb3JlIGFzc2VydGl2ZScgcmVxdWVzdCAob3JkZXIgZm9yIGEgcGxhbiBvciBwcm9wb3NhbCwgZmlsbGVyIG9yZGVyIGZvciBhIHBsYWNlciBvcmRlciksIGJ1dCBpcyBpbnRlbmQgdG8gZXZlbnR1YWxseSByZXN1bHQgaW4gZXZlbnRzLiAgVGhlIGRlZ3JlZSBvZiBmdWxmaWxsbWVudCByZXF1ZXN0ZWQgbWlnaHQgYmUgbGltaXRlZCBieSBUYXNrLnJlc3RyaWN0aW9uLlxyXG4gICAqL1xyXG4gIEZ1bGZpbGxUaGVGb2NhbFJlcXVlc3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVwbGFjZTogUmVwbGFjZSB0aGUgZm9jYWwgcmVzb3VyY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGlucHV0IHJlc291cmNlXHJcbiAgICovXHJcbiAgUmVwbGFjZVRoZUZvY2FsUmVzb3VyY2VXaXRoVGhlSW5wdXRSZXNvdXJjZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXN1bWU6IFRyYW5zaXRpb24gdGhlIGZvY2FsIHJlc291cmNlIGZyb20gJ3N1c3BlbmRlZCcgdG8gJ2FjdGl2ZScgb3IgJ2luLXByb2dyZXNzJyBhcyBhcHByb3ByaWF0ZSBmb3IgdGhlIHJlc291cmNlIHR5cGUuXHJcbiAgICovXHJcbiAgUmVBY3RpdmF0ZVRoZUZvY2FsUmVzb3VyY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3VzcGVuZDogVHJhbnNpdGlvbiB0aGUgZm9jYWwgcmVzb3VyY2UgZnJvbSAnYWN0aXZlJyBvciAnaW4tcHJvZ3Jlc3MnIHRvICdzdXNwZW5kZWQnXHJcbiAgICovXHJcbiAgU3VzcGVuZFRoZUZvY2FsUmVzb3VyY2U6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGFjdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHBlcmZvcm1lZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFRhc2tDb2RlQ29kaW5nczpUYXNrQ29kZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWJvcnQ6IEFib3J0LCBjYW5jZWwgb3Igd2l0aGRyYXcgdGhlIGZvY2FsIHJlc291cmNlLCBhcyBhcHByb3ByaWF0ZSBmb3IgdGhlIHR5cGUgb2YgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgTWFya1RoZUZvY2FsUmVzb3VyY2VBc05vTG9uZ2VyQWN0aXZlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk1hcmsgdGhlIGZvY2FsIHJlc291cmNlIGFzIG5vIGxvbmdlciBhY3RpdmVcIixcclxuICAgIGNvZGU6IFwiYWJvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vdGFzay1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhcHByb3ZlOiBUYWtlIHdoYXQgYWN0aW9ucyBhcmUgbmVlZGVkIHRvIHRyYW5zaXRpb24gdGhlIGZvY3VzIHJlc291cmNlIGZyb20gJ2RyYWZ0JyB0byAnYWN0aXZlJyBvciAnaW4tcHJvZ3Jlc3MnLCBhcyBhcHByb3ByaWF0ZSBmb3IgdGhlIHJlc291cmNlIHR5cGUuICBUaGlzIG1heSBpbnZvbHZlIGFkZGl0aW5nIGFkZGl0aW9uYWwgY29udGVudCwgYXBwcm92YWwsIHZhbGlkYXRpb24sIGV0Yy5cclxuICAgKi9cclxuICBBY3RpdmF0ZUFwcHJvdmVUaGVGb2NhbFJlc291cmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjdGl2YXRlL2FwcHJvdmUgdGhlIGZvY2FsIHJlc291cmNlXCIsXHJcbiAgICBjb2RlOiBcImFwcHJvdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vdGFzay1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjaGFuZ2U6IFVwZGF0ZSB0aGUgZm9jYWwgcmVzb3VyY2Ugb2YgdGhlIG93bmluZyBzeXN0ZW0gdG8gcmVmbGVjdCB0aGUgY29udGVudCBzcGVjaWZpZWQgYXMgdGhlIFRhc2suZm9jdXNcclxuICAgKi9cclxuICBDaGFuZ2VUaGVGb2NhbFJlc291cmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNoYW5nZSB0aGUgZm9jYWwgcmVzb3VyY2VcIixcclxuICAgIGNvZGU6IFwiY2hhbmdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL3Rhc2stY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZnVsZmlsbDogQWN0IHRvIHBlcmZvcm0gdGhlIGFjdGlvbnMgZGVmaW5lZCBpbiB0aGUgZm9jdXMgcmVxdWVzdC4gIFRoaXMgbWlnaHQgcmVzdWx0IGluIGEgJ21vcmUgYXNzZXJ0aXZlJyByZXF1ZXN0IChvcmRlciBmb3IgYSBwbGFuIG9yIHByb3Bvc2FsLCBmaWxsZXIgb3JkZXIgZm9yIGEgcGxhY2VyIG9yZGVyKSwgYnV0IGlzIGludGVuZCB0byBldmVudHVhbGx5IHJlc3VsdCBpbiBldmVudHMuICBUaGUgZGVncmVlIG9mIGZ1bGZpbGxtZW50IHJlcXVlc3RlZCBtaWdodCBiZSBsaW1pdGVkIGJ5IFRhc2sucmVzdHJpY3Rpb24uXHJcbiAgICovXHJcbiAgRnVsZmlsbFRoZUZvY2FsUmVxdWVzdDoge1xyXG4gICAgZGlzcGxheTogXCJGdWxmaWxsIHRoZSBmb2NhbCByZXF1ZXN0XCIsXHJcbiAgICBjb2RlOiBcImZ1bGZpbGxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vdGFzay1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXBsYWNlOiBSZXBsYWNlIHRoZSBmb2NhbCByZXNvdXJjZSB3aXRoIHRoZSBzcGVjaWZpZWQgaW5wdXQgcmVzb3VyY2VcclxuICAgKi9cclxuICBSZXBsYWNlVGhlRm9jYWxSZXNvdXJjZVdpdGhUaGVJbnB1dFJlc291cmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlcGxhY2UgdGhlIGZvY2FsIHJlc291cmNlIHdpdGggdGhlIGlucHV0IHJlc291cmNlXCIsXHJcbiAgICBjb2RlOiBcInJlcGxhY2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vdGFzay1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZXN1bWU6IFRyYW5zaXRpb24gdGhlIGZvY2FsIHJlc291cmNlIGZyb20gJ3N1c3BlbmRlZCcgdG8gJ2FjdGl2ZScgb3IgJ2luLXByb2dyZXNzJyBhcyBhcHByb3ByaWF0ZSBmb3IgdGhlIHJlc291cmNlIHR5cGUuXHJcbiAgICovXHJcbiAgUmVBY3RpdmF0ZVRoZUZvY2FsUmVzb3VyY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiUmUtYWN0aXZhdGUgdGhlIGZvY2FsIHJlc291cmNlXCIsXHJcbiAgICBjb2RlOiBcInJlc3VtZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS90YXNrLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN1c3BlbmQ6IFRyYW5zaXRpb24gdGhlIGZvY2FsIHJlc291cmNlIGZyb20gJ2FjdGl2ZScgb3IgJ2luLXByb2dyZXNzJyB0byAnc3VzcGVuZGVkJ1xyXG4gICAqL1xyXG4gIFN1c3BlbmRUaGVGb2NhbFJlc291cmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN1c3BlbmQgdGhlIGZvY2FsIHJlc291cmNlXCIsXHJcbiAgICBjb2RlOiBcInN1c3BlbmRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vdGFzay1jb2RlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19