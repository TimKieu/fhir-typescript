// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/supplyrequest-status|4.0.1
/**
 * Status of the supply request.
 */
export const SupplyrequestStatusCodings = {
    /**
     * active: The request is ready to be acted upon.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/supplyrequest-status",
    },
    /**
     * cancelled: The authorization/request to act has been terminated prior to the full completion of the intended actions.  No further activity should occur.
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/supplyrequest-status",
    },
    /**
     * completed: Activity against the request has been sufficiently completed to the satisfaction of the requester.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/supplyrequest-status",
    },
    /**
     * draft: The request has been created but is not yet complete or ready for action.
     */
    Draft: {
        display: "Draft",
        code: "draft",
        system: "http://hl7.org/fhir/supplyrequest-status",
    },
    /**
     * entered-in-error: This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/supplyrequest-status",
    },
    /**
     * suspended: The authorization/request to act has been temporarily withdrawn but is expected to resume in the future.
     */
    Suspended: {
        display: "Suspended",
        code: "suspended",
        system: "http://hl7.org/fhir/supplyrequest-status",
    },
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/supplyrequest-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VwcGx5cmVxdWVzdFN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1N1cHBseXJlcXVlc3RTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHlFQUF5RTtBQXNDekU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBaUM7SUFDdEU7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc3VwcGx5cmVxdWVzdC1zdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBTdGF0dXMgb2YgdGhlIHN1cHBseSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3VwcGx5cmVxdWVzdFN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWN0aXZlOiBUaGUgcmVxdWVzdCBpcyByZWFkeSB0byBiZSBhY3RlZCB1cG9uLlxyXG4gICAqL1xyXG4gIEFjdGl2ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjYW5jZWxsZWQ6IFRoZSBhdXRob3JpemF0aW9uL3JlcXVlc3QgdG8gYWN0IGhhcyBiZWVuIHRlcm1pbmF0ZWQgcHJpb3IgdG8gdGhlIGZ1bGwgY29tcGxldGlvbiBvZiB0aGUgaW50ZW5kZWQgYWN0aW9ucy4gIE5vIGZ1cnRoZXIgYWN0aXZpdHkgc2hvdWxkIG9jY3VyLlxyXG4gICAqL1xyXG4gIENhbmNlbGxlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IEFjdGl2aXR5IGFnYWluc3QgdGhlIHJlcXVlc3QgaGFzIGJlZW4gc3VmZmljaWVudGx5IGNvbXBsZXRlZCB0byB0aGUgc2F0aXNmYWN0aW9uIG9mIHRoZSByZXF1ZXN0ZXIuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBjcmVhdGVkIGJ1dCBpcyBub3QgeWV0IGNvbXBsZXRlIG9yIHJlYWR5IGZvciBhY3Rpb24uXHJcbiAgICovXHJcbiAgRHJhZnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBlbGVjdHJvbmljIHJlY29yZCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkLCB0aG91Z2ggaXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAgKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcImNhbmNlbGxlZFwiIHJhdGhlciB0aGFuIFwiZW50ZXJlZC1pbi1lcnJvclwiLikuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3VzcGVuZGVkOiBUaGUgYXV0aG9yaXphdGlvbi9yZXF1ZXN0IHRvIGFjdCBoYXMgYmVlbiB0ZW1wb3JhcmlseSB3aXRoZHJhd24gYnV0IGlzIGV4cGVjdGVkIHRvIHJlc3VtZSBpbiB0aGUgZnV0dXJlLlxyXG4gICAqL1xyXG4gIFN1c3BlbmRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgYXV0aG9yaW5nL3NvdXJjZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaCBvZiB0aGUgc3RhdHVzIHZhbHVlcyBjdXJyZW50bHkgYXBwbGllcyBmb3IgdGhpcyBvYnNlcnZhdGlvbi4gTm90ZTogVGhpcyBjb25jZXB0IGlzIG5vdCB0byBiZSB1c2VkIGZvciBcIm90aGVyXCIgLSBvbmUgb2YgdGhlIGxpc3RlZCBzdGF0dXNlcyBpcyBwcmVzdW1lZCB0byBhcHBseSwgYnV0IHRoZSBhdXRob3Jpbmcvc291cmNlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoLlxyXG4gICAqL1xyXG4gIFVua25vd246IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdGF0dXMgb2YgdGhlIHN1cHBseSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFN1cHBseXJlcXVlc3RTdGF0dXNDb2RpbmdzOlN1cHBseXJlcXVlc3RTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZTogVGhlIHJlcXVlc3QgaXMgcmVhZHkgdG8gYmUgYWN0ZWQgdXBvbi5cclxuICAgKi9cclxuICBBY3RpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiQWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImFjdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc3VwcGx5cmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIGF1dGhvcml6YXRpb24vcmVxdWVzdCB0byBhY3QgaGFzIGJlZW4gdGVybWluYXRlZCBwcmlvciB0byB0aGUgZnVsbCBjb21wbGV0aW9uIG9mIHRoZSBpbnRlbmRlZCBhY3Rpb25zLiAgTm8gZnVydGhlciBhY3Rpdml0eSBzaG91bGQgb2NjdXIuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNhbmNlbGxlZFwiLFxyXG4gICAgY29kZTogXCJjYW5jZWxsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3N1cHBseXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IEFjdGl2aXR5IGFnYWluc3QgdGhlIHJlcXVlc3QgaGFzIGJlZW4gc3VmZmljaWVudGx5IGNvbXBsZXRlZCB0byB0aGUgc2F0aXNmYWN0aW9uIG9mIHRoZSByZXF1ZXN0ZXIuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3N1cHBseXJlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkcmFmdDogVGhlIHJlcXVlc3QgaGFzIGJlZW4gY3JlYXRlZCBidXQgaXMgbm90IHlldCBjb21wbGV0ZSBvciByZWFkeSBmb3IgYWN0aW9uLlxyXG4gICAqL1xyXG4gIERyYWZ0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkRyYWZ0XCIsXHJcbiAgICBjb2RlOiBcImRyYWZ0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdXBwbHlyZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBlbGVjdHJvbmljIHJlY29yZCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkLCB0aG91Z2ggaXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAgKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcImNhbmNlbGxlZFwiIHJhdGhlciB0aGFuIFwiZW50ZXJlZC1pbi1lcnJvclwiLikuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBpbiBFcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdXBwbHlyZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3VzcGVuZGVkOiBUaGUgYXV0aG9yaXphdGlvbi9yZXF1ZXN0IHRvIGFjdCBoYXMgYmVlbiB0ZW1wb3JhcmlseSB3aXRoZHJhd24gYnV0IGlzIGV4cGVjdGVkIHRvIHJlc3VtZSBpbiB0aGUgZnV0dXJlLlxyXG4gICAqL1xyXG4gIFN1c3BlbmRlZDoge1xyXG4gICAgZGlzcGxheTogXCJTdXNwZW5kZWRcIixcclxuICAgIGNvZGU6IFwic3VzcGVuZGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zdXBwbHlyZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgb2JzZXJ2YXRpb24uIE5vdGU6IFRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3IgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBsaXN0ZWQgc3RhdHVzZXMgaXMgcHJlc3VtZWQgdG8gYXBwbHksIGJ1dCB0aGUgYXV0aG9yaW5nL3NvdXJjZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaC5cclxuICAgKi9cclxuICBVbmtub3duOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd25cIixcclxuICAgIGNvZGU6IFwidW5rbm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc3VwcGx5cmVxdWVzdC1zdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=