// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-target-list-mode|4.0.1
/**
 * If field is a list, how to manage the production.
 */
export const MapTargetListModeCodings = {
    /**
     * collate: re-use the first item in the list, and keep adding content to it.
     */
    Collate: {
        display: "Collate",
        code: "collate",
        system: "http://hl7.org/fhir/map-target-list-mode",
    },
    /**
     * first: when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error.
     */
    First: {
        display: "First",
        code: "first",
        system: "http://hl7.org/fhir/map-target-list-mode",
    },
    /**
     * last: when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error.
     */
    Last: {
        display: "Last",
        code: "last",
        system: "http://hl7.org/fhir/map-target-list-mode",
    },
    /**
     * share: the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones).
     */
    Share: {
        display: "Share",
        code: "share",
        system: "http://hl7.org/fhir/map-target-list-mode",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwVGFyZ2V0TGlzdE1vZGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NYXBUYXJnZXRMaXN0TW9kZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUVBQXlFO0FBMEJ6RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tYXAtdGFyZ2V0LWxpc3QtbW9kZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIElmIGZpZWxkIGlzIGEgbGlzdCwgaG93IHRvIG1hbmFnZSB0aGUgcHJvZHVjdGlvbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIE1hcFRhcmdldExpc3RNb2RlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb2xsYXRlOiByZS11c2UgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QsIGFuZCBrZWVwIGFkZGluZyBjb250ZW50IHRvIGl0LlxyXG4gICAqL1xyXG4gIENvbGxhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZmlyc3Q6IHdoZW4gdGhlIHRhcmdldCBsaXN0IGlzIGJlaW5nIGFzc2VtYmxlZCwgdGhlIGl0ZW1zIGZvciB0aGlzIHJ1bGUgZ28gZmlyc3QuIElmIG1vcmUgdGhhbiBvbmUgcnVsZSBkZWZpbmVzIGEgZmlyc3QgaXRlbSAoZm9yIGEgZ2l2ZW4gaW5zdGFuY2Ugb2YgbWFwcGluZykgdGhlbiB0aGlzIGlzIGFuIGVycm9yLlxyXG4gICAqL1xyXG4gIEZpcnN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxhc3Q6IHdoZW4gdGhlIHRhcmdldCBsaXN0IGlzIGJlaW5nIGFzc2VtYmxlZCwgdGhlIGl0ZW1zIGZvciB0aGlzIHJ1bGUgZ28gbGFzdC4gSWYgbW9yZSB0aGFuIG9uZSBydWxlIGRlZmluZXMgYSBsYXN0IGl0ZW0gKGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIG1hcHBpbmcpIHRoZW4gdGhpcyBpcyBhbiBlcnJvci5cclxuICAgKi9cclxuICBMYXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNoYXJlOiB0aGUgdGFyZ2V0IGluc3RhbmNlIGlzIHNoYXJlZCB3aXRoIHRoZSB0YXJnZXQgaW5zdGFuY2VzIGdlbmVyYXRlZCBieSBhbm90aGVyIHJ1bGUgKHVwIHRvIHRoZSBmaXJzdCBjb21tb24gbiBpdGVtcywgdGhlbiBjcmVhdGUgbmV3IG9uZXMpLlxyXG4gICAqL1xyXG4gIFNoYXJlOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogSWYgZmllbGQgaXMgYSBsaXN0LCBob3cgdG8gbWFuYWdlIHRoZSBwcm9kdWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1hcFRhcmdldExpc3RNb2RlQ29kaW5nczpNYXBUYXJnZXRMaXN0TW9kZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29sbGF0ZTogcmUtdXNlIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0LCBhbmQga2VlcCBhZGRpbmcgY29udGVudCB0byBpdC5cclxuICAgKi9cclxuICBDb2xsYXRlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbGxhdGVcIixcclxuICAgIGNvZGU6IFwiY29sbGF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLXRhcmdldC1saXN0LW1vZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZpcnN0OiB3aGVuIHRoZSB0YXJnZXQgbGlzdCBpcyBiZWluZyBhc3NlbWJsZWQsIHRoZSBpdGVtcyBmb3IgdGhpcyBydWxlIGdvIGZpcnN0LiBJZiBtb3JlIHRoYW4gb25lIHJ1bGUgZGVmaW5lcyBhIGZpcnN0IGl0ZW0gKGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIG1hcHBpbmcpIHRoZW4gdGhpcyBpcyBhbiBlcnJvci5cclxuICAgKi9cclxuICBGaXJzdDoge1xyXG4gICAgZGlzcGxheTogXCJGaXJzdFwiLFxyXG4gICAgY29kZTogXCJmaXJzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLXRhcmdldC1saXN0LW1vZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxhc3Q6IHdoZW4gdGhlIHRhcmdldCBsaXN0IGlzIGJlaW5nIGFzc2VtYmxlZCwgdGhlIGl0ZW1zIGZvciB0aGlzIHJ1bGUgZ28gbGFzdC4gSWYgbW9yZSB0aGFuIG9uZSBydWxlIGRlZmluZXMgYSBsYXN0IGl0ZW0gKGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIG1hcHBpbmcpIHRoZW4gdGhpcyBpcyBhbiBlcnJvci5cclxuICAgKi9cclxuICBMYXN0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkxhc3RcIixcclxuICAgIGNvZGU6IFwibGFzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLXRhcmdldC1saXN0LW1vZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNoYXJlOiB0aGUgdGFyZ2V0IGluc3RhbmNlIGlzIHNoYXJlZCB3aXRoIHRoZSB0YXJnZXQgaW5zdGFuY2VzIGdlbmVyYXRlZCBieSBhbm90aGVyIHJ1bGUgKHVwIHRvIHRoZSBmaXJzdCBjb21tb24gbiBpdGVtcywgdGhlbiBjcmVhdGUgbmV3IG9uZXMpLlxyXG4gICAqL1xyXG4gIFNoYXJlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNoYXJlXCIsXHJcbiAgICBjb2RlOiBcInNoYXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtdGFyZ2V0LWxpc3QtbW9kZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==