// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-target-list-mode|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * If field is a list, how to manage the production.
 */
export const MapTargetListModeCodings = {
    /**
     * collate: re-use the first item in the list, and keep adding content to it.
     */
    Collate: new Coding({
        display: "Collate",
        code: "collate",
        system: "http://hl7.org/fhir/map-target-list-mode",
    }),
    /**
     * first: when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error.
     */
    First: new Coding({
        display: "First",
        code: "first",
        system: "http://hl7.org/fhir/map-target-list-mode",
    }),
    /**
     * last: when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error.
     */
    Last: new Coding({
        display: "Last",
        code: "last",
        system: "http://hl7.org/fhir/map-target-list-mode",
    }),
    /**
     * share: the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones).
     */
    Share: new Coding({
        display: "Share",
        code: "share",
        system: "http://hl7.org/fhir/map-target-list-mode",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwVGFyZ2V0TGlzdE1vZGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NYXBUYXJnZXRMaXN0TW9kZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUVBQXlFO0FBRXpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWFwLXRhcmdldC1saXN0LW1vZGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIElmIGZpZWxkIGlzIGEgbGlzdCwgaG93IHRvIG1hbmFnZSB0aGUgcHJvZHVjdGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNYXBUYXJnZXRMaXN0TW9kZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY29sbGF0ZTogcmUtdXNlIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0LCBhbmQga2VlcCBhZGRpbmcgY29udGVudCB0byBpdC5cclxuICAgKi9cclxuICBDb2xsYXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29sbGF0ZVwiLFxyXG4gICAgY29kZTogXCJjb2xsYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtdGFyZ2V0LWxpc3QtbW9kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGZpcnN0OiB3aGVuIHRoZSB0YXJnZXQgbGlzdCBpcyBiZWluZyBhc3NlbWJsZWQsIHRoZSBpdGVtcyBmb3IgdGhpcyBydWxlIGdvIGZpcnN0LiBJZiBtb3JlIHRoYW4gb25lIHJ1bGUgZGVmaW5lcyBhIGZpcnN0IGl0ZW0gKGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIG1hcHBpbmcpIHRoZW4gdGhpcyBpcyBhbiBlcnJvci5cclxuICAgKi9cclxuICBGaXJzdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkZpcnN0XCIsXHJcbiAgICBjb2RlOiBcImZpcnN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtdGFyZ2V0LWxpc3QtbW9kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGxhc3Q6IHdoZW4gdGhlIHRhcmdldCBsaXN0IGlzIGJlaW5nIGFzc2VtYmxlZCwgdGhlIGl0ZW1zIGZvciB0aGlzIHJ1bGUgZ28gbGFzdC4gSWYgbW9yZSB0aGFuIG9uZSBydWxlIGRlZmluZXMgYSBsYXN0IGl0ZW0gKGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIG1hcHBpbmcpIHRoZW4gdGhpcyBpcyBhbiBlcnJvci5cclxuICAgKi9cclxuICBMYXN0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTGFzdFwiLFxyXG4gICAgY29kZTogXCJsYXN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtdGFyZ2V0LWxpc3QtbW9kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHNoYXJlOiB0aGUgdGFyZ2V0IGluc3RhbmNlIGlzIHNoYXJlZCB3aXRoIHRoZSB0YXJnZXQgaW5zdGFuY2VzIGdlbmVyYXRlZCBieSBhbm90aGVyIHJ1bGUgKHVwIHRvIHRoZSBmaXJzdCBjb21tb24gbiBpdGVtcywgdGhlbiBjcmVhdGUgbmV3IG9uZXMpLlxyXG4gICAqL1xyXG4gIFNoYXJlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU2hhcmVcIixcclxuICAgIGNvZGU6IFwic2hhcmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21hcC10YXJnZXQtbGlzdC1tb2RlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogSWYgZmllbGQgaXMgYSBsaXN0LCBob3cgdG8gbWFuYWdlIHRoZSBwcm9kdWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFwVGFyZ2V0TGlzdE1vZGVDb2RpbmdUeXBlID0gdHlwZW9mIE1hcFRhcmdldExpc3RNb2RlQ29kaW5ncztcclxuIl19