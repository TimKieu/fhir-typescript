// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/consent-content-class|4.0.1
/**
 * This value set includes the FHIR resource types, along with some other important content class codes
 */
export const ConsentContentClassCodings = {
    /**
     * Account: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
     */
    Account: {
        display: "Account",
        code: "Account",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ActivityDefinition: This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
     */
    ActivityDefinition: {
        display: "ActivityDefinition",
        code: "ActivityDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * AdverseEvent: Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
     */
    AdverseEvent: {
        display: "AdverseEvent",
        code: "AdverseEvent",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * AllergyIntolerance: Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
     */
    AllergyIntolerance: {
        display: "AllergyIntolerance",
        code: "AllergyIntolerance",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Code: application/hl7-cda+xml
     */
    CDADocuments: {
        display: "CDA Documents",
        code: "application/hl7-cda+xml",
        system: "urn:ietf:bcp:13",
    },
    /**
     * Appointment: A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
     */
    Appointment: {
        display: "Appointment",
        code: "Appointment",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * AppointmentResponse: A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
     */
    AppointmentResponse: {
        display: "AppointmentResponse",
        code: "AppointmentResponse",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * AuditEvent: A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
     */
    AuditEvent: {
        display: "AuditEvent",
        code: "AuditEvent",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Basic: Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
     */
    Basic: {
        display: "Basic",
        code: "Basic",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Binary: A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
     */
    Binary: {
        display: "Binary",
        code: "Binary",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * BiologicallyDerivedProduct: A material substance originating from a biological entity intended to be transplanted or infused
     * into another (possibly the same) biological entity.
     */
    BiologicallyDerivedProduct: {
        display: "BiologicallyDerivedProduct",
        code: "BiologicallyDerivedProduct",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * BodyStructure: Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
     */
    BodyStructure: {
        display: "BodyStructure",
        code: "BodyStructure",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Bundle: A container for a collection of resources.
     */
    Bundle: {
        display: "Bundle",
        code: "Bundle",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CapabilityStatement: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    CapabilityStatement: {
        display: "CapabilityStatement",
        code: "CapabilityStatement",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CarePlan: Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
     */
    CarePlan: {
        display: "CarePlan",
        code: "CarePlan",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CareTeam: The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
     */
    CareTeam: {
        display: "CareTeam",
        code: "CareTeam",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CatalogEntry: Catalog entries are wrappers that contextualize items included in a catalog.
     */
    CatalogEntry: {
        display: "CatalogEntry",
        code: "CatalogEntry",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ChargeItem: The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
     */
    ChargeItem: {
        display: "ChargeItem",
        code: "ChargeItem",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ChargeItemDefinition: The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
     */
    ChargeItemDefinition: {
        display: "ChargeItemDefinition",
        code: "ChargeItemDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Claim: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
     */
    Claim: {
        display: "Claim",
        code: "Claim",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ClaimResponse: This resource provides the adjudication details from the processing of a Claim resource.
     */
    ClaimResponse: {
        display: "ClaimResponse",
        code: "ClaimResponse",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ClinicalImpression: A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
     */
    ClinicalImpression: {
        display: "ClinicalImpression",
        code: "ClinicalImpression",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CodeSystem: The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
     */
    CodeSystem: {
        display: "CodeSystem",
        code: "CodeSystem",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Communication: An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.
     */
    Communication: {
        display: "Communication",
        code: "Communication",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CommunicationRequest: A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
     */
    CommunicationRequest: {
        display: "CommunicationRequest",
        code: "CommunicationRequest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CompartmentDefinition: A compartment definition that defines how resources are accessed on a server.
     */
    CompartmentDefinition: {
        display: "CompartmentDefinition",
        code: "CompartmentDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Composition: A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
     */
    Composition: {
        display: "Composition",
        code: "Composition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ConceptMap: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
     */
    ConceptMap: {
        display: "ConceptMap",
        code: "ConceptMap",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Condition: A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
     */
    Condition: {
        display: "Condition",
        code: "Condition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Consent: A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
     */
    Consent: {
        display: "Consent",
        code: "Consent",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Contract: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
     */
    Contract: {
        display: "Contract",
        code: "Contract",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Coverage: Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
     */
    Coverage: {
        display: "Coverage",
        code: "Coverage",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CoverageEligibilityRequest: The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
     */
    CoverageEligibilityRequest: {
        display: "CoverageEligibilityRequest",
        code: "CoverageEligibilityRequest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * CoverageEligibilityResponse: This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
     */
    CoverageEligibilityResponse: {
        display: "CoverageEligibilityResponse",
        code: "CoverageEligibilityResponse",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DetectedIssue: Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
     */
    DetectedIssue: {
        display: "DetectedIssue",
        code: "DetectedIssue",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Device: A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
     */
    Device: {
        display: "Device",
        code: "Device",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DeviceDefinition: The characteristics, operational status and capabilities of a medical-related component of a medical device.
     */
    DeviceDefinition: {
        display: "DeviceDefinition",
        code: "DeviceDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DeviceMetric: Describes a measurement, calculation or setting capability of a medical device.
     */
    DeviceMetric: {
        display: "DeviceMetric",
        code: "DeviceMetric",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DeviceRequest: Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
     */
    DeviceRequest: {
        display: "DeviceRequest",
        code: "DeviceRequest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DeviceUseStatement: A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
     */
    DeviceUseStatement: {
        display: "DeviceUseStatement",
        code: "DeviceUseStatement",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DiagnosticReport: The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
     */
    DiagnosticReport: {
        display: "DiagnosticReport",
        code: "DiagnosticReport",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DocumentManifest: A collection of documents compiled for a purpose together with metadata that applies to the collection.
     */
    DocumentManifest: {
        display: "DocumentManifest",
        code: "DocumentManifest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DocumentReference: A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
     */
    DocumentReference: {
        display: "DocumentReference",
        code: "DocumentReference",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * DomainResource: A resource that includes narrative, extensions, and contained resources.
     */
    DomainResource: {
        display: "DomainResource",
        code: "DomainResource",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * EffectEvidenceSynthesis: The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
     */
    EffectEvidenceSynthesis: {
        display: "EffectEvidenceSynthesis",
        code: "EffectEvidenceSynthesis",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Encounter: An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
     */
    Encounter: {
        display: "Encounter",
        code: "Encounter",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Endpoint: The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
     */
    Endpoint: {
        display: "Endpoint",
        code: "Endpoint",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * EnrollmentRequest: This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
     */
    EnrollmentRequest: {
        display: "EnrollmentRequest",
        code: "EnrollmentRequest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * EnrollmentResponse: This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
     */
    EnrollmentResponse: {
        display: "EnrollmentResponse",
        code: "EnrollmentResponse",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * EpisodeOfCare: An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
     */
    EpisodeOfCare: {
        display: "EpisodeOfCare",
        code: "EpisodeOfCare",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * EventDefinition: The EventDefinition resource provides a reusable description of when a particular event can occur.
     */
    EventDefinition: {
        display: "EventDefinition",
        code: "EventDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Evidence: The Evidence resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
     */
    Evidence: {
        display: "Evidence",
        code: "Evidence",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * EvidenceVariable: The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
     */
    EvidenceVariable: {
        display: "EvidenceVariable",
        code: "EvidenceVariable",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ExampleScenario: Example of workflow instance.
     */
    ExampleScenario: {
        display: "ExampleScenario",
        code: "ExampleScenario",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ExplanationOfBenefit: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
     */
    ExplanationOfBenefit: {
        display: "ExplanationOfBenefit",
        code: "ExplanationOfBenefit",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * FamilyMemberHistory: Significant health conditions for a person related to the patient relevant in the context of care for the patient.
     */
    FamilyMemberHistory: {
        display: "FamilyMemberHistory",
        code: "FamilyMemberHistory",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Flag: Prospective warnings of potential issues when providing care to the patient.
     */
    Flag: {
        display: "Flag",
        code: "Flag",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Goal: Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
     */
    Goal: {
        display: "Goal",
        code: "Goal",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * GraphDefinition: A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
     */
    GraphDefinition: {
        display: "GraphDefinition",
        code: "GraphDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Group: Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
     */
    Group: {
        display: "Group",
        code: "Group",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * GuidanceResponse: A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
     */
    GuidanceResponse: {
        display: "GuidanceResponse",
        code: "GuidanceResponse",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * HealthcareService: The details of a healthcare service available at a location.
     */
    HealthcareService: {
        display: "HealthcareService",
        code: "HealthcareService",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Code: http://hl7.org/fhir/StructureDefinition/lipidprofile
     */
    LipidLabReport: {
        display: "Lipid Lab Report",
        code: "http://hl7.org/fhir/StructureDefinition/lipidprofile",
        system: "urn:ietf:rfc:3986",
    },
    /**
     * ImagingStudy: Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
     */
    ImagingStudy: {
        display: "ImagingStudy",
        code: "ImagingStudy",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Immunization: Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
     */
    Immunization: {
        display: "Immunization",
        code: "Immunization",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ImmunizationEvaluation: Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
     */
    ImmunizationEvaluation: {
        display: "ImmunizationEvaluation",
        code: "ImmunizationEvaluation",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ImmunizationRecommendation: A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
     */
    ImmunizationRecommendation: {
        display: "ImmunizationRecommendation",
        code: "ImmunizationRecommendation",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ImplementationGuide: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
     */
    ImplementationGuide: {
        display: "ImplementationGuide",
        code: "ImplementationGuide",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * InsurancePlan: Details of a Health Insurance product/plan provided by an organization.
     */
    InsurancePlan: {
        display: "InsurancePlan",
        code: "InsurancePlan",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Invoice: Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
     */
    Invoice: {
        display: "Invoice",
        code: "Invoice",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Library: The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.
     */
    Library: {
        display: "Library",
        code: "Library",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Linkage: Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
     */
    Linkage: {
        display: "Linkage",
        code: "Linkage",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * List: A list is a curated collection of resources.
     */
    List: {
        display: "List",
        code: "List",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Location: Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
     */
    Location: {
        display: "Location",
        code: "Location",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Measure: The Measure resource provides the definition of a quality measure.
     */
    Measure: {
        display: "Measure",
        code: "Measure",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MeasureReport: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
     */
    MeasureReport: {
        display: "MeasureReport",
        code: "MeasureReport",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Media: A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
     */
    Media: {
        display: "Media",
        code: "Media",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Medication: This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
     */
    Medication: {
        display: "Medication",
        code: "Medication",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicationAdministration: Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
     */
    MedicationAdministration: {
        display: "MedicationAdministration",
        code: "MedicationAdministration",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicationDispense: Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
     */
    MedicationDispense: {
        display: "MedicationDispense",
        code: "MedicationDispense",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicationKnowledge: Information about a medication that is used to support knowledge.
     */
    MedicationKnowledge: {
        display: "MedicationKnowledge",
        code: "MedicationKnowledge",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicationRequest: An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
     */
    MedicationRequest: {
        display: "MedicationRequest",
        code: "MedicationRequest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicationStatement: A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.
     * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
     */
    MedicationStatement: {
        display: "MedicationStatement",
        code: "MedicationStatement",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProduct: Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
     */
    MedicinalProduct: {
        display: "MedicinalProduct",
        code: "MedicinalProduct",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductAuthorization: The regulatory authorization of a medicinal product.
     */
    MedicinalProductAuthorization: {
        display: "MedicinalProductAuthorization",
        code: "MedicinalProductAuthorization",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductContraindication: The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
     */
    MedicinalProductContraindication: {
        display: "MedicinalProductContraindication",
        code: "MedicinalProductContraindication",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductIndication: Indication for the Medicinal Product.
     */
    MedicinalProductIndication: {
        display: "MedicinalProductIndication",
        code: "MedicinalProductIndication",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductIngredient: An ingredient of a manufactured item or pharmaceutical product.
     */
    MedicinalProductIngredient: {
        display: "MedicinalProductIngredient",
        code: "MedicinalProductIngredient",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductInteraction: The interactions of the medicinal product with other medicinal products, or other forms of interactions.
     */
    MedicinalProductInteraction: {
        display: "MedicinalProductInteraction",
        code: "MedicinalProductInteraction",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductManufactured: The manufactured item as contained in the packaged medicinal product.
     */
    MedicinalProductManufactured: {
        display: "MedicinalProductManufactured",
        code: "MedicinalProductManufactured",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductPackaged: A medicinal product in a container or package.
     */
    MedicinalProductPackaged: {
        display: "MedicinalProductPackaged",
        code: "MedicinalProductPackaged",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductPharmaceutical: A pharmaceutical product described in terms of its composition and dose form.
     */
    MedicinalProductPharmaceutical: {
        display: "MedicinalProductPharmaceutical",
        code: "MedicinalProductPharmaceutical",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MedicinalProductUndesirableEffect: Describe the undesirable effects of the medicinal product.
     */
    MedicinalProductUndesirableEffect: {
        display: "MedicinalProductUndesirableEffect",
        code: "MedicinalProductUndesirableEffect",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MessageDefinition: Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
     */
    MessageDefinition: {
        display: "MessageDefinition",
        code: "MessageDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MessageHeader: The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
     */
    MessageHeader: {
        display: "MessageHeader",
        code: "MessageHeader",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * MolecularSequence: Raw data describing a biological sequence.
     */
    MolecularSequence: {
        display: "MolecularSequence",
        code: "MolecularSequence",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * NamingSystem: A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
     */
    NamingSystem: {
        display: "NamingSystem",
        code: "NamingSystem",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * NutritionOrder: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
     */
    NutritionOrder: {
        display: "NutritionOrder",
        code: "NutritionOrder",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Observation: Measurements and simple assertions made about a patient, device or other subject.
     */
    Observation: {
        display: "Observation",
        code: "Observation",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ObservationDefinition: Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
     */
    ObservationDefinition: {
        display: "ObservationDefinition",
        code: "ObservationDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * OperationDefinition: A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
     */
    OperationDefinition: {
        display: "OperationDefinition",
        code: "OperationDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * OperationOutcome: A collection of error, warning, or information messages that result from a system action.
     */
    OperationOutcome: {
        display: "OperationOutcome",
        code: "OperationOutcome",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Organization: A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
     */
    Organization: {
        display: "Organization",
        code: "Organization",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * OrganizationAffiliation: Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship.
     */
    OrganizationAffiliation: {
        display: "OrganizationAffiliation",
        code: "OrganizationAffiliation",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Parameters: This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.
     */
    Parameters: {
        display: "Parameters",
        code: "Parameters",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Patient: Demographics and other administrative information about an individual or animal receiving care or other health-related services.
     */
    Patient: {
        display: "Patient",
        code: "Patient",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * PaymentNotice: This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
     */
    PaymentNotice: {
        display: "PaymentNotice",
        code: "PaymentNotice",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * PaymentReconciliation: This resource provides the details including amount of a payment and allocates the payment items being paid.
     */
    PaymentReconciliation: {
        display: "PaymentReconciliation",
        code: "PaymentReconciliation",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Person: Demographics and administrative information about a person independent of a specific health-related context.
     */
    Person: {
        display: "Person",
        code: "Person",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * PlanDefinition: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
     */
    PlanDefinition: {
        display: "PlanDefinition",
        code: "PlanDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Practitioner: A person who is directly or indirectly involved in the provisioning of healthcare.
     */
    Practitioner: {
        display: "Practitioner",
        code: "Practitioner",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * PractitionerRole: A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
     */
    PractitionerRole: {
        display: "PractitionerRole",
        code: "PractitionerRole",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Procedure: An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
     */
    Procedure: {
        display: "Procedure",
        code: "Procedure",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Provenance: Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
     */
    Provenance: {
        display: "Provenance",
        code: "Provenance",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Questionnaire: A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
     */
    Questionnaire: {
        display: "Questionnaire",
        code: "Questionnaire",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * QuestionnaireResponse: A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
     */
    QuestionnaireResponse: {
        display: "QuestionnaireResponse",
        code: "QuestionnaireResponse",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * RelatedPerson: Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
     */
    RelatedPerson: {
        display: "RelatedPerson",
        code: "RelatedPerson",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * RequestGroup: A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
     */
    RequestGroup: {
        display: "RequestGroup",
        code: "RequestGroup",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ResearchDefinition: The ResearchDefinition resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
     */
    ResearchDefinition: {
        display: "ResearchDefinition",
        code: "ResearchDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ResearchElementDefinition: The ResearchElementDefinition resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
     */
    ResearchElementDefinition: {
        display: "ResearchElementDefinition",
        code: "ResearchElementDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ResearchStudy: A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
     */
    ResearchStudy: {
        display: "ResearchStudy",
        code: "ResearchStudy",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ResearchSubject: A physical entity which is the primary unit of operational and/or administrative interest in a study.
     */
    ResearchSubject: {
        display: "ResearchSubject",
        code: "ResearchSubject",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Resource: This is the base resource type for everything.
     */
    Resource: {
        display: "Resource",
        code: "Resource",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * RiskAssessment: An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
     */
    RiskAssessment: {
        display: "RiskAssessment",
        code: "RiskAssessment",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * RiskEvidenceSynthesis: The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
     */
    RiskEvidenceSynthesis: {
        display: "RiskEvidenceSynthesis",
        code: "RiskEvidenceSynthesis",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Schedule: A container for slots of time that may be available for booking appointments.
     */
    Schedule: {
        display: "Schedule",
        code: "Schedule",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SearchParameter: A search parameter that defines a named search item that can be used to search/filter on a resource.
     */
    SearchParameter: {
        display: "SearchParameter",
        code: "SearchParameter",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * ServiceRequest: A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
     */
    ServiceRequest: {
        display: "ServiceRequest",
        code: "ServiceRequest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Slot: A slot of time on a schedule that may be available for booking appointments.
     */
    Slot: {
        display: "Slot",
        code: "Slot",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Specimen: A sample to be used for analysis.
     */
    Specimen: {
        display: "Specimen",
        code: "Specimen",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SpecimenDefinition: A kind of specimen with associated set of requirements.
     */
    SpecimenDefinition: {
        display: "SpecimenDefinition",
        code: "SpecimenDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * StructureDefinition: A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
     */
    StructureDefinition: {
        display: "StructureDefinition",
        code: "StructureDefinition",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * StructureMap: A Map of relationships between 2 structures that can be used to transform data.
     */
    StructureMap: {
        display: "StructureMap",
        code: "StructureMap",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Subscription: The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
     */
    Subscription: {
        display: "Subscription",
        code: "Subscription",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Substance: A homogeneous material with a definite composition.
     */
    Substance: {
        display: "Substance",
        code: "Substance",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SubstanceNucleicAcid: Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
     */
    SubstanceNucleicAcid: {
        display: "SubstanceNucleicAcid",
        code: "SubstanceNucleicAcid",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SubstancePolymer: Todo.
     */
    SubstancePolymer: {
        display: "SubstancePolymer",
        code: "SubstancePolymer",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SubstanceProtein: A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
     */
    SubstanceProtein: {
        display: "SubstanceProtein",
        code: "SubstanceProtein",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SubstanceReferenceInformation: Todo.
     */
    SubstanceReferenceInformation: {
        display: "SubstanceReferenceInformation",
        code: "SubstanceReferenceInformation",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SubstanceSourceMaterial: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
     */
    SubstanceSourceMaterial: {
        display: "SubstanceSourceMaterial",
        code: "SubstanceSourceMaterial",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SubstanceSpecification: The detailed description of a substance, typically at a level beyond what is used for prescribing.
     */
    SubstanceSpecification: {
        display: "SubstanceSpecification",
        code: "SubstanceSpecification",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SupplyDelivery: Record of delivery of what is supplied.
     */
    SupplyDelivery: {
        display: "SupplyDelivery",
        code: "SupplyDelivery",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * SupplyRequest: A record of a request for a medication, substance or device used in the healthcare setting.
     */
    SupplyRequest: {
        display: "SupplyRequest",
        code: "SupplyRequest",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Task: A task to be performed.
     */
    Task: {
        display: "Task",
        code: "Task",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * TerminologyCapabilities: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
     */
    TerminologyCapabilities: {
        display: "TerminologyCapabilities",
        code: "TerminologyCapabilities",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * TestReport: A summary of information based on the results of executing a TestScript.
     */
    TestReport: {
        display: "TestReport",
        code: "TestReport",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * TestScript: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
     */
    TestScript: {
        display: "TestScript",
        code: "TestScript",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * Code: urn:hl7-org:sdwg:ccda-nonXMLBody:1.1
     */
    ForDocumentsFollowingCCDA11ConstraintsUsingANonStructuredBody: {
        display: "For documents following C-CDA 1.1 constraints using a non structured body.",
        code: "urn:hl7-org:sdwg:ccda-nonXMLBody:1.1",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:hl7-org:sdwg:ccda-nonXMLBody:2.1
     */
    ForDocumentsFollowingCCDA21ConstraintsUsingANonStructuredBody: {
        display: "For documents following C-CDA 2.1 constraints using a non structured body.",
        code: "urn:hl7-org:sdwg:ccda-nonXMLBody:2.1",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:hl7-org:sdwg:ccda-structuredBody:1.1
     */
    ForDocumentsFollowingCCDA11ConstraintsUsingAStructuredBody: {
        display: "For documents following C-CDA 1.1 constraints using a structured body.",
        code: "urn:hl7-org:sdwg:ccda-structuredBody:1.1",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:hl7-org:sdwg:ccda-structuredBody:2.1
     */
    ForDocumentsFollowingCCDA21ConstraintsUsingAStructuredBody: {
        display: "For documents following C-CDA 2.1 constraints using a structured body.",
        code: "urn:hl7-org:sdwg:ccda-structuredBody:2.1",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:card:CRC:2012
     */
    CardiologyCRC: {
        display: "Cardiology CRC",
        code: "urn:ihe:card:CRC:2012",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:card:EPRC-IE:2014
     */
    CardiologyEPRCIE: {
        display: "Cardiology EPRC-IE",
        code: "urn:ihe:card:EPRC-IE:2014",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:card:imaging:2011
     */
    CardiacImagingReport: {
        display: "Cardiac Imaging Report",
        code: "urn:ihe:card:imaging:2011",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:dent:CDA:ImagingReportStructuredHeadings:2013
     */
    DentalCDA: {
        display: "Dental CDA",
        code: "urn:ihe:dent:CDA:ImagingReportStructuredHeadings:2013",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:dent:PDF
     */
    DentalPDF: {
        display: "Dental PDF",
        code: "urn:ihe:dent:PDF",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:dent:TEXT
     */
    DentalText: {
        display: "Dental Text",
        code: "urn:ihe:dent:TEXT",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:appc:2016:consent
     */
    AdvancedPatientPrivacyConsents: {
        display: "Advanced Patient Privacy Consents",
        code: "urn:ihe:iti:appc:2016:consent",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:bppc-sd:2007
     */
    BasicPatientPrivacyConsentsWithScannedDocument: {
        display: "Basic Patient Privacy Consents with Scanned Document",
        code: "urn:ihe:iti:bppc-sd:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:bppc:2007
     */
    BasicPatientPrivacyConsents: {
        display: "Basic Patient Privacy Consents",
        code: "urn:ihe:iti:bppc:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:dsg:detached:2014
     */
    DSGDetachedDocument: {
        display: "DSG Detached Document",
        code: "urn:ihe:iti:dsg:detached:2014",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:dsg:enveloping:2014
     */
    DSGEnvelopingDocument: {
        display: "DSG Enveloping Document",
        code: "urn:ihe:iti:dsg:enveloping:2014",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:xds-sd:pdf:2008
     */
    PDFEmbeddedInCDAPerXDSSDProfile: {
        display: "PDF embedded in CDA per XDS-SD profile",
        code: "urn:ihe:iti:xds-sd:pdf:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:xds-sd:text:2008
     */
    TextEmbeddedInCDAPerXDSSDProfile: {
        display: "Text embedded in CDA per XDS-SD profile",
        code: "urn:ihe:iti:xds-sd:text:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:xds:2017:mimeTypeSufficient
     */
    MimeTypeSufficient: {
        display: "mimeType Sufficient",
        code: "urn:ihe:iti:xds:2017:mimeTypeSufficient",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:iti:xdw:2011:workflowDoc
     */
    XDWWorkflowDocument: {
        display: "XDW Workflow Document",
        code: "urn:ihe:iti:xdw:2011:workflowDoc",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:lab:xd-lab:2008
     */
    CDALaboratoryReport: {
        display: "CDA Laboratory Report",
        code: "urn:ihe:lab:xd-lab:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:all:2010
     */
    AnatomicPathologyStructuredReportAll: {
        display: "Anatomic Pathology Structured Report All",
        code: "urn:ihe:pat:apsr:all:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:all:2010
     */
    AnatomicPathologyStructuredReportCancerAll: {
        display: "Anatomic Pathology Structured Report Cancer All",
        code: "urn:ihe:pat:apsr:cancer:all:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:breast:2010
     */
    AnatomicPathologyStructuredReportCancerBreast: {
        display: "Anatomic Pathology Structured Report Cancer Breast",
        code: "urn:ihe:pat:apsr:cancer:breast:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:cervix:2010
     */
    AnatomicPathologyStructuredReportCancerCervix: {
        display: "Anatomic Pathology Structured Report Cancer Cervix",
        code: "urn:ihe:pat:apsr:cancer:cervix:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:colon:2010
     */
    AnatomicPathologyStructuredReportCancerColon: {
        display: "Anatomic Pathology Structured Report Cancer Colon",
        code: "urn:ihe:pat:apsr:cancer:colon:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:endometrium:2010
     */
    AnatomicPathologyStructuredReportCancerEndometrium: {
        display: "Anatomic Pathology Structured Report Cancer Endometrium",
        code: "urn:ihe:pat:apsr:cancer:endometrium:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:esophagus:2010
     */
    AnatomicPathologyStructuredReportCancerEsophagus: {
        display: "Anatomic Pathology Structured Report Cancer Esophagus",
        code: "urn:ihe:pat:apsr:cancer:esophagus:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:kidney:2010
     */
    AnatomicPathologyStructuredReportCancerKidney: {
        display: "Anatomic Pathology Structured Report Cancer Kidney",
        code: "urn:ihe:pat:apsr:cancer:kidney:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:larynx:2010
     */
    AnatomicPathologyStructuredReportCancerLarynx: {
        display: "Anatomic Pathology Structured Report Cancer Larynx",
        code: "urn:ihe:pat:apsr:cancer:larynx:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:lip_oral_cavity:2010
     */
    AnatomicPathologyStructuredReportCancerLipOralCavity: {
        display: "Anatomic Pathology Structured Report Cancer Lip Oral Cavity",
        code: "urn:ihe:pat:apsr:cancer:lip_oral_cavity:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:liver:2010
     */
    AnatomicPathologyStructuredReportCancerLiver: {
        display: "Anatomic Pathology Structured Report Cancer Liver",
        code: "urn:ihe:pat:apsr:cancer:liver:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:lung:2010
     */
    AnatomicPathologyStructuredReportCancerLung: {
        display: "Anatomic Pathology Structured Report Cancer Lung",
        code: "urn:ihe:pat:apsr:cancer:lung:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:ovary:2010
     */
    AnatomicPathologyStructuredReportCancerOvary: {
        display: "Anatomic Pathology Structured Report Cancer Ovary",
        code: "urn:ihe:pat:apsr:cancer:ovary:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:pancreas:2010
     */
    AnatomicPathologyStructuredReportCancerPancreas: {
        display: "Anatomic Pathology Structured Report Cancer Pancreas",
        code: "urn:ihe:pat:apsr:cancer:pancreas:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:pharynx:2010
     */
    AnatomicPathologyStructuredReportCancerPharynx: {
        display: "Anatomic Pathology Structured Report Cancer Pharynx",
        code: "urn:ihe:pat:apsr:cancer:pharynx:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:prostate:2010
     */
    AnatomicPathologyStructuredReportCancerProstate: {
        display: "Anatomic Pathology Structured Report Cancer Prostate",
        code: "urn:ihe:pat:apsr:cancer:prostate:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:salivary_gland:2010
     */
    AnatomicPathologyStructuredReportCancerSalivaryGland: {
        display: "Anatomic Pathology Structured Report Cancer Salivary Gland",
        code: "urn:ihe:pat:apsr:cancer:salivary_gland:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:skin:2010
     */
    AnatomicPathologyStructuredReportCancerSkin: {
        display: "Anatomic Pathology Structured Report Cancer Skin",
        code: "urn:ihe:pat:apsr:cancer:skin:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:stomach:2010
     */
    AnatomicPathologyStructuredReportCancerStomach: {
        display: "Anatomic Pathology Structured Report Cancer Stomach",
        code: "urn:ihe:pat:apsr:cancer:stomach:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:testis:2010
     */
    AnatomicPathologyStructuredReportCancerTestis: {
        display: "Anatomic Pathology Structured Report Cancer Testis",
        code: "urn:ihe:pat:apsr:cancer:testis:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:thyroid:2010
     */
    AnatomicPathologyStructuredReportCancerThyroid: {
        display: "Anatomic Pathology Structured Report Cancer Thyroid",
        code: "urn:ihe:pat:apsr:cancer:thyroid:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pat:apsr:cancer:urinary_bladder:2010
     */
    AnatomicPathologyStructuredReportCancerUrinaryBladder: {
        display: "Anatomic Pathology Structured Report Cancer Urinary Bladder",
        code: "urn:ihe:pat:apsr:cancer:urinary_bladder:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:apr:edu:2008
     */
    AntepartumRecordAPREducation: {
        display: "Antepartum Record (APR) - Education",
        code: "urn:ihe:pcc:apr:edu:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:apr:handp:2008
     */
    AntepartumRecordAPRHistoryAndPhysical: {
        display: "Antepartum Record (APR) - History and Physical",
        code: "urn:ihe:pcc:apr:handp:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:apr:lab:2008
     */
    AntepartumRecordAPRLaboratory: {
        display: "Antepartum Record (APR) - Laboratory",
        code: "urn:ihe:pcc:apr:lab:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:aps:2007
     */
    IHEAntepartumSummary: {
        display: "IHE Antepartum Summary",
        code: "urn:ihe:pcc:aps:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:cm:2008
     */
    CareManagementCM: {
        display: "Care Management (CM)",
        code: "urn:ihe:pcc:cm:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:crc:2008
     */
    CancerRegistryContentCRC: {
        display: "Cancer Registry Content (CRC)",
        code: "urn:ihe:pcc:crc:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:ctn:2007
     */
    PCCCTN: {
        display: "PCC CTN",
        code: "urn:ihe:pcc:ctn:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:edes:2007
     */
    EmergencyDepartmentEncounterSummaryEDES: {
        display: "Emergency Department Encounter Summary (EDES)",
        code: "urn:ihe:pcc:edes:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:edpn:2007
     */
    PCCEDPN: {
        display: "PCC EDPN",
        code: "urn:ihe:pcc:edpn:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:edr:2007
     */
    EmergencyDepartmentReferralEDR: {
        display: "Emergency Department Referral (EDR)",
        code: "urn:ihe:pcc:edr:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:ets:2011
     */
    PCCETS: {
        display: "PCC ETS",
        code: "urn:ihe:pcc:ets:2011",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:hp:2008
     */
    PCCHP: {
        display: "PCC HP",
        code: "urn:ihe:pcc:hp:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:ic:2008
     */
    ImmunizationContentIC: {
        display: "Immunization Content (IC)",
        code: "urn:ihe:pcc:ic:2008",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:its:2011
     */
    PCCITS: {
        display: "PCC ITS",
        code: "urn:ihe:pcc:its:2011",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:ldhp:2009
     */
    PCCLDHP: {
        display: "PCC LDHP",
        code: "urn:ihe:pcc:ldhp:2009",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:lds:2009
     */
    PCCLDS: {
        display: "PCC LDS",
        code: "urn:ihe:pcc:lds:2009",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:mds:2009
     */
    PCCMDS: {
        display: "PCC MDS",
        code: "urn:ihe:pcc:mds:2009",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:nds:2010
     */
    PCCNDS: {
        display: "PCC NDS",
        code: "urn:ihe:pcc:nds:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:nn:2007
     */
    PCCNN: {
        display: "PCC NN",
        code: "urn:ihe:pcc:nn:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:ppvs:2010
     */
    PCCPPVS: {
        display: "PCC PPVS",
        code: "urn:ihe:pcc:ppvs:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:ript:2017
     */
    RoutineInterfacilityPatientTransportRIPT: {
        display: "Routine Interfacility Patient Transport (RIPT)",
        code: "urn:ihe:pcc:ript:2017",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:tn:2007
     */
    PCCTN: {
        display: "PCC TN",
        code: "urn:ihe:pcc:tn:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:trs:2011
     */
    PCCTRS: {
        display: "PCC TRS",
        code: "urn:ihe:pcc:trs:2011",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:xds-ms:2007
     */
    XDSMedicalSummaries: {
        display: "XDS Medical Summaries",
        code: "urn:ihe:pcc:xds-ms:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pcc:xphr:2007
     */
    PersonalHealthRecordsAlsoKnownAsHL7CCDAndHITSPC32: {
        display: "Personal Health Records. Also known as HL7 CCD and HITSP C32",
        code: "urn:ihe:pcc:xphr:2007",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pharm:dis:2010
     */
    PharmacyDIS: {
        display: "Pharmacy DIS",
        code: "urn:ihe:pharm:dis:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pharm:padv:2010
     */
    PharmacyPADV: {
        display: "Pharmacy PADV",
        code: "urn:ihe:pharm:padv:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pharm:pml:2013
     */
    PharmacyPML: {
        display: "Pharmacy PML",
        code: "urn:ihe:pharm:pml:2013",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:pharm:pre:2010
     */
    PharmacyPre: {
        display: "Pharmacy Pre",
        code: "urn:ihe:pharm:pre:2010",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:rad:CDA:ImagingReportStructuredHeadings:2013
     */
    RadiologyXDSIStructuredCDA: {
        display: "Radiology XDS-I Structured CDA",
        code: "urn:ihe:rad:CDA:ImagingReportStructuredHeadings:2013",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:rad:PDF
     */
    RadiologyXDSIPDF: {
        display: "Radiology XDS-I PDF",
        code: "urn:ihe:rad:PDF",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * Code: urn:ihe:rad:TEXT
     */
    RadiologyXDSIText: {
        display: "Radiology XDS-I Text",
        code: "urn:ihe:rad:TEXT",
        system: "http://ihe.net/fhir/ValueSet/IHE.FormatCode.codesystem",
    },
    /**
     * ValueSet: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
     */
    ValueSet: {
        display: "ValueSet",
        code: "ValueSet",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * VerificationResult: Describes validation requirements, source(s), status and dates for one or more elements.
     */
    VerificationResult: {
        display: "VerificationResult",
        code: "VerificationResult",
        system: "http://hl7.org/fhir/resource-types",
    },
    /**
     * VisionPrescription: An authorization for the provision of glasses and/or contact lenses to a patient.
     */
    VisionPrescription: {
        display: "VisionPrescription",
        code: "VisionPrescription",
        system: "http://hl7.org/fhir/resource-types",
    },
};
//# sourceMappingURL=data:application/json;base64,