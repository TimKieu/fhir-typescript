// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/metric-color|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Describes the typical color of representation.
 */
export const MetricColorCodings = {
    /**
     * black: Color for representation - black.
     */
    ColorBlack: new Coding({
        display: "Color Black",
        code: "black",
        system: "http://hl7.org/fhir/metric-color",
    }),
    /**
     * blue: Color for representation - blue.
     */
    ColorBlue: new Coding({
        display: "Color Blue",
        code: "blue",
        system: "http://hl7.org/fhir/metric-color",
    }),
    /**
     * cyan: Color for representation - cyan.
     */
    ColorCyan: new Coding({
        display: "Color Cyan",
        code: "cyan",
        system: "http://hl7.org/fhir/metric-color",
    }),
    /**
     * green: Color for representation - green.
     */
    ColorGreen: new Coding({
        display: "Color Green",
        code: "green",
        system: "http://hl7.org/fhir/metric-color",
    }),
    /**
     * magenta: Color for representation - magenta.
     */
    ColorMagenta: new Coding({
        display: "Color Magenta",
        code: "magenta",
        system: "http://hl7.org/fhir/metric-color",
    }),
    /**
     * red: Color for representation - red.
     */
    ColorRed: new Coding({
        display: "Color Red",
        code: "red",
        system: "http://hl7.org/fhir/metric-color",
    }),
    /**
     * white: Color for representation - white.
     */
    ColorWhite: new Coding({
        display: "Color White",
        code: "white",
        system: "http://hl7.org/fhir/metric-color",
    }),
    /**
     * yellow: Color for representation - yellow.
     */
    ColorYellow: new Coding({
        display: "Color Yellow",
        code: "yellow",
        system: "http://hl7.org/fhir/metric-color",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0cmljQ29sb3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZXRyaWNDb2xvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBRWpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtDQUFrQztLQUMzQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21ldHJpYy1jb2xvcnw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSB0eXBpY2FsIGNvbG9yIG9mIHJlcHJlc2VudGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1ldHJpY0NvbG9yQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBibGFjazogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gYmxhY2suXHJcbiAgICovXHJcbiAgQ29sb3JCbGFjazogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIEJsYWNrXCIsXHJcbiAgICBjb2RlOiBcImJsYWNrXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBibHVlOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSBibHVlLlxyXG4gICAqL1xyXG4gIENvbG9yQmx1ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIEJsdWVcIixcclxuICAgIGNvZGU6IFwiYmx1ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogY3lhbjogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0gY3lhbi5cclxuICAgKi9cclxuICBDb2xvckN5YW46IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb2xvciBDeWFuXCIsXHJcbiAgICBjb2RlOiBcImN5YW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGdyZWVuOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSBncmVlbi5cclxuICAgKi9cclxuICBDb2xvckdyZWVuOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgR3JlZW5cIixcclxuICAgIGNvZGU6IFwiZ3JlZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG1hZ2VudGE6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIG1hZ2VudGEuXHJcbiAgICovXHJcbiAgQ29sb3JNYWdlbnRhOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgTWFnZW50YVwiLFxyXG4gICAgY29kZTogXCJtYWdlbnRhXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZXRyaWMtY29sb3JcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWQ6IENvbG9yIGZvciByZXByZXNlbnRhdGlvbiAtIHJlZC5cclxuICAgKi9cclxuICBDb2xvclJlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9yIFJlZFwiLFxyXG4gICAgY29kZTogXCJyZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHdoaXRlOiBDb2xvciBmb3IgcmVwcmVzZW50YXRpb24gLSB3aGl0ZS5cclxuICAgKi9cclxuICBDb2xvcldoaXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgV2hpdGVcIixcclxuICAgIGNvZGU6IFwid2hpdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21ldHJpYy1jb2xvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHllbGxvdzogQ29sb3IgZm9yIHJlcHJlc2VudGF0aW9uIC0geWVsbG93LlxyXG4gICAqL1xyXG4gIENvbG9yWWVsbG93OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3IgWWVsbG93XCIsXHJcbiAgICBjb2RlOiBcInllbGxvd1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWV0cmljLWNvbG9yXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSB0eXBpY2FsIGNvbG9yIG9mIHJlcHJlc2VudGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWV0cmljQ29sb3JDb2RpbmdUeXBlID0gdHlwZW9mIE1ldHJpY0NvbG9yQ29kaW5ncztcclxuIl19