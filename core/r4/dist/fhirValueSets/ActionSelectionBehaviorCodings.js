// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/action-selection-behavior|4.0.1
/**
 * Defines selection behavior of a group.
 */
export const ActionSelectionBehaviorCodings = {
    /**
     * all: All the actions in the group must be selected as a single unit.
     */
    All: {
        display: "All",
        code: "all",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * all-or-none: All the actions in the group are meant to be chosen as a single unit: either all must be selected by the end user, or none may be selected.
     */
    AllOrNone: {
        display: "All Or None",
        code: "all-or-none",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * any: Any number of the actions in the group may be chosen, from zero to all.
     */
    Any: {
        display: "Any",
        code: "any",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * at-most-one: The end user may choose zero or at most one of the actions in the group.
     */
    AtMostOne: {
        display: "At Most One",
        code: "at-most-one",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * exactly-one: The end user must choose one and only one of the selectable actions in the group. The user SHALL NOT choose none of the actions in the group.
     */
    ExactlyOne: {
        display: "Exactly One",
        code: "exactly-one",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
    /**
     * one-or-more: The end user must choose a minimum of one, and as many additional as desired.
     */
    OneOrMore: {
        display: "One Or More",
        code: "one-or-more",
        system: "http://hl7.org/fhir/action-selection-behavior",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uU2VsZWN0aW9uQmVoYXZpb3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9BY3Rpb25TZWxlY3Rpb25CZWhhdmlvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBa0M5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWN0aW9uLXNlbGVjdGlvbi1iZWhhdmlvcnw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgc2VsZWN0aW9uIGJlaGF2aW9yIG9mIGEgZ3JvdXAuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25TZWxlY3Rpb25CZWhhdmlvckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWxsOiBBbGwgdGhlIGFjdGlvbnMgaW4gdGhlIGdyb3VwIG11c3QgYmUgc2VsZWN0ZWQgYXMgYSBzaW5nbGUgdW5pdC5cclxuICAgKi9cclxuICBBbGw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYWxsLW9yLW5vbmU6IEFsbCB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAgYXJlIG1lYW50IHRvIGJlIGNob3NlbiBhcyBhIHNpbmdsZSB1bml0OiBlaXRoZXIgYWxsIG11c3QgYmUgc2VsZWN0ZWQgYnkgdGhlIGVuZCB1c2VyLCBvciBub25lIG1heSBiZSBzZWxlY3RlZC5cclxuICAgKi9cclxuICBBbGxPck5vbmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYW55OiBBbnkgbnVtYmVyIG9mIHRoZSBhY3Rpb25zIGluIHRoZSBncm91cCBtYXkgYmUgY2hvc2VuLCBmcm9tIHplcm8gdG8gYWxsLlxyXG4gICAqL1xyXG4gIEFueTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBhdC1tb3N0LW9uZTogVGhlIGVuZCB1c2VyIG1heSBjaG9vc2UgemVybyBvciBhdCBtb3N0IG9uZSBvZiB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgQXRNb3N0T25lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGV4YWN0bHktb25lOiBUaGUgZW5kIHVzZXIgbXVzdCBjaG9vc2Ugb25lIGFuZCBvbmx5IG9uZSBvZiB0aGUgc2VsZWN0YWJsZSBhY3Rpb25zIGluIHRoZSBncm91cC4gVGhlIHVzZXIgU0hBTEwgTk9UIGNob29zZSBub25lIG9mIHRoZSBhY3Rpb25zIGluIHRoZSBncm91cC5cclxuICAgKi9cclxuICBFeGFjdGx5T25lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9uZS1vci1tb3JlOiBUaGUgZW5kIHVzZXIgbXVzdCBjaG9vc2UgYSBtaW5pbXVtIG9mIG9uZSwgYW5kIGFzIG1hbnkgYWRkaXRpb25hbCBhcyBkZXNpcmVkLlxyXG4gICAqL1xyXG4gIE9uZU9yTW9yZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgc2VsZWN0aW9uIGJlaGF2aW9yIG9mIGEgZ3JvdXAuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQWN0aW9uU2VsZWN0aW9uQmVoYXZpb3JDb2RpbmdzOkFjdGlvblNlbGVjdGlvbkJlaGF2aW9yQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbGw6IEFsbCB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAgbXVzdCBiZSBzZWxlY3RlZCBhcyBhIHNpbmdsZSB1bml0LlxyXG4gICAqL1xyXG4gIEFsbDoge1xyXG4gICAgZGlzcGxheTogXCJBbGxcIixcclxuICAgIGNvZGU6IFwiYWxsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tc2VsZWN0aW9uLWJlaGF2aW9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhbGwtb3Itbm9uZTogQWxsIHRoZSBhY3Rpb25zIGluIHRoZSBncm91cCBhcmUgbWVhbnQgdG8gYmUgY2hvc2VuIGFzIGEgc2luZ2xlIHVuaXQ6IGVpdGhlciBhbGwgbXVzdCBiZSBzZWxlY3RlZCBieSB0aGUgZW5kIHVzZXIsIG9yIG5vbmUgbWF5IGJlIHNlbGVjdGVkLlxyXG4gICAqL1xyXG4gIEFsbE9yTm9uZToge1xyXG4gICAgZGlzcGxheTogXCJBbGwgT3IgTm9uZVwiLFxyXG4gICAgY29kZTogXCJhbGwtb3Itbm9uZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXNlbGVjdGlvbi1iZWhhdmlvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYW55OiBBbnkgbnVtYmVyIG9mIHRoZSBhY3Rpb25zIGluIHRoZSBncm91cCBtYXkgYmUgY2hvc2VuLCBmcm9tIHplcm8gdG8gYWxsLlxyXG4gICAqL1xyXG4gIEFueToge1xyXG4gICAgZGlzcGxheTogXCJBbnlcIixcclxuICAgIGNvZGU6IFwiYW55XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tc2VsZWN0aW9uLWJlaGF2aW9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBhdC1tb3N0LW9uZTogVGhlIGVuZCB1c2VyIG1heSBjaG9vc2UgemVybyBvciBhdCBtb3N0IG9uZSBvZiB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgQXRNb3N0T25lOiB7XHJcbiAgICBkaXNwbGF5OiBcIkF0IE1vc3QgT25lXCIsXHJcbiAgICBjb2RlOiBcImF0LW1vc3Qtb25lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tc2VsZWN0aW9uLWJlaGF2aW9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBleGFjdGx5LW9uZTogVGhlIGVuZCB1c2VyIG11c3QgY2hvb3NlIG9uZSBhbmQgb25seSBvbmUgb2YgdGhlIHNlbGVjdGFibGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAuIFRoZSB1c2VyIFNIQUxMIE5PVCBjaG9vc2Ugbm9uZSBvZiB0aGUgYWN0aW9ucyBpbiB0aGUgZ3JvdXAuXHJcbiAgICovXHJcbiAgRXhhY3RseU9uZToge1xyXG4gICAgZGlzcGxheTogXCJFeGFjdGx5IE9uZVwiLFxyXG4gICAgY29kZTogXCJleGFjdGx5LW9uZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXNlbGVjdGlvbi1iZWhhdmlvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb25lLW9yLW1vcmU6IFRoZSBlbmQgdXNlciBtdXN0IGNob29zZSBhIG1pbmltdW0gb2Ygb25lLCBhbmQgYXMgbWFueSBhZGRpdGlvbmFsIGFzIGRlc2lyZWQuXHJcbiAgICovXHJcbiAgT25lT3JNb3JlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk9uZSBPciBNb3JlXCIsXHJcbiAgICBjb2RlOiBcIm9uZS1vci1tb3JlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tc2VsZWN0aW9uLWJlaGF2aW9yXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19