// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-subpotent-reason|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the reason why a dose is considered to be subpotent. This value set is provided as a suggestive example.
 */
export const ImmunizationSubpotentReasonCodings = {
    /**
     * coldchainbreak: The vaccine experienced a cold chain break.
     */
    ColdChainBreak: new Coding({
        display: "Cold Chain Break",
        code: "coldchainbreak",
        system: "http://terminology.hl7.org/CodeSystem/immunization-subpotent-reason",
    }),
    /**
     * partial: The full volume of the dose was not administered to the patient.
     */
    PartialDose: new Coding({
        display: "Partial Dose",
        code: "partial",
        system: "http://terminology.hl7.org/CodeSystem/immunization-subpotent-reason",
    }),
    /**
     * recall: The vaccine was recalled by the manufacturer.
     */
    ManufacturerRecall: new Coding({
        display: "Manufacturer Recall",
        code: "recall",
        system: "http://terminology.hl7.org/CodeSystem/immunization-subpotent-reason",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uU3VicG90ZW50UmVhc29uQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvSW1tdW5pemF0aW9uU3VicG90ZW50UmVhc29uQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrRkFBa0Y7QUFFbEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQUc7SUFDaEQ7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSxxRUFBcUU7S0FDOUUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHFFQUFxRTtLQUM5RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxrQkFBa0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM3QixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHFFQUFxRTtLQUM5RSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9pbW11bml6YXRpb24tc3VicG90ZW50LXJlYXNvbnw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSByZWFzb24gd2h5IGEgZG9zZSBpcyBjb25zaWRlcmVkIHRvIGJlIHN1YnBvdGVudC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW1tdW5pemF0aW9uU3VicG90ZW50UmVhc29uQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBjb2xkY2hhaW5icmVhazogVGhlIHZhY2NpbmUgZXhwZXJpZW5jZWQgYSBjb2xkIGNoYWluIGJyZWFrLlxyXG4gICAqL1xyXG4gIENvbGRDaGFpbkJyZWFrOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29sZCBDaGFpbiBCcmVha1wiLFxyXG4gICAgY29kZTogXCJjb2xkY2hhaW5icmVha1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLXN1YnBvdGVudC1yZWFzb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwYXJ0aWFsOiBUaGUgZnVsbCB2b2x1bWUgb2YgdGhlIGRvc2Ugd2FzIG5vdCBhZG1pbmlzdGVyZWQgdG8gdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgUGFydGlhbERvc2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQYXJ0aWFsIERvc2VcIixcclxuICAgIGNvZGU6IFwicGFydGlhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLXN1YnBvdGVudC1yZWFzb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWNhbGw6IFRoZSB2YWNjaW5lIHdhcyByZWNhbGxlZCBieSB0aGUgbWFudWZhY3R1cmVyLlxyXG4gICAqL1xyXG4gIE1hbnVmYWN0dXJlclJlY2FsbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1hbnVmYWN0dXJlciBSZWNhbGxcIixcclxuICAgIGNvZGU6IFwicmVjYWxsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9pbW11bml6YXRpb24tc3VicG90ZW50LXJlYXNvblwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSB2YWx1ZSBzZXQgdG8gaW5zdGFudGlhdGUgdGhpcyBhdHRyaWJ1dGUgc2hvdWxkIGJlIGRyYXduIGZyb20gYSB0ZXJtaW5vbG9naWNhbGx5IHJvYnVzdCBjb2RlIHN5c3RlbSB0aGF0IGNvbnNpc3RzIG9mIG9yIGNvbnRhaW5zIGNvbmNlcHRzIHRvIHN1cHBvcnQgZGVzY3JpYmluZyB0aGUgcmVhc29uIHdoeSBhIGRvc2UgaXMgY29uc2lkZXJlZCB0byBiZSBzdWJwb3RlbnQuIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW1tdW5pemF0aW9uU3VicG90ZW50UmVhc29uQ29kaW5nVHlwZSA9IHR5cGVvZiBJbW11bml6YXRpb25TdWJwb3RlbnRSZWFzb25Db2RpbmdzO1xyXG4iXX0=