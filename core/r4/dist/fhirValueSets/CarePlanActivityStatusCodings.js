// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/care-plan-activity-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes that reflect the current state of a care plan activity within its overall life cycle.
 */
export const CarePlanActivityStatusCodings = {
    /**
     * cancelled: The planned care plan activity has been withdrawn.
     */
    Cancelled: new Coding({
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * completed: Care plan activity has been completed (more or less) as planned.
     */
    Completed: new Coding({
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * entered-in-error: Care plan activity was entered in error and voided.
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * in-progress: Care plan activity has been started but is not yet complete.
     */
    InProgress: new Coding({
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * not-started: Care plan activity is planned but no action has yet been taken.
     */
    NotStarted: new Coding({
        display: "Not Started",
        code: "not-started",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * on-hold: Care plan activity was started but has temporarily ceased with an expectation of resumption at a future time.
     */
    OnHold: new Coding({
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * scheduled: Appointment or other booking has occurred but activity has not yet begun.
     */
    Scheduled: new Coding({
        display: "Scheduled",
        code: "scheduled",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * stopped: The planned care plan activity has been ended prior to completion after the activity was started.
     */
    Stopped: new Coding({
        display: "Stopped",
        code: "stopped",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
    /**
     * unknown: The current state of the care plan activity is not known.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which one.
     */
    Unknown: new Coding({
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/care-plan-activity-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZVBsYW5BY3Rpdml0eVN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NhcmVQbGFuQWN0aXZpdHlTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDhFQUE4RTtBQUU5RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQzs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jYXJlLXBsYW4tYWN0aXZpdHktc3RhdHVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyB0aGF0IHJlZmxlY3QgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYSBjYXJlIHBsYW4gYWN0aXZpdHkgd2l0aGluIGl0cyBvdmVyYWxsIGxpZmUgY3ljbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ2FyZVBsYW5BY3Rpdml0eVN0YXR1c0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgcGxhbm5lZCBjYXJlIHBsYW4gYWN0aXZpdHkgaGFzIGJlZW4gd2l0aGRyYXduLlxyXG4gICAqL1xyXG4gIENhbmNlbGxlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNhbmNlbGxlZFwiLFxyXG4gICAgY29kZTogXCJjYW5jZWxsZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NhcmUtcGxhbi1hY3Rpdml0eS1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IENhcmUgcGxhbiBhY3Rpdml0eSBoYXMgYmVlbiBjb21wbGV0ZWQgKG1vcmUgb3IgbGVzcykgYXMgcGxhbm5lZC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb21wbGV0ZWRcIixcclxuICAgIGNvZGU6IFwiY29tcGxldGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jYXJlLXBsYW4tYWN0aXZpdHktc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogQ2FyZSBwbGFuIGFjdGl2aXR5IHdhcyBlbnRlcmVkIGluIGVycm9yIGFuZCB2b2lkZWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NhcmUtcGxhbi1hY3Rpdml0eS1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogQ2FyZSBwbGFuIGFjdGl2aXR5IGhhcyBiZWVuIHN0YXJ0ZWQgYnV0IGlzIG5vdCB5ZXQgY29tcGxldGUuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluIFByb2dyZXNzXCIsXHJcbiAgICBjb2RlOiBcImluLXByb2dyZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jYXJlLXBsYW4tYWN0aXZpdHktc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbm90LXN0YXJ0ZWQ6IENhcmUgcGxhbiBhY3Rpdml0eSBpcyBwbGFubmVkIGJ1dCBubyBhY3Rpb24gaGFzIHlldCBiZWVuIHRha2VuLlxyXG4gICAqL1xyXG4gIE5vdFN0YXJ0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOb3QgU3RhcnRlZFwiLFxyXG4gICAgY29kZTogXCJub3Qtc3RhcnRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FyZS1wbGFuLWFjdGl2aXR5LXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG9uLWhvbGQ6IENhcmUgcGxhbiBhY3Rpdml0eSB3YXMgc3RhcnRlZCBidXQgaGFzIHRlbXBvcmFyaWx5IGNlYXNlZCB3aXRoIGFuIGV4cGVjdGF0aW9uIG9mIHJlc3VtcHRpb24gYXQgYSBmdXR1cmUgdGltZS5cclxuICAgKi9cclxuICBPbkhvbGQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPbiBIb2xkXCIsXHJcbiAgICBjb2RlOiBcIm9uLWhvbGRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NhcmUtcGxhbi1hY3Rpdml0eS1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzY2hlZHVsZWQ6IEFwcG9pbnRtZW50IG9yIG90aGVyIGJvb2tpbmcgaGFzIG9jY3VycmVkIGJ1dCBhY3Rpdml0eSBoYXMgbm90IHlldCBiZWd1bi5cclxuICAgKi9cclxuICBTY2hlZHVsZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTY2hlZHVsZWRcIixcclxuICAgIGNvZGU6IFwic2NoZWR1bGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jYXJlLXBsYW4tYWN0aXZpdHktc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc3RvcHBlZDogVGhlIHBsYW5uZWQgY2FyZSBwbGFuIGFjdGl2aXR5IGhhcyBiZWVuIGVuZGVkIHByaW9yIHRvIGNvbXBsZXRpb24gYWZ0ZXIgdGhlIGFjdGl2aXR5IHdhcyBzdGFydGVkLlxyXG4gICAqL1xyXG4gIFN0b3BwZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTdG9wcGVkXCIsXHJcbiAgICBjb2RlOiBcInN0b3BwZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NhcmUtcGxhbi1hY3Rpdml0eS1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY2FyZSBwbGFuIGFjdGl2aXR5IGlzIG5vdCBrbm93bi4gIE5vdGU6IFRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3IgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBsaXN0ZWQgc3RhdHVzZXMgaXMgcHJlc3VtZWQgdG8gYXBwbHksIGJ1dCB0aGUgYXV0aG9yaW5nL3NvdXJjZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaCBvbmUuXHJcbiAgICovXHJcbiAgVW5rbm93bjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd25cIixcclxuICAgIGNvZGU6IFwidW5rbm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FyZS1wbGFuLWFjdGl2aXR5LXN0YXR1c1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIHRoYXQgcmVmbGVjdCB0aGUgY3VycmVudCBzdGF0ZSBvZiBhIGNhcmUgcGxhbiBhY3Rpdml0eSB3aXRoaW4gaXRzIG92ZXJhbGwgbGlmZSBjeWNsZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIENhcmVQbGFuQWN0aXZpdHlTdGF0dXNDb2RpbmdUeXBlID0gdHlwZW9mIENhcmVQbGFuQWN0aXZpdHlTdGF0dXNDb2RpbmdzO1xyXG4iXX0=