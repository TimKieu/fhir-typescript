// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/care-plan-intent|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes indicating the degree of authority/intentionality associated with a care plan.
 */
export const CarePlanIntentCodings = {
    /**
     * option: The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or other constraints among a set of requests.  Refer to [[[RequestGroup]]] for additional information on how this status is used.
     */
    Option: new Coding({
        display: "Option",
        code: "option",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * order: The request represents a request/demand and authorization for action by a Practitioner.
     */
    Order: new Coding({
        display: "Order",
        code: "order",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * plan: The request represents an intention to ensure something occurs without providing an authorization for others to act.
     */
    Plan: new Coding({
        display: "Plan",
        code: "plan",
        system: "http://hl7.org/fhir/request-intent",
    }),
    /**
     * proposal: The request is a suggestion made by someone/something that does not have an intention to ensure it occurs and without providing an authorization to act.
     */
    Proposal: new Coding({
        display: "Proposal",
        code: "proposal",
        system: "http://hl7.org/fhir/request-intent",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZVBsYW5JbnRlbnRDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9DYXJlUGxhbkludGVudENvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMscUVBQXFFO0FBRXJFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ25DOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLG9DQUFvQztLQUM3QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NhcmUtcGxhbi1pbnRlbnR8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGluZGljYXRpbmcgdGhlIGRlZ3JlZSBvZiBhdXRob3JpdHkvaW50ZW50aW9uYWxpdHkgYXNzb2NpYXRlZCB3aXRoIGEgY2FyZSBwbGFuLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENhcmVQbGFuSW50ZW50Q29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBvcHRpb246IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYSBjb21wb25lbnQgb3Igb3B0aW9uIGZvciBhIFJlcXVlc3RHcm91cCB0aGF0IGVzdGFibGlzaGVzIHRpbWluZywgY29uZGl0aW9uYWxpdHkgYW5kL29yIG90aGVyIGNvbnN0cmFpbnRzIGFtb25nIGEgc2V0IG9mIHJlcXVlc3RzLiAgUmVmZXIgdG8gW1tbUmVxdWVzdEdyb3VwXV1dIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIG9uIGhvdyB0aGlzIHN0YXR1cyBpcyB1c2VkLlxyXG4gICAqL1xyXG4gIE9wdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9wdGlvblwiLFxyXG4gICAgY29kZTogXCJvcHRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYSByZXF1ZXN0L2RlbWFuZCBhbmQgYXV0aG9yaXphdGlvbiBmb3IgYWN0aW9uIGJ5IGEgUHJhY3RpdGlvbmVyLlxyXG4gICAqL1xyXG4gIE9yZGVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT3JkZXJcIixcclxuICAgIGNvZGU6IFwib3JkZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcGxhbjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyBhbiBpbnRlbnRpb24gdG8gZW5zdXJlIHNvbWV0aGluZyBvY2N1cnMgd2l0aG91dCBwcm92aWRpbmcgYW4gYXV0aG9yaXphdGlvbiBmb3Igb3RoZXJzIHRvIGFjdC5cclxuICAgKi9cclxuICBQbGFuOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUGxhblwiLFxyXG4gICAgY29kZTogXCJwbGFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LWludGVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHByb3Bvc2FsOiBUaGUgcmVxdWVzdCBpcyBhIHN1Z2dlc3Rpb24gbWFkZSBieSBzb21lb25lL3NvbWV0aGluZyB0aGF0IGRvZXMgbm90IGhhdmUgYW4gaW50ZW50aW9uIHRvIGVuc3VyZSBpdCBvY2N1cnMgYW5kIHdpdGhvdXQgcHJvdmlkaW5nIGFuIGF1dGhvcml6YXRpb24gdG8gYWN0LlxyXG4gICAqL1xyXG4gIFByb3Bvc2FsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUHJvcG9zYWxcIixcclxuICAgIGNvZGU6IFwicHJvcG9zYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3QtaW50ZW50XCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29kZXMgaW5kaWNhdGluZyB0aGUgZGVncmVlIG9mIGF1dGhvcml0eS9pbnRlbnRpb25hbGl0eSBhc3NvY2lhdGVkIHdpdGggYSBjYXJlIHBsYW4uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDYXJlUGxhbkludGVudENvZGluZ1R5cGUgPSB0eXBlb2YgQ2FyZVBsYW5JbnRlbnRDb2RpbmdzO1xyXG4iXX0=