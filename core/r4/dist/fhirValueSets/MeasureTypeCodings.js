// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measure-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The type of measure (includes codes from 2.16.840.1.113883.1.11.20368).
 */
export const MeasureTypeCodings = {
    /**
     * composite: A measure that combines multiple component measures in to a single quality measure.
     */
    Composite: new Coding({
        display: "Composite",
        code: "composite",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    }),
    /**
     * outcome: A measure that indicates the result of the performance (or non-performance) of a function or process.
     */
    Outcome: new Coding({
        display: "Outcome",
        code: "outcome",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    }),
    /**
     * patient-reported-outcome: A measure that focuses on patient-reported information such as patient engagement or patient experience measures.
     */
    PatientReportedOutcome: new Coding({
        display: "Patient Reported Outcome",
        code: "patient-reported-outcome",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    }),
    /**
     * process: A measure which focuses on a process which leads to a certain outcome, meaning that a scientific basis exists for believing that the process, when executed well, will increase the probability of achieving a desired outcome.
     */
    Process: new Coding({
        display: "Process",
        code: "process",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    }),
    /**
     * structure: A measure that focuses on a health care provider's capacity, systems, and processes to provide high-quality care.
     */
    Structure: new Coding({
        display: "Structure",
        code: "structure",
        system: "http://terminology.hl7.org/CodeSystem/measure-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWFzdXJlVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBRWpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxzQkFBc0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQyxPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRSwwQkFBMEI7UUFDaEMsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lYXN1cmUtdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgbWVhc3VyZSAoaW5jbHVkZXMgY29kZXMgZnJvbSAyLjE2Ljg0MC4xLjExMzg4My4xLjExLjIwMzY4KS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWFzdXJlVHlwZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcG9zaXRlOiBBIG1lYXN1cmUgdGhhdCBjb21iaW5lcyBtdWx0aXBsZSBjb21wb25lbnQgbWVhc3VyZXMgaW4gdG8gYSBzaW5nbGUgcXVhbGl0eSBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIENvbXBvc2l0ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBvc2l0ZVwiLFxyXG4gICAgY29kZTogXCJjb21wb3NpdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lYXN1cmUtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG91dGNvbWU6IEEgbWVhc3VyZSB0aGF0IGluZGljYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwZXJmb3JtYW5jZSAob3Igbm9uLXBlcmZvcm1hbmNlKSBvZiBhIGZ1bmN0aW9uIG9yIHByb2Nlc3MuXHJcbiAgICovXHJcbiAgT3V0Y29tZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk91dGNvbWVcIixcclxuICAgIGNvZGU6IFwib3V0Y29tZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVhc3VyZS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcGF0aWVudC1yZXBvcnRlZC1vdXRjb21lOiBBIG1lYXN1cmUgdGhhdCBmb2N1c2VzIG9uIHBhdGllbnQtcmVwb3J0ZWQgaW5mb3JtYXRpb24gc3VjaCBhcyBwYXRpZW50IGVuZ2FnZW1lbnQgb3IgcGF0aWVudCBleHBlcmllbmNlIG1lYXN1cmVzLlxyXG4gICAqL1xyXG4gIFBhdGllbnRSZXBvcnRlZE91dGNvbWU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQYXRpZW50IFJlcG9ydGVkIE91dGNvbWVcIixcclxuICAgIGNvZGU6IFwicGF0aWVudC1yZXBvcnRlZC1vdXRjb21lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWFzdXJlLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwcm9jZXNzOiBBIG1lYXN1cmUgd2hpY2ggZm9jdXNlcyBvbiBhIHByb2Nlc3Mgd2hpY2ggbGVhZHMgdG8gYSBjZXJ0YWluIG91dGNvbWUsIG1lYW5pbmcgdGhhdCBhIHNjaWVudGlmaWMgYmFzaXMgZXhpc3RzIGZvciBiZWxpZXZpbmcgdGhhdCB0aGUgcHJvY2Vzcywgd2hlbiBleGVjdXRlZCB3ZWxsLCB3aWxsIGluY3JlYXNlIHRoZSBwcm9iYWJpbGl0eSBvZiBhY2hpZXZpbmcgYSBkZXNpcmVkIG91dGNvbWUuXHJcbiAgICovXHJcbiAgUHJvY2VzczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlByb2Nlc3NcIixcclxuICAgIGNvZGU6IFwicHJvY2Vzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVhc3VyZS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc3RydWN0dXJlOiBBIG1lYXN1cmUgdGhhdCBmb2N1c2VzIG9uIGEgaGVhbHRoIGNhcmUgcHJvdmlkZXIncyBjYXBhY2l0eSwgc3lzdGVtcywgYW5kIHByb2Nlc3NlcyB0byBwcm92aWRlIGhpZ2gtcXVhbGl0eSBjYXJlLlxyXG4gICAqL1xyXG4gIFN0cnVjdHVyZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN0cnVjdHVyZVwiLFxyXG4gICAgY29kZTogXCJzdHJ1Y3R1cmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lYXN1cmUtdHlwZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIG1lYXN1cmUgKGluY2x1ZGVzIGNvZGVzIGZyb20gMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4yMDM2OCkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWFzdXJlVHlwZUNvZGluZ1R5cGUgPSB0eXBlb2YgTWVhc3VyZVR5cGVDb2RpbmdzO1xyXG4iXX0=