// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/eligibilityresponse-purpose|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A code specifying the types of information being requested.
 */
export const EligibilityresponsePurposeCodings = {
    /**
     * auth-requirements: The prior authorization requirements for the listed, or discovered if specified, converages for the categories of service and/or specifed biling codes are requested.
     */
    CoverageAuthRequirements: new Coding({
        display: "Coverage auth-requirements",
        code: "auth-requirements",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    }),
    /**
     * benefits: The plan benefits and optionally benefits consumed  for the listed, or discovered if specified, converages are requested.
     */
    CoverageBenefits: new Coding({
        display: "Coverage benefits",
        code: "benefits",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    }),
    /**
     * discovery: The insurer is requested to report on any coverages which they are aware of in addition to any specifed.
     */
    CoverageDiscovery: new Coding({
        display: "Coverage Discovery",
        code: "discovery",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    }),
    /**
     * validation: A check that the specified coverages are in-force is requested.
     */
    CoverageValidation: new Coding({
        display: "Coverage Validation",
        code: "validation",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxpZ2liaWxpdHlyZXNwb25zZVB1cnBvc2VDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FbGlnaWJpbGl0eXJlc3BvbnNlUHVycG9zZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsZ0ZBQWdGO0FBRWhGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHO0lBQy9DOztPQUVHO0lBQ0gsd0JBQXdCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkMsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLE1BQU0sRUFBRSxpREFBaUQ7S0FDMUQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDM0IsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsaURBQWlEO0tBQzFELENBQUM7SUFDRjs7T0FFRztJQUNILGlCQUFpQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGlEQUFpRDtLQUMxRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxrQkFBa0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM3QixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxpREFBaUQ7S0FDMUQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZWxpZ2liaWxpdHlyZXNwb25zZS1wdXJwb3NlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBBIGNvZGUgc3BlY2lmeWluZyB0aGUgdHlwZXMgb2YgaW5mb3JtYXRpb24gYmVpbmcgcmVxdWVzdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVsaWdpYmlsaXR5cmVzcG9uc2VQdXJwb3NlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBhdXRoLXJlcXVpcmVtZW50czogVGhlIHByaW9yIGF1dGhvcml6YXRpb24gcmVxdWlyZW1lbnRzIGZvciB0aGUgbGlzdGVkLCBvciBkaXNjb3ZlcmVkIGlmIHNwZWNpZmllZCwgY29udmVyYWdlcyBmb3IgdGhlIGNhdGVnb3JpZXMgb2Ygc2VydmljZSBhbmQvb3Igc3BlY2lmZWQgYmlsaW5nIGNvZGVzIGFyZSByZXF1ZXN0ZWQuXHJcbiAgICovXHJcbiAgQ292ZXJhZ2VBdXRoUmVxdWlyZW1lbnRzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ292ZXJhZ2UgYXV0aC1yZXF1aXJlbWVudHNcIixcclxuICAgIGNvZGU6IFwiYXV0aC1yZXF1aXJlbWVudHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VsaWdpYmlsaXR5cmVzcG9uc2UtcHVycG9zZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGJlbmVmaXRzOiBUaGUgcGxhbiBiZW5lZml0cyBhbmQgb3B0aW9uYWxseSBiZW5lZml0cyBjb25zdW1lZCAgZm9yIHRoZSBsaXN0ZWQsIG9yIGRpc2NvdmVyZWQgaWYgc3BlY2lmaWVkLCBjb252ZXJhZ2VzIGFyZSByZXF1ZXN0ZWQuXHJcbiAgICovXHJcbiAgQ292ZXJhZ2VCZW5lZml0czogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvdmVyYWdlIGJlbmVmaXRzXCIsXHJcbiAgICBjb2RlOiBcImJlbmVmaXRzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbGlnaWJpbGl0eXJlc3BvbnNlLXB1cnBvc2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkaXNjb3Zlcnk6IFRoZSBpbnN1cmVyIGlzIHJlcXVlc3RlZCB0byByZXBvcnQgb24gYW55IGNvdmVyYWdlcyB3aGljaCB0aGV5IGFyZSBhd2FyZSBvZiBpbiBhZGRpdGlvbiB0byBhbnkgc3BlY2lmZWQuXHJcbiAgICovXHJcbiAgQ292ZXJhZ2VEaXNjb3Zlcnk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb3ZlcmFnZSBEaXNjb3ZlcnlcIixcclxuICAgIGNvZGU6IFwiZGlzY292ZXJ5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbGlnaWJpbGl0eXJlc3BvbnNlLXB1cnBvc2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB2YWxpZGF0aW9uOiBBIGNoZWNrIHRoYXQgdGhlIHNwZWNpZmllZCBjb3ZlcmFnZXMgYXJlIGluLWZvcmNlIGlzIHJlcXVlc3RlZC5cclxuICAgKi9cclxuICBDb3ZlcmFnZVZhbGlkYXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb3ZlcmFnZSBWYWxpZGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcInZhbGlkYXRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VsaWdpYmlsaXR5cmVzcG9uc2UtcHVycG9zZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEEgY29kZSBzcGVjaWZ5aW5nIHRoZSB0eXBlcyBvZiBpbmZvcm1hdGlvbiBiZWluZyByZXF1ZXN0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFbGlnaWJpbGl0eXJlc3BvbnNlUHVycG9zZUNvZGluZ1R5cGUgPSB0eXBlb2YgRWxpZ2liaWxpdHlyZXNwb25zZVB1cnBvc2VDb2RpbmdzO1xyXG4iXX0=