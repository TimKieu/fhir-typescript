// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/eligibilityresponse-purpose|4.0.1
/**
 * A code specifying the types of information being requested.
 */
export const EligibilityresponsePurposeCodings = {
    /**
     * auth-requirements: The prior authorization requirements for the listed, or discovered if specified, converages for the categories of service and/or specifed biling codes are requested.
     */
    CoverageAuthRequirements: {
        display: "Coverage auth-requirements",
        code: "auth-requirements",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    },
    /**
     * benefits: The plan benefits and optionally benefits consumed  for the listed, or discovered if specified, converages are requested.
     */
    CoverageBenefits: {
        display: "Coverage benefits",
        code: "benefits",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    },
    /**
     * discovery: The insurer is requested to report on any coverages which they are aware of in addition to any specifed.
     */
    CoverageDiscovery: {
        display: "Coverage Discovery",
        code: "discovery",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    },
    /**
     * validation: A check that the specified coverages are in-force is requested.
     */
    CoverageValidation: {
        display: "Coverage Validation",
        code: "validation",
        system: "http://hl7.org/fhir/eligibilityresponse-purpose",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxpZ2liaWxpdHlyZXNwb25zZVB1cnBvc2VDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FbGlnaWJpbGl0eXJlc3BvbnNlUHVycG9zZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsZ0ZBQWdGO0FBMEJoRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUF3QztJQUNwRjs7T0FFRztJQUNILHdCQUF3QixFQUFFO1FBQ3hCLE9BQU8sRUFBRSw0QkFBNEI7UUFDckMsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsaURBQWlEO0tBQzFEO0lBQ0Q7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxpREFBaUQ7S0FDMUQ7SUFDRDs7T0FFRztJQUNILGlCQUFpQixFQUFFO1FBQ2pCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGlEQUFpRDtLQUMxRDtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsaURBQWlEO0tBQzFEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbGlnaWJpbGl0eXJlc3BvbnNlLXB1cnBvc2V8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBBIGNvZGUgc3BlY2lmeWluZyB0aGUgdHlwZXMgb2YgaW5mb3JtYXRpb24gYmVpbmcgcmVxdWVzdGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRWxpZ2liaWxpdHlyZXNwb25zZVB1cnBvc2VDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGF1dGgtcmVxdWlyZW1lbnRzOiBUaGUgcHJpb3IgYXV0aG9yaXphdGlvbiByZXF1aXJlbWVudHMgZm9yIHRoZSBsaXN0ZWQsIG9yIGRpc2NvdmVyZWQgaWYgc3BlY2lmaWVkLCBjb252ZXJhZ2VzIGZvciB0aGUgY2F0ZWdvcmllcyBvZiBzZXJ2aWNlIGFuZC9vciBzcGVjaWZlZCBiaWxpbmcgY29kZXMgYXJlIHJlcXVlc3RlZC5cclxuICAgKi9cclxuICBDb3ZlcmFnZUF1dGhSZXF1aXJlbWVudHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYmVuZWZpdHM6IFRoZSBwbGFuIGJlbmVmaXRzIGFuZCBvcHRpb25hbGx5IGJlbmVmaXRzIGNvbnN1bWVkICBmb3IgdGhlIGxpc3RlZCwgb3IgZGlzY292ZXJlZCBpZiBzcGVjaWZpZWQsIGNvbnZlcmFnZXMgYXJlIHJlcXVlc3RlZC5cclxuICAgKi9cclxuICBDb3ZlcmFnZUJlbmVmaXRzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRpc2NvdmVyeTogVGhlIGluc3VyZXIgaXMgcmVxdWVzdGVkIHRvIHJlcG9ydCBvbiBhbnkgY292ZXJhZ2VzIHdoaWNoIHRoZXkgYXJlIGF3YXJlIG9mIGluIGFkZGl0aW9uIHRvIGFueSBzcGVjaWZlZC5cclxuICAgKi9cclxuICBDb3ZlcmFnZURpc2NvdmVyeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB2YWxpZGF0aW9uOiBBIGNoZWNrIHRoYXQgdGhlIHNwZWNpZmllZCBjb3ZlcmFnZXMgYXJlIGluLWZvcmNlIGlzIHJlcXVlc3RlZC5cclxuICAgKi9cclxuICBDb3ZlcmFnZVZhbGlkYXRpb246IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGNvZGUgc3BlY2lmeWluZyB0aGUgdHlwZXMgb2YgaW5mb3JtYXRpb24gYmVpbmcgcmVxdWVzdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVsaWdpYmlsaXR5cmVzcG9uc2VQdXJwb3NlQ29kaW5nczpFbGlnaWJpbGl0eXJlc3BvbnNlUHVycG9zZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXV0aC1yZXF1aXJlbWVudHM6IFRoZSBwcmlvciBhdXRob3JpemF0aW9uIHJlcXVpcmVtZW50cyBmb3IgdGhlIGxpc3RlZCwgb3IgZGlzY292ZXJlZCBpZiBzcGVjaWZpZWQsIGNvbnZlcmFnZXMgZm9yIHRoZSBjYXRlZ29yaWVzIG9mIHNlcnZpY2UgYW5kL29yIHNwZWNpZmVkIGJpbGluZyBjb2RlcyBhcmUgcmVxdWVzdGVkLlxyXG4gICAqL1xyXG4gIENvdmVyYWdlQXV0aFJlcXVpcmVtZW50czoge1xyXG4gICAgZGlzcGxheTogXCJDb3ZlcmFnZSBhdXRoLXJlcXVpcmVtZW50c1wiLFxyXG4gICAgY29kZTogXCJhdXRoLXJlcXVpcmVtZW50c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZWxpZ2liaWxpdHlyZXNwb25zZS1wdXJwb3NlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBiZW5lZml0czogVGhlIHBsYW4gYmVuZWZpdHMgYW5kIG9wdGlvbmFsbHkgYmVuZWZpdHMgY29uc3VtZWQgIGZvciB0aGUgbGlzdGVkLCBvciBkaXNjb3ZlcmVkIGlmIHNwZWNpZmllZCwgY29udmVyYWdlcyBhcmUgcmVxdWVzdGVkLlxyXG4gICAqL1xyXG4gIENvdmVyYWdlQmVuZWZpdHM6IHtcclxuICAgIGRpc3BsYXk6IFwiQ292ZXJhZ2UgYmVuZWZpdHNcIixcclxuICAgIGNvZGU6IFwiYmVuZWZpdHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VsaWdpYmlsaXR5cmVzcG9uc2UtcHVycG9zZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGlzY292ZXJ5OiBUaGUgaW5zdXJlciBpcyByZXF1ZXN0ZWQgdG8gcmVwb3J0IG9uIGFueSBjb3ZlcmFnZXMgd2hpY2ggdGhleSBhcmUgYXdhcmUgb2YgaW4gYWRkaXRpb24gdG8gYW55IHNwZWNpZmVkLlxyXG4gICAqL1xyXG4gIENvdmVyYWdlRGlzY292ZXJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvdmVyYWdlIERpc2NvdmVyeVwiLFxyXG4gICAgY29kZTogXCJkaXNjb3ZlcnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VsaWdpYmlsaXR5cmVzcG9uc2UtcHVycG9zZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdmFsaWRhdGlvbjogQSBjaGVjayB0aGF0IHRoZSBzcGVjaWZpZWQgY292ZXJhZ2VzIGFyZSBpbi1mb3JjZSBpcyByZXF1ZXN0ZWQuXHJcbiAgICovXHJcbiAgQ292ZXJhZ2VWYWxpZGF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvdmVyYWdlIFZhbGlkYXRpb25cIixcclxuICAgIGNvZGU6IFwidmFsaWRhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZWxpZ2liaWxpdHlyZXNwb25zZS1wdXJwb3NlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19