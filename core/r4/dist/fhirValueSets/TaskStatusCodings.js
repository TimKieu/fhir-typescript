// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/task-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The current status of the task.
 */
export const TaskStatusCodings = {
    /**
     * accepted: The potential performer has agreed to execute the task but has not yet started work.
     */
    Accepted: new Coding({
        display: "Accepted",
        code: "accepted",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * cancelled: The task was not completed.
     */
    Cancelled: new Coding({
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * completed: The task has been completed.
     */
    Completed: new Coding({
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * draft: The task is not yet ready to be acted upon.
     */
    Draft: new Coding({
        display: "Draft",
        code: "draft",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * entered-in-error: The task should never have existed and is retained only because of the possibility it may have used.
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * failed: The task was attempted but could not be completed due to some error.
     */
    Failed: new Coding({
        display: "Failed",
        code: "failed",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * in-progress: The task has been started but is not yet complete.
     */
    InProgress: new Coding({
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * on-hold: The task has been started but work has been paused.
     */
    OnHold: new Coding({
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * ready: The task is ready to be performed, but no action has yet been taken.  Used in place of requested/received/accepted/rejected when request assignment and acceptance is a given.
     */
    Ready: new Coding({
        display: "Ready",
        code: "ready",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * received: A potential performer has claimed ownership of the task and is evaluating whether to perform it.
     */
    Received: new Coding({
        display: "Received",
        code: "received",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * rejected: The potential performer who claimed ownership of the task has decided not to execute it prior to performing any action.
     */
    Rejected: new Coding({
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/task-status",
    }),
    /**
     * requested: The task is ready to be acted upon and action is sought.
     */
    Requested: new Coding({
        display: "Requested",
        code: "requested",
        system: "http://hl7.org/fhir/task-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza1N0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Rhc2tTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGdFQUFnRTtBQUVoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRztJQUMvQjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxpQ0FBaUM7S0FDMUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxpQ0FBaUM7S0FDMUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxpQ0FBaUM7S0FDMUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGlDQUFpQztLQUMxQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsaUNBQWlDO0tBQzFDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Rhc2stc3RhdHVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIHRhc2suXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVGFza1N0YXR1c0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYWNjZXB0ZWQ6IFRoZSBwb3RlbnRpYWwgcGVyZm9ybWVyIGhhcyBhZ3JlZWQgdG8gZXhlY3V0ZSB0aGUgdGFzayBidXQgaGFzIG5vdCB5ZXQgc3RhcnRlZCB3b3JrLlxyXG4gICAqL1xyXG4gIEFjY2VwdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWNjZXB0ZWRcIixcclxuICAgIGNvZGU6IFwiYWNjZXB0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgdGFzayB3YXMgbm90IGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDYW5jZWxsZWRcIixcclxuICAgIGNvZGU6IFwiY2FuY2VsbGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90YXNrLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIHRhc2sgaGFzIGJlZW4gY29tcGxldGVkLlxyXG4gICAqL1xyXG4gIENvbXBsZXRlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IFRoZSB0YXNrIGlzIG5vdCB5ZXQgcmVhZHkgdG8gYmUgYWN0ZWQgdXBvbi5cclxuICAgKi9cclxuICBEcmFmdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRyYWZ0XCIsXHJcbiAgICBjb2RlOiBcImRyYWZ0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90YXNrLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSB0YXNrIHNob3VsZCBuZXZlciBoYXZlIGV4aXN0ZWQgYW5kIGlzIHJldGFpbmVkIG9ubHkgYmVjYXVzZSBvZiB0aGUgcG9zc2liaWxpdHkgaXQgbWF5IGhhdmUgdXNlZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdGFzay1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBmYWlsZWQ6IFRoZSB0YXNrIHdhcyBhdHRlbXB0ZWQgYnV0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQgZHVlIHRvIHNvbWUgZXJyb3IuXHJcbiAgICovXHJcbiAgRmFpbGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRmFpbGVkXCIsXHJcbiAgICBjb2RlOiBcImZhaWxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdGFzay1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIHRhc2sgaGFzIGJlZW4gc3RhcnRlZCBidXQgaXMgbm90IHlldCBjb21wbGV0ZS5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW4gUHJvZ3Jlc3NcIixcclxuICAgIGNvZGU6IFwiaW4tcHJvZ3Jlc3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogVGhlIHRhc2sgaGFzIGJlZW4gc3RhcnRlZCBidXQgd29yayBoYXMgYmVlbiBwYXVzZWQuXHJcbiAgICovXHJcbiAgT25Ib2xkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT24gSG9sZFwiLFxyXG4gICAgY29kZTogXCJvbi1ob2xkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90YXNrLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJlYWR5OiBUaGUgdGFzayBpcyByZWFkeSB0byBiZSBwZXJmb3JtZWQsIGJ1dCBubyBhY3Rpb24gaGFzIHlldCBiZWVuIHRha2VuLiAgVXNlZCBpbiBwbGFjZSBvZiByZXF1ZXN0ZWQvcmVjZWl2ZWQvYWNjZXB0ZWQvcmVqZWN0ZWQgd2hlbiByZXF1ZXN0IGFzc2lnbm1lbnQgYW5kIGFjY2VwdGFuY2UgaXMgYSBnaXZlbi5cclxuICAgKi9cclxuICBSZWFkeTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlYWR5XCIsXHJcbiAgICBjb2RlOiBcInJlYWR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90YXNrLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJlY2VpdmVkOiBBIHBvdGVudGlhbCBwZXJmb3JtZXIgaGFzIGNsYWltZWQgb3duZXJzaGlwIG9mIHRoZSB0YXNrIGFuZCBpcyBldmFsdWF0aW5nIHdoZXRoZXIgdG8gcGVyZm9ybSBpdC5cclxuICAgKi9cclxuICBSZWNlaXZlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlY2VpdmVkXCIsXHJcbiAgICBjb2RlOiBcInJlY2VpdmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90YXNrLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJlamVjdGVkOiBUaGUgcG90ZW50aWFsIHBlcmZvcm1lciB3aG8gY2xhaW1lZCBvd25lcnNoaXAgb2YgdGhlIHRhc2sgaGFzIGRlY2lkZWQgbm90IHRvIGV4ZWN1dGUgaXQgcHJpb3IgdG8gcGVyZm9ybWluZyBhbnkgYWN0aW9uLlxyXG4gICAqL1xyXG4gIFJlamVjdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmVqZWN0ZWRcIixcclxuICAgIGNvZGU6IFwicmVqZWN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcmVxdWVzdGVkOiBUaGUgdGFzayBpcyByZWFkeSB0byBiZSBhY3RlZCB1cG9uIGFuZCBhY3Rpb24gaXMgc291Z2h0LlxyXG4gICAqL1xyXG4gIFJlcXVlc3RlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlcXVlc3RlZFwiLFxyXG4gICAgY29kZTogXCJyZXF1ZXN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Rhc2stc3RhdHVzXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSB0YXNrLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVGFza1N0YXR1c0NvZGluZ1R5cGUgPSB0eXBlb2YgVGFza1N0YXR1c0NvZGluZ3M7XHJcbiJdfQ==