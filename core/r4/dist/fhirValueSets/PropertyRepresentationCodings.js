// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/property-representation|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * How a property is represented when serialized.
 */
export const PropertyRepresentationCodings = {
    /**
     * cdaText: Use CDA narrative instead of XHTML.
     */
    CDATextFormat: new Coding({
        display: "CDA Text Format",
        code: "cdaText",
        system: "http://hl7.org/fhir/property-representation",
    }),
    /**
     * typeAttr: The type of this element is indicated using xsi:type.
     */
    TypeAttribute: new Coding({
        display: "Type Attribute",
        code: "typeAttr",
        system: "http://hl7.org/fhir/property-representation",
    }),
    /**
     * xhtml: The property is represented using XHTML.
     */
    XHTML: new Coding({
        display: "XHTML",
        code: "xhtml",
        system: "http://hl7.org/fhir/property-representation",
    }),
    /**
     * xmlAttr: In XML, this property is represented as an attribute not an element.
     */
    XMLAttribute: new Coding({
        display: "XML Attribute",
        code: "xmlAttr",
        system: "http://hl7.org/fhir/property-representation",
    }),
    /**
     * xmlText: This element is represented using the XML text attribute (primitives only).
     */
    XMLText: new Coding({
        display: "XML Text",
        code: "xmlText",
        system: "http://hl7.org/fhir/property-representation",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvcGVydHlSZXByZXNlbnRhdGlvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Byb3BlcnR5UmVwcmVzZW50YXRpb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDRFQUE0RTtBQUU1RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQzs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDZDQUE2QztLQUN0RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsNkNBQTZDO0tBQ3RELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSw2Q0FBNkM7S0FDdEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDZDQUE2QztLQUN0RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNkNBQTZDO0tBQ3RELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Byb3BlcnR5LXJlcHJlc2VudGF0aW9ufDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBIb3cgYSBwcm9wZXJ0eSBpcyByZXByZXNlbnRlZCB3aGVuIHNlcmlhbGl6ZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUHJvcGVydHlSZXByZXNlbnRhdGlvbkNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY2RhVGV4dDogVXNlIENEQSBuYXJyYXRpdmUgaW5zdGVhZCBvZiBYSFRNTC5cclxuICAgKi9cclxuICBDREFUZXh0Rm9ybWF0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ0RBIFRleHQgRm9ybWF0XCIsXHJcbiAgICBjb2RlOiBcImNkYVRleHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Byb3BlcnR5LXJlcHJlc2VudGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdHlwZUF0dHI6IFRoZSB0eXBlIG9mIHRoaXMgZWxlbWVudCBpcyBpbmRpY2F0ZWQgdXNpbmcgeHNpOnR5cGUuXHJcbiAgICovXHJcbiAgVHlwZUF0dHJpYnV0ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlR5cGUgQXR0cmlidXRlXCIsXHJcbiAgICBjb2RlOiBcInR5cGVBdHRyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wcm9wZXJ0eS1yZXByZXNlbnRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHhodG1sOiBUaGUgcHJvcGVydHkgaXMgcmVwcmVzZW50ZWQgdXNpbmcgWEhUTUwuXHJcbiAgICovXHJcbiAgWEhUTUw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJYSFRNTFwiLFxyXG4gICAgY29kZTogXCJ4aHRtbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcHJvcGVydHktcmVwcmVzZW50YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB4bWxBdHRyOiBJbiBYTUwsIHRoaXMgcHJvcGVydHkgaXMgcmVwcmVzZW50ZWQgYXMgYW4gYXR0cmlidXRlIG5vdCBhbiBlbGVtZW50LlxyXG4gICAqL1xyXG4gIFhNTEF0dHJpYnV0ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlhNTCBBdHRyaWJ1dGVcIixcclxuICAgIGNvZGU6IFwieG1sQXR0clwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcHJvcGVydHktcmVwcmVzZW50YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB4bWxUZXh0OiBUaGlzIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgdXNpbmcgdGhlIFhNTCB0ZXh0IGF0dHJpYnV0ZSAocHJpbWl0aXZlcyBvbmx5KS5cclxuICAgKi9cclxuICBYTUxUZXh0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiWE1MIFRleHRcIixcclxuICAgIGNvZGU6IFwieG1sVGV4dFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcHJvcGVydHktcmVwcmVzZW50YXRpb25cIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBIb3cgYSBwcm9wZXJ0eSBpcyByZXByZXNlbnRlZCB3aGVuIHNlcmlhbGl6ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVJlcHJlc2VudGF0aW9uQ29kaW5nVHlwZSA9IHR5cGVvZiBQcm9wZXJ0eVJlcHJlc2VudGF0aW9uQ29kaW5ncztcclxuIl19