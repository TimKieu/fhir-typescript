// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-modifier-code|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A supported modifier for a search parameter.
 */
export const SearchModifierCodeCodings = {
    /**
     * above: The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
     */
    Above: new Coding({
        display: "Above",
        code: "above",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * below: The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
     */
    Below: new Coding({
        display: "Below",
        code: "below",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * contains: The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
     */
    Contains: new Coding({
        display: "Contains",
        code: "contains",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * exact: The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
     */
    Exact: new Coding({
        display: "Exact",
        code: "exact",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * identifier: The search parameter applies to the identifier on the resource, not the reference.
     */
    Identifier: new Coding({
        display: "Identifier",
        code: "identifier",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
     */
    In: new Coding({
        display: "In",
        code: "in",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * missing: The search parameter returns resources that have a value or not.
     */
    Missing: new Coding({
        display: "Missing",
        code: "missing",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * not: The search parameter returns resources that do not contain a match.
     */
    Not: new Coding({
        display: "Not",
        code: "not",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * not-in: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
     */
    NotIn: new Coding({
        display: "Not In",
        code: "not-in",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * ofType: The search parameter has the format system|code|value, where the system and code refer to an Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present.
     */
    OfType: new Coding({
        display: "Of Type",
        code: "ofType",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * text: The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
     */
    Text: new Coding({
        display: "Text",
        code: "text",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
    /**
     * type: The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
     */
    Type: new Coding({
        display: "Type",
        code: "type",
        system: "http://hl7.org/fhir/search-modifier-code",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoTW9kaWZpZXJDb2RlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU2VhcmNoTW9kaWZpZXJDb2RlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFFekUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkM7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxFQUFFLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDYixPQUFPLEVBQUUsSUFBSTtRQUNiLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7SUFDRjs7T0FFRztJQUNILEdBQUcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNkLE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9zZWFyY2gtbW9kaWZpZXItY29kZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQSBzdXBwb3J0ZWQgbW9kaWZpZXIgZm9yIGEgc2VhcmNoIHBhcmFtZXRlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hNb2RpZmllckNvZGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFib3ZlOiBUaGUgc2VhcmNoIHBhcmFtZXRlciB0ZXN0cyB3aGV0aGVyIHRoZSB2YWx1ZSBpbiBhIHJlc291cmNlIHN1YnN1bWVzIHRoZSBzcGVjaWZpZWQgdmFsdWUgKGlzLWEsIG9yIGhpZXJhcmNoaWNhbCByZWxhdGlvbnNoaXBzKS5cclxuICAgKi9cclxuICBBYm92ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFib3ZlXCIsXHJcbiAgICBjb2RlOiBcImFib3ZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtbW9kaWZpZXItY29kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGJlbG93OiBUaGUgc2VhcmNoIHBhcmFtZXRlciB0ZXN0cyB3aGV0aGVyIHRoZSB2YWx1ZSBpbiBhIHJlc291cmNlIGlzIHN1YnN1bWVkIGJ5IHRoZSBzcGVjaWZpZWQgdmFsdWUgKGlzLWEsIG9yIGhpZXJhcmNoaWNhbCByZWxhdGlvbnNoaXBzKS5cclxuICAgKi9cclxuICBCZWxvdzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJlbG93XCIsXHJcbiAgICBjb2RlOiBcImJlbG93XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtbW9kaWZpZXItY29kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvbnRhaW5zOiBUaGUgc2VhcmNoIHBhcmFtZXRlciByZXR1cm5zIHJlc291cmNlcyB0aGF0IGluY2x1ZGUgdGhlIHN1cHBsaWVkIHBhcmFtZXRlciB2YWx1ZSBhbnl3aGVyZSB3aXRoaW4gdGhlIGZpZWxkIGJlaW5nIHNlYXJjaGVkLlxyXG4gICAqL1xyXG4gIENvbnRhaW5zOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29udGFpbnNcIixcclxuICAgIGNvZGU6IFwiY29udGFpbnNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1tb2RpZmllci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZXhhY3Q6IFRoZSBzZWFyY2ggcGFyYW1ldGVyIHJldHVybnMgcmVzb3VyY2VzIHRoYXQgaGF2ZSBhIHZhbHVlIHRoYXQgZXhhY3RseSBtYXRjaGVzIHRoZSBzdXBwbGllZCBwYXJhbWV0ZXIgKHRoZSB3aG9sZSBzdHJpbmcsIGluY2x1ZGluZyBjYXNpbmcgYW5kIGFjY2VudHMpLlxyXG4gICAqL1xyXG4gIEV4YWN0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRXhhY3RcIixcclxuICAgIGNvZGU6IFwiZXhhY3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1tb2RpZmllci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaWRlbnRpZmllcjogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgYXBwbGllcyB0byB0aGUgaWRlbnRpZmllciBvbiB0aGUgcmVzb3VyY2UsIG5vdCB0aGUgcmVmZXJlbmNlLlxyXG4gICAqL1xyXG4gIElkZW50aWZpZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJZGVudGlmaWVyXCIsXHJcbiAgICBjb2RlOiBcImlkZW50aWZpZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1tb2RpZmllci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaW46IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGEgVVJJIChyZWxhdGl2ZSBvciBhYnNvbHV0ZSkgdGhhdCBpZGVudGlmaWVzIGEgdmFsdWUgc2V0LCBhbmQgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgY29kaW5nIGlzIGluIHRoZSBzcGVjaWZpZWQgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIEluOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW5cIixcclxuICAgIGNvZGU6IFwiaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1tb2RpZmllci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbWlzc2luZzogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgcmV0dXJucyByZXNvdXJjZXMgdGhhdCBoYXZlIGEgdmFsdWUgb3Igbm90LlxyXG4gICAqL1xyXG4gIE1pc3Npbmc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNaXNzaW5nXCIsXHJcbiAgICBjb2RlOiBcIm1pc3NpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1tb2RpZmllci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbm90OiBUaGUgc2VhcmNoIHBhcmFtZXRlciByZXR1cm5zIHJlc291cmNlcyB0aGF0IGRvIG5vdCBjb250YWluIGEgbWF0Y2guXHJcbiAgICovXHJcbiAgTm90OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTm90XCIsXHJcbiAgICBjb2RlOiBcIm5vdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLW1vZGlmaWVyLWNvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBub3QtaW46IFRoZSBzZWFyY2ggcGFyYW1ldGVyIGlzIGEgVVJJIChyZWxhdGl2ZSBvciBhYnNvbHV0ZSkgdGhhdCBpZGVudGlmaWVzIGEgdmFsdWUgc2V0LCBhbmQgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgdGVzdHMgd2hldGhlciB0aGUgY29kaW5nIGlzIG5vdCBpbiB0aGUgc3BlY2lmaWVkIHZhbHVlIHNldC5cclxuICAgKi9cclxuICBOb3RJbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBJblwiLFxyXG4gICAgY29kZTogXCJub3QtaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1tb2RpZmllci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb2ZUeXBlOiBUaGUgc2VhcmNoIHBhcmFtZXRlciBoYXMgdGhlIGZvcm1hdCBzeXN0ZW18Y29kZXx2YWx1ZSwgd2hlcmUgdGhlIHN5c3RlbSBhbmQgY29kZSByZWZlciB0byBhbiBJZGVudGlmaWVyLnR5cGUuY29kaW5nLnN5c3RlbSBhbmQgLmNvZGUsIGFuZCBtYXRjaCBpZiBhbnkgb2YgdGhlIHR5cGUgY29kZXMgbWF0Y2guIEFsbCAzIHBhcnRzIG11c3QgYmUgcHJlc2VudC5cclxuICAgKi9cclxuICBPZlR5cGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPZiBUeXBlXCIsXHJcbiAgICBjb2RlOiBcIm9mVHlwZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLW1vZGlmaWVyLWNvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB0ZXh0OiBUaGUgc2VhcmNoIHBhcmFtZXRlciBpcyBwcm9jZXNzZWQgYXMgYSBzdHJpbmcgdGhhdCBzZWFyY2hlcyB0ZXh0IGFzc29jaWF0ZWQgd2l0aCB0aGUgY29kZS92YWx1ZSAtIGVpdGhlciBDb2RlYWJsZUNvbmNlcHQudGV4dCwgQ29kaW5nLmRpc3BsYXksIG9yIElkZW50aWZpZXIudHlwZS50ZXh0LlxyXG4gICAqL1xyXG4gIFRleHQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUZXh0XCIsXHJcbiAgICBjb2RlOiBcInRleHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1tb2RpZmllci1jb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdHlwZTogVGhlIHNlYXJjaCBwYXJhbWV0ZXIgb25seSBhcHBsaWVzIHRvIHRoZSBSZXNvdXJjZSBUeXBlIHNwZWNpZmllZCBhcyBhIG1vZGlmaWVyIChlLmcuIHRoZSBtb2RpZmllciBpcyBub3QgYWN0dWFsbHkgOnR5cGUsIGJ1dCA6UGF0aWVudCBldGMuKS5cclxuICAgKi9cclxuICBUeXBlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVHlwZVwiLFxyXG4gICAgY29kZTogXCJ0eXBlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtbW9kaWZpZXItY29kZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEEgc3VwcG9ydGVkIG1vZGlmaWVyIGZvciBhIHNlYXJjaCBwYXJhbWV0ZXIuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTZWFyY2hNb2RpZmllckNvZGVDb2RpbmdUeXBlID0gdHlwZW9mIFNlYXJjaE1vZGlmaWVyQ29kZUNvZGluZ3M7XHJcbiJdfQ==