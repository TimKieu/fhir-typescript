// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/reference-handling-policy|4.0.1
/**
 * A set of flags that defines how references are supported.
 */
export const ReferenceHandlingPolicyCodings = {
    /**
     * enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
     */
    ReferenceIntegrityEnforced: {
        display: "Reference Integrity Enforced",
        code: "enforced",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * literal: The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
     */
    LiteralReferences: {
        display: "Literal References",
        code: "literal",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * local: The server does not support references that point to other servers.
     */
    LocalReferencesOnly: {
        display: "Local References Only",
        code: "local",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * logical: The server allows logical references (i.e. using Reference.identifier).
     */
    LogicalReferences: {
        display: "Logical References",
        code: "logical",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
    /**
     * resolves: The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
     */
    ResolvesReferences: {
        display: "Resolves References",
        code: "resolves",
        system: "http://hl7.org/fhir/reference-handling-policy",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBOEI5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILDBCQUEwQixFQUFFO1FBQzFCLE9BQU8sRUFBRSw4QkFBOEI7UUFDdkMsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILG1CQUFtQixFQUFFO1FBQ25CLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLCtDQUErQztLQUN4RDtJQUNEOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5fDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgZmxhZ3MgdGhhdCBkZWZpbmVzIGhvdyByZWZlcmVuY2VzIGFyZSBzdXBwb3J0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZW5mb3JjZWQ6IFRoZSBzZXJ2ZXIgZW5mb3JjZXMgdGhhdCByZWZlcmVuY2VzIGhhdmUgaW50ZWdyaXR5IC0gZS5nLiBpdCBlbnN1cmVzIHRoYXQgcmVmZXJlbmNlcyBjYW4gYWx3YXlzIGJlIHJlc29sdmVkLiBUaGlzIGlzIHR5cGljYWxseSB0aGUgY2FzZSBmb3IgY2xpbmljYWwgcmVjb3JkIHN5c3RlbXMsIGJ1dCBvZnRlbiBub3QgdGhlIGNhc2UgZm9yIG1pZGRsZXdhcmUvcHJveHkgc3lzdGVtcy5cclxuICAgKi9cclxuICBSZWZlcmVuY2VJbnRlZ3JpdHlFbmZvcmNlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsaXRlcmFsOiBUaGUgc2VydmVyIHN1cHBvcnRzIGFuZCBwb3B1bGF0ZXMgTGl0ZXJhbCByZWZlcmVuY2VzIChpLmUuIHVzaW5nIFJlZmVyZW5jZS5yZWZlcmVuY2UpIHdoZXJlIHRoZXkgYXJlIGtub3duICh0aGlzIGNvZGUgZG9lcyBub3QgZ3VhcmFudGVlIHRoYXQgYWxsIHJlZmVyZW5jZXMgYXJlIGxpdGVyYWw7IHNlZSAnZW5mb3JjZWQnKS5cclxuICAgKi9cclxuICBMaXRlcmFsUmVmZXJlbmNlczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsb2NhbDogVGhlIHNlcnZlciBkb2VzIG5vdCBzdXBwb3J0IHJlZmVyZW5jZXMgdGhhdCBwb2ludCB0byBvdGhlciBzZXJ2ZXJzLlxyXG4gICAqL1xyXG4gIExvY2FsUmVmZXJlbmNlc09ubHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbG9naWNhbDogVGhlIHNlcnZlciBhbGxvd3MgbG9naWNhbCByZWZlcmVuY2VzIChpLmUuIHVzaW5nIFJlZmVyZW5jZS5pZGVudGlmaWVyKS5cclxuICAgKi9cclxuICBMb2dpY2FsUmVmZXJlbmNlczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXNvbHZlczogVGhlIHNlcnZlciB3aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSBsb2dpY2FsIHJlZmVyZW5jZXMgdG8gbGl0ZXJhbCByZWZlcmVuY2VzIC0gaS5lLiBjb252ZXJ0aW5nIFJlZmVyZW5jZS5pZGVudGlmaWVyIHRvIFJlZmVyZW5jZS5yZWZlcmVuY2UgKGlmIHJlc29sdXRpb24gZmFpbHMsIHRoZSBzZXJ2ZXIgbWF5IHN0aWxsIGFjY2VwdCByZXNvdXJjZXM7IHNlZSBsb2dpY2FsKS5cclxuICAgKi9cclxuICBSZXNvbHZlc1JlZmVyZW5jZXM6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIHNldCBvZiBmbGFncyB0aGF0IGRlZmluZXMgaG93IHJlZmVyZW5jZXMgYXJlIHN1cHBvcnRlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBSZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ3M6UmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGVuZm9yY2VkOiBUaGUgc2VydmVyIGVuZm9yY2VzIHRoYXQgcmVmZXJlbmNlcyBoYXZlIGludGVncml0eSAtIGUuZy4gaXQgZW5zdXJlcyB0aGF0IHJlZmVyZW5jZXMgY2FuIGFsd2F5cyBiZSByZXNvbHZlZC4gVGhpcyBpcyB0eXBpY2FsbHkgdGhlIGNhc2UgZm9yIGNsaW5pY2FsIHJlY29yZCBzeXN0ZW1zLCBidXQgb2Z0ZW4gbm90IHRoZSBjYXNlIGZvciBtaWRkbGV3YXJlL3Byb3h5IHN5c3RlbXMuXHJcbiAgICovXHJcbiAgUmVmZXJlbmNlSW50ZWdyaXR5RW5mb3JjZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVmZXJlbmNlIEludGVncml0eSBFbmZvcmNlZFwiLFxyXG4gICAgY29kZTogXCJlbmZvcmNlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVmZXJlbmNlLWhhbmRsaW5nLXBvbGljeVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbGl0ZXJhbDogVGhlIHNlcnZlciBzdXBwb3J0cyBhbmQgcG9wdWxhdGVzIExpdGVyYWwgcmVmZXJlbmNlcyAoaS5lLiB1c2luZyBSZWZlcmVuY2UucmVmZXJlbmNlKSB3aGVyZSB0aGV5IGFyZSBrbm93biAodGhpcyBjb2RlIGRvZXMgbm90IGd1YXJhbnRlZSB0aGF0IGFsbCByZWZlcmVuY2VzIGFyZSBsaXRlcmFsOyBzZWUgJ2VuZm9yY2VkJykuXHJcbiAgICovXHJcbiAgTGl0ZXJhbFJlZmVyZW5jZXM6IHtcclxuICAgIGRpc3BsYXk6IFwiTGl0ZXJhbCBSZWZlcmVuY2VzXCIsXHJcbiAgICBjb2RlOiBcImxpdGVyYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVyZW5jZS1oYW5kbGluZy1wb2xpY3lcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxvY2FsOiBUaGUgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgcmVmZXJlbmNlcyB0aGF0IHBvaW50IHRvIG90aGVyIHNlcnZlcnMuXHJcbiAgICovXHJcbiAgTG9jYWxSZWZlcmVuY2VzT25seToge1xyXG4gICAgZGlzcGxheTogXCJMb2NhbCBSZWZlcmVuY2VzIE9ubHlcIixcclxuICAgIGNvZGU6IFwibG9jYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVyZW5jZS1oYW5kbGluZy1wb2xpY3lcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxvZ2ljYWw6IFRoZSBzZXJ2ZXIgYWxsb3dzIGxvZ2ljYWwgcmVmZXJlbmNlcyAoaS5lLiB1c2luZyBSZWZlcmVuY2UuaWRlbnRpZmllcikuXHJcbiAgICovXHJcbiAgTG9naWNhbFJlZmVyZW5jZXM6IHtcclxuICAgIGRpc3BsYXk6IFwiTG9naWNhbCBSZWZlcmVuY2VzXCIsXHJcbiAgICBjb2RlOiBcImxvZ2ljYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVyZW5jZS1oYW5kbGluZy1wb2xpY3lcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHJlc29sdmVzOiBUaGUgc2VydmVyIHdpbGwgYXR0ZW1wdCB0byByZXNvbHZlIGxvZ2ljYWwgcmVmZXJlbmNlcyB0byBsaXRlcmFsIHJlZmVyZW5jZXMgLSBpLmUuIGNvbnZlcnRpbmcgUmVmZXJlbmNlLmlkZW50aWZpZXIgdG8gUmVmZXJlbmNlLnJlZmVyZW5jZSAoaWYgcmVzb2x1dGlvbiBmYWlscywgdGhlIHNlcnZlciBtYXkgc3RpbGwgYWNjZXB0IHJlc291cmNlczsgc2VlIGxvZ2ljYWwpLlxyXG4gICAqL1xyXG4gIFJlc29sdmVzUmVmZXJlbmNlczoge1xyXG4gICAgZGlzcGxheTogXCJSZXNvbHZlcyBSZWZlcmVuY2VzXCIsXHJcbiAgICBjb2RlOiBcInJlc29sdmVzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19