// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/reference-handling-policy|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A set of flags that defines how references are supported.
 */
export const ReferenceHandlingPolicyCodings = {
    /**
     * enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
     */
    ReferenceIntegrityEnforced: new Coding({
        display: "Reference Integrity Enforced",
        code: "enforced",
        system: "http://hl7.org/fhir/reference-handling-policy",
    }),
    /**
     * literal: The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
     */
    LiteralReferences: new Coding({
        display: "Literal References",
        code: "literal",
        system: "http://hl7.org/fhir/reference-handling-policy",
    }),
    /**
     * local: The server does not support references that point to other servers.
     */
    LocalReferencesOnly: new Coding({
        display: "Local References Only",
        code: "local",
        system: "http://hl7.org/fhir/reference-handling-policy",
    }),
    /**
     * logical: The server allows logical references (i.e. using Reference.identifier).
     */
    LogicalReferences: new Coding({
        display: "Logical References",
        code: "logical",
        system: "http://hl7.org/fhir/reference-handling-policy",
    }),
    /**
     * resolves: The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
     */
    ResolvesReferences: new Coding({
        display: "Resolves References",
        code: "resolves",
        system: "http://hl7.org/fhir/reference-handling-policy",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBRTlFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHO0lBQzVDOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckMsT0FBTyxFQUFFLDhCQUE4QjtRQUN2QyxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILGlCQUFpQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILG1CQUFtQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzlCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILGlCQUFpQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILGtCQUFrQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzdCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5fDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBBIHNldCBvZiBmbGFncyB0aGF0IGRlZmluZXMgaG93IHJlZmVyZW5jZXMgYXJlIHN1cHBvcnRlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBSZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogZW5mb3JjZWQ6IFRoZSBzZXJ2ZXIgZW5mb3JjZXMgdGhhdCByZWZlcmVuY2VzIGhhdmUgaW50ZWdyaXR5IC0gZS5nLiBpdCBlbnN1cmVzIHRoYXQgcmVmZXJlbmNlcyBjYW4gYWx3YXlzIGJlIHJlc29sdmVkLiBUaGlzIGlzIHR5cGljYWxseSB0aGUgY2FzZSBmb3IgY2xpbmljYWwgcmVjb3JkIHN5c3RlbXMsIGJ1dCBvZnRlbiBub3QgdGhlIGNhc2UgZm9yIG1pZGRsZXdhcmUvcHJveHkgc3lzdGVtcy5cclxuICAgKi9cclxuICBSZWZlcmVuY2VJbnRlZ3JpdHlFbmZvcmNlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlZmVyZW5jZSBJbnRlZ3JpdHkgRW5mb3JjZWRcIixcclxuICAgIGNvZGU6IFwiZW5mb3JjZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlZmVyZW5jZS1oYW5kbGluZy1wb2xpY3lcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBsaXRlcmFsOiBUaGUgc2VydmVyIHN1cHBvcnRzIGFuZCBwb3B1bGF0ZXMgTGl0ZXJhbCByZWZlcmVuY2VzIChpLmUuIHVzaW5nIFJlZmVyZW5jZS5yZWZlcmVuY2UpIHdoZXJlIHRoZXkgYXJlIGtub3duICh0aGlzIGNvZGUgZG9lcyBub3QgZ3VhcmFudGVlIHRoYXQgYWxsIHJlZmVyZW5jZXMgYXJlIGxpdGVyYWw7IHNlZSAnZW5mb3JjZWQnKS5cclxuICAgKi9cclxuICBMaXRlcmFsUmVmZXJlbmNlczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxpdGVyYWwgUmVmZXJlbmNlc1wiLFxyXG4gICAgY29kZTogXCJsaXRlcmFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbG9jYWw6IFRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCByZWZlcmVuY2VzIHRoYXQgcG9pbnQgdG8gb3RoZXIgc2VydmVycy5cclxuICAgKi9cclxuICBMb2NhbFJlZmVyZW5jZXNPbmx5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTG9jYWwgUmVmZXJlbmNlcyBPbmx5XCIsXHJcbiAgICBjb2RlOiBcImxvY2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbG9naWNhbDogVGhlIHNlcnZlciBhbGxvd3MgbG9naWNhbCByZWZlcmVuY2VzIChpLmUuIHVzaW5nIFJlZmVyZW5jZS5pZGVudGlmaWVyKS5cclxuICAgKi9cclxuICBMb2dpY2FsUmVmZXJlbmNlczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxvZ2ljYWwgUmVmZXJlbmNlc1wiLFxyXG4gICAgY29kZTogXCJsb2dpY2FsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZWZlcmVuY2UtaGFuZGxpbmctcG9saWN5XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcmVzb2x2ZXM6IFRoZSBzZXJ2ZXIgd2lsbCBhdHRlbXB0IHRvIHJlc29sdmUgbG9naWNhbCByZWZlcmVuY2VzIHRvIGxpdGVyYWwgcmVmZXJlbmNlcyAtIGkuZS4gY29udmVydGluZyBSZWZlcmVuY2UuaWRlbnRpZmllciB0byBSZWZlcmVuY2UucmVmZXJlbmNlIChpZiByZXNvbHV0aW9uIGZhaWxzLCB0aGUgc2VydmVyIG1heSBzdGlsbCBhY2NlcHQgcmVzb3VyY2VzOyBzZWUgbG9naWNhbCkuXHJcbiAgICovXHJcbiAgUmVzb2x2ZXNSZWZlcmVuY2VzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmVzb2x2ZXMgUmVmZXJlbmNlc1wiLFxyXG4gICAgY29kZTogXCJyZXNvbHZlc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVmZXJlbmNlLWhhbmRsaW5nLXBvbGljeVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEEgc2V0IG9mIGZsYWdzIHRoYXQgZGVmaW5lcyBob3cgcmVmZXJlbmNlcyBhcmUgc3VwcG9ydGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RpbmdUeXBlID0gdHlwZW9mIFJlZmVyZW5jZUhhbmRsaW5nUG9saWN5Q29kaW5ncztcclxuIl19