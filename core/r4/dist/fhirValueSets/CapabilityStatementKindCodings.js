// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/capability-statement-kind|4.0.1
/**
 * How a capability statement is intended to be used.
 */
export const CapabilityStatementKindCodings = {
    /**
     * capability: The CapabilityStatement instance represents the capabilities of a system or piece of software, independent of a particular installation.
     */
    Capability: {
        display: "Capability",
        code: "capability",
        system: "http://hl7.org/fhir/capability-statement-kind",
    },
    /**
     * instance: The CapabilityStatement instance represents the present capabilities of a specific system instance.  This is the kind returned by /metadata for a FHIR server end-point.
     */
    Instance: {
        display: "Instance",
        code: "instance",
        system: "http://hl7.org/fhir/capability-statement-kind",
    },
    /**
     * requirements: The CapabilityStatement instance represents a set of requirements for other systems to meet; e.g. as part of an implementation guide or 'request for proposal'.
     */
    Requirements: {
        display: "Requirements",
        code: "requirements",
        system: "http://hl7.org/fhir/capability-statement-kind",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9DYXBhYmlsaXR5U3RhdGVtZW50S2luZENvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBc0I5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NhcGFiaWxpdHktc3RhdGVtZW50LWtpbmR8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBIb3cgYSBjYXBhYmlsaXR5IHN0YXRlbWVudCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhcGFiaWxpdHk6IFRoZSBDYXBhYmlsaXR5U3RhdGVtZW50IGluc3RhbmNlIHJlcHJlc2VudHMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIHN5c3RlbSBvciBwaWVjZSBvZiBzb2Z0d2FyZSwgaW5kZXBlbmRlbnQgb2YgYSBwYXJ0aWN1bGFyIGluc3RhbGxhdGlvbi5cclxuICAgKi9cclxuICBDYXBhYmlsaXR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlOiBUaGUgQ2FwYWJpbGl0eVN0YXRlbWVudCBpbnN0YW5jZSByZXByZXNlbnRzIHRoZSBwcmVzZW50IGNhcGFiaWxpdGllcyBvZiBhIHNwZWNpZmljIHN5c3RlbSBpbnN0YW5jZS4gIFRoaXMgaXMgdGhlIGtpbmQgcmV0dXJuZWQgYnkgL21ldGFkYXRhIGZvciBhIEZISVIgc2VydmVyIGVuZC1wb2ludC5cclxuICAgKi9cclxuICBJbnN0YW5jZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXF1aXJlbWVudHM6IFRoZSBDYXBhYmlsaXR5U3RhdGVtZW50IGluc3RhbmNlIHJlcHJlc2VudHMgYSBzZXQgb2YgcmVxdWlyZW1lbnRzIGZvciBvdGhlciBzeXN0ZW1zIHRvIG1lZXQ7IGUuZy4gYXMgcGFydCBvZiBhbiBpbXBsZW1lbnRhdGlvbiBndWlkZSBvciAncmVxdWVzdCBmb3IgcHJvcG9zYWwnLlxyXG4gICAqL1xyXG4gIFJlcXVpcmVtZW50czogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEhvdyBhIGNhcGFiaWxpdHkgc3RhdGVtZW50IGlzIGludGVuZGVkIHRvIGJlIHVzZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RpbmdzOkNhcGFiaWxpdHlTdGF0ZW1lbnRLaW5kQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYXBhYmlsaXR5OiBUaGUgQ2FwYWJpbGl0eVN0YXRlbWVudCBpbnN0YW5jZSByZXByZXNlbnRzIHRoZSBjYXBhYmlsaXRpZXMgb2YgYSBzeXN0ZW0gb3IgcGllY2Ugb2Ygc29mdHdhcmUsIGluZGVwZW5kZW50IG9mIGEgcGFydGljdWxhciBpbnN0YWxsYXRpb24uXHJcbiAgICovXHJcbiAgQ2FwYWJpbGl0eToge1xyXG4gICAgZGlzcGxheTogXCJDYXBhYmlsaXR5XCIsXHJcbiAgICBjb2RlOiBcImNhcGFiaWxpdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NhcGFiaWxpdHktc3RhdGVtZW50LWtpbmRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlOiBUaGUgQ2FwYWJpbGl0eVN0YXRlbWVudCBpbnN0YW5jZSByZXByZXNlbnRzIHRoZSBwcmVzZW50IGNhcGFiaWxpdGllcyBvZiBhIHNwZWNpZmljIHN5c3RlbSBpbnN0YW5jZS4gIFRoaXMgaXMgdGhlIGtpbmQgcmV0dXJuZWQgYnkgL21ldGFkYXRhIGZvciBhIEZISVIgc2VydmVyIGVuZC1wb2ludC5cclxuICAgKi9cclxuICBJbnN0YW5jZToge1xyXG4gICAgZGlzcGxheTogXCJJbnN0YW5jZVwiLFxyXG4gICAgY29kZTogXCJpbnN0YW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FwYWJpbGl0eS1zdGF0ZW1lbnQta2luZFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVxdWlyZW1lbnRzOiBUaGUgQ2FwYWJpbGl0eVN0YXRlbWVudCBpbnN0YW5jZSByZXByZXNlbnRzIGEgc2V0IG9mIHJlcXVpcmVtZW50cyBmb3Igb3RoZXIgc3lzdGVtcyB0byBtZWV0OyBlLmcuIGFzIHBhcnQgb2YgYW4gaW1wbGVtZW50YXRpb24gZ3VpZGUgb3IgJ3JlcXVlc3QgZm9yIHByb3Bvc2FsJy5cclxuICAgKi9cclxuICBSZXF1aXJlbWVudHM6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVxdWlyZW1lbnRzXCIsXHJcbiAgICBjb2RlOiBcInJlcXVpcmVtZW50c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY2FwYWJpbGl0eS1zdGF0ZW1lbnQta2luZFwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==