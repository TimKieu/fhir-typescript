// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/risk-estimate-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Whether the risk estimate is dichotomous, continuous or qualitative and the specific type of risk estimate (eg proportion or median).
 */
export const RiskEstimateTypeCodings = {
    /**
     * count: descriptive measure reported as total number of items.
     */
    Count: new Coding({
        display: "count",
        code: "count",
        system: "http://terminology.hl7.org/CodeSystem/risk-estimate-type",
    }),
    /**
     * derivedProportion: A special use case where the proportion is derived from a formula rather than derived from summary evidence.
     */
    DerivedProportion: new Coding({
        display: "derivedProportion",
        code: "derivedProportion",
        system: "http://terminology.hl7.org/CodeSystem/risk-estimate-type",
    }),
    /**
     * descriptive: descriptive measure reported as narrative.
     */
    Descriptive: new Coding({
        display: "descriptive",
        code: "descriptive",
        system: "http://terminology.hl7.org/CodeSystem/risk-estimate-type",
    }),
    /**
     * mean: continuous numerical measure reported as an average.
     */
    Mean: new Coding({
        display: "mean",
        code: "mean",
        system: "http://terminology.hl7.org/CodeSystem/risk-estimate-type",
    }),
    /**
     * median: continuous numerical measure reported as the middle of the range.
     */
    Median: new Coding({
        display: "median",
        code: "median",
        system: "http://terminology.hl7.org/CodeSystem/risk-estimate-type",
    }),
    /**
     * proportion: dichotomous measure (present or absent) reported as a ratio compared to the denominator of 1 (A percentage is a proportion with denominator of 100).
     */
    Proportion: new Coding({
        display: "proportion",
        code: "proportion",
        system: "http://terminology.hl7.org/CodeSystem/risk-estimate-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmlza0VzdGltYXRlVHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Jpc2tFc3RpbWF0ZVR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHVFQUF1RTtBQUV2RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNyQzs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDNUIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2YsT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yaXNrLWVzdGltYXRlLXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFdoZXRoZXIgdGhlIHJpc2sgZXN0aW1hdGUgaXMgZGljaG90b21vdXMsIGNvbnRpbnVvdXMgb3IgcXVhbGl0YXRpdmUgYW5kIHRoZSBzcGVjaWZpYyB0eXBlIG9mIHJpc2sgZXN0aW1hdGUgKGVnIHByb3BvcnRpb24gb3IgbWVkaWFuKS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBSaXNrRXN0aW1hdGVUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBjb3VudDogZGVzY3JpcHRpdmUgbWVhc3VyZSByZXBvcnRlZCBhcyB0b3RhbCBudW1iZXIgb2YgaXRlbXMuXHJcbiAgICovXHJcbiAgQ291bnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJjb3VudFwiLFxyXG4gICAgY29kZTogXCJjb3VudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmlzay1lc3RpbWF0ZS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZGVyaXZlZFByb3BvcnRpb246IEEgc3BlY2lhbCB1c2UgY2FzZSB3aGVyZSB0aGUgcHJvcG9ydGlvbiBpcyBkZXJpdmVkIGZyb20gYSBmb3JtdWxhIHJhdGhlciB0aGFuIGRlcml2ZWQgZnJvbSBzdW1tYXJ5IGV2aWRlbmNlLlxyXG4gICAqL1xyXG4gIERlcml2ZWRQcm9wb3J0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiZGVyaXZlZFByb3BvcnRpb25cIixcclxuICAgIGNvZGU6IFwiZGVyaXZlZFByb3BvcnRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Jpc2stZXN0aW1hdGUtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGRlc2NyaXB0aXZlOiBkZXNjcmlwdGl2ZSBtZWFzdXJlIHJlcG9ydGVkIGFzIG5hcnJhdGl2ZS5cclxuICAgKi9cclxuICBEZXNjcmlwdGl2ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImRlc2NyaXB0aXZlXCIsXHJcbiAgICBjb2RlOiBcImRlc2NyaXB0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yaXNrLWVzdGltYXRlLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBtZWFuOiBjb250aW51b3VzIG51bWVyaWNhbCBtZWFzdXJlIHJlcG9ydGVkIGFzIGFuIGF2ZXJhZ2UuXHJcbiAgICovXHJcbiAgTWVhbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIm1lYW5cIixcclxuICAgIGNvZGU6IFwibWVhblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmlzay1lc3RpbWF0ZS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbWVkaWFuOiBjb250aW51b3VzIG51bWVyaWNhbCBtZWFzdXJlIHJlcG9ydGVkIGFzIHRoZSBtaWRkbGUgb2YgdGhlIHJhbmdlLlxyXG4gICAqL1xyXG4gIE1lZGlhbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIm1lZGlhblwiLFxyXG4gICAgY29kZTogXCJtZWRpYW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Jpc2stZXN0aW1hdGUtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHByb3BvcnRpb246IGRpY2hvdG9tb3VzIG1lYXN1cmUgKHByZXNlbnQgb3IgYWJzZW50KSByZXBvcnRlZCBhcyBhIHJhdGlvIGNvbXBhcmVkIHRvIHRoZSBkZW5vbWluYXRvciBvZiAxIChBIHBlcmNlbnRhZ2UgaXMgYSBwcm9wb3J0aW9uIHdpdGggZGVub21pbmF0b3Igb2YgMTAwKS5cclxuICAgKi9cclxuICBQcm9wb3J0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwicHJvcG9ydGlvblwiLFxyXG4gICAgY29kZTogXCJwcm9wb3J0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yaXNrLWVzdGltYXRlLXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBXaGV0aGVyIHRoZSByaXNrIGVzdGltYXRlIGlzIGRpY2hvdG9tb3VzLCBjb250aW51b3VzIG9yIHF1YWxpdGF0aXZlIGFuZCB0aGUgc3BlY2lmaWMgdHlwZSBvZiByaXNrIGVzdGltYXRlIChlZyBwcm9wb3J0aW9uIG9yIG1lZGlhbikuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSaXNrRXN0aW1hdGVUeXBlQ29kaW5nVHlwZSA9IHR5cGVvZiBSaXNrRXN0aW1hdGVUeXBlQ29kaW5ncztcclxuIl19