// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-transform|4.0.1
/**
 * How data is copied/created.
 */
export const MapTransformCodes = {
    /**
     * append: append(source...) - source is element or string.
     */
    Append: "append",
    /**
     * c: Create a Coding. Parameters = (system. Code[, display]).
     */
    C: "c",
    /**
     * cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.
     */
    Cast: "cast",
    /**
     * cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).
     */
    Cc: "cc",
    /**
     * copy: copy(source).
     */
    Copy: "copy",
    /**
     * cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.
     */
    Cp: "cp",
    /**
     * create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.
     */
    Create: "create",
    /**
     * dateOp: Perform a date operation. *Parameters to be documented*.
     */
    DateOp: "dateOp",
    /**
     * escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.
     */
    Escape: "escape",
    /**
     * evaluate: Execute the supplied FHIRPath expression and use the value returned by that.
     */
    Evaluate: "evaluate",
    /**
     * id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.
     */
    Id: "id",
    /**
     * pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.
     */
    Pointer: "pointer",
    /**
     * qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.
     */
    Qty: "qty",
    /**
     * reference: reference(source : object) - return a string that references the provided tree properly.
     */
    Reference: "reference",
    /**
     * translate: translate(source, uri_of_map) - use the translate operation.
     */
    Translate: "translate",
    /**
     * truncate: truncate(source, length) - source must be stringy type.
     */
    Truncate: "truncate",
    /**
     * uuid: Generate a random UUID (in lowercase). No Parameters.
     */
    Uuid: "uuid",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwVHJhbnNmb3JtQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01hcFRyYW5zZm9ybUNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGtFQUFrRTtBQUVsRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9COztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxDQUFDLEVBQUUsR0FBRztJQUNOOztPQUVHO0lBQ0gsSUFBSSxFQUFFLE1BQU07SUFDWjs7T0FFRztJQUNILEVBQUUsRUFBRSxJQUFJO0lBQ1I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7SUFDUjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxNQUFNLEVBQUUsUUFBUTtJQUNoQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsRUFBRSxFQUFFLElBQUk7SUFDUjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsR0FBRyxFQUFFLEtBQUs7SUFDVjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tYXAtdHJhbnNmb3JtfDQuMC4xXHJcblxyXG4vKipcclxuICogSG93IGRhdGEgaXMgY29waWVkL2NyZWF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWFwVHJhbnNmb3JtQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogYXBwZW5kOiBhcHBlbmQoc291cmNlLi4uKSAtIHNvdXJjZSBpcyBlbGVtZW50IG9yIHN0cmluZy5cclxuICAgKi9cclxuICBBcHBlbmQ6IFwiYXBwZW5kXCIsXHJcbiAgLyoqXHJcbiAgICogYzogQ3JlYXRlIGEgQ29kaW5nLiBQYXJhbWV0ZXJzID0gKHN5c3RlbS4gQ29kZVssIGRpc3BsYXldKS5cclxuICAgKi9cclxuICBDOiBcImNcIixcclxuICAvKipcclxuICAgKiBjYXN0OiBjYXN0KHNvdXJjZSwgdHlwZT8pIC0gY2FzZSBzb3VyY2UgZnJvbSBvbmUgdHlwZSB0byBhbm90aGVyLiB0YXJnZXQgdHlwZSBjYW4gYmUgbGVmdCBhcyBpbXBsaWNpdCBpZiB0aGVyZSBpcyBvbmUgYW5kIG9ubHkgb25lIHRhcmdldCB0eXBlIGtub3duLlxyXG4gICAqL1xyXG4gIENhc3Q6IFwiY2FzdFwiLFxyXG4gIC8qKlxyXG4gICAqIGNjOiBDcmVhdGUgYSBDb2RlYWJsZUNvbmNlcHQuIFBhcmFtZXRlcnMgPSAodGV4dCkgb3IgKHN5c3RlbS4gQ29kZVssIGRpc3BsYXldKS5cclxuICAgKi9cclxuICBDYzogXCJjY1wiLFxyXG4gIC8qKlxyXG4gICAqIGNvcHk6IGNvcHkoc291cmNlKS5cclxuICAgKi9cclxuICBDb3B5OiBcImNvcHlcIixcclxuICAvKipcclxuICAgKiBjcDogQ3JlYXRlIGEgY29udGFjdCBkZXRhaWxzLiBQYXJhbWV0ZXJzID0gKHZhbHVlKSBvciAoc3lzdGVtLCB2YWx1ZSkuIElmIG5vIHN5c3RlbSBpcyBwcm92aWRlZCwgdGhlIHN5c3RlbSBzaG91bGQgYmUgaW5mZXJyZWQgZnJvbSB0aGUgY29udGVudCBvZiB0aGUgdmFsdWUuXHJcbiAgICovXHJcbiAgQ3A6IFwiY3BcIixcclxuICAvKipcclxuICAgKiBjcmVhdGU6IGNyZWF0ZSh0eXBlIDogc3RyaW5nKSAtIHR5cGUgaXMgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGFwcGxpY2F0aW9uIG9uIHRoZSBzdGFuZGFyZCBBUEksIGFuZCBtdXN0IGJlIGtub3duIGJ5IGl0LlxyXG4gICAqL1xyXG4gIENyZWF0ZTogXCJjcmVhdGVcIixcclxuICAvKipcclxuICAgKiBkYXRlT3A6IFBlcmZvcm0gYSBkYXRlIG9wZXJhdGlvbi4gKlBhcmFtZXRlcnMgdG8gYmUgZG9jdW1lbnRlZCouXHJcbiAgICovXHJcbiAgRGF0ZU9wOiBcImRhdGVPcFwiLFxyXG4gIC8qKlxyXG4gICAqIGVzY2FwZTogZXNjYXBlKHNvdXJjZSwgZm10MSwgZm10MikgLSBjaGFuZ2Ugc291cmNlIGZyb20gb25lIGtpbmQgb2YgZXNjYXBpbmcgdG8gYW5vdGhlciAocGxhaW4sIGphdmEsIHhtbCwganNvbikuIG5vdGUgdGhhdCB0aGlzIGlzIGZvciB3aGVuIHRoZSBzdHJpbmcgaXRzZWxmIGlzIGVzY2FwZWQuXHJcbiAgICovXHJcbiAgRXNjYXBlOiBcImVzY2FwZVwiLFxyXG4gIC8qKlxyXG4gICAqIGV2YWx1YXRlOiBFeGVjdXRlIHRoZSBzdXBwbGllZCBGSElSUGF0aCBleHByZXNzaW9uIGFuZCB1c2UgdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoYXQuXHJcbiAgICovXHJcbiAgRXZhbHVhdGU6IFwiZXZhbHVhdGVcIixcclxuICAvKipcclxuICAgKiBpZDogQ3JlYXRlIGFuIGlkZW50aWZpZXIuIFBhcmFtZXRlcnMgPSAoc3lzdGVtLCB2YWx1ZVssIHR5cGVdKSB3aGVyZSB0eXBlIGlzIGEgY29kZSBmcm9tIHRoZSBpZGVudGlmaWVyIHR5cGUgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIElkOiBcImlkXCIsXHJcbiAgLyoqXHJcbiAgICogcG9pbnRlcjogUmV0dXJuIHRoZSBhcHByb3ByaWF0ZSBzdHJpbmcgdG8gcHV0IGluIGEgcmVmZXJlbmNlIHRoYXQgcmVmZXJzIHRvIHRoZSByZXNvdXJjZSBwcm92aWRlZCBhcyBhIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBQb2ludGVyOiBcInBvaW50ZXJcIixcclxuICAvKipcclxuICAgKiBxdHk6IENyZWF0ZSBhIHF1YW50aXR5LiBQYXJhbWV0ZXJzID0gKHRleHQpIG9yICh2YWx1ZSwgdW5pdCwgW3N5c3RlbSwgY29kZV0pIHdoZXJlIHRleHQgaXMgdGhlIG5hdHVyYWwgcmVwcmVzZW50YXRpb24gZS5nLiBbY29tcGFyYXRvcl12YWx1ZVtzcGFjZV11bml0LlxyXG4gICAqL1xyXG4gIFF0eTogXCJxdHlcIixcclxuICAvKipcclxuICAgKiByZWZlcmVuY2U6IHJlZmVyZW5jZShzb3VyY2UgOiBvYmplY3QpIC0gcmV0dXJuIGEgc3RyaW5nIHRoYXQgcmVmZXJlbmNlcyB0aGUgcHJvdmlkZWQgdHJlZSBwcm9wZXJseS5cclxuICAgKi9cclxuICBSZWZlcmVuY2U6IFwicmVmZXJlbmNlXCIsXHJcbiAgLyoqXHJcbiAgICogdHJhbnNsYXRlOiB0cmFuc2xhdGUoc291cmNlLCB1cmlfb2ZfbWFwKSAtIHVzZSB0aGUgdHJhbnNsYXRlIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICBUcmFuc2xhdGU6IFwidHJhbnNsYXRlXCIsXHJcbiAgLyoqXHJcbiAgICogdHJ1bmNhdGU6IHRydW5jYXRlKHNvdXJjZSwgbGVuZ3RoKSAtIHNvdXJjZSBtdXN0IGJlIHN0cmluZ3kgdHlwZS5cclxuICAgKi9cclxuICBUcnVuY2F0ZTogXCJ0cnVuY2F0ZVwiLFxyXG4gIC8qKlxyXG4gICAqIHV1aWQ6IEdlbmVyYXRlIGEgcmFuZG9tIFVVSUQgKGluIGxvd2VyY2FzZSkuIE5vIFBhcmFtZXRlcnMuXHJcbiAgICovXHJcbiAgVXVpZDogXCJ1dWlkXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogSG93IGRhdGEgaXMgY29waWVkL2NyZWF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNYXBUcmFuc2Zvcm1Db2RlVHlwZSA9IHR5cGVvZiBNYXBUcmFuc2Zvcm1Db2Rlc1trZXlvZiB0eXBlb2YgTWFwVHJhbnNmb3JtQ29kZXNdO1xyXG4iXX0=