// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/med-admin-perform-function|4.0.1
/**
 * MedicationAdministration Performer Function Codes
 */
export const MedAdminPerformFunctionCodings = {
    /**
     * performer: A person, non-person living subject, organization or device that who actually and principally carries out the action
     */
    Performer: {
        display: "Performer",
        code: "performer",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    },
    /**
     * verifier: A person who verifies the correctness and appropriateness of the service (plan, order, event, etc.) and hence takes on accountability.
     */
    Verifier: {
        display: "Verifier",
        code: "verifier",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    },
    /**
     * witness: A person witnessing the action happening without doing anything. A witness is not necessarily aware, much less approves of anything stated in the service event. Example for a witness is students watching an operation or an advanced directive witness.
     */
    Witness: {
        display: "Witness",
        code: "witness",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkQWRtaW5QZXJmb3JtRnVuY3Rpb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWRBZG1pblBlcmZvcm1GdW5jdGlvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBc0IvRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFxQztJQUM5RTs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrRUFBa0U7S0FDM0U7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxrRUFBa0U7S0FDM0U7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtFQUFrRTtLQUMzRTtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVkLWFkbWluLXBlcmZvcm0tZnVuY3Rpb258NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24gUGVyZm9ybWVyIEZ1bmN0aW9uIENvZGVzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWRBZG1pblBlcmZvcm1GdW5jdGlvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogcGVyZm9ybWVyOiBBIHBlcnNvbiwgbm9uLXBlcnNvbiBsaXZpbmcgc3ViamVjdCwgb3JnYW5pemF0aW9uIG9yIGRldmljZSB0aGF0IHdobyBhY3R1YWxseSBhbmQgcHJpbmNpcGFsbHkgY2FycmllcyBvdXQgdGhlIGFjdGlvblxyXG4gICAqL1xyXG4gIFBlcmZvcm1lcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB2ZXJpZmllcjogQSBwZXJzb24gd2hvIHZlcmlmaWVzIHRoZSBjb3JyZWN0bmVzcyBhbmQgYXBwcm9wcmlhdGVuZXNzIG9mIHRoZSBzZXJ2aWNlIChwbGFuLCBvcmRlciwgZXZlbnQsIGV0Yy4pIGFuZCBoZW5jZSB0YWtlcyBvbiBhY2NvdW50YWJpbGl0eS5cclxuICAgKi9cclxuICBWZXJpZmllcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3aXRuZXNzOiBBIHBlcnNvbiB3aXRuZXNzaW5nIHRoZSBhY3Rpb24gaGFwcGVuaW5nIHdpdGhvdXQgZG9pbmcgYW55dGhpbmcuIEEgd2l0bmVzcyBpcyBub3QgbmVjZXNzYXJpbHkgYXdhcmUsIG11Y2ggbGVzcyBhcHByb3ZlcyBvZiBhbnl0aGluZyBzdGF0ZWQgaW4gdGhlIHNlcnZpY2UgZXZlbnQuIEV4YW1wbGUgZm9yIGEgd2l0bmVzcyBpcyBzdHVkZW50cyB3YXRjaGluZyBhbiBvcGVyYXRpb24gb3IgYW4gYWR2YW5jZWQgZGlyZWN0aXZlIHdpdG5lc3MuXHJcbiAgICovXHJcbiAgV2l0bmVzczogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25BZG1pbmlzdHJhdGlvbiBQZXJmb3JtZXIgRnVuY3Rpb24gQ29kZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWRBZG1pblBlcmZvcm1GdW5jdGlvbkNvZGluZ3M6TWVkQWRtaW5QZXJmb3JtRnVuY3Rpb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIHBlcmZvcm1lcjogQSBwZXJzb24sIG5vbi1wZXJzb24gbGl2aW5nIHN1YmplY3QsIG9yZ2FuaXphdGlvbiBvciBkZXZpY2UgdGhhdCB3aG8gYWN0dWFsbHkgYW5kIHByaW5jaXBhbGx5IGNhcnJpZXMgb3V0IHRoZSBhY3Rpb25cclxuICAgKi9cclxuICBQZXJmb3JtZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiUGVyZm9ybWVyXCIsXHJcbiAgICBjb2RlOiBcInBlcmZvcm1lclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkLWFkbWluLXBlcmZvcm0tZnVuY3Rpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHZlcmlmaWVyOiBBIHBlcnNvbiB3aG8gdmVyaWZpZXMgdGhlIGNvcnJlY3RuZXNzIGFuZCBhcHByb3ByaWF0ZW5lc3Mgb2YgdGhlIHNlcnZpY2UgKHBsYW4sIG9yZGVyLCBldmVudCwgZXRjLikgYW5kIGhlbmNlIHRha2VzIG9uIGFjY291bnRhYmlsaXR5LlxyXG4gICAqL1xyXG4gIFZlcmlmaWVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIlZlcmlmaWVyXCIsXHJcbiAgICBjb2RlOiBcInZlcmlmaWVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWQtYWRtaW4tcGVyZm9ybS1mdW5jdGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd2l0bmVzczogQSBwZXJzb24gd2l0bmVzc2luZyB0aGUgYWN0aW9uIGhhcHBlbmluZyB3aXRob3V0IGRvaW5nIGFueXRoaW5nLiBBIHdpdG5lc3MgaXMgbm90IG5lY2Vzc2FyaWx5IGF3YXJlLCBtdWNoIGxlc3MgYXBwcm92ZXMgb2YgYW55dGhpbmcgc3RhdGVkIGluIHRoZSBzZXJ2aWNlIGV2ZW50LiBFeGFtcGxlIGZvciBhIHdpdG5lc3MgaXMgc3R1ZGVudHMgd2F0Y2hpbmcgYW4gb3BlcmF0aW9uIG9yIGFuIGFkdmFuY2VkIGRpcmVjdGl2ZSB3aXRuZXNzLlxyXG4gICAqL1xyXG4gIFdpdG5lc3M6IHtcclxuICAgIGRpc3BsYXk6IFwiV2l0bmVzc1wiLFxyXG4gICAgY29kZTogXCJ3aXRuZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWQtYWRtaW4tcGVyZm9ybS1mdW5jdGlvblwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==