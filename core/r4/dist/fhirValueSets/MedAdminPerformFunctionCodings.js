// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/med-admin-perform-function|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * MedicationAdministration Performer Function Codes
 */
export const MedAdminPerformFunctionCodings = {
    /**
     * performer: A person, non-person living subject, organization or device that who actually and principally carries out the action
     */
    Performer: new Coding({
        display: "Performer",
        code: "performer",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    }),
    /**
     * verifier: A person who verifies the correctness and appropriateness of the service (plan, order, event, etc.) and hence takes on accountability.
     */
    Verifier: new Coding({
        display: "Verifier",
        code: "verifier",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    }),
    /**
     * witness: A person witnessing the action happening without doing anything. A witness is not necessarily aware, much less approves of anything stated in the service event. Example for a witness is students watching an operation or an advanced directive witness.
     */
    Witness: new Coding({
        display: "Witness",
        code: "witness",
        system: "http://terminology.hl7.org/CodeSystem/med-admin-perform-function",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkQWRtaW5QZXJmb3JtRnVuY3Rpb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWRBZG1pblBlcmZvcm1GdW5jdGlvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0VBQStFO0FBRS9FLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHO0lBQzVDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrRUFBa0U7S0FDM0UsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxrRUFBa0U7S0FDM0UsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtFQUFrRTtLQUMzRSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tZWQtYWRtaW4tcGVyZm9ybS1mdW5jdGlvbnw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uIFBlcmZvcm1lciBGdW5jdGlvbiBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lZEFkbWluUGVyZm9ybUZ1bmN0aW9uQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBwZXJmb3JtZXI6IEEgcGVyc29uLCBub24tcGVyc29uIGxpdmluZyBzdWJqZWN0LCBvcmdhbml6YXRpb24gb3IgZGV2aWNlIHRoYXQgd2hvIGFjdHVhbGx5IGFuZCBwcmluY2lwYWxseSBjYXJyaWVzIG91dCB0aGUgYWN0aW9uXHJcbiAgICovXHJcbiAgUGVyZm9ybWVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUGVyZm9ybWVyXCIsXHJcbiAgICBjb2RlOiBcInBlcmZvcm1lclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkLWFkbWluLXBlcmZvcm0tZnVuY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB2ZXJpZmllcjogQSBwZXJzb24gd2hvIHZlcmlmaWVzIHRoZSBjb3JyZWN0bmVzcyBhbmQgYXBwcm9wcmlhdGVuZXNzIG9mIHRoZSBzZXJ2aWNlIChwbGFuLCBvcmRlciwgZXZlbnQsIGV0Yy4pIGFuZCBoZW5jZSB0YWtlcyBvbiBhY2NvdW50YWJpbGl0eS5cclxuICAgKi9cclxuICBWZXJpZmllcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlZlcmlmaWVyXCIsXHJcbiAgICBjb2RlOiBcInZlcmlmaWVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWQtYWRtaW4tcGVyZm9ybS1mdW5jdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHdpdG5lc3M6IEEgcGVyc29uIHdpdG5lc3NpbmcgdGhlIGFjdGlvbiBoYXBwZW5pbmcgd2l0aG91dCBkb2luZyBhbnl0aGluZy4gQSB3aXRuZXNzIGlzIG5vdCBuZWNlc3NhcmlseSBhd2FyZSwgbXVjaCBsZXNzIGFwcHJvdmVzIG9mIGFueXRoaW5nIHN0YXRlZCBpbiB0aGUgc2VydmljZSBldmVudC4gRXhhbXBsZSBmb3IgYSB3aXRuZXNzIGlzIHN0dWRlbnRzIHdhdGNoaW5nIGFuIG9wZXJhdGlvbiBvciBhbiBhZHZhbmNlZCBkaXJlY3RpdmUgd2l0bmVzcy5cclxuICAgKi9cclxuICBXaXRuZXNzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiV2l0bmVzc1wiLFxyXG4gICAgY29kZTogXCJ3aXRuZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWQtYWRtaW4tcGVyZm9ybS1mdW5jdGlvblwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25BZG1pbmlzdHJhdGlvbiBQZXJmb3JtZXIgRnVuY3Rpb24gQ29kZXNcclxuICovXHJcbmV4cG9ydCB0eXBlIE1lZEFkbWluUGVyZm9ybUZ1bmN0aW9uQ29kaW5nVHlwZSA9IHR5cGVvZiBNZWRBZG1pblBlcmZvcm1GdW5jdGlvbkNvZGluZ3M7XHJcbiJdfQ==