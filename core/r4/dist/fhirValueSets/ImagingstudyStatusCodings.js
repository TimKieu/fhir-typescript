// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/imagingstudy-status|4.0.1
/**
 * The status of the ImagingStudy.
 */
export const ImagingstudyStatusCodings = {
    /**
     * available: At least one instance has been associated with this imaging study.
     */
    Available: {
        display: "Available",
        code: "available",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * cancelled: The imaging study is unavailable because the imaging study was not started or not completed (also sometimes called "aborted").
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * entered-in-error: The imaging study has been withdrawn following a previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * registered: The existence of the imaging study is registered, but there is nothing yet available.
     */
    Registered: {
        display: "Registered",
        code: "registered",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
    /**
     * unknown: The system does not know which of the status values currently applies for this request. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/imagingstudy-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2luZ3N0dWR5U3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvSW1hZ2luZ3N0dWR5U3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx3RUFBd0U7QUE4QnhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvaW1hZ2luZ3N0dWR5LXN0YXR1c3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBzdGF0dXMgb2YgdGhlIEltYWdpbmdTdHVkeS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltYWdpbmdzdHVkeVN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYXZhaWxhYmxlOiBBdCBsZWFzdCBvbmUgaW5zdGFuY2UgaGFzIGJlZW4gYXNzb2NpYXRlZCB3aXRoIHRoaXMgaW1hZ2luZyBzdHVkeS5cclxuICAgKi9cclxuICBBdmFpbGFibGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgaW1hZ2luZyBzdHVkeSBpcyB1bmF2YWlsYWJsZSBiZWNhdXNlIHRoZSBpbWFnaW5nIHN0dWR5IHdhcyBub3Qgc3RhcnRlZCBvciBub3QgY29tcGxldGVkIChhbHNvIHNvbWV0aW1lcyBjYWxsZWQgXCJhYm9ydGVkXCIpLlxyXG4gICAqL1xyXG4gIENhbmNlbGxlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgaW1hZ2luZyBzdHVkeSBoYXMgYmVlbiB3aXRoZHJhd24gZm9sbG93aW5nIGEgcHJldmlvdXMgZmluYWwgcmVsZWFzZS4gIFRoaXMgZWxlY3Ryb25pYyByZWNvcmQgc2hvdWxkIG5ldmVyIGhhdmUgZXhpc3RlZCwgdGhvdWdoIGl0IGlzIHBvc3NpYmxlIHRoYXQgcmVhbC13b3JsZCBkZWNpc2lvbnMgd2VyZSBiYXNlZCBvbiBpdC4gKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcImNhbmNlbGxlZFwiIHJhdGhlciB0aGFuIFwiZW50ZXJlZC1pbi1lcnJvclwiLikuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVnaXN0ZXJlZDogVGhlIGV4aXN0ZW5jZSBvZiB0aGUgaW1hZ2luZyBzdHVkeSBpcyByZWdpc3RlcmVkLCBidXQgdGhlcmUgaXMgbm90aGluZyB5ZXQgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIFJlZ2lzdGVyZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoIG9mIHRoZSBzdGF0dXMgdmFsdWVzIGN1cnJlbnRseSBhcHBsaWVzIGZvciB0aGlzIHJlcXVlc3QuIE5vdGU6IFRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3IgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBsaXN0ZWQgc3RhdHVzZXMgaXMgcHJlc3VtZWQgdG8gYXBwbHksIGl0J3MganVzdCBub3Qga25vd24gd2hpY2ggb25lLlxyXG4gICAqL1xyXG4gIFVua25vd246IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgc3RhdHVzIG9mIHRoZSBJbWFnaW5nU3R1ZHkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW1hZ2luZ3N0dWR5U3RhdHVzQ29kaW5nczpJbWFnaW5nc3R1ZHlTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGF2YWlsYWJsZTogQXQgbGVhc3Qgb25lIGluc3RhbmNlIGhhcyBiZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGltYWdpbmcgc3R1ZHkuXHJcbiAgICovXHJcbiAgQXZhaWxhYmxlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkF2YWlsYWJsZVwiLFxyXG4gICAgY29kZTogXCJhdmFpbGFibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ltYWdpbmdzdHVkeS1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIGltYWdpbmcgc3R1ZHkgaXMgdW5hdmFpbGFibGUgYmVjYXVzZSB0aGUgaW1hZ2luZyBzdHVkeSB3YXMgbm90IHN0YXJ0ZWQgb3Igbm90IGNvbXBsZXRlZCAoYWxzbyBzb21ldGltZXMgY2FsbGVkIFwiYWJvcnRlZFwiKS5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2FuY2VsbGVkXCIsXHJcbiAgICBjb2RlOiBcImNhbmNlbGxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvaW1hZ2luZ3N0dWR5LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIGltYWdpbmcgc3R1ZHkgaGFzIGJlZW4gd2l0aGRyYXduIGZvbGxvd2luZyBhIHByZXZpb3VzIGZpbmFsIHJlbGVhc2UuICBUaGlzIGVsZWN0cm9uaWMgcmVjb3JkIHNob3VsZCBuZXZlciBoYXZlIGV4aXN0ZWQsIHRob3VnaCBpdCBpcyBwb3NzaWJsZSB0aGF0IHJlYWwtd29ybGQgZGVjaXNpb25zIHdlcmUgYmFzZWQgb24gaXQuIChJZiByZWFsLXdvcmxkIGFjdGl2aXR5IGhhcyBvY2N1cnJlZCwgdGhlIHN0YXR1cyBzaG91bGQgYmUgXCJjYW5jZWxsZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvaW1hZ2luZ3N0dWR5LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVnaXN0ZXJlZDogVGhlIGV4aXN0ZW5jZSBvZiB0aGUgaW1hZ2luZyBzdHVkeSBpcyByZWdpc3RlcmVkLCBidXQgdGhlcmUgaXMgbm90aGluZyB5ZXQgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIFJlZ2lzdGVyZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVnaXN0ZXJlZFwiLFxyXG4gICAgY29kZTogXCJyZWdpc3RlcmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbWFnaW5nc3R1ZHktc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgcmVxdWVzdC4gTm90ZTogVGhpcyBjb25jZXB0IGlzIG5vdCB0byBiZSB1c2VkIGZvciBcIm90aGVyXCIgLSBvbmUgb2YgdGhlIGxpc3RlZCBzdGF0dXNlcyBpcyBwcmVzdW1lZCB0byBhcHBseSwgaXQncyBqdXN0IG5vdCBrbm93biB3aGljaCBvbmUuXHJcbiAgICovXHJcbiAgVW5rbm93bjoge1xyXG4gICAgZGlzcGxheTogXCJVbmtub3duXCIsXHJcbiAgICBjb2RlOiBcInVua25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ltYWdpbmdzdHVkeS1zdGF0dXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=