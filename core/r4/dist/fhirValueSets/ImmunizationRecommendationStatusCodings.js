// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-recommendation-status|4.0.1
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the status of the patient towards perceived immunity against a vaccine preventable disease. This value set is provided as a suggestive example.
 */
export const ImmunizationRecommendationStatusCodings = {
    /**
     * complete: The patient is fully protected and no further doses are recommended.
     */
    Complete: {
        display: "Complete",
        code: "complete",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * contraindicated: The patient is contraindicated for futher doses.
     */
    Contraindicated: {
        display: "Contraindicated",
        code: "contraindicated",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * due: The patient is due for their next vaccination.
     */
    Due: {
        display: "Due",
        code: "due",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * immune: The patient is immune to the target disease and further immunization against the disease is not likely to provide benefit.
     */
    Immune: {
        display: "Immune",
        code: "immune",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
    /**
     * overdue: The patient is considered overdue for their next vaccination.
     */
    Overdue: {
        display: "Overdue",
        code: "overdue",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25TdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUZBQXVGO0FBOEJ2Rjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUE4QztJQUNoRzs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsMEVBQTBFO0tBQ25GO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDBFQUEwRTtLQUNuRjtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsMEVBQTBFO0tBQ25GO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2ltbXVuaXphdGlvbi1yZWNvbW1lbmRhdGlvbi1zdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIHN0YXR1cyBvZiB0aGUgcGF0aWVudCB0b3dhcmRzIHBlcmNlaXZlZCBpbW11bml0eSBhZ2FpbnN0IGEgdmFjY2luZSBwcmV2ZW50YWJsZSBkaXNlYXNlLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltbXVuaXphdGlvblJlY29tbWVuZGF0aW9uU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb21wbGV0ZTogVGhlIHBhdGllbnQgaXMgZnVsbHkgcHJvdGVjdGVkIGFuZCBubyBmdXJ0aGVyIGRvc2VzIGFyZSByZWNvbW1lbmRlZC5cclxuICAgKi9cclxuICBDb21wbGV0ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb250cmFpbmRpY2F0ZWQ6IFRoZSBwYXRpZW50IGlzIGNvbnRyYWluZGljYXRlZCBmb3IgZnV0aGVyIGRvc2VzLlxyXG4gICAqL1xyXG4gIENvbnRyYWluZGljYXRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkdWU6IFRoZSBwYXRpZW50IGlzIGR1ZSBmb3IgdGhlaXIgbmV4dCB2YWNjaW5hdGlvbi5cclxuICAgKi9cclxuICBEdWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW1tdW5lOiBUaGUgcGF0aWVudCBpcyBpbW11bmUgdG8gdGhlIHRhcmdldCBkaXNlYXNlIGFuZCBmdXJ0aGVyIGltbXVuaXphdGlvbiBhZ2FpbnN0IHRoZSBkaXNlYXNlIGlzIG5vdCBsaWtlbHkgdG8gcHJvdmlkZSBiZW5lZml0LlxyXG4gICAqL1xyXG4gIEltbXVuZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvdmVyZHVlOiBUaGUgcGF0aWVudCBpcyBjb25zaWRlcmVkIG92ZXJkdWUgZm9yIHRoZWlyIG5leHQgdmFjY2luYXRpb24uXHJcbiAgICovXHJcbiAgT3ZlcmR1ZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB2YWx1ZSBzZXQgdG8gaW5zdGFudGlhdGUgdGhpcyBhdHRyaWJ1dGUgc2hvdWxkIGJlIGRyYXduIGZyb20gYSB0ZXJtaW5vbG9naWNhbGx5IHJvYnVzdCBjb2RlIHN5c3RlbSB0aGF0IGNvbnNpc3RzIG9mIG9yIGNvbnRhaW5zIGNvbmNlcHRzIHRvIHN1cHBvcnQgZGVzY3JpYmluZyB0aGUgc3RhdHVzIG9mIHRoZSBwYXRpZW50IHRvd2FyZHMgcGVyY2VpdmVkIGltbXVuaXR5IGFnYWluc3QgYSB2YWNjaW5lIHByZXZlbnRhYmxlIGRpc2Vhc2UuIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEltbXVuaXphdGlvblJlY29tbWVuZGF0aW9uU3RhdHVzQ29kaW5nczpJbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGU6IFRoZSBwYXRpZW50IGlzIGZ1bGx5IHByb3RlY3RlZCBhbmQgbm8gZnVydGhlciBkb3NlcyBhcmUgcmVjb21tZW5kZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGU6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29tcGxldGVcIixcclxuICAgIGNvZGU6IFwiY29tcGxldGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2ltbXVuaXphdGlvbi1yZWNvbW1lbmRhdGlvbi1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbnRyYWluZGljYXRlZDogVGhlIHBhdGllbnQgaXMgY29udHJhaW5kaWNhdGVkIGZvciBmdXRoZXIgZG9zZXMuXHJcbiAgICovXHJcbiAgQ29udHJhaW5kaWNhdGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbnRyYWluZGljYXRlZFwiLFxyXG4gICAgY29kZTogXCJjb250cmFpbmRpY2F0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2ltbXVuaXphdGlvbi1yZWNvbW1lbmRhdGlvbi1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGR1ZTogVGhlIHBhdGllbnQgaXMgZHVlIGZvciB0aGVpciBuZXh0IHZhY2NpbmF0aW9uLlxyXG4gICAqL1xyXG4gIER1ZToge1xyXG4gICAgZGlzcGxheTogXCJEdWVcIixcclxuICAgIGNvZGU6IFwiZHVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9pbW11bml6YXRpb24tcmVjb21tZW5kYXRpb24tc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbW11bmU6IFRoZSBwYXRpZW50IGlzIGltbXVuZSB0byB0aGUgdGFyZ2V0IGRpc2Vhc2UgYW5kIGZ1cnRoZXIgaW1tdW5pemF0aW9uIGFnYWluc3QgdGhlIGRpc2Vhc2UgaXMgbm90IGxpa2VseSB0byBwcm92aWRlIGJlbmVmaXQuXHJcbiAgICovXHJcbiAgSW1tdW5lOiB7XHJcbiAgICBkaXNwbGF5OiBcIkltbXVuZVwiLFxyXG4gICAgY29kZTogXCJpbW11bmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2ltbXVuaXphdGlvbi1yZWNvbW1lbmRhdGlvbi1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG92ZXJkdWU6IFRoZSBwYXRpZW50IGlzIGNvbnNpZGVyZWQgb3ZlcmR1ZSBmb3IgdGhlaXIgbmV4dCB2YWNjaW5hdGlvbi5cclxuICAgKi9cclxuICBPdmVyZHVlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk92ZXJkdWVcIixcclxuICAgIGNvZGU6IFwib3ZlcmR1ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLXJlY29tbWVuZGF0aW9uLXN0YXR1c1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==