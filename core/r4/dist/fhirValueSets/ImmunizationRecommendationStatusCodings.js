// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-recommendation-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the status of the patient towards perceived immunity against a vaccine preventable disease. This value set is provided as a suggestive example.
 */
export const ImmunizationRecommendationStatusCodings = {
    /**
     * complete: The patient is fully protected and no further doses are recommended.
     */
    Complete: new Coding({
        display: "Complete",
        code: "complete",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    }),
    /**
     * contraindicated: The patient is contraindicated for futher doses.
     */
    Contraindicated: new Coding({
        display: "Contraindicated",
        code: "contraindicated",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    }),
    /**
     * due: The patient is due for their next vaccination.
     */
    Due: new Coding({
        display: "Due",
        code: "due",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    }),
    /**
     * immune: The patient is immune to the target disease and further immunization against the disease is not likely to provide benefit.
     */
    Immune: new Coding({
        display: "Immune",
        code: "immune",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    }),
    /**
     * overdue: The patient is considered overdue for their next vaccination.
     */
    Overdue: new Coding({
        display: "Overdue",
        code: "overdue",
        system: "http://terminology.hl7.org/CodeSystem/immunization-recommendation-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25TdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUZBQXVGO0FBRXZGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUFHO0lBQ3JEOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkYsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsMEVBQTBFO0tBQ25GLENBQUM7SUFDRjs7T0FFRztJQUNILEdBQUcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNkLE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsMEVBQTBFO0tBQ25GLENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkYsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBFQUEwRTtLQUNuRixDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9pbW11bml6YXRpb24tcmVjb21tZW5kYXRpb24tc3RhdHVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIHN0YXR1cyBvZiB0aGUgcGF0aWVudCB0b3dhcmRzIHBlcmNlaXZlZCBpbW11bml0eSBhZ2FpbnN0IGEgdmFjY2luZSBwcmV2ZW50YWJsZSBkaXNlYXNlLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGU6IFRoZSBwYXRpZW50IGlzIGZ1bGx5IHByb3RlY3RlZCBhbmQgbm8gZnVydGhlciBkb3NlcyBhcmUgcmVjb21tZW5kZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb21wbGV0ZVwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLXJlY29tbWVuZGF0aW9uLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvbnRyYWluZGljYXRlZDogVGhlIHBhdGllbnQgaXMgY29udHJhaW5kaWNhdGVkIGZvciBmdXRoZXIgZG9zZXMuXHJcbiAgICovXHJcbiAgQ29udHJhaW5kaWNhdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29udHJhaW5kaWNhdGVkXCIsXHJcbiAgICBjb2RlOiBcImNvbnRyYWluZGljYXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLXJlY29tbWVuZGF0aW9uLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGR1ZTogVGhlIHBhdGllbnQgaXMgZHVlIGZvciB0aGVpciBuZXh0IHZhY2NpbmF0aW9uLlxyXG4gICAqL1xyXG4gIER1ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkR1ZVwiLFxyXG4gICAgY29kZTogXCJkdWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2ltbXVuaXphdGlvbi1yZWNvbW1lbmRhdGlvbi1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBpbW11bmU6IFRoZSBwYXRpZW50IGlzIGltbXVuZSB0byB0aGUgdGFyZ2V0IGRpc2Vhc2UgYW5kIGZ1cnRoZXIgaW1tdW5pemF0aW9uIGFnYWluc3QgdGhlIGRpc2Vhc2UgaXMgbm90IGxpa2VseSB0byBwcm92aWRlIGJlbmVmaXQuXHJcbiAgICovXHJcbiAgSW1tdW5lOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW1tdW5lXCIsXHJcbiAgICBjb2RlOiBcImltbXVuZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLXJlY29tbWVuZGF0aW9uLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG92ZXJkdWU6IFRoZSBwYXRpZW50IGlzIGNvbnNpZGVyZWQgb3ZlcmR1ZSBmb3IgdGhlaXIgbmV4dCB2YWNjaW5hdGlvbi5cclxuICAgKi9cclxuICBPdmVyZHVlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT3ZlcmR1ZVwiLFxyXG4gICAgY29kZTogXCJvdmVyZHVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9pbW11bml6YXRpb24tcmVjb21tZW5kYXRpb24tc3RhdHVzXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSBzdGF0dXMgb2YgdGhlIHBhdGllbnQgdG93YXJkcyBwZXJjZWl2ZWQgaW1tdW5pdHkgYWdhaW5zdCBhIHZhY2NpbmUgcHJldmVudGFibGUgZGlzZWFzZS4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJbW11bml6YXRpb25SZWNvbW1lbmRhdGlvblN0YXR1c0NvZGluZ1R5cGUgPSB0eXBlb2YgSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25TdGF0dXNDb2RpbmdzO1xyXG4iXX0=