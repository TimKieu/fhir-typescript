// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medication-statement-status|4.0.1
/**
 * Medication Status Codes
 */
export const MedicationStatementStatusCodings = {
    /**
     * active: The medication is still being taken.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
    /**
     * completed: The medication is no longer being taken.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
    /**
     * entered-in-error: Some of the actions that are implied by the medication statement may have occurred.  For example, the patient may have taken some of the medication.  Clinical decision support systems should take this status into account.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
    /**
     * intended: The medication may be taken at some time in the future.
     */
    Intended: {
        display: "Intended",
        code: "intended",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
    /**
     * not-taken: The medication was not consumed by the patient
     */
    NotTaken: {
        display: "Not Taken",
        code: "not-taken",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
    /**
     * on-hold: Actions implied by the statement have been temporarily halted, but are expected to continue later. May also be called 'suspended'.
     */
    OnHold: {
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
    /**
     * stopped: Actions implied by the statement have been permanently halted, before all of them occurred. This should not be used if the statement was entered in error.
     */
    Stopped: {
        display: "Stopped",
        code: "stopped",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
    /**
     * unknown: The state of the medication use is not currently known.
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/CodeSystem/medication-statement-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvblN0YXRlbWVudFN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01lZGljYXRpb25TdGF0ZW1lbnRTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGdGQUFnRjtBQTBDaEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBdUM7SUFDbEY7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDREQUE0RDtLQUNyRTtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tZWRpY2F0aW9uLXN0YXRlbWVudC1zdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uIFN0YXR1cyBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVkaWNhdGlvblN0YXRlbWVudFN0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWN0aXZlOiBUaGUgbWVkaWNhdGlvbiBpcyBzdGlsbCBiZWluZyB0YWtlbi5cclxuICAgKi9cclxuICBBY3RpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgbWVkaWNhdGlvbiBpcyBubyBsb25nZXIgYmVpbmcgdGFrZW4uXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFNvbWUgb2YgdGhlIGFjdGlvbnMgdGhhdCBhcmUgaW1wbGllZCBieSB0aGUgbWVkaWNhdGlvbiBzdGF0ZW1lbnQgbWF5IGhhdmUgb2NjdXJyZWQuICBGb3IgZXhhbXBsZSwgdGhlIHBhdGllbnQgbWF5IGhhdmUgdGFrZW4gc29tZSBvZiB0aGUgbWVkaWNhdGlvbi4gIENsaW5pY2FsIGRlY2lzaW9uIHN1cHBvcnQgc3lzdGVtcyBzaG91bGQgdGFrZSB0aGlzIHN0YXR1cyBpbnRvIGFjY291bnQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW50ZW5kZWQ6IFRoZSBtZWRpY2F0aW9uIG1heSBiZSB0YWtlbiBhdCBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cclxuICAgKi9cclxuICBJbnRlbmRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3QtdGFrZW46IFRoZSBtZWRpY2F0aW9uIHdhcyBub3QgY29uc3VtZWQgYnkgdGhlIHBhdGllbnRcclxuICAgKi9cclxuICBOb3RUYWtlbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvbi1ob2xkOiBBY3Rpb25zIGltcGxpZWQgYnkgdGhlIHN0YXRlbWVudCBoYXZlIGJlZW4gdGVtcG9yYXJpbHkgaGFsdGVkLCBidXQgYXJlIGV4cGVjdGVkIHRvIGNvbnRpbnVlIGxhdGVyLiBNYXkgYWxzbyBiZSBjYWxsZWQgJ3N1c3BlbmRlZCcuXHJcbiAgICovXHJcbiAgT25Ib2xkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN0b3BwZWQ6IEFjdGlvbnMgaW1wbGllZCBieSB0aGUgc3RhdGVtZW50IGhhdmUgYmVlbiBwZXJtYW5lbnRseSBoYWx0ZWQsIGJlZm9yZSBhbGwgb2YgdGhlbSBvY2N1cnJlZC4gVGhpcyBzaG91bGQgbm90IGJlIHVzZWQgaWYgdGhlIHN0YXRlbWVudCB3YXMgZW50ZXJlZCBpbiBlcnJvci5cclxuICAgKi9cclxuICBTdG9wcGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHVua25vd246IFRoZSBzdGF0ZSBvZiB0aGUgbWVkaWNhdGlvbiB1c2UgaXMgbm90IGN1cnJlbnRseSBrbm93bi5cclxuICAgKi9cclxuICBVbmtub3duOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvbiBTdGF0dXMgQ29kZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBNZWRpY2F0aW9uU3RhdGVtZW50U3RhdHVzQ29kaW5nczpNZWRpY2F0aW9uU3RhdGVtZW50U3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSBtZWRpY2F0aW9uIGlzIHN0aWxsIGJlaW5nIHRha2VuLlxyXG4gICAqL1xyXG4gIEFjdGl2ZToge1xyXG4gICAgZGlzcGxheTogXCJBY3RpdmVcIixcclxuICAgIGNvZGU6IFwiYWN0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb24tc3RhdGVtZW50LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgbWVkaWNhdGlvbiBpcyBubyBsb25nZXIgYmVpbmcgdGFrZW4uXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbi1zdGF0ZW1lbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBTb21lIG9mIHRoZSBhY3Rpb25zIHRoYXQgYXJlIGltcGxpZWQgYnkgdGhlIG1lZGljYXRpb24gc3RhdGVtZW50IG1heSBoYXZlIG9jY3VycmVkLiAgRm9yIGV4YW1wbGUsIHRoZSBwYXRpZW50IG1heSBoYXZlIHRha2VuIHNvbWUgb2YgdGhlIG1lZGljYXRpb24uICBDbGluaWNhbCBkZWNpc2lvbiBzdXBwb3J0IHN5c3RlbXMgc2hvdWxkIHRha2UgdGhpcyBzdGF0dXMgaW50byBhY2NvdW50LlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS9tZWRpY2F0aW9uLXN0YXRlbWVudC1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGludGVuZGVkOiBUaGUgbWVkaWNhdGlvbiBtYXkgYmUgdGFrZW4gYXQgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXHJcbiAgICovXHJcbiAgSW50ZW5kZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiSW50ZW5kZWRcIixcclxuICAgIGNvZGU6IFwiaW50ZW5kZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbi1zdGF0ZW1lbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBub3QtdGFrZW46IFRoZSBtZWRpY2F0aW9uIHdhcyBub3QgY29uc3VtZWQgYnkgdGhlIHBhdGllbnRcclxuICAgKi9cclxuICBOb3RUYWtlbjoge1xyXG4gICAgZGlzcGxheTogXCJOb3QgVGFrZW5cIixcclxuICAgIGNvZGU6IFwibm90LXRha2VuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL21lZGljYXRpb24tc3RhdGVtZW50LXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogQWN0aW9ucyBpbXBsaWVkIGJ5IHRoZSBzdGF0ZW1lbnQgaGF2ZSBiZWVuIHRlbXBvcmFyaWx5IGhhbHRlZCwgYnV0IGFyZSBleHBlY3RlZCB0byBjb250aW51ZSBsYXRlci4gTWF5IGFsc28gYmUgY2FsbGVkICdzdXNwZW5kZWQnLlxyXG4gICAqL1xyXG4gIE9uSG9sZDoge1xyXG4gICAgZGlzcGxheTogXCJPbiBIb2xkXCIsXHJcbiAgICBjb2RlOiBcIm9uLWhvbGRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbi1zdGF0ZW1lbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBBY3Rpb25zIGltcGxpZWQgYnkgdGhlIHN0YXRlbWVudCBoYXZlIGJlZW4gcGVybWFuZW50bHkgaGFsdGVkLCBiZWZvcmUgYWxsIG9mIHRoZW0gb2NjdXJyZWQuIFRoaXMgc2hvdWxkIG5vdCBiZSB1c2VkIGlmIHRoZSBzdGF0ZW1lbnQgd2FzIGVudGVyZWQgaW4gZXJyb3IuXHJcbiAgICovXHJcbiAgU3RvcHBlZDoge1xyXG4gICAgZGlzcGxheTogXCJTdG9wcGVkXCIsXHJcbiAgICBjb2RlOiBcInN0b3BwZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbi1zdGF0ZW1lbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgc3RhdGUgb2YgdGhlIG1lZGljYXRpb24gdXNlIGlzIG5vdCBjdXJyZW50bHkga25vd24uXHJcbiAgICovXHJcbiAgVW5rbm93bjoge1xyXG4gICAgZGlzcGxheTogXCJVbmtub3duXCIsXHJcbiAgICBjb2RlOiBcInVua25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbi1zdGF0ZW1lbnQtc3RhdHVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19