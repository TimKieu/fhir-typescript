// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/assert-operator-codes|4.0.1
/**
 * The type of operator to use for assertion.
 */
export const AssertOperatorCodings = {
    /**
     * contains: Compare value string contains a known value.
     */
    Contains: {
        display: "contains",
        code: "contains",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * empty: Compare value is empty.
     */
    Empty: {
        display: "empty",
        code: "empty",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * equals: Default value. Equals comparison.
     */
    Equals: {
        display: "equals",
        code: "equals",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * eval: Evaluate the FHIRPath expression as a boolean condition.
     */
    Evaluate: {
        display: "evaluate",
        code: "eval",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * greaterThan: Compare value to be greater than a known value.
     */
    GreaterThan: {
        display: "greaterThan",
        code: "greaterThan",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * in: Compare value within a known set of values.
     */
    In: {
        display: "in",
        code: "in",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * lessThan: Compare value to be less than a known value.
     */
    LessThan: {
        display: "lessThan",
        code: "lessThan",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * notContains: Compare value string does not contain a known value.
     */
    NotContains: {
        display: "notContains",
        code: "notContains",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * notEmpty: Compare value is not empty.
     */
    NotEmpty: {
        display: "notEmpty",
        code: "notEmpty",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * notEquals: Not equals comparison.
     */
    NotEquals: {
        display: "notEquals",
        code: "notEquals",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
    /**
     * notIn: Compare value not within a known set of values.
     */
    NotIn: {
        display: "notIn",
        code: "notIn",
        system: "http://hl7.org/fhir/assert-operator-codes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXJ0T3BlcmF0b3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Bc3NlcnRPcGVyYXRvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMEVBQTBFO0FBc0QxRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILEVBQUUsRUFBRTtRQUNGLE9BQU8sRUFBRSxJQUFJO1FBQ2IsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2Fzc2VydC1vcGVyYXRvci1jb2Rlc3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIG9wZXJhdG9yIHRvIHVzZSBmb3IgYXNzZXJ0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXNzZXJ0T3BlcmF0b3JDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbnRhaW5zOiBDb21wYXJlIHZhbHVlIHN0cmluZyBjb250YWlucyBhIGtub3duIHZhbHVlLlxyXG4gICAqL1xyXG4gIENvbnRhaW5zOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVtcHR5OiBDb21wYXJlIHZhbHVlIGlzIGVtcHR5LlxyXG4gICAqL1xyXG4gIEVtcHR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVxdWFsczogRGVmYXVsdCB2YWx1ZS4gRXF1YWxzIGNvbXBhcmlzb24uXHJcbiAgICovXHJcbiAgRXF1YWxzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGV2YWw6IEV2YWx1YXRlIHRoZSBGSElSUGF0aCBleHByZXNzaW9uIGFzIGEgYm9vbGVhbiBjb25kaXRpb24uXHJcbiAgICovXHJcbiAgRXZhbHVhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ3JlYXRlclRoYW46IENvbXBhcmUgdmFsdWUgdG8gYmUgZ3JlYXRlciB0aGFuIGEga25vd24gdmFsdWUuXHJcbiAgICovXHJcbiAgR3JlYXRlclRoYW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW46IENvbXBhcmUgdmFsdWUgd2l0aGluIGEga25vd24gc2V0IG9mIHZhbHVlcy5cclxuICAgKi9cclxuICBJbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsZXNzVGhhbjogQ29tcGFyZSB2YWx1ZSB0byBiZSBsZXNzIHRoYW4gYSBrbm93biB2YWx1ZS5cclxuICAgKi9cclxuICBMZXNzVGhhbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3RDb250YWluczogQ29tcGFyZSB2YWx1ZSBzdHJpbmcgZG9lcyBub3QgY29udGFpbiBhIGtub3duIHZhbHVlLlxyXG4gICAqL1xyXG4gIE5vdENvbnRhaW5zOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdEVtcHR5OiBDb21wYXJlIHZhbHVlIGlzIG5vdCBlbXB0eS5cclxuICAgKi9cclxuICBOb3RFbXB0eTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3RFcXVhbHM6IE5vdCBlcXVhbHMgY29tcGFyaXNvbi5cclxuICAgKi9cclxuICBOb3RFcXVhbHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm90SW46IENvbXBhcmUgdmFsdWUgbm90IHdpdGhpbiBhIGtub3duIHNldCBvZiB2YWx1ZXMuXHJcbiAgICovXHJcbiAgTm90SW46IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiBvcGVyYXRvciB0byB1c2UgZm9yIGFzc2VydGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBc3NlcnRPcGVyYXRvckNvZGluZ3M6QXNzZXJ0T3BlcmF0b3JDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbnRhaW5zOiBDb21wYXJlIHZhbHVlIHN0cmluZyBjb250YWlucyBhIGtub3duIHZhbHVlLlxyXG4gICAqL1xyXG4gIENvbnRhaW5zOiB7XHJcbiAgICBkaXNwbGF5OiBcImNvbnRhaW5zXCIsXHJcbiAgICBjb2RlOiBcImNvbnRhaW5zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVtcHR5OiBDb21wYXJlIHZhbHVlIGlzIGVtcHR5LlxyXG4gICAqL1xyXG4gIEVtcHR5OiB7XHJcbiAgICBkaXNwbGF5OiBcImVtcHR5XCIsXHJcbiAgICBjb2RlOiBcImVtcHR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVxdWFsczogRGVmYXVsdCB2YWx1ZS4gRXF1YWxzIGNvbXBhcmlzb24uXHJcbiAgICovXHJcbiAgRXF1YWxzOiB7XHJcbiAgICBkaXNwbGF5OiBcImVxdWFsc1wiLFxyXG4gICAgY29kZTogXCJlcXVhbHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZXZhbDogRXZhbHVhdGUgdGhlIEZISVJQYXRoIGV4cHJlc3Npb24gYXMgYSBib29sZWFuIGNvbmRpdGlvbi5cclxuICAgKi9cclxuICBFdmFsdWF0ZToge1xyXG4gICAgZGlzcGxheTogXCJldmFsdWF0ZVwiLFxyXG4gICAgY29kZTogXCJldmFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGdyZWF0ZXJUaGFuOiBDb21wYXJlIHZhbHVlIHRvIGJlIGdyZWF0ZXIgdGhhbiBhIGtub3duIHZhbHVlLlxyXG4gICAqL1xyXG4gIEdyZWF0ZXJUaGFuOiB7XHJcbiAgICBkaXNwbGF5OiBcImdyZWF0ZXJUaGFuXCIsXHJcbiAgICBjb2RlOiBcImdyZWF0ZXJUaGFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluOiBDb21wYXJlIHZhbHVlIHdpdGhpbiBhIGtub3duIHNldCBvZiB2YWx1ZXMuXHJcbiAgICovXHJcbiAgSW46IHtcclxuICAgIGRpc3BsYXk6IFwiaW5cIixcclxuICAgIGNvZGU6IFwiaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbGVzc1RoYW46IENvbXBhcmUgdmFsdWUgdG8gYmUgbGVzcyB0aGFuIGEga25vd24gdmFsdWUuXHJcbiAgICovXHJcbiAgTGVzc1RoYW46IHtcclxuICAgIGRpc3BsYXk6IFwibGVzc1RoYW5cIixcclxuICAgIGNvZGU6IFwibGVzc1RoYW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90Q29udGFpbnM6IENvbXBhcmUgdmFsdWUgc3RyaW5nIGRvZXMgbm90IGNvbnRhaW4gYSBrbm93biB2YWx1ZS5cclxuICAgKi9cclxuICBOb3RDb250YWluczoge1xyXG4gICAgZGlzcGxheTogXCJub3RDb250YWluc1wiLFxyXG4gICAgY29kZTogXCJub3RDb250YWluc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LW9wZXJhdG9yLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBub3RFbXB0eTogQ29tcGFyZSB2YWx1ZSBpcyBub3QgZW1wdHkuXHJcbiAgICovXHJcbiAgTm90RW1wdHk6IHtcclxuICAgIGRpc3BsYXk6IFwibm90RW1wdHlcIixcclxuICAgIGNvZGU6IFwibm90RW1wdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90RXF1YWxzOiBOb3QgZXF1YWxzIGNvbXBhcmlzb24uXHJcbiAgICovXHJcbiAgTm90RXF1YWxzOiB7XHJcbiAgICBkaXNwbGF5OiBcIm5vdEVxdWFsc1wiLFxyXG4gICAgY29kZTogXCJub3RFcXVhbHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90SW46IENvbXBhcmUgdmFsdWUgbm90IHdpdGhpbiBhIGtub3duIHNldCBvZiB2YWx1ZXMuXHJcbiAgICovXHJcbiAgTm90SW46IHtcclxuICAgIGRpc3BsYXk6IFwibm90SW5cIixcclxuICAgIGNvZGU6IFwibm90SW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==