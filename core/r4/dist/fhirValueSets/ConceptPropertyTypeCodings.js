// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/concept-property-type|4.0.1
/**
 * The type of a property value.
 */
export const ConceptPropertyTypeCodings = {
    /**
     * boolean: The property value is a boolean true | false.
     */
    VALBoolean: {
        display: "boolean",
        code: "boolean",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * code: The property value is a code that identifies a concept defined in the code system.
     */
    CodeInternalReference: {
        display: "code (internal reference)",
        code: "code",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * Coding: The property  value is a code defined in an external code system. This may be used for translations, but is not the intent.
     */
    CodingExternalReference: {
        display: "Coding (external reference)",
        code: "Coding",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * dateTime: The property is a date or a date + time.
     */
    DateTime: {
        display: "dateTime",
        code: "dateTime",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * decimal: The property value is a decimal number.
     */
    Decimal: {
        display: "decimal",
        code: "decimal",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * integer: The property value is a string (often used to assign ranking values to concepts for supporting score assessments).
     */
    Integer: {
        display: "integer",
        code: "integer",
        system: "http://hl7.org/fhir/concept-property-type",
    },
    /**
     * string: The property value is a string.
     */
    VALString: {
        display: "string",
        code: "string",
        system: "http://hl7.org/fhir/concept-property-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uY2VwdFByb3BlcnR5VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvbmNlcHRQcm9wZXJ0eVR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDBFQUEwRTtBQXNDMUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBaUM7SUFDdEU7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCx1QkFBdUIsRUFBRTtRQUN2QixPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDJDQUEyQztLQUNwRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29uY2VwdC1wcm9wZXJ0eS10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgYSBwcm9wZXJ0eSB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbmNlcHRQcm9wZXJ0eVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJvb2xlYW46IFRoZSBwcm9wZXJ0eSB2YWx1ZSBpcyBhIGJvb2xlYW4gdHJ1ZSB8IGZhbHNlLlxyXG4gICAqL1xyXG4gIFZBTEJvb2xlYW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29kZTogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgY29kZSB0aGF0IGlkZW50aWZpZXMgYSBjb25jZXB0IGRlZmluZWQgaW4gdGhlIGNvZGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIENvZGVJbnRlcm5hbFJlZmVyZW5jZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2Rpbmc6IFRoZSBwcm9wZXJ0eSAgdmFsdWUgaXMgYSBjb2RlIGRlZmluZWQgaW4gYW4gZXh0ZXJuYWwgY29kZSBzeXN0ZW0uIFRoaXMgbWF5IGJlIHVzZWQgZm9yIHRyYW5zbGF0aW9ucywgYnV0IGlzIG5vdCB0aGUgaW50ZW50LlxyXG4gICAqL1xyXG4gIENvZGluZ0V4dGVybmFsUmVmZXJlbmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGVUaW1lOiBUaGUgcHJvcGVydHkgaXMgYSBkYXRlIG9yIGEgZGF0ZSArIHRpbWUuXHJcbiAgICovXHJcbiAgRGF0ZVRpbWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGVjaW1hbDogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgZGVjaW1hbCBudW1iZXIuXHJcbiAgICovXHJcbiAgRGVjaW1hbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbnRlZ2VyOiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgYSBzdHJpbmcgKG9mdGVuIHVzZWQgdG8gYXNzaWduIHJhbmtpbmcgdmFsdWVzIHRvIGNvbmNlcHRzIGZvciBzdXBwb3J0aW5nIHNjb3JlIGFzc2Vzc21lbnRzKS5cclxuICAgKi9cclxuICBJbnRlZ2VyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgc3RyaW5nLlxyXG4gICAqL1xyXG4gIFZBTFN0cmluZzogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIGEgcHJvcGVydHkgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29uY2VwdFByb3BlcnR5VHlwZUNvZGluZ3M6Q29uY2VwdFByb3BlcnR5VHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYm9vbGVhbjogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgYm9vbGVhbiB0cnVlIHwgZmFsc2UuXHJcbiAgICovXHJcbiAgVkFMQm9vbGVhbjoge1xyXG4gICAgZGlzcGxheTogXCJib29sZWFuXCIsXHJcbiAgICBjb2RlOiBcImJvb2xlYW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmNlcHQtcHJvcGVydHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29kZTogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgY29kZSB0aGF0IGlkZW50aWZpZXMgYSBjb25jZXB0IGRlZmluZWQgaW4gdGhlIGNvZGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIENvZGVJbnRlcm5hbFJlZmVyZW5jZToge1xyXG4gICAgZGlzcGxheTogXCJjb2RlIChpbnRlcm5hbCByZWZlcmVuY2UpXCIsXHJcbiAgICBjb2RlOiBcImNvZGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmNlcHQtcHJvcGVydHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kaW5nOiBUaGUgcHJvcGVydHkgIHZhbHVlIGlzIGEgY29kZSBkZWZpbmVkIGluIGFuIGV4dGVybmFsIGNvZGUgc3lzdGVtLiBUaGlzIG1heSBiZSB1c2VkIGZvciB0cmFuc2xhdGlvbnMsIGJ1dCBpcyBub3QgdGhlIGludGVudC5cclxuICAgKi9cclxuICBDb2RpbmdFeHRlcm5hbFJlZmVyZW5jZToge1xyXG4gICAgZGlzcGxheTogXCJDb2RpbmcgKGV4dGVybmFsIHJlZmVyZW5jZSlcIixcclxuICAgIGNvZGU6IFwiQ29kaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25jZXB0LXByb3BlcnR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGVUaW1lOiBUaGUgcHJvcGVydHkgaXMgYSBkYXRlIG9yIGEgZGF0ZSArIHRpbWUuXHJcbiAgICovXHJcbiAgRGF0ZVRpbWU6IHtcclxuICAgIGRpc3BsYXk6IFwiZGF0ZVRpbWVcIixcclxuICAgIGNvZGU6IFwiZGF0ZVRpbWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmNlcHQtcHJvcGVydHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGVjaW1hbDogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgZGVjaW1hbCBudW1iZXIuXHJcbiAgICovXHJcbiAgRGVjaW1hbDoge1xyXG4gICAgZGlzcGxheTogXCJkZWNpbWFsXCIsXHJcbiAgICBjb2RlOiBcImRlY2ltYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmNlcHQtcHJvcGVydHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaW50ZWdlcjogVGhlIHByb3BlcnR5IHZhbHVlIGlzIGEgc3RyaW5nIChvZnRlbiB1c2VkIHRvIGFzc2lnbiByYW5raW5nIHZhbHVlcyB0byBjb25jZXB0cyBmb3Igc3VwcG9ydGluZyBzY29yZSBhc3Nlc3NtZW50cykuXHJcbiAgICovXHJcbiAgSW50ZWdlcjoge1xyXG4gICAgZGlzcGxheTogXCJpbnRlZ2VyXCIsXHJcbiAgICBjb2RlOiBcImludGVnZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmNlcHQtcHJvcGVydHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3RyaW5nOiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgYSBzdHJpbmcuXHJcbiAgICovXHJcbiAgVkFMU3RyaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcInN0cmluZ1wiLFxyXG4gICAgY29kZTogXCJzdHJpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbmNlcHQtcHJvcGVydHktdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==