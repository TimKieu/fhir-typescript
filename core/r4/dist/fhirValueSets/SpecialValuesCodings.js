// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/special-values|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A set of generally useful codes defined so they can be included in value sets.
 */
export const SpecialValuesCodings = {
    /**
     * false: Boolean false.
     */
    False: new Coding({
        display: "false",
        code: "false",
        system: "http://terminology.hl7.org/CodeSystem/special-values",
    }),
    /**
     * nil-known: The are no known applicable values in this context.
     */
    NilKnown: new Coding({
        display: "Nil Known",
        code: "nil-known",
        system: "http://terminology.hl7.org/CodeSystem/special-values",
    }),
    /**
     * sufficient: The specific quantity is not known, but is known to be non-zero and is not specified because it makes up the bulk of the material.
     */
    SufficientQuantity: new Coding({
        display: "Sufficient Quantity",
        code: "sufficient",
        system: "http://terminology.hl7.org/CodeSystem/special-values",
    }),
    /**
     * trace: The content is greater than zero, but too small to be quantified.
     */
    TraceAmountDetected: new Coding({
        display: "Trace Amount Detected",
        code: "trace",
        system: "http://terminology.hl7.org/CodeSystem/special-values",
    }),
    /**
     * true: Boolean true.
     */
    True: new Coding({
        display: "true",
        code: "true",
        system: "http://terminology.hl7.org/CodeSystem/special-values",
    }),
    /**
     * withdrawn: The value is no longer available.
     */
    ValueWithdrawn: new Coding({
        display: "Value Withdrawn",
        code: "withdrawn",
        system: "http://terminology.hl7.org/CodeSystem/special-values",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BlY2lhbFZhbHVlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NwZWNpYWxWYWx1ZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQUVuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQzs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDN0IsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7SUFDRjs7T0FFRztJQUNILG1CQUFtQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzlCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc3BlY2lhbC12YWx1ZXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEEgc2V0IG9mIGdlbmVyYWxseSB1c2VmdWwgY29kZXMgZGVmaW5lZCBzbyB0aGV5IGNhbiBiZSBpbmNsdWRlZCBpbiB2YWx1ZSBzZXRzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNwZWNpYWxWYWx1ZXNDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGZhbHNlOiBCb29sZWFuIGZhbHNlLlxyXG4gICAqL1xyXG4gIEZhbHNlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiZmFsc2VcIixcclxuICAgIGNvZGU6IFwiZmFsc2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3NwZWNpYWwtdmFsdWVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbmlsLWtub3duOiBUaGUgYXJlIG5vIGtub3duIGFwcGxpY2FibGUgdmFsdWVzIGluIHRoaXMgY29udGV4dC5cclxuICAgKi9cclxuICBOaWxLbm93bjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5pbCBLbm93blwiLFxyXG4gICAgY29kZTogXCJuaWwta25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3NwZWNpYWwtdmFsdWVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc3VmZmljaWVudDogVGhlIHNwZWNpZmljIHF1YW50aXR5IGlzIG5vdCBrbm93biwgYnV0IGlzIGtub3duIHRvIGJlIG5vbi16ZXJvIGFuZCBpcyBub3Qgc3BlY2lmaWVkIGJlY2F1c2UgaXQgbWFrZXMgdXAgdGhlIGJ1bGsgb2YgdGhlIG1hdGVyaWFsLlxyXG4gICAqL1xyXG4gIFN1ZmZpY2llbnRRdWFudGl0eTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN1ZmZpY2llbnQgUXVhbnRpdHlcIixcclxuICAgIGNvZGU6IFwic3VmZmljaWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3BlY2lhbC12YWx1ZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB0cmFjZTogVGhlIGNvbnRlbnQgaXMgZ3JlYXRlciB0aGFuIHplcm8sIGJ1dCB0b28gc21hbGwgdG8gYmUgcXVhbnRpZmllZC5cclxuICAgKi9cclxuICBUcmFjZUFtb3VudERldGVjdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVHJhY2UgQW1vdW50IERldGVjdGVkXCIsXHJcbiAgICBjb2RlOiBcInRyYWNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zcGVjaWFsLXZhbHVlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHRydWU6IEJvb2xlYW4gdHJ1ZS5cclxuICAgKi9cclxuICBUcnVlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwidHJ1ZVwiLFxyXG4gICAgY29kZTogXCJ0cnVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zcGVjaWFsLXZhbHVlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHdpdGhkcmF3bjogVGhlIHZhbHVlIGlzIG5vIGxvbmdlciBhdmFpbGFibGUuXHJcbiAgICovXHJcbiAgVmFsdWVXaXRoZHJhd246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJWYWx1ZSBXaXRoZHJhd25cIixcclxuICAgIGNvZGU6IFwid2l0aGRyYXduXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zcGVjaWFsLXZhbHVlc1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEEgc2V0IG9mIGdlbmVyYWxseSB1c2VmdWwgY29kZXMgZGVmaW5lZCBzbyB0aGV5IGNhbiBiZSBpbmNsdWRlZCBpbiB2YWx1ZSBzZXRzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3BlY2lhbFZhbHVlc0NvZGluZ1R5cGUgPSB0eXBlb2YgU3BlY2lhbFZhbHVlc0NvZGluZ3M7XHJcbiJdfQ==