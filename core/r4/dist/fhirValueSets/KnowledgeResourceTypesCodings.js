// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/knowledge-resource-types|4.0.1
/**
 * A list of all the knowledge resource types defined in this version of the FHIR specification.
 */
export const KnowledgeResourceTypesCodings = {
    /**
     * ActivityDefinition: The definition of a specific activity to be taken, independent of any particular patient or context.
     */
    ActivityDefinition: {
        display: "ActivityDefinition",
        code: "ActivityDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * CodeSystem: A set of codes drawn from one or more code systems.
     */
    CodeSystem: {
        display: "CodeSystem",
        code: "CodeSystem",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * ConceptMap: A map from one set of concepts to one or more other concepts.
     */
    ConceptMap: {
        display: "ConceptMap",
        code: "ConceptMap",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * Library: Represents a library of quality improvement components.
     */
    Library: {
        display: "Library",
        code: "Library",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * Measure: A quality measure definition.
     */
    Measure: {
        display: "Measure",
        code: "Measure",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * PlanDefinition: The definition of a plan for a series of actions, independent of any specific patient or context.
     */
    PlanDefinition: {
        display: "PlanDefinition",
        code: "PlanDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * StructureDefinition: Structural Definition.
     */
    StructureDefinition: {
        display: "StructureDefinition",
        code: "StructureDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * StructureMap: A Map of relationships between 2 structures that can be used to transform data.
     */
    StructureMap: {
        display: "StructureMap",
        code: "StructureMap",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
    /**
     * ValueSet: A set of codes drawn from one or more code systems.
     */
    ValueSet: {
        display: "ValueSet",
        code: "ValueSet",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0tub3dsZWRnZVJlc291cmNlVHlwZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQThDN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxvQkFBb0I7UUFDMUIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUsOENBQThDO0tBQ3ZEO0lBQ0Q7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQva25vd2xlZGdlLXJlc291cmNlLXR5cGVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQSBsaXN0IG9mIGFsbCB0aGUga25vd2xlZGdlIHJlc291cmNlIHR5cGVzIGRlZmluZWQgaW4gdGhpcyB2ZXJzaW9uIG9mIHRoZSBGSElSIHNwZWNpZmljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBLbm93bGVkZ2VSZXNvdXJjZVR5cGVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBBY3Rpdml0eURlZmluaXRpb246IFRoZSBkZWZpbml0aW9uIG9mIGEgc3BlY2lmaWMgYWN0aXZpdHkgdG8gYmUgdGFrZW4sIGluZGVwZW5kZW50IG9mIGFueSBwYXJ0aWN1bGFyIHBhdGllbnQgb3IgY29udGV4dC5cclxuICAgKi9cclxuICBBY3Rpdml0eURlZmluaXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZVN5c3RlbTogQSBzZXQgb2YgY29kZXMgZHJhd24gZnJvbSBvbmUgb3IgbW9yZSBjb2RlIHN5c3RlbXMuXHJcbiAgICovXHJcbiAgQ29kZVN5c3RlbTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb25jZXB0TWFwOiBBIG1hcCBmcm9tIG9uZSBzZXQgb2YgY29uY2VwdHMgdG8gb25lIG9yIG1vcmUgb3RoZXIgY29uY2VwdHMuXHJcbiAgICovXHJcbiAgQ29uY2VwdE1hcDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBMaWJyYXJ5OiBSZXByZXNlbnRzIGEgbGlicmFyeSBvZiBxdWFsaXR5IGltcHJvdmVtZW50IGNvbXBvbmVudHMuXHJcbiAgICovXHJcbiAgTGlicmFyeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBNZWFzdXJlOiBBIHF1YWxpdHkgbWVhc3VyZSBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIE1lYXN1cmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUGxhbkRlZmluaXRpb246IFRoZSBkZWZpbml0aW9uIG9mIGEgcGxhbiBmb3IgYSBzZXJpZXMgb2YgYWN0aW9ucywgaW5kZXBlbmRlbnQgb2YgYW55IHNwZWNpZmljIHBhdGllbnQgb3IgY29udGV4dC5cclxuICAgKi9cclxuICBQbGFuRGVmaW5pdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBTdHJ1Y3R1cmVEZWZpbml0aW9uOiBTdHJ1Y3R1cmFsIERlZmluaXRpb24uXHJcbiAgICovXHJcbiAgU3RydWN0dXJlRGVmaW5pdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBTdHJ1Y3R1cmVNYXA6IEEgTWFwIG9mIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiAyIHN0cnVjdHVyZXMgdGhhdCBjYW4gYmUgdXNlZCB0byB0cmFuc2Zvcm0gZGF0YS5cclxuICAgKi9cclxuICBTdHJ1Y3R1cmVNYXA6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogVmFsdWVTZXQ6IEEgc2V0IG9mIGNvZGVzIGRyYXduIGZyb20gb25lIG9yIG1vcmUgY29kZSBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIFZhbHVlU2V0OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBsaXN0IG9mIGFsbCB0aGUga25vd2xlZGdlIHJlc291cmNlIHR5cGVzIGRlZmluZWQgaW4gdGhpcyB2ZXJzaW9uIG9mIHRoZSBGSElSIHNwZWNpZmljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgS25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ3M6S25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogQWN0aXZpdHlEZWZpbml0aW9uOiBUaGUgZGVmaW5pdGlvbiBvZiBhIHNwZWNpZmljIGFjdGl2aXR5IHRvIGJlIHRha2VuLCBpbmRlcGVuZGVudCBvZiBhbnkgcGFydGljdWxhciBwYXRpZW50IG9yIGNvbnRleHQuXHJcbiAgICovXHJcbiAgQWN0aXZpdHlEZWZpbml0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkFjdGl2aXR5RGVmaW5pdGlvblwiLFxyXG4gICAgY29kZTogXCJBY3Rpdml0eURlZmluaXRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZVN5c3RlbTogQSBzZXQgb2YgY29kZXMgZHJhd24gZnJvbSBvbmUgb3IgbW9yZSBjb2RlIHN5c3RlbXMuXHJcbiAgICovXHJcbiAgQ29kZVN5c3RlbToge1xyXG4gICAgZGlzcGxheTogXCJDb2RlU3lzdGVtXCIsXHJcbiAgICBjb2RlOiBcIkNvZGVTeXN0ZW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29uY2VwdE1hcDogQSBtYXAgZnJvbSBvbmUgc2V0IG9mIGNvbmNlcHRzIHRvIG9uZSBvciBtb3JlIG90aGVyIGNvbmNlcHRzLlxyXG4gICAqL1xyXG4gIENvbmNlcHRNYXA6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29uY2VwdE1hcFwiLFxyXG4gICAgY29kZTogXCJDb25jZXB0TWFwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIExpYnJhcnk6IFJlcHJlc2VudHMgYSBsaWJyYXJ5IG9mIHF1YWxpdHkgaW1wcm92ZW1lbnQgY29tcG9uZW50cy5cclxuICAgKi9cclxuICBMaWJyYXJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIkxpYnJhcnlcIixcclxuICAgIGNvZGU6IFwiTGlicmFyeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBNZWFzdXJlOiBBIHF1YWxpdHkgbWVhc3VyZSBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIE1lYXN1cmU6IHtcclxuICAgIGRpc3BsYXk6IFwiTWVhc3VyZVwiLFxyXG4gICAgY29kZTogXCJNZWFzdXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFBsYW5EZWZpbml0aW9uOiBUaGUgZGVmaW5pdGlvbiBvZiBhIHBsYW4gZm9yIGEgc2VyaWVzIG9mIGFjdGlvbnMsIGluZGVwZW5kZW50IG9mIGFueSBzcGVjaWZpYyBwYXRpZW50IG9yIGNvbnRleHQuXHJcbiAgICovXHJcbiAgUGxhbkRlZmluaXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiUGxhbkRlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwiUGxhbkRlZmluaXRpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogU3RydWN0dXJlRGVmaW5pdGlvbjogU3RydWN0dXJhbCBEZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIFN0cnVjdHVyZURlZmluaXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiU3RydWN0dXJlRGVmaW5pdGlvblwiLFxyXG4gICAgY29kZTogXCJTdHJ1Y3R1cmVEZWZpbml0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFN0cnVjdHVyZU1hcDogQSBNYXAgb2YgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIDIgc3RydWN0dXJlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHRyYW5zZm9ybSBkYXRhLlxyXG4gICAqL1xyXG4gIFN0cnVjdHVyZU1hcDoge1xyXG4gICAgZGlzcGxheTogXCJTdHJ1Y3R1cmVNYXBcIixcclxuICAgIGNvZGU6IFwiU3RydWN0dXJlTWFwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFZhbHVlU2V0OiBBIHNldCBvZiBjb2RlcyBkcmF3biBmcm9tIG9uZSBvciBtb3JlIGNvZGUgc3lzdGVtcy5cclxuICAgKi9cclxuICBWYWx1ZVNldDoge1xyXG4gICAgZGlzcGxheTogXCJWYWx1ZVNldFwiLFxyXG4gICAgY29kZTogXCJWYWx1ZVNldFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19