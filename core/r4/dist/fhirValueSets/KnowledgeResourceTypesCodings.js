// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/knowledge-resource-types|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A list of all the knowledge resource types defined in this version of the FHIR specification.
 */
export const KnowledgeResourceTypesCodings = {
    /**
     * ActivityDefinition: The definition of a specific activity to be taken, independent of any particular patient or context.
     */
    ActivityDefinition: new Coding({
        display: "ActivityDefinition",
        code: "ActivityDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * CodeSystem: A set of codes drawn from one or more code systems.
     */
    CodeSystem: new Coding({
        display: "CodeSystem",
        code: "CodeSystem",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * ConceptMap: A map from one set of concepts to one or more other concepts.
     */
    ConceptMap: new Coding({
        display: "ConceptMap",
        code: "ConceptMap",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * Library: Represents a library of quality improvement components.
     */
    Library: new Coding({
        display: "Library",
        code: "Library",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * Measure: A quality measure definition.
     */
    Measure: new Coding({
        display: "Measure",
        code: "Measure",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * PlanDefinition: The definition of a plan for a series of actions, independent of any specific patient or context.
     */
    PlanDefinition: new Coding({
        display: "PlanDefinition",
        code: "PlanDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * StructureDefinition: Structural Definition.
     */
    StructureDefinition: new Coding({
        display: "StructureDefinition",
        code: "StructureDefinition",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * StructureMap: A Map of relationships between 2 structures that can be used to transform data.
     */
    StructureMap: new Coding({
        display: "StructureMap",
        code: "StructureMap",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
    /**
     * ValueSet: A set of codes drawn from one or more code systems.
     */
    ValueSet: new Coding({
        display: "ValueSet",
        code: "ValueSet",
        system: "http://hl7.org/fhir/knowledge-resource-types",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0tub3dsZWRnZVJlc291cmNlVHlwZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQUU3RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQzs7T0FFRztJQUNILGtCQUFrQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzdCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLG9CQUFvQjtRQUMxQixNQUFNLEVBQUUsOENBQThDO0tBQ3ZELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsOENBQThDO0tBQ3ZELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsOENBQThDO0tBQ3ZELENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDOUIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUscUJBQXFCO1FBQzNCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQva25vd2xlZGdlLXJlc291cmNlLXR5cGVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBBIGxpc3Qgb2YgYWxsIHRoZSBrbm93bGVkZ2UgcmVzb3VyY2UgdHlwZXMgZGVmaW5lZCBpbiB0aGlzIHZlcnNpb24gb2YgdGhlIEZISVIgc3BlY2lmaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBLbm93bGVkZ2VSZXNvdXJjZVR5cGVzQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBBY3Rpdml0eURlZmluaXRpb246IFRoZSBkZWZpbml0aW9uIG9mIGEgc3BlY2lmaWMgYWN0aXZpdHkgdG8gYmUgdGFrZW4sIGluZGVwZW5kZW50IG9mIGFueSBwYXJ0aWN1bGFyIHBhdGllbnQgb3IgY29udGV4dC5cclxuICAgKi9cclxuICBBY3Rpdml0eURlZmluaXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBY3Rpdml0eURlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwiQWN0aXZpdHlEZWZpbml0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlU3lzdGVtOiBBIHNldCBvZiBjb2RlcyBkcmF3biBmcm9tIG9uZSBvciBtb3JlIGNvZGUgc3lzdGVtcy5cclxuICAgKi9cclxuICBDb2RlU3lzdGVtOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29kZVN5c3RlbVwiLFxyXG4gICAgY29kZTogXCJDb2RlU3lzdGVtXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb25jZXB0TWFwOiBBIG1hcCBmcm9tIG9uZSBzZXQgb2YgY29uY2VwdHMgdG8gb25lIG9yIG1vcmUgb3RoZXIgY29uY2VwdHMuXHJcbiAgICovXHJcbiAgQ29uY2VwdE1hcDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbmNlcHRNYXBcIixcclxuICAgIGNvZGU6IFwiQ29uY2VwdE1hcFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogTGlicmFyeTogUmVwcmVzZW50cyBhIGxpYnJhcnkgb2YgcXVhbGl0eSBpbXByb3ZlbWVudCBjb21wb25lbnRzLlxyXG4gICAqL1xyXG4gIExpYnJhcnk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJMaWJyYXJ5XCIsXHJcbiAgICBjb2RlOiBcIkxpYnJhcnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIE1lYXN1cmU6IEEgcXVhbGl0eSBtZWFzdXJlIGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgTWVhc3VyZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1lYXN1cmVcIixcclxuICAgIGNvZGU6IFwiTWVhc3VyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUGxhbkRlZmluaXRpb246IFRoZSBkZWZpbml0aW9uIG9mIGEgcGxhbiBmb3IgYSBzZXJpZXMgb2YgYWN0aW9ucywgaW5kZXBlbmRlbnQgb2YgYW55IHNwZWNpZmljIHBhdGllbnQgb3IgY29udGV4dC5cclxuICAgKi9cclxuICBQbGFuRGVmaW5pdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBsYW5EZWZpbml0aW9uXCIsXHJcbiAgICBjb2RlOiBcIlBsYW5EZWZpbml0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9rbm93bGVkZ2UtcmVzb3VyY2UtdHlwZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBTdHJ1Y3R1cmVEZWZpbml0aW9uOiBTdHJ1Y3R1cmFsIERlZmluaXRpb24uXHJcbiAgICovXHJcbiAgU3RydWN0dXJlRGVmaW5pdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN0cnVjdHVyZURlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwiU3RydWN0dXJlRGVmaW5pdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogU3RydWN0dXJlTWFwOiBBIE1hcCBvZiByZWxhdGlvbnNoaXBzIGJldHdlZW4gMiBzdHJ1Y3R1cmVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gdHJhbnNmb3JtIGRhdGEuXHJcbiAgICovXHJcbiAgU3RydWN0dXJlTWFwOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3RydWN0dXJlTWFwXCIsXHJcbiAgICBjb2RlOiBcIlN0cnVjdHVyZU1hcFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIva25vd2xlZGdlLXJlc291cmNlLXR5cGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogVmFsdWVTZXQ6IEEgc2V0IG9mIGNvZGVzIGRyYXduIGZyb20gb25lIG9yIG1vcmUgY29kZSBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIFZhbHVlU2V0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVmFsdWVTZXRcIixcclxuICAgIGNvZGU6IFwiVmFsdWVTZXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2tub3dsZWRnZS1yZXNvdXJjZS10eXBlc1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEEgbGlzdCBvZiBhbGwgdGhlIGtub3dsZWRnZSByZXNvdXJjZSB0eXBlcyBkZWZpbmVkIGluIHRoaXMgdmVyc2lvbiBvZiB0aGUgRkhJUiBzcGVjaWZpY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgS25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ1R5cGUgPSB0eXBlb2YgS25vd2xlZGdlUmVzb3VyY2VUeXBlc0NvZGluZ3M7XHJcbiJdfQ==