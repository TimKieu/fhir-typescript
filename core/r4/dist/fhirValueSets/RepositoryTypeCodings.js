// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/repository-type|4.0.1
/**
 * Type for access of external URI.
 */
export const RepositoryTypeCodings = {
    /**
     * directlink: When URL is clicked, the resource can be seen directly (by webpage or by download link format).
     */
    ClickAndSee: {
        display: "Click and see",
        code: "directlink",
        system: "http://hl7.org/fhir/repository-type",
    },
    /**
     * login: When logged into the website, the resource can be seen.
     */
    ResultCannotBeAccessUnlessAnAccountIsLoggedIn: {
        display: "Result cannot be access unless an account is logged in",
        code: "login",
        system: "http://hl7.org/fhir/repository-type",
    },
    /**
     * oauth: When logged in and  follow the API in the website related with URL, the resource can be seen.
     */
    ResultNeedToBeFetchedWithAPIAndNeedLOGINOrCookiesAreRequiredWhenVisitingTheLinkOfResource: {
        display: "Result need to be fetched with API and need LOGIN( or cookies are required when visiting the link of resource)",
        code: "oauth",
        system: "http://hl7.org/fhir/repository-type",
    },
    /**
     * openapi: When the API method (e.g. [base_url]/[parameter]) related with the URL of the website is executed, the resource can be seen directly (usually in JSON or XML format).
     */
    TheURLIsTheRESTfulOrOtherKindOfAPIThatCanAccessToTheResult: {
        display: "The URL is the RESTful or other kind of API that can access to the result.",
        code: "openapi",
        system: "http://hl7.org/fhir/repository-type",
    },
    /**
     * other: Some other complicated or particular way to get resource from URL.
     */
    SomeOtherComplicatedOrParticularWayToGetResourceFromURL: {
        display: "Some other complicated or particular way to get resource from URL.",
        code: "other",
        system: "http://hl7.org/fhir/repository-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb3NpdG9yeVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZXBvc2l0b3J5VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBOEJwRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUE0QjtJQUM1RDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7SUFDRDs7T0FFRztJQUNILDZDQUE2QyxFQUFFO1FBQzdDLE9BQU8sRUFBRSx3REFBd0Q7UUFDakUsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0lBQ0Q7O09BRUc7SUFDSCx5RkFBeUYsRUFBRTtRQUN6RixPQUFPLEVBQUUsZ0hBQWdIO1FBQ3pILElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHFDQUFxQztLQUM5QztJQUNEOztPQUVHO0lBQ0gsMERBQTBELEVBQUU7UUFDMUQsT0FBTyxFQUFFLDRFQUE0RTtRQUNyRixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUM7SUFDRDs7T0FFRztJQUNILHVEQUF1RCxFQUFFO1FBQ3ZELE9BQU8sRUFBRSxvRUFBb0U7UUFDN0UsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUscUNBQXFDO0tBQzlDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZXBvc2l0b3J5LXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBhY2Nlc3Mgb2YgZXh0ZXJuYWwgVVJJLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVwb3NpdG9yeVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRpcmVjdGxpbms6IFdoZW4gVVJMIGlzIGNsaWNrZWQsIHRoZSByZXNvdXJjZSBjYW4gYmUgc2VlbiBkaXJlY3RseSAoYnkgd2VicGFnZSBvciBieSBkb3dubG9hZCBsaW5rIGZvcm1hdCkuXHJcbiAgICovXHJcbiAgQ2xpY2tBbmRTZWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbG9naW46IFdoZW4gbG9nZ2VkIGludG8gdGhlIHdlYnNpdGUsIHRoZSByZXNvdXJjZSBjYW4gYmUgc2Vlbi5cclxuICAgKi9cclxuICBSZXN1bHRDYW5ub3RCZUFjY2Vzc1VubGVzc0FuQWNjb3VudElzTG9nZ2VkSW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb2F1dGg6IFdoZW4gbG9nZ2VkIGluIGFuZCAgZm9sbG93IHRoZSBBUEkgaW4gdGhlIHdlYnNpdGUgcmVsYXRlZCB3aXRoIFVSTCwgdGhlIHJlc291cmNlIGNhbiBiZSBzZWVuLlxyXG4gICAqL1xyXG4gIFJlc3VsdE5lZWRUb0JlRmV0Y2hlZFdpdGhBUElBbmROZWVkTE9HSU5PckNvb2tpZXNBcmVSZXF1aXJlZFdoZW5WaXNpdGluZ1RoZUxpbmtPZlJlc291cmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9wZW5hcGk6IFdoZW4gdGhlIEFQSSBtZXRob2QgKGUuZy4gW2Jhc2VfdXJsXS9bcGFyYW1ldGVyXSkgcmVsYXRlZCB3aXRoIHRoZSBVUkwgb2YgdGhlIHdlYnNpdGUgaXMgZXhlY3V0ZWQsIHRoZSByZXNvdXJjZSBjYW4gYmUgc2VlbiBkaXJlY3RseSAodXN1YWxseSBpbiBKU09OIG9yIFhNTCBmb3JtYXQpLlxyXG4gICAqL1xyXG4gIFRoZVVSTElzVGhlUkVTVGZ1bE9yT3RoZXJLaW5kT2ZBUElUaGF0Q2FuQWNjZXNzVG9UaGVSZXN1bHQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IFNvbWUgb3RoZXIgY29tcGxpY2F0ZWQgb3IgcGFydGljdWxhciB3YXkgdG8gZ2V0IHJlc291cmNlIGZyb20gVVJMLlxyXG4gICAqL1xyXG4gIFNvbWVPdGhlckNvbXBsaWNhdGVkT3JQYXJ0aWN1bGFyV2F5VG9HZXRSZXNvdXJjZUZyb21VUkw6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBhY2Nlc3Mgb2YgZXh0ZXJuYWwgVVJJLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFJlcG9zaXRvcnlUeXBlQ29kaW5nczpSZXBvc2l0b3J5VHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZGlyZWN0bGluazogV2hlbiBVUkwgaXMgY2xpY2tlZCwgdGhlIHJlc291cmNlIGNhbiBiZSBzZWVuIGRpcmVjdGx5IChieSB3ZWJwYWdlIG9yIGJ5IGRvd25sb2FkIGxpbmsgZm9ybWF0KS5cclxuICAgKi9cclxuICBDbGlja0FuZFNlZToge1xyXG4gICAgZGlzcGxheTogXCJDbGljayBhbmQgc2VlXCIsXHJcbiAgICBjb2RlOiBcImRpcmVjdGxpbmtcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcG9zaXRvcnktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbG9naW46IFdoZW4gbG9nZ2VkIGludG8gdGhlIHdlYnNpdGUsIHRoZSByZXNvdXJjZSBjYW4gYmUgc2Vlbi5cclxuICAgKi9cclxuICBSZXN1bHRDYW5ub3RCZUFjY2Vzc1VubGVzc0FuQWNjb3VudElzTG9nZ2VkSW46IHtcclxuICAgIGRpc3BsYXk6IFwiUmVzdWx0IGNhbm5vdCBiZSBhY2Nlc3MgdW5sZXNzIGFuIGFjY291bnQgaXMgbG9nZ2VkIGluXCIsXHJcbiAgICBjb2RlOiBcImxvZ2luXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXBvc2l0b3J5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9hdXRoOiBXaGVuIGxvZ2dlZCBpbiBhbmQgIGZvbGxvdyB0aGUgQVBJIGluIHRoZSB3ZWJzaXRlIHJlbGF0ZWQgd2l0aCBVUkwsIHRoZSByZXNvdXJjZSBjYW4gYmUgc2Vlbi5cclxuICAgKi9cclxuICBSZXN1bHROZWVkVG9CZUZldGNoZWRXaXRoQVBJQW5kTmVlZExPR0lOT3JDb29raWVzQXJlUmVxdWlyZWRXaGVuVmlzaXRpbmdUaGVMaW5rT2ZSZXNvdXJjZToge1xyXG4gICAgZGlzcGxheTogXCJSZXN1bHQgbmVlZCB0byBiZSBmZXRjaGVkIHdpdGggQVBJIGFuZCBuZWVkIExPR0lOKCBvciBjb29raWVzIGFyZSByZXF1aXJlZCB3aGVuIHZpc2l0aW5nIHRoZSBsaW5rIG9mIHJlc291cmNlKVwiLFxyXG4gICAgY29kZTogXCJvYXV0aFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVwb3NpdG9yeS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvcGVuYXBpOiBXaGVuIHRoZSBBUEkgbWV0aG9kIChlLmcuIFtiYXNlX3VybF0vW3BhcmFtZXRlcl0pIHJlbGF0ZWQgd2l0aCB0aGUgVVJMIG9mIHRoZSB3ZWJzaXRlIGlzIGV4ZWN1dGVkLCB0aGUgcmVzb3VyY2UgY2FuIGJlIHNlZW4gZGlyZWN0bHkgKHVzdWFsbHkgaW4gSlNPTiBvciBYTUwgZm9ybWF0KS5cclxuICAgKi9cclxuICBUaGVVUkxJc1RoZVJFU1RmdWxPck90aGVyS2luZE9mQVBJVGhhdENhbkFjY2Vzc1RvVGhlUmVzdWx0OiB7XHJcbiAgICBkaXNwbGF5OiBcIlRoZSBVUkwgaXMgdGhlIFJFU1RmdWwgb3Igb3RoZXIga2luZCBvZiBBUEkgdGhhdCBjYW4gYWNjZXNzIHRvIHRoZSByZXN1bHQuXCIsXHJcbiAgICBjb2RlOiBcIm9wZW5hcGlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcG9zaXRvcnktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogb3RoZXI6IFNvbWUgb3RoZXIgY29tcGxpY2F0ZWQgb3IgcGFydGljdWxhciB3YXkgdG8gZ2V0IHJlc291cmNlIGZyb20gVVJMLlxyXG4gICAqL1xyXG4gIFNvbWVPdGhlckNvbXBsaWNhdGVkT3JQYXJ0aWN1bGFyV2F5VG9HZXRSZXNvdXJjZUZyb21VUkw6IHtcclxuICAgIGRpc3BsYXk6IFwiU29tZSBvdGhlciBjb21wbGljYXRlZCBvciBwYXJ0aWN1bGFyIHdheSB0byBnZXQgcmVzb3VyY2UgZnJvbSBVUkwuXCIsXHJcbiAgICBjb2RlOiBcIm90aGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXBvc2l0b3J5LXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=