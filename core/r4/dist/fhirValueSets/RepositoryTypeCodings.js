// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/repository-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Type for access of external URI.
 */
export const RepositoryTypeCodings = {
    /**
     * directlink: When URL is clicked, the resource can be seen directly (by webpage or by download link format).
     */
    ClickAndSee: new Coding({
        display: "Click and see",
        code: "directlink",
        system: "http://hl7.org/fhir/repository-type",
    }),
    /**
     * login: When logged into the website, the resource can be seen.
     */
    ResultCannotBeAccessUnlessAnAccountIsLoggedIn: new Coding({
        display: "Result cannot be access unless an account is logged in",
        code: "login",
        system: "http://hl7.org/fhir/repository-type",
    }),
    /**
     * oauth: When logged in and  follow the API in the website related with URL, the resource can be seen.
     */
    ResultNeedToBeFetchedWithAPIAndNeedLOGINOrCookiesAreRequiredWhenVisitingTheLinkOfResource: new Coding({
        display: "Result need to be fetched with API and need LOGIN( or cookies are required when visiting the link of resource)",
        code: "oauth",
        system: "http://hl7.org/fhir/repository-type",
    }),
    /**
     * openapi: When the API method (e.g. [base_url]/[parameter]) related with the URL of the website is executed, the resource can be seen directly (usually in JSON or XML format).
     */
    TheURLIsTheRESTfulOrOtherKindOfAPIThatCanAccessToTheResult: new Coding({
        display: "The URL is the RESTful or other kind of API that can access to the result.",
        code: "openapi",
        system: "http://hl7.org/fhir/repository-type",
    }),
    /**
     * other: Some other complicated or particular way to get resource from URL.
     */
    SomeOtherComplicatedOrParticularWayToGetResourceFromURL: new Coding({
        display: "Some other complicated or particular way to get resource from URL.",
        code: "other",
        system: "http://hl7.org/fhir/repository-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb3NpdG9yeVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZXBvc2l0b3J5VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBRXBFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ25DOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsNkNBQTZDLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEQsT0FBTyxFQUFFLHdEQUF3RDtRQUNqRSxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gseUZBQXlGLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEcsT0FBTyxFQUFFLGdIQUFnSDtRQUN6SCxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsMERBQTBELEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckUsT0FBTyxFQUFFLDRFQUE0RTtRQUNyRixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsdURBQXVELEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEUsT0FBTyxFQUFFLG9FQUFvRTtRQUM3RSxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcmVwb3NpdG9yeS10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGZvciBhY2Nlc3Mgb2YgZXh0ZXJuYWwgVVJJLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFJlcG9zaXRvcnlUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBkaXJlY3RsaW5rOiBXaGVuIFVSTCBpcyBjbGlja2VkLCB0aGUgcmVzb3VyY2UgY2FuIGJlIHNlZW4gZGlyZWN0bHkgKGJ5IHdlYnBhZ2Ugb3IgYnkgZG93bmxvYWQgbGluayBmb3JtYXQpLlxyXG4gICAqL1xyXG4gIENsaWNrQW5kU2VlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2xpY2sgYW5kIHNlZVwiLFxyXG4gICAgY29kZTogXCJkaXJlY3RsaW5rXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXBvc2l0b3J5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBsb2dpbjogV2hlbiBsb2dnZWQgaW50byB0aGUgd2Vic2l0ZSwgdGhlIHJlc291cmNlIGNhbiBiZSBzZWVuLlxyXG4gICAqL1xyXG4gIFJlc3VsdENhbm5vdEJlQWNjZXNzVW5sZXNzQW5BY2NvdW50SXNMb2dnZWRJbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlc3VsdCBjYW5ub3QgYmUgYWNjZXNzIHVubGVzcyBhbiBhY2NvdW50IGlzIGxvZ2dlZCBpblwiLFxyXG4gICAgY29kZTogXCJsb2dpblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVwb3NpdG9yeS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb2F1dGg6IFdoZW4gbG9nZ2VkIGluIGFuZCAgZm9sbG93IHRoZSBBUEkgaW4gdGhlIHdlYnNpdGUgcmVsYXRlZCB3aXRoIFVSTCwgdGhlIHJlc291cmNlIGNhbiBiZSBzZWVuLlxyXG4gICAqL1xyXG4gIFJlc3VsdE5lZWRUb0JlRmV0Y2hlZFdpdGhBUElBbmROZWVkTE9HSU5PckNvb2tpZXNBcmVSZXF1aXJlZFdoZW5WaXNpdGluZ1RoZUxpbmtPZlJlc291cmNlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmVzdWx0IG5lZWQgdG8gYmUgZmV0Y2hlZCB3aXRoIEFQSSBhbmQgbmVlZCBMT0dJTiggb3IgY29va2llcyBhcmUgcmVxdWlyZWQgd2hlbiB2aXNpdGluZyB0aGUgbGluayBvZiByZXNvdXJjZSlcIixcclxuICAgIGNvZGU6IFwib2F1dGhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcG9zaXRvcnktdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG9wZW5hcGk6IFdoZW4gdGhlIEFQSSBtZXRob2QgKGUuZy4gW2Jhc2VfdXJsXS9bcGFyYW1ldGVyXSkgcmVsYXRlZCB3aXRoIHRoZSBVUkwgb2YgdGhlIHdlYnNpdGUgaXMgZXhlY3V0ZWQsIHRoZSByZXNvdXJjZSBjYW4gYmUgc2VlbiBkaXJlY3RseSAodXN1YWxseSBpbiBKU09OIG9yIFhNTCBmb3JtYXQpLlxyXG4gICAqL1xyXG4gIFRoZVVSTElzVGhlUkVTVGZ1bE9yT3RoZXJLaW5kT2ZBUElUaGF0Q2FuQWNjZXNzVG9UaGVSZXN1bHQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUaGUgVVJMIGlzIHRoZSBSRVNUZnVsIG9yIG90aGVyIGtpbmQgb2YgQVBJIHRoYXQgY2FuIGFjY2VzcyB0byB0aGUgcmVzdWx0LlwiLFxyXG4gICAgY29kZTogXCJvcGVuYXBpXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXBvc2l0b3J5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBvdGhlcjogU29tZSBvdGhlciBjb21wbGljYXRlZCBvciBwYXJ0aWN1bGFyIHdheSB0byBnZXQgcmVzb3VyY2UgZnJvbSBVUkwuXHJcbiAgICovXHJcbiAgU29tZU90aGVyQ29tcGxpY2F0ZWRPclBhcnRpY3VsYXJXYXlUb0dldFJlc291cmNlRnJvbVVSTDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNvbWUgb3RoZXIgY29tcGxpY2F0ZWQgb3IgcGFydGljdWxhciB3YXkgdG8gZ2V0IHJlc291cmNlIGZyb20gVVJMLlwiLFxyXG4gICAgY29kZTogXCJvdGhlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVwb3NpdG9yeS10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgYWNjZXNzIG9mIGV4dGVybmFsIFVSSS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFJlcG9zaXRvcnlUeXBlQ29kaW5nVHlwZSA9IHR5cGVvZiBSZXBvc2l0b3J5VHlwZUNvZGluZ3M7XHJcbiJdfQ==