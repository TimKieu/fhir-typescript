// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/consent-state-codes|4.0.1
/**
 * Indicates the state of the consent.
 */
export const ConsentStateCodings = {
    /**
     * active: The consent is to be followed and enforced.
     */
    Active: {
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * draft: The consent is in development or awaiting use but is not yet intended to be acted upon.
     */
    Pending: {
        display: "Pending",
        code: "draft",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * entered-in-error: The consent was created wrongly (e.g. wrong patient) and should be ignored.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * inactive: The consent is terminated or replaced.
     */
    Inactive: {
        display: "Inactive",
        code: "inactive",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * proposed: The consent has been proposed but not yet agreed to by all parties. The negotiation stage.
     */
    Proposed: {
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
    /**
     * rejected: The consent has been rejected by one or more of the parties.
     */
    Rejected: {
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/consent-state-codes",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc2VudFN0YXRlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uc2VudFN0YXRlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx3RUFBd0U7QUFrQ3hFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQTBCO0lBQ3hEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb25zZW50LXN0YXRlLWNvZGVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29uc2VudC5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbnNlbnRTdGF0ZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYWN0aXZlOiBUaGUgY29uc2VudCBpcyB0byBiZSBmb2xsb3dlZCBhbmQgZW5mb3JjZWQuXHJcbiAgICovXHJcbiAgQWN0aXZlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRyYWZ0OiBUaGUgY29uc2VudCBpcyBpbiBkZXZlbG9wbWVudCBvciBhd2FpdGluZyB1c2UgYnV0IGlzIG5vdCB5ZXQgaW50ZW5kZWQgdG8gYmUgYWN0ZWQgdXBvbi5cclxuICAgKi9cclxuICBQZW5kaW5nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBjb25zZW50IHdhcyBjcmVhdGVkIHdyb25nbHkgKGUuZy4gd3JvbmcgcGF0aWVudCkgYW5kIHNob3VsZCBiZSBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluYWN0aXZlOiBUaGUgY29uc2VudCBpcyB0ZXJtaW5hdGVkIG9yIHJlcGxhY2VkLlxyXG4gICAqL1xyXG4gIEluYWN0aXZlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHByb3Bvc2VkOiBUaGUgY29uc2VudCBoYXMgYmVlbiBwcm9wb3NlZCBidXQgbm90IHlldCBhZ3JlZWQgdG8gYnkgYWxsIHBhcnRpZXMuIFRoZSBuZWdvdGlhdGlvbiBzdGFnZS5cclxuICAgKi9cclxuICBQcm9wb3NlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWplY3RlZDogVGhlIGNvbnNlbnQgaGFzIGJlZW4gcmVqZWN0ZWQgYnkgb25lIG9yIG1vcmUgb2YgdGhlIHBhcnRpZXMuXHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhlIHN0YXRlIG9mIHRoZSBjb25zZW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvbnNlbnRTdGF0ZUNvZGluZ3M6Q29uc2VudFN0YXRlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSBjb25zZW50IGlzIHRvIGJlIGZvbGxvd2VkIGFuZCBlbmZvcmNlZC5cclxuICAgKi9cclxuICBBY3RpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiQWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImFjdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IFRoZSBjb25zZW50IGlzIGluIGRldmVsb3BtZW50IG9yIGF3YWl0aW5nIHVzZSBidXQgaXMgbm90IHlldCBpbnRlbmRlZCB0byBiZSBhY3RlZCB1cG9uLlxyXG4gICAqL1xyXG4gIFBlbmRpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiUGVuZGluZ1wiLFxyXG4gICAgY29kZTogXCJkcmFmdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIGNvbnNlbnQgd2FzIGNyZWF0ZWQgd3JvbmdseSAoZS5nLiB3cm9uZyBwYXRpZW50KSBhbmQgc2hvdWxkIGJlIGlnbm9yZWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBpbiBFcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LXN0YXRlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbmFjdGl2ZTogVGhlIGNvbnNlbnQgaXMgdGVybWluYXRlZCBvciByZXBsYWNlZC5cclxuICAgKi9cclxuICBJbmFjdGl2ZToge1xyXG4gICAgZGlzcGxheTogXCJJbmFjdGl2ZVwiLFxyXG4gICAgY29kZTogXCJpbmFjdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zZWQ6IFRoZSBjb25zZW50IGhhcyBiZWVuIHByb3Bvc2VkIGJ1dCBub3QgeWV0IGFncmVlZCB0byBieSBhbGwgcGFydGllcy4gVGhlIG5lZ290aWF0aW9uIHN0YWdlLlxyXG4gICAqL1xyXG4gIFByb3Bvc2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3Bvc2VkXCIsXHJcbiAgICBjb2RlOiBcInByb3Bvc2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LXN0YXRlLWNvZGVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByZWplY3RlZDogVGhlIGNvbnNlbnQgaGFzIGJlZW4gcmVqZWN0ZWQgYnkgb25lIG9yIG1vcmUgb2YgdGhlIHBhcnRpZXMuXHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVqZWN0ZWRcIixcclxuICAgIGNvZGU6IFwicmVqZWN0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=