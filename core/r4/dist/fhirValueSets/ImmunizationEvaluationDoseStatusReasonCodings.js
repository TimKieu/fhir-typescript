// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-evaluation-dose-status-reason|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the reason why an administered dose has been assigned a particular status. Often, this reason describes why a dose is considered invalid. This value set is provided as a suggestive example.
 */
export const ImmunizationEvaluationDoseStatusReasonCodings = {
    /**
     * advstorage: The product was stored in a manner inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product.
     */
    AdverseStorageCondition: new Coding({
        display: "Adverse storage condition",
        code: "advstorage",
        system: "http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status-reason",
    }),
    /**
     * coldchbrk: The product was stored at a temperature inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product.
     */
    ColdChainBreak: new Coding({
        display: "Cold chain break",
        code: "coldchbrk",
        system: "http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status-reason",
    }),
    /**
     * explot: The product was administered after the expiration date associated with lot of vaccine.
     */
    ExpiredLot: new Coding({
        display: "Expired lot",
        code: "explot",
        system: "http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status-reason",
    }),
    /**
     * outsidesched: The product was administered at a time inconsistent with the documented schedule.
     */
    AdministeredOutsideRecommendedSchedule: new Coding({
        display: "Administered outside recommended schedule",
        code: "outsidesched",
        system: "http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status-reason",
    }),
    /**
     * prodrecall: The product administered has been recalled by the manufacturer.
     */
    ProductRecall: new Coding({
        display: "Product recall",
        code: "prodrecall",
        system: "http://terminology.hl7.org/CodeSystem/immunization-evaluation-dose-status-reason",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uRXZhbHVhdGlvbkRvc2VTdGF0dXNSZWFzb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JbW11bml6YXRpb25FdmFsdWF0aW9uRG9zZVN0YXR1c1JlYXNvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0ZBQStGO0FBRS9GLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDZDQUE2QyxHQUFHO0lBQzNEOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEMsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0ZBQWtGO0tBQzNGLENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrRkFBa0Y7S0FDM0YsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLGtGQUFrRjtLQUMzRixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxzQ0FBc0MsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqRCxPQUFPLEVBQUUsMkNBQTJDO1FBQ3BELElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSxrRkFBa0Y7S0FDM0YsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLGtGQUFrRjtLQUMzRixDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9pbW11bml6YXRpb24tZXZhbHVhdGlvbi1kb3NlLXN0YXR1cy1yZWFzb258NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB2YWx1ZSBzZXQgdG8gaW5zdGFudGlhdGUgdGhpcyBhdHRyaWJ1dGUgc2hvdWxkIGJlIGRyYXduIGZyb20gYSB0ZXJtaW5vbG9naWNhbGx5IHJvYnVzdCBjb2RlIHN5c3RlbSB0aGF0IGNvbnNpc3RzIG9mIG9yIGNvbnRhaW5zIGNvbmNlcHRzIHRvIHN1cHBvcnQgZGVzY3JpYmluZyB0aGUgcmVhc29uIHdoeSBhbiBhZG1pbmlzdGVyZWQgZG9zZSBoYXMgYmVlbiBhc3NpZ25lZCBhIHBhcnRpY3VsYXIgc3RhdHVzLiBPZnRlbiwgdGhpcyByZWFzb24gZGVzY3JpYmVzIHdoeSBhIGRvc2UgaXMgY29uc2lkZXJlZCBpbnZhbGlkLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJbW11bml6YXRpb25FdmFsdWF0aW9uRG9zZVN0YXR1c1JlYXNvbkNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYWR2c3RvcmFnZTogVGhlIHByb2R1Y3Qgd2FzIHN0b3JlZCBpbiBhIG1hbm5lciBpbmNvbnNpc3RlbnQgd2l0aCBtYW51ZmFjdHVyZXIgZ3VpZGVsaW5lcyBwb3RlbnRpYWxseSByZWR1Y2luZyB0aGUgZWZmZWN0aXZlbmVzcyBvZiB0aGUgcHJvZHVjdC5cclxuICAgKi9cclxuICBBZHZlcnNlU3RvcmFnZUNvbmRpdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFkdmVyc2Ugc3RvcmFnZSBjb25kaXRpb25cIixcclxuICAgIGNvZGU6IFwiYWR2c3RvcmFnZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLWV2YWx1YXRpb24tZG9zZS1zdGF0dXMtcmVhc29uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogY29sZGNoYnJrOiBUaGUgcHJvZHVjdCB3YXMgc3RvcmVkIGF0IGEgdGVtcGVyYXR1cmUgaW5jb25zaXN0ZW50IHdpdGggbWFudWZhY3R1cmVyIGd1aWRlbGluZXMgcG90ZW50aWFsbHkgcmVkdWNpbmcgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgdGhlIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgQ29sZENoYWluQnJlYWs6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb2xkIGNoYWluIGJyZWFrXCIsXHJcbiAgICBjb2RlOiBcImNvbGRjaGJya1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vaW1tdW5pemF0aW9uLWV2YWx1YXRpb24tZG9zZS1zdGF0dXMtcmVhc29uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZXhwbG90OiBUaGUgcHJvZHVjdCB3YXMgYWRtaW5pc3RlcmVkIGFmdGVyIHRoZSBleHBpcmF0aW9uIGRhdGUgYXNzb2NpYXRlZCB3aXRoIGxvdCBvZiB2YWNjaW5lLlxyXG4gICAqL1xyXG4gIEV4cGlyZWRMb3Q6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFeHBpcmVkIGxvdFwiLFxyXG4gICAgY29kZTogXCJleHBsb3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2ltbXVuaXphdGlvbi1ldmFsdWF0aW9uLWRvc2Utc3RhdHVzLXJlYXNvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG91dHNpZGVzY2hlZDogVGhlIHByb2R1Y3Qgd2FzIGFkbWluaXN0ZXJlZCBhdCBhIHRpbWUgaW5jb25zaXN0ZW50IHdpdGggdGhlIGRvY3VtZW50ZWQgc2NoZWR1bGUuXHJcbiAgICovXHJcbiAgQWRtaW5pc3RlcmVkT3V0c2lkZVJlY29tbWVuZGVkU2NoZWR1bGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBZG1pbmlzdGVyZWQgb3V0c2lkZSByZWNvbW1lbmRlZCBzY2hlZHVsZVwiLFxyXG4gICAgY29kZTogXCJvdXRzaWRlc2NoZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2ltbXVuaXphdGlvbi1ldmFsdWF0aW9uLWRvc2Utc3RhdHVzLXJlYXNvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHByb2RyZWNhbGw6IFRoZSBwcm9kdWN0IGFkbWluaXN0ZXJlZCBoYXMgYmVlbiByZWNhbGxlZCBieSB0aGUgbWFudWZhY3R1cmVyLlxyXG4gICAqL1xyXG4gIFByb2R1Y3RSZWNhbGw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQcm9kdWN0IHJlY2FsbFwiLFxyXG4gICAgY29kZTogXCJwcm9kcmVjYWxsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9pbW11bml6YXRpb24tZXZhbHVhdGlvbi1kb3NlLXN0YXR1cy1yZWFzb25cIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIHJlYXNvbiB3aHkgYW4gYWRtaW5pc3RlcmVkIGRvc2UgaGFzIGJlZW4gYXNzaWduZWQgYSBwYXJ0aWN1bGFyIHN0YXR1cy4gT2Z0ZW4sIHRoaXMgcmVhc29uIGRlc2NyaWJlcyB3aHkgYSBkb3NlIGlzIGNvbnNpZGVyZWQgaW52YWxpZC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJbW11bml6YXRpb25FdmFsdWF0aW9uRG9zZVN0YXR1c1JlYXNvbkNvZGluZ1R5cGUgPSB0eXBlb2YgSW1tdW5pemF0aW9uRXZhbHVhdGlvbkRvc2VTdGF0dXNSZWFzb25Db2RpbmdzO1xyXG4iXX0=