// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-interpretation|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A categorical assessment, providing a rough qualitative interpretation of the observation value,    such as “normal”/ “abnormal”,”low” / “high”, “better” / “worse”, “susceptible” / “resistant”, “expected”/ “not expected”.    The value set is intended to be for ANY use where coded representation of an interpretation is needed.
 *
 *    Notes:
 *
 *    This is being communicated in v2.x in OBX-8 (Observation Interpretation), in v3 in ObservationInterpretation (CWE) in R1 (Representative Realm) and in FHIR in    Observation.interpretation. Historically these values come from the laboratory domain, and these codes are extensively    used. The value set binding is extensible, so codes outside the value set that are needed for interpretation concepts    (i.e. particular meanings) that are not included in the value set can be used, and these new codes may also be added to    the value set and published in a future version.
 */
export const ObservationInterpretationCodings = {
    /**
     * _GeneticObservationInterpretation: Codes that specify interpretation of genetic analysis, such as "positive", "negative", "carrier", "responsive", etc.
     */
    GeneticObservationInterpretation: new Coding({
        display: "GeneticObservationInterpretation",
        code: "_GeneticObservationInterpretation",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * _ObservationInterpretationChange: Interpretations of change of quantity and/or severity. At most one of B or W and one of U or D allowed.
     */
    ObservationInterpretationChange: new Coding({
        display: "ObservationInterpretationChange",
        code: "_ObservationInterpretationChange",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * _ObservationInterpretationExceptions: Technical exceptions resulting in the inability to provide an interpretation. At most one allowed. Does not imply normality or severity.
     */
    ObservationInterpretationExceptions: new Coding({
        display: "ObservationInterpretationExceptions",
        code: "_ObservationInterpretationExceptions",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * _ObservationInterpretationNormality: Interpretation of normality or degree of abnormality (including critical or "alert" level). Concepts in this category are mutually exclusive, i.e., at most one is allowed.
     */
    ObservationInterpretationNormality: new Coding({
        display: "ObservationInterpretationNormality",
        code: "_ObservationInterpretationNormality",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * _ObservationInterpretationSusceptibility: Interpretations of anti-microbial susceptibility testing results (microbiology). At most one allowed.
     */
    ObservationInterpretationSusceptibility: new Coding({
        display: "ObservationInterpretationSusceptibility",
        code: "_ObservationInterpretationSusceptibility",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * &lt;: The result is below the minimum detection limit (the test procedure or equipment is the limiting factor).
     *
     *                         Synonyms: Below analytical limit, low off scale.
     */
    OffScaleLow: new Coding({
        display: "Off scale low",
        code: "<",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * &gt;: The result is above the maximum quantifiable limit (the test procedure or equipment is the limiting factor).
     *
     *                         Synonyms: Above analytical limit, high off scale.
     */
    OffScaleHigh: new Coding({
        display: "Off scale high",
        code: ">",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * A: The result or observation value is outside the reference range or expected norm (as defined for the respective test procedure).
     *
     *                         [Note: Typically applies to non-numeric results.]
     */
    Abnormal: new Coding({
        display: "Abnormal",
        code: "A",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * AA: The result or observation value is outside a reference range or expected norm at a level at which immediate action should be considered for patient safety (as defined for the respective test procedure).
     *
     *                         [Note: Typically applies to non-numeric results.  Analogous to critical/panic limits for numeric results.]
     */
    CriticalAbnormal: new Coding({
        display: "Critical abnormal",
        code: "AA",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * B: The current result or observation value has improved compared to the previous result or observation value (the change is significant as defined in the respective test procedure).
     *
     *                         [Note: This can be applied to quantitative or qualitative observations.]
     */
    Better: new Coding({
        display: "Better",
        code: "B",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * CAR: The patient is considered as carrier based on the testing results. A carrier is an individual who carries an altered form of a gene which can lead to having a child or offspring in future generations with a genetic disorder.
     */
    Carrier: new Coding({
        display: "Carrier",
        code: "CAR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * D: The current result has decreased from the previous result for a quantitative observation (the change is significant as defined in the respective test procedure).
     */
    SignificantChangeDown: new Coding({
        display: "Significant change down",
        code: "D",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * DET: The measurement of the specified component / analyte, organism or clinical sign above the limit of detection of the performed test or procedure.
     */
    Detected: new Coding({
        display: "Detected",
        code: "DET",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * E: The test or procedure was successfully performed, but the results are borderline and can neither be declared positive / negative nor detected / not detected according to the current established criteria.
     */
    Equivocal: new Coding({
        display: "Equivocal",
        code: "E",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * EX: The observation/test result is interpreted as being outside the inclusion range for a particular protocol within which the result is being reported.
     *
     *                         Example: A positive result on a Hepatitis screening test.
     *                            Open Issue: EX, HX, LX: These three concepts do not seem to meet a clear need in the vocabulary, and their use in observation interpretation appears likely to be covered by other existing concepts (e.g., A, H, L).  The only apparent significant difference is their reference to use in protocols for exclusion of study subjects.
     * These concepts/codes were proposed by RCRIM for use in the CTLaboratory message.  They were submitted and approved in the November 2005 Harmonization cycle in proposal "030103C_VOCAB_RCRIM_l_quade_RCRIM Obs Interp_20051028154455".  However, this proposal was not fully implemented in the vocabulary.  The proposal recommended creation of the x_ClinicalResearchExclusion domain in ObservationInterpretation with a value set including those three concepts/codes, but there is no subdomain of that name or equivalent with a binding to either of the value sets that contain these concepts/codes.
     * Members of the OO WG have recently attempted to contact members of RCRIM regarding these concepts, both by email and at the recent WGM in Atlanta, without response.  It is felt by OO that the best course of action to take at this time is to add this comprehensive Open Issue rather than deprecate these three concepts at this time, until further discussion is held.
     */
    OutsideThreshold: new Coding({
        display: "outside threshold",
        code: "EX",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * EXP: This result has been evaluated in light of known contraindicators.  Once those contraindicators have been taken into account the result is determined to be "Expected"  (e.g., presence of drugs in a patient that is taking prescription medication for pain management).
     */
    Expected: new Coding({
        display: "Expected",
        code: "EXP",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * H: The result for a quantitative observation is above the upper limit of the reference range (as defined for the respective test procedure).
     *
     *                         Synonym: Above high normal
     */
    High: new Coding({
        display: "High",
        code: "H",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * HH: The result for a quantitative observation is above a reference level at which immediate action should be considered for patient safety (as defined for the respective test procedure).
     *
     *                         Synonym: Above upper panic limits.
     */
    CriticalHigh: new Coding({
        display: "Critical high",
        code: "HH",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * HU: A test result that is significantly higher than the reference (normal) or therapeutic interval, but has not reached the critically high value and might need special attention, as defined by the laboratory or the clinician.
     */
    SignificantlyHigh: new Coding({
        display: "Significantly high",
        code: "HU",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * HX: The observation/test result is interpreted as being outside the inclusion range for a particular protocol within which the result is being reported.
     *
     *                         Example: A positive result on a Hepatitis screening test.
     *                            Open Issue: EX, HX, LX: These three concepts do not seem to meet a clear need in the vocabulary, and their use in observation interpretation appears likely to be covered by other existing concepts (e.g., A, H, L).  The only apparent significant difference is their reference to use in protocols for exclusion of study subjects.  These concepts/codes were proposed by RCRIM for use in the CTLaboratory message.  They were submitted and approved in the November 2005 Harmonization cycle in proposal "030103C_VOCAB_RCRIM_l_quade_RCRIM Obs Interp_20051028154455". However, this proposal was not fully implemented in the vocabulary.  The proposal recommended creation of the x_ClinicalResearchExclusion domain in ObservationInterpretation with a value set including those three concepts/codes, but there is no subdomain of that name or equivalent with a binding to either of the value sets that contain these concepts/codes.  Members of the OO WG have recently attempted to contact members of RCRIM regarding these concepts, both by email and at the recent WGM in Atlanta, without response.  It is felt by OO that the best course of action to take at this time is to add this comprehensive Open Issue rather than deprecate these three concepts at this time, until further discussion is held.
     */
    AboveHighThreshold: new Coding({
        display: "above high threshold",
        code: "HX",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * I: Bacterial strain inhibited in vitro by a concentration of an antimicrobial agent that is associated with uncertain therapeutic effect. Reference: CLSI (http://www.clsi.org/Content/NavigationMenu/Resources/HarmonizedTerminologyDatabase/Harmonized_Terminolo.htm)
     * Projects: ISO 20776-1, ISO 20776-2
     *
     *                         [Note 1: Bacterial strains are categorized as intermediate by applying the appropriate breakpoints in a defined phenotypic test system.]
     *
     *                         [Note 2: This class of susceptibility implies that an infection due to the isolate can be appropriately treated in body sites where the drugs are physiologically concentrated or when a high dosage of drug can be used.]
     *
     *                         [Note 3: This class also indicates a "buffer zone," to prevent small, uncontrolled, technical factors from causing major discrepancies in interpretations.]
     *
     *                         [Note 4: These breakpoints can be altered due to changes in circumstances (e.g., changes in commonly used drug dosages, emergence of new resistance mechanisms).]
     */
    Intermediate: new Coding({
        display: "Intermediate",
        code: "I",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * IE: There is insufficient evidence that the species in question is a good target for therapy with the drug.  A categorical interpretation is not possible.
     *
     *                         [Note: A MIC with "IE" and/or a comment may be reported (without an accompanying S, I or R-categorization).]
     */
    InsufficientEvidence: new Coding({
        display: "Insufficient evidence",
        code: "IE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * IND: The specified component / analyte, organism or clinical sign could neither be declared positive / negative nor detected / not detected by the performed test or procedure.
     *
     *
     *                            Usage Note: For example, if the specimen was degraded, poorly processed, or was missing the required anatomic structures, then "indeterminate" (i.e. "cannot be determined") is the appropriate response, not "equivocal".
     */
    Indeterminate: new Coding({
        display: "Indeterminate",
        code: "IND",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * L: The result for a quantitative observation is below the lower limit of the reference range (as defined for the respective test procedure).
     *
     *                         Synonym: Below low normal
     */
    Low: new Coding({
        display: "Low",
        code: "L",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * LL: The result for a quantitative observation is below a reference level at which immediate action should be considered for patient safety (as defined for the respective test procedure).
     *
     *                         Synonym: Below lower panic limits.
     */
    CriticalLow: new Coding({
        display: "Critical low",
        code: "LL",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * LU: A test result that is significantly lower than the reference (normal) or therapeutic interval, but has not reached the critically low value and might need special attention, as defined by the laboratory or the clinician.
     */
    SignificantlyLow: new Coding({
        display: "Significantly low",
        code: "LU",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * LX: The numeric observation/test result is interpreted as being below the low threshold value for a particular protocol within which the result is being reported.
     *
     *                         Example: A Total White Blood Cell Count falling below a protocol-defined threshold value of 3000/mm^3
     *                            Open Issue: EX, HX, LX: These three concepts do not seem to meet a clear need in the vocabulary, and their use in observation interpretation appears likely to be covered by other existing concepts (e.g., A, H, L).  The only apparent significant difference is their reference to use in protocols for exclusion of study subjects.  These concepts/codes were proposed by RCRIM for use in the CTLaboratory message.  They were submitted and approved in the November 2005 Harmonization cycle in proposal "030103C_VOCAB_RCRIM_l_quade_RCRIM Obs Interp_20051028154455".  However, this proposal was not fully implemented in the vocabulary.  The proposal recommended creation of the x_ClinicalResearchExclusion domain in ObservationInterpretation with a value set including those three concepts/codes, but there is no subdomain of that name or equivalent with a binding to either of the value sets that contain these concepts/codes.  Members of the OO WG have recently attempted to contact members of RCRIM regarding these concepts, both by email and at the recent WGM in Atlanta, without response.  It is felt by OO that the best course of action to take at this time is to add this comprehensive Open Issue rather than deprecate these three concepts at this time, until further discussion is held.
     */
    BelowLowThreshold: new Coding({
        display: "below low threshold",
        code: "LX",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * N: The result or observation value is within the reference range or expected norm (as defined for the respective test procedure).
     *
     *                         [Note: Applies to numeric or non-numeric results.]
     */
    Normal: new Coding({
        display: "Normal",
        code: "N",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * NCL: Use when not enough clinical trial data published by the Clinical and Laboratory Standards Institutes (CLSI) is available to establish the breakpoints for susceptible / intermediate and resistant.
     */
    NoCLSIDefinedBreakpoint: new Coding({
        display: "No CLSI defined breakpoint",
        code: "NCL",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * ND: The presence of the specified component / analyte, organism or clinical sign could not be determined within the limit of detection of the performed test or procedure.
     */
    NotDetected: new Coding({
        display: "Not detected",
        code: "ND",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * NEG: An absence finding of the specified component / analyte, organism or clinical sign based on the established threshold of the performed test or procedure.
     *
     *                         [Note: Negative does not necessarily imply the complete absence of the specified item.]
     */
    Negative: new Coding({
        display: "Negative",
        code: "NEG",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * NR: An absence finding used to indicate that the specified component / analyte did not react measurably with the reagent.
     */
    NonReactive: new Coding({
        display: "Non-reactive",
        code: "NR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * NS: A category used for isolates for which only a susceptible interpretive criterion has been designated because of the absence or rare occurrence of resistant strains. Isolates that have MICs above or zone diameters below the value indicated for the susceptible breakpoint should be reported as non-susceptible.
     *
     *                         NOTE 1: An isolate that is interpreted as non-susceptible does not necessarily mean that the isolate has a resistance mechanism. It is possible that isolates with MICs above the susceptible breakpoint that lack resistance mechanisms may be encountered within the wild-type distribution subsequent to the time the susceptible-only breakpoint is set.
     *
     *                         NOTE 2: For strains yielding results in the "nonsusceptible" category, organism identification and antimicrobial susceptibility test results should be confirmed.
     *
     *                         Synonym: decreased susceptibility.
     */
    NonSusceptible: new Coding({
        display: "Non-susceptible",
        code: "NS",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * ObservationInterpretationDetection: Interpretations of the presence or absence of a component / analyte or organism in a test or of a sign in a clinical observation. In keeping with laboratory data processing practice, these concepts provide a categorical interpretation of the "meaning" of the quantitative value for the same observation.
     */
    ObservationInterpretationDetection: new Coding({
        display: "ObservationInterpretationDetection",
        code: "ObservationInterpretationDetection",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * ObservationInterpretationExpectation: Interpretation of the observed result taking into account additional information (contraindicators) about the patient's situation. Concepts in this category are mutually exclusive, i.e., at most one is allowed.
     */
    ObservationInterpretationExpectation: new Coding({
        display: "ObservationInterpretationExpectation",
        code: "ObservationInterpretationExpectation",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * POS: A presence finding of the specified component / analyte, organism or clinical sign based on the established threshold of the performed test or procedure.
     */
    Positive: new Coding({
        display: "Positive",
        code: "POS",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * R: Bacterial strain inhibited in vitro by a concentration of an antimicrobial agent that is associated with a high likelihood of therapeutic failure.
     * Reference: CLSI (http://www.clsi.org/Content/NavigationMenu/Resources/HarmonizedTerminologyDatabase/Harmonized_Terminolo.htm)
     * Projects: ISO 20776-1, ISO 20776-2
     *
     *                         [Note 1: Bacterial strains are categorized as resistant by applying the appropriate breakpoints in a defined phenotypic test system.]
     *
     *                         [Note 2: This breakpoint can be altered due to changes in circumstances (e.g., changes in commonly used drug dosages, emergence of new resistance mechanisms).]
     */
    Resistant: new Coding({
        display: "Resistant",
        code: "R",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * ReactivityObservationInterpretation: Interpretations of the presence and level of reactivity of the specified component / analyte with the reagent in the performed laboratory test.
     */
    ReactivityObservationInterpretation: new Coding({
        display: "ReactivityObservationInterpretation",
        code: "ReactivityObservationInterpretation",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * RR: A presence finding used to indicate that the specified component / analyte reacted with the reagent above the reliably measurable limit of the performed test.
     */
    Reactive: new Coding({
        display: "Reactive",
        code: "RR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * S: Bacterial strain inhibited by in vitro concentration of an antimicrobial agent that is associated with a high likelihood of therapeutic success.
     * Reference: CLSI (http://www.clsi.org/Content/NavigationMenu/Resources/HarmonizedTerminologyDatabase/Harmonized_Terminolo.htm)
     * Synonym (earlier term): Sensitive Projects: ISO 20776-1, ISO 20776-2
     *
     *                         [Note 1: Bacterial strains are categorized as susceptible by applying the appropriate breakpoints in a defined phenotypic system.]
     *
     *                         [Note 2: This breakpoint can be altered due to changes in circumstances (e.g., changes in commonly used drug dosages, emergence of new resistance mechanisms).]
     */
    Susceptible: new Coding({
        display: "Susceptible",
        code: "S",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * SDD: A category that includes isolates with antimicrobial agent minimum inhibitory concentrations (MICs) that approach usually attainable blood and tissue levels and for which response rates may be lower than for susceptible isolates.
     *
     *                         Reference: CLSI document M44-A2 2009 "Method for antifungal disk diffusion susceptibility testing of yeasts; approved guideline - second edition" - page 2.
     */
    SusceptibleDoseDependent: new Coding({
        display: "Susceptible-dose dependent",
        code: "SDD",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * SYN-R: A category for isolates where the bacteria (e.g. enterococci) are not susceptible in vitro to a combination therapy (e.g., high-level aminoglycoside and cell wall active agent).  This is predictive that this combination therapy will not be effective.
     *
     *
     *                            Usage Note: Since the use of penicillin or ampicillin alone often results in treatment failure of serious enterococcal or other bacterial infections, combination therapy is usually indicated to enhance bactericidal activity. The synergy between a cell wall active agent (such as penicillin, ampicillin, or vancomycin) and an aminoglycoside (such as gentamicin, kanamycin or streptomycin) is best predicted by screening for high-level bacterial resistance to the aminoglycoside.
     *
     *
     *                            Open Issue: The print name of the code is very general and the description is very specific to a pair of classes of agents, which may lead to confusion of these concepts in the future should other synergies be found.
     */
    SynergyResistant: new Coding({
        display: "Synergy - resistant",
        code: "SYN-R",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * SYN-S: A category for isolates where the bacteria (e.g. enterococci) are susceptible in vitro to a combination therapy (e.g., high-level aminoglycoside and cell wall active agent).  This is predictive that this combination therapy will be effective.
     *
     *
     *                            Usage Note: Since the use of penicillin or ampicillin alone often results in treatment failure of serious enterococcal or other bacterial infections, combination therapy is usually indicated to enhance bactericidal activity. The synergy between a cell wall active agent (such as penicillin, ampicillin, or vancomycin) and an aminoglycoside (such as gentamicin, kanamycin or streptomycin) is best predicted by screening for high-level bacterial resistance to the aminoglycoside.
     *
     *
     *                            Open Issue: The print name of the code is very general and the description is very specific to a pair of classes of agents, which may lead to confusion of these concepts in the future should other synergies be found.
     */
    SynergySusceptible: new Coding({
        display: "Synergy - susceptible",
        code: "SYN-S",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * U: The current result has increased from the previous result for a quantitative observation (the change is significant as defined in the respective test procedure).
     */
    SignificantChangeUp: new Coding({
        display: "Significant change up",
        code: "U",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * UNE: This result has been evaluated in light of known contraindicators.  Once those contraindicators have been taken into account the result is determined to be "Unexpected" (e.g., presence of non-prescribed drugs in a patient that is taking prescription medication for pain management).
     */
    Unexpected: new Coding({
        display: "Unexpected",
        code: "UNE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * W: The current result or observation value has degraded compared to the previous result or observation value (the change is significant as defined in the respective test procedure).
     *
     *                         [Note: This can be applied to quantitative or qualitative observations.]
     */
    Worse: new Coding({
        display: "Worse",
        code: "W",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
    /**
     * WR: A weighted presence finding used to indicate that the specified component / analyte reacted with the reagent, but below the reliably measurable limit of the performed test.
     */
    WeaklyReactive: new Coding({
        display: "Weakly reactive",
        code: "WR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL09ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLCtFQUErRTtBQUUvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUc7SUFDOUM7O09BRUc7SUFDSCxnQ0FBZ0MsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMzQyxPQUFPLEVBQUUsa0NBQWtDO1FBQzNDLElBQUksRUFBRSxtQ0FBbUM7UUFDekMsTUFBTSxFQUFFLG9FQUFvRTtLQUM3RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCwrQkFBK0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQyxPQUFPLEVBQUUsaUNBQWlDO1FBQzFDLElBQUksRUFBRSxrQ0FBa0M7UUFDeEMsTUFBTSxFQUFFLG9FQUFvRTtLQUM3RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxtQ0FBbUMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM5QyxPQUFPLEVBQUUscUNBQXFDO1FBQzlDLElBQUksRUFBRSxzQ0FBc0M7UUFDNUMsTUFBTSxFQUFFLG9FQUFvRTtLQUM3RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxrQ0FBa0MsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM3QyxPQUFPLEVBQUUsb0NBQW9DO1FBQzdDLElBQUksRUFBRSxxQ0FBcUM7UUFDM0MsTUFBTSxFQUFFLG9FQUFvRTtLQUM3RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCx1Q0FBdUMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsRCxPQUFPLEVBQUUseUNBQXlDO1FBQ2xELElBQUksRUFBRSwwQ0FBMEM7UUFDaEQsTUFB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QUFDO1FBQzdCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsb0VBQW9FO0tBQzdFLENBQUM7SUFDRjs7T0FFRztJQUNILG1CQUFtQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzlCLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLEdBQUc7UUFDVCxNQUFNLEVBQUUsb0VBQW9FO0tBQzdFLENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxvRUFBb0U7S0FDN0UsQ0FBQztJQUNGOzs7O09BSUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLEdBQUc7UUFDVCxNQUFNLEVBQUUsb0VBQW9FO0tBQzdFLENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLG9FQUFvRTtLQUM3RSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9vYnNlcnZhdGlvbi1pbnRlcnByZXRhdGlvbnw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQSBjYXRlZ29yaWNhbCBhc3Nlc3NtZW50LCBwcm92aWRpbmcgYSByb3VnaCBxdWFsaXRhdGl2ZSBpbnRlcnByZXRhdGlvbiBvZiB0aGUgb2JzZXJ2YXRpb24gdmFsdWUsICAgIHN1Y2ggYXMg4oCcbm9ybWFs4oCdLyDigJxhYm5vcm1hbOKAnSzigJ1sb3figJ0gLyDigJxoaWdo4oCdLCDigJxiZXR0ZXLigJ0gLyDigJx3b3JzZeKAnSwg4oCcc3VzY2VwdGlibGXigJ0gLyDigJxyZXNpc3RhbnTigJ0sIOKAnGV4cGVjdGVk4oCdLyDigJxub3QgZXhwZWN0ZWTigJ0uICAgIFRoZSB2YWx1ZSBzZXQgaXMgaW50ZW5kZWQgdG8gYmUgZm9yIEFOWSB1c2Ugd2hlcmUgY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYW4gaW50ZXJwcmV0YXRpb24gaXMgbmVlZGVkLiAgIFxyXG4gKiAgICBcclxuICogICAgTm90ZXM6XHJcbiAqICAgIFxyXG4gKiAgICBUaGlzIGlzIGJlaW5nIGNvbW11bmljYXRlZCBpbiB2Mi54IGluIE9CWC04IChPYnNlcnZhdGlvbiBJbnRlcnByZXRhdGlvbiksIGluIHYzIGluIE9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb24gKENXRSkgaW4gUjEgKFJlcHJlc2VudGF0aXZlIFJlYWxtKSBhbmQgaW4gRkhJUiBpbiAgICBPYnNlcnZhdGlvbi5pbnRlcnByZXRhdGlvbi4gSGlzdG9yaWNhbGx5IHRoZXNlIHZhbHVlcyBjb21lIGZyb20gdGhlIGxhYm9yYXRvcnkgZG9tYWluLCBhbmQgdGhlc2UgY29kZXMgYXJlIGV4dGVuc2l2ZWx5ICAgIHVzZWQuIFRoZSB2YWx1ZSBzZXQgYmluZGluZyBpcyBleHRlbnNpYmxlLCBzbyBjb2RlcyBvdXRzaWRlIHRoZSB2YWx1ZSBzZXQgdGhhdCBhcmUgbmVlZGVkIGZvciBpbnRlcnByZXRhdGlvbiBjb25jZXB0cyAgICAoaS5lLiBwYXJ0aWN1bGFyIG1lYW5pbmdzKSB0aGF0IGFyZSBub3QgaW5jbHVkZWQgaW4gdGhlIHZhbHVlIHNldCBjYW4gYmUgdXNlZCwgYW5kIHRoZXNlIG5ldyBjb2RlcyBtYXkgYWxzbyBiZSBhZGRlZCB0byAgICB0aGUgdmFsdWUgc2V0IGFuZCBwdWJsaXNoZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBPYnNlcnZhdGlvbkludGVycHJldGF0aW9uQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBfR2VuZXRpY09ic2VydmF0aW9uSW50ZXJwcmV0YXRpb246IENvZGVzIHRoYXQgc3BlY2lmeSBpbnRlcnByZXRhdGlvbiBvZiBnZW5ldGljIGFuYWx5c2lzLCBzdWNoIGFzIFwicG9zaXRpdmVcIiwgXCJuZWdhdGl2ZVwiLCBcImNhcnJpZXJcIiwgXCJyZXNwb25zaXZlXCIsIGV0Yy5cclxuICAgKi9cclxuICBHZW5ldGljT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdlbmV0aWNPYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIl9HZW5ldGljT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIF9PYnNlcnZhdGlvbkludGVycHJldGF0aW9uQ2hhbmdlOiBJbnRlcnByZXRhdGlvbnMgb2YgY2hhbmdlIG9mIHF1YW50aXR5IGFuZC9vciBzZXZlcml0eS4gQXQgbW9zdCBvbmUgb2YgQiBvciBXIGFuZCBvbmUgb2YgVSBvciBEIGFsbG93ZWQuXHJcbiAgICovXHJcbiAgT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkNoYW5nZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25DaGFuZ2VcIixcclxuICAgIGNvZGU6IFwiX09ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25DaGFuZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBfT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkV4Y2VwdGlvbnM6IFRlY2huaWNhbCBleGNlcHRpb25zIHJlc3VsdGluZyBpbiB0aGUgaW5hYmlsaXR5IHRvIHByb3ZpZGUgYW4gaW50ZXJwcmV0YXRpb24uIEF0IG1vc3Qgb25lIGFsbG93ZWQuIERvZXMgbm90IGltcGx5IG5vcm1hbGl0eSBvciBzZXZlcml0eS5cclxuICAgKi9cclxuICBPYnNlcnZhdGlvbkludGVycHJldGF0aW9uRXhjZXB0aW9uczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25FeGNlcHRpb25zXCIsXHJcbiAgICBjb2RlOiBcIl9PYnNlcnZhdGlvbkludGVycHJldGF0aW9uRXhjZXB0aW9uc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIF9PYnNlcnZhdGlvbkludGVycHJldGF0aW9uTm9ybWFsaXR5OiBJbnRlcnByZXRhdGlvbiBvZiBub3JtYWxpdHkgb3IgZGVncmVlIG9mIGFibm9ybWFsaXR5IChpbmNsdWRpbmcgY3JpdGljYWwgb3IgXCJhbGVydFwiIGxldmVsKS4gQ29uY2VwdHMgaW4gdGhpcyBjYXRlZ29yeSBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLCBpLmUuLCBhdCBtb3N0IG9uZSBpcyBhbGxvd2VkLlxyXG4gICAqL1xyXG4gIE9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25Ob3JtYWxpdHk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPYnNlcnZhdGlvbkludGVycHJldGF0aW9uTm9ybWFsaXR5XCIsXHJcbiAgICBjb2RlOiBcIl9PYnNlcnZhdGlvbkludGVycHJldGF0aW9uTm9ybWFsaXR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogX09ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25TdXNjZXB0aWJpbGl0eTogSW50ZXJwcmV0YXRpb25zIG9mIGFudGktbWljcm9iaWFsIHN1c2NlcHRpYmlsaXR5IHRlc3RpbmcgcmVzdWx0cyAobWljcm9iaW9sb2d5KS4gQXQgbW9zdCBvbmUgYWxsb3dlZC5cclxuICAgKi9cclxuICBPYnNlcnZhdGlvbkludGVycHJldGF0aW9uU3VzY2VwdGliaWxpdHk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPYnNlcnZhdGlvbkludGVycHJldGF0aW9uU3VzY2VwdGliaWxpdHlcIixcclxuICAgIGNvZGU6IFwiX09ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25TdXNjZXB0aWJpbGl0eVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqICZsdDs6IFRoZSByZXN1bHQgaXMgYmVsb3cgdGhlIG1pbmltdW0gZGV0ZWN0aW9uIGxpbWl0ICh0aGUgdGVzdCBwcm9jZWR1cmUgb3IgZXF1aXBtZW50IGlzIHRoZSBsaW1pdGluZyBmYWN0b3IpLlxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFN5bm9ueW1zOiBCZWxvdyBhbmFseXRpY2FsIGxpbWl0LCBsb3cgb2ZmIHNjYWxlLlxyXG4gICAqL1xyXG4gIE9mZlNjYWxlTG93OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT2ZmIHNjYWxlIGxvd1wiLFxyXG4gICAgY29kZTogXCI8XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogJmd0OzogVGhlIHJlc3VsdCBpcyBhYm92ZSB0aGUgbWF4aW11bSBxdWFudGlmaWFibGUgbGltaXQgKHRoZSB0ZXN0IHByb2NlZHVyZSBvciBlcXVpcG1lbnQgaXMgdGhlIGxpbWl0aW5nIGZhY3RvcikuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgU3lub255bXM6IEFib3ZlIGFuYWx5dGljYWwgbGltaXQsIGhpZ2ggb2ZmIHNjYWxlLlxyXG4gICAqL1xyXG4gIE9mZlNjYWxlSGlnaDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9mZiBzY2FsZSBoaWdoXCIsXHJcbiAgICBjb2RlOiBcIj5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBBOiBUaGUgcmVzdWx0IG9yIG9ic2VydmF0aW9uIHZhbHVlIGlzIG91dHNpZGUgdGhlIHJlZmVyZW5jZSByYW5nZSBvciBleHBlY3RlZCBub3JtIChhcyBkZWZpbmVkIGZvciB0aGUgcmVzcGVjdGl2ZSB0ZXN0IHByb2NlZHVyZSkuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGU6IFR5cGljYWxseSBhcHBsaWVzIHRvIG5vbi1udW1lcmljIHJlc3VsdHMuXVxyXG4gICAqL1xyXG4gIEFibm9ybWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWJub3JtYWxcIixcclxuICAgIGNvZGU6IFwiQVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEFBOiBUaGUgcmVzdWx0IG9yIG9ic2VydmF0aW9uIHZhbHVlIGlzIG91dHNpZGUgYSByZWZlcmVuY2UgcmFuZ2Ugb3IgZXhwZWN0ZWQgbm9ybSBhdCBhIGxldmVsIGF0IHdoaWNoIGltbWVkaWF0ZSBhY3Rpb24gc2hvdWxkIGJlIGNvbnNpZGVyZWQgZm9yIHBhdGllbnQgc2FmZXR5IChhcyBkZWZpbmVkIGZvciB0aGUgcmVzcGVjdGl2ZSB0ZXN0IHByb2NlZHVyZSkuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGU6IFR5cGljYWxseSBhcHBsaWVzIHRvIG5vbi1udW1lcmljIHJlc3VsdHMuICBBbmFsb2dvdXMgdG8gY3JpdGljYWwvcGFuaWMgbGltaXRzIGZvciBudW1lcmljIHJlc3VsdHMuXVxyXG4gICAqL1xyXG4gIENyaXRpY2FsQWJub3JtYWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDcml0aWNhbCBhYm5vcm1hbFwiLFxyXG4gICAgY29kZTogXCJBQVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEI6IFRoZSBjdXJyZW50IHJlc3VsdCBvciBvYnNlcnZhdGlvbiB2YWx1ZSBoYXMgaW1wcm92ZWQgY29tcGFyZWQgdG8gdGhlIHByZXZpb3VzIHJlc3VsdCBvciBvYnNlcnZhdGlvbiB2YWx1ZSAodGhlIGNoYW5nZSBpcyBzaWduaWZpY2FudCBhcyBkZWZpbmVkIGluIHRoZSByZXNwZWN0aXZlIHRlc3QgcHJvY2VkdXJlKS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBbTm90ZTogVGhpcyBjYW4gYmUgYXBwbGllZCB0byBxdWFudGl0YXRpdmUgb3IgcXVhbGl0YXRpdmUgb2JzZXJ2YXRpb25zLl1cclxuICAgKi9cclxuICBCZXR0ZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCZXR0ZXJcIixcclxuICAgIGNvZGU6IFwiQlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENBUjogVGhlIHBhdGllbnQgaXMgY29uc2lkZXJlZCBhcyBjYXJyaWVyIGJhc2VkIG9uIHRoZSB0ZXN0aW5nIHJlc3VsdHMuIEEgY2FycmllciBpcyBhbiBpbmRpdmlkdWFsIHdobyBjYXJyaWVzIGFuIGFsdGVyZWQgZm9ybSBvZiBhIGdlbmUgd2hpY2ggY2FuIGxlYWQgdG8gaGF2aW5nIGEgY2hpbGQgb3Igb2Zmc3ByaW5nIGluIGZ1dHVyZSBnZW5lcmF0aW9ucyB3aXRoIGEgZ2VuZXRpYyBkaXNvcmRlci5cclxuICAgKi9cclxuICBDYXJyaWVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2FycmllclwiLFxyXG4gICAgY29kZTogXCJDQVJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBEOiBUaGUgY3VycmVudCByZXN1bHQgaGFzIGRlY3JlYXNlZCBmcm9tIHRoZSBwcmV2aW91cyByZXN1bHQgZm9yIGEgcXVhbnRpdGF0aXZlIG9ic2VydmF0aW9uICh0aGUgY2hhbmdlIGlzIHNpZ25pZmljYW50IGFzIGRlZmluZWQgaW4gdGhlIHJlc3BlY3RpdmUgdGVzdCBwcm9jZWR1cmUpLlxyXG4gICAqL1xyXG4gIFNpZ25pZmljYW50Q2hhbmdlRG93bjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNpZ25pZmljYW50IGNoYW5nZSBkb3duXCIsXHJcbiAgICBjb2RlOiBcIkRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBERVQ6IFRoZSBtZWFzdXJlbWVudCBvZiB0aGUgc3BlY2lmaWVkIGNvbXBvbmVudCAvIGFuYWx5dGUsIG9yZ2FuaXNtIG9yIGNsaW5pY2FsIHNpZ24gYWJvdmUgdGhlIGxpbWl0IG9mIGRldGVjdGlvbiBvZiB0aGUgcGVyZm9ybWVkIHRlc3Qgb3IgcHJvY2VkdXJlLlxyXG4gICAqL1xyXG4gIERldGVjdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGV0ZWN0ZWRcIixcclxuICAgIGNvZGU6IFwiREVUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogRTogVGhlIHRlc3Qgb3IgcHJvY2VkdXJlIHdhcyBzdWNjZXNzZnVsbHkgcGVyZm9ybWVkLCBidXQgdGhlIHJlc3VsdHMgYXJlIGJvcmRlcmxpbmUgYW5kIGNhbiBuZWl0aGVyIGJlIGRlY2xhcmVkIHBvc2l0aXZlIC8gbmVnYXRpdmUgbm9yIGRldGVjdGVkIC8gbm90IGRldGVjdGVkIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBlc3RhYmxpc2hlZCBjcml0ZXJpYS5cclxuICAgKi9cclxuICBFcXVpdm9jYWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFcXVpdm9jYWxcIixcclxuICAgIGNvZGU6IFwiRVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEVYOiBUaGUgb2JzZXJ2YXRpb24vdGVzdCByZXN1bHQgaXMgaW50ZXJwcmV0ZWQgYXMgYmVpbmcgb3V0c2lkZSB0aGUgaW5jbHVzaW9uIHJhbmdlIGZvciBhIHBhcnRpY3VsYXIgcHJvdG9jb2wgd2l0aGluIHdoaWNoIHRoZSByZXN1bHQgaXMgYmVpbmcgcmVwb3J0ZWQuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgRXhhbXBsZTogQSBwb3NpdGl2ZSByZXN1bHQgb24gYSBIZXBhdGl0aXMgc2NyZWVuaW5nIHRlc3QuXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3BlbiBJc3N1ZTogRVgsIEhYLCBMWDogVGhlc2UgdGhyZWUgY29uY2VwdHMgZG8gbm90IHNlZW0gdG8gbWVldCBhIGNsZWFyIG5lZWQgaW4gdGhlIHZvY2FidWxhcnksIGFuZCB0aGVpciB1c2UgaW4gb2JzZXJ2YXRpb24gaW50ZXJwcmV0YXRpb24gYXBwZWFycyBsaWtlbHkgdG8gYmUgY292ZXJlZCBieSBvdGhlciBleGlzdGluZyBjb25jZXB0cyAoZS5nLiwgQSwgSCwgTCkuICBUaGUgb25seSBhcHBhcmVudCBzaWduaWZpY2FudCBkaWZmZXJlbmNlIGlzIHRoZWlyIHJlZmVyZW5jZSB0byB1c2UgaW4gcHJvdG9jb2xzIGZvciBleGNsdXNpb24gb2Ygc3R1ZHkgc3ViamVjdHMuXHJcbiAgICogVGhlc2UgY29uY2VwdHMvY29kZXMgd2VyZSBwcm9wb3NlZCBieSBSQ1JJTSBmb3IgdXNlIGluIHRoZSBDVExhYm9yYXRvcnkgbWVzc2FnZS4gIFRoZXkgd2VyZSBzdWJtaXR0ZWQgYW5kIGFwcHJvdmVkIGluIHRoZSBOb3ZlbWJlciAyMDA1IEhhcm1vbml6YXRpb24gY3ljbGUgaW4gcHJvcG9zYWwgXCIwMzAxMDNDX1ZPQ0FCX1JDUklNX2xfcXVhZGVfUkNSSU0gT2JzIEludGVycF8yMDA1MTAyODE1NDQ1NVwiLiAgSG93ZXZlciwgdGhpcyBwcm9wb3NhbCB3YXMgbm90IGZ1bGx5IGltcGxlbWVudGVkIGluIHRoZSB2b2NhYnVsYXJ5LiAgVGhlIHByb3Bvc2FsIHJlY29tbWVuZGVkIGNyZWF0aW9uIG9mIHRoZSB4X0NsaW5pY2FsUmVzZWFyY2hFeGNsdXNpb24gZG9tYWluIGluIE9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb24gd2l0aCBhIHZhbHVlIHNldCBpbmNsdWRpbmcgdGhvc2UgdGhyZWUgY29uY2VwdHMvY29kZXMsIGJ1dCB0aGVyZSBpcyBubyBzdWJkb21haW4gb2YgdGhhdCBuYW1lIG9yIGVxdWl2YWxlbnQgd2l0aCBhIGJpbmRpbmcgdG8gZWl0aGVyIG9mIHRoZSB2YWx1ZSBzZXRzIHRoYXQgY29udGFpbiB0aGVzZSBjb25jZXB0cy9jb2Rlcy5cclxuICAgKiBNZW1iZXJzIG9mIHRoZSBPTyBXRyBoYXZlIHJlY2VudGx5IGF0dGVtcHRlZCB0byBjb250YWN0IG1lbWJlcnMgb2YgUkNSSU0gcmVnYXJkaW5nIHRoZXNlIGNvbmNlcHRzLCBib3RoIGJ5IGVtYWlsIGFuZCBhdCB0aGUgcmVjZW50IFdHTSBpbiBBdGxhbnRhLCB3aXRob3V0IHJlc3BvbnNlLiAgSXQgaXMgZmVsdCBieSBPTyB0aGF0IHRoZSBiZXN0IGNvdXJzZSBvZiBhY3Rpb24gdG8gdGFrZSBhdCB0aGlzIHRpbWUgaXMgdG8gYWRkIHRoaXMgY29tcHJlaGVuc2l2ZSBPcGVuIElzc3VlIHJhdGhlciB0aGFuIGRlcHJlY2F0ZSB0aGVzZSB0aHJlZSBjb25jZXB0cyBhdCB0aGlzIHRpbWUsIHVudGlsIGZ1cnRoZXIgZGlzY3Vzc2lvbiBpcyBoZWxkLlxyXG4gICAqL1xyXG4gIE91dHNpZGVUaHJlc2hvbGQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJvdXRzaWRlIHRocmVzaG9sZFwiLFxyXG4gICAgY29kZTogXCJFWFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEVYUDogVGhpcyByZXN1bHQgaGFzIGJlZW4gZXZhbHVhdGVkIGluIGxpZ2h0IG9mIGtub3duIGNvbnRyYWluZGljYXRvcnMuICBPbmNlIHRob3NlIGNvbnRyYWluZGljYXRvcnMgaGF2ZSBiZWVuIHRha2VuIGludG8gYWNjb3VudCB0aGUgcmVzdWx0IGlzIGRldGVybWluZWQgdG8gYmUgXCJFeHBlY3RlZFwiICAoZS5nLiwgcHJlc2VuY2Ugb2YgZHJ1Z3MgaW4gYSBwYXRpZW50IHRoYXQgaXMgdGFraW5nIHByZXNjcmlwdGlvbiBtZWRpY2F0aW9uIGZvciBwYWluIG1hbmFnZW1lbnQpLlxyXG4gICAqL1xyXG4gIEV4cGVjdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRXhwZWN0ZWRcIixcclxuICAgIGNvZGU6IFwiRVhQXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogSDogVGhlIHJlc3VsdCBmb3IgYSBxdWFudGl0YXRpdmUgb2JzZXJ2YXRpb24gaXMgYWJvdmUgdGhlIHVwcGVyIGxpbWl0IG9mIHRoZSByZWZlcmVuY2UgcmFuZ2UgKGFzIGRlZmluZWQgZm9yIHRoZSByZXNwZWN0aXZlIHRlc3QgcHJvY2VkdXJlKS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBTeW5vbnltOiBBYm92ZSBoaWdoIG5vcm1hbFxyXG4gICAqL1xyXG4gIEhpZ2g6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJIaWdoXCIsXHJcbiAgICBjb2RlOiBcIkhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBISDogVGhlIHJlc3VsdCBmb3IgYSBxdWFudGl0YXRpdmUgb2JzZXJ2YXRpb24gaXMgYWJvdmUgYSByZWZlcmVuY2UgbGV2ZWwgYXQgd2hpY2ggaW1tZWRpYXRlIGFjdGlvbiBzaG91bGQgYmUgY29uc2lkZXJlZCBmb3IgcGF0aWVudCBzYWZldHkgKGFzIGRlZmluZWQgZm9yIHRoZSByZXNwZWN0aXZlIHRlc3QgcHJvY2VkdXJlKS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBTeW5vbnltOiBBYm92ZSB1cHBlciBwYW5pYyBsaW1pdHMuXHJcbiAgICovXHJcbiAgQ3JpdGljYWxIaWdoOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ3JpdGljYWwgaGlnaFwiLFxyXG4gICAgY29kZTogXCJISFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEhVOiBBIHRlc3QgcmVzdWx0IHRoYXQgaXMgc2lnbmlmaWNhbnRseSBoaWdoZXIgdGhhbiB0aGUgcmVmZXJlbmNlIChub3JtYWwpIG9yIHRoZXJhcGV1dGljIGludGVydmFsLCBidXQgaGFzIG5vdCByZWFjaGVkIHRoZSBjcml0aWNhbGx5IGhpZ2ggdmFsdWUgYW5kIG1pZ2h0IG5lZWQgc3BlY2lhbCBhdHRlbnRpb24sIGFzIGRlZmluZWQgYnkgdGhlIGxhYm9yYXRvcnkgb3IgdGhlIGNsaW5pY2lhbi5cclxuICAgKi9cclxuICBTaWduaWZpY2FudGx5SGlnaDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNpZ25pZmljYW50bHkgaGlnaFwiLFxyXG4gICAgY29kZTogXCJIVVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEhYOiBUaGUgb2JzZXJ2YXRpb24vdGVzdCByZXN1bHQgaXMgaW50ZXJwcmV0ZWQgYXMgYmVpbmcgb3V0c2lkZSB0aGUgaW5jbHVzaW9uIHJhbmdlIGZvciBhIHBhcnRpY3VsYXIgcHJvdG9jb2wgd2l0aGluIHdoaWNoIHRoZSByZXN1bHQgaXMgYmVpbmcgcmVwb3J0ZWQuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgRXhhbXBsZTogQSBwb3NpdGl2ZSByZXN1bHQgb24gYSBIZXBhdGl0aXMgc2NyZWVuaW5nIHRlc3QuXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3BlbiBJc3N1ZTogRVgsIEhYLCBMWDogVGhlc2UgdGhyZWUgY29uY2VwdHMgZG8gbm90IHNlZW0gdG8gbWVldCBhIGNsZWFyIG5lZWQgaW4gdGhlIHZvY2FidWxhcnksIGFuZCB0aGVpciB1c2UgaW4gb2JzZXJ2YXRpb24gaW50ZXJwcmV0YXRpb24gYXBwZWFycyBsaWtlbHkgdG8gYmUgY292ZXJlZCBieSBvdGhlciBleGlzdGluZyBjb25jZXB0cyAoZS5nLiwgQSwgSCwgTCkuICBUaGUgb25seSBhcHBhcmVudCBzaWduaWZpY2FudCBkaWZmZXJlbmNlIGlzIHRoZWlyIHJlZmVyZW5jZSB0byB1c2UgaW4gcHJvdG9jb2xzIGZvciBleGNsdXNpb24gb2Ygc3R1ZHkgc3ViamVjdHMuICBUaGVzZSBjb25jZXB0cy9jb2RlcyB3ZXJlIHByb3Bvc2VkIGJ5IFJDUklNIGZvciB1c2UgaW4gdGhlIENUTGFib3JhdG9yeSBtZXNzYWdlLiAgVGhleSB3ZXJlIHN1Ym1pdHRlZCBhbmQgYXBwcm92ZWQgaW4gdGhlIE5vdmVtYmVyIDIwMDUgSGFybW9uaXphdGlvbiBjeWNsZSBpbiBwcm9wb3NhbCBcIjAzMDEwM0NfVk9DQUJfUkNSSU1fbF9xdWFkZV9SQ1JJTSBPYnMgSW50ZXJwXzIwMDUxMDI4MTU0NDU1XCIuIEhvd2V2ZXIsIHRoaXMgcHJvcG9zYWwgd2FzIG5vdCBmdWxseSBpbXBsZW1lbnRlZCBpbiB0aGUgdm9jYWJ1bGFyeS4gIFRoZSBwcm9wb3NhbCByZWNvbW1lbmRlZCBjcmVhdGlvbiBvZiB0aGUgeF9DbGluaWNhbFJlc2VhcmNoRXhjbHVzaW9uIGRvbWFpbiBpbiBPYnNlcnZhdGlvbkludGVycHJldGF0aW9uIHdpdGggYSB2YWx1ZSBzZXQgaW5jbHVkaW5nIHRob3NlIHRocmVlIGNvbmNlcHRzL2NvZGVzLCBidXQgdGhlcmUgaXMgbm8gc3ViZG9tYWluIG9mIHRoYXQgbmFtZSBvciBlcXVpdmFsZW50IHdpdGggYSBiaW5kaW5nIHRvIGVpdGhlciBvZiB0aGUgdmFsdWUgc2V0cyB0aGF0IGNvbnRhaW4gdGhlc2UgY29uY2VwdHMvY29kZXMuICBNZW1iZXJzIG9mIHRoZSBPTyBXRyBoYXZlIHJlY2VudGx5IGF0dGVtcHRlZCB0byBjb250YWN0IG1lbWJlcnMgb2YgUkNSSU0gcmVnYXJkaW5nIHRoZXNlIGNvbmNlcHRzLCBib3RoIGJ5IGVtYWlsIGFuZCBhdCB0aGUgcmVjZW50IFdHTSBpbiBBdGxhbnRhLCB3aXRob3V0IHJlc3BvbnNlLiAgSXQgaXMgZmVsdCBieSBPTyB0aGF0IHRoZSBiZXN0IGNvdXJzZSBvZiBhY3Rpb24gdG8gdGFrZSBhdCB0aGlzIHRpbWUgaXMgdG8gYWRkIHRoaXMgY29tcHJlaGVuc2l2ZSBPcGVuIElzc3VlIHJhdGhlciB0aGFuIGRlcHJlY2F0ZSB0aGVzZSB0aHJlZSBjb25jZXB0cyBhdCB0aGlzIHRpbWUsIHVudGlsIGZ1cnRoZXIgZGlzY3Vzc2lvbiBpcyBoZWxkLlxyXG4gICAqL1xyXG4gIEFib3ZlSGlnaFRocmVzaG9sZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImFib3ZlIGhpZ2ggdGhyZXNob2xkXCIsXHJcbiAgICBjb2RlOiBcIkhYXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogSTogQmFjdGVyaWFsIHN0cmFpbiBpbmhpYml0ZWQgaW4gdml0cm8gYnkgYSBjb25jZW50cmF0aW9uIG9mIGFuIGFudGltaWNyb2JpYWwgYWdlbnQgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggdW5jZXJ0YWluIHRoZXJhcGV1dGljIGVmZmVjdC4gUmVmZXJlbmNlOiBDTFNJIChodHRwOi8vd3d3LmNsc2kub3JnL0NvbnRlbnQvTmF2aWdhdGlvbk1lbnUvUmVzb3VyY2VzL0hhcm1vbml6ZWRUZXJtaW5vbG9neURhdGFiYXNlL0hhcm1vbml6ZWRfVGVybWlub2xvLmh0bSlcclxuICAgKiBQcm9qZWN0czogSVNPIDIwNzc2LTEsIElTTyAyMDc3Ni0yXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGUgMTogQmFjdGVyaWFsIHN0cmFpbnMgYXJlIGNhdGVnb3JpemVkIGFzIGludGVybWVkaWF0ZSBieSBhcHBseWluZyB0aGUgYXBwcm9wcmlhdGUgYnJlYWtwb2ludHMgaW4gYSBkZWZpbmVkIHBoZW5vdHlwaWMgdGVzdCBzeXN0ZW0uXVxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFtOb3RlIDI6IFRoaXMgY2xhc3Mgb2Ygc3VzY2VwdGliaWxpdHkgaW1wbGllcyB0aGF0IGFuIGluZmVjdGlvbiBkdWUgdG8gdGhlIGlzb2xhdGUgY2FuIGJlIGFwcHJvcHJpYXRlbHkgdHJlYXRlZCBpbiBib2R5IHNpdGVzIHdoZXJlIHRoZSBkcnVncyBhcmUgcGh5c2lvbG9naWNhbGx5IGNvbmNlbnRyYXRlZCBvciB3aGVuIGEgaGlnaCBkb3NhZ2Ugb2YgZHJ1ZyBjYW4gYmUgdXNlZC5dXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGUgMzogVGhpcyBjbGFzcyBhbHNvIGluZGljYXRlcyBhIFwiYnVmZmVyIHpvbmUsXCIgdG8gcHJldmVudCBzbWFsbCwgdW5jb250cm9sbGVkLCB0ZWNobmljYWwgZmFjdG9ycyBmcm9tIGNhdXNpbmcgbWFqb3IgZGlzY3JlcGFuY2llcyBpbiBpbnRlcnByZXRhdGlvbnMuXVxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFtOb3RlIDQ6IFRoZXNlIGJyZWFrcG9pbnRzIGNhbiBiZSBhbHRlcmVkIGR1ZSB0byBjaGFuZ2VzIGluIGNpcmN1bXN0YW5jZXMgKGUuZy4sIGNoYW5nZXMgaW4gY29tbW9ubHkgdXNlZCBkcnVnIGRvc2FnZXMsIGVtZXJnZW5jZSBvZiBuZXcgcmVzaXN0YW5jZSBtZWNoYW5pc21zKS5dXHJcbiAgICovXHJcbiAgSW50ZXJtZWRpYXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW50ZXJtZWRpYXRlXCIsXHJcbiAgICBjb2RlOiBcIklcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBJRTogVGhlcmUgaXMgaW5zdWZmaWNpZW50IGV2aWRlbmNlIHRoYXQgdGhlIHNwZWNpZXMgaW4gcXVlc3Rpb24gaXMgYSBnb29kIHRhcmdldCBmb3IgdGhlcmFweSB3aXRoIHRoZSBkcnVnLiAgQSBjYXRlZ29yaWNhbCBpbnRlcnByZXRhdGlvbiBpcyBub3QgcG9zc2libGUuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGU6IEEgTUlDIHdpdGggXCJJRVwiIGFuZC9vciBhIGNvbW1lbnQgbWF5IGJlIHJlcG9ydGVkICh3aXRob3V0IGFuIGFjY29tcGFueWluZyBTLCBJIG9yIFItY2F0ZWdvcml6YXRpb24pLl1cclxuICAgKi9cclxuICBJbnN1ZmZpY2llbnRFdmlkZW5jZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluc3VmZmljaWVudCBldmlkZW5jZVwiLFxyXG4gICAgY29kZTogXCJJRVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIElORDogVGhlIHNwZWNpZmllZCBjb21wb25lbnQgLyBhbmFseXRlLCBvcmdhbmlzbSBvciBjbGluaWNhbCBzaWduIGNvdWxkIG5laXRoZXIgYmUgZGVjbGFyZWQgcG9zaXRpdmUgLyBuZWdhdGl2ZSBub3IgZGV0ZWN0ZWQgLyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHBlcmZvcm1lZCB0ZXN0IG9yIHByb2NlZHVyZS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2FnZSBOb3RlOiBGb3IgZXhhbXBsZSwgaWYgdGhlIHNwZWNpbWVuIHdhcyBkZWdyYWRlZCwgcG9vcmx5IHByb2Nlc3NlZCwgb3Igd2FzIG1pc3NpbmcgdGhlIHJlcXVpcmVkIGFuYXRvbWljIHN0cnVjdHVyZXMsIHRoZW4gXCJpbmRldGVybWluYXRlXCIgKGkuZS4gXCJjYW5ub3QgYmUgZGV0ZXJtaW5lZFwiKSBpcyB0aGUgYXBwcm9wcmlhdGUgcmVzcG9uc2UsIG5vdCBcImVxdWl2b2NhbFwiLlxyXG4gICAqL1xyXG4gIEluZGV0ZXJtaW5hdGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJbmRldGVybWluYXRlXCIsXHJcbiAgICBjb2RlOiBcIklORFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEw6IFRoZSByZXN1bHQgZm9yIGEgcXVhbnRpdGF0aXZlIG9ic2VydmF0aW9uIGlzIGJlbG93IHRoZSBsb3dlciBsaW1pdCBvZiB0aGUgcmVmZXJlbmNlIHJhbmdlIChhcyBkZWZpbmVkIGZvciB0aGUgcmVzcGVjdGl2ZSB0ZXN0IHByb2NlZHVyZSkuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgU3lub255bTogQmVsb3cgbG93IG5vcm1hbFxyXG4gICAqL1xyXG4gIExvdzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxvd1wiLFxyXG4gICAgY29kZTogXCJMXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogTEw6IFRoZSByZXN1bHQgZm9yIGEgcXVhbnRpdGF0aXZlIG9ic2VydmF0aW9uIGlzIGJlbG93IGEgcmVmZXJlbmNlIGxldmVsIGF0IHdoaWNoIGltbWVkaWF0ZSBhY3Rpb24gc2hvdWxkIGJlIGNvbnNpZGVyZWQgZm9yIHBhdGllbnQgc2FmZXR5IChhcyBkZWZpbmVkIGZvciB0aGUgcmVzcGVjdGl2ZSB0ZXN0IHByb2NlZHVyZSkuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgU3lub255bTogQmVsb3cgbG93ZXIgcGFuaWMgbGltaXRzLlxyXG4gICAqL1xyXG4gIENyaXRpY2FsTG93OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ3JpdGljYWwgbG93XCIsXHJcbiAgICBjb2RlOiBcIkxMXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogTFU6IEEgdGVzdCByZXN1bHQgdGhhdCBpcyBzaWduaWZpY2FudGx5IGxvd2VyIHRoYW4gdGhlIHJlZmVyZW5jZSAobm9ybWFsKSBvciB0aGVyYXBldXRpYyBpbnRlcnZhbCwgYnV0IGhhcyBub3QgcmVhY2hlZCB0aGUgY3JpdGljYWxseSBsb3cgdmFsdWUgYW5kIG1pZ2h0IG5lZWQgc3BlY2lhbCBhdHRlbnRpb24sIGFzIGRlZmluZWQgYnkgdGhlIGxhYm9yYXRvcnkgb3IgdGhlIGNsaW5pY2lhbi5cclxuICAgKi9cclxuICBTaWduaWZpY2FudGx5TG93OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU2lnbmlmaWNhbnRseSBsb3dcIixcclxuICAgIGNvZGU6IFwiTFVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBMWDogVGhlIG51bWVyaWMgb2JzZXJ2YXRpb24vdGVzdCByZXN1bHQgaXMgaW50ZXJwcmV0ZWQgYXMgYmVpbmcgYmVsb3cgdGhlIGxvdyB0aHJlc2hvbGQgdmFsdWUgZm9yIGEgcGFydGljdWxhciBwcm90b2NvbCB3aXRoaW4gd2hpY2ggdGhlIHJlc3VsdCBpcyBiZWluZyByZXBvcnRlZC5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBFeGFtcGxlOiBBIFRvdGFsIFdoaXRlIEJsb29kIENlbGwgQ291bnQgZmFsbGluZyBiZWxvdyBhIHByb3RvY29sLWRlZmluZWQgdGhyZXNob2xkIHZhbHVlIG9mIDMwMDAvbW1eM1xyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9wZW4gSXNzdWU6IEVYLCBIWCwgTFg6IFRoZXNlIHRocmVlIGNvbmNlcHRzIGRvIG5vdCBzZWVtIHRvIG1lZXQgYSBjbGVhciBuZWVkIGluIHRoZSB2b2NhYnVsYXJ5LCBhbmQgdGhlaXIgdXNlIGluIG9ic2VydmF0aW9uIGludGVycHJldGF0aW9uIGFwcGVhcnMgbGlrZWx5IHRvIGJlIGNvdmVyZWQgYnkgb3RoZXIgZXhpc3RpbmcgY29uY2VwdHMgKGUuZy4sIEEsIEgsIEwpLiAgVGhlIG9ubHkgYXBwYXJlbnQgc2lnbmlmaWNhbnQgZGlmZmVyZW5jZSBpcyB0aGVpciByZWZlcmVuY2UgdG8gdXNlIGluIHByb3RvY29scyBmb3IgZXhjbHVzaW9uIG9mIHN0dWR5IHN1YmplY3RzLiAgVGhlc2UgY29uY2VwdHMvY29kZXMgd2VyZSBwcm9wb3NlZCBieSBSQ1JJTSBmb3IgdXNlIGluIHRoZSBDVExhYm9yYXRvcnkgbWVzc2FnZS4gIFRoZXkgd2VyZSBzdWJtaXR0ZWQgYW5kIGFwcHJvdmVkIGluIHRoZSBOb3ZlbWJlciAyMDA1IEhhcm1vbml6YXRpb24gY3ljbGUgaW4gcHJvcG9zYWwgXCIwMzAxMDNDX1ZPQ0FCX1JDUklNX2xfcXVhZGVfUkNSSU0gT2JzIEludGVycF8yMDA1MTAyODE1NDQ1NVwiLiAgSG93ZXZlciwgdGhpcyBwcm9wb3NhbCB3YXMgbm90IGZ1bGx5IGltcGxlbWVudGVkIGluIHRoZSB2b2NhYnVsYXJ5LiAgVGhlIHByb3Bvc2FsIHJlY29tbWVuZGVkIGNyZWF0aW9uIG9mIHRoZSB4X0NsaW5pY2FsUmVzZWFyY2hFeGNsdXNpb24gZG9tYWluIGluIE9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb24gd2l0aCBhIHZhbHVlIHNldCBpbmNsdWRpbmcgdGhvc2UgdGhyZWUgY29uY2VwdHMvY29kZXMsIGJ1dCB0aGVyZSBpcyBubyBzdWJkb21haW4gb2YgdGhhdCBuYW1lIG9yIGVxdWl2YWxlbnQgd2l0aCBhIGJpbmRpbmcgdG8gZWl0aGVyIG9mIHRoZSB2YWx1ZSBzZXRzIHRoYXQgY29udGFpbiB0aGVzZSBjb25jZXB0cy9jb2Rlcy4gIE1lbWJlcnMgb2YgdGhlIE9PIFdHIGhhdmUgcmVjZW50bHkgYXR0ZW1wdGVkIHRvIGNvbnRhY3QgbWVtYmVycyBvZiBSQ1JJTSByZWdhcmRpbmcgdGhlc2UgY29uY2VwdHMsIGJvdGggYnkgZW1haWwgYW5kIGF0IHRoZSByZWNlbnQgV0dNIGluIEF0bGFudGEsIHdpdGhvdXQgcmVzcG9uc2UuICBJdCBpcyBmZWx0IGJ5IE9PIHRoYXQgdGhlIGJlc3QgY291cnNlIG9mIGFjdGlvbiB0byB0YWtlIGF0IHRoaXMgdGltZSBpcyB0byBhZGQgdGhpcyBjb21wcmVoZW5zaXZlIE9wZW4gSXNzdWUgcmF0aGVyIHRoYW4gZGVwcmVjYXRlIHRoZXNlIHRocmVlIGNvbmNlcHRzIGF0IHRoaXMgdGltZSwgdW50aWwgZnVydGhlciBkaXNjdXNzaW9uIGlzIGhlbGQuXHJcbiAgICovXHJcbiAgQmVsb3dMb3dUaHJlc2hvbGQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJiZWxvdyBsb3cgdGhyZXNob2xkXCIsXHJcbiAgICBjb2RlOiBcIkxYXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogTjogVGhlIHJlc3VsdCBvciBvYnNlcnZhdGlvbiB2YWx1ZSBpcyB3aXRoaW4gdGhlIHJlZmVyZW5jZSByYW5nZSBvciBleHBlY3RlZCBub3JtIChhcyBkZWZpbmVkIGZvciB0aGUgcmVzcGVjdGl2ZSB0ZXN0IHByb2NlZHVyZSkuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGU6IEFwcGxpZXMgdG8gbnVtZXJpYyBvciBub24tbnVtZXJpYyByZXN1bHRzLl1cclxuICAgKi9cclxuICBOb3JtYWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOb3JtYWxcIixcclxuICAgIGNvZGU6IFwiTlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIE5DTDogVXNlIHdoZW4gbm90IGVub3VnaCBjbGluaWNhbCB0cmlhbCBkYXRhIHB1Ymxpc2hlZCBieSB0aGUgQ2xpbmljYWwgYW5kIExhYm9yYXRvcnkgU3RhbmRhcmRzIEluc3RpdHV0ZXMgKENMU0kpIGlzIGF2YWlsYWJsZSB0byBlc3RhYmxpc2ggdGhlIGJyZWFrcG9pbnRzIGZvciBzdXNjZXB0aWJsZSAvIGludGVybWVkaWF0ZSBhbmQgcmVzaXN0YW50LlxyXG4gICAqL1xyXG4gIE5vQ0xTSURlZmluZWRCcmVha3BvaW50OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTm8gQ0xTSSBkZWZpbmVkIGJyZWFrcG9pbnRcIixcclxuICAgIGNvZGU6IFwiTkNMXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogTkQ6IFRoZSBwcmVzZW5jZSBvZiB0aGUgc3BlY2lmaWVkIGNvbXBvbmVudCAvIGFuYWx5dGUsIG9yZ2FuaXNtIG9yIGNsaW5pY2FsIHNpZ24gY291bGQgbm90IGJlIGRldGVybWluZWQgd2l0aGluIHRoZSBsaW1pdCBvZiBkZXRlY3Rpb24gb2YgdGhlIHBlcmZvcm1lZCB0ZXN0IG9yIHByb2NlZHVyZS5cclxuICAgKi9cclxuICBOb3REZXRlY3RlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBkZXRlY3RlZFwiLFxyXG4gICAgY29kZTogXCJORFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIE5FRzogQW4gYWJzZW5jZSBmaW5kaW5nIG9mIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IC8gYW5hbHl0ZSwgb3JnYW5pc20gb3IgY2xpbmljYWwgc2lnbiBiYXNlZCBvbiB0aGUgZXN0YWJsaXNoZWQgdGhyZXNob2xkIG9mIHRoZSBwZXJmb3JtZWQgdGVzdCBvciBwcm9jZWR1cmUuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGU6IE5lZ2F0aXZlIGRvZXMgbm90IG5lY2Vzc2FyaWx5IGltcGx5IHRoZSBjb21wbGV0ZSBhYnNlbmNlIG9mIHRoZSBzcGVjaWZpZWQgaXRlbS5dXHJcbiAgICovXHJcbiAgTmVnYXRpdmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOZWdhdGl2ZVwiLFxyXG4gICAgY29kZTogXCJORUdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBOUjogQW4gYWJzZW5jZSBmaW5kaW5nIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCB0aGUgc3BlY2lmaWVkIGNvbXBvbmVudCAvIGFuYWx5dGUgZGlkIG5vdCByZWFjdCBtZWFzdXJhYmx5IHdpdGggdGhlIHJlYWdlbnQuXHJcbiAgICovXHJcbiAgTm9uUmVhY3RpdmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOb24tcmVhY3RpdmVcIixcclxuICAgIGNvZGU6IFwiTlJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBOUzogQSBjYXRlZ29yeSB1c2VkIGZvciBpc29sYXRlcyBmb3Igd2hpY2ggb25seSBhIHN1c2NlcHRpYmxlIGludGVycHJldGl2ZSBjcml0ZXJpb24gaGFzIGJlZW4gZGVzaWduYXRlZCBiZWNhdXNlIG9mIHRoZSBhYnNlbmNlIG9yIHJhcmUgb2NjdXJyZW5jZSBvZiByZXNpc3RhbnQgc3RyYWlucy4gSXNvbGF0ZXMgdGhhdCBoYXZlIE1JQ3MgYWJvdmUgb3Igem9uZSBkaWFtZXRlcnMgYmVsb3cgdGhlIHZhbHVlIGluZGljYXRlZCBmb3IgdGhlIHN1c2NlcHRpYmxlIGJyZWFrcG9pbnQgc2hvdWxkIGJlIHJlcG9ydGVkIGFzIG5vbi1zdXNjZXB0aWJsZS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBOT1RFIDE6IEFuIGlzb2xhdGUgdGhhdCBpcyBpbnRlcnByZXRlZCBhcyBub24tc3VzY2VwdGlibGUgZG9lcyBub3QgbmVjZXNzYXJpbHkgbWVhbiB0aGF0IHRoZSBpc29sYXRlIGhhcyBhIHJlc2lzdGFuY2UgbWVjaGFuaXNtLiBJdCBpcyBwb3NzaWJsZSB0aGF0IGlzb2xhdGVzIHdpdGggTUlDcyBhYm92ZSB0aGUgc3VzY2VwdGlibGUgYnJlYWtwb2ludCB0aGF0IGxhY2sgcmVzaXN0YW5jZSBtZWNoYW5pc21zIG1heSBiZSBlbmNvdW50ZXJlZCB3aXRoaW4gdGhlIHdpbGQtdHlwZSBkaXN0cmlidXRpb24gc3Vic2VxdWVudCB0byB0aGUgdGltZSB0aGUgc3VzY2VwdGlibGUtb25seSBicmVha3BvaW50IGlzIHNldC4gXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgTk9URSAyOiBGb3Igc3RyYWlucyB5aWVsZGluZyByZXN1bHRzIGluIHRoZSBcIm5vbnN1c2NlcHRpYmxlXCIgY2F0ZWdvcnksIG9yZ2FuaXNtIGlkZW50aWZpY2F0aW9uIGFuZCBhbnRpbWljcm9iaWFsIHN1c2NlcHRpYmlsaXR5IHRlc3QgcmVzdWx0cyBzaG91bGQgYmUgY29uZmlybWVkLlxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFN5bm9ueW06IGRlY3JlYXNlZCBzdXNjZXB0aWJpbGl0eS5cclxuICAgKi9cclxuICBOb25TdXNjZXB0aWJsZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vbi1zdXNjZXB0aWJsZVwiLFxyXG4gICAgY29kZTogXCJOU1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIE9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25EZXRlY3Rpb246IEludGVycHJldGF0aW9ucyBvZiB0aGUgcHJlc2VuY2Ugb3IgYWJzZW5jZSBvZiBhIGNvbXBvbmVudCAvIGFuYWx5dGUgb3Igb3JnYW5pc20gaW4gYSB0ZXN0IG9yIG9mIGEgc2lnbiBpbiBhIGNsaW5pY2FsIG9ic2VydmF0aW9uLiBJbiBrZWVwaW5nIHdpdGggbGFib3JhdG9yeSBkYXRhIHByb2Nlc3NpbmcgcHJhY3RpY2UsIHRoZXNlIGNvbmNlcHRzIHByb3ZpZGUgYSBjYXRlZ29yaWNhbCBpbnRlcnByZXRhdGlvbiBvZiB0aGUgXCJtZWFuaW5nXCIgb2YgdGhlIHF1YW50aXRhdGl2ZSB2YWx1ZSBmb3IgdGhlIHNhbWUgb2JzZXJ2YXRpb24uXHJcbiAgICovXHJcbiAgT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkRldGVjdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25EZXRlY3Rpb25cIixcclxuICAgIGNvZGU6IFwiT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkRldGVjdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIE9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25FeHBlY3RhdGlvbjogSW50ZXJwcmV0YXRpb24gb2YgdGhlIG9ic2VydmVkIHJlc3VsdCB0YWtpbmcgaW50byBhY2NvdW50IGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gKGNvbnRyYWluZGljYXRvcnMpIGFib3V0IHRoZSBwYXRpZW50J3Mgc2l0dWF0aW9uLiBDb25jZXB0cyBpbiB0aGlzIGNhdGVnb3J5IGFyZSBtdXR1YWxseSBleGNsdXNpdmUsIGkuZS4sIGF0IG1vc3Qgb25lIGlzIGFsbG93ZWQuXHJcbiAgICovXHJcbiAgT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkV4cGVjdGF0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbkV4cGVjdGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIk9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25FeHBlY3RhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFBPUzogQSBwcmVzZW5jZSBmaW5kaW5nIG9mIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IC8gYW5hbHl0ZSwgb3JnYW5pc20gb3IgY2xpbmljYWwgc2lnbiBiYXNlZCBvbiB0aGUgZXN0YWJsaXNoZWQgdGhyZXNob2xkIG9mIHRoZSBwZXJmb3JtZWQgdGVzdCBvciBwcm9jZWR1cmUuXHJcbiAgICovXHJcbiAgUG9zaXRpdmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQb3NpdGl2ZVwiLFxyXG4gICAgY29kZTogXCJQT1NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBSOiBCYWN0ZXJpYWwgc3RyYWluIGluaGliaXRlZCBpbiB2aXRybyBieSBhIGNvbmNlbnRyYXRpb24gb2YgYW4gYW50aW1pY3JvYmlhbCBhZ2VudCB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aCBhIGhpZ2ggbGlrZWxpaG9vZCBvZiB0aGVyYXBldXRpYyBmYWlsdXJlLlxyXG4gICAqIFJlZmVyZW5jZTogQ0xTSSAoaHR0cDovL3d3dy5jbHNpLm9yZy9Db250ZW50L05hdmlnYXRpb25NZW51L1Jlc291cmNlcy9IYXJtb25pemVkVGVybWlub2xvZ3lEYXRhYmFzZS9IYXJtb25pemVkX1Rlcm1pbm9sby5odG0pICBcclxuICAgKiBQcm9qZWN0czogSVNPIDIwNzc2LTEsIElTTyAyMDc3Ni0yXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGUgMTogQmFjdGVyaWFsIHN0cmFpbnMgYXJlIGNhdGVnb3JpemVkIGFzIHJlc2lzdGFudCBieSBhcHBseWluZyB0aGUgYXBwcm9wcmlhdGUgYnJlYWtwb2ludHMgaW4gYSBkZWZpbmVkIHBoZW5vdHlwaWMgdGVzdCBzeXN0ZW0uXVxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFtOb3RlIDI6IFRoaXMgYnJlYWtwb2ludCBjYW4gYmUgYWx0ZXJlZCBkdWUgdG8gY2hhbmdlcyBpbiBjaXJjdW1zdGFuY2VzIChlLmcuLCBjaGFuZ2VzIGluIGNvbW1vbmx5IHVzZWQgZHJ1ZyBkb3NhZ2VzLCBlbWVyZ2VuY2Ugb2YgbmV3IHJlc2lzdGFuY2UgbWVjaGFuaXNtcykuXVxyXG4gICAqL1xyXG4gIFJlc2lzdGFudDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlc2lzdGFudFwiLFxyXG4gICAgY29kZTogXCJSXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUmVhY3Rpdml0eU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb246IEludGVycHJldGF0aW9ucyBvZiB0aGUgcHJlc2VuY2UgYW5kIGxldmVsIG9mIHJlYWN0aXZpdHkgb2YgdGhlIHNwZWNpZmllZCBjb21wb25lbnQgLyBhbmFseXRlIHdpdGggdGhlIHJlYWdlbnQgaW4gdGhlIHBlcmZvcm1lZCBsYWJvcmF0b3J5IHRlc3QuXHJcbiAgICovXHJcbiAgUmVhY3Rpdml0eU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZWFjdGl2aXR5T2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gICAgY29kZTogXCJSZWFjdGl2aXR5T2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFJSOiBBIHByZXNlbmNlIGZpbmRpbmcgdXNlZCB0byBpbmRpY2F0ZSB0aGF0IHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IC8gYW5hbHl0ZSByZWFjdGVkIHdpdGggdGhlIHJlYWdlbnQgYWJvdmUgdGhlIHJlbGlhYmx5IG1lYXN1cmFibGUgbGltaXQgb2YgdGhlIHBlcmZvcm1lZCB0ZXN0LlxyXG4gICAqL1xyXG4gIFJlYWN0aXZlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmVhY3RpdmVcIixcclxuICAgIGNvZGU6IFwiUlJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBTOiBCYWN0ZXJpYWwgc3RyYWluIGluaGliaXRlZCBieSBpbiB2aXRybyBjb25jZW50cmF0aW9uIG9mIGFuIGFudGltaWNyb2JpYWwgYWdlbnQgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggYSBoaWdoIGxpa2VsaWhvb2Qgb2YgdGhlcmFwZXV0aWMgc3VjY2Vzcy5cclxuICAgKiBSZWZlcmVuY2U6IENMU0kgKGh0dHA6Ly93d3cuY2xzaS5vcmcvQ29udGVudC9OYXZpZ2F0aW9uTWVudS9SZXNvdXJjZXMvSGFybW9uaXplZFRlcm1pbm9sb2d5RGF0YWJhc2UvSGFybW9uaXplZF9UZXJtaW5vbG8uaHRtKVxyXG4gICAqIFN5bm9ueW0gKGVhcmxpZXIgdGVybSk6IFNlbnNpdGl2ZSBQcm9qZWN0czogSVNPIDIwNzc2LTEsIElTTyAyMDc3Ni0yXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGUgMTogQmFjdGVyaWFsIHN0cmFpbnMgYXJlIGNhdGVnb3JpemVkIGFzIHN1c2NlcHRpYmxlIGJ5IGFwcGx5aW5nIHRoZSBhcHByb3ByaWF0ZSBicmVha3BvaW50cyBpbiBhIGRlZmluZWQgcGhlbm90eXBpYyBzeXN0ZW0uXVxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFtOb3RlIDI6IFRoaXMgYnJlYWtwb2ludCBjYW4gYmUgYWx0ZXJlZCBkdWUgdG8gY2hhbmdlcyBpbiBjaXJjdW1zdGFuY2VzIChlLmcuLCBjaGFuZ2VzIGluIGNvbW1vbmx5IHVzZWQgZHJ1ZyBkb3NhZ2VzLCBlbWVyZ2VuY2Ugb2YgbmV3IHJlc2lzdGFuY2UgbWVjaGFuaXNtcykuXVxyXG4gICAqL1xyXG4gIFN1c2NlcHRpYmxlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3VzY2VwdGlibGVcIixcclxuICAgIGNvZGU6IFwiU1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFNERDogQSBjYXRlZ29yeSB0aGF0IGluY2x1ZGVzIGlzb2xhdGVzIHdpdGggYW50aW1pY3JvYmlhbCBhZ2VudCBtaW5pbXVtIGluaGliaXRvcnkgY29uY2VudHJhdGlvbnMgKE1JQ3MpIHRoYXQgYXBwcm9hY2ggdXN1YWxseSBhdHRhaW5hYmxlIGJsb29kIGFuZCB0aXNzdWUgbGV2ZWxzIGFuZCBmb3Igd2hpY2ggcmVzcG9uc2UgcmF0ZXMgbWF5IGJlIGxvd2VyIHRoYW4gZm9yIHN1c2NlcHRpYmxlIGlzb2xhdGVzLlxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFJlZmVyZW5jZTogQ0xTSSBkb2N1bWVudCBNNDQtQTIgMjAwOSBcIk1ldGhvZCBmb3IgYW50aWZ1bmdhbCBkaXNrIGRpZmZ1c2lvbiBzdXNjZXB0aWJpbGl0eSB0ZXN0aW5nIG9mIHllYXN0czsgYXBwcm92ZWQgZ3VpZGVsaW5lIC0gc2Vjb25kIGVkaXRpb25cIiAtIHBhZ2UgMi5cclxuICAgKi9cclxuICBTdXNjZXB0aWJsZURvc2VEZXBlbmRlbnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTdXNjZXB0aWJsZS1kb3NlIGRlcGVuZGVudFwiLFxyXG4gICAgY29kZTogXCJTRERcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBTWU4tUjogQSBjYXRlZ29yeSBmb3IgaXNvbGF0ZXMgd2hlcmUgdGhlIGJhY3RlcmlhIChlLmcuIGVudGVyb2NvY2NpKSBhcmUgbm90IHN1c2NlcHRpYmxlIGluIHZpdHJvIHRvIGEgY29tYmluYXRpb24gdGhlcmFweSAoZS5nLiwgaGlnaC1sZXZlbCBhbWlub2dseWNvc2lkZSBhbmQgY2VsbCB3YWxsIGFjdGl2ZSBhZ2VudCkuICBUaGlzIGlzIHByZWRpY3RpdmUgdGhhdCB0aGlzIGNvbWJpbmF0aW9uIHRoZXJhcHkgd2lsbCBub3QgYmUgZWZmZWN0aXZlLiBcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2FnZSBOb3RlOiBTaW5jZSB0aGUgdXNlIG9mIHBlbmljaWxsaW4gb3IgYW1waWNpbGxpbiBhbG9uZSBvZnRlbiByZXN1bHRzIGluIHRyZWF0bWVudCBmYWlsdXJlIG9mIHNlcmlvdXMgZW50ZXJvY29jY2FsIG9yIG90aGVyIGJhY3RlcmlhbCBpbmZlY3Rpb25zLCBjb21iaW5hdGlvbiB0aGVyYXB5IGlzIHVzdWFsbHkgaW5kaWNhdGVkIHRvIGVuaGFuY2UgYmFjdGVyaWNpZGFsIGFjdGl2aXR5LiBUaGUgc3luZXJneSBiZXR3ZWVuIGEgY2VsbCB3YWxsIGFjdGl2ZSBhZ2VudCAoc3VjaCBhcyBwZW5pY2lsbGluLCBhbXBpY2lsbGluLCBvciB2YW5jb215Y2luKSBhbmQgYW4gYW1pbm9nbHljb3NpZGUgKHN1Y2ggYXMgZ2VudGFtaWNpbiwga2FuYW15Y2luIG9yIHN0cmVwdG9teWNpbikgaXMgYmVzdCBwcmVkaWN0ZWQgYnkgc2NyZWVuaW5nIGZvciBoaWdoLWxldmVsIGJhY3RlcmlhbCByZXNpc3RhbmNlIHRvIHRoZSBhbWlub2dseWNvc2lkZS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcGVuIElzc3VlOiBUaGUgcHJpbnQgbmFtZSBvZiB0aGUgY29kZSBpcyB2ZXJ5IGdlbmVyYWwgYW5kIHRoZSBkZXNjcmlwdGlvbiBpcyB2ZXJ5IHNwZWNpZmljIHRvIGEgcGFpciBvZiBjbGFzc2VzIG9mIGFnZW50cywgd2hpY2ggbWF5IGxlYWQgdG8gY29uZnVzaW9uIG9mIHRoZXNlIGNvbmNlcHRzIGluIHRoZSBmdXR1cmUgc2hvdWxkIG90aGVyIHN5bmVyZ2llcyBiZSBmb3VuZC5cclxuICAgKi9cclxuICBTeW5lcmd5UmVzaXN0YW50OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3luZXJneSAtIHJlc2lzdGFudFwiLFxyXG4gICAgY29kZTogXCJTWU4tUlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFNZTi1TOiBBIGNhdGVnb3J5IGZvciBpc29sYXRlcyB3aGVyZSB0aGUgYmFjdGVyaWEgKGUuZy4gZW50ZXJvY29jY2kpIGFyZSBzdXNjZXB0aWJsZSBpbiB2aXRybyB0byBhIGNvbWJpbmF0aW9uIHRoZXJhcHkgKGUuZy4sIGhpZ2gtbGV2ZWwgYW1pbm9nbHljb3NpZGUgYW5kIGNlbGwgd2FsbCBhY3RpdmUgYWdlbnQpLiAgVGhpcyBpcyBwcmVkaWN0aXZlIHRoYXQgdGhpcyBjb21iaW5hdGlvbiB0aGVyYXB5IHdpbGwgYmUgZWZmZWN0aXZlLiBcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2FnZSBOb3RlOiBTaW5jZSB0aGUgdXNlIG9mIHBlbmljaWxsaW4gb3IgYW1waWNpbGxpbiBhbG9uZSBvZnRlbiByZXN1bHRzIGluIHRyZWF0bWVudCBmYWlsdXJlIG9mIHNlcmlvdXMgZW50ZXJvY29jY2FsIG9yIG90aGVyIGJhY3RlcmlhbCBpbmZlY3Rpb25zLCBjb21iaW5hdGlvbiB0aGVyYXB5IGlzIHVzdWFsbHkgaW5kaWNhdGVkIHRvIGVuaGFuY2UgYmFjdGVyaWNpZGFsIGFjdGl2aXR5LiBUaGUgc3luZXJneSBiZXR3ZWVuIGEgY2VsbCB3YWxsIGFjdGl2ZSBhZ2VudCAoc3VjaCBhcyBwZW5pY2lsbGluLCBhbXBpY2lsbGluLCBvciB2YW5jb215Y2luKSBhbmQgYW4gYW1pbm9nbHljb3NpZGUgKHN1Y2ggYXMgZ2VudGFtaWNpbiwga2FuYW15Y2luIG9yIHN0cmVwdG9teWNpbikgaXMgYmVzdCBwcmVkaWN0ZWQgYnkgc2NyZWVuaW5nIGZvciBoaWdoLWxldmVsIGJhY3RlcmlhbCByZXNpc3RhbmNlIHRvIHRoZSBhbWlub2dseWNvc2lkZS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcGVuIElzc3VlOiBUaGUgcHJpbnQgbmFtZSBvZiB0aGUgY29kZSBpcyB2ZXJ5IGdlbmVyYWwgYW5kIHRoZSBkZXNjcmlwdGlvbiBpcyB2ZXJ5IHNwZWNpZmljIHRvIGEgcGFpciBvZiBjbGFzc2VzIG9mIGFnZW50cywgd2hpY2ggbWF5IGxlYWQgdG8gY29uZnVzaW9uIG9mIHRoZXNlIGNvbmNlcHRzIGluIHRoZSBmdXR1cmUgc2hvdWxkIG90aGVyIHN5bmVyZ2llcyBiZSBmb3VuZC5cclxuICAgKi9cclxuICBTeW5lcmd5U3VzY2VwdGlibGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTeW5lcmd5IC0gc3VzY2VwdGlibGVcIixcclxuICAgIGNvZGU6IFwiU1lOLVNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBVOiBUaGUgY3VycmVudCByZXN1bHQgaGFzIGluY3JlYXNlZCBmcm9tIHRoZSBwcmV2aW91cyByZXN1bHQgZm9yIGEgcXVhbnRpdGF0aXZlIG9ic2VydmF0aW9uICh0aGUgY2hhbmdlIGlzIHNpZ25pZmljYW50IGFzIGRlZmluZWQgaW4gdGhlIHJlc3BlY3RpdmUgdGVzdCBwcm9jZWR1cmUpLlxyXG4gICAqL1xyXG4gIFNpZ25pZmljYW50Q2hhbmdlVXA6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTaWduaWZpY2FudCBjaGFuZ2UgdXBcIixcclxuICAgIGNvZGU6IFwiVVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFVORTogVGhpcyByZXN1bHQgaGFzIGJlZW4gZXZhbHVhdGVkIGluIGxpZ2h0IG9mIGtub3duIGNvbnRyYWluZGljYXRvcnMuICBPbmNlIHRob3NlIGNvbnRyYWluZGljYXRvcnMgaGF2ZSBiZWVuIHRha2VuIGludG8gYWNjb3VudCB0aGUgcmVzdWx0IGlzIGRldGVybWluZWQgdG8gYmUgXCJVbmV4cGVjdGVkXCIgKGUuZy4sIHByZXNlbmNlIG9mIG5vbi1wcmVzY3JpYmVkIGRydWdzIGluIGEgcGF0aWVudCB0aGF0IGlzIHRha2luZyBwcmVzY3JpcHRpb24gbWVkaWNhdGlvbiBmb3IgcGFpbiBtYW5hZ2VtZW50KS5cclxuICAgKi9cclxuICBVbmV4cGVjdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVW5leHBlY3RlZFwiLFxyXG4gICAgY29kZTogXCJVTkVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBXOiBUaGUgY3VycmVudCByZXN1bHQgb3Igb2JzZXJ2YXRpb24gdmFsdWUgaGFzIGRlZ3JhZGVkIGNvbXBhcmVkIHRvIHRoZSBwcmV2aW91cyByZXN1bHQgb3Igb2JzZXJ2YXRpb24gdmFsdWUgKHRoZSBjaGFuZ2UgaXMgc2lnbmlmaWNhbnQgYXMgZGVmaW5lZCBpbiB0aGUgcmVzcGVjdGl2ZSB0ZXN0IHByb2NlZHVyZSkuXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgW05vdGU6IFRoaXMgY2FuIGJlIGFwcGxpZWQgdG8gcXVhbnRpdGF0aXZlIG9yIHF1YWxpdGF0aXZlIG9ic2VydmF0aW9ucy5dXHJcbiAgICovXHJcbiAgV29yc2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJXb3JzZVwiLFxyXG4gICAgY29kZTogXCJXXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvbkludGVycHJldGF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogV1I6IEEgd2VpZ2h0ZWQgcHJlc2VuY2UgZmluZGluZyB1c2VkIHRvIGluZGljYXRlIHRoYXQgdGhlIHNwZWNpZmllZCBjb21wb25lbnQgLyBhbmFseXRlIHJlYWN0ZWQgd2l0aCB0aGUgcmVhZ2VudCwgYnV0IGJlbG93IHRoZSByZWxpYWJseSBtZWFzdXJhYmxlIGxpbWl0IG9mIHRoZSBwZXJmb3JtZWQgdGVzdC5cclxuICAgKi9cclxuICBXZWFrbHlSZWFjdGl2ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIldlYWtseSByZWFjdGl2ZVwiLFxyXG4gICAgY29kZTogXCJXUlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvblwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEEgY2F0ZWdvcmljYWwgYXNzZXNzbWVudCwgcHJvdmlkaW5nIGEgcm91Z2ggcXVhbGl0YXRpdmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIG9ic2VydmF0aW9uIHZhbHVlLCAgICBzdWNoIGFzIOKAnG5vcm1hbOKAnS8g4oCcYWJub3JtYWzigJ0s4oCdbG934oCdIC8g4oCcaGlnaOKAnSwg4oCcYmV0dGVy4oCdIC8g4oCcd29yc2XigJ0sIOKAnHN1c2NlcHRpYmxl4oCdIC8g4oCccmVzaXN0YW504oCdLCDigJxleHBlY3RlZOKAnS8g4oCcbm90IGV4cGVjdGVk4oCdLiAgICBUaGUgdmFsdWUgc2V0IGlzIGludGVuZGVkIHRvIGJlIGZvciBBTlkgdXNlIHdoZXJlIGNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVycHJldGF0aW9uIGlzIG5lZWRlZC4gICBcclxuICogICAgXHJcbiAqICAgIE5vdGVzOlxyXG4gKiAgICBcclxuICogICAgVGhpcyBpcyBiZWluZyBjb21tdW5pY2F0ZWQgaW4gdjIueCBpbiBPQlgtOCAoT2JzZXJ2YXRpb24gSW50ZXJwcmV0YXRpb24pLCBpbiB2MyBpbiBPYnNlcnZhdGlvbkludGVycHJldGF0aW9uIChDV0UpIGluIFIxIChSZXByZXNlbnRhdGl2ZSBSZWFsbSkgYW5kIGluIEZISVIgaW4gICAgT2JzZXJ2YXRpb24uaW50ZXJwcmV0YXRpb24uIEhpc3RvcmljYWxseSB0aGVzZSB2YWx1ZXMgY29tZSBmcm9tIHRoZSBsYWJvcmF0b3J5IGRvbWFpbiwgYW5kIHRoZXNlIGNvZGVzIGFyZSBleHRlbnNpdmVseSAgICB1c2VkLiBUaGUgdmFsdWUgc2V0IGJpbmRpbmcgaXMgZXh0ZW5zaWJsZSwgc28gY29kZXMgb3V0c2lkZSB0aGUgdmFsdWUgc2V0IHRoYXQgYXJlIG5lZWRlZCBmb3IgaW50ZXJwcmV0YXRpb24gY29uY2VwdHMgICAgKGkuZS4gcGFydGljdWxhciBtZWFuaW5ncykgdGhhdCBhcmUgbm90IGluY2x1ZGVkIGluIHRoZSB2YWx1ZSBzZXQgY2FuIGJlIHVzZWQsIGFuZCB0aGVzZSBuZXcgY29kZXMgbWF5IGFsc28gYmUgYWRkZWQgdG8gICAgdGhlIHZhbHVlIHNldCBhbmQgcHVibGlzaGVkIGluIGEgZnV0dXJlIHZlcnNpb24uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPYnNlcnZhdGlvbkludGVycHJldGF0aW9uQ29kaW5nVHlwZSA9IHR5cGVvZiBPYnNlcnZhdGlvbkludGVycHJldGF0aW9uQ29kaW5ncztcclxuIl19