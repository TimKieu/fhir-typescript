// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/testscript-profile-destination-types|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set defines a set of codes that are used to indicate the profile type of a test system when acting as the destination within a TestScript.
 */
export const TestscriptProfileDestinationTypesCodings = {
    /**
     * FHIR-SDC-FormManager: A FHIR server acting as a Structured Data Capture Form Manager.
     */
    FHIRSDCFormManager: new Coding({
        display: "FHIR SDC FormManager",
        code: "FHIR-SDC-FormManager",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    }),
    /**
     * FHIR-SDC-FormProcessor: A FHIR server acting as a Structured Data Capture Form Processor.
     */
    FHIRSDCFormProcessor: new Coding({
        display: "FHIR SDC FormProcessor",
        code: "FHIR-SDC-FormProcessor",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    }),
    /**
     * FHIR-SDC-FormReceiver: A FHIR server acting as a Structured Data Capture Form Receiver.
     */
    FHIRSDCFormReceiver: new Coding({
        display: "FHIR SDC FormReceiver",
        code: "FHIR-SDC-FormReceiver",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    }),
    /**
     * FHIR-Server: General FHIR server used to respond to operations sent from a FHIR client.
     */
    FHIRServer: new Coding({
        display: "FHIR Server",
        code: "FHIR-Server",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdHNjcmlwdFByb2ZpbGVEZXN0aW5hdGlvblR5cGVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVGVzdHNjcmlwdFByb2ZpbGVEZXN0aW5hdGlvblR5cGVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RkFBeUY7QUFFekYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUc7SUFDdEQ7O09BRUc7SUFDSCxrQkFBa0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM3QixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLDRFQUE0RTtLQUNyRixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxvQkFBb0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMvQixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRSx3QkFBd0I7UUFDOUIsTUFBTSxFQUFFLDRFQUE0RTtLQUNyRixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM5QixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsTUFBTSxFQUFFLDRFQUE0RTtLQUNyRixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDRFQUE0RTtLQUNyRixDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC90ZXN0c2NyaXB0LXByb2ZpbGUtZGVzdGluYXRpb24tdHlwZXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBhcmUgdXNlZCB0byBpbmRpY2F0ZSB0aGUgcHJvZmlsZSB0eXBlIG9mIGEgdGVzdCBzeXN0ZW0gd2hlbiBhY3RpbmcgYXMgdGhlIGRlc3RpbmF0aW9uIHdpdGhpbiBhIFRlc3RTY3JpcHQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVGVzdHNjcmlwdFByb2ZpbGVEZXN0aW5hdGlvblR5cGVzQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBGSElSLVNEQy1Gb3JtTWFuYWdlcjogQSBGSElSIHNlcnZlciBhY3RpbmcgYXMgYSBTdHJ1Y3R1cmVkIERhdGEgQ2FwdHVyZSBGb3JtIE1hbmFnZXIuXHJcbiAgICovXHJcbiAgRkhJUlNEQ0Zvcm1NYW5hZ2VyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRkhJUiBTREMgRm9ybU1hbmFnZXJcIixcclxuICAgIGNvZGU6IFwiRkhJUi1TREMtRm9ybU1hbmFnZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Rlc3RzY3JpcHQtcHJvZmlsZS1kZXN0aW5hdGlvbi10eXBlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEZISVItU0RDLUZvcm1Qcm9jZXNzb3I6IEEgRkhJUiBzZXJ2ZXIgYWN0aW5nIGFzIGEgU3RydWN0dXJlZCBEYXRhIENhcHR1cmUgRm9ybSBQcm9jZXNzb3IuXHJcbiAgICovXHJcbiAgRkhJUlNEQ0Zvcm1Qcm9jZXNzb3I6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGSElSIFNEQyBGb3JtUHJvY2Vzc29yXCIsXHJcbiAgICBjb2RlOiBcIkZISVItU0RDLUZvcm1Qcm9jZXNzb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Rlc3RzY3JpcHQtcHJvZmlsZS1kZXN0aW5hdGlvbi10eXBlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEZISVItU0RDLUZvcm1SZWNlaXZlcjogQSBGSElSIHNlcnZlciBhY3RpbmcgYXMgYSBTdHJ1Y3R1cmVkIERhdGEgQ2FwdHVyZSBGb3JtIFJlY2VpdmVyLlxyXG4gICAqL1xyXG4gIEZISVJTRENGb3JtUmVjZWl2ZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGSElSIFNEQyBGb3JtUmVjZWl2ZXJcIixcclxuICAgIGNvZGU6IFwiRkhJUi1TREMtRm9ybVJlY2VpdmVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS90ZXN0c2NyaXB0LXByb2ZpbGUtZGVzdGluYXRpb24tdHlwZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBGSElSLVNlcnZlcjogR2VuZXJhbCBGSElSIHNlcnZlciB1c2VkIHRvIHJlc3BvbmQgdG8gb3BlcmF0aW9ucyBzZW50IGZyb20gYSBGSElSIGNsaWVudC5cclxuICAgKi9cclxuICBGSElSU2VydmVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRkhJUiBTZXJ2ZXJcIixcclxuICAgIGNvZGU6IFwiRkhJUi1TZXJ2ZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Rlc3RzY3JpcHQtcHJvZmlsZS1kZXN0aW5hdGlvbi10eXBlc1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBhcmUgdXNlZCB0byBpbmRpY2F0ZSB0aGUgcHJvZmlsZSB0eXBlIG9mIGEgdGVzdCBzeXN0ZW0gd2hlbiBhY3RpbmcgYXMgdGhlIGRlc3RpbmF0aW9uIHdpdGhpbiBhIFRlc3RTY3JpcHQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUZXN0c2NyaXB0UHJvZmlsZURlc3RpbmF0aW9uVHlwZXNDb2RpbmdUeXBlID0gdHlwZW9mIFRlc3RzY3JpcHRQcm9maWxlRGVzdGluYXRpb25UeXBlc0NvZGluZ3M7XHJcbiJdfQ==