// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/testscript-profile-destination-types|4.0.1
/**
 * This value set defines a set of codes that are used to indicate the profile type of a test system when acting as the destination within a TestScript.
 */
export const TestscriptProfileDestinationTypesCodings = {
    /**
     * FHIR-SDC-FormManager: A FHIR server acting as a Structured Data Capture Form Manager.
     */
    FHIRSDCFormManager: {
        display: "FHIR SDC FormManager",
        code: "FHIR-SDC-FormManager",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    },
    /**
     * FHIR-SDC-FormProcessor: A FHIR server acting as a Structured Data Capture Form Processor.
     */
    FHIRSDCFormProcessor: {
        display: "FHIR SDC FormProcessor",
        code: "FHIR-SDC-FormProcessor",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    },
    /**
     * FHIR-SDC-FormReceiver: A FHIR server acting as a Structured Data Capture Form Receiver.
     */
    FHIRSDCFormReceiver: {
        display: "FHIR SDC FormReceiver",
        code: "FHIR-SDC-FormReceiver",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    },
    /**
     * FHIR-Server: General FHIR server used to respond to operations sent from a FHIR client.
     */
    FHIRServer: {
        display: "FHIR Server",
        code: "FHIR-Server",
        system: "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdHNjcmlwdFByb2ZpbGVEZXN0aW5hdGlvblR5cGVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVGVzdHNjcmlwdFByb2ZpbGVEZXN0aW5hdGlvblR5cGVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RkFBeUY7QUEwQnpGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQStDO0lBQ2xHOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQixJQUFJLEVBQUUsc0JBQXNCO1FBQzVCLE1BQU0sRUFBRSw0RUFBNEU7S0FDckY7SUFDRDs7T0FFRztJQUNILG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixNQUFNLEVBQUUsNEVBQTRFO0tBQ3JGO0lBQ0Q7O09BRUc7SUFDSCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsTUFBTSxFQUFFLDRFQUE0RTtLQUNyRjtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDRFQUE0RTtLQUNyRjtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdGVzdHNjcmlwdC1wcm9maWxlLWRlc3RpbmF0aW9uLXR5cGVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0aGF0IGFyZSB1c2VkIHRvIGluZGljYXRlIHRoZSBwcm9maWxlIHR5cGUgb2YgYSB0ZXN0IHN5c3RlbSB3aGVuIGFjdGluZyBhcyB0aGUgZGVzdGluYXRpb24gd2l0aGluIGEgVGVzdFNjcmlwdC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFRlc3RzY3JpcHRQcm9maWxlRGVzdGluYXRpb25UeXBlc0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogRkhJUi1TREMtRm9ybU1hbmFnZXI6IEEgRkhJUiBzZXJ2ZXIgYWN0aW5nIGFzIGEgU3RydWN0dXJlZCBEYXRhIENhcHR1cmUgRm9ybSBNYW5hZ2VyLlxyXG4gICAqL1xyXG4gIEZISVJTRENGb3JtTWFuYWdlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBGSElSLVNEQy1Gb3JtUHJvY2Vzc29yOiBBIEZISVIgc2VydmVyIGFjdGluZyBhcyBhIFN0cnVjdHVyZWQgRGF0YSBDYXB0dXJlIEZvcm0gUHJvY2Vzc29yLlxyXG4gICAqL1xyXG4gIEZISVJTRENGb3JtUHJvY2Vzc29yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEZISVItU0RDLUZvcm1SZWNlaXZlcjogQSBGSElSIHNlcnZlciBhY3RpbmcgYXMgYSBTdHJ1Y3R1cmVkIERhdGEgQ2FwdHVyZSBGb3JtIFJlY2VpdmVyLlxyXG4gICAqL1xyXG4gIEZISVJTRENGb3JtUmVjZWl2ZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogRkhJUi1TZXJ2ZXI6IEdlbmVyYWwgRkhJUiBzZXJ2ZXIgdXNlZCB0byByZXNwb25kIHRvIG9wZXJhdGlvbnMgc2VudCBmcm9tIGEgRkhJUiBjbGllbnQuXHJcbiAgICovXHJcbiAgRkhJUlNlcnZlcjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBhcmUgdXNlZCB0byBpbmRpY2F0ZSB0aGUgcHJvZmlsZSB0eXBlIG9mIGEgdGVzdCBzeXN0ZW0gd2hlbiBhY3RpbmcgYXMgdGhlIGRlc3RpbmF0aW9uIHdpdGhpbiBhIFRlc3RTY3JpcHQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVGVzdHNjcmlwdFByb2ZpbGVEZXN0aW5hdGlvblR5cGVzQ29kaW5nczpUZXN0c2NyaXB0UHJvZmlsZURlc3RpbmF0aW9uVHlwZXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIEZISVItU0RDLUZvcm1NYW5hZ2VyOiBBIEZISVIgc2VydmVyIGFjdGluZyBhcyBhIFN0cnVjdHVyZWQgRGF0YSBDYXB0dXJlIEZvcm0gTWFuYWdlci5cclxuICAgKi9cclxuICBGSElSU0RDRm9ybU1hbmFnZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRkhJUiBTREMgRm9ybU1hbmFnZXJcIixcclxuICAgIGNvZGU6IFwiRkhJUi1TREMtRm9ybU1hbmFnZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Rlc3RzY3JpcHQtcHJvZmlsZS1kZXN0aW5hdGlvbi10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogRkhJUi1TREMtRm9ybVByb2Nlc3NvcjogQSBGSElSIHNlcnZlciBhY3RpbmcgYXMgYSBTdHJ1Y3R1cmVkIERhdGEgQ2FwdHVyZSBGb3JtIFByb2Nlc3Nvci5cclxuICAgKi9cclxuICBGSElSU0RDRm9ybVByb2Nlc3Nvcjoge1xyXG4gICAgZGlzcGxheTogXCJGSElSIFNEQyBGb3JtUHJvY2Vzc29yXCIsXHJcbiAgICBjb2RlOiBcIkZISVItU0RDLUZvcm1Qcm9jZXNzb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Rlc3RzY3JpcHQtcHJvZmlsZS1kZXN0aW5hdGlvbi10eXBlc1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogRkhJUi1TREMtRm9ybVJlY2VpdmVyOiBBIEZISVIgc2VydmVyIGFjdGluZyBhcyBhIFN0cnVjdHVyZWQgRGF0YSBDYXB0dXJlIEZvcm0gUmVjZWl2ZXIuXHJcbiAgICovXHJcbiAgRkhJUlNEQ0Zvcm1SZWNlaXZlcjoge1xyXG4gICAgZGlzcGxheTogXCJGSElSIFNEQyBGb3JtUmVjZWl2ZXJcIixcclxuICAgIGNvZGU6IFwiRkhJUi1TREMtRm9ybVJlY2VpdmVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS90ZXN0c2NyaXB0LXByb2ZpbGUtZGVzdGluYXRpb24tdHlwZXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEZISVItU2VydmVyOiBHZW5lcmFsIEZISVIgc2VydmVyIHVzZWQgdG8gcmVzcG9uZCB0byBvcGVyYXRpb25zIHNlbnQgZnJvbSBhIEZISVIgY2xpZW50LlxyXG4gICAqL1xyXG4gIEZISVJTZXJ2ZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRkhJUiBTZXJ2ZXJcIixcclxuICAgIGNvZGU6IFwiRkhJUi1TZXJ2ZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Rlc3RzY3JpcHQtcHJvZmlsZS1kZXN0aW5hdGlvbi10eXBlc1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==