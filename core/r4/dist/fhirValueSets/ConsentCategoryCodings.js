// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/consent-category|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set includes sample Consent Directive Type codes, including several consent directive related LOINC codes; HL7 VALUE SET: ActConsentType(2.16.840.1.113883.1.11.19897); examples of US realm consent directive legal descriptions and references to online and/or downloadable forms such as the SSA-827 Authorization to Disclose Information to the Social Security Administration; and other anticipated consent directives related to participation in a clinical trial, medical procedures, reproductive procedures; health care directive (Living Will); advance directive, do not resuscitate (DNR); Physician Orders for Life-Sustaining Treatment (POLST)
 */
export const ConsentCategoryCodings = {
    /**
     * Code: 57016-8
     */
    PrivacyPolicyAcknowledgementDocument: new Coding({
        display: "Privacy policy acknowledgement Document",
        code: "57016-8",
        system: "http://loinc.org",
    }),
    /**
     * Code: 57017-6
     */
    PrivacyPolicyOrganizationDocument: new Coding({
        display: "Privacy policy Organization Document ",
        code: "57017-6",
        system: "http://loinc.org",
    }),
    /**
     * Code: 59284-0
     */
    PatientConsent: new Coding({
        display: "Patient Consent ",
        code: "59284-0",
        system: "http://loinc.org",
    }),
    /**
     * Code: 64292-6
     */
    ReleaseOfInformationConsent: new Coding({
        display: "Release of information consent ",
        code: "64292-6",
        system: "http://loinc.org",
    }),
    /**
     * acd: Any instructions, written or given verbally by a patient to a health care provider in anticipation of potential need for medical treatment. [2005 Honor My Wishes]
     */
    AdvanceDirective: new Coding({
        display: "Advance Directive",
        code: "acd",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * dnr: A legal document, signed by both the patient and their provider, stating a desire not to have CPR initiated in case of a cardiac event. Note: This form was replaced in 2003 with the Physician Orders for Life-Sustaining Treatment [POLST].
     */
    DoNotResuscitate: new Coding({
        display: "Do Not Resuscitate",
        code: "dnr",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * emrgonly: Opt-in to disclosure of health information for emergency only consent directive. Comment: This general consent directive specifically limits disclosure of health information for purpose of emergency treatment. Additional parameters may further limit the disclosure to specific users, roles, duration, types of information, and impose uses obligations. [ActConsentDirective (2.16.840.1.113883.1.11.20425)]
     */
    EmergencyOnly: new Coding({
        display: "Emergency Only",
        code: "emrgonly",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * hcd: Patient's document telling patient's health care provider what the patient wants or does not want if the patient is diagnosed as being terminally ill and in a persistent vegetative state or in a permanently unconscious condition.[2005 Honor My Wishes]
     */
    HealthCareDirective: new Coding({
        display: "Health Care Directive",
        code: "hcd",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * ICOL: Definition: Consent to have healthcare information collected in an electronic health record.  This entails that the information may be used in analysis, modified, updated.
     */
    InformationCollection: new Coding({
        display: "information collection",
        code: "ICOL",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * IDSCL: Definition: Consent to have collected healthcare information disclosed.
     */
    InformationDisclosure: new Coding({
        display: "information disclosure",
        code: "IDSCL",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * INFA: Definition: Consent to access healthcare information.
     */
    InformationAccess: new Coding({
        display: "information access",
        code: "INFA",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * INFAO: Definition: Consent to access or "read" only, which entails that the information is not to be copied, screen printed, saved, emailed, stored, re-disclosed or altered in any way.  This level ensures that data which is masked or to which access is restricted will not be.
     *
     *
     *                            Example: Opened and then emailed or screen printed for use outside of the consent directive purpose.
     */
    AccessOnly: new Coding({
        display: "access only",
        code: "INFAO",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * INFASO: Definition: Consent to access and save only, which entails that access to the saved copy will remain locked.
     */
    AccessAndSaveOnly: new Coding({
        display: "access and save only",
        code: "INFASO",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * IRDSCL: Definition: Information re-disclosed without the patient's consent.
     */
    InformationRedisclosure: new Coding({
        display: "information redisclosure",
        code: "IRDSCL",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * npp: Acknowledgement of custodian notice of privacy practices. Usage Notes: This type of consent directive acknowledges a custodian's notice of privacy practices including its permitted collection, access, use and disclosure of health information to users and for purposes of use specified. [ActConsentDirective (2.16.840.1.113883.1.11.20425)]
     */
    NoticeOfPrivacyPractices: new Coding({
        display: "Notice of Privacy Practices",
        code: "npp",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * polst: The Physician Order for Life-Sustaining Treatment form records a person's health care wishes for end of life emergency treatment and translates them into an order by the physician. It must be reviewed and signed by both the patient and the physician, Advanced Registered Nurse Practitioner or Physician Assistant. [2005 Honor My Wishes] Comment: Opt-in Consent Directive with restrictions.
     */
    POLST: new Coding({
        display: "POLST",
        code: "polst",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * research: Consent to have healthcare information in an electronic health record accessed for research purposes. [VALUE SET: ActConsentType (2.16.840.1.113883.1.11.19897)]
     */
    ResearchInformationAccess: new Coding({
        display: "Research Information Access",
        code: "research",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * RESEARCH: Definition: Consent to have healthcare information in an electronic health record accessed for research purposes.
     */
    ResearchInformationAccessRESEARCH: new Coding({
        display: "research information access",
        code: "RESEARCH",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * rsdid: Consent to have de-identified healthcare information in an electronic health record that is accessed for research purposes, but without consent to re-identify the information under any circumstance. [VALUE SET: ActConsentType (2.16.840.1.113883.1.11.19897)
     */
    DeIdentifiedInformationAccess: new Coding({
        display: "De-identified Information Access",
        code: "rsdid",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * RSDID: Definition: Consent to have de-identified healthcare information in an electronic health record that is accessed for research purposes, but without consent to re-identify the information under any circumstance.
     */
    DeIdentifiedInformationAccessRSDID: new Coding({
        display: "de-identified information access",
        code: "RSDID",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * rsreid: Consent to have de-identified healthcare information in an electronic health record that is accessed for research purposes re-identified under specific circumstances outlined in the consent. [VALUE SET: ActConsentType (2.16.840.1.113883.1.11.19897)]
     */
    ReIdentifiableInformationAccess: new Coding({
        display: "Re-identifiable Information Access",
        code: "rsreid",
        system: "http://terminology.hl7.org/CodeSystem/consentcategorycodes",
    }),
    /**
     * RSREID: Definition: Consent to have de-identified healthcare information in an electronic health record that is accessed for research purposes re-identified under specific circumstances outlined in the consent.
     *
     *
     *                            Example:: Where there is a need to inform the subject of potential health issues.
     */
    ReIdentifiableInformationAccessRSREID: new Coding({
        display: "re-identifiable information access",
        code: "RSREID",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
};
//# sourceMappingURL=data:application/json;base64,