{"version":3,"file":"MapTransformCodes.js","sources":["../../src/fhirValueSets/MapTransformCodes.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-transform|4.0.1\r\n\r\n/**\r\n * How data is copied/created.\r\n */\r\nexport const MapTransformCodes = {\r\n  /**\r\n   * append: append(source...) - source is element or string.\r\n   */\r\n  Append: \"append\",\r\n  /**\r\n   * c: Create a Coding. Parameters = (system. Code[, display]).\r\n   */\r\n  C: \"c\",\r\n  /**\r\n   * cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.\r\n   */\r\n  Cast: \"cast\",\r\n  /**\r\n   * cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).\r\n   */\r\n  Cc: \"cc\",\r\n  /**\r\n   * copy: copy(source).\r\n   */\r\n  Copy: \"copy\",\r\n  /**\r\n   * cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.\r\n   */\r\n  Cp: \"cp\",\r\n  /**\r\n   * create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.\r\n   */\r\n  Create: \"create\",\r\n  /**\r\n   * dateOp: Perform a date operation. *Parameters to be documented*.\r\n   */\r\n  DateOp: \"dateOp\",\r\n  /**\r\n   * escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.\r\n   */\r\n  Escape: \"escape\",\r\n  /**\r\n   * evaluate: Execute the supplied FHIRPath expression and use the value returned by that.\r\n   */\r\n  Evaluate: \"evaluate\",\r\n  /**\r\n   * id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.\r\n   */\r\n  Id: \"id\",\r\n  /**\r\n   * pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.\r\n   */\r\n  Pointer: \"pointer\",\r\n  /**\r\n   * qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.\r\n   */\r\n  Qty: \"qty\",\r\n  /**\r\n   * reference: reference(source : object) - return a string that references the provided tree properly.\r\n   */\r\n  Reference: \"reference\",\r\n  /**\r\n   * translate: translate(source, uri_of_map) - use the translate operation.\r\n   */\r\n  Translate: \"translate\",\r\n  /**\r\n   * truncate: truncate(source, length) - source must be stringy type.\r\n   */\r\n  Truncate: \"truncate\",\r\n  /**\r\n   * uuid: Generate a random UUID (in lowercase). No Parameters.\r\n   */\r\n  Uuid: \"uuid\",\r\n} as const;\r\n\r\n/**\r\n * How data is copied/created.\r\n */\r\nexport type MapTransformCodeType = typeof MapTransformCodes[keyof typeof MapTransformCodes];\r\n"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AAEA;;AAEG;AACU,IAAA,iBAAiB,GAAG;AAC/B;;AAEG;AACH,IAAA,MAAM,EAAE,QAAQ;AAChB;;AAEG;AACH,IAAA,CAAC,EAAE,GAAG;AACN;;AAEG;AACH,IAAA,IAAI,EAAE,MAAM;AACZ;;AAEG;AACH,IAAA,EAAE,EAAE,IAAI;AACR;;AAEG;AACH,IAAA,IAAI,EAAE,MAAM;AACZ;;AAEG;AACH,IAAA,EAAE,EAAE,IAAI;AACR;;AAEG;AACH,IAAA,MAAM,EAAE,QAAQ;AAChB;;AAEG;AACH,IAAA,MAAM,EAAE,QAAQ;AAChB;;AAEG;AACH,IAAA,MAAM,EAAE,QAAQ;AAChB;;AAEG;AACH,IAAA,QAAQ,EAAE,UAAU;AACpB;;AAEG;AACH,IAAA,EAAE,EAAE,IAAI;AACR;;AAEG;AACH,IAAA,OAAO,EAAE,SAAS;AAClB;;AAEG;AACH,IAAA,GAAG,EAAE,KAAK;AACV;;AAEG;AACH,IAAA,SAAS,EAAE,WAAW;AACtB;;AAEG;AACH,IAAA,SAAS,EAAE,WAAW;AACtB;;AAEG;AACH,IAAA,QAAQ,EAAE,UAAU;AACpB;;AAEG;AACH,IAAA,IAAI,EAAE,MAAM;;;;;"}