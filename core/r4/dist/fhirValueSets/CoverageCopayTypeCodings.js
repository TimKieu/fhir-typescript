// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/coverage-copay-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set includes sample Coverage Copayment Type codes.
 */
export const CoverageCopayTypeCodings = {
    /**
     * copay: A standard fixed currency amount applied to all classes or service or product not otherwise specified.
     */
    CopayAmount: new Coding({
        display: "Copay Amount",
        code: "copay",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * copaypct: A standard percentage applied to all classes or service or product not otherwise specified.
     */
    CopayPercentage: new Coding({
        display: "Copay Percentage",
        code: "copaypct",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * deductible: The accumulated amount of patient payment before the coverage begins to pay for services.
     */
    Deductible: new Coding({
        display: "Deductible",
        code: "deductible",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * emergency: An episode in an emergency department.
     */
    Emergency: new Coding({
        display: "Emergency",
        code: "emergency",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * gpvisit: An office visit for a general practitioner of a discipline.
     */
    GPOfficeVisit: new Coding({
        display: "GP Office Visit",
        code: "gpvisit",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * inpthosp: An episode of an Inpatient hospital stay.
     */
    InpatientHospital: new Coding({
        display: "Inpatient Hospital",
        code: "inpthosp",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * maxoutofpocket: The maximum amout of payment for services which a patient, or family, is expected to incur - typically annually.
     */
    MaximumOutOfPocket: new Coding({
        display: "Maximum out of pocket",
        code: "maxoutofpocket",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * spvisit: An office visit for a specialist practitioner of a discipline
     */
    SpecialistOfficeVisit: new Coding({
        display: "Specialist Office Visit",
        code: "spvisit",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * televisit: A visit held where the patient is remote relative to the practitioner, e.g. by phone, computer or video conference.
     */
    TeleVisit: new Coding({
        display: "Tele-visit",
        code: "televisit",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
    /**
     * urgentcare: A visit to an urgent care facility - typically a community care clinic.
     */
    UrgentCare: new Coding({
        display: "Urgent Care",
        code: "urgentcare",
        system: "http://terminology.hl7.org/CodeSystem/coverage-copay-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ292ZXJhZ2VDb3BheVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Db3ZlcmFnZUNvcGF5VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBRXhFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDJEQUEyRDtLQUNwRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDMUIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMkRBQTJEO0tBQ3BFLENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsMkRBQTJEO0tBQ3BFLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsMkRBQTJEO0tBQ3BFLENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDJEQUEyRDtLQUNwRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM1QixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwyREFBMkQ7S0FDcEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDN0IsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSwyREFBMkQ7S0FDcEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gscUJBQXFCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEMsT0FBTyxFQUFFLHlCQUF5QjtRQUNsQyxJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwyREFBMkQ7S0FDcEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwyREFBMkQ7S0FDcEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSwyREFBMkQ7S0FDcEUsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY292ZXJhZ2UtY29wYXktdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgc2FtcGxlIENvdmVyYWdlIENvcGF5bWVudCBUeXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvdmVyYWdlQ29wYXlUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBjb3BheTogQSBzdGFuZGFyZCBmaXhlZCBjdXJyZW5jeSBhbW91bnQgYXBwbGllZCB0byBhbGwgY2xhc3NlcyBvciBzZXJ2aWNlIG9yIHByb2R1Y3Qgbm90IG90aGVyd2lzZSBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgQ29wYXlBbW91bnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb3BheSBBbW91bnRcIixcclxuICAgIGNvZGU6IFwiY29wYXlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlLWNvcGF5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjb3BheXBjdDogQSBzdGFuZGFyZCBwZXJjZW50YWdlIGFwcGxpZWQgdG8gYWxsIGNsYXNzZXMgb3Igc2VydmljZSBvciBwcm9kdWN0IG5vdCBvdGhlcndpc2Ugc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIENvcGF5UGVyY2VudGFnZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvcGF5IFBlcmNlbnRhZ2VcIixcclxuICAgIGNvZGU6IFwiY29wYXlwY3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlLWNvcGF5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkZWR1Y3RpYmxlOiBUaGUgYWNjdW11bGF0ZWQgYW1vdW50IG9mIHBhdGllbnQgcGF5bWVudCBiZWZvcmUgdGhlIGNvdmVyYWdlIGJlZ2lucyB0byBwYXkgZm9yIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIERlZHVjdGlibGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEZWR1Y3RpYmxlXCIsXHJcbiAgICBjb2RlOiBcImRlZHVjdGlibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlLWNvcGF5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBlbWVyZ2VuY3k6IEFuIGVwaXNvZGUgaW4gYW4gZW1lcmdlbmN5IGRlcGFydG1lbnQuXHJcbiAgICovXHJcbiAgRW1lcmdlbmN5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRW1lcmdlbmN5XCIsXHJcbiAgICBjb2RlOiBcImVtZXJnZW5jeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2UtY29wYXktdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGdwdmlzaXQ6IEFuIG9mZmljZSB2aXNpdCBmb3IgYSBnZW5lcmFsIHByYWN0aXRpb25lciBvZiBhIGRpc2NpcGxpbmUuXHJcbiAgICovXHJcbiAgR1BPZmZpY2VWaXNpdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdQIE9mZmljZSBWaXNpdFwiLFxyXG4gICAgY29kZTogXCJncHZpc2l0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZS1jb3BheS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaW5wdGhvc3A6IEFuIGVwaXNvZGUgb2YgYW4gSW5wYXRpZW50IGhvc3BpdGFsIHN0YXkuXHJcbiAgICovXHJcbiAgSW5wYXRpZW50SG9zcGl0YWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJbnBhdGllbnQgSG9zcGl0YWxcIixcclxuICAgIGNvZGU6IFwiaW5wdGhvc3BcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlLWNvcGF5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBtYXhvdXRvZnBvY2tldDogVGhlIG1heGltdW0gYW1vdXQgb2YgcGF5bWVudCBmb3Igc2VydmljZXMgd2hpY2ggYSBwYXRpZW50LCBvciBmYW1pbHksIGlzIGV4cGVjdGVkIHRvIGluY3VyIC0gdHlwaWNhbGx5IGFubnVhbGx5LlxyXG4gICAqL1xyXG4gIE1heGltdW1PdXRPZlBvY2tldDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1heGltdW0gb3V0IG9mIHBvY2tldFwiLFxyXG4gICAgY29kZTogXCJtYXhvdXRvZnBvY2tldFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2UtY29wYXktdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHNwdmlzaXQ6IEFuIG9mZmljZSB2aXNpdCBmb3IgYSBzcGVjaWFsaXN0IHByYWN0aXRpb25lciBvZiBhIGRpc2NpcGxpbmVcclxuICAgKi9cclxuICBTcGVjaWFsaXN0T2ZmaWNlVmlzaXQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTcGVjaWFsaXN0IE9mZmljZSBWaXNpdFwiLFxyXG4gICAgY29kZTogXCJzcHZpc2l0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZS1jb3BheS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdGVsZXZpc2l0OiBBIHZpc2l0IGhlbGQgd2hlcmUgdGhlIHBhdGllbnQgaXMgcmVtb3RlIHJlbGF0aXZlIHRvIHRoZSBwcmFjdGl0aW9uZXIsIGUuZy4gYnkgcGhvbmUsIGNvbXB1dGVyIG9yIHZpZGVvIGNvbmZlcmVuY2UuXHJcbiAgICovXHJcbiAgVGVsZVZpc2l0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVGVsZS12aXNpdFwiLFxyXG4gICAgY29kZTogXCJ0ZWxldmlzaXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlLWNvcGF5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB1cmdlbnRjYXJlOiBBIHZpc2l0IHRvIGFuIHVyZ2VudCBjYXJlIGZhY2lsaXR5IC0gdHlwaWNhbGx5IGEgY29tbXVuaXR5IGNhcmUgY2xpbmljLlxyXG4gICAqL1xyXG4gIFVyZ2VudENhcmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJVcmdlbnQgQ2FyZVwiLFxyXG4gICAgY29kZTogXCJ1cmdlbnRjYXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZS1jb3BheS10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgc2FtcGxlIENvdmVyYWdlIENvcGF5bWVudCBUeXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ292ZXJhZ2VDb3BheVR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIENvdmVyYWdlQ29wYXlUeXBlQ29kaW5ncztcclxuIl19