// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/action-relationship-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Defines the types of relationships between actions.
 */
export const ActionRelationshipTypeCodings = {
    /**
     * after: The action must be performed after the related action.
     */
    After: new Coding({
        display: "After",
        code: "after",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * after-end: The action must be performed after the end of the related action.
     */
    AfterEnd: new Coding({
        display: "After End",
        code: "after-end",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * after-start: The action must be performed after the start of the related action.
     */
    AfterStart: new Coding({
        display: "After Start",
        code: "after-start",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * before: The action must be performed before the related action.
     */
    Before: new Coding({
        display: "Before",
        code: "before",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * before-end: The action must be performed before the end of the related action.
     */
    BeforeEnd: new Coding({
        display: "Before End",
        code: "before-end",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * before-start: The action must be performed before the start of the related action.
     */
    BeforeStart: new Coding({
        display: "Before Start",
        code: "before-start",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * concurrent: The action must be performed concurrent with the related action.
     */
    Concurrent: new Coding({
        display: "Concurrent",
        code: "concurrent",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * concurrent-with-end: The action must be performed concurrent with the end of the related action.
     */
    ConcurrentWithEnd: new Coding({
        display: "Concurrent With End",
        code: "concurrent-with-end",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
    /**
     * concurrent-with-start: The action must be performed concurrent with the start of the related action.
     */
    ConcurrentWithStart: new Coding({
        display: "Concurrent With Start",
        code: "concurrent-with-start",
        system: "http://hl7.org/fhir/action-relationship-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uUmVsYXRpb25zaGlwVHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0FjdGlvblJlbGF0aW9uc2hpcFR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQUU3RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQzs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM1QixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM5QixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hY3Rpb24tcmVsYXRpb25zaGlwLXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgdGhlIHR5cGVzIG9mIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBhY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEFjdGlvblJlbGF0aW9uc2hpcFR5cGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFmdGVyOiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGFmdGVyIHRoZSByZWxhdGVkIGFjdGlvbi5cclxuICAgKi9cclxuICBBZnRlcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFmdGVyXCIsXHJcbiAgICBjb2RlOiBcImFmdGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tcmVsYXRpb25zaGlwLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBhZnRlci1lbmQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQWZ0ZXJFbmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBZnRlciBFbmRcIixcclxuICAgIGNvZGU6IFwiYWZ0ZXItZW5kXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tcmVsYXRpb25zaGlwLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBhZnRlci1zdGFydDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBhZnRlciB0aGUgc3RhcnQgb2YgdGhlIHJlbGF0ZWQgYWN0aW9uLlxyXG4gICAqL1xyXG4gIEFmdGVyU3RhcnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBZnRlciBTdGFydFwiLFxyXG4gICAgY29kZTogXCJhZnRlci1zdGFydFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogYmVmb3JlOiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGJlZm9yZSB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQmVmb3JlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQmVmb3JlXCIsXHJcbiAgICBjb2RlOiBcImJlZm9yZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogYmVmb3JlLWVuZDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQmVmb3JlRW5kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQmVmb3JlIEVuZFwiLFxyXG4gICAgY29kZTogXCJiZWZvcmUtZW5kXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tcmVsYXRpb25zaGlwLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBiZWZvcmUtc3RhcnQ6IFRoZSBhY3Rpb24gbXVzdCBiZSBwZXJmb3JtZWQgYmVmb3JlIHRoZSBzdGFydCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQmVmb3JlU3RhcnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCZWZvcmUgU3RhcnRcIixcclxuICAgIGNvZGU6IFwiYmVmb3JlLXN0YXJ0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hY3Rpb24tcmVsYXRpb25zaGlwLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjb25jdXJyZW50OiBUaGUgYWN0aW9uIG11c3QgYmUgcGVyZm9ybWVkIGNvbmN1cnJlbnQgd2l0aCB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQ29uY3VycmVudDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbmN1cnJlbnRcIixcclxuICAgIGNvZGU6IFwiY29uY3VycmVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogY29uY3VycmVudC13aXRoLWVuZDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBjb25jdXJyZW50IHdpdGggdGhlIGVuZCBvZiB0aGUgcmVsYXRlZCBhY3Rpb24uXHJcbiAgICovXHJcbiAgQ29uY3VycmVudFdpdGhFbmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb25jdXJyZW50IFdpdGggRW5kXCIsXHJcbiAgICBjb2RlOiBcImNvbmN1cnJlbnQtd2l0aC1lbmRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2FjdGlvbi1yZWxhdGlvbnNoaXAtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvbmN1cnJlbnQtd2l0aC1zdGFydDogVGhlIGFjdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBjb25jdXJyZW50IHdpdGggdGhlIHN0YXJ0IG9mIHRoZSByZWxhdGVkIGFjdGlvbi5cclxuICAgKi9cclxuICBDb25jdXJyZW50V2l0aFN0YXJ0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29uY3VycmVudCBXaXRoIFN0YXJ0XCIsXHJcbiAgICBjb2RlOiBcImNvbmN1cnJlbnQtd2l0aC1zdGFydFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYWN0aW9uLXJlbGF0aW9uc2hpcC10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgdHlwZXMgb2YgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGFjdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25SZWxhdGlvbnNoaXBUeXBlQ29kaW5nVHlwZSA9IHR5cGVvZiBBY3Rpb25SZWxhdGlvbnNoaXBUeXBlQ29kaW5ncztcclxuIl19