// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-route|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the administrative routes used during vaccination. This value set is provided as a suggestive example.
 */
export const ImmunizationRouteCodings = {
    /**
     * IDINJ: Injection, intradermal
     */
    InjectionIntradermal: new Coding({
        display: "Injection, intradermal",
        code: "IDINJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    }),
    /**
     * IM: Injection, intramuscular
     */
    InjectionIntramuscular: new Coding({
        display: "Injection, intramuscular",
        code: "IM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    }),
    /**
     * IVINJ: Injection, intravenous
     */
    InjectionIntravenous: new Coding({
        display: "Injection, intravenous",
        code: "IVINJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    }),
    /**
     * NASINHLC: Inhalation, nasal, prongs
     */
    InhalationNasalCannula: new Coding({
        display: "Inhalation, nasal cannula",
        code: "NASINHLC",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    }),
    /**
     * PO: Swallow, oral
     */
    SwallowOral: new Coding({
        display: "Swallow, oral",
        code: "PO",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    }),
    /**
     * SQ: Injection, subcutaneous
     */
    InjectionSubcutaneous: new Coding({
        display: "Injection, subcutaneous",
        code: "SQ",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    }),
    /**
     * TRNSDERM: Transdermal
     */
    Transdermal: new Coding({
        display: "Transdermal",
        code: "TRNSDERM",
        system: "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uUm91dGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9JbW11bml6YXRpb25Sb3V0ZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBRXZFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDL0IsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakMsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDL0IsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakMsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsZ0VBQWdFO0tBQ3pFLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gscUJBQXFCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEMsT0FBTyxFQUFFLHlCQUF5QjtRQUNsQyxJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvaW1tdW5pemF0aW9uLXJvdXRlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIGFkbWluaXN0cmF0aXZlIHJvdXRlcyB1c2VkIGR1cmluZyB2YWNjaW5hdGlvbi4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW1tdW5pemF0aW9uUm91dGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIElESU5KOiBJbmplY3Rpb24sIGludHJhZGVybWFsXHJcbiAgICovXHJcbiAgSW5qZWN0aW9uSW50cmFkZXJtYWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJbmplY3Rpb24sIGludHJhZGVybWFsXCIsXHJcbiAgICBjb2RlOiBcIklESU5KXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1Sb3V0ZU9mQWRtaW5pc3RyYXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBJTTogSW5qZWN0aW9uLCBpbnRyYW11c2N1bGFyXHJcbiAgICovXHJcbiAgSW5qZWN0aW9uSW50cmFtdXNjdWxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluamVjdGlvbiwgaW50cmFtdXNjdWxhclwiLFxyXG4gICAgY29kZTogXCJJTVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogSVZJTko6IEluamVjdGlvbiwgaW50cmF2ZW5vdXNcclxuICAgKi9cclxuICBJbmplY3Rpb25JbnRyYXZlbm91czogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluamVjdGlvbiwgaW50cmF2ZW5vdXNcIixcclxuICAgIGNvZGU6IFwiSVZJTkpcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVJvdXRlT2ZBZG1pbmlzdHJhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIE5BU0lOSExDOiBJbmhhbGF0aW9uLCBuYXNhbCwgcHJvbmdzXHJcbiAgICovXHJcbiAgSW5oYWxhdGlvbk5hc2FsQ2FubnVsYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluaGFsYXRpb24sIG5hc2FsIGNhbm51bGFcIixcclxuICAgIGNvZGU6IFwiTkFTSU5ITENcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVJvdXRlT2ZBZG1pbmlzdHJhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFBPOiBTd2FsbG93LCBvcmFsXHJcbiAgICovXHJcbiAgU3dhbGxvd09yYWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTd2FsbG93LCBvcmFsXCIsXHJcbiAgICBjb2RlOiBcIlBPXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1Sb3V0ZU9mQWRtaW5pc3RyYXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBTUTogSW5qZWN0aW9uLCBzdWJjdXRhbmVvdXNcclxuICAgKi9cclxuICBJbmplY3Rpb25TdWJjdXRhbmVvdXM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJbmplY3Rpb24sIHN1YmN1dGFuZW91c1wiLFxyXG4gICAgY29kZTogXCJTUVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogVFJOU0RFUk06IFRyYW5zZGVybWFsXHJcbiAgICovXHJcbiAgVHJhbnNkZXJtYWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUcmFuc2Rlcm1hbFwiLFxyXG4gICAgY29kZTogXCJUUk5TREVSTVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm91dGVPZkFkbWluaXN0cmF0aW9uXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIHNldCB0byBpbnN0YW50aWF0ZSB0aGlzIGF0dHJpYnV0ZSBzaG91bGQgYmUgZHJhd24gZnJvbSBhIHRlcm1pbm9sb2dpY2FsbHkgcm9idXN0IGNvZGUgc3lzdGVtIHRoYXQgY29uc2lzdHMgb2Ygb3IgY29udGFpbnMgY29uY2VwdHMgdG8gc3VwcG9ydCBkZXNjcmliaW5nIHRoZSBhZG1pbmlzdHJhdGl2ZSByb3V0ZXMgdXNlZCBkdXJpbmcgdmFjY2luYXRpb24uIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW1tdW5pemF0aW9uUm91dGVDb2RpbmdUeXBlID0gdHlwZW9mIEltbXVuaXphdGlvblJvdXRlQ29kaW5ncztcclxuIl19