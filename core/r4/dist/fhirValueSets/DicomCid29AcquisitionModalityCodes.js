// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://dicom.nema.org/medical/dicom/current/output/chtml/part16/sect_CID_29.html|20121129
/**
 * Transitive closure of CID 29 AcquisitionModality
 */
export const DicomCid29AcquisitionModalityCodes = {
    /**
     * AR: Autorefraction device
     */
    Autorefraction: "AR",
    /**
     * BDUS: Ultrasound Bone Densitometry (modality)
     */
    UltrasoundBoneDensitometry: "BDUS",
    /**
     * BMD: Bone Mineral Densitometry by X-Ray (modality), including dual-energy X-Ray absorptiometry (DXA) and morphometric X-Ray absorptiometry (MXA)
     */
    BoneMineralDensitometry: "BMD",
    /**
     * CR: Computed Radiography device
     */
    ComputedRadiography: "CR",
    /**
     * CT: Computed Tomography device
     */
    ComputedTomography: "CT",
    /**
     * DX: Digital Radiography device
     */
    DigitalRadiography: "DX",
    /**
     * ECG: Electrocardiography device
     */
    Electrocardiography: "ECG",
    /**
     * EPS: Cardiac Electrophysiology device
     */
    CardiacElectrophysiology: "EPS",
    /**
     * ES: Endoscopy device
     */
    Endoscopy: "ES",
    /**
     * GM: General Microscopy device
     */
    GeneralMicroscopy: "GM",
    /**
     * HD: Hemodynamic Waveform acquisition device
     */
    HemodynamicWaveform: "HD",
    /**
     * IO: Intra-oral Radiography device
     */
    IntraOralRadiography: "IO",
    /**
     * IVOCT: An acquisition device, process or method that performs intravascular optical coherence tomography
     */
    IntravascularOpticalCoherenceTomography: "IVOCT",
    /**
     * IVUS: Intravascular Ultrasound device
     */
    IntravascularUltrasound: "IVUS",
    /**
     * KER: Keratometry device
     */
    Keratometry: "KER",
    /**
     * LEN: Lensometry device
     */
    Lensometry: "LEN",
    /**
     * MG: Mammography device
     */
    Mammography: "MG",
    /**
     * MR: Magnetic Resonance device
     */
    MagneticResonance: "MR",
    /**
     * NM: Nuclear Medicine device
     */
    NuclearMedicine: "NM",
    /**
     * OAM: Measurements of the axial length of the eye, which are done by various devices
     */
    OphthalmicAxialMeasurements: "OAM",
    /**
     * OCT: Modality device that uses an interferometric, non-invasive optical tomographic technique to image 2D slices and 3D volumes of tissue using visible and near visible frequencies
     */
    OpticalCoherenceTomography: "OCT",
    /**
     * OP: Ophthalmic photography modality
     */
    OphthalmicPhotography: "OP",
    /**
     * OPM: Modality device that measures corneal topography, corneal or retinal thickness, and other similar parameters that are typically displayed as maps
     */
    OphthalmicMapping: "OPM",
    /**
     * OPR: Modality device that measures the refractive characteristics of the eye
     */
    OphthalmicRefraction: "OPR",
    /**
     * OPT: Tomography of the eye acquired by a modality that is based on light and optical principles. Tomography based on other principles, such as ultrasound, is excluded
     */
    OphthalmicTomography: "OPT",
    /**
     * OPV: Modality device that measures visual fields and perform visual perimetry
     */
    OphthalmicVisualField: "OPV",
    /**
     * OSS: An acquisition device, process or method that performs optical surface scanning
     */
    OpticalSurvaceScanner: "OSS",
    /**
     * PT: Positron emission tomography (PET) device
     */
    PositronEmissionTomography: "PT",
    /**
     * PX: Panoramic X-Ray device
     */
    PanoramicXRay: "PX",
    /**
     * RF: Radiofluoroscopy device
     */
    Radiofluoroscopy: "RF",
    /**
     * RG: Radiographic imaging (conventional film/screen)
     */
    RadiographicImaging: "RG",
    /**
     * SM: Slide Microscopy
     */
    SlideMicroscopy: "SM",
    /**
     * SRF: Subjective Refraction device
     */
    SubjectiveRefraction: "SRF",
    /**
     * US: Ultrasound device
     */
    Ultrasound: "US",
    /**
     * VA: Visual Acuity device
     */
    VisualAcuity: "VA",
    /**
     * XA: X-Ray Angiography device
     */
    XRayAngiography: "XA",
    /**
     * XC: External-camera Photography device
     */
    ExternalCameraPhotography: "XC",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGljb21DaWQyOUFjcXVpc2l0aW9uTW9kYWxpdHlDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRGljb21DaWQyOUFjcXVpc2l0aW9uTW9kYWxpdHlDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywyR0FBMkc7QUFFM0c7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRztJQUNoRDs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJO0lBQ3BCOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUUsTUFBTTtJQUNsQzs7T0FFRztJQUNILHVCQUF1QixFQUFFLEtBQUs7SUFDOUI7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxJQUFJO0lBQ3pCOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsSUFBSTtJQUN4Qjs7T0FFRztJQUNILGtCQUFrQixFQUFFLElBQUk7SUFDeEI7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxLQUFLO0lBQzFCOztPQUVHO0lBQ0gsd0JBQXdCLEVBQUUsS0FBSztJQUMvQjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJO0lBQ2Y7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsSUFBSTtJQUN6Qjs7T0FFRztJQUNILG9CQUFvQixFQUFFLElBQUk7SUFDMUI7O09BRUc7SUFDSCx1Q0FBdUMsRUFBRSxPQUFPO0lBQ2hEOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUUsTUFBTTtJQUMvQjs7T0FFRztJQUNILFdBQVcsRUFBRSxLQUFLO0lBQ2xCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLEtBQUs7SUFDakI7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSTtJQUNqQjs7T0FFRztJQUNILGlCQUFpQixFQUFFLElBQUk7SUFDdkI7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSTtJQUNyQjs7T0FFRztJQUNILDJCQUEyQixFQUFFLEtBQUs7SUFDbEM7O09BRUc7SUFDSCwwQkFBMEIsRUFBRSxLQUFLO0lBQ2pDOztPQUVHO0lBQ0gscUJBQXFCLEVBQUUsSUFBSTtJQUMzQjs7T0FFRztJQUNILGlCQUFpQixFQUFFLEtBQUs7SUFDeEI7O09BRUc7SUFDSCxvQkFBb0IsRUFBRSxLQUFLO0lBQzNCOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUUsS0FBSztJQUMzQjs7T0FFRztJQUNILHFCQUFxQixFQUFFLEtBQUs7SUFDNUI7O09BRUc7SUFDSCxxQkFBcUIsRUFBRSxLQUFLO0lBQzVCOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUUsSUFBSTtJQUNoQzs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJO0lBQ25COztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0Qjs7T0FFRztJQUNILG1CQUFtQixFQUFFLElBQUk7SUFDekI7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSTtJQUNyQjs7T0FFRztJQUNILG9CQUFvQixFQUFFLEtBQUs7SUFDM0I7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSTtJQUNoQjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJO0lBQ2xCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUk7SUFDckI7O09BRUc7SUFDSCx5QkFBeUIsRUFBRSxJQUFJO0NBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9tZWRpY2FsL2RpY29tL2N1cnJlbnQvb3V0cHV0L2NodG1sL3BhcnQxNi9zZWN0X0NJRF8yOS5odG1sfDIwMTIxMTI5XHJcblxyXG4vKipcclxuICogVHJhbnNpdGl2ZSBjbG9zdXJlIG9mIENJRCAyOSBBY3F1aXNpdGlvbk1vZGFsaXR5XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRGljb21DaWQyOUFjcXVpc2l0aW9uTW9kYWxpdHlDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBBUjogQXV0b3JlZnJhY3Rpb24gZGV2aWNlXHJcbiAgICovXHJcbiAgQXV0b3JlZnJhY3Rpb246IFwiQVJcIixcclxuICAvKipcclxuICAgKiBCRFVTOiBVbHRyYXNvdW5kIEJvbmUgRGVuc2l0b21ldHJ5IChtb2RhbGl0eSlcclxuICAgKi9cclxuICBVbHRyYXNvdW5kQm9uZURlbnNpdG9tZXRyeTogXCJCRFVTXCIsXHJcbiAgLyoqXHJcbiAgICogQk1EOiBCb25lIE1pbmVyYWwgRGVuc2l0b21ldHJ5IGJ5IFgtUmF5IChtb2RhbGl0eSksIGluY2x1ZGluZyBkdWFsLWVuZXJneSBYLVJheSBhYnNvcnB0aW9tZXRyeSAoRFhBKSBhbmQgbW9ycGhvbWV0cmljIFgtUmF5IGFic29ycHRpb21ldHJ5IChNWEEpXHJcbiAgICovXHJcbiAgQm9uZU1pbmVyYWxEZW5zaXRvbWV0cnk6IFwiQk1EXCIsXHJcbiAgLyoqXHJcbiAgICogQ1I6IENvbXB1dGVkIFJhZGlvZ3JhcGh5IGRldmljZVxyXG4gICAqL1xyXG4gIENvbXB1dGVkUmFkaW9ncmFwaHk6IFwiQ1JcIixcclxuICAvKipcclxuICAgKiBDVDogQ29tcHV0ZWQgVG9tb2dyYXBoeSBkZXZpY2VcclxuICAgKi9cclxuICBDb21wdXRlZFRvbW9ncmFwaHk6IFwiQ1RcIixcclxuICAvKipcclxuICAgKiBEWDogRGlnaXRhbCBSYWRpb2dyYXBoeSBkZXZpY2VcclxuICAgKi9cclxuICBEaWdpdGFsUmFkaW9ncmFwaHk6IFwiRFhcIixcclxuICAvKipcclxuICAgKiBFQ0c6IEVsZWN0cm9jYXJkaW9ncmFwaHkgZGV2aWNlXHJcbiAgICovXHJcbiAgRWxlY3Ryb2NhcmRpb2dyYXBoeTogXCJFQ0dcIixcclxuICAvKipcclxuICAgKiBFUFM6IENhcmRpYWMgRWxlY3Ryb3BoeXNpb2xvZ3kgZGV2aWNlXHJcbiAgICovXHJcbiAgQ2FyZGlhY0VsZWN0cm9waHlzaW9sb2d5OiBcIkVQU1wiLFxyXG4gIC8qKlxyXG4gICAqIEVTOiBFbmRvc2NvcHkgZGV2aWNlXHJcbiAgICovXHJcbiAgRW5kb3Njb3B5OiBcIkVTXCIsXHJcbiAgLyoqXHJcbiAgICogR006IEdlbmVyYWwgTWljcm9zY29weSBkZXZpY2VcclxuICAgKi9cclxuICBHZW5lcmFsTWljcm9zY29weTogXCJHTVwiLFxyXG4gIC8qKlxyXG4gICAqIEhEOiBIZW1vZHluYW1pYyBXYXZlZm9ybSBhY3F1aXNpdGlvbiBkZXZpY2VcclxuICAgKi9cclxuICBIZW1vZHluYW1pY1dhdmVmb3JtOiBcIkhEXCIsXHJcbiAgLyoqXHJcbiAgICogSU86IEludHJhLW9yYWwgUmFkaW9ncmFwaHkgZGV2aWNlXHJcbiAgICovXHJcbiAgSW50cmFPcmFsUmFkaW9ncmFwaHk6IFwiSU9cIixcclxuICAvKipcclxuICAgKiBJVk9DVDogQW4gYWNxdWlzaXRpb24gZGV2aWNlLCBwcm9jZXNzIG9yIG1ldGhvZCB0aGF0IHBlcmZvcm1zIGludHJhdmFzY3VsYXIgb3B0aWNhbCBjb2hlcmVuY2UgdG9tb2dyYXBoeVxyXG4gICAqL1xyXG4gIEludHJhdmFzY3VsYXJPcHRpY2FsQ29oZXJlbmNlVG9tb2dyYXBoeTogXCJJVk9DVFwiLFxyXG4gIC8qKlxyXG4gICAqIElWVVM6IEludHJhdmFzY3VsYXIgVWx0cmFzb3VuZCBkZXZpY2VcclxuICAgKi9cclxuICBJbnRyYXZhc2N1bGFyVWx0cmFzb3VuZDogXCJJVlVTXCIsXHJcbiAgLyoqXHJcbiAgICogS0VSOiBLZXJhdG9tZXRyeSBkZXZpY2VcclxuICAgKi9cclxuICBLZXJhdG9tZXRyeTogXCJLRVJcIixcclxuICAvKipcclxuICAgKiBMRU46IExlbnNvbWV0cnkgZGV2aWNlXHJcbiAgICovXHJcbiAgTGVuc29tZXRyeTogXCJMRU5cIixcclxuICAvKipcclxuICAgKiBNRzogTWFtbW9ncmFwaHkgZGV2aWNlXHJcbiAgICovXHJcbiAgTWFtbW9ncmFwaHk6IFwiTUdcIixcclxuICAvKipcclxuICAgKiBNUjogTWFnbmV0aWMgUmVzb25hbmNlIGRldmljZVxyXG4gICAqL1xyXG4gIE1hZ25ldGljUmVzb25hbmNlOiBcIk1SXCIsXHJcbiAgLyoqXHJcbiAgICogTk06IE51Y2xlYXIgTWVkaWNpbmUgZGV2aWNlXHJcbiAgICovXHJcbiAgTnVjbGVhck1lZGljaW5lOiBcIk5NXCIsXHJcbiAgLyoqXHJcbiAgICogT0FNOiBNZWFzdXJlbWVudHMgb2YgdGhlIGF4aWFsIGxlbmd0aCBvZiB0aGUgZXllLCB3aGljaCBhcmUgZG9uZSBieSB2YXJpb3VzIGRldmljZXNcclxuICAgKi9cclxuICBPcGh0aGFsbWljQXhpYWxNZWFzdXJlbWVudHM6IFwiT0FNXCIsXHJcbiAgLyoqXHJcbiAgICogT0NUOiBNb2RhbGl0eSBkZXZpY2UgdGhhdCB1c2VzIGFuIGludGVyZmVyb21ldHJpYywgbm9uLWludmFzaXZlIG9wdGljYWwgdG9tb2dyYXBoaWMgdGVjaG5pcXVlIHRvIGltYWdlIDJEIHNsaWNlcyBhbmQgM0Qgdm9sdW1lcyBvZiB0aXNzdWUgdXNpbmcgdmlzaWJsZSBhbmQgbmVhciB2aXNpYmxlIGZyZXF1ZW5jaWVzXHJcbiAgICovXHJcbiAgT3B0aWNhbENvaGVyZW5jZVRvbW9ncmFwaHk6IFwiT0NUXCIsXHJcbiAgLyoqXHJcbiAgICogT1A6IE9waHRoYWxtaWMgcGhvdG9ncmFwaHkgbW9kYWxpdHlcclxuICAgKi9cclxuICBPcGh0aGFsbWljUGhvdG9ncmFwaHk6IFwiT1BcIixcclxuICAvKipcclxuICAgKiBPUE06IE1vZGFsaXR5IGRldmljZSB0aGF0IG1lYXN1cmVzIGNvcm5lYWwgdG9wb2dyYXBoeSwgY29ybmVhbCBvciByZXRpbmFsIHRoaWNrbmVzcywgYW5kIG90aGVyIHNpbWlsYXIgcGFyYW1ldGVycyB0aGF0IGFyZSB0eXBpY2FsbHkgZGlzcGxheWVkIGFzIG1hcHNcclxuICAgKi9cclxuICBPcGh0aGFsbWljTWFwcGluZzogXCJPUE1cIixcclxuICAvKipcclxuICAgKiBPUFI6IE1vZGFsaXR5IGRldmljZSB0aGF0IG1lYXN1cmVzIHRoZSByZWZyYWN0aXZlIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgZXllXHJcbiAgICovXHJcbiAgT3BodGhhbG1pY1JlZnJhY3Rpb246IFwiT1BSXCIsXHJcbiAgLyoqXHJcbiAgICogT1BUOiBUb21vZ3JhcGh5IG9mIHRoZSBleWUgYWNxdWlyZWQgYnkgYSBtb2RhbGl0eSB0aGF0IGlzIGJhc2VkIG9uIGxpZ2h0IGFuZCBvcHRpY2FsIHByaW5jaXBsZXMuIFRvbW9ncmFwaHkgYmFzZWQgb24gb3RoZXIgcHJpbmNpcGxlcywgc3VjaCBhcyB1bHRyYXNvdW5kLCBpcyBleGNsdWRlZFxyXG4gICAqL1xyXG4gIE9waHRoYWxtaWNUb21vZ3JhcGh5OiBcIk9QVFwiLFxyXG4gIC8qKlxyXG4gICAqIE9QVjogTW9kYWxpdHkgZGV2aWNlIHRoYXQgbWVhc3VyZXMgdmlzdWFsIGZpZWxkcyBhbmQgcGVyZm9ybSB2aXN1YWwgcGVyaW1ldHJ5XHJcbiAgICovXHJcbiAgT3BodGhhbG1pY1Zpc3VhbEZpZWxkOiBcIk9QVlwiLFxyXG4gIC8qKlxyXG4gICAqIE9TUzogQW4gYWNxdWlzaXRpb24gZGV2aWNlLCBwcm9jZXNzIG9yIG1ldGhvZCB0aGF0IHBlcmZvcm1zIG9wdGljYWwgc3VyZmFjZSBzY2FubmluZ1xyXG4gICAqL1xyXG4gIE9wdGljYWxTdXJ2YWNlU2Nhbm5lcjogXCJPU1NcIixcclxuICAvKipcclxuICAgKiBQVDogUG9zaXRyb24gZW1pc3Npb24gdG9tb2dyYXBoeSAoUEVUKSBkZXZpY2VcclxuICAgKi9cclxuICBQb3NpdHJvbkVtaXNzaW9uVG9tb2dyYXBoeTogXCJQVFwiLFxyXG4gIC8qKlxyXG4gICAqIFBYOiBQYW5vcmFtaWMgWC1SYXkgZGV2aWNlXHJcbiAgICovXHJcbiAgUGFub3JhbWljWFJheTogXCJQWFwiLFxyXG4gIC8qKlxyXG4gICAqIFJGOiBSYWRpb2ZsdW9yb3Njb3B5IGRldmljZVxyXG4gICAqL1xyXG4gIFJhZGlvZmx1b3Jvc2NvcHk6IFwiUkZcIixcclxuICAvKipcclxuICAgKiBSRzogUmFkaW9ncmFwaGljIGltYWdpbmcgKGNvbnZlbnRpb25hbCBmaWxtL3NjcmVlbilcclxuICAgKi9cclxuICBSYWRpb2dyYXBoaWNJbWFnaW5nOiBcIlJHXCIsXHJcbiAgLyoqXHJcbiAgICogU006IFNsaWRlIE1pY3Jvc2NvcHlcclxuICAgKi9cclxuICBTbGlkZU1pY3Jvc2NvcHk6IFwiU01cIixcclxuICAvKipcclxuICAgKiBTUkY6IFN1YmplY3RpdmUgUmVmcmFjdGlvbiBkZXZpY2VcclxuICAgKi9cclxuICBTdWJqZWN0aXZlUmVmcmFjdGlvbjogXCJTUkZcIixcclxuICAvKipcclxuICAgKiBVUzogVWx0cmFzb3VuZCBkZXZpY2VcclxuICAgKi9cclxuICBVbHRyYXNvdW5kOiBcIlVTXCIsXHJcbiAgLyoqXHJcbiAgICogVkE6IFZpc3VhbCBBY3VpdHkgZGV2aWNlXHJcbiAgICovXHJcbiAgVmlzdWFsQWN1aXR5OiBcIlZBXCIsXHJcbiAgLyoqXHJcbiAgICogWEE6IFgtUmF5IEFuZ2lvZ3JhcGh5IGRldmljZVxyXG4gICAqL1xyXG4gIFhSYXlBbmdpb2dyYXBoeTogXCJYQVwiLFxyXG4gIC8qKlxyXG4gICAqIFhDOiBFeHRlcm5hbC1jYW1lcmEgUGhvdG9ncmFwaHkgZGV2aWNlXHJcbiAgICovXHJcbiAgRXh0ZXJuYWxDYW1lcmFQaG90b2dyYXBoeTogXCJYQ1wiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRyYW5zaXRpdmUgY2xvc3VyZSBvZiBDSUQgMjkgQWNxdWlzaXRpb25Nb2RhbGl0eVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRGljb21DaWQyOUFjcXVpc2l0aW9uTW9kYWxpdHlDb2RlVHlwZSA9IHR5cGVvZiBEaWNvbUNpZDI5QWNxdWlzaXRpb25Nb2RhbGl0eUNvZGVzW2tleW9mIHR5cGVvZiBEaWNvbUNpZDI5QWNxdWlzaXRpb25Nb2RhbGl0eUNvZGVzXTtcclxuIl19