// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/rejection-criteria|4.0.1
/**
 * Criterion for rejection of the specimen by laboratory.
 */
export const RejectionCriteriaCodings = {
    /**
     * broken: specimen container broken.
     */
    BrokenSpecimenContainer: {
        display: "broken specimen container",
        code: "broken",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    },
    /**
     * clotted: specimen clotted.
     */
    SpecimenClotted: {
        display: "specimen clotted",
        code: "clotted",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    },
    /**
     * hemolized: blood specimen hemolized.
     */
    HemolizedSpecimen: {
        display: "hemolized specimen",
        code: "hemolized",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    },
    /**
     * insufficient: insufficient quantity of specimen.
     */
    InsufficientSpecimenVolume: {
        display: "insufficient specimen volume",
        code: "insufficient",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    },
    /**
     * wrong-temperature: specimen temperature inappropriate.
     */
    SpecimenTemperatureInappropriate: {
        display: "specimen temperature inappropriate",
        code: "wrong-temperature",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVqZWN0aW9uQ3JpdGVyaWFDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZWplY3Rpb25Dcml0ZXJpYUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBOEJ2RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILHVCQUF1QixFQUFFO1FBQ3ZCLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRTtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0lBQ0Q7O09BRUc7SUFDSCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkU7SUFDRDs7T0FFRztJQUNILGdDQUFnQyxFQUFFO1FBQ2hDLE9BQU8sRUFBRSxvQ0FBb0M7UUFDN0MsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZWplY3Rpb24tY3JpdGVyaWF8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDcml0ZXJpb24gZm9yIHJlamVjdGlvbiBvZiB0aGUgc3BlY2ltZW4gYnkgbGFib3JhdG9yeS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFJlamVjdGlvbkNyaXRlcmlhQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBicm9rZW46IHNwZWNpbWVuIGNvbnRhaW5lciBicm9rZW4uXHJcbiAgICovXHJcbiAgQnJva2VuU3BlY2ltZW5Db250YWluZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2xvdHRlZDogc3BlY2ltZW4gY2xvdHRlZC5cclxuICAgKi9cclxuICBTcGVjaW1lbkNsb3R0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaGVtb2xpemVkOiBibG9vZCBzcGVjaW1lbiBoZW1vbGl6ZWQuXHJcbiAgICovXHJcbiAgSGVtb2xpemVkU3BlY2ltZW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW5zdWZmaWNpZW50OiBpbnN1ZmZpY2llbnQgcXVhbnRpdHkgb2Ygc3BlY2ltZW4uXHJcbiAgICovXHJcbiAgSW5zdWZmaWNpZW50U3BlY2ltZW5Wb2x1bWU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd3JvbmctdGVtcGVyYXR1cmU6IHNwZWNpbWVuIHRlbXBlcmF0dXJlIGluYXBwcm9wcmlhdGUuXHJcbiAgICovXHJcbiAgU3BlY2ltZW5UZW1wZXJhdHVyZUluYXBwcm9wcmlhdGU6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcml0ZXJpb24gZm9yIHJlamVjdGlvbiBvZiB0aGUgc3BlY2ltZW4gYnkgbGFib3JhdG9yeS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBSZWplY3Rpb25Dcml0ZXJpYUNvZGluZ3M6UmVqZWN0aW9uQ3JpdGVyaWFDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJyb2tlbjogc3BlY2ltZW4gY29udGFpbmVyIGJyb2tlbi5cclxuICAgKi9cclxuICBCcm9rZW5TcGVjaW1lbkNvbnRhaW5lcjoge1xyXG4gICAgZGlzcGxheTogXCJicm9rZW4gc3BlY2ltZW4gY29udGFpbmVyXCIsXHJcbiAgICBjb2RlOiBcImJyb2tlblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmVqZWN0aW9uLWNyaXRlcmlhXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjbG90dGVkOiBzcGVjaW1lbiBjbG90dGVkLlxyXG4gICAqL1xyXG4gIFNwZWNpbWVuQ2xvdHRlZDoge1xyXG4gICAgZGlzcGxheTogXCJzcGVjaW1lbiBjbG90dGVkXCIsXHJcbiAgICBjb2RlOiBcImNsb3R0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3JlamVjdGlvbi1jcml0ZXJpYVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogaGVtb2xpemVkOiBibG9vZCBzcGVjaW1lbiBoZW1vbGl6ZWQuXHJcbiAgICovXHJcbiAgSGVtb2xpemVkU3BlY2ltZW46IHtcclxuICAgIGRpc3BsYXk6IFwiaGVtb2xpemVkIHNwZWNpbWVuXCIsXHJcbiAgICBjb2RlOiBcImhlbW9saXplZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmVqZWN0aW9uLWNyaXRlcmlhXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbnN1ZmZpY2llbnQ6IGluc3VmZmljaWVudCBxdWFudGl0eSBvZiBzcGVjaW1lbi5cclxuICAgKi9cclxuICBJbnN1ZmZpY2llbnRTcGVjaW1lblZvbHVtZToge1xyXG4gICAgZGlzcGxheTogXCJpbnN1ZmZpY2llbnQgc3BlY2ltZW4gdm9sdW1lXCIsXHJcbiAgICBjb2RlOiBcImluc3VmZmljaWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmVqZWN0aW9uLWNyaXRlcmlhXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB3cm9uZy10ZW1wZXJhdHVyZTogc3BlY2ltZW4gdGVtcGVyYXR1cmUgaW5hcHByb3ByaWF0ZS5cclxuICAgKi9cclxuICBTcGVjaW1lblRlbXBlcmF0dXJlSW5hcHByb3ByaWF0ZToge1xyXG4gICAgZGlzcGxheTogXCJzcGVjaW1lbiB0ZW1wZXJhdHVyZSBpbmFwcHJvcHJpYXRlXCIsXHJcbiAgICBjb2RlOiBcIndyb25nLXRlbXBlcmF0dXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yZWplY3Rpb24tY3JpdGVyaWFcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=