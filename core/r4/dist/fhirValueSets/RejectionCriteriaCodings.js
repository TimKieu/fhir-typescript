// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/rejection-criteria|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Criterion for rejection of the specimen by laboratory.
 */
export const RejectionCriteriaCodings = {
    /**
     * broken: specimen container broken.
     */
    BrokenSpecimenContainer: new Coding({
        display: "broken specimen container",
        code: "broken",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    }),
    /**
     * clotted: specimen clotted.
     */
    SpecimenClotted: new Coding({
        display: "specimen clotted",
        code: "clotted",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    }),
    /**
     * hemolized: blood specimen hemolized.
     */
    HemolizedSpecimen: new Coding({
        display: "hemolized specimen",
        code: "hemolized",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    }),
    /**
     * insufficient: insufficient quantity of specimen.
     */
    InsufficientSpecimenVolume: new Coding({
        display: "insufficient specimen volume",
        code: "insufficient",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    }),
    /**
     * wrong-temperature: specimen temperature inappropriate.
     */
    SpecimenTemperatureInappropriate: new Coding({
        display: "specimen temperature inappropriate",
        code: "wrong-temperature",
        system: "http://terminology.hl7.org/CodeSystem/rejection-criteria",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVqZWN0aW9uQ3JpdGVyaWFDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9SZWplY3Rpb25Dcml0ZXJpYUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBRXZFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEMsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMERBQTBEO0tBQ25FLENBQUM7SUFDRjs7T0FFRztJQUNILGlCQUFpQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCwwQkFBMEIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQyxPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZ0NBQWdDLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDM0MsT0FBTyxFQUFFLG9DQUFvQztRQUM3QyxJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcmVqZWN0aW9uLWNyaXRlcmlhfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDcml0ZXJpb24gZm9yIHJlamVjdGlvbiBvZiB0aGUgc3BlY2ltZW4gYnkgbGFib3JhdG9yeS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBSZWplY3Rpb25Dcml0ZXJpYUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYnJva2VuOiBzcGVjaW1lbiBjb250YWluZXIgYnJva2VuLlxyXG4gICAqL1xyXG4gIEJyb2tlblNwZWNpbWVuQ29udGFpbmVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiYnJva2VuIHNwZWNpbWVuIGNvbnRhaW5lclwiLFxyXG4gICAgY29kZTogXCJicm9rZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3JlamVjdGlvbi1jcml0ZXJpYVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNsb3R0ZWQ6IHNwZWNpbWVuIGNsb3R0ZWQuXHJcbiAgICovXHJcbiAgU3BlY2ltZW5DbG90dGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwic3BlY2ltZW4gY2xvdHRlZFwiLFxyXG4gICAgY29kZTogXCJjbG90dGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yZWplY3Rpb24tY3JpdGVyaWFcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBoZW1vbGl6ZWQ6IGJsb29kIHNwZWNpbWVuIGhlbW9saXplZC5cclxuICAgKi9cclxuICBIZW1vbGl6ZWRTcGVjaW1lbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImhlbW9saXplZCBzcGVjaW1lblwiLFxyXG4gICAgY29kZTogXCJoZW1vbGl6ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3JlamVjdGlvbi1jcml0ZXJpYVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluc3VmZmljaWVudDogaW5zdWZmaWNpZW50IHF1YW50aXR5IG9mIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIEluc3VmZmljaWVudFNwZWNpbWVuVm9sdW1lOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiaW5zdWZmaWNpZW50IHNwZWNpbWVuIHZvbHVtZVwiLFxyXG4gICAgY29kZTogXCJpbnN1ZmZpY2llbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3JlamVjdGlvbi1jcml0ZXJpYVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHdyb25nLXRlbXBlcmF0dXJlOiBzcGVjaW1lbiB0ZW1wZXJhdHVyZSBpbmFwcHJvcHJpYXRlLlxyXG4gICAqL1xyXG4gIFNwZWNpbWVuVGVtcGVyYXR1cmVJbmFwcHJvcHJpYXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwic3BlY2ltZW4gdGVtcGVyYXR1cmUgaW5hcHByb3ByaWF0ZVwiLFxyXG4gICAgY29kZTogXCJ3cm9uZy10ZW1wZXJhdHVyZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmVqZWN0aW9uLWNyaXRlcmlhXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ3JpdGVyaW9uIGZvciByZWplY3Rpb24gb2YgdGhlIHNwZWNpbWVuIGJ5IGxhYm9yYXRvcnkuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZWplY3Rpb25Dcml0ZXJpYUNvZGluZ1R5cGUgPSB0eXBlb2YgUmVqZWN0aW9uQ3JpdGVyaWFDb2RpbmdzO1xyXG4iXX0=