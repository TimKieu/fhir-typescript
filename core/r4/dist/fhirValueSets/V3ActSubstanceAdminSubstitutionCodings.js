// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://terminology.hl7.org/ValueSet/v3-ActSubstanceAdminSubstitutionCode|2014-03-26
/**
 * No Description Provided
 */
export const V3ActSubstanceAdminSubstitutionCodings = {
    /**
     * BC: Description:
     *
     *
     *                         Substitution occurred or is permitted between equivalent Brands but not Generics
     *
     *
     *                            Examples:
     *
     *
     *
     *                            Zestril  for Prinivil
     *                            Coumadin for Jantoven
     */
    BrandComposition: {
        display: "brand composition",
        code: "BC",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * E: Description: Substitution occurred or is permitted with another bioequivalent and therapeutically equivalent product.
     */
    Equivalent: {
        display: "equivalent",
        code: "E",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * EC: Description:
     *
     *
     *                         Substitution occurred or is permitted with another product that is a:
     *
     *
     *                            pharmaceutical alternative containing the same active ingredient but is formulated with different salt, ester
     *                            pharmaceutical equivalent that has the same active ingredient, strength, dosage form and route of administration
     *
     *
     *                            Examples:
     *
     *
     *
     *
     *                               Pharmaceutical alternative: Erythromycin Ethylsuccinate for Erythromycin Stearate
     *
     *                               Pharmaceutical equivalent: Lisonpril for Zestril
     */
    EquivalentComposition: {
        display: "equivalent composition",
        code: "EC",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * F: Description: This substitution was performed or is permitted based on formulary guidelines.
     */
    Formulary: {
        display: "formulary",
        code: "F",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * G: Description: Substitution occurred or is permitted between equivalent Generics but not Brands
     *
     *
     *                            Examples:
     *
     *
     *
     *                            Lisnopril (Lupin Corp) for Lisnopril (Wockhardt Corp)
     */
    GenericComposition: {
        display: "generic composition",
        code: "G",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * N: No substitution occurred or is permitted.
     */
    None: {
        display: "none",
        code: "N",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * TB: Description: Substitution occurred or is permitted between therapeutically equivalent Brands but not Generics
     * &gt;
     *                            Examples:
     *
     *
     *
     *                            Zantac for Tagamet
     */
    TherapeuticBrand: {
        display: "therapeutic brand",
        code: "TB",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * TE: Description: Substitution occurred or is permitted with another product having the same therapeutic objective and safety profile.
     *
     *
     *                            Examples:
     *
     *
     *
     *                            ranitidine for Tagamet
     */
    TherapeuticAlternative: {
        display: "therapeutic alternative",
        code: "TE",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
    /**
     * TG: Description: Substitution occurred or is permitted between therapeutically equivalent Generics but not Brands
     * &gt;
     *                            Examples:
     *
     *
     *
     *                            Ranitidine  for cimetidine
     */
    TherapeuticGeneric: {
        display: "therapeutic generic",
        code: "TG",
        system: "http://terminology.hl7.org/CodeSystem/v3-substanceAdminSubstitution",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVjNBY3RTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1YzQWN0U3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHFHQUFxRztBQW9Hckc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FBNkM7SUFDOUY7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUscUVBQXFFO0tBQzlFO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxxRUFBcUU7S0FDOUU7SUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW1CRztJQUNILHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUscUVBQXFFO0tBQzlFO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxxRUFBcUU7S0FDOUU7SUFDRDs7Ozs7Ozs7O09BU0c7SUFDSCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLHFFQUFxRTtLQUM5RTtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxxRUFBcUU7S0FDOUU7SUFDRDs7Ozs7Ozs7T0FRRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUscUVBQXFFO0tBQzlFO0lBQ0Q7Ozs7Ozs7OztPQVNHO0lBQ0gsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLHlCQUF5QjtRQUNsQyxJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxxRUFBcUU7S0FDOUU7SUFDRDs7Ozs7Ozs7T0FRRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUscUVBQXFFO0tBQzlFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvVmFsdWVTZXQvdjMtQWN0U3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25Db2RlfDIwMTQtMDMtMjZcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBObyBEZXNjcmlwdGlvbiBQcm92aWRlZFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVjNBY3RTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogQkM6IERlc2NyaXB0aW9uOiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGl0dXRpb24gb2NjdXJyZWQgb3IgaXMgcGVybWl0dGVkIGJldHdlZW4gZXF1aXZhbGVudCBCcmFuZHMgYnV0IG5vdCBHZW5lcmljc1xyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4YW1wbGVzOiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBaZXN0cmlsICBmb3IgUHJpbml2aWxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3VtYWRpbiBmb3IgSmFudG92ZW5cclxuICAgKi9cclxuICBCcmFuZENvbXBvc2l0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEU6IERlc2NyaXB0aW9uOiBTdWJzdGl0dXRpb24gb2NjdXJyZWQgb3IgaXMgcGVybWl0dGVkIHdpdGggYW5vdGhlciBiaW9lcXVpdmFsZW50IGFuZCB0aGVyYXBldXRpY2FsbHkgZXF1aXZhbGVudCBwcm9kdWN0LlxyXG4gICAqL1xyXG4gIEVxdWl2YWxlbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogRUM6IERlc2NyaXB0aW9uOiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGl0dXRpb24gb2NjdXJyZWQgb3IgaXMgcGVybWl0dGVkIHdpdGggYW5vdGhlciBwcm9kdWN0IHRoYXQgaXMgYTpcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaGFybWFjZXV0aWNhbCBhbHRlcm5hdGl2ZSBjb250YWluaW5nIHRoZSBzYW1lIGFjdGl2ZSBpbmdyZWRpZW50IGJ1dCBpcyBmb3JtdWxhdGVkIHdpdGggZGlmZmVyZW50IHNhbHQsIGVzdGVyXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhcm1hY2V1dGljYWwgZXF1aXZhbGVudCB0aGF0IGhhcyB0aGUgc2FtZSBhY3RpdmUgaW5ncmVkaWVudCwgc3RyZW5ndGgsIGRvc2FnZSBmb3JtIGFuZCByb3V0ZSBvZiBhZG1pbmlzdHJhdGlvblxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4YW1wbGVzOiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQaGFybWFjZXV0aWNhbCBhbHRlcm5hdGl2ZTogRXJ5dGhyb215Y2luIEV0aHlsc3VjY2luYXRlIGZvciBFcnl0aHJvbXljaW4gU3RlYXJhdGVcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQaGFybWFjZXV0aWNhbCBlcXVpdmFsZW50OiBMaXNvbnByaWwgZm9yIFplc3RyaWxcclxuICAgKi9cclxuICBFcXVpdmFsZW50Q29tcG9zaXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogRjogRGVzY3JpcHRpb246IFRoaXMgc3Vic3RpdHV0aW9uIHdhcyBwZXJmb3JtZWQgb3IgaXMgcGVybWl0dGVkIGJhc2VkIG9uIGZvcm11bGFyeSBndWlkZWxpbmVzLlxyXG4gICAqL1xyXG4gIEZvcm11bGFyeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBHOiBEZXNjcmlwdGlvbjogU3Vic3RpdHV0aW9uIG9jY3VycmVkIG9yIGlzIHBlcm1pdHRlZCBiZXR3ZWVuIGVxdWl2YWxlbnQgR2VuZXJpY3MgYnV0IG5vdCBCcmFuZHNcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGFtcGxlczogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzbm9wcmlsIChMdXBpbiBDb3JwKSBmb3IgTGlzbm9wcmlsIChXb2NraGFyZHQgQ29ycClcclxuICAgKi9cclxuICBHZW5lcmljQ29tcG9zaXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogTjogTm8gc3Vic3RpdHV0aW9uIG9jY3VycmVkIG9yIGlzIHBlcm1pdHRlZC5cclxuICAgKi9cclxuICBOb25lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRCOiBEZXNjcmlwdGlvbjogU3Vic3RpdHV0aW9uIG9jY3VycmVkIG9yIGlzIHBlcm1pdHRlZCBiZXR3ZWVuIHRoZXJhcGV1dGljYWxseSBlcXVpdmFsZW50IEJyYW5kcyBidXQgbm90IEdlbmVyaWNzXHJcbiAgICogJmd0O1xyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4YW1wbGVzOiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBaYW50YWMgZm9yIFRhZ2FtZXRcclxuICAgKi9cclxuICBUaGVyYXBldXRpY0JyYW5kOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRFOiBEZXNjcmlwdGlvbjogU3Vic3RpdHV0aW9uIG9jY3VycmVkIG9yIGlzIHBlcm1pdHRlZCB3aXRoIGFub3RoZXIgcHJvZHVjdCBoYXZpbmcgdGhlIHNhbWUgdGhlcmFwZXV0aWMgb2JqZWN0aXZlIGFuZCBzYWZldHkgcHJvZmlsZS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGFtcGxlczogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuaXRpZGluZSBmb3IgVGFnYW1ldFxyXG4gICAqL1xyXG4gIFRoZXJhcGV1dGljQWx0ZXJuYXRpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogVEc6IERlc2NyaXB0aW9uOiBTdWJzdGl0dXRpb24gb2NjdXJyZWQgb3IgaXMgcGVybWl0dGVkIGJldHdlZW4gdGhlcmFwZXV0aWNhbGx5IGVxdWl2YWxlbnQgR2VuZXJpY3MgYnV0IG5vdCBCcmFuZHNcclxuICAgKiAmZ3Q7XHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhhbXBsZXM6IFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJhbml0aWRpbmUgIGZvciBjaW1ldGlkaW5lXHJcbiAgICovXHJcbiAgVGhlcmFwZXV0aWNHZW5lcmljOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogTm8gRGVzY3JpcHRpb24gUHJvdmlkZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBWM0FjdFN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uQ29kaW5nczpWM0FjdFN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBCQzogRGVzY3JpcHRpb246IFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFN1YnN0aXR1dGlvbiBvY2N1cnJlZCBvciBpcyBwZXJtaXR0ZWQgYmV0d2VlbiBlcXVpdmFsZW50IEJyYW5kcyBidXQgbm90IEdlbmVyaWNzXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhhbXBsZXM6IFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFplc3RyaWwgIGZvciBQcmluaXZpbFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvdW1hZGluIGZvciBKYW50b3ZlblxyXG4gICAqL1xyXG4gIEJyYW5kQ29tcG9zaXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiYnJhbmQgY29tcG9zaXRpb25cIixcclxuICAgIGNvZGU6IFwiQkNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLXN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBFOiBEZXNjcmlwdGlvbjogU3Vic3RpdHV0aW9uIG9jY3VycmVkIG9yIGlzIHBlcm1pdHRlZCB3aXRoIGFub3RoZXIgYmlvZXF1aXZhbGVudCBhbmQgdGhlcmFwZXV0aWNhbGx5IGVxdWl2YWxlbnQgcHJvZHVjdC5cclxuICAgKi9cclxuICBFcXVpdmFsZW50OiB7XHJcbiAgICBkaXNwbGF5OiBcImVxdWl2YWxlbnRcIixcclxuICAgIGNvZGU6IFwiRVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtc3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEVDOiBEZXNjcmlwdGlvbjogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgU3Vic3RpdHV0aW9uIG9jY3VycmVkIG9yIGlzIHBlcm1pdHRlZCB3aXRoIGFub3RoZXIgcHJvZHVjdCB0aGF0IGlzIGE6XHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhcm1hY2V1dGljYWwgYWx0ZXJuYXRpdmUgY29udGFpbmluZyB0aGUgc2FtZSBhY3RpdmUgaW5ncmVkaWVudCBidXQgaXMgZm9ybXVsYXRlZCB3aXRoIGRpZmZlcmVudCBzYWx0LCBlc3RlclxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBoYXJtYWNldXRpY2FsIGVxdWl2YWxlbnQgdGhhdCBoYXMgdGhlIHNhbWUgYWN0aXZlIGluZ3JlZGllbnQsIHN0cmVuZ3RoLCBkb3NhZ2UgZm9ybSBhbmQgcm91dGUgb2YgYWRtaW5pc3RyYXRpb25cclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGFtcGxlczogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhhcm1hY2V1dGljYWwgYWx0ZXJuYXRpdmU6IEVyeXRocm9teWNpbiBFdGh5bHN1Y2NpbmF0ZSBmb3IgRXJ5dGhyb215Y2luIFN0ZWFyYXRlXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhhcm1hY2V1dGljYWwgZXF1aXZhbGVudDogTGlzb25wcmlsIGZvciBaZXN0cmlsXHJcbiAgICovXHJcbiAgRXF1aXZhbGVudENvbXBvc2l0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcImVxdWl2YWxlbnQgY29tcG9zaXRpb25cIixcclxuICAgIGNvZGU6IFwiRUNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLXN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBGOiBEZXNjcmlwdGlvbjogVGhpcyBzdWJzdGl0dXRpb24gd2FzIHBlcmZvcm1lZCBvciBpcyBwZXJtaXR0ZWQgYmFzZWQgb24gZm9ybXVsYXJ5IGd1aWRlbGluZXMuXHJcbiAgICovXHJcbiAgRm9ybXVsYXJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcImZvcm11bGFyeVwiLFxyXG4gICAgY29kZTogXCJGXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1zdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogRzogRGVzY3JpcHRpb246IFN1YnN0aXR1dGlvbiBvY2N1cnJlZCBvciBpcyBwZXJtaXR0ZWQgYmV0d2VlbiBlcXVpdmFsZW50IEdlbmVyaWNzIGJ1dCBub3QgQnJhbmRzXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhhbXBsZXM6IFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc25vcHJpbCAoTHVwaW4gQ29ycCkgZm9yIExpc25vcHJpbCAoV29ja2hhcmR0IENvcnApXHJcbiAgICovXHJcbiAgR2VuZXJpY0NvbXBvc2l0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcImdlbmVyaWMgY29tcG9zaXRpb25cIixcclxuICAgIGNvZGU6IFwiR1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtc3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIE46IE5vIHN1YnN0aXR1dGlvbiBvY2N1cnJlZCBvciBpcyBwZXJtaXR0ZWQuXHJcbiAgICovXHJcbiAgTm9uZToge1xyXG4gICAgZGlzcGxheTogXCJub25lXCIsXHJcbiAgICBjb2RlOiBcIk5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLXN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBUQjogRGVzY3JpcHRpb246IFN1YnN0aXR1dGlvbiBvY2N1cnJlZCBvciBpcyBwZXJtaXR0ZWQgYmV0d2VlbiB0aGVyYXBldXRpY2FsbHkgZXF1aXZhbGVudCBCcmFuZHMgYnV0IG5vdCBHZW5lcmljc1xyXG4gICAqICZndDtcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGFtcGxlczogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgWmFudGFjIGZvciBUYWdhbWV0XHJcbiAgICovXHJcbiAgVGhlcmFwZXV0aWNCcmFuZDoge1xyXG4gICAgZGlzcGxheTogXCJ0aGVyYXBldXRpYyBicmFuZFwiLFxyXG4gICAgY29kZTogXCJUQlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtc3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFRFOiBEZXNjcmlwdGlvbjogU3Vic3RpdHV0aW9uIG9jY3VycmVkIG9yIGlzIHBlcm1pdHRlZCB3aXRoIGFub3RoZXIgcHJvZHVjdCBoYXZpbmcgdGhlIHNhbWUgdGhlcmFwZXV0aWMgb2JqZWN0aXZlIGFuZCBzYWZldHkgcHJvZmlsZS5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGFtcGxlczogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuaXRpZGluZSBmb3IgVGFnYW1ldFxyXG4gICAqL1xyXG4gIFRoZXJhcGV1dGljQWx0ZXJuYXRpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwidGhlcmFwZXV0aWMgYWx0ZXJuYXRpdmVcIixcclxuICAgIGNvZGU6IFwiVEVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLXN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBURzogRGVzY3JpcHRpb246IFN1YnN0aXR1dGlvbiBvY2N1cnJlZCBvciBpcyBwZXJtaXR0ZWQgYmV0d2VlbiB0aGVyYXBldXRpY2FsbHkgZXF1aXZhbGVudCBHZW5lcmljcyBidXQgbm90IEJyYW5kc1xyXG4gICAqICZndDtcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGFtcGxlczogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmFuaXRpZGluZSAgZm9yIGNpbWV0aWRpbmVcclxuICAgKi9cclxuICBUaGVyYXBldXRpY0dlbmVyaWM6IHtcclxuICAgIGRpc3BsYXk6IFwidGhlcmFwZXV0aWMgZ2VuZXJpY1wiLFxyXG4gICAgY29kZTogXCJUR1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtc3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=