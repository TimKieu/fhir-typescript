// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-param-type|4.0.1
/**
 * Data types allowed to be used for search parameters.
 */
export const SearchParamTypeCodings = {
    /**
     * composite: A composite search parameter that combines a search on two values together.
     */
    Composite: {
        display: "Composite",
        code: "composite",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * date: Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.
     */
    DateDateTime: {
        display: "Date/DateTime",
        code: "date",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * number: Search parameter SHALL be a number (a whole number, or a decimal).
     */
    Number: {
        display: "Number",
        code: "number",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * quantity: A search parameter that searches on a quantity.
     */
    Quantity: {
        display: "Quantity",
        code: "quantity",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * reference: A reference to another resource (Reference or canonical).
     */
    Reference: {
        display: "Reference",
        code: "reference",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * special: Special logic applies to this parameter per the description of the search parameter.
     */
    Special: {
        display: "Special",
        code: "special",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * string: Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.
     */
    String: {
        display: "String",
        code: "string",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * token: Search parameter on a coded element or identifier. May be used to search through the text, display, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.
     */
    Token: {
        display: "Token",
        code: "token",
        system: "http://hl7.org/fhir/search-param-type",
    },
    /**
     * uri: A search parameter that searches on a URI (RFC 3986).
     */
    URI: {
        display: "URI",
        code: "uri",
        system: "http://hl7.org/fhir/search-param-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoUGFyYW1UeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU2VhcmNoUGFyYW1UeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxzRUFBc0U7QUE4Q3RFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9zZWFyY2gtcGFyYW0tdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIERhdGEgdHlwZXMgYWxsb3dlZCB0byBiZSB1c2VkIGZvciBzZWFyY2ggcGFyYW1ldGVycy5cclxuICovXHJcbmV4cG9ydCB0eXBlIFNlYXJjaFBhcmFtVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcG9zaXRlOiBBIGNvbXBvc2l0ZSBzZWFyY2ggcGFyYW1ldGVyIHRoYXQgY29tYmluZXMgYSBzZWFyY2ggb24gdHdvIHZhbHVlcyB0b2dldGhlci5cclxuICAgKi9cclxuICBDb21wb3NpdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0ZTogU2VhcmNoIHBhcmFtZXRlciBpcyBvbiBhIGRhdGUvdGltZS4gVGhlIGRhdGUgZm9ybWF0IGlzIHRoZSBzdGFuZGFyZCBYTUwgZm9ybWF0LCB0aG91Z2ggb3RoZXIgZm9ybWF0cyBtYXkgYmUgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIERhdGVEYXRlVGltZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBudW1iZXI6IFNlYXJjaCBwYXJhbWV0ZXIgU0hBTEwgYmUgYSBudW1iZXIgKGEgd2hvbGUgbnVtYmVyLCBvciBhIGRlY2ltYWwpLlxyXG4gICAqL1xyXG4gIE51bWJlcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBxdWFudGl0eTogQSBzZWFyY2ggcGFyYW1ldGVyIHRoYXQgc2VhcmNoZXMgb24gYSBxdWFudGl0eS5cclxuICAgKi9cclxuICBRdWFudGl0eTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZWZlcmVuY2U6IEEgcmVmZXJlbmNlIHRvIGFub3RoZXIgcmVzb3VyY2UgKFJlZmVyZW5jZSBvciBjYW5vbmljYWwpLlxyXG4gICAqL1xyXG4gIFJlZmVyZW5jZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzcGVjaWFsOiBTcGVjaWFsIGxvZ2ljIGFwcGxpZXMgdG8gdGhpcyBwYXJhbWV0ZXIgcGVyIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgc2VhcmNoIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBTcGVjaWFsOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogU2VhcmNoIHBhcmFtZXRlciBpcyBhIHNpbXBsZSBzdHJpbmcsIGxpa2UgYSBuYW1lIHBhcnQuIFNlYXJjaCBpcyBjYXNlLWluc2Vuc2l0aXZlIGFuZCBhY2NlbnQtaW5zZW5zaXRpdmUuIE1heSBtYXRjaCBqdXN0IHRoZSBzdGFydCBvZiBhIHN0cmluZy4gU3RyaW5nIHBhcmFtZXRlcnMgbWF5IGNvbnRhaW4gc3BhY2VzLlxyXG4gICAqL1xyXG4gIFN0cmluZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB0b2tlbjogU2VhcmNoIHBhcmFtZXRlciBvbiBhIGNvZGVkIGVsZW1lbnQgb3IgaWRlbnRpZmllci4gTWF5IGJlIHVzZWQgdG8gc2VhcmNoIHRocm91Z2ggdGhlIHRleHQsIGRpc3BsYXksIGNvZGUgYW5kIGNvZGUvY29kZXN5c3RlbSAoZm9yIGNvZGVzKSBhbmQgbGFiZWwsIHN5c3RlbSBhbmQga2V5IChmb3IgaWRlbnRpZmllcikuIEl0cyB2YWx1ZSBpcyBlaXRoZXIgYSBzdHJpbmcgb3IgYSBwYWlyIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIHNlcGFyYXRlZCBieSBhIFwifFwiLCBkZXBlbmRpbmcgb24gdGhlIG1vZGlmaWVyIHVzZWQuXHJcbiAgICovXHJcbiAgVG9rZW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdXJpOiBBIHNlYXJjaCBwYXJhbWV0ZXIgdGhhdCBzZWFyY2hlcyBvbiBhIFVSSSAoUkZDIDM5ODYpLlxyXG4gICAqL1xyXG4gIFVSSTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIERhdGEgdHlwZXMgYWxsb3dlZCB0byBiZSB1c2VkIGZvciBzZWFyY2ggcGFyYW1ldGVycy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hQYXJhbVR5cGVDb2RpbmdzOlNlYXJjaFBhcmFtVHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcG9zaXRlOiBBIGNvbXBvc2l0ZSBzZWFyY2ggcGFyYW1ldGVyIHRoYXQgY29tYmluZXMgYSBzZWFyY2ggb24gdHdvIHZhbHVlcyB0b2dldGhlci5cclxuICAgKi9cclxuICBDb21wb3NpdGU6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29tcG9zaXRlXCIsXHJcbiAgICBjb2RlOiBcImNvbXBvc2l0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXBhcmFtLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGU6IFNlYXJjaCBwYXJhbWV0ZXIgaXMgb24gYSBkYXRlL3RpbWUuIFRoZSBkYXRlIGZvcm1hdCBpcyB0aGUgc3RhbmRhcmQgWE1MIGZvcm1hdCwgdGhvdWdoIG90aGVyIGZvcm1hdHMgbWF5IGJlIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBEYXRlRGF0ZVRpbWU6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0ZS9EYXRlVGltZVwiLFxyXG4gICAgY29kZTogXCJkYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbnVtYmVyOiBTZWFyY2ggcGFyYW1ldGVyIFNIQUxMIGJlIGEgbnVtYmVyIChhIHdob2xlIG51bWJlciwgb3IgYSBkZWNpbWFsKS5cclxuICAgKi9cclxuICBOdW1iZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiTnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIm51bWJlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXBhcmFtLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHF1YW50aXR5OiBBIHNlYXJjaCBwYXJhbWV0ZXIgdGhhdCBzZWFyY2hlcyBvbiBhIHF1YW50aXR5LlxyXG4gICAqL1xyXG4gIFF1YW50aXR5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlF1YW50aXR5XCIsXHJcbiAgICBjb2RlOiBcInF1YW50aXR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVmZXJlbmNlOiBBIHJlZmVyZW5jZSB0byBhbm90aGVyIHJlc291cmNlIChSZWZlcmVuY2Ugb3IgY2Fub25pY2FsKS5cclxuICAgKi9cclxuICBSZWZlcmVuY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiUmVmZXJlbmNlXCIsXHJcbiAgICBjb2RlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXBhcmFtLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNwZWNpYWw6IFNwZWNpYWwgbG9naWMgYXBwbGllcyB0byB0aGlzIHBhcmFtZXRlciBwZXIgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBzZWFyY2ggcGFyYW1ldGVyLlxyXG4gICAqL1xyXG4gIFNwZWNpYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiU3BlY2lhbFwiLFxyXG4gICAgY29kZTogXCJzcGVjaWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3RyaW5nOiBTZWFyY2ggcGFyYW1ldGVyIGlzIGEgc2ltcGxlIHN0cmluZywgbGlrZSBhIG5hbWUgcGFydC4gU2VhcmNoIGlzIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGFjY2VudC1pbnNlbnNpdGl2ZS4gTWF5IG1hdGNoIGp1c3QgdGhlIHN0YXJ0IG9mIGEgc3RyaW5nLiBTdHJpbmcgcGFyYW1ldGVycyBtYXkgY29udGFpbiBzcGFjZXMuXHJcbiAgICovXHJcbiAgU3RyaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN0cmluZ1wiLFxyXG4gICAgY29kZTogXCJzdHJpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB0b2tlbjogU2VhcmNoIHBhcmFtZXRlciBvbiBhIGNvZGVkIGVsZW1lbnQgb3IgaWRlbnRpZmllci4gTWF5IGJlIHVzZWQgdG8gc2VhcmNoIHRocm91Z2ggdGhlIHRleHQsIGRpc3BsYXksIGNvZGUgYW5kIGNvZGUvY29kZXN5c3RlbSAoZm9yIGNvZGVzKSBhbmQgbGFiZWwsIHN5c3RlbSBhbmQga2V5IChmb3IgaWRlbnRpZmllcikuIEl0cyB2YWx1ZSBpcyBlaXRoZXIgYSBzdHJpbmcgb3IgYSBwYWlyIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIHNlcGFyYXRlZCBieSBhIFwifFwiLCBkZXBlbmRpbmcgb24gdGhlIG1vZGlmaWVyIHVzZWQuXHJcbiAgICovXHJcbiAgVG9rZW46IHtcclxuICAgIGRpc3BsYXk6IFwiVG9rZW5cIixcclxuICAgIGNvZGU6IFwidG9rZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1cmk6IEEgc2VhcmNoIHBhcmFtZXRlciB0aGF0IHNlYXJjaGVzIG9uIGEgVVJJIChSRkMgMzk4NikuXHJcbiAgICovXHJcbiAgVVJJOiB7XHJcbiAgICBkaXNwbGF5OiBcIlVSSVwiLFxyXG4gICAgY29kZTogXCJ1cmlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19