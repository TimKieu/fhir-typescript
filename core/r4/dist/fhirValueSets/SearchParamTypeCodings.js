// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-param-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Data types allowed to be used for search parameters.
 */
export const SearchParamTypeCodings = {
    /**
     * composite: A composite search parameter that combines a search on two values together.
     */
    Composite: new Coding({
        display: "Composite",
        code: "composite",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * date: Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.
     */
    DateDateTime: new Coding({
        display: "Date/DateTime",
        code: "date",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * number: Search parameter SHALL be a number (a whole number, or a decimal).
     */
    Number: new Coding({
        display: "Number",
        code: "number",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * quantity: A search parameter that searches on a quantity.
     */
    Quantity: new Coding({
        display: "Quantity",
        code: "quantity",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * reference: A reference to another resource (Reference or canonical).
     */
    Reference: new Coding({
        display: "Reference",
        code: "reference",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * special: Special logic applies to this parameter per the description of the search parameter.
     */
    Special: new Coding({
        display: "Special",
        code: "special",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * string: Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.
     */
    String: new Coding({
        display: "String",
        code: "string",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * token: Search parameter on a coded element or identifier. May be used to search through the text, display, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.
     */
    Token: new Coding({
        display: "Token",
        code: "token",
        system: "http://hl7.org/fhir/search-param-type",
    }),
    /**
     * uri: A search parameter that searches on a URI (RFC 3986).
     */
    URI: new Coding({
        display: "URI",
        code: "uri",
        system: "http://hl7.org/fhir/search-param-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoUGFyYW1UeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU2VhcmNoUGFyYW1UeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxzRUFBc0U7QUFFdEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDcEM7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHVDQUF1QztLQUNoRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hELENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsdUNBQXVDO0tBQ2hELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2QsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc2VhcmNoLXBhcmFtLXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIERhdGEgdHlwZXMgYWxsb3dlZCB0byBiZSB1c2VkIGZvciBzZWFyY2ggcGFyYW1ldGVycy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTZWFyY2hQYXJhbVR5cGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbXBvc2l0ZTogQSBjb21wb3NpdGUgc2VhcmNoIHBhcmFtZXRlciB0aGF0IGNvbWJpbmVzIGEgc2VhcmNoIG9uIHR3byB2YWx1ZXMgdG9nZXRoZXIuXHJcbiAgICovXHJcbiAgQ29tcG9zaXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29tcG9zaXRlXCIsXHJcbiAgICBjb2RlOiBcImNvbXBvc2l0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXBhcmFtLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkYXRlOiBTZWFyY2ggcGFyYW1ldGVyIGlzIG9uIGEgZGF0ZS90aW1lLiBUaGUgZGF0ZSBmb3JtYXQgaXMgdGhlIHN0YW5kYXJkIFhNTCBmb3JtYXQsIHRob3VnaCBvdGhlciBmb3JtYXRzIG1heSBiZSBzdXBwb3J0ZWQuXHJcbiAgICovXHJcbiAgRGF0ZURhdGVUaW1lOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGF0ZS9EYXRlVGltZVwiLFxyXG4gICAgY29kZTogXCJkYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG51bWJlcjogU2VhcmNoIHBhcmFtZXRlciBTSEFMTCBiZSBhIG51bWJlciAoYSB3aG9sZSBudW1iZXIsIG9yIGEgZGVjaW1hbCkuXHJcbiAgICovXHJcbiAgTnVtYmVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTnVtYmVyXCIsXHJcbiAgICBjb2RlOiBcIm51bWJlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXBhcmFtLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBxdWFudGl0eTogQSBzZWFyY2ggcGFyYW1ldGVyIHRoYXQgc2VhcmNoZXMgb24gYSBxdWFudGl0eS5cclxuICAgKi9cclxuICBRdWFudGl0eTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlF1YW50aXR5XCIsXHJcbiAgICBjb2RlOiBcInF1YW50aXR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJlZmVyZW5jZTogQSByZWZlcmVuY2UgdG8gYW5vdGhlciByZXNvdXJjZSAoUmVmZXJlbmNlIG9yIGNhbm9uaWNhbCkuXHJcbiAgICovXHJcbiAgUmVmZXJlbmNlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmVmZXJlbmNlXCIsXHJcbiAgICBjb2RlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLXBhcmFtLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzcGVjaWFsOiBTcGVjaWFsIGxvZ2ljIGFwcGxpZXMgdG8gdGhpcyBwYXJhbWV0ZXIgcGVyIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgc2VhcmNoIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBTcGVjaWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3BlY2lhbFwiLFxyXG4gICAgY29kZTogXCJzcGVjaWFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtcGFyYW0tdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogU2VhcmNoIHBhcmFtZXRlciBpcyBhIHNpbXBsZSBzdHJpbmcsIGxpa2UgYSBuYW1lIHBhcnQuIFNlYXJjaCBpcyBjYXNlLWluc2Vuc2l0aXZlIGFuZCBhY2NlbnQtaW5zZW5zaXRpdmUuIE1heSBtYXRjaCBqdXN0IHRoZSBzdGFydCBvZiBhIHN0cmluZy4gU3RyaW5nIHBhcmFtZXRlcnMgbWF5IGNvbnRhaW4gc3BhY2VzLlxyXG4gICAqL1xyXG4gIFN0cmluZzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN0cmluZ1wiLFxyXG4gICAgY29kZTogXCJzdHJpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdG9rZW46IFNlYXJjaCBwYXJhbWV0ZXIgb24gYSBjb2RlZCBlbGVtZW50IG9yIGlkZW50aWZpZXIuIE1heSBiZSB1c2VkIHRvIHNlYXJjaCB0aHJvdWdoIHRoZSB0ZXh0LCBkaXNwbGF5LCBjb2RlIGFuZCBjb2RlL2NvZGVzeXN0ZW0gKGZvciBjb2RlcykgYW5kIGxhYmVsLCBzeXN0ZW0gYW5kIGtleSAoZm9yIGlkZW50aWZpZXIpLiBJdHMgdmFsdWUgaXMgZWl0aGVyIGEgc3RyaW5nIG9yIGEgcGFpciBvZiBuYW1lc3BhY2UgYW5kIHZhbHVlLCBzZXBhcmF0ZWQgYnkgYSBcInxcIiwgZGVwZW5kaW5nIG9uIHRoZSBtb2RpZmllciB1c2VkLlxyXG4gICAqL1xyXG4gIFRva2VuOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVG9rZW5cIixcclxuICAgIGNvZGU6IFwidG9rZW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdXJpOiBBIHNlYXJjaCBwYXJhbWV0ZXIgdGhhdCBzZWFyY2hlcyBvbiBhIFVSSSAoUkZDIDM5ODYpLlxyXG4gICAqL1xyXG4gIFVSSTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVSSVwiLFxyXG4gICAgY29kZTogXCJ1cmlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1wYXJhbS10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogRGF0YSB0eXBlcyBhbGxvd2VkIHRvIGJlIHVzZWQgZm9yIHNlYXJjaCBwYXJhbWV0ZXJzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU2VhcmNoUGFyYW1UeXBlQ29kaW5nVHlwZSA9IHR5cGVvZiBTZWFyY2hQYXJhbVR5cGVDb2RpbmdzO1xyXG4iXX0=