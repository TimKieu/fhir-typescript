// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/assert-operator-codes|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The type of operator to use for assertion.
 */
export const AssertOperatorCodesCodings = {
    /**
     * contains: Compare value string contains a known value.
     */
    Contains: new Coding({
        display: "contains",
        code: "contains",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * empty: Compare value is empty.
     */
    Empty: new Coding({
        display: "empty",
        code: "empty",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * equals: Default value. Equals comparison.
     */
    Equals: new Coding({
        display: "equals",
        code: "equals",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * eval: Evaluate the FHIRPath expression as a boolean condition.
     */
    Evaluate: new Coding({
        display: "evaluate",
        code: "eval",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * greaterThan: Compare value to be greater than a known value.
     */
    GreaterThan: new Coding({
        display: "greaterThan",
        code: "greaterThan",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * in: Compare value within a known set of values.
     */
    In: new Coding({
        display: "in",
        code: "in",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * lessThan: Compare value to be less than a known value.
     */
    LessThan: new Coding({
        display: "lessThan",
        code: "lessThan",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * notContains: Compare value string does not contain a known value.
     */
    NotContains: new Coding({
        display: "notContains",
        code: "notContains",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * notEmpty: Compare value is not empty.
     */
    NotEmpty: new Coding({
        display: "notEmpty",
        code: "notEmpty",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * notEquals: Not equals comparison.
     */
    NotEquals: new Coding({
        display: "notEquals",
        code: "notEquals",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
    /**
     * notIn: Compare value not within a known set of values.
     */
    NotIn: new Coding({
        display: "notIn",
        code: "notIn",
        system: "http://hl7.org/fhir/assert-operator-codes",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXJ0T3BlcmF0b3JDb2Rlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0Fzc2VydE9wZXJhdG9yQ29kZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDBFQUEwRTtBQUUxRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRztJQUN4Qzs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDJDQUEyQztLQUNwRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNiLE9BQU8sRUFBRSxJQUFJO1FBQ2IsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsMkNBQTJDO0tBQ3BELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwyQ0FBMkM7S0FDcEQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYXNzZXJ0LW9wZXJhdG9yLWNvZGVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiBvcGVyYXRvciB0byB1c2UgZm9yIGFzc2VydGlvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBc3NlcnRPcGVyYXRvckNvZGVzQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBjb250YWluczogQ29tcGFyZSB2YWx1ZSBzdHJpbmcgY29udGFpbnMgYSBrbm93biB2YWx1ZS5cclxuICAgKi9cclxuICBDb250YWluczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImNvbnRhaW5zXCIsXHJcbiAgICBjb2RlOiBcImNvbnRhaW5zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBlbXB0eTogQ29tcGFyZSB2YWx1ZSBpcyBlbXB0eS5cclxuICAgKi9cclxuICBFbXB0eTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImVtcHR5XCIsXHJcbiAgICBjb2RlOiBcImVtcHR5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBlcXVhbHM6IERlZmF1bHQgdmFsdWUuIEVxdWFscyBjb21wYXJpc29uLlxyXG4gICAqL1xyXG4gIEVxdWFsczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImVxdWFsc1wiLFxyXG4gICAgY29kZTogXCJlcXVhbHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGV2YWw6IEV2YWx1YXRlIHRoZSBGSElSUGF0aCBleHByZXNzaW9uIGFzIGEgYm9vbGVhbiBjb25kaXRpb24uXHJcbiAgICovXHJcbiAgRXZhbHVhdGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJldmFsdWF0ZVwiLFxyXG4gICAgY29kZTogXCJldmFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBncmVhdGVyVGhhbjogQ29tcGFyZSB2YWx1ZSB0byBiZSBncmVhdGVyIHRoYW4gYSBrbm93biB2YWx1ZS5cclxuICAgKi9cclxuICBHcmVhdGVyVGhhbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImdyZWF0ZXJUaGFuXCIsXHJcbiAgICBjb2RlOiBcImdyZWF0ZXJUaGFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9hc3NlcnQtb3BlcmF0b3ItY29kZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBpbjogQ29tcGFyZSB2YWx1ZSB3aXRoaW4gYSBrbm93biBzZXQgb2YgdmFsdWVzLlxyXG4gICAqL1xyXG4gIEluOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiaW5cIixcclxuICAgIGNvZGU6IFwiaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGxlc3NUaGFuOiBDb21wYXJlIHZhbHVlIHRvIGJlIGxlc3MgdGhhbiBhIGtub3duIHZhbHVlLlxyXG4gICAqL1xyXG4gIExlc3NUaGFuOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwibGVzc1RoYW5cIixcclxuICAgIGNvZGU6IFwibGVzc1RoYW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5vdENvbnRhaW5zOiBDb21wYXJlIHZhbHVlIHN0cmluZyBkb2VzIG5vdCBjb250YWluIGEga25vd24gdmFsdWUuXHJcbiAgICovXHJcbiAgTm90Q29udGFpbnM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJub3RDb250YWluc1wiLFxyXG4gICAgY29kZTogXCJub3RDb250YWluc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvYXNzZXJ0LW9wZXJhdG9yLWNvZGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbm90RW1wdHk6IENvbXBhcmUgdmFsdWUgaXMgbm90IGVtcHR5LlxyXG4gICAqL1xyXG4gIE5vdEVtcHR5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwibm90RW1wdHlcIixcclxuICAgIGNvZGU6IFwibm90RW1wdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5vdEVxdWFsczogTm90IGVxdWFscyBjb21wYXJpc29uLlxyXG4gICAqL1xyXG4gIE5vdEVxdWFsczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIm5vdEVxdWFsc1wiLFxyXG4gICAgY29kZTogXCJub3RFcXVhbHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5vdEluOiBDb21wYXJlIHZhbHVlIG5vdCB3aXRoaW4gYSBrbm93biBzZXQgb2YgdmFsdWVzLlxyXG4gICAqL1xyXG4gIE5vdEluOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwibm90SW5cIixcclxuICAgIGNvZGU6IFwibm90SW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2Fzc2VydC1vcGVyYXRvci1jb2Rlc1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIG9wZXJhdG9yIHRvIHVzZSBmb3IgYXNzZXJ0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXNzZXJ0T3BlcmF0b3JDb2Rlc0NvZGluZ1R5cGUgPSB0eXBlb2YgQXNzZXJ0T3BlcmF0b3JDb2Rlc0NvZGluZ3M7XHJcbiJdfQ==