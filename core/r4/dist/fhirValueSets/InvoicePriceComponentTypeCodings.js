// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/invoice-priceComponentType|4.0.1
/**
 * Codes indicating the kind of the price component.
 */
export const InvoicePriceComponentTypeCodings = {
    /**
     * base: the amount is the base price used for calculating the total price before applying surcharges, discount or taxes.
     */
    BasePrice: {
        display: "base price",
        code: "base",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * deduction: the amount is a deduction applied on the base price.
     */
    Deduction: {
        display: "deduction",
        code: "deduction",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * discount: the amount is a discount applied on the base price.
     */
    Discount: {
        display: "discount",
        code: "discount",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * informational: the amount is of informational character, it has not been applied in the calculation of the total price.
     */
    Informational: {
        display: "informational",
        code: "informational",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * surcharge: the amount is a surcharge applied on the base price.
     */
    Surcharge: {
        display: "surcharge",
        code: "surcharge",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
    /**
     * tax: the amount is the tax component of the total price.
     */
    Tax: {
        display: "tax",
        code: "tax",
        system: "http://hl7.org/fhir/invoice-priceComponentType",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW52b2ljZVByaWNlQ29tcG9uZW50VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0ludm9pY2VQcmljZUNvbXBvbmVudFR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLCtFQUErRTtBQWtDL0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBdUM7SUFDbEY7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxnREFBZ0Q7S0FDekQ7SUFDRDs7T0FFRztJQUNILEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsZ0RBQWdEO0tBQ3pEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9pbnZvaWNlLXByaWNlQ29tcG9uZW50VHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGluZGljYXRpbmcgdGhlIGtpbmQgb2YgdGhlIHByaWNlIGNvbXBvbmVudC5cclxuICovXHJcbmV4cG9ydCB0eXBlIEludm9pY2VQcmljZUNvbXBvbmVudFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJhc2U6IHRoZSBhbW91bnQgaXMgdGhlIGJhc2UgcHJpY2UgdXNlZCBmb3IgY2FsY3VsYXRpbmcgdGhlIHRvdGFsIHByaWNlIGJlZm9yZSBhcHBseWluZyBzdXJjaGFyZ2VzLCBkaXNjb3VudCBvciB0YXhlcy5cclxuICAgKi9cclxuICBCYXNlUHJpY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGVkdWN0aW9uOiB0aGUgYW1vdW50IGlzIGEgZGVkdWN0aW9uIGFwcGxpZWQgb24gdGhlIGJhc2UgcHJpY2UuXHJcbiAgICovXHJcbiAgRGVkdWN0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRpc2NvdW50OiB0aGUgYW1vdW50IGlzIGEgZGlzY291bnQgYXBwbGllZCBvbiB0aGUgYmFzZSBwcmljZS5cclxuICAgKi9cclxuICBEaXNjb3VudDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbmZvcm1hdGlvbmFsOiB0aGUgYW1vdW50IGlzIG9mIGluZm9ybWF0aW9uYWwgY2hhcmFjdGVyLCBpdCBoYXMgbm90IGJlZW4gYXBwbGllZCBpbiB0aGUgY2FsY3VsYXRpb24gb2YgdGhlIHRvdGFsIHByaWNlLlxyXG4gICAqL1xyXG4gIEluZm9ybWF0aW9uYWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3VyY2hhcmdlOiB0aGUgYW1vdW50IGlzIGEgc3VyY2hhcmdlIGFwcGxpZWQgb24gdGhlIGJhc2UgcHJpY2UuXHJcbiAgICovXHJcbiAgU3VyY2hhcmdlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRheDogdGhlIGFtb3VudCBpcyB0aGUgdGF4IGNvbXBvbmVudCBvZiB0aGUgdG90YWwgcHJpY2UuXHJcbiAgICovXHJcbiAgVGF4OiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQ29kZXMgaW5kaWNhdGluZyB0aGUga2luZCBvZiB0aGUgcHJpY2UgY29tcG9uZW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEludm9pY2VQcmljZUNvbXBvbmVudFR5cGVDb2RpbmdzOkludm9pY2VQcmljZUNvbXBvbmVudFR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJhc2U6IHRoZSBhbW91bnQgaXMgdGhlIGJhc2UgcHJpY2UgdXNlZCBmb3IgY2FsY3VsYXRpbmcgdGhlIHRvdGFsIHByaWNlIGJlZm9yZSBhcHBseWluZyBzdXJjaGFyZ2VzLCBkaXNjb3VudCBvciB0YXhlcy5cclxuICAgKi9cclxuICBCYXNlUHJpY2U6IHtcclxuICAgIGRpc3BsYXk6IFwiYmFzZSBwcmljZVwiLFxyXG4gICAgY29kZTogXCJiYXNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbnZvaWNlLXByaWNlQ29tcG9uZW50VHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGVkdWN0aW9uOiB0aGUgYW1vdW50IGlzIGEgZGVkdWN0aW9uIGFwcGxpZWQgb24gdGhlIGJhc2UgcHJpY2UuXHJcbiAgICovXHJcbiAgRGVkdWN0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcImRlZHVjdGlvblwiLFxyXG4gICAgY29kZTogXCJkZWR1Y3Rpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ludm9pY2UtcHJpY2VDb21wb25lbnRUeXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkaXNjb3VudDogdGhlIGFtb3VudCBpcyBhIGRpc2NvdW50IGFwcGxpZWQgb24gdGhlIGJhc2UgcHJpY2UuXHJcbiAgICovXHJcbiAgRGlzY291bnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiZGlzY291bnRcIixcclxuICAgIGNvZGU6IFwiZGlzY291bnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ludm9pY2UtcHJpY2VDb21wb25lbnRUeXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbmZvcm1hdGlvbmFsOiB0aGUgYW1vdW50IGlzIG9mIGluZm9ybWF0aW9uYWwgY2hhcmFjdGVyLCBpdCBoYXMgbm90IGJlZW4gYXBwbGllZCBpbiB0aGUgY2FsY3VsYXRpb24gb2YgdGhlIHRvdGFsIHByaWNlLlxyXG4gICAqL1xyXG4gIEluZm9ybWF0aW9uYWw6IHtcclxuICAgIGRpc3BsYXk6IFwiaW5mb3JtYXRpb25hbFwiLFxyXG4gICAgY29kZTogXCJpbmZvcm1hdGlvbmFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbnZvaWNlLXByaWNlQ29tcG9uZW50VHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3VyY2hhcmdlOiB0aGUgYW1vdW50IGlzIGEgc3VyY2hhcmdlIGFwcGxpZWQgb24gdGhlIGJhc2UgcHJpY2UuXHJcbiAgICovXHJcbiAgU3VyY2hhcmdlOiB7XHJcbiAgICBkaXNwbGF5OiBcInN1cmNoYXJnZVwiLFxyXG4gICAgY29kZTogXCJzdXJjaGFyZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ludm9pY2UtcHJpY2VDb21wb25lbnRUeXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB0YXg6IHRoZSBhbW91bnQgaXMgdGhlIHRheCBjb21wb25lbnQgb2YgdGhlIHRvdGFsIHByaWNlLlxyXG4gICAqL1xyXG4gIFRheDoge1xyXG4gICAgZGlzcGxheTogXCJ0YXhcIixcclxuICAgIGNvZGU6IFwidGF4XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9pbnZvaWNlLXByaWNlQ29tcG9uZW50VHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==