// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/observation-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes providing the status of an observation.
 */
export const ObservationStatusCodings = {
    /**
     * amended: Subsequent to being Final, the observation has been modified subsequent.  This includes updates/new information and corrections.
     */
    Amended: new Coding({
        display: "Amended",
        code: "amended",
        system: "http://hl7.org/fhir/observation-status",
    }),
    /**
     * cancelled: The observation is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
     */
    Cancelled: new Coding({
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/observation-status",
    }),
    /**
     * corrected: Subsequent to being Final, the observation has been modified to correct an error in the test result.
     */
    Corrected: new Coding({
        display: "Corrected",
        code: "corrected",
        system: "http://hl7.org/fhir/observation-status",
    }),
    /**
     * entered-in-error: The observation has been withdrawn following previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/observation-status",
    }),
    /**
     * final: The observation is complete and there are no further actions needed. Additional information such "released", "signed", etc would be represented using [Provenance](provenance.html) which provides not only the act but also the actors and dates and other related data. These act states would be associated with an observation status of `preliminary` until they are all completed and then a status of `final` would be applied.
     */
    Final: new Coding({
        display: "Final",
        code: "final",
        system: "http://hl7.org/fhir/observation-status",
    }),
    /**
     * preliminary: This is an initial or interim observation: data may be incomplete or unverified.
     */
    Preliminary: new Coding({
        display: "Preliminary",
        code: "preliminary",
        system: "http://hl7.org/fhir/observation-status",
    }),
    /**
     * registered: The existence of the observation is registered, but there is no result yet available.
     */
    Registered: new Coding({
        display: "Registered",
        code: "registered",
        system: "http://hl7.org/fhir/observation-status",
    }),
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
     */
    Unknown: new Coding({
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/observation-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YXRpb25TdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9PYnNlcnZhdGlvblN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBRXZFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHdDQUF3QztLQUNqRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx3Q0FBd0M7S0FDakQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHdDQUF3QztLQUNqRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHdDQUF3QztLQUNqRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsd0NBQXdDO0tBQ2pELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L29ic2VydmF0aW9uLXN0YXR1c3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZXMgcHJvdmlkaW5nIHRoZSBzdGF0dXMgb2YgYW4gb2JzZXJ2YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgT2JzZXJ2YXRpb25TdGF0dXNDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFtZW5kZWQ6IFN1YnNlcXVlbnQgdG8gYmVpbmcgRmluYWwsIHRoZSBvYnNlcnZhdGlvbiBoYXMgYmVlbiBtb2RpZmllZCBzdWJzZXF1ZW50LiAgVGhpcyBpbmNsdWRlcyB1cGRhdGVzL25ldyBpbmZvcm1hdGlvbiBhbmQgY29ycmVjdGlvbnMuXHJcbiAgICovXHJcbiAgQW1lbmRlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFtZW5kZWRcIixcclxuICAgIGNvZGU6IFwiYW1lbmRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgb2JzZXJ2YXRpb24gaXMgdW5hdmFpbGFibGUgYmVjYXVzZSB0aGUgbWVhc3VyZW1lbnQgd2FzIG5vdCBzdGFydGVkIG9yIG5vdCBjb21wbGV0ZWQgKGFsc28gc29tZXRpbWVzIGNhbGxlZCBcImFib3J0ZWRcIikuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2FuY2VsbGVkXCIsXHJcbiAgICBjb2RlOiBcImNhbmNlbGxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogY29ycmVjdGVkOiBTdWJzZXF1ZW50IHRvIGJlaW5nIEZpbmFsLCB0aGUgb2JzZXJ2YXRpb24gaGFzIGJlZW4gbW9kaWZpZWQgdG8gY29ycmVjdCBhbiBlcnJvciBpbiB0aGUgdGVzdCByZXN1bHQuXHJcbiAgICovXHJcbiAgQ29ycmVjdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29ycmVjdGVkXCIsXHJcbiAgICBjb2RlOiBcImNvcnJlY3RlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIG9ic2VydmF0aW9uIGhhcyBiZWVuIHdpdGhkcmF3biBmb2xsb3dpbmcgcHJldmlvdXMgZmluYWwgcmVsZWFzZS4gIFRoaXMgZWxlY3Ryb25pYyByZWNvcmQgc2hvdWxkIG5ldmVyIGhhdmUgZXhpc3RlZCwgdGhvdWdoIGl0IGlzIHBvc3NpYmxlIHRoYXQgcmVhbC13b3JsZCBkZWNpc2lvbnMgd2VyZSBiYXNlZCBvbiBpdC4gKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcImNhbmNlbGxlZFwiIHJhdGhlciB0aGFuIFwiZW50ZXJlZC1pbi1lcnJvclwiLikuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL29ic2VydmF0aW9uLXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGZpbmFsOiBUaGUgb2JzZXJ2YXRpb24gaXMgY29tcGxldGUgYW5kIHRoZXJlIGFyZSBubyBmdXJ0aGVyIGFjdGlvbnMgbmVlZGVkLiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIHN1Y2ggXCJyZWxlYXNlZFwiLCBcInNpZ25lZFwiLCBldGMgd291bGQgYmUgcmVwcmVzZW50ZWQgdXNpbmcgW1Byb3ZlbmFuY2VdKHByb3ZlbmFuY2UuaHRtbCkgd2hpY2ggcHJvdmlkZXMgbm90IG9ubHkgdGhlIGFjdCBidXQgYWxzbyB0aGUgYWN0b3JzIGFuZCBkYXRlcyBhbmQgb3RoZXIgcmVsYXRlZCBkYXRhLiBUaGVzZSBhY3Qgc3RhdGVzIHdvdWxkIGJlIGFzc29jaWF0ZWQgd2l0aCBhbiBvYnNlcnZhdGlvbiBzdGF0dXMgb2YgYHByZWxpbWluYXJ5YCB1bnRpbCB0aGV5IGFyZSBhbGwgY29tcGxldGVkIGFuZCB0aGVuIGEgc3RhdHVzIG9mIGBmaW5hbGAgd291bGQgYmUgYXBwbGllZC5cclxuICAgKi9cclxuICBGaW5hbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkZpbmFsXCIsXHJcbiAgICBjb2RlOiBcImZpbmFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9vYnNlcnZhdGlvbi1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwcmVsaW1pbmFyeTogVGhpcyBpcyBhbiBpbml0aWFsIG9yIGludGVyaW0gb2JzZXJ2YXRpb246IGRhdGEgbWF5IGJlIGluY29tcGxldGUgb3IgdW52ZXJpZmllZC5cclxuICAgKi9cclxuICBQcmVsaW1pbmFyeTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlByZWxpbWluYXJ5XCIsXHJcbiAgICBjb2RlOiBcInByZWxpbWluYXJ5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9vYnNlcnZhdGlvbi1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWdpc3RlcmVkOiBUaGUgZXhpc3RlbmNlIG9mIHRoZSBvYnNlcnZhdGlvbiBpcyByZWdpc3RlcmVkLCBidXQgdGhlcmUgaXMgbm8gcmVzdWx0IHlldCBhdmFpbGFibGUuXHJcbiAgICovXHJcbiAgUmVnaXN0ZXJlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlZ2lzdGVyZWRcIixcclxuICAgIGNvZGU6IFwicmVnaXN0ZXJlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvb2JzZXJ2YXRpb24tc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgb2JzZXJ2YXRpb24uIE5vdGU6IFRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3IgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBsaXN0ZWQgc3RhdHVzZXMgaXMgcHJlc3VtZWQgdG8gYXBwbHksIGJ1dCB0aGUgYXV0aG9yaW5nL3NvdXJjZSBzeXN0ZW0gZG9lcyBub3Qga25vdyB3aGljaC5cclxuICAgKi9cclxuICBVbmtub3duOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVW5rbm93blwiLFxyXG4gICAgY29kZTogXCJ1bmtub3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9vYnNlcnZhdGlvbi1zdGF0dXNcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBwcm92aWRpbmcgdGhlIHN0YXR1cyBvZiBhbiBvYnNlcnZhdGlvbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIE9ic2VydmF0aW9uU3RhdHVzQ29kaW5nVHlwZSA9IHR5cGVvZiBPYnNlcnZhdGlvblN0YXR1c0NvZGluZ3M7XHJcbiJdfQ==