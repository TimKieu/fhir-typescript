// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/task-code|4.0.1
/**
 * Codes indicating the type of action that is expected to be performed
 */
export const TaskCodings = {
    /**
     * abort: Abort, cancel or withdraw the focal resource, as appropriate for the type of resource.
     */
    MarkTheFocalResourceAsNoLongerActive: {
        display: "Mark the focal resource as no longer active",
        code: "abort",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * approve: Take what actions are needed to transition the focus resource from 'draft' to 'active' or 'in-progress', as appropriate for the resource type.  This may involve additing additional content, approval, validation, etc.
     */
    ActivateApproveTheFocalResource: {
        display: "Activate/approve the focal resource",
        code: "approve",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * change: Update the focal resource of the owning system to reflect the content specified as the Task.focus
     */
    ChangeTheFocalResource: {
        display: "Change the focal resource",
        code: "change",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * fulfill: Act to perform the actions defined in the focus request.  This might result in a 'more assertive' request (order for a plan or proposal, filler order for a placer order), but is intend to eventually result in events.  The degree of fulfillment requested might be limited by Task.restriction.
     */
    FulfillTheFocalRequest: {
        display: "Fulfill the focal request",
        code: "fulfill",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * replace: Replace the focal resource with the specified input resource
     */
    ReplaceTheFocalResourceWithTheInputResource: {
        display: "Replace the focal resource with the input resource",
        code: "replace",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * resume: Transition the focal resource from 'suspended' to 'active' or 'in-progress' as appropriate for the resource type.
     */
    ReActivateTheFocalResource: {
        display: "Re-activate the focal resource",
        code: "resume",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
    /**
     * suspend: Transition the focal resource from 'active' or 'in-progress' to 'suspended'
     */
    SuspendTheFocalResource: {
        display: "Suspend the focal resource",
        code: "suspend",
        system: "http://hl7.org/fhir/CodeSystem/task-code",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Rhc2tDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDhEQUE4RDtBQXNDOUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQWtCO0lBQ3hDOztPQUVHO0lBQ0gsb0NBQW9DLEVBQUU7UUFDcEMsT0FBTyxFQUFFLDZDQUE2QztRQUN0RCxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILCtCQUErQixFQUFFO1FBQy9CLE9BQU8sRUFBRSxxQ0FBcUM7UUFDOUMsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILDJDQUEyQyxFQUFFO1FBQzNDLE9BQU8sRUFBRSxvREFBb0Q7UUFDN0QsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUU7UUFDdkIsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Rhc2stY29kZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgYWN0aW9uIHRoYXQgaXMgZXhwZWN0ZWQgdG8gYmUgcGVyZm9ybWVkXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUYXNrQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhYm9ydDogQWJvcnQsIGNhbmNlbCBvciB3aXRoZHJhdyB0aGUgZm9jYWwgcmVzb3VyY2UsIGFzIGFwcHJvcHJpYXRlIGZvciB0aGUgdHlwZSBvZiByZXNvdXJjZS5cclxuICAgKi9cclxuICBNYXJrVGhlRm9jYWxSZXNvdXJjZUFzTm9Mb25nZXJBY3RpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYXBwcm92ZTogVGFrZSB3aGF0IGFjdGlvbnMgYXJlIG5lZWRlZCB0byB0cmFuc2l0aW9uIHRoZSBmb2N1cyByZXNvdXJjZSBmcm9tICdkcmFmdCcgdG8gJ2FjdGl2ZScgb3IgJ2luLXByb2dyZXNzJywgYXMgYXBwcm9wcmlhdGUgZm9yIHRoZSByZXNvdXJjZSB0eXBlLiAgVGhpcyBtYXkgaW52b2x2ZSBhZGRpdGluZyBhZGRpdGlvbmFsIGNvbnRlbnQsIGFwcHJvdmFsLCB2YWxpZGF0aW9uLCBldGMuXHJcbiAgICovXHJcbiAgQWN0aXZhdGVBcHByb3ZlVGhlRm9jYWxSZXNvdXJjZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjaGFuZ2U6IFVwZGF0ZSB0aGUgZm9jYWwgcmVzb3VyY2Ugb2YgdGhlIG93bmluZyBzeXN0ZW0gdG8gcmVmbGVjdCB0aGUgY29udGVudCBzcGVjaWZpZWQgYXMgdGhlIFRhc2suZm9jdXNcclxuICAgKi9cclxuICBDaGFuZ2VUaGVGb2NhbFJlc291cmNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZ1bGZpbGw6IEFjdCB0byBwZXJmb3JtIHRoZSBhY3Rpb25zIGRlZmluZWQgaW4gdGhlIGZvY3VzIHJlcXVlc3QuICBUaGlzIG1pZ2h0IHJlc3VsdCBpbiBhICdtb3JlIGFzc2VydGl2ZScgcmVxdWVzdCAob3JkZXIgZm9yIGEgcGxhbiBvciBwcm9wb3NhbCwgZmlsbGVyIG9yZGVyIGZvciBhIHBsYWNlciBvcmRlciksIGJ1dCBpcyBpbnRlbmQgdG8gZXZlbnR1YWxseSByZXN1bHQgaW4gZXZlbnRzLiAgVGhlIGRlZ3JlZSBvZiBmdWxmaWxsbWVudCByZXF1ZXN0ZWQgbWlnaHQgYmUgbGltaXRlZCBieSBUYXNrLnJlc3RyaWN0aW9uLlxyXG4gICAqL1xyXG4gIEZ1bGZpbGxUaGVGb2NhbFJlcXVlc3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcmVwbGFjZTogUmVwbGFjZSB0aGUgZm9jYWwgcmVzb3VyY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGlucHV0IHJlc291cmNlXHJcbiAgICovXHJcbiAgUmVwbGFjZVRoZUZvY2FsUmVzb3VyY2VXaXRoVGhlSW5wdXRSZXNvdXJjZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiByZXN1bWU6IFRyYW5zaXRpb24gdGhlIGZvY2FsIHJlc291cmNlIGZyb20gJ3N1c3BlbmRlZCcgdG8gJ2FjdGl2ZScgb3IgJ2luLXByb2dyZXNzJyBhcyBhcHByb3ByaWF0ZSBmb3IgdGhlIHJlc291cmNlIHR5cGUuXHJcbiAgICovXHJcbiAgUmVBY3RpdmF0ZVRoZUZvY2FsUmVzb3VyY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3VzcGVuZDogVHJhbnNpdGlvbiB0aGUgZm9jYWwgcmVzb3VyY2UgZnJvbSAnYWN0aXZlJyBvciAnaW4tcHJvZ3Jlc3MnIHRvICdzdXNwZW5kZWQnXHJcbiAgICovXHJcbiAgU3VzcGVuZFRoZUZvY2FsUmVzb3VyY2U6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGFjdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHBlcmZvcm1lZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFRhc2tDb2RpbmdzOlRhc2tDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFib3J0OiBBYm9ydCwgY2FuY2VsIG9yIHdpdGhkcmF3IHRoZSBmb2NhbCByZXNvdXJjZSwgYXMgYXBwcm9wcmlhdGUgZm9yIHRoZSB0eXBlIG9mIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIE1hcmtUaGVGb2NhbFJlc291cmNlQXNOb0xvbmdlckFjdGl2ZToge1xyXG4gICAgZGlzcGxheTogXCJNYXJrIHRoZSBmb2NhbCByZXNvdXJjZSBhcyBubyBsb25nZXIgYWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImFib3J0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL3Rhc2stY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogYXBwcm92ZTogVGFrZSB3aGF0IGFjdGlvbnMgYXJlIG5lZWRlZCB0byB0cmFuc2l0aW9uIHRoZSBmb2N1cyByZXNvdXJjZSBmcm9tICdkcmFmdCcgdG8gJ2FjdGl2ZScgb3IgJ2luLXByb2dyZXNzJywgYXMgYXBwcm9wcmlhdGUgZm9yIHRoZSByZXNvdXJjZSB0eXBlLiAgVGhpcyBtYXkgaW52b2x2ZSBhZGRpdGluZyBhZGRpdGlvbmFsIGNvbnRlbnQsIGFwcHJvdmFsLCB2YWxpZGF0aW9uLCBldGMuXHJcbiAgICovXHJcbiAgQWN0aXZhdGVBcHByb3ZlVGhlRm9jYWxSZXNvdXJjZToge1xyXG4gICAgZGlzcGxheTogXCJBY3RpdmF0ZS9hcHByb3ZlIHRoZSBmb2NhbCByZXNvdXJjZVwiLFxyXG4gICAgY29kZTogXCJhcHByb3ZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL3Rhc2stY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY2hhbmdlOiBVcGRhdGUgdGhlIGZvY2FsIHJlc291cmNlIG9mIHRoZSBvd25pbmcgc3lzdGVtIHRvIHJlZmxlY3QgdGhlIGNvbnRlbnQgc3BlY2lmaWVkIGFzIHRoZSBUYXNrLmZvY3VzXHJcbiAgICovXHJcbiAgQ2hhbmdlVGhlRm9jYWxSZXNvdXJjZToge1xyXG4gICAgZGlzcGxheTogXCJDaGFuZ2UgdGhlIGZvY2FsIHJlc291cmNlXCIsXHJcbiAgICBjb2RlOiBcImNoYW5nZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvQ29kZVN5c3RlbS90YXNrLWNvZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGZ1bGZpbGw6IEFjdCB0byBwZXJmb3JtIHRoZSBhY3Rpb25zIGRlZmluZWQgaW4gdGhlIGZvY3VzIHJlcXVlc3QuICBUaGlzIG1pZ2h0IHJlc3VsdCBpbiBhICdtb3JlIGFzc2VydGl2ZScgcmVxdWVzdCAob3JkZXIgZm9yIGEgcGxhbiBvciBwcm9wb3NhbCwgZmlsbGVyIG9yZGVyIGZvciBhIHBsYWNlciBvcmRlciksIGJ1dCBpcyBpbnRlbmQgdG8gZXZlbnR1YWxseSByZXN1bHQgaW4gZXZlbnRzLiAgVGhlIGRlZ3JlZSBvZiBmdWxmaWxsbWVudCByZXF1ZXN0ZWQgbWlnaHQgYmUgbGltaXRlZCBieSBUYXNrLnJlc3RyaWN0aW9uLlxyXG4gICAqL1xyXG4gIEZ1bGZpbGxUaGVGb2NhbFJlcXVlc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiRnVsZmlsbCB0aGUgZm9jYWwgcmVxdWVzdFwiLFxyXG4gICAgY29kZTogXCJmdWxmaWxsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL3Rhc2stY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVwbGFjZTogUmVwbGFjZSB0aGUgZm9jYWwgcmVzb3VyY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGlucHV0IHJlc291cmNlXHJcbiAgICovXHJcbiAgUmVwbGFjZVRoZUZvY2FsUmVzb3VyY2VXaXRoVGhlSW5wdXRSZXNvdXJjZToge1xyXG4gICAgZGlzcGxheTogXCJSZXBsYWNlIHRoZSBmb2NhbCByZXNvdXJjZSB3aXRoIHRoZSBpbnB1dCByZXNvdXJjZVwiLFxyXG4gICAgY29kZTogXCJyZXBsYWNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL3Rhc2stY29kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcmVzdW1lOiBUcmFuc2l0aW9uIHRoZSBmb2NhbCByZXNvdXJjZSBmcm9tICdzdXNwZW5kZWQnIHRvICdhY3RpdmUnIG9yICdpbi1wcm9ncmVzcycgYXMgYXBwcm9wcmlhdGUgZm9yIHRoZSByZXNvdXJjZSB0eXBlLlxyXG4gICAqL1xyXG4gIFJlQWN0aXZhdGVUaGVGb2NhbFJlc291cmNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJlLWFjdGl2YXRlIHRoZSBmb2NhbCByZXNvdXJjZVwiLFxyXG4gICAgY29kZTogXCJyZXN1bWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL0NvZGVTeXN0ZW0vdGFzay1jb2RlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdXNwZW5kOiBUcmFuc2l0aW9uIHRoZSBmb2NhbCByZXNvdXJjZSBmcm9tICdhY3RpdmUnIG9yICdpbi1wcm9ncmVzcycgdG8gJ3N1c3BlbmRlZCdcclxuICAgKi9cclxuICBTdXNwZW5kVGhlRm9jYWxSZXNvdXJjZToge1xyXG4gICAgZGlzcGxheTogXCJTdXNwZW5kIHRoZSBmb2NhbCByZXNvdXJjZVwiLFxyXG4gICAgY29kZTogXCJzdXNwZW5kXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9Db2RlU3lzdGVtL3Rhc2stY29kZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==