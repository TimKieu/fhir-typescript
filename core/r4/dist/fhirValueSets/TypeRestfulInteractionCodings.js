// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/type-restful-interaction|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Operations supported by REST at the type or instance level.
 */
export const TypeRestfulInteractionCodings = {
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: new Coding({
        display: "create",
        code: "create",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * delete: Delete a resource.
     */
    Delete: new Coding({
        display: "delete",
        code: "delete",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * history-instance: Retrieve the change history for a particular resource.
     */
    HistoryInstance: new Coding({
        display: "history-instance",
        code: "history-instance",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * history-type: Retrieve the change history for all resources of a particular type.
     */
    HistoryType: new Coding({
        display: "history-type",
        code: "history-type",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * patch: Update an existing resource by posting a set of changes to it.
     */
    Patch: new Coding({
        display: "patch",
        code: "patch",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * read: Read the current state of the resource.
     */
    Read: new Coding({
        display: "read",
        code: "read",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * search-type: Search all resources of the specified type based on some filter criteria.
     */
    SearchType: new Coding({
        display: "search-type",
        code: "search-type",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * update: Update an existing resource by its id (or create it if it is new).
     */
    Update: new Coding({
        display: "update",
        code: "update",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * vread: Read the state of a specific version of the resource.
     */
    Vread: new Coding({
        display: "vread",
        code: "vread",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1R5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQUU3RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQzs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDMUIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdHlwZS1yZXN0ZnVsLWludGVyYWN0aW9ufDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBPcGVyYXRpb25zIHN1cHBvcnRlZCBieSBSRVNUIGF0IHRoZSB0eXBlIG9yIGluc3RhbmNlIGxldmVsLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZTogQ3JlYXRlIGEgbmV3IHJlc291cmNlIHdpdGggYSBzZXJ2ZXIgYXNzaWduZWQgaWQuXHJcbiAgICovXHJcbiAgQ3JlYXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiY3JlYXRlXCIsXHJcbiAgICBjb2RlOiBcImNyZWF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGRlbGV0ZTogRGVsZXRlIGEgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgRGVsZXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiZGVsZXRlXCIsXHJcbiAgICBjb2RlOiBcImRlbGV0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGhpc3RvcnktaW5zdGFuY2U6IFJldHJpZXZlIHRoZSBjaGFuZ2UgaGlzdG9yeSBmb3IgYSBwYXJ0aWN1bGFyIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIEhpc3RvcnlJbnN0YW5jZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImhpc3RvcnktaW5zdGFuY2VcIixcclxuICAgIGNvZGU6IFwiaGlzdG9yeS1pbnN0YW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGhpc3RvcnktdHlwZTogUmV0cmlldmUgdGhlIGNoYW5nZSBoaXN0b3J5IGZvciBhbGwgcmVzb3VyY2VzIG9mIGEgcGFydGljdWxhciB0eXBlLlxyXG4gICAqL1xyXG4gIEhpc3RvcnlUeXBlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiaGlzdG9yeS10eXBlXCIsXHJcbiAgICBjb2RlOiBcImhpc3RvcnktdHlwZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHBhdGNoOiBVcGRhdGUgYW4gZXhpc3RpbmcgcmVzb3VyY2UgYnkgcG9zdGluZyBhIHNldCBvZiBjaGFuZ2VzIHRvIGl0LlxyXG4gICAqL1xyXG4gIFBhdGNoOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwicGF0Y2hcIixcclxuICAgIGNvZGU6IFwicGF0Y2hcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWFkOiBSZWFkIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBSZWFkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwicmVhZFwiLFxyXG4gICAgY29kZTogXCJyZWFkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc2VhcmNoLXR5cGU6IFNlYXJjaCBhbGwgcmVzb3VyY2VzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBiYXNlZCBvbiBzb21lIGZpbHRlciBjcml0ZXJpYS5cclxuICAgKi9cclxuICBTZWFyY2hUeXBlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwic2VhcmNoLXR5cGVcIixcclxuICAgIGNvZGU6IFwic2VhcmNoLXR5cGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB1cGRhdGU6IFVwZGF0ZSBhbiBleGlzdGluZyByZXNvdXJjZSBieSBpdHMgaWQgKG9yIGNyZWF0ZSBpdCBpZiBpdCBpcyBuZXcpLlxyXG4gICAqL1xyXG4gIFVwZGF0ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInVwZGF0ZVwiLFxyXG4gICAgY29kZTogXCJ1cGRhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB2cmVhZDogUmVhZCB0aGUgc3RhdGUgb2YgYSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBWcmVhZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInZyZWFkXCIsXHJcbiAgICBjb2RlOiBcInZyZWFkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogT3BlcmF0aW9ucyBzdXBwb3J0ZWQgYnkgUkVTVCBhdCB0aGUgdHlwZSBvciBpbnN0YW5jZSBsZXZlbC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RpbmdUeXBlID0gdHlwZW9mIFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RpbmdzO1xyXG4iXX0=