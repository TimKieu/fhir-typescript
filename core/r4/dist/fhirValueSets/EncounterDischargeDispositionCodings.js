// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-discharge-disposition|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set defines a set of codes that can be used to where the patient left the hospital.
 */
export const EncounterDischargeDispositionCodings = {
    /**
     * aadvice: The patient self discharged against medical advice.
     */
    LeftAgainstAdvice: new Coding({
        display: "Left against advice",
        code: "aadvice",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * alt-home: The patient was discharged and has indicated that they are going to return home afterwards, but not the patient's home - e.g. a family member's home.
     */
    AlternativeHome: new Coding({
        display: "Alternative home",
        code: "alt-home",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * exp: The patient has deceased during this encounter.
     */
    Expired: new Coding({
        display: "Expired",
        code: "exp",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * home: The patient was dicharged and has indicated that they are going to return home afterwards.
     */
    Home: new Coding({
        display: "Home",
        code: "home",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * hosp: The patient has been discharged into palliative care.
     */
    Hospice: new Coding({
        display: "Hospice",
        code: "hosp",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * long: The patient has been discharged into long-term care where is likely to be monitored through an ongoing episode-of-care.
     */
    LongTermCare: new Coding({
        display: "Long-term care",
        code: "long",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * oth: The discharge disposition has not otherwise defined.
     */
    Other: new Coding({
        display: "Other",
        code: "oth",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * other-hcf: The patient was transferred to another healthcare facility.
     */
    OtherHealthcareFacility: new Coding({
        display: "Other healthcare facility",
        code: "other-hcf",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * psy: The patient has been transferred to a psychiatric facility.
     */
    PsychiatricHospital: new Coding({
        display: "Psychiatric hospital",
        code: "psy",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * rehab: The patient was discharged and is to receive post acute care rehabilitation services.
     */
    Rehabilitation: new Coding({
        display: "Rehabilitation",
        code: "rehab",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
    /**
     * snf: The patient has been discharged to a skilled nursing facility for the patient to receive additional care.
     */
    SkilledNursingFacility: new Coding({
        display: "Skilled nursing facility",
        code: "snf",
        system: "http://terminology.hl7.org/CodeSystem/discharge-disposition",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJEaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0ZBQW9GO0FBRXBGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUFHO0lBQ2xEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDNUIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSw2REFBNkQ7S0FDdEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDZEQUE2RDtLQUN0RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsNkRBQTZEO0tBQ3RFLENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsNkRBQTZEO0tBQ3RFLENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSw2REFBNkQ7S0FDdEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsNkRBQTZEO0tBQ3RFLENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSw2REFBNkQ7S0FDdEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEMsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsNkRBQTZEO0tBQ3RFLENBQUM7SUFDRjs7T0FFRztJQUNILG1CQUFtQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzlCLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsNkRBQTZEO0tBQ3RFLENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDZEQUE2RDtLQUN0RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxzQkFBc0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQyxPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLDZEQUE2RDtLQUN0RSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbmNvdW50ZXItZGlzY2hhcmdlLWRpc3Bvc2l0aW9ufDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gd2hlcmUgdGhlIHBhdGllbnQgbGVmdCB0aGUgaG9zcGl0YWwuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFhZHZpY2U6IFRoZSBwYXRpZW50IHNlbGYgZGlzY2hhcmdlZCBhZ2FpbnN0IG1lZGljYWwgYWR2aWNlLlxyXG4gICAqL1xyXG4gIExlZnRBZ2FpbnN0QWR2aWNlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTGVmdCBhZ2FpbnN0IGFkdmljZVwiLFxyXG4gICAgY29kZTogXCJhYWR2aWNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXNjaGFyZ2UtZGlzcG9zaXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBhbHQtaG9tZTogVGhlIHBhdGllbnQgd2FzIGRpc2NoYXJnZWQgYW5kIGhhcyBpbmRpY2F0ZWQgdGhhdCB0aGV5IGFyZSBnb2luZyB0byByZXR1cm4gaG9tZSBhZnRlcndhcmRzLCBidXQgbm90IHRoZSBwYXRpZW50J3MgaG9tZSAtIGUuZy4gYSBmYW1pbHkgbWVtYmVyJ3MgaG9tZS5cclxuICAgKi9cclxuICBBbHRlcm5hdGl2ZUhvbWU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBbHRlcm5hdGl2ZSBob21lXCIsXHJcbiAgICBjb2RlOiBcImFsdC1ob21lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXNjaGFyZ2UtZGlzcG9zaXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBleHA6IFRoZSBwYXRpZW50IGhhcyBkZWNlYXNlZCBkdXJpbmcgdGhpcyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgRXhwaXJlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkV4cGlyZWRcIixcclxuICAgIGNvZGU6IFwiZXhwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXNjaGFyZ2UtZGlzcG9zaXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBob21lOiBUaGUgcGF0aWVudCB3YXMgZGljaGFyZ2VkIGFuZCBoYXMgaW5kaWNhdGVkIHRoYXQgdGhleSBhcmUgZ29pbmcgdG8gcmV0dXJuIGhvbWUgYWZ0ZXJ3YXJkcy5cclxuICAgKi9cclxuICBIb21lOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSG9tZVwiLFxyXG4gICAgY29kZTogXCJob21lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXNjaGFyZ2UtZGlzcG9zaXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBob3NwOiBUaGUgcGF0aWVudCBoYXMgYmVlbiBkaXNjaGFyZ2VkIGludG8gcGFsbGlhdGl2ZSBjYXJlLlxyXG4gICAqL1xyXG4gIEhvc3BpY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJIb3NwaWNlXCIsXHJcbiAgICBjb2RlOiBcImhvc3BcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2Rpc2NoYXJnZS1kaXNwb3NpdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGxvbmc6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGRpc2NoYXJnZWQgaW50byBsb25nLXRlcm0gY2FyZSB3aGVyZSBpcyBsaWtlbHkgdG8gYmUgbW9uaXRvcmVkIHRocm91Z2ggYW4gb25nb2luZyBlcGlzb2RlLW9mLWNhcmUuXHJcbiAgICovXHJcbiAgTG9uZ1Rlcm1DYXJlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTG9uZy10ZXJtIGNhcmVcIixcclxuICAgIGNvZGU6IFwibG9uZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGlzY2hhcmdlLWRpc3Bvc2l0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb3RoOiBUaGUgZGlzY2hhcmdlIGRpc3Bvc2l0aW9uIGhhcyBub3Qgb3RoZXJ3aXNlIGRlZmluZWQuXHJcbiAgICovXHJcbiAgT3RoZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPdGhlclwiLFxyXG4gICAgY29kZTogXCJvdGhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2Rpc2NoYXJnZS1kaXNwb3NpdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG90aGVyLWhjZjogVGhlIHBhdGllbnQgd2FzIHRyYW5zZmVycmVkIHRvIGFub3RoZXIgaGVhbHRoY2FyZSBmYWNpbGl0eS5cclxuICAgKi9cclxuICBPdGhlckhlYWx0aGNhcmVGYWNpbGl0eTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk90aGVyIGhlYWx0aGNhcmUgZmFjaWxpdHlcIixcclxuICAgIGNvZGU6IFwib3RoZXItaGNmXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXNjaGFyZ2UtZGlzcG9zaXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwc3k6IFRoZSBwYXRpZW50IGhhcyBiZWVuIHRyYW5zZmVycmVkIHRvIGEgcHN5Y2hpYXRyaWMgZmFjaWxpdHkuXHJcbiAgICovXHJcbiAgUHN5Y2hpYXRyaWNIb3NwaXRhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBzeWNoaWF0cmljIGhvc3BpdGFsXCIsXHJcbiAgICBjb2RlOiBcInBzeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGlzY2hhcmdlLWRpc3Bvc2l0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcmVoYWI6IFRoZSBwYXRpZW50IHdhcyBkaXNjaGFyZ2VkIGFuZCBpcyB0byByZWNlaXZlIHBvc3QgYWN1dGUgY2FyZSByZWhhYmlsaXRhdGlvbiBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBSZWhhYmlsaXRhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlaGFiaWxpdGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcInJlaGFiXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXNjaGFyZ2UtZGlzcG9zaXRpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzbmY6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGRpc2NoYXJnZWQgdG8gYSBza2lsbGVkIG51cnNpbmcgZmFjaWxpdHkgZm9yIHRoZSBwYXRpZW50IHRvIHJlY2VpdmUgYWRkaXRpb25hbCBjYXJlLlxyXG4gICAqL1xyXG4gIFNraWxsZWROdXJzaW5nRmFjaWxpdHk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTa2lsbGVkIG51cnNpbmcgZmFjaWxpdHlcIixcclxuICAgIGNvZGU6IFwic25mXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaXNjaGFyZ2UtZGlzcG9zaXRpb25cIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gd2hlcmUgdGhlIHBhdGllbnQgbGVmdCB0aGUgaG9zcGl0YWwuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFbmNvdW50ZXJEaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGluZ1R5cGUgPSB0eXBlb2YgRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2RpbmdzO1xyXG4iXX0=