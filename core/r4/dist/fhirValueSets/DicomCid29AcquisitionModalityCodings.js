// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://dicom.nema.org/medical/dicom/current/output/chtml/part16/sect_CID_29.html|20121129
import { Coding } from '../fhir/Coding.js';
/**
 * Transitive closure of CID 29 AcquisitionModality
 */
export const DicomCid29AcquisitionModalityCodings = {
    /**
     * AR: Autorefraction device
     */
    Autorefraction: new Coding({
        display: "Autorefraction",
        code: "AR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * BDUS: Ultrasound Bone Densitometry (modality)
     */
    UltrasoundBoneDensitometry: new Coding({
        display: "Ultrasound Bone Densitometry",
        code: "BDUS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * BMD: Bone Mineral Densitometry by X-Ray (modality), including dual-energy X-Ray absorptiometry (DXA) and morphometric X-Ray absorptiometry (MXA)
     */
    BoneMineralDensitometry: new Coding({
        display: "Bone Mineral Densitometry",
        code: "BMD",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * CR: Computed Radiography device
     */
    ComputedRadiography: new Coding({
        display: "Computed Radiography",
        code: "CR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * CT: Computed Tomography device
     */
    ComputedTomography: new Coding({
        display: "Computed Tomography",
        code: "CT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * DX: Digital Radiography device
     */
    DigitalRadiography: new Coding({
        display: "Digital Radiography",
        code: "DX",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * ECG: Electrocardiography device
     */
    Electrocardiography: new Coding({
        display: "Electrocardiography",
        code: "ECG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * EPS: Cardiac Electrophysiology device
     */
    CardiacElectrophysiology: new Coding({
        display: "Cardiac Electrophysiology",
        code: "EPS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * ES: Endoscopy device
     */
    Endoscopy: new Coding({
        display: "Endoscopy",
        code: "ES",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * GM: General Microscopy device
     */
    GeneralMicroscopy: new Coding({
        display: "General Microscopy",
        code: "GM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * HD: Hemodynamic Waveform acquisition device
     */
    HemodynamicWaveform: new Coding({
        display: "Hemodynamic Waveform",
        code: "HD",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * IO: Intra-oral Radiography device
     */
    IntraOralRadiography: new Coding({
        display: "Intra-oral Radiography",
        code: "IO",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * IVOCT: An acquisition device, process or method that performs intravascular optical coherence tomography
     */
    IntravascularOpticalCoherenceTomography: new Coding({
        display: "Intravascular Optical Coherence Tomography",
        code: "IVOCT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * IVUS: Intravascular Ultrasound device
     */
    IntravascularUltrasound: new Coding({
        display: "Intravascular Ultrasound",
        code: "IVUS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * KER: Keratometry device
     */
    Keratometry: new Coding({
        display: "Keratometry",
        code: "KER",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * LEN: Lensometry device
     */
    Lensometry: new Coding({
        display: "Lensometry",
        code: "LEN",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * MG: Mammography device
     */
    Mammography: new Coding({
        display: "Mammography",
        code: "MG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * MR: Magnetic Resonance device
     */
    MagneticResonance: new Coding({
        display: "Magnetic Resonance",
        code: "MR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * NM: Nuclear Medicine device
     */
    NuclearMedicine: new Coding({
        display: "Nuclear Medicine",
        code: "NM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OAM: Measurements of the axial length of the eye, which are done by various devices
     */
    OphthalmicAxialMeasurements: new Coding({
        display: "Ophthalmic Axial Measurements",
        code: "OAM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OCT: Modality device that uses an interferometric, non-invasive optical tomographic technique to image 2D slices and 3D volumes of tissue using visible and near visible frequencies
     */
    OpticalCoherenceTomography: new Coding({
        display: "Optical Coherence Tomography",
        code: "OCT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OP: Ophthalmic photography modality
     */
    OphthalmicPhotography: new Coding({
        display: "Ophthalmic photography",
        code: "OP",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OPM: Modality device that measures corneal topography, corneal or retinal thickness, and other similar parameters that are typically displayed as maps
     */
    OphthalmicMapping: new Coding({
        display: "Ophthalmic Mapping",
        code: "OPM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OPR: Modality device that measures the refractive characteristics of the eye
     */
    OphthalmicRefraction: new Coding({
        display: "Ophthalmic Refraction",
        code: "OPR",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OPT: Tomography of the eye acquired by a modality that is based on light and optical principles. Tomography based on other principles, such as ultrasound, is excluded
     */
    OphthalmicTomography: new Coding({
        display: "Ophthalmic Tomography",
        code: "OPT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OPV: Modality device that measures visual fields and perform visual perimetry
     */
    OphthalmicVisualField: new Coding({
        display: "Ophthalmic Visual Field",
        code: "OPV",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * OSS: An acquisition device, process or method that performs optical surface scanning
     */
    OpticalSurvaceScanner: new Coding({
        display: "Optical Survace Scanner",
        code: "OSS",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * PT: Positron emission tomography (PET) device
     */
    PositronEmissionTomography: new Coding({
        display: "Positron emission tomography",
        code: "PT",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * PX: Panoramic X-Ray device
     */
    PanoramicXRay: new Coding({
        display: "Panoramic X-Ray",
        code: "PX",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * RF: Radiofluoroscopy device
     */
    Radiofluoroscopy: new Coding({
        display: "Radiofluoroscopy",
        code: "RF",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * RG: Radiographic imaging (conventional film/screen)
     */
    RadiographicImaging: new Coding({
        display: "Radiographic imaging",
        code: "RG",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * SM: Slide Microscopy
     */
    SlideMicroscopy: new Coding({
        display: "Slide Microscopy",
        code: "SM",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * SRF: Subjective Refraction device
     */
    SubjectiveRefraction: new Coding({
        display: "Subjective Refraction",
        code: "SRF",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * US: Ultrasound device
     */
    Ultrasound: new Coding({
        display: "Ultrasound",
        code: "US",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * VA: Visual Acuity device
     */
    VisualAcuity: new Coding({
        display: "Visual Acuity",
        code: "VA",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * XA: X-Ray Angiography device
     */
    XRayAngiography: new Coding({
        display: "X-Ray Angiography",
        code: "XA",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * XC: External-camera Photography device
     */
    ExternalCameraPhotography: new Coding({
        display: "External-camera Photography",
        code: "XC",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
};
//# sourceMappingURL=data:application/json;base64,