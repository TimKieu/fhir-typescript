{"version":3,"file":"AssertResponseCodeTypesCodings.js","sources":["../../src/fhirValueSets/AssertResponseCodeTypesCodings.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ValueSet: http://hl7.org/fhir/ValueSet/assert-response-code-types|4.0.1\r\n\r\nimport { Coding } from '../fhir/Coding.js'\r\n\r\n/**\r\n * The type of response code to use for assertion.\r\n */\r\nexport const AssertResponseCodeTypesCodings = {\r\n  /**\r\n   * bad: Response code is 400.\r\n   */\r\n  Bad: new Coding({\r\n    display: \"bad\",\r\n    code: \"bad\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * conflict: Response code is 409.\r\n   */\r\n  Conflict: new Coding({\r\n    display: \"conflict\",\r\n    code: \"conflict\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * created: Response code is 201.\r\n   */\r\n  Created: new Coding({\r\n    display: \"created\",\r\n    code: \"created\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * forbidden: Response code is 403.\r\n   */\r\n  Forbidden: new Coding({\r\n    display: \"forbidden\",\r\n    code: \"forbidden\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * gone: Response code is 410.\r\n   */\r\n  Gone: new Coding({\r\n    display: \"gone\",\r\n    code: \"gone\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * methodNotAllowed: Response code is 405.\r\n   */\r\n  MethodNotAllowed: new Coding({\r\n    display: \"methodNotAllowed\",\r\n    code: \"methodNotAllowed\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * noContent: Response code is 204.\r\n   */\r\n  NoContent: new Coding({\r\n    display: \"noContent\",\r\n    code: \"noContent\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * notFound: Response code is 404.\r\n   */\r\n  NotFound: new Coding({\r\n    display: \"notFound\",\r\n    code: \"notFound\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * notModified: Response code is 304.\r\n   */\r\n  NotModified: new Coding({\r\n    display: \"notModified\",\r\n    code: \"notModified\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * okay: Response code is 200.\r\n   */\r\n  Okay: new Coding({\r\n    display: \"okay\",\r\n    code: \"okay\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * preconditionFailed: Response code is 412.\r\n   */\r\n  PreconditionFailed: new Coding({\r\n    display: \"preconditionFailed\",\r\n    code: \"preconditionFailed\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n  /**\r\n   * unprocessable: Response code is 422.\r\n   */\r\n  Unprocessable: new Coding({\r\n    display: \"unprocessable\",\r\n    code: \"unprocessable\",\r\n    system: \"http://hl7.org/fhir/assert-response-code-types\",\r\n  }),\r\n} as const;\r\n\r\n/**\r\n * The type of response code to use for assertion.\r\n */\r\nexport type AssertResponseCodeTypesCodingType = typeof AssertResponseCodeTypesCodings;\r\n"],"names":[],"mappings":";;;;AAAA;AAOA;;AAEG;AACU,IAAA,8BAA8B,GAAG;AAC5C;;AAEG;IACH,GAAG,EAAE,IAAI,MAAM,CAAC;AACd,QAAA,OAAO,EAAE,KAAK;AACd,QAAA,IAAI,EAAE,KAAK;AACX,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,QAAQ,EAAE,IAAI,MAAM,CAAC;AACnB,QAAA,OAAO,EAAE,UAAU;AACnB,QAAA,IAAI,EAAE,UAAU;AAChB,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,OAAO,EAAE,IAAI,MAAM,CAAC;AAClB,QAAA,OAAO,EAAE,SAAS;AAClB,QAAA,IAAI,EAAE,SAAS;AACf,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,SAAS,EAAE,IAAI,MAAM,CAAC;AACpB,QAAA,OAAO,EAAE,WAAW;AACpB,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,IAAI,EAAE,IAAI,MAAM,CAAC;AACf,QAAA,OAAO,EAAE,MAAM;AACf,QAAA,IAAI,EAAE,MAAM;AACZ,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,gBAAgB,EAAE,IAAI,MAAM,CAAC;AAC3B,QAAA,OAAO,EAAE,kBAAkB;AAC3B,QAAA,IAAI,EAAE,kBAAkB;AACxB,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,SAAS,EAAE,IAAI,MAAM,CAAC;AACpB,QAAA,OAAO,EAAE,WAAW;AACpB,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,QAAQ,EAAE,IAAI,MAAM,CAAC;AACnB,QAAA,OAAO,EAAE,UAAU;AACnB,QAAA,IAAI,EAAE,UAAU;AAChB,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,WAAW,EAAE,IAAI,MAAM,CAAC;AACtB,QAAA,OAAO,EAAE,aAAa;AACtB,QAAA,IAAI,EAAE,aAAa;AACnB,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,IAAI,EAAE,IAAI,MAAM,CAAC;AACf,QAAA,OAAO,EAAE,MAAM;AACf,QAAA,IAAI,EAAE,MAAM;AACZ,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,kBAAkB,EAAE,IAAI,MAAM,CAAC;AAC7B,QAAA,OAAO,EAAE,oBAAoB;AAC7B,QAAA,IAAI,EAAE,oBAAoB;AAC1B,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;AACF;;AAEG;IACH,aAAa,EAAE,IAAI,MAAM,CAAC;AACxB,QAAA,OAAO,EAAE,eAAe;AACxB,QAAA,IAAI,EAAE,eAAe;AACrB,QAAA,MAAM,EAAE,gDAAgD;KACzD,CAAC;;;;;"}