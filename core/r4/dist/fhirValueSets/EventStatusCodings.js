// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/event-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes identifying the lifecycle stage of an event.
 */
export const EventStatusCodings = {
    /**
     * completed: The event has now concluded.
     */
    Completed: new Coding({
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/event-status",
    }),
    /**
     * entered-in-error: This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "stopped" rather than "entered-in-error".).
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/event-status",
    }),
    /**
     * in-progress: The event is currently occurring.
     */
    InProgress: new Coding({
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/event-status",
    }),
    /**
     * not-done: The event was terminated prior to any activity beyond preparation.  I.e. The 'main' activity has not yet begun.  The boundary between preparatory and the 'main' activity is context-specific.
     */
    NotDone: new Coding({
        display: "Not Done",
        code: "not-done",
        system: "http://hl7.org/fhir/event-status",
    }),
    /**
     * on-hold: The event has been temporarily stopped but is expected to resume in the future.
     */
    OnHold: new Coding({
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/event-status",
    }),
    /**
     * preparation: The core event has not started yet, but some staging activities have begun (e.g. surgical suite preparation).  Preparation stages may be tracked for billing purposes.
     */
    Preparation: new Coding({
        display: "Preparation",
        code: "preparation",
        system: "http://hl7.org/fhir/event-status",
    }),
    /**
     * stopped: The event was terminated prior to the full completion of the intended activity but after at least some of the 'main' activity (beyond preparation) has occurred.
     */
    Stopped: new Coding({
        display: "Stopped",
        code: "stopped",
        system: "http://hl7.org/fhir/event-status",
    }),
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this event.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which.
     */
    Unknown: new Coding({
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/event-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9FdmVudFN0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBRWpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxrQ0FBa0M7S0FDM0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtDQUFrQztLQUMzQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2V2ZW50LXN0YXR1c3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZXMgaWRlbnRpZnlpbmcgdGhlIGxpZmVjeWNsZSBzdGFnZSBvZiBhbiBldmVudC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBFdmVudFN0YXR1c0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY29tcGxldGVkOiBUaGUgZXZlbnQgaGFzIG5vdyBjb25jbHVkZWQuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29tcGxldGVkXCIsXHJcbiAgICBjb2RlOiBcImNvbXBsZXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZXZlbnQtc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBlbGVjdHJvbmljIHJlY29yZCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkLCB0aG91Z2ggaXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAgKElmIHJlYWwtd29ybGQgYWN0aXZpdHkgaGFzIG9jY3VycmVkLCB0aGUgc3RhdHVzIHNob3VsZCBiZSBcInN0b3BwZWRcIiByYXRoZXIgdGhhbiBcImVudGVyZWQtaW4tZXJyb3JcIi4pLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBpbiBFcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9ldmVudC1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIGV2ZW50IGlzIGN1cnJlbnRseSBvY2N1cnJpbmcuXHJcbiAgICovXHJcbiAgSW5Qcm9ncmVzczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluIFByb2dyZXNzXCIsXHJcbiAgICBjb2RlOiBcImluLXByb2dyZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9ldmVudC1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBub3QtZG9uZTogVGhlIGV2ZW50IHdhcyB0ZXJtaW5hdGVkIHByaW9yIHRvIGFueSBhY3Rpdml0eSBiZXlvbmQgcHJlcGFyYXRpb24uICBJLmUuIFRoZSAnbWFpbicgYWN0aXZpdHkgaGFzIG5vdCB5ZXQgYmVndW4uICBUaGUgYm91bmRhcnkgYmV0d2VlbiBwcmVwYXJhdG9yeSBhbmQgdGhlICdtYWluJyBhY3Rpdml0eSBpcyBjb250ZXh0LXNwZWNpZmljLlxyXG4gICAqL1xyXG4gIE5vdERvbmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOb3QgRG9uZVwiLFxyXG4gICAgY29kZTogXCJub3QtZG9uZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZXZlbnQtc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogVGhlIGV2ZW50IGhhcyBiZWVuIHRlbXBvcmFyaWx5IHN0b3BwZWQgYnV0IGlzIGV4cGVjdGVkIHRvIHJlc3VtZSBpbiB0aGUgZnV0dXJlLlxyXG4gICAqL1xyXG4gIE9uSG9sZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9uIEhvbGRcIixcclxuICAgIGNvZGU6IFwib24taG9sZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZXZlbnQtc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHJlcGFyYXRpb246IFRoZSBjb3JlIGV2ZW50IGhhcyBub3Qgc3RhcnRlZCB5ZXQsIGJ1dCBzb21lIHN0YWdpbmcgYWN0aXZpdGllcyBoYXZlIGJlZ3VuIChlLmcuIHN1cmdpY2FsIHN1aXRlIHByZXBhcmF0aW9uKS4gIFByZXBhcmF0aW9uIHN0YWdlcyBtYXkgYmUgdHJhY2tlZCBmb3IgYmlsbGluZyBwdXJwb3Nlcy5cclxuICAgKi9cclxuICBQcmVwYXJhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlByZXBhcmF0aW9uXCIsXHJcbiAgICBjb2RlOiBcInByZXBhcmF0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9ldmVudC1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBUaGUgZXZlbnQgd2FzIHRlcm1pbmF0ZWQgcHJpb3IgdG8gdGhlIGZ1bGwgY29tcGxldGlvbiBvZiB0aGUgaW50ZW5kZWQgYWN0aXZpdHkgYnV0IGFmdGVyIGF0IGxlYXN0IHNvbWUgb2YgdGhlICdtYWluJyBhY3Rpdml0eSAoYmV5b25kIHByZXBhcmF0aW9uKSBoYXMgb2NjdXJyZWQuXHJcbiAgICovXHJcbiAgU3RvcHBlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN0b3BwZWRcIixcclxuICAgIGNvZGU6IFwic3RvcHBlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZXZlbnQtc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIGF1dGhvcmluZy9zb3VyY2Ugc3lzdGVtIGRvZXMgbm90IGtub3cgd2hpY2ggb2YgdGhlIHN0YXR1cyB2YWx1ZXMgY3VycmVudGx5IGFwcGxpZXMgZm9yIHRoaXMgZXZlbnQuICBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCAgYnV0IHRoZSBhdXRob3Jpbmcvc291cmNlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoLlxyXG4gICAqL1xyXG4gIFVua25vd246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJVbmtub3duXCIsXHJcbiAgICBjb2RlOiBcInVua25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2V2ZW50LXN0YXR1c1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGlkZW50aWZ5aW5nIHRoZSBsaWZlY3ljbGUgc3RhZ2Ugb2YgYW4gZXZlbnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFdmVudFN0YXR1c0NvZGluZ1R5cGUgPSB0eXBlb2YgRXZlbnRTdGF0dXNDb2RpbmdzO1xyXG4iXX0=