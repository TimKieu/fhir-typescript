// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/bundle-type|4.0.1
/**
 * Indicates the purpose of a bundle - how it is intended to be used.
 */
export const BundleTypeCodes = {
    /**
     * batch: The bundle is a set of actions - intended to be processed by a server as a group of independent actions.
     */
    Batch: "batch",
    /**
     * batch-response: The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
     */
    BatchResponse: "batch-response",
    /**
     * collection: The bundle is a set of resources collected into a single package for ease of distribution that imposes no processing obligations or behavioral rules beyond persistence.
     */
    Collection: "collection",
    /**
     * document: The bundle is a document. The first resource is a Composition.
     */
    Document: "document",
    /**
     * history: The bundle is a list of resources from a history interaction on a server.
     */
    HistoryList: "history",
    /**
     * message: The bundle is a message. The first resource is a MessageHeader.
     */
    Message: "message",
    /**
     * searchset: The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
     */
    SearchResults: "searchset",
    /**
     * transaction: The bundle is a transaction - intended to be processed by a server as an atomic commit.
     */
    Transaction: "transaction",
    /**
     * transaction-response: The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free.
     */
    TransactionResponse: "transaction-response",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVuZGxlVHlwZUNvZGVzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9CdW5kbGVUeXBlQ29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsZ0VBQWdFO0FBRWhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHO0lBQzdCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0I7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtJQUN4Qjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLFNBQVM7SUFDdEI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILGFBQWEsRUFBRSxXQUFXO0lBQzFCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7SUFDMUI7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxzQkFBc0I7Q0FDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9idW5kbGUtdHlwZXw0LjAuMVxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyB0aGUgcHVycG9zZSBvZiBhIGJ1bmRsZSAtIGhvdyBpdCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEJ1bmRsZVR5cGVDb2RlcyA9IHtcclxuICAvKipcclxuICAgKiBiYXRjaDogVGhlIGJ1bmRsZSBpcyBhIHNldCBvZiBhY3Rpb25zIC0gaW50ZW5kZWQgdG8gYmUgcHJvY2Vzc2VkIGJ5IGEgc2VydmVyIGFzIGEgZ3JvdXAgb2YgaW5kZXBlbmRlbnQgYWN0aW9ucy5cclxuICAgKi9cclxuICBCYXRjaDogXCJiYXRjaFwiLFxyXG4gIC8qKlxyXG4gICAqIGJhdGNoLXJlc3BvbnNlOiBUaGUgYnVuZGxlIGlzIGEgYmF0Y2ggcmVzcG9uc2UuIE5vdGUgdGhhdCBhcyBhIGJhdGNoLCBzb21lIHJlc3BvbnNlcyBtYXkgaW5kaWNhdGUgZmFpbHVyZSBhbmQgb3RoZXJzIHN1Y2Nlc3MuXHJcbiAgICovXHJcbiAgQmF0Y2hSZXNwb25zZTogXCJiYXRjaC1yZXNwb25zZVwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbGxlY3Rpb246IFRoZSBidW5kbGUgaXMgYSBzZXQgb2YgcmVzb3VyY2VzIGNvbGxlY3RlZCBpbnRvIGEgc2luZ2xlIHBhY2thZ2UgZm9yIGVhc2Ugb2YgZGlzdHJpYnV0aW9uIHRoYXQgaW1wb3NlcyBubyBwcm9jZXNzaW5nIG9ibGlnYXRpb25zIG9yIGJlaGF2aW9yYWwgcnVsZXMgYmV5b25kIHBlcnNpc3RlbmNlLlxyXG4gICAqL1xyXG4gIENvbGxlY3Rpb246IFwiY29sbGVjdGlvblwiLFxyXG4gIC8qKlxyXG4gICAqIGRvY3VtZW50OiBUaGUgYnVuZGxlIGlzIGEgZG9jdW1lbnQuIFRoZSBmaXJzdCByZXNvdXJjZSBpcyBhIENvbXBvc2l0aW9uLlxyXG4gICAqL1xyXG4gIERvY3VtZW50OiBcImRvY3VtZW50XCIsXHJcbiAgLyoqXHJcbiAgICogaGlzdG9yeTogVGhlIGJ1bmRsZSBpcyBhIGxpc3Qgb2YgcmVzb3VyY2VzIGZyb20gYSBoaXN0b3J5IGludGVyYWN0aW9uIG9uIGEgc2VydmVyLlxyXG4gICAqL1xyXG4gIEhpc3RvcnlMaXN0OiBcImhpc3RvcnlcIixcclxuICAvKipcclxuICAgKiBtZXNzYWdlOiBUaGUgYnVuZGxlIGlzIGEgbWVzc2FnZS4gVGhlIGZpcnN0IHJlc291cmNlIGlzIGEgTWVzc2FnZUhlYWRlci5cclxuICAgKi9cclxuICBNZXNzYWdlOiBcIm1lc3NhZ2VcIixcclxuICAvKipcclxuICAgKiBzZWFyY2hzZXQ6IFRoZSBidW5kbGUgaXMgYSBsaXN0IG9mIHJlc291cmNlcyByZXR1cm5lZCBhcyBhIHJlc3VsdCBvZiBhIHNlYXJjaC9xdWVyeSBpbnRlcmFjdGlvbiwgb3BlcmF0aW9uLCBvciBtZXNzYWdlLlxyXG4gICAqL1xyXG4gIFNlYXJjaFJlc3VsdHM6IFwic2VhcmNoc2V0XCIsXHJcbiAgLyoqXHJcbiAgICogdHJhbnNhY3Rpb246IFRoZSBidW5kbGUgaXMgYSB0cmFuc2FjdGlvbiAtIGludGVuZGVkIHRvIGJlIHByb2Nlc3NlZCBieSBhIHNlcnZlciBhcyBhbiBhdG9taWMgY29tbWl0LlxyXG4gICAqL1xyXG4gIFRyYW5zYWN0aW9uOiBcInRyYW5zYWN0aW9uXCIsXHJcbiAgLyoqXHJcbiAgICogdHJhbnNhY3Rpb24tcmVzcG9uc2U6IFRoZSBidW5kbGUgaXMgYSB0cmFuc2FjdGlvbiByZXNwb25zZS4gQmVjYXVzZSB0aGUgcmVzcG9uc2UgaXMgYSB0cmFuc2FjdGlvbiByZXNwb25zZSwgdGhlIHRyYW5zYWN0aW9uIGhhcyBzdWNjZWVkZWQsIGFuZCBhbGwgcmVzcG9uc2VzIGFyZSBlcnJvciBmcmVlLlxyXG4gICAqL1xyXG4gIFRyYW5zYWN0aW9uUmVzcG9uc2U6IFwidHJhbnNhY3Rpb24tcmVzcG9uc2VcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhlIHB1cnBvc2Ugb2YgYSBidW5kbGUgLSBob3cgaXQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZC5cclxuICovXHJcbmV4cG9ydCB0eXBlIEJ1bmRsZVR5cGVDb2RlVHlwZSA9IHR5cGVvZiBCdW5kbGVUeXBlQ29kZXNba2V5b2YgdHlwZW9mIEJ1bmRsZVR5cGVDb2Rlc107XHJcbiJdfQ==