// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/consent-data-meaning|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * How a resource reference is interpreted when testing consent restrictions.
 */
export const ConsentDataMeaningCodings = {
    /**
     * authoredby: The consent applies to instances of resources that are authored by.
     */
    AuthoredBy: new Coding({
        display: "AuthoredBy",
        code: "authoredby",
        system: "http://hl7.org/fhir/consent-data-meaning",
    }),
    /**
     * dependents: The consent applies directly to the instance of the resource and instances that refer to it.
     */
    Dependents: new Coding({
        display: "Dependents",
        code: "dependents",
        system: "http://hl7.org/fhir/consent-data-meaning",
    }),
    /**
     * instance: The consent applies directly to the instance of the resource.
     */
    Instance: new Coding({
        display: "Instance",
        code: "instance",
        system: "http://hl7.org/fhir/consent-data-meaning",
    }),
    /**
     * related: The consent applies directly to the instance of the resource and instances it refers to.
     */
    Related: new Coding({
        display: "Related",
        code: "related",
        system: "http://hl7.org/fhir/consent-data-meaning",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc2VudERhdGFNZWFuaW5nQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ29uc2VudERhdGFNZWFuaW5nQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUFFekUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkM7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbnNlbnQtZGF0YS1tZWFuaW5nfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBIb3cgYSByZXNvdXJjZSByZWZlcmVuY2UgaXMgaW50ZXJwcmV0ZWQgd2hlbiB0ZXN0aW5nIGNvbnNlbnQgcmVzdHJpY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvbnNlbnREYXRhTWVhbmluZ0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYXV0aG9yZWRieTogVGhlIGNvbnNlbnQgYXBwbGllcyB0byBpbnN0YW5jZXMgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIGF1dGhvcmVkIGJ5LlxyXG4gICAqL1xyXG4gIEF1dGhvcmVkQnk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBdXRob3JlZEJ5XCIsXHJcbiAgICBjb2RlOiBcImF1dGhvcmVkYnlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtZGF0YS1tZWFuaW5nXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZGVwZW5kZW50czogVGhlIGNvbnNlbnQgYXBwbGllcyBkaXJlY3RseSB0byB0aGUgaW5zdGFuY2Ugb2YgdGhlIHJlc291cmNlIGFuZCBpbnN0YW5jZXMgdGhhdCByZWZlciB0byBpdC5cclxuICAgKi9cclxuICBEZXBlbmRlbnRzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGVwZW5kZW50c1wiLFxyXG4gICAgY29kZTogXCJkZXBlbmRlbnRzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LWRhdGEtbWVhbmluZ1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluc3RhbmNlOiBUaGUgY29uc2VudCBhcHBsaWVzIGRpcmVjdGx5IHRvIHRoZSBpbnN0YW5jZSBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgSW5zdGFuY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJbnN0YW5jZVwiLFxyXG4gICAgY29kZTogXCJpbnN0YW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1kYXRhLW1lYW5pbmdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWxhdGVkOiBUaGUgY29uc2VudCBhcHBsaWVzIGRpcmVjdGx5IHRvIHRoZSBpbnN0YW5jZSBvZiB0aGUgcmVzb3VyY2UgYW5kIGluc3RhbmNlcyBpdCByZWZlcnMgdG8uXHJcbiAgICovXHJcbiAgUmVsYXRlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlbGF0ZWRcIixcclxuICAgIGNvZGU6IFwicmVsYXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1kYXRhLW1lYW5pbmdcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBIb3cgYSByZXNvdXJjZSByZWZlcmVuY2UgaXMgaW50ZXJwcmV0ZWQgd2hlbiB0ZXN0aW5nIGNvbnNlbnQgcmVzdHJpY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29uc2VudERhdGFNZWFuaW5nQ29kaW5nVHlwZSA9IHR5cGVvZiBDb25zZW50RGF0YU1lYW5pbmdDb2RpbmdzO1xyXG4iXX0=