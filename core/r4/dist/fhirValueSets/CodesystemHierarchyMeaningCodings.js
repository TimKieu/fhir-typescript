// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/codesystem-hierarchy-meaning|4.0.1
/**
 * The meaning of the hierarchy of concepts in a code system.
 */
export const CodesystemHierarchyMeaningCodings = {
    /**
     * classified-with: Child concepts in the hierarchy may have only one parent, and there is a presumption that the code system is a "closed world" meaning all things must be in the hierarchy. This results in concepts such as "not otherwise classified.".
     */
    ClassifiedWith: {
        display: "Classified With",
        code: "classified-with",
        system: "http://hl7.org/fhir/codesystem-hierarchy-meaning",
    },
    /**
     * grouped-by: No particular relationship between the concepts can be assumed, except what can be determined by inspection of the definitions of the elements (possible reasons to use this: importing from a source where this is not defined, or where various parts of the hierarchy have different meanings).
     */
    GroupedBy: {
        display: "Grouped By",
        code: "grouped-by",
        system: "http://hl7.org/fhir/codesystem-hierarchy-meaning",
    },
    /**
     * is-a: A hierarchy where the child concepts have an IS-A relationship with the parents - that is, all the properties of the parent are also true for its child concepts. Not that is-a is a property of the concepts, so additional subsumption relationships may be defined using properties or the [subsumes](extension-codesystem-subsumes.html) extension.
     */
    IsA: {
        display: "Is-A",
        code: "is-a",
        system: "http://hl7.org/fhir/codesystem-hierarchy-meaning",
    },
    /**
     * part-of: Child elements list the individual parts of a composite whole (e.g. body site).
     */
    PartOf: {
        display: "Part Of",
        code: "part-of",
        system: "http://hl7.org/fhir/codesystem-hierarchy-meaning",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Db2Rlc3lzdGVtSGllcmFyY2h5TWVhbmluZ0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUZBQWlGO0FBMEJqRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUF3QztJQUNwRjs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb2Rlc3lzdGVtLWhpZXJhcmNoeS1tZWFuaW5nfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIG1lYW5pbmcgb2YgdGhlIGhpZXJhcmNoeSBvZiBjb25jZXB0cyBpbiBhIGNvZGUgc3lzdGVtLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNsYXNzaWZpZWQtd2l0aDogQ2hpbGQgY29uY2VwdHMgaW4gdGhlIGhpZXJhcmNoeSBtYXkgaGF2ZSBvbmx5IG9uZSBwYXJlbnQsIGFuZCB0aGVyZSBpcyBhIHByZXN1bXB0aW9uIHRoYXQgdGhlIGNvZGUgc3lzdGVtIGlzIGEgXCJjbG9zZWQgd29ybGRcIiBtZWFuaW5nIGFsbCB0aGluZ3MgbXVzdCBiZSBpbiB0aGUgaGllcmFyY2h5LiBUaGlzIHJlc3VsdHMgaW4gY29uY2VwdHMgc3VjaCBhcyBcIm5vdCBvdGhlcndpc2UgY2xhc3NpZmllZC5cIi5cclxuICAgKi9cclxuICBDbGFzc2lmaWVkV2l0aDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBncm91cGVkLWJ5OiBObyBwYXJ0aWN1bGFyIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBjb25jZXB0cyBjYW4gYmUgYXNzdW1lZCwgZXhjZXB0IHdoYXQgY2FuIGJlIGRldGVybWluZWQgYnkgaW5zcGVjdGlvbiBvZiB0aGUgZGVmaW5pdGlvbnMgb2YgdGhlIGVsZW1lbnRzIChwb3NzaWJsZSByZWFzb25zIHRvIHVzZSB0aGlzOiBpbXBvcnRpbmcgZnJvbSBhIHNvdXJjZSB3aGVyZSB0aGlzIGlzIG5vdCBkZWZpbmVkLCBvciB3aGVyZSB2YXJpb3VzIHBhcnRzIG9mIHRoZSBoaWVyYXJjaHkgaGF2ZSBkaWZmZXJlbnQgbWVhbmluZ3MpLlxyXG4gICAqL1xyXG4gIEdyb3VwZWRCeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpcy1hOiBBIGhpZXJhcmNoeSB3aGVyZSB0aGUgY2hpbGQgY29uY2VwdHMgaGF2ZSBhbiBJUy1BIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBwYXJlbnRzIC0gdGhhdCBpcywgYWxsIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBwYXJlbnQgYXJlIGFsc28gdHJ1ZSBmb3IgaXRzIGNoaWxkIGNvbmNlcHRzLiBOb3QgdGhhdCBpcy1hIGlzIGEgcHJvcGVydHkgb2YgdGhlIGNvbmNlcHRzLCBzbyBhZGRpdGlvbmFsIHN1YnN1bXB0aW9uIHJlbGF0aW9uc2hpcHMgbWF5IGJlIGRlZmluZWQgdXNpbmcgcHJvcGVydGllcyBvciB0aGUgW3N1YnN1bWVzXShleHRlbnNpb24tY29kZXN5c3RlbS1zdWJzdW1lcy5odG1sKSBleHRlbnNpb24uXHJcbiAgICovXHJcbiAgSXNBOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBhcnQtb2Y6IENoaWxkIGVsZW1lbnRzIGxpc3QgdGhlIGluZGl2aWR1YWwgcGFydHMgb2YgYSBjb21wb3NpdGUgd2hvbGUgKGUuZy4gYm9keSBzaXRlKS5cclxuICAgKi9cclxuICBQYXJ0T2Y6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbWVhbmluZyBvZiB0aGUgaGllcmFyY2h5IG9mIGNvbmNlcHRzIGluIGEgY29kZSBzeXN0ZW0uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29kZXN5c3RlbUhpZXJhcmNoeU1lYW5pbmdDb2RpbmdzOkNvZGVzeXN0ZW1IaWVyYXJjaHlNZWFuaW5nQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjbGFzc2lmaWVkLXdpdGg6IENoaWxkIGNvbmNlcHRzIGluIHRoZSBoaWVyYXJjaHkgbWF5IGhhdmUgb25seSBvbmUgcGFyZW50LCBhbmQgdGhlcmUgaXMgYSBwcmVzdW1wdGlvbiB0aGF0IHRoZSBjb2RlIHN5c3RlbSBpcyBhIFwiY2xvc2VkIHdvcmxkXCIgbWVhbmluZyBhbGwgdGhpbmdzIG11c3QgYmUgaW4gdGhlIGhpZXJhcmNoeS4gVGhpcyByZXN1bHRzIGluIGNvbmNlcHRzIHN1Y2ggYXMgXCJub3Qgb3RoZXJ3aXNlIGNsYXNzaWZpZWQuXCIuXHJcbiAgICovXHJcbiAgQ2xhc3NpZmllZFdpdGg6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2xhc3NpZmllZCBXaXRoXCIsXHJcbiAgICBjb2RlOiBcImNsYXNzaWZpZWQtd2l0aFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29kZXN5c3RlbS1oaWVyYXJjaHktbWVhbmluZ1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZ3JvdXBlZC1ieTogTm8gcGFydGljdWxhciByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgY29uY2VwdHMgY2FuIGJlIGFzc3VtZWQsIGV4Y2VwdCB3aGF0IGNhbiBiZSBkZXRlcm1pbmVkIGJ5IGluc3BlY3Rpb24gb2YgdGhlIGRlZmluaXRpb25zIG9mIHRoZSBlbGVtZW50cyAocG9zc2libGUgcmVhc29ucyB0byB1c2UgdGhpczogaW1wb3J0aW5nIGZyb20gYSBzb3VyY2Ugd2hlcmUgdGhpcyBpcyBub3QgZGVmaW5lZCwgb3Igd2hlcmUgdmFyaW91cyBwYXJ0cyBvZiB0aGUgaGllcmFyY2h5IGhhdmUgZGlmZmVyZW50IG1lYW5pbmdzKS5cclxuICAgKi9cclxuICBHcm91cGVkQnk6IHtcclxuICAgIGRpc3BsYXk6IFwiR3JvdXBlZCBCeVwiLFxyXG4gICAgY29kZTogXCJncm91cGVkLWJ5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb2Rlc3lzdGVtLWhpZXJhcmNoeS1tZWFuaW5nXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpcy1hOiBBIGhpZXJhcmNoeSB3aGVyZSB0aGUgY2hpbGQgY29uY2VwdHMgaGF2ZSBhbiBJUy1BIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBwYXJlbnRzIC0gdGhhdCBpcywgYWxsIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBwYXJlbnQgYXJlIGFsc28gdHJ1ZSBmb3IgaXRzIGNoaWxkIGNvbmNlcHRzLiBOb3QgdGhhdCBpcy1hIGlzIGEgcHJvcGVydHkgb2YgdGhlIGNvbmNlcHRzLCBzbyBhZGRpdGlvbmFsIHN1YnN1bXB0aW9uIHJlbGF0aW9uc2hpcHMgbWF5IGJlIGRlZmluZWQgdXNpbmcgcHJvcGVydGllcyBvciB0aGUgW3N1YnN1bWVzXShleHRlbnNpb24tY29kZXN5c3RlbS1zdWJzdW1lcy5odG1sKSBleHRlbnNpb24uXHJcbiAgICovXHJcbiAgSXNBOiB7XHJcbiAgICBkaXNwbGF5OiBcIklzLUFcIixcclxuICAgIGNvZGU6IFwiaXMtYVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29kZXN5c3RlbS1oaWVyYXJjaHktbWVhbmluZ1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGFydC1vZjogQ2hpbGQgZWxlbWVudHMgbGlzdCB0aGUgaW5kaXZpZHVhbCBwYXJ0cyBvZiBhIGNvbXBvc2l0ZSB3aG9sZSAoZS5nLiBib2R5IHNpdGUpLlxyXG4gICAqL1xyXG4gIFBhcnRPZjoge1xyXG4gICAgZGlzcGxheTogXCJQYXJ0IE9mXCIsXHJcbiAgICBjb2RlOiBcInBhcnQtb2ZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvZGVzeXN0ZW0taGllcmFyY2h5LW1lYW5pbmdcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=