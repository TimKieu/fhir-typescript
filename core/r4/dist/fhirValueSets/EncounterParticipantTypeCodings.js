// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-participant-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set defines a set of codes that can be used to indicate how an individual participates in an encounter.
 */
export const EncounterParticipantTypeCodings = {
    /**
     * ADM: The practitioner who is responsible for admitting a patient to a patient encounter.
     */
    Admitter: new Coding({
        display: "admitter",
        code: "ADM",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * ATND: The practitioner that has responsibility for overseeing a patient's care during a patient encounter.
     */
    Attender: new Coding({
        display: "attender",
        code: "ATND",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * CALLBCK: A person or organization who should be contacted for follow-up questions about the act in place of the author.
     */
    CallbackContact: new Coding({
        display: "callback contact",
        code: "CALLBCK",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * CON: An advisor participating in the service by performing evaluations and making recommendations.
     */
    Consultant: new Coding({
        display: "consultant",
        code: "CON",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * DIS: The practitioner who is responsible for the discharge of a patient from a patient encounter.
     */
    Discharger: new Coding({
        display: "discharger",
        code: "DIS",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * emergency: A person to be contacted in case of an emergency during the encounter.
     */
    Emergency: new Coding({
        display: "Emergency",
        code: "emergency",
        system: "http://terminology.hl7.org/CodeSystem/participant-type",
    }),
    /**
     * ESC: Only with Transportation services.  A person who escorts the patient.
     */
    Escort: new Coding({
        display: "escort",
        code: "ESC",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * PART: Indicates that the target of the participation is involved in some manner in the act, but does not qualify how.
     */
    Participation: new Coding({
        display: "Participation",
        code: "PART",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * PPRF: The principal or primary performer of the act.
     */
    PrimaryPerformer: new Coding({
        display: "primary performer",
        code: "PPRF",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * REF: A person having referred the subject of the service to the performer (referring physician).  Typically, a referring physician will receive a report.
     */
    Referrer: new Coding({
        display: "referrer",
        code: "REF",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * SPRF: A person assisting in an act through his substantial presence and involvement   This includes: assistants, technicians, associates, or whatever the job titles may be.
     */
    SecondaryPerformer: new Coding({
        display: "secondary performer",
        code: "SPRF",
        system: "http://terminology.hl7.org/CodeSystem/v3-ParticipationType",
    }),
    /**
     * translator: A translator who is facilitating communication with the patient during the encounter.
     */
    Translator: new Coding({
        display: "Translator",
        code: "translator",
        system: "http://terminology.hl7.org/CodeSystem/participant-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,