// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationknowledge-characteristic|4.0.1
/**
 * MedicationKnowledge Characteristic Codes
 */
export const MedicationknowledgeCharacteristicCodings = {
    /**
     * coating: Description of the coating of the product
     */
    Coating: {
        display: "Coating",
        code: "coating",
        system: "http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic",
    },
    /**
     * color: Description of the color of the product
     */
    Color: {
        display: "Color",
        code: "color",
        system: "http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic",
    },
    /**
     * imprintcd: Identyifying marks on product
     */
    ImprintCode: {
        display: "Imprint Code",
        code: "imprintcd",
        system: "http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic",
    },
    /**
     * logo: Description of the Logo of the product
     */
    Logo: {
        display: "Logo",
        code: "logo",
        system: "http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic",
    },
    /**
     * scoring: Description of the scoring of the product
     */
    Scoring: {
        display: "Scoring",
        code: "scoring",
        system: "http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic",
    },
    /**
     * shape: Description of the shape of the product
     */
    Shape: {
        display: "Shape",
        code: "shape",
        system: "http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic",
    },
    /**
     * size: Description of size of the product
     */
    Size: {
        display: "Size",
        code: "size",
        system: "http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx1RkFBdUY7QUFzQ3ZGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQStDO0lBQ2xHOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMEVBQTBFO0tBQ25GO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsMEVBQTBFO0tBQ25GO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBFQUEwRTtLQUNuRjtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwwRUFBMEU7S0FDbkY7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lZGljYXRpb25rbm93bGVkZ2UtY2hhcmFjdGVyaXN0aWN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uS25vd2xlZGdlIENoYXJhY3RlcmlzdGljIENvZGVzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWRpY2F0aW9ua25vd2xlZGdlQ2hhcmFjdGVyaXN0aWNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvYXRpbmc6IERlc2NyaXB0aW9uIG9mIHRoZSBjb2F0aW5nIG9mIHRoZSBwcm9kdWN0XHJcbiAgICovXHJcbiAgQ29hdGluZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb2xvcjogRGVzY3JpcHRpb24gb2YgdGhlIGNvbG9yIG9mIHRoZSBwcm9kdWN0XHJcbiAgICovXHJcbiAgQ29sb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogaW1wcmludGNkOiBJZGVudHlpZnlpbmcgbWFya3Mgb24gcHJvZHVjdFxyXG4gICAqL1xyXG4gIEltcHJpbnRDb2RlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxvZ286IERlc2NyaXB0aW9uIG9mIHRoZSBMb2dvIG9mIHRoZSBwcm9kdWN0XHJcbiAgICovXHJcbiAgTG9nbzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzY29yaW5nOiBEZXNjcmlwdGlvbiBvZiB0aGUgc2NvcmluZyBvZiB0aGUgcHJvZHVjdFxyXG4gICAqL1xyXG4gIFNjb3Jpbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc2hhcGU6IERlc2NyaXB0aW9uIG9mIHRoZSBzaGFwZSBvZiB0aGUgcHJvZHVjdFxyXG4gICAqL1xyXG4gIFNoYXBlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNpemU6IERlc2NyaXB0aW9uIG9mIHNpemUgb2YgdGhlIHByb2R1Y3RcclxuICAgKi9cclxuICBTaXplOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvbktub3dsZWRnZSBDaGFyYWN0ZXJpc3RpYyBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lZGljYXRpb25rbm93bGVkZ2VDaGFyYWN0ZXJpc3RpY0NvZGluZ3M6TWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjb2F0aW5nOiBEZXNjcmlwdGlvbiBvZiB0aGUgY29hdGluZyBvZiB0aGUgcHJvZHVjdFxyXG4gICAqL1xyXG4gIENvYXRpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29hdGluZ1wiLFxyXG4gICAgY29kZTogXCJjb2F0aW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9ua25vd2xlZGdlLWNoYXJhY3RlcmlzdGljXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb2xvcjogRGVzY3JpcHRpb24gb2YgdGhlIGNvbG9yIG9mIHRoZSBwcm9kdWN0XHJcbiAgICovXHJcbiAgQ29sb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiQ29sb3JcIixcclxuICAgIGNvZGU6IFwiY29sb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZGljYXRpb25rbm93bGVkZ2UtY2hhcmFjdGVyaXN0aWNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGltcHJpbnRjZDogSWRlbnR5aWZ5aW5nIG1hcmtzIG9uIHByb2R1Y3RcclxuICAgKi9cclxuICBJbXByaW50Q29kZToge1xyXG4gICAgZGlzcGxheTogXCJJbXByaW50IENvZGVcIixcclxuICAgIGNvZGU6IFwiaW1wcmludGNkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9ua25vd2xlZGdlLWNoYXJhY3RlcmlzdGljXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsb2dvOiBEZXNjcmlwdGlvbiBvZiB0aGUgTG9nbyBvZiB0aGUgcHJvZHVjdFxyXG4gICAqL1xyXG4gIExvZ286IHtcclxuICAgIGRpc3BsYXk6IFwiTG9nb1wiLFxyXG4gICAgY29kZTogXCJsb2dvXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9ua25vd2xlZGdlLWNoYXJhY3RlcmlzdGljXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzY29yaW5nOiBEZXNjcmlwdGlvbiBvZiB0aGUgc2NvcmluZyBvZiB0aGUgcHJvZHVjdFxyXG4gICAqL1xyXG4gIFNjb3Jpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiU2NvcmluZ1wiLFxyXG4gICAgY29kZTogXCJzY29yaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tZWRpY2F0aW9ua25vd2xlZGdlLWNoYXJhY3RlcmlzdGljXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzaGFwZTogRGVzY3JpcHRpb24gb2YgdGhlIHNoYXBlIG9mIHRoZSBwcm9kdWN0XHJcbiAgICovXHJcbiAgU2hhcGU6IHtcclxuICAgIGRpc3BsYXk6IFwiU2hhcGVcIixcclxuICAgIGNvZGU6IFwic2hhcGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21lZGljYXRpb25rbm93bGVkZ2UtY2hhcmFjdGVyaXN0aWNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNpemU6IERlc2NyaXB0aW9uIG9mIHNpemUgb2YgdGhlIHByb2R1Y3RcclxuICAgKi9cclxuICBTaXplOiB7XHJcbiAgICBkaXNwbGF5OiBcIlNpemVcIixcclxuICAgIGNvZGU6IFwic2l6ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbWVkaWNhdGlvbmtub3dsZWRnZS1jaGFyYWN0ZXJpc3RpY1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==