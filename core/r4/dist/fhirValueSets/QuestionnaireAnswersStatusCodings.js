// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/questionnaire-answers-status|4.0.1
/**
 * Lifecycle status of the questionnaire response.
 */
export const QuestionnaireAnswersStatusCodings = {
    /**
     * amended: This QuestionnaireResponse has been filled out with answers, then marked as complete, yet changes or additions have been made to it afterwards.
     */
    Amended: {
        display: "Amended",
        code: "amended",
        system: "http://hl7.org/fhir/questionnaire-answers-status",
    },
    /**
     * completed: This QuestionnaireResponse has been filled out with answers and the current content is regarded as definitive.
     */
    Completed: {
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/questionnaire-answers-status",
    },
    /**
     * entered-in-error: This QuestionnaireResponse was entered in error and voided.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/questionnaire-answers-status",
    },
    /**
     * in-progress: This QuestionnaireResponse has been partially filled out with answers but changes or additions are still expected to be made to it.
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/questionnaire-answers-status",
    },
    /**
     * stopped: This QuestionnaireResponse has been partially filled out with answers but has been abandoned. It is unknown whether changes or additions are expected to be made to it.
     */
    Stopped: {
        display: "Stopped",
        code: "stopped",
        system: "http://hl7.org/fhir/questionnaire-answers-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVlc3Rpb25uYWlyZUFuc3dlcnNTdGF0dXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9RdWVzdGlvbm5haXJlQW5zd2Vyc1N0YXR1c0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUZBQWlGO0FBOEJqRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUF3QztJQUNwRjs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsY0FBYyxFQUFFO1FBQ2QsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcXVlc3Rpb25uYWlyZS1hbnN3ZXJzLXN0YXR1c3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIExpZmVjeWNsZSBzdGF0dXMgb2YgdGhlIHF1ZXN0aW9ubmFpcmUgcmVzcG9uc2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBRdWVzdGlvbm5haXJlQW5zd2Vyc1N0YXR1c0NvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogYW1lbmRlZDogVGhpcyBRdWVzdGlvbm5haXJlUmVzcG9uc2UgaGFzIGJlZW4gZmlsbGVkIG91dCB3aXRoIGFuc3dlcnMsIHRoZW4gbWFya2VkIGFzIGNvbXBsZXRlLCB5ZXQgY2hhbmdlcyBvciBhZGRpdGlvbnMgaGF2ZSBiZWVuIG1hZGUgdG8gaXQgYWZ0ZXJ3YXJkcy5cclxuICAgKi9cclxuICBBbWVuZGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhpcyBRdWVzdGlvbm5haXJlUmVzcG9uc2UgaGFzIGJlZW4gZmlsbGVkIG91dCB3aXRoIGFuc3dlcnMgYW5kIHRoZSBjdXJyZW50IGNvbnRlbnQgaXMgcmVnYXJkZWQgYXMgZGVmaW5pdGl2ZS5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBRdWVzdGlvbm5haXJlUmVzcG9uc2Ugd2FzIGVudGVyZWQgaW4gZXJyb3IgYW5kIHZvaWRlZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhpcyBRdWVzdGlvbm5haXJlUmVzcG9uc2UgaGFzIGJlZW4gcGFydGlhbGx5IGZpbGxlZCBvdXQgd2l0aCBhbnN3ZXJzIGJ1dCBjaGFuZ2VzIG9yIGFkZGl0aW9ucyBhcmUgc3RpbGwgZXhwZWN0ZWQgdG8gYmUgbWFkZSB0byBpdC5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN0b3BwZWQ6IFRoaXMgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIGhhcyBiZWVuIHBhcnRpYWxseSBmaWxsZWQgb3V0IHdpdGggYW5zd2VycyBidXQgaGFzIGJlZW4gYWJhbmRvbmVkLiBJdCBpcyB1bmtub3duIHdoZXRoZXIgY2hhbmdlcyBvciBhZGRpdGlvbnMgYXJlIGV4cGVjdGVkIHRvIGJlIG1hZGUgdG8gaXQuXHJcbiAgICovXHJcbiAgU3RvcHBlZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIExpZmVjeWNsZSBzdGF0dXMgb2YgdGhlIHF1ZXN0aW9ubmFpcmUgcmVzcG9uc2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUXVlc3Rpb25uYWlyZUFuc3dlcnNTdGF0dXNDb2RpbmdzOlF1ZXN0aW9ubmFpcmVBbnN3ZXJzU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhbWVuZGVkOiBUaGlzIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSBoYXMgYmVlbiBmaWxsZWQgb3V0IHdpdGggYW5zd2VycywgdGhlbiBtYXJrZWQgYXMgY29tcGxldGUsIHlldCBjaGFuZ2VzIG9yIGFkZGl0aW9ucyBoYXZlIGJlZW4gbWFkZSB0byBpdCBhZnRlcndhcmRzLlxyXG4gICAqL1xyXG4gIEFtZW5kZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQW1lbmRlZFwiLFxyXG4gICAgY29kZTogXCJhbWVuZGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9xdWVzdGlvbm5haXJlLWFuc3dlcnMtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoaXMgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIGhhcyBiZWVuIGZpbGxlZCBvdXQgd2l0aCBhbnN3ZXJzIGFuZCB0aGUgY3VycmVudCBjb250ZW50IGlzIHJlZ2FyZGVkIGFzIGRlZmluaXRpdmUuXHJcbiAgICovXHJcbiAgQ29tcGxldGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3F1ZXN0aW9ubmFpcmUtYW5zd2Vycy1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoaXMgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIHdhcyBlbnRlcmVkIGluIGVycm9yIGFuZCB2b2lkZWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBpbiBFcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9xdWVzdGlvbm5haXJlLWFuc3dlcnMtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhpcyBRdWVzdGlvbm5haXJlUmVzcG9uc2UgaGFzIGJlZW4gcGFydGlhbGx5IGZpbGxlZCBvdXQgd2l0aCBhbnN3ZXJzIGJ1dCBjaGFuZ2VzIG9yIGFkZGl0aW9ucyBhcmUgc3RpbGwgZXhwZWN0ZWQgdG8gYmUgbWFkZSB0byBpdC5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkluIFByb2dyZXNzXCIsXHJcbiAgICBjb2RlOiBcImluLXByb2dyZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9xdWVzdGlvbm5haXJlLWFuc3dlcnMtc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBUaGlzIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSBoYXMgYmVlbiBwYXJ0aWFsbHkgZmlsbGVkIG91dCB3aXRoIGFuc3dlcnMgYnV0IGhhcyBiZWVuIGFiYW5kb25lZC4gSXQgaXMgdW5rbm93biB3aGV0aGVyIGNoYW5nZXMgb3IgYWRkaXRpb25zIGFyZSBleHBlY3RlZCB0byBiZSBtYWRlIHRvIGl0LlxyXG4gICAqL1xyXG4gIFN0b3BwZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiU3RvcHBlZFwiLFxyXG4gICAgY29kZTogXCJzdG9wcGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9xdWVzdGlvbm5haXJlLWFuc3dlcnMtc3RhdHVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19