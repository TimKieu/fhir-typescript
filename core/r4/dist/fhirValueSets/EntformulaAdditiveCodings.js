// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/entformula-additive|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * EnteralFormulaAdditiveType: Codes for the type of modular component such as protein, carbohydrate or fiber to be provided in addition to or mixed with the base formula. This value set is provided as a suggestive example.
 */
export const EntformulaAdditiveCodings = {
    /**
     * carbohydrate: Modular carbohydrate enteral formula component
     */
    Carbohydrate: new Coding({
        display: "Carbohydrate",
        code: "carbohydrate",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    }),
    /**
     * fiber: Modular fiber enteral formula component
     */
    Fiber: new Coding({
        display: "Fiber",
        code: "fiber",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    }),
    /**
     * lipid: Modular lipid enteral formula component
     */
    Lipid: new Coding({
        display: "Lipid",
        code: "lipid",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    }),
    /**
     * protein: Modular protein enteral formula component
     */
    Protein: new Coding({
        display: "Protein",
        code: "protein",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    }),
    /**
     * water: Added water
     */
    Water: new Coding({
        display: "Water",
        code: "water",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50Zm9ybXVsYUFkZGl0aXZlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW50Zm9ybXVsYUFkZGl0aXZlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx3RUFBd0U7QUFFeEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkM7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDJEQUEyRDtLQUNwRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMkRBQTJEO0tBQ3BFLENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwyREFBMkQ7S0FDcEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDJEQUEyRDtLQUNwRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMkRBQTJEO0tBQ3BFLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2VudGZvcm11bGEtYWRkaXRpdmV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEVudGVyYWxGb3JtdWxhQWRkaXRpdmVUeXBlOiBDb2RlcyBmb3IgdGhlIHR5cGUgb2YgbW9kdWxhciBjb21wb25lbnQgc3VjaCBhcyBwcm90ZWluLCBjYXJib2h5ZHJhdGUgb3IgZmliZXIgdG8gYmUgcHJvdmlkZWQgaW4gYWRkaXRpb24gdG8gb3IgbWl4ZWQgd2l0aCB0aGUgYmFzZSBmb3JtdWxhLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBFbnRmb3JtdWxhQWRkaXRpdmVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhcmJvaHlkcmF0ZTogTW9kdWxhciBjYXJib2h5ZHJhdGUgZW50ZXJhbCBmb3JtdWxhIGNvbXBvbmVudFxyXG4gICAqL1xyXG4gIENhcmJvaHlkcmF0ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNhcmJvaHlkcmF0ZVwiLFxyXG4gICAgY29kZTogXCJjYXJib2h5ZHJhdGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2VudGZvcm11bGEtYWRkaXRpdmVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBmaWJlcjogTW9kdWxhciBmaWJlciBlbnRlcmFsIGZvcm11bGEgY29tcG9uZW50XHJcbiAgICovXHJcbiAgRmliZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGaWJlclwiLFxyXG4gICAgY29kZTogXCJmaWJlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZW50Zm9ybXVsYS1hZGRpdGl2ZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGxpcGlkOiBNb2R1bGFyIGxpcGlkIGVudGVyYWwgZm9ybXVsYSBjb21wb25lbnRcclxuICAgKi9cclxuICBMaXBpZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxpcGlkXCIsXHJcbiAgICBjb2RlOiBcImxpcGlkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9lbnRmb3JtdWxhLWFkZGl0aXZlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHJvdGVpbjogTW9kdWxhciBwcm90ZWluIGVudGVyYWwgZm9ybXVsYSBjb21wb25lbnRcclxuICAgKi9cclxuICBQcm90ZWluOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUHJvdGVpblwiLFxyXG4gICAgY29kZTogXCJwcm90ZWluXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9lbnRmb3JtdWxhLWFkZGl0aXZlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogd2F0ZXI6IEFkZGVkIHdhdGVyXHJcbiAgICovXHJcbiAgV2F0ZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJXYXRlclwiLFxyXG4gICAgY29kZTogXCJ3YXRlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZW50Zm9ybXVsYS1hZGRpdGl2ZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEVudGVyYWxGb3JtdWxhQWRkaXRpdmVUeXBlOiBDb2RlcyBmb3IgdGhlIHR5cGUgb2YgbW9kdWxhciBjb21wb25lbnQgc3VjaCBhcyBwcm90ZWluLCBjYXJib2h5ZHJhdGUgb3IgZmliZXIgdG8gYmUgcHJvdmlkZWQgaW4gYWRkaXRpb24gdG8gb3IgbWl4ZWQgd2l0aCB0aGUgYmFzZSBmb3JtdWxhLiBUaGlzIHZhbHVlIHNldCBpcyBwcm92aWRlZCBhcyBhIHN1Z2dlc3RpdmUgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEVudGZvcm11bGFBZGRpdGl2ZUNvZGluZ1R5cGUgPSB0eXBlb2YgRW50Zm9ybXVsYUFkZGl0aXZlQ29kaW5ncztcclxuIl19