// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/entformula-additive|4.0.1
/**
 * EnteralFormulaAdditiveType: Codes for the type of modular component such as protein, carbohydrate or fiber to be provided in addition to or mixed with the base formula. This value set is provided as a suggestive example.
 */
export const EntformulaAdditiveCodings = {
    /**
     * carbohydrate: Modular carbohydrate enteral formula component
     */
    Carbohydrate: {
        display: "Carbohydrate",
        code: "carbohydrate",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    },
    /**
     * fiber: Modular fiber enteral formula component
     */
    Fiber: {
        display: "Fiber",
        code: "fiber",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    },
    /**
     * lipid: Modular lipid enteral formula component
     */
    Lipid: {
        display: "Lipid",
        code: "lipid",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    },
    /**
     * protein: Modular protein enteral formula component
     */
    Protein: {
        display: "Protein",
        code: "protein",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    },
    /**
     * water: Added water
     */
    Water: {
        display: "Water",
        code: "water",
        system: "http://terminology.hl7.org/CodeSystem/entformula-additive",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50Zm9ybXVsYUFkZGl0aXZlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW50Zm9ybXVsYUFkZGl0aXZlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx3RUFBd0U7QUE4QnhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLDJEQUEyRDtLQUNwRTtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMkRBQTJEO0tBQ3BFO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwyREFBMkQ7S0FDcEU7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDJEQUEyRDtLQUNwRTtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMkRBQTJEO0tBQ3BFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbnRmb3JtdWxhLWFkZGl0aXZlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRW50ZXJhbEZvcm11bGFBZGRpdGl2ZVR5cGU6IENvZGVzIGZvciB0aGUgdHlwZSBvZiBtb2R1bGFyIGNvbXBvbmVudCBzdWNoIGFzIHByb3RlaW4sIGNhcmJvaHlkcmF0ZSBvciBmaWJlciB0byBiZSBwcm92aWRlZCBpbiBhZGRpdGlvbiB0byBvciBtaXhlZCB3aXRoIHRoZSBiYXNlIGZvcm11bGEuIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRW50Zm9ybXVsYUFkZGl0aXZlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjYXJib2h5ZHJhdGU6IE1vZHVsYXIgY2FyYm9oeWRyYXRlIGVudGVyYWwgZm9ybXVsYSBjb21wb25lbnRcclxuICAgKi9cclxuICBDYXJib2h5ZHJhdGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZmliZXI6IE1vZHVsYXIgZmliZXIgZW50ZXJhbCBmb3JtdWxhIGNvbXBvbmVudFxyXG4gICAqL1xyXG4gIEZpYmVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGxpcGlkOiBNb2R1bGFyIGxpcGlkIGVudGVyYWwgZm9ybXVsYSBjb21wb25lbnRcclxuICAgKi9cclxuICBMaXBpZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwcm90ZWluOiBNb2R1bGFyIHByb3RlaW4gZW50ZXJhbCBmb3JtdWxhIGNvbXBvbmVudFxyXG4gICAqL1xyXG4gIFByb3RlaW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd2F0ZXI6IEFkZGVkIHdhdGVyXHJcbiAgICovXHJcbiAgV2F0ZXI6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbnRlcmFsRm9ybXVsYUFkZGl0aXZlVHlwZTogQ29kZXMgZm9yIHRoZSB0eXBlIG9mIG1vZHVsYXIgY29tcG9uZW50IHN1Y2ggYXMgcHJvdGVpbiwgY2FyYm9oeWRyYXRlIG9yIGZpYmVyIHRvIGJlIHByb3ZpZGVkIGluIGFkZGl0aW9uIHRvIG9yIG1peGVkIHdpdGggdGhlIGJhc2UgZm9ybXVsYS4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRW50Zm9ybXVsYUFkZGl0aXZlQ29kaW5nczpFbnRmb3JtdWxhQWRkaXRpdmVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhcmJvaHlkcmF0ZTogTW9kdWxhciBjYXJib2h5ZHJhdGUgZW50ZXJhbCBmb3JtdWxhIGNvbXBvbmVudFxyXG4gICAqL1xyXG4gIENhcmJvaHlkcmF0ZToge1xyXG4gICAgZGlzcGxheTogXCJDYXJib2h5ZHJhdGVcIixcclxuICAgIGNvZGU6IFwiY2FyYm9oeWRyYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9lbnRmb3JtdWxhLWFkZGl0aXZlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBmaWJlcjogTW9kdWxhciBmaWJlciBlbnRlcmFsIGZvcm11bGEgY29tcG9uZW50XHJcbiAgICovXHJcbiAgRmliZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiRmliZXJcIixcclxuICAgIGNvZGU6IFwiZmliZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2VudGZvcm11bGEtYWRkaXRpdmVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxpcGlkOiBNb2R1bGFyIGxpcGlkIGVudGVyYWwgZm9ybXVsYSBjb21wb25lbnRcclxuICAgKi9cclxuICBMaXBpZDoge1xyXG4gICAgZGlzcGxheTogXCJMaXBpZFwiLFxyXG4gICAgY29kZTogXCJsaXBpZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZW50Zm9ybXVsYS1hZGRpdGl2ZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcHJvdGVpbjogTW9kdWxhciBwcm90ZWluIGVudGVyYWwgZm9ybXVsYSBjb21wb25lbnRcclxuICAgKi9cclxuICBQcm90ZWluOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByb3RlaW5cIixcclxuICAgIGNvZGU6IFwicHJvdGVpblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZW50Zm9ybXVsYS1hZGRpdGl2ZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogd2F0ZXI6IEFkZGVkIHdhdGVyXHJcbiAgICovXHJcbiAgV2F0ZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiV2F0ZXJcIixcclxuICAgIGNvZGU6IFwid2F0ZXJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2VudGZvcm11bGEtYWRkaXRpdmVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=