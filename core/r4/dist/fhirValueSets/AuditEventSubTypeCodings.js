// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/audit-event-sub-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * More detailed code concerning the type of the audit event - defined by DICOM with some FHIR specific additions.
 */
export const AuditEventSubTypeCodings = {
    /**
     * 110120: Audit event: Application Entity has started
     */
    ApplicationStart: new Coding({
        display: "Application Start",
        code: "110120",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110121: Audit event: Application Entity has stopped
     */
    ApplicationStop: new Coding({
        display: "Application Stop",
        code: "110121",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110122: Audit event: User login has been attempted
     */
    Login: new Coding({
        display: "Login",
        code: "110122",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110123: Audit event: User logout has been attempted
     */
    Logout: new Coding({
        display: "Logout",
        code: "110123",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110124: Audit event: Node has been attached
     */
    Attach: new Coding({
        display: "Attach",
        code: "110124",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110125: Audit event: Node has been detached
     */
    Detach: new Coding({
        display: "Detach",
        code: "110125",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110126: Audit event: Node Authentication has been attempted
     */
    NodeAuthentication: new Coding({
        display: "Node Authentication",
        code: "110126",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110127: Audit event: Emergency Override has started
     */
    EmergencyOverrideStarted: new Coding({
        display: "Emergency Override Started",
        code: "110127",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110128: Audit event: Network configuration has been changed
     */
    NetworkConfiguration: new Coding({
        display: "Network Configuration",
        code: "110128",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110129: Audit event: Security configuration has been changed
     */
    SecurityConfiguration: new Coding({
        display: "Security Configuration",
        code: "110129",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110130: Audit event: Hardware configuration has been changed
     */
    HardwareConfiguration: new Coding({
        display: "Hardware Configuration",
        code: "110130",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110131: Audit event: Software configuration has been changed
     */
    SoftwareConfiguration: new Coding({
        display: "Software Configuration",
        code: "110131",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110132: Audit event: A use of a restricted function has been attempted
     */
    UseOfRestrictedFunction: new Coding({
        display: "Use of Restricted Function",
        code: "110132",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110133: Audit event: Audit recording has been stopped
     */
    AuditRecordingStopped: new Coding({
        display: "Audit Recording Stopped",
        code: "110133",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110134: Audit event: Audit recording has been started
     */
    AuditRecordingStarted: new Coding({
        display: "Audit Recording Started",
        code: "110134",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110135: Audit event: Security attributes of an object have been changed
     */
    ObjectSecurityAttributesChanged: new Coding({
        display: "Object Security Attributes Changed",
        code: "110135",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110136: Audit event: Security roles have been changed
     */
    SecurityRolesChanged: new Coding({
        display: "Security Roles Changed",
        code: "110136",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110137: Audit event: Security attributes of a user have been changed
     */
    UserSecurityAttributesChanged: new Coding({
        display: "User security Attributes Changed",
        code: "110137",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110138: Audit event: Emergency Override has Stopped
     */
    EmergencyOverrideStopped: new Coding({
        display: "Emergency Override Stopped",
        code: "110138",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110139: Audit event: Remote Service Operation has Begun
     */
    RemoteServiceOperationStarted: new Coding({
        display: "Remote Service Operation Started",
        code: "110139",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110140: Audit event: Remote Service Operation has Stopped
     */
    RemoteServiceOperationStopped: new Coding({
        display: "Remote Service Operation Stopped",
        code: "110140",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110141: Audit event: Local Service Operation has Begun
     */
    LocalServiceOperationStarted: new Coding({
        display: "Local Service Operation Started",
        code: "110141",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * 110142: Audit event: Local Service Operation Stopped
     */
    LocalServiceOperationStopped: new Coding({
        display: "Local Service Operation Stopped",
        code: "110142",
        system: "http://dicom.nema.org/resources/ontology/DCM",
    }),
    /**
     * batch: perform a set of a separate interactions in a single http operation
     */
    Batch: new Coding({
        display: "batch",
        code: "batch",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * capabilities: Get a Capability Statement for the system.
     */
    Capabilities: new Coding({
        display: "capabilities",
        code: "capabilities",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * create: Create a new resource with a server assigned id.
     */
    Create: new Coding({
        display: "create",
        code: "create",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * delete: Delete a resource.
     */
    Delete: new Coding({
        display: "delete",
        code: "delete",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * history: Retrieve the change history for a particular resource, type of resource, or the entire system.
     */
    History: new Coding({
        display: "history",
        code: "history",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * history-instance: Retrieve the change history for a particular resource.
     */
    HistoryInstance: new Coding({
        display: "history-instance",
        code: "history-instance",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * history-system: Retrieve the change history for all resources on a system.
     */
    HistorySystem: new Coding({
        display: "history-system",
        code: "history-system",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * history-type: Retrieve the change history for all resources of a particular type.
     */
    HistoryType: new Coding({
        display: "history-type",
        code: "history-type",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * operation: Perform an operation as defined by an OperationDefinition.
     */
    Operation: new Coding({
        display: "operation",
        code: "operation",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * patch: Update an existing resource by posting a set of changes to it.
     */
    Patch: new Coding({
        display: "patch",
        code: "patch",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * read: Read the current state of the resource.
     */
    Read: new Coding({
        display: "read",
        code: "read",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * search: Search a resource type or all resources based on some filter criteria.
     */
    Search: new Coding({
        display: "search",
        code: "search",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * search-system: Search all resources based on some filter criteria.
     */
    SearchSystem: new Coding({
        display: "search-system",
        code: "search-system",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * search-type: Search all resources of the specified type based on some filter criteria.
     */
    SearchType: new Coding({
        display: "search-type",
        code: "search-type",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * transaction: Update, create or delete a set of resources as a single transaction.
     */
    Transaction: new Coding({
        display: "transaction",
        code: "transaction",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * update: Update an existing resource by its id (or create it if it is new).
     */
    Update: new Coding({
        display: "update",
        code: "update",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
    /**
     * vread: Read the state of a specific version of the resource.
     */
    Vread: new Coding({
        display: "vread",
        code: "vread",
        system: "http://hl7.org/fhir/restful-interaction",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaXRFdmVudFN1YlR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9BdWRpdEV2ZW50U3ViVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUVBQXlFO0FBRXpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDM0IsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsOENBQThDO0tBQ3ZELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSw4Q0FBOEM7S0FDdkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDhDQUE4QztLQUN2RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsOENBQThDO0tBQ3ZELENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFB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eEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYXVkaXQtZXZlbnQtc3ViLXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIE1vcmUgZGV0YWlsZWQgY29kZSBjb25jZXJuaW5nIHRoZSB0eXBlIG9mIHRoZSBhdWRpdCBldmVudCAtIGRlZmluZWQgYnkgRElDT00gd2l0aCBzb21lIEZISVIgc3BlY2lmaWMgYWRkaXRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEF1ZGl0RXZlbnRTdWJUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiAxMTAxMjA6IEF1ZGl0IGV2ZW50OiBBcHBsaWNhdGlvbiBFbnRpdHkgaGFzIHN0YXJ0ZWRcclxuICAgKi9cclxuICBBcHBsaWNhdGlvblN0YXJ0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQXBwbGljYXRpb24gU3RhcnRcIixcclxuICAgIGNvZGU6IFwiMTEwMTIwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxMjE6IEF1ZGl0IGV2ZW50OiBBcHBsaWNhdGlvbiBFbnRpdHkgaGFzIHN0b3BwZWRcclxuICAgKi9cclxuICBBcHBsaWNhdGlvblN0b3A6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBcHBsaWNhdGlvbiBTdG9wXCIsXHJcbiAgICBjb2RlOiBcIjExMDEyMVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9yZXNvdXJjZXMvb250b2xvZ3kvRENNXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogMTEwMTIyOiBBdWRpdCBldmVudDogVXNlciBsb2dpbiBoYXMgYmVlbiBhdHRlbXB0ZWRcclxuICAgKi9cclxuICBMb2dpbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxvZ2luXCIsXHJcbiAgICBjb2RlOiBcIjExMDEyMlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9yZXNvdXJjZXMvb250b2xvZ3kvRENNXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogMTEwMTIzOiBBdWRpdCBldmVudDogVXNlciBsb2dvdXQgaGFzIGJlZW4gYXR0ZW1wdGVkXHJcbiAgICovXHJcbiAgTG9nb3V0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTG9nb3V0XCIsXHJcbiAgICBjb2RlOiBcIjExMDEyM1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9yZXNvdXJjZXMvb250b2xvZ3kvRENNXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogMTEwMTI0OiBBdWRpdCBldmVudDogTm9kZSBoYXMgYmVlbiBhdHRhY2hlZFxyXG4gICAqL1xyXG4gIEF0dGFjaDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkF0dGFjaFwiLFxyXG4gICAgY29kZTogXCIxMTAxMjRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIDExMDEyNTogQXVkaXQgZXZlbnQ6IE5vZGUgaGFzIGJlZW4gZGV0YWNoZWRcclxuICAgKi9cclxuICBEZXRhY2g6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEZXRhY2hcIixcclxuICAgIGNvZGU6IFwiMTEwMTI1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxMjY6IEF1ZGl0IGV2ZW50OiBOb2RlIEF1dGhlbnRpY2F0aW9uIGhhcyBiZWVuIGF0dGVtcHRlZFxyXG4gICAqL1xyXG4gIE5vZGVBdXRoZW50aWNhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vZGUgQXV0aGVudGljYXRpb25cIixcclxuICAgIGNvZGU6IFwiMTEwMTI2XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxMjc6IEF1ZGl0IGV2ZW50OiBFbWVyZ2VuY3kgT3ZlcnJpZGUgaGFzIHN0YXJ0ZWRcclxuICAgKi9cclxuICBFbWVyZ2VuY3lPdmVycmlkZVN0YXJ0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbWVyZ2VuY3kgT3ZlcnJpZGUgU3RhcnRlZFwiLFxyXG4gICAgY29kZTogXCIxMTAxMjdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIDExMDEyODogQXVkaXQgZXZlbnQ6IE5ldHdvcmsgY29uZmlndXJhdGlvbiBoYXMgYmVlbiBjaGFuZ2VkXHJcbiAgICovXHJcbiAgTmV0d29ya0NvbmZpZ3VyYXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOZXR3b3JrIENvbmZpZ3VyYXRpb25cIixcclxuICAgIGNvZGU6IFwiMTEwMTI4XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxMjk6IEF1ZGl0IGV2ZW50OiBTZWN1cml0eSBjb25maWd1cmF0aW9uIGhhcyBiZWVuIGNoYW5nZWRcclxuICAgKi9cclxuICBTZWN1cml0eUNvbmZpZ3VyYXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTZWN1cml0eSBDb25maWd1cmF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIjExMDEyOVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9yZXNvdXJjZXMvb250b2xvZ3kvRENNXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogMTEwMTMwOiBBdWRpdCBldmVudDogSGFyZHdhcmUgY29uZmlndXJhdGlvbiBoYXMgYmVlbiBjaGFuZ2VkXHJcbiAgICovXHJcbiAgSGFyZHdhcmVDb25maWd1cmF0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSGFyZHdhcmUgQ29uZmlndXJhdGlvblwiLFxyXG4gICAgY29kZTogXCIxMTAxMzBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIDExMDEzMTogQXVkaXQgZXZlbnQ6IFNvZnR3YXJlIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gY2hhbmdlZFxyXG4gICAqL1xyXG4gIFNvZnR3YXJlQ29uZmlndXJhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNvZnR3YXJlIENvbmZpZ3VyYXRpb25cIixcclxuICAgIGNvZGU6IFwiMTEwMTMxXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxMzI6IEF1ZGl0IGV2ZW50OiBBIHVzZSBvZiBhIHJlc3RyaWN0ZWQgZnVuY3Rpb24gaGFzIGJlZW4gYXR0ZW1wdGVkXHJcbiAgICovXHJcbiAgVXNlT2ZSZXN0cmljdGVkRnVuY3Rpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJVc2Ugb2YgUmVzdHJpY3RlZCBGdW5jdGlvblwiLFxyXG4gICAgY29kZTogXCIxMTAxMzJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIDExMDEzMzogQXVkaXQgZXZlbnQ6IEF1ZGl0IHJlY29yZGluZyBoYXMgYmVlbiBzdG9wcGVkXHJcbiAgICovXHJcbiAgQXVkaXRSZWNvcmRpbmdTdG9wcGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQXVkaXQgUmVjb3JkaW5nIFN0b3BwZWRcIixcclxuICAgIGNvZGU6IFwiMTEwMTMzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxMzQ6IEF1ZGl0IGV2ZW50OiBBdWRpdCByZWNvcmRpbmcgaGFzIGJlZW4gc3RhcnRlZFxyXG4gICAqL1xyXG4gIEF1ZGl0UmVjb3JkaW5nU3RhcnRlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkF1ZGl0IFJlY29yZGluZyBTdGFydGVkXCIsXHJcbiAgICBjb2RlOiBcIjExMDEzNFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9yZXNvdXJjZXMvb250b2xvZ3kvRENNXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogMTEwMTM1OiBBdWRpdCBldmVudDogU2VjdXJpdHkgYXR0cmlidXRlcyBvZiBhbiBvYmplY3QgaGF2ZSBiZWVuIGNoYW5nZWRcclxuICAgKi9cclxuICBPYmplY3RTZWN1cml0eUF0dHJpYnV0ZXNDaGFuZ2VkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT2JqZWN0IFNlY3VyaXR5IEF0dHJpYnV0ZXMgQ2hhbmdlZFwiLFxyXG4gICAgY29kZTogXCIxMTAxMzVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIDExMDEzNjogQXVkaXQgZXZlbnQ6IFNlY3VyaXR5IHJvbGVzIGhhdmUgYmVlbiBjaGFuZ2VkXHJcbiAgICovXHJcbiAgU2VjdXJpdHlSb2xlc0NoYW5nZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTZWN1cml0eSBSb2xlcyBDaGFuZ2VkXCIsXHJcbiAgICBjb2RlOiBcIjExMDEzNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9yZXNvdXJjZXMvb250b2xvZ3kvRENNXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogMTEwMTM3OiBBdWRpdCBldmVudDogU2VjdXJpdHkgYXR0cmlidXRlcyBvZiBhIHVzZXIgaGF2ZSBiZWVuIGNoYW5nZWRcclxuICAgKi9cclxuICBVc2VyU2VjdXJpdHlBdHRyaWJ1dGVzQ2hhbmdlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVzZXIgc2VjdXJpdHkgQXR0cmlidXRlcyBDaGFuZ2VkXCIsXHJcbiAgICBjb2RlOiBcIjExMDEzN1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9kaWNvbS5uZW1hLm9yZy9yZXNvdXJjZXMvb250b2xvZ3kvRENNXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogMTEwMTM4OiBBdWRpdCBldmVudDogRW1lcmdlbmN5IE92ZXJyaWRlIGhhcyBTdG9wcGVkXHJcbiAgICovXHJcbiAgRW1lcmdlbmN5T3ZlcnJpZGVTdG9wcGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRW1lcmdlbmN5IE92ZXJyaWRlIFN0b3BwZWRcIixcclxuICAgIGNvZGU6IFwiMTEwMTM4XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxMzk6IEF1ZGl0IGV2ZW50OiBSZW1vdGUgU2VydmljZSBPcGVyYXRpb24gaGFzIEJlZ3VuXHJcbiAgICovXHJcbiAgUmVtb3RlU2VydmljZU9wZXJhdGlvblN0YXJ0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZW1vdGUgU2VydmljZSBPcGVyYXRpb24gU3RhcnRlZFwiLFxyXG4gICAgY29kZTogXCIxMTAxMzlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIDExMDE0MDogQXVkaXQgZXZlbnQ6IFJlbW90ZSBTZXJ2aWNlIE9wZXJhdGlvbiBoYXMgU3RvcHBlZFxyXG4gICAqL1xyXG4gIFJlbW90ZVNlcnZpY2VPcGVyYXRpb25TdG9wcGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmVtb3RlIFNlcnZpY2UgT3BlcmF0aW9uIFN0b3BwZWRcIixcclxuICAgIGNvZGU6IFwiMTEwMTQwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2RpY29tLm5lbWEub3JnL3Jlc291cmNlcy9vbnRvbG9neS9EQ01cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiAxMTAxNDE6IEF1ZGl0IGV2ZW50OiBMb2NhbCBTZXJ2aWNlIE9wZXJhdGlvbiBoYXMgQmVndW5cclxuICAgKi9cclxuICBMb2NhbFNlcnZpY2VPcGVyYXRpb25TdGFydGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTG9jYWwgU2VydmljZSBPcGVyYXRpb24gU3RhcnRlZFwiLFxyXG4gICAgY29kZTogXCIxMTAxNDFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIDExMDE0MjogQXVkaXQgZXZlbnQ6IExvY2FsIFNlcnZpY2UgT3BlcmF0aW9uIFN0b3BwZWRcclxuICAgKi9cclxuICBMb2NhbFNlcnZpY2VPcGVyYXRpb25TdG9wcGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTG9jYWwgU2VydmljZSBPcGVyYXRpb24gU3RvcHBlZFwiLFxyXG4gICAgY29kZTogXCIxMTAxNDJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vZGljb20ubmVtYS5vcmcvcmVzb3VyY2VzL29udG9sb2d5L0RDTVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGJhdGNoOiBwZXJmb3JtIGEgc2V0IG9mIGEgc2VwYXJhdGUgaW50ZXJhY3Rpb25zIGluIGEgc2luZ2xlIGh0dHAgb3BlcmF0aW9uXHJcbiAgICovXHJcbiAgQmF0Y2g6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJiYXRjaFwiLFxyXG4gICAgY29kZTogXCJiYXRjaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNhcGFiaWxpdGllczogR2V0IGEgQ2FwYWJpbGl0eSBTdGF0ZW1lbnQgZm9yIHRoZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgQ2FwYWJpbGl0aWVzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiY2FwYWJpbGl0aWVzXCIsXHJcbiAgICBjb2RlOiBcImNhcGFiaWxpdGllc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZTogQ3JlYXRlIGEgbmV3IHJlc291cmNlIHdpdGggYSBzZXJ2ZXIgYXNzaWduZWQgaWQuXHJcbiAgICovXHJcbiAgQ3JlYXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiY3JlYXRlXCIsXHJcbiAgICBjb2RlOiBcImNyZWF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGRlbGV0ZTogRGVsZXRlIGEgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgRGVsZXRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiZGVsZXRlXCIsXHJcbiAgICBjb2RlOiBcImRlbGV0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGhpc3Rvcnk6IFJldHJpZXZlIHRoZSBjaGFuZ2UgaGlzdG9yeSBmb3IgYSBwYXJ0aWN1bGFyIHJlc291cmNlLCB0eXBlIG9mIHJlc291cmNlLCBvciB0aGUgZW50aXJlIHN5c3RlbS5cclxuICAgKi9cclxuICBIaXN0b3J5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiaGlzdG9yeVwiLFxyXG4gICAgY29kZTogXCJoaXN0b3J5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaGlzdG9yeS1pbnN0YW5jZTogUmV0cmlldmUgdGhlIGNoYW5nZSBoaXN0b3J5IGZvciBhIHBhcnRpY3VsYXIgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgSGlzdG9yeUluc3RhbmNlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiaGlzdG9yeS1pbnN0YW5jZVwiLFxyXG4gICAgY29kZTogXCJoaXN0b3J5LWluc3RhbmNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaGlzdG9yeS1zeXN0ZW06IFJldHJpZXZlIHRoZSBjaGFuZ2UgaGlzdG9yeSBmb3IgYWxsIHJlc291cmNlcyBvbiBhIHN5c3RlbS5cclxuICAgKi9cclxuICBIaXN0b3J5U3lzdGVtOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiaGlzdG9yeS1zeXN0ZW1cIixcclxuICAgIGNvZGU6IFwiaGlzdG9yeS1zeXN0ZW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBoaXN0b3J5LXR5cGU6IFJldHJpZXZlIHRoZSBjaGFuZ2UgaGlzdG9yeSBmb3IgYWxsIHJlc291cmNlcyBvZiBhIHBhcnRpY3VsYXIgdHlwZS5cclxuICAgKi9cclxuICBIaXN0b3J5VHlwZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImhpc3RvcnktdHlwZVwiLFxyXG4gICAgY29kZTogXCJoaXN0b3J5LXR5cGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBvcGVyYXRpb246IFBlcmZvcm0gYW4gb3BlcmF0aW9uIGFzIGRlZmluZWQgYnkgYW4gT3BlcmF0aW9uRGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBPcGVyYXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJvcGVyYXRpb25cIixcclxuICAgIGNvZGU6IFwib3BlcmF0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcGF0Y2g6IFVwZGF0ZSBhbiBleGlzdGluZyByZXNvdXJjZSBieSBwb3N0aW5nIGEgc2V0IG9mIGNoYW5nZXMgdG8gaXQuXHJcbiAgICovXHJcbiAgUGF0Y2g6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJwYXRjaFwiLFxyXG4gICAgY29kZTogXCJwYXRjaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJlYWQ6IFJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIFJlYWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJyZWFkXCIsXHJcbiAgICBjb2RlOiBcInJlYWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzZWFyY2g6IFNlYXJjaCBhIHJlc291cmNlIHR5cGUgb3IgYWxsIHJlc291cmNlcyBiYXNlZCBvbiBzb21lIGZpbHRlciBjcml0ZXJpYS5cclxuICAgKi9cclxuICBTZWFyY2g6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJzZWFyY2hcIixcclxuICAgIGNvZGU6IFwic2VhcmNoXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc2VhcmNoLXN5c3RlbTogU2VhcmNoIGFsbCByZXNvdXJjZXMgYmFzZWQgb24gc29tZSBmaWx0ZXIgY3JpdGVyaWEuXHJcbiAgICovXHJcbiAgU2VhcmNoU3lzdGVtOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwic2VhcmNoLXN5c3RlbVwiLFxyXG4gICAgY29kZTogXCJzZWFyY2gtc3lzdGVtXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc2VhcmNoLXR5cGU6IFNlYXJjaCBhbGwgcmVzb3VyY2VzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBiYXNlZCBvbiBzb21lIGZpbHRlciBjcml0ZXJpYS5cclxuICAgKi9cclxuICBTZWFyY2hUeXBlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwic2VhcmNoLXR5cGVcIixcclxuICAgIGNvZGU6IFwic2VhcmNoLXR5cGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Jlc3RmdWwtaW50ZXJhY3Rpb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB0cmFuc2FjdGlvbjogVXBkYXRlLCBjcmVhdGUgb3IgZGVsZXRlIGEgc2V0IG9mIHJlc291cmNlcyBhcyBhIHNpbmdsZSB0cmFuc2FjdGlvbi5cclxuICAgKi9cclxuICBUcmFuc2FjdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInRyYW5zYWN0aW9uXCIsXHJcbiAgICBjb2RlOiBcInRyYW5zYWN0aW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdXBkYXRlOiBVcGRhdGUgYW4gZXhpc3RpbmcgcmVzb3VyY2UgYnkgaXRzIGlkIChvciBjcmVhdGUgaXQgaWYgaXQgaXMgbmV3KS5cclxuICAgKi9cclxuICBVcGRhdGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJ1cGRhdGVcIixcclxuICAgIGNvZGU6IFwidXBkYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXN0ZnVsLWludGVyYWN0aW9uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdnJlYWQ6IFJlYWQgdGhlIHN0YXRlIG9mIGEgc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgVnJlYWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJ2cmVhZFwiLFxyXG4gICAgY29kZTogXCJ2cmVhZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVzdGZ1bC1pbnRlcmFjdGlvblwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIE1vcmUgZGV0YWlsZWQgY29kZSBjb25jZXJuaW5nIHRoZSB0eXBlIG9mIHRoZSBhdWRpdCBldmVudCAtIGRlZmluZWQgYnkgRElDT00gd2l0aCBzb21lIEZISVIgc3BlY2lmaWMgYWRkaXRpb25zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXVkaXRFdmVudFN1YlR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIEF1ZGl0RXZlbnRTdWJUeXBlQ29kaW5ncztcclxuIl19