{"version":3,"file":"MapTransformCodings.js","sources":["../../src/fhirValueSets/MapTransformCodings.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-transform|4.0.1\r\n\r\nimport { Coding } from '../fhir/Coding.js'\r\n\r\n/**\r\n * How data is copied/created.\r\n */\r\nexport const MapTransformCodings = {\r\n  /**\r\n   * append: append(source...) - source is element or string.\r\n   */\r\n  Append: new Coding({\r\n    display: \"append\",\r\n    code: \"append\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * c: Create a Coding. Parameters = (system. Code[, display]).\r\n   */\r\n  C: new Coding({\r\n    display: \"c\",\r\n    code: \"c\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.\r\n   */\r\n  Cast: new Coding({\r\n    display: \"cast\",\r\n    code: \"cast\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).\r\n   */\r\n  Cc: new Coding({\r\n    display: \"cc\",\r\n    code: \"cc\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * copy: copy(source).\r\n   */\r\n  Copy: new Coding({\r\n    display: \"copy\",\r\n    code: \"copy\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.\r\n   */\r\n  Cp: new Coding({\r\n    display: \"cp\",\r\n    code: \"cp\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.\r\n   */\r\n  Create: new Coding({\r\n    display: \"create\",\r\n    code: \"create\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * dateOp: Perform a date operation. *Parameters to be documented*.\r\n   */\r\n  DateOp: new Coding({\r\n    display: \"dateOp\",\r\n    code: \"dateOp\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.\r\n   */\r\n  Escape: new Coding({\r\n    display: \"escape\",\r\n    code: \"escape\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * evaluate: Execute the supplied FHIRPath expression and use the value returned by that.\r\n   */\r\n  Evaluate: new Coding({\r\n    display: \"evaluate\",\r\n    code: \"evaluate\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.\r\n   */\r\n  Id: new Coding({\r\n    display: \"id\",\r\n    code: \"id\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.\r\n   */\r\n  Pointer: new Coding({\r\n    display: \"pointer\",\r\n    code: \"pointer\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.\r\n   */\r\n  Qty: new Coding({\r\n    display: \"qty\",\r\n    code: \"qty\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * reference: reference(source : object) - return a string that references the provided tree properly.\r\n   */\r\n  Reference: new Coding({\r\n    display: \"reference\",\r\n    code: \"reference\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * translate: translate(source, uri_of_map) - use the translate operation.\r\n   */\r\n  Translate: new Coding({\r\n    display: \"translate\",\r\n    code: \"translate\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * truncate: truncate(source, length) - source must be stringy type.\r\n   */\r\n  Truncate: new Coding({\r\n    display: \"truncate\",\r\n    code: \"truncate\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n  /**\r\n   * uuid: Generate a random UUID (in lowercase). No Parameters.\r\n   */\r\n  Uuid: new Coding({\r\n    display: \"uuid\",\r\n    code: \"uuid\",\r\n    system: \"http://hl7.org/fhir/map-transform\",\r\n  }),\r\n} as const;\r\n\r\n/**\r\n * How data is copied/created.\r\n */\r\nexport type MapTransformCodingType = typeof MapTransformCodings;\r\n"],"names":[],"mappings":"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"}