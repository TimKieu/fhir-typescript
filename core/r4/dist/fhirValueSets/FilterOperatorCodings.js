// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/filter-operator|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The kind of operation to perform as a part of a property based filter.
 */
export const FilterOperatorCodings = {
    /**
     * =: The specified property of the code equals the provided value.
     */
    Equals: new Coding({
        display: "Equals",
        code: "=",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * descendent-of: Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, excluding the provided concept itself i.e. include descendant codes only).
     */
    DescendentOfBySubsumption: new Coding({
        display: "Descendent Of (by subsumption)",
        code: "descendent-of",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * exists: The specified property of the code has at least one value (if the specified value is true; if the specified value is false, then matches when the specified property of the code has no values).
     */
    Exists: new Coding({
        display: "Exists",
        code: "exists",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * generalizes: Includes all concept ids that have a transitive is-a relationship from the concept Id provided as the value, including the provided concept itself (i.e. include ancestor codes and self).
     */
    GeneralizesBySubsumption: new Coding({
        display: "Generalizes (by Subsumption)",
        code: "generalizes",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * in: The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list).
     */
    InSet: new Coding({
        display: "In Set",
        code: "in",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * is-a: Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself (include descendant codes and self).
     */
    IsABySubsumption: new Coding({
        display: "Is A (by subsumption)",
        code: "is-a",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * is-not-a: The specified property of the code does not have an is-a relationship with the provided value.
     */
    NotIsABySubsumption: new Coding({
        display: "Not (Is A) (by subsumption)",
        code: "is-not-a",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * not-in: The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list).
     */
    NotInSet: new Coding({
        display: "Not in Set",
        code: "not-in",
        system: "http://hl7.org/fhir/filter-operator",
    }),
    /**
     * regex: The specified property of the code  matches the regex specified in the provided value.
     */
    RegularExpression: new Coding({
        display: "Regular Expression",
        code: "regex",
        system: "http://hl7.org/fhir/filter-operator",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsdGVyT3BlcmF0b3JDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9GaWx0ZXJPcGVyYXRvckNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBRXBFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ25DOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLHFDQUFxQztLQUM5QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCx5QkFBeUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQyxPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHFDQUFxQztLQUM5QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCx3QkFBd0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQyxPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHFDQUFxQztLQUM5QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMzQixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHFDQUFxQztLQUM5QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM5QixPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxxQ0FBcUM7S0FDOUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHFDQUFxQztLQUM5QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM1QixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHFDQUFxQztLQUM5QyxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9maWx0ZXItb3BlcmF0b3J8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBraW5kIG9mIG9wZXJhdGlvbiB0byBwZXJmb3JtIGFzIGEgcGFydCBvZiBhIHByb3BlcnR5IGJhc2VkIGZpbHRlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBGaWx0ZXJPcGVyYXRvckNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogPTogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBlcXVhbHMgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVxdWFsczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkVxdWFsc1wiLFxyXG4gICAgY29kZTogXCI9XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9maWx0ZXItb3BlcmF0b3JcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkZXNjZW5kZW50LW9mOiBJbmNsdWRlcyBhbGwgY29uY2VwdCBpZHMgdGhhdCBoYXZlIGEgdHJhbnNpdGl2ZSBpcy1hIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBjb25jZXB0IElkIHByb3ZpZGVkIGFzIHRoZSB2YWx1ZSwgZXhjbHVkaW5nIHRoZSBwcm92aWRlZCBjb25jZXB0IGl0c2VsZiBpLmUuIGluY2x1ZGUgZGVzY2VuZGFudCBjb2RlcyBvbmx5KS5cclxuICAgKi9cclxuICBEZXNjZW5kZW50T2ZCeVN1YnN1bXB0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGVzY2VuZGVudCBPZiAoYnkgc3Vic3VtcHRpb24pXCIsXHJcbiAgICBjb2RlOiBcImRlc2NlbmRlbnQtb2ZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ZpbHRlci1vcGVyYXRvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGV4aXN0czogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBoYXMgYXQgbGVhc3Qgb25lIHZhbHVlIChpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIHRydWU7IGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgZmFsc2UsIHRoZW4gbWF0Y2hlcyB3aGVuIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGNvZGUgaGFzIG5vIHZhbHVlcykuXHJcbiAgICovXHJcbiAgRXhpc3RzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRXhpc3RzXCIsXHJcbiAgICBjb2RlOiBcImV4aXN0c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZmlsdGVyLW9wZXJhdG9yXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZ2VuZXJhbGl6ZXM6IEluY2x1ZGVzIGFsbCBjb25jZXB0IGlkcyB0aGF0IGhhdmUgYSB0cmFuc2l0aXZlIGlzLWEgcmVsYXRpb25zaGlwIGZyb20gdGhlIGNvbmNlcHQgSWQgcHJvdmlkZWQgYXMgdGhlIHZhbHVlLCBpbmNsdWRpbmcgdGhlIHByb3ZpZGVkIGNvbmNlcHQgaXRzZWxmIChpLmUuIGluY2x1ZGUgYW5jZXN0b3IgY29kZXMgYW5kIHNlbGYpLlxyXG4gICAqL1xyXG4gIEdlbmVyYWxpemVzQnlTdWJzdW1wdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdlbmVyYWxpemVzIChieSBTdWJzdW1wdGlvbilcIixcclxuICAgIGNvZGU6IFwiZ2VuZXJhbGl6ZXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ZpbHRlci1vcGVyYXRvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluOiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlIGlzIGluIHRoZSBzZXQgb2YgY29kZXMgb3IgY29uY2VwdHMgc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCB2YWx1ZSAoY29tbWEgc2VwYXJhdGVkIGxpc3QpLlxyXG4gICAqL1xyXG4gIEluU2V0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW4gU2V0XCIsXHJcbiAgICBjb2RlOiBcImluXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9maWx0ZXItb3BlcmF0b3JcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBpcy1hOiBJbmNsdWRlcyBhbGwgY29uY2VwdCBpZHMgdGhhdCBoYXZlIGEgdHJhbnNpdGl2ZSBpcy1hIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBjb25jZXB0IElkIHByb3ZpZGVkIGFzIHRoZSB2YWx1ZSwgaW5jbHVkaW5nIHRoZSBwcm92aWRlZCBjb25jZXB0IGl0c2VsZiAoaW5jbHVkZSBkZXNjZW5kYW50IGNvZGVzIGFuZCBzZWxmKS5cclxuICAgKi9cclxuICBJc0FCeVN1YnN1bXB0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSXMgQSAoYnkgc3Vic3VtcHRpb24pXCIsXHJcbiAgICBjb2RlOiBcImlzLWFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2ZpbHRlci1vcGVyYXRvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGlzLW5vdC1hOiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlIGRvZXMgbm90IGhhdmUgYW4gaXMtYSByZWxhdGlvbnNoaXAgd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgTm90SXNBQnlTdWJzdW1wdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCAoSXMgQSkgKGJ5IHN1YnN1bXB0aW9uKVwiLFxyXG4gICAgY29kZTogXCJpcy1ub3QtYVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZmlsdGVyLW9wZXJhdG9yXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbm90LWluOiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlIGlzIG5vdCBpbiB0aGUgc2V0IG9mIGNvZGVzIG9yIGNvbmNlcHRzIHNwZWNpZmllZCBpbiB0aGUgcHJvdmlkZWQgdmFsdWUgKGNvbW1hIHNlcGFyYXRlZCBsaXN0KS5cclxuICAgKi9cclxuICBOb3RJblNldDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBpbiBTZXRcIixcclxuICAgIGNvZGU6IFwibm90LWluXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9maWx0ZXItb3BlcmF0b3JcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWdleDogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSAgbWF0Y2hlcyB0aGUgcmVnZXggc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBSZWd1bGFyRXhwcmVzc2lvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlZ3VsYXIgRXhwcmVzc2lvblwiLFxyXG4gICAgY29kZTogXCJyZWdleFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZmlsdGVyLW9wZXJhdG9yXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIGtpbmQgb2Ygb3BlcmF0aW9uIHRvIHBlcmZvcm0gYXMgYSBwYXJ0IG9mIGEgcHJvcGVydHkgYmFzZWQgZmlsdGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRmlsdGVyT3BlcmF0b3JDb2RpbmdUeXBlID0gdHlwZW9mIEZpbHRlck9wZXJhdG9yQ29kaW5ncztcclxuIl19