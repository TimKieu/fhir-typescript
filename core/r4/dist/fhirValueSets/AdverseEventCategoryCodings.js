// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/adverse-event-category|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Overall categorization of the event, e.g. product-related or situational.
 */
export const AdverseEventCategoryCodings = {
    /**
     * expired-drug: The adverse event pertains to an expired drug.
     */
    ExpiredDrug: new Coding({
        display: "Expired Drug",
        code: "expired-drug",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * incorrect-prescribing-information: The adverse event pertains to incorrect perscribing information.
     */
    IncorrectPrescribingInformation: new Coding({
        display: "Incorrect Prescribing Information",
        code: "incorrect-prescribing-information",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * medical-device-use-error: The adverse event pertains to a medical device use error.
     */
    MedicalDeviceUseError: new Coding({
        display: "Medical Device Use Error",
        code: "medical-device-use-error",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * problem-different-manufacturer: The adverse event pertains to a problem with a different manufacturer of the same medication.
     */
    ProblemWithDifferentManufacturerOfSameMedicine: new Coding({
        display: "Problem with Different Manufacturer of Same Medicine",
        code: "problem-different-manufacturer",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * product-problem: The adverse event pertains to a product problem.
     */
    ProductProblem: new Coding({
        display: "Product Problem",
        code: "product-problem",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * product-quality: The adverse event pertains to product quality.
     */
    ProductQuality: new Coding({
        display: "Product Quality",
        code: "product-quality",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * product-use-error: The adverse event pertains to a product use error.
     */
    ProductUseError: new Coding({
        display: "Product Use Error",
        code: "product-use-error",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * unsafe-physical-environment: The adverse event pertains to an unsafe physical environment.
     */
    UnsafePhysicalEnvironment: new Coding({
        display: "Unsafe Physical Environment",
        code: "unsafe-physical-environment",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * wrong-dose: The adverse event pertains to a wrong dose.
     */
    WrongDose: new Coding({
        display: "Wrong Dose",
        code: "wrong-dose",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * wrong-duration: The adverse event pertains to a wrong duration.
     */
    WrongDuration: new Coding({
        display: "Wrong Duration",
        code: "wrong-duration",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * wrong-rate: The adverse event pertains to a wrong rate.
     */
    WrongRate: new Coding({
        display: "Wrong Rate",
        code: "wrong-rate",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * wrong-route-of-administration: The adverse event pertains to a wrong route of administration.
     */
    WrongRouteOfAdministration: new Coding({
        display: "Wrong Route of Administration",
        code: "wrong-route-of-administration",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * wrong-technique: The adverse event pertains to a wrong technique.
     */
    WrongTechnique: new Coding({
        display: "Wrong Technique",
        code: "wrong-technique",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
    /**
     * wrong-time: The adverse event pertains to a wrong time.
     */
    WrongTime: new Coding({
        display: "Wrong Time",
        code: "wrong-time",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-category",
    }),
};
//# sourceMappingURL=data:application/json;base64,