// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/usage-context-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * A code that specifies a type of context being specified by a usage context.
 */
export const UsageContextTypeCodings = {
    /**
     * age: The age of the patient. For this context type, the value could be a range that specifies the applicable ages or a code from an appropriate value set such as the MeSH value set http://terminology.hl7.org/ValueSet/v3-AgeGroupObservationValue.
     */
    AgeRange: new Coding({
        display: "Age Range",
        code: "age",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * focus: The clinical concept(s) addressed by the artifact. For example, disease, diagnostic test interpretation, medication ordering as in http://hl7.org/fhir/ValueSet/condition-code.
     */
    ClinicalFocus: new Coding({
        display: "Clinical Focus",
        code: "focus",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * gender: The gender of the patient. For this context type, appropriate values can be found in the http://hl7.org/fhir/ValueSet/administrative-gender value set.
     */
    Gender: new Coding({
        display: "Gender",
        code: "gender",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * program: A program/project of work for which this artifact is applicable.
     */
    Program: new Coding({
        display: "Program",
        code: "program",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * species: The species to which an artifact applies. For example, SNOMED - 387961004 | Kingdom Animalia (organism).
     */
    Species: new Coding({
        display: "Species",
        code: "species",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * task: The context for the clinical task(s) represented by this artifact. For example, this could be any task context represented by the HL7 ActTaskCode value set http://terminology.hl7.org/ValueSet/v3-ActTaskCode. General categories include: order entry, patient documentation and patient information review.
     */
    WorkflowTask: new Coding({
        display: "Workflow Task",
        code: "task",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * user: The clinical specialty of the context in which the patient is being treated - For example, PCP, Patient, Cardiologist, Behavioral Professional, Oral Health Professional, Prescriber, etc... taken from a specialty value set such as the NUCC Health Care provider taxonomy value set http://hl7.org/fhir/ValueSet/provider-taxonomy.
     */
    UserType: new Coding({
        display: "User Type",
        code: "user",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * venue: The venue in which an artifact could be used. For example, Outpatient, Inpatient, Home, Nursing home. The code value may originate from the HL7 ServiceDeliveryLocationRoleType value set (http://terminology.hl7.org/ValueSet/v3-ServiceDeliveryLocationRoleType).
     */
    ClinicalVenue: new Coding({
        display: "Clinical Venue",
        code: "venue",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
    /**
     * workflow: The settings in which the artifact is intended for use. For example, admission, pre-op, etc. For example, the ActEncounterCode value set http://terminology.hl7.org/ValueSet/v3-ActEncounterCode.
     */
    WorkflowSetting: new Coding({
        display: "Workflow Setting",
        code: "workflow",
        system: "http://terminology.hl7.org/CodeSystem/usage-context-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNhZ2VDb250ZXh0VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1VzYWdlQ29udGV4dFR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHVFQUF1RTtBQUV2RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNyQzs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMERBQTBEO0tBQ25FLENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsMERBQTBEO0tBQ25FLENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC91c2FnZS1jb250ZXh0LXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEEgY29kZSB0aGF0IHNwZWNpZmllcyBhIHR5cGUgb2YgY29udGV4dCBiZWluZyBzcGVjaWZpZWQgYnkgYSB1c2FnZSBjb250ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFVzYWdlQ29udGV4dFR5cGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFnZTogVGhlIGFnZSBvZiB0aGUgcGF0aWVudC4gRm9yIHRoaXMgY29udGV4dCB0eXBlLCB0aGUgdmFsdWUgY291bGQgYmUgYSByYW5nZSB0aGF0IHNwZWNpZmllcyB0aGUgYXBwbGljYWJsZSBhZ2VzIG9yIGEgY29kZSBmcm9tIGFuIGFwcHJvcHJpYXRlIHZhbHVlIHNldCBzdWNoIGFzIHRoZSBNZVNIIHZhbHVlIHNldCBodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My1BZ2VHcm91cE9ic2VydmF0aW9uVmFsdWUuXHJcbiAgICovXHJcbiAgQWdlUmFuZ2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBZ2UgUmFuZ2VcIixcclxuICAgIGNvZGU6IFwiYWdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS91c2FnZS1jb250ZXh0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBmb2N1czogVGhlIGNsaW5pY2FsIGNvbmNlcHQocykgYWRkcmVzc2VkIGJ5IHRoZSBhcnRpZmFjdC4gRm9yIGV4YW1wbGUsIGRpc2Vhc2UsIGRpYWdub3N0aWMgdGVzdCBpbnRlcnByZXRhdGlvbiwgbWVkaWNhdGlvbiBvcmRlcmluZyBhcyBpbiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbmRpdGlvbi1jb2RlLlxyXG4gICAqL1xyXG4gIENsaW5pY2FsRm9jdXM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDbGluaWNhbCBGb2N1c1wiLFxyXG4gICAgY29kZTogXCJmb2N1c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdXNhZ2UtY29udGV4dC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZ2VuZGVyOiBUaGUgZ2VuZGVyIG9mIHRoZSBwYXRpZW50LiBGb3IgdGhpcyBjb250ZXh0IHR5cGUsIGFwcHJvcHJpYXRlIHZhbHVlcyBjYW4gYmUgZm91bmQgaW4gdGhlIGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWRtaW5pc3RyYXRpdmUtZ2VuZGVyIHZhbHVlIHNldC5cclxuICAgKi9cclxuICBHZW5kZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJHZW5kZXJcIixcclxuICAgIGNvZGU6IFwiZ2VuZGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS91c2FnZS1jb250ZXh0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwcm9ncmFtOiBBIHByb2dyYW0vcHJvamVjdCBvZiB3b3JrIGZvciB3aGljaCB0aGlzIGFydGlmYWN0IGlzIGFwcGxpY2FibGUuXHJcbiAgICovXHJcbiAgUHJvZ3JhbTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlByb2dyYW1cIixcclxuICAgIGNvZGU6IFwicHJvZ3JhbVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdXNhZ2UtY29udGV4dC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc3BlY2llczogVGhlIHNwZWNpZXMgdG8gd2hpY2ggYW4gYXJ0aWZhY3QgYXBwbGllcy4gRm9yIGV4YW1wbGUsIFNOT01FRCAtIDM4Nzk2MTAwNCB8IEtpbmdkb20gQW5pbWFsaWEgKG9yZ2FuaXNtKS5cclxuICAgKi9cclxuICBTcGVjaWVzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3BlY2llc1wiLFxyXG4gICAgY29kZTogXCJzcGVjaWVzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS91c2FnZS1jb250ZXh0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB0YXNrOiBUaGUgY29udGV4dCBmb3IgdGhlIGNsaW5pY2FsIHRhc2socykgcmVwcmVzZW50ZWQgYnkgdGhpcyBhcnRpZmFjdC4gRm9yIGV4YW1wbGUsIHRoaXMgY291bGQgYmUgYW55IHRhc2sgY29udGV4dCByZXByZXNlbnRlZCBieSB0aGUgSEw3IEFjdFRhc2tDb2RlIHZhbHVlIHNldCBodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My1BY3RUYXNrQ29kZS4gR2VuZXJhbCBjYXRlZ29yaWVzIGluY2x1ZGU6IG9yZGVyIGVudHJ5LCBwYXRpZW50IGRvY3VtZW50YXRpb24gYW5kIHBhdGllbnQgaW5mb3JtYXRpb24gcmV2aWV3LlxyXG4gICAqL1xyXG4gIFdvcmtmbG93VGFzazogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIldvcmtmbG93IFRhc2tcIixcclxuICAgIGNvZGU6IFwidGFza1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdXNhZ2UtY29udGV4dC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdXNlcjogVGhlIGNsaW5pY2FsIHNwZWNpYWx0eSBvZiB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgcGF0aWVudCBpcyBiZWluZyB0cmVhdGVkIC0gRm9yIGV4YW1wbGUsIFBDUCwgUGF0aWVudCwgQ2FyZGlvbG9naXN0LCBCZWhhdmlvcmFsIFByb2Zlc3Npb25hbCwgT3JhbCBIZWFsdGggUHJvZmVzc2lvbmFsLCBQcmVzY3JpYmVyLCBldGMuLi4gdGFrZW4gZnJvbSBhIHNwZWNpYWx0eSB2YWx1ZSBzZXQgc3VjaCBhcyB0aGUgTlVDQyBIZWFsdGggQ2FyZSBwcm92aWRlciB0YXhvbm9teSB2YWx1ZSBzZXQgaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9wcm92aWRlci10YXhvbm9teS5cclxuICAgKi9cclxuICBVc2VyVHlwZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVzZXIgVHlwZVwiLFxyXG4gICAgY29kZTogXCJ1c2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS91c2FnZS1jb250ZXh0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB2ZW51ZTogVGhlIHZlbnVlIGluIHdoaWNoIGFuIGFydGlmYWN0IGNvdWxkIGJlIHVzZWQuIEZvciBleGFtcGxlLCBPdXRwYXRpZW50LCBJbnBhdGllbnQsIEhvbWUsIE51cnNpbmcgaG9tZS4gVGhlIGNvZGUgdmFsdWUgbWF5IG9yaWdpbmF0ZSBmcm9tIHRoZSBITDcgU2VydmljZURlbGl2ZXJ5TG9jYXRpb25Sb2xlVHlwZSB2YWx1ZSBzZXQgKGh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL1ZhbHVlU2V0L3YzLVNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uUm9sZVR5cGUpLlxyXG4gICAqL1xyXG4gIENsaW5pY2FsVmVudWU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDbGluaWNhbCBWZW51ZVwiLFxyXG4gICAgY29kZTogXCJ2ZW51ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdXNhZ2UtY29udGV4dC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogd29ya2Zsb3c6IFRoZSBzZXR0aW5ncyBpbiB3aGljaCB0aGUgYXJ0aWZhY3QgaXMgaW50ZW5kZWQgZm9yIHVzZS4gRm9yIGV4YW1wbGUsIGFkbWlzc2lvbiwgcHJlLW9wLCBldGMuIEZvciBleGFtcGxlLCB0aGUgQWN0RW5jb3VudGVyQ29kZSB2YWx1ZSBzZXQgaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvVmFsdWVTZXQvdjMtQWN0RW5jb3VudGVyQ29kZS5cclxuICAgKi9cclxuICBXb3JrZmxvd1NldHRpbmc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJXb3JrZmxvdyBTZXR0aW5nXCIsXHJcbiAgICBjb2RlOiBcIndvcmtmbG93XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS91c2FnZS1jb250ZXh0LXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBBIGNvZGUgdGhhdCBzcGVjaWZpZXMgYSB0eXBlIG9mIGNvbnRleHQgYmVpbmcgc3BlY2lmaWVkIGJ5IGEgdXNhZ2UgY29udGV4dC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFVzYWdlQ29udGV4dFR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIFVzYWdlQ29udGV4dFR5cGVDb2RpbmdzO1xyXG4iXX0=