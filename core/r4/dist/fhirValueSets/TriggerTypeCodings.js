// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/trigger-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The type of trigger.
 */
export const TriggerTypeCodings = {
    /**
     * data-access-ended: The trigger occurs whenever access to data of a particular type is completed.
     */
    DataAccessEnded: new Coding({
        display: "Data Access Ended",
        code: "data-access-ended",
        system: "http://hl7.org/fhir/trigger-type",
    }),
    /**
     * data-accessed: The trigger occurs whenever data of a particular type is accessed.
     */
    DataAccessed: new Coding({
        display: "Data Accessed",
        code: "data-accessed",
        system: "http://hl7.org/fhir/trigger-type",
    }),
    /**
     * data-added: The trigger occurs whenever data of a particular type is added.
     */
    DataAdded: new Coding({
        display: "Data Added",
        code: "data-added",
        system: "http://hl7.org/fhir/trigger-type",
    }),
    /**
     * data-changed: The trigger occurs whenever data of a particular type is changed in any way, either added, modified, or removed.
     */
    DataChanged: new Coding({
        display: "Data Changed",
        code: "data-changed",
        system: "http://hl7.org/fhir/trigger-type",
    }),
    /**
     * data-modified: The trigger occurs whenever data of a particular type is modified.
     */
    DataUpdated: new Coding({
        display: "Data Updated",
        code: "data-modified",
        system: "http://hl7.org/fhir/trigger-type",
    }),
    /**
     * data-removed: The trigger occurs whenever data of a particular type is removed.
     */
    DataRemoved: new Coding({
        display: "Data Removed",
        code: "data-removed",
        system: "http://hl7.org/fhir/trigger-type",
    }),
    /**
     * named-event: The trigger occurs in response to a specific named event, and no other information about the trigger is specified. Named events are completely pre-coordinated, and the formal semantics of the trigger are not provided.
     */
    NamedEvent: new Coding({
        display: "Named Event",
        code: "named-event",
        system: "http://hl7.org/fhir/trigger-type",
    }),
    /**
     * periodic: The trigger occurs at a specific time or periodically as described by a timing or schedule. A periodic event cannot have any data elements, but may have a name assigned as a shorthand for the event.
     */
    Periodic: new Coding({
        display: "Periodic",
        code: "periodic",
        system: "http://hl7.org/fhir/trigger-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJpZ2dlclR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UcmlnZ2VyVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBRWpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3RyaWdnZXItdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdHJpZ2dlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBUcmlnZ2VyVHlwZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1hY2Nlc3MtZW5kZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBhY2Nlc3MgdG8gZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgRGF0YUFjY2Vzc0VuZGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBBY2Nlc3MgRW5kZWRcIixcclxuICAgIGNvZGU6IFwiZGF0YS1hY2Nlc3MtZW5kZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWNjZXNzZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGFjY2Vzc2VkLlxyXG4gICAqL1xyXG4gIERhdGFBY2Nlc3NlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgQWNjZXNzZWRcIixcclxuICAgIGNvZGU6IFwiZGF0YS1hY2Nlc3NlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZGF0YS1hZGRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWRkZWQuXHJcbiAgICovXHJcbiAgRGF0YUFkZGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBBZGRlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWFkZGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkYXRhLWNoYW5nZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGNoYW5nZWQgaW4gYW55IHdheSwgZWl0aGVyIGFkZGVkLCBtb2RpZmllZCwgb3IgcmVtb3ZlZC5cclxuICAgKi9cclxuICBEYXRhQ2hhbmdlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgQ2hhbmdlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWNoYW5nZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtbW9kaWZpZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIG1vZGlmaWVkLlxyXG4gICAqL1xyXG4gIERhdGFVcGRhdGVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBVcGRhdGVkXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtbW9kaWZpZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtcmVtb3ZlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgcmVtb3ZlZC5cclxuICAgKi9cclxuICBEYXRhUmVtb3ZlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgUmVtb3ZlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLXJlbW92ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5hbWVkLWV2ZW50OiBUaGUgdHJpZ2dlciBvY2N1cnMgaW4gcmVzcG9uc2UgdG8gYSBzcGVjaWZpYyBuYW1lZCBldmVudCwgYW5kIG5vIG90aGVyIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0cmlnZ2VyIGlzIHNwZWNpZmllZC4gTmFtZWQgZXZlbnRzIGFyZSBjb21wbGV0ZWx5IHByZS1jb29yZGluYXRlZCwgYW5kIHRoZSBmb3JtYWwgc2VtYW50aWNzIG9mIHRoZSB0cmlnZ2VyIGFyZSBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgTmFtZWRFdmVudDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5hbWVkIEV2ZW50XCIsXHJcbiAgICBjb2RlOiBcIm5hbWVkLWV2ZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwZXJpb2RpYzogVGhlIHRyaWdnZXIgb2NjdXJzIGF0IGEgc3BlY2lmaWMgdGltZSBvciBwZXJpb2RpY2FsbHkgYXMgZGVzY3JpYmVkIGJ5IGEgdGltaW5nIG9yIHNjaGVkdWxlLiBBIHBlcmlvZGljIGV2ZW50IGNhbm5vdCBoYXZlIGFueSBkYXRhIGVsZW1lbnRzLCBidXQgbWF5IGhhdmUgYSBuYW1lIGFzc2lnbmVkIGFzIGEgc2hvcnRoYW5kIGZvciB0aGUgZXZlbnQuXHJcbiAgICovXHJcbiAgUGVyaW9kaWM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQZXJpb2RpY1wiLFxyXG4gICAgY29kZTogXCJwZXJpb2RpY1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdHJpZ2dlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIFRyaWdnZXJUeXBlQ29kaW5nVHlwZSA9IHR5cGVvZiBUcmlnZ2VyVHlwZUNvZGluZ3M7XHJcbiJdfQ==