// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/trigger-type|4.0.1
/**
 * The type of trigger.
 */
export const TriggerTypeCodings = {
    /**
     * data-access-ended: The trigger occurs whenever access to data of a particular type is completed.
     */
    DataAccessEnded: {
        display: "Data Access Ended",
        code: "data-access-ended",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-accessed: The trigger occurs whenever data of a particular type is accessed.
     */
    DataAccessed: {
        display: "Data Accessed",
        code: "data-accessed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-added: The trigger occurs whenever data of a particular type is added.
     */
    DataAdded: {
        display: "Data Added",
        code: "data-added",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-changed: The trigger occurs whenever data of a particular type is changed in any way, either added, modified, or removed.
     */
    DataChanged: {
        display: "Data Changed",
        code: "data-changed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-modified: The trigger occurs whenever data of a particular type is modified.
     */
    DataUpdated: {
        display: "Data Updated",
        code: "data-modified",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * data-removed: The trigger occurs whenever data of a particular type is removed.
     */
    DataRemoved: {
        display: "Data Removed",
        code: "data-removed",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * named-event: The trigger occurs in response to a specific named event, and no other information about the trigger is specified. Named events are completely pre-coordinated, and the formal semantics of the trigger are not provided.
     */
    NamedEvent: {
        display: "Named Event",
        code: "named-event",
        system: "http://hl7.org/fhir/trigger-type",
    },
    /**
     * periodic: The trigger occurs at a specific time or periodically as described by a timing or schedule. A periodic event cannot have any data elements, but may have a name assigned as a shorthand for the event.
     */
    Periodic: {
        display: "Periodic",
        code: "periodic",
        system: "http://hl7.org/fhir/trigger-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJpZ2dlclR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9UcmlnZ2VyVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBMENqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsa0NBQWtDO0tBQzNDO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC90cmlnZ2VyLXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiB0cmlnZ2VyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVHJpZ2dlclR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWNjZXNzLWVuZGVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgYWNjZXNzIHRvIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgY29tcGxldGVkLlxyXG4gICAqL1xyXG4gIERhdGFBY2Nlc3NFbmRlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzc2VkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBhY2Nlc3NlZC5cclxuICAgKi9cclxuICBEYXRhQWNjZXNzZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1hZGRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWRkZWQuXHJcbiAgICovXHJcbiAgRGF0YUFkZGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtY2hhbmdlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgY2hhbmdlZCBpbiBhbnkgd2F5LCBlaXRoZXIgYWRkZWQsIG1vZGlmaWVkLCBvciByZW1vdmVkLlxyXG4gICAqL1xyXG4gIERhdGFDaGFuZ2VkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtbW9kaWZpZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIG1vZGlmaWVkLlxyXG4gICAqL1xyXG4gIERhdGFVcGRhdGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtcmVtb3ZlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgcmVtb3ZlZC5cclxuICAgKi9cclxuICBEYXRhUmVtb3ZlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBuYW1lZC1ldmVudDogVGhlIHRyaWdnZXIgb2NjdXJzIGluIHJlc3BvbnNlIHRvIGEgc3BlY2lmaWMgbmFtZWQgZXZlbnQsIGFuZCBubyBvdGhlciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdHJpZ2dlciBpcyBzcGVjaWZpZWQuIE5hbWVkIGV2ZW50cyBhcmUgY29tcGxldGVseSBwcmUtY29vcmRpbmF0ZWQsIGFuZCB0aGUgZm9ybWFsIHNlbWFudGljcyBvZiB0aGUgdHJpZ2dlciBhcmUgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIE5hbWVkRXZlbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcGVyaW9kaWM6IFRoZSB0cmlnZ2VyIG9jY3VycyBhdCBhIHNwZWNpZmljIHRpbWUgb3IgcGVyaW9kaWNhbGx5IGFzIGRlc2NyaWJlZCBieSBhIHRpbWluZyBvciBzY2hlZHVsZS4gQSBwZXJpb2RpYyBldmVudCBjYW5ub3QgaGF2ZSBhbnkgZGF0YSBlbGVtZW50cywgYnV0IG1heSBoYXZlIGEgbmFtZSBhc3NpZ25lZCBhcyBhIHNob3J0aGFuZCBmb3IgdGhlIGV2ZW50LlxyXG4gICAqL1xyXG4gIFBlcmlvZGljOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdHJpZ2dlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBUcmlnZ2VyVHlwZUNvZGluZ3M6VHJpZ2dlclR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWNjZXNzLWVuZGVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgYWNjZXNzIHRvIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgY29tcGxldGVkLlxyXG4gICAqL1xyXG4gIERhdGFBY2Nlc3NFbmRlZDoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIEFjY2VzcyBFbmRlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWFjY2Vzcy1lbmRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRhLWFjY2Vzc2VkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBhY2Nlc3NlZC5cclxuICAgKi9cclxuICBEYXRhQWNjZXNzZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBBY2Nlc3NlZFwiLFxyXG4gICAgY29kZTogXCJkYXRhLWFjY2Vzc2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWRkZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGFkZGVkLlxyXG4gICAqL1xyXG4gIERhdGFBZGRlZDoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIEFkZGVkXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtYWRkZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZGF0YS1jaGFuZ2VkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBjaGFuZ2VkIGluIGFueSB3YXksIGVpdGhlciBhZGRlZCwgbW9kaWZpZWQsIG9yIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgRGF0YUNoYW5nZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBDaGFuZ2VkXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtY2hhbmdlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRhLW1vZGlmaWVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBtb2RpZmllZC5cclxuICAgKi9cclxuICBEYXRhVXBkYXRlZDoge1xyXG4gICAgZGlzcGxheTogXCJEYXRhIFVwZGF0ZWRcIixcclxuICAgIGNvZGU6IFwiZGF0YS1tb2RpZmllZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBkYXRhLXJlbW92ZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgRGF0YVJlbW92ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBSZW1vdmVkXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtcmVtb3ZlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdHJpZ2dlci10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuYW1lZC1ldmVudDogVGhlIHRyaWdnZXIgb2NjdXJzIGluIHJlc3BvbnNlIHRvIGEgc3BlY2lmaWMgbmFtZWQgZXZlbnQsIGFuZCBubyBvdGhlciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdHJpZ2dlciBpcyBzcGVjaWZpZWQuIE5hbWVkIGV2ZW50cyBhcmUgY29tcGxldGVseSBwcmUtY29vcmRpbmF0ZWQsIGFuZCB0aGUgZm9ybWFsIHNlbWFudGljcyBvZiB0aGUgdHJpZ2dlciBhcmUgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIE5hbWVkRXZlbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiTmFtZWQgRXZlbnRcIixcclxuICAgIGNvZGU6IFwibmFtZWQtZXZlbnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3RyaWdnZXItdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGVyaW9kaWM6IFRoZSB0cmlnZ2VyIG9jY3VycyBhdCBhIHNwZWNpZmljIHRpbWUgb3IgcGVyaW9kaWNhbGx5IGFzIGRlc2NyaWJlZCBieSBhIHRpbWluZyBvciBzY2hlZHVsZS4gQSBwZXJpb2RpYyBldmVudCBjYW5ub3QgaGF2ZSBhbnkgZGF0YSBlbGVtZW50cywgYnV0IG1heSBoYXZlIGEgbmFtZSBhc3NpZ25lZCBhcyBhIHNob3J0aGFuZCBmb3IgdGhlIGV2ZW50LlxyXG4gICAqL1xyXG4gIFBlcmlvZGljOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlcmlvZGljXCIsXHJcbiAgICBjb2RlOiBcInBlcmlvZGljXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci90cmlnZ2VyLXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=