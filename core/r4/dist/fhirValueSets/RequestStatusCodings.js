// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/request-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes identifying the lifecycle stage of a request.
 */
export const RequestStatusCodings = {
    /**
     * active: The request is in force and ready to be acted upon.
     */
    Active: new Coding({
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/request-status",
    }),
    /**
     * completed: The activity described by the request has been fully performed.  No further activity will occur.
     */
    Completed: new Coding({
        display: "Completed",
        code: "completed",
        system: "http://hl7.org/fhir/request-status",
    }),
    /**
     * draft: The request has been created but is not yet complete or ready for action.
     */
    Draft: new Coding({
        display: "Draft",
        code: "draft",
        system: "http://hl7.org/fhir/request-status",
    }),
    /**
     * entered-in-error: This request should never have existed and should be considered 'void'.  (It is possible that real-world decisions were based on it.  If real-world activity has occurred, the status should be "revoked" rather than "entered-in-error".).
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/request-status",
    }),
    /**
     * on-hold: The request (and any implicit authorization to act) has been temporarily withdrawn but is expected to resume in the future.
     */
    OnHold: new Coding({
        display: "On Hold",
        code: "on-hold",
        system: "http://hl7.org/fhir/request-status",
    }),
    /**
     * revoked: The request (and any implicit authorization to act) has been terminated prior to the known full completion of the intended actions.  No further activity should occur.
     */
    Revoked: new Coding({
        display: "Revoked",
        code: "revoked",
        system: "http://hl7.org/fhir/request-status",
    }),
    /**
     * unknown: The authoring/source system does not know which of the status values currently applies for this request.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply,  but the authoring/source system does not know which.
     */
    Unknown: new Coding({
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/request-status",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdFN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1JlcXVlc3RTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQUVuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQzs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9DQUFvQztLQUM3QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9DQUFvQztLQUM3QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcmVxdWVzdC1zdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENvZGVzIGlkZW50aWZ5aW5nIHRoZSBsaWZlY3ljbGUgc3RhZ2Ugb2YgYSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFJlcXVlc3RTdGF0dXNDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjdGl2ZTogVGhlIHJlcXVlc3QgaXMgaW4gZm9yY2UgYW5kIHJlYWR5IHRvIGJlIGFjdGVkIHVwb24uXHJcbiAgICovXHJcbiAgQWN0aXZlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImFjdGl2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcmVxdWVzdC1zdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjb21wbGV0ZWQ6IFRoZSBhY3Rpdml0eSBkZXNjcmliZWQgYnkgdGhlIHJlcXVlc3QgaGFzIGJlZW4gZnVsbHkgcGVyZm9ybWVkLiAgTm8gZnVydGhlciBhY3Rpdml0eSB3aWxsIG9jY3VyLlxyXG4gICAqL1xyXG4gIENvbXBsZXRlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbXBsZXRlZFwiLFxyXG4gICAgY29kZTogXCJjb21wbGV0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IFRoZSByZXF1ZXN0IGhhcyBiZWVuIGNyZWF0ZWQgYnV0IGlzIG5vdCB5ZXQgY29tcGxldGUgb3IgcmVhZHkgZm9yIGFjdGlvbi5cclxuICAgKi9cclxuICBEcmFmdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRyYWZ0XCIsXHJcbiAgICBjb2RlOiBcImRyYWZ0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoaXMgcmVxdWVzdCBzaG91bGQgbmV2ZXIgaGF2ZSBleGlzdGVkIGFuZCBzaG91bGQgYmUgY29uc2lkZXJlZCAndm9pZCcuICAoSXQgaXMgcG9zc2libGUgdGhhdCByZWFsLXdvcmxkIGRlY2lzaW9ucyB3ZXJlIGJhc2VkIG9uIGl0LiAgSWYgcmVhbC13b3JsZCBhY3Rpdml0eSBoYXMgb2NjdXJyZWQsIHRoZSBzdGF0dXMgc2hvdWxkIGJlIFwicmV2b2tlZFwiIHJhdGhlciB0aGFuIFwiZW50ZXJlZC1pbi1lcnJvclwiLikuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogVGhlIHJlcXVlc3QgKGFuZCBhbnkgaW1wbGljaXQgYXV0aG9yaXphdGlvbiB0byBhY3QpIGhhcyBiZWVuIHRlbXBvcmFyaWx5IHdpdGhkcmF3biBidXQgaXMgZXhwZWN0ZWQgdG8gcmVzdW1lIGluIHRoZSBmdXR1cmUuXHJcbiAgICovXHJcbiAgT25Ib2xkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiT24gSG9sZFwiLFxyXG4gICAgY29kZTogXCJvbi1ob2xkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJldm9rZWQ6IFRoZSByZXF1ZXN0IChhbmQgYW55IGltcGxpY2l0IGF1dGhvcml6YXRpb24gdG8gYWN0KSBoYXMgYmVlbiB0ZXJtaW5hdGVkIHByaW9yIHRvIHRoZSBrbm93biBmdWxsIGNvbXBsZXRpb24gb2YgdGhlIGludGVuZGVkIGFjdGlvbnMuICBObyBmdXJ0aGVyIGFjdGl2aXR5IHNob3VsZCBvY2N1ci5cclxuICAgKi9cclxuICBSZXZva2VkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmV2b2tlZFwiLFxyXG4gICAgY29kZTogXCJyZXZva2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9yZXF1ZXN0LXN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHVua25vd246IFRoZSBhdXRob3Jpbmcvc291cmNlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoIG9mIHRoZSBzdGF0dXMgdmFsdWVzIGN1cnJlbnRseSBhcHBsaWVzIGZvciB0aGlzIHJlcXVlc3QuICBOb3RlOiBUaGlzIGNvbmNlcHQgaXMgbm90IHRvIGJlIHVzZWQgZm9yIFwib3RoZXJcIiAtIG9uZSBvZiB0aGUgbGlzdGVkIHN0YXR1c2VzIGlzIHByZXN1bWVkIHRvIGFwcGx5LCAgYnV0IHRoZSBhdXRob3Jpbmcvc291cmNlIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoLlxyXG4gICAqL1xyXG4gIFVua25vd246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJVbmtub3duXCIsXHJcbiAgICBjb2RlOiBcInVua25vd25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3JlcXVlc3Qtc3RhdHVzXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogQ29kZXMgaWRlbnRpZnlpbmcgdGhlIGxpZmVjeWNsZSBzdGFnZSBvZiBhIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZXF1ZXN0U3RhdHVzQ29kaW5nVHlwZSA9IHR5cGVvZiBSZXF1ZXN0U3RhdHVzQ29kaW5ncztcclxuIl19