// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/certainty-subcomponent-type|4.0.1
/**
 * The subcomponent classification of quality of evidence rating systems.
 */
export const CertaintySubcomponentTypeCodings = {
    /**
     * DoseResponseGradient: higher certainty due to dose response relationship.
     */
    DoseResponseGradient: {
        display: "Dose response gradient",
        code: "DoseResponseGradient",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
    /**
     * Imprecision: High quality evidence.
     */
    Imprecision: {
        display: "Imprecision",
        code: "Imprecision",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
    /**
     * Inconsistency: concerns that findings are not similar enough to support certainty.
     */
    Inconsistency: {
        display: "Inconsistency",
        code: "Inconsistency",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
    /**
     * Indirectness: concerns reducing external validity.
     */
    Indirectness: {
        display: "Indirectness",
        code: "Indirectness",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
    /**
     * LargeEffect: higher certainty due to large effect size.
     */
    LargeEffect: {
        display: "Large effect",
        code: "LargeEffect",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
    /**
     * PlausibleConfounding: higher certainty due to risk of bias in opposite direction.
     */
    PlausibleConfounding: {
        display: "Plausible confounding",
        code: "PlausibleConfounding",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
    /**
     * PublicationBias: likelihood that what is published misrepresents what is available to publish.
     */
    PublicationBias: {
        display: "Publication bias",
        code: "PublicationBias",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
    /**
     * RiskOfBias: methodologic concerns reducing internal validity.
     */
    RiskOfBias: {
        display: "Risk of bias",
        code: "RiskOfBias",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2VydGFpbnR5U3ViY29tcG9uZW50VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NlcnRhaW50eVN1YmNvbXBvbmVudFR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGdGQUFnRjtBQTBDaEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBdUM7SUFDbEY7O09BRUc7SUFDSCxvQkFBb0IsRUFBRTtRQUNwQixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RTtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RTtJQUNEOztPQUVHO0lBQ0gsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RTtJQUNEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsc0JBQXNCO1FBQzVCLE1BQU0sRUFBRSxtRUFBbUU7S0FDNUU7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jZXJ0YWludHktc3ViY29tcG9uZW50LXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgc3ViY29tcG9uZW50IGNsYXNzaWZpY2F0aW9uIG9mIHF1YWxpdHkgb2YgZXZpZGVuY2UgcmF0aW5nIHN5c3RlbXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDZXJ0YWludHlTdWJjb21wb25lbnRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBEb3NlUmVzcG9uc2VHcmFkaWVudDogaGlnaGVyIGNlcnRhaW50eSBkdWUgdG8gZG9zZSByZXNwb25zZSByZWxhdGlvbnNoaXAuXHJcbiAgICovXHJcbiAgRG9zZVJlc3BvbnNlR3JhZGllbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW1wcmVjaXNpb246IEhpZ2ggcXVhbGl0eSBldmlkZW5jZS5cclxuICAgKi9cclxuICBJbXByZWNpc2lvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBJbmNvbnNpc3RlbmN5OiBjb25jZXJucyB0aGF0IGZpbmRpbmdzIGFyZSBub3Qgc2ltaWxhciBlbm91Z2ggdG8gc3VwcG9ydCBjZXJ0YWludHkuXHJcbiAgICovXHJcbiAgSW5jb25zaXN0ZW5jeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBJbmRpcmVjdG5lc3M6IGNvbmNlcm5zIHJlZHVjaW5nIGV4dGVybmFsIHZhbGlkaXR5LlxyXG4gICAqL1xyXG4gIEluZGlyZWN0bmVzczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBMYXJnZUVmZmVjdDogaGlnaGVyIGNlcnRhaW50eSBkdWUgdG8gbGFyZ2UgZWZmZWN0IHNpemUuXHJcbiAgICovXHJcbiAgTGFyZ2VFZmZlY3Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUGxhdXNpYmxlQ29uZm91bmRpbmc6IGhpZ2hlciBjZXJ0YWludHkgZHVlIHRvIHJpc2sgb2YgYmlhcyBpbiBvcHBvc2l0ZSBkaXJlY3Rpb24uXHJcbiAgICovXHJcbiAgUGxhdXNpYmxlQ29uZm91bmRpbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUHVibGljYXRpb25CaWFzOiBsaWtlbGlob29kIHRoYXQgd2hhdCBpcyBwdWJsaXNoZWQgbWlzcmVwcmVzZW50cyB3aGF0IGlzIGF2YWlsYWJsZSB0byBwdWJsaXNoLlxyXG4gICAqL1xyXG4gIFB1YmxpY2F0aW9uQmlhczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBSaXNrT2ZCaWFzOiBtZXRob2RvbG9naWMgY29uY2VybnMgcmVkdWNpbmcgaW50ZXJuYWwgdmFsaWRpdHkuXHJcbiAgICovXHJcbiAgUmlza09mQmlhczogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBzdWJjb21wb25lbnQgY2xhc3NpZmljYXRpb24gb2YgcXVhbGl0eSBvZiBldmlkZW5jZSByYXRpbmcgc3lzdGVtcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDZXJ0YWludHlTdWJjb21wb25lbnRUeXBlQ29kaW5nczpDZXJ0YWludHlTdWJjb21wb25lbnRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBEb3NlUmVzcG9uc2VHcmFkaWVudDogaGlnaGVyIGNlcnRhaW50eSBkdWUgdG8gZG9zZSByZXNwb25zZSByZWxhdGlvbnNoaXAuXHJcbiAgICovXHJcbiAgRG9zZVJlc3BvbnNlR3JhZGllbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiRG9zZSByZXNwb25zZSBncmFkaWVudFwiLFxyXG4gICAgY29kZTogXCJEb3NlUmVzcG9uc2VHcmFkaWVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXN1YmNvbXBvbmVudC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBJbXByZWNpc2lvbjogSGlnaCBxdWFsaXR5IGV2aWRlbmNlLlxyXG4gICAqL1xyXG4gIEltcHJlY2lzaW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkltcHJlY2lzaW9uXCIsXHJcbiAgICBjb2RlOiBcIkltcHJlY2lzaW9uXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktc3ViY29tcG9uZW50LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEluY29uc2lzdGVuY3k6IGNvbmNlcm5zIHRoYXQgZmluZGluZ3MgYXJlIG5vdCBzaW1pbGFyIGVub3VnaCB0byBzdXBwb3J0IGNlcnRhaW50eS5cclxuICAgKi9cclxuICBJbmNvbnNpc3RlbmN5OiB7XHJcbiAgICBkaXNwbGF5OiBcIkluY29uc2lzdGVuY3lcIixcclxuICAgIGNvZGU6IFwiSW5jb25zaXN0ZW5jeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXN1YmNvbXBvbmVudC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBJbmRpcmVjdG5lc3M6IGNvbmNlcm5zIHJlZHVjaW5nIGV4dGVybmFsIHZhbGlkaXR5LlxyXG4gICAqL1xyXG4gIEluZGlyZWN0bmVzczoge1xyXG4gICAgZGlzcGxheTogXCJJbmRpcmVjdG5lc3NcIixcclxuICAgIGNvZGU6IFwiSW5kaXJlY3RuZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktc3ViY29tcG9uZW50LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIExhcmdlRWZmZWN0OiBoaWdoZXIgY2VydGFpbnR5IGR1ZSB0byBsYXJnZSBlZmZlY3Qgc2l6ZS5cclxuICAgKi9cclxuICBMYXJnZUVmZmVjdDoge1xyXG4gICAgZGlzcGxheTogXCJMYXJnZSBlZmZlY3RcIixcclxuICAgIGNvZGU6IFwiTGFyZ2VFZmZlY3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NlcnRhaW50eS1zdWJjb21wb25lbnQtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUGxhdXNpYmxlQ29uZm91bmRpbmc6IGhpZ2hlciBjZXJ0YWludHkgZHVlIHRvIHJpc2sgb2YgYmlhcyBpbiBvcHBvc2l0ZSBkaXJlY3Rpb24uXHJcbiAgICovXHJcbiAgUGxhdXNpYmxlQ29uZm91bmRpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiUGxhdXNpYmxlIGNvbmZvdW5kaW5nXCIsXHJcbiAgICBjb2RlOiBcIlBsYXVzaWJsZUNvbmZvdW5kaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktc3ViY29tcG9uZW50LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFB1YmxpY2F0aW9uQmlhczogbGlrZWxpaG9vZCB0aGF0IHdoYXQgaXMgcHVibGlzaGVkIG1pc3JlcHJlc2VudHMgd2hhdCBpcyBhdmFpbGFibGUgdG8gcHVibGlzaC5cclxuICAgKi9cclxuICBQdWJsaWNhdGlvbkJpYXM6IHtcclxuICAgIGRpc3BsYXk6IFwiUHVibGljYXRpb24gYmlhc1wiLFxyXG4gICAgY29kZTogXCJQdWJsaWNhdGlvbkJpYXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NlcnRhaW50eS1zdWJjb21wb25lbnQtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUmlza09mQmlhczogbWV0aG9kb2xvZ2ljIGNvbmNlcm5zIHJlZHVjaW5nIGludGVybmFsIHZhbGlkaXR5LlxyXG4gICAqL1xyXG4gIFJpc2tPZkJpYXM6IHtcclxuICAgIGRpc3BsYXk6IFwiUmlzayBvZiBiaWFzXCIsXHJcbiAgICBjb2RlOiBcIlJpc2tPZkJpYXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NlcnRhaW50eS1zdWJjb21wb25lbnQtdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==