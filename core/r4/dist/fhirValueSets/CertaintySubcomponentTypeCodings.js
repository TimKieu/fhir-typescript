// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/certainty-subcomponent-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The subcomponent classification of quality of evidence rating systems.
 */
export const CertaintySubcomponentTypeCodings = {
    /**
     * DoseResponseGradient: higher certainty due to dose response relationship.
     */
    DoseResponseGradient: new Coding({
        display: "Dose response gradient",
        code: "DoseResponseGradient",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
    /**
     * Imprecision: High quality evidence.
     */
    Imprecision: new Coding({
        display: "Imprecision",
        code: "Imprecision",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
    /**
     * Inconsistency: concerns that findings are not similar enough to support certainty.
     */
    Inconsistency: new Coding({
        display: "Inconsistency",
        code: "Inconsistency",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
    /**
     * Indirectness: concerns reducing external validity.
     */
    Indirectness: new Coding({
        display: "Indirectness",
        code: "Indirectness",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
    /**
     * LargeEffect: higher certainty due to large effect size.
     */
    LargeEffect: new Coding({
        display: "Large effect",
        code: "LargeEffect",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
    /**
     * PlausibleConfounding: higher certainty due to risk of bias in opposite direction.
     */
    PlausibleConfounding: new Coding({
        display: "Plausible confounding",
        code: "PlausibleConfounding",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
    /**
     * PublicationBias: likelihood that what is published misrepresents what is available to publish.
     */
    PublicationBias: new Coding({
        display: "Publication bias",
        code: "PublicationBias",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
    /**
     * RiskOfBias: methodologic concerns reducing internal validity.
     */
    RiskOfBias: new Coding({
        display: "Risk of bias",
        code: "RiskOfBias",
        system: "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2VydGFpbnR5U3ViY29tcG9uZW50VHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NlcnRhaW50eVN1YmNvbXBvbmVudFR5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGdGQUFnRjtBQUVoRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRztJQUM5Qzs7T0FFRztJQUNILG9CQUFvQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQy9CLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFLENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFLENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFLENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFLENBQUM7SUFDRjs7T0FFRztJQUNILG9CQUFvQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQy9CLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixNQUFNLEVBQUUsbUVBQW1FO0tBQzVFLENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLG1FQUFtRTtLQUM1RSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jZXJ0YWludHktc3ViY29tcG9uZW50LXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBzdWJjb21wb25lbnQgY2xhc3NpZmljYXRpb24gb2YgcXVhbGl0eSBvZiBldmlkZW5jZSByYXRpbmcgc3lzdGVtcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDZXJ0YWludHlTdWJjb21wb25lbnRUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBEb3NlUmVzcG9uc2VHcmFkaWVudDogaGlnaGVyIGNlcnRhaW50eSBkdWUgdG8gZG9zZSByZXNwb25zZSByZWxhdGlvbnNoaXAuXHJcbiAgICovXHJcbiAgRG9zZVJlc3BvbnNlR3JhZGllbnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEb3NlIHJlc3BvbnNlIGdyYWRpZW50XCIsXHJcbiAgICBjb2RlOiBcIkRvc2VSZXNwb25zZUdyYWRpZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktc3ViY29tcG9uZW50LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBJbXByZWNpc2lvbjogSGlnaCBxdWFsaXR5IGV2aWRlbmNlLlxyXG4gICAqL1xyXG4gIEltcHJlY2lzaW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW1wcmVjaXNpb25cIixcclxuICAgIGNvZGU6IFwiSW1wcmVjaXNpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NlcnRhaW50eS1zdWJjb21wb25lbnQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEluY29uc2lzdGVuY3k6IGNvbmNlcm5zIHRoYXQgZmluZGluZ3MgYXJlIG5vdCBzaW1pbGFyIGVub3VnaCB0byBzdXBwb3J0IGNlcnRhaW50eS5cclxuICAgKi9cclxuICBJbmNvbnNpc3RlbmN5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW5jb25zaXN0ZW5jeVwiLFxyXG4gICAgY29kZTogXCJJbmNvbnNpc3RlbmN5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jZXJ0YWludHktc3ViY29tcG9uZW50LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBJbmRpcmVjdG5lc3M6IGNvbmNlcm5zIHJlZHVjaW5nIGV4dGVybmFsIHZhbGlkaXR5LlxyXG4gICAqL1xyXG4gIEluZGlyZWN0bmVzczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluZGlyZWN0bmVzc1wiLFxyXG4gICAgY29kZTogXCJJbmRpcmVjdG5lc3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NlcnRhaW50eS1zdWJjb21wb25lbnQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIExhcmdlRWZmZWN0OiBoaWdoZXIgY2VydGFpbnR5IGR1ZSB0byBsYXJnZSBlZmZlY3Qgc2l6ZS5cclxuICAgKi9cclxuICBMYXJnZUVmZmVjdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxhcmdlIGVmZmVjdFwiLFxyXG4gICAgY29kZTogXCJMYXJnZUVmZmVjdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXN1YmNvbXBvbmVudC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUGxhdXNpYmxlQ29uZm91bmRpbmc6IGhpZ2hlciBjZXJ0YWludHkgZHVlIHRvIHJpc2sgb2YgYmlhcyBpbiBvcHBvc2l0ZSBkaXJlY3Rpb24uXHJcbiAgICovXHJcbiAgUGxhdXNpYmxlQ29uZm91bmRpbmc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQbGF1c2libGUgY29uZm91bmRpbmdcIixcclxuICAgIGNvZGU6IFwiUGxhdXNpYmxlQ29uZm91bmRpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NlcnRhaW50eS1zdWJjb21wb25lbnQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFB1YmxpY2F0aW9uQmlhczogbGlrZWxpaG9vZCB0aGF0IHdoYXQgaXMgcHVibGlzaGVkIG1pc3JlcHJlc2VudHMgd2hhdCBpcyBhdmFpbGFibGUgdG8gcHVibGlzaC5cclxuICAgKi9cclxuICBQdWJsaWNhdGlvbkJpYXM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQdWJsaWNhdGlvbiBiaWFzXCIsXHJcbiAgICBjb2RlOiBcIlB1YmxpY2F0aW9uQmlhc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXN1YmNvbXBvbmVudC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUmlza09mQmlhczogbWV0aG9kb2xvZ2ljIGNvbmNlcm5zIHJlZHVjaW5nIGludGVybmFsIHZhbGlkaXR5LlxyXG4gICAqL1xyXG4gIFJpc2tPZkJpYXM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSaXNrIG9mIGJpYXNcIixcclxuICAgIGNvZGU6IFwiUmlza09mQmlhc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY2VydGFpbnR5LXN1YmNvbXBvbmVudC10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHN1YmNvbXBvbmVudCBjbGFzc2lmaWNhdGlvbiBvZiBxdWFsaXR5IG9mIGV2aWRlbmNlIHJhdGluZyBzeXN0ZW1zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2VydGFpbnR5U3ViY29tcG9uZW50VHlwZUNvZGluZ1R5cGUgPSB0eXBlb2YgQ2VydGFpbnR5U3ViY29tcG9uZW50VHlwZUNvZGluZ3M7XHJcbiJdfQ==