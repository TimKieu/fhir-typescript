// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationdispense-status|4.0.1
/**
 * MedicationDispense Status Codes
 */
export const MedicationdispenseStatusCodes = {
    /**
     * cancelled: The dispensed product was not and will never be picked up by the patient.
     */
    Cancelled: "cancelled",
    /**
     * completed: The dispensed product has been picked up.
     */
    Completed: "completed",
    /**
     * declined: The dispense was declined and not performed.
     */
    Declined: "declined",
    /**
     * entered-in-error: The dispense was entered in error and therefore nullified.
     */
    EnteredInError: "entered-in-error",
    /**
     * in-progress: The dispensed product is ready for pickup.
     */
    InProgress: "in-progress",
    /**
     * on-hold: The dispense process is paused while waiting for an external event to reactivate the dispense.  For example, new stock has arrived or the prescriber has called.
     */
    OnHold: "on-hold",
    /**
     * preparation: The core event has not started yet, but some staging activities have begun (e.g. initial compounding or packaging of medication). Preparation stages may be tracked for billing purposes.
     */
    Preparation: "preparation",
    /**
     * stopped: Actions implied by the dispense have been permanently halted, before all of them occurred.
     */
    Stopped: "stopped",
    /**
     * unknown: The authoring system does not know which of the status values applies for this medication dispense.  Note: this concept is not to be used for other - one of the listed statuses is presumed to apply, it's just now known which one.
     */
    Unknown: "unknown",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01lZGljYXRpb25kaXNwZW5zZVN0YXR1c0NvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDhFQUE4RTtBQUU5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHO0lBQzNDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLGtCQUFrQjtJQUNsQzs7T0FFRztJQUNILFVBQVUsRUFBRSxhQUFhO0lBQ3pCOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFNBQVM7SUFDakI7O09BRUc7SUFDSCxXQUFXLEVBQUUsYUFBYTtJQUMxQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7Q0FDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lZGljYXRpb25kaXNwZW5zZS1zdGF0dXN8NC4wLjFcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uRGlzcGVuc2UgU3RhdHVzIENvZGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgZGlzcGVuc2VkIHByb2R1Y3Qgd2FzIG5vdCBhbmQgd2lsbCBuZXZlciBiZSBwaWNrZWQgdXAgYnkgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgQ2FuY2VsbGVkOiBcImNhbmNlbGxlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGNvbXBsZXRlZDogVGhlIGRpc3BlbnNlZCBwcm9kdWN0IGhhcyBiZWVuIHBpY2tlZCB1cC5cclxuICAgKi9cclxuICBDb21wbGV0ZWQ6IFwiY29tcGxldGVkXCIsXHJcbiAgLyoqXHJcbiAgICogZGVjbGluZWQ6IFRoZSBkaXNwZW5zZSB3YXMgZGVjbGluZWQgYW5kIG5vdCBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgRGVjbGluZWQ6IFwiZGVjbGluZWRcIixcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGUgZGlzcGVuc2Ugd2FzIGVudGVyZWQgaW4gZXJyb3IgYW5kIHRoZXJlZm9yZSBudWxsaWZpZWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgZGlzcGVuc2VkIHByb2R1Y3QgaXMgcmVhZHkgZm9yIHBpY2t1cC5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBcImluLXByb2dyZXNzXCIsXHJcbiAgLyoqXHJcbiAgICogb24taG9sZDogVGhlIGRpc3BlbnNlIHByb2Nlc3MgaXMgcGF1c2VkIHdoaWxlIHdhaXRpbmcgZm9yIGFuIGV4dGVybmFsIGV2ZW50IHRvIHJlYWN0aXZhdGUgdGhlIGRpc3BlbnNlLiAgRm9yIGV4YW1wbGUsIG5ldyBzdG9jayBoYXMgYXJyaXZlZCBvciB0aGUgcHJlc2NyaWJlciBoYXMgY2FsbGVkLlxyXG4gICAqL1xyXG4gIE9uSG9sZDogXCJvbi1ob2xkXCIsXHJcbiAgLyoqXHJcbiAgICogcHJlcGFyYXRpb246IFRoZSBjb3JlIGV2ZW50IGhhcyBub3Qgc3RhcnRlZCB5ZXQsIGJ1dCBzb21lIHN0YWdpbmcgYWN0aXZpdGllcyBoYXZlIGJlZ3VuIChlLmcuIGluaXRpYWwgY29tcG91bmRpbmcgb3IgcGFja2FnaW5nIG9mIG1lZGljYXRpb24pLiBQcmVwYXJhdGlvbiBzdGFnZXMgbWF5IGJlIHRyYWNrZWQgZm9yIGJpbGxpbmcgcHVycG9zZXMuXHJcbiAgICovXHJcbiAgUHJlcGFyYXRpb246IFwicHJlcGFyYXRpb25cIixcclxuICAvKipcclxuICAgKiBzdG9wcGVkOiBBY3Rpb25zIGltcGxpZWQgYnkgdGhlIGRpc3BlbnNlIGhhdmUgYmVlbiBwZXJtYW5lbnRseSBoYWx0ZWQsIGJlZm9yZSBhbGwgb2YgdGhlbSBvY2N1cnJlZC5cclxuICAgKi9cclxuICBTdG9wcGVkOiBcInN0b3BwZWRcIixcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgYXV0aG9yaW5nIHN5c3RlbSBkb2VzIG5vdCBrbm93IHdoaWNoIG9mIHRoZSBzdGF0dXMgdmFsdWVzIGFwcGxpZXMgZm9yIHRoaXMgbWVkaWNhdGlvbiBkaXNwZW5zZS4gIE5vdGU6IHRoaXMgY29uY2VwdCBpcyBub3QgdG8gYmUgdXNlZCBmb3Igb3RoZXIgLSBvbmUgb2YgdGhlIGxpc3RlZCBzdGF0dXNlcyBpcyBwcmVzdW1lZCB0byBhcHBseSwgaXQncyBqdXN0IG5vdyBrbm93biB3aGljaCBvbmUuXHJcbiAgICovXHJcbiAgVW5rbm93bjogXCJ1bmtub3duXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogTWVkaWNhdGlvbkRpc3BlbnNlIFN0YXR1cyBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZVR5cGUgPSB0eXBlb2YgTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZXNba2V5b2YgdHlwZW9mIE1lZGljYXRpb25kaXNwZW5zZVN0YXR1c0NvZGVzXTtcclxuIl19