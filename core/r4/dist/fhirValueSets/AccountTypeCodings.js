// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/account-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This examples value set defines the set of codes that can be used to represent the type of an account.
 */
export const AccountTypeCodings = {
    /**
     * _ActAccountCode: An account represents a grouping of financial transactions that are tracked and reported together with a single balance. 	 	Examples of account codes (types) are Patient billing accounts (collection of charges), Cost centers; Cash.
     */
    ActAccountCode: new Coding({
        display: "ActAccountCode",
        code: "_ActAccountCode",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * ACCTRECEIVABLE: An account for collecting charges, reversals, adjustments and payments, including deductibles, copayments, coinsurance (financial transactions) credited or debited to the account receivable account for a patient's encounter.
     */
    AccountReceivable: new Coding({
        display: "account receivable",
        code: "ACCTRECEIVABLE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * AE: American Express
     */
    AmericanExpress: new Coding({
        display: "American Express",
        code: "AE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * CASH: Cash
     */
    Cash: new Coding({
        display: "Cash",
        code: "CASH",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * CC: Description: Types of advance payment to be made on a plastic card usually issued by a financial institution used of purchasing services and/or products.
     */
    CreditCard: new Coding({
        display: "credit card",
        code: "CC",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * DN: Diner's Club
     */
    DinerQuoteSClub: new Coding({
        display: "Diner's Club",
        code: "DN",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * DV: Discover Card
     */
    DiscoverCard: new Coding({
        display: "Discover Card",
        code: "DV",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * MC: Master Card
     */
    MasterCard: new Coding({
        display: "Master Card",
        code: "MC",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * PBILLACCT: An account representing charges and credits (financial transactions) for a patient's encounter.
     */
    PatientBillingAccount: new Coding({
        display: "patient billing account",
        code: "PBILLACCT",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
    /**
     * V: Visa
     */
    Visa: new Coding({
        display: "Visa",
        code: "V",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjb3VudFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9BY2NvdW50VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBRWpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsa0RBQWtEO0tBQzNELENBQUM7SUFDRjs7T0FFRztJQUNILGlCQUFpQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixNQUFNLEVBQUUsa0RBQWtEO0tBQzNELENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsa0RBQWtEO0tBQzNELENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsa0RBQWtEO0tBQzNELENBQUM7SUFDRjs7T0FFRztJQUNILHFCQUFxQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hDLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hY2NvdW50LXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZXhhbXBsZXMgdmFsdWUgc2V0IGRlZmluZXMgdGhlIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgdHlwZSBvZiBhbiBhY2NvdW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEFjY291bnRUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBfQWN0QWNjb3VudENvZGU6IEFuIGFjY291bnQgcmVwcmVzZW50cyBhIGdyb3VwaW5nIG9mIGZpbmFuY2lhbCB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgdHJhY2tlZCBhbmQgcmVwb3J0ZWQgdG9nZXRoZXIgd2l0aCBhIHNpbmdsZSBiYWxhbmNlLiBcdCBcdEV4YW1wbGVzIG9mIGFjY291bnQgY29kZXMgKHR5cGVzKSBhcmUgUGF0aWVudCBiaWxsaW5nIGFjY291bnRzIChjb2xsZWN0aW9uIG9mIGNoYXJnZXMpLCBDb3N0IGNlbnRlcnM7IENhc2guXHJcbiAgICovXHJcbiAgQWN0QWNjb3VudENvZGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBY3RBY2NvdW50Q29kZVwiLFxyXG4gICAgY29kZTogXCJfQWN0QWNjb3VudENvZGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBBQ0NUUkVDRUlWQUJMRTogQW4gYWNjb3VudCBmb3IgY29sbGVjdGluZyBjaGFyZ2VzLCByZXZlcnNhbHMsIGFkanVzdG1lbnRzIGFuZCBwYXltZW50cywgaW5jbHVkaW5nIGRlZHVjdGlibGVzLCBjb3BheW1lbnRzLCBjb2luc3VyYW5jZSAoZmluYW5jaWFsIHRyYW5zYWN0aW9ucykgY3JlZGl0ZWQgb3IgZGViaXRlZCB0byB0aGUgYWNjb3VudCByZWNlaXZhYmxlIGFjY291bnQgZm9yIGEgcGF0aWVudCdzIGVuY291bnRlci5cclxuICAgKi9cclxuICBBY2NvdW50UmVjZWl2YWJsZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImFjY291bnQgcmVjZWl2YWJsZVwiLFxyXG4gICAgY29kZTogXCJBQ0NUUkVDRUlWQUJMRVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEFFOiBBbWVyaWNhbiBFeHByZXNzXHJcbiAgICovXHJcbiAgQW1lcmljYW5FeHByZXNzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQW1lcmljYW4gRXhwcmVzc1wiLFxyXG4gICAgY29kZTogXCJBRVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENBU0g6IENhc2hcclxuICAgKi9cclxuICBDYXNoOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2FzaFwiLFxyXG4gICAgY29kZTogXCJDQVNIXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RDb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ0M6IERlc2NyaXB0aW9uOiBUeXBlcyBvZiBhZHZhbmNlIHBheW1lbnQgdG8gYmUgbWFkZSBvbiBhIHBsYXN0aWMgY2FyZCB1c3VhbGx5IGlzc3VlZCBieSBhIGZpbmFuY2lhbCBpbnN0aXR1dGlvbiB1c2VkIG9mIHB1cmNoYXNpbmcgc2VydmljZXMgYW5kL29yIHByb2R1Y3RzLlxyXG4gICAqL1xyXG4gIENyZWRpdENhcmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJjcmVkaXQgY2FyZFwiLFxyXG4gICAgY29kZTogXCJDQ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEROOiBEaW5lcidzIENsdWJcclxuICAgKi9cclxuICBEaW5lclF1b3RlU0NsdWI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEaW5lcidzIENsdWJcIixcclxuICAgIGNvZGU6IFwiRE5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBEVjogRGlzY292ZXIgQ2FyZFxyXG4gICAqL1xyXG4gIERpc2NvdmVyQ2FyZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRpc2NvdmVyIENhcmRcIixcclxuICAgIGNvZGU6IFwiRFZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBNQzogTWFzdGVyIENhcmRcclxuICAgKi9cclxuICBNYXN0ZXJDYXJkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTWFzdGVyIENhcmRcIixcclxuICAgIGNvZGU6IFwiTUNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBQQklMTEFDQ1Q6IEFuIGFjY291bnQgcmVwcmVzZW50aW5nIGNoYXJnZXMgYW5kIGNyZWRpdHMgKGZpbmFuY2lhbCB0cmFuc2FjdGlvbnMpIGZvciBhIHBhdGllbnQncyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgUGF0aWVudEJpbGxpbmdBY2NvdW50OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwicGF0aWVudCBiaWxsaW5nIGFjY291bnRcIixcclxuICAgIGNvZGU6IFwiUEJJTExBQ0NUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RDb2RlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogVjogVmlzYVxyXG4gICAqL1xyXG4gIFZpc2E6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJWaXNhXCIsXHJcbiAgICBjb2RlOiBcIlZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGV4YW1wbGVzIHZhbHVlIHNldCBkZWZpbmVzIHRoZSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQgdGhlIHR5cGUgb2YgYW4gYWNjb3VudC5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFjY291bnRUeXBlQ29kaW5nVHlwZSA9IHR5cGVvZiBBY2NvdW50VHlwZUNvZGluZ3M7XHJcbiJdfQ==