// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/allergyintolerance-verification|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Preferred value set for AllergyIntolerance Verification Status.
 */
export const AllergyintoleranceVerificationCodings = {
    /**
     * confirmed: A high level of certainty about the propensity for a reaction to the identified substance, which may include clinical evidence by testing or rechallenge.
     */
    Confirmed: new Coding({
        display: "Confirmed",
        code: "confirmed",
        system: "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification",
    }),
    /**
     * entered-in-error: The statement was entered in error and is not valid.
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification",
    }),
    /**
     * refuted: A propensity for a reaction to the identified substance has been disputed or disproven with a sufficient level of clinical certainty to justify invalidating the assertion. This might or might not include testing or rechallenge.
     */
    Refuted: new Coding({
        display: "Refuted",
        code: "refuted",
        system: "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification",
    }),
    /**
     * unconfirmed: A low level of certainty about the propensity for a reaction to the identified substance.
     */
    Unconfirmed: new Coding({
        display: "Unconfirmed",
        code: "unconfirmed",
        system: "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWxsZXJneWludG9sZXJhbmNlVmVyaWZpY2F0aW9uQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQWxsZXJneWludG9sZXJhbmNlVmVyaWZpY2F0aW9uQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxvRkFBb0Y7QUFFcEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUNBQXFDLEdBQUc7SUFDbkQ7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHVFQUF1RTtLQUNoRixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSx1RUFBdUU7S0FDaEYsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHVFQUF1RTtLQUNoRixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHVFQUF1RTtLQUNoRixDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hbGxlcmd5aW50b2xlcmFuY2UtdmVyaWZpY2F0aW9ufDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBQcmVmZXJyZWQgdmFsdWUgc2V0IGZvciBBbGxlcmd5SW50b2xlcmFuY2UgVmVyaWZpY2F0aW9uIFN0YXR1cy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBbGxlcmd5aW50b2xlcmFuY2VWZXJpZmljYXRpb25Db2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGNvbmZpcm1lZDogQSBoaWdoIGxldmVsIG9mIGNlcnRhaW50eSBhYm91dCB0aGUgcHJvcGVuc2l0eSBmb3IgYSByZWFjdGlvbiB0byB0aGUgaWRlbnRpZmllZCBzdWJzdGFuY2UsIHdoaWNoIG1heSBpbmNsdWRlIGNsaW5pY2FsIGV2aWRlbmNlIGJ5IHRlc3Rpbmcgb3IgcmVjaGFsbGVuZ2UuXHJcbiAgICovXHJcbiAgQ29uZmlybWVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29uZmlybWVkXCIsXHJcbiAgICBjb2RlOiBcImNvbmZpcm1lZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWxsZXJneWludG9sZXJhbmNlLXZlcmlmaWNhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGVudGVyZWQtaW4tZXJyb3I6IFRoZSBzdGF0ZW1lbnQgd2FzIGVudGVyZWQgaW4gZXJyb3IgYW5kIGlzIG5vdCB2YWxpZC5cclxuICAgKi9cclxuICBFbnRlcmVkSW5FcnJvcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWxsZXJneWludG9sZXJhbmNlLXZlcmlmaWNhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJlZnV0ZWQ6IEEgcHJvcGVuc2l0eSBmb3IgYSByZWFjdGlvbiB0byB0aGUgaWRlbnRpZmllZCBzdWJzdGFuY2UgaGFzIGJlZW4gZGlzcHV0ZWQgb3IgZGlzcHJvdmVuIHdpdGggYSBzdWZmaWNpZW50IGxldmVsIG9mIGNsaW5pY2FsIGNlcnRhaW50eSB0byBqdXN0aWZ5IGludmFsaWRhdGluZyB0aGUgYXNzZXJ0aW9uLiBUaGlzIG1pZ2h0IG9yIG1pZ2h0IG5vdCBpbmNsdWRlIHRlc3Rpbmcgb3IgcmVjaGFsbGVuZ2UuXHJcbiAgICovXHJcbiAgUmVmdXRlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlZnV0ZWRcIixcclxuICAgIGNvZGU6IFwicmVmdXRlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWxsZXJneWludG9sZXJhbmNlLXZlcmlmaWNhdGlvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHVuY29uZmlybWVkOiBBIGxvdyBsZXZlbCBvZiBjZXJ0YWludHkgYWJvdXQgdGhlIHByb3BlbnNpdHkgZm9yIGEgcmVhY3Rpb24gdG8gdGhlIGlkZW50aWZpZWQgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIFVuY29uZmlybWVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVW5jb25maXJtZWRcIixcclxuICAgIGNvZGU6IFwidW5jb25maXJtZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FsbGVyZ3lpbnRvbGVyYW5jZS12ZXJpZmljYXRpb25cIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBQcmVmZXJyZWQgdmFsdWUgc2V0IGZvciBBbGxlcmd5SW50b2xlcmFuY2UgVmVyaWZpY2F0aW9uIFN0YXR1cy5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFsbGVyZ3lpbnRvbGVyYW5jZVZlcmlmaWNhdGlvbkNvZGluZ1R5cGUgPSB0eXBlb2YgQWxsZXJneWludG9sZXJhbmNlVmVyaWZpY2F0aW9uQ29kaW5ncztcclxuIl19