// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/udi-entry-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes to identify how UDI data was entered.
 */
export const UdiEntryTypeCodings = {
    /**
     * barcode: a barcodescanner captured the data from the device label.
     */
    Barcode: new Coding({
        display: "Barcode",
        code: "barcode",
        system: "http://hl7.org/fhir/udi-entry-type",
    }),
    /**
     * card: The data originated from a patient's implant card and was read by an operator.
     */
    Card: new Coding({
        display: "Card",
        code: "card",
        system: "http://hl7.org/fhir/udi-entry-type",
    }),
    /**
     * manual: The data was read from the label by a person and manually entered. (e.g.  via a keyboard).
     */
    Manual: new Coding({
        display: "Manual",
        code: "manual",
        system: "http://hl7.org/fhir/udi-entry-type",
    }),
    /**
     * rfid: An RFID chip reader captured the data from the device label.
     */
    RFID: new Coding({
        display: "RFID",
        code: "rfid",
        system: "http://hl7.org/fhir/udi-entry-type",
    }),
    /**
     * self-reported: The data originated from a patient source and was not directly scanned or read from a label or card.
     */
    SelfReported: new Coding({
        display: "Self Reported",
        code: "self-reported",
        system: "http://hl7.org/fhir/udi-entry-type",
    }),
    /**
     * unknown: The method of data capture has not been determined.
     */
    Unknown: new Coding({
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/udi-entry-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVWRpRW50cnlUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVWRpRW50cnlUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxtRUFBbUU7QUFFbkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUc7SUFDakM7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsb0NBQW9DO0tBQzdDLENBQUM7SUFDRjs7T0FFRztJQUNILE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2YsT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxvQ0FBb0M7S0FDN0MsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9DQUFvQztLQUM3QyxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC91ZGktZW50cnktdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZXMgdG8gaWRlbnRpZnkgaG93IFVESSBkYXRhIHdhcyBlbnRlcmVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFVkaUVudHJ5VHlwZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYmFyY29kZTogYSBiYXJjb2Rlc2Nhbm5lciBjYXB0dXJlZCB0aGUgZGF0YSBmcm9tIHRoZSBkZXZpY2UgbGFiZWwuXHJcbiAgICovXHJcbiAgQmFyY29kZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJhcmNvZGVcIixcclxuICAgIGNvZGU6IFwiYmFyY29kZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdWRpLWVudHJ5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjYXJkOiBUaGUgZGF0YSBvcmlnaW5hdGVkIGZyb20gYSBwYXRpZW50J3MgaW1wbGFudCBjYXJkIGFuZCB3YXMgcmVhZCBieSBhbiBvcGVyYXRvci5cclxuICAgKi9cclxuICBDYXJkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2FyZFwiLFxyXG4gICAgY29kZTogXCJjYXJkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci91ZGktZW50cnktdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG1hbnVhbDogVGhlIGRhdGEgd2FzIHJlYWQgZnJvbSB0aGUgbGFiZWwgYnkgYSBwZXJzb24gYW5kIG1hbnVhbGx5IGVudGVyZWQuIChlLmcuICB2aWEgYSBrZXlib2FyZCkuXHJcbiAgICovXHJcbiAgTWFudWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTWFudWFsXCIsXHJcbiAgICBjb2RlOiBcIm1hbnVhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdWRpLWVudHJ5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZmlkOiBBbiBSRklEIGNoaXAgcmVhZGVyIGNhcHR1cmVkIHRoZSBkYXRhIGZyb20gdGhlIGRldmljZSBsYWJlbC5cclxuICAgKi9cclxuICBSRklEOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUkZJRFwiLFxyXG4gICAgY29kZTogXCJyZmlkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci91ZGktZW50cnktdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHNlbGYtcmVwb3J0ZWQ6IFRoZSBkYXRhIG9yaWdpbmF0ZWQgZnJvbSBhIHBhdGllbnQgc291cmNlIGFuZCB3YXMgbm90IGRpcmVjdGx5IHNjYW5uZWQgb3IgcmVhZCBmcm9tIGEgbGFiZWwgb3IgY2FyZC5cclxuICAgKi9cclxuICBTZWxmUmVwb3J0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTZWxmIFJlcG9ydGVkXCIsXHJcbiAgICBjb2RlOiBcInNlbGYtcmVwb3J0ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3VkaS1lbnRyeS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdW5rbm93bjogVGhlIG1ldGhvZCBvZiBkYXRhIGNhcHR1cmUgaGFzIG5vdCBiZWVuIGRldGVybWluZWQuXHJcbiAgICovXHJcbiAgVW5rbm93bjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVua25vd25cIixcclxuICAgIGNvZGU6IFwidW5rbm93blwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvdWRpLWVudHJ5LXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyB0byBpZGVudGlmeSBob3cgVURJIGRhdGEgd2FzIGVudGVyZWQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBVZGlFbnRyeVR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIFVkaUVudHJ5VHlwZUNvZGluZ3M7XHJcbiJdfQ==