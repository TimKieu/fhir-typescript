// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/servicerequest-orderdetail|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * An example value set of Codified order entry details concepts.  These concepts only make sense in the context of what is being ordered.  This example is for a patient ventilation order
 */
export const ServicerequestOrderdetailCodings = {
    /**
     * Code: 243144002
     */
    PatientTriggeredInspiratoryAssistanceProcedure: new Coding({
        display: "Patient triggered inspiratory assistance (procedure)",
        code: "243144002",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 243150007
     */
    AssistedControlledMandatoryVentilationProcedure: new Coding({
        display: "Assisted controlled mandatory ventilation (procedure)",
        code: "243150007",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 286812008
     */
    PressureControlledVentilationProcedure: new Coding({
        display: "Pressure controlled ventilation (procedure)",
        code: "286812008",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 47545007
     */
    ContinuousPositiveAirwayPressureVentilationTreatmentRegimeTherapy: new Coding({
        display: "Continuous positive airway pressure ventilation treatment (regime/therapy)",
        code: "47545007",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 59427005
     */
    SynchronizedIntermittentMandatoryVentilationProcedure: new Coding({
        display: "Synchronized intermittent mandatory ventilation (procedure)",
        code: "59427005",
        system: "http://snomed.info/sct",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZXJlcXVlc3RPcmRlcmRldGFpbENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlcnZpY2VyZXF1ZXN0T3JkZXJkZXRhaWxDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLCtFQUErRTtBQUUvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRztJQUM5Qzs7T0FFRztJQUNILDhDQUE4QyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pELE9BQU8sRUFBRSxzREFBc0Q7UUFDL0QsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCwrQ0FBK0MsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxRCxPQUFPLEVBQUUsdURBQXVEO1FBQ2hFLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsc0NBQXNDLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakQsT0FBTyxFQUFFLDZDQUE2QztRQUN0RCxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILGlFQUFpRSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzVFLE9BQU8sRUFBRSw0RUFBNEU7UUFDckYsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxxREFBcUQsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoRSxPQUFPLEVBQUUsNkRBQTZEO1FBQ3RFLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc2VydmljZXJlcXVlc3Qtb3JkZXJkZXRhaWx8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIEFuIGV4YW1wbGUgdmFsdWUgc2V0IG9mIENvZGlmaWVkIG9yZGVyIGVudHJ5IGRldGFpbHMgY29uY2VwdHMuICBUaGVzZSBjb25jZXB0cyBvbmx5IG1ha2Ugc2Vuc2UgaW4gdGhlIGNvbnRleHQgb2Ygd2hhdCBpcyBiZWluZyBvcmRlcmVkLiAgVGhpcyBleGFtcGxlIGlzIGZvciBhIHBhdGllbnQgdmVudGlsYXRpb24gb3JkZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCBTZXJ2aWNlcmVxdWVzdE9yZGVyZGV0YWlsQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiAyNDMxNDQwMDJcclxuICAgKi9cclxuICBQYXRpZW50VHJpZ2dlcmVkSW5zcGlyYXRvcnlBc3Npc3RhbmNlUHJvY2VkdXJlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUGF0aWVudCB0cmlnZ2VyZWQgaW5zcGlyYXRvcnkgYXNzaXN0YW5jZSAocHJvY2VkdXJlKVwiLFxyXG4gICAgY29kZTogXCIyNDMxNDQwMDJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMjQzMTUwMDA3XHJcbiAgICovXHJcbiAgQXNzaXN0ZWRDb250cm9sbGVkTWFuZGF0b3J5VmVudGlsYXRpb25Qcm9jZWR1cmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBc3Npc3RlZCBjb250cm9sbGVkIG1hbmRhdG9yeSB2ZW50aWxhdGlvbiAocHJvY2VkdXJlKVwiLFxyXG4gICAgY29kZTogXCIyNDMxNTAwMDdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMjg2ODEyMDA4XHJcbiAgICovXHJcbiAgUHJlc3N1cmVDb250cm9sbGVkVmVudGlsYXRpb25Qcm9jZWR1cmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQcmVzc3VyZSBjb250cm9sbGVkIHZlbnRpbGF0aW9uIChwcm9jZWR1cmUpXCIsXHJcbiAgICBjb2RlOiBcIjI4NjgxMjAwOFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiA0NzU0NTAwN1xyXG4gICAqL1xyXG4gIENvbnRpbnVvdXNQb3NpdGl2ZUFpcndheVByZXNzdXJlVmVudGlsYXRpb25UcmVhdG1lbnRSZWdpbWVUaGVyYXB5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29udGludW91cyBwb3NpdGl2ZSBhaXJ3YXkgcHJlc3N1cmUgdmVudGlsYXRpb24gdHJlYXRtZW50IChyZWdpbWUvdGhlcmFweSlcIixcclxuICAgIGNvZGU6IFwiNDc1NDUwMDdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogNTk0MjcwMDVcclxuICAgKi9cclxuICBTeW5jaHJvbml6ZWRJbnRlcm1pdHRlbnRNYW5kYXRvcnlWZW50aWxhdGlvblByb2NlZHVyZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN5bmNocm9uaXplZCBpbnRlcm1pdHRlbnQgbWFuZGF0b3J5IHZlbnRpbGF0aW9uIChwcm9jZWR1cmUpXCIsXHJcbiAgICBjb2RlOiBcIjU5NDI3MDA1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEFuIGV4YW1wbGUgdmFsdWUgc2V0IG9mIENvZGlmaWVkIG9yZGVyIGVudHJ5IGRldGFpbHMgY29uY2VwdHMuICBUaGVzZSBjb25jZXB0cyBvbmx5IG1ha2Ugc2Vuc2UgaW4gdGhlIGNvbnRleHQgb2Ygd2hhdCBpcyBiZWluZyBvcmRlcmVkLiAgVGhpcyBleGFtcGxlIGlzIGZvciBhIHBhdGllbnQgdmVudGlsYXRpb24gb3JkZXJcclxuICovXHJcbmV4cG9ydCB0eXBlIFNlcnZpY2VyZXF1ZXN0T3JkZXJkZXRhaWxDb2RpbmdUeXBlID0gdHlwZW9mIFNlcnZpY2VyZXF1ZXN0T3JkZXJkZXRhaWxDb2RpbmdzO1xyXG4iXX0=