// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/coverage-class|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set includes Coverage Class codes.
 */
export const CoverageClassCodings = {
    /**
     * class: A class of benefits.
     */
    Class: new Coding({
        display: "Class",
        code: "class",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * group: An employee group
     */
    Group: new Coding({
        display: "Group",
        code: "group",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * plan: A specific suite of benefits.
     */
    Plan: new Coding({
        display: "Plan",
        code: "plan",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * rxbin: Pharmacy benefit manager's Business Identification Number.
     */
    RXBIN: new Coding({
        display: "RX BIN",
        code: "rxbin",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * rxgroup: A Pharmacy Benefit Manager specified Group number.
     */
    RXGroup: new Coding({
        display: "RX Group",
        code: "rxgroup",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * rxid: A Pharmacy Benefit Manager specified Member ID.
     */
    RXId: new Coding({
        display: "RX Id",
        code: "rxid",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * rxpcn: A Pharmacy Benefit Manager specified Processor Control Number.
     */
    RXPCN: new Coding({
        display: "RX PCN",
        code: "rxpcn",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * sequence: A sequence number associated with a short-term continuance of the coverage.
     */
    Sequence: new Coding({
        display: "Sequence",
        code: "sequence",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * subclass: A subset of a class of benefits.
     */
    SubClass: new Coding({
        display: "SubClass",
        code: "subclass",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * subgroup: A sub-group of an employee group
     */
    SubGroup: new Coding({
        display: "SubGroup",
        code: "subgroup",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
    /**
     * subplan: A subset of a specific suite of benefits.
     */
    SubPlan: new Coding({
        display: "SubPlan",
        code: "subplan",
        system: "http://terminology.hl7.org/CodeSystem/coverage-class",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ292ZXJhZ2VDbGFzc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0NvdmVyYWdlQ2xhc3NDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQUVuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQzs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHNEQUFzRDtLQUMvRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2YsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsc0RBQXNEO0tBQy9ELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb3ZlcmFnZS1jbGFzc3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgQ292ZXJhZ2UgQ2xhc3MgY29kZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ292ZXJhZ2VDbGFzc0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogY2xhc3M6IEEgY2xhc3Mgb2YgYmVuZWZpdHMuXHJcbiAgICovXHJcbiAgQ2xhc3M6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDbGFzc1wiLFxyXG4gICAgY29kZTogXCJjbGFzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2UtY2xhc3NcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBncm91cDogQW4gZW1wbG95ZWUgZ3JvdXBcclxuICAgKi9cclxuICBHcm91cDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdyb3VwXCIsXHJcbiAgICBjb2RlOiBcImdyb3VwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZS1jbGFzc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHBsYW46IEEgc3BlY2lmaWMgc3VpdGUgb2YgYmVuZWZpdHMuXHJcbiAgICovXHJcbiAgUGxhbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBsYW5cIixcclxuICAgIGNvZGU6IFwicGxhblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2UtY2xhc3NcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByeGJpbjogUGhhcm1hY3kgYmVuZWZpdCBtYW5hZ2VyJ3MgQnVzaW5lc3MgSWRlbnRpZmljYXRpb24gTnVtYmVyLlxyXG4gICAqL1xyXG4gIFJYQklOOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUlggQklOXCIsXHJcbiAgICBjb2RlOiBcInJ4YmluXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZS1jbGFzc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHJ4Z3JvdXA6IEEgUGhhcm1hY3kgQmVuZWZpdCBNYW5hZ2VyIHNwZWNpZmllZCBHcm91cCBudW1iZXIuXHJcbiAgICovXHJcbiAgUlhHcm91cDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJYIEdyb3VwXCIsXHJcbiAgICBjb2RlOiBcInJ4Z3JvdXBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlLWNsYXNzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcnhpZDogQSBQaGFybWFjeSBCZW5lZml0IE1hbmFnZXIgc3BlY2lmaWVkIE1lbWJlciBJRC5cclxuICAgKi9cclxuICBSWElkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUlggSWRcIixcclxuICAgIGNvZGU6IFwicnhpZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2UtY2xhc3NcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByeHBjbjogQSBQaGFybWFjeSBCZW5lZml0IE1hbmFnZXIgc3BlY2lmaWVkIFByb2Nlc3NvciBDb250cm9sIE51bWJlci5cclxuICAgKi9cclxuICBSWFBDTjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJYIFBDTlwiLFxyXG4gICAgY29kZTogXCJyeHBjblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2UtY2xhc3NcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzZXF1ZW5jZTogQSBzZXF1ZW5jZSBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIGEgc2hvcnQtdGVybSBjb250aW51YW5jZSBvZiB0aGUgY292ZXJhZ2UuXHJcbiAgICovXHJcbiAgU2VxdWVuY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTZXF1ZW5jZVwiLFxyXG4gICAgY29kZTogXCJzZXF1ZW5jZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY292ZXJhZ2UtY2xhc3NcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzdWJjbGFzczogQSBzdWJzZXQgb2YgYSBjbGFzcyBvZiBiZW5lZml0cy5cclxuICAgKi9cclxuICBTdWJDbGFzczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN1YkNsYXNzXCIsXHJcbiAgICBjb2RlOiBcInN1YmNsYXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZS1jbGFzc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHN1Ymdyb3VwOiBBIHN1Yi1ncm91cCBvZiBhbiBlbXBsb3llZSBncm91cFxyXG4gICAqL1xyXG4gIFN1Ykdyb3VwOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3ViR3JvdXBcIixcclxuICAgIGNvZGU6IFwic3ViZ3JvdXBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvdmVyYWdlLWNsYXNzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogc3VicGxhbjogQSBzdWJzZXQgb2YgYSBzcGVjaWZpYyBzdWl0ZSBvZiBiZW5lZml0cy5cclxuICAgKi9cclxuICBTdWJQbGFuOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3ViUGxhblwiLFxyXG4gICAgY29kZTogXCJzdWJwbGFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb3ZlcmFnZS1jbGFzc1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIENvdmVyYWdlIENsYXNzIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ292ZXJhZ2VDbGFzc0NvZGluZ1R5cGUgPSB0eXBlb2YgQ292ZXJhZ2VDbGFzc0NvZGluZ3M7XHJcbiJdfQ==