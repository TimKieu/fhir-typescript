// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/slotstatus|4.0.1
/**
 * The free/busy status of the slot.
 */
export const SlotstatusCodings = {
    /**
     * busy: Indicates that the time interval is busy because one  or more events have been scheduled for that interval.
     */
    Busy: {
        display: "Busy",
        code: "busy",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * busy-tentative: Indicates that the time interval is busy because one or more events have been tentatively scheduled for that interval.
     */
    BusyTentative: {
        display: "Busy (Tentative)",
        code: "busy-tentative",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * busy-unavailable: Indicates that the time interval is busy and that the interval cannot be scheduled.
     */
    BusyUnavailable: {
        display: "Busy (Unavailable)",
        code: "busy-unavailable",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * entered-in-error: This instance should not have been part of this patient's medical record.
     */
    EnteredInError: {
        display: "Entered in error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/slotstatus",
    },
    /**
     * free: Indicates that the time interval is free for scheduling.
     */
    Free: {
        display: "Free",
        code: "free",
        system: "http://hl7.org/fhir/slotstatus",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xvdHN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Nsb3RzdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLCtEQUErRDtBQThCL0Q7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBd0I7SUFDcEQ7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGdDQUFnQztLQUN6QztJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLGdDQUFnQztLQUN6QztJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekM7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Nsb3RzdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgZnJlZS9idXN5IHN0YXR1cyBvZiB0aGUgc2xvdC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFNsb3RzdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJ1c3k6IEluZGljYXRlcyB0aGF0IHRoZSB0aW1lIGludGVydmFsIGlzIGJ1c3kgYmVjYXVzZSBvbmUgIG9yIG1vcmUgZXZlbnRzIGhhdmUgYmVlbiBzY2hlZHVsZWQgZm9yIHRoYXQgaW50ZXJ2YWwuXHJcbiAgICovXHJcbiAgQnVzeTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBidXN5LXRlbnRhdGl2ZTogSW5kaWNhdGVzIHRoYXQgdGhlIHRpbWUgaW50ZXJ2YWwgaXMgYnVzeSBiZWNhdXNlIG9uZSBvciBtb3JlIGV2ZW50cyBoYXZlIGJlZW4gdGVudGF0aXZlbHkgc2NoZWR1bGVkIGZvciB0aGF0IGludGVydmFsLlxyXG4gICAqL1xyXG4gIEJ1c3lUZW50YXRpdmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogYnVzeS11bmF2YWlsYWJsZTogSW5kaWNhdGVzIHRoYXQgdGhlIHRpbWUgaW50ZXJ2YWwgaXMgYnVzeSBhbmQgdGhhdCB0aGUgaW50ZXJ2YWwgY2Fubm90IGJlIHNjaGVkdWxlZC5cclxuICAgKi9cclxuICBCdXN5VW5hdmFpbGFibGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBpbnN0YW5jZSBzaG91bGQgbm90IGhhdmUgYmVlbiBwYXJ0IG9mIHRoaXMgcGF0aWVudCdzIG1lZGljYWwgcmVjb3JkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGZyZWU6IEluZGljYXRlcyB0aGF0IHRoZSB0aW1lIGludGVydmFsIGlzIGZyZWUgZm9yIHNjaGVkdWxpbmcuXHJcbiAgICovXHJcbiAgRnJlZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBmcmVlL2J1c3kgc3RhdHVzIG9mIHRoZSBzbG90LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNsb3RzdGF0dXNDb2RpbmdzOlNsb3RzdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJ1c3k6IEluZGljYXRlcyB0aGF0IHRoZSB0aW1lIGludGVydmFsIGlzIGJ1c3kgYmVjYXVzZSBvbmUgIG9yIG1vcmUgZXZlbnRzIGhhdmUgYmVlbiBzY2hlZHVsZWQgZm9yIHRoYXQgaW50ZXJ2YWwuXHJcbiAgICovXHJcbiAgQnVzeToge1xyXG4gICAgZGlzcGxheTogXCJCdXN5XCIsXHJcbiAgICBjb2RlOiBcImJ1c3lcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Nsb3RzdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGJ1c3ktdGVudGF0aXZlOiBJbmRpY2F0ZXMgdGhhdCB0aGUgdGltZSBpbnRlcnZhbCBpcyBidXN5IGJlY2F1c2Ugb25lIG9yIG1vcmUgZXZlbnRzIGhhdmUgYmVlbiB0ZW50YXRpdmVseSBzY2hlZHVsZWQgZm9yIHRoYXQgaW50ZXJ2YWwuXHJcbiAgICovXHJcbiAgQnVzeVRlbnRhdGl2ZToge1xyXG4gICAgZGlzcGxheTogXCJCdXN5IChUZW50YXRpdmUpXCIsXHJcbiAgICBjb2RlOiBcImJ1c3ktdGVudGF0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zbG90c3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBidXN5LXVuYXZhaWxhYmxlOiBJbmRpY2F0ZXMgdGhhdCB0aGUgdGltZSBpbnRlcnZhbCBpcyBidXN5IGFuZCB0aGF0IHRoZSBpbnRlcnZhbCBjYW5ub3QgYmUgc2NoZWR1bGVkLlxyXG4gICAqL1xyXG4gIEJ1c3lVbmF2YWlsYWJsZToge1xyXG4gICAgZGlzcGxheTogXCJCdXN5IChVbmF2YWlsYWJsZSlcIixcclxuICAgIGNvZGU6IFwiYnVzeS11bmF2YWlsYWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2xvdHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBpbnN0YW5jZSBzaG91bGQgbm90IGhhdmUgYmVlbiBwYXJ0IG9mIHRoaXMgcGF0aWVudCdzIG1lZGljYWwgcmVjb3JkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gZXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2xvdHN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZnJlZTogSW5kaWNhdGVzIHRoYXQgdGhlIHRpbWUgaW50ZXJ2YWwgaXMgZnJlZSBmb3Igc2NoZWR1bGluZy5cclxuICAgKi9cclxuICBGcmVlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkZyZWVcIixcclxuICAgIGNvZGU6IFwiZnJlZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2xvdHN0YXR1c1wiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==