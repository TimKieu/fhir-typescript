// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/slotstatus|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The free/busy status of the slot.
 */
export const SlotstatusCodings = {
    /**
     * busy: Indicates that the time interval is busy because one  or more events have been scheduled for that interval.
     */
    Busy: new Coding({
        display: "Busy",
        code: "busy",
        system: "http://hl7.org/fhir/slotstatus",
    }),
    /**
     * busy-tentative: Indicates that the time interval is busy because one or more events have been tentatively scheduled for that interval.
     */
    BusyTentative: new Coding({
        display: "Busy (Tentative)",
        code: "busy-tentative",
        system: "http://hl7.org/fhir/slotstatus",
    }),
    /**
     * busy-unavailable: Indicates that the time interval is busy and that the interval cannot be scheduled.
     */
    BusyUnavailable: new Coding({
        display: "Busy (Unavailable)",
        code: "busy-unavailable",
        system: "http://hl7.org/fhir/slotstatus",
    }),
    /**
     * entered-in-error: This instance should not have been part of this patient's medical record.
     */
    EnteredInError: new Coding({
        display: "Entered in error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/slotstatus",
    }),
    /**
     * free: Indicates that the time interval is free for scheduling.
     */
    Free: new Coding({
        display: "Free",
        code: "free",
        system: "http://hl7.org/fhir/slotstatus",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xvdHN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Nsb3RzdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLCtEQUErRDtBQUUvRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRztJQUMvQjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDLENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLGdDQUFnQztLQUN6QyxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDMUIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE1BQU0sRUFBRSxnQ0FBZ0M7S0FDekMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDLENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0NBQWdDO0tBQ3pDLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Nsb3RzdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBmcmVlL2J1c3kgc3RhdHVzIG9mIHRoZSBzbG90LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNsb3RzdGF0dXNDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGJ1c3k6IEluZGljYXRlcyB0aGF0IHRoZSB0aW1lIGludGVydmFsIGlzIGJ1c3kgYmVjYXVzZSBvbmUgIG9yIG1vcmUgZXZlbnRzIGhhdmUgYmVlbiBzY2hlZHVsZWQgZm9yIHRoYXQgaW50ZXJ2YWwuXHJcbiAgICovXHJcbiAgQnVzeTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJ1c3lcIixcclxuICAgIGNvZGU6IFwiYnVzeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2xvdHN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGJ1c3ktdGVudGF0aXZlOiBJbmRpY2F0ZXMgdGhhdCB0aGUgdGltZSBpbnRlcnZhbCBpcyBidXN5IGJlY2F1c2Ugb25lIG9yIG1vcmUgZXZlbnRzIGhhdmUgYmVlbiB0ZW50YXRpdmVseSBzY2hlZHVsZWQgZm9yIHRoYXQgaW50ZXJ2YWwuXHJcbiAgICovXHJcbiAgQnVzeVRlbnRhdGl2ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJ1c3kgKFRlbnRhdGl2ZSlcIixcclxuICAgIGNvZGU6IFwiYnVzeS10ZW50YXRpdmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Nsb3RzdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBidXN5LXVuYXZhaWxhYmxlOiBJbmRpY2F0ZXMgdGhhdCB0aGUgdGltZSBpbnRlcnZhbCBpcyBidXN5IGFuZCB0aGF0IHRoZSBpbnRlcnZhbCBjYW5ub3QgYmUgc2NoZWR1bGVkLlxyXG4gICAqL1xyXG4gIEJ1c3lVbmF2YWlsYWJsZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJ1c3kgKFVuYXZhaWxhYmxlKVwiLFxyXG4gICAgY29kZTogXCJidXN5LXVuYXZhaWxhYmxlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zbG90c3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBpbnN0YW5jZSBzaG91bGQgbm90IGhhdmUgYmVlbiBwYXJ0IG9mIHRoaXMgcGF0aWVudCdzIG1lZGljYWwgcmVjb3JkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRW50ZXJlZCBpbiBlcnJvclwiLFxyXG4gICAgY29kZTogXCJlbnRlcmVkLWluLWVycm9yXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zbG90c3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZnJlZTogSW5kaWNhdGVzIHRoYXQgdGhlIHRpbWUgaW50ZXJ2YWwgaXMgZnJlZSBmb3Igc2NoZWR1bGluZy5cclxuICAgKi9cclxuICBGcmVlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRnJlZVwiLFxyXG4gICAgY29kZTogXCJmcmVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zbG90c3RhdHVzXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIGZyZWUvYnVzeSBzdGF0dXMgb2YgdGhlIHNsb3QuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTbG90c3RhdHVzQ29kaW5nVHlwZSA9IHR5cGVvZiBTbG90c3RhdHVzQ29kaW5ncztcclxuIl19