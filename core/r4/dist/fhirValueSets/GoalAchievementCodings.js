// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/goal-achievement|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Describes the progression, or lack thereof, towards the goal against the target.
 */
export const GoalAchievementCodings = {
    /**
     * achieved: The goal has been met.
     */
    Achieved: new Coding({
        display: "Achieved",
        code: "achieved",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * improving: The goal is being sought, and is progressing.
     */
    Improving: new Coding({
        display: "Improving",
        code: "improving",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * in-progress: The goal is being sought but has not yet been reached. (Also applies if the goal was reached in the past but there has been regression and the goal is again being sought).
     */
    InProgress: new Coding({
        display: "In Progress",
        code: "in-progress",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * no-change: The goal is being sought, but the trend is flat.
     */
    NoChange: new Coding({
        display: "No Change",
        code: "no-change",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * no-progress: The goal has not been met and little to no progress towards target.
     */
    NoProgress: new Coding({
        display: "No Progress",
        code: "no-progress",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * not-achieved: The goal has not been met and there might or might not have been progress towards target.
     */
    NotAchieved: new Coding({
        display: "Not Achieved",
        code: "not-achieved",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * not-attainable: The goal is not possible to be met.
     */
    NotAttainable: new Coding({
        display: "Not Attainable",
        code: "not-attainable",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * sustaining: The goal has been met, but ongoing activity is needed to sustain the goal objective.
     */
    Sustaining: new Coding({
        display: "Sustaining",
        code: "sustaining",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
    /**
     * worsening: The goal is being sought, but is regressing.
     */
    Worsening: new Coding({
        display: "Worsening",
        code: "worsening",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR29hbEFjaGlldmVtZW50Q29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvR29hbEFjaGlldmVtZW50Q29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxRUFBcUU7QUFFckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDcEM7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakUsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZ29hbC1hY2hpZXZlbWVudHw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSBwcm9ncmVzc2lvbiwgb3IgbGFjayB0aGVyZW9mLCB0b3dhcmRzIHRoZSBnb2FsIGFnYWluc3QgdGhlIHRhcmdldC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBHb2FsQWNoaWV2ZW1lbnRDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjaGlldmVkOiBUaGUgZ29hbCBoYXMgYmVlbiBtZXQuXHJcbiAgICovXHJcbiAgQWNoaWV2ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBY2hpZXZlZFwiLFxyXG4gICAgY29kZTogXCJhY2hpZXZlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGltcHJvdmluZzogVGhlIGdvYWwgaXMgYmVpbmcgc291Z2h0LCBhbmQgaXMgcHJvZ3Jlc3NpbmcuXHJcbiAgICovXHJcbiAgSW1wcm92aW5nOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW1wcm92aW5nXCIsXHJcbiAgICBjb2RlOiBcImltcHJvdmluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgZ29hbCBpcyBiZWluZyBzb3VnaHQgYnV0IGhhcyBub3QgeWV0IGJlZW4gcmVhY2hlZC4gKEFsc28gYXBwbGllcyBpZiB0aGUgZ29hbCB3YXMgcmVhY2hlZCBpbiB0aGUgcGFzdCBidXQgdGhlcmUgaGFzIGJlZW4gcmVncmVzc2lvbiBhbmQgdGhlIGdvYWwgaXMgYWdhaW4gYmVpbmcgc291Z2h0KS5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSW4gUHJvZ3Jlc3NcIixcclxuICAgIGNvZGU6IFwiaW4tcHJvZ3Jlc3NcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBuby1jaGFuZ2U6IFRoZSBnb2FsIGlzIGJlaW5nIHNvdWdodCwgYnV0IHRoZSB0cmVuZCBpcyBmbGF0LlxyXG4gICAqL1xyXG4gIE5vQ2hhbmdlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTm8gQ2hhbmdlXCIsXHJcbiAgICBjb2RlOiBcIm5vLWNoYW5nZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5vLXByb2dyZXNzOiBUaGUgZ29hbCBoYXMgbm90IGJlZW4gbWV0IGFuZCBsaXR0bGUgdG8gbm8gcHJvZ3Jlc3MgdG93YXJkcyB0YXJnZXQuXHJcbiAgICovXHJcbiAgTm9Qcm9ncmVzczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vIFByb2dyZXNzXCIsXHJcbiAgICBjb2RlOiBcIm5vLXByb2dyZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbm90LWFjaGlldmVkOiBUaGUgZ29hbCBoYXMgbm90IGJlZW4gbWV0IGFuZCB0aGVyZSBtaWdodCBvciBtaWdodCBub3QgaGF2ZSBiZWVuIHByb2dyZXNzIHRvd2FyZHMgdGFyZ2V0LlxyXG4gICAqL1xyXG4gIE5vdEFjaGlldmVkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTm90IEFjaGlldmVkXCIsXHJcbiAgICBjb2RlOiBcIm5vdC1hY2hpZXZlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5vdC1hdHRhaW5hYmxlOiBUaGUgZ29hbCBpcyBub3QgcG9zc2libGUgdG8gYmUgbWV0LlxyXG4gICAqL1xyXG4gIE5vdEF0dGFpbmFibGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOb3QgQXR0YWluYWJsZVwiLFxyXG4gICAgY29kZTogXCJub3QtYXR0YWluYWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHN1c3RhaW5pbmc6IFRoZSBnb2FsIGhhcyBiZWVuIG1ldCwgYnV0IG9uZ29pbmcgYWN0aXZpdHkgaXMgbmVlZGVkIHRvIHN1c3RhaW4gdGhlIGdvYWwgb2JqZWN0aXZlLlxyXG4gICAqL1xyXG4gIFN1c3RhaW5pbmc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTdXN0YWluaW5nXCIsXHJcbiAgICBjb2RlOiBcInN1c3RhaW5pbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB3b3JzZW5pbmc6IFRoZSBnb2FsIGlzIGJlaW5nIHNvdWdodCwgYnV0IGlzIHJlZ3Jlc3NpbmcuXHJcbiAgICovXHJcbiAgV29yc2VuaW5nOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiV29yc2VuaW5nXCIsXHJcbiAgICBjb2RlOiBcIndvcnNlbmluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIERlc2NyaWJlcyB0aGUgcHJvZ3Jlc3Npb24sIG9yIGxhY2sgdGhlcmVvZiwgdG93YXJkcyB0aGUgZ29hbCBhZ2FpbnN0IHRoZSB0YXJnZXQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBHb2FsQWNoaWV2ZW1lbnRDb2RpbmdUeXBlID0gdHlwZW9mIEdvYWxBY2hpZXZlbWVudENvZGluZ3M7XHJcbiJdfQ==