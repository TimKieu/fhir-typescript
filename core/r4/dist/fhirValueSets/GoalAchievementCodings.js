// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/goal-achievement|4.0.1
/**
 * Describes the progression, or lack thereof, towards the goal against the target.
 */
export const GoalAchievementCodings = {
    /**
     * achieved: The goal has been met.
     */
    Achieved: {
        display: "Achieved",
        code: "achieved",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * improving: The goal is being sought, and is progressing.
     */
    Improving: {
        display: "Improving",
        code: "improving",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * in-progress: The goal is being sought but has not yet been reached. (Also applies if the goal was reached in the past but there has been regression and the goal is again being sought).
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * no-change: The goal is being sought, but the trend is flat.
     */
    NoChange: {
        display: "No Change",
        code: "no-change",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * no-progress: The goal has not been met and little to no progress towards target.
     */
    NoProgress: {
        display: "No Progress",
        code: "no-progress",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * not-achieved: The goal has not been met and there might or might not have been progress towards target.
     */
    NotAchieved: {
        display: "Not Achieved",
        code: "not-achieved",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * not-attainable: The goal is not possible to be met.
     */
    NotAttainable: {
        display: "Not Attainable",
        code: "not-attainable",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * sustaining: The goal has been met, but ongoing activity is needed to sustain the goal objective.
     */
    Sustaining: {
        display: "Sustaining",
        code: "sustaining",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
    /**
     * worsening: The goal is being sought, but is regressing.
     */
    Worsening: {
        display: "Worsening",
        code: "worsening",
        system: "http://terminology.hl7.org/CodeSystem/goal-achievement",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR29hbEFjaGlldmVtZW50Q29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvR29hbEFjaGlldmVtZW50Q29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxRUFBcUU7QUE4Q3JFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7SUFDRDs7T0FFRztJQUNILFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2dvYWwtYWNoaWV2ZW1lbnR8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgdGhlIHByb2dyZXNzaW9uLCBvciBsYWNrIHRoZXJlb2YsIHRvd2FyZHMgdGhlIGdvYWwgYWdhaW5zdCB0aGUgdGFyZ2V0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR29hbEFjaGlldmVtZW50Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhY2hpZXZlZDogVGhlIGdvYWwgaGFzIGJlZW4gbWV0LlxyXG4gICAqL1xyXG4gIEFjaGlldmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGltcHJvdmluZzogVGhlIGdvYWwgaXMgYmVpbmcgc291Z2h0LCBhbmQgaXMgcHJvZ3Jlc3NpbmcuXHJcbiAgICovXHJcbiAgSW1wcm92aW5nOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgZ29hbCBpcyBiZWluZyBzb3VnaHQgYnV0IGhhcyBub3QgeWV0IGJlZW4gcmVhY2hlZC4gKEFsc28gYXBwbGllcyBpZiB0aGUgZ29hbCB3YXMgcmVhY2hlZCBpbiB0aGUgcGFzdCBidXQgdGhlcmUgaGFzIGJlZW4gcmVncmVzc2lvbiBhbmQgdGhlIGdvYWwgaXMgYWdhaW4gYmVpbmcgc291Z2h0KS5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vLWNoYW5nZTogVGhlIGdvYWwgaXMgYmVpbmcgc291Z2h0LCBidXQgdGhlIHRyZW5kIGlzIGZsYXQuXHJcbiAgICovXHJcbiAgTm9DaGFuZ2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbm8tcHJvZ3Jlc3M6IFRoZSBnb2FsIGhhcyBub3QgYmVlbiBtZXQgYW5kIGxpdHRsZSB0byBubyBwcm9ncmVzcyB0b3dhcmRzIHRhcmdldC5cclxuICAgKi9cclxuICBOb1Byb2dyZXNzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdC1hY2hpZXZlZDogVGhlIGdvYWwgaGFzIG5vdCBiZWVuIG1ldCBhbmQgdGhlcmUgbWlnaHQgb3IgbWlnaHQgbm90IGhhdmUgYmVlbiBwcm9ncmVzcyB0b3dhcmRzIHRhcmdldC5cclxuICAgKi9cclxuICBOb3RBY2hpZXZlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBub3QtYXR0YWluYWJsZTogVGhlIGdvYWwgaXMgbm90IHBvc3NpYmxlIHRvIGJlIG1ldC5cclxuICAgKi9cclxuICBOb3RBdHRhaW5hYmxlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN1c3RhaW5pbmc6IFRoZSBnb2FsIGhhcyBiZWVuIG1ldCwgYnV0IG9uZ29pbmcgYWN0aXZpdHkgaXMgbmVlZGVkIHRvIHN1c3RhaW4gdGhlIGdvYWwgb2JqZWN0aXZlLlxyXG4gICAqL1xyXG4gIFN1c3RhaW5pbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogd29yc2VuaW5nOiBUaGUgZ29hbCBpcyBiZWluZyBzb3VnaHQsIGJ1dCBpcyByZWdyZXNzaW5nLlxyXG4gICAqL1xyXG4gIFdvcnNlbmluZzogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIERlc2NyaWJlcyB0aGUgcHJvZ3Jlc3Npb24sIG9yIGxhY2sgdGhlcmVvZiwgdG93YXJkcyB0aGUgZ29hbCBhZ2FpbnN0IHRoZSB0YXJnZXQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgR29hbEFjaGlldmVtZW50Q29kaW5nczpHb2FsQWNoaWV2ZW1lbnRDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFjaGlldmVkOiBUaGUgZ29hbCBoYXMgYmVlbiBtZXQuXHJcbiAgICovXHJcbiAgQWNoaWV2ZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQWNoaWV2ZWRcIixcclxuICAgIGNvZGU6IFwiYWNoaWV2ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGltcHJvdmluZzogVGhlIGdvYWwgaXMgYmVpbmcgc291Z2h0LCBhbmQgaXMgcHJvZ3Jlc3NpbmcuXHJcbiAgICovXHJcbiAgSW1wcm92aW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIkltcHJvdmluZ1wiLFxyXG4gICAgY29kZTogXCJpbXByb3ZpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgZ29hbCBpcyBiZWluZyBzb3VnaHQgYnV0IGhhcyBub3QgeWV0IGJlZW4gcmVhY2hlZC4gKEFsc28gYXBwbGllcyBpZiB0aGUgZ29hbCB3YXMgcmVhY2hlZCBpbiB0aGUgcGFzdCBidXQgdGhlcmUgaGFzIGJlZW4gcmVncmVzc2lvbiBhbmQgdGhlIGdvYWwgaXMgYWdhaW4gYmVpbmcgc291Z2h0KS5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkluIFByb2dyZXNzXCIsXHJcbiAgICBjb2RlOiBcImluLXByb2dyZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuby1jaGFuZ2U6IFRoZSBnb2FsIGlzIGJlaW5nIHNvdWdodCwgYnV0IHRoZSB0cmVuZCBpcyBmbGF0LlxyXG4gICAqL1xyXG4gIE5vQ2hhbmdlOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vIENoYW5nZVwiLFxyXG4gICAgY29kZTogXCJuby1jaGFuZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vLXByb2dyZXNzOiBUaGUgZ29hbCBoYXMgbm90IGJlZW4gbWV0IGFuZCBsaXR0bGUgdG8gbm8gcHJvZ3Jlc3MgdG93YXJkcyB0YXJnZXQuXHJcbiAgICovXHJcbiAgTm9Qcm9ncmVzczoge1xyXG4gICAgZGlzcGxheTogXCJObyBQcm9ncmVzc1wiLFxyXG4gICAgY29kZTogXCJuby1wcm9ncmVzc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZ29hbC1hY2hpZXZlbWVudFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90LWFjaGlldmVkOiBUaGUgZ29hbCBoYXMgbm90IGJlZW4gbWV0IGFuZCB0aGVyZSBtaWdodCBvciBtaWdodCBub3QgaGF2ZSBiZWVuIHByb2dyZXNzIHRvd2FyZHMgdGFyZ2V0LlxyXG4gICAqL1xyXG4gIE5vdEFjaGlldmVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBBY2hpZXZlZFwiLFxyXG4gICAgY29kZTogXCJub3QtYWNoaWV2ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5vdC1hdHRhaW5hYmxlOiBUaGUgZ29hbCBpcyBub3QgcG9zc2libGUgdG8gYmUgbWV0LlxyXG4gICAqL1xyXG4gIE5vdEF0dGFpbmFibGU6IHtcclxuICAgIGRpc3BsYXk6IFwiTm90IEF0dGFpbmFibGVcIixcclxuICAgIGNvZGU6IFwibm90LWF0dGFpbmFibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN1c3RhaW5pbmc6IFRoZSBnb2FsIGhhcyBiZWVuIG1ldCwgYnV0IG9uZ29pbmcgYWN0aXZpdHkgaXMgbmVlZGVkIHRvIHN1c3RhaW4gdGhlIGdvYWwgb2JqZWN0aXZlLlxyXG4gICAqL1xyXG4gIFN1c3RhaW5pbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiU3VzdGFpbmluZ1wiLFxyXG4gICAgY29kZTogXCJzdXN0YWluaW5nXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9nb2FsLWFjaGlldmVtZW50XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB3b3JzZW5pbmc6IFRoZSBnb2FsIGlzIGJlaW5nIHNvdWdodCwgYnV0IGlzIHJlZ3Jlc3NpbmcuXHJcbiAgICovXHJcbiAgV29yc2VuaW5nOiB7XHJcbiAgICBkaXNwbGF5OiBcIldvcnNlbmluZ1wiLFxyXG4gICAgY29kZTogXCJ3b3JzZW5pbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2dvYWwtYWNoaWV2ZW1lbnRcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=