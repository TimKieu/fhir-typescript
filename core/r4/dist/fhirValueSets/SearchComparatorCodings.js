// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-comparator|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * What Search Comparator Codes are supported in search.
 */
export const SearchComparatorCodings = {
    /**
     * ap: the value for the parameter in the resource is approximately the same to the provided value.
     */
    Approximately: new Coding({
        display: "Approximately",
        code: "ap",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * eb: the value for the parameter in the resource ends before the provided value.
     */
    EndsBefore: new Coding({
        display: "Ends Before",
        code: "eb",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * eq: the value for the parameter in the resource is equal to the provided value.
     */
    Equals: new Coding({
        display: "Equals",
        code: "eq",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * ge: the value for the parameter in the resource is greater or equal to the provided value.
     */
    GreaterOrEquals: new Coding({
        display: "Greater or Equals",
        code: "ge",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * gt: the value for the parameter in the resource is greater than the provided value.
     */
    GreaterThan: new Coding({
        display: "Greater Than",
        code: "gt",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * le: the value for the parameter in the resource is less or equal to the provided value.
     */
    LessOfEqual: new Coding({
        display: "Less of Equal",
        code: "le",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * lt: the value for the parameter in the resource is less than the provided value.
     */
    LessThan: new Coding({
        display: "Less Than",
        code: "lt",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * ne: the value for the parameter in the resource is not equal to the provided value.
     */
    NotEquals: new Coding({
        display: "Not Equals",
        code: "ne",
        system: "http://hl7.org/fhir/search-comparator",
    }),
    /**
     * sa: the value for the parameter in the resource starts after the provided value.
     */
    StartsAfter: new Coding({
        display: "Starts After",
        code: "sa",
        system: "http://hl7.org/fhir/search-comparator",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoQ29tcGFyYXRvckNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlYXJjaENvbXBhcmF0b3JDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHNFQUFzRTtBQUV0RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNyQzs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hELENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hELENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hELENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc2VhcmNoLWNvbXBhcmF0b3J8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFdoYXQgU2VhcmNoIENvbXBhcmF0b3IgQ29kZXMgYXJlIHN1cHBvcnRlZCBpbiBzZWFyY2guXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU2VhcmNoQ29tcGFyYXRvckNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYXA6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgYXBwcm94aW1hdGVseSB0aGUgc2FtZSB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgQXBwcm94aW1hdGVseTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFwcHJveGltYXRlbHlcIixcclxuICAgIGNvZGU6IFwiYXBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZWI6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgZW5kcyBiZWZvcmUgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVuZHNCZWZvcmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbmRzIEJlZm9yZVwiLFxyXG4gICAgY29kZTogXCJlYlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLWNvbXBhcmF0b3JcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBlcTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgRXF1YWxzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRXF1YWxzXCIsXHJcbiAgICBjb2RlOiBcImVxXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGdlOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEdyZWF0ZXJPckVxdWFsczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdyZWF0ZXIgb3IgRXF1YWxzXCIsXHJcbiAgICBjb2RlOiBcImdlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGd0OiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgR3JlYXRlclRoYW46IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJHcmVhdGVyIFRoYW5cIixcclxuICAgIGNvZGU6IFwiZ3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbGU6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgbGVzcyBvciBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgTGVzc09mRXF1YWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJMZXNzIG9mIEVxdWFsXCIsXHJcbiAgICBjb2RlOiBcImxlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGx0OiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGxlc3MgdGhhbiB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgTGVzc1RoYW46IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJMZXNzIFRoYW5cIixcclxuICAgIGNvZGU6IFwibHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogbmU6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgbm90IGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBOb3RFcXVhbHM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOb3QgRXF1YWxzXCIsXHJcbiAgICBjb2RlOiBcIm5lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHNhOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIHN0YXJ0cyBhZnRlciB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgU3RhcnRzQWZ0ZXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTdGFydHMgQWZ0ZXJcIixcclxuICAgIGNvZGU6IFwic2FcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogV2hhdCBTZWFyY2ggQ29tcGFyYXRvciBDb2RlcyBhcmUgc3VwcG9ydGVkIGluIHNlYXJjaC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFNlYXJjaENvbXBhcmF0b3JDb2RpbmdUeXBlID0gdHlwZW9mIFNlYXJjaENvbXBhcmF0b3JDb2RpbmdzO1xyXG4iXX0=