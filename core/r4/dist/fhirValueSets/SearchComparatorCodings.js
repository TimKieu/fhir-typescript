// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/search-comparator|4.0.1
/**
 * What Search Comparator Codes are supported in search.
 */
export const SearchComparatorCodings = {
    /**
     * ap: the value for the parameter in the resource is approximately the same to the provided value.
     */
    Approximately: {
        display: "Approximately",
        code: "ap",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * eb: the value for the parameter in the resource ends before the provided value.
     */
    EndsBefore: {
        display: "Ends Before",
        code: "eb",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * eq: the value for the parameter in the resource is equal to the provided value.
     */
    Equals: {
        display: "Equals",
        code: "eq",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * ge: the value for the parameter in the resource is greater or equal to the provided value.
     */
    GreaterOrEquals: {
        display: "Greater or Equals",
        code: "ge",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * gt: the value for the parameter in the resource is greater than the provided value.
     */
    GreaterThan: {
        display: "Greater Than",
        code: "gt",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * le: the value for the parameter in the resource is less or equal to the provided value.
     */
    LessOfEqual: {
        display: "Less of Equal",
        code: "le",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * lt: the value for the parameter in the resource is less than the provided value.
     */
    LessThan: {
        display: "Less Than",
        code: "lt",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * ne: the value for the parameter in the resource is not equal to the provided value.
     */
    NotEquals: {
        display: "Not Equals",
        code: "ne",
        system: "http://hl7.org/fhir/search-comparator",
    },
    /**
     * sa: the value for the parameter in the resource starts after the provided value.
     */
    StartsAfter: {
        display: "Starts After",
        code: "sa",
        system: "http://hl7.org/fhir/search-comparator",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoQ29tcGFyYXRvckNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1NlYXJjaENvbXBhcmF0b3JDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHNFQUFzRTtBQThDdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBOEI7SUFDaEU7O09BRUc7SUFDSCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLHVDQUF1QztLQUNoRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSx1Q0FBdUM7S0FDaEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NlYXJjaC1jb21wYXJhdG9yfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogV2hhdCBTZWFyY2ggQ29tcGFyYXRvciBDb2RlcyBhcmUgc3VwcG9ydGVkIGluIHNlYXJjaC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFNlYXJjaENvbXBhcmF0b3JDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFwOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEFwcHJveGltYXRlbHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZWI6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgZW5kcyBiZWZvcmUgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVuZHNCZWZvcmU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZXE6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVxdWFsczogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBnZTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBHcmVhdGVyT3JFcXVhbHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZ3Q6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgZ3JlYXRlciB0aGFuIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBHcmVhdGVyVGhhbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsZTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBsZXNzIG9yIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBMZXNzT2ZFcXVhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsdDogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBsZXNzIHRoYW4gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIExlc3NUaGFuOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5lOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIG5vdCBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgTm90RXF1YWxzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNhOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIHN0YXJ0cyBhZnRlciB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgU3RhcnRzQWZ0ZXI6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXaGF0IFNlYXJjaCBDb21wYXJhdG9yIENvZGVzIGFyZSBzdXBwb3J0ZWQgaW4gc2VhcmNoLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNlYXJjaENvbXBhcmF0b3JDb2RpbmdzOlNlYXJjaENvbXBhcmF0b3JDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFwOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEFwcHJveGltYXRlbHk6IHtcclxuICAgIGRpc3BsYXk6IFwiQXBwcm94aW1hdGVseVwiLFxyXG4gICAgY29kZTogXCJhcFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLWNvbXBhcmF0b3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGViOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGVuZHMgYmVmb3JlIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBFbmRzQmVmb3JlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVuZHMgQmVmb3JlXCIsXHJcbiAgICBjb2RlOiBcImViXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9zZWFyY2gtY29tcGFyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZXE6IHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBpbiB0aGUgcmVzb3VyY2UgaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVxdWFsczoge1xyXG4gICAgZGlzcGxheTogXCJFcXVhbHNcIixcclxuICAgIGNvZGU6IFwiZXFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBnZTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBHcmVhdGVyT3JFcXVhbHM6IHtcclxuICAgIGRpc3BsYXk6IFwiR3JlYXRlciBvciBFcXVhbHNcIixcclxuICAgIGNvZGU6IFwiZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBndDogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBncmVhdGVyIHRoYW4gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEdyZWF0ZXJUaGFuOiB7XHJcbiAgICBkaXNwbGF5OiBcIkdyZWF0ZXIgVGhhblwiLFxyXG4gICAgY29kZTogXCJndFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLWNvbXBhcmF0b3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxlOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIGxlc3Mgb3IgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIExlc3NPZkVxdWFsOiB7XHJcbiAgICBkaXNwbGF5OiBcIkxlc3Mgb2YgRXF1YWxcIixcclxuICAgIGNvZGU6IFwibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBsdDogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBpcyBsZXNzIHRoYW4gdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIExlc3NUaGFuOiB7XHJcbiAgICBkaXNwbGF5OiBcIkxlc3MgVGhhblwiLFxyXG4gICAgY29kZTogXCJsdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLWNvbXBhcmF0b3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG5lOiB0aGUgdmFsdWUgZm9yIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHJlc291cmNlIGlzIG5vdCBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgTm90RXF1YWxzOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBFcXVhbHNcIixcclxuICAgIGNvZGU6IFwibmVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3NlYXJjaC1jb21wYXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzYTogdGhlIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVyIGluIHRoZSByZXNvdXJjZSBzdGFydHMgYWZ0ZXIgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIFN0YXJ0c0FmdGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIlN0YXJ0cyBBZnRlclwiLFxyXG4gICAgY29kZTogXCJzYVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvc2VhcmNoLWNvbXBhcmF0b3JcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=