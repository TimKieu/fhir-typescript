// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/trigger-type|4.0.1
/**
 * The type of trigger.
 */
export const TriggerTypeCodes = {
    /**
     * data-access-ended: The trigger occurs whenever access to data of a particular type is completed.
     */
    DataAccessEnded: "data-access-ended",
    /**
     * data-accessed: The trigger occurs whenever data of a particular type is accessed.
     */
    DataAccessed: "data-accessed",
    /**
     * data-added: The trigger occurs whenever data of a particular type is added.
     */
    DataAdded: "data-added",
    /**
     * data-changed: The trigger occurs whenever data of a particular type is changed in any way, either added, modified, or removed.
     */
    DataChanged: "data-changed",
    /**
     * data-modified: The trigger occurs whenever data of a particular type is modified.
     */
    DataUpdated: "data-modified",
    /**
     * data-removed: The trigger occurs whenever data of a particular type is removed.
     */
    DataRemoved: "data-removed",
    /**
     * named-event: The trigger occurs in response to a specific named event, and no other information about the trigger is specified. Named events are completely pre-coordinated, and the formal semantics of the trigger are not provided.
     */
    NamedEvent: "named-event",
    /**
     * periodic: The trigger occurs at a specific time or periodically as described by a timing or schedule. A periodic event cannot have any data elements, but may have a name assigned as a shorthand for the event.
     */
    Periodic: "periodic",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJpZ2dlclR5cGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvVHJpZ2dlclR5cGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxpRUFBaUU7QUFFakU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRztJQUM5Qjs7T0FFRztJQUNILGVBQWUsRUFBRSxtQkFBbUI7SUFDcEM7O09BRUc7SUFDSCxZQUFZLEVBQUUsZUFBZTtJQUM3Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxZQUFZO0lBQ3ZCOztPQUVHO0lBQ0gsV0FBVyxFQUFFLGNBQWM7SUFDM0I7O09BRUc7SUFDSCxXQUFXLEVBQUUsZUFBZTtJQUM1Qjs7T0FFRztJQUNILFdBQVcsRUFBRSxjQUFjO0lBQzNCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLGFBQWE7SUFDekI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtDQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdHJpZ2dlci10eXBlfDQuMC4xXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdHJpZ2dlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBUcmlnZ2VyVHlwZUNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWNjZXNzLWVuZGVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgYWNjZXNzIHRvIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgY29tcGxldGVkLlxyXG4gICAqL1xyXG4gIERhdGFBY2Nlc3NFbmRlZDogXCJkYXRhLWFjY2Vzcy1lbmRlZFwiLFxyXG4gIC8qKlxyXG4gICAqIGRhdGEtYWNjZXNzZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGFjY2Vzc2VkLlxyXG4gICAqL1xyXG4gIERhdGFBY2Nlc3NlZDogXCJkYXRhLWFjY2Vzc2VkXCIsXHJcbiAgLyoqXHJcbiAgICogZGF0YS1hZGRlZDogVGhlIHRyaWdnZXIgb2NjdXJzIHdoZW5ldmVyIGRhdGEgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaXMgYWRkZWQuXHJcbiAgICovXHJcbiAgRGF0YUFkZGVkOiBcImRhdGEtYWRkZWRcIixcclxuICAvKipcclxuICAgKiBkYXRhLWNoYW5nZWQ6IFRoZSB0cmlnZ2VyIG9jY3VycyB3aGVuZXZlciBkYXRhIG9mIGEgcGFydGljdWxhciB0eXBlIGlzIGNoYW5nZWQgaW4gYW55IHdheSwgZWl0aGVyIGFkZGVkLCBtb2RpZmllZCwgb3IgcmVtb3ZlZC5cclxuICAgKi9cclxuICBEYXRhQ2hhbmdlZDogXCJkYXRhLWNoYW5nZWRcIixcclxuICAvKipcclxuICAgKiBkYXRhLW1vZGlmaWVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyBtb2RpZmllZC5cclxuICAgKi9cclxuICBEYXRhVXBkYXRlZDogXCJkYXRhLW1vZGlmaWVkXCIsXHJcbiAgLyoqXHJcbiAgICogZGF0YS1yZW1vdmVkOiBUaGUgdHJpZ2dlciBvY2N1cnMgd2hlbmV2ZXIgZGF0YSBvZiBhIHBhcnRpY3VsYXIgdHlwZSBpcyByZW1vdmVkLlxyXG4gICAqL1xyXG4gIERhdGFSZW1vdmVkOiBcImRhdGEtcmVtb3ZlZFwiLFxyXG4gIC8qKlxyXG4gICAqIG5hbWVkLWV2ZW50OiBUaGUgdHJpZ2dlciBvY2N1cnMgaW4gcmVzcG9uc2UgdG8gYSBzcGVjaWZpYyBuYW1lZCBldmVudCwgYW5kIG5vIG90aGVyIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0cmlnZ2VyIGlzIHNwZWNpZmllZC4gTmFtZWQgZXZlbnRzIGFyZSBjb21wbGV0ZWx5IHByZS1jb29yZGluYXRlZCwgYW5kIHRoZSBmb3JtYWwgc2VtYW50aWNzIG9mIHRoZSB0cmlnZ2VyIGFyZSBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgTmFtZWRFdmVudDogXCJuYW1lZC1ldmVudFwiLFxyXG4gIC8qKlxyXG4gICAqIHBlcmlvZGljOiBUaGUgdHJpZ2dlciBvY2N1cnMgYXQgYSBzcGVjaWZpYyB0aW1lIG9yIHBlcmlvZGljYWxseSBhcyBkZXNjcmliZWQgYnkgYSB0aW1pbmcgb3Igc2NoZWR1bGUuIEEgcGVyaW9kaWMgZXZlbnQgY2Fubm90IGhhdmUgYW55IGRhdGEgZWxlbWVudHMsIGJ1dCBtYXkgaGF2ZSBhIG5hbWUgYXNzaWduZWQgYXMgYSBzaG9ydGhhbmQgZm9yIHRoZSBldmVudC5cclxuICAgKi9cclxuICBQZXJpb2RpYzogXCJwZXJpb2RpY1wiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIHRyaWdnZXIuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUcmlnZ2VyVHlwZUNvZGVUeXBlID0gdHlwZW9mIFRyaWdnZXJUeXBlQ29kZXNba2V5b2YgdHlwZW9mIFRyaWdnZXJUeXBlQ29kZXNdO1xyXG4iXX0=