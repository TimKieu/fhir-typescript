// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/verificationresult-validation-process|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The primary process by which the target is validated
 */
export const VerificationresultValidationProcessCodings = {
    /**
     * Code: edit-check
     */
    EditCheck: new Coding({
        display: "edit check",
        code: "edit-check",
        system: "http://terminology.hl7.org/CodeSystem/validation-process",
    }),
    /**
     * Code: in-context
     */
    InContext: new Coding({
        display: "in context",
        code: "in-context",
        system: "http://terminology.hl7.org/CodeSystem/validation-process",
    }),
    /**
     * Code: multi
     */
    MultipleSources: new Coding({
        display: "multiple sources",
        code: "multi",
        system: "http://terminology.hl7.org/CodeSystem/validation-process",
    }),
    /**
     * Code: primary
     */
    PrimarySource: new Coding({
        display: "primary source",
        code: "primary",
        system: "http://terminology.hl7.org/CodeSystem/validation-process",
    }),
    /**
     * Code: standalone
     */
    Standalone: new Coding({
        display: "standalone",
        code: "standalone",
        system: "http://terminology.hl7.org/CodeSystem/validation-process",
    }),
    /**
     * Code: valueset
     */
    ValueSet: new Coding({
        display: "value set",
        code: "valueset",
        system: "http://terminology.hl7.org/CodeSystem/validation-process",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmVyaWZpY2F0aW9ucmVzdWx0VmFsaWRhdGlvblByb2Nlc3NDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9WZXJpZmljYXRpb25yZXN1bHRWYWxpZGF0aW9uUHJvY2Vzc0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMEZBQTBGO0FBRTFGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBDQUEwQyxHQUFHO0lBQ3hEOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMERBQTBEO0tBQ25FLENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC92ZXJpZmljYXRpb25yZXN1bHQtdmFsaWRhdGlvbi1wcm9jZXNzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgcHJpbWFyeSBwcm9jZXNzIGJ5IHdoaWNoIHRoZSB0YXJnZXQgaXMgdmFsaWRhdGVkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVmVyaWZpY2F0aW9ucmVzdWx0VmFsaWRhdGlvblByb2Nlc3NDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IGVkaXQtY2hlY2tcclxuICAgKi9cclxuICBFZGl0Q2hlY2s6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJlZGl0IGNoZWNrXCIsXHJcbiAgICBjb2RlOiBcImVkaXQtY2hlY2tcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3ZhbGlkYXRpb24tcHJvY2Vzc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IGluLWNvbnRleHRcclxuICAgKi9cclxuICBJbkNvbnRleHQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJpbiBjb250ZXh0XCIsXHJcbiAgICBjb2RlOiBcImluLWNvbnRleHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3ZhbGlkYXRpb24tcHJvY2Vzc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IG11bHRpXHJcbiAgICovXHJcbiAgTXVsdGlwbGVTb3VyY2VzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwibXVsdGlwbGUgc291cmNlc1wiLFxyXG4gICAgY29kZTogXCJtdWx0aVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdmFsaWRhdGlvbi1wcm9jZXNzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogcHJpbWFyeVxyXG4gICAqL1xyXG4gIFByaW1hcnlTb3VyY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJwcmltYXJ5IHNvdXJjZVwiLFxyXG4gICAgY29kZTogXCJwcmltYXJ5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92YWxpZGF0aW9uLXByb2Nlc3NcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBzdGFuZGFsb25lXHJcbiAgICovXHJcbiAgU3RhbmRhbG9uZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInN0YW5kYWxvbmVcIixcclxuICAgIGNvZGU6IFwic3RhbmRhbG9uZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdmFsaWRhdGlvbi1wcm9jZXNzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogdmFsdWVzZXRcclxuICAgKi9cclxuICBWYWx1ZVNldDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcInZhbHVlIHNldFwiLFxyXG4gICAgY29kZTogXCJ2YWx1ZXNldFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdmFsaWRhdGlvbi1wcm9jZXNzXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHByaW1hcnkgcHJvY2VzcyBieSB3aGljaCB0aGUgdGFyZ2V0IGlzIHZhbGlkYXRlZFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVmVyaWZpY2F0aW9ucmVzdWx0VmFsaWRhdGlvblByb2Nlc3NDb2RpbmdUeXBlID0gdHlwZW9mIFZlcmlmaWNhdGlvbnJlc3VsdFZhbGlkYXRpb25Qcm9jZXNzQ29kaW5ncztcclxuIl19