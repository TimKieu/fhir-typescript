// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/consent-state-codes|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Indicates the state of the consent.
 */
export const ConsentStateCodesCodings = {
    /**
     * active: The consent is to be followed and enforced.
     */
    Active: new Coding({
        display: "Active",
        code: "active",
        system: "http://hl7.org/fhir/consent-state-codes",
    }),
    /**
     * draft: The consent is in development or awaiting use but is not yet intended to be acted upon.
     */
    Pending: new Coding({
        display: "Pending",
        code: "draft",
        system: "http://hl7.org/fhir/consent-state-codes",
    }),
    /**
     * entered-in-error: The consent was created wrongly (e.g. wrong patient) and should be ignored.
     */
    EnteredInError: new Coding({
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/consent-state-codes",
    }),
    /**
     * inactive: The consent is terminated or replaced.
     */
    Inactive: new Coding({
        display: "Inactive",
        code: "inactive",
        system: "http://hl7.org/fhir/consent-state-codes",
    }),
    /**
     * proposed: The consent has been proposed but not yet agreed to by all parties. The negotiation stage.
     */
    Proposed: new Coding({
        display: "Proposed",
        code: "proposed",
        system: "http://hl7.org/fhir/consent-state-codes",
    }),
    /**
     * rejected: The consent has been rejected by one or more of the parties.
     */
    Rejected: new Coding({
        display: "Rejected",
        code: "rejected",
        system: "http://hl7.org/fhir/consent-state-codes",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc2VudFN0YXRlQ29kZXNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Db25zZW50U3RhdGVDb2Rlc0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBRXhFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb25zZW50LXN0YXRlLWNvZGVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhlIHN0YXRlIG9mIHRoZSBjb25zZW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvbnNlbnRTdGF0ZUNvZGVzQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBhY3RpdmU6IFRoZSBjb25zZW50IGlzIHRvIGJlIGZvbGxvd2VkIGFuZCBlbmZvcmNlZC5cclxuICAgKi9cclxuICBBY3RpdmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBY3RpdmVcIixcclxuICAgIGNvZGU6IFwiYWN0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LXN0YXRlLWNvZGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZHJhZnQ6IFRoZSBjb25zZW50IGlzIGluIGRldmVsb3BtZW50IG9yIGF3YWl0aW5nIHVzZSBidXQgaXMgbm90IHlldCBpbnRlbmRlZCB0byBiZSBhY3RlZCB1cG9uLlxyXG4gICAqL1xyXG4gIFBlbmRpbmc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQZW5kaW5nXCIsXHJcbiAgICBjb2RlOiBcImRyYWZ0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LXN0YXRlLWNvZGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhlIGNvbnNlbnQgd2FzIGNyZWF0ZWQgd3JvbmdseSAoZS5nLiB3cm9uZyBwYXRpZW50KSBhbmQgc2hvdWxkIGJlIGlnbm9yZWQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbnRlcmVkIGluIEVycm9yXCIsXHJcbiAgICBjb2RlOiBcImVudGVyZWQtaW4tZXJyb3JcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBpbmFjdGl2ZTogVGhlIGNvbnNlbnQgaXMgdGVybWluYXRlZCBvciByZXBsYWNlZC5cclxuICAgKi9cclxuICBJbmFjdGl2ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluYWN0aXZlXCIsXHJcbiAgICBjb2RlOiBcImluYWN0aXZlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9jb25zZW50LXN0YXRlLWNvZGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHJvcG9zZWQ6IFRoZSBjb25zZW50IGhhcyBiZWVuIHByb3Bvc2VkIGJ1dCBub3QgeWV0IGFncmVlZCB0byBieSBhbGwgcGFydGllcy4gVGhlIG5lZ290aWF0aW9uIHN0YWdlLlxyXG4gICAqL1xyXG4gIFByb3Bvc2VkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUHJvcG9zZWRcIixcclxuICAgIGNvZGU6IFwicHJvcG9zZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2NvbnNlbnQtc3RhdGUtY29kZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZWplY3RlZDogVGhlIGNvbnNlbnQgaGFzIGJlZW4gcmVqZWN0ZWQgYnkgb25lIG9yIG1vcmUgb2YgdGhlIHBhcnRpZXMuXHJcbiAgICovXHJcbiAgUmVqZWN0ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZWplY3RlZFwiLFxyXG4gICAgY29kZTogXCJyZWplY3RlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvY29uc2VudC1zdGF0ZS1jb2Rlc1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyB0aGUgc3RhdGUgb2YgdGhlIGNvbnNlbnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb25zZW50U3RhdGVDb2Rlc0NvZGluZ1R5cGUgPSB0eXBlb2YgQ29uc2VudFN0YXRlQ29kZXNDb2RpbmdzO1xyXG4iXX0=