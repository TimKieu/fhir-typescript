// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/plan-definition-type|4.0.1
/**
 * The type of PlanDefinition.
 */
export const PlanDefinitionTypeCodings = {
    /**
     * clinical-protocol: Defines a desired/typical sequence of clinical activities including preconditions, triggers and temporal relationships.
     */
    ClinicalProtocol: {
        display: "Clinical Protocol",
        code: "clinical-protocol",
        system: "http://terminology.hl7.org/CodeSystem/plan-definition-type",
    },
    /**
     * eca-rule: A decision support rule of the form [on Event] if Condition then Action. It is intended to be a shareable, computable definition of actions that should be taken whenever some condition is met in response to a particular event or events.
     */
    ECARule: {
        display: "ECA Rule",
        code: "eca-rule",
        system: "http://terminology.hl7.org/CodeSystem/plan-definition-type",
    },
    /**
     * order-set: A pre-defined and approved group of orders related to a particular clinical condition (e.g. hypertension treatment and monitoring) or stage of care (e.g. hospital admission to Coronary Care Unit). An order set is used as a checklist for the clinician when managing a patient with a specific condition. It is a structured collection of orders relevant to that condition and presented to the clinician in a computerized provider order entry (CPOE) system.
     */
    OrderSet: {
        display: "Order Set",
        code: "order-set",
        system: "http://terminology.hl7.org/CodeSystem/plan-definition-type",
    },
    /**
     * workflow-definition: Defines the steps for a group of one or more systems in an event flow process along with the step constraints, sequence, pre-conditions and decision points to complete a particular objective.
     */
    WorkflowDefinition: {
        display: "Workflow Definition",
        code: "workflow-definition",
        system: "http://terminology.hl7.org/CodeSystem/plan-definition-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxhbkRlZmluaXRpb25UeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvUGxhbkRlZmluaXRpb25UeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5RUFBeUU7QUEwQnpFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWdDO0lBQ3BFOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSw0REFBNEQ7S0FDckU7SUFDRDs7T0FFRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQixNQUFNLEVBQUUsNERBQTREO0tBQ3JFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9wbGFuLWRlZmluaXRpb24tdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIFBsYW5EZWZpbml0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGxhbkRlZmluaXRpb25UeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjbGluaWNhbC1wcm90b2NvbDogRGVmaW5lcyBhIGRlc2lyZWQvdHlwaWNhbCBzZXF1ZW5jZSBvZiBjbGluaWNhbCBhY3Rpdml0aWVzIGluY2x1ZGluZyBwcmVjb25kaXRpb25zLCB0cmlnZ2VycyBhbmQgdGVtcG9yYWwgcmVsYXRpb25zaGlwcy5cclxuICAgKi9cclxuICBDbGluaWNhbFByb3RvY29sOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGVjYS1ydWxlOiBBIGRlY2lzaW9uIHN1cHBvcnQgcnVsZSBvZiB0aGUgZm9ybSBbb24gRXZlbnRdIGlmIENvbmRpdGlvbiB0aGVuIEFjdGlvbi4gSXQgaXMgaW50ZW5kZWQgdG8gYmUgYSBzaGFyZWFibGUsIGNvbXB1dGFibGUgZGVmaW5pdGlvbiBvZiBhY3Rpb25zIHRoYXQgc2hvdWxkIGJlIHRha2VuIHdoZW5ldmVyIHNvbWUgY29uZGl0aW9uIGlzIG1ldCBpbiByZXNwb25zZSB0byBhIHBhcnRpY3VsYXIgZXZlbnQgb3IgZXZlbnRzLlxyXG4gICAqL1xyXG4gIEVDQVJ1bGU6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb3JkZXItc2V0OiBBIHByZS1kZWZpbmVkIGFuZCBhcHByb3ZlZCBncm91cCBvZiBvcmRlcnMgcmVsYXRlZCB0byBhIHBhcnRpY3VsYXIgY2xpbmljYWwgY29uZGl0aW9uIChlLmcuIGh5cGVydGVuc2lvbiB0cmVhdG1lbnQgYW5kIG1vbml0b3JpbmcpIG9yIHN0YWdlIG9mIGNhcmUgKGUuZy4gaG9zcGl0YWwgYWRtaXNzaW9uIHRvIENvcm9uYXJ5IENhcmUgVW5pdCkuIEFuIG9yZGVyIHNldCBpcyB1c2VkIGFzIGEgY2hlY2tsaXN0IGZvciB0aGUgY2xpbmljaWFuIHdoZW4gbWFuYWdpbmcgYSBwYXRpZW50IHdpdGggYSBzcGVjaWZpYyBjb25kaXRpb24uIEl0IGlzIGEgc3RydWN0dXJlZCBjb2xsZWN0aW9uIG9mIG9yZGVycyByZWxldmFudCB0byB0aGF0IGNvbmRpdGlvbiBhbmQgcHJlc2VudGVkIHRvIHRoZSBjbGluaWNpYW4gaW4gYSBjb21wdXRlcml6ZWQgcHJvdmlkZXIgb3JkZXIgZW50cnkgKENQT0UpIHN5c3RlbS5cclxuICAgKi9cclxuICBPcmRlclNldDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB3b3JrZmxvdy1kZWZpbml0aW9uOiBEZWZpbmVzIHRoZSBzdGVwcyBmb3IgYSBncm91cCBvZiBvbmUgb3IgbW9yZSBzeXN0ZW1zIGluIGFuIGV2ZW50IGZsb3cgcHJvY2VzcyBhbG9uZyB3aXRoIHRoZSBzdGVwIGNvbnN0cmFpbnRzLCBzZXF1ZW5jZSwgcHJlLWNvbmRpdGlvbnMgYW5kIGRlY2lzaW9uIHBvaW50cyB0byBjb21wbGV0ZSBhIHBhcnRpY3VsYXIgb2JqZWN0aXZlLlxyXG4gICAqL1xyXG4gIFdvcmtmbG93RGVmaW5pdGlvbjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIFBsYW5EZWZpbml0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBsYW5EZWZpbml0aW9uVHlwZUNvZGluZ3M6UGxhbkRlZmluaXRpb25UeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjbGluaWNhbC1wcm90b2NvbDogRGVmaW5lcyBhIGRlc2lyZWQvdHlwaWNhbCBzZXF1ZW5jZSBvZiBjbGluaWNhbCBhY3Rpdml0aWVzIGluY2x1ZGluZyBwcmVjb25kaXRpb25zLCB0cmlnZ2VycyBhbmQgdGVtcG9yYWwgcmVsYXRpb25zaGlwcy5cclxuICAgKi9cclxuICBDbGluaWNhbFByb3RvY29sOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNsaW5pY2FsIFByb3RvY29sXCIsXHJcbiAgICBjb2RlOiBcImNsaW5pY2FsLXByb3RvY29sXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9wbGFuLWRlZmluaXRpb24tdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZWNhLXJ1bGU6IEEgZGVjaXNpb24gc3VwcG9ydCBydWxlIG9mIHRoZSBmb3JtIFtvbiBFdmVudF0gaWYgQ29uZGl0aW9uIHRoZW4gQWN0aW9uLiBJdCBpcyBpbnRlbmRlZCB0byBiZSBhIHNoYXJlYWJsZSwgY29tcHV0YWJsZSBkZWZpbml0aW9uIG9mIGFjdGlvbnMgdGhhdCBzaG91bGQgYmUgdGFrZW4gd2hlbmV2ZXIgc29tZSBjb25kaXRpb24gaXMgbWV0IGluIHJlc3BvbnNlIHRvIGEgcGFydGljdWxhciBldmVudCBvciBldmVudHMuXHJcbiAgICovXHJcbiAgRUNBUnVsZToge1xyXG4gICAgZGlzcGxheTogXCJFQ0EgUnVsZVwiLFxyXG4gICAgY29kZTogXCJlY2EtcnVsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcGxhbi1kZWZpbml0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9yZGVyLXNldDogQSBwcmUtZGVmaW5lZCBhbmQgYXBwcm92ZWQgZ3JvdXAgb2Ygb3JkZXJzIHJlbGF0ZWQgdG8gYSBwYXJ0aWN1bGFyIGNsaW5pY2FsIGNvbmRpdGlvbiAoZS5nLiBoeXBlcnRlbnNpb24gdHJlYXRtZW50IGFuZCBtb25pdG9yaW5nKSBvciBzdGFnZSBvZiBjYXJlIChlLmcuIGhvc3BpdGFsIGFkbWlzc2lvbiB0byBDb3JvbmFyeSBDYXJlIFVuaXQpLiBBbiBvcmRlciBzZXQgaXMgdXNlZCBhcyBhIGNoZWNrbGlzdCBmb3IgdGhlIGNsaW5pY2lhbiB3aGVuIG1hbmFnaW5nIGEgcGF0aWVudCB3aXRoIGEgc3BlY2lmaWMgY29uZGl0aW9uLiBJdCBpcyBhIHN0cnVjdHVyZWQgY29sbGVjdGlvbiBvZiBvcmRlcnMgcmVsZXZhbnQgdG8gdGhhdCBjb25kaXRpb24gYW5kIHByZXNlbnRlZCB0byB0aGUgY2xpbmljaWFuIGluIGEgY29tcHV0ZXJpemVkIHByb3ZpZGVyIG9yZGVyIGVudHJ5IChDUE9FKSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgT3JkZXJTZXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiT3JkZXIgU2V0XCIsXHJcbiAgICBjb2RlOiBcIm9yZGVyLXNldFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcGxhbi1kZWZpbml0aW9uLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHdvcmtmbG93LWRlZmluaXRpb246IERlZmluZXMgdGhlIHN0ZXBzIGZvciBhIGdyb3VwIG9mIG9uZSBvciBtb3JlIHN5c3RlbXMgaW4gYW4gZXZlbnQgZmxvdyBwcm9jZXNzIGFsb25nIHdpdGggdGhlIHN0ZXAgY29uc3RyYWludHMsIHNlcXVlbmNlLCBwcmUtY29uZGl0aW9ucyBhbmQgZGVjaXNpb24gcG9pbnRzIHRvIGNvbXBsZXRlIGEgcGFydGljdWxhciBvYmplY3RpdmUuXHJcbiAgICovXHJcbiAgV29ya2Zsb3dEZWZpbml0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIldvcmtmbG93IERlZmluaXRpb25cIixcclxuICAgIGNvZGU6IFwid29ya2Zsb3ctZGVmaW5pdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcGxhbi1kZWZpbml0aW9uLXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=