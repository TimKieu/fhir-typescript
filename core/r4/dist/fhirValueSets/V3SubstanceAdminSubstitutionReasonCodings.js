// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://terminology.hl7.org/ValueSet/v3-SubstanceAdminSubstitutionReason|2014-03-26
import { Coding } from '../fhir/Coding.js';
/**
 * No Description Provided
 */
export const V3SubstanceAdminSubstitutionReasonCodings = {
    /**
     * CT: Indicates that the decision to substitute or to not substitute was driven by a desire to maintain consistency with a pre-existing therapy.  I.e. The performer provided the same item/service as had been previously provided rather than providing exactly what was ordered, or rather than substituting with a lower-cost equivalent.
     */
    ContinuingTherapy: new Coding({
        display: "continuing therapy",
        code: "CT",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    }),
    /**
     * FP: Indicates that the decision to substitute or to not substitute was driven by a policy expressed within the formulary.
     */
    FormularyPolicy: new Coding({
        display: "formulary policy",
        code: "FP",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    }),
    /**
     * OS: In the case of 'substitution', indicates that the substitution occurred because the ordered item was not in stock.  In the case of 'no substitution', indicates that a cheaper equivalent was not substituted because it was not in stock.
     */
    OutOfStock: new Coding({
        display: "out of stock",
        code: "OS",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    }),
    /**
     * RR: Indicates that the decision to substitute or to not substitute was driven by a jurisdictional regulatory requirement mandating or prohibiting substitution.
     */
    RegulatoryRequirement: new Coding({
        display: "regulatory requirement",
        code: "RR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1YzU3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25SZWFzb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG9HQUFvRztBQUVwRyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBRztJQUN2RDs7T0FFRztJQUNILGlCQUFpQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILHFCQUFxQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hDLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My1TdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbnwyMDE0LTAzLTI2XHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBObyBEZXNjcmlwdGlvbiBQcm92aWRlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFYzU3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25SZWFzb25Db2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIENUOiBJbmRpY2F0ZXMgdGhhdCB0aGUgZGVjaXNpb24gdG8gc3Vic3RpdHV0ZSBvciB0byBub3Qgc3Vic3RpdHV0ZSB3YXMgZHJpdmVuIGJ5IGEgZGVzaXJlIHRvIG1haW50YWluIGNvbnNpc3RlbmN5IHdpdGggYSBwcmUtZXhpc3RpbmcgdGhlcmFweS4gIEkuZS4gVGhlIHBlcmZvcm1lciBwcm92aWRlZCB0aGUgc2FtZSBpdGVtL3NlcnZpY2UgYXMgaGFkIGJlZW4gcHJldmlvdXNseSBwcm92aWRlZCByYXRoZXIgdGhhbiBwcm92aWRpbmcgZXhhY3RseSB3aGF0IHdhcyBvcmRlcmVkLCBvciByYXRoZXIgdGhhbiBzdWJzdGl0dXRpbmcgd2l0aCBhIGxvd2VyLWNvc3QgZXF1aXZhbGVudC5cclxuICAgKi9cclxuICBDb250aW51aW5nVGhlcmFweTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImNvbnRpbnVpbmcgdGhlcmFweVwiLFxyXG4gICAgY29kZTogXCJDVFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0UmVhc29uXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogRlA6IEluZGljYXRlcyB0aGF0IHRoZSBkZWNpc2lvbiB0byBzdWJzdGl0dXRlIG9yIHRvIG5vdCBzdWJzdGl0dXRlIHdhcyBkcml2ZW4gYnkgYSBwb2xpY3kgZXhwcmVzc2VkIHdpdGhpbiB0aGUgZm9ybXVsYXJ5LlxyXG4gICAqL1xyXG4gIEZvcm11bGFyeVBvbGljeTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImZvcm11bGFyeSBwb2xpY3lcIixcclxuICAgIGNvZGU6IFwiRlBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdFJlYXNvblwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIE9TOiBJbiB0aGUgY2FzZSBvZiAnc3Vic3RpdHV0aW9uJywgaW5kaWNhdGVzIHRoYXQgdGhlIHN1YnN0aXR1dGlvbiBvY2N1cnJlZCBiZWNhdXNlIHRoZSBvcmRlcmVkIGl0ZW0gd2FzIG5vdCBpbiBzdG9jay4gIEluIHRoZSBjYXNlIG9mICdubyBzdWJzdGl0dXRpb24nLCBpbmRpY2F0ZXMgdGhhdCBhIGNoZWFwZXIgZXF1aXZhbGVudCB3YXMgbm90IHN1YnN0aXR1dGVkIGJlY2F1c2UgaXQgd2FzIG5vdCBpbiBzdG9jay5cclxuICAgKi9cclxuICBPdXRPZlN0b2NrOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwib3V0IG9mIHN0b2NrXCIsXHJcbiAgICBjb2RlOiBcIk9TXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RSZWFzb25cIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBSUjogSW5kaWNhdGVzIHRoYXQgdGhlIGRlY2lzaW9uIHRvIHN1YnN0aXR1dGUgb3IgdG8gbm90IHN1YnN0aXR1dGUgd2FzIGRyaXZlbiBieSBhIGp1cmlzZGljdGlvbmFsIHJlZ3VsYXRvcnkgcmVxdWlyZW1lbnQgbWFuZGF0aW5nIG9yIHByb2hpYml0aW5nIHN1YnN0aXR1dGlvbi5cclxuICAgKi9cclxuICBSZWd1bGF0b3J5UmVxdWlyZW1lbnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJyZWd1bGF0b3J5IHJlcXVpcmVtZW50XCIsXHJcbiAgICBjb2RlOiBcIlJSXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RSZWFzb25cIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBObyBEZXNjcmlwdGlvbiBQcm92aWRlZFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbkNvZGluZ1R5cGUgPSB0eXBlb2YgVjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbkNvZGluZ3M7XHJcbiJdfQ==