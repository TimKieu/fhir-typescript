// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://terminology.hl7.org/ValueSet/v3-SubstanceAdminSubstitutionReason|2014-03-26
/**
 * No Description Provided
 */
export const V3SubstanceAdminSubstitutionReasonCodings = {
    /**
     * CT: Indicates that the decision to substitute or to not substitute was driven by a desire to maintain consistency with a pre-existing therapy.  I.e. The performer provided the same item/service as had been previously provided rather than providing exactly what was ordered, or rather than substituting with a lower-cost equivalent.
     */
    ContinuingTherapy: {
        display: "continuing therapy",
        code: "CT",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * FP: Indicates that the decision to substitute or to not substitute was driven by a policy expressed within the formulary.
     */
    FormularyPolicy: {
        display: "formulary policy",
        code: "FP",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * OS: In the case of 'substitution', indicates that the substitution occurred because the ordered item was not in stock.  In the case of 'no substitution', indicates that a cheaper equivalent was not substituted because it was not in stock.
     */
    OutOfStock: {
        display: "out of stock",
        code: "OS",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * RR: Indicates that the decision to substitute or to not substitute was driven by a jurisdictional regulatory requirement mandating or prohibiting substitution.
     */
    RegulatoryRequirement: {
        display: "regulatory requirement",
        code: "RR",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbkNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1YzU3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25SZWFzb25Db2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG9HQUFvRztBQTBCcEc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBZ0Q7SUFDcEc7O09BRUc7SUFDSCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gscUJBQXFCLEVBQUU7UUFDckIsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My1TdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbnwyMDE0LTAzLTI2XHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogTm8gRGVzY3JpcHRpb24gUHJvdmlkZWRcclxuICovXHJcbmV4cG9ydCB0eXBlIFYzU3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25SZWFzb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENUOiBJbmRpY2F0ZXMgdGhhdCB0aGUgZGVjaXNpb24gdG8gc3Vic3RpdHV0ZSBvciB0byBub3Qgc3Vic3RpdHV0ZSB3YXMgZHJpdmVuIGJ5IGEgZGVzaXJlIHRvIG1haW50YWluIGNvbnNpc3RlbmN5IHdpdGggYSBwcmUtZXhpc3RpbmcgdGhlcmFweS4gIEkuZS4gVGhlIHBlcmZvcm1lciBwcm92aWRlZCB0aGUgc2FtZSBpdGVtL3NlcnZpY2UgYXMgaGFkIGJlZW4gcHJldmlvdXNseSBwcm92aWRlZCByYXRoZXIgdGhhbiBwcm92aWRpbmcgZXhhY3RseSB3aGF0IHdhcyBvcmRlcmVkLCBvciByYXRoZXIgdGhhbiBzdWJzdGl0dXRpbmcgd2l0aCBhIGxvd2VyLWNvc3QgZXF1aXZhbGVudC5cclxuICAgKi9cclxuICBDb250aW51aW5nVGhlcmFweTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBGUDogSW5kaWNhdGVzIHRoYXQgdGhlIGRlY2lzaW9uIHRvIHN1YnN0aXR1dGUgb3IgdG8gbm90IHN1YnN0aXR1dGUgd2FzIGRyaXZlbiBieSBhIHBvbGljeSBleHByZXNzZWQgd2l0aGluIHRoZSBmb3JtdWxhcnkuXHJcbiAgICovXHJcbiAgRm9ybXVsYXJ5UG9saWN5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE9TOiBJbiB0aGUgY2FzZSBvZiAnc3Vic3RpdHV0aW9uJywgaW5kaWNhdGVzIHRoYXQgdGhlIHN1YnN0aXR1dGlvbiBvY2N1cnJlZCBiZWNhdXNlIHRoZSBvcmRlcmVkIGl0ZW0gd2FzIG5vdCBpbiBzdG9jay4gIEluIHRoZSBjYXNlIG9mICdubyBzdWJzdGl0dXRpb24nLCBpbmRpY2F0ZXMgdGhhdCBhIGNoZWFwZXIgZXF1aXZhbGVudCB3YXMgbm90IHN1YnN0aXR1dGVkIGJlY2F1c2UgaXQgd2FzIG5vdCBpbiBzdG9jay5cclxuICAgKi9cclxuICBPdXRPZlN0b2NrOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJSOiBJbmRpY2F0ZXMgdGhhdCB0aGUgZGVjaXNpb24gdG8gc3Vic3RpdHV0ZSBvciB0byBub3Qgc3Vic3RpdHV0ZSB3YXMgZHJpdmVuIGJ5IGEganVyaXNkaWN0aW9uYWwgcmVndWxhdG9yeSByZXF1aXJlbWVudCBtYW5kYXRpbmcgb3IgcHJvaGliaXRpbmcgc3Vic3RpdHV0aW9uLlxyXG4gICAqL1xyXG4gIFJlZ3VsYXRvcnlSZXF1aXJlbWVudDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIE5vIERlc2NyaXB0aW9uIFByb3ZpZGVkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbkNvZGluZ3M6VjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvbkNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogQ1Q6IEluZGljYXRlcyB0aGF0IHRoZSBkZWNpc2lvbiB0byBzdWJzdGl0dXRlIG9yIHRvIG5vdCBzdWJzdGl0dXRlIHdhcyBkcml2ZW4gYnkgYSBkZXNpcmUgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3kgd2l0aCBhIHByZS1leGlzdGluZyB0aGVyYXB5LiAgSS5lLiBUaGUgcGVyZm9ybWVyIHByb3ZpZGVkIHRoZSBzYW1lIGl0ZW0vc2VydmljZSBhcyBoYWQgYmVlbiBwcmV2aW91c2x5IHByb3ZpZGVkIHJhdGhlciB0aGFuIHByb3ZpZGluZyBleGFjdGx5IHdoYXQgd2FzIG9yZGVyZWQsIG9yIHJhdGhlciB0aGFuIHN1YnN0aXR1dGluZyB3aXRoIGEgbG93ZXItY29zdCBlcXVpdmFsZW50LlxyXG4gICAqL1xyXG4gIENvbnRpbnVpbmdUaGVyYXB5OiB7XHJcbiAgICBkaXNwbGF5OiBcImNvbnRpbnVpbmcgdGhlcmFweVwiLFxyXG4gICAgY29kZTogXCJDVFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0UmVhc29uXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBGUDogSW5kaWNhdGVzIHRoYXQgdGhlIGRlY2lzaW9uIHRvIHN1YnN0aXR1dGUgb3IgdG8gbm90IHN1YnN0aXR1dGUgd2FzIGRyaXZlbiBieSBhIHBvbGljeSBleHByZXNzZWQgd2l0aGluIHRoZSBmb3JtdWxhcnkuXHJcbiAgICovXHJcbiAgRm9ybXVsYXJ5UG9saWN5OiB7XHJcbiAgICBkaXNwbGF5OiBcImZvcm11bGFyeSBwb2xpY3lcIixcclxuICAgIGNvZGU6IFwiRlBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdFJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogT1M6IEluIHRoZSBjYXNlIG9mICdzdWJzdGl0dXRpb24nLCBpbmRpY2F0ZXMgdGhhdCB0aGUgc3Vic3RpdHV0aW9uIG9jY3VycmVkIGJlY2F1c2UgdGhlIG9yZGVyZWQgaXRlbSB3YXMgbm90IGluIHN0b2NrLiAgSW4gdGhlIGNhc2Ugb2YgJ25vIHN1YnN0aXR1dGlvbicsIGluZGljYXRlcyB0aGF0IGEgY2hlYXBlciBlcXVpdmFsZW50IHdhcyBub3Qgc3Vic3RpdHV0ZWQgYmVjYXVzZSBpdCB3YXMgbm90IGluIHN0b2NrLlxyXG4gICAqL1xyXG4gIE91dE9mU3RvY2s6IHtcclxuICAgIGRpc3BsYXk6IFwib3V0IG9mIHN0b2NrXCIsXHJcbiAgICBjb2RlOiBcIk9TXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RSZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJSOiBJbmRpY2F0ZXMgdGhhdCB0aGUgZGVjaXNpb24gdG8gc3Vic3RpdHV0ZSBvciB0byBub3Qgc3Vic3RpdHV0ZSB3YXMgZHJpdmVuIGJ5IGEganVyaXNkaWN0aW9uYWwgcmVndWxhdG9yeSByZXF1aXJlbWVudCBtYW5kYXRpbmcgb3IgcHJvaGliaXRpbmcgc3Vic3RpdHV0aW9uLlxyXG4gICAqL1xyXG4gIFJlZ3VsYXRvcnlSZXF1aXJlbWVudDoge1xyXG4gICAgZGlzcGxheTogXCJyZWd1bGF0b3J5IHJlcXVpcmVtZW50XCIsXHJcbiAgICBjb2RlOiBcIlJSXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RSZWFzb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=