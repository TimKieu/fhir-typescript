// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/restful-security-service|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Types of security services used with FHIR.
 */
export const RestfulSecurityServiceCodings = {
    /**
     * Basic: Basic authentication defined in HTTP specification.
     */
    Basic: new Coding({
        display: "Basic",
        code: "Basic",
        system: "http://terminology.hl7.org/CodeSystem/restful-security-service",
    }),
    /**
     * Certificates: SSL where client must have a certificate registered with the server.
     */
    Certificates: new Coding({
        display: "Certificates",
        code: "Certificates",
        system: "http://terminology.hl7.org/CodeSystem/restful-security-service",
    }),
    /**
     * Kerberos: see http://www.ietf.org/rfc/rfc4120.txt.
     */
    Kerberos: new Coding({
        display: "Kerberos",
        code: "Kerberos",
        system: "http://terminology.hl7.org/CodeSystem/restful-security-service",
    }),
    /**
     * NTLM: Microsoft NTLM Authentication.
     */
    NTLM: new Coding({
        display: "NTLM",
        code: "NTLM",
        system: "http://terminology.hl7.org/CodeSystem/restful-security-service",
    }),
    /**
     * OAuth: OAuth (unspecified version see oauth.net).
     */
    OAuth: new Coding({
        display: "OAuth",
        code: "OAuth",
        system: "http://terminology.hl7.org/CodeSystem/restful-security-service",
    }),
    /**
     * SMART-on-FHIR: OAuth2 using SMART-on-FHIR profile (see http://docs.smarthealthit.org/).
     */
    SMARTOnFHIR: new Coding({
        display: "SMART-on-FHIR",
        code: "SMART-on-FHIR",
        system: "http://terminology.hl7.org/CodeSystem/restful-security-service",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzdGZ1bFNlY3VyaXR5U2VydmljZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1Jlc3RmdWxTZWN1cml0eVNlcnZpY2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZFQUE2RTtBQUU3RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRztJQUMzQzs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2YsT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxnRUFBZ0U7S0FDekUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLGdFQUFnRTtLQUN6RSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZXN0ZnVsLXNlY3VyaXR5LXNlcnZpY2V8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFR5cGVzIG9mIHNlY3VyaXR5IHNlcnZpY2VzIHVzZWQgd2l0aCBGSElSLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFJlc3RmdWxTZWN1cml0eVNlcnZpY2VDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIEJhc2ljOiBCYXNpYyBhdXRoZW50aWNhdGlvbiBkZWZpbmVkIGluIEhUVFAgc3BlY2lmaWNhdGlvbi5cclxuICAgKi9cclxuICBCYXNpYzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJhc2ljXCIsXHJcbiAgICBjb2RlOiBcIkJhc2ljXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yZXN0ZnVsLXNlY3VyaXR5LXNlcnZpY2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDZXJ0aWZpY2F0ZXM6IFNTTCB3aGVyZSBjbGllbnQgbXVzdCBoYXZlIGEgY2VydGlmaWNhdGUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgQ2VydGlmaWNhdGVzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2VydGlmaWNhdGVzXCIsXHJcbiAgICBjb2RlOiBcIkNlcnRpZmljYXRlc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmVzdGZ1bC1zZWN1cml0eS1zZXJ2aWNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogS2VyYmVyb3M6IHNlZSBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIwLnR4dC5cclxuICAgKi9cclxuICBLZXJiZXJvczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIktlcmJlcm9zXCIsXHJcbiAgICBjb2RlOiBcIktlcmJlcm9zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yZXN0ZnVsLXNlY3VyaXR5LXNlcnZpY2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBOVExNOiBNaWNyb3NvZnQgTlRMTSBBdXRoZW50aWNhdGlvbi5cclxuICAgKi9cclxuICBOVExNOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTlRMTVwiLFxyXG4gICAgY29kZTogXCJOVExNXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yZXN0ZnVsLXNlY3VyaXR5LXNlcnZpY2VcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBPQXV0aDogT0F1dGggKHVuc3BlY2lmaWVkIHZlcnNpb24gc2VlIG9hdXRoLm5ldCkuXHJcbiAgICovXHJcbiAgT0F1dGg6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJPQXV0aFwiLFxyXG4gICAgY29kZTogXCJPQXV0aFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmVzdGZ1bC1zZWN1cml0eS1zZXJ2aWNlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogU01BUlQtb24tRkhJUjogT0F1dGgyIHVzaW5nIFNNQVJULW9uLUZISVIgcHJvZmlsZSAoc2VlIGh0dHA6Ly9kb2NzLnNtYXJ0aGVhbHRoaXQub3JnLykuXHJcbiAgICovXHJcbiAgU01BUlRPbkZISVI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTTUFSVC1vbi1GSElSXCIsXHJcbiAgICBjb2RlOiBcIlNNQVJULW9uLUZISVJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Jlc3RmdWwtc2VjdXJpdHktc2VydmljZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFR5cGVzIG9mIHNlY3VyaXR5IHNlcnZpY2VzIHVzZWQgd2l0aCBGSElSLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVzdGZ1bFNlY3VyaXR5U2VydmljZUNvZGluZ1R5cGUgPSB0eXBlb2YgUmVzdGZ1bFNlY3VyaXR5U2VydmljZUNvZGluZ3M7XHJcbiJdfQ==