// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/marital-status|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set defines the set of codes that can be used to indicate the marital status of a person.
 */
export const MaritalStatusCodings = {
    /**
     * A: Marriage contract has been declared null and to not have existed
     */
    Annulled: new Coding({
        display: "Annulled",
        code: "A",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * D: Marriage contract has been declared dissolved and inactive
     */
    Divorced: new Coding({
        display: "Divorced",
        code: "D",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * I: Subject to an Interlocutory Decree.
     */
    Interlocutory: new Coding({
        display: "Interlocutory",
        code: "I",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * L: Legally Separated
     */
    LegallySeparated: new Coding({
        display: "Legally Separated",
        code: "L",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * M: A current marriage contract is active
     */
    Married: new Coding({
        display: "Married",
        code: "M",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * P: More than 1 current spouse
     */
    Polygamous: new Coding({
        display: "Polygamous",
        code: "P",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * S: No marriage contract has ever been entered
     */
    NeverMarried: new Coding({
        display: "Never Married",
        code: "S",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * T: Person declares that a domestic partner relationship exists.
     */
    DomesticPartner: new Coding({
        display: "Domestic partner",
        code: "T",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * U: Currently not in a marriage contract.
     */
    Unmarried: new Coding({
        display: "unmarried",
        code: "U",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
    /**
     * UNK: Description:A proper value is applicable, but not known.
     *
     *
     *                            Usage Notes: This means the actual value is not known.  If the only thing that is unknown is how to properly express the value in the necessary constraints (value set, datatype, etc.), then the OTH or UNC flavor should be used.  No properties should be included for a datatype with this property unless:
     *
     *
     *                            Those properties themselves directly translate to a semantic of "unknown".  (E.g. a local code sent as a translation that conveys 'unknown')
     *                            Those properties further qualify the nature of what is unknown.  (E.g. specifying a use code of "H" and a URL prefix of "tel:" to convey that it is the home phone number that is unknown.)
     */
    Unknown: new Coding({
        display: "unknown",
        code: "UNK",
        system: "http://terminology.hl7.org/CodeSystem/v3-NullFlavor",
    }),
    /**
     * W: The spouse has died
     */
    Widowed: new Coding({
        display: "Widowed",
        code: "W",
        system: "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFyaXRhbFN0YXR1c0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL01hcml0YWxTdGF0dXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQUVuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQzs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSx3REFBd0Q7S0FDakUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLEdBQUc7UUFDVCxNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFLENBQUM7SUFDRjs7T0FFRztJQUNILGdCQUFnQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzNCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLEdBQUc7UUFDVCxNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFLENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSx3REFBd0Q7S0FDakUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxZQUFZLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLEdBQUc7UUFDVCxNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFLENBQUM7SUFDRjs7T0FFRztJQUNILGVBQWUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMxQixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLEdBQUc7UUFDVCxNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFLENBQUM7SUFDRjs7Ozs7Ozs7O09BU0c7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUscURBQXFEO0tBQzlELENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSx3REFBd0Q7S0FDakUsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWFyaXRhbC1zdGF0dXN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgdGhlIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHRoZSBtYXJpdGFsIHN0YXR1cyBvZiBhIHBlcnNvbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBNYXJpdGFsU3RhdHVzQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBBOiBNYXJyaWFnZSBjb250cmFjdCBoYXMgYmVlbiBkZWNsYXJlZCBudWxsIGFuZCB0byBub3QgaGF2ZSBleGlzdGVkXHJcbiAgICovXHJcbiAgQW5udWxsZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBbm51bGxlZFwiLFxyXG4gICAgY29kZTogXCJBXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1NYXJpdGFsU3RhdHVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogRDogTWFycmlhZ2UgY29udHJhY3QgaGFzIGJlZW4gZGVjbGFyZWQgZGlzc29sdmVkIGFuZCBpbmFjdGl2ZVxyXG4gICAqL1xyXG4gIERpdm9yY2VkOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGl2b3JjZWRcIixcclxuICAgIGNvZGU6IFwiRFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEk6IFN1YmplY3QgdG8gYW4gSW50ZXJsb2N1dG9yeSBEZWNyZWUuXHJcbiAgICovXHJcbiAgSW50ZXJsb2N1dG9yeTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkludGVybG9jdXRvcnlcIixcclxuICAgIGNvZGU6IFwiSVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIEw6IExlZ2FsbHkgU2VwYXJhdGVkXHJcbiAgICovXHJcbiAgTGVnYWxseVNlcGFyYXRlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxlZ2FsbHkgU2VwYXJhdGVkXCIsXHJcbiAgICBjb2RlOiBcIkxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU1hcml0YWxTdGF0dXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBNOiBBIGN1cnJlbnQgbWFycmlhZ2UgY29udHJhY3QgaXMgYWN0aXZlXHJcbiAgICovXHJcbiAgTWFycmllZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1hcnJpZWRcIixcclxuICAgIGNvZGU6IFwiTVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFA6IE1vcmUgdGhhbiAxIGN1cnJlbnQgc3BvdXNlXHJcbiAgICovXHJcbiAgUG9seWdhbW91czogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBvbHlnYW1vdXNcIixcclxuICAgIGNvZGU6IFwiUFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFM6IE5vIG1hcnJpYWdlIGNvbnRyYWN0IGhhcyBldmVyIGJlZW4gZW50ZXJlZFxyXG4gICAqL1xyXG4gIE5ldmVyTWFycmllZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5ldmVyIE1hcnJpZWRcIixcclxuICAgIGNvZGU6IFwiU1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFQ6IFBlcnNvbiBkZWNsYXJlcyB0aGF0IGEgZG9tZXN0aWMgcGFydG5lciByZWxhdGlvbnNoaXAgZXhpc3RzLlxyXG4gICAqL1xyXG4gIERvbWVzdGljUGFydG5lcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRvbWVzdGljIHBhcnRuZXJcIixcclxuICAgIGNvZGU6IFwiVFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFU6IEN1cnJlbnRseSBub3QgaW4gYSBtYXJyaWFnZSBjb250cmFjdC5cclxuICAgKi9cclxuICBVbm1hcnJpZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJ1bm1hcnJpZWRcIixcclxuICAgIGNvZGU6IFwiVVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFVOSzogRGVzY3JpcHRpb246QSBwcm9wZXIgdmFsdWUgaXMgYXBwbGljYWJsZSwgYnV0IG5vdCBrbm93bi5cclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2FnZSBOb3RlczogVGhpcyBtZWFucyB0aGUgYWN0dWFsIHZhbHVlIGlzIG5vdCBrbm93bi4gIElmIHRoZSBvbmx5IHRoaW5nIHRoYXQgaXMgdW5rbm93biBpcyBob3cgdG8gcHJvcGVybHkgZXhwcmVzcyB0aGUgdmFsdWUgaW4gdGhlIG5lY2Vzc2FyeSBjb25zdHJhaW50cyAodmFsdWUgc2V0LCBkYXRhdHlwZSwgZXRjLiksIHRoZW4gdGhlIE9USCBvciBVTkMgZmxhdm9yIHNob3VsZCBiZSB1c2VkLiAgTm8gcHJvcGVydGllcyBzaG91bGQgYmUgaW5jbHVkZWQgZm9yIGEgZGF0YXR5cGUgd2l0aCB0aGlzIHByb3BlcnR5IHVubGVzczpcclxuICAgKiBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaG9zZSBwcm9wZXJ0aWVzIHRoZW1zZWx2ZXMgZGlyZWN0bHkgdHJhbnNsYXRlIHRvIGEgc2VtYW50aWMgb2YgXCJ1bmtub3duXCIuICAoRS5nLiBhIGxvY2FsIGNvZGUgc2VudCBhcyBhIHRyYW5zbGF0aW9uIHRoYXQgY29udmV5cyAndW5rbm93bicpXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhvc2UgcHJvcGVydGllcyBmdXJ0aGVyIHF1YWxpZnkgdGhlIG5hdHVyZSBvZiB3aGF0IGlzIHVua25vd24uICAoRS5nLiBzcGVjaWZ5aW5nIGEgdXNlIGNvZGUgb2YgXCJIXCIgYW5kIGEgVVJMIHByZWZpeCBvZiBcInRlbDpcIiB0byBjb252ZXkgdGhhdCBpdCBpcyB0aGUgaG9tZSBwaG9uZSBudW1iZXIgdGhhdCBpcyB1bmtub3duLilcclxuICAgKi9cclxuICBVbmtub3duOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwidW5rbm93blwiLFxyXG4gICAgY29kZTogXCJVTktcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU51bGxGbGF2b3JcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBXOiBUaGUgc3BvdXNlIGhhcyBkaWVkXHJcbiAgICovXHJcbiAgV2lkb3dlZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIldpZG93ZWRcIixcclxuICAgIGNvZGU6IFwiV1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtTWFyaXRhbFN0YXR1c1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgdGhlIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHRoZSBtYXJpdGFsIHN0YXR1cyBvZiBhIHBlcnNvbi5cclxuICovXHJcbmV4cG9ydCB0eXBlIE1hcml0YWxTdGF0dXNDb2RpbmdUeXBlID0gdHlwZW9mIE1hcml0YWxTdGF0dXNDb2RpbmdzO1xyXG4iXX0=