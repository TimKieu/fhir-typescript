// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/filter-operator|4.0.1
/**
 * The kind of operation to perform as a part of a property based filter.
 */
export const FilterOperatorCodes = {
    /**
     * =: The specified property of the code equals the provided value.
     */
    Equals: "=",
    /**
     * descendent-of: Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, excluding the provided concept itself i.e. include descendant codes only).
     */
    DescendentOfBySubsumption: "descendent-of",
    /**
     * exists: The specified property of the code has at least one value (if the specified value is true; if the specified value is false, then matches when the specified property of the code has no values).
     */
    Exists: "exists",
    /**
     * generalizes: Includes all concept ids that have a transitive is-a relationship from the concept Id provided as the value, including the provided concept itself (i.e. include ancestor codes and self).
     */
    GeneralizesBySubsumption: "generalizes",
    /**
     * in: The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list).
     */
    InSet: "in",
    /**
     * is-a: Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself (include descendant codes and self).
     */
    IsABySubsumption: "is-a",
    /**
     * is-not-a: The specified property of the code does not have an is-a relationship with the provided value.
     */
    NotIsABySubsumption: "is-not-a",
    /**
     * not-in: The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list).
     */
    NotInSet: "not-in",
    /**
     * regex: The specified property of the code  matches the regex specified in the provided value.
     */
    RegularExpression: "regex",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsdGVyT3BlcmF0b3JDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRmlsdGVyT3BlcmF0b3JDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxvRUFBb0U7QUFFcEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRztJQUNqQzs7T0FFRztJQUNILE1BQU0sRUFBRSxHQUFHO0lBQ1g7O09BRUc7SUFDSCx5QkFBeUIsRUFBRSxlQUFlO0lBQzFDOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCx3QkFBd0IsRUFBRSxhQUFhO0lBQ3ZDOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUk7SUFDWDs7T0FFRztJQUNILGdCQUFnQixFQUFFLE1BQU07SUFDeEI7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxVQUFVO0lBQy9COztPQUVHO0lBQ0gsUUFBUSxFQUFFLFFBQVE7SUFDbEI7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxPQUFPO0NBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZmlsdGVyLW9wZXJhdG9yfDQuMC4xXHJcblxyXG4vKipcclxuICogVGhlIGtpbmQgb2Ygb3BlcmF0aW9uIHRvIHBlcmZvcm0gYXMgYSBwYXJ0IG9mIGEgcHJvcGVydHkgYmFzZWQgZmlsdGVyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEZpbHRlck9wZXJhdG9yQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogPTogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBlcXVhbHMgdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIEVxdWFsczogXCI9XCIsXHJcbiAgLyoqXHJcbiAgICogZGVzY2VuZGVudC1vZjogSW5jbHVkZXMgYWxsIGNvbmNlcHQgaWRzIHRoYXQgaGF2ZSBhIHRyYW5zaXRpdmUgaXMtYSByZWxhdGlvbnNoaXAgd2l0aCB0aGUgY29uY2VwdCBJZCBwcm92aWRlZCBhcyB0aGUgdmFsdWUsIGV4Y2x1ZGluZyB0aGUgcHJvdmlkZWQgY29uY2VwdCBpdHNlbGYgaS5lLiBpbmNsdWRlIGRlc2NlbmRhbnQgY29kZXMgb25seSkuXHJcbiAgICovXHJcbiAgRGVzY2VuZGVudE9mQnlTdWJzdW1wdGlvbjogXCJkZXNjZW5kZW50LW9mXCIsXHJcbiAgLyoqXHJcbiAgICogZXhpc3RzOiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlIGhhcyBhdCBsZWFzdCBvbmUgdmFsdWUgKGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgdHJ1ZTsgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBmYWxzZSwgdGhlbiBtYXRjaGVzIHdoZW4gdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSBoYXMgbm8gdmFsdWVzKS5cclxuICAgKi9cclxuICBFeGlzdHM6IFwiZXhpc3RzXCIsXHJcbiAgLyoqXHJcbiAgICogZ2VuZXJhbGl6ZXM6IEluY2x1ZGVzIGFsbCBjb25jZXB0IGlkcyB0aGF0IGhhdmUgYSB0cmFuc2l0aXZlIGlzLWEgcmVsYXRpb25zaGlwIGZyb20gdGhlIGNvbmNlcHQgSWQgcHJvdmlkZWQgYXMgdGhlIHZhbHVlLCBpbmNsdWRpbmcgdGhlIHByb3ZpZGVkIGNvbmNlcHQgaXRzZWxmIChpLmUuIGluY2x1ZGUgYW5jZXN0b3IgY29kZXMgYW5kIHNlbGYpLlxyXG4gICAqL1xyXG4gIEdlbmVyYWxpemVzQnlTdWJzdW1wdGlvbjogXCJnZW5lcmFsaXplc1wiLFxyXG4gIC8qKlxyXG4gICAqIGluOiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlIGlzIGluIHRoZSBzZXQgb2YgY29kZXMgb3IgY29uY2VwdHMgc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCB2YWx1ZSAoY29tbWEgc2VwYXJhdGVkIGxpc3QpLlxyXG4gICAqL1xyXG4gIEluU2V0OiBcImluXCIsXHJcbiAgLyoqXHJcbiAgICogaXMtYTogSW5jbHVkZXMgYWxsIGNvbmNlcHQgaWRzIHRoYXQgaGF2ZSBhIHRyYW5zaXRpdmUgaXMtYSByZWxhdGlvbnNoaXAgd2l0aCB0aGUgY29uY2VwdCBJZCBwcm92aWRlZCBhcyB0aGUgdmFsdWUsIGluY2x1ZGluZyB0aGUgcHJvdmlkZWQgY29uY2VwdCBpdHNlbGYgKGluY2x1ZGUgZGVzY2VuZGFudCBjb2RlcyBhbmQgc2VsZikuXHJcbiAgICovXHJcbiAgSXNBQnlTdWJzdW1wdGlvbjogXCJpcy1hXCIsXHJcbiAgLyoqXHJcbiAgICogaXMtbm90LWE6IFRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb2YgdGhlIGNvZGUgZG9lcyBub3QgaGF2ZSBhbiBpcy1hIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBOb3RJc0FCeVN1YnN1bXB0aW9uOiBcImlzLW5vdC1hXCIsXHJcbiAgLyoqXHJcbiAgICogbm90LWluOiBUaGUgc3BlY2lmaWVkIHByb3BlcnR5IG9mIHRoZSBjb2RlIGlzIG5vdCBpbiB0aGUgc2V0IG9mIGNvZGVzIG9yIGNvbmNlcHRzIHNwZWNpZmllZCBpbiB0aGUgcHJvdmlkZWQgdmFsdWUgKGNvbW1hIHNlcGFyYXRlZCBsaXN0KS5cclxuICAgKi9cclxuICBOb3RJblNldDogXCJub3QtaW5cIixcclxuICAvKipcclxuICAgKiByZWdleDogVGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgY29kZSAgbWF0Y2hlcyB0aGUgcmVnZXggc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCB2YWx1ZS5cclxuICAgKi9cclxuICBSZWd1bGFyRXhwcmVzc2lvbjogXCJyZWdleFwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBraW5kIG9mIG9wZXJhdGlvbiB0byBwZXJmb3JtIGFzIGEgcGFydCBvZiBhIHByb3BlcnR5IGJhc2VkIGZpbHRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIEZpbHRlck9wZXJhdG9yQ29kZVR5cGUgPSB0eXBlb2YgRmlsdGVyT3BlcmF0b3JDb2Rlc1trZXlvZiB0eXBlb2YgRmlsdGVyT3BlcmF0b3JDb2Rlc107XHJcbiJdfQ==