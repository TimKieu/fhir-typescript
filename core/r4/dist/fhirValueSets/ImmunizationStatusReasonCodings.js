// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-status-reason|4.0.1
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the reason why a dose of vaccine was not administered. This value set is provided as a suggestive example.
 */
export const ImmunizationStatusReasonCodings = {
    /**
     * Code: 171257003
     */
    NoConsentTetanusLowDoseDiphtheriaVaccine: {
        display: "No consent - Tetanus/low dose diphtheria vaccine",
        code: "171257003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171265000
     */
    PertussisVaccineRefused: {
        display: "Pertussis vaccine refused",
        code: "171265000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171266004
     */
    NoConsentDiphtheriaImmunization: {
        display: "No consent - diphtheria immunization",
        code: "171266004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171267008
     */
    NoConsentTetanusImmunization: {
        display: "No consent - tetanus immunization",
        code: "171267008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171268003
     */
    PolioImmunizationRefused: {
        display: "Polio immunization refused",
        code: "171268003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171269006
     */
    NoConsentMeaslesImmunization: {
        display: "No consent - measles immunization",
        code: "171269006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171270007
     */
    NoConsentRubellaImmunization: {
        display: "No consent - rubella immunization",
        code: "171270007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171271006
     */
    NoConsentBCG: {
        display: "No consent - BCG",
        code: "171271006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171272004
     */
    NoConsentInfluenzaImmunization: {
        display: "No consent - influenza immunization",
        code: "171272004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171280006
     */
    NoConsentForMMR: {
        display: "No consent for MMR",
        code: "171280006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171283008
     */
    NoConsentForAnyPrimaryImmunization: {
        display: "No consent for any primary immunization",
        code: "171283008",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171285001
     */
    NoConsentPreSchoolVaccinations: {
        display: "No consent - pre-school vaccinations",
        code: "171285001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171286000
     */
    NoConsentSchoolExitVaccinations: {
        display: "No consent - school exit vaccinations",
        code: "171286000",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171291004
     */
    NoConsentHaemophilusInfluenzaeTypeBImmunization: {
        display: "No consent - Haemophilus influenzae type B immunization",
        code: "171291004",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171292006
     */
    NoConsentPneumococcalImmunization: {
        display: "No consent pneumococcal immunization",
        code: "171292006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 171293001
     */
    NoConsentForMRMeaslesRubellaVaccine: {
        display: "No consent for MR - Measles/rubella vaccine",
        code: "171293001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 268559007
     */
    NoConsentForAnyImmunization: {
        display: "No consent for any immunization",
        code: "268559007",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 310839003
     */
    NoConsentForMMR1: {
        display: "No consent for MMR1",
        code: "310839003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 310840001
     */
    NoConsentForSecondMeaslesMumpsAndRubellaVaccine: {
        display: "No consent for second measles, mumps and rubella vaccine",
        code: "310840001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 314768003
     */
    NoConsentDiphtheriaTetanusPertussisImmunization: {
        display: "No consent diphtheria, tetanus, pertussis immunization",
        code: "314768003",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 314769006
     */
    NoConsentTetanusPlusDiphtheriaImmunization: {
        display: "No consent tetanus plus diphtheria immunization",
        code: "314769006",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 314936001
     */
    NoConsentForMeningitisCImmunization: {
        display: "No consent for meningitis C immunization",
        code: "314936001",
        system: "http://snomed.info/sct",
    },
    /**
     * Code: 407598009
     */
    NoConsentFor3rdHIBBooster: {
        display: "No consent for 3rd HIB booster",
        code: "407598009",
        system: "http://snomed.info/sct",
    },
    /**
     * IMMUNE: Definition:Testing has shown that the patient already has immunity to the agent targeted by the immunization.
     */
    Immunity: {
        display: "immunity",
        code: "IMMUNE",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * MEDPREC: Definition:The patient currently has a medical condition for which the vaccine is contraindicated or for which precaution is warranted.
     */
    MedicalPrecaution: {
        display: "medical precaution",
        code: "MEDPREC",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * OSTOCK: Definition:There was no supply of the product on hand to perform the service.
     */
    ProductOutOfStock: {
        display: "product out of stock",
        code: "OSTOCK",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
    /**
     * PATOBJ: Definition:The patient or their guardian objects to receiving the vaccine.
     */
    PatientObjection: {
        display: "patient objection",
        code: "PATOBJ",
        system: "http://terminology.hl7.org/CodeSystem/v3-ActReason",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uU3RhdHVzUmVhc29uQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvSW1tdW5pemF0aW9uU3RhdHVzUmVhc29uQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrRUFBK0U7QUFzSC9FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXNDO0lBQ2hGOztPQUVHO0lBQ0gsd0NBQXdDLEVBQUU7UUFDeEMsT0FBTyxFQUFFLGtEQUFrRDtRQUMzRCxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCx1QkFBdUIsRUFBRTtRQUN2QixPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILCtCQUErQixFQUFFO1FBQy9CLE9BQU8sRUFBRSxzQ0FBc0M7UUFDL0MsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsNEJBQTRCLEVBQUU7UUFDNUIsT0FBTyxFQUFFLG1DQUFtQztRQUM1QyxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCx3QkFBd0IsRUFBRTtRQUN4QixPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILDRCQUE0QixFQUFFO1FBQzVCLE9BQU8sRUFBRSxtQ0FBbUM7UUFDNUMsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsNEJBQTRCLEVBQUU7UUFDNUIsT0FBTyxFQUFFLG1DQUFtQztRQUM1QyxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILDhCQUE4QixFQUFFO1FBQzlCLE9BQU8sRUFBRSxxQ0FBcUM7UUFDOUMsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCxrQ0FBa0MsRUFBRTtRQUNsQyxPQUFPLEVBQUUseUNBQXlDO1FBQ2xELElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILDhCQUE4QixFQUFFO1FBQzlCLE9BQU8sRUFBRSxzQ0FBc0M7UUFDL0MsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsK0JBQStCLEVBQUU7UUFDL0IsT0FBTyxFQUFFLHVDQUF1QztRQUNoRCxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCwrQ0FBK0MsRUFBRTtRQUMvQyxPQUFPLEVBQUUseURBQXlEO1FBQ2xFLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILGlDQUFpQyxFQUFFO1FBQ2pDLE9BQU8sRUFBRSxzQ0FBc0M7UUFDL0MsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsbUNBQW1DLEVBQUU7UUFDbkMsT0FBTyxFQUFFLDZDQUE2QztRQUN0RCxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCwyQkFBMkIsRUFBRTtRQUMzQixPQUFPLEVBQUUsaUNBQWlDO1FBQzFDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsK0NBQStDLEVBQUU7UUFDL0MsT0FBTyxFQUFFLDBEQUEwRDtRQUNuRSxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCwrQ0FBK0MsRUFBRTtRQUMvQyxPQUFPLEVBQUUsd0RBQXdEO1FBQ2pFLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILDBDQUEwQyxFQUFFO1FBQzFDLE9BQU8sRUFBRSxpREFBaUQ7UUFDMUQsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLHdCQUF3QjtLQUNqQztJQUNEOztPQUVHO0lBQ0gsbUNBQW1DLEVBQUU7UUFDbkMsT0FBTyxFQUFFLDBDQUEwQztRQUNuRCxJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDO0lBQ0Q7O09BRUc7SUFDSCx5QkFBeUIsRUFBRTtRQUN6QixPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakM7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILGlCQUFpQixFQUFFO1FBQ2pCLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsb0RBQW9EO0tBQzdEO0lBQ0Q7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvaW1tdW5pemF0aW9uLXN0YXR1cy1yZWFzb258NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIHJlYXNvbiB3aHkgYSBkb3NlIG9mIHZhY2NpbmUgd2FzIG5vdCBhZG1pbmlzdGVyZWQuIFRoaXMgdmFsdWUgc2V0IGlzIHByb3ZpZGVkIGFzIGEgc3VnZ2VzdGl2ZSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW1tdW5pemF0aW9uU3RhdHVzUmVhc29uQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyNTcwMDNcclxuICAgKi9cclxuICBOb0NvbnNlbnRUZXRhbnVzTG93RG9zZURpcGh0aGVyaWFWYWNjaW5lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI2NTAwMFxyXG4gICAqL1xyXG4gIFBlcnR1c3Npc1ZhY2NpbmVSZWZ1c2VkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI2NjAwNFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudERpcGh0aGVyaWFJbW11bml6YXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjY3MDA4XHJcbiAgICovXHJcbiAgTm9Db25zZW50VGV0YW51c0ltbXVuaXphdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyNjgwMDNcclxuICAgKi9cclxuICBQb2xpb0ltbXVuaXphdGlvblJlZnVzZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjY5MDA2XHJcbiAgICovXHJcbiAgTm9Db25zZW50TWVhc2xlc0ltbXVuaXphdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyNzAwMDdcclxuICAgKi9cclxuICBOb0NvbnNlbnRSdWJlbGxhSW1tdW5pemF0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI3MTAwNlxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEJDRzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyNzIwMDRcclxuICAgKi9cclxuICBOb0NvbnNlbnRJbmZsdWVuemFJbW11bml6YXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjgwMDA2XHJcbiAgICovXHJcbiAgTm9Db25zZW50Rm9yTU1SOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI4MzAwOFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvckFueVByaW1hcnlJbW11bml6YXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjg1MDAxXHJcbiAgICovXHJcbiAgTm9Db25zZW50UHJlU2Nob29sVmFjY2luYXRpb25zOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI4NjAwMFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudFNjaG9vbEV4aXRWYWNjaW5hdGlvbnM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjkxMDA0XHJcbiAgICovXHJcbiAgTm9Db25zZW50SGFlbW9waGlsdXNJbmZsdWVuemFlVHlwZUJJbW11bml6YXRpb246IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjkyMDA2XHJcbiAgICovXHJcbiAgTm9Db25zZW50UG5ldW1vY29jY2FsSW1tdW5pemF0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI5MzAwMVxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvck1STWVhc2xlc1J1YmVsbGFWYWNjaW5lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDI2ODU1OTAwN1xyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvckFueUltbXVuaXphdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAzMTA4MzkwMDNcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JNTVIxOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDMxMDg0MDAwMVxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvclNlY29uZE1lYXNsZXNNdW1wc0FuZFJ1YmVsbGFWYWNjaW5lOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDMxNDc2ODAwM1xyXG4gICAqL1xyXG4gIE5vQ29uc2VudERpcGh0aGVyaWFUZXRhbnVzUGVydHVzc2lzSW1tdW5pemF0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDMxNDc2OTAwNlxyXG4gICAqL1xyXG4gIE5vQ29uc2VudFRldGFudXNQbHVzRGlwaHRoZXJpYUltbXVuaXphdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiAzMTQ5MzYwMDFcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JNZW5pbmdpdGlzQ0ltbXVuaXphdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlOiA0MDc1OTgwMDlcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3IzcmRISUJCb29zdGVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIElNTVVORTogRGVmaW5pdGlvbjpUZXN0aW5nIGhhcyBzaG93biB0aGF0IHRoZSBwYXRpZW50IGFscmVhZHkgaGFzIGltbXVuaXR5IHRvIHRoZSBhZ2VudCB0YXJnZXRlZCBieSB0aGUgaW1tdW5pemF0aW9uLlxyXG4gICAqL1xyXG4gIEltbXVuaXR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE1FRFBSRUM6IERlZmluaXRpb246VGhlIHBhdGllbnQgY3VycmVudGx5IGhhcyBhIG1lZGljYWwgY29uZGl0aW9uIGZvciB3aGljaCB0aGUgdmFjY2luZSBpcyBjb250cmFpbmRpY2F0ZWQgb3IgZm9yIHdoaWNoIHByZWNhdXRpb24gaXMgd2FycmFudGVkLlxyXG4gICAqL1xyXG4gIE1lZGljYWxQcmVjYXV0aW9uOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE9TVE9DSzogRGVmaW5pdGlvbjpUaGVyZSB3YXMgbm8gc3VwcGx5IG9mIHRoZSBwcm9kdWN0IG9uIGhhbmQgdG8gcGVyZm9ybSB0aGUgc2VydmljZS5cclxuICAgKi9cclxuICBQcm9kdWN0T3V0T2ZTdG9jazogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBQQVRPQko6IERlZmluaXRpb246VGhlIHBhdGllbnQgb3IgdGhlaXIgZ3VhcmRpYW4gb2JqZWN0cyB0byByZWNlaXZpbmcgdGhlIHZhY2NpbmUuXHJcbiAgICovXHJcbiAgUGF0aWVudE9iamVjdGlvbjogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB2YWx1ZSBzZXQgdG8gaW5zdGFudGlhdGUgdGhpcyBhdHRyaWJ1dGUgc2hvdWxkIGJlIGRyYXduIGZyb20gYSB0ZXJtaW5vbG9naWNhbGx5IHJvYnVzdCBjb2RlIHN5c3RlbSB0aGF0IGNvbnNpc3RzIG9mIG9yIGNvbnRhaW5zIGNvbmNlcHRzIHRvIHN1cHBvcnQgZGVzY3JpYmluZyB0aGUgcmVhc29uIHdoeSBhIGRvc2Ugb2YgdmFjY2luZSB3YXMgbm90IGFkbWluaXN0ZXJlZC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW1tdW5pemF0aW9uU3RhdHVzUmVhc29uQ29kaW5nczpJbW11bml6YXRpb25TdGF0dXNSZWFzb25Db2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI1NzAwM1xyXG4gICAqL1xyXG4gIE5vQ29uc2VudFRldGFudXNMb3dEb3NlRGlwaHRoZXJpYVZhY2NpbmU6IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gY29uc2VudCAtIFRldGFudXMvbG93IGRvc2UgZGlwaHRoZXJpYSB2YWNjaW5lXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI1NzAwM1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI2NTAwMFxyXG4gICAqL1xyXG4gIFBlcnR1c3Npc1ZhY2NpbmVSZWZ1c2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBlcnR1c3NpcyB2YWNjaW5lIHJlZnVzZWRcIixcclxuICAgIGNvZGU6IFwiMTcxMjY1MDAwXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjY2MDA0XHJcbiAgICovXHJcbiAgTm9Db25zZW50RGlwaHRoZXJpYUltbXVuaXphdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IC0gZGlwaHRoZXJpYSBpbW11bml6YXRpb25cIixcclxuICAgIGNvZGU6IFwiMTcxMjY2MDA0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjY3MDA4XHJcbiAgICovXHJcbiAgTm9Db25zZW50VGV0YW51c0ltbXVuaXphdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IC0gdGV0YW51cyBpbW11bml6YXRpb25cIixcclxuICAgIGNvZGU6IFwiMTcxMjY3MDA4XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjY4MDAzXHJcbiAgICovXHJcbiAgUG9saW9JbW11bml6YXRpb25SZWZ1c2VkOiB7XHJcbiAgICBkaXNwbGF5OiBcIlBvbGlvIGltbXVuaXphdGlvbiByZWZ1c2VkXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI2ODAwM1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI2OTAwNlxyXG4gICAqL1xyXG4gIE5vQ29uc2VudE1lYXNsZXNJbW11bml6YXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gY29uc2VudCAtIG1lYXNsZXMgaW1tdW5pemF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI2OTAwNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI3MDAwN1xyXG4gICAqL1xyXG4gIE5vQ29uc2VudFJ1YmVsbGFJbW11bml6YXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gY29uc2VudCAtIHJ1YmVsbGEgaW1tdW5pemF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI3MDAwN1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI3MTAwNlxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEJDRzoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IC0gQkNHXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI3MTAwNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI3MjAwNFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEluZmx1ZW56YUltbXVuaXphdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IC0gaW5mbHVlbnphIGltbXVuaXphdGlvblwiLFxyXG4gICAgY29kZTogXCIxNzEyNzIwMDRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyODAwMDZcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JNTVI6IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gY29uc2VudCBmb3IgTU1SXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI4MDAwNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI4MzAwOFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvckFueVByaW1hcnlJbW11bml6YXRpb246IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gY29uc2VudCBmb3IgYW55IHByaW1hcnkgaW1tdW5pemF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI4MzAwOFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI4NTAwMVxyXG4gICAqL1xyXG4gIE5vQ29uc2VudFByZVNjaG9vbFZhY2NpbmF0aW9uczoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IC0gcHJlLXNjaG9vbCB2YWNjaW5hdGlvbnNcIixcclxuICAgIGNvZGU6IFwiMTcxMjg1MDAxXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjg2MDAwXHJcbiAgICovXHJcbiAgTm9Db25zZW50U2Nob29sRXhpdFZhY2NpbmF0aW9uczoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IC0gc2Nob29sIGV4aXQgdmFjY2luYXRpb25zXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI4NjAwMFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDE3MTI5MTAwNFxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEhhZW1vcGhpbHVzSW5mbHVlbnphZVR5cGVCSW1tdW5pemF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vIGNvbnNlbnQgLSBIYWVtb3BoaWx1cyBpbmZsdWVuemFlIHR5cGUgQiBpbW11bml6YXRpb25cIixcclxuICAgIGNvZGU6IFwiMTcxMjkxMDA0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTcxMjkyMDA2XHJcbiAgICovXHJcbiAgTm9Db25zZW50UG5ldW1vY29jY2FsSW1tdW5pemF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vIGNvbnNlbnQgcG5ldW1vY29jY2FsIGltbXVuaXphdGlvblwiLFxyXG4gICAgY29kZTogXCIxNzEyOTIwMDZcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiAxNzEyOTMwMDFcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JNUk1lYXNsZXNSdWJlbGxhVmFjY2luZToge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IGZvciBNUiAtIE1lYXNsZXMvcnViZWxsYSB2YWNjaW5lXCIsXHJcbiAgICBjb2RlOiBcIjE3MTI5MzAwMVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDI2ODU1OTAwN1xyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvckFueUltbXVuaXphdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IGZvciBhbnkgaW1tdW5pemF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIjI2ODU1OTAwN1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDMxMDgzOTAwM1xyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvck1NUjE6IHtcclxuICAgIGRpc3BsYXk6IFwiTm8gY29uc2VudCBmb3IgTU1SMVwiLFxyXG4gICAgY29kZTogXCIzMTA4MzkwMDNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzMTA4NDAwMDFcclxuICAgKi9cclxuICBOb0NvbnNlbnRGb3JTZWNvbmRNZWFzbGVzTXVtcHNBbmRSdWJlbGxhVmFjY2luZToge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IGZvciBzZWNvbmQgbWVhc2xlcywgbXVtcHMgYW5kIHJ1YmVsbGEgdmFjY2luZVwiLFxyXG4gICAgY29kZTogXCIzMTA4NDAwMDFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzMTQ3NjgwMDNcclxuICAgKi9cclxuICBOb0NvbnNlbnREaXBodGhlcmlhVGV0YW51c1BlcnR1c3Npc0ltbXVuaXphdGlvbjoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IGRpcGh0aGVyaWEsIHRldGFudXMsIHBlcnR1c3NpcyBpbW11bml6YXRpb25cIixcclxuICAgIGNvZGU6IFwiMzE0NzY4MDAzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMzE0NzY5MDA2XHJcbiAgICovXHJcbiAgTm9Db25zZW50VGV0YW51c1BsdXNEaXBodGhlcmlhSW1tdW5pemF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vIGNvbnNlbnQgdGV0YW51cyBwbHVzIGRpcGh0aGVyaWEgaW1tdW5pemF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIjMxNDc2OTAwNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDMxNDkzNjAwMVxyXG4gICAqL1xyXG4gIE5vQ29uc2VudEZvck1lbmluZ2l0aXNDSW1tdW5pemF0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vIGNvbnNlbnQgZm9yIG1lbmluZ2l0aXMgQyBpbW11bml6YXRpb25cIixcclxuICAgIGNvZGU6IFwiMzE0OTM2MDAxXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQ29kZTogNDA3NTk4MDA5XHJcbiAgICovXHJcbiAgTm9Db25zZW50Rm9yM3JkSElCQm9vc3Rlcjoge1xyXG4gICAgZGlzcGxheTogXCJObyBjb25zZW50IGZvciAzcmQgSElCIGJvb3N0ZXJcIixcclxuICAgIGNvZGU6IFwiNDA3NTk4MDA5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogSU1NVU5FOiBEZWZpbml0aW9uOlRlc3RpbmcgaGFzIHNob3duIHRoYXQgdGhlIHBhdGllbnQgYWxyZWFkeSBoYXMgaW1tdW5pdHkgdG8gdGhlIGFnZW50IHRhcmdldGVkIGJ5IHRoZSBpbW11bml6YXRpb24uXHJcbiAgICovXHJcbiAgSW1tdW5pdHk6IHtcclxuICAgIGRpc3BsYXk6IFwiaW1tdW5pdHlcIixcclxuICAgIGNvZGU6IFwiSU1NVU5FXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RSZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIE1FRFBSRUM6IERlZmluaXRpb246VGhlIHBhdGllbnQgY3VycmVudGx5IGhhcyBhIG1lZGljYWwgY29uZGl0aW9uIGZvciB3aGljaCB0aGUgdmFjY2luZSBpcyBjb250cmFpbmRpY2F0ZWQgb3IgZm9yIHdoaWNoIHByZWNhdXRpb24gaXMgd2FycmFudGVkLlxyXG4gICAqL1xyXG4gIE1lZGljYWxQcmVjYXV0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIm1lZGljYWwgcHJlY2F1dGlvblwiLFxyXG4gICAgY29kZTogXCJNRURQUkVDXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RSZWFzb25cIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIE9TVE9DSzogRGVmaW5pdGlvbjpUaGVyZSB3YXMgbm8gc3VwcGx5IG9mIHRoZSBwcm9kdWN0IG9uIGhhbmQgdG8gcGVyZm9ybSB0aGUgc2VydmljZS5cclxuICAgKi9cclxuICBQcm9kdWN0T3V0T2ZTdG9jazoge1xyXG4gICAgZGlzcGxheTogXCJwcm9kdWN0IG91dCBvZiBzdG9ja1wiLFxyXG4gICAgY29kZTogXCJPU1RPQ0tcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdFJlYXNvblwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogUEFUT0JKOiBEZWZpbml0aW9uOlRoZSBwYXRpZW50IG9yIHRoZWlyIGd1YXJkaWFuIG9iamVjdHMgdG8gcmVjZWl2aW5nIHRoZSB2YWNjaW5lLlxyXG4gICAqL1xyXG4gIFBhdGllbnRPYmplY3Rpb246IHtcclxuICAgIGRpc3BsYXk6IFwicGF0aWVudCBvYmplY3Rpb25cIixcclxuICAgIGNvZGU6IFwiUEFUT0JKXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RSZWFzb25cIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=