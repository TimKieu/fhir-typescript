// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/currencies|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Currency codes from ISO 4217 (see https://www.iso.org/iso-4217-currency-codes.html)
 */
export const CurrenciesCodings = {
    /**
     * Code: AED
     */
    UnitedArabEmiratesDirham: new Coding({
        display: "United Arab Emirates dirham",
        code: "AED",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: AFN
     */
    AfghanAfghani: new Coding({
        display: "Afghan afghani",
        code: "AFN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ALL
     */
    AlbanianLek: new Coding({
        display: "Albanian lek",
        code: "ALL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: AMD
     */
    ArmenianDram: new Coding({
        display: "Armenian dram",
        code: "AMD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ANG
     */
    NetherlandsAntilleanGuilder: new Coding({
        display: "Netherlands Antillean guilder",
        code: "ANG",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: AOA
     */
    AngolanKwanza: new Coding({
        display: "Angolan kwanza",
        code: "AOA",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ARS
     */
    ArgentinePeso: new Coding({
        display: "Argentine peso",
        code: "ARS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: AUD
     */
    AustralianDollar: new Coding({
        display: "Australian dollar",
        code: "AUD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: AWG
     */
    ArubanFlorin: new Coding({
        display: "Aruban florin",
        code: "AWG",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: AZN
     */
    AzerbaijaniManat: new Coding({
        display: "Azerbaijani manat",
        code: "AZN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BAM
     */
    BosniaAndHerzegovinaConvertibleMark: new Coding({
        display: "Bosnia and Herzegovina convertible mark",
        code: "BAM",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BBD
     */
    BarbadosDollar: new Coding({
        display: "Barbados dollar",
        code: "BBD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BDT
     */
    BangladeshiTaka: new Coding({
        display: "Bangladeshi taka",
        code: "BDT",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BGN
     */
    BulgarianLev: new Coding({
        display: "Bulgarian lev",
        code: "BGN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BHD
     */
    BahrainiDinar: new Coding({
        display: "Bahraini dinar",
        code: "BHD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BIF
     */
    BurundianFranc: new Coding({
        display: "Burundian franc",
        code: "BIF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BMD
     */
    BermudianDollar: new Coding({
        display: "Bermudian dollar",
        code: "BMD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BND
     */
    BruneiDollar: new Coding({
        display: "Brunei dollar",
        code: "BND",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BOB
     */
    Boliviano: new Coding({
        display: "Boliviano",
        code: "BOB",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BOV
     */
    BolivianMvdolFundsCode: new Coding({
        display: "Bolivian Mvdol (funds code)",
        code: "BOV",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BRL
     */
    BrazilianReal: new Coding({
        display: "Brazilian real",
        code: "BRL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BSD
     */
    BahamianDollar: new Coding({
        display: "Bahamian dollar",
        code: "BSD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BTN
     */
    BhutaneseNgultrum: new Coding({
        display: "Bhutanese ngultrum",
        code: "BTN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BWP
     */
    BotswanaPula: new Coding({
        display: "Botswana pula",
        code: "BWP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BYN
     */
    BelarusianRuble: new Coding({
        display: "Belarusian ruble",
        code: "BYN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: BZD
     */
    BelizeDollar: new Coding({
        display: "Belize dollar",
        code: "BZD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CAD
     */
    CanadianDollar: new Coding({
        display: "Canadian dollar",
        code: "CAD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CDF
     */
    CongoleseFranc: new Coding({
        display: "Congolese franc",
        code: "CDF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CHE
     */
    WIREuroComplementaryCurrency: new Coding({
        display: "WIR Euro (complementary currency)",
        code: "CHE",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CHF
     */
    SwissFranc: new Coding({
        display: "Swiss franc",
        code: "CHF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CHW
     */
    WIRFrancComplementaryCurrency: new Coding({
        display: "WIR Franc (complementary currency)",
        code: "CHW",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CLF
     */
    UnidadDeFomentoFundsCode: new Coding({
        display: "Unidad de Fomento (funds code)",
        code: "CLF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CLP
     */
    ChileanPeso: new Coding({
        display: "Chilean peso",
        code: "CLP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CNY
     */
    RenminbiChineseYuan8: new Coding({
        display: "Renminbi (Chinese) yuan[8]",
        code: "CNY",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: COP
     */
    ColombianPeso: new Coding({
        display: "Colombian peso",
        code: "COP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: COU
     */
    UnidadDeValorRealUVRFundsCode9: new Coding({
        display: "Unidad de Valor Real (UVR) (funds code)[9]",
        code: "COU",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CRC
     */
    CostaRicanColon: new Coding({
        display: "Costa Rican colon",
        code: "CRC",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CUC
     */
    CubanConvertiblePeso: new Coding({
        display: "Cuban convertible peso",
        code: "CUC",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CUP
     */
    CubanPeso: new Coding({
        display: "Cuban peso",
        code: "CUP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CVE
     */
    CapeVerdeEscudo: new Coding({
        display: "Cape Verde escudo",
        code: "CVE",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: CZK
     */
    CzechKoruna: new Coding({
        display: "Czech koruna",
        code: "CZK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: DJF
     */
    DjiboutianFranc: new Coding({
        display: "Djiboutian franc",
        code: "DJF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: DKK
     */
    DanishKrone: new Coding({
        display: "Danish krone",
        code: "DKK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: DOP
     */
    DominicanPeso: new Coding({
        display: "Dominican peso",
        code: "DOP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: DZD
     */
    AlgerianDinar: new Coding({
        display: "Algerian dinar",
        code: "DZD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: EGP
     */
    EgyptianPound: new Coding({
        display: "Egyptian pound",
        code: "EGP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ERN
     */
    EritreanNakfa: new Coding({
        display: "Eritrean nakfa",
        code: "ERN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ETB
     */
    EthiopianBirr: new Coding({
        display: "Ethiopian birr",
        code: "ETB",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: EUR
     */
    Euro: new Coding({
        display: "Euro",
        code: "EUR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: FJD
     */
    FijiDollar: new Coding({
        display: "Fiji dollar",
        code: "FJD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: FKP
     */
    FalklandIslandsPound: new Coding({
        display: "Falkland Islands pound",
        code: "FKP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GBP
     */
    PoundSterling: new Coding({
        display: "Pound sterling",
        code: "GBP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GEL
     */
    GeorgianLari: new Coding({
        display: "Georgian lari",
        code: "GEL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GGP
     */
    GuernseyPound: new Coding({
        display: "Guernsey Pound",
        code: "GGP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GHS
     */
    GhanaianCedi: new Coding({
        display: "Ghanaian cedi",
        code: "GHS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GIP
     */
    GibraltarPound: new Coding({
        display: "Gibraltar pound",
        code: "GIP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GMD
     */
    GambianDalasi: new Coding({
        display: "Gambian dalasi",
        code: "GMD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GNF
     */
    GuineanFranc: new Coding({
        display: "Guinean franc",
        code: "GNF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GTQ
     */
    GuatemalanQuetzal: new Coding({
        display: "Guatemalan quetzal",
        code: "GTQ",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: GYD
     */
    GuyaneseDollar: new Coding({
        display: "Guyanese dollar",
        code: "GYD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: HKD
     */
    HongKongDollar: new Coding({
        display: "Hong Kong dollar",
        code: "HKD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: HNL
     */
    HonduranLempira: new Coding({
        display: "Honduran lempira",
        code: "HNL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: HRK
     */
    CroatianKuna: new Coding({
        display: "Croatian kuna",
        code: "HRK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: HTG
     */
    HaitianGourde: new Coding({
        display: "Haitian gourde",
        code: "HTG",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: HUF
     */
    HungarianForint: new Coding({
        display: "Hungarian forint",
        code: "HUF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: IDR
     */
    IndonesianRupiah: new Coding({
        display: "Indonesian rupiah",
        code: "IDR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ILS
     */
    IsraeliNewShekel: new Coding({
        display: "Israeli new shekel",
        code: "ILS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: IMP
     */
    IsleOfManPound: new Coding({
        display: "Isle of Man Pound",
        code: "IMP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: INR
     */
    IndianRupee: new Coding({
        display: "Indian rupee",
        code: "INR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: IQD
     */
    IraqiDinar: new Coding({
        display: "Iraqi dinar",
        code: "IQD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: IRR
     */
    IranianRial: new Coding({
        display: "Iranian rial",
        code: "IRR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ISK
     */
    IcelandicKrona: new Coding({
        display: "Icelandic króna",
        code: "ISK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: JEP
     */
    JerseyPound: new Coding({
        display: "Jersey Pound",
        code: "JEP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: JMD
     */
    JamaicanDollar: new Coding({
        display: "Jamaican dollar",
        code: "JMD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: JOD
     */
    JordanianDinar: new Coding({
        display: "Jordanian dinar",
        code: "JOD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: JPY
     */
    JapaneseYen: new Coding({
        display: "Japanese yen",
        code: "JPY",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KES
     */
    KenyanShilling: new Coding({
        display: "Kenyan shilling",
        code: "KES",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KGS
     */
    KyrgyzstaniSom: new Coding({
        display: "Kyrgyzstani som",
        code: "KGS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KHR
     */
    CambodianRiel: new Coding({
        display: "Cambodian riel",
        code: "KHR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KMF
     */
    ComoroFranc: new Coding({
        display: "Comoro franc",
        code: "KMF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KPW
     */
    NorthKoreanWon: new Coding({
        display: "North Korean won",
        code: "KPW",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KRW
     */
    SouthKoreanWon: new Coding({
        display: "South Korean won",
        code: "KRW",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KWD
     */
    KuwaitiDinar: new Coding({
        display: "Kuwaiti dinar",
        code: "KWD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KYD
     */
    CaymanIslandsDollar: new Coding({
        display: "Cayman Islands dollar",
        code: "KYD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: KZT
     */
    KazakhstaniTenge: new Coding({
        display: "Kazakhstani tenge",
        code: "KZT",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: LAK
     */
    LaoKip: new Coding({
        display: "Lao kip",
        code: "LAK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: LBP
     */
    LebanesePound: new Coding({
        display: "Lebanese pound",
        code: "LBP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: LKR
     */
    SriLankanRupee: new Coding({
        display: "Sri Lankan rupee",
        code: "LKR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: LRD
     */
    LiberianDollar: new Coding({
        display: "Liberian dollar",
        code: "LRD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: LSL
     */
    LesothoLoti: new Coding({
        display: "Lesotho loti",
        code: "LSL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: LYD
     */
    LibyanDinar: new Coding({
        display: "Libyan dinar",
        code: "LYD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MAD
     */
    MoroccanDirham: new Coding({
        display: "Moroccan dirham",
        code: "MAD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MDL
     */
    MoldovanLeu: new Coding({
        display: "Moldovan leu",
        code: "MDL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MGA
     */
    MalagasyAriary: new Coding({
        display: "Malagasy ariary",
        code: "MGA",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MKD
     */
    MacedonianDenar: new Coding({
        display: "Macedonian denar",
        code: "MKD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MMK
     */
    MyanmarKyat: new Coding({
        display: "Myanmar kyat",
        code: "MMK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MNT
     */
    MongolianTogrog: new Coding({
        display: "Mongolian tögrög",
        code: "MNT",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MOP
     */
    MacanesePataca: new Coding({
        display: "Macanese pataca",
        code: "MOP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MRU
     */
    MauritanianOuguiya: new Coding({
        display: "Mauritanian ouguiya",
        code: "MRU",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MUR
     */
    MauritianRupee: new Coding({
        display: "Mauritian rupee",
        code: "MUR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MVR
     */
    MaldivianRufiyaa: new Coding({
        display: "Maldivian rufiyaa",
        code: "MVR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MWK
     */
    MalawianKwacha: new Coding({
        display: "Malawian kwacha",
        code: "MWK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MXN
     */
    MexicanPeso: new Coding({
        display: "Mexican peso",
        code: "MXN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MXV
     */
    MexicanUnidadDeInversionUDIFundsCode: new Coding({
        display: "Mexican Unidad de Inversion (UDI) (funds code)",
        code: "MXV",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MYR
     */
    MalaysianRinggit: new Coding({
        display: "Malaysian ringgit",
        code: "MYR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: MZN
     */
    MozambicanMetical: new Coding({
        display: "Mozambican metical",
        code: "MZN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: NAD
     */
    NamibianDollar: new Coding({
        display: "Namibian dollar",
        code: "NAD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: NGN
     */
    NigerianNaira: new Coding({
        display: "Nigerian naira",
        code: "NGN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: NIO
     */
    NicaraguanCordoba: new Coding({
        display: "Nicaraguan córdoba",
        code: "NIO",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: NOK
     */
    NorwegianKrone: new Coding({
        display: "Norwegian krone",
        code: "NOK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: NPR
     */
    NepaleseRupee: new Coding({
        display: "Nepalese rupee",
        code: "NPR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: NZD
     */
    NewZealandDollar: new Coding({
        display: "New Zealand dollar",
        code: "NZD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: OMR
     */
    OmaniRial: new Coding({
        display: "Omani rial",
        code: "OMR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: PAB
     */
    PanamanianBalboa: new Coding({
        display: "Panamanian balboa",
        code: "PAB",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: PEN
     */
    PeruvianSol: new Coding({
        display: "Peruvian Sol",
        code: "PEN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: PGK
     */
    PapuaNewGuineanKina: new Coding({
        display: "Papua New Guinean kina",
        code: "PGK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: PHP
     */
    PhilippinePiso13: new Coding({
        display: "Philippine piso[13]",
        code: "PHP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: PKR
     */
    PakistaniRupee: new Coding({
        display: "Pakistani rupee",
        code: "PKR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: PLN
     */
    PolishZłoty: new Coding({
        display: "Polish złoty",
        code: "PLN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: PYG
     */
    ParaguayanGuarani: new Coding({
        display: "Paraguayan guaraní",
        code: "PYG",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: QAR
     */
    QatariRiyal: new Coding({
        display: "Qatari riyal",
        code: "QAR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: RON
     */
    RomanianLeu: new Coding({
        display: "Romanian leu",
        code: "RON",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: RSD
     */
    SerbianDinar: new Coding({
        display: "Serbian dinar",
        code: "RSD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: RUB
     */
    RussianRuble: new Coding({
        display: "Russian ruble",
        code: "RUB",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: RWF
     */
    RwandanFranc: new Coding({
        display: "Rwandan franc",
        code: "RWF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SAR
     */
    SaudiRiyal: new Coding({
        display: "Saudi riyal",
        code: "SAR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SBD
     */
    SolomonIslandsDollar: new Coding({
        display: "Solomon Islands dollar",
        code: "SBD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SCR
     */
    SeychellesRupee: new Coding({
        display: "Seychelles rupee",
        code: "SCR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SDG
     */
    SudanesePound: new Coding({
        display: "Sudanese pound",
        code: "SDG",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SEK
     */
    SwedishKronaKronor: new Coding({
        display: "Swedish krona/kronor",
        code: "SEK",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SGD
     */
    SingaporeDollar: new Coding({
        display: "Singapore dollar",
        code: "SGD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SHP
     */
    SaintHelenaPound: new Coding({
        display: "Saint Helena pound",
        code: "SHP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SLL
     */
    SierraLeoneanLeone: new Coding({
        display: "Sierra Leonean leone",
        code: "SLL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SOS
     */
    SomaliShilling: new Coding({
        display: "Somali shilling",
        code: "SOS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SRD
     */
    SurinameseDollar: new Coding({
        display: "Surinamese dollar",
        code: "SRD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SSP
     */
    SouthSudanesePound: new Coding({
        display: "South Sudanese pound",
        code: "SSP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: STN
     */
    SaoTomeAndPrincipeDobra: new Coding({
        display: "São Tomé and Príncipe dobra",
        code: "STN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SVC
     */
    SalvadoranColon: new Coding({
        display: "Salvadoran colón",
        code: "SVC",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SYP
     */
    SyrianPound: new Coding({
        display: "Syrian pound",
        code: "SYP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: SZL
     */
    SwaziLilangeni: new Coding({
        display: "Swazi lilangeni",
        code: "SZL",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: THB
     */
    ThaiBaht: new Coding({
        display: "Thai baht",
        code: "THB",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TJS
     */
    TajikistaniSomoni: new Coding({
        display: "Tajikistani somoni",
        code: "TJS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TMT
     */
    TurkmenistanManat: new Coding({
        display: "Turkmenistan manat",
        code: "TMT",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TND
     */
    TunisianDinar: new Coding({
        display: "Tunisian dinar",
        code: "TND",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TOP
     */
    TonganPaanga: new Coding({
        display: "Tongan paʻanga",
        code: "TOP",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TRY
     */
    TurkishLira: new Coding({
        display: "Turkish lira",
        code: "TRY",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TTD
     */
    TrinidadAndTobagoDollar: new Coding({
        display: "Trinidad and Tobago dollar",
        code: "TTD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TVD
     */
    TuvaluDollar: new Coding({
        display: "Tuvalu Dollar",
        code: "TVD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TWD
     */
    NewTaiwanDollar: new Coding({
        display: "New Taiwan dollar",
        code: "TWD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: TZS
     */
    TanzanianShilling: new Coding({
        display: "Tanzanian shilling",
        code: "TZS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: UAH
     */
    UkrainianHryvnia: new Coding({
        display: "Ukrainian hryvnia",
        code: "UAH",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: UGX
     */
    UgandanShilling: new Coding({
        display: "Ugandan shilling",
        code: "UGX",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: USD
     */
    UnitedStatesDollar: new Coding({
        display: "United States dollar",
        code: "USD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: USN
     */
    UnitedStatesDollarNextDayFundsCode: new Coding({
        display: "United States dollar (next day) (funds code)",
        code: "USN",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: UYI
     */
    UruguayPesoEnUnidadesIndexadasURUIURUIFundsCode: new Coding({
        display: "Uruguay Peso en Unidades Indexadas (URUIURUI) (funds code)",
        code: "UYI",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: UYU
     */
    UruguayanPeso: new Coding({
        display: "Uruguayan peso",
        code: "UYU",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: UZS
     */
    UzbekistanSom: new Coding({
        display: "Uzbekistan som",
        code: "UZS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: VEF
     */
    VenezuelanBolivar: new Coding({
        display: "Venezuelan bolívar",
        code: "VEF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: VND
     */
    VietnameseĐong: new Coding({
        display: "Vietnamese đồng",
        code: "VND",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: VUV
     */
    VanuatuVatu: new Coding({
        display: "Vanuatu vatu",
        code: "VUV",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: WST
     */
    SamoanTala: new Coding({
        display: "Samoan tala",
        code: "WST",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XAF
     */
    CFAFrancBEAC: new Coding({
        display: "CFA franc BEAC",
        code: "XAF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XAG
     */
    SilverOneTroyOunce: new Coding({
        display: "Silver (one troy ounce)",
        code: "XAG",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XAU
     */
    GoldOneTroyOunce: new Coding({
        display: "Gold (one troy ounce)",
        code: "XAU",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XBA
     */
    EuropeanCompositeUnitEURCOBondMarketUnit: new Coding({
        display: "European Composite Unit (EURCO) (bond market unit)",
        code: "XBA",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XBB
     */
    EuropeanMonetaryUnitEMU6BondMarketUnit: new Coding({
        display: "European Monetary Unit (E.M.U.-6) (bond market unit)",
        code: "XBB",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XBC
     */
    EuropeanUnitOfAccount9EUA9BondMarketUnit: new Coding({
        display: "European Unit of Account 9 (E.U.A.-9) (bond market unit)",
        code: "XBC",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XBD
     */
    EuropeanUnitOfAccount17EUA17BondMarketUnit: new Coding({
        display: "European Unit of Account 17 (E.U.A.-17) (bond market unit)",
        code: "XBD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XCD
     */
    EastCaribbeanDollar: new Coding({
        display: "East Caribbean dollar",
        code: "XCD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XDR
     */
    SpecialDrawingRights: new Coding({
        display: "Special drawing rights",
        code: "XDR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XOF
     */
    CFAFrancBCEAO: new Coding({
        display: "CFA franc BCEAO",
        code: "XOF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XPD
     */
    PalladiumOneTroyOunce: new Coding({
        display: "Palladium (one troy ounce)",
        code: "XPD",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XPF
     */
    CFPFrancFrancPacifique: new Coding({
        display: "CFP franc (franc Pacifique)",
        code: "XPF",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XPT
     */
    PlatinumOneTroyOunce: new Coding({
        display: "Platinum (one troy ounce)",
        code: "XPT",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XSU
     */
    SUCRE: new Coding({
        display: "SUCRE",
        code: "XSU",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XTS
     */
    CodeReservedForTestingPurposes: new Coding({
        display: "Code reserved for testing purposes",
        code: "XTS",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XUA
     */
    ADBUnitOfAccount: new Coding({
        display: "ADB Unit of Account",
        code: "XUA",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: XXX
     */
    NoCurrency: new Coding({
        display: "No currency",
        code: "XXX",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: YER
     */
    YemeniRial: new Coding({
        display: "Yemeni rial",
        code: "YER",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ZAR
     */
    SouthAfricanRand: new Coding({
        display: "South African rand",
        code: "ZAR",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ZMW
     */
    ZambianKwacha: new Coding({
        display: "Zambian kwacha",
        code: "ZMW",
        system: "urn:iso:std:iso:4217",
    }),
    /**
     * Code: ZWL
     */
    ZimbabweanDollarA10: new Coding({
        display: "Zimbabwean dollar A/10",
        code: "ZWL",
        system: "urn:iso:std:iso:4217",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VycmVuY2llc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0N1cnJlbmNpZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLCtEQUErRDtBQUUvRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRztJQUMvQjs7T0FFRztJQUNILHdCQUF3QixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25DLE9BQU8sRUFBRSw2QkFBNkI7UUFDdEMsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsc0JBQXNCO0tBQy9CLENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHNCQUFzQjtLQUMvQixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsc0JBQXNCO0tBQy9CLENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxzQkFBc0I7S0FDL0IsQ0FBQztJQUNGOztPQUVHO0lBQ0gsMkJBQTJCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEMsT0FBTyxFQUFFLCtCQUErQjtRQUN4QyxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxzQkFBc0I7S0FDL0IsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFB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Q3pCLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHNCQUFzQjtLQUMvQixDQUFDO0lBQ0Y7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM5QixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLHNCQUFzQjtLQUMvQixDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jdXJyZW5jaWVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDdXJyZW5jeSBjb2RlcyBmcm9tIElTTyA0MjE3IChzZWUgaHR0cHM6Ly93d3cuaXNvLm9yZy9pc28tNDIxNy1jdXJyZW5jeS1jb2Rlcy5odG1sKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEN1cnJlbmNpZXNDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFFRFxyXG4gICAqL1xyXG4gIFVuaXRlZEFyYWJFbWlyYXRlc0RpcmhhbTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVuaXRlZCBBcmFiIEVtaXJhdGVzIGRpcmhhbVwiLFxyXG4gICAgY29kZTogXCJBRURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFGTlxyXG4gICAqL1xyXG4gIEFmZ2hhbkFmZ2hhbmk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBZmdoYW4gYWZnaGFuaVwiLFxyXG4gICAgY29kZTogXCJBRk5cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFMTFxyXG4gICAqL1xyXG4gIEFsYmFuaWFuTGVrOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWxiYW5pYW4gbGVrXCIsXHJcbiAgICBjb2RlOiBcIkFMTFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQU1EXHJcbiAgICovXHJcbiAgQXJtZW5pYW5EcmFtOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQXJtZW5pYW4gZHJhbVwiLFxyXG4gICAgY29kZTogXCJBTURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFOR1xyXG4gICAqL1xyXG4gIE5ldGhlcmxhbmRzQW50aWxsZWFuR3VpbGRlcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5ldGhlcmxhbmRzIEFudGlsbGVhbiBndWlsZGVyXCIsXHJcbiAgICBjb2RlOiBcIkFOR1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQU9BXHJcbiAgICovXHJcbiAgQW5nb2xhbkt3YW56YTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFuZ29sYW4ga3dhbnphXCIsXHJcbiAgICBjb2RlOiBcIkFPQVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQVJTXHJcbiAgICovXHJcbiAgQXJnZW50aW5lUGVzbzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFyZ2VudGluZSBwZXNvXCIsXHJcbiAgICBjb2RlOiBcIkFSU1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQVVEXHJcbiAgICovXHJcbiAgQXVzdHJhbGlhbkRvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkF1c3RyYWxpYW4gZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIkFVRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQVdHXHJcbiAgICovXHJcbiAgQXJ1YmFuRmxvcmluOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQXJ1YmFuIGZsb3JpblwiLFxyXG4gICAgY29kZTogXCJBV0dcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFaTlxyXG4gICAqL1xyXG4gIEF6ZXJiYWlqYW5pTWFuYXQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBemVyYmFpamFuaSBtYW5hdFwiLFxyXG4gICAgY29kZTogXCJBWk5cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJBTVxyXG4gICAqL1xyXG4gIEJvc25pYUFuZEhlcnplZ292aW5hQ29udmVydGlibGVNYXJrOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYSBjb252ZXJ0aWJsZSBtYXJrXCIsXHJcbiAgICBjb2RlOiBcIkJBTVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQkJEXHJcbiAgICovXHJcbiAgQmFyYmFkb3NEb2xsYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCYXJiYWRvcyBkb2xsYXJcIixcclxuICAgIGNvZGU6IFwiQkJEXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBCRFRcclxuICAgKi9cclxuICBCYW5nbGFkZXNoaVRha2E6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCYW5nbGFkZXNoaSB0YWthXCIsXHJcbiAgICBjb2RlOiBcIkJEVFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQkdOXHJcbiAgICovXHJcbiAgQnVsZ2FyaWFuTGV2OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQnVsZ2FyaWFuIGxldlwiLFxyXG4gICAgY29kZTogXCJCR05cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJIRFxyXG4gICAqL1xyXG4gIEJhaHJhaW5pRGluYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCYWhyYWluaSBkaW5hclwiLFxyXG4gICAgY29kZTogXCJCSERcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJJRlxyXG4gICAqL1xyXG4gIEJ1cnVuZGlhbkZyYW5jOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQnVydW5kaWFuIGZyYW5jXCIsXHJcbiAgICBjb2RlOiBcIkJJRlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQk1EXHJcbiAgICovXHJcbiAgQmVybXVkaWFuRG9sbGFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQmVybXVkaWFuIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJCTURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJORFxyXG4gICAqL1xyXG4gIEJydW5laURvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJydW5laSBkb2xsYXJcIixcclxuICAgIGNvZGU6IFwiQk5EXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBCT0JcclxuICAgKi9cclxuICBCb2xpdmlhbm86IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCb2xpdmlhbm9cIixcclxuICAgIGNvZGU6IFwiQk9CXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBCT1ZcclxuICAgKi9cclxuICBCb2xpdmlhbk12ZG9sRnVuZHNDb2RlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQm9saXZpYW4gTXZkb2wgKGZ1bmRzIGNvZGUpXCIsXHJcbiAgICBjb2RlOiBcIkJPVlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQlJMXHJcbiAgICovXHJcbiAgQnJhemlsaWFuUmVhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJyYXppbGlhbiByZWFsXCIsXHJcbiAgICBjb2RlOiBcIkJSTFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQlNEXHJcbiAgICovXHJcbiAgQmFoYW1pYW5Eb2xsYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCYWhhbWlhbiBkb2xsYXJcIixcclxuICAgIGNvZGU6IFwiQlNEXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBCVE5cclxuICAgKi9cclxuICBCaHV0YW5lc2VOZ3VsdHJ1bTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJodXRhbmVzZSBuZ3VsdHJ1bVwiLFxyXG4gICAgY29kZTogXCJCVE5cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEJXUFxyXG4gICAqL1xyXG4gIEJvdHN3YW5hUHVsYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkJvdHN3YW5hIHB1bGFcIixcclxuICAgIGNvZGU6IFwiQldQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBCWU5cclxuICAgKi9cclxuICBCZWxhcnVzaWFuUnVibGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJCZWxhcnVzaWFuIHJ1YmxlXCIsXHJcbiAgICBjb2RlOiBcIkJZTlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQlpEXHJcbiAgICovXHJcbiAgQmVsaXplRG9sbGFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQmVsaXplIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJCWkRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IENBRFxyXG4gICAqL1xyXG4gIENhbmFkaWFuRG9sbGFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2FuYWRpYW4gZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIkNBRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0RGXHJcbiAgICovXHJcbiAgQ29uZ29sZXNlRnJhbmM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb25nb2xlc2UgZnJhbmNcIixcclxuICAgIGNvZGU6IFwiQ0RGXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDSEVcclxuICAgKi9cclxuICBXSVJFdXJvQ29tcGxlbWVudGFyeUN1cnJlbmN5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiV0lSIEV1cm8gKGNvbXBsZW1lbnRhcnkgY3VycmVuY3kpXCIsXHJcbiAgICBjb2RlOiBcIkNIRVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0hGXHJcbiAgICovXHJcbiAgU3dpc3NGcmFuYzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN3aXNzIGZyYW5jXCIsXHJcbiAgICBjb2RlOiBcIkNIRlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0hXXHJcbiAgICovXHJcbiAgV0lSRnJhbmNDb21wbGVtZW50YXJ5Q3VycmVuY3k6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJXSVIgRnJhbmMgKGNvbXBsZW1lbnRhcnkgY3VycmVuY3kpXCIsXHJcbiAgICBjb2RlOiBcIkNIV1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0xGXHJcbiAgICovXHJcbiAgVW5pZGFkRGVGb21lbnRvRnVuZHNDb2RlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVW5pZGFkIGRlIEZvbWVudG8gKGZ1bmRzIGNvZGUpXCIsXHJcbiAgICBjb2RlOiBcIkNMRlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ0xQXHJcbiAgICovXHJcbiAgQ2hpbGVhblBlc286IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDaGlsZWFuIHBlc29cIixcclxuICAgIGNvZGU6IFwiQ0xQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDTllcclxuICAgKi9cclxuICBSZW5taW5iaUNoaW5lc2VZdWFuODogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlbm1pbmJpIChDaGluZXNlKSB5dWFuWzhdXCIsXHJcbiAgICBjb2RlOiBcIkNOWVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ09QXHJcbiAgICovXHJcbiAgQ29sb21iaWFuUGVzbzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvbG9tYmlhbiBwZXNvXCIsXHJcbiAgICBjb2RlOiBcIkNPUFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ09VXHJcbiAgICovXHJcbiAgVW5pZGFkRGVWYWxvclJlYWxVVlJGdW5kc0NvZGU5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVW5pZGFkIGRlIFZhbG9yIFJlYWwgKFVWUikgKGZ1bmRzIGNvZGUpWzldXCIsXHJcbiAgICBjb2RlOiBcIkNPVVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ1JDXHJcbiAgICovXHJcbiAgQ29zdGFSaWNhbkNvbG9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ29zdGEgUmljYW4gY29sb25cIixcclxuICAgIGNvZGU6IFwiQ1JDXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDVUNcclxuICAgKi9cclxuICBDdWJhbkNvbnZlcnRpYmxlUGVzbzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkN1YmFuIGNvbnZlcnRpYmxlIHBlc29cIixcclxuICAgIGNvZGU6IFwiQ1VDXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDVVBcclxuICAgKi9cclxuICBDdWJhblBlc286IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDdWJhbiBwZXNvXCIsXHJcbiAgICBjb2RlOiBcIkNVUFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQ1ZFXHJcbiAgICovXHJcbiAgQ2FwZVZlcmRlRXNjdWRvOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2FwZSBWZXJkZSBlc2N1ZG9cIixcclxuICAgIGNvZGU6IFwiQ1ZFXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBDWktcclxuICAgKi9cclxuICBDemVjaEtvcnVuYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkN6ZWNoIGtvcnVuYVwiLFxyXG4gICAgY29kZTogXCJDWktcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERKRlxyXG4gICAqL1xyXG4gIERqaWJvdXRpYW5GcmFuYzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRqaWJvdXRpYW4gZnJhbmNcIixcclxuICAgIGNvZGU6IFwiREpGXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBES0tcclxuICAgKi9cclxuICBEYW5pc2hLcm9uZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRhbmlzaCBrcm9uZVwiLFxyXG4gICAgY29kZTogXCJES0tcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERPUFxyXG4gICAqL1xyXG4gIERvbWluaWNhblBlc286IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEb21pbmljYW4gcGVzb1wiLFxyXG4gICAgY29kZTogXCJET1BcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERaRFxyXG4gICAqL1xyXG4gIEFsZ2VyaWFuRGluYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBbGdlcmlhbiBkaW5hclwiLFxyXG4gICAgY29kZTogXCJEWkRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVHUFxyXG4gICAqL1xyXG4gIEVneXB0aWFuUG91bmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFZ3lwdGlhbiBwb3VuZFwiLFxyXG4gICAgY29kZTogXCJFR1BcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVSTlxyXG4gICAqL1xyXG4gIEVyaXRyZWFuTmFrZmE6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFcml0cmVhbiBuYWtmYVwiLFxyXG4gICAgY29kZTogXCJFUk5cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVUQlxyXG4gICAqL1xyXG4gIEV0aGlvcGlhbkJpcnI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFdGhpb3BpYW4gYmlyclwiLFxyXG4gICAgY29kZTogXCJFVEJcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEVVUlxyXG4gICAqL1xyXG4gIEV1cm86IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFdXJvXCIsXHJcbiAgICBjb2RlOiBcIkVVUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRkpEXHJcbiAgICovXHJcbiAgRmlqaURvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkZpamkgZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIkZKRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRktQXHJcbiAgICovXHJcbiAgRmFsa2xhbmRJc2xhbmRzUG91bmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGYWxrbGFuZCBJc2xhbmRzIHBvdW5kXCIsXHJcbiAgICBjb2RlOiBcIkZLUFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogR0JQXHJcbiAgICovXHJcbiAgUG91bmRTdGVybGluZzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBvdW5kIHN0ZXJsaW5nXCIsXHJcbiAgICBjb2RlOiBcIkdCUFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogR0VMXHJcbiAgICovXHJcbiAgR2VvcmdpYW5MYXJpOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiR2VvcmdpYW4gbGFyaVwiLFxyXG4gICAgY29kZTogXCJHRUxcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdHUFxyXG4gICAqL1xyXG4gIEd1ZXJuc2V5UG91bmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJHdWVybnNleSBQb3VuZFwiLFxyXG4gICAgY29kZTogXCJHR1BcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdIU1xyXG4gICAqL1xyXG4gIEdoYW5haWFuQ2VkaTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdoYW5haWFuIGNlZGlcIixcclxuICAgIGNvZGU6IFwiR0hTXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBHSVBcclxuICAgKi9cclxuICBHaWJyYWx0YXJQb3VuZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdpYnJhbHRhciBwb3VuZFwiLFxyXG4gICAgY29kZTogXCJHSVBcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdNRFxyXG4gICAqL1xyXG4gIEdhbWJpYW5EYWxhc2k6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJHYW1iaWFuIGRhbGFzaVwiLFxyXG4gICAgY29kZTogXCJHTURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdORlxyXG4gICAqL1xyXG4gIEd1aW5lYW5GcmFuYzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkd1aW5lYW4gZnJhbmNcIixcclxuICAgIGNvZGU6IFwiR05GXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBHVFFcclxuICAgKi9cclxuICBHdWF0ZW1hbGFuUXVldHphbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkd1YXRlbWFsYW4gcXVldHphbFwiLFxyXG4gICAgY29kZTogXCJHVFFcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEdZRFxyXG4gICAqL1xyXG4gIEd1eWFuZXNlRG9sbGFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiR3V5YW5lc2UgZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIkdZRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSEtEXHJcbiAgICovXHJcbiAgSG9uZ0tvbmdEb2xsYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJIb25nIEtvbmcgZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIkhLRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSE5MXHJcbiAgICovXHJcbiAgSG9uZHVyYW5MZW1waXJhOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSG9uZHVyYW4gbGVtcGlyYVwiLFxyXG4gICAgY29kZTogXCJITkxcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEhSS1xyXG4gICAqL1xyXG4gIENyb2F0aWFuS3VuYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNyb2F0aWFuIGt1bmFcIixcclxuICAgIGNvZGU6IFwiSFJLXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBIVEdcclxuICAgKi9cclxuICBIYWl0aWFuR291cmRlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSGFpdGlhbiBnb3VyZGVcIixcclxuICAgIGNvZGU6IFwiSFRHXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBIVUZcclxuICAgKi9cclxuICBIdW5nYXJpYW5Gb3JpbnQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJIdW5nYXJpYW4gZm9yaW50XCIsXHJcbiAgICBjb2RlOiBcIkhVRlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSURSXHJcbiAgICovXHJcbiAgSW5kb25lc2lhblJ1cGlhaDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluZG9uZXNpYW4gcnVwaWFoXCIsXHJcbiAgICBjb2RlOiBcIklEUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSUxTXHJcbiAgICovXHJcbiAgSXNyYWVsaU5ld1NoZWtlbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIklzcmFlbGkgbmV3IHNoZWtlbFwiLFxyXG4gICAgY29kZTogXCJJTFNcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IElNUFxyXG4gICAqL1xyXG4gIElzbGVPZk1hblBvdW5kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSXNsZSBvZiBNYW4gUG91bmRcIixcclxuICAgIGNvZGU6IFwiSU1QXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBJTlJcclxuICAgKi9cclxuICBJbmRpYW5SdXBlZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluZGlhbiBydXBlZVwiLFxyXG4gICAgY29kZTogXCJJTlJcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IElRRFxyXG4gICAqL1xyXG4gIElyYXFpRGluYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJcmFxaSBkaW5hclwiLFxyXG4gICAgY29kZTogXCJJUURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IElSUlxyXG4gICAqL1xyXG4gIElyYW5pYW5SaWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSXJhbmlhbiByaWFsXCIsXHJcbiAgICBjb2RlOiBcIklSUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSVNLXHJcbiAgICovXHJcbiAgSWNlbGFuZGljS3JvbmE6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJJY2VsYW5kaWMga3LDs25hXCIsXHJcbiAgICBjb2RlOiBcIklTS1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSkVQXHJcbiAgICovXHJcbiAgSmVyc2V5UG91bmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJKZXJzZXkgUG91bmRcIixcclxuICAgIGNvZGU6IFwiSkVQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBKTURcclxuICAgKi9cclxuICBKYW1haWNhbkRvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkphbWFpY2FuIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJKTURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEpPRFxyXG4gICAqL1xyXG4gIEpvcmRhbmlhbkRpbmFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSm9yZGFuaWFuIGRpbmFyXCIsXHJcbiAgICBjb2RlOiBcIkpPRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogSlBZXHJcbiAgICovXHJcbiAgSmFwYW5lc2VZZW46IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJKYXBhbmVzZSB5ZW5cIixcclxuICAgIGNvZGU6IFwiSlBZXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBLRVNcclxuICAgKi9cclxuICBLZW55YW5TaGlsbGluZzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIktlbnlhbiBzaGlsbGluZ1wiLFxyXG4gICAgY29kZTogXCJLRVNcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEtHU1xyXG4gICAqL1xyXG4gIEt5cmd5enN0YW5pU29tOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiS3lyZ3l6c3Rhbmkgc29tXCIsXHJcbiAgICBjb2RlOiBcIktHU1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogS0hSXHJcbiAgICovXHJcbiAgQ2FtYm9kaWFuUmllbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNhbWJvZGlhbiByaWVsXCIsXHJcbiAgICBjb2RlOiBcIktIUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogS01GXHJcbiAgICovXHJcbiAgQ29tb3JvRnJhbmM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb21vcm8gZnJhbmNcIixcclxuICAgIGNvZGU6IFwiS01GXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBLUFdcclxuICAgKi9cclxuICBOb3J0aEtvcmVhbldvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5vcnRoIEtvcmVhbiB3b25cIixcclxuICAgIGNvZGU6IFwiS1BXXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBLUldcclxuICAgKi9cclxuICBTb3V0aEtvcmVhbldvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNvdXRoIEtvcmVhbiB3b25cIixcclxuICAgIGNvZGU6IFwiS1JXXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBLV0RcclxuICAgKi9cclxuICBLdXdhaXRpRGluYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJLdXdhaXRpIGRpbmFyXCIsXHJcbiAgICBjb2RlOiBcIktXRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogS1lEXHJcbiAgICovXHJcbiAgQ2F5bWFuSXNsYW5kc0RvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNheW1hbiBJc2xhbmRzIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJLWURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IEtaVFxyXG4gICAqL1xyXG4gIEthemFraHN0YW5pVGVuZ2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJLYXpha2hzdGFuaSB0ZW5nZVwiLFxyXG4gICAgY29kZTogXCJLWlRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IExBS1xyXG4gICAqL1xyXG4gIExhb0tpcDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxhbyBraXBcIixcclxuICAgIGNvZGU6IFwiTEFLXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBMQlBcclxuICAgKi9cclxuICBMZWJhbmVzZVBvdW5kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTGViYW5lc2UgcG91bmRcIixcclxuICAgIGNvZGU6IFwiTEJQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBMS1JcclxuICAgKi9cclxuICBTcmlMYW5rYW5SdXBlZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNyaSBMYW5rYW4gcnVwZWVcIixcclxuICAgIGNvZGU6IFwiTEtSXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBMUkRcclxuICAgKi9cclxuICBMaWJlcmlhbkRvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxpYmVyaWFuIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJMUkRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IExTTFxyXG4gICAqL1xyXG4gIExlc290aG9Mb3RpOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTGVzb3RobyBsb3RpXCIsXHJcbiAgICBjb2RlOiBcIkxTTFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTFlEXHJcbiAgICovXHJcbiAgTGlieWFuRGluYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJMaWJ5YW4gZGluYXJcIixcclxuICAgIGNvZGU6IFwiTFlEXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBNQURcclxuICAgKi9cclxuICBNb3JvY2NhbkRpcmhhbTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1vcm9jY2FuIGRpcmhhbVwiLFxyXG4gICAgY29kZTogXCJNQURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1ETFxyXG4gICAqL1xyXG4gIE1vbGRvdmFuTGV1OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTW9sZG92YW4gbGV1XCIsXHJcbiAgICBjb2RlOiBcIk1ETFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTUdBXHJcbiAgICovXHJcbiAgTWFsYWdhc3lBcmlhcnk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNYWxhZ2FzeSBhcmlhcnlcIixcclxuICAgIGNvZGU6IFwiTUdBXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBNS0RcclxuICAgKi9cclxuICBNYWNlZG9uaWFuRGVuYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNYWNlZG9uaWFuIGRlbmFyXCIsXHJcbiAgICBjb2RlOiBcIk1LRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTU1LXHJcbiAgICovXHJcbiAgTXlhbm1hckt5YXQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNeWFubWFyIGt5YXRcIixcclxuICAgIGNvZGU6IFwiTU1LXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBNTlRcclxuICAgKi9cclxuICBNb25nb2xpYW5Ub2dyb2c6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNb25nb2xpYW4gdMO2Z3LDtmdcIixcclxuICAgIGNvZGU6IFwiTU5UXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBNT1BcclxuICAgKi9cclxuICBNYWNhbmVzZVBhdGFjYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1hY2FuZXNlIHBhdGFjYVwiLFxyXG4gICAgY29kZTogXCJNT1BcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1SVVxyXG4gICAqL1xyXG4gIE1hdXJpdGFuaWFuT3VndWl5YTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1hdXJpdGFuaWFuIG91Z3VpeWFcIixcclxuICAgIGNvZGU6IFwiTVJVXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBNVVJcclxuICAgKi9cclxuICBNYXVyaXRpYW5SdXBlZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1hdXJpdGlhbiBydXBlZVwiLFxyXG4gICAgY29kZTogXCJNVVJcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1WUlxyXG4gICAqL1xyXG4gIE1hbGRpdmlhblJ1Zml5YWE6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNYWxkaXZpYW4gcnVmaXlhYVwiLFxyXG4gICAgY29kZTogXCJNVlJcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE1XS1xyXG4gICAqL1xyXG4gIE1hbGF3aWFuS3dhY2hhOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTWFsYXdpYW4ga3dhY2hhXCIsXHJcbiAgICBjb2RlOiBcIk1XS1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTVhOXHJcbiAgICovXHJcbiAgTWV4aWNhblBlc286IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNZXhpY2FuIHBlc29cIixcclxuICAgIGNvZGU6IFwiTVhOXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBNWFZcclxuICAgKi9cclxuICBNZXhpY2FuVW5pZGFkRGVJbnZlcnNpb25VRElGdW5kc0NvZGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNZXhpY2FuIFVuaWRhZCBkZSBJbnZlcnNpb24gKFVESSkgKGZ1bmRzIGNvZGUpXCIsXHJcbiAgICBjb2RlOiBcIk1YVlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTVlSXHJcbiAgICovXHJcbiAgTWFsYXlzaWFuUmluZ2dpdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1hbGF5c2lhbiByaW5nZ2l0XCIsXHJcbiAgICBjb2RlOiBcIk1ZUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTVpOXHJcbiAgICovXHJcbiAgTW96YW1iaWNhbk1ldGljYWw6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNb3phbWJpY2FuIG1ldGljYWxcIixcclxuICAgIGNvZGU6IFwiTVpOXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBOQURcclxuICAgKi9cclxuICBOYW1pYmlhbkRvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5hbWliaWFuIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJOQURcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5HTlxyXG4gICAqL1xyXG4gIE5pZ2VyaWFuTmFpcmE6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOaWdlcmlhbiBuYWlyYVwiLFxyXG4gICAgY29kZTogXCJOR05cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5JT1xyXG4gICAqL1xyXG4gIE5pY2FyYWd1YW5Db3Jkb2JhOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTmljYXJhZ3VhbiBjw7NyZG9iYVwiLFxyXG4gICAgY29kZTogXCJOSU9cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE5PS1xyXG4gICAqL1xyXG4gIE5vcndlZ2lhbktyb25lOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTm9yd2VnaWFuIGtyb25lXCIsXHJcbiAgICBjb2RlOiBcIk5PS1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTlBSXHJcbiAgICovXHJcbiAgTmVwYWxlc2VSdXBlZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5lcGFsZXNlIHJ1cGVlXCIsXHJcbiAgICBjb2RlOiBcIk5QUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogTlpEXHJcbiAgICovXHJcbiAgTmV3WmVhbGFuZERvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk5ldyBaZWFsYW5kIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJOWkRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IE9NUlxyXG4gICAqL1xyXG4gIE9tYW5pUmlhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9tYW5pIHJpYWxcIixcclxuICAgIGNvZGU6IFwiT01SXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQQUJcclxuICAgKi9cclxuICBQYW5hbWFuaWFuQmFsYm9hOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUGFuYW1hbmlhbiBiYWxib2FcIixcclxuICAgIGNvZGU6IFwiUEFCXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQRU5cclxuICAgKi9cclxuICBQZXJ1dmlhblNvbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBlcnV2aWFuIFNvbFwiLFxyXG4gICAgY29kZTogXCJQRU5cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBHS1xyXG4gICAqL1xyXG4gIFBhcHVhTmV3R3VpbmVhbktpbmE6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQYXB1YSBOZXcgR3VpbmVhbiBraW5hXCIsXHJcbiAgICBjb2RlOiBcIlBHS1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUEhQXHJcbiAgICovXHJcbiAgUGhpbGlwcGluZVBpc28xMzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBoaWxpcHBpbmUgcGlzb1sxM11cIixcclxuICAgIGNvZGU6IFwiUEhQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQS1JcclxuICAgKi9cclxuICBQYWtpc3RhbmlSdXBlZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBha2lzdGFuaSBydXBlZVwiLFxyXG4gICAgY29kZTogXCJQS1JcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFBMTlxyXG4gICAqL1xyXG4gIFBvbGlzaFrFgm90eTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBvbGlzaCB6xYJvdHlcIixcclxuICAgIGNvZGU6IFwiUExOXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBQWUdcclxuICAgKi9cclxuICBQYXJhZ3VheWFuR3VhcmFuaTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBhcmFndWF5YW4gZ3VhcmFuw61cIixcclxuICAgIGNvZGU6IFwiUFlHXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBRQVJcclxuICAgKi9cclxuICBRYXRhcmlSaXlhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlFhdGFyaSByaXlhbFwiLFxyXG4gICAgY29kZTogXCJRQVJcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFJPTlxyXG4gICAqL1xyXG4gIFJvbWFuaWFuTGV1OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUm9tYW5pYW4gbGV1XCIsXHJcbiAgICBjb2RlOiBcIlJPTlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUlNEXHJcbiAgICovXHJcbiAgU2VyYmlhbkRpbmFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU2VyYmlhbiBkaW5hclwiLFxyXG4gICAgY29kZTogXCJSU0RcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFJVQlxyXG4gICAqL1xyXG4gIFJ1c3NpYW5SdWJsZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJ1c3NpYW4gcnVibGVcIixcclxuICAgIGNvZGU6IFwiUlVCXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBSV0ZcclxuICAgKi9cclxuICBSd2FuZGFuRnJhbmM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSd2FuZGFuIGZyYW5jXCIsXHJcbiAgICBjb2RlOiBcIlJXRlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU0FSXHJcbiAgICovXHJcbiAgU2F1ZGlSaXlhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNhdWRpIHJpeWFsXCIsXHJcbiAgICBjb2RlOiBcIlNBUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU0JEXHJcbiAgICovXHJcbiAgU29sb21vbklzbGFuZHNEb2xsYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTb2xvbW9uIElzbGFuZHMgZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIlNCRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU0NSXHJcbiAgICovXHJcbiAgU2V5Y2hlbGxlc1J1cGVlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU2V5Y2hlbGxlcyBydXBlZVwiLFxyXG4gICAgY29kZTogXCJTQ1JcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNER1xyXG4gICAqL1xyXG4gIFN1ZGFuZXNlUG91bmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTdWRhbmVzZSBwb3VuZFwiLFxyXG4gICAgY29kZTogXCJTREdcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNFS1xyXG4gICAqL1xyXG4gIFN3ZWRpc2hLcm9uYUtyb25vcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN3ZWRpc2gga3JvbmEva3Jvbm9yXCIsXHJcbiAgICBjb2RlOiBcIlNFS1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU0dEXHJcbiAgICovXHJcbiAgU2luZ2Fwb3JlRG9sbGFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU2luZ2Fwb3JlIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJTR0RcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNIUFxyXG4gICAqL1xyXG4gIFNhaW50SGVsZW5hUG91bmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTYWludCBIZWxlbmEgcG91bmRcIixcclxuICAgIGNvZGU6IFwiU0hQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBTTExcclxuICAgKi9cclxuICBTaWVycmFMZW9uZWFuTGVvbmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTaWVycmEgTGVvbmVhbiBsZW9uZVwiLFxyXG4gICAgY29kZTogXCJTTExcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNPU1xyXG4gICAqL1xyXG4gIFNvbWFsaVNoaWxsaW5nOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU29tYWxpIHNoaWxsaW5nXCIsXHJcbiAgICBjb2RlOiBcIlNPU1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1JEXHJcbiAgICovXHJcbiAgU3VyaW5hbWVzZURvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN1cmluYW1lc2UgZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIlNSRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1NQXHJcbiAgICovXHJcbiAgU291dGhTdWRhbmVzZVBvdW5kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU291dGggU3VkYW5lc2UgcG91bmRcIixcclxuICAgIGNvZGU6IFwiU1NQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBTVE5cclxuICAgKi9cclxuICBTYW9Ub21lQW5kUHJpbmNpcGVEb2JyYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlPDo28gVG9tw6kgYW5kIFByw61uY2lwZSBkb2JyYVwiLFxyXG4gICAgY29kZTogXCJTVE5cIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFNWQ1xyXG4gICAqL1xyXG4gIFNhbHZhZG9yYW5Db2xvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNhbHZhZG9yYW4gY29sw7NuXCIsXHJcbiAgICBjb2RlOiBcIlNWQ1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogU1lQXHJcbiAgICovXHJcbiAgU3lyaWFuUG91bmQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTeXJpYW4gcG91bmRcIixcclxuICAgIGNvZGU6IFwiU1lQXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBTWkxcclxuICAgKi9cclxuICBTd2F6aUxpbGFuZ2VuaTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN3YXppIGxpbGFuZ2VuaVwiLFxyXG4gICAgY29kZTogXCJTWkxcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRIQlxyXG4gICAqL1xyXG4gIFRoYWlCYWh0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVGhhaSBiYWh0XCIsXHJcbiAgICBjb2RlOiBcIlRIQlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVEpTXHJcbiAgICovXHJcbiAgVGFqaWtpc3RhbmlTb21vbmk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUYWppa2lzdGFuaSBzb21vbmlcIixcclxuICAgIGNvZGU6IFwiVEpTXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBUTVRcclxuICAgKi9cclxuICBUdXJrbWVuaXN0YW5NYW5hdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlR1cmttZW5pc3RhbiBtYW5hdFwiLFxyXG4gICAgY29kZTogXCJUTVRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRORFxyXG4gICAqL1xyXG4gIFR1bmlzaWFuRGluYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUdW5pc2lhbiBkaW5hclwiLFxyXG4gICAgY29kZTogXCJUTkRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRPUFxyXG4gICAqL1xyXG4gIFRvbmdhblBhYW5nYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlRvbmdhbiBwYcq7YW5nYVwiLFxyXG4gICAgY29kZTogXCJUT1BcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRSWVxyXG4gICAqL1xyXG4gIFR1cmtpc2hMaXJhOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVHVya2lzaCBsaXJhXCIsXHJcbiAgICBjb2RlOiBcIlRSWVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVFREXHJcbiAgICovXHJcbiAgVHJpbmlkYWRBbmRUb2JhZ29Eb2xsYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJUcmluaWRhZCBhbmQgVG9iYWdvIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJUVERcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRWRFxyXG4gICAqL1xyXG4gIFR1dmFsdURvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlR1dmFsdSBEb2xsYXJcIixcclxuICAgIGNvZGU6IFwiVFZEXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBUV0RcclxuICAgKi9cclxuICBOZXdUYWl3YW5Eb2xsYXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOZXcgVGFpd2FuIGRvbGxhclwiLFxyXG4gICAgY29kZTogXCJUV0RcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFRaU1xyXG4gICAqL1xyXG4gIFRhbnphbmlhblNoaWxsaW5nOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVGFuemFuaWFuIHNoaWxsaW5nXCIsXHJcbiAgICBjb2RlOiBcIlRaU1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVUFIXHJcbiAgICovXHJcbiAgVWtyYWluaWFuSHJ5dm5pYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVrcmFpbmlhbiBocnl2bmlhXCIsXHJcbiAgICBjb2RlOiBcIlVBSFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVUdYXHJcbiAgICovXHJcbiAgVWdhbmRhblNoaWxsaW5nOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVWdhbmRhbiBzaGlsbGluZ1wiLFxyXG4gICAgY29kZTogXCJVR1hcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFVTRFxyXG4gICAqL1xyXG4gIFVuaXRlZFN0YXRlc0RvbGxhcjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVuaXRlZCBTdGF0ZXMgZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIlVTRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVVNOXHJcbiAgICovXHJcbiAgVW5pdGVkU3RhdGVzRG9sbGFyTmV4dERheUZ1bmRzQ29kZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVuaXRlZCBTdGF0ZXMgZG9sbGFyIChuZXh0IGRheSkgKGZ1bmRzIGNvZGUpXCIsXHJcbiAgICBjb2RlOiBcIlVTTlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVVlJXHJcbiAgICovXHJcbiAgVXJ1Z3VheVBlc29FblVuaWRhZGVzSW5kZXhhZGFzVVJVSVVSVUlGdW5kc0NvZGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJVcnVndWF5IFBlc28gZW4gVW5pZGFkZXMgSW5kZXhhZGFzIChVUlVJVVJVSSkgKGZ1bmRzIGNvZGUpXCIsXHJcbiAgICBjb2RlOiBcIlVZSVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVVlVXHJcbiAgICovXHJcbiAgVXJ1Z3VheWFuUGVzbzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlVydWd1YXlhbiBwZXNvXCIsXHJcbiAgICBjb2RlOiBcIlVZVVwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVVpTXHJcbiAgICovXHJcbiAgVXpiZWtpc3RhblNvbTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlV6YmVraXN0YW4gc29tXCIsXHJcbiAgICBjb2RlOiBcIlVaU1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVkVGXHJcbiAgICovXHJcbiAgVmVuZXp1ZWxhbkJvbGl2YXI6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJWZW5lenVlbGFuIGJvbMOtdmFyXCIsXHJcbiAgICBjb2RlOiBcIlZFRlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVk5EXHJcbiAgICovXHJcbiAgVmlldG5hbWVzZcSQb25nOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVmlldG5hbWVzZSDEkeG7k25nXCIsXHJcbiAgICBjb2RlOiBcIlZORFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogVlVWXHJcbiAgICovXHJcbiAgVmFudWF0dVZhdHU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJWYW51YXR1IHZhdHVcIixcclxuICAgIGNvZGU6IFwiVlVWXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBXU1RcclxuICAgKi9cclxuICBTYW1vYW5UYWxhOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU2Ftb2FuIHRhbGFcIixcclxuICAgIGNvZGU6IFwiV1NUXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBYQUZcclxuICAgKi9cclxuICBDRkFGcmFuY0JFQUM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDRkEgZnJhbmMgQkVBQ1wiLFxyXG4gICAgY29kZTogXCJYQUZcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhBR1xyXG4gICAqL1xyXG4gIFNpbHZlck9uZVRyb3lPdW5jZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNpbHZlciAob25lIHRyb3kgb3VuY2UpXCIsXHJcbiAgICBjb2RlOiBcIlhBR1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogWEFVXHJcbiAgICovXHJcbiAgR29sZE9uZVRyb3lPdW5jZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkdvbGQgKG9uZSB0cm95IG91bmNlKVwiLFxyXG4gICAgY29kZTogXCJYQVVcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhCQVxyXG4gICAqL1xyXG4gIEV1cm9wZWFuQ29tcG9zaXRlVW5pdEVVUkNPQm9uZE1hcmtldFVuaXQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFdXJvcGVhbiBDb21wb3NpdGUgVW5pdCAoRVVSQ08pIChib25kIG1hcmtldCB1bml0KVwiLFxyXG4gICAgY29kZTogXCJYQkFcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhCQlxyXG4gICAqL1xyXG4gIEV1cm9wZWFuTW9uZXRhcnlVbml0RU1VNkJvbmRNYXJrZXRVbml0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRXVyb3BlYW4gTW9uZXRhcnkgVW5pdCAoRS5NLlUuLTYpIChib25kIG1hcmtldCB1bml0KVwiLFxyXG4gICAgY29kZTogXCJYQkJcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhCQ1xyXG4gICAqL1xyXG4gIEV1cm9wZWFuVW5pdE9mQWNjb3VudDlFVUE5Qm9uZE1hcmtldFVuaXQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFdXJvcGVhbiBVbml0IG9mIEFjY291bnQgOSAoRS5VLkEuLTkpIChib25kIG1hcmtldCB1bml0KVwiLFxyXG4gICAgY29kZTogXCJYQkNcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhCRFxyXG4gICAqL1xyXG4gIEV1cm9wZWFuVW5pdE9mQWNjb3VudDE3RVVBMTdCb25kTWFya2V0VW5pdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkV1cm9wZWFuIFVuaXQgb2YgQWNjb3VudCAxNyAoRS5VLkEuLTE3KSAoYm9uZCBtYXJrZXQgdW5pdClcIixcclxuICAgIGNvZGU6IFwiWEJEXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBYQ0RcclxuICAgKi9cclxuICBFYXN0Q2FyaWJiZWFuRG9sbGFyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRWFzdCBDYXJpYmJlYW4gZG9sbGFyXCIsXHJcbiAgICBjb2RlOiBcIlhDRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogWERSXHJcbiAgICovXHJcbiAgU3BlY2lhbERyYXdpbmdSaWdodHM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTcGVjaWFsIGRyYXdpbmcgcmlnaHRzXCIsXHJcbiAgICBjb2RlOiBcIlhEUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogWE9GXHJcbiAgICovXHJcbiAgQ0ZBRnJhbmNCQ0VBTzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNGQSBmcmFuYyBCQ0VBT1wiLFxyXG4gICAgY29kZTogXCJYT0ZcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhQRFxyXG4gICAqL1xyXG4gIFBhbGxhZGl1bU9uZVRyb3lPdW5jZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlBhbGxhZGl1bSAob25lIHRyb3kgb3VuY2UpXCIsXHJcbiAgICBjb2RlOiBcIlhQRFwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogWFBGXHJcbiAgICovXHJcbiAgQ0ZQRnJhbmNGcmFuY1BhY2lmaXF1ZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNGUCBmcmFuYyAoZnJhbmMgUGFjaWZpcXVlKVwiLFxyXG4gICAgY29kZTogXCJYUEZcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhQVFxyXG4gICAqL1xyXG4gIFBsYXRpbnVtT25lVHJveU91bmNlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUGxhdGludW0gKG9uZSB0cm95IG91bmNlKVwiLFxyXG4gICAgY29kZTogXCJYUFRcIixcclxuICAgIHN5c3RlbTogXCJ1cm46aXNvOnN0ZDppc286NDIxN1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFhTVVxyXG4gICAqL1xyXG4gIFNVQ1JFOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU1VDUkVcIixcclxuICAgIGNvZGU6IFwiWFNVXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBYVFNcclxuICAgKi9cclxuICBDb2RlUmVzZXJ2ZWRGb3JUZXN0aW5nUHVycG9zZXM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb2RlIHJlc2VydmVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzXCIsXHJcbiAgICBjb2RlOiBcIlhUU1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogWFVBXHJcbiAgICovXHJcbiAgQURCVW5pdE9mQWNjb3VudDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkFEQiBVbml0IG9mIEFjY291bnRcIixcclxuICAgIGNvZGU6IFwiWFVBXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBYWFhcclxuICAgKi9cclxuICBOb0N1cnJlbmN5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTm8gY3VycmVuY3lcIixcclxuICAgIGNvZGU6IFwiWFhYXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBZRVJcclxuICAgKi9cclxuICBZZW1lbmlSaWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiWWVtZW5pIHJpYWxcIixcclxuICAgIGNvZGU6IFwiWUVSXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBaQVJcclxuICAgKi9cclxuICBTb3V0aEFmcmljYW5SYW5kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU291dGggQWZyaWNhbiByYW5kXCIsXHJcbiAgICBjb2RlOiBcIlpBUlwiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogWk1XXHJcbiAgICovXHJcbiAgWmFtYmlhbkt3YWNoYTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlphbWJpYW4ga3dhY2hhXCIsXHJcbiAgICBjb2RlOiBcIlpNV1wiLFxyXG4gICAgc3lzdGVtOiBcInVybjppc286c3RkOmlzbzo0MjE3XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogWldMXHJcbiAgICovXHJcbiAgWmltYmFid2VhbkRvbGxhckExMDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlppbWJhYndlYW4gZG9sbGFyIEEvMTBcIixcclxuICAgIGNvZGU6IFwiWldMXCIsXHJcbiAgICBzeXN0ZW06IFwidXJuOmlzbzpzdGQ6aXNvOjQyMTdcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDdXJyZW5jeSBjb2RlcyBmcm9tIElTTyA0MjE3IChzZWUgaHR0cHM6Ly93d3cuaXNvLm9yZy9pc28tNDIxNy1jdXJyZW5jeS1jb2Rlcy5odG1sKVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ3VycmVuY2llc0NvZGluZ1R5cGUgPSB0eXBlb2YgQ3VycmVuY2llc0NvZGluZ3M7XHJcbiJdfQ==