// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/immunization-target-disease|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the disease that the dose is being administered against. This value set is provided as a suggestive example and includes the SNOMED CT concepts from the 64572001 (Disease) hierarchy.
 */
export const ImmunizationTargetDiseaseCodings = {
    /**
     * Code: 14189004
     */
    VAL14189004: new Coding({
        code: "14189004",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 1857005
     */
    VAL1857005: new Coding({
        code: "1857005",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 27836007
     */
    VAL27836007: new Coding({
        code: "27836007",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 36653000
     */
    VAL36653000: new Coding({
        code: "36653000",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 36989005
     */
    VAL36989005: new Coding({
        code: "36989005",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 397430003
     */
    VAL397430003: new Coding({
        code: "397430003",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 398102009
     */
    VAL398102009: new Coding({
        code: "398102009",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 709410003
     */
    VAL709410003: new Coding({
        code: "709410003",
        system: "http://snomed.info/sct",
    }),
    /**
     * Code: 76902006
     */
    VAL76902006: new Coding({
        code: "76902006",
        system: "http://snomed.info/sct",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1tdW5pemF0aW9uVGFyZ2V0RGlzZWFzZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0ltbXVuaXphdGlvblRhcmdldERpc2Vhc2VDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLGdGQUFnRjtBQUVoRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRztJQUM5Qzs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3RCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx3QkFBd0I7S0FDakMsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvaW1tdW5pemF0aW9uLXRhcmdldC1kaXNlYXNlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIGRpc2Vhc2UgdGhhdCB0aGUgZG9zZSBpcyBiZWluZyBhZG1pbmlzdGVyZWQgYWdhaW5zdC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUgYW5kIGluY2x1ZGVzIHRoZSBTTk9NRUQgQ1QgY29uY2VwdHMgZnJvbSB0aGUgNjQ1NzIwMDEgKERpc2Vhc2UpIGhpZXJhcmNoeS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJbW11bml6YXRpb25UYXJnZXREaXNlYXNlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBDb2RlOiAxNDE4OTAwNFxyXG4gICAqL1xyXG4gIFZBTDE0MTg5MDA0OiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiMTQxODkwMDRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMTg1NzAwNVxyXG4gICAqL1xyXG4gIFZBTDE4NTcwMDU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIxODU3MDA1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDI3ODM2MDA3XHJcbiAgICovXHJcbiAgVkFMMjc4MzYwMDc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIyNzgzNjAwN1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzNjY1MzAwMFxyXG4gICAqL1xyXG4gIFZBTDM2NjUzMDAwOiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiMzY2NTMwMDBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogMzY5ODkwMDVcclxuICAgKi9cclxuICBWQUwzNjk4OTAwNTogbmV3IENvZGluZyh7XHJcbiAgICBjb2RlOiBcIjM2OTg5MDA1XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDM5NzQzMDAwM1xyXG4gICAqL1xyXG4gIFZBTDM5NzQzMDAwMzogbmV3IENvZGluZyh7XHJcbiAgICBjb2RlOiBcIjM5NzQzMDAwM1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiAzOTgxMDIwMDlcclxuICAgKi9cclxuICBWQUwzOTgxMDIwMDk6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCIzOTgxMDIwMDlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vc25vbWVkLmluZm8vc2N0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogNzA5NDEwMDAzXHJcbiAgICovXHJcbiAgVkFMNzA5NDEwMDAzOiBuZXcgQ29kaW5nKHtcclxuICAgIGNvZGU6IFwiNzA5NDEwMDAzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Nub21lZC5pbmZvL3NjdFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IDc2OTAyMDA2XHJcbiAgICovXHJcbiAgVkFMNzY5MDIwMDY6IG5ldyBDb2Rpbmcoe1xyXG4gICAgY29kZTogXCI3NjkwMjAwNlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9zbm9tZWQuaW5mby9zY3RcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgdmFsdWUgc2V0IHRvIGluc3RhbnRpYXRlIHRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBkcmF3biBmcm9tIGEgdGVybWlub2xvZ2ljYWxseSByb2J1c3QgY29kZSBzeXN0ZW0gdGhhdCBjb25zaXN0cyBvZiBvciBjb250YWlucyBjb25jZXB0cyB0byBzdXBwb3J0IGRlc2NyaWJpbmcgdGhlIGRpc2Vhc2UgdGhhdCB0aGUgZG9zZSBpcyBiZWluZyBhZG1pbmlzdGVyZWQgYWdhaW5zdC4gVGhpcyB2YWx1ZSBzZXQgaXMgcHJvdmlkZWQgYXMgYSBzdWdnZXN0aXZlIGV4YW1wbGUgYW5kIGluY2x1ZGVzIHRoZSBTTk9NRUQgQ1QgY29uY2VwdHMgZnJvbSB0aGUgNjQ1NzIwMDEgKERpc2Vhc2UpIGhpZXJhcmNoeS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEltbXVuaXphdGlvblRhcmdldERpc2Vhc2VDb2RpbmdUeXBlID0gdHlwZW9mIEltbXVuaXphdGlvblRhcmdldERpc2Vhc2VDb2RpbmdzO1xyXG4iXX0=