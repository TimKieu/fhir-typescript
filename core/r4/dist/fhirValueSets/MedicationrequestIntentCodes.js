// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/medicationrequest-intent|4.0.1
/**
 * MedicationRequest Intent Codes
 */
export const MedicationrequestIntentCodes = {
    /**
     * filler-order: The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order.
     */
    FillerOrder: "filler-order",
    /**
     * instance-order: The request represents an instance for the particular order, for example a medication administration record.
     */
    InstanceOrder: "instance-order",
    /**
     * option: The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or  other constraints among a set of requests.
     */
    Option: "option",
    /**
     * order: The request represents a request/demand and authorization for action
     */
    Order: "order",
    /**
     * original-order: The request represents the original authorization for the medication request.
     */
    OriginalOrder: "original-order",
    /**
     * plan: The request represents an intention to ensure something occurs without providing an authorization for others to act.
     */
    Plan: "plan",
    /**
     * proposal: The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act
     */
    Proposal: "proposal",
    /**
     * reflex-order: The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization..
     */
    ReflexOrder: "reflex-order",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw2RUFBNkU7QUFFN0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRztJQUMxQzs7T0FFRztJQUNILFdBQVcsRUFBRSxjQUFjO0lBQzNCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLGdCQUFnQjtJQUMvQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87SUFDZDs7T0FFRztJQUNILGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0I7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEI7O09BRUc7SUFDSCxXQUFXLEVBQUUsY0FBYztDQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lZGljYXRpb25yZXF1ZXN0LWludGVudHw0LjAuMVxyXG5cclxuLyoqXHJcbiAqIE1lZGljYXRpb25SZXF1ZXN0IEludGVudCBDb2Rlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lZGljYXRpb25yZXF1ZXN0SW50ZW50Q29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogZmlsbGVyLW9yZGVyOiBUaGUgcmVxdWVzdCByZXByZXNlbnRzIHRoZSB2aWV3IG9mIGFuIGF1dGhvcml6YXRpb24gaW5zdGFudGlhdGVkIGJ5IGEgZnVsZmlsbGluZyBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBmdWxmaWxsZXIncyBpbnRlbnRpb24gdG8gYWN0IHVwb24gYSBzdWJtaXR0ZWQgb3JkZXIuXHJcbiAgICovXHJcbiAgRmlsbGVyT3JkZXI6IFwiZmlsbGVyLW9yZGVyXCIsXHJcbiAgLyoqXHJcbiAgICogaW5zdGFuY2Utb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gaW5zdGFuY2UgZm9yIHRoZSBwYXJ0aWN1bGFyIG9yZGVyLCBmb3IgZXhhbXBsZSBhIG1lZGljYXRpb24gYWRtaW5pc3RyYXRpb24gcmVjb3JkLlxyXG4gICAqL1xyXG4gIEluc3RhbmNlT3JkZXI6IFwiaW5zdGFuY2Utb3JkZXJcIixcclxuICAvKipcclxuICAgKiBvcHRpb246IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYSBjb21wb25lbnQgb3Igb3B0aW9uIGZvciBhIFJlcXVlc3RHcm91cCB0aGF0IGVzdGFibGlzaGVzIHRpbWluZywgY29uZGl0aW9uYWxpdHkgYW5kL29yICBvdGhlciBjb25zdHJhaW50cyBhbW9uZyBhIHNldCBvZiByZXF1ZXN0cy5cclxuICAgKi9cclxuICBPcHRpb246IFwib3B0aW9uXCIsXHJcbiAgLyoqXHJcbiAgICogb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYSByZXF1ZXN0L2RlbWFuZCBhbmQgYXV0aG9yaXphdGlvbiBmb3IgYWN0aW9uXHJcbiAgICovXHJcbiAgT3JkZXI6IFwib3JkZXJcIixcclxuICAvKipcclxuICAgKiBvcmlnaW5hbC1vcmRlcjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyB0aGUgb3JpZ2luYWwgYXV0aG9yaXphdGlvbiBmb3IgdGhlIG1lZGljYXRpb24gcmVxdWVzdC5cclxuICAgKi9cclxuICBPcmlnaW5hbE9yZGVyOiBcIm9yaWdpbmFsLW9yZGVyXCIsXHJcbiAgLyoqXHJcbiAgICogcGxhbjogVGhlIHJlcXVlc3QgcmVwcmVzZW50cyBhbiBpbnRlbnRpb24gdG8gZW5zdXJlIHNvbWV0aGluZyBvY2N1cnMgd2l0aG91dCBwcm92aWRpbmcgYW4gYXV0aG9yaXphdGlvbiBmb3Igb3RoZXJzIHRvIGFjdC5cclxuICAgKi9cclxuICBQbGFuOiBcInBsYW5cIixcclxuICAvKipcclxuICAgKiBwcm9wb3NhbDogVGhlIHJlcXVlc3QgaXMgYSBzdWdnZXN0aW9uIG1hZGUgYnkgc29tZW9uZS9zb21ldGhpbmcgdGhhdCBkb2Vzbid0IGhhdmUgYW4gaW50ZW50aW9uIHRvIGVuc3VyZSBpdCBvY2N1cnMgYW5kIHdpdGhvdXQgcHJvdmlkaW5nIGFuIGF1dGhvcml6YXRpb24gdG8gYWN0XHJcbiAgICovXHJcbiAgUHJvcG9zYWw6IFwicHJvcG9zYWxcIixcclxuICAvKipcclxuICAgKiByZWZsZXgtb3JkZXI6IFRoZSByZXF1ZXN0IHJlcHJlc2VudHMgYW4gYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgc3VwcGxlbWVudGFsIGF1dGhvcml6YXRpb24gZm9yIGFjdGlvbiBiYXNlZCBvbiBhIHBhcmVudCBhdXRob3JpemF0aW9uIHRvZ2V0aGVyIHdpdGggaW5pdGlhbCByZXN1bHRzIG9mIHRoZSBhY3Rpb24gdGFrZW4gYWdhaW5zdCB0aGF0IHBhcmVudCBhdXRob3JpemF0aW9uLi5cclxuICAgKi9cclxuICBSZWZsZXhPcmRlcjogXCJyZWZsZXgtb3JkZXJcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBNZWRpY2F0aW9uUmVxdWVzdCBJbnRlbnQgQ29kZXNcclxuICovXHJcbmV4cG9ydCB0eXBlIE1lZGljYXRpb25yZXF1ZXN0SW50ZW50Q29kZVR5cGUgPSB0eXBlb2YgTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2Rlc1trZXlvZiB0eXBlb2YgTWVkaWNhdGlvbnJlcXVlc3RJbnRlbnRDb2Rlc107XHJcbiJdfQ==