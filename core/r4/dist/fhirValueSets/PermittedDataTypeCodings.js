// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/permitted-data-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Permitted data type for observation value.
 */
export const PermittedDataTypeCodings = {
    /**
     * boolean: true or false.
     */
    VALBoolean: new Coding({
        display: "boolean",
        code: "boolean",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * CodeableConcept: A coded concept from a reference terminology and/or text.
     */
    CodeableConcept: new Coding({
        display: "CodeableConcept",
        code: "CodeableConcept",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * dateTime: A date, date-time or partial date (e.g. just year or year + month) as used in human communication.
     */
    DateTime: new Coding({
        display: "dateTime",
        code: "dateTime",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * integer: A signed integer.
     */
    Integer: new Coding({
        display: "integer",
        code: "integer",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * Period: A time range defined by start and end date/time.
     */
    Period: new Coding({
        display: "Period",
        code: "Period",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * Quantity: A measured amount.
     */
    Quantity: new Coding({
        display: "Quantity",
        code: "Quantity",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * Range: A set of values bounded by low and high.
     */
    Range: new Coding({
        display: "Range",
        code: "Range",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * Ratio: A ratio of two Quantity values - a numerator and a denominator.
     */
    Ratio: new Coding({
        display: "Ratio",
        code: "Ratio",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * SampledData: A series of measurements taken by a device.
     */
    SampledData: new Coding({
        display: "SampledData",
        code: "SampledData",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * string: A sequence of Unicode characters.
     */
    VALString: new Coding({
        display: "string",
        code: "string",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
    /**
     * time: A time during the day, in the format hh:mm:ss.
     */
    Time: new Coding({
        display: "time",
        code: "time",
        system: "http://hl7.org/fhir/permitted-data-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVybWl0dGVkRGF0YVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9QZXJtaXR0ZWREYXRhVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBRXhFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDMUIsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25CLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Blcm1pdHRlZC1kYXRhLXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFBlcm1pdHRlZCBkYXRhIHR5cGUgZm9yIG9ic2VydmF0aW9uIHZhbHVlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBlcm1pdHRlZERhdGFUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBib29sZWFuOiB0cnVlIG9yIGZhbHNlLlxyXG4gICAqL1xyXG4gIFZBTEJvb2xlYW46IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJib29sZWFuXCIsXHJcbiAgICBjb2RlOiBcImJvb2xlYW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlYWJsZUNvbmNlcHQ6IEEgY29kZWQgY29uY2VwdCBmcm9tIGEgcmVmZXJlbmNlIHRlcm1pbm9sb2d5IGFuZC9vciB0ZXh0LlxyXG4gICAqL1xyXG4gIENvZGVhYmxlQ29uY2VwdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvZGVhYmxlQ29uY2VwdFwiLFxyXG4gICAgY29kZTogXCJDb2RlYWJsZUNvbmNlcHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkYXRlVGltZTogQSBkYXRlLCBkYXRlLXRpbWUgb3IgcGFydGlhbCBkYXRlIChlLmcuIGp1c3QgeWVhciBvciB5ZWFyICsgbW9udGgpIGFzIHVzZWQgaW4gaHVtYW4gY29tbXVuaWNhdGlvbi5cclxuICAgKi9cclxuICBEYXRlVGltZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImRhdGVUaW1lXCIsXHJcbiAgICBjb2RlOiBcImRhdGVUaW1lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaW50ZWdlcjogQSBzaWduZWQgaW50ZWdlci5cclxuICAgKi9cclxuICBJbnRlZ2VyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiaW50ZWdlclwiLFxyXG4gICAgY29kZTogXCJpbnRlZ2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUGVyaW9kOiBBIHRpbWUgcmFuZ2UgZGVmaW5lZCBieSBzdGFydCBhbmQgZW5kIGRhdGUvdGltZS5cclxuICAgKi9cclxuICBQZXJpb2Q6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQZXJpb2RcIixcclxuICAgIGNvZGU6IFwiUGVyaW9kXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUXVhbnRpdHk6IEEgbWVhc3VyZWQgYW1vdW50LlxyXG4gICAqL1xyXG4gIFF1YW50aXR5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUXVhbnRpdHlcIixcclxuICAgIGNvZGU6IFwiUXVhbnRpdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBSYW5nZTogQSBzZXQgb2YgdmFsdWVzIGJvdW5kZWQgYnkgbG93IGFuZCBoaWdoLlxyXG4gICAqL1xyXG4gIFJhbmdlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmFuZ2VcIixcclxuICAgIGNvZGU6IFwiUmFuZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBSYXRpbzogQSByYXRpbyBvZiB0d28gUXVhbnRpdHkgdmFsdWVzIC0gYSBudW1lcmF0b3IgYW5kIGEgZGVub21pbmF0b3IuXHJcbiAgICovXHJcbiAgUmF0aW86IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSYXRpb1wiLFxyXG4gICAgY29kZTogXCJSYXRpb1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIFNhbXBsZWREYXRhOiBBIHNlcmllcyBvZiBtZWFzdXJlbWVudHMgdGFrZW4gYnkgYSBkZXZpY2UuXHJcbiAgICovXHJcbiAgU2FtcGxlZERhdGE6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJTYW1wbGVkRGF0YVwiLFxyXG4gICAgY29kZTogXCJTYW1wbGVkRGF0YVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHN0cmluZzogQSBzZXF1ZW5jZSBvZiBVbmljb2RlIGNoYXJhY3RlcnMuXHJcbiAgICovXHJcbiAgVkFMU3RyaW5nOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwic3RyaW5nXCIsXHJcbiAgICBjb2RlOiBcInN0cmluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHRpbWU6IEEgdGltZSBkdXJpbmcgdGhlIGRheSwgaW4gdGhlIGZvcm1hdCBoaDptbTpzcy5cclxuICAgKi9cclxuICBUaW1lOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwidGltZVwiLFxyXG4gICAgY29kZTogXCJ0aW1lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogUGVybWl0dGVkIGRhdGEgdHlwZSBmb3Igb2JzZXJ2YXRpb24gdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQZXJtaXR0ZWREYXRhVHlwZUNvZGluZ1R5cGUgPSB0eXBlb2YgUGVybWl0dGVkRGF0YVR5cGVDb2RpbmdzO1xyXG4iXX0=