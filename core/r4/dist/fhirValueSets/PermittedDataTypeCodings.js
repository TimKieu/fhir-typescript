// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/permitted-data-type|4.0.1
/**
 * Permitted data type for observation value.
 */
export const PermittedDataTypeCodings = {
    /**
     * boolean: true or false.
     */
    VALBoolean: {
        display: "boolean",
        code: "boolean",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * CodeableConcept: A coded concept from a reference terminology and/or text.
     */
    CodeableConcept: {
        display: "CodeableConcept",
        code: "CodeableConcept",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * dateTime: A date, date-time or partial date (e.g. just year or year + month) as used in human communication.
     */
    DateTime: {
        display: "dateTime",
        code: "dateTime",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * integer: A signed integer.
     */
    Integer: {
        display: "integer",
        code: "integer",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Period: A time range defined by start and end date/time.
     */
    Period: {
        display: "Period",
        code: "Period",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Quantity: A measured amount.
     */
    Quantity: {
        display: "Quantity",
        code: "Quantity",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Range: A set of values bounded by low and high.
     */
    Range: {
        display: "Range",
        code: "Range",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * Ratio: A ratio of two Quantity values - a numerator and a denominator.
     */
    Ratio: {
        display: "Ratio",
        code: "Ratio",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * SampledData: A series of measurements taken by a device.
     */
    SampledData: {
        display: "SampledData",
        code: "SampledData",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * string: A sequence of Unicode characters.
     */
    VALString: {
        display: "string",
        code: "string",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
    /**
     * time: A time during the day, in the format hh:mm:ss.
     */
    Time: {
        display: "time",
        code: "time",
        system: "http://hl7.org/fhir/permitted-data-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVybWl0dGVkRGF0YVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9QZXJtaXR0ZWREYXRhVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBc0R4RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtJQUNEOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHlDQUF5QztLQUNsRDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcGVybWl0dGVkLWRhdGEtdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFBlcm1pdHRlZCBkYXRhIHR5cGUgZm9yIG9ic2VydmF0aW9uIHZhbHVlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGVybWl0dGVkRGF0YVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJvb2xlYW46IHRydWUgb3IgZmFsc2UuXHJcbiAgICovXHJcbiAgVkFMQm9vbGVhbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBDb2RlYWJsZUNvbmNlcHQ6IEEgY29kZWQgY29uY2VwdCBmcm9tIGEgcmVmZXJlbmNlIHRlcm1pbm9sb2d5IGFuZC9vciB0ZXh0LlxyXG4gICAqL1xyXG4gIENvZGVhYmxlQ29uY2VwdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBkYXRlVGltZTogQSBkYXRlLCBkYXRlLXRpbWUgb3IgcGFydGlhbCBkYXRlIChlLmcuIGp1c3QgeWVhciBvciB5ZWFyICsgbW9udGgpIGFzIHVzZWQgaW4gaHVtYW4gY29tbXVuaWNhdGlvbi5cclxuICAgKi9cclxuICBEYXRlVGltZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbnRlZ2VyOiBBIHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAqL1xyXG4gIEludGVnZXI6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUGVyaW9kOiBBIHRpbWUgcmFuZ2UgZGVmaW5lZCBieSBzdGFydCBhbmQgZW5kIGRhdGUvdGltZS5cclxuICAgKi9cclxuICBQZXJpb2Q6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUXVhbnRpdHk6IEEgbWVhc3VyZWQgYW1vdW50LlxyXG4gICAqL1xyXG4gIFF1YW50aXR5OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJhbmdlOiBBIHNldCBvZiB2YWx1ZXMgYm91bmRlZCBieSBsb3cgYW5kIGhpZ2guXHJcbiAgICovXHJcbiAgUmFuZ2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUmF0aW86IEEgcmF0aW8gb2YgdHdvIFF1YW50aXR5IHZhbHVlcyAtIGEgbnVtZXJhdG9yIGFuZCBhIGRlbm9taW5hdG9yLlxyXG4gICAqL1xyXG4gIFJhdGlvOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFNhbXBsZWREYXRhOiBBIHNlcmllcyBvZiBtZWFzdXJlbWVudHMgdGFrZW4gYnkgYSBkZXZpY2UuXHJcbiAgICovXHJcbiAgU2FtcGxlZERhdGE6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3RyaW5nOiBBIHNlcXVlbmNlIG9mIFVuaWNvZGUgY2hhcmFjdGVycy5cclxuICAgKi9cclxuICBWQUxTdHJpbmc6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdGltZTogQSB0aW1lIGR1cmluZyB0aGUgZGF5LCBpbiB0aGUgZm9ybWF0IGhoOm1tOnNzLlxyXG4gICAqL1xyXG4gIFRpbWU6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQZXJtaXR0ZWQgZGF0YSB0eXBlIGZvciBvYnNlcnZhdGlvbiB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBQZXJtaXR0ZWREYXRhVHlwZUNvZGluZ3M6UGVybWl0dGVkRGF0YVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGJvb2xlYW46IHRydWUgb3IgZmFsc2UuXHJcbiAgICovXHJcbiAgVkFMQm9vbGVhbjoge1xyXG4gICAgZGlzcGxheTogXCJib29sZWFuXCIsXHJcbiAgICBjb2RlOiBcImJvb2xlYW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENvZGVhYmxlQ29uY2VwdDogQSBjb2RlZCBjb25jZXB0IGZyb20gYSByZWZlcmVuY2UgdGVybWlub2xvZ3kgYW5kL29yIHRleHQuXHJcbiAgICovXHJcbiAgQ29kZWFibGVDb25jZXB0OiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvZGVhYmxlQ29uY2VwdFwiLFxyXG4gICAgY29kZTogXCJDb2RlYWJsZUNvbmNlcHRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRhdGVUaW1lOiBBIGRhdGUsIGRhdGUtdGltZSBvciBwYXJ0aWFsIGRhdGUgKGUuZy4ganVzdCB5ZWFyIG9yIHllYXIgKyBtb250aCkgYXMgdXNlZCBpbiBodW1hbiBjb21tdW5pY2F0aW9uLlxyXG4gICAqL1xyXG4gIERhdGVUaW1lOiB7XHJcbiAgICBkaXNwbGF5OiBcImRhdGVUaW1lXCIsXHJcbiAgICBjb2RlOiBcImRhdGVUaW1lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbnRlZ2VyOiBBIHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAqL1xyXG4gIEludGVnZXI6IHtcclxuICAgIGRpc3BsYXk6IFwiaW50ZWdlclwiLFxyXG4gICAgY29kZTogXCJpbnRlZ2VyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQZXJpb2Q6IEEgdGltZSByYW5nZSBkZWZpbmVkIGJ5IHN0YXJ0IGFuZCBlbmQgZGF0ZS90aW1lLlxyXG4gICAqL1xyXG4gIFBlcmlvZDoge1xyXG4gICAgZGlzcGxheTogXCJQZXJpb2RcIixcclxuICAgIGNvZGU6IFwiUGVyaW9kXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBRdWFudGl0eTogQSBtZWFzdXJlZCBhbW91bnQuXHJcbiAgICovXHJcbiAgUXVhbnRpdHk6IHtcclxuICAgIGRpc3BsYXk6IFwiUXVhbnRpdHlcIixcclxuICAgIGNvZGU6IFwiUXVhbnRpdHlcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJhbmdlOiBBIHNldCBvZiB2YWx1ZXMgYm91bmRlZCBieSBsb3cgYW5kIGhpZ2guXHJcbiAgICovXHJcbiAgUmFuZ2U6IHtcclxuICAgIGRpc3BsYXk6IFwiUmFuZ2VcIixcclxuICAgIGNvZGU6IFwiUmFuZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3Blcm1pdHRlZC1kYXRhLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIFJhdGlvOiBBIHJhdGlvIG9mIHR3byBRdWFudGl0eSB2YWx1ZXMgLSBhIG51bWVyYXRvciBhbmQgYSBkZW5vbWluYXRvci5cclxuICAgKi9cclxuICBSYXRpbzoge1xyXG4gICAgZGlzcGxheTogXCJSYXRpb1wiLFxyXG4gICAgY29kZTogXCJSYXRpb1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogU2FtcGxlZERhdGE6IEEgc2VyaWVzIG9mIG1lYXN1cmVtZW50cyB0YWtlbiBieSBhIGRldmljZS5cclxuICAgKi9cclxuICBTYW1wbGVkRGF0YToge1xyXG4gICAgZGlzcGxheTogXCJTYW1wbGVkRGF0YVwiLFxyXG4gICAgY29kZTogXCJTYW1wbGVkRGF0YVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3RyaW5nOiBBIHNlcXVlbmNlIG9mIFVuaWNvZGUgY2hhcmFjdGVycy5cclxuICAgKi9cclxuICBWQUxTdHJpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwic3RyaW5nXCIsXHJcbiAgICBjb2RlOiBcInN0cmluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcGVybWl0dGVkLWRhdGEtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdGltZTogQSB0aW1lIGR1cmluZyB0aGUgZGF5LCBpbiB0aGUgZm9ybWF0IGhoOm1tOnNzLlxyXG4gICAqL1xyXG4gIFRpbWU6IHtcclxuICAgIGRpc3BsYXk6IFwidGltZVwiLFxyXG4gICAgY29kZTogXCJ0aW1lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9wZXJtaXR0ZWQtZGF0YS10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19