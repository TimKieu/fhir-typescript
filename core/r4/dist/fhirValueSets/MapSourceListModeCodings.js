// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-source-list-mode|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * If field is a list, how to manage the source.
 */
export const MapSourceListModeCodings = {
    /**
     * first: Only process this rule for the first in the list.
     */
    First: new Coding({
        display: "First",
        code: "first",
        system: "http://hl7.org/fhir/map-source-list-mode",
    }),
    /**
     * last: Only process this rule for the last in the list.
     */
    Last: new Coding({
        display: "Last",
        code: "last",
        system: "http://hl7.org/fhir/map-source-list-mode",
    }),
    /**
     * not_first: Process this rule for all but the first.
     */
    AllButTheFirst: new Coding({
        display: "All but the first",
        code: "not_first",
        system: "http://hl7.org/fhir/map-source-list-mode",
    }),
    /**
     * not_last: Process this rule for all but the last.
     */
    AllButTheLast: new Coding({
        display: "All but the last",
        code: "not_last",
        system: "http://hl7.org/fhir/map-source-list-mode",
    }),
    /**
     * only_one: Only process this rule is there is only item.
     */
    EnforceOnlyOne: new Coding({
        display: "Enforce only one",
        code: "only_one",
        system: "http://hl7.org/fhir/map-source-list-mode",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwU291cmNlTGlzdE1vZGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NYXBTb3VyY2VMaXN0TW9kZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUVBQXlFO0FBRXpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsMENBQTBDO0tBQ25ELENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9tYXAtc291cmNlLWxpc3QtbW9kZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSWYgZmllbGQgaXMgYSBsaXN0LCBob3cgdG8gbWFuYWdlIHRoZSBzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWFwU291cmNlTGlzdE1vZGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGZpcnN0OiBPbmx5IHByb2Nlc3MgdGhpcyBydWxlIGZvciB0aGUgZmlyc3QgaW4gdGhlIGxpc3QuXHJcbiAgICovXHJcbiAgRmlyc3Q6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGaXJzdFwiLFxyXG4gICAgY29kZTogXCJmaXJzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLXNvdXJjZS1saXN0LW1vZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBsYXN0OiBPbmx5IHByb2Nlc3MgdGhpcyBydWxlIGZvciB0aGUgbGFzdCBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBMYXN0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTGFzdFwiLFxyXG4gICAgY29kZTogXCJsYXN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5vdF9maXJzdDogUHJvY2VzcyB0aGlzIHJ1bGUgZm9yIGFsbCBidXQgdGhlIGZpcnN0LlxyXG4gICAqL1xyXG4gIEFsbEJ1dFRoZUZpcnN0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWxsIGJ1dCB0aGUgZmlyc3RcIixcclxuICAgIGNvZGU6IFwibm90X2ZpcnN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5vdF9sYXN0OiBQcm9jZXNzIHRoaXMgcnVsZSBmb3IgYWxsIGJ1dCB0aGUgbGFzdC5cclxuICAgKi9cclxuICBBbGxCdXRUaGVMYXN0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWxsIGJ1dCB0aGUgbGFzdFwiLFxyXG4gICAgY29kZTogXCJub3RfbGFzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLXNvdXJjZS1saXN0LW1vZGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBvbmx5X29uZTogT25seSBwcm9jZXNzIHRoaXMgcnVsZSBpcyB0aGVyZSBpcyBvbmx5IGl0ZW0uXHJcbiAgICovXHJcbiAgRW5mb3JjZU9ubHlPbmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJFbmZvcmNlIG9ubHkgb25lXCIsXHJcbiAgICBjb2RlOiBcIm9ubHlfb25lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIElmIGZpZWxkIGlzIGEgbGlzdCwgaG93IHRvIG1hbmFnZSB0aGUgc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWFwU291cmNlTGlzdE1vZGVDb2RpbmdUeXBlID0gdHlwZW9mIE1hcFNvdXJjZUxpc3RNb2RlQ29kaW5ncztcclxuIl19