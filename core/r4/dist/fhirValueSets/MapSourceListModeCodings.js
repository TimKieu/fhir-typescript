// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/map-source-list-mode|4.0.1
/**
 * If field is a list, how to manage the source.
 */
export const MapSourceListModeCodings = {
    /**
     * first: Only process this rule for the first in the list.
     */
    First: {
        display: "First",
        code: "first",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * last: Only process this rule for the last in the list.
     */
    Last: {
        display: "Last",
        code: "last",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * not_first: Process this rule for all but the first.
     */
    AllButTheFirst: {
        display: "All but the first",
        code: "not_first",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * not_last: Process this rule for all but the last.
     */
    AllButTheLast: {
        display: "All but the last",
        code: "not_last",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
    /**
     * only_one: Only process this rule is there is only item.
     */
    EnforceOnlyOne: {
        display: "Enforce only one",
        code: "only_one",
        system: "http://hl7.org/fhir/map-source-list-mode",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwU291cmNlTGlzdE1vZGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NYXBTb3VyY2VMaXN0TW9kZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMseUVBQXlFO0FBOEJ6RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7SUFDRDs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDBDQUEwQztLQUNuRDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsMENBQTBDO0tBQ25EO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxVQUFVO1FBQ2hCLE1BQU0sRUFBRSwwQ0FBMEM7S0FDbkQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21hcC1zb3VyY2UtbGlzdC1tb2RlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogSWYgZmllbGQgaXMgYSBsaXN0LCBob3cgdG8gbWFuYWdlIHRoZSBzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNYXBTb3VyY2VMaXN0TW9kZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmlyc3Q6IE9ubHkgcHJvY2VzcyB0aGlzIHJ1bGUgZm9yIHRoZSBmaXJzdCBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBGaXJzdDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsYXN0OiBPbmx5IHByb2Nlc3MgdGhpcyBydWxlIGZvciB0aGUgbGFzdCBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBMYXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdF9maXJzdDogUHJvY2VzcyB0aGlzIHJ1bGUgZm9yIGFsbCBidXQgdGhlIGZpcnN0LlxyXG4gICAqL1xyXG4gIEFsbEJ1dFRoZUZpcnN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG5vdF9sYXN0OiBQcm9jZXNzIHRoaXMgcnVsZSBmb3IgYWxsIGJ1dCB0aGUgbGFzdC5cclxuICAgKi9cclxuICBBbGxCdXRUaGVMYXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIG9ubHlfb25lOiBPbmx5IHByb2Nlc3MgdGhpcyBydWxlIGlzIHRoZXJlIGlzIG9ubHkgaXRlbS5cclxuICAgKi9cclxuICBFbmZvcmNlT25seU9uZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIElmIGZpZWxkIGlzIGEgbGlzdCwgaG93IHRvIG1hbmFnZSB0aGUgc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1hcFNvdXJjZUxpc3RNb2RlQ29kaW5nczpNYXBTb3VyY2VMaXN0TW9kZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZmlyc3Q6IE9ubHkgcHJvY2VzcyB0aGlzIHJ1bGUgZm9yIHRoZSBmaXJzdCBpbiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBGaXJzdDoge1xyXG4gICAgZGlzcGxheTogXCJGaXJzdFwiLFxyXG4gICAgY29kZTogXCJmaXJzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLXNvdXJjZS1saXN0LW1vZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGxhc3Q6IE9ubHkgcHJvY2VzcyB0aGlzIHJ1bGUgZm9yIHRoZSBsYXN0IGluIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIExhc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiTGFzdFwiLFxyXG4gICAgY29kZTogXCJsYXN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90X2ZpcnN0OiBQcm9jZXNzIHRoaXMgcnVsZSBmb3IgYWxsIGJ1dCB0aGUgZmlyc3QuXHJcbiAgICovXHJcbiAgQWxsQnV0VGhlRmlyc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiQWxsIGJ1dCB0aGUgZmlyc3RcIixcclxuICAgIGNvZGU6IFwibm90X2ZpcnN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbm90X2xhc3Q6IFByb2Nlc3MgdGhpcyBydWxlIGZvciBhbGwgYnV0IHRoZSBsYXN0LlxyXG4gICAqL1xyXG4gIEFsbEJ1dFRoZUxhc3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiQWxsIGJ1dCB0aGUgbGFzdFwiLFxyXG4gICAgY29kZTogXCJub3RfbGFzdFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWFwLXNvdXJjZS1saXN0LW1vZGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG9ubHlfb25lOiBPbmx5IHByb2Nlc3MgdGhpcyBydWxlIGlzIHRoZXJlIGlzIG9ubHkgaXRlbS5cclxuICAgKi9cclxuICBFbmZvcmNlT25seU9uZToge1xyXG4gICAgZGlzcGxheTogXCJFbmZvcmNlIG9ubHkgb25lXCIsXHJcbiAgICBjb2RlOiBcIm9ubHlfb25lXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tYXAtc291cmNlLWxpc3QtbW9kZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==