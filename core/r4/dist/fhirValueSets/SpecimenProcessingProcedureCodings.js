// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/specimen-processing-procedure|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The technique that is used to perform the process or preserve the specimen.
 */
export const SpecimenProcessingProcedureCodings = {
    /**
     * Code: ACID
     */
    Acidification: new Coding({
        display: "Acidification",
        code: "ACID",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
    /**
     * Code: ALK
     */
    Alkalization: new Coding({
        display: "Alkalization",
        code: "ALK",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
    /**
     * Code: DEFB
     */
    Defibrination: new Coding({
        display: "Defibrination",
        code: "DEFB",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
    /**
     * Code: FILT
     */
    Filtration: new Coding({
        display: "Filtration",
        code: "FILT",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
    /**
     * Code: LDLP
     */
    LDLPrecipitation: new Coding({
        display: "LDL Precipitation",
        code: "LDLP",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
    /**
     * Code: NEUT
     */
    Neutralization: new Coding({
        display: "Neutralization",
        code: "NEUT",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
    /**
     * Code: RECA
     */
    Recalification: new Coding({
        display: "Recalification",
        code: "RECA",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
    /**
     * Code: UFIL
     */
    Ultrafiltration: new Coding({
        display: "Ultrafiltration",
        code: "UFIL",
        system: "http://terminology.hl7.org/CodeSystem/v2-0373",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BlY2ltZW5Qcm9jZXNzaW5nUHJvY2VkdXJlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU3BlY2ltZW5Qcm9jZXNzaW5nUHJvY2VkdXJlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrRkFBa0Y7QUFFbEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQUc7SUFDaEQ7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGVBQWU7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN2QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsYUFBYSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILGdCQUFnQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzNCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxjQUFjLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwrQ0FBK0M7S0FDeEQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsZUFBZSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NwZWNpbWVuLXByb2Nlc3NpbmctcHJvY2VkdXJlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdGVjaG5pcXVlIHRoYXQgaXMgdXNlZCB0byBwZXJmb3JtIHRoZSBwcm9jZXNzIG9yIHByZXNlcnZlIHRoZSBzcGVjaW1lbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTcGVjaW1lblByb2Nlc3NpbmdQcm9jZWR1cmVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIENvZGU6IEFDSURcclxuICAgKi9cclxuICBBY2lkaWZpY2F0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWNpZGlmaWNhdGlvblwiLFxyXG4gICAgY29kZTogXCJBQ0lEXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzczXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogQUxLXHJcbiAgICovXHJcbiAgQWxrYWxpemF0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWxrYWxpemF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIkFMS1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3M1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IERFRkJcclxuICAgKi9cclxuICBEZWZpYnJpbmF0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGVmaWJyaW5hdGlvblwiLFxyXG4gICAgY29kZTogXCJERUZCXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzczXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogRklMVFxyXG4gICAqL1xyXG4gIEZpbHRyYXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJGaWx0cmF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIkZJTFRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBMRExQXHJcbiAgICovXHJcbiAgTERMUHJlY2lwaXRhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxETCBQcmVjaXBpdGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcIkxETFBcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAzNzNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBORVVUXHJcbiAgICovXHJcbiAgTmV1dHJhbGl6YXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOZXV0cmFsaXphdGlvblwiLFxyXG4gICAgY29kZTogXCJORVVUXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMzczXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogUkVDQVxyXG4gICAqL1xyXG4gIFJlY2FsaWZpY2F0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUmVjYWxpZmljYXRpb25cIixcclxuICAgIGNvZGU6IFwiUkVDQVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3M1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IFVGSUxcclxuICAgKi9cclxuICBVbHRyYWZpbHRyYXRpb246IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJVbHRyYWZpbHRyYXRpb25cIixcclxuICAgIGNvZGU6IFwiVUZJTFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDM3M1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0ZWNobmlxdWUgdGhhdCBpcyB1c2VkIHRvIHBlcmZvcm0gdGhlIHByb2Nlc3Mgb3IgcHJlc2VydmUgdGhlIHNwZWNpbWVuLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3BlY2ltZW5Qcm9jZXNzaW5nUHJvY2VkdXJlQ29kaW5nVHlwZSA9IHR5cGVvZiBTcGVjaW1lblByb2Nlc3NpbmdQcm9jZWR1cmVDb2RpbmdzO1xyXG4iXX0=