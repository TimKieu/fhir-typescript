// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/subscription-channel-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The type of method used to execute a subscription.
 */
export const SubscriptionChannelTypeCodings = {
    /**
     * email: The channel is executed by sending an email to the email addressed in the URI (which must be a mailto:).
     */
    Email: new Coding({
        display: "Email",
        code: "email",
        system: "http://hl7.org/fhir/subscription-channel-type",
    }),
    /**
     * message: The channel is executed by sending a message (e.g. a Bundle with a MessageHeader resource etc.) to the application identified in the URI.
     */
    Message: new Coding({
        display: "Message",
        code: "message",
        system: "http://hl7.org/fhir/subscription-channel-type",
    }),
    /**
     * rest-hook: The channel is executed by making a post to the URI. If a payload is included, the URL is interpreted as the service base, and an update (PUT) is made.
     */
    RestHook: new Coding({
        display: "Rest Hook",
        code: "rest-hook",
        system: "http://hl7.org/fhir/subscription-channel-type",
    }),
    /**
     * sms: The channel is executed by sending an SMS message to the phone number identified in the URL (tel:).
     */
    SMS: new Coding({
        display: "SMS",
        code: "sms",
        system: "http://hl7.org/fhir/subscription-channel-type",
    }),
    /**
     * websocket: The channel is executed by sending a packet across a web socket connection maintained by the client. The URL identifies the websocket, and the client binds to this URL.
     */
    Websocket: new Coding({
        display: "Websocket",
        code: "websocket",
        system: "http://hl7.org/fhir/subscription-channel-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Vic2NyaXB0aW9uQ2hhbm5lbFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9TdWJzY3JpcHRpb25DaGFubmVsVHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEVBQThFO0FBRTlFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHO0lBQzVDOztPQUVHO0lBQ0gsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLCtDQUErQztLQUN4RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILEdBQUcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNkLE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsK0NBQStDO0tBQ3hELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3N1YnNjcmlwdGlvbi1jaGFubmVsLXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIG9mIG1ldGhvZCB1c2VkIHRvIGV4ZWN1dGUgYSBzdWJzY3JpcHRpb24uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU3Vic2NyaXB0aW9uQ2hhbm5lbFR5cGVDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGVtYWlsOiBUaGUgY2hhbm5lbCBpcyBleGVjdXRlZCBieSBzZW5kaW5nIGFuIGVtYWlsIHRvIHRoZSBlbWFpbCBhZGRyZXNzZWQgaW4gdGhlIFVSSSAod2hpY2ggbXVzdCBiZSBhIG1haWx0bzopLlxyXG4gICAqL1xyXG4gIEVtYWlsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRW1haWxcIixcclxuICAgIGNvZGU6IFwiZW1haWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3N1YnNjcmlwdGlvbi1jaGFubmVsLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBtZXNzYWdlOiBUaGUgY2hhbm5lbCBpcyBleGVjdXRlZCBieSBzZW5kaW5nIGEgbWVzc2FnZSAoZS5nLiBhIEJ1bmRsZSB3aXRoIGEgTWVzc2FnZUhlYWRlciByZXNvdXJjZSBldGMuKSB0byB0aGUgYXBwbGljYXRpb24gaWRlbnRpZmllZCBpbiB0aGUgVVJJLlxyXG4gICAqL1xyXG4gIE1lc3NhZ2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJNZXNzYWdlXCIsXHJcbiAgICBjb2RlOiBcIm1lc3NhZ2VcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3N1YnNjcmlwdGlvbi1jaGFubmVsLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiByZXN0LWhvb2s6IFRoZSBjaGFubmVsIGlzIGV4ZWN1dGVkIGJ5IG1ha2luZyBhIHBvc3QgdG8gdGhlIFVSSS4gSWYgYSBwYXlsb2FkIGlzIGluY2x1ZGVkLCB0aGUgVVJMIGlzIGludGVycHJldGVkIGFzIHRoZSBzZXJ2aWNlIGJhc2UsIGFuZCBhbiB1cGRhdGUgKFBVVCkgaXMgbWFkZS5cclxuICAgKi9cclxuICBSZXN0SG9vazogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlc3QgSG9va1wiLFxyXG4gICAgY29kZTogXCJyZXN0LWhvb2tcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3N1YnNjcmlwdGlvbi1jaGFubmVsLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzbXM6IFRoZSBjaGFubmVsIGlzIGV4ZWN1dGVkIGJ5IHNlbmRpbmcgYW4gU01TIG1lc3NhZ2UgdG8gdGhlIHBob25lIG51bWJlciBpZGVudGlmaWVkIGluIHRoZSBVUkwgKHRlbDopLlxyXG4gICAqL1xyXG4gIFNNUzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlNNU1wiLFxyXG4gICAgY29kZTogXCJzbXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3N1YnNjcmlwdGlvbi1jaGFubmVsLXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB3ZWJzb2NrZXQ6IFRoZSBjaGFubmVsIGlzIGV4ZWN1dGVkIGJ5IHNlbmRpbmcgYSBwYWNrZXQgYWNyb3NzIGEgd2ViIHNvY2tldCBjb25uZWN0aW9uIG1haW50YWluZWQgYnkgdGhlIGNsaWVudC4gVGhlIFVSTCBpZGVudGlmaWVzIHRoZSB3ZWJzb2NrZXQsIGFuZCB0aGUgY2xpZW50IGJpbmRzIHRvIHRoaXMgVVJMLlxyXG4gICAqL1xyXG4gIFdlYnNvY2tldDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIldlYnNvY2tldFwiLFxyXG4gICAgY29kZTogXCJ3ZWJzb2NrZXRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3N1YnNjcmlwdGlvbi1jaGFubmVsLXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiBtZXRob2QgdXNlZCB0byBleGVjdXRlIGEgc3Vic2NyaXB0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uQ2hhbm5lbFR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIFN1YnNjcmlwdGlvbkNoYW5uZWxUeXBlQ29kaW5ncztcclxuIl19