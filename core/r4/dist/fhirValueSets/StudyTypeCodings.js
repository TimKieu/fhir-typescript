// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/study-type|4.0.1
/**
 * Types of research studies (types of research methods).
 */
export const StudyTypeCodings = {
    /**
     * case-control: case-control study.
     */
    CaseControlStudy: {
        display: "case-control study",
        code: "case-control",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * case-report: a single case report.
     */
    CaseReport: {
        display: "case report",
        code: "case-report",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * CCT: controlled (but not randomized) trial.
     */
    ControlledTrialNonRandomized: {
        display: "controlled trial (non-randomized)",
        code: "CCT",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * cohort: observational study comparing cohorts.
     */
    ComparativeCohortStudy: {
        display: "comparative cohort study",
        code: "cohort",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * mixed: a combination of 1 or more types of studies.
     */
    MixedMethods: {
        display: "mixed methods",
        code: "mixed",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * RCT: randomized controlled trial.
     */
    RandomizedTrial: {
        display: "randomized trial",
        code: "RCT",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
    /**
     * series: uncontrolled cohort or case series.
     */
    UncontrolledCohortOrCaseSeries: {
        display: "uncontrolled cohort or case series",
        code: "series",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R1ZHlUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU3R1ZHlUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrREFBK0Q7QUFzQy9EOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQXVCO0lBQ2xEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0lBQ0Q7O09BRUc7SUFDSCw0QkFBNEIsRUFBRTtRQUM1QixPQUFPLEVBQUUsbUNBQW1DO1FBQzVDLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0Q7SUFDRDs7T0FFRztJQUNILDhCQUE4QixFQUFFO1FBQzlCLE9BQU8sRUFBRSxvQ0FBb0M7UUFDN0MsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsa0RBQWtEO0tBQzNEO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9zdHVkeS10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVHlwZXMgb2YgcmVzZWFyY2ggc3R1ZGllcyAodHlwZXMgb2YgcmVzZWFyY2ggbWV0aG9kcykuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTdHVkeVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhc2UtY29udHJvbDogY2FzZS1jb250cm9sIHN0dWR5LlxyXG4gICAqL1xyXG4gIENhc2VDb250cm9sU3R1ZHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2FzZS1yZXBvcnQ6IGEgc2luZ2xlIGNhc2UgcmVwb3J0LlxyXG4gICAqL1xyXG4gIENhc2VSZXBvcnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ0NUOiBjb250cm9sbGVkIChidXQgbm90IHJhbmRvbWl6ZWQpIHRyaWFsLlxyXG4gICAqL1xyXG4gIENvbnRyb2xsZWRUcmlhbE5vblJhbmRvbWl6ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29ob3J0OiBvYnNlcnZhdGlvbmFsIHN0dWR5IGNvbXBhcmluZyBjb2hvcnRzLlxyXG4gICAqL1xyXG4gIENvbXBhcmF0aXZlQ29ob3J0U3R1ZHk6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogbWl4ZWQ6IGEgY29tYmluYXRpb24gb2YgMSBvciBtb3JlIHR5cGVzIG9mIHN0dWRpZXMuXHJcbiAgICovXHJcbiAgTWl4ZWRNZXRob2RzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFJDVDogcmFuZG9taXplZCBjb250cm9sbGVkIHRyaWFsLlxyXG4gICAqL1xyXG4gIFJhbmRvbWl6ZWRUcmlhbDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzZXJpZXM6IHVuY29udHJvbGxlZCBjb2hvcnQgb3IgY2FzZSBzZXJpZXMuXHJcbiAgICovXHJcbiAgVW5jb250cm9sbGVkQ29ob3J0T3JDYXNlU2VyaWVzOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVHlwZXMgb2YgcmVzZWFyY2ggc3R1ZGllcyAodHlwZXMgb2YgcmVzZWFyY2ggbWV0aG9kcykuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU3R1ZHlUeXBlQ29kaW5nczpTdHVkeVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNhc2UtY29udHJvbDogY2FzZS1jb250cm9sIHN0dWR5LlxyXG4gICAqL1xyXG4gIENhc2VDb250cm9sU3R1ZHk6IHtcclxuICAgIGRpc3BsYXk6IFwiY2FzZS1jb250cm9sIHN0dWR5XCIsXHJcbiAgICBjb2RlOiBcImNhc2UtY29udHJvbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3R1ZHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY2FzZS1yZXBvcnQ6IGEgc2luZ2xlIGNhc2UgcmVwb3J0LlxyXG4gICAqL1xyXG4gIENhc2VSZXBvcnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiY2FzZSByZXBvcnRcIixcclxuICAgIGNvZGU6IFwiY2FzZS1yZXBvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIENDVDogY29udHJvbGxlZCAoYnV0IG5vdCByYW5kb21pemVkKSB0cmlhbC5cclxuICAgKi9cclxuICBDb250cm9sbGVkVHJpYWxOb25SYW5kb21pemVkOiB7XHJcbiAgICBkaXNwbGF5OiBcImNvbnRyb2xsZWQgdHJpYWwgKG5vbi1yYW5kb21pemVkKVwiLFxyXG4gICAgY29kZTogXCJDQ1RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvaG9ydDogb2JzZXJ2YXRpb25hbCBzdHVkeSBjb21wYXJpbmcgY29ob3J0cy5cclxuICAgKi9cclxuICBDb21wYXJhdGl2ZUNvaG9ydFN0dWR5OiB7XHJcbiAgICBkaXNwbGF5OiBcImNvbXBhcmF0aXZlIGNvaG9ydCBzdHVkeVwiLFxyXG4gICAgY29kZTogXCJjb2hvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIG1peGVkOiBhIGNvbWJpbmF0aW9uIG9mIDEgb3IgbW9yZSB0eXBlcyBvZiBzdHVkaWVzLlxyXG4gICAqL1xyXG4gIE1peGVkTWV0aG9kczoge1xyXG4gICAgZGlzcGxheTogXCJtaXhlZCBtZXRob2RzXCIsXHJcbiAgICBjb2RlOiBcIm1peGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdHVkeS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBSQ1Q6IHJhbmRvbWl6ZWQgY29udHJvbGxlZCB0cmlhbC5cclxuICAgKi9cclxuICBSYW5kb21pemVkVHJpYWw6IHtcclxuICAgIGRpc3BsYXk6IFwicmFuZG9taXplZCB0cmlhbFwiLFxyXG4gICAgY29kZTogXCJSQ1RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNlcmllczogdW5jb250cm9sbGVkIGNvaG9ydCBvciBjYXNlIHNlcmllcy5cclxuICAgKi9cclxuICBVbmNvbnRyb2xsZWRDb2hvcnRPckNhc2VTZXJpZXM6IHtcclxuICAgIGRpc3BsYXk6IFwidW5jb250cm9sbGVkIGNvaG9ydCBvciBjYXNlIHNlcmllc1wiLFxyXG4gICAgY29kZTogXCJzZXJpZXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=