// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/study-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Types of research studies (types of research methods).
 */
export const StudyTypeCodings = {
    /**
     * case-control: case-control study.
     */
    CaseControlStudy: new Coding({
        display: "case-control study",
        code: "case-control",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    }),
    /**
     * case-report: a single case report.
     */
    CaseReport: new Coding({
        display: "case report",
        code: "case-report",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    }),
    /**
     * CCT: controlled (but not randomized) trial.
     */
    ControlledTrialNonRandomized: new Coding({
        display: "controlled trial (non-randomized)",
        code: "CCT",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    }),
    /**
     * cohort: observational study comparing cohorts.
     */
    ComparativeCohortStudy: new Coding({
        display: "comparative cohort study",
        code: "cohort",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    }),
    /**
     * mixed: a combination of 1 or more types of studies.
     */
    MixedMethods: new Coding({
        display: "mixed methods",
        code: "mixed",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    }),
    /**
     * RCT: randomized controlled trial.
     */
    RandomizedTrial: new Coding({
        display: "randomized trial",
        code: "RCT",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    }),
    /**
     * series: uncontrolled cohort or case series.
     */
    UncontrolledCohortOrCaseSeries: new Coding({
        display: "uncontrolled cohort or case series",
        code: "series",
        system: "http://terminology.hl7.org/CodeSystem/study-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R1ZHlUeXBlQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvU3R1ZHlUeXBlQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrREFBK0Q7QUFFL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUc7SUFDOUI7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMzQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsNEJBQTRCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdkMsT0FBTyxFQUFFLG1DQUFtQztRQUM1QyxJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakMsT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLGtEQUFrRDtLQUMzRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxlQUFlLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDMUIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsOEJBQThCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekMsT0FBTyxFQUFFLG9DQUFvQztRQUM3QyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxrREFBa0Q7S0FDM0QsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvc3R1ZHktdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVHlwZXMgb2YgcmVzZWFyY2ggc3R1ZGllcyAodHlwZXMgb2YgcmVzZWFyY2ggbWV0aG9kcykuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU3R1ZHlUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBjYXNlLWNvbnRyb2w6IGNhc2UtY29udHJvbCBzdHVkeS5cclxuICAgKi9cclxuICBDYXNlQ29udHJvbFN0dWR5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiY2FzZS1jb250cm9sIHN0dWR5XCIsXHJcbiAgICBjb2RlOiBcImNhc2UtY29udHJvbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3R1ZHktdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNhc2UtcmVwb3J0OiBhIHNpbmdsZSBjYXNlIHJlcG9ydC5cclxuICAgKi9cclxuICBDYXNlUmVwb3J0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiY2FzZSByZXBvcnRcIixcclxuICAgIGNvZGU6IFwiY2FzZS1yZXBvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDQ1Q6IGNvbnRyb2xsZWQgKGJ1dCBub3QgcmFuZG9taXplZCkgdHJpYWwuXHJcbiAgICovXHJcbiAgQ29udHJvbGxlZFRyaWFsTm9uUmFuZG9taXplZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImNvbnRyb2xsZWQgdHJpYWwgKG5vbi1yYW5kb21pemVkKVwiLFxyXG4gICAgY29kZTogXCJDQ1RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjb2hvcnQ6IG9ic2VydmF0aW9uYWwgc3R1ZHkgY29tcGFyaW5nIGNvaG9ydHMuXHJcbiAgICovXHJcbiAgQ29tcGFyYXRpdmVDb2hvcnRTdHVkeTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcImNvbXBhcmF0aXZlIGNvaG9ydCBzdHVkeVwiLFxyXG4gICAgY29kZTogXCJjb2hvcnRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBtaXhlZDogYSBjb21iaW5hdGlvbiBvZiAxIG9yIG1vcmUgdHlwZXMgb2Ygc3R1ZGllcy5cclxuICAgKi9cclxuICBNaXhlZE1ldGhvZHM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJtaXhlZCBtZXRob2RzXCIsXHJcbiAgICBjb2RlOiBcIm1peGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdHVkeS10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogUkNUOiByYW5kb21pemVkIGNvbnRyb2xsZWQgdHJpYWwuXHJcbiAgICovXHJcbiAgUmFuZG9taXplZFRyaWFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwicmFuZG9taXplZCB0cmlhbFwiLFxyXG4gICAgY29kZTogXCJSQ1RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzZXJpZXM6IHVuY29udHJvbGxlZCBjb2hvcnQgb3IgY2FzZSBzZXJpZXMuXHJcbiAgICovXHJcbiAgVW5jb250cm9sbGVkQ29ob3J0T3JDYXNlU2VyaWVzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwidW5jb250cm9sbGVkIGNvaG9ydCBvciBjYXNlIHNlcmllc1wiLFxyXG4gICAgY29kZTogXCJzZXJpZXNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N0dWR5LXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUeXBlcyBvZiByZXNlYXJjaCBzdHVkaWVzICh0eXBlcyBvZiByZXNlYXJjaCBtZXRob2RzKS5cclxuICovXHJcbmV4cG9ydCB0eXBlIFN0dWR5VHlwZUNvZGluZ1R5cGUgPSB0eXBlb2YgU3R1ZHlUeXBlQ29kaW5ncztcclxuIl19