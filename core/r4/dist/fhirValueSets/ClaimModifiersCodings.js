// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/claim-modifiers|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set includes sample Modifier type codes.
 */
export const ClaimModifiersCodings = {
    /**
     * a: Repair of prior service or installation.
     */
    RepairOfPriorServiceOrInstallation: new Coding({
        display: "Repair of prior service or installation",
        code: "a",
        system: "http://terminology.hl7.org/CodeSystem/modifiers",
    }),
    /**
     * b: Temporary service or installation.
     */
    TemporaryServiceOrInstallation: new Coding({
        display: "Temporary service or installation",
        code: "b",
        system: "http://terminology.hl7.org/CodeSystem/modifiers",
    }),
    /**
     * c: Treatment associated with TMJ.
     */
    TMJTreatment: new Coding({
        display: "TMJ treatment",
        code: "c",
        system: "http://terminology.hl7.org/CodeSystem/modifiers",
    }),
    /**
     * e: Implant or associated with an implant.
     */
    ImplantOrAssociatedWithAnImplant: new Coding({
        display: "Implant or associated with an implant",
        code: "e",
        system: "http://terminology.hl7.org/CodeSystem/modifiers",
    }),
    /**
     * rooh: A Rush service or service performed outside of normal office hours.
     */
    RushOrOutsideOfOfficeHours: new Coding({
        display: "Rush or Outside of office hours",
        code: "rooh",
        system: "http://terminology.hl7.org/CodeSystem/modifiers",
    }),
    /**
     * x: None.
     */
    None: new Coding({
        display: "None",
        code: "x",
        system: "http://terminology.hl7.org/CodeSystem/modifiers",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhaW1Nb2RpZmllcnNDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9DbGFpbU1vZGlmaWVyc0NvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0VBQW9FO0FBRXBFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ25DOztPQUVHO0lBQ0gsa0NBQWtDLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDN0MsT0FBTyxFQUFFLHlDQUF5QztRQUNsRCxJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxpREFBaUQ7S0FDMUQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsOEJBQThCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDekMsT0FBTyxFQUFFLG1DQUFtQztRQUM1QyxJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxpREFBaUQ7S0FDMUQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsWUFBWSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLGlEQUFpRDtLQUMxRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxnQ0FBZ0MsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMzQyxPQUFPLEVBQUUsdUNBQXVDO1FBQ2hELElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLGlEQUFpRDtLQUMxRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCwwQkFBMEIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQyxPQUFPLEVBQUUsaUNBQWlDO1FBQzFDLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLGlEQUFpRDtLQUMxRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDZixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLGlEQUFpRDtLQUMxRCxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jbGFpbS1tb2RpZmllcnN8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIHNhbXBsZSBNb2RpZmllciB0eXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENsYWltTW9kaWZpZXJzQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBhOiBSZXBhaXIgb2YgcHJpb3Igc2VydmljZSBvciBpbnN0YWxsYXRpb24uXHJcbiAgICovXHJcbiAgUmVwYWlyT2ZQcmlvclNlcnZpY2VPckluc3RhbGxhdGlvbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlcGFpciBvZiBwcmlvciBzZXJ2aWNlIG9yIGluc3RhbGxhdGlvblwiLFxyXG4gICAgY29kZTogXCJhXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tb2RpZmllcnNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBiOiBUZW1wb3Jhcnkgc2VydmljZSBvciBpbnN0YWxsYXRpb24uXHJcbiAgICovXHJcbiAgVGVtcG9yYXJ5U2VydmljZU9ySW5zdGFsbGF0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVGVtcG9yYXJ5IHNlcnZpY2Ugb3IgaW5zdGFsbGF0aW9uXCIsXHJcbiAgICBjb2RlOiBcImJcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21vZGlmaWVyc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGM6IFRyZWF0bWVudCBhc3NvY2lhdGVkIHdpdGggVE1KLlxyXG4gICAqL1xyXG4gIFRNSlRyZWF0bWVudDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlRNSiB0cmVhdG1lbnRcIixcclxuICAgIGNvZGU6IFwiY1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbW9kaWZpZXJzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogZTogSW1wbGFudCBvciBhc3NvY2lhdGVkIHdpdGggYW4gaW1wbGFudC5cclxuICAgKi9cclxuICBJbXBsYW50T3JBc3NvY2lhdGVkV2l0aEFuSW1wbGFudDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkltcGxhbnQgb3IgYXNzb2NpYXRlZCB3aXRoIGFuIGltcGxhbnRcIixcclxuICAgIGNvZGU6IFwiZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbW9kaWZpZXJzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcm9vaDogQSBSdXNoIHNlcnZpY2Ugb3Igc2VydmljZSBwZXJmb3JtZWQgb3V0c2lkZSBvZiBub3JtYWwgb2ZmaWNlIGhvdXJzLlxyXG4gICAqL1xyXG4gIFJ1c2hPck91dHNpZGVPZk9mZmljZUhvdXJzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiUnVzaCBvciBPdXRzaWRlIG9mIG9mZmljZSBob3Vyc1wiLFxyXG4gICAgY29kZTogXCJyb29oXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9tb2RpZmllcnNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB4OiBOb25lLlxyXG4gICAqL1xyXG4gIE5vbmU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJOb25lXCIsXHJcbiAgICBjb2RlOiBcInhcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL21vZGlmaWVyc1wiLFxyXG4gIH0pLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIHNhbXBsZSBNb2RpZmllciB0eXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2xhaW1Nb2RpZmllcnNDb2RpbmdUeXBlID0gdHlwZW9mIENsYWltTW9kaWZpZXJzQ29kaW5ncztcclxuIl19