// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/contactentity-type|4.0.1
/**
 * This example value set defines a set of codes that can be used to indicate the purpose for which you would contact a contact party.
 */
export const ContactentityTypeCodings = {
    /**
     * ADMIN: Contact details for administrative enquiries.
     */
    Administrative: {
        display: "Administrative",
        code: "ADMIN",
        system: "http://terminology.hl7.org/CodeSystem/contactentity-type",
    },
    /**
     * BILL: Contact details for information regarding to billing/general finance enquiries.
     */
    Billing: {
        display: "Billing",
        code: "BILL",
        system: "http://terminology.hl7.org/CodeSystem/contactentity-type",
    },
    /**
     * HR: Contact details for issues related to Human Resources, such as staff matters, OH&amp;S etc.
     */
    HumanResource: {
        display: "Human Resource",
        code: "HR",
        system: "http://terminology.hl7.org/CodeSystem/contactentity-type",
    },
    /**
     * PATINF: Generic information contact for patients.
     */
    Patient: {
        display: "Patient",
        code: "PATINF",
        system: "http://terminology.hl7.org/CodeSystem/contactentity-type",
    },
    /**
     * PAYOR: Contact details for dealing with issues related to insurance claims/adjudication/payment.
     */
    Payor: {
        display: "Payor",
        code: "PAYOR",
        system: "http://terminology.hl7.org/CodeSystem/contactentity-type",
    },
    /**
     * PRESS: Dedicated contact point for matters relating to press enquiries.
     */
    Press: {
        display: "Press",
        code: "PRESS",
        system: "http://terminology.hl7.org/CodeSystem/contactentity-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdGVudGl0eVR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9Db250YWN0ZW50aXR5VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUVBQXVFO0FBa0N2RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkU7SUFDRDs7T0FFRztJQUNILGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSwwREFBMEQ7S0FDbkU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDBEQUEwRDtLQUNuRTtJQUNEOztPQUVHO0lBQ0gsS0FBSyxFQUFFO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsMERBQTBEO0tBQ25FO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb250YWN0ZW50aXR5LXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGV4YW1wbGUgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSB0aGUgcHVycG9zZSBmb3Igd2hpY2ggeW91IHdvdWxkIGNvbnRhY3QgYSBjb250YWN0IHBhcnR5LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29udGFjdGVudGl0eVR5cGVDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIEFETUlOOiBDb250YWN0IGRldGFpbHMgZm9yIGFkbWluaXN0cmF0aXZlIGVucXVpcmllcy5cclxuICAgKi9cclxuICBBZG1pbmlzdHJhdGl2ZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBCSUxMOiBDb250YWN0IGRldGFpbHMgZm9yIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0byBiaWxsaW5nL2dlbmVyYWwgZmluYW5jZSBlbnF1aXJpZXMuXHJcbiAgICovXHJcbiAgQmlsbGluZzogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBIUjogQ29udGFjdCBkZXRhaWxzIGZvciBpc3N1ZXMgcmVsYXRlZCB0byBIdW1hbiBSZXNvdXJjZXMsIHN1Y2ggYXMgc3RhZmYgbWF0dGVycywgT0gmYW1wO1MgZXRjLlxyXG4gICAqL1xyXG4gIEh1bWFuUmVzb3VyY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUEFUSU5GOiBHZW5lcmljIGluZm9ybWF0aW9uIGNvbnRhY3QgZm9yIHBhdGllbnRzLlxyXG4gICAqL1xyXG4gIFBhdGllbnQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUEFZT1I6IENvbnRhY3QgZGV0YWlscyBmb3IgZGVhbGluZyB3aXRoIGlzc3VlcyByZWxhdGVkIHRvIGluc3VyYW5jZSBjbGFpbXMvYWRqdWRpY2F0aW9uL3BheW1lbnQuXHJcbiAgICovXHJcbiAgUGF5b3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogUFJFU1M6IERlZGljYXRlZCBjb250YWN0IHBvaW50IGZvciBtYXR0ZXJzIHJlbGF0aW5nIHRvIHByZXNzIGVucXVpcmllcy5cclxuICAgKi9cclxuICBQcmVzczogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZXhhbXBsZSB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHRoZSBwdXJwb3NlIGZvciB3aGljaCB5b3Ugd291bGQgY29udGFjdCBhIGNvbnRhY3QgcGFydHkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29udGFjdGVudGl0eVR5cGVDb2RpbmdzOkNvbnRhY3RlbnRpdHlUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBBRE1JTjogQ29udGFjdCBkZXRhaWxzIGZvciBhZG1pbmlzdHJhdGl2ZSBlbnF1aXJpZXMuXHJcbiAgICovXHJcbiAgQWRtaW5pc3RyYXRpdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiQWRtaW5pc3RyYXRpdmVcIixcclxuICAgIGNvZGU6IFwiQURNSU5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbnRhY3RlbnRpdHktdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogQklMTDogQ29udGFjdCBkZXRhaWxzIGZvciBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdG8gYmlsbGluZy9nZW5lcmFsIGZpbmFuY2UgZW5xdWlyaWVzLlxyXG4gICAqL1xyXG4gIEJpbGxpbmc6IHtcclxuICAgIGRpc3BsYXk6IFwiQmlsbGluZ1wiLFxyXG4gICAgY29kZTogXCJCSUxMXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWN0ZW50aXR5LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIEhSOiBDb250YWN0IGRldGFpbHMgZm9yIGlzc3VlcyByZWxhdGVkIHRvIEh1bWFuIFJlc291cmNlcywgc3VjaCBhcyBzdGFmZiBtYXR0ZXJzLCBPSCZhbXA7UyBldGMuXHJcbiAgICovXHJcbiAgSHVtYW5SZXNvdXJjZToge1xyXG4gICAgZGlzcGxheTogXCJIdW1hbiBSZXNvdXJjZVwiLFxyXG4gICAgY29kZTogXCJIUlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFjdGVudGl0eS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQQVRJTkY6IEdlbmVyaWMgaW5mb3JtYXRpb24gY29udGFjdCBmb3IgcGF0aWVudHMuXHJcbiAgICovXHJcbiAgUGF0aWVudDoge1xyXG4gICAgZGlzcGxheTogXCJQYXRpZW50XCIsXHJcbiAgICBjb2RlOiBcIlBBVElORlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFjdGVudGl0eS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQQVlPUjogQ29udGFjdCBkZXRhaWxzIGZvciBkZWFsaW5nIHdpdGggaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdXJhbmNlIGNsYWltcy9hZGp1ZGljYXRpb24vcGF5bWVudC5cclxuICAgKi9cclxuICBQYXlvcjoge1xyXG4gICAgZGlzcGxheTogXCJQYXlvclwiLFxyXG4gICAgY29kZTogXCJQQVlPUlwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29udGFjdGVudGl0eS10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBQUkVTUzogRGVkaWNhdGVkIGNvbnRhY3QgcG9pbnQgZm9yIG1hdHRlcnMgcmVsYXRpbmcgdG8gcHJlc3MgZW5xdWlyaWVzLlxyXG4gICAqL1xyXG4gIFByZXNzOiB7XHJcbiAgICBkaXNwbGF5OiBcIlByZXNzXCIsXHJcbiAgICBjb2RlOiBcIlBSRVNTXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb250YWN0ZW50aXR5LXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=