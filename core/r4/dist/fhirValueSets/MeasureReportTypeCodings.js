// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measure-report-type|4.0.1
/**
 * The type of the measure report.
 */
export const MeasureReportTypeCodings = {
    /**
     * data-collection: A data collection report that contains data-of-interest for the measure.
     */
    DataCollection: {
        display: "Data Collection",
        code: "data-collection",
        system: "http://hl7.org/fhir/measure-report-type",
    },
    /**
     * individual: An individual report that provides information on the performance for a given measure with respect to a single subject.
     */
    Individual: {
        display: "Individual",
        code: "individual",
        system: "http://hl7.org/fhir/measure-report-type",
    },
    /**
     * subject-list: A subject list report that includes a listing of subjects that satisfied each population criteria in the measure.
     */
    SubjectList: {
        display: "Subject List",
        code: "subject-list",
        system: "http://hl7.org/fhir/measure-report-type",
    },
    /**
     * summary: A summary report that returns the number of members in each population criteria for the measure.
     */
    Summary: {
        display: "Summary",
        code: "summary",
        system: "http://hl7.org/fhir/measure-report-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZVJlcG9ydFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWFzdXJlUmVwb3J0VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBMEJ4RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUErQjtJQUNsRTs7T0FFRztJQUNILGNBQWMsRUFBRTtRQUNkLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xEO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQ7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21lYXN1cmUtcmVwb3J0LXR5cGV8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiB0aGUgbWVhc3VyZSByZXBvcnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBNZWFzdXJlUmVwb3J0VHlwZUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogZGF0YS1jb2xsZWN0aW9uOiBBIGRhdGEgY29sbGVjdGlvbiByZXBvcnQgdGhhdCBjb250YWlucyBkYXRhLW9mLWludGVyZXN0IGZvciB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBEYXRhQ29sbGVjdGlvbjogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBpbmRpdmlkdWFsOiBBbiBpbmRpdmlkdWFsIHJlcG9ydCB0aGF0IHByb3ZpZGVzIGluZm9ybWF0aW9uIG9uIHRoZSBwZXJmb3JtYW5jZSBmb3IgYSBnaXZlbiBtZWFzdXJlIHdpdGggcmVzcGVjdCB0byBhIHNpbmdsZSBzdWJqZWN0LlxyXG4gICAqL1xyXG4gIEluZGl2aWR1YWw6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3ViamVjdC1saXN0OiBBIHN1YmplY3QgbGlzdCByZXBvcnQgdGhhdCBpbmNsdWRlcyBhIGxpc3Rpbmcgb2Ygc3ViamVjdHMgdGhhdCBzYXRpc2ZpZWQgZWFjaCBwb3B1bGF0aW9uIGNyaXRlcmlhIGluIHRoZSBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIFN1YmplY3RMaXN0OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHN1bW1hcnk6IEEgc3VtbWFyeSByZXBvcnQgdGhhdCByZXR1cm5zIHRoZSBudW1iZXIgb2YgbWVtYmVycyBpbiBlYWNoIHBvcHVsYXRpb24gY3JpdGVyaWEgZm9yIHRoZSBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIFN1bW1hcnk6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiB0aGUgbWVhc3VyZSByZXBvcnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWVhc3VyZVJlcG9ydFR5cGVDb2RpbmdzOk1lYXN1cmVSZXBvcnRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBkYXRhLWNvbGxlY3Rpb246IEEgZGF0YSBjb2xsZWN0aW9uIHJlcG9ydCB0aGF0IGNvbnRhaW5zIGRhdGEtb2YtaW50ZXJlc3QgZm9yIHRoZSBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIERhdGFDb2xsZWN0aW9uOiB7XHJcbiAgICBkaXNwbGF5OiBcIkRhdGEgQ29sbGVjdGlvblwiLFxyXG4gICAgY29kZTogXCJkYXRhLWNvbGxlY3Rpb25cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmUtcmVwb3J0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluZGl2aWR1YWw6IEFuIGluZGl2aWR1YWwgcmVwb3J0IHRoYXQgcHJvdmlkZXMgaW5mb3JtYXRpb24gb24gdGhlIHBlcmZvcm1hbmNlIGZvciBhIGdpdmVuIG1lYXN1cmUgd2l0aCByZXNwZWN0IHRvIGEgc2luZ2xlIHN1YmplY3QuXHJcbiAgICovXHJcbiAgSW5kaXZpZHVhbDoge1xyXG4gICAgZGlzcGxheTogXCJJbmRpdmlkdWFsXCIsXHJcbiAgICBjb2RlOiBcImluZGl2aWR1YWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmUtcmVwb3J0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN1YmplY3QtbGlzdDogQSBzdWJqZWN0IGxpc3QgcmVwb3J0IHRoYXQgaW5jbHVkZXMgYSBsaXN0aW5nIG9mIHN1YmplY3RzIHRoYXQgc2F0aXNmaWVkIGVhY2ggcG9wdWxhdGlvbiBjcml0ZXJpYSBpbiB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBTdWJqZWN0TGlzdDoge1xyXG4gICAgZGlzcGxheTogXCJTdWJqZWN0IExpc3RcIixcclxuICAgIGNvZGU6IFwic3ViamVjdC1saXN0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWFzdXJlLXJlcG9ydC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBzdW1tYXJ5OiBBIHN1bW1hcnkgcmVwb3J0IHRoYXQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIG1lbWJlcnMgaW4gZWFjaCBwb3B1bGF0aW9uIGNyaXRlcmlhIGZvciB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBTdW1tYXJ5OiB7XHJcbiAgICBkaXNwbGF5OiBcIlN1bW1hcnlcIixcclxuICAgIGNvZGU6IFwic3VtbWFyeVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZS1yZXBvcnQtdHlwZVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==