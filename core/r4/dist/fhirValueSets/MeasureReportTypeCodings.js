// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/measure-report-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * The type of the measure report.
 */
export const MeasureReportTypeCodings = {
    /**
     * data-collection: A data collection report that contains data-of-interest for the measure.
     */
    DataCollection: new Coding({
        display: "Data Collection",
        code: "data-collection",
        system: "http://hl7.org/fhir/measure-report-type",
    }),
    /**
     * individual: An individual report that provides information on the performance for a given measure with respect to a single subject.
     */
    Individual: new Coding({
        display: "Individual",
        code: "individual",
        system: "http://hl7.org/fhir/measure-report-type",
    }),
    /**
     * subject-list: A subject list report that includes a listing of subjects that satisfied each population criteria in the measure.
     */
    SubjectList: new Coding({
        display: "Subject List",
        code: "subject-list",
        system: "http://hl7.org/fhir/measure-report-type",
    }),
    /**
     * summary: A summary report that returns the number of members in each population criteria for the measure.
     */
    Summary: new Coding({
        display: "Summary",
        code: "summary",
        system: "http://hl7.org/fhir/measure-report-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVhc3VyZVJlcG9ydFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9NZWFzdXJlUmVwb3J0VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsd0VBQXdFO0FBRXhFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN0QixPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUseUNBQXlDO0tBQ2xELENBQUM7SUFDRjs7T0FFRztJQUNILE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSx5Q0FBeUM7S0FDbEQsQ0FBQztDQUNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWVhc3VyZS1yZXBvcnQtdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdGhlIG1lYXN1cmUgcmVwb3J0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lYXN1cmVSZXBvcnRUeXBlQ29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBkYXRhLWNvbGxlY3Rpb246IEEgZGF0YSBjb2xsZWN0aW9uIHJlcG9ydCB0aGF0IGNvbnRhaW5zIGRhdGEtb2YtaW50ZXJlc3QgZm9yIHRoZSBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIERhdGFDb2xsZWN0aW9uOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiRGF0YSBDb2xsZWN0aW9uXCIsXHJcbiAgICBjb2RlOiBcImRhdGEtY29sbGVjdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZS1yZXBvcnQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGluZGl2aWR1YWw6IEFuIGluZGl2aWR1YWwgcmVwb3J0IHRoYXQgcHJvdmlkZXMgaW5mb3JtYXRpb24gb24gdGhlIHBlcmZvcm1hbmNlIGZvciBhIGdpdmVuIG1lYXN1cmUgd2l0aCByZXNwZWN0IHRvIGEgc2luZ2xlIHN1YmplY3QuXHJcbiAgICovXHJcbiAgSW5kaXZpZHVhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkluZGl2aWR1YWxcIixcclxuICAgIGNvZGU6IFwiaW5kaXZpZHVhbFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvbWVhc3VyZS1yZXBvcnQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHN1YmplY3QtbGlzdDogQSBzdWJqZWN0IGxpc3QgcmVwb3J0IHRoYXQgaW5jbHVkZXMgYSBsaXN0aW5nIG9mIHN1YmplY3RzIHRoYXQgc2F0aXNmaWVkIGVhY2ggcG9wdWxhdGlvbiBjcml0ZXJpYSBpbiB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBTdWJqZWN0TGlzdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlN1YmplY3QgTGlzdFwiLFxyXG4gICAgY29kZTogXCJzdWJqZWN0LWxpc3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL21lYXN1cmUtcmVwb3J0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBzdW1tYXJ5OiBBIHN1bW1hcnkgcmVwb3J0IHRoYXQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIG1lbWJlcnMgaW4gZWFjaCBwb3B1bGF0aW9uIGNyaXRlcmlhIGZvciB0aGUgbWVhc3VyZS5cclxuICAgKi9cclxuICBTdW1tYXJ5OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiU3VtbWFyeVwiLFxyXG4gICAgY29kZTogXCJzdW1tYXJ5XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9tZWFzdXJlLXJlcG9ydC10eXBlXCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhlIHR5cGUgb2YgdGhlIG1lYXN1cmUgcmVwb3J0LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTWVhc3VyZVJlcG9ydFR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIE1lYXN1cmVSZXBvcnRUeXBlQ29kaW5ncztcclxuIl19