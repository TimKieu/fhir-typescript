// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/coverage-copay-type|4.0.1
/**
 * This value set includes sample Coverage Copayment Type codes.
 */
export const CoverageCopayTypeCodes = {
    /**
     * copay: A standard fixed currency amount applied to all classes or service or product not otherwise specified.
     */
    CopayAmount: "copay",
    /**
     * copaypct: A standard percentage applied to all classes or service or product not otherwise specified.
     */
    CopayPercentage: "copaypct",
    /**
     * deductible: The accumulated amount of patient payment before the coverage begins to pay for services.
     */
    Deductible: "deductible",
    /**
     * emergency: An episode in an emergency department.
     */
    Emergency: "emergency",
    /**
     * gpvisit: An office visit for a general practitioner of a discipline.
     */
    GPOfficeVisit: "gpvisit",
    /**
     * inpthosp: An episode of an Inpatient hospital stay.
     */
    InpatientHospital: "inpthosp",
    /**
     * maxoutofpocket: The maximum amout of payment for services which a patient, or family, is expected to incur - typically annually.
     */
    MaximumOutOfPocket: "maxoutofpocket",
    /**
     * spvisit: An office visit for a specialist practitioner of a discipline
     */
    SpecialistOfficeVisit: "spvisit",
    /**
     * televisit: A visit held where the patient is remote relative to the practitioner, e.g. by phone, computer or video conference.
     */
    TeleVisit: "televisit",
    /**
     * urgentcare: A visit to an urgent care facility - typically a community care clinic.
     */
    UrgentCare: "urgentcare",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ292ZXJhZ2VDb3BheVR5cGVDb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvQ292ZXJhZ2VDb3BheVR5cGVDb2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx3RUFBd0U7QUFFeEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRztJQUNwQzs7T0FFRztJQUNILFdBQVcsRUFBRSxPQUFPO0lBQ3BCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLFVBQVU7SUFDM0I7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtJQUN4Qjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsYUFBYSxFQUFFLFNBQVM7SUFDeEI7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxVQUFVO0lBQzdCOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsZ0JBQWdCO0lBQ3BDOztPQUVHO0lBQ0gscUJBQXFCLEVBQUUsU0FBUztJQUNoQzs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsVUFBVSxFQUFFLFlBQVk7Q0FDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb3ZlcmFnZS1jb3BheS10eXBlfDQuMC4xXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgc2FtcGxlIENvdmVyYWdlIENvcGF5bWVudCBUeXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvdmVyYWdlQ29wYXlUeXBlQ29kZXMgPSB7XHJcbiAgLyoqXHJcbiAgICogY29wYXk6IEEgc3RhbmRhcmQgZml4ZWQgY3VycmVuY3kgYW1vdW50IGFwcGxpZWQgdG8gYWxsIGNsYXNzZXMgb3Igc2VydmljZSBvciBwcm9kdWN0IG5vdCBvdGhlcndpc2Ugc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIENvcGF5QW1vdW50OiBcImNvcGF5XCIsXHJcbiAgLyoqXHJcbiAgICogY29wYXlwY3Q6IEEgc3RhbmRhcmQgcGVyY2VudGFnZSBhcHBsaWVkIHRvIGFsbCBjbGFzc2VzIG9yIHNlcnZpY2Ugb3IgcHJvZHVjdCBub3Qgb3RoZXJ3aXNlIHNwZWNpZmllZC5cclxuICAgKi9cclxuICBDb3BheVBlcmNlbnRhZ2U6IFwiY29wYXlwY3RcIixcclxuICAvKipcclxuICAgKiBkZWR1Y3RpYmxlOiBUaGUgYWNjdW11bGF0ZWQgYW1vdW50IG9mIHBhdGllbnQgcGF5bWVudCBiZWZvcmUgdGhlIGNvdmVyYWdlIGJlZ2lucyB0byBwYXkgZm9yIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIERlZHVjdGlibGU6IFwiZGVkdWN0aWJsZVwiLFxyXG4gIC8qKlxyXG4gICAqIGVtZXJnZW5jeTogQW4gZXBpc29kZSBpbiBhbiBlbWVyZ2VuY3kgZGVwYXJ0bWVudC5cclxuICAgKi9cclxuICBFbWVyZ2VuY3k6IFwiZW1lcmdlbmN5XCIsXHJcbiAgLyoqXHJcbiAgICogZ3B2aXNpdDogQW4gb2ZmaWNlIHZpc2l0IGZvciBhIGdlbmVyYWwgcHJhY3RpdGlvbmVyIG9mIGEgZGlzY2lwbGluZS5cclxuICAgKi9cclxuICBHUE9mZmljZVZpc2l0OiBcImdwdmlzaXRcIixcclxuICAvKipcclxuICAgKiBpbnB0aG9zcDogQW4gZXBpc29kZSBvZiBhbiBJbnBhdGllbnQgaG9zcGl0YWwgc3RheS5cclxuICAgKi9cclxuICBJbnBhdGllbnRIb3NwaXRhbDogXCJpbnB0aG9zcFwiLFxyXG4gIC8qKlxyXG4gICAqIG1heG91dG9mcG9ja2V0OiBUaGUgbWF4aW11bSBhbW91dCBvZiBwYXltZW50IGZvciBzZXJ2aWNlcyB3aGljaCBhIHBhdGllbnQsIG9yIGZhbWlseSwgaXMgZXhwZWN0ZWQgdG8gaW5jdXIgLSB0eXBpY2FsbHkgYW5udWFsbHkuXHJcbiAgICovXHJcbiAgTWF4aW11bU91dE9mUG9ja2V0OiBcIm1heG91dG9mcG9ja2V0XCIsXHJcbiAgLyoqXHJcbiAgICogc3B2aXNpdDogQW4gb2ZmaWNlIHZpc2l0IGZvciBhIHNwZWNpYWxpc3QgcHJhY3RpdGlvbmVyIG9mIGEgZGlzY2lwbGluZVxyXG4gICAqL1xyXG4gIFNwZWNpYWxpc3RPZmZpY2VWaXNpdDogXCJzcHZpc2l0XCIsXHJcbiAgLyoqXHJcbiAgICogdGVsZXZpc2l0OiBBIHZpc2l0IGhlbGQgd2hlcmUgdGhlIHBhdGllbnQgaXMgcmVtb3RlIHJlbGF0aXZlIHRvIHRoZSBwcmFjdGl0aW9uZXIsIGUuZy4gYnkgcGhvbmUsIGNvbXB1dGVyIG9yIHZpZGVvIGNvbmZlcmVuY2UuXHJcbiAgICovXHJcbiAgVGVsZVZpc2l0OiBcInRlbGV2aXNpdFwiLFxyXG4gIC8qKlxyXG4gICAqIHVyZ2VudGNhcmU6IEEgdmlzaXQgdG8gYW4gdXJnZW50IGNhcmUgZmFjaWxpdHkgLSB0eXBpY2FsbHkgYSBjb21tdW5pdHkgY2FyZSBjbGluaWMuXHJcbiAgICovXHJcbiAgVXJnZW50Q2FyZTogXCJ1cmdlbnRjYXJlXCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgc2FtcGxlIENvdmVyYWdlIENvcGF5bWVudCBUeXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ292ZXJhZ2VDb3BheVR5cGVDb2RlVHlwZSA9IHR5cGVvZiBDb3ZlcmFnZUNvcGF5VHlwZUNvZGVzW2tleW9mIHR5cGVvZiBDb3ZlcmFnZUNvcGF5VHlwZUNvZGVzXTtcclxuIl19