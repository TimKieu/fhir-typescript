{"version":3,"file":"TypeDerivationRuleCodings.js","sources":["../../src/fhirValueSets/TypeDerivationRuleCodings.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ValueSet: http://hl7.org/fhir/ValueSet/type-derivation-rule|4.0.1\r\n\r\nimport { Coding } from '../fhir/Coding.js'\r\n\r\n/**\r\n * How a type relates to its baseDefinition.\r\n */\r\nexport const TypeDerivationRuleCodings = {\r\n  /**\r\n   * constraint: This definition adds additional rules to an existing concrete type.\r\n   */\r\n  Constraint: new Coding({\r\n    display: \"Constraint\",\r\n    code: \"constraint\",\r\n    system: \"http://hl7.org/fhir/type-derivation-rule\",\r\n  }),\r\n  /**\r\n   * specialization: This definition defines a new type that adds additional elements to the base type.\r\n   */\r\n  Specialization: new Coding({\r\n    display: \"Specialization\",\r\n    code: \"specialization\",\r\n    system: \"http://hl7.org/fhir/type-derivation-rule\",\r\n  }),\r\n} as const;\r\n\r\n/**\r\n * How a type relates to its baseDefinition.\r\n */\r\nexport type TypeDerivationRuleCodingType = typeof TypeDerivationRuleCodings;\r\n"],"names":[],"mappings":";;;;AAAA;AAOA;;AAEG;AACU,IAAA,yBAAyB,GAAG;AACvC;;AAEG;IACH,UAAU,EAAE,IAAI,MAAM,CAAC;AACrB,QAAA,OAAO,EAAE,YAAY;AACrB,QAAA,IAAI,EAAE,YAAY;AAClB,QAAA,MAAM,EAAE,0CAA0C;KACnD,CAAC;AACF;;AAEG;IACH,cAAc,EAAE,IAAI,MAAM,CAAC;AACzB,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,IAAI,EAAE,gBAAgB;AACtB,QAAA,MAAM,EAAE,0CAA0C;KACnD,CAAC;;;;;"}