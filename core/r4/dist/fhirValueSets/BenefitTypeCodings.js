// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/benefit-type|4.0.1
/**
 * This value set includes a smattering of Benefit type codes.
 */
export const BenefitTypeCodings = {
    /**
     * benefit: Maximum benefit allowable.
     */
    Benefit: {
        display: "Benefit",
        code: "benefit",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * copay: Copayment per service
     */
    CopaymentPerService: {
        display: "Copayment per service",
        code: "copay",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * copay-maximum: Copayment maximum per service
     */
    CopaymentMaximumPerService: {
        display: "Copayment maximum per service",
        code: "copay-maximum",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * copay-percent: Copayment percentage per service
     */
    CopaymentPercentPerService: {
        display: "Copayment Percent per service",
        code: "copay-percent",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * deductible: Cost to be incurred before benefits are applied
     */
    Deductible: {
        display: "Deductible",
        code: "deductible",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * medical-primarycare: Medical Primary Health Coverage
     */
    MedicalPrimaryHealthCoverage: {
        display: "Medical Primary Health Coverage",
        code: "medical-primarycare",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * pharmacy-dispense: Pharmacy Dispense Coverage
     */
    PharmacyDispenseCoverage: {
        display: "Pharmacy Dispense Coverage",
        code: "pharmacy-dispense",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * room: Type of room
     */
    Room: {
        display: "Room",
        code: "room",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * vision-contacts: Contact Lenses
     */
    VisionContactsCoverage: {
        display: "Vision Contacts Coverage",
        code: "vision-contacts",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * vision-exam: Vision Exam
     */
    VisionExam: {
        display: "Vision Exam",
        code: "vision-exam",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * vision-glasses: Frames and lenses
     */
    VisionGlasses: {
        display: "Vision Glasses",
        code: "vision-glasses",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
    /**
     * visit: Service visit
     */
    Visit: {
        display: "Visit",
        code: "visit",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmVuZWZpdFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9CZW5lZml0VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBMERqRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUF5QjtJQUN0RDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUU7UUFDbkIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILDBCQUEwQixFQUFFO1FBQzFCLE9BQU8sRUFBRSwrQkFBK0I7UUFDeEMsSUFBSSxFQUFFLGVBQWU7UUFDckIsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLCtCQUErQjtRQUN4QyxJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdEO0lBQ0Q7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdEO0lBQ0Q7O09BRUc7SUFDSCw0QkFBNEIsRUFBRTtRQUM1QixPQUFPLEVBQUUsaUNBQWlDO1FBQzFDLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsd0JBQXdCLEVBQUU7UUFDeEIsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxJQUFJLEVBQUUsbUJBQW1CO1FBQ3pCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsb0RBQW9EO0tBQzdEO0lBQ0Q7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0Q7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYmVuZWZpdC10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgYSBzbWF0dGVyaW5nIG9mIEJlbmVmaXQgdHlwZSBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIEJlbmVmaXRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBiZW5lZml0OiBNYXhpbXVtIGJlbmVmaXQgYWxsb3dhYmxlLlxyXG4gICAqL1xyXG4gIEJlbmVmaXQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29wYXk6IENvcGF5bWVudCBwZXIgc2VydmljZVxyXG4gICAqL1xyXG4gIENvcGF5bWVudFBlclNlcnZpY2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29wYXktbWF4aW11bTogQ29wYXltZW50IG1heGltdW0gcGVyIHNlcnZpY2VcclxuICAgKi9cclxuICBDb3BheW1lbnRNYXhpbXVtUGVyU2VydmljZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBjb3BheS1wZXJjZW50OiBDb3BheW1lbnQgcGVyY2VudGFnZSBwZXIgc2VydmljZVxyXG4gICAqL1xyXG4gIENvcGF5bWVudFBlcmNlbnRQZXJTZXJ2aWNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGRlZHVjdGlibGU6IENvc3QgdG8gYmUgaW5jdXJyZWQgYmVmb3JlIGJlbmVmaXRzIGFyZSBhcHBsaWVkXHJcbiAgICovXHJcbiAgRGVkdWN0aWJsZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtZWRpY2FsLXByaW1hcnljYXJlOiBNZWRpY2FsIFByaW1hcnkgSGVhbHRoIENvdmVyYWdlXHJcbiAgICovXHJcbiAgTWVkaWNhbFByaW1hcnlIZWFsdGhDb3ZlcmFnZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBwaGFybWFjeS1kaXNwZW5zZTogUGhhcm1hY3kgRGlzcGVuc2UgQ292ZXJhZ2VcclxuICAgKi9cclxuICBQaGFybWFjeURpc3BlbnNlQ292ZXJhZ2U6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogcm9vbTogVHlwZSBvZiByb29tXHJcbiAgICovXHJcbiAgUm9vbTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB2aXNpb24tY29udGFjdHM6IENvbnRhY3QgTGVuc2VzXHJcbiAgICovXHJcbiAgVmlzaW9uQ29udGFjdHNDb3ZlcmFnZTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB2aXNpb24tZXhhbTogVmlzaW9uIEV4YW1cclxuICAgKi9cclxuICBWaXNpb25FeGFtOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHZpc2lvbi1nbGFzc2VzOiBGcmFtZXMgYW5kIGxlbnNlc1xyXG4gICAqL1xyXG4gIFZpc2lvbkdsYXNzZXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogdmlzaXQ6IFNlcnZpY2UgdmlzaXRcclxuICAgKi9cclxuICBWaXNpdDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIGEgc21hdHRlcmluZyBvZiBCZW5lZml0IHR5cGUgY29kZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQmVuZWZpdFR5cGVDb2RpbmdzOkJlbmVmaXRUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBiZW5lZml0OiBNYXhpbXVtIGJlbmVmaXQgYWxsb3dhYmxlLlxyXG4gICAqL1xyXG4gIEJlbmVmaXQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQmVuZWZpdFwiLFxyXG4gICAgY29kZTogXCJiZW5lZml0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvcGF5OiBDb3BheW1lbnQgcGVyIHNlcnZpY2VcclxuICAgKi9cclxuICBDb3BheW1lbnRQZXJTZXJ2aWNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvcGF5bWVudCBwZXIgc2VydmljZVwiLFxyXG4gICAgY29kZTogXCJjb3BheVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBjb3BheS1tYXhpbXVtOiBDb3BheW1lbnQgbWF4aW11bSBwZXIgc2VydmljZVxyXG4gICAqL1xyXG4gIENvcGF5bWVudE1heGltdW1QZXJTZXJ2aWNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvcGF5bWVudCBtYXhpbXVtIHBlciBzZXJ2aWNlXCIsXHJcbiAgICBjb2RlOiBcImNvcGF5LW1heGltdW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2JlbmVmaXQtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29wYXktcGVyY2VudDogQ29wYXltZW50IHBlcmNlbnRhZ2UgcGVyIHNlcnZpY2VcclxuICAgKi9cclxuICBDb3BheW1lbnRQZXJjZW50UGVyU2VydmljZToge1xyXG4gICAgZGlzcGxheTogXCJDb3BheW1lbnQgUGVyY2VudCBwZXIgc2VydmljZVwiLFxyXG4gICAgY29kZTogXCJjb3BheS1wZXJjZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGRlZHVjdGlibGU6IENvc3QgdG8gYmUgaW5jdXJyZWQgYmVmb3JlIGJlbmVmaXRzIGFyZSBhcHBsaWVkXHJcbiAgICovXHJcbiAgRGVkdWN0aWJsZToge1xyXG4gICAgZGlzcGxheTogXCJEZWR1Y3RpYmxlXCIsXHJcbiAgICBjb2RlOiBcImRlZHVjdGlibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2JlbmVmaXQtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbWVkaWNhbC1wcmltYXJ5Y2FyZTogTWVkaWNhbCBQcmltYXJ5IEhlYWx0aCBDb3ZlcmFnZVxyXG4gICAqL1xyXG4gIE1lZGljYWxQcmltYXJ5SGVhbHRoQ292ZXJhZ2U6IHtcclxuICAgIGRpc3BsYXk6IFwiTWVkaWNhbCBQcmltYXJ5IEhlYWx0aCBDb3ZlcmFnZVwiLFxyXG4gICAgY29kZTogXCJtZWRpY2FsLXByaW1hcnljYXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHBoYXJtYWN5LWRpc3BlbnNlOiBQaGFybWFjeSBEaXNwZW5zZSBDb3ZlcmFnZVxyXG4gICAqL1xyXG4gIFBoYXJtYWN5RGlzcGVuc2VDb3ZlcmFnZToge1xyXG4gICAgZGlzcGxheTogXCJQaGFybWFjeSBEaXNwZW5zZSBDb3ZlcmFnZVwiLFxyXG4gICAgY29kZTogXCJwaGFybWFjeS1kaXNwZW5zZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByb29tOiBUeXBlIG9mIHJvb21cclxuICAgKi9cclxuICBSb29tOiB7XHJcbiAgICBkaXNwbGF5OiBcIlJvb21cIixcclxuICAgIGNvZGU6IFwicm9vbVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2aXNpb24tY29udGFjdHM6IENvbnRhY3QgTGVuc2VzXHJcbiAgICovXHJcbiAgVmlzaW9uQ29udGFjdHNDb3ZlcmFnZToge1xyXG4gICAgZGlzcGxheTogXCJWaXNpb24gQ29udGFjdHMgQ292ZXJhZ2VcIixcclxuICAgIGNvZGU6IFwidmlzaW9uLWNvbnRhY3RzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHZpc2lvbi1leGFtOiBWaXNpb24gRXhhbVxyXG4gICAqL1xyXG4gIFZpc2lvbkV4YW06IHtcclxuICAgIGRpc3BsYXk6IFwiVmlzaW9uIEV4YW1cIixcclxuICAgIGNvZGU6IFwidmlzaW9uLWV4YW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2JlbmVmaXQtdHlwZVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogdmlzaW9uLWdsYXNzZXM6IEZyYW1lcyBhbmQgbGVuc2VzXHJcbiAgICovXHJcbiAgVmlzaW9uR2xhc3Nlczoge1xyXG4gICAgZGlzcGxheTogXCJWaXNpb24gR2xhc3Nlc1wiLFxyXG4gICAgY29kZTogXCJ2aXNpb24tZ2xhc3Nlc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB2aXNpdDogU2VydmljZSB2aXNpdFxyXG4gICAqL1xyXG4gIFZpc2l0OiB7XHJcbiAgICBkaXNwbGF5OiBcIlZpc2l0XCIsXHJcbiAgICBjb2RlOiBcInZpc2l0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXX0=