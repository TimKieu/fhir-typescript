// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/benefit-type|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set includes a smattering of Benefit type codes.
 */
export const BenefitTypeCodings = {
    /**
     * benefit: Maximum benefit allowable.
     */
    Benefit: new Coding({
        display: "Benefit",
        code: "benefit",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * copay: Copayment per service
     */
    CopaymentPerService: new Coding({
        display: "Copayment per service",
        code: "copay",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * copay-maximum: Copayment maximum per service
     */
    CopaymentMaximumPerService: new Coding({
        display: "Copayment maximum per service",
        code: "copay-maximum",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * copay-percent: Copayment percentage per service
     */
    CopaymentPercentPerService: new Coding({
        display: "Copayment Percent per service",
        code: "copay-percent",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * deductible: Cost to be incurred before benefits are applied
     */
    Deductible: new Coding({
        display: "Deductible",
        code: "deductible",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * medical-primarycare: Medical Primary Health Coverage
     */
    MedicalPrimaryHealthCoverage: new Coding({
        display: "Medical Primary Health Coverage",
        code: "medical-primarycare",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * pharmacy-dispense: Pharmacy Dispense Coverage
     */
    PharmacyDispenseCoverage: new Coding({
        display: "Pharmacy Dispense Coverage",
        code: "pharmacy-dispense",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * room: Type of room
     */
    Room: new Coding({
        display: "Room",
        code: "room",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * vision-contacts: Contact Lenses
     */
    VisionContactsCoverage: new Coding({
        display: "Vision Contacts Coverage",
        code: "vision-contacts",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * vision-exam: Vision Exam
     */
    VisionExam: new Coding({
        display: "Vision Exam",
        code: "vision-exam",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * vision-glasses: Frames and lenses
     */
    VisionGlasses: new Coding({
        display: "Vision Glasses",
        code: "vision-glasses",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
    /**
     * visit: Service visit
     */
    Visit: new Coding({
        display: "Visit",
        code: "visit",
        system: "http://terminology.hl7.org/CodeSystem/benefit-type",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmVuZWZpdFR5cGVDb2RpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpclZhbHVlU2V0cy9CZW5lZml0VHlwZUNvZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUVBQWlFO0FBRWpFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUM5QixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCwwQkFBMEIsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQyxPQUFPLEVBQUUsK0JBQStCO1FBQ3hDLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxvREFBb0Q7S0FDN0QsQ0FBQztJQUNGOztPQUVHO0lBQ0gsMEJBQTBCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckMsT0FBTyxFQUFFLCtCQUErQjtRQUN4QyxJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILDRCQUE0QixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3ZDLE9BQU8sRUFBRSxpQ0FBaUM7UUFDMUMsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILHdCQUF3QixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ25DLE9BQU8sRUFBRSw0QkFBNEI7UUFDckMsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNmLE9BQU8sRUFBRSxNQUFNO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILHNCQUFzQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSwwQkFBMEI7UUFDbkMsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7SUFDRjs7T0FFRztJQUNILGFBQWEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN4QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLG9EQUFvRDtLQUM3RCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsb0RBQW9EO0tBQzdELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2JlbmVmaXQtdHlwZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgaW5jbHVkZXMgYSBzbWF0dGVyaW5nIG9mIEJlbmVmaXQgdHlwZSBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBCZW5lZml0VHlwZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYmVuZWZpdDogTWF4aW11bSBiZW5lZml0IGFsbG93YWJsZS5cclxuICAgKi9cclxuICBCZW5lZml0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQmVuZWZpdFwiLFxyXG4gICAgY29kZTogXCJiZW5lZml0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBjb3BheTogQ29wYXltZW50IHBlciBzZXJ2aWNlXHJcbiAgICovXHJcbiAgQ29wYXltZW50UGVyU2VydmljZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvcGF5bWVudCBwZXIgc2VydmljZVwiLFxyXG4gICAgY29kZTogXCJjb3BheVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogY29wYXktbWF4aW11bTogQ29wYXltZW50IG1heGltdW0gcGVyIHNlcnZpY2VcclxuICAgKi9cclxuICBDb3BheW1lbnRNYXhpbXVtUGVyU2VydmljZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkNvcGF5bWVudCBtYXhpbXVtIHBlciBzZXJ2aWNlXCIsXHJcbiAgICBjb2RlOiBcImNvcGF5LW1heGltdW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2JlbmVmaXQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGNvcGF5LXBlcmNlbnQ6IENvcGF5bWVudCBwZXJjZW50YWdlIHBlciBzZXJ2aWNlXHJcbiAgICovXHJcbiAgQ29wYXltZW50UGVyY2VudFBlclNlcnZpY2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDb3BheW1lbnQgUGVyY2VudCBwZXIgc2VydmljZVwiLFxyXG4gICAgY29kZTogXCJjb3BheS1wZXJjZW50XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBkZWR1Y3RpYmxlOiBDb3N0IHRvIGJlIGluY3VycmVkIGJlZm9yZSBiZW5lZml0cyBhcmUgYXBwbGllZFxyXG4gICAqL1xyXG4gIERlZHVjdGlibGU6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJEZWR1Y3RpYmxlXCIsXHJcbiAgICBjb2RlOiBcImRlZHVjdGlibGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2JlbmVmaXQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG1lZGljYWwtcHJpbWFyeWNhcmU6IE1lZGljYWwgUHJpbWFyeSBIZWFsdGggQ292ZXJhZ2VcclxuICAgKi9cclxuICBNZWRpY2FsUHJpbWFyeUhlYWx0aENvdmVyYWdlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTWVkaWNhbCBQcmltYXJ5IEhlYWx0aCBDb3ZlcmFnZVwiLFxyXG4gICAgY29kZTogXCJtZWRpY2FsLXByaW1hcnljYXJlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBwaGFybWFjeS1kaXNwZW5zZTogUGhhcm1hY3kgRGlzcGVuc2UgQ292ZXJhZ2VcclxuICAgKi9cclxuICBQaGFybWFjeURpc3BlbnNlQ292ZXJhZ2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJQaGFybWFjeSBEaXNwZW5zZSBDb3ZlcmFnZVwiLFxyXG4gICAgY29kZTogXCJwaGFybWFjeS1kaXNwZW5zZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcm9vbTogVHlwZSBvZiByb29tXHJcbiAgICovXHJcbiAgUm9vbTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJvb21cIixcclxuICAgIGNvZGU6IFwicm9vbVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdmlzaW9uLWNvbnRhY3RzOiBDb250YWN0IExlbnNlc1xyXG4gICAqL1xyXG4gIFZpc2lvbkNvbnRhY3RzQ292ZXJhZ2U6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJWaXNpb24gQ29udGFjdHMgQ292ZXJhZ2VcIixcclxuICAgIGNvZGU6IFwidmlzaW9uLWNvbnRhY3RzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB2aXNpb24tZXhhbTogVmlzaW9uIEV4YW1cclxuICAgKi9cclxuICBWaXNpb25FeGFtOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVmlzaW9uIEV4YW1cIixcclxuICAgIGNvZGU6IFwidmlzaW9uLWV4YW1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2JlbmVmaXQtdHlwZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHZpc2lvbi1nbGFzc2VzOiBGcmFtZXMgYW5kIGxlbnNlc1xyXG4gICAqL1xyXG4gIFZpc2lvbkdsYXNzZXM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJWaXNpb24gR2xhc3Nlc1wiLFxyXG4gICAgY29kZTogXCJ2aXNpb24tZ2xhc3Nlc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYmVuZWZpdC10eXBlXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdmlzaXQ6IFNlcnZpY2UgdmlzaXRcclxuICAgKi9cclxuICBWaXNpdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlZpc2l0XCIsXHJcbiAgICBjb2RlOiBcInZpc2l0XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9iZW5lZml0LXR5cGVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBpbmNsdWRlcyBhIHNtYXR0ZXJpbmcgb2YgQmVuZWZpdCB0eXBlIGNvZGVzLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQmVuZWZpdFR5cGVDb2RpbmdUeXBlID0gdHlwZW9mIEJlbmVmaXRUeXBlQ29kaW5ncztcclxuIl19