// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-diet|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * This value set defines a set of codes that can be used to indicate dietary preferences or restrictions a patient may have.
 */
export const EncounterDietCodings = {
    /**
     * dairy-free: Excludes dairy products.
     */
    DairyFree: new Coding({
        display: "Dairy Free",
        code: "dairy-free",
        system: "http://terminology.hl7.org/CodeSystem/diet",
    }),
    /**
     * gluten-free: Excludes ingredients containing gluten.
     */
    GlutenFree: new Coding({
        display: "Gluten Free",
        code: "gluten-free",
        system: "http://terminology.hl7.org/CodeSystem/diet",
    }),
    /**
     * halal: Foods that conform to Islamic law.
     */
    Halal: new Coding({
        display: "Halal",
        code: "halal",
        system: "http://terminology.hl7.org/CodeSystem/diet",
    }),
    /**
     * kosher: Foods that conform to Jewish dietary law.
     */
    Kosher: new Coding({
        display: "Kosher",
        code: "kosher",
        system: "http://terminology.hl7.org/CodeSystem/diet",
    }),
    /**
     * nut-free: Excludes ingredients containing nuts.
     */
    NutFree: new Coding({
        display: "Nut Free",
        code: "nut-free",
        system: "http://terminology.hl7.org/CodeSystem/diet",
    }),
    /**
     * vegan: Food without meat, poultry, seafood, eggs, dairy products and other animal-derived substances.
     */
    Vegan: new Coding({
        display: "Vegan",
        code: "vegan",
        system: "http://terminology.hl7.org/CodeSystem/diet",
    }),
    /**
     * vegetarian: Food without meat, poultry or seafood.
     */
    Vegetarian: new Coding({
        display: "Vegetarian",
        code: "vegetarian",
        system: "http://terminology.hl7.org/CodeSystem/diet",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyRGlldENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0VuY291bnRlckRpZXRDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQUVuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQzs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsNENBQTRDO0tBQ3JELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUUsNENBQTRDO0tBQ3JELENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSw0Q0FBNEM7S0FDckQsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLDRDQUE0QztLQUNyRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDRDQUE0QztLQUNyRCxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDaEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsNENBQTRDO0tBQ3JELENBQUM7SUFDRjs7T0FFRztJQUNILFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsWUFBWTtRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsNENBQTRDO0tBQ3JELENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2VuY291bnRlci1kaWV0fDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZGlldGFyeSBwcmVmZXJlbmNlcyBvciByZXN0cmljdGlvbnMgYSBwYXRpZW50IG1heSBoYXZlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVuY291bnRlckRpZXRDb2RpbmdzID0ge1xyXG4gIC8qKlxyXG4gICAqIGRhaXJ5LWZyZWU6IEV4Y2x1ZGVzIGRhaXJ5IHByb2R1Y3RzLlxyXG4gICAqL1xyXG4gIERhaXJ5RnJlZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkRhaXJ5IEZyZWVcIixcclxuICAgIGNvZGU6IFwiZGFpcnktZnJlZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGlldFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGdsdXRlbi1mcmVlOiBFeGNsdWRlcyBpbmdyZWRpZW50cyBjb250YWluaW5nIGdsdXRlbi5cclxuICAgKi9cclxuICBHbHV0ZW5GcmVlOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiR2x1dGVuIEZyZWVcIixcclxuICAgIGNvZGU6IFwiZ2x1dGVuLWZyZWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RpZXRcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBoYWxhbDogRm9vZHMgdGhhdCBjb25mb3JtIHRvIElzbGFtaWMgbGF3LlxyXG4gICAqL1xyXG4gIEhhbGFsOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSGFsYWxcIixcclxuICAgIGNvZGU6IFwiaGFsYWxcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2RpZXRcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBrb3NoZXI6IEZvb2RzIHRoYXQgY29uZm9ybSB0byBKZXdpc2ggZGlldGFyeSBsYXcuXHJcbiAgICovXHJcbiAgS29zaGVyOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiS29zaGVyXCIsXHJcbiAgICBjb2RlOiBcImtvc2hlclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vZGlldFwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG51dC1mcmVlOiBFeGNsdWRlcyBpbmdyZWRpZW50cyBjb250YWluaW5nIG51dHMuXHJcbiAgICovXHJcbiAgTnV0RnJlZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk51dCBGcmVlXCIsXHJcbiAgICBjb2RlOiBcIm51dC1mcmVlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaWV0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdmVnYW46IEZvb2Qgd2l0aG91dCBtZWF0LCBwb3VsdHJ5LCBzZWFmb29kLCBlZ2dzLCBkYWlyeSBwcm9kdWN0cyBhbmQgb3RoZXIgYW5pbWFsLWRlcml2ZWQgc3Vic3RhbmNlcy5cclxuICAgKi9cclxuICBWZWdhbjogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlZlZ2FuXCIsXHJcbiAgICBjb2RlOiBcInZlZ2FuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaWV0XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogdmVnZXRhcmlhbjogRm9vZCB3aXRob3V0IG1lYXQsIHBvdWx0cnkgb3Igc2VhZm9vZC5cclxuICAgKi9cclxuICBWZWdldGFyaWFuOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVmVnZXRhcmlhblwiLFxyXG4gICAgY29kZTogXCJ2ZWdldGFyaWFuXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9kaWV0XCIsXHJcbiAgfSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVGhpcyB2YWx1ZSBzZXQgZGVmaW5lcyBhIHNldCBvZiBjb2RlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGRpZXRhcnkgcHJlZmVyZW5jZXMgb3IgcmVzdHJpY3Rpb25zIGEgcGF0aWVudCBtYXkgaGF2ZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEVuY291bnRlckRpZXRDb2RpbmdUeXBlID0gdHlwZW9mIEVuY291bnRlckRpZXRDb2RpbmdzO1xyXG4iXX0=