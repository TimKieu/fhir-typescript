// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/questionnaire-enable-operator|4.0.1
/**
 * The criteria by which a question is enabled.
 */
export const QuestionnaireEnableOperatorCodings = {
    /**
     * !=: True if whether at least no answer has a value that is equal to the enableWhen answer.
     */
    NotEquals: {
        display: "Not Equals",
        code: "!=",
        system: "http://hl7.org/fhir/questionnaire-enable-operator",
    },
    /**
     * &lt;: True if whether at least no answer has a value that is less than the enableWhen answer.
     */
    LessThan: {
        display: "Less Than",
        code: "<",
        system: "http://hl7.org/fhir/questionnaire-enable-operator",
    },
    /**
     * &lt;=: True if whether at least no answer has a value that is less or equal to the enableWhen answer.
     */
    LessOrEquals: {
        display: "Less or Equals",
        code: "<=",
        system: "http://hl7.org/fhir/questionnaire-enable-operator",
    },
    /**
     * =: True if whether at least one answer has a value that is equal to the enableWhen answer.
     */
    Equals: {
        display: "Equals",
        code: "=",
        system: "http://hl7.org/fhir/questionnaire-enable-operator",
    },
    /**
     * &gt;: True if whether at least no answer has a value that is greater than the enableWhen answer.
     */
    GreaterThan: {
        display: "Greater Than",
        code: ">",
        system: "http://hl7.org/fhir/questionnaire-enable-operator",
    },
    /**
     * &gt;=: True if whether at least no answer has a value that is greater or equal to the enableWhen answer.
     */
    GreaterOrEquals: {
        display: "Greater or Equals",
        code: ">=",
        system: "http://hl7.org/fhir/questionnaire-enable-operator",
    },
    /**
     * exists: True if whether an answer exists is equal to the enableWhen answer (which must be a boolean).
     */
    Exists: {
        display: "Exists",
        code: "exists",
        system: "http://hl7.org/fhir/questionnaire-enable-operator",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVlc3Rpb25uYWlyZUVuYWJsZU9wZXJhdG9yQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvUXVlc3Rpb25uYWlyZUVuYWJsZU9wZXJhdG9yQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrRkFBa0Y7QUFzQ2xGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQXlDO0lBQ3RGOztPQUVHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxtREFBbUQ7S0FDNUQ7SUFDRDs7T0FFRztJQUNILFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFLElBQUk7UUFDVixNQUFNLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0Q7O09BRUc7SUFDSCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsUUFBUTtRQUNqQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxtREFBbUQ7S0FDNUQ7SUFDRDs7T0FFRztJQUNILFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLG1EQUFtRDtLQUM1RDtJQUNEOztPQUVHO0lBQ0gsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxtREFBbUQ7S0FDNUQ7SUFDRDs7T0FFRztJQUNILE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLG1EQUFtRDtLQUM1RDtDQUNPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcXVlc3Rpb25uYWlyZS1lbmFibGUtb3BlcmF0b3J8NC4wLjFcclxuXHJcbmltcG9ydCB7IENvZGluZ0FyZ3MgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgY3JpdGVyaWEgYnkgd2hpY2ggYSBxdWVzdGlvbiBpcyBlbmFibGVkLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUXVlc3Rpb25uYWlyZUVuYWJsZU9wZXJhdG9yQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiAhPTogVHJ1ZSBpZiB3aGV0aGVyIGF0IGxlYXN0IG5vIGFuc3dlciBoYXMgYSB2YWx1ZSB0aGF0IGlzIGVxdWFsIHRvIHRoZSBlbmFibGVXaGVuIGFuc3dlci5cclxuICAgKi9cclxuICBOb3RFcXVhbHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogJmx0OzogVHJ1ZSBpZiB3aGV0aGVyIGF0IGxlYXN0IG5vIGFuc3dlciBoYXMgYSB2YWx1ZSB0aGF0IGlzIGxlc3MgdGhhbiB0aGUgZW5hYmxlV2hlbiBhbnN3ZXIuXHJcbiAgICovXHJcbiAgTGVzc1RoYW46IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogJmx0Oz06IFRydWUgaWYgd2hldGhlciBhdCBsZWFzdCBubyBhbnN3ZXIgaGFzIGEgdmFsdWUgdGhhdCBpcyBsZXNzIG9yIGVxdWFsIHRvIHRoZSBlbmFibGVXaGVuIGFuc3dlci5cclxuICAgKi9cclxuICBMZXNzT3JFcXVhbHM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogPTogVHJ1ZSBpZiB3aGV0aGVyIGF0IGxlYXN0IG9uZSBhbnN3ZXIgaGFzIGEgdmFsdWUgdGhhdCBpcyBlcXVhbCB0byB0aGUgZW5hYmxlV2hlbiBhbnN3ZXIuXHJcbiAgICovXHJcbiAgRXF1YWxzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqICZndDs6IFRydWUgaWYgd2hldGhlciBhdCBsZWFzdCBubyBhbnN3ZXIgaGFzIGEgdmFsdWUgdGhhdCBpcyBncmVhdGVyIHRoYW4gdGhlIGVuYWJsZVdoZW4gYW5zd2VyLlxyXG4gICAqL1xyXG4gIEdyZWF0ZXJUaGFuOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqICZndDs9OiBUcnVlIGlmIHdoZXRoZXIgYXQgbGVhc3Qgbm8gYW5zd2VyIGhhcyBhIHZhbHVlIHRoYXQgaXMgZ3JlYXRlciBvciBlcXVhbCB0byB0aGUgZW5hYmxlV2hlbiBhbnN3ZXIuXHJcbiAgICovXHJcbiAgR3JlYXRlck9yRXF1YWxzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGV4aXN0czogVHJ1ZSBpZiB3aGV0aGVyIGFuIGFuc3dlciBleGlzdHMgaXMgZXF1YWwgdG8gdGhlIGVuYWJsZVdoZW4gYW5zd2VyICh3aGljaCBtdXN0IGJlIGEgYm9vbGVhbikuXHJcbiAgICovXHJcbiAgRXhpc3RzOiBDb2RpbmdBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGNyaXRlcmlhIGJ5IHdoaWNoIGEgcXVlc3Rpb24gaXMgZW5hYmxlZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBRdWVzdGlvbm5haXJlRW5hYmxlT3BlcmF0b3JDb2RpbmdzOlF1ZXN0aW9ubmFpcmVFbmFibGVPcGVyYXRvckNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogIT06IFRydWUgaWYgd2hldGhlciBhdCBsZWFzdCBubyBhbnN3ZXIgaGFzIGEgdmFsdWUgdGhhdCBpcyBlcXVhbCB0byB0aGUgZW5hYmxlV2hlbiBhbnN3ZXIuXHJcbiAgICovXHJcbiAgTm90RXF1YWxzOiB7XHJcbiAgICBkaXNwbGF5OiBcIk5vdCBFcXVhbHNcIixcclxuICAgIGNvZGU6IFwiIT1cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3F1ZXN0aW9ubmFpcmUtZW5hYmxlLW9wZXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiAmbHQ7OiBUcnVlIGlmIHdoZXRoZXIgYXQgbGVhc3Qgbm8gYW5zd2VyIGhhcyBhIHZhbHVlIHRoYXQgaXMgbGVzcyB0aGFuIHRoZSBlbmFibGVXaGVuIGFuc3dlci5cclxuICAgKi9cclxuICBMZXNzVGhhbjoge1xyXG4gICAgZGlzcGxheTogXCJMZXNzIFRoYW5cIixcclxuICAgIGNvZGU6IFwiPFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcXVlc3Rpb25uYWlyZS1lbmFibGUtb3BlcmF0b3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqICZsdDs9OiBUcnVlIGlmIHdoZXRoZXIgYXQgbGVhc3Qgbm8gYW5zd2VyIGhhcyBhIHZhbHVlIHRoYXQgaXMgbGVzcyBvciBlcXVhbCB0byB0aGUgZW5hYmxlV2hlbiBhbnN3ZXIuXHJcbiAgICovXHJcbiAgTGVzc09yRXF1YWxzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkxlc3Mgb3IgRXF1YWxzXCIsXHJcbiAgICBjb2RlOiBcIjw9XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9xdWVzdGlvbm5haXJlLWVuYWJsZS1vcGVyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogPTogVHJ1ZSBpZiB3aGV0aGVyIGF0IGxlYXN0IG9uZSBhbnN3ZXIgaGFzIGEgdmFsdWUgdGhhdCBpcyBlcXVhbCB0byB0aGUgZW5hYmxlV2hlbiBhbnN3ZXIuXHJcbiAgICovXHJcbiAgRXF1YWxzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVxdWFsc1wiLFxyXG4gICAgY29kZTogXCI9XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9xdWVzdGlvbm5haXJlLWVuYWJsZS1vcGVyYXRvclwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogJmd0OzogVHJ1ZSBpZiB3aGV0aGVyIGF0IGxlYXN0IG5vIGFuc3dlciBoYXMgYSB2YWx1ZSB0aGF0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgZW5hYmxlV2hlbiBhbnN3ZXIuXHJcbiAgICovXHJcbiAgR3JlYXRlclRoYW46IHtcclxuICAgIGRpc3BsYXk6IFwiR3JlYXRlciBUaGFuXCIsXHJcbiAgICBjb2RlOiBcIj5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3F1ZXN0aW9ubmFpcmUtZW5hYmxlLW9wZXJhdG9yXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiAmZ3Q7PTogVHJ1ZSBpZiB3aGV0aGVyIGF0IGxlYXN0IG5vIGFuc3dlciBoYXMgYSB2YWx1ZSB0aGF0IGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdGhlIGVuYWJsZVdoZW4gYW5zd2VyLlxyXG4gICAqL1xyXG4gIEdyZWF0ZXJPckVxdWFsczoge1xyXG4gICAgZGlzcGxheTogXCJHcmVhdGVyIG9yIEVxdWFsc1wiLFxyXG4gICAgY29kZTogXCI+PVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvcXVlc3Rpb25uYWlyZS1lbmFibGUtb3BlcmF0b3JcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGV4aXN0czogVHJ1ZSBpZiB3aGV0aGVyIGFuIGFuc3dlciBleGlzdHMgaXMgZXF1YWwgdG8gdGhlIGVuYWJsZVdoZW4gYW5zd2VyICh3aGljaCBtdXN0IGJlIGEgYm9vbGVhbikuXHJcbiAgICovXHJcbiAgRXhpc3RzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkV4aXN0c1wiLFxyXG4gICAgY29kZTogXCJleGlzdHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL3F1ZXN0aW9ubmFpcmUtZW5hYmxlLW9wZXJhdG9yXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19