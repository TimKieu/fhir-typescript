// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-discharge-disposition|4.0.1
/**
 * This value set defines a set of codes that can be used to where the patient left the hospital.
 */
export const EncounterDischargeDispositionCodes = {
    /**
     * aadvice: The patient self discharged against medical advice.
     */
    LeftAgainstAdvice: "aadvice",
    /**
     * alt-home: The patient was discharged and has indicated that they are going to return home afterwards, but not the patient's home - e.g. a family member's home.
     */
    AlternativeHome: "alt-home",
    /**
     * exp: The patient has deceased during this encounter.
     */
    Expired: "exp",
    /**
     * home: The patient was dicharged and has indicated that they are going to return home afterwards.
     */
    Home: "home",
    /**
     * hosp: The patient has been discharged into palliative care.
     */
    Hospice: "hosp",
    /**
     * long: The patient has been discharged into long-term care where is likely to be monitored through an ongoing episode-of-care.
     */
    LongTermCare: "long",
    /**
     * oth: The discharge disposition has not otherwise defined.
     */
    Other: "oth",
    /**
     * other-hcf: The patient was transferred to another healthcare facility.
     */
    OtherHealthcareFacility: "other-hcf",
    /**
     * psy: The patient has been transferred to a psychiatric facility.
     */
    PsychiatricHospital: "psy",
    /**
     * rehab: The patient was discharged and is to receive post acute care rehabilitation services.
     */
    Rehabilitation: "rehab",
    /**
     * snf: The patient has been discharged to a skilled nursing facility for the patient to receive additional care.
     */
    SkilledNursingFacility: "snf",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxvRkFBb0Y7QUFFcEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRztJQUNoRDs7T0FFRztJQUNILGlCQUFpQixFQUFFLFNBQVM7SUFDNUI7O09BRUc7SUFDSCxlQUFlLEVBQUUsVUFBVTtJQUMzQjs7T0FFRztJQUNILE9BQU8sRUFBRSxLQUFLO0lBQ2Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsT0FBTyxFQUFFLE1BQU07SUFDZjs7T0FFRztJQUNILFlBQVksRUFBRSxNQUFNO0lBQ3BCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLEtBQUs7SUFDWjs7T0FFRztJQUNILHVCQUF1QixFQUFFLFdBQVc7SUFDcEM7O09BRUc7SUFDSCxtQkFBbUIsRUFBRSxLQUFLO0lBQzFCOztPQUVHO0lBQ0gsY0FBYyxFQUFFLE9BQU87SUFDdkI7O09BRUc7SUFDSCxzQkFBc0IsRUFBRSxLQUFLO0NBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgVmFsdWVTZXQ6IGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZW5jb3VudGVyLWRpc2NoYXJnZS1kaXNwb3NpdGlvbnw0LjAuMVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGRlZmluZXMgYSBzZXQgb2YgY29kZXMgdGhhdCBjYW4gYmUgdXNlZCB0byB3aGVyZSB0aGUgcGF0aWVudCBsZWZ0IHRoZSBob3NwaXRhbC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBFbmNvdW50ZXJEaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGVzID0ge1xyXG4gIC8qKlxyXG4gICAqIGFhZHZpY2U6IFRoZSBwYXRpZW50IHNlbGYgZGlzY2hhcmdlZCBhZ2FpbnN0IG1lZGljYWwgYWR2aWNlLlxyXG4gICAqL1xyXG4gIExlZnRBZ2FpbnN0QWR2aWNlOiBcImFhZHZpY2VcIixcclxuICAvKipcclxuICAgKiBhbHQtaG9tZTogVGhlIHBhdGllbnQgd2FzIGRpc2NoYXJnZWQgYW5kIGhhcyBpbmRpY2F0ZWQgdGhhdCB0aGV5IGFyZSBnb2luZyB0byByZXR1cm4gaG9tZSBhZnRlcndhcmRzLCBidXQgbm90IHRoZSBwYXRpZW50J3MgaG9tZSAtIGUuZy4gYSBmYW1pbHkgbWVtYmVyJ3MgaG9tZS5cclxuICAgKi9cclxuICBBbHRlcm5hdGl2ZUhvbWU6IFwiYWx0LWhvbWVcIixcclxuICAvKipcclxuICAgKiBleHA6IFRoZSBwYXRpZW50IGhhcyBkZWNlYXNlZCBkdXJpbmcgdGhpcyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgRXhwaXJlZDogXCJleHBcIixcclxuICAvKipcclxuICAgKiBob21lOiBUaGUgcGF0aWVudCB3YXMgZGljaGFyZ2VkIGFuZCBoYXMgaW5kaWNhdGVkIHRoYXQgdGhleSBhcmUgZ29pbmcgdG8gcmV0dXJuIGhvbWUgYWZ0ZXJ3YXJkcy5cclxuICAgKi9cclxuICBIb21lOiBcImhvbWVcIixcclxuICAvKipcclxuICAgKiBob3NwOiBUaGUgcGF0aWVudCBoYXMgYmVlbiBkaXNjaGFyZ2VkIGludG8gcGFsbGlhdGl2ZSBjYXJlLlxyXG4gICAqL1xyXG4gIEhvc3BpY2U6IFwiaG9zcFwiLFxyXG4gIC8qKlxyXG4gICAqIGxvbmc6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGRpc2NoYXJnZWQgaW50byBsb25nLXRlcm0gY2FyZSB3aGVyZSBpcyBsaWtlbHkgdG8gYmUgbW9uaXRvcmVkIHRocm91Z2ggYW4gb25nb2luZyBlcGlzb2RlLW9mLWNhcmUuXHJcbiAgICovXHJcbiAgTG9uZ1Rlcm1DYXJlOiBcImxvbmdcIixcclxuICAvKipcclxuICAgKiBvdGg6IFRoZSBkaXNjaGFyZ2UgZGlzcG9zaXRpb24gaGFzIG5vdCBvdGhlcndpc2UgZGVmaW5lZC5cclxuICAgKi9cclxuICBPdGhlcjogXCJvdGhcIixcclxuICAvKipcclxuICAgKiBvdGhlci1oY2Y6IFRoZSBwYXRpZW50IHdhcyB0cmFuc2ZlcnJlZCB0byBhbm90aGVyIGhlYWx0aGNhcmUgZmFjaWxpdHkuXHJcbiAgICovXHJcbiAgT3RoZXJIZWFsdGhjYXJlRmFjaWxpdHk6IFwib3RoZXItaGNmXCIsXHJcbiAgLyoqXHJcbiAgICogcHN5OiBUaGUgcGF0aWVudCBoYXMgYmVlbiB0cmFuc2ZlcnJlZCB0byBhIHBzeWNoaWF0cmljIGZhY2lsaXR5LlxyXG4gICAqL1xyXG4gIFBzeWNoaWF0cmljSG9zcGl0YWw6IFwicHN5XCIsXHJcbiAgLyoqXHJcbiAgICogcmVoYWI6IFRoZSBwYXRpZW50IHdhcyBkaXNjaGFyZ2VkIGFuZCBpcyB0byByZWNlaXZlIHBvc3QgYWN1dGUgY2FyZSByZWhhYmlsaXRhdGlvbiBzZXJ2aWNlcy5cclxuICAgKi9cclxuICBSZWhhYmlsaXRhdGlvbjogXCJyZWhhYlwiLFxyXG4gIC8qKlxyXG4gICAqIHNuZjogVGhlIHBhdGllbnQgaGFzIGJlZW4gZGlzY2hhcmdlZCB0byBhIHNraWxsZWQgbnVyc2luZyBmYWNpbGl0eSBmb3IgdGhlIHBhdGllbnQgdG8gcmVjZWl2ZSBhZGRpdGlvbmFsIGNhcmUuXHJcbiAgICovXHJcbiAgU2tpbGxlZE51cnNpbmdGYWNpbGl0eTogXCJzbmZcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHZhbHVlIHNldCBkZWZpbmVzIGEgc2V0IG9mIGNvZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gd2hlcmUgdGhlIHBhdGllbnQgbGVmdCB0aGUgaG9zcGl0YWwuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFbmNvdW50ZXJEaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGVUeXBlID0gdHlwZW9mIEVuY291bnRlckRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZXNba2V5b2YgdHlwZW9mIEVuY291bnRlckRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZXNdO1xyXG4iXX0=