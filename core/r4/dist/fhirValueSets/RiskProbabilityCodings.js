// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/risk-probability|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Codes representing the likelihood of a particular outcome in a risk assessment.
 */
export const RiskProbabilityCodings = {
    /**
     * certain: The specified outcome is effectively guaranteed.
     */
    Certain: new Coding({
        display: "Certain",
        code: "certain",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    }),
    /**
     * high: The specified outcome is more likely to occur than not.
     */
    HighLikelihood: new Coding({
        display: "High likelihood",
        code: "high",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    }),
    /**
     * low: The specified outcome is possible but unlikely.
     */
    LowLikelihood: new Coding({
        display: "Low likelihood",
        code: "low",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    }),
    /**
     * moderate: The specified outcome has a reasonable likelihood of occurrence.
     */
    ModerateLikelihood: new Coding({
        display: "Moderate likelihood",
        code: "moderate",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    }),
    /**
     * negligible: The specified outcome is exceptionally unlikely.
     */
    NegligibleLikelihood: new Coding({
        display: "Negligible likelihood",
        code: "negligible",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmlza1Byb2JhYmlsaXR5Q29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvUmlza1Byb2JhYmlsaXR5Q29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxRUFBcUU7QUFFckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRTFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDcEM7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFLENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxhQUFhLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDeEIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSx3REFBd0Q7S0FDakUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsa0JBQWtCLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDN0IsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFLENBQUM7SUFDRjs7T0FFRztJQUNILG9CQUFvQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQy9CLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRSxDQUFDO0NBQ00sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yaXNrLXByb2JhYmlsaXR5fDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmcgfSBmcm9tICcuLi9maGlyL0NvZGluZy5qcydcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyByZXByZXNlbnRpbmcgdGhlIGxpa2VsaWhvb2Qgb2YgYSBwYXJ0aWN1bGFyIG91dGNvbWUgaW4gYSByaXNrIGFzc2Vzc21lbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUmlza1Byb2JhYmlsaXR5Q29kaW5ncyA9IHtcclxuICAvKipcclxuICAgKiBjZXJ0YWluOiBUaGUgc3BlY2lmaWVkIG91dGNvbWUgaXMgZWZmZWN0aXZlbHkgZ3VhcmFudGVlZC5cclxuICAgKi9cclxuICBDZXJ0YWluOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQ2VydGFpblwiLFxyXG4gICAgY29kZTogXCJjZXJ0YWluXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yaXNrLXByb2JhYmlsaXR5XCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogaGlnaDogVGhlIHNwZWNpZmllZCBvdXRjb21lIGlzIG1vcmUgbGlrZWx5IHRvIG9jY3VyIHRoYW4gbm90LlxyXG4gICAqL1xyXG4gIEhpZ2hMaWtlbGlob29kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiSGlnaCBsaWtlbGlob29kXCIsXHJcbiAgICBjb2RlOiBcImhpZ2hcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Jpc2stcHJvYmFiaWxpdHlcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBsb3c6IFRoZSBzcGVjaWZpZWQgb3V0Y29tZSBpcyBwb3NzaWJsZSBidXQgdW5saWtlbHkuXHJcbiAgICovXHJcbiAgTG93TGlrZWxpaG9vZDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkxvdyBsaWtlbGlob29kXCIsXHJcbiAgICBjb2RlOiBcImxvd1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmlzay1wcm9iYWJpbGl0eVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG1vZGVyYXRlOiBUaGUgc3BlY2lmaWVkIG91dGNvbWUgaGFzIGEgcmVhc29uYWJsZSBsaWtlbGlob29kIG9mIG9jY3VycmVuY2UuXHJcbiAgICovXHJcbiAgTW9kZXJhdGVMaWtlbGlob29kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTW9kZXJhdGUgbGlrZWxpaG9vZFwiLFxyXG4gICAgY29kZTogXCJtb2RlcmF0ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmlzay1wcm9iYWJpbGl0eVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG5lZ2xpZ2libGU6IFRoZSBzcGVjaWZpZWQgb3V0Y29tZSBpcyBleGNlcHRpb25hbGx5IHVubGlrZWx5LlxyXG4gICAqL1xyXG4gIE5lZ2xpZ2libGVMaWtlbGlob29kOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiTmVnbGlnaWJsZSBsaWtlbGlob29kXCIsXHJcbiAgICBjb2RlOiBcIm5lZ2xpZ2libGVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Jpc2stcHJvYmFiaWxpdHlcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBDb2RlcyByZXByZXNlbnRpbmcgdGhlIGxpa2VsaWhvb2Qgb2YgYSBwYXJ0aWN1bGFyIG91dGNvbWUgaW4gYSByaXNrIGFzc2Vzc21lbnQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSaXNrUHJvYmFiaWxpdHlDb2RpbmdUeXBlID0gdHlwZW9mIFJpc2tQcm9iYWJpbGl0eUNvZGluZ3M7XHJcbiJdfQ==