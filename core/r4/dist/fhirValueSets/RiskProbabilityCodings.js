// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/risk-probability|4.0.1
/**
 * Codes representing the likelihood of a particular outcome in a risk assessment.
 */
export const RiskProbabilityCodings = {
    /**
     * certain: The specified outcome is effectively guaranteed.
     */
    Certain: {
        display: "Certain",
        code: "certain",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    },
    /**
     * high: The specified outcome is more likely to occur than not.
     */
    HighLikelihood: {
        display: "High likelihood",
        code: "high",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    },
    /**
     * low: The specified outcome is possible but unlikely.
     */
    LowLikelihood: {
        display: "Low likelihood",
        code: "low",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    },
    /**
     * moderate: The specified outcome has a reasonable likelihood of occurrence.
     */
    ModerateLikelihood: {
        display: "Moderate likelihood",
        code: "moderate",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    },
    /**
     * negligible: The specified outcome is exceptionally unlikely.
     */
    NegligibleLikelihood: {
        display: "Negligible likelihood",
        code: "negligible",
        system: "http://terminology.hl7.org/CodeSystem/risk-probability",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmlza1Byb2JhYmlsaXR5Q29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvUmlza1Byb2JhYmlsaXR5Q29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxRUFBcUU7QUE4QnJFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsYUFBYSxFQUFFO1FBQ2IsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSx3REFBd0Q7S0FDakU7SUFDRDs7T0FFRztJQUNILGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHdEQUF3RDtLQUNqRTtJQUNEOztPQUVHO0lBQ0gsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUUsd0RBQXdEO0tBQ2pFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yaXNrLXByb2JhYmlsaXR5fDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ29kZXMgcmVwcmVzZW50aW5nIHRoZSBsaWtlbGlob29kIG9mIGEgcGFydGljdWxhciBvdXRjb21lIGluIGEgcmlzayBhc3Nlc3NtZW50LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmlza1Byb2JhYmlsaXR5Q29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjZXJ0YWluOiBUaGUgc3BlY2lmaWVkIG91dGNvbWUgaXMgZWZmZWN0aXZlbHkgZ3VhcmFudGVlZC5cclxuICAgKi9cclxuICBDZXJ0YWluOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGhpZ2g6IFRoZSBzcGVjaWZpZWQgb3V0Y29tZSBpcyBtb3JlIGxpa2VseSB0byBvY2N1ciB0aGFuIG5vdC5cclxuICAgKi9cclxuICBIaWdoTGlrZWxpaG9vZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBsb3c6IFRoZSBzcGVjaWZpZWQgb3V0Y29tZSBpcyBwb3NzaWJsZSBidXQgdW5saWtlbHkuXHJcbiAgICovXHJcbiAgTG93TGlrZWxpaG9vZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBtb2RlcmF0ZTogVGhlIHNwZWNpZmllZCBvdXRjb21lIGhhcyBhIHJlYXNvbmFibGUgbGlrZWxpaG9vZCBvZiBvY2N1cnJlbmNlLlxyXG4gICAqL1xyXG4gIE1vZGVyYXRlTGlrZWxpaG9vZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBuZWdsaWdpYmxlOiBUaGUgc3BlY2lmaWVkIG91dGNvbWUgaXMgZXhjZXB0aW9uYWxseSB1bmxpa2VseS5cclxuICAgKi9cclxuICBOZWdsaWdpYmxlTGlrZWxpaG9vZDogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvZGVzIHJlcHJlc2VudGluZyB0aGUgbGlrZWxpaG9vZCBvZiBhIHBhcnRpY3VsYXIgb3V0Y29tZSBpbiBhIHJpc2sgYXNzZXNzbWVudC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBSaXNrUHJvYmFiaWxpdHlDb2RpbmdzOlJpc2tQcm9iYWJpbGl0eUNvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY2VydGFpbjogVGhlIHNwZWNpZmllZCBvdXRjb21lIGlzIGVmZmVjdGl2ZWx5IGd1YXJhbnRlZWQuXHJcbiAgICovXHJcbiAgQ2VydGFpbjoge1xyXG4gICAgZGlzcGxheTogXCJDZXJ0YWluXCIsXHJcbiAgICBjb2RlOiBcImNlcnRhaW5cIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3Jpc2stcHJvYmFiaWxpdHlcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGhpZ2g6IFRoZSBzcGVjaWZpZWQgb3V0Y29tZSBpcyBtb3JlIGxpa2VseSB0byBvY2N1ciB0aGFuIG5vdC5cclxuICAgKi9cclxuICBIaWdoTGlrZWxpaG9vZDoge1xyXG4gICAgZGlzcGxheTogXCJIaWdoIGxpa2VsaWhvb2RcIixcclxuICAgIGNvZGU6IFwiaGlnaFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmlzay1wcm9iYWJpbGl0eVwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogbG93OiBUaGUgc3BlY2lmaWVkIG91dGNvbWUgaXMgcG9zc2libGUgYnV0IHVubGlrZWx5LlxyXG4gICAqL1xyXG4gIExvd0xpa2VsaWhvb2Q6IHtcclxuICAgIGRpc3BsYXk6IFwiTG93IGxpa2VsaWhvb2RcIixcclxuICAgIGNvZGU6IFwibG93XCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yaXNrLXByb2JhYmlsaXR5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBtb2RlcmF0ZTogVGhlIHNwZWNpZmllZCBvdXRjb21lIGhhcyBhIHJlYXNvbmFibGUgbGlrZWxpaG9vZCBvZiBvY2N1cnJlbmNlLlxyXG4gICAqL1xyXG4gIE1vZGVyYXRlTGlrZWxpaG9vZDoge1xyXG4gICAgZGlzcGxheTogXCJNb2RlcmF0ZSBsaWtlbGlob29kXCIsXHJcbiAgICBjb2RlOiBcIm1vZGVyYXRlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9yaXNrLXByb2JhYmlsaXR5XCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBuZWdsaWdpYmxlOiBUaGUgc3BlY2lmaWVkIG91dGNvbWUgaXMgZXhjZXB0aW9uYWxseSB1bmxpa2VseS5cclxuICAgKi9cclxuICBOZWdsaWdpYmxlTGlrZWxpaG9vZDoge1xyXG4gICAgZGlzcGxheTogXCJOZWdsaWdpYmxlIGxpa2VsaWhvb2RcIixcclxuICAgIGNvZGU6IFwibmVnbGlnaWJsZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vcmlzay1wcm9iYWJpbGl0eVwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==