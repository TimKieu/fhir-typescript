// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/synthesis-type|4.0.1
/**
 * Types of combining results from a body of evidence (eg. summary data meta-analysis).
 */
export const SynthesisTypeCodings = {
    /**
     * classification: An approach describing a body of evidence by categorically classifying individual studies (eg 3 studies showed beneft and 2 studied found no effect).
     */
    ClassifcationOfResults: {
        display: "classifcation of results",
        code: "classification",
        system: "http://terminology.hl7.org/CodeSystem/synthesis-type",
    },
    /**
     * combined-NMA: An composite meta-analysis derived from direct comparisons and indirect comparisons in a network meta-analysis.
     */
    CombinedDirectPlusIndirectNetworkMetaAnalysis: {
        display: "combined direct plus indirect network meta-analysis",
        code: "combined-NMA",
        system: "http://terminology.hl7.org/CodeSystem/synthesis-type",
    },
    /**
     * indirect-NMA: An indirect meta-analysis derived from 2 or more direct comparisons in a network meta-analysis.
     */
    IndirectNetworkMetaAnalysis: {
        display: "indirect network meta-analysis",
        code: "indirect-NMA",
        system: "http://terminology.hl7.org/CodeSystem/synthesis-type",
    },
    /**
     * IPD-MA: A meta-analysis of the individual participant data from individual studies or data sets.
     */
    IndividualPatientDataMetaAnalysis: {
        display: "individual patient data meta-analysis",
        code: "IPD-MA",
        system: "http://terminology.hl7.org/CodeSystem/synthesis-type",
    },
    /**
     * range: A range of results across a body of evidence.
     */
    RangeOfResults: {
        display: "range of results",
        code: "range",
        system: "http://terminology.hl7.org/CodeSystem/synthesis-type",
    },
    /**
     * std-MA: A meta-analysis of the summary data of estimates from individual studies or data sets.
     */
    SummaryDataMetaAnalysis: {
        display: "summary data meta-analysis",
        code: "std-MA",
        system: "http://terminology.hl7.org/CodeSystem/synthesis-type",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3ludGhlc2lzVHlwZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1N5bnRoZXNpc1R5cGVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1FQUFtRTtBQWtDbkU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBMkI7SUFDMUQ7O09BRUc7SUFDSCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsNkNBQTZDLEVBQUU7UUFDN0MsT0FBTyxFQUFFLHFEQUFxRDtRQUM5RCxJQUFJLEVBQUUsY0FBYztRQUNwQixNQUFNLEVBQUUsc0RBQXNEO0tBQy9EO0lBQ0Q7O09BRUc7SUFDSCwyQkFBMkIsRUFBRTtRQUMzQixPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLElBQUksRUFBRSxjQUFjO1FBQ3BCLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7SUFDRDs7T0FFRztJQUNILGlDQUFpQyxFQUFFO1FBQ2pDLE9BQU8sRUFBRSx1Q0FBdUM7UUFDaEQsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsc0RBQXNEO0tBQy9EO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLHNEQUFzRDtLQUMvRDtJQUNEOztPQUVHO0lBQ0gsdUJBQXVCLEVBQUU7UUFDdkIsT0FBTyxFQUFFLDRCQUE0QjtRQUNyQyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxzREFBc0Q7S0FDL0Q7Q0FDTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3N5bnRoZXNpcy10eXBlfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVHlwZXMgb2YgY29tYmluaW5nIHJlc3VsdHMgZnJvbSBhIGJvZHkgb2YgZXZpZGVuY2UgKGVnLiBzdW1tYXJ5IGRhdGEgbWV0YS1hbmFseXNpcykuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTeW50aGVzaXNUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjbGFzc2lmaWNhdGlvbjogQW4gYXBwcm9hY2ggZGVzY3JpYmluZyBhIGJvZHkgb2YgZXZpZGVuY2UgYnkgY2F0ZWdvcmljYWxseSBjbGFzc2lmeWluZyBpbmRpdmlkdWFsIHN0dWRpZXMgKGVnIDMgc3R1ZGllcyBzaG93ZWQgYmVuZWZ0IGFuZCAyIHN0dWRpZWQgZm91bmQgbm8gZWZmZWN0KS5cclxuICAgKi9cclxuICBDbGFzc2lmY2F0aW9uT2ZSZXN1bHRzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGNvbWJpbmVkLU5NQTogQW4gY29tcG9zaXRlIG1ldGEtYW5hbHlzaXMgZGVyaXZlZCBmcm9tIGRpcmVjdCBjb21wYXJpc29ucyBhbmQgaW5kaXJlY3QgY29tcGFyaXNvbnMgaW4gYSBuZXR3b3JrIG1ldGEtYW5hbHlzaXMuXHJcbiAgICovXHJcbiAgQ29tYmluZWREaXJlY3RQbHVzSW5kaXJlY3ROZXR3b3JrTWV0YUFuYWx5c2lzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluZGlyZWN0LU5NQTogQW4gaW5kaXJlY3QgbWV0YS1hbmFseXNpcyBkZXJpdmVkIGZyb20gMiBvciBtb3JlIGRpcmVjdCBjb21wYXJpc29ucyBpbiBhIG5ldHdvcmsgbWV0YS1hbmFseXNpcy5cclxuICAgKi9cclxuICBJbmRpcmVjdE5ldHdvcmtNZXRhQW5hbHlzaXM6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogSVBELU1BOiBBIG1ldGEtYW5hbHlzaXMgb2YgdGhlIGluZGl2aWR1YWwgcGFydGljaXBhbnQgZGF0YSBmcm9tIGluZGl2aWR1YWwgc3R1ZGllcyBvciBkYXRhIHNldHMuXHJcbiAgICovXHJcbiAgSW5kaXZpZHVhbFBhdGllbnREYXRhTWV0YUFuYWx5c2lzOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHJhbmdlOiBBIHJhbmdlIG9mIHJlc3VsdHMgYWNyb3NzIGEgYm9keSBvZiBldmlkZW5jZS5cclxuICAgKi9cclxuICBSYW5nZU9mUmVzdWx0czogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBzdGQtTUE6IEEgbWV0YS1hbmFseXNpcyBvZiB0aGUgc3VtbWFyeSBkYXRhIG9mIGVzdGltYXRlcyBmcm9tIGluZGl2aWR1YWwgc3R1ZGllcyBvciBkYXRhIHNldHMuXHJcbiAgICovXHJcbiAgU3VtbWFyeURhdGFNZXRhQW5hbHlzaXM6IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUeXBlcyBvZiBjb21iaW5pbmcgcmVzdWx0cyBmcm9tIGEgYm9keSBvZiBldmlkZW5jZSAoZWcuIHN1bW1hcnkgZGF0YSBtZXRhLWFuYWx5c2lzKS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTeW50aGVzaXNUeXBlQ29kaW5nczpTeW50aGVzaXNUeXBlQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBjbGFzc2lmaWNhdGlvbjogQW4gYXBwcm9hY2ggZGVzY3JpYmluZyBhIGJvZHkgb2YgZXZpZGVuY2UgYnkgY2F0ZWdvcmljYWxseSBjbGFzc2lmeWluZyBpbmRpdmlkdWFsIHN0dWRpZXMgKGVnIDMgc3R1ZGllcyBzaG93ZWQgYmVuZWZ0IGFuZCAyIHN0dWRpZWQgZm91bmQgbm8gZWZmZWN0KS5cclxuICAgKi9cclxuICBDbGFzc2lmY2F0aW9uT2ZSZXN1bHRzOiB7XHJcbiAgICBkaXNwbGF5OiBcImNsYXNzaWZjYXRpb24gb2YgcmVzdWx0c1wiLFxyXG4gICAgY29kZTogXCJjbGFzc2lmaWNhdGlvblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3ludGhlc2lzLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNvbWJpbmVkLU5NQTogQW4gY29tcG9zaXRlIG1ldGEtYW5hbHlzaXMgZGVyaXZlZCBmcm9tIGRpcmVjdCBjb21wYXJpc29ucyBhbmQgaW5kaXJlY3QgY29tcGFyaXNvbnMgaW4gYSBuZXR3b3JrIG1ldGEtYW5hbHlzaXMuXHJcbiAgICovXHJcbiAgQ29tYmluZWREaXJlY3RQbHVzSW5kaXJlY3ROZXR3b3JrTWV0YUFuYWx5c2lzOiB7XHJcbiAgICBkaXNwbGF5OiBcImNvbWJpbmVkIGRpcmVjdCBwbHVzIGluZGlyZWN0IG5ldHdvcmsgbWV0YS1hbmFseXNpc1wiLFxyXG4gICAgY29kZTogXCJjb21iaW5lZC1OTUFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N5bnRoZXNpcy10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbmRpcmVjdC1OTUE6IEFuIGluZGlyZWN0IG1ldGEtYW5hbHlzaXMgZGVyaXZlZCBmcm9tIDIgb3IgbW9yZSBkaXJlY3QgY29tcGFyaXNvbnMgaW4gYSBuZXR3b3JrIG1ldGEtYW5hbHlzaXMuXHJcbiAgICovXHJcbiAgSW5kaXJlY3ROZXR3b3JrTWV0YUFuYWx5c2lzOiB7XHJcbiAgICBkaXNwbGF5OiBcImluZGlyZWN0IG5ldHdvcmsgbWV0YS1hbmFseXNpc1wiLFxyXG4gICAgY29kZTogXCJpbmRpcmVjdC1OTUFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N5bnRoZXNpcy10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBJUEQtTUE6IEEgbWV0YS1hbmFseXNpcyBvZiB0aGUgaW5kaXZpZHVhbCBwYXJ0aWNpcGFudCBkYXRhIGZyb20gaW5kaXZpZHVhbCBzdHVkaWVzIG9yIGRhdGEgc2V0cy5cclxuICAgKi9cclxuICBJbmRpdmlkdWFsUGF0aWVudERhdGFNZXRhQW5hbHlzaXM6IHtcclxuICAgIGRpc3BsYXk6IFwiaW5kaXZpZHVhbCBwYXRpZW50IGRhdGEgbWV0YS1hbmFseXNpc1wiLFxyXG4gICAgY29kZTogXCJJUEQtTUFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N5bnRoZXNpcy10eXBlXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiByYW5nZTogQSByYW5nZSBvZiByZXN1bHRzIGFjcm9zcyBhIGJvZHkgb2YgZXZpZGVuY2UuXHJcbiAgICovXHJcbiAgUmFuZ2VPZlJlc3VsdHM6IHtcclxuICAgIGRpc3BsYXk6IFwicmFuZ2Ugb2YgcmVzdWx0c1wiLFxyXG4gICAgY29kZTogXCJyYW5nZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3ludGhlc2lzLXR5cGVcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHN0ZC1NQTogQSBtZXRhLWFuYWx5c2lzIG9mIHRoZSBzdW1tYXJ5IGRhdGEgb2YgZXN0aW1hdGVzIGZyb20gaW5kaXZpZHVhbCBzdHVkaWVzIG9yIGRhdGEgc2V0cy5cclxuICAgKi9cclxuICBTdW1tYXJ5RGF0YU1ldGFBbmFseXNpczoge1xyXG4gICAgZGlzcGxheTogXCJzdW1tYXJ5IGRhdGEgbWV0YS1hbmFseXNpc1wiLFxyXG4gICAgY29kZTogXCJzdGQtTUFcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N5bnRoZXNpcy10eXBlXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19