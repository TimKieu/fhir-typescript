// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/adverse-event-outcome|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * TODO (and should this be required?).
 */
export const AdverseEventOutcomeCodings = {
    /**
     * Code: fatal
     */
    Fatal: new Coding({
        display: "Fatal",
        code: "fatal",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-outcome",
    }),
    /**
     * Code: ongoing
     */
    Ongoing: new Coding({
        display: "Ongoing",
        code: "ongoing",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-outcome",
    }),
    /**
     * Code: recovering
     */
    Recovering: new Coding({
        display: "Recovering",
        code: "recovering",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-outcome",
    }),
    /**
     * Code: resolved
     */
    Resolved: new Coding({
        display: "Resolved",
        code: "resolved",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-outcome",
    }),
    /**
     * Code: resolvedWithSequelae
     */
    ResolvedWithSequelae: new Coding({
        display: "Resolved with Sequelae",
        code: "resolvedWithSequelae",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-outcome",
    }),
    /**
     * Code: unknown
     */
    Unknown: new Coding({
        display: "Unknown",
        code: "unknown",
        system: "http://terminology.hl7.org/CodeSystem/adverse-event-outcome",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWR2ZXJzZUV2ZW50T3V0Y29tZUNvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0FkdmVyc2VFdmVudE91dGNvbWVDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDBFQUEwRTtBQUUxRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRztJQUN4Qzs7T0FFRztJQUNILEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSw2REFBNkQ7S0FDdEUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLDZEQUE2RDtLQUN0RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxVQUFVLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsTUFBTSxFQUFFLDZEQUE2RDtLQUN0RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbkIsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDZEQUE2RDtLQUN0RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxvQkFBb0IsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMvQixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLDZEQUE2RDtLQUN0RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsNkRBQTZEO0tBQ3RFLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FkdmVyc2UtZXZlbnQtb3V0Y29tZXw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogVE9ETyAoYW5kIHNob3VsZCB0aGlzIGJlIHJlcXVpcmVkPykuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQWR2ZXJzZUV2ZW50T3V0Y29tZUNvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29kZTogZmF0YWxcclxuICAgKi9cclxuICBGYXRhbDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIkZhdGFsXCIsXHJcbiAgICBjb2RlOiBcImZhdGFsXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hZHZlcnNlLWV2ZW50LW91dGNvbWVcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiBDb2RlOiBvbmdvaW5nXHJcbiAgICovXHJcbiAgT25nb2luZzogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk9uZ29pbmdcIixcclxuICAgIGNvZGU6IFwib25nb2luZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWR2ZXJzZS1ldmVudC1vdXRjb21lXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogcmVjb3ZlcmluZ1xyXG4gICAqL1xyXG4gIFJlY292ZXJpbmc6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZWNvdmVyaW5nXCIsXHJcbiAgICBjb2RlOiBcInJlY292ZXJpbmdcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FkdmVyc2UtZXZlbnQtb3V0Y29tZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IHJlc29sdmVkXHJcbiAgICovXHJcbiAgUmVzb2x2ZWQ6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJSZXNvbHZlZFwiLFxyXG4gICAgY29kZTogXCJyZXNvbHZlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWR2ZXJzZS1ldmVudC1vdXRjb21lXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogQ29kZTogcmVzb2x2ZWRXaXRoU2VxdWVsYWVcclxuICAgKi9cclxuICBSZXNvbHZlZFdpdGhTZXF1ZWxhZTogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlJlc29sdmVkIHdpdGggU2VxdWVsYWVcIixcclxuICAgIGNvZGU6IFwicmVzb2x2ZWRXaXRoU2VxdWVsYWVcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FkdmVyc2UtZXZlbnQtb3V0Y29tZVwiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIENvZGU6IHVua25vd25cclxuICAgKi9cclxuICBVbmtub3duOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiVW5rbm93blwiLFxyXG4gICAgY29kZTogXCJ1bmtub3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hZHZlcnNlLWV2ZW50LW91dGNvbWVcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBUT0RPIChhbmQgc2hvdWxkIHRoaXMgYmUgcmVxdWlyZWQ/KS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFkdmVyc2VFdmVudE91dGNvbWVDb2RpbmdUeXBlID0gdHlwZW9mIEFkdmVyc2VFdmVudE91dGNvbWVDb2RpbmdzO1xyXG4iXX0=