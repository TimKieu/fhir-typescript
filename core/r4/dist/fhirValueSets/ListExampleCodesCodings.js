// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/list-example-codes|4.0.1
import { Coding } from '../fhir/Coding.js';
/**
 * Example use codes for the List resource - typical kinds of use.
 */
export const ListExampleCodesCodings = {
    /**
     * adverserxns: A list of part adverse reactions.
     */
    AdverseReactions: new Coding({
        display: "Adverse Reactions",
        code: "adverserxns",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * alerts: A list of alerts for the patient.
     */
    Alerts: new Coding({
        display: "Alerts",
        code: "alerts",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * allergies: A list of Allergies for the patient.
     */
    Allergies: new Coding({
        display: "Allergies",
        code: "allergies",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * medications: A list of medication statements for the patient.
     */
    MedicationList: new Coding({
        display: "Medication List",
        code: "medications",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * plans: A set of care plans that apply in a particular context of care.
     */
    CarePlans: new Coding({
        display: "Care Plans",
        code: "plans",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * problems: A list of problems that the patient is known of have (or have had in the past).
     */
    ProblemList: new Coding({
        display: "Problem List",
        code: "problems",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * protocols: A set of protocols to be followed.
     */
    Protocols: new Coding({
        display: "Protocols",
        code: "protocols",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * waiting: A list of items waiting for an event (perhaps a surgical patient waiting list).
     */
    WaitingList: new Coding({
        display: "Waiting List",
        code: "waiting",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
    /**
     * worklist: A list of items that constitute a set of work to be performed (typically this code would be specialized for more specific uses, such as a ward round list).
     */
    Worklist: new Coding({
        display: "Worklist",
        code: "worklist",
        system: "http://terminology.hl7.org/CodeSystem/list-example-use-codes",
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEV4YW1wbGVDb2Rlc0NvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL0xpc3RFeGFtcGxlQ29kZXNDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLHVFQUF1RTtBQUV2RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFMUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNyQzs7T0FFRztJQUNILGdCQUFnQixFQUFFLElBQUksTUFBTSxDQUFDO1FBQzNCLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsOERBQThEO0tBQ3ZFLENBQUM7SUFDRjs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFLENBQUM7SUFDRjs7T0FFRztJQUNILGNBQWMsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUN6QixPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSw4REFBOEQ7S0FDdkUsQ0FBQztJQUNGOztPQUVHO0lBQ0gsU0FBUyxFQUFFLElBQUksTUFBTSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxTQUFTLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDcEIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLDhEQUE4RDtLQUN2RSxDQUFDO0lBQ0Y7O09BRUc7SUFDSCxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFLENBQUM7SUFDRjs7T0FFRztJQUNILFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUNuQixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsOERBQThEO0tBQ3ZFLENBQUM7Q0FDTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFZhbHVlU2V0OiBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2xpc3QtZXhhbXBsZS1jb2Rlc3w0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogRXhhbXBsZSB1c2UgY29kZXMgZm9yIHRoZSBMaXN0IHJlc291cmNlIC0gdHlwaWNhbCBraW5kcyBvZiB1c2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTGlzdEV4YW1wbGVDb2Rlc0NvZGluZ3MgPSB7XHJcbiAgLyoqXHJcbiAgICogYWR2ZXJzZXJ4bnM6IEEgbGlzdCBvZiBwYXJ0IGFkdmVyc2UgcmVhY3Rpb25zLlxyXG4gICAqL1xyXG4gIEFkdmVyc2VSZWFjdGlvbnM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJBZHZlcnNlIFJlYWN0aW9uc1wiLFxyXG4gICAgY29kZTogXCJhZHZlcnNlcnhuc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGFsZXJ0czogQSBsaXN0IG9mIGFsZXJ0cyBmb3IgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgQWxlcnRzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWxlcnRzXCIsXHJcbiAgICBjb2RlOiBcImFsZXJ0c1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIGFsbGVyZ2llczogQSBsaXN0IG9mIEFsbGVyZ2llcyBmb3IgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgQWxsZXJnaWVzOiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiQWxsZXJnaWVzXCIsXHJcbiAgICBjb2RlOiBcImFsbGVyZ2llc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIG1lZGljYXRpb25zOiBBIGxpc3Qgb2YgbWVkaWNhdGlvbiBzdGF0ZW1lbnRzIGZvciB0aGUgcGF0aWVudC5cclxuICAgKi9cclxuICBNZWRpY2F0aW9uTGlzdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIk1lZGljYXRpb24gTGlzdFwiLFxyXG4gICAgY29kZTogXCJtZWRpY2F0aW9uc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHBsYW5zOiBBIHNldCBvZiBjYXJlIHBsYW5zIHRoYXQgYXBwbHkgaW4gYSBwYXJ0aWN1bGFyIGNvbnRleHQgb2YgY2FyZS5cclxuICAgKi9cclxuICBDYXJlUGxhbnM6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJDYXJlIFBsYW5zXCIsXHJcbiAgICBjb2RlOiBcInBsYW5zXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9saXN0LWV4YW1wbGUtdXNlLWNvZGVzXCIsXHJcbiAgfSksXHJcbiAgLyoqXHJcbiAgICogcHJvYmxlbXM6IEEgbGlzdCBvZiBwcm9ibGVtcyB0aGF0IHRoZSBwYXRpZW50IGlzIGtub3duIG9mIGhhdmUgKG9yIGhhdmUgaGFkIGluIHRoZSBwYXN0KS5cclxuICAgKi9cclxuICBQcm9ibGVtTGlzdDogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlByb2JsZW0gTGlzdFwiLFxyXG4gICAgY29kZTogXCJwcm9ibGVtc1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHByb3RvY29sczogQSBzZXQgb2YgcHJvdG9jb2xzIHRvIGJlIGZvbGxvd2VkLlxyXG4gICAqL1xyXG4gIFByb3RvY29sczogbmV3IENvZGluZyh7XHJcbiAgICBkaXNwbGF5OiBcIlByb3RvY29sc1wiLFxyXG4gICAgY29kZTogXCJwcm90b2NvbHNcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3QtZXhhbXBsZS11c2UtY29kZXNcIixcclxuICB9KSxcclxuICAvKipcclxuICAgKiB3YWl0aW5nOiBBIGxpc3Qgb2YgaXRlbXMgd2FpdGluZyBmb3IgYW4gZXZlbnQgKHBlcmhhcHMgYSBzdXJnaWNhbCBwYXRpZW50IHdhaXRpbmcgbGlzdCkuXHJcbiAgICovXHJcbiAgV2FpdGluZ0xpc3Q6IG5ldyBDb2Rpbmcoe1xyXG4gICAgZGlzcGxheTogXCJXYWl0aW5nIExpc3RcIixcclxuICAgIGNvZGU6IFwid2FpdGluZ1wiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vbGlzdC1leGFtcGxlLXVzZS1jb2Rlc1wiLFxyXG4gIH0pLFxyXG4gIC8qKlxyXG4gICAqIHdvcmtsaXN0OiBBIGxpc3Qgb2YgaXRlbXMgdGhhdCBjb25zdGl0dXRlIGEgc2V0IG9mIHdvcmsgdG8gYmUgcGVyZm9ybWVkICh0eXBpY2FsbHkgdGhpcyBjb2RlIHdvdWxkIGJlIHNwZWNpYWxpemVkIGZvciBtb3JlIHNwZWNpZmljIHVzZXMsIHN1Y2ggYXMgYSB3YXJkIHJvdW5kIGxpc3QpLlxyXG4gICAqL1xyXG4gIFdvcmtsaXN0OiBuZXcgQ29kaW5nKHtcclxuICAgIGRpc3BsYXk6IFwiV29ya2xpc3RcIixcclxuICAgIGNvZGU6IFwid29ya2xpc3RcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2xpc3QtZXhhbXBsZS11c2UtY29kZXNcIixcclxuICB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8qKlxyXG4gKiBFeGFtcGxlIHVzZSBjb2RlcyBmb3IgdGhlIExpc3QgcmVzb3VyY2UgLSB0eXBpY2FsIGtpbmRzIG9mIHVzZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIExpc3RFeGFtcGxlQ29kZXNDb2RpbmdUeXBlID0gdHlwZW9mIExpc3RFeGFtcGxlQ29kZXNDb2RpbmdzO1xyXG4iXX0=