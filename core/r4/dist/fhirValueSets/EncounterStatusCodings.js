// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/encounter-status|4.0.1
/**
 * Current state of the encounter.
 */
export const EncounterStatusCodings = {
    /**
     * arrived: The Patient is present for the encounter, however is not currently meeting with a practitioner.
     */
    Arrived: {
        display: "Arrived",
        code: "arrived",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * cancelled: The Encounter has ended before it has begun.
     */
    Cancelled: {
        display: "Cancelled",
        code: "cancelled",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * entered-in-error: This instance should not have been part of this patient's medical record.
     */
    EnteredInError: {
        display: "Entered in Error",
        code: "entered-in-error",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * finished: The Encounter has ended.
     */
    Finished: {
        display: "Finished",
        code: "finished",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * in-progress: The Encounter has begun and the patient is present / the practitioner and the patient are meeting.
     */
    InProgress: {
        display: "In Progress",
        code: "in-progress",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * onleave: The Encounter has begun, but the patient is temporarily on leave.
     */
    OnLeave: {
        display: "On Leave",
        code: "onleave",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * planned: The Encounter has not yet started.
     */
    Planned: {
        display: "Planned",
        code: "planned",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * triaged: The patient has been assessed for the priority of their treatment based on the severity of their condition.
     */
    Triaged: {
        display: "Triaged",
        code: "triaged",
        system: "http://hl7.org/fhir/encounter-status",
    },
    /**
     * unknown: The encounter status is unknown. Note that "unknown" is a value of last resort and every attempt should be made to provide a meaningful value other than "unknown".
     */
    Unknown: {
        display: "Unknown",
        code: "unknown",
        system: "http://hl7.org/fhir/encounter-status",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyU3RhdHVzQ29kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJWYWx1ZVNldHMvRW5jb3VudGVyU3RhdHVzQ29kaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxRUFBcUU7QUE4Q3JFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTZCO0lBQzlEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0lBQ0Q7O09BRUc7SUFDSCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsV0FBVztRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0lBQ0Q7O09BRUc7SUFDSCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0lBQ0Q7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsU0FBUztRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSxzQ0FBc0M7S0FDL0M7SUFDRDs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLHNDQUFzQztLQUMvQztJQUNEOztPQUVHO0lBQ0gsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLFNBQVM7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsc0NBQXNDO0tBQy9DO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9lbmNvdW50ZXItc3RhdHVzfDQuMC4xXHJcblxyXG5pbXBvcnQgeyBDb2RpbmdBcmdzIH0gZnJvbSAnLi4vZmhpci9Db2RpbmcuanMnXHJcblxyXG4vKipcclxuICogQ3VycmVudCBzdGF0ZSBvZiB0aGUgZW5jb3VudGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRW5jb3VudGVyU3RhdHVzQ29kaW5nVHlwZSA9IHtcclxuICAvKipcclxuICAgKiBhcnJpdmVkOiBUaGUgUGF0aWVudCBpcyBwcmVzZW50IGZvciB0aGUgZW5jb3VudGVyLCBob3dldmVyIGlzIG5vdCBjdXJyZW50bHkgbWVldGluZyB3aXRoIGEgcHJhY3RpdGlvbmVyLlxyXG4gICAqL1xyXG4gIEFycml2ZWQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY2FuY2VsbGVkOiBUaGUgRW5jb3VudGVyIGhhcyBlbmRlZCBiZWZvcmUgaXQgaGFzIGJlZ3VuLlxyXG4gICAqL1xyXG4gIENhbmNlbGxlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBlbnRlcmVkLWluLWVycm9yOiBUaGlzIGluc3RhbmNlIHNob3VsZCBub3QgaGF2ZSBiZWVuIHBhcnQgb2YgdGhpcyBwYXRpZW50J3MgbWVkaWNhbCByZWNvcmQuXHJcbiAgICovXHJcbiAgRW50ZXJlZEluRXJyb3I6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogZmluaXNoZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIGVuZGVkLlxyXG4gICAqL1xyXG4gIEZpbmlzaGVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluLXByb2dyZXNzOiBUaGUgRW5jb3VudGVyIGhhcyBiZWd1biBhbmQgdGhlIHBhdGllbnQgaXMgcHJlc2VudCAvIHRoZSBwcmFjdGl0aW9uZXIgYW5kIHRoZSBwYXRpZW50IGFyZSBtZWV0aW5nLlxyXG4gICAqL1xyXG4gIEluUHJvZ3Jlc3M6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogb25sZWF2ZTogVGhlIEVuY291bnRlciBoYXMgYmVndW4sIGJ1dCB0aGUgcGF0aWVudCBpcyB0ZW1wb3JhcmlseSBvbiBsZWF2ZS5cclxuICAgKi9cclxuICBPbkxlYXZlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBsYW5uZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIG5vdCB5ZXQgc3RhcnRlZC5cclxuICAgKi9cclxuICBQbGFubmVkOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHRyaWFnZWQ6IFRoZSBwYXRpZW50IGhhcyBiZWVuIGFzc2Vzc2VkIGZvciB0aGUgcHJpb3JpdHkgb2YgdGhlaXIgdHJlYXRtZW50IGJhc2VkIG9uIHRoZSBzZXZlcml0eSBvZiB0aGVpciBjb25kaXRpb24uXHJcbiAgICovXHJcbiAgVHJpYWdlZDogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgZW5jb3VudGVyIHN0YXR1cyBpcyB1bmtub3duLiBOb3RlIHRoYXQgXCJ1bmtub3duXCIgaXMgYSB2YWx1ZSBvZiBsYXN0IHJlc29ydCBhbmQgZXZlcnkgYXR0ZW1wdCBzaG91bGQgYmUgbWFkZSB0byBwcm92aWRlIGEgbWVhbmluZ2Z1bCB2YWx1ZSBvdGhlciB0aGFuIFwidW5rbm93blwiLlxyXG4gICAqL1xyXG4gIFVua25vd246IENvZGluZ0FyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDdXJyZW50IHN0YXRlIG9mIHRoZSBlbmNvdW50ZXIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRW5jb3VudGVyU3RhdHVzQ29kaW5nczpFbmNvdW50ZXJTdGF0dXNDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGFycml2ZWQ6IFRoZSBQYXRpZW50IGlzIHByZXNlbnQgZm9yIHRoZSBlbmNvdW50ZXIsIGhvd2V2ZXIgaXMgbm90IGN1cnJlbnRseSBtZWV0aW5nIHdpdGggYSBwcmFjdGl0aW9uZXIuXHJcbiAgICovXHJcbiAgQXJyaXZlZDoge1xyXG4gICAgZGlzcGxheTogXCJBcnJpdmVkXCIsXHJcbiAgICBjb2RlOiBcImFycml2ZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vaGw3Lm9yZy9maGlyL2VuY291bnRlci1zdGF0dXNcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGNhbmNlbGxlZDogVGhlIEVuY291bnRlciBoYXMgZW5kZWQgYmVmb3JlIGl0IGhhcyBiZWd1bi5cclxuICAgKi9cclxuICBDYW5jZWxsZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiQ2FuY2VsbGVkXCIsXHJcbiAgICBjb2RlOiBcImNhbmNlbGxlZFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZW50ZXJlZC1pbi1lcnJvcjogVGhpcyBpbnN0YW5jZSBzaG91bGQgbm90IGhhdmUgYmVlbiBwYXJ0IG9mIHRoaXMgcGF0aWVudCdzIG1lZGljYWwgcmVjb3JkLlxyXG4gICAqL1xyXG4gIEVudGVyZWRJbkVycm9yOiB7XHJcbiAgICBkaXNwbGF5OiBcIkVudGVyZWQgaW4gRXJyb3JcIixcclxuICAgIGNvZGU6IFwiZW50ZXJlZC1pbi1lcnJvclwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogZmluaXNoZWQ6IFRoZSBFbmNvdW50ZXIgaGFzIGVuZGVkLlxyXG4gICAqL1xyXG4gIEZpbmlzaGVkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkZpbmlzaGVkXCIsXHJcbiAgICBjb2RlOiBcImZpbmlzaGVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBpbi1wcm9ncmVzczogVGhlIEVuY291bnRlciBoYXMgYmVndW4gYW5kIHRoZSBwYXRpZW50IGlzIHByZXNlbnQgLyB0aGUgcHJhY3RpdGlvbmVyIGFuZCB0aGUgcGF0aWVudCBhcmUgbWVldGluZy5cclxuICAgKi9cclxuICBJblByb2dyZXNzOiB7XHJcbiAgICBkaXNwbGF5OiBcIkluIFByb2dyZXNzXCIsXHJcbiAgICBjb2RlOiBcImluLXByb2dyZXNzXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvbmxlYXZlOiBUaGUgRW5jb3VudGVyIGhhcyBiZWd1biwgYnV0IHRoZSBwYXRpZW50IGlzIHRlbXBvcmFyaWx5IG9uIGxlYXZlLlxyXG4gICAqL1xyXG4gIE9uTGVhdmU6IHtcclxuICAgIGRpc3BsYXk6IFwiT24gTGVhdmVcIixcclxuICAgIGNvZGU6IFwib25sZWF2ZVwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly9obDcub3JnL2ZoaXIvZW5jb3VudGVyLXN0YXR1c1wiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZDogVGhlIEVuY291bnRlciBoYXMgbm90IHlldCBzdGFydGVkLlxyXG4gICAqL1xyXG4gIFBsYW5uZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUGxhbm5lZFwiLFxyXG4gICAgY29kZTogXCJwbGFubmVkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB0cmlhZ2VkOiBUaGUgcGF0aWVudCBoYXMgYmVlbiBhc3Nlc3NlZCBmb3IgdGhlIHByaW9yaXR5IG9mIHRoZWlyIHRyZWF0bWVudCBiYXNlZCBvbiB0aGUgc2V2ZXJpdHkgb2YgdGhlaXIgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIFRyaWFnZWQ6IHtcclxuICAgIGRpc3BsYXk6IFwiVHJpYWdlZFwiLFxyXG4gICAgY29kZTogXCJ0cmlhZ2VkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiB1bmtub3duOiBUaGUgZW5jb3VudGVyIHN0YXR1cyBpcyB1bmtub3duLiBOb3RlIHRoYXQgXCJ1bmtub3duXCIgaXMgYSB2YWx1ZSBvZiBsYXN0IHJlc29ydCBhbmQgZXZlcnkgYXR0ZW1wdCBzaG91bGQgYmUgbWFkZSB0byBwcm92aWRlIGEgbWVhbmluZ2Z1bCB2YWx1ZSBvdGhlciB0aGFuIFwidW5rbm93blwiLlxyXG4gICAqL1xyXG4gIFVua25vd246IHtcclxuICAgIGRpc3BsYXk6IFwiVW5rbm93blwiLFxyXG4gICAgY29kZTogXCJ1bmtub3duXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL2hsNy5vcmcvZmhpci9lbmNvdW50ZXItc3RhdHVzXCIsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuIl19