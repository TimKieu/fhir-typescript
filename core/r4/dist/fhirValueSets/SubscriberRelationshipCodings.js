// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ValueSet: http://hl7.org/fhir/ValueSet/subscriber-relationship|4.0.1
/**
 * This value set includes codes for the relationship between the Subscriber and the Beneficiary (insured/covered party/patient).
 */
export const SubscriberRelationshipCodings = {
    /**
     * child: The Beneficiary is a child of the Subscriber
     */
    Child: {
        display: "Child",
        code: "child",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * common: The Beneficiary is a common law spouse or equivalent of the Subscriber
     */
    CommonLawSpouse: {
        display: "Common Law Spouse",
        code: "common",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * injured: The Beneficiary is covered under insurance of the subscriber due to an injury.
     */
    InjuredParty: {
        display: "Injured Party",
        code: "injured",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * other: The Beneficiary has some other relationship the Subscriber
     */
    Other: {
        display: "Other",
        code: "other",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * parent: The Beneficiary is a parent of the Subscriber
     */
    Parent: {
        display: "Parent",
        code: "parent",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * self: The Beneficiary is the Subscriber
     */
    Self: {
        display: "Self",
        code: "self",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
    /**
     * spouse: The Beneficiary is a spouse or equivalent of the Subscriber
     */
    Spouse: {
        display: "Spouse",
        code: "spouse",
        system: "http://terminology.hl7.org/CodeSystem/subscriber-relationship",
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Vic2NyaWJlclJlbGF0aW9uc2hpcENvZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyVmFsdWVTZXRzL1N1YnNjcmliZXJSZWxhdGlvbnNoaXBDb2RpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDRFQUE0RTtBQXNDNUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBb0M7SUFDNUU7O09BRUc7SUFDSCxLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSwrREFBK0Q7S0FDeEU7SUFDRDs7T0FFRztJQUNILGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsK0RBQStEO0tBQ3hFO0lBQ0Q7O09BRUc7SUFDSCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsU0FBUztRQUNmLE1BQU0sRUFBRSwrREFBK0Q7S0FDeEU7SUFDRDs7T0FFRztJQUNILEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLCtEQUErRDtLQUN4RTtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsK0RBQStEO0tBQ3hFO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLCtEQUErRDtLQUN4RTtJQUNEOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLFFBQVE7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsK0RBQStEO0tBQ3hFO0NBQ08sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBWYWx1ZVNldDogaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9zdWJzY3JpYmVyLXJlbGF0aW9uc2hpcHw0LjAuMVxyXG5cclxuaW1wb3J0IHsgQ29kaW5nQXJncyB9IGZyb20gJy4uL2ZoaXIvQ29kaW5nLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIGNvZGVzIGZvciB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIFN1YnNjcmliZXIgYW5kIHRoZSBCZW5lZmljaWFyeSAoaW5zdXJlZC9jb3ZlcmVkIHBhcnR5L3BhdGllbnQpLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3Vic2NyaWJlclJlbGF0aW9uc2hpcENvZGluZ1R5cGUgPSB7XHJcbiAgLyoqXHJcbiAgICogY2hpbGQ6IFRoZSBCZW5lZmljaWFyeSBpcyBhIGNoaWxkIG9mIHRoZSBTdWJzY3JpYmVyXHJcbiAgICovXHJcbiAgQ2hpbGQ6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogY29tbW9uOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBjb21tb24gbGF3IHNwb3VzZSBvciBlcXVpdmFsZW50IG9mIHRoZSBTdWJzY3JpYmVyXHJcbiAgICovXHJcbiAgQ29tbW9uTGF3U3BvdXNlOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIGluanVyZWQ6IFRoZSBCZW5lZmljaWFyeSBpcyBjb3ZlcmVkIHVuZGVyIGluc3VyYW5jZSBvZiB0aGUgc3Vic2NyaWJlciBkdWUgdG8gYW4gaW5qdXJ5LlxyXG4gICAqL1xyXG4gIEluanVyZWRQYXJ0eTogQ29kaW5nQXJncztcclxuICAvKipcclxuICAgKiBvdGhlcjogVGhlIEJlbmVmaWNpYXJ5IGhhcyBzb21lIG90aGVyIHJlbGF0aW9uc2hpcCB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIE90aGVyOiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHBhcmVudDogVGhlIEJlbmVmaWNpYXJ5IGlzIGEgcGFyZW50IG9mIHRoZSBTdWJzY3JpYmVyXHJcbiAgICovXHJcbiAgUGFyZW50OiBDb2RpbmdBcmdzO1xyXG4gIC8qKlxyXG4gICAqIHNlbGY6IFRoZSBCZW5lZmljaWFyeSBpcyB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIFNlbGY6IENvZGluZ0FyZ3M7XHJcbiAgLyoqXHJcbiAgICogc3BvdXNlOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBzcG91c2Ugb3IgZXF1aXZhbGVudCBvZiB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIFNwb3VzZTogQ29kaW5nQXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmFsdWUgc2V0IGluY2x1ZGVzIGNvZGVzIGZvciB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIFN1YnNjcmliZXIgYW5kIHRoZSBCZW5lZmljaWFyeSAoaW5zdXJlZC9jb3ZlcmVkIHBhcnR5L3BhdGllbnQpLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFN1YnNjcmliZXJSZWxhdGlvbnNoaXBDb2RpbmdzOlN1YnNjcmliZXJSZWxhdGlvbnNoaXBDb2RpbmdUeXBlID0ge1xyXG4gIC8qKlxyXG4gICAqIGNoaWxkOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBjaGlsZCBvZiB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIENoaWxkOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNoaWxkXCIsXHJcbiAgICBjb2RlOiBcImNoaWxkXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdWJzY3JpYmVyLXJlbGF0aW9uc2hpcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogY29tbW9uOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBjb21tb24gbGF3IHNwb3VzZSBvciBlcXVpdmFsZW50IG9mIHRoZSBTdWJzY3JpYmVyXHJcbiAgICovXHJcbiAgQ29tbW9uTGF3U3BvdXNlOiB7XHJcbiAgICBkaXNwbGF5OiBcIkNvbW1vbiBMYXcgU3BvdXNlXCIsXHJcbiAgICBjb2RlOiBcImNvbW1vblwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3Vic2NyaWJlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIGluanVyZWQ6IFRoZSBCZW5lZmljaWFyeSBpcyBjb3ZlcmVkIHVuZGVyIGluc3VyYW5jZSBvZiB0aGUgc3Vic2NyaWJlciBkdWUgdG8gYW4gaW5qdXJ5LlxyXG4gICAqL1xyXG4gIEluanVyZWRQYXJ0eToge1xyXG4gICAgZGlzcGxheTogXCJJbmp1cmVkIFBhcnR5XCIsXHJcbiAgICBjb2RlOiBcImluanVyZWRcIixcclxuICAgIHN5c3RlbTogXCJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3N1YnNjcmliZXItcmVsYXRpb25zaGlwXCIsXHJcbiAgfSxcclxuICAvKipcclxuICAgKiBvdGhlcjogVGhlIEJlbmVmaWNpYXJ5IGhhcyBzb21lIG90aGVyIHJlbGF0aW9uc2hpcCB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIE90aGVyOiB7XHJcbiAgICBkaXNwbGF5OiBcIk90aGVyXCIsXHJcbiAgICBjb2RlOiBcIm90aGVyXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdWJzY3JpYmVyLXJlbGF0aW9uc2hpcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogcGFyZW50OiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBwYXJlbnQgb2YgdGhlIFN1YnNjcmliZXJcclxuICAgKi9cclxuICBQYXJlbnQ6IHtcclxuICAgIGRpc3BsYXk6IFwiUGFyZW50XCIsXHJcbiAgICBjb2RlOiBcInBhcmVudFwiLFxyXG4gICAgc3lzdGVtOiBcImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vc3Vic2NyaWJlci1yZWxhdGlvbnNoaXBcIixcclxuICB9LFxyXG4gIC8qKlxyXG4gICAqIHNlbGY6IFRoZSBCZW5lZmljaWFyeSBpcyB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIFNlbGY6IHtcclxuICAgIGRpc3BsYXk6IFwiU2VsZlwiLFxyXG4gICAgY29kZTogXCJzZWxmXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdWJzY3JpYmVyLXJlbGF0aW9uc2hpcFwiLFxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICogc3BvdXNlOiBUaGUgQmVuZWZpY2lhcnkgaXMgYSBzcG91c2Ugb3IgZXF1aXZhbGVudCBvZiB0aGUgU3Vic2NyaWJlclxyXG4gICAqL1xyXG4gIFNwb3VzZToge1xyXG4gICAgZGlzcGxheTogXCJTcG91c2VcIixcclxuICAgIGNvZGU6IFwic3BvdXNlXCIsXHJcbiAgICBzeXN0ZW06IFwiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9zdWJzY3JpYmVyLXJlbGF0aW9uc2hpcFwiLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcbiJdfQ==