// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
import { FhirBase } from './fhir/FhirBase.js';
import { FhirPrimitive } from './fhir/FhirPrimitive.js';
import { FhirBase64Binary } from './fhir/FhirBase64Binary.js';
import { FhirBoolean } from './fhir/FhirBoolean.js';
import { FhirCanonical } from './fhir/FhirCanonical.js';
import { FhirCode } from './fhir/FhirCode.js';
import { FhirDate } from './fhir/FhirDate.js';
import { FhirDateTime } from './fhir/FhirDateTime.js';
import { FhirDecimal } from './fhir/FhirDecimal.js';
import { FhirId } from './fhir/FhirId.js';
import { FhirInstant } from './fhir/FhirInstant.js';
import { FhirInteger } from './fhir/FhirInteger.js';
import { FhirMarkdown } from './fhir/FhirMarkdown.js';
import { FhirOid } from './fhir/FhirOid.js';
import { FhirPositiveInt } from './fhir/FhirPositiveInt.js';
import { FhirString } from './fhir/FhirString.js';
import { FhirTime } from './fhir/FhirTime.js';
import { FhirUnsignedInt } from './fhir/FhirUnsignedInt.js';
import { FhirUri } from './fhir/FhirUri.js';
import { FhirUrl } from './fhir/FhirUrl.js';
import { FhirUuid } from './fhir/FhirUuid.js';
import { FhirXhtml } from './fhir/FhirXhtml.js';
import { FhirElement } from './fhir/FhirElement.js';
import { Coding } from './fhir/Coding.js';
import { Address } from './fhir/Address.js';
import { Quantity } from './fhir/Quantity.js';
import { Age } from './fhir/Age.js';
import { Annotation } from './fhir/Annotation.js';
import { Attachment } from './fhir/Attachment.js';
import { BackboneElement } from './fhir/BackboneElement.js';
import { CodeableConcept } from './fhir/CodeableConcept.js';
import { ContactDetail } from './fhir/ContactDetail.js';
import { ContactPoint } from './fhir/ContactPoint.js';
import { Contributor } from './fhir/Contributor.js';
import { Count } from './fhir/Count.js';
import { DataRequirement, DataRequirementCodeFilter, DataRequirementDateFilter, DataRequirementSort } from './fhir/DataRequirement.js';
import { Distance } from './fhir/Distance.js';
import { Dosage, DosageDoseAndRate } from './fhir/Dosage.js';
import { Duration } from './fhir/Duration.js';
import { ElementDefinition, ElementDefinitionSlicing, ElementDefinitionSlicingDiscriminator, ElementDefinitionBase, ElementDefinitionType, ElementDefinitionExample, ElementDefinitionConstraint, ElementDefinitionBinding, ElementDefinitionMapping } from './fhir/ElementDefinition.js';
import { Expression } from './fhir/Expression.js';
import { Extension } from './fhir/Extension.js';
import { HumanName } from './fhir/HumanName.js';
import { Identifier } from './fhir/Identifier.js';
import { MarketingStatus } from './fhir/MarketingStatus.js';
import { Meta } from './fhir/Meta.js';
import { Money } from './fhir/Money.js';
import { Narrative } from './fhir/Narrative.js';
import { ParameterDefinition } from './fhir/ParameterDefinition.js';
import { Period } from './fhir/Period.js';
import { Population } from './fhir/Population.js';
import { ProdCharacteristic } from './fhir/ProdCharacteristic.js';
import { ProductShelfLife } from './fhir/ProductShelfLife.js';
import { Range } from './fhir/Range.js';
import { Ratio } from './fhir/Ratio.js';
import { Reference } from './fhir/Reference.js';
import { RelatedArtifact } from './fhir/RelatedArtifact.js';
import { SampledData } from './fhir/SampledData.js';
import { Signature } from './fhir/Signature.js';
import { SubstanceAmount, SubstanceAmountReferenceRange } from './fhir/SubstanceAmount.js';
import { Timing, TimingRepeat } from './fhir/Timing.js';
import { TriggerDefinition } from './fhir/TriggerDefinition.js';
import { UsageContext } from './fhir/UsageContext.js';
import { Resource } from './fhir/Resource.js';
import { DomainResource } from './fhir/DomainResource.js';
import { Account, AccountCoverage, AccountGuarantor } from './fhir/Account.js';
import { ActivityDefinition, ActivityDefinitionParticipant, ActivityDefinitionDynamicValue } from './fhir/ActivityDefinition.js';
import { AdverseEvent, AdverseEventSuspectEntity, AdverseEventSuspectEntityCausality } from './fhir/AdverseEvent.js';
import { AllergyIntolerance, AllergyIntoleranceReaction } from './fhir/AllergyIntolerance.js';
import { Appointment, AppointmentParticipant } from './fhir/Appointment.js';
import { AppointmentResponse } from './fhir/AppointmentResponse.js';
import { AuditEvent, AuditEventAgent, AuditEventAgentNetwork, AuditEventSource, AuditEventEntity, AuditEventEntityDetail } from './fhir/AuditEvent.js';
import { Basic } from './fhir/Basic.js';
import { Binary } from './fhir/Binary.js';
import { BiologicallyDerivedProduct, BiologicallyDerivedProductCollection, BiologicallyDerivedProductProcessing, BiologicallyDerivedProductManipulation, BiologicallyDerivedProductStorage } from './fhir/BiologicallyDerivedProduct.js';
import { BodyStructure } from './fhir/BodyStructure.js';
import { Bundle, BundleLink, BundleEntry, BundleEntrySearch, BundleEntryRequest, BundleEntryResponse } from './fhir/Bundle.js';
import { CapabilityStatement, CapabilityStatementSoftware, CapabilityStatementImplementation, CapabilityStatementRest, CapabilityStatementRestSecurity, CapabilityStatementRestResource, CapabilityStatementRestResourceInteraction, CapabilityStatementRestResourceSearchParam, CapabilityStatementRestResourceOperation, CapabilityStatementRestInteraction, CapabilityStatementMessaging, CapabilityStatementMessagingEndpoint, CapabilityStatementMessagingSupportedMessage, CapabilityStatementDocument } from './fhir/CapabilityStatement.js';
import { CarePlan, CarePlanActivity, CarePlanActivityDetail } from './fhir/CarePlan.js';
import { CareTeam, CareTeamParticipant } from './fhir/CareTeam.js';
import { CatalogEntry, CatalogEntryRelatedEntry } from './fhir/CatalogEntry.js';
import { ChargeItem, ChargeItemPerformer } from './fhir/ChargeItem.js';
import { ChargeItemDefinition, ChargeItemDefinitionApplicability, ChargeItemDefinitionPropertyGroup, ChargeItemDefinitionPropertyGroupPriceComponent } from './fhir/ChargeItemDefinition.js';
import { Claim, ClaimRelated, ClaimPayee, ClaimCareTeam, ClaimSupportingInfo, ClaimDiagnosis, ClaimProcedure, ClaimInsurance, ClaimAccident, ClaimItem, ClaimItemDetail, ClaimItemDetailSubDetail } from './fhir/Claim.js';
import { ClaimResponse, ClaimResponseItem, ClaimResponseItemAdjudication, ClaimResponseItemDetail, ClaimResponseItemDetailSubDetail, ClaimResponseAddItem, ClaimResponseAddItemDetail, ClaimResponseAddItemDetailSubDetail, ClaimResponseTotal, ClaimResponsePayment, ClaimResponseProcessNote, ClaimResponseInsurance, ClaimResponseError } from './fhir/ClaimResponse.js';
import { ClinicalImpression, ClinicalImpressionInvestigation, ClinicalImpressionFinding } from './fhir/ClinicalImpression.js';
import { CodeSystem, CodeSystemFilter, CodeSystemProperty, CodeSystemConcept, CodeSystemConceptDesignation, CodeSystemConceptProperty } from './fhir/CodeSystem.js';
import { Communication, CommunicationPayload } from './fhir/Communication.js';
import { CommunicationRequest, CommunicationRequestPayload } from './fhir/CommunicationRequest.js';
import { CompartmentDefinition, CompartmentDefinitionResource } from './fhir/CompartmentDefinition.js';
import { Composition, CompositionAttester, CompositionRelatesTo, CompositionEvent, CompositionSection } from './fhir/Composition.js';
import { ConceptMap, ConceptMapGroup, ConceptMapGroupElement, ConceptMapGroupElementTarget, ConceptMapGroupElementTargetDependsOn, ConceptMapGroupUnmapped } from './fhir/ConceptMap.js';
import { Condition, ConditionStage, ConditionEvidence } from './fhir/Condition.js';
import { Consent, ConsentPolicy, ConsentVerification, ConsentProvision, ConsentProvisionActor, ConsentProvisionData } from './fhir/Consent.js';
import { Contract, ContractContentDefinition, ContractTerm, ContractTermSecurityLabel, ContractTermOffer, ContractTermOfferParty, ContractTermOfferAnswer, ContractTermAsset, ContractTermAssetContext, ContractTermAssetValuedItem, ContractTermAction, ContractTermActionSubject, ContractSigner, ContractFriendly, ContractLegal, ContractRule } from './fhir/Contract.js';
import { Coverage, CoverageClass, CoverageCostToBeneficiary, CoverageCostToBeneficiaryException } from './fhir/Coverage.js';
import { CoverageEligibilityRequest, CoverageEligibilityRequestSupportingInfo, CoverageEligibilityRequestInsurance, CoverageEligibilityRequestItem, CoverageEligibilityRequestItemDiagnosis } from './fhir/CoverageEligibilityRequest.js';
import { CoverageEligibilityResponse, CoverageEligibilityResponseInsurance, CoverageEligibilityResponseInsuranceItem, CoverageEligibilityResponseInsuranceItemBenefit, CoverageEligibilityResponseError } from './fhir/CoverageEligibilityResponse.js';
import { DetectedIssue, DetectedIssueEvidence, DetectedIssueMitigation } from './fhir/DetectedIssue.js';
import { Device, DeviceUdiCarrier, DeviceDeviceName, DeviceSpecialization, DeviceVersion, DeviceProperty } from './fhir/Device.js';
import { DeviceDefinition, DeviceDefinitionUdiDeviceIdentifier, DeviceDefinitionDeviceName, DeviceDefinitionSpecialization, DeviceDefinitionCapability, DeviceDefinitionProperty, DeviceDefinitionMaterial } from './fhir/DeviceDefinition.js';
import { DeviceMetric, DeviceMetricCalibration } from './fhir/DeviceMetric.js';
import { DeviceRequest, DeviceRequestParameter } from './fhir/DeviceRequest.js';
import { DeviceUseStatement } from './fhir/DeviceUseStatement.js';
import { DiagnosticReport, DiagnosticReportMedia } from './fhir/DiagnosticReport.js';
import { DocumentManifest, DocumentManifestRelated } from './fhir/DocumentManifest.js';
import { DocumentReference, DocumentReferenceRelatesTo, DocumentReferenceContent, DocumentReferenceContext } from './fhir/DocumentReference.js';
import { EffectEvidenceSynthesis, EffectEvidenceSynthesisSampleSize, EffectEvidenceSynthesisResultsByExposure, EffectEvidenceSynthesisEffectEstimate, EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, EffectEvidenceSynthesisCertainty, EffectEvidenceSynthesisCertaintyCertaintySubcomponent } from './fhir/EffectEvidenceSynthesis.js';
import { Encounter, EncounterStatusHistory, EncounterClassHistory, EncounterParticipant, EncounterDiagnosis, EncounterHospitalization, EncounterLocation } from './fhir/Encounter.js';
import { Endpoint } from './fhir/Endpoint.js';
import { EnrollmentRequest } from './fhir/EnrollmentRequest.js';
import { EnrollmentResponse } from './fhir/EnrollmentResponse.js';
import { EpisodeOfCare, EpisodeOfCareStatusHistory, EpisodeOfCareDiagnosis } from './fhir/EpisodeOfCare.js';
import { EventDefinition } from './fhir/EventDefinition.js';
import { Evidence } from './fhir/Evidence.js';
import { EvidenceVariable, EvidenceVariableCharacteristic } from './fhir/EvidenceVariable.js';
import { ExampleScenario, ExampleScenarioActor, ExampleScenarioInstance, ExampleScenarioInstanceVersion, ExampleScenarioInstanceContainedInstance, ExampleScenarioProcess, ExampleScenarioProcessStep, ExampleScenarioProcessStepOperation, ExampleScenarioProcessStepAlternative } from './fhir/ExampleScenario.js';
import { ExplanationOfBenefit, ExplanationOfBenefitRelated, ExplanationOfBenefitPayee, ExplanationOfBenefitCareTeam, ExplanationOfBenefitSupportingInfo, ExplanationOfBenefitDiagnosis, ExplanationOfBenefitProcedure, ExplanationOfBenefitInsurance, ExplanationOfBenefitAccident, ExplanationOfBenefitItem, ExplanationOfBenefitItemAdjudication, ExplanationOfBenefitItemDetail, ExplanationOfBenefitItemDetailSubDetail, ExplanationOfBenefitAddItem, ExplanationOfBenefitAddItemDetail, ExplanationOfBenefitAddItemDetailSubDetail, ExplanationOfBenefitTotal, ExplanationOfBenefitPayment, ExplanationOfBenefitProcessNote, ExplanationOfBenefitBenefitBalance, ExplanationOfBenefitBenefitBalanceFinancial } from './fhir/ExplanationOfBenefit.js';
import { FamilyMemberHistory, FamilyMemberHistoryCondition } from './fhir/FamilyMemberHistory.js';
import { Flag } from './fhir/Flag.js';
import { Goal, GoalTarget } from './fhir/Goal.js';
import { GraphDefinition, GraphDefinitionLink, GraphDefinitionLinkTarget, GraphDefinitionLinkTargetCompartment } from './fhir/GraphDefinition.js';
import { Group, GroupCharacteristic, GroupMember } from './fhir/Group.js';
import { GuidanceResponse } from './fhir/GuidanceResponse.js';
import { HealthcareService, HealthcareServiceEligibility, HealthcareServiceAvailableTime, HealthcareServiceNotAvailable } from './fhir/HealthcareService.js';
import { ImagingStudy, ImagingStudySeries, ImagingStudySeriesPerformer, ImagingStudySeriesInstance } from './fhir/ImagingStudy.js';
import { Immunization, ImmunizationPerformer, ImmunizationEducation, ImmunizationReaction, ImmunizationProtocolApplied } from './fhir/Immunization.js';
import { ImmunizationEvaluation } from './fhir/ImmunizationEvaluation.js';
import { ImmunizationRecommendation, ImmunizationRecommendationRecommendation, ImmunizationRecommendationRecommendationDateCriterion } from './fhir/ImmunizationRecommendation.js';
import { ImplementationGuide, ImplementationGuideDependsOn, ImplementationGuideGlobal, ImplementationGuideDefinition, ImplementationGuideDefinitionGrouping, ImplementationGuideDefinitionResource, ImplementationGuideDefinitionPage, ImplementationGuideDefinitionParameter, ImplementationGuideDefinitionTemplate, ImplementationGuideManifest, ImplementationGuideManifestResource, ImplementationGuideManifestPage } from './fhir/ImplementationGuide.js';
import { InsurancePlan, InsurancePlanContact, InsurancePlanCoverage, InsurancePlanCoverageBenefit, InsurancePlanCoverageBenefitLimit, InsurancePlanPlan, InsurancePlanPlanGeneralCost, InsurancePlanPlanSpecificCost, InsurancePlanPlanSpecificCostBenefit, InsurancePlanPlanSpecificCostBenefitCost } from './fhir/InsurancePlan.js';
import { Invoice, InvoiceParticipant, InvoiceLineItem, InvoiceLineItemPriceComponent } from './fhir/Invoice.js';
import { Library } from './fhir/Library.js';
import { Linkage, LinkageItem } from './fhir/Linkage.js';
import { List, ListEntry } from './fhir/List.js';
import { Location, LocationPosition, LocationHoursOfOperation } from './fhir/Location.js';
import { Measure, MeasureGroup, MeasureGroupPopulation, MeasureGroupStratifier, MeasureGroupStratifierComponent, MeasureSupplementalData } from './fhir/Measure.js';
import { MeasureReport, MeasureReportGroup, MeasureReportGroupPopulation, MeasureReportGroupStratifier, MeasureReportGroupStratifierStratum, MeasureReportGroupStratifierStratumComponent, MeasureReportGroupStratifierStratumPopulation } from './fhir/MeasureReport.js';
import { Media } from './fhir/Media.js';
import { Medication, MedicationIngredient, MedicationBatch } from './fhir/Medication.js';
import { MedicationAdministration, MedicationAdministrationPerformer, MedicationAdministrationDosage } from './fhir/MedicationAdministration.js';
import { MedicationDispense, MedicationDispensePerformer, MedicationDispenseSubstitution } from './fhir/MedicationDispense.js';
import { MedicationKnowledge, MedicationKnowledgeRelatedMedicationKnowledge, MedicationKnowledgeMonograph, MedicationKnowledgeIngredient, MedicationKnowledgeCost, MedicationKnowledgeMonitoringProgram, MedicationKnowledgeAdministrationGuidelines, MedicationKnowledgeAdministrationGuidelinesDosage, MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, MedicationKnowledgeMedicineClassification, MedicationKnowledgePackaging, MedicationKnowledgeDrugCharacteristic, MedicationKnowledgeRegulatory, MedicationKnowledgeRegulatorySubstitution, MedicationKnowledgeRegulatorySchedule, MedicationKnowledgeRegulatoryMaxDispense, MedicationKnowledgeKinetics } from './fhir/MedicationKnowledge.js';
import { MedicationRequest, MedicationRequestDispenseRequest, MedicationRequestDispenseRequestInitialFill, MedicationRequestSubstitution } from './fhir/MedicationRequest.js';
import { MedicationStatement } from './fhir/MedicationStatement.js';
import { MedicinalProduct, MedicinalProductName, MedicinalProductNameNamePart, MedicinalProductNameCountryLanguage, MedicinalProductManufacturingBusinessOperation, MedicinalProductSpecialDesignation } from './fhir/MedicinalProduct.js';
import { MedicinalProductAuthorization, MedicinalProductAuthorizationJurisdictionalAuthorization, MedicinalProductAuthorizationProcedure } from './fhir/MedicinalProductAuthorization.js';
import { MedicinalProductContraindication, MedicinalProductContraindicationOtherTherapy } from './fhir/MedicinalProductContraindication.js';
import { MedicinalProductIndication, MedicinalProductIndicationOtherTherapy } from './fhir/MedicinalProductIndication.js';
import { MedicinalProductIngredient, MedicinalProductIngredientSpecifiedSubstance, MedicinalProductIngredientSpecifiedSubstanceStrength, MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, MedicinalProductIngredientSubstance } from './fhir/MedicinalProductIngredient.js';
import { MedicinalProductInteraction, MedicinalProductInteractionInteractant } from './fhir/MedicinalProductInteraction.js';
import { MedicinalProductManufactured } from './fhir/MedicinalProductManufactured.js';
import { MedicinalProductPackaged, MedicinalProductPackagedBatchIdentifier, MedicinalProductPackagedPackageItem } from './fhir/MedicinalProductPackaged.js';
import { MedicinalProductPharmaceutical, MedicinalProductPharmaceuticalCharacteristics, MedicinalProductPharmaceuticalRouteOfAdministration, MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod } from './fhir/MedicinalProductPharmaceutical.js';
import { MedicinalProductUndesirableEffect } from './fhir/MedicinalProductUndesirableEffect.js';
import { MessageDefinition, MessageDefinitionFocus, MessageDefinitionAllowedResponse } from './fhir/MessageDefinition.js';
import { MessageHeader, MessageHeaderDestination, MessageHeaderSource, MessageHeaderResponse } from './fhir/MessageHeader.js';
import { MolecularSequence, MolecularSequenceReferenceSeq, MolecularSequenceVariant, MolecularSequenceQuality, MolecularSequenceQualityRoc, MolecularSequenceRepository, MolecularSequenceStructureVariant, MolecularSequenceStructureVariantOuter, MolecularSequenceStructureVariantInner } from './fhir/MolecularSequence.js';
import { NamingSystem, NamingSystemUniqueId } from './fhir/NamingSystem.js';
import { NutritionOrder, NutritionOrderOralDiet, NutritionOrderOralDietNutrient, NutritionOrderOralDietTexture, NutritionOrderSupplement, NutritionOrderEnteralFormula, NutritionOrderEnteralFormulaAdministration } from './fhir/NutritionOrder.js';
import { Observation, ObservationReferenceRange, ObservationComponent } from './fhir/Observation.js';
import { ObservationDefinition, ObservationDefinitionQuantitativeDetails, ObservationDefinitionQualifiedInterval } from './fhir/ObservationDefinition.js';
import { OperationDefinition, OperationDefinitionParameter, OperationDefinitionParameterBinding, OperationDefinitionParameterReferencedFrom, OperationDefinitionOverload } from './fhir/OperationDefinition.js';
import { OperationOutcome, OperationOutcomeIssue } from './fhir/OperationOutcome.js';
import { Organization, OrganizationContact } from './fhir/Organization.js';
import { OrganizationAffiliation } from './fhir/OrganizationAffiliation.js';
import { Parameters, ParametersParameter } from './fhir/Parameters.js';
import { Patient, PatientContact, PatientCommunication, PatientLink } from './fhir/Patient.js';
import { PaymentNotice } from './fhir/PaymentNotice.js';
import { PaymentReconciliation, PaymentReconciliationDetail, PaymentReconciliationProcessNote } from './fhir/PaymentReconciliation.js';
import { Person, PersonLink } from './fhir/Person.js';
import { PlanDefinition, PlanDefinitionGoal, PlanDefinitionGoalTarget, PlanDefinitionAction, PlanDefinitionActionCondition, PlanDefinitionActionRelatedAction, PlanDefinitionActionParticipant, PlanDefinitionActionDynamicValue } from './fhir/PlanDefinition.js';
import { Practitioner, PractitionerQualification } from './fhir/Practitioner.js';
import { PractitionerRole, PractitionerRoleAvailableTime, PractitionerRoleNotAvailable } from './fhir/PractitionerRole.js';
import { Procedure, ProcedurePerformer, ProcedureFocalDevice } from './fhir/Procedure.js';
import { Provenance, ProvenanceAgent, ProvenanceEntity } from './fhir/Provenance.js';
import { Questionnaire, QuestionnaireItem, QuestionnaireItemEnableWhen, QuestionnaireItemAnswerOption, QuestionnaireItemInitial } from './fhir/Questionnaire.js';
import { QuestionnaireResponse, QuestionnaireResponseItem, QuestionnaireResponseItemAnswer } from './fhir/QuestionnaireResponse.js';
import { RelatedPerson, RelatedPersonCommunication } from './fhir/RelatedPerson.js';
import { RequestGroup, RequestGroupAction, RequestGroupActionCondition, RequestGroupActionRelatedAction } from './fhir/RequestGroup.js';
import { ResearchDefinition } from './fhir/ResearchDefinition.js';
import { ResearchElementDefinition, ResearchElementDefinitionCharacteristic } from './fhir/ResearchElementDefinition.js';
import { ResearchStudy, ResearchStudyArm, ResearchStudyObjective } from './fhir/ResearchStudy.js';
import { ResearchSubject } from './fhir/ResearchSubject.js';
import { RiskAssessment, RiskAssessmentPrediction } from './fhir/RiskAssessment.js';
import { RiskEvidenceSynthesis, RiskEvidenceSynthesisSampleSize, RiskEvidenceSynthesisRiskEstimate, RiskEvidenceSynthesisRiskEstimatePrecisionEstimate, RiskEvidenceSynthesisCertainty, RiskEvidenceSynthesisCertaintyCertaintySubcomponent } from './fhir/RiskEvidenceSynthesis.js';
import { Schedule } from './fhir/Schedule.js';
import { SearchParameter, SearchParameterComponent } from './fhir/SearchParameter.js';
import { ServiceRequest } from './fhir/ServiceRequest.js';
import { Slot } from './fhir/Slot.js';
import { Specimen, SpecimenCollection, SpecimenProcessing, SpecimenContainer } from './fhir/Specimen.js';
import { SpecimenDefinition, SpecimenDefinitionTypeTested, SpecimenDefinitionTypeTestedContainer, SpecimenDefinitionTypeTestedContainerAdditive, SpecimenDefinitionTypeTestedHandling } from './fhir/SpecimenDefinition.js';
import { StructureDefinition, StructureDefinitionMapping, StructureDefinitionContext, StructureDefinitionSnapshot, StructureDefinitionDifferential } from './fhir/StructureDefinition.js';
import { StructureMap, StructureMapStructure, StructureMapGroup, StructureMapGroupInput, StructureMapGroupRule, StructureMapGroupRuleSource, StructureMapGroupRuleTarget, StructureMapGroupRuleTargetParameter, StructureMapGroupRuleDependent } from './fhir/StructureMap.js';
import { Subscription, SubscriptionChannel } from './fhir/Subscription.js';
import { Substance, SubstanceInstance, SubstanceIngredient } from './fhir/Substance.js';
import { SubstanceNucleicAcid, SubstanceNucleicAcidSubunit, SubstanceNucleicAcidSubunitLinkage, SubstanceNucleicAcidSubunitSugar } from './fhir/SubstanceNucleicAcid.js';
import { SubstancePolymer, SubstancePolymerMonomerSet, SubstancePolymerMonomerSetStartingMaterial, SubstancePolymerRepeat, SubstancePolymerRepeatRepeatUnit, SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation, SubstancePolymerRepeatRepeatUnitStructuralRepresentation } from './fhir/SubstancePolymer.js';
import { SubstanceProtein, SubstanceProteinSubunit } from './fhir/SubstanceProtein.js';
import { SubstanceReferenceInformation, SubstanceReferenceInformationGene, SubstanceReferenceInformationGeneElement, SubstanceReferenceInformationClassification, SubstanceReferenceInformationTarget } from './fhir/SubstanceReferenceInformation.js';
import { SubstanceSourceMaterial, SubstanceSourceMaterialFractionDescription, SubstanceSourceMaterialOrganism, SubstanceSourceMaterialOrganismAuthor, SubstanceSourceMaterialOrganismHybrid, SubstanceSourceMaterialOrganismOrganismGeneral, SubstanceSourceMaterialPartDescription } from './fhir/SubstanceSourceMaterial.js';
import { SubstanceSpecification, SubstanceSpecificationMoiety, SubstanceSpecificationProperty, SubstanceSpecificationStructure, SubstanceSpecificationStructureIsotope, SubstanceSpecificationStructureIsotopeMolecularWeight, SubstanceSpecificationStructureRepresentation, SubstanceSpecificationCode, SubstanceSpecificationName, SubstanceSpecificationNameOfficial, SubstanceSpecificationRelationship } from './fhir/SubstanceSpecification.js';
import { SupplyDelivery, SupplyDeliverySuppliedItem } from './fhir/SupplyDelivery.js';
import { SupplyRequest, SupplyRequestParameter } from './fhir/SupplyRequest.js';
import { Task, TaskRestriction, TaskInput, TaskOutput } from './fhir/Task.js';
import { TerminologyCapabilities, TerminologyCapabilitiesSoftware, TerminologyCapabilitiesImplementation, TerminologyCapabilitiesCodeSystem, TerminologyCapabilitiesCodeSystemVersion, TerminologyCapabilitiesCodeSystemVersionFilter, TerminologyCapabilitiesExpansion, TerminologyCapabilitiesExpansionParameter, TerminologyCapabilitiesValidateCode, TerminologyCapabilitiesTranslation, TerminologyCapabilitiesClosure } from './fhir/TerminologyCapabilities.js';
import { TestReport, TestReportParticipant, TestReportSetup, TestReportSetupAction, TestReportSetupActionOperation, TestReportSetupActionAssert, TestReportTest, TestReportTestAction, TestReportTeardown, TestReportTeardownAction } from './fhir/TestReport.js';
import { TestScript, TestScriptOrigin, TestScriptDestination, TestScriptMetadata, TestScriptMetadataLink, TestScriptMetadataCapability, TestScriptFixture, TestScriptVariable, TestScriptSetup, TestScriptSetupAction, TestScriptSetupActionOperation, TestScriptSetupActionOperationRequestHeader, TestScriptSetupActionAssert, TestScriptTest, TestScriptTestAction, TestScriptTeardown, TestScriptTeardownAction } from './fhir/TestScript.js';
import { ValueSet, ValueSetCompose, ValueSetComposeInclude, ValueSetComposeIncludeConcept, ValueSetComposeIncludeConceptDesignation, ValueSetComposeIncludeFilter, ValueSetExpansion, ValueSetExpansionParameter, ValueSetExpansionContains } from './fhir/ValueSet.js';
import { VerificationResult, VerificationResultPrimarySource, VerificationResultAttestation, VerificationResultValidator } from './fhir/VerificationResult.js';
import { VisionPrescription, VisionPrescriptionLensSpecification, VisionPrescriptionLensSpecificationPrism } from './fhir/VisionPrescription.js';
/**
 * Factory creator for FHIR Resources
 */
function resourceFactory(source) {
    switch (source["resourceType"]) {
        case "Account": return new Account(source);
        case "ActivityDefinition": return new ActivityDefinition(source);
        case "AdverseEvent": return new AdverseEvent(source);
        case "AllergyIntolerance": return new AllergyIntolerance(source);
        case "Appointment": return new Appointment(source);
        case "AppointmentResponse": return new AppointmentResponse(source);
        case "AuditEvent": return new AuditEvent(source);
        case "Basic": return new Basic(source);
        case "Binary": return new Binary(source);
        case "BiologicallyDerivedProduct": return new BiologicallyDerivedProduct(source);
        case "BodyStructure": return new BodyStructure(source);
        case "Bundle": return new Bundle(source);
        case "CapabilityStatement": return new CapabilityStatement(source);
        case "CarePlan": return new CarePlan(source);
        case "CareTeam": return new CareTeam(source);
        case "CatalogEntry": return new CatalogEntry(source);
        case "ChargeItem": return new ChargeItem(source);
        case "ChargeItemDefinition": return new ChargeItemDefinition(source);
        case "Claim": return new Claim(source);
        case "ClaimResponse": return new ClaimResponse(source);
        case "ClinicalImpression": return new ClinicalImpression(source);
        case "CodeSystem": return new CodeSystem(source);
        case "Communication": return new Communication(source);
        case "CommunicationRequest": return new CommunicationRequest(source);
        case "CompartmentDefinition": return new CompartmentDefinition(source);
        case "Composition": return new Composition(source);
        case "ConceptMap": return new ConceptMap(source);
        case "Condition": return new Condition(source);
        case "Consent": return new Consent(source);
        case "Contract": return new Contract(source);
        case "Coverage": return new Coverage(source);
        case "CoverageEligibilityRequest": return new CoverageEligibilityRequest(source);
        case "CoverageEligibilityResponse": return new CoverageEligibilityResponse(source);
        case "DetectedIssue": return new DetectedIssue(source);
        case "Device": return new Device(source);
        case "DeviceDefinition": return new DeviceDefinition(source);
        case "DeviceMetric": return new DeviceMetric(source);
        case "DeviceRequest": return new DeviceRequest(source);
        case "DeviceUseStatement": return new DeviceUseStatement(source);
        case "DiagnosticReport": return new DiagnosticReport(source);
        case "DocumentManifest": return new DocumentManifest(source);
        case "DocumentReference": return new DocumentReference(source);
        case "DomainResource": return new DomainResource(source);
        case "EffectEvidenceSynthesis": return new EffectEvidenceSynthesis(source);
        case "Encounter": return new Encounter(source);
        case "Endpoint": return new Endpoint(source);
        case "EnrollmentRequest": return new EnrollmentRequest(source);
        case "EnrollmentResponse": return new EnrollmentResponse(source);
        case "EpisodeOfCare": return new EpisodeOfCare(source);
        case "EventDefinition": return new EventDefinition(source);
        case "Evidence": return new Evidence(source);
        case "EvidenceVariable": return new EvidenceVariable(source);
        case "ExampleScenario": return new ExampleScenario(source);
        case "ExplanationOfBenefit": return new ExplanationOfBenefit(source);
        case "FamilyMemberHistory": return new FamilyMemberHistory(source);
        case "Flag": return new Flag(source);
        case "Goal": return new Goal(source);
        case "GraphDefinition": return new GraphDefinition(source);
        case "Group": return new Group(source);
        case "GuidanceResponse": return new GuidanceResponse(source);
        case "HealthcareService": return new HealthcareService(source);
        case "ImagingStudy": return new ImagingStudy(source);
        case "Immunization": return new Immunization(source);
        case "ImmunizationEvaluation": return new ImmunizationEvaluation(source);
        case "ImmunizationRecommendation": return new ImmunizationRecommendation(source);
        case "ImplementationGuide": return new ImplementationGuide(source);
        case "InsurancePlan": return new InsurancePlan(source);
        case "Invoice": return new Invoice(source);
        case "Library": return new Library(source);
        case "Linkage": return new Linkage(source);
        case "List": return new List(source);
        case "Location": return new Location(source);
        case "Measure": return new Measure(source);
        case "MeasureReport": return new MeasureReport(source);
        case "Media": return new Media(source);
        case "Medication": return new Medication(source);
        case "MedicationAdministration": return new MedicationAdministration(source);
        case "MedicationDispense": return new MedicationDispense(source);
        case "MedicationKnowledge": return new MedicationKnowledge(source);
        case "MedicationRequest": return new MedicationRequest(source);
        case "MedicationStatement": return new MedicationStatement(source);
        case "MedicinalProduct": return new MedicinalProduct(source);
        case "MedicinalProductAuthorization": return new MedicinalProductAuthorization(source);
        case "MedicinalProductContraindication": return new MedicinalProductContraindication(source);
        case "MedicinalProductIndication": return new MedicinalProductIndication(source);
        case "MedicinalProductIngredient": return new MedicinalProductIngredient(source);
        case "MedicinalProductInteraction": return new MedicinalProductInteraction(source);
        case "MedicinalProductManufactured": return new MedicinalProductManufactured(source);
        case "MedicinalProductPackaged": return new MedicinalProductPackaged(source);
        case "MedicinalProductPharmaceutical": return new MedicinalProductPharmaceutical(source);
        case "MedicinalProductUndesirableEffect": return new MedicinalProductUndesirableEffect(source);
        case "MessageDefinition": return new MessageDefinition(source);
        case "MessageHeader": return new MessageHeader(source);
        case "MolecularSequence": return new MolecularSequence(source);
        case "NamingSystem": return new NamingSystem(source);
        case "NutritionOrder": return new NutritionOrder(source);
        case "Observation": return new Observation(source);
        case "ObservationDefinition": return new ObservationDefinition(source);
        case "OperationDefinition": return new OperationDefinition(source);
        case "OperationOutcome": return new OperationOutcome(source);
        case "Organization": return new Organization(source);
        case "OrganizationAffiliation": return new OrganizationAffiliation(source);
        case "Parameters": return new Parameters(source);
        case "Patient": return new Patient(source);
        case "PaymentNotice": return new PaymentNotice(source);
        case "PaymentReconciliation": return new PaymentReconciliation(source);
        case "Person": return new Person(source);
        case "PlanDefinition": return new PlanDefinition(source);
        case "Practitioner": return new Practitioner(source);
        case "PractitionerRole": return new PractitionerRole(source);
        case "Procedure": return new Procedure(source);
        case "Provenance": return new Provenance(source);
        case "Questionnaire": return new Questionnaire(source);
        case "QuestionnaireResponse": return new QuestionnaireResponse(source);
        case "RelatedPerson": return new RelatedPerson(source);
        case "RequestGroup": return new RequestGroup(source);
        case "ResearchDefinition": return new ResearchDefinition(source);
        case "ResearchElementDefinition": return new ResearchElementDefinition(source);
        case "ResearchStudy": return new ResearchStudy(source);
        case "ResearchSubject": return new ResearchSubject(source);
        case "Resource": return new Resource(source);
        case "RiskAssessment": return new RiskAssessment(source);
        case "RiskEvidenceSynthesis": return new RiskEvidenceSynthesis(source);
        case "Schedule": return new Schedule(source);
        case "SearchParameter": return new SearchParameter(source);
        case "ServiceRequest": return new ServiceRequest(source);
        case "Slot": return new Slot(source);
        case "Specimen": return new Specimen(source);
        case "SpecimenDefinition": return new SpecimenDefinition(source);
        case "StructureDefinition": return new StructureDefinition(source);
        case "StructureMap": return new StructureMap(source);
        case "Subscription": return new Subscription(source);
        case "Substance": return new Substance(source);
        case "SubstanceNucleicAcid": return new SubstanceNucleicAcid(source);
        case "SubstancePolymer": return new SubstancePolymer(source);
        case "SubstanceProtein": return new SubstanceProtein(source);
        case "SubstanceReferenceInformation": return new SubstanceReferenceInformation(source);
        case "SubstanceSourceMaterial": return new SubstanceSourceMaterial(source);
        case "SubstanceSpecification": return new SubstanceSpecification(source);
        case "SupplyDelivery": return new SupplyDelivery(source);
        case "SupplyRequest": return new SupplyRequest(source);
        case "Task": return new Task(source);
        case "TerminologyCapabilities": return new TerminologyCapabilities(source);
        case "TestReport": return new TestReport(source);
        case "TestScript": return new TestScript(source);
        case "ValueSet": return new ValueSet(source);
        case "VerificationResult": return new VerificationResult(source);
        case "VisionPrescription": return new VisionPrescription(source);
        default: return null;
    }
}
export { FhirBase, FhirPrimitive, FhirBase64Binary, FhirBoolean, FhirCanonical, FhirCode, FhirDate, FhirDateTime, FhirDecimal, FhirId, FhirInstant, FhirInteger, FhirMarkdown, FhirOid, FhirPositiveInt, FhirString, FhirTime, FhirUnsignedInt, FhirUri, FhirUrl, FhirUuid, FhirXhtml, FhirElement, Coding, Address, Quantity, Age, Annotation, Attachment, BackboneElement, CodeableConcept, ContactDetail, ContactPoint, Contributor, Count, DataRequirement, DataRequirementCodeFilter, DataRequirementDateFilter, DataRequirementSort, Distance, Dosage, DosageDoseAndRate, Duration, ElementDefinition, ElementDefinitionSlicing, ElementDefinitionSlicingDiscriminator, ElementDefinitionBase, ElementDefinitionType, ElementDefinitionExample, ElementDefinitionConstraint, ElementDefinitionBinding, ElementDefinitionMapping, Expression, Extension, HumanName, Identifier, MarketingStatus, Meta, Money, Narrative, ParameterDefinition, Period, Population, ProdCharacteristic, ProductShelfLife, Range, Ratio, Reference, RelatedArtifact, SampledData, Signature, SubstanceAmount, SubstanceAmountReferenceRange, Timing, TimingRepeat, TriggerDefinition, UsageContext, Resource, DomainResource, Account, AccountCoverage, AccountGuarantor, ActivityDefinition, ActivityDefinitionParticipant, ActivityDefinitionDynamicValue, AdverseEvent, AdverseEventSuspectEntity, AdverseEventSuspectEntityCausality, AllergyIntolerance, AllergyIntoleranceReaction, Appointment, AppointmentParticipant, AppointmentResponse, AuditEvent, AuditEventAgent, AuditEventAgentNetwork, AuditEventSource, AuditEventEntity, AuditEventEntityDetail, Basic, Binary, BiologicallyDerivedProduct, BiologicallyDerivedProductCollection, BiologicallyDerivedProductProcessing, BiologicallyDerivedProductManipulation, BiologicallyDerivedProductStorage, BodyStructure, Bundle, BundleLink, BundleEntry, BundleEntrySearch, BundleEntryRequest, BundleEntryResponse, CapabilityStatement, CapabilityStatementSoftware, CapabilityStatementImplementation, CapabilityStatementRest, CapabilityStatementRestSecurity, CapabilityStatementRestResource, CapabilityStatementRestResourceInteraction, CapabilityStatementRestResourceSearchParam, CapabilityStatementRestResourceOperation, CapabilityStatementRestInteraction, CapabilityStatementMessaging, CapabilityStatementMessagingEndpoint, CapabilityStatementMessagingSupportedMessage, CapabilityStatementDocument, CarePlan, CarePlanActivity, CarePlanActivityDetail, CareTeam, CareTeamParticipant, CatalogEntry, CatalogEntryRelatedEntry, ChargeItem, ChargeItemPerformer, ChargeItemDefinition, ChargeItemDefinitionApplicability, ChargeItemDefinitionPropertyGroup, ChargeItemDefinitionPropertyGroupPriceComponent, Claim, ClaimRelated, ClaimPayee, ClaimCareTeam, ClaimSupportingInfo, ClaimDiagnosis, ClaimProcedure, ClaimInsurance, ClaimAccident, ClaimItem, ClaimItemDetail, ClaimItemDetailSubDetail, ClaimResponse, ClaimResponseItem, ClaimResponseItemAdjudication, ClaimResponseItemDetail, ClaimResponseItemDetailSubDetail, ClaimResponseAddItem, ClaimResponseAddItemDetail, ClaimResponseAddItemDetailSubDetail, ClaimResponseTotal, ClaimResponsePayment, ClaimResponseProcessNote, ClaimResponseInsurance, ClaimResponseError, ClinicalImpression, ClinicalImpressionInvestigation, ClinicalImpressionFinding, CodeSystem, CodeSystemFilter, CodeSystemProperty, CodeSystemConcept, CodeSystemConceptDesignation, CodeSystemConceptProperty, Communication, CommunicationPayload, CommunicationRequest, CommunicationRequestPayload, CompartmentDefinition, CompartmentDefinitionResource, Composition, CompositionAttester, CompositionRelatesTo, CompositionEvent, CompositionSection, ConceptMap, ConceptMapGroup, ConceptMapGroupElement, ConceptMapGroupElementTarget, ConceptMapGroupElementTargetDependsOn, ConceptMapGroupUnmapped, Condition, ConditionStage, ConditionEvidence, Consent, ConsentPolicy, ConsentVerification, ConsentProvision, ConsentProvisionActor, ConsentProvisionData, Contract, ContractContentDefinition, ContractTerm, ContractTermSecurityLabel, ContractTermOffer, ContractTermOfferParty, ContractTermOfferAnswer, ContractTermAsset, ContractTermAssetContext, ContractTermAssetValuedItem, ContractTermAction, ContractTermActionSubject, ContractSigner, ContractFriendly, ContractLegal, ContractRule, Coverage, CoverageClass, CoverageCostToBeneficiary, CoverageCostToBeneficiaryException, CoverageEligibilityRequest, CoverageEligibilityRequestSupportingInfo, CoverageEligibilityRequestInsurance, CoverageEligibilityRequestItem, CoverageEligibilityRequestItemDiagnosis, CoverageEligibilityResponse, CoverageEligibilityResponseInsurance, CoverageEligibilityResponseInsuranceItem, CoverageEligibilityResponseInsuranceItemBenefit, CoverageEligibilityResponseError, DetectedIssue, DetectedIssueEvidence, DetectedIssueMitigation, Device, DeviceUdiCarrier, DeviceDeviceName, DeviceSpecialization, DeviceVersion, DeviceProperty, DeviceDefinition, DeviceDefinitionUdiDeviceIdentifier, DeviceDefinitionDeviceName, DeviceDefinitionSpecialization, DeviceDefinitionCapability, DeviceDefinitionProperty, DeviceDefinitionMaterial, DeviceMetric, DeviceMetricCalibration, DeviceRequest, DeviceRequestParameter, DeviceUseStatement, DiagnosticReport, DiagnosticReportMedia, DocumentManifest, DocumentManifestRelated, DocumentReference, DocumentReferenceRelatesTo, DocumentReferenceContent, DocumentReferenceContext, EffectEvidenceSynthesis, EffectEvidenceSynthesisSampleSize, EffectEvidenceSynthesisResultsByExposure, EffectEvidenceSynthesisEffectEstimate, EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, EffectEvidenceSynthesisCertainty, EffectEvidenceSynthesisCertaintyCertaintySubcomponent, Encounter, EncounterStatusHistory, EncounterClassHistory, EncounterParticipant, EncounterDiagnosis, EncounterHospitalization, EncounterLocation, Endpoint, EnrollmentRequest, EnrollmentResponse, EpisodeOfCare, EpisodeOfCareStatusHistory, EpisodeOfCareDiagnosis, EventDefinition, Evidence, EvidenceVariable, EvidenceVariableCharacteristic, ExampleScenario, ExampleScenarioActor, ExampleScenarioInstance, ExampleScenarioInstanceVersion, ExampleScenarioInstanceContainedInstance, ExampleScenarioProcess, ExampleScenarioProcessStep, ExampleScenarioProcessStepOperation, ExampleScenarioProcessStepAlternative, ExplanationOfBenefit, ExplanationOfBenefitRelated, ExplanationOfBenefitPayee, ExplanationOfBenefitCareTeam, ExplanationOfBenefitSupportingInfo, ExplanationOfBenefitDiagnosis, ExplanationOfBenefitProcedure, ExplanationOfBenefitInsurance, ExplanationOfBenefitAccident, ExplanationOfBenefitItem, ExplanationOfBenefitItemAdjudication, ExplanationOfBenefitItemDetail, ExplanationOfBenefitItemDetailSubDetail, ExplanationOfBenefitAddItem, ExplanationOfBenefitAddItemDetail, ExplanationOfBenefitAddItemDetailSubDetail, ExplanationOfBenefitTotal, ExplanationOfBenefitPayment, ExplanationOfBenefitProcessNote, ExplanationOfBenefitBenefitBalance, ExplanationOfBenefitBenefitBalanceFinancial, FamilyMemberHistory, FamilyMemberHistoryCondition, Flag, Goal, GoalTarget, GraphDefinition, GraphDefinitionLink, GraphDefinitionLinkTarget, GraphDefinitionLinkTargetCompartment, Group, GroupCharacteristic, GroupMember, GuidanceResponse, HealthcareService, HealthcareServiceEligibility, HealthcareServiceAvailableTime, HealthcareServiceNotAvailable, ImagingStudy, ImagingStudySeries, ImagingStudySeriesPerformer, ImagingStudySeriesInstance, Immunization, ImmunizationPerformer, ImmunizationEducation, ImmunizationReaction, ImmunizationProtocolApplied, ImmunizationEvaluation, ImmunizationRecommendation, ImmunizationRecommendationRecommendation, ImmunizationRecommendationRecommendationDateCriterion, ImplementationGuide, ImplementationGuideDependsOn, ImplementationGuideGlobal, ImplementationGuideDefinition, ImplementationGuideDefinitionGrouping, ImplementationGuideDefinitionResource, ImplementationGuideDefinitionPage, ImplementationGuideDefinitionParameter, ImplementationGuideDefinitionTemplate, ImplementationGuideManifest, ImplementationGuideManifestResource, ImplementationGuideManifestPage, InsurancePlan, InsurancePlanContact, InsurancePlanCoverage, InsurancePlanCoverageBenefit, InsurancePlanCoverageBenefitLimit, InsurancePlanPlan, InsurancePlanPlanGeneralCost, InsurancePlanPlanSpecificCost, InsurancePlanPlanSpecificCostBenefit, InsurancePlanPlanSpecificCostBenefitCost, Invoice, InvoiceParticipant, InvoiceLineItem, InvoiceLineItemPriceComponent, Library, Linkage, LinkageItem, List, ListEntry, Location, LocationPosition, LocationHoursOfOperation, Measure, MeasureGroup, MeasureGroupPopulation, MeasureGroupStratifier, MeasureGroupStratifierComponent, MeasureSupplementalData, MeasureReport, MeasureReportGroup, MeasureReportGroupPopulation, MeasureReportGroupStratifier, MeasureReportGroupStratifierStratum, MeasureReportGroupStratifierStratumComponent, MeasureReportGroupStratifierStratumPopulation, Media, Medication, MedicationIngredient, MedicationBatch, MedicationAdministration, MedicationAdministrationPerformer, MedicationAdministrationDosage, MedicationDispense, MedicationDispensePerformer, MedicationDispenseSubstitution, MedicationKnowledge, MedicationKnowledgeRelatedMedicationKnowledge, MedicationKnowledgeMonograph, MedicationKnowledgeIngredient, MedicationKnowledgeCost, MedicationKnowledgeMonitoringProgram, MedicationKnowledgeAdministrationGuidelines, MedicationKnowledgeAdministrationGuidelinesDosage, MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, MedicationKnowledgeMedicineClassification, MedicationKnowledgePackaging, MedicationKnowledgeDrugCharacteristic, MedicationKnowledgeRegulatory, MedicationKnowledgeRegulatorySubstitution, MedicationKnowledgeRegulatorySchedule, MedicationKnowledgeRegulatoryMaxDispense, MedicationKnowledgeKinetics, MedicationRequest, MedicationRequestDispenseRequest, MedicationRequestDispenseRequestInitialFill, MedicationRequestSubstitution, MedicationStatement, MedicinalProduct, MedicinalProductName, MedicinalProductNameNamePart, MedicinalProductNameCountryLanguage, MedicinalProductManufacturingBusinessOperation, MedicinalProductSpecialDesignation, MedicinalProductAuthorization, MedicinalProductAuthorizationJurisdictionalAuthorization, MedicinalProductAuthorizationProcedure, MedicinalProductContraindication, MedicinalProductContraindicationOtherTherapy, MedicinalProductIndication, MedicinalProductIndicationOtherTherapy, MedicinalProductIngredient, MedicinalProductIngredientSpecifiedSubstance, MedicinalProductIngredientSpecifiedSubstanceStrength, MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, MedicinalProductIngredientSubstance, MedicinalProductInteraction, MedicinalProductInteractionInteractant, MedicinalProductManufactured, MedicinalProductPackaged, MedicinalProductPackagedBatchIdentifier, MedicinalProductPackagedPackageItem, MedicinalProductPharmaceutical, MedicinalProductPharmaceuticalCharacteristics, MedicinalProductPharmaceuticalRouteOfAdministration, MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, MedicinalProductUndesirableEffect, MessageDefinition, MessageDefinitionFocus, MessageDefinitionAllowedResponse, MessageHeader, MessageHeaderDestination, MessageHeaderSource, MessageHeaderResponse, MolecularSequence, MolecularSequenceReferenceSeq, MolecularSequenceVariant, MolecularSequenceQuality, MolecularSequenceQualityRoc, MolecularSequenceRepository, MolecularSequenceStructureVariant, MolecularSequenceStructureVariantOuter, MolecularSequenceStructureVariantInner, NamingSystem, NamingSystemUniqueId, NutritionOrder, NutritionOrderOralDiet, NutritionOrderOralDietNutrient, NutritionOrderOralDietTexture, NutritionOrderSupplement, NutritionOrderEnteralFormula, NutritionOrderEnteralFormulaAdministration, Observation, ObservationReferenceRange, ObservationComponent, ObservationDefinition, ObservationDefinitionQuantitativeDetails, ObservationDefinitionQualifiedInterval, OperationDefinition, OperationDefinitionParameter, OperationDefinitionParameterBinding, OperationDefinitionParameterReferencedFrom, OperationDefinitionOverload, OperationOutcome, OperationOutcomeIssue, Organization, OrganizationContact, OrganizationAffiliation, Parameters, ParametersParameter, Patient, PatientContact, PatientCommunication, PatientLink, PaymentNotice, PaymentReconciliation, PaymentReconciliationDetail, PaymentReconciliationProcessNote, Person, PersonLink, PlanDefinition, PlanDefinitionGoal, PlanDefinitionGoalTarget, PlanDefinitionAction, PlanDefinitionActionCondition, PlanDefinitionActionRelatedAction, PlanDefinitionActionParticipant, PlanDefinitionActionDynamicValue, Practitioner, PractitionerQualification, PractitionerRole, PractitionerRoleAvailableTime, PractitionerRoleNotAvailable, Procedure, ProcedurePerformer, ProcedureFocalDevice, Provenance, ProvenanceAgent, ProvenanceEntity, Questionnaire, QuestionnaireItem, QuestionnaireItemEnableWhen, QuestionnaireItemAnswerOption, QuestionnaireItemInitial, QuestionnaireResponse, QuestionnaireResponseItem, QuestionnaireResponseItemAnswer, RelatedPerson, RelatedPersonCommunication, RequestGroup, RequestGroupAction, RequestGroupActionCondition, RequestGroupActionRelatedAction, ResearchDefinition, ResearchElementDefinition, ResearchElementDefinitionCharacteristic, ResearchStudy, ResearchStudyArm, ResearchStudyObjective, ResearchSubject, RiskAssessment, RiskAssessmentPrediction, RiskEvidenceSynthesis, RiskEvidenceSynthesisSampleSize, RiskEvidenceSynthesisRiskEstimate, RiskEvidenceSynthesisRiskEstimatePrecisionEstimate, RiskEvidenceSynthesisCertainty, RiskEvidenceSynthesisCertaintyCertaintySubcomponent, Schedule, SearchParameter, SearchParameterComponent, ServiceRequest, Slot, Specimen, SpecimenCollection, SpecimenProcessing, SpecimenContainer, SpecimenDefinition, SpecimenDefinitionTypeTested, SpecimenDefinitionTypeTestedContainer, SpecimenDefinitionTypeTestedContainerAdditive, SpecimenDefinitionTypeTestedHandling, StructureDefinition, StructureDefinitionMapping, StructureDefinitionContext, StructureDefinitionSnapshot, StructureDefinitionDifferential, StructureMap, StructureMapStructure, StructureMapGroup, StructureMapGroupInput, StructureMapGroupRule, StructureMapGroupRuleSource, StructureMapGroupRuleTarget, StructureMapGroupRuleTargetParameter, StructureMapGroupRuleDependent, Subscription, SubscriptionChannel, Substance, SubstanceInstance, SubstanceIngredient, SubstanceNucleicAcid, SubstanceNucleicAcidSubunit, SubstanceNucleicAcidSubunitLinkage, SubstanceNucleicAcidSubunitSugar, SubstancePolymer, SubstancePolymerMonomerSet, SubstancePolymerMonomerSetStartingMaterial, SubstancePolymerRepeat, SubstancePolymerRepeatRepeatUnit, SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation, SubstancePolymerRepeatRepeatUnitStructuralRepresentation, SubstanceProtein, SubstanceProteinSubunit, SubstanceReferenceInformation, SubstanceReferenceInformationGene, SubstanceReferenceInformationGeneElement, SubstanceReferenceInformationClassification, SubstanceReferenceInformationTarget, SubstanceSourceMaterial, SubstanceSourceMaterialFractionDescription, SubstanceSourceMaterialOrganism, SubstanceSourceMaterialOrganismAuthor, SubstanceSourceMaterialOrganismHybrid, SubstanceSourceMaterialOrganismOrganismGeneral, SubstanceSourceMaterialPartDescription, SubstanceSpecification, SubstanceSpecificationMoiety, SubstanceSpecificationProperty, SubstanceSpecificationStructure, SubstanceSpecificationStructureIsotope, SubstanceSpecificationStructureIsotopeMolecularWeight, SubstanceSpecificationStructureRepresentation, SubstanceSpecificationCode, SubstanceSpecificationName, SubstanceSpecificationNameOfficial, SubstanceSpecificationRelationship, SupplyDelivery, SupplyDeliverySuppliedItem, SupplyRequest, SupplyRequestParameter, Task, TaskRestriction, TaskInput, TaskOutput, TerminologyCapabilities, TerminologyCapabilitiesSoftware, TerminologyCapabilitiesImplementation, TerminologyCapabilitiesCodeSystem, TerminologyCapabilitiesCodeSystemVersion, TerminologyCapabilitiesCodeSystemVersionFilter, TerminologyCapabilitiesExpansion, TerminologyCapabilitiesExpansionParameter, TerminologyCapabilitiesValidateCode, TerminologyCapabilitiesTranslation, TerminologyCapabilitiesClosure, TestReport, TestReportParticipant, TestReportSetup, TestReportSetupAction, TestReportSetupActionOperation, TestReportSetupActionAssert, TestReportTest, TestReportTestAction, TestReportTeardown, TestReportTeardownAction, TestScript, TestScriptOrigin, TestScriptDestination, TestScriptMetadata, TestScriptMetadataLink, TestScriptMetadataCapability, TestScriptFixture, TestScriptVariable, TestScriptSetup, TestScriptSetupAction, TestScriptSetupActionOperation, TestScriptSetupActionOperationRequestHeader, TestScriptSetupActionAssert, TestScriptTest, TestScriptTestAction, TestScriptTeardown, TestScriptTeardownAction, ValueSet, ValueSetCompose, ValueSetComposeInclude, ValueSetComposeIncludeConcept, ValueSetComposeIncludeConceptDesignation, ValueSetComposeIncludeFilter, ValueSetExpansion, ValueSetExpansionParameter, ValueSetExpansionContains, VerificationResult, VerificationResultPrimarySource, VerificationResultAttestation, VerificationResultValidator, VisionPrescription, VisionPrescriptionLensSpecification, VisionPrescriptionLensSpecificationPrism, resourceFactory, };
//# sourceMappingURL=data:application/json;base64,