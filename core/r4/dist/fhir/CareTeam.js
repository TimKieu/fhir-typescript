/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { CareTeamStatusCodings } from '../fhirValueSets/CareTeamStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Period } from './Period.js';
import { Identifier } from './Identifier.js';
import { FhirString } from './FhirString.js';
import { ContactPoint } from './ContactPoint.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Identifies all people and organizations who are expected to be involved in the care team.
 */
var CareTeamParticipant = /** @class */ (function (_super) {
    __extends(CareTeamParticipant, _super);
    /**
     * Default constructor for CareTeamParticipant - initializes any required elements to null if a value is not provided.
     */
    function CareTeamParticipant(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['role']) {
            _this.role = source.role.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.role = [];
        }
        if (source['member']) {
            _this.member = new Reference(source.member);
        }
        if (source['onBehalfOf']) {
            _this.onBehalfOf = new Reference(source.onBehalfOf);
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CareTeamParticipant.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["role"]) {
            this.role.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["member"]) {
            (_a = outcome.issue).push.apply(_a, this.member.doModelValidation().issue);
        }
        if (this["onBehalfOf"]) {
            (_b = outcome.issue).push.apply(_b, this.onBehalfOf.doModelValidation().issue);
        }
        if (this["period"]) {
            (_c = outcome.issue).push.apply(_c, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CareTeamParticipant._fts_dataType = 'CareTeamParticipant';
    return CareTeamParticipant;
}(BackboneElement));
/**
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
 */
var CareTeam = /** @class */ (function (_super) {
    __extends(CareTeam, _super);
    /**
     * Default constructor for CareTeam - initializes any required elements to null if a value is not provided.
     */
    function CareTeam(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'CareTeam';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['participant']) {
            _this.participant = source.participant.map(function (x) { return new CareTeamParticipant(x); });
        }
        else {
            _this.participant = [];
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['managingOrganization']) {
            _this.managingOrganization = source.managingOrganization.map(function (x) { return new Reference(x); });
        }
        else {
            _this.managingOrganization = [];
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (CareTeam.status)
     */
    CareTeam.statusRequiredCoding = function () {
        return CareTeamStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CareTeam.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"CareTeam" fhir: CareTeam.resourceType:"CareTeam"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_c = outcome.issue).push.apply(_c, this.encounter.doModelValidation().issue);
        }
        if (this["period"]) {
            (_d = outcome.issue).push.apply(_d, this.period.doModelValidation().issue);
        }
        if (this["participant"]) {
            this.participant.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["managingOrganization"]) {
            this.managingOrganization.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CareTeam._fts_dataType = 'CareTeam';
    return CareTeam;
}(DomainResource));

export { CareTeam, CareTeamParticipant };
//# sourceMappingURL=CareTeam.js.map
