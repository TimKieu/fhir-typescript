/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { AdverseEventActualityCodings } from '../fhirValueSets/AdverseEventActualityCodings.js';
import { AdverseEventCategoryCodings } from '../fhirValueSets/AdverseEventCategoryCodings.js';
import { AdverseEventSeverityCodings } from '../fhirValueSets/AdverseEventSeverityCodings.js';
import { AdverseEventOutcomeCodings } from '../fhirValueSets/AdverseEventOutcomeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';

// <auto-generated/>
/**
 * Information on the possible cause of the event.
 */
var AdverseEventSuspectEntityCausality = /** @class */ (function (_super) {
    __extends(AdverseEventSuspectEntityCausality, _super);
    /**
     * Default constructor for AdverseEventSuspectEntityCausality - initializes any required elements to null if a value is not provided.
     */
    function AdverseEventSuspectEntityCausality(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['assessment']) {
            _this.assessment = new CodeableConcept(source.assessment);
        }
        if (source['productRelatedness']) {
            _this.productRelatedness = new FhirString({ value: source.productRelatedness });
        }
        if (source['author']) {
            _this.author = new Reference(source.author);
        }
        if (source['method']) {
            _this.method = new CodeableConcept(source.method);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AdverseEventSuspectEntityCausality.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["assessment"]) {
            (_a = outcome.issue).push.apply(_a, this.assessment.doModelValidation().issue);
        }
        if (this["productRelatedness"]) {
            (_b = outcome.issue).push.apply(_b, this.productRelatedness.doModelValidation().issue);
        }
        if (this["author"]) {
            (_c = outcome.issue).push.apply(_c, this.author.doModelValidation().issue);
        }
        if (this["method"]) {
            (_d = outcome.issue).push.apply(_d, this.method.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AdverseEventSuspectEntityCausality._fts_dataType = 'AdverseEventSuspectEntityCausality';
    return AdverseEventSuspectEntityCausality;
}(BackboneElement));
/**
 * Describes the entity that is suspected to have caused the adverse event.
 */
var AdverseEventSuspectEntity = /** @class */ (function (_super) {
    __extends(AdverseEventSuspectEntity, _super);
    /**
     * Default constructor for AdverseEventSuspectEntity - initializes any required elements to null if a value is not provided.
     */
    function AdverseEventSuspectEntity(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['instance']) {
            _this.instance = new Reference(source.instance);
        }
        else {
            _this.instance = null;
        }
        if (source['causality']) {
            _this.causality = source.causality.map(function (x) { return new AdverseEventSuspectEntityCausality(x); });
        }
        else {
            _this.causality = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AdverseEventSuspectEntity.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['instance']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property instance:fhir.Reference fhir: AdverseEvent.suspectEntity.instance:Reference', }));
        }
        if (this["instance"]) {
            (_a = outcome.issue).push.apply(_a, this.instance.doModelValidation().issue);
        }
        if (this["causality"]) {
            this.causality.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AdverseEventSuspectEntity._fts_dataType = 'AdverseEventSuspectEntity';
    return AdverseEventSuspectEntity;
}(BackboneElement));
/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
var AdverseEvent = /** @class */ (function (_super) {
    __extends(AdverseEvent, _super);
    /**
     * Default constructor for AdverseEvent - initializes any required elements to null if a value is not provided.
     */
    function AdverseEvent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'AdverseEvent';
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['actuality']) {
            _this.actuality = source.actuality;
        }
        else {
            _this.actuality = null;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['event']) {
            _this.event = new CodeableConcept(source.event);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['detected']) {
            _this.detected = new FhirDateTime({ value: source.detected });
        }
        if (source['recordedDate']) {
            _this.recordedDate = new FhirDateTime({ value: source.recordedDate });
        }
        if (source['resultingCondition']) {
            _this.resultingCondition = source.resultingCondition.map(function (x) { return new Reference(x); });
        }
        else {
            _this.resultingCondition = [];
        }
        if (source['location']) {
            _this.location = new Reference(source.location);
        }
        if (source['seriousness']) {
            _this.seriousness = new CodeableConcept(source.seriousness);
        }
        if (source['severity']) {
            _this.severity = new CodeableConcept(source.severity);
        }
        if (source['outcome']) {
            _this.outcome = new CodeableConcept(source.outcome);
        }
        if (source['recorder']) {
            _this.recorder = new Reference(source.recorder);
        }
        if (source['contributor']) {
            _this.contributor = source.contributor.map(function (x) { return new Reference(x); });
        }
        else {
            _this.contributor = [];
        }
        if (source['suspectEntity']) {
            _this.suspectEntity = source.suspectEntity.map(function (x) { return new AdverseEventSuspectEntity(x); });
        }
        else {
            _this.suspectEntity = [];
        }
        if (source['subjectMedicalHistory']) {
            _this.subjectMedicalHistory = source.subjectMedicalHistory.map(function (x) { return new Reference(x); });
        }
        else {
            _this.subjectMedicalHistory = [];
        }
        if (source['referenceDocument']) {
            _this.referenceDocument = source.referenceDocument.map(function (x) { return new Reference(x); });
        }
        else {
            _this.referenceDocument = [];
        }
        if (source['study']) {
            _this.study = source.study.map(function (x) { return new Reference(x); });
        }
        else {
            _this.study = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for actuality (AdverseEvent.actuality)
     */
    AdverseEvent.actualityRequiredCoding = function () {
        return AdverseEventActualityCodings;
    };
    /**
     * Extensible-bound Value Set for category (AdverseEvent.category)
     */
    AdverseEvent.categoryExtensibleCoding = function () {
        return AdverseEventCategoryCodings;
    };
    /**
     * Required-bound Value Set for severity (AdverseEvent.severity)
     */
    AdverseEvent.severityRequiredCoding = function () {
        return AdverseEventSeverityCodings;
    };
    /**
     * Required-bound Value Set for outcome (AdverseEvent.outcome)
     */
    AdverseEvent.outcomeRequiredCoding = function () {
        return AdverseEventOutcomeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AdverseEvent.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"AdverseEvent" fhir: AdverseEvent.resourceType:"AdverseEvent"', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (!this['actuality']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actuality:AdverseEventActualityCodeType fhir: AdverseEvent.actuality:code', }));
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["event"]) {
            (_b = outcome.issue).push.apply(_b, this.event.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: AdverseEvent.subject:Reference', }));
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_d = outcome.issue).push.apply(_d, this.encounter.doModelValidation().issue);
        }
        if (this["date"]) {
            (_e = outcome.issue).push.apply(_e, this.date.doModelValidation().issue);
        }
        if (this["detected"]) {
            (_f = outcome.issue).push.apply(_f, this.detected.doModelValidation().issue);
        }
        if (this["recordedDate"]) {
            (_g = outcome.issue).push.apply(_g, this.recordedDate.doModelValidation().issue);
        }
        if (this["resultingCondition"]) {
            this.resultingCondition.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["location"]) {
            (_h = outcome.issue).push.apply(_h, this.location.doModelValidation().issue);
        }
        if (this["seriousness"]) {
            (_j = outcome.issue).push.apply(_j, this.seriousness.doModelValidation().issue);
        }
        if (this["severity"]) {
            (_k = outcome.issue).push.apply(_k, this.severity.doModelValidation().issue);
        }
        if (this["outcome"]) {
            (_l = outcome.issue).push.apply(_l, this.outcome.doModelValidation().issue);
        }
        if (this["recorder"]) {
            (_m = outcome.issue).push.apply(_m, this.recorder.doModelValidation().issue);
        }
        if (this["contributor"]) {
            this.contributor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["suspectEntity"]) {
            this.suspectEntity.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subjectMedicalHistory"]) {
            this.subjectMedicalHistory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["referenceDocument"]) {
            this.referenceDocument.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["study"]) {
            this.study.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AdverseEvent._fts_dataType = 'AdverseEvent';
    return AdverseEvent;
}(DomainResource));

export { AdverseEvent, AdverseEventSuspectEntity, AdverseEventSuspectEntityCausality };
//# sourceMappingURL=AdverseEvent.js.map
