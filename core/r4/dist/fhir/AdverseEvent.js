// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AdverseEvent
import * as fhir from '../fhir.js';
// @ts-ignore
import { AdverseEventActualityVsValidation } from '../fhirValueSets/AdverseEventActualityVsValidation.js';
// @ts-ignore
import { AdverseEventSeverityVsValidation } from '../fhirValueSets/AdverseEventSeverityVsValidation.js';
// @ts-ignore
import { AdverseEventOutcomeVsValidation } from '../fhirValueSets/AdverseEventOutcomeVsValidation.js';
/**
 * Information on the possible cause of the event.
 */
export class AdverseEventSuspectEntityCausality extends fhir.BackboneElement {
    /**
     * Default constructor for AdverseEventSuspectEntityCausality - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['assessment']) {
            this.assessment = new fhir.CodeableConcept(source.assessment);
        }
        if (source['productRelatedness']) {
            this.productRelatedness = new fhir.FhirString({ value: source.productRelatedness });
        }
        if (source['_productRelatedness']) {
            if (this.productRelatedness) {
                this.productRelatedness.addExtendedProperties(source._productRelatedness);
            }
            else {
                this.productRelatedness = new fhir.FhirString(source._productRelatedness);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'AdverseEvent.suspectEntity.causality';
        }
        this.vOptS('assessment', expression);
        this.vOptS('productRelatedness', expression);
        this.vOptS('author', expression);
        this.vOptS('method', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdverseEventSuspectEntityCausality._fts_dataType = 'AdverseEventSuspectEntityCausality';
/**
 * Describes the entity that is suspected to have caused the adverse event.
 */
export class AdverseEventSuspectEntity extends fhir.BackboneElement {
    /**
     * Default constructor for AdverseEventSuspectEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['instance']) {
            this.instance = new fhir.Reference(source.instance);
        }
        else {
            this.instance = null;
        }
        if (source['causality']) {
            this.causality = source.causality.map((x) => new fhir.AdverseEventSuspectEntityCausality(x));
        }
        else {
            this.causality = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'AdverseEvent.suspectEntity';
        }
        this.vReqS('instance', expression);
        this.vOptA('causality', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdverseEventSuspectEntity._fts_dataType = 'AdverseEventSuspectEntity';
/**
 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
 */
export class AdverseEvent extends fhir.DomainResource {
    /**
     * Default constructor for AdverseEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AdverseEvent';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['actuality']) {
            this.actuality = new fhir.FhirCode({ value: source.actuality });
        }
        else {
            this.actuality = null;
        }
        if (source['_actuality']) {
            if (this.actuality) {
                this.actuality.addExtendedProperties(source._actuality);
            }
            else {
                this.actuality = new fhir.FhirCode(source._actuality);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['event']) {
            this.event = new fhir.CodeableConcept(source.event);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['detected']) {
            this.detected = new fhir.FhirDateTime({ value: source.detected });
        }
        if (source['_detected']) {
            if (this.detected) {
                this.detected.addExtendedProperties(source._detected);
            }
            else {
                this.detected = new fhir.FhirDateTime(source._detected);
            }
        }
        if (source['recordedDate']) {
            this.recordedDate = new fhir.FhirDateTime({ value: source.recordedDate });
        }
        if (source['_recordedDate']) {
            if (this.recordedDate) {
                this.recordedDate.addExtendedProperties(source._recordedDate);
            }
            else {
                this.recordedDate = new fhir.FhirDateTime(source._recordedDate);
            }
        }
        if (source['resultingCondition']) {
            this.resultingCondition = source.resultingCondition.map((x) => new fhir.Reference(x));
        }
        else {
            this.resultingCondition = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['seriousness']) {
            this.seriousness = new fhir.CodeableConcept(source.seriousness);
        }
        if (source['severity']) {
            this.severity = new fhir.CodeableConcept(source.severity);
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['contributor']) {
            this.contributor = source.contributor.map((x) => new fhir.Reference(x));
        }
        else {
            this.contributor = [];
        }
        if (source['suspectEntity']) {
            this.suspectEntity = source.suspectEntity.map((x) => new fhir.AdverseEventSuspectEntity(x));
        }
        else {
            this.suspectEntity = [];
        }
        if (source['subjectMedicalHistory']) {
            this.subjectMedicalHistory = source.subjectMedicalHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.subjectMedicalHistory = [];
        }
        if (source['referenceDocument']) {
            this.referenceDocument = source.referenceDocument.map((x) => new fhir.Reference(x));
        }
        else {
            this.referenceDocument = [];
        }
        if (source['study']) {
            this.study = source.study.map((x) => new fhir.Reference(x));
        }
        else {
            this.study = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'AdverseEvent';
        }
        this.vReqS('resourceType', expression);
        this.vOptS('identifier', expression);
        this.vReqSV('actuality', expression, 'AdverseEventActuality', AdverseEventActualityVsValidation, 'r');
        this.vOptA('category', expression);
        this.vOptS('event', expression);
        this.vReqS('subject', expression);
        this.vOptS('encounter', expression);
        this.vOptS('date', expression);
        this.vOptS('detected', expression);
        this.vOptS('recordedDate', expression);
        this.vOptA('resultingCondition', expression);
        this.vOptS('location', expression);
        this.vOptS('seriousness', expression);
        this.vOptSV('severity', expression, 'AdverseEventSeverity', AdverseEventSeverityVsValidation, 'r');
        this.vOptSV('outcome', expression, 'AdverseEventOutcome', AdverseEventOutcomeVsValidation, 'r');
        this.vOptS('recorder', expression);
        this.vOptA('contributor', expression);
        this.vOptA('suspectEntity', expression);
        this.vOptA('subjectMedicalHistory', expression);
        this.vOptA('referenceDocument', expression);
        this.vOptA('study', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AdverseEvent._fts_dataType = 'AdverseEvent';
//# sourceMappingURL=data:application/json;base64,