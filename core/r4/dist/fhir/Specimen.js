// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Specimen
import * as fhir from '../fhir.js';
// @ts-ignore
import { SpecimenStatusVsValidation } from '../fhirValueSets/SpecimenStatusVsValidation.js';
/**
 * Details concerning the specimen collection.
 */
export class SpecimenCollection extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['collector']) {
            this.collector = new fhir.Reference(source.collector);
        }
        if (source['collected']) {
            this.collected = source.collected;
        }
        else if (source['collectedDateTime']) {
            this.collected = new fhir.FhirDateTime({ value: source.collectedDateTime });
        }
        else if (source['collectedPeriod']) {
            this.collected = new fhir.Period(source.collectedPeriod);
        }
        if (source['duration']) {
            this.duration = new fhir.Duration(source.duration);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['fastingStatus']) {
            this.fastingStatus = source.fastingStatus;
        }
        else if (source['fastingStatusCodeableConcept']) {
            this.fastingStatus = new fhir.CodeableConcept(source.fastingStatusCodeableConcept);
        }
        else if (source['fastingStatusDuration']) {
            this.fastingStatus = new fhir.Duration(source.fastingStatusDuration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Specimen.collection';
        }
        iss.push(...this.vOS('collector', exp));
        iss.push(...this.vOS('collected', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOS('fastingStatus', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenCollection._fts_dataType = 'SpecimenCollection';
/**
 * Internal flag to properly serialize choice-type element Specimen.collection.collected[x]
 */
SpecimenCollection._fts_collectedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Specimen.collection.fastingStatus[x]
 */
SpecimenCollection._fts_fastingStatusIsChoice = true;
/**
 * Details concerning processing and processing steps for the specimen.
 */
export class SpecimenProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['procedure']) {
            this.procedure = new fhir.CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            this.additive = source.additive.map((x) => new fhir.Reference(x));
        }
        else {
            this.additive = [];
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime']) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Specimen.processing';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('procedure', exp));
        iss.push(...this.vOA('additive', exp));
        iss.push(...this.vOS('time', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenProcessing._fts_dataType = 'SpecimenProcessing';
/**
 * Internal flag to properly serialize choice-type element Specimen.processing.time[x]
 */
SpecimenProcessing._fts_timeIsChoice = true;
/**
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
export class SpecimenContainer extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenContainer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['capacity']) {
            this.capacity = new fhir.Quantity(source.capacity);
        }
        if (source['specimenQuantity']) {
            this.specimenQuantity = new fhir.Quantity(source.specimenQuantity);
        }
        if (source['additive']) {
            this.additive = source.additive;
        }
        else if (source['additiveCodeableConcept']) {
            this.additive = new fhir.CodeableConcept(source.additiveCodeableConcept);
        }
        else if (source['additiveReference']) {
            this.additive = new fhir.Reference(source.additiveReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Specimen.container';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('capacity', exp));
        iss.push(...this.vOS('specimenQuantity', exp));
        iss.push(...this.vOS('additive', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenContainer._fts_dataType = 'SpecimenContainer';
/**
 * Internal flag to properly serialize choice-type element Specimen.container.additive[x]
 */
SpecimenContainer._fts_additiveIsChoice = true;
/**
 * A sample to be used for analysis.
 */
export class Specimen extends fhir.DomainResource {
    /**
     * Default constructor for Specimen - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Specimen';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['accessionIdentifier']) {
            this.accessionIdentifier = new fhir.Identifier(source.accessionIdentifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['receivedTime']) {
            this.receivedTime = new fhir.FhirDateTime({ value: source.receivedTime });
        }
        if (source['_receivedTime']) {
            if (this.receivedTime) {
                this.receivedTime.addExtendedProperties(source._receivedTime);
            }
            else {
                this.receivedTime = new fhir.FhirDateTime(source._receivedTime);
            }
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.Reference(x));
        }
        else {
            this.parent = [];
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        else {
            this.request = [];
        }
        if (source['collection']) {
            this.collection = new fhir.SpecimenCollection(source.collection);
        }
        if (source['processing']) {
            this.processing = source.processing.map((x) => new fhir.SpecimenProcessing(x));
        }
        else {
            this.processing = [];
        }
        if (source['container']) {
            this.container = source.container.map((x) => new fhir.SpecimenContainer(x));
        }
        else {
            this.container = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.condition = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Specimen';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('accessionIdentifier', exp));
        iss.push(...this.vOSV('status', exp, 'SpecimenStatus', SpecimenStatusVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('receivedTime', exp));
        iss.push(...this.vOA('parent', exp));
        iss.push(...this.vOA('request', exp));
        iss.push(...this.vOS('collection', exp));
        iss.push(...this.vOA('processing', exp));
        iss.push(...this.vOA('container', exp));
        iss.push(...this.vOA('condition', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Specimen._fts_dataType = 'Specimen';
//# sourceMappingURL=data:application/json;base64,