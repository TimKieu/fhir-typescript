/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SpecimenStatusCodings } from '../fhirValueSets/SpecimenStatusCodings.js';
import { V20493Codings } from '../fhirValueSets/V20493Codings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Duration } from './Duration.js';
import { Quantity } from './Quantity.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';
import { Identifier } from './Identifier.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Details concerning the specimen collection.
 */
var SpecimenCollection = /** @class */ (function (_super) {
    __extends(SpecimenCollection, _super);
    /**
     * Default constructor for SpecimenCollection - initializes any required elements to null if a value is not provided.
     */
    function SpecimenCollection(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['collector']) {
            _this.collector = new Reference(source.collector);
        }
        if (source['collected']) {
            _this.collected = source.collected;
        }
        else if (source['collectedDateTime']) {
            _this.collected = new FhirDateTime({ value: source.collectedDateTime });
        }
        else if (source['collectedPeriod']) {
            _this.collected = new Period(source.collectedPeriod);
        }
        if (source['duration']) {
            _this.duration = new Duration(source.duration);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['method']) {
            _this.method = new CodeableConcept(source.method);
        }
        if (source['bodySite']) {
            _this.bodySite = new CodeableConcept(source.bodySite);
        }
        if (source['fastingStatus']) {
            _this.fastingStatus = source.fastingStatus;
        }
        else if (source['fastingStatusCodeableConcept']) {
            _this.fastingStatus = new CodeableConcept(source.fastingStatusCodeableConcept);
        }
        else if (source['fastingStatusDuration']) {
            _this.fastingStatus = new Duration(source.fastingStatusDuration);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenCollection.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["collector"]) {
            (_a = outcome.issue).push.apply(_a, this.collector.doModelValidation().issue);
        }
        if (this["duration"]) {
            (_b = outcome.issue).push.apply(_b, this.duration.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_c = outcome.issue).push.apply(_c, this.quantity.doModelValidation().issue);
        }
        if (this["method"]) {
            (_d = outcome.issue).push.apply(_d, this.method.doModelValidation().issue);
        }
        if (this["bodySite"]) {
            (_e = outcome.issue).push.apply(_e, this.bodySite.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenCollection._fts_dataType = 'SpecimenCollection';
    /**
     * Internal flag to properly serialize choice-type element Specimen.collection.collected[x]
     */
    SpecimenCollection._fts_collectedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element Specimen.collection.fastingStatus[x]
     */
    SpecimenCollection._fts_fastingStatusIsChoice = true;
    return SpecimenCollection;
}(BackboneElement));
/**
 * Details concerning processing and processing steps for the specimen.
 */
var SpecimenProcessing = /** @class */ (function (_super) {
    __extends(SpecimenProcessing, _super);
    /**
     * Default constructor for SpecimenProcessing - initializes any required elements to null if a value is not provided.
     */
    function SpecimenProcessing(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['procedure']) {
            _this.procedure = new CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            _this.additive = source.additive.map(function (x) { return new Reference(x); });
        }
        else {
            _this.additive = [];
        }
        if (source['time']) {
            _this.time = source.time;
        }
        else if (source['timeDateTime']) {
            _this.time = new FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            _this.time = new Period(source.timePeriod);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenProcessing.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["procedure"]) {
            (_b = outcome.issue).push.apply(_b, this.procedure.doModelValidation().issue);
        }
        if (this["additive"]) {
            this.additive.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenProcessing._fts_dataType = 'SpecimenProcessing';
    /**
     * Internal flag to properly serialize choice-type element Specimen.processing.time[x]
     */
    SpecimenProcessing._fts_timeIsChoice = true;
    return SpecimenProcessing;
}(BackboneElement));
/**
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
var SpecimenContainer = /** @class */ (function (_super) {
    __extends(SpecimenContainer, _super);
    /**
     * Default constructor for SpecimenContainer - initializes any required elements to null if a value is not provided.
     */
    function SpecimenContainer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['capacity']) {
            _this.capacity = new Quantity(source.capacity);
        }
        if (source['specimenQuantity']) {
            _this.specimenQuantity = new Quantity(source.specimenQuantity);
        }
        if (source['additive']) {
            _this.additive = source.additive;
        }
        else if (source['additiveCodeableConcept']) {
            _this.additive = new CodeableConcept(source.additiveCodeableConcept);
        }
        else if (source['additiveReference']) {
            _this.additive = new Reference(source.additiveReference);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenContainer.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["capacity"]) {
            (_c = outcome.issue).push.apply(_c, this.capacity.doModelValidation().issue);
        }
        if (this["specimenQuantity"]) {
            (_d = outcome.issue).push.apply(_d, this.specimenQuantity.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenContainer._fts_dataType = 'SpecimenContainer';
    /**
     * Internal flag to properly serialize choice-type element Specimen.container.additive[x]
     */
    SpecimenContainer._fts_additiveIsChoice = true;
    return SpecimenContainer;
}(BackboneElement));
/**
 * A sample to be used for analysis.
 */
var Specimen = /** @class */ (function (_super) {
    __extends(Specimen, _super);
    /**
     * Default constructor for Specimen - initializes any required elements to null if a value is not provided.
     */
    function Specimen(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Specimen';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['accessionIdentifier']) {
            _this.accessionIdentifier = new Identifier(source.accessionIdentifier);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['receivedTime']) {
            _this.receivedTime = new FhirDateTime({ value: source.receivedTime });
        }
        if (source['parent']) {
            _this.parent = source.parent.map(function (x) { return new Reference(x); });
        }
        else {
            _this.parent = [];
        }
        if (source['request']) {
            _this.request = source.request.map(function (x) { return new Reference(x); });
        }
        else {
            _this.request = [];
        }
        if (source['collection']) {
            _this.collection = new SpecimenCollection(source.collection);
        }
        if (source['processing']) {
            _this.processing = source.processing.map(function (x) { return new SpecimenProcessing(x); });
        }
        else {
            _this.processing = [];
        }
        if (source['container']) {
            _this.container = source.container.map(function (x) { return new SpecimenContainer(x); });
        }
        else {
            _this.container = [];
        }
        if (source['condition']) {
            _this.condition = source.condition.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.condition = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Specimen.status)
     */
    Specimen.statusRequiredCoding = function () {
        return SpecimenStatusCodings;
    };
    /**
     * Extensible-bound Value Set for condition (Specimen.condition)
     */
    Specimen.conditionExtensibleCoding = function () {
        return V20493Codings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Specimen.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Specimen" fhir: Specimen.resourceType:"Specimen"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["accessionIdentifier"]) {
            (_a = outcome.issue).push.apply(_a, this.accessionIdentifier.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["receivedTime"]) {
            (_d = outcome.issue).push.apply(_d, this.receivedTime.doModelValidation().issue);
        }
        if (this["parent"]) {
            this.parent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["request"]) {
            this.request.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["collection"]) {
            (_e = outcome.issue).push.apply(_e, this.collection.doModelValidation().issue);
        }
        if (this["processing"]) {
            this.processing.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["container"]) {
            this.container.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["condition"]) {
            this.condition.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Specimen._fts_dataType = 'Specimen';
    return Specimen;
}(DomainResource));

export { Specimen, SpecimenCollection, SpecimenContainer, SpecimenProcessing };
//# sourceMappingURL=Specimen.js.map
