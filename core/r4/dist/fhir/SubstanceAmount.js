/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { FhirElement } from './FhirElement.js';
import { BackboneElement } from './BackboneElement.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { FhirString } from './FhirString.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * Reference range of possible or expected values.
 */
var SubstanceAmountReferenceRange = /** @class */ (function (_super) {
    __extends(SubstanceAmountReferenceRange, _super);
    /**
     * Default constructor for SubstanceAmountReferenceRange - initializes any required elements to null if a value is not provided.
     */
    function SubstanceAmountReferenceRange(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['lowLimit']) {
            _this.lowLimit = new Quantity(source.lowLimit);
        }
        if (source['highLimit']) {
            _this.highLimit = new Quantity(source.highLimit);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceAmountReferenceRange.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["lowLimit"]) {
            (_a = outcome.issue).push.apply(_a, this.lowLimit.doModelValidation().issue);
        }
        if (this["highLimit"]) {
            (_b = outcome.issue).push.apply(_b, this.highLimit.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceAmountReferenceRange._fts_dataType = 'SubstanceAmountReferenceRange';
    return SubstanceAmountReferenceRange;
}(FhirElement));
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
var SubstanceAmount = /** @class */ (function (_super) {
    __extends(SubstanceAmount, _super);
    /**
     * Default constructor for SubstanceAmount - initializes any required elements to null if a value is not provided.
     */
    function SubstanceAmount(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['amount']) {
            _this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            _this.amount = new Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            _this.amount = new Range(source.amountRange);
        }
        else if (source['amountString']) {
            _this.amount = new FhirString({ value: source.amountString });
        }
        if (source['amountType']) {
            _this.amountType = new CodeableConcept(source.amountType);
        }
        if (source['amountText']) {
            _this.amountText = new FhirString({ value: source.amountText });
        }
        if (source['referenceRange']) {
            _this.referenceRange = new SubstanceAmountReferenceRange(source.referenceRange);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceAmount.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["amountType"]) {
            (_a = outcome.issue).push.apply(_a, this.amountType.doModelValidation().issue);
        }
        if (this["amountText"]) {
            (_b = outcome.issue).push.apply(_b, this.amountText.doModelValidation().issue);
        }
        if (this["referenceRange"]) {
            (_c = outcome.issue).push.apply(_c, this.referenceRange.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceAmount._fts_dataType = 'SubstanceAmount';
    /**
     * Internal flag to properly serialize choice-type element SubstanceAmount.amount[x]
     */
    SubstanceAmount._fts_amountIsChoice = true;
    return SubstanceAmount;
}(BackboneElement));

export { SubstanceAmount, SubstanceAmountReferenceRange };
//# sourceMappingURL=SubstanceAmount.js.map
