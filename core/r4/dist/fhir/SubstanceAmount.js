// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: SubstanceAmount
import * as fhir from '../fhir.js';
/**
 * Reference range of possible or expected values.
 */
export class SubstanceAmountReferenceRange extends fhir.FhirElement {
    /**
     * Default constructor for SubstanceAmountReferenceRange - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['lowLimit']) {
            this.lowLimit = new fhir.Quantity(source.lowLimit);
        }
        if (source['highLimit']) {
            this.highLimit = new fhir.Quantity(source.highLimit);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["lowLimit"]) {
            issues.push(...this.lowLimit.doModelValidation());
        }
        if (this["highLimit"]) {
            issues.push(...this.highLimit.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceAmountReferenceRange._fts_dataType = 'SubstanceAmountReferenceRange';
/**
 * Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
 */
export class SubstanceAmount extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceAmount - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            this.amount = new fhir.Range(source.amountRange);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source['amountText']) {
            this.amountText = new fhir.FhirString({ value: source.amountText });
        }
        if (source['referenceRange']) {
            this.referenceRange = new fhir.SubstanceAmountReferenceRange(source.referenceRange);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["amountType"]) {
            issues.push(...this.amountType.doModelValidation());
        }
        if (this["amountText"]) {
            issues.push(...this.amountText.doModelValidation());
        }
        if (this["referenceRange"]) {
            issues.push(...this.referenceRange.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceAmount._fts_dataType = 'SubstanceAmount';
/**
 * Internal flag to properly serialize choice-type element SubstanceAmount.amount[x]
 */
SubstanceAmount._fts_amountIsChoice = true;
//# sourceMappingURL=data:application/json;base64,