// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: HumanName
import * as fhir from '../fhir.js';
// @ts-ignore
import { NameUseCodes } from '../fhirValueSets/NameUseCodes.js';
/**
 * A human's name with the ability to identify parts and usage.
 */
export class HumanName extends fhir.FhirElement {
    /**
     * Default constructor for HumanName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['family']) {
            this.family = new fhir.FhirString({ value: source.family });
        }
        if (source['given']) {
            this.given = source.given.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.given = [];
        }
        if (source['prefix']) {
            this.prefix = source.prefix.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.prefix = [];
        }
        if (source['suffix']) {
            this.suffix = source.suffix.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.suffix = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for use (HumanName.use)
     */
    static get useRequiredCodes() {
        return NameUseCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['use'] && (!Object.values(NameUseCodes).includes(this.use))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property use?:fhir.FhirCode<NameUseCodeType> fhir: HumanName.use:code Required binding to: NameUse' });
        }
        if (this["use"]) {
            issues.push(...this.use.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["family"]) {
            issues.push(...this.family.doModelValidation());
        }
        if (this["given"]) {
            this.given.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["prefix"]) {
            this.prefix.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["suffix"]) {
            this.suffix.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
    /**
     * Convert a HumanName into a displayable string
     */
    toDisplay(familyFirst = true, includeAnnotations = false) {
        if ((this.text) && (this.text.length > 0)) {
            return this.text.toString();
        }
        var val = '';
        if (familyFirst) {
            if (this.family) {
                val = this.family.toString();
            }
            if (this.given) {
                val += (val.length > 0 ? ', ' : '') + this.given.join(' ');
            }
            if (includeAnnotations) {
                if (this.suffix) {
                    val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
                }
                if (this.prefix) {
                    val += (val.length > 0 ? ', ' : '') + this.prefix.join(', ');
                }
            }
            return val;
        }
        if ((includeAnnotations) && (this.prefix)) {
            val += this.prefix.join(', ');
        }
        if (this.given) {
            val = (val.length > 0 ? ' ' : '') + this.given.join(' ');
        }
        if (this.family) {
            val += (val.length > 0 ? ' ' : '') + this.family;
        }
        if ((includeAnnotations) && (this.suffix)) {
            val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
        }
        return val;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HumanName._fts_dataType = 'HumanName';
//# sourceMappingURL=data:application/json;base64,