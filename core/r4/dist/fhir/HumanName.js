/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { NameUseCodings } from '../fhirValueSets/NameUseCodings.js';
import { FhirElement } from './FhirElement.js';
import { FhirString } from './FhirString.js';
import { Period } from './Period.js';

// <auto-generated/>
/**
 * A human's name with the ability to identify parts and usage.
 */
var HumanName = /** @class */ (function (_super) {
    __extends(HumanName, _super);
    /**
     * Default constructor for HumanName - initializes any required elements to null if a value is not provided.
     */
    function HumanName(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['use']) {
            _this.use = source.use;
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['family']) {
            _this.family = new FhirString({ value: source.family });
        }
        if (source['given']) {
            _this.given = source.given.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.given = [];
        }
        if (source['prefix']) {
            _this.prefix = source.prefix.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.prefix = [];
        }
        if (source['suffix']) {
            _this.suffix = source.suffix.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.suffix = [];
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for use (HumanName.use)
     */
    HumanName.useRequiredCoding = function () {
        return NameUseCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    HumanName.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["text"]) {
            (_a = outcome.issue).push.apply(_a, this.text.doModelValidation().issue);
        }
        if (this["family"]) {
            (_b = outcome.issue).push.apply(_b, this.family.doModelValidation().issue);
        }
        if (this["given"]) {
            this.given.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["prefix"]) {
            this.prefix.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["suffix"]) {
            this.suffix.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["period"]) {
            (_c = outcome.issue).push.apply(_c, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Convert a HumanName into a displayable string
     */
    HumanName.prototype.toDisplay = function (familyFirst, includeAnnotations) {
        if (familyFirst === void 0) { familyFirst = true; }
        if (includeAnnotations === void 0) { includeAnnotations = false; }
        if ((this.text) && (this.text.length > 0)) {
            return this.text.toString();
        }
        var val = '';
        if (familyFirst) {
            if (this.family) {
                val = this.family.toString();
            }
            if (this.given) {
                val += (val.length > 0 ? ', ' : '') + this.given.join(' ');
            }
            if (includeAnnotations) {
                if (this.suffix) {
                    val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
                }
                if (this.prefix) {
                    val += (val.length > 0 ? ', ' : '') + this.prefix.join(', ');
                }
            }
            return val;
        }
        if ((includeAnnotations) && (this.prefix)) {
            val += this.prefix.join(', ');
        }
        if (this.given) {
            val = (val.length > 0 ? ' ' : '') + this.given.join(' ');
        }
        if (this.family) {
            val += (val.length > 0 ? ' ' : '') + this.family;
        }
        if ((includeAnnotations) && (this.suffix)) {
            val += (val.length > 0 ? ', ' : '') + this.suffix.join(', ');
        }
        return val;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    HumanName._fts_dataType = 'HumanName';
    return HumanName;
}(FhirElement));

export { HumanName };
//# sourceMappingURL=HumanName.js.map
