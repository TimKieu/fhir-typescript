/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { FhirBoolean } from './FhirBoolean.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';
import { Attachment } from './Attachment.js';
import { Reference } from './Reference.js';

// <auto-generated/>
/**
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
var BodyStructure = /** @class */ (function (_super) {
    __extends(BodyStructure, _super);
    /**
     * Default constructor for BodyStructure - initializes any required elements to null if a value is not provided.
     */
    function BodyStructure(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'BodyStructure';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['morphology']) {
            _this.morphology = new CodeableConcept(source.morphology);
        }
        if (source['location']) {
            _this.location = new CodeableConcept(source.location);
        }
        if (source['locationQualifier']) {
            _this.locationQualifier = source.locationQualifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.locationQualifier = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['image']) {
            _this.image = source.image.map(function (x) { return new Attachment(x); });
        }
        else {
            _this.image = [];
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BodyStructure.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"BodyStructure" fhir: BodyStructure.resourceType:"BodyStructure"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (this["morphology"]) {
            (_b = outcome.issue).push.apply(_b, this.morphology.doModelValidation().issue);
        }
        if (this["location"]) {
            (_c = outcome.issue).push.apply(_c, this.location.doModelValidation().issue);
        }
        if (this["locationQualifier"]) {
            this.locationQualifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_d = outcome.issue).push.apply(_d, this.description.doModelValidation().issue);
        }
        if (this["image"]) {
            this.image.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: BodyStructure.patient:Reference', }));
        }
        if (this["patient"]) {
            (_e = outcome.issue).push.apply(_e, this.patient.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BodyStructure._fts_dataType = 'BodyStructure';
    return BodyStructure;
}(DomainResource));

export { BodyStructure };
//# sourceMappingURL=BodyStructure.js.map
