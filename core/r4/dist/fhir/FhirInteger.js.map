{"version":3,"file":"FhirInteger.js","sources":["../../src/fhir/FhirInteger.ts"],"sourcesContent":["// Minimum TypeScript Version: 3.7\r\n// FHIR Primitive: integer\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n\r\n/**\r\n * 32 bit number; for values larger than this, use decimal\r\n */\r\nexport interface FhirIntegerArgs extends fhir.FhirPrimitiveArgs {\r\n  /**\r\n   * 32 bit number; for values larger than this, use decimal\r\n   */\r\n  value?:FhirInteger|number|undefined;\r\n}\r\n\r\n/**\r\n * 32 bit number; for values larger than this, use decimal\r\n */\r\nexport class FhirInteger extends fhir.FhirPrimitive {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Integer';\r\n  /**\r\n   * Mapping of this datatype to a JSON equivalent\r\n   */\r\n  public static readonly _fts_jsonType:string = 'number';\r\n  // published regex: -?([0]|([1-9][0-9]*))\r\n  public static readonly _fts_regex:RegExp = /^-?([0]|([1-9][0-9]*))$/\r\n  /**\r\n   * A integer value, represented as a JS number\r\n   */\r\n  declare value?:number|null|undefined;\r\n  /**\r\n     * Create a FhirInteger\r\n     * @param value 32 bit number; for values larger than this, use decimal\r\n     * @param id Unique id for inter-element referencing (uncommon on primitives)\r\n     * @param extension Additional content defined by implementations\r\n     * @param options Options to pass to extension constructors\r\n  */\r\n  constructor(source:Partial<FhirIntegerArgs> = {}, options:fhir.FhirConstructorOptions = { } ) {\r\n    super(source, options);\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if ((this.value) && (!FhirInteger._fts_regex.test(this.value.toString()))) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.InvalidContent,  diagnostics: \"Invalid value in primitive type integer\", }));\r\n    }\r\n    return outcome;\r\n  }\r\n  /**\r\n   * Returns a string representation of an object.\r\n   * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\r\n   */\r\n  public toString(radix?:number):string { return (this.value ?? NaN).toString(radix); }\r\n  /**\r\n   * Returns a string representing a number in fixed-point notation.\r\n   * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n   */\r\n  public toFixed(fractionDigits?:number):string { return (this.value ?? NaN).toFixed(fractionDigits); }\r\n  /**\r\n   * Returns a string containing a number represented in exponential notation.\r\n   * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n   */\r\n  public toExponential(fractionDigits?:number):string { return (this.value ?? NaN).toExponential(fractionDigits); }\r\n  /**\r\n   * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\r\n   * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\r\n   */\r\n  public toPrecision(precision?:number):string { return (this.value ?? NaN).toPrecision(precision); }\r\n  /**\r\n   * Returns the primitive value of the specified object.\r\n   */\r\n  public valueOf():number { return (this.value ?? NaN); }\r\n}\r\n"],"names":["fhir.OperationOutcomeIssue","fhir.FhirPrimitive"],"mappings":";;;;;;;;AAAA;AAkBA;;AAEG;AACH,IAAA,WAAA,kBAAA,UAAA,MAAA,EAAA;IAAiC,SAAkB,CAAA,WAAA,EAAA,MAAA,CAAA,CAAA;AAejD;;;;;;AAME;IACF,SAAY,WAAA,CAAA,MAAoC,EAAE,OAAyC,EAAA;AAA/E,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAoC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAyC,GAAA,EAAA,CAAA,EAAA;eACzF,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAAA,IAAA,CAAA;KACvB;AACD;;AAEG;AACa,IAAA,WAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;AACzE,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,cAAc,EAAG,WAAW,EAAE,yCAAyC,GAAG,CAAC,CAAC,CAAC;AAC5L,SAAA;AACD,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AACD;;;AAGG;IACI,WAAQ,CAAA,SAAA,CAAA,QAAA,GAAf,UAAgB,KAAa,EAAA,EAAA,IAAA,EAAA,CAAA,CAAW,OAAO,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,mCAAI,GAAG,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAA;AACrF;;;AAGG;IACI,WAAO,CAAA,SAAA,CAAA,OAAA,GAAd,UAAe,cAAsB,EAAA,EAAA,IAAA,EAAA,CAAA,CAAW,OAAO,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,mCAAI,GAAG,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,EAAE,CAAA;AACrG;;;AAGG;IACI,WAAa,CAAA,SAAA,CAAA,aAAA,GAApB,UAAqB,cAAsB,EAAA,EAAA,IAAA,EAAA,CAAA,CAAW,OAAO,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,mCAAI,GAAG,EAAE,aAAa,CAAC,cAAc,CAAC,CAAC,EAAE,CAAA;AACjH;;;AAGG;IACI,WAAW,CAAA,SAAA,CAAA,WAAA,GAAlB,UAAmB,SAAiB,EAAA,EAAA,IAAA,EAAA,CAAA,CAAW,OAAO,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,mCAAI,GAAG,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,CAAA;AACnG;;AAEG;AACI,IAAA,WAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA,EAAA,IAAA,EAAA,CAAA,CAA0B,QAAQ,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,EAAE,EAAE,CAAA;AAzDvD;;AAEG;IACoB,WAAa,CAAA,aAAA,GAAU,SAAS,CAAC;AACxD;;AAEG;IACoB,WAAa,CAAA,aAAA,GAAU,QAAQ,CAAC;;IAEhC,WAAU,CAAA,UAAA,GAAU,yBAAyB,CAAA;IAiDtE,OAAC,WAAA,CAAA;AAAA,CA3DD,CAAiCC,aAAkB,CA2DlD;;;;"}