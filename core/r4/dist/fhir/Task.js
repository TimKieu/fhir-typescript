// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Task
import * as fhir from '../fhir.js';
// @ts-ignore
import { TaskStatusCodes } from '../fhirValueSets/TaskStatusCodes.js';
// @ts-ignore
import { TaskIntentCodes } from '../fhirValueSets/TaskIntentCodes.js';
// @ts-ignore
import { RequestPriorityCodes } from '../fhirValueSets/RequestPriorityCodes.js';
// @ts-ignore
import { PerformerRoleCodings, } from '../fhirValueSets/PerformerRoleCodings.js';
/**
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
export class TaskRestriction extends fhir.BackboneElement {
    /**
     * Default constructor for TaskRestriction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['repetitions']) {
            this.repetitions = new fhir.FhirPositiveInt({ value: source.repetitions });
        }
        if (source['_repetitions']) {
            if (this.repetitions) {
                this.repetitions.addExtendedProperties(source._repetitions);
            }
            else {
                this.repetitions = new fhir.FhirPositiveInt(source._repetitions);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        else {
            this.recipient = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["repetitions"]) {
            issues.push(...this.repetitions.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["recipient"]) {
            this.recipient.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TaskRestriction._fts_dataType = 'TaskRestriction';
/**
 * Additional information that may be needed in the execution of the task.
 */
export class TaskInput extends fhir.BackboneElement {
    /**
     * Default constructor for TaskInput - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueCanonical']) {
            this.value = new fhir.FhirCanonical({ value: source.valueCanonical });
        }
        else if (source['valueCode']) {
            this.value = new fhir.FhirCode({ value: source.valueCode });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueId']) {
            this.value = new fhir.FhirId({ value: source.valueId });
        }
        else if (source['valueInstant']) {
            this.value = new fhir.FhirInstant({ value: source.valueInstant });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueMarkdown']) {
            this.value = new fhir.FhirMarkdown({ value: source.valueMarkdown });
        }
        else if (source['valueOid']) {
            this.value = new fhir.FhirOid({ value: source.valueOid });
        }
        else if (source['valuePositiveInt']) {
            this.value = new fhir.FhirPositiveInt({ value: source.valuePositiveInt });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueUnsignedInt']) {
            this.value = new fhir.FhirUnsignedInt({ value: source.valueUnsignedInt });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueUrl']) {
            this.value = new fhir.FhirUrl({ value: source.valueUrl });
        }
        else if (source['valueUuid']) {
            this.value = new fhir.FhirUuid({ value: source.valueUuid });
        }
        else if (source['valueAddress']) {
            this.value = new fhir.Address(source.valueAddress);
        }
        else if (source['valueAge']) {
            this.value = new fhir.Age(source.valueAge);
        }
        else if (source['valueAnnotation']) {
            this.value = new fhir.Annotation(source.valueAnnotation);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueContactPoint']) {
            this.value = new fhir.ContactPoint(source.valueContactPoint);
        }
        else if (source['valueCount']) {
            this.value = new fhir.Count(source.valueCount);
        }
        else if (source['valueDistance']) {
            this.value = new fhir.Distance(source.valueDistance);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration);
        }
        else if (source['valueHumanName']) {
            this.value = new fhir.HumanName(source.valueHumanName);
        }
        else if (source['valueIdentifier']) {
            this.value = new fhir.Identifier(source.valueIdentifier);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney);
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData);
        }
        else if (source['valueSignature']) {
            this.value = new fhir.Signature(source.valueSignature);
        }
        else if (source['valueTiming']) {
            this.value = new fhir.Timing(source.valueTiming);
        }
        else if (source['valueContactDetail']) {
            this.value = new fhir.ContactDetail(source.valueContactDetail);
        }
        else if (source['valueContributor']) {
            this.value = new fhir.Contributor(source.valueContributor);
        }
        else if (source['valueDataRequirement']) {
            this.value = new fhir.DataRequirement(source.valueDataRequirement);
        }
        else if (source['valueExpression']) {
            this.value = new fhir.Expression(source.valueExpression);
        }
        else if (source['valueParameterDefinition']) {
            this.value = new fhir.ParameterDefinition(source.valueParameterDefinition);
        }
        else if (source['valueRelatedArtifact']) {
            this.value = new fhir.RelatedArtifact(source.valueRelatedArtifact);
        }
        else if (source['valueTriggerDefinition']) {
            this.value = new fhir.TriggerDefinition(source.valueTriggerDefinition);
        }
        else if (source['valueUsageContext']) {
            this.value = new fhir.UsageContext(source.valueUsageContext);
        }
        else if (source['valueDosage']) {
            this.value = new fhir.Dosage(source.valueDosage);
        }
        else if (source['valueMeta']) {
            this.value = new fhir.Meta(source.valueMeta);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Task.input.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value: fhir: Task.input.value[x]:' });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TaskInput._fts_dataType = 'TaskInput';
/**
 * Internal flag to properly serialize choice-type element Task.input.value[x]
 */
TaskInput._fts_valueIsChoice = true;
/**
 * Outputs produced by the Task.
 */
export class TaskOutput extends fhir.BackboneElement {
    /**
     * Default constructor for TaskOutput - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueCanonical']) {
            this.value = new fhir.FhirCanonical({ value: source.valueCanonical });
        }
        else if (source['valueCode']) {
            this.value = new fhir.FhirCode({ value: source.valueCode });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueId']) {
            this.value = new fhir.FhirId({ value: source.valueId });
        }
        else if (source['valueInstant']) {
            this.value = new fhir.FhirInstant({ value: source.valueInstant });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueMarkdown']) {
            this.value = new fhir.FhirMarkdown({ value: source.valueMarkdown });
        }
        else if (source['valueOid']) {
            this.value = new fhir.FhirOid({ value: source.valueOid });
        }
        else if (source['valuePositiveInt']) {
            this.value = new fhir.FhirPositiveInt({ value: source.valuePositiveInt });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueUnsignedInt']) {
            this.value = new fhir.FhirUnsignedInt({ value: source.valueUnsignedInt });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueUrl']) {
            this.value = new fhir.FhirUrl({ value: source.valueUrl });
        }
        else if (source['valueUuid']) {
            this.value = new fhir.FhirUuid({ value: source.valueUuid });
        }
        else if (source['valueAddress']) {
            this.value = new fhir.Address(source.valueAddress);
        }
        else if (source['valueAge']) {
            this.value = new fhir.Age(source.valueAge);
        }
        else if (source['valueAnnotation']) {
            this.value = new fhir.Annotation(source.valueAnnotation);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueContactPoint']) {
            this.value = new fhir.ContactPoint(source.valueContactPoint);
        }
        else if (source['valueCount']) {
            this.value = new fhir.Count(source.valueCount);
        }
        else if (source['valueDistance']) {
            this.value = new fhir.Distance(source.valueDistance);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration);
        }
        else if (source['valueHumanName']) {
            this.value = new fhir.HumanName(source.valueHumanName);
        }
        else if (source['valueIdentifier']) {
            this.value = new fhir.Identifier(source.valueIdentifier);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney);
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData);
        }
        else if (source['valueSignature']) {
            this.value = new fhir.Signature(source.valueSignature);
        }
        else if (source['valueTiming']) {
            this.value = new fhir.Timing(source.valueTiming);
        }
        else if (source['valueContactDetail']) {
            this.value = new fhir.ContactDetail(source.valueContactDetail);
        }
        else if (source['valueContributor']) {
            this.value = new fhir.Contributor(source.valueContributor);
        }
        else if (source['valueDataRequirement']) {
            this.value = new fhir.DataRequirement(source.valueDataRequirement);
        }
        else if (source['valueExpression']) {
            this.value = new fhir.Expression(source.valueExpression);
        }
        else if (source['valueParameterDefinition']) {
            this.value = new fhir.ParameterDefinition(source.valueParameterDefinition);
        }
        else if (source['valueRelatedArtifact']) {
            this.value = new fhir.RelatedArtifact(source.valueRelatedArtifact);
        }
        else if (source['valueTriggerDefinition']) {
            this.value = new fhir.TriggerDefinition(source.valueTriggerDefinition);
        }
        else if (source['valueUsageContext']) {
            this.value = new fhir.UsageContext(source.valueUsageContext);
        }
        else if (source['valueDosage']) {
            this.value = new fhir.Dosage(source.valueDosage);
        }
        else if (source['valueMeta']) {
            this.value = new fhir.Meta(source.valueMeta);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Task.output.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value: fhir: Task.output.value[x]:' });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TaskOutput._fts_dataType = 'TaskOutput';
/**
 * Internal flag to properly serialize choice-type element Task.output.value[x]
 */
TaskOutput._fts_valueIsChoice = true;
/**
 * A task to be performed.
 */
export class Task extends fhir.DomainResource {
    /**
     * Default constructor for Task - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Task';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = new fhir.FhirCanonical({ value: source.instantiatesCanonical });
        }
        if (source['_instantiatesCanonical']) {
            if (this.instantiatesCanonical) {
                this.instantiatesCanonical.addExtendedProperties(source._instantiatesCanonical);
            }
            else {
                this.instantiatesCanonical = new fhir.FhirCanonical(source._instantiatesCanonical);
            }
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = new fhir.FhirUri({ value: source.instantiatesUri });
        }
        if (source['_instantiatesUri']) {
            if (this.instantiatesUri) {
                this.instantiatesUri.addExtendedProperties(source._instantiatesUri);
            }
            else {
                this.instantiatesUri = new fhir.FhirUri(source._instantiatesUri);
            }
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['businessStatus']) {
            this.businessStatus = new fhir.CodeableConcept(source.businessStatus);
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['focus']) {
            this.focus = new fhir.Reference(source.focus);
        }
        if (source['for']) {
            this.for = new fhir.Reference(source.for);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['executionPeriod']) {
            this.executionPeriod = new fhir.Period(source.executionPeriod);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['lastModified']) {
            this.lastModified = new fhir.FhirDateTime({ value: source.lastModified });
        }
        if (source['_lastModified']) {
            if (this.lastModified) {
                this.lastModified.addExtendedProperties(source._lastModified);
            }
            else {
                this.lastModified = new fhir.FhirDateTime(source._lastModified);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performerType']) {
            this.performerType = source.performerType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.performerType = [];
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = new fhir.CodeableConcept(source.reasonCode);
        }
        if (source['reasonReference']) {
            this.reasonReference = new fhir.Reference(source.reasonReference);
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        else {
            this.insurance = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.relevantHistory = [];
        }
        if (source['restriction']) {
            this.restriction = new fhir.TaskRestriction(source.restriction);
        }
        if (source['input']) {
            this.input = source.input.map((x) => new fhir.TaskInput(x));
        }
        else {
            this.input = [];
        }
        if (source['output']) {
            this.output = source.output.map((x) => new fhir.TaskOutput(x));
        }
        else {
            this.output = [];
        }
    }
    /**
     * Required-bound Value Set for status (Task.status)
     */
    static get statusRequiredCodes() {
        return TaskStatusCodes;
    }
    /**
     * Required-bound Value Set for intent (Task.intent)
     */
    static get intentRequiredCodes() {
        return TaskIntentCodes;
    }
    /**
     * Required-bound Value Set for priority (Task.priority)
     */
    static get priorityRequiredCodes() {
        return RequestPriorityCodes;
    }
    /**
     * Preferred-bound Value Set for performerType (Task.performerType)
     */
    static get performerTypePreferredCodings() {
        return PerformerRoleCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Task" fhir: Task.resourceType:"Task"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiatesCanonical"]) {
            issues.push(...this.instantiatesCanonical.doModelValidation());
        }
        if (this["instantiatesUri"]) {
            issues.push(...this.instantiatesUri.doModelValidation());
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["groupIdentifier"]) {
            issues.push(...this.groupIdentifier.doModelValidation());
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<TaskStatusCodeType> fhir: Task.status:code' });
        }
        if (this['status'] && (!Object.values(TaskStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<TaskStatusCodeType> fhir: Task.status:code Required binding to: TaskStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusReason"]) {
            issues.push(...this.statusReason.doModelValidation());
        }
        if (this["businessStatus"]) {
            issues.push(...this.businessStatus.doModelValidation());
        }
        if (!this['intent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property intent:fhir.FhirCode<TaskIntentCodeType> fhir: Task.intent:code' });
        }
        if (this['intent'] && (!Object.values(TaskIntentCodes).includes(this.intent))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property intent:fhir.FhirCode<TaskIntentCodeType> fhir: Task.intent:code Required binding to: TaskIntent' });
        }
        if (this["intent"]) {
            issues.push(...this.intent.doModelValidation());
        }
        if (this['priority'] && (!Object.values(RequestPriorityCodes).includes(this.priority))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property priority?:fhir.FhirCode<RequestPriorityCodeType> fhir: Task.priority:code Required binding to: RequestPriority' });
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["focus"]) {
            issues.push(...this.focus.doModelValidation());
        }
        if (this["for"]) {
            issues.push(...this.for.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["executionPeriod"]) {
            issues.push(...this.executionPeriod.doModelValidation());
        }
        if (this["authoredOn"]) {
            issues.push(...this.authoredOn.doModelValidation());
        }
        if (this["lastModified"]) {
            issues.push(...this.lastModified.doModelValidation());
        }
        if (this["requester"]) {
            issues.push(...this.requester.doModelValidation());
        }
        if (this["performerType"]) {
            this.performerType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["owner"]) {
            issues.push(...this.owner.doModelValidation());
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["reasonCode"]) {
            issues.push(...this.reasonCode.doModelValidation());
        }
        if (this["reasonReference"]) {
            issues.push(...this.reasonReference.doModelValidation());
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["restriction"]) {
            issues.push(...this.restriction.doModelValidation());
        }
        if (this["input"]) {
            this.input.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["output"]) {
            this.output.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Task._fts_dataType = 'Task';
//# sourceMappingURL=data:application/json;base64,