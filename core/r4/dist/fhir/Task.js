// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Task
import * as fhir from '../fhir.js';
// @ts-ignore
import { TaskStatusVsValidation } from '../fhirValueSets/TaskStatusVsValidation.js';
// @ts-ignore
import { TaskIntentVsValidation } from '../fhirValueSets/TaskIntentVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
/**
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
export class TaskRestriction extends fhir.BackboneElement {
    /**
     * Default constructor for TaskRestriction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['repetitions'] !== undefined) {
            this.repetitions = new fhir.FhirPositiveInt({ value: source.repetitions }, options);
        }
        if (source['_repetitions']) {
            if (this.repetitions) {
                this.repetitions.addExtendedProperties(source._repetitions);
            }
            else {
                this.repetitions = new fhir.FhirPositiveInt(source._repetitions, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.recipient = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Task.restriction';
        }
        iss.push(...this.vOS('repetitions', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOA('recipient', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TaskRestriction._fts_dataType = 'TaskRestriction';
/**
 * Additional information that may be needed in the execution of the task.
 */
export class TaskInput extends fhir.BackboneElement {
    /**
     * Default constructor for TaskInput - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBase64Binary'] !== undefined) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary }, options);
        }
        else if (source['valueBoolean'] !== undefined) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean }, options);
        }
        else if (source['valueCanonical'] !== undefined) {
            this.value = new fhir.FhirCanonical({ value: source.valueCanonical }, options);
        }
        else if (source['valueCode'] !== undefined) {
            this.value = new fhir.FhirCode({ value: source.valueCode }, options);
        }
        else if (source['valueDate'] !== undefined) {
            this.value = new fhir.FhirDate({ value: source.valueDate }, options);
        }
        else if (source['valueDateTime'] !== undefined) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime }, options);
        }
        else if (source['valueDecimal'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal }, options);
        }
        else if (source['valueId'] !== undefined) {
            this.value = new fhir.FhirId({ value: source.valueId }, options);
        }
        else if (source['valueInstant'] !== undefined) {
            this.value = new fhir.FhirInstant({ value: source.valueInstant }, options);
        }
        else if (source['valueInteger'] !== undefined) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger }, options);
        }
        else if (source['valueMarkdown'] !== undefined) {
            this.value = new fhir.FhirMarkdown({ value: source.valueMarkdown }, options);
        }
        else if (source['valueOid'] !== undefined) {
            this.value = new fhir.FhirOid({ value: source.valueOid }, options);
        }
        else if (source['valuePositiveInt'] !== undefined) {
            this.value = new fhir.FhirPositiveInt({ value: source.valuePositiveInt }, options);
        }
        else if (source['valueString'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.valueString }, options);
        }
        else if (source['valueTime'] !== undefined) {
            this.value = new fhir.FhirTime({ value: source.valueTime }, options);
        }
        else if (source['valueUnsignedInt'] !== undefined) {
            this.value = new fhir.FhirUnsignedInt({ value: source.valueUnsignedInt }, options);
        }
        else if (source['valueUri'] !== undefined) {
            this.value = new fhir.FhirUri({ value: source.valueUri }, options);
        }
        else if (source['valueUrl'] !== undefined) {
            this.value = new fhir.FhirUrl({ value: source.valueUrl }, options);
        }
        else if (source['valueUuid'] !== undefined) {
            this.value = new fhir.FhirUuid({ value: source.valueUuid }, options);
        }
        else if (source['valueAddress']) {
            this.value = new fhir.Address(source.valueAddress, options);
        }
        else if (source['valueAge']) {
            this.value = new fhir.Age(source.valueAge, options);
        }
        else if (source['valueAnnotation']) {
            this.value = new fhir.Annotation(source.valueAnnotation, options);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment, options);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept, options);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding, options);
        }
        else if (source['valueContactPoint']) {
            this.value = new fhir.ContactPoint(source.valueContactPoint, options);
        }
        else if (source['valueCount']) {
            this.value = new fhir.Count(source.valueCount, options);
        }
        else if (source['valueDistance']) {
            this.value = new fhir.Distance(source.valueDistance, options);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration, options);
        }
        else if (source['valueHumanName']) {
            this.value = new fhir.HumanName(source.valueHumanName, options);
        }
        else if (source['valueIdentifier']) {
            this.value = new fhir.Identifier(source.valueIdentifier, options);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney, options);
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod, options);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange, options);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio, options);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference, options);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData, options);
        }
        else if (source['valueSignature']) {
            this.value = new fhir.Signature(source.valueSignature, options);
        }
        else if (source['valueTiming']) {
            this.value = new fhir.Timing(source.valueTiming, options);
        }
        else if (source['valueContactDetail']) {
            this.value = new fhir.ContactDetail(source.valueContactDetail, options);
        }
        else if (source['valueContributor']) {
            this.value = new fhir.Contributor(source.valueContributor, options);
        }
        else if (source['valueDataRequirement']) {
            this.value = new fhir.DataRequirement(source.valueDataRequirement, options);
        }
        else if (source['valueExpression']) {
            this.value = new fhir.Expression(source.valueExpression, options);
        }
        else if (source['valueParameterDefinition']) {
            this.value = new fhir.ParameterDefinition(source.valueParameterDefinition, options);
        }
        else if (source['valueRelatedArtifact']) {
            this.value = new fhir.RelatedArtifact(source.valueRelatedArtifact, options);
        }
        else if (source['valueTriggerDefinition']) {
            this.value = new fhir.TriggerDefinition(source.valueTriggerDefinition, options);
        }
        else if (source['valueUsageContext']) {
            this.value = new fhir.UsageContext(source.valueUsageContext, options);
        }
        else if (source['valueDosage']) {
            this.value = new fhir.Dosage(source.valueDosage, options);
        }
        else if (source['valueMeta']) {
            this.value = new fhir.Meta(source.valueMeta, options);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Task.input';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TaskInput._fts_dataType = 'TaskInput';
/**
 * Internal flag to properly serialize choice-type element Task.input.value[x]
 */
TaskInput._fts_valueIsChoice = true;
/**
 * Outputs produced by the Task.
 */
export class TaskOutput extends fhir.BackboneElement {
    /**
     * Default constructor for TaskOutput - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBase64Binary'] !== undefined) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary }, options);
        }
        else if (source['valueBoolean'] !== undefined) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean }, options);
        }
        else if (source['valueCanonical'] !== undefined) {
            this.value = new fhir.FhirCanonical({ value: source.valueCanonical }, options);
        }
        else if (source['valueCode'] !== undefined) {
            this.value = new fhir.FhirCode({ value: source.valueCode }, options);
        }
        else if (source['valueDate'] !== undefined) {
            this.value = new fhir.FhirDate({ value: source.valueDate }, options);
        }
        else if (source['valueDateTime'] !== undefined) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime }, options);
        }
        else if (source['valueDecimal'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal }, options);
        }
        else if (source['valueId'] !== undefined) {
            this.value = new fhir.FhirId({ value: source.valueId }, options);
        }
        else if (source['valueInstant'] !== undefined) {
            this.value = new fhir.FhirInstant({ value: source.valueInstant }, options);
        }
        else if (source['valueInteger'] !== undefined) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger }, options);
        }
        else if (source['valueMarkdown'] !== undefined) {
            this.value = new fhir.FhirMarkdown({ value: source.valueMarkdown }, options);
        }
        else if (source['valueOid'] !== undefined) {
            this.value = new fhir.FhirOid({ value: source.valueOid }, options);
        }
        else if (source['valuePositiveInt'] !== undefined) {
            this.value = new fhir.FhirPositiveInt({ value: source.valuePositiveInt }, options);
        }
        else if (source['valueString'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.valueString }, options);
        }
        else if (source['valueTime'] !== undefined) {
            this.value = new fhir.FhirTime({ value: source.valueTime }, options);
        }
        else if (source['valueUnsignedInt'] !== undefined) {
            this.value = new fhir.FhirUnsignedInt({ value: source.valueUnsignedInt }, options);
        }
        else if (source['valueUri'] !== undefined) {
            this.value = new fhir.FhirUri({ value: source.valueUri }, options);
        }
        else if (source['valueUrl'] !== undefined) {
            this.value = new fhir.FhirUrl({ value: source.valueUrl }, options);
        }
        else if (source['valueUuid'] !== undefined) {
            this.value = new fhir.FhirUuid({ value: source.valueUuid }, options);
        }
        else if (source['valueAddress']) {
            this.value = new fhir.Address(source.valueAddress, options);
        }
        else if (source['valueAge']) {
            this.value = new fhir.Age(source.valueAge, options);
        }
        else if (source['valueAnnotation']) {
            this.value = new fhir.Annotation(source.valueAnnotation, options);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment, options);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept, options);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding, options);
        }
        else if (source['valueContactPoint']) {
            this.value = new fhir.ContactPoint(source.valueContactPoint, options);
        }
        else if (source['valueCount']) {
            this.value = new fhir.Count(source.valueCount, options);
        }
        else if (source['valueDistance']) {
            this.value = new fhir.Distance(source.valueDistance, options);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration, options);
        }
        else if (source['valueHumanName']) {
            this.value = new fhir.HumanName(source.valueHumanName, options);
        }
        else if (source['valueIdentifier']) {
            this.value = new fhir.Identifier(source.valueIdentifier, options);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney, options);
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod, options);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange, options);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio, options);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference, options);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData, options);
        }
        else if (source['valueSignature']) {
            this.value = new fhir.Signature(source.valueSignature, options);
        }
        else if (source['valueTiming']) {
            this.value = new fhir.Timing(source.valueTiming, options);
        }
        else if (source['valueContactDetail']) {
            this.value = new fhir.ContactDetail(source.valueContactDetail, options);
        }
        else if (source['valueContributor']) {
            this.value = new fhir.Contributor(source.valueContributor, options);
        }
        else if (source['valueDataRequirement']) {
            this.value = new fhir.DataRequirement(source.valueDataRequirement, options);
        }
        else if (source['valueExpression']) {
            this.value = new fhir.Expression(source.valueExpression, options);
        }
        else if (source['valueParameterDefinition']) {
            this.value = new fhir.ParameterDefinition(source.valueParameterDefinition, options);
        }
        else if (source['valueRelatedArtifact']) {
            this.value = new fhir.RelatedArtifact(source.valueRelatedArtifact, options);
        }
        else if (source['valueTriggerDefinition']) {
            this.value = new fhir.TriggerDefinition(source.valueTriggerDefinition, options);
        }
        else if (source['valueUsageContext']) {
            this.value = new fhir.UsageContext(source.valueUsageContext, options);
        }
        else if (source['valueDosage']) {
            this.value = new fhir.Dosage(source.valueDosage, options);
        }
        else if (source['valueMeta']) {
            this.value = new fhir.Meta(source.valueMeta, options);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Task.output';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TaskOutput._fts_dataType = 'TaskOutput';
/**
 * Internal flag to properly serialize choice-type element Task.output.value[x]
 */
TaskOutput._fts_valueIsChoice = true;
/**
 * A task to be performed.
 */
export class Task extends fhir.DomainResource {
    /**
     * Default constructor for Task - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Task';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical'] !== undefined) {
            this.instantiatesCanonical = new fhir.FhirCanonical({ value: source.instantiatesCanonical }, options);
        }
        if (source['_instantiatesCanonical']) {
            if (this.instantiatesCanonical) {
                this.instantiatesCanonical.addExtendedProperties(source._instantiatesCanonical);
            }
            else {
                this.instantiatesCanonical = new fhir.FhirCanonical(source._instantiatesCanonical, options);
            }
        }
        if (source['instantiatesUri'] !== undefined) {
            this.instantiatesUri = new fhir.FhirUri({ value: source.instantiatesUri }, options);
        }
        if (source['_instantiatesUri']) {
            if (this.instantiatesUri) {
                this.instantiatesUri.addExtendedProperties(source._instantiatesUri);
            }
            else {
                this.instantiatesUri = new fhir.FhirUri(source._instantiatesUri, options);
            }
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier, options);
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason, options);
        }
        if (source['businessStatus']) {
            this.businessStatus = new fhir.CodeableConcept(source.businessStatus, options);
        }
        if (source['intent'] !== undefined) {
            this.intent = new fhir.FhirCode({ value: source.intent }, options);
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent, options);
            }
        }
        if (source['priority'] !== undefined) {
            this.priority = new fhir.FhirCode({ value: source.priority }, options);
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority, options);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['focus']) {
            this.focus = new fhir.Reference(source.focus, options);
        }
        if (source['for']) {
            this.for = new fhir.Reference(source.for, options);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['executionPeriod']) {
            this.executionPeriod = new fhir.Period(source.executionPeriod, options);
        }
        if (source['authoredOn'] !== undefined) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn }, options);
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn, options);
            }
        }
        if (source['lastModified'] !== undefined) {
            this.lastModified = new fhir.FhirDateTime({ value: source.lastModified }, options);
        }
        if (source['_lastModified']) {
            if (this.lastModified) {
                this.lastModified.addExtendedProperties(source._lastModified);
            }
            else {
                this.lastModified = new fhir.FhirDateTime(source._lastModified, options);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester, options);
        }
        if (source['performerType']) {
            this.performerType = source.performerType.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.performerType = [];
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner, options);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = new fhir.CodeableConcept(source.reasonCode, options);
        }
        if (source['reasonReference']) {
            this.reasonReference = new fhir.Reference(source.reasonReference, options);
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.insurance = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.relevantHistory = [];
        }
        if (source['restriction']) {
            this.restriction = new fhir.TaskRestriction(source.restriction, options);
        }
        if (source['input']) {
            this.input = source.input.map((x) => new fhir.TaskInput(x, options));
        }
        else {
            this.input = [];
        }
        if (source['output']) {
            this.output = source.output.map((x) => new fhir.TaskOutput(x, options));
        }
        else {
            this.output = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Task';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('instantiatesCanonical', exp));
        iss.push(...this.vOS('instantiatesUri', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOS('groupIdentifier', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'TaskStatus', TaskStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusReason', exp));
        iss.push(...this.vOS('businessStatus', exp));
        iss.push(...this.vRSV('intent', exp, 'TaskIntent', TaskIntentVsValidation, 'r'));
        iss.push(...this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r'));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('focus', exp));
        iss.push(...this.vOS('for', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('executionPeriod', exp));
        iss.push(...this.vOS('authoredOn', exp));
        iss.push(...this.vOS('lastModified', exp));
        iss.push(...this.vOS('requester', exp));
        iss.push(...this.vOA('performerType', exp));
        iss.push(...this.vOS('owner', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('reasonCode', exp));
        iss.push(...this.vOS('reasonReference', exp));
        iss.push(...this.vOA('insurance', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('relevantHistory', exp));
        iss.push(...this.vOS('restriction', exp));
        iss.push(...this.vOA('input', exp));
        iss.push(...this.vOA('output', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Task._fts_dataType = 'Task';
//# sourceMappingURL=data:application/json;base64,