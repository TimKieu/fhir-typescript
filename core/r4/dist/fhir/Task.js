/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { TaskStatusCodings } from '../fhirValueSets/TaskStatusCodings.js';
import { TaskIntentCodings } from '../fhirValueSets/TaskIntentCodings.js';
import { RequestPriorityCodings } from '../fhirValueSets/RequestPriorityCodings.js';
import { PerformerRoleCodings } from '../fhirValueSets/PerformerRoleCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { Period } from './Period.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirBase64Binary } from './FhirBase64Binary.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirCode } from './FhirCode.js';
import { FhirDate } from './FhirDate.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirId } from './FhirId.js';
import { FhirInstant } from './FhirInstant.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { FhirOid } from './FhirOid.js';
import { FhirString } from './FhirString.js';
import { FhirTime } from './FhirTime.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { FhirUri } from './FhirUri.js';
import { FhirUrl } from './FhirUrl.js';
import { FhirUuid } from './FhirUuid.js';
import { Address } from './Address.js';
import { Age } from './Age.js';
import { Annotation } from './Annotation.js';
import { Attachment } from './Attachment.js';
import { Coding } from './Coding.js';
import { ContactPoint } from './ContactPoint.js';
import { Count } from './Count.js';
import { Distance } from './Distance.js';
import { Duration } from './Duration.js';
import { HumanName } from './HumanName.js';
import { Identifier } from './Identifier.js';
import { Money } from './Money.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { Ratio } from './Ratio.js';
import { SampledData } from './SampledData.js';
import { Signature } from './Signature.js';
import { Timing } from './Timing.js';
import { ContactDetail } from './ContactDetail.js';
import { Contributor } from './Contributor.js';
import { DataRequirement } from './DataRequirement.js';
import { Expression } from './Expression.js';
import { ParameterDefinition } from './ParameterDefinition.js';
import { RelatedArtifact } from './RelatedArtifact.js';
import { TriggerDefinition } from './TriggerDefinition.js';
import { UsageContext } from './UsageContext.js';
import { Dosage } from './Dosage.js';
import { Meta } from './Meta.js';

// <auto-generated/>
/**
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
var TaskRestriction = /** @class */ (function (_super) {
    __extends(TaskRestriction, _super);
    /**
     * Default constructor for TaskRestriction - initializes any required elements to null if a value is not provided.
     */
    function TaskRestriction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['repetitions']) {
            _this.repetitions = new FhirPositiveInt({ value: source.repetitions });
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['recipient']) {
            _this.recipient = source.recipient.map(function (x) { return new Reference(x); });
        }
        else {
            _this.recipient = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TaskRestriction.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["repetitions"]) {
            (_a = outcome.issue).push.apply(_a, this.repetitions.doModelValidation().issue);
        }
        if (this["period"]) {
            (_b = outcome.issue).push.apply(_b, this.period.doModelValidation().issue);
        }
        if (this["recipient"]) {
            this.recipient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TaskRestriction._fts_dataType = 'TaskRestriction';
    return TaskRestriction;
}(BackboneElement));
/**
 * Additional information that may be needed in the execution of the task.
 */
var TaskInput = /** @class */ (function (_super) {
    __extends(TaskInput, _super);
    /**
     * Default constructor for TaskInput - initializes any required elements to null if a value is not provided.
     */
    function TaskInput(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueBase64Binary']) {
            _this.value = new FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueCanonical']) {
            _this.value = new FhirCanonical({ value: source.valueCanonical });
        }
        else if (source['valueCode']) {
            _this.value = new FhirCode({ value: source.valueCode });
        }
        else if (source['valueDate']) {
            _this.value = new FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            _this.value = new FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueDecimal']) {
            _this.value = new FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueId']) {
            _this.value = new FhirId({ value: source.valueId });
        }
        else if (source['valueInstant']) {
            _this.value = new FhirInstant({ value: source.valueInstant });
        }
        else if (source['valueInteger']) {
            _this.value = new FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueMarkdown']) {
            _this.value = new FhirMarkdown({ value: source.valueMarkdown });
        }
        else if (source['valueOid']) {
            _this.value = new FhirOid({ value: source.valueOid });
        }
        else if (source['valuePositiveInt']) {
            _this.value = new FhirPositiveInt({ value: source.valuePositiveInt });
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueTime']) {
            _this.value = new FhirTime({ value: source.valueTime });
        }
        else if (source['valueUnsignedInt']) {
            _this.value = new FhirUnsignedInt({ value: source.valueUnsignedInt });
        }
        else if (source['valueUri']) {
            _this.value = new FhirUri({ value: source.valueUri });
        }
        else if (source['valueUrl']) {
            _this.value = new FhirUrl({ value: source.valueUrl });
        }
        else if (source['valueUuid']) {
            _this.value = new FhirUuid({ value: source.valueUuid });
        }
        else if (source['valueAddress']) {
            _this.value = new Address(source.valueAddress);
        }
        else if (source['valueAge']) {
            _this.value = new Age(source.valueAge);
        }
        else if (source['valueAnnotation']) {
            _this.value = new Annotation(source.valueAnnotation);
        }
        else if (source['valueAttachment']) {
            _this.value = new Attachment(source.valueAttachment);
        }
        else if (source['valueCodeableConcept']) {
            _this.value = new CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueCoding']) {
            _this.value = new Coding(source.valueCoding);
        }
        else if (source['valueContactPoint']) {
            _this.value = new ContactPoint(source.valueContactPoint);
        }
        else if (source['valueCount']) {
            _this.value = new Count(source.valueCount);
        }
        else if (source['valueDistance']) {
            _this.value = new Distance(source.valueDistance);
        }
        else if (source['valueDuration']) {
            _this.value = new Duration(source.valueDuration);
        }
        else if (source['valueHumanName']) {
            _this.value = new HumanName(source.valueHumanName);
        }
        else if (source['valueIdentifier']) {
            _this.value = new Identifier(source.valueIdentifier);
        }
        else if (source['valueMoney']) {
            _this.value = new Money(source.valueMoney);
        }
        else if (source['valuePeriod']) {
            _this.value = new Period(source.valuePeriod);
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            _this.value = new Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            _this.value = new Ratio(source.valueRatio);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        else if (source['valueSampledData']) {
            _this.value = new SampledData(source.valueSampledData);
        }
        else if (source['valueSignature']) {
            _this.value = new Signature(source.valueSignature);
        }
        else if (source['valueTiming']) {
            _this.value = new Timing(source.valueTiming);
        }
        else if (source['valueContactDetail']) {
            _this.value = new ContactDetail(source.valueContactDetail);
        }
        else if (source['valueContributor']) {
            _this.value = new Contributor(source.valueContributor);
        }
        else if (source['valueDataRequirement']) {
            _this.value = new DataRequirement(source.valueDataRequirement);
        }
        else if (source['valueExpression']) {
            _this.value = new Expression(source.valueExpression);
        }
        else if (source['valueParameterDefinition']) {
            _this.value = new ParameterDefinition(source.valueParameterDefinition);
        }
        else if (source['valueRelatedArtifact']) {
            _this.value = new RelatedArtifact(source.valueRelatedArtifact);
        }
        else if (source['valueTriggerDefinition']) {
            _this.value = new TriggerDefinition(source.valueTriggerDefinition);
        }
        else if (source['valueUsageContext']) {
            _this.value = new UsageContext(source.valueUsageContext);
        }
        else if (source['valueDosage']) {
            _this.value = new Dosage(source.valueDosage);
        }
        else if (source['valueMeta']) {
            _this.value = new Meta(source.valueMeta);
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TaskInput.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Task.input.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: Task.input.value[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TaskInput._fts_dataType = 'TaskInput';
    /**
     * Internal flag to properly serialize choice-type element Task.input.value[x]
     */
    TaskInput._fts_valueIsChoice = true;
    return TaskInput;
}(BackboneElement));
/**
 * Outputs produced by the Task.
 */
var TaskOutput = /** @class */ (function (_super) {
    __extends(TaskOutput, _super);
    /**
     * Default constructor for TaskOutput - initializes any required elements to null if a value is not provided.
     */
    function TaskOutput(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueBase64Binary']) {
            _this.value = new FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueCanonical']) {
            _this.value = new FhirCanonical({ value: source.valueCanonical });
        }
        else if (source['valueCode']) {
            _this.value = new FhirCode({ value: source.valueCode });
        }
        else if (source['valueDate']) {
            _this.value = new FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            _this.value = new FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueDecimal']) {
            _this.value = new FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueId']) {
            _this.value = new FhirId({ value: source.valueId });
        }
        else if (source['valueInstant']) {
            _this.value = new FhirInstant({ value: source.valueInstant });
        }
        else if (source['valueInteger']) {
            _this.value = new FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueMarkdown']) {
            _this.value = new FhirMarkdown({ value: source.valueMarkdown });
        }
        else if (source['valueOid']) {
            _this.value = new FhirOid({ value: source.valueOid });
        }
        else if (source['valuePositiveInt']) {
            _this.value = new FhirPositiveInt({ value: source.valuePositiveInt });
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueTime']) {
            _this.value = new FhirTime({ value: source.valueTime });
        }
        else if (source['valueUnsignedInt']) {
            _this.value = new FhirUnsignedInt({ value: source.valueUnsignedInt });
        }
        else if (source['valueUri']) {
            _this.value = new FhirUri({ value: source.valueUri });
        }
        else if (source['valueUrl']) {
            _this.value = new FhirUrl({ value: source.valueUrl });
        }
        else if (source['valueUuid']) {
            _this.value = new FhirUuid({ value: source.valueUuid });
        }
        else if (source['valueAddress']) {
            _this.value = new Address(source.valueAddress);
        }
        else if (source['valueAge']) {
            _this.value = new Age(source.valueAge);
        }
        else if (source['valueAnnotation']) {
            _this.value = new Annotation(source.valueAnnotation);
        }
        else if (source['valueAttachment']) {
            _this.value = new Attachment(source.valueAttachment);
        }
        else if (source['valueCodeableConcept']) {
            _this.value = new CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueCoding']) {
            _this.value = new Coding(source.valueCoding);
        }
        else if (source['valueContactPoint']) {
            _this.value = new ContactPoint(source.valueContactPoint);
        }
        else if (source['valueCount']) {
            _this.value = new Count(source.valueCount);
        }
        else if (source['valueDistance']) {
            _this.value = new Distance(source.valueDistance);
        }
        else if (source['valueDuration']) {
            _this.value = new Duration(source.valueDuration);
        }
        else if (source['valueHumanName']) {
            _this.value = new HumanName(source.valueHumanName);
        }
        else if (source['valueIdentifier']) {
            _this.value = new Identifier(source.valueIdentifier);
        }
        else if (source['valueMoney']) {
            _this.value = new Money(source.valueMoney);
        }
        else if (source['valuePeriod']) {
            _this.value = new Period(source.valuePeriod);
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            _this.value = new Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            _this.value = new Ratio(source.valueRatio);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        else if (source['valueSampledData']) {
            _this.value = new SampledData(source.valueSampledData);
        }
        else if (source['valueSignature']) {
            _this.value = new Signature(source.valueSignature);
        }
        else if (source['valueTiming']) {
            _this.value = new Timing(source.valueTiming);
        }
        else if (source['valueContactDetail']) {
            _this.value = new ContactDetail(source.valueContactDetail);
        }
        else if (source['valueContributor']) {
            _this.value = new Contributor(source.valueContributor);
        }
        else if (source['valueDataRequirement']) {
            _this.value = new DataRequirement(source.valueDataRequirement);
        }
        else if (source['valueExpression']) {
            _this.value = new Expression(source.valueExpression);
        }
        else if (source['valueParameterDefinition']) {
            _this.value = new ParameterDefinition(source.valueParameterDefinition);
        }
        else if (source['valueRelatedArtifact']) {
            _this.value = new RelatedArtifact(source.valueRelatedArtifact);
        }
        else if (source['valueTriggerDefinition']) {
            _this.value = new TriggerDefinition(source.valueTriggerDefinition);
        }
        else if (source['valueUsageContext']) {
            _this.value = new UsageContext(source.valueUsageContext);
        }
        else if (source['valueDosage']) {
            _this.value = new Dosage(source.valueDosage);
        }
        else if (source['valueMeta']) {
            _this.value = new Meta(source.valueMeta);
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TaskOutput.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Task.output.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: Task.output.value[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TaskOutput._fts_dataType = 'TaskOutput';
    /**
     * Internal flag to properly serialize choice-type element Task.output.value[x]
     */
    TaskOutput._fts_valueIsChoice = true;
    return TaskOutput;
}(BackboneElement));
/**
 * A task to be performed.
 */
var Task = /** @class */ (function (_super) {
    __extends(Task, _super);
    /**
     * Default constructor for Task - initializes any required elements to null if a value is not provided.
     */
    function Task(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Task';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = new FhirCanonical({ value: source.instantiatesCanonical });
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = new FhirUri({ value: source.instantiatesUri });
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['groupIdentifier']) {
            _this.groupIdentifier = new Identifier(source.groupIdentifier);
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = new CodeableConcept(source.statusReason);
        }
        if (source['businessStatus']) {
            _this.businessStatus = new CodeableConcept(source.businessStatus);
        }
        if (source['intent']) {
            _this.intent = source.intent;
        }
        else {
            _this.intent = null;
        }
        if (source['priority']) {
            _this.priority = source.priority;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['focus']) {
            _this.focus = new Reference(source.focus);
        }
        if (source['for']) {
            _this.for = new Reference(source.for);
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['executionPeriod']) {
            _this.executionPeriod = new Period(source.executionPeriod);
        }
        if (source['authoredOn']) {
            _this.authoredOn = new FhirDateTime({ value: source.authoredOn });
        }
        if (source['lastModified']) {
            _this.lastModified = new FhirDateTime({ value: source.lastModified });
        }
        if (source['requester']) {
            _this.requester = new Reference(source.requester);
        }
        if (source['performerType']) {
            _this.performerType = source.performerType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.performerType = [];
        }
        if (source['owner']) {
            _this.owner = new Reference(source.owner);
        }
        if (source['location']) {
            _this.location = new Reference(source.location);
        }
        if (source['reasonCode']) {
            _this.reasonCode = new CodeableConcept(source.reasonCode);
        }
        if (source['reasonReference']) {
            _this.reasonReference = new Reference(source.reasonReference);
        }
        if (source['insurance']) {
            _this.insurance = source.insurance.map(function (x) { return new Reference(x); });
        }
        else {
            _this.insurance = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['relevantHistory']) {
            _this.relevantHistory = source.relevantHistory.map(function (x) { return new Reference(x); });
        }
        else {
            _this.relevantHistory = [];
        }
        if (source['restriction']) {
            _this.restriction = new TaskRestriction(source.restriction);
        }
        if (source['input']) {
            _this.input = source.input.map(function (x) { return new TaskInput(x); });
        }
        else {
            _this.input = [];
        }
        if (source['output']) {
            _this.output = source.output.map(function (x) { return new TaskOutput(x); });
        }
        else {
            _this.output = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Task.status)
     */
    Task.statusRequiredCoding = function () {
        return TaskStatusCodings;
    };
    /**
     * Required-bound Value Set for intent (Task.intent)
     */
    Task.intentRequiredCoding = function () {
        return TaskIntentCodings;
    };
    /**
     * Required-bound Value Set for priority (Task.priority)
     */
    Task.priorityRequiredCoding = function () {
        return RequestPriorityCodings;
    };
    /**
     * Preferred-bound Value Set for performerType (Task.performerType)
     */
    Task.performerTypePreferredCoding = function () {
        return PerformerRoleCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Task.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Task" fhir: Task.resourceType:"Task"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesCanonical"]) {
            (_a = outcome.issue).push.apply(_a, this.instantiatesCanonical.doModelValidation().issue);
        }
        if (this["instantiatesUri"]) {
            (_b = outcome.issue).push.apply(_b, this.instantiatesUri.doModelValidation().issue);
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["groupIdentifier"]) {
            (_c = outcome.issue).push.apply(_c, this.groupIdentifier.doModelValidation().issue);
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:TaskStatusCodeType fhir: Task.status:code', }));
        }
        if (this["statusReason"]) {
            (_d = outcome.issue).push.apply(_d, this.statusReason.doModelValidation().issue);
        }
        if (this["businessStatus"]) {
            (_e = outcome.issue).push.apply(_e, this.businessStatus.doModelValidation().issue);
        }
        if (!this['intent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property intent:TaskIntentCodeType fhir: Task.intent:code', }));
        }
        if (this["code"]) {
            (_f = outcome.issue).push.apply(_f, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_g = outcome.issue).push.apply(_g, this.description.doModelValidation().issue);
        }
        if (this["focus"]) {
            (_h = outcome.issue).push.apply(_h, this.focus.doModelValidation().issue);
        }
        if (this["for"]) {
            (_j = outcome.issue).push.apply(_j, this.for.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_k = outcome.issue).push.apply(_k, this.encounter.doModelValidation().issue);
        }
        if (this["executionPeriod"]) {
            (_l = outcome.issue).push.apply(_l, this.executionPeriod.doModelValidation().issue);
        }
        if (this["authoredOn"]) {
            (_m = outcome.issue).push.apply(_m, this.authoredOn.doModelValidation().issue);
        }
        if (this["lastModified"]) {
            (_o = outcome.issue).push.apply(_o, this.lastModified.doModelValidation().issue);
        }
        if (this["requester"]) {
            (_p = outcome.issue).push.apply(_p, this.requester.doModelValidation().issue);
        }
        if (this["performerType"]) {
            this.performerType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["owner"]) {
            (_q = outcome.issue).push.apply(_q, this.owner.doModelValidation().issue);
        }
        if (this["location"]) {
            (_r = outcome.issue).push.apply(_r, this.location.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            (_s = outcome.issue).push.apply(_s, this.reasonCode.doModelValidation().issue);
        }
        if (this["reasonReference"]) {
            (_t = outcome.issue).push.apply(_t, this.reasonReference.doModelValidation().issue);
        }
        if (this["insurance"]) {
            this.insurance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["restriction"]) {
            (_u = outcome.issue).push.apply(_u, this.restriction.doModelValidation().issue);
        }
        if (this["input"]) {
            this.input.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["output"]) {
            this.output.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Task._fts_dataType = 'Task';
    return Task;
}(DomainResource));

export { Task, TaskInput, TaskOutput, TaskRestriction };
//# sourceMappingURL=Task.js.map
