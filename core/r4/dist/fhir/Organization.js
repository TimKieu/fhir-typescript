// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Organization
import * as fhir from '../fhir.js';
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class OrganizationContact extends fhir.BackboneElement {
    /**
     * Default constructor for OrganizationContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['purpose']) {
            this.purpose = new fhir.CodeableConcept(source.purpose);
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Organization.contact';
        }
        this.vOptS('purpose', expression);
        this.vOptS('name', expression);
        this.vOptA('telecom', expression);
        this.vOptS('address', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OrganizationContact._fts_dataType = 'OrganizationContact';
/**
 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
 */
export class Organization extends fhir.DomainResource {
    /**
     * Default constructor for Organization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Organization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.OrganizationContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Organization';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vOptS('active', expression);
        this.vOptA('type', expression);
        this.vOptS('name', expression);
        this.vOptA('alias', expression);
        this.vOptA('telecom', expression);
        this.vOptA('address', expression);
        this.vOptS('partOf', expression);
        this.vOptA('contact', expression);
        this.vOptA('endpoint', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Organization._fts_dataType = 'Organization';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3JnYW5pemF0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9Pcmdhbml6YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBZ0NuQzs7R0FFRztBQUNILE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxJQUFJLENBQUMsZUFBZTtJQXFCM0Q7O09BRUc7SUFDSCxZQUFZLFNBQTBDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ2hHLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FBRTtRQUNuRixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUFFO1FBQ3BFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUN6RjtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDM0IsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFD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LFVBQVUsQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2pDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBM0dEOztHQUVHO0FBQzZCLDBCQUFhLEdBQVUsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBPcmdhbml6YXRpb25cclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENvbnRhY3RlbnRpdHlUeXBlQ29kZXMsICBDb250YWN0ZW50aXR5VHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Db250YWN0ZW50aXR5VHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb250YWN0ZW50aXR5VHlwZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ29udGFjdGVudGl0eVR5cGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblR5cGVDb2RlcywgIE9yZ2FuaXphdGlvblR5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvT3JnYW5pemF0aW9uVHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25UeXBlVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Pcmdhbml6YXRpb25UeXBlVnNWYWxpZGF0aW9uLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE9yZ2FuaXphdGlvbkNvbnRhY3QgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgT3JnYW5pemF0aW9uQ29udGFjdEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBhIHB1cnBvc2UgZm9yIHdoaWNoIHRoZSBjb250YWN0IGNhbiBiZSByZWFjaGVkLlxyXG4gICAqL1xyXG4gIHB1cnBvc2U/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbnRhY3QuXHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuSHVtYW5OYW1lQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb250YWN0IGRldGFpbCAoZS5nLiBhIHRlbGVwaG9uZSBudW1iZXIgb3IgYW4gZW1haWwgYWRkcmVzcykgYnkgd2hpY2ggdGhlIHBhcnR5IG1heSBiZSBjb250YWN0ZWQuXHJcbiAgICovXHJcbiAgdGVsZWNvbT86IGZoaXIuQ29udGFjdFBvaW50QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBWaXNpdGluZyBvciBwb3N0YWwgYWRkcmVzc2VzIGZvciB0aGUgY29udGFjdC5cclxuICAgKi9cclxuICBhZGRyZXNzPzogZmhpci5BZGRyZXNzQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXaGVyZSBtdWx0aXBsZSBjb250YWN0cyBmb3IgdGhlIHNhbWUgcHVycG9zZSBhcmUgcHJvdmlkZWQgdGhlcmUgaXMgYSBzdGFuZGFyZCBleHRlbnNpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggb25lIGlzIHRoZSBwcmVmZXJyZWQgY29udGFjdCB0byB1c2UuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uQ29udGFjdCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ09yZ2FuaXphdGlvbkNvbnRhY3QnO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBhIHB1cnBvc2UgZm9yIHdoaWNoIHRoZSBjb250YWN0IGNhbiBiZSByZWFjaGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXJwb3NlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbnRhY3QuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU/OiBmaGlyLkh1bWFuTmFtZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb250YWN0IGRldGFpbCAoZS5nLiBhIHRlbGVwaG9uZSBudW1iZXIgb3IgYW4gZW1haWwgYWRkcmVzcykgYnkgd2hpY2ggdGhlIHBhcnR5IG1heSBiZSBjb250YWN0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHRlbGVjb206IGZoaXIuQ29udGFjdFBvaW50W107XHJcbiAgLyoqXHJcbiAgICogVmlzaXRpbmcgb3IgcG9zdGFsIGFkZHJlc3NlcyBmb3IgdGhlIGNvbnRhY3QuXHJcbiAgICovXHJcbiAgcHVibGljIGFkZHJlc3M/OiBmaGlyLkFkZHJlc3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE9yZ2FuaXphdGlvbkNvbnRhY3QgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxPcmdhbml6YXRpb25Db250YWN0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3B1cnBvc2UnXSkgeyB0aGlzLnB1cnBvc2UgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnB1cnBvc2UpOyB9XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuSHVtYW5OYW1lKHNvdXJjZS5uYW1lKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGVsZWNvbSddKSB7IHRoaXMudGVsZWNvbSA9IHNvdXJjZS50ZWxlY29tLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29udGFjdFBvaW50KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudGVsZWNvbSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydhZGRyZXNzJ10pIHsgdGhpcy5hZGRyZXNzID0gbmV3IGZoaXIuQWRkcmVzcyhzb3VyY2UuYWRkcmVzcyk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnT3JnYW5pemF0aW9uLmNvbnRhY3QnIH1cclxuICAgIHRoaXMudk9wdFMoJ3B1cnBvc2UnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCduYW1lJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgndGVsZWNvbScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ2FkZHJlc3MnLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgT3JnYW5pemF0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE9yZ2FuaXphdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlQXJncyB7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIk9yZ2FuaXphdGlvblwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGZvciB0aGUgb3JnYW5pemF0aW9uIHRoYXQgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgb3JnYW5pemF0aW9uIGFjcm9zcyBtdWx0aXBsZSBkaXNwYXJhdGUgc3lzdGVtcy5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGFjdGl2ZSBmbGFnIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIG1hcmsgYW4gb3JnYW5pemF0aW9uIGFzIHRlbXBvcmFyaWx5IGNsb3NlZCBvciB1bmRlciBjb25zdHJ1Y3Rpb24uIEluc3RlYWQgdGhlIExvY2F0aW9uKHMpIHdpdGhpbiB0aGUgT3JnYW5pemF0aW9uIHNob3VsZCBoYXZlIHRoZSBzdXNwZW5kZWQgc3RhdHVzLiBJZiBmdXJ0aGVyIGRldGFpbHMgb2YgdGhlIHJlYXNvbiBmb3IgdGhlIHN1c3BlbnNpb24gYXJlIHJlcXVpcmVkLCB0aGVuIGFuIGV4dGVuc2lvbiBvbiB0aGlzIGVsZW1lbnQgc2hvdWxkIGJlIHVzZWQuXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIGl0IG1heSBiZSB1c2VkIHRvIG1hcmsgdGhhdCB0aGUgcmVzb3VyY2Ugd2FzIGNyZWF0ZWQgaW4gZXJyb3IuXHJcbiAgICovXHJcbiAgYWN0aXZlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogT3JnYW5pemF0aW9uLmFjdGl2ZVxyXG4gICAqL1xyXG4gIF9hY3RpdmU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE9yZ2FuaXphdGlvbnMgY2FuIGJlIGNvcnBvcmF0aW9ucywgd2FyZHMsIHNlY3Rpb25zLCBjbGluaWNhbCB0ZWFtcywgZ292ZXJubWVudCBkZXBhcnRtZW50cywgZXRjLiBOb3RlIHRoYXQgY29kZSBpcyBnZW5lcmFsbHkgYSBjbGFzc2lmaWVyIG9mIHRoZSB0eXBlIG9mIG9yZ2FuaXphdGlvbjsgaW4gbWFueSBhcHBsaWNhdGlvbnMsIGNvZGVzIGFyZSB1c2VkIHRvIGlkZW50aXR5IGEgcGFydGljdWxhciBvcmdhbml6YXRpb24gKHNheSwgd2FyZCkgYXMgb3Bwb3NlZCB0byBhbm90aGVyIG9mIHRoZSBzYW1lIHR5cGUgLSB0aGVzZSBhcmUgaWRlbnRpZmllcnMsIG5vdCBjb2Rlc1xyXG4gICAqIFdoZW4gY29uc2lkZXJpbmcgaWYgbXVsdGlwbGUgdHlwZXMgYXJlIGFwcHJvcHJpYXRlLCB5b3Ugc2hvdWxkIGV2YWx1YXRlIGlmIGNoaWxkIG9yZ2FuaXphdGlvbnMgd291bGQgYmUgYSBtb3JlIGFwcHJvcHJpYXRlIHVzZSBvZiB0aGUgY29uY2VwdCwgYXMgZGlmZmVyZW50IHR5cGVzIGxpa2VseSBhcmUgaW4gZGlmZmVyZW50IHN1Yi1hcmVhcyBvZiB0aGUgb3JnYW5pemF0aW9uLiBUaGlzIGlzIG1vc3QgbGlrZWx5IHRvIGJlIHVzZWQgd2hlcmUgdHlwZSB2YWx1ZXMgaGF2ZSBvcnRob2dvbmFsIHZhbHVlcywgc3VjaCBhcyBhIHJlbGlnaW91cywgYWNhZGVtaWMgYW5kIG1lZGljYWwgY2VudGVyLlxyXG4gICAqIFdlIGV4cGVjdCB0aGF0IHNvbWUganVyaXNkaWN0aW9ucyB3aWxsIHByb2ZpbGUgdGhpcyBvcHRpb25hbGl0eSB0byBiZSBhIHNpbmdsZSBjYXJkaW5hbGl0eS5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBuYW1lIG9mIGFuIG9yZ2FuaXphdGlvbiBjaGFuZ2VzLCBjb25zaWRlciBwdXR0aW5nIHRoZSBvbGQgbmFtZSBpbiB0aGUgYWxpYXMgY29sdW1uIHNvIHRoYXQgaXQgY2FuIHN0aWxsIGJlIGxvY2F0ZWQgdGhyb3VnaCBzZWFyY2hlcy5cclxuICAgKi9cclxuICBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE9yZ2FuaXphdGlvbi5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIGFyZSBubyBkYXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGFsaWFzL2hpc3RvcmljIG5hbWVzLCBhcyB0aGlzIGlzIG5vdCBpbnRlbmRlZCB0byB0cmFjayB3aGVuIG5hbWVzIHdlcmUgdXNlZCwgYnV0IHRvIGFzc2lzdCBpbiBzZWFyY2hpbmcgc28gdGhhdCBvbGRlciBuYW1lcyBjYW4gc3RpbGwgcmVzdWx0IGluIGlkZW50aWZ5aW5nIHRoZSBvcmdhbml6YXRpb24uXHJcbiAgICovXHJcbiAgYWxpYXM/OiBmaGlyLkZoaXJTdHJpbmdbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBPcmdhbml6YXRpb24uYWxpYXNcclxuICAgKi9cclxuICBfYWxpYXM/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1c2UgY29kZSAnaG9tZScgaXMgbm90IHRvIGJlIHVzZWQuIE5vdGUgdGhhdCB0aGVzZSBjb250YWN0cyBhcmUgbm90IHRoZSBjb250YWN0IGRldGFpbHMgb2YgcGVvcGxlIHdobyBhcmUgZW1wbG95ZWQgYnkgb3IgcmVwcmVzZW50IHRoZSBvcmdhbml6YXRpb24sIGJ1dCBvZmZpY2lhbCBjb250YWN0cyBmb3IgdGhlIG9yZ2FuaXphdGlvbiBpdHNlbGYuXHJcbiAgICovXHJcbiAgdGVsZWNvbT86IGZoaXIuQ29udGFjdFBvaW50QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBPcmdhbml6YXRpb24gbWF5IGhhdmUgbXVsdGlwbGUgYWRkcmVzc2VzIHdpdGggZGlmZmVyZW50IHVzZXMgb3IgYXBwbGljYWJsZSBwZXJpb2RzLiBUaGUgdXNlIGNvZGUgJ2hvbWUnIGlzIG5vdCB0byBiZSB1c2VkLlxyXG4gICAqL1xyXG4gIGFkZHJlc3M/OiBmaGlyLkFkZHJlc3NBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcmdhbml6YXRpb24gb2Ygd2hpY2ggdGhpcyBvcmdhbml6YXRpb24gZm9ybXMgYSBwYXJ0LlxyXG4gICAqL1xyXG4gIHBhcnRPZj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlcmUgbXVsdGlwbGUgY29udGFjdHMgZm9yIHRoZSBzYW1lIHB1cnBvc2UgYXJlIHByb3ZpZGVkIHRoZXJlIGlzIGEgc3RhbmRhcmQgZXh0ZW5zaW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIG9uZSBpcyB0aGUgcHJlZmVycmVkIGNvbnRhY3QgdG8gdXNlLlxyXG4gICAqL1xyXG4gIGNvbnRhY3Q/OiBmaGlyLk9yZ2FuaXphdGlvbkNvbnRhY3RBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRlY2huaWNhbCBlbmRwb2ludHMgcHJvdmlkaW5nIGFjY2VzcyB0byBzZXJ2aWNlcyBvcGVyYXRlZCBmb3IgdGhlIG9yZ2FuaXphdGlvbi5cclxuICAgKi9cclxuICBlbmRwb2ludD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZm9ybWFsbHkgb3IgaW5mb3JtYWxseSByZWNvZ25pemVkIGdyb3VwaW5nIG9mIHBlb3BsZSBvciBvcmdhbml6YXRpb25zIGZvcm1lZCBmb3IgdGhlIHB1cnBvc2Ugb2YgYWNoaWV2aW5nIHNvbWUgZm9ybSBvZiBjb2xsZWN0aXZlIGFjdGlvbi4gIEluY2x1ZGVzIGNvbXBhbmllcywgaW5zdGl0dXRpb25zLCBjb3Jwb3JhdGlvbnMsIGRlcGFydG1lbnRzLCBjb21tdW5pdHkgZ3JvdXBzLCBoZWFsdGhjYXJlIHByYWN0aWNlIGdyb3VwcywgcGF5ZXIvaW5zdXJlciwgZXRjLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvbiBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2Uge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnT3JnYW5pemF0aW9uJztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIk9yZ2FuaXphdGlvblwiO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXIgZm9yIHRoZSBvcmdhbml6YXRpb24gdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBvcmdhbml6YXRpb24gYWNyb3NzIG11bHRpcGxlIGRpc3BhcmF0ZSBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyOiBmaGlyLklkZW50aWZpZXJbXTtcclxuICAvKipcclxuICAgKiBUaGlzIGFjdGl2ZSBmbGFnIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIG1hcmsgYW4gb3JnYW5pemF0aW9uIGFzIHRlbXBvcmFyaWx5IGNsb3NlZCBvciB1bmRlciBjb25zdHJ1Y3Rpb24uIEluc3RlYWQgdGhlIExvY2F0aW9uKHMpIHdpdGhpbiB0aGUgT3JnYW5pemF0aW9uIHNob3VsZCBoYXZlIHRoZSBzdXNwZW5kZWQgc3RhdHVzLiBJZiBmdXJ0aGVyIGRldGFpbHMgb2YgdGhlIHJlYXNvbiBmb3IgdGhlIHN1c3BlbnNpb24gYXJlIHJlcXVpcmVkLCB0aGVuIGFuIGV4dGVuc2lvbiBvbiB0aGlzIGVsZW1lbnQgc2hvdWxkIGJlIHVzZWQuXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIGl0IG1heSBiZSB1c2VkIHRvIG1hcmsgdGhhdCB0aGUgcmVzb3VyY2Ugd2FzIGNyZWF0ZWQgaW4gZXJyb3IuXHJcbiAgICovXHJcbiAgcHVibGljIGFjdGl2ZT86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE9yZ2FuaXphdGlvbnMgY2FuIGJlIGNvcnBvcmF0aW9ucywgd2FyZHMsIHNlY3Rpb25zLCBjbGluaWNhbCB0ZWFtcywgZ292ZXJubWVudCBkZXBhcnRtZW50cywgZXRjLiBOb3RlIHRoYXQgY29kZSBpcyBnZW5lcmFsbHkgYSBjbGFzc2lmaWVyIG9mIHRoZSB0eXBlIG9mIG9yZ2FuaXphdGlvbjsgaW4gbWFueSBhcHBsaWNhdGlvbnMsIGNvZGVzIGFyZSB1c2VkIHRvIGlkZW50aXR5IGEgcGFydGljdWxhciBvcmdhbml6YXRpb24gKHNheSwgd2FyZCkgYXMgb3Bwb3NlZCB0byBhbm90aGVyIG9mIHRoZSBzYW1lIHR5cGUgLSB0aGVzZSBhcmUgaWRlbnRpZmllcnMsIG5vdCBjb2Rlc1xyXG4gICAqIFdoZW4gY29uc2lkZXJpbmcgaWYgbXVsdGlwbGUgdHlwZXMgYXJlIGFwcHJvcHJpYXRlLCB5b3Ugc2hvdWxkIGV2YWx1YXRlIGlmIGNoaWxkIG9yZ2FuaXphdGlvbnMgd291bGQgYmUgYSBtb3JlIGFwcHJvcHJpYXRlIHVzZSBvZiB0aGUgY29uY2VwdCwgYXMgZGlmZmVyZW50IHR5cGVzIGxpa2VseSBhcmUgaW4gZGlmZmVyZW50IHN1Yi1hcmVhcyBvZiB0aGUgb3JnYW5pemF0aW9uLiBUaGlzIGlzIG1vc3QgbGlrZWx5IHRvIGJlIHVzZWQgd2hlcmUgdHlwZSB2YWx1ZXMgaGF2ZSBvcnRob2dvbmFsIHZhbHVlcywgc3VjaCBhcyBhIHJlbGlnaW91cywgYWNhZGVtaWMgYW5kIG1lZGljYWwgY2VudGVyLlxyXG4gICAqIFdlIGV4cGVjdCB0aGF0IHNvbWUganVyaXNkaWN0aW9ucyB3aWxsIHByb2ZpbGUgdGhpcyBvcHRpb25hbGl0eSB0byBiZSBhIHNpbmdsZSBjYXJkaW5hbGl0eS5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZTogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBJZiB0aGUgbmFtZSBvZiBhbiBvcmdhbml6YXRpb24gY2hhbmdlcywgY29uc2lkZXIgcHV0dGluZyB0aGUgb2xkIG5hbWUgaW4gdGhlIGFsaWFzIGNvbHVtbiBzbyB0aGF0IGl0IGNhbiBzdGlsbCBiZSBsb2NhdGVkIHRocm91Z2ggc2VhcmNoZXMuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIGFyZSBubyBkYXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGFsaWFzL2hpc3RvcmljIG5hbWVzLCBhcyB0aGlzIGlzIG5vdCBpbnRlbmRlZCB0byB0cmFjayB3aGVuIG5hbWVzIHdlcmUgdXNlZCwgYnV0IHRvIGFzc2lzdCBpbiBzZWFyY2hpbmcgc28gdGhhdCBvbGRlciBuYW1lcyBjYW4gc3RpbGwgcmVzdWx0IGluIGlkZW50aWZ5aW5nIHRoZSBvcmdhbml6YXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGFsaWFzOiBmaGlyLkZoaXJTdHJpbmdbXTtcclxuICAvKipcclxuICAgKiBUaGUgdXNlIGNvZGUgJ2hvbWUnIGlzIG5vdCB0byBiZSB1c2VkLiBOb3RlIHRoYXQgdGhlc2UgY29udGFjdHMgYXJlIG5vdCB0aGUgY29udGFjdCBkZXRhaWxzIG9mIHBlb3BsZSB3aG8gYXJlIGVtcGxveWVkIGJ5IG9yIHJlcHJlc2VudCB0aGUgb3JnYW5pemF0aW9uLCBidXQgb2ZmaWNpYWwgY29udGFjdHMgZm9yIHRoZSBvcmdhbml6YXRpb24gaXRzZWxmLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0ZWxlY29tOiBmaGlyLkNvbnRhY3RQb2ludFtdO1xyXG4gIC8qKlxyXG4gICAqIE9yZ2FuaXphdGlvbiBtYXkgaGF2ZSBtdWx0aXBsZSBhZGRyZXNzZXMgd2l0aCBkaWZmZXJlbnQgdXNlcyBvciBhcHBsaWNhYmxlIHBlcmlvZHMuIFRoZSB1c2UgY29kZSAnaG9tZScgaXMgbm90IHRvIGJlIHVzZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGFkZHJlc3M6IGZoaXIuQWRkcmVzc1tdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcmdhbml6YXRpb24gb2Ygd2hpY2ggdGhpcyBvcmdhbml6YXRpb24gZm9ybXMgYSBwYXJ0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJ0T2Y/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlcmUgbXVsdGlwbGUgY29udGFjdHMgZm9yIHRoZSBzYW1lIHB1cnBvc2UgYXJlIHByb3ZpZGVkIHRoZXJlIGlzIGEgc3RhbmRhcmQgZXh0ZW5zaW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIG9uZSBpcyB0aGUgcHJlZmVycmVkIGNvbnRhY3QgdG8gdXNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250YWN0OiBmaGlyLk9yZ2FuaXphdGlvbkNvbnRhY3RbXTtcclxuICAvKipcclxuICAgKiBUZWNobmljYWwgZW5kcG9pbnRzIHByb3ZpZGluZyBhY2Nlc3MgdG8gc2VydmljZXMgb3BlcmF0ZWQgZm9yIHRoZSBvcmdhbml6YXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGVuZHBvaW50OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE9yZ2FuaXphdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE9yZ2FuaXphdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdPcmdhbml6YXRpb24nO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IHNvdXJjZS5pZGVudGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuSWRlbnRpZmllcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWN0aXZlJ10pIHsgdGhpcy5hY3RpdmUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5hY3RpdmV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2FjdGl2ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmFjdGl2ZSkgeyB0aGlzLmFjdGl2ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9hY3RpdmUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5hY3RpdmUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX2FjdGl2ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBzb3VyY2UudHlwZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfbmFtZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLm5hbWUpIHsgdGhpcy5uYW1lLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX25hbWUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX25hbWUgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2FsaWFzJ10pIHsgdGhpcy5hbGlhcyA9IHNvdXJjZS5hbGlhcy5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hbGlhcyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfYWxpYXMnXSkge1xyXG4gICAgICBzb3VyY2UuX2FsaWFzLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmFsaWFzLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMuYWxpYXNbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5hbGlhcy5wdXNoKG5ldyBmaGlyLkZoaXJTdHJpbmcoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3RlbGVjb20nXSkgeyB0aGlzLnRlbGVjb20gPSBzb3VyY2UudGVsZWNvbS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbnRhY3RQb2ludCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRlbGVjb20gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRkcmVzcyddKSB7IHRoaXMuYWRkcmVzcyA9IHNvdXJjZS5hZGRyZXNzLm1hcCgoeCkgPT4gbmV3IGZoaXIuQWRkcmVzcyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFkZHJlc3MgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGFydE9mJ10pIHsgdGhpcy5wYXJ0T2YgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnBhcnRPZik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRhY3QnXSkgeyB0aGlzLmNvbnRhY3QgPSBzb3VyY2UuY29udGFjdC5tYXAoKHgpID0+IG5ldyBmaGlyLk9yZ2FuaXphdGlvbkNvbnRhY3QoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250YWN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2VuZHBvaW50J10pIHsgdGhpcy5lbmRwb2ludCA9IHNvdXJjZS5lbmRwb2ludC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmVuZHBvaW50ID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnT3JnYW5pemF0aW9uJyB9XHJcbiAgICB0aGlzLnZSZXFTKCdyZXNvdXJjZVR5cGUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdpZGVudGlmaWVyJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnYWN0aXZlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgndHlwZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ25hbWUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdhbGlhcycsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ3RlbGVjb20nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdhZGRyZXNzJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygncGFydE9mJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnY29udGFjdCcsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2VuZHBvaW50JyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19