// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProduct
import * as fhir from '../fhir.js';
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductNameNamePart extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameNamePart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['part']) {
            this.part = new fhir.FhirString({ value: source.part });
        }
        else {
            this.part = null;
        }
        if (source['_part']) {
            if (this.part) {
                this.part.addExtendedProperties(source._part);
            }
            else {
                this.part = new fhir.FhirString(source._part);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.name.namePart';
        }
        this.vReqS('part', expression);
        this.vReqS('type', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductNameNamePart._fts_dataType = 'MedicinalProductNameNamePart';
/**
 * Country where the name applies.
 */
export class MedicinalProductNameCountryLanguage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameCountryLanguage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country);
        }
        else {
            this.country = null;
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.name.countryLanguage';
        }
        this.vReqS('country', expression);
        this.vOptS('jurisdiction', expression);
        this.vReqS('language', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductNameCountryLanguage._fts_dataType = 'MedicinalProductNameCountryLanguage';
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductName extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productName']) {
            this.productName = new fhir.FhirString({ value: source.productName });
        }
        else {
            this.productName = null;
        }
        if (source['_productName']) {
            if (this.productName) {
                this.productName.addExtendedProperties(source._productName);
            }
            else {
                this.productName = new fhir.FhirString(source._productName);
            }
        }
        if (source['namePart']) {
            this.namePart = source.namePart.map((x) => new fhir.MedicinalProductNameNamePart(x));
        }
        else {
            this.namePart = [];
        }
        if (source['countryLanguage']) {
            this.countryLanguage = source.countryLanguage.map((x) => new fhir.MedicinalProductNameCountryLanguage(x));
        }
        else {
            this.countryLanguage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.name';
        }
        this.vReqS('productName', expression);
        this.vOptA('namePart', expression);
        this.vOptA('countryLanguage', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductName._fts_dataType = 'MedicinalProductName';
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export class MedicinalProductManufacturingBusinessOperation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductManufacturingBusinessOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operationType']) {
            this.operationType = new fhir.CodeableConcept(source.operationType);
        }
        if (source['authorisationReferenceNumber']) {
            this.authorisationReferenceNumber = new fhir.Identifier(source.authorisationReferenceNumber);
        }
        if (source['effectiveDate']) {
            this.effectiveDate = new fhir.FhirDateTime({ value: source.effectiveDate });
        }
        if (source['_effectiveDate']) {
            if (this.effectiveDate) {
                this.effectiveDate.addExtendedProperties(source._effectiveDate);
            }
            else {
                this.effectiveDate = new fhir.FhirDateTime(source._effectiveDate);
            }
        }
        if (source['confidentialityIndicator']) {
            this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator);
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['regulator']) {
            this.regulator = new fhir.Reference(source.regulator);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.manufacturingBusinessOperation';
        }
        this.vOptS('operationType', expression);
        this.vOptS('authorisationReferenceNumber', expression);
        this.vOptS('effectiveDate', expression);
        this.vOptS('confidentialityIndicator', expression);
        this.vOptA('manufacturer', expression);
        this.vOptS('regulator', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductManufacturingBusinessOperation._fts_dataType = 'MedicinalProductManufacturingBusinessOperation';
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export class MedicinalProductSpecialDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductSpecialDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['intendedUse']) {
            this.intendedUse = new fhir.CodeableConcept(source.intendedUse);
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['species']) {
            this.species = new fhir.CodeableConcept(source.species);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.specialDesignation';
        }
        this.vOptA('identifier', expression);
        this.vOptS('type', expression);
        this.vOptS('intendedUse', expression);
        this.vOptS('indication', expression);
        this.vOptS('status', expression);
        this.vOptS('date', expression);
        this.vOptS('species', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductSpecialDesignation._fts_dataType = 'MedicinalProductSpecialDesignation';
/**
 * Internal flag to properly serialize choice-type element MedicinalProduct.specialDesignation.indication[x]
 */
MedicinalProductSpecialDesignation._fts_indicationIsChoice = true;
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export class MedicinalProduct extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['domain']) {
            this.domain = new fhir.Coding(source.domain);
        }
        if (source['combinedPharmaceuticalDoseForm']) {
            this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm);
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['additionalMonitoringIndicator']) {
            this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator);
        }
        if (source['specialMeasures']) {
            this.specialMeasures = source.specialMeasures.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.specialMeasures = [];
        }
        if (source['_specialMeasures']) {
            source._specialMeasures.forEach((x, i) => {
                if (this.specialMeasures.length >= i) {
                    if (x) {
                        this.specialMeasures[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.specialMeasures.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['paediatricUseIndicator']) {
            this.paediatricUseIndicator = new fhir.CodeableConcept(source.paediatricUseIndicator);
        }
        if (source['productClassification']) {
            this.productClassification = source.productClassification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.productClassification = [];
        }
        if (source['marketingStatus']) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x));
        }
        else {
            this.marketingStatus = [];
        }
        if (source['pharmaceuticalProduct']) {
            this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x) => new fhir.Reference(x));
        }
        else {
            this.pharmaceuticalProduct = [];
        }
        if (source['packagedMedicinalProduct']) {
            this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhir.Reference(x));
        }
        else {
            this.packagedMedicinalProduct = [];
        }
        if (source['attachedDocument']) {
            this.attachedDocument = source.attachedDocument.map((x) => new fhir.Reference(x));
        }
        else {
            this.attachedDocument = [];
        }
        if (source['masterFile']) {
            this.masterFile = source.masterFile.map((x) => new fhir.Reference(x));
        }
        else {
            this.masterFile = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.Reference(x));
        }
        else {
            this.contact = [];
        }
        if (source['clinicalTrial']) {
            this.clinicalTrial = source.clinicalTrial.map((x) => new fhir.Reference(x));
        }
        else {
            this.clinicalTrial = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.MedicinalProductName(x));
        }
        else {
            this.name = [];
        }
        if (source['crossReference']) {
            this.crossReference = source.crossReference.map((x) => new fhir.Identifier(x));
        }
        else {
            this.crossReference = [];
        }
        if (source['manufacturingBusinessOperation']) {
            this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x) => new fhir.MedicinalProductManufacturingBusinessOperation(x));
        }
        else {
            this.manufacturingBusinessOperation = [];
        }
        if (source['specialDesignation']) {
            this.specialDesignation = source.specialDesignation.map((x) => new fhir.MedicinalProductSpecialDesignation(x));
        }
        else {
            this.specialDesignation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vOptS('type', expression);
        this.vOptS('domain', expression);
        this.vOptS('combinedPharmaceuticalDoseForm', expression);
        this.vOptS('legalStatusOfSupply', expression);
        this.vOptS('additionalMonitoringIndicator', expression);
        this.vOptA('specialMeasures', expression);
        this.vOptS('paediatricUseIndicator', expression);
        this.vOptA('productClassification', expression);
        this.vOptA('marketingStatus', expression);
        this.vOptA('pharmaceuticalProduct', expression);
        this.vOptA('packagedMedicinalProduct', expression);
        this.vOptA('attachedDocument', expression);
        this.vOptA('masterFile', expression);
        this.vOptA('contact', expression);
        this.vOptA('clinicalTrial', expression);
        this.vReqA('name', expression);
        this.vOptA('crossReference', expression);
        this.vOptA('manufacturingBusinessOperation', expression);
        this.vOptA('specialDesignation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProduct._fts_dataType = 'MedicinalProduct';
//# sourceMappingURL=data:application/json;base64,