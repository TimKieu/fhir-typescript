// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProduct
import * as fhir from '../fhir.js';
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductNameNamePart extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameNamePart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['part'] !== undefined) {
            this.part = new fhir.FhirString({ value: source.part }, options);
        }
        else {
            this.part = null;
        }
        if (source['_part']) {
            if (this.part) {
                this.part.addExtendedProperties(source._part);
            }
            else {
                this.part = new fhir.FhirString(source._part, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type, options);
        }
        else {
            this.type = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProduct.name.namePart';
        }
        iss.push(...this.vRS('part', exp));
        iss.push(...this.vRS('type', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductNameNamePart._fts_dataType = 'MedicinalProductNameNamePart';
/**
 * Country where the name applies.
 */
export class MedicinalProductNameCountryLanguage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameCountryLanguage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country, options);
        }
        else {
            this.country = null;
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction, options);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language, options);
        }
        else {
            this.language = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProduct.name.countryLanguage';
        }
        iss.push(...this.vRS('country', exp));
        iss.push(...this.vOS('jurisdiction', exp));
        iss.push(...this.vRS('language', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductNameCountryLanguage._fts_dataType = 'MedicinalProductNameCountryLanguage';
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductName extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productName'] !== undefined) {
            this.productName = new fhir.FhirString({ value: source.productName }, options);
        }
        else {
            this.productName = null;
        }
        if (source['_productName']) {
            if (this.productName) {
                this.productName.addExtendedProperties(source._productName);
            }
            else {
                this.productName = new fhir.FhirString(source._productName, options);
            }
        }
        if (source['namePart']) {
            this.namePart = source.namePart.map((x) => new fhir.MedicinalProductNameNamePart(x, options));
        }
        else {
            this.namePart = [];
        }
        if (source['countryLanguage']) {
            this.countryLanguage = source.countryLanguage.map((x) => new fhir.MedicinalProductNameCountryLanguage(x, options));
        }
        else {
            this.countryLanguage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProduct.name';
        }
        iss.push(...this.vRS('productName', exp));
        iss.push(...this.vOA('namePart', exp));
        iss.push(...this.vOA('countryLanguage', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductName._fts_dataType = 'MedicinalProductName';
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export class MedicinalProductManufacturingBusinessOperation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductManufacturingBusinessOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operationType']) {
            this.operationType = new fhir.CodeableConcept(source.operationType, options);
        }
        if (source['authorisationReferenceNumber']) {
            this.authorisationReferenceNumber = new fhir.Identifier(source.authorisationReferenceNumber, options);
        }
        if (source['effectiveDate'] !== undefined) {
            this.effectiveDate = new fhir.FhirDateTime({ value: source.effectiveDate }, options);
        }
        if (source['_effectiveDate']) {
            if (this.effectiveDate) {
                this.effectiveDate.addExtendedProperties(source._effectiveDate);
            }
            else {
                this.effectiveDate = new fhir.FhirDateTime(source._effectiveDate, options);
            }
        }
        if (source['confidentialityIndicator']) {
            this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator, options);
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.manufacturer = [];
        }
        if (source['regulator']) {
            this.regulator = new fhir.Reference(source.regulator, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProduct.manufacturingBusinessOperation';
        }
        iss.push(...this.vOS('operationType', exp));
        iss.push(...this.vOS('authorisationReferenceNumber', exp));
        iss.push(...this.vOS('effectiveDate', exp));
        iss.push(...this.vOS('confidentialityIndicator', exp));
        iss.push(...this.vOA('manufacturer', exp));
        iss.push(...this.vOS('regulator', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductManufacturingBusinessOperation._fts_dataType = 'MedicinalProductManufacturingBusinessOperation';
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export class MedicinalProductSpecialDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductSpecialDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['intendedUse']) {
            this.intendedUse = new fhir.CodeableConcept(source.intendedUse, options);
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept, options);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference, options);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['species']) {
            this.species = new fhir.CodeableConcept(source.species, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProduct.specialDesignation';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('intendedUse', exp));
        iss.push(...this.vOS('indication', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('species', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductSpecialDesignation._fts_dataType = 'MedicinalProductSpecialDesignation';
/**
 * Internal flag to properly serialize choice-type element MedicinalProduct.specialDesignation.indication[x]
 */
MedicinalProductSpecialDesignation._fts_indicationIsChoice = true;
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export class MedicinalProduct extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['domain']) {
            this.domain = new fhir.Coding(source.domain, options);
        }
        if (source['combinedPharmaceuticalDoseForm']) {
            this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm, options);
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply, options);
        }
        if (source['additionalMonitoringIndicator']) {
            this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator, options);
        }
        if (source['specialMeasures'] !== undefined) {
            this.specialMeasures = source.specialMeasures.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.specialMeasures = [];
        }
        if (source['_specialMeasures']) {
            source._specialMeasures.forEach((x, i) => {
                if (this.specialMeasures.length >= i) {
                    if (x) {
                        this.specialMeasures[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.specialMeasures.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['paediatricUseIndicator']) {
            this.paediatricUseIndicator = new fhir.CodeableConcept(source.paediatricUseIndicator, options);
        }
        if (source['productClassification']) {
            this.productClassification = source.productClassification.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.productClassification = [];
        }
        if (source['marketingStatus']) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x, options));
        }
        else {
            this.marketingStatus = [];
        }
        if (source['pharmaceuticalProduct']) {
            this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.pharmaceuticalProduct = [];
        }
        if (source['packagedMedicinalProduct']) {
            this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.packagedMedicinalProduct = [];
        }
        if (source['attachedDocument']) {
            this.attachedDocument = source.attachedDocument.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.attachedDocument = [];
        }
        if (source['masterFile']) {
            this.masterFile = source.masterFile.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.masterFile = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['clinicalTrial']) {
            this.clinicalTrial = source.clinicalTrial.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.clinicalTrial = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.MedicinalProductName(x, options));
        }
        else {
            this.name = [];
        }
        if (source['crossReference']) {
            this.crossReference = source.crossReference.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.crossReference = [];
        }
        if (source['manufacturingBusinessOperation']) {
            this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x) => new fhir.MedicinalProductManufacturingBusinessOperation(x, options));
        }
        else {
            this.manufacturingBusinessOperation = [];
        }
        if (source['specialDesignation']) {
            this.specialDesignation = source.specialDesignation.map((x) => new fhir.MedicinalProductSpecialDesignation(x, options));
        }
        else {
            this.specialDesignation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProduct';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('domain', exp));
        iss.push(...this.vOS('combinedPharmaceuticalDoseForm', exp));
        iss.push(...this.vOS('legalStatusOfSupply', exp));
        iss.push(...this.vOS('additionalMonitoringIndicator', exp));
        iss.push(...this.vOA('specialMeasures', exp));
        iss.push(...this.vOS('paediatricUseIndicator', exp));
        iss.push(...this.vOA('productClassification', exp));
        iss.push(...this.vOA('marketingStatus', exp));
        iss.push(...this.vOA('pharmaceuticalProduct', exp));
        iss.push(...this.vOA('packagedMedicinalProduct', exp));
        iss.push(...this.vOA('attachedDocument', exp));
        iss.push(...this.vOA('masterFile', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOA('clinicalTrial', exp));
        iss.push(...this.vRA('name', exp));
        iss.push(...this.vOA('crossReference', exp));
        iss.push(...this.vOA('manufacturingBusinessOperation', exp));
        iss.push(...this.vOA('specialDesignation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProduct._fts_dataType = 'MedicinalProduct';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNpbmFsUHJvZHVjdC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvTWVkaWNpbmFsUHJvZHVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFFbEMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFvQm5DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE2QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBYXBFOztPQUVHO0lBQ0gsWUFBWSxTQUFtRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN6RyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUFFO2FBQ2hHO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNuQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsS0FBTSxDQUFDLENBQUM7YUFBRTtpQkFDN0Q7Z0JBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQXFDLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFBRTtTQUNqRztRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUks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Q0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0MsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQWxLRDs7R0FFRztBQUM2Qiw4QkFBYSxHQUFVLGtCQUFrQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBNZWRpY2luYWxQcm9kdWN0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljaW5hbFByb2R1Y3ROYW1lTmFtZVBhcnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEEgZnJhZ21lbnQgb2YgYSBwcm9kdWN0IG5hbWUuXHJcbiAgICovXHJcbiAgcGFydDogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljaW5hbFByb2R1Y3QubmFtZS5uYW1lUGFydC5wYXJ0XHJcbiAgICovXHJcbiAgX3BhcnQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIElkZW5pZnlpbmcgdHlwZSBmb3IgdGhpcyBwYXJ0IG9mIHRoZSBuYW1lIChlLmcuIHN0cmVuZ3RoIHBhcnQpLlxyXG4gICAqL1xyXG4gIHR5cGU6IGZoaXIuQ29kaW5nQXJnc3xudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQ29kaW5nIHdvcmRzIG9yIHBocmFzZXMgb2YgdGhlIG5hbWUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3ROYW1lTmFtZVBhcnQnO1xyXG4gIC8qKlxyXG4gICAqIEEgZnJhZ21lbnQgb2YgYSBwcm9kdWN0IG5hbWUuXHJcbiAgICovXHJcbiAgcHVibGljIHBhcnQ6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIElkZW5pZnlpbmcgdHlwZSBmb3IgdGhpcyBwYXJ0IG9mIHRoZSBuYW1lIChlLmcuIHN0cmVuZ3RoIHBhcnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljaW5hbFByb2R1Y3ROYW1lTmFtZVBhcnQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2luYWxQcm9kdWN0TmFtZU5hbWVQYXJ0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3BhcnQnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMucGFydCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGFydH0sIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wYXJ0ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3BhcnQnXSkge1xyXG4gICAgICBpZiAodGhpcy5wYXJ0KSB7IHRoaXMucGFydC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9wYXJ0ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucGFydCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9wYXJ0IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS50eXBlLCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdNZWRpY2luYWxQcm9kdWN0Lm5hbWUubmFtZVBhcnQnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCdwYXJ0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTKCd0eXBlJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2luYWxQcm9kdWN0TmFtZUNvdW50cnlMYW5ndWFnZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2luYWxQcm9kdWN0TmFtZUNvdW50cnlMYW5ndWFnZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIENvdW50cnkgY29kZSBmb3Igd2hlcmUgdGhpcyBuYW1lIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgY291bnRyeTogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogSnVyaXNkaWN0aW9uIGNvZGUgZm9yIHdoZXJlIHRoaXMgbmFtZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGFuZ3VhZ2UgY29kZSBmb3IgdGhpcyBuYW1lLlxyXG4gICAqL1xyXG4gIGxhbmd1YWdlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvdW50cnkgd2hlcmUgdGhlIG5hbWUgYXBwbGllcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2luYWxQcm9kdWN0TmFtZUNvdW50cnlMYW5ndWFnZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3ROYW1lQ291bnRyeUxhbmd1YWdlJztcclxuICAvKipcclxuICAgKiBDb3VudHJ5IGNvZGUgZm9yIHdoZXJlIHRoaXMgbmFtZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3VudHJ5OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEp1cmlzZGljdGlvbiBjb2RlIGZvciB3aGVyZSB0aGlzIG5hbWUgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMganVyaXNkaWN0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIExhbmd1YWdlIGNvZGUgZm9yIHRoaXMgbmFtZS5cclxuICAgKi9cclxuICBwdWJsaWMgbGFuZ3VhZ2U6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNpbmFsUHJvZHVjdE5hbWVDb3VudHJ5TGFuZ3VhZ2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2luYWxQcm9kdWN0TmFtZUNvdW50cnlMYW5ndWFnZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydjb3VudHJ5J10pIHsgdGhpcy5jb3VudHJ5ID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5jb3VudHJ5LCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY291bnRyeSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2p1cmlzZGljdGlvbiddKSB7IHRoaXMuanVyaXNkaWN0aW9uID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5qdXJpc2RpY3Rpb24sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydsYW5ndWFnZSddKSB7IHRoaXMubGFuZ3VhZ2UgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmxhbmd1YWdlLCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubGFuZ3VhZ2UgPSBudWxsOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnTWVkaWNpbmFsUHJvZHVjdC5uYW1lLmNvdW50cnlMYW5ndWFnZScgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ2NvdW50cnknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2p1cmlzZGljdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygnbGFuZ3VhZ2UnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljaW5hbFByb2R1Y3ROYW1lIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljaW5hbFByb2R1Y3ROYW1lQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZ1bGwgcHJvZHVjdCBuYW1lLlxyXG4gICAqL1xyXG4gIHByb2R1Y3ROYW1lOiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNpbmFsUHJvZHVjdC5uYW1lLnByb2R1Y3ROYW1lXHJcbiAgICovXHJcbiAgX3Byb2R1Y3ROYW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBDb2Rpbmcgd29yZHMgb3IgcGhyYXNlcyBvZiB0aGUgbmFtZS5cclxuICAgKi9cclxuICBuYW1lUGFydD86IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ291bnRyeSB3aGVyZSB0aGUgbmFtZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGNvdW50cnlMYW5ndWFnZT86IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE5hbWVDb3VudHJ5TGFuZ3VhZ2VBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHByb2R1Y3QncyBuYW1lLCBpbmNsdWRpbmcgZnVsbCBuYW1lIGFuZCBwb3NzaWJseSBjb2RlZCBwYXJ0cy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2luYWxQcm9kdWN0TmFtZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3ROYW1lJztcclxuICAvKipcclxuICAgKiBUaGUgZnVsbCBwcm9kdWN0IG5hbWUuXHJcbiAgICovXHJcbiAgcHVibGljIHByb2R1Y3ROYW1lOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBDb2Rpbmcgd29yZHMgb3IgcGhyYXNlcyBvZiB0aGUgbmFtZS5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZVBhcnQ6IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydFtdO1xyXG4gIC8qKlxyXG4gICAqIENvdW50cnkgd2hlcmUgdGhlIG5hbWUgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgY291bnRyeUxhbmd1YWdlOiBmaGlyLk1lZGljaW5hbFByb2R1Y3ROYW1lQ291bnRyeUxhbmd1YWdlW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNpbmFsUHJvZHVjdE5hbWUgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2luYWxQcm9kdWN0TmFtZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydwcm9kdWN0TmFtZSddICE9PSB1bmRlZmluZWQpIHsgdGhpcy5wcm9kdWN0TmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucHJvZHVjdE5hbWV9LCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucHJvZHVjdE5hbWUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfcHJvZHVjdE5hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5wcm9kdWN0TmFtZSkgeyB0aGlzLnByb2R1Y3ROYW1lLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3Byb2R1Y3ROYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucHJvZHVjdE5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fcHJvZHVjdE5hbWUgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWVQYXJ0J10pIHsgdGhpcy5uYW1lUGFydCA9IHNvdXJjZS5uYW1lUGFydC5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljaW5hbFByb2R1Y3ROYW1lTmFtZVBhcnQoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5uYW1lUGFydCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjb3VudHJ5TGFuZ3VhZ2UnXSkgeyB0aGlzLmNvdW50cnlMYW5ndWFnZSA9IHNvdXJjZS5jb3VudHJ5TGFuZ3VhZ2UubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2luYWxQcm9kdWN0TmFtZUNvdW50cnlMYW5ndWFnZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvdW50cnlMYW5ndWFnZSA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnTWVkaWNpbmFsUHJvZHVjdC5uYW1lJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygncHJvZHVjdE5hbWUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ25hbWVQYXJ0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdjb3VudHJ5TGFuZ3VhZ2UnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljaW5hbFByb2R1Y3RNYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIG1hbnVmYWN0dXJpbmcgb3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIG9wZXJhdGlvblR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZ3VsYXRvcnkgYXV0aG9yaXphdGlvbiByZWZlcmVuY2UgbnVtYmVyLlxyXG4gICAqL1xyXG4gIGF1dGhvcmlzYXRpb25SZWZlcmVuY2VOdW1iZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZWd1bGF0b3J5IGF1dGhvcml6YXRpb24gZGF0ZS5cclxuICAgKi9cclxuICBlZmZlY3RpdmVEYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNpbmFsUHJvZHVjdC5tYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24uZWZmZWN0aXZlRGF0ZVxyXG4gICAqL1xyXG4gIF9lZmZlY3RpdmVEYXRlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUbyBpbmRpY2F0ZSBpZiB0aGlzIHByb2NlcyBpcyBjb21tZXJjaWFsbHkgY29uZmlkZW50aWFsLlxyXG4gICAqL1xyXG4gIGNvbmZpZGVudGlhbGl0eUluZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1hbnVmYWN0dXJlciBvciBlc3RhYmxpc2htZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvY2Vzcy5cclxuICAgKi9cclxuICBtYW51ZmFjdHVyZXI/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSByZWd1bGF0b3Igd2hpY2ggb3ZlcnNlZXMgdGhlIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICByZWd1bGF0b3I/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gb3BlcmF0aW9uIGFwcGxpZWQgdG8gdGhlIHByb2R1Y3QsIGZvciBtYW51ZmFjdHVyaW5nIG9yIGFkbWluc2l0cmF0aXZlIHB1cnBvc2UuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3RNYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIG1hbnVmYWN0dXJpbmcgb3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvcGVyYXRpb25UeXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZ3VsYXRvcnkgYXV0aG9yaXphdGlvbiByZWZlcmVuY2UgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhdXRob3Jpc2F0aW9uUmVmZXJlbmNlTnVtYmVyPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZWd1bGF0b3J5IGF1dGhvcml6YXRpb24gZGF0ZS5cclxuICAgKi9cclxuICBwdWJsaWMgZWZmZWN0aXZlRGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUbyBpbmRpY2F0ZSBpZiB0aGlzIHByb2NlcyBpcyBjb21tZXJjaWFsbHkgY29uZmlkZW50aWFsLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25maWRlbnRpYWxpdHlJbmRpY2F0b3I/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1hbnVmYWN0dXJlciBvciBlc3RhYmxpc2htZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvY2Vzcy5cclxuICAgKi9cclxuICBwdWJsaWMgbWFudWZhY3R1cmVyOiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgcmVndWxhdG9yIHdoaWNoIG92ZXJzZWVzIHRoZSBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHJlZ3VsYXRvcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2luYWxQcm9kdWN0TWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydvcGVyYXRpb25UeXBlJ10pIHsgdGhpcy5vcGVyYXRpb25UeXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5vcGVyYXRpb25UeXBlLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYXV0aG9yaXNhdGlvblJlZmVyZW5jZU51bWJlciddKSB7IHRoaXMuYXV0aG9yaXNhdGlvblJlZmVyZW5jZU51bWJlciA9IG5ldyBmaGlyLklkZW50aWZpZXIoc291cmNlLmF1dGhvcmlzYXRpb25SZWZlcmVuY2VOdW1iZXIsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydlZmZlY3RpdmVEYXRlJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLmVmZmVjdGl2ZURhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuZWZmZWN0aXZlRGF0ZX0sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydfZWZmZWN0aXZlRGF0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmVmZmVjdGl2ZURhdGUpIHsgdGhpcy5lZmZlY3RpdmVEYXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2VmZmVjdGl2ZURhdGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5lZmZlY3RpdmVEYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fZWZmZWN0aXZlRGF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4sIG9wdGlvbnMpOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb25maWRlbnRpYWxpdHlJbmRpY2F0b3InXSkgeyB0aGlzLmNvbmZpZGVudGlhbGl0eUluZGljYXRvciA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY29uZmlkZW50aWFsaXR5SW5kaWNhdG9yLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFudWZhY3R1cmVyJ10pIHsgdGhpcy5tYW51ZmFjdHVyZXIgPSBzb3VyY2UubWFudWZhY3R1cmVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubWFudWZhY3R1cmVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlZ3VsYXRvciddKSB7IHRoaXMucmVndWxhdG9yID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZWd1bGF0b3IsIG9wdGlvbnMpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnTWVkaWNpbmFsUHJvZHVjdC5tYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24nIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdvcGVyYXRpb25UeXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhdXRob3Jpc2F0aW9uUmVmZXJlbmNlTnVtYmVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdlZmZlY3RpdmVEYXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdjb25maWRlbnRpYWxpdHlJbmRpY2F0b3InLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ21hbnVmYWN0dXJlcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygncmVndWxhdG9yJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2luYWxQcm9kdWN0U3BlY2lhbERlc2lnbmF0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljaW5hbFByb2R1Y3RTcGVjaWFsRGVzaWduYXRpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGZvciB0aGUgZGVzaWduYXRpb24sIG9yIHByb2NlZHVyZSBudW1iZXIuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2Ygc3BlY2lhbCBkZXNpZ25hdGlvbiwgZS5nLiBvcnBoYW4gZHJ1ZywgbWlub3IgdXNlLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbnRlbmRlZCB1c2Ugb2YgdGhlIHByb2R1Y3QsIGUuZy4gcHJldmVudGlvbiwgdHJlYXRtZW50LlxyXG4gICAqL1xyXG4gIGludGVuZGVkVXNlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb25kaXRpb24gZm9yIHdoaWNoIHRoZSBtZWRpY2luYWwgdXNlIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgaW5kaWNhdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb25kaXRpb24gZm9yIHdoaWNoIHRoZSBtZWRpY2luYWwgdXNlIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgaW5kaWNhdGlvbkNvZGVhYmxlQ29uY2VwdD86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29uZGl0aW9uIGZvciB3aGljaCB0aGUgbWVkaWNpbmFsIHVzZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGluZGljYXRpb25SZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBleGFtcGxlIGdyYW50ZWQsIHBlbmRpbmcsIGV4cGlyZWQgb3Igd2l0aGRyYXduLlxyXG4gICAqL1xyXG4gIHN0YXR1cz86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGF0ZSB3aGVuIHRoZSBkZXNpZ25hdGlvbiB3YXMgZ3JhbnRlZC5cclxuICAgKi9cclxuICBkYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNpbmFsUHJvZHVjdC5zcGVjaWFsRGVzaWduYXRpb24uZGF0ZVxyXG4gICAqL1xyXG4gIF9kYXRlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBbmltYWwgc3BlY2llcyBmb3Igd2hpY2ggdGhpcyBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIHNwZWNpZXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIGlmIHRoZSBtZWRpY2luYWwgcHJvZHVjdCBoYXMgYW4gb3JwaGFuIGRlc2lnbmF0aW9uIGZvciB0aGUgdHJlYXRtZW50IG9mIGEgcmFyZSBkaXNlYXNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljaW5hbFByb2R1Y3RTcGVjaWFsRGVzaWduYXRpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdNZWRpY2luYWxQcm9kdWN0U3BlY2lhbERlc2lnbmF0aW9uJztcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGZvciB0aGUgZGVzaWduYXRpb24sIG9yIHByb2NlZHVyZSBudW1iZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aWZpZXI6IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHNwZWNpYWwgZGVzaWduYXRpb24sIGUuZy4gb3JwaGFuIGRydWcsIG1pbm9yIHVzZS5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgaW50ZW5kZWQgdXNlIG9mIHRoZSBwcm9kdWN0LCBlLmcuIHByZXZlbnRpb24sIHRyZWF0bWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgaW50ZW5kZWRVc2U/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29uZGl0aW9uIGZvciB3aGljaCB0aGUgbWVkaWNpbmFsIHVzZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmRpY2F0aW9uPzogKGZoaXIuQ29kZWFibGVDb25jZXB0fGZoaXIuUmVmZXJlbmNlKXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBNZWRpY2luYWxQcm9kdWN0LnNwZWNpYWxEZXNpZ25hdGlvbi5pbmRpY2F0aW9uW3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX2luZGljYXRpb25Jc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZSBncmFudGVkLCBwZW5kaW5nLCBleHBpcmVkIG9yIHdpdGhkcmF3bi5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgd2hlbiB0aGUgZGVzaWduYXRpb24gd2FzIGdyYW50ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGRhdGU/OiBmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQW5pbWFsIHNwZWNpZXMgZm9yIHdoaWNoIHRoaXMgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgc3BlY2llcz86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2luYWxQcm9kdWN0U3BlY2lhbERlc2lnbmF0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNpbmFsUHJvZHVjdFNwZWNpYWxEZXNpZ25hdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gc291cmNlLmlkZW50aWZpZXIubWFwKCh4KSA9PiBuZXcgZmhpci5JZGVudGlmaWVyKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaWRlbnRpZmllciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50eXBlLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaW50ZW5kZWRVc2UnXSkgeyB0aGlzLmludGVuZGVkVXNlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5pbnRlbmRlZFVzZSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2luZGljYXRpb24nXSkgeyB0aGlzLmluZGljYXRpb24gPSBzb3VyY2UuaW5kaWNhdGlvbjsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydpbmRpY2F0aW9uQ29kZWFibGVDb25jZXB0J10pIHsgdGhpcy5pbmRpY2F0aW9uID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5pbmRpY2F0aW9uQ29kZWFibGVDb25jZXB0LCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydpbmRpY2F0aW9uUmVmZXJlbmNlJ10pIHsgdGhpcy5pbmRpY2F0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5pbmRpY2F0aW9uUmVmZXJlbmNlLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnN0YXR1cywgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5kYXRlfSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kYXRlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGF0ZSkgeyB0aGlzLmRhdGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGF0ZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoc291cmNlLl9kYXRlIGFzIFBhcnRpYWw8Zmhpci5GaGlyRGF0ZVRpbWVBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NwZWNpZXMnXSkgeyB0aGlzLnNwZWNpZXMgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnNwZWNpZXMsIG9wdGlvbnMpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnTWVkaWNpbmFsUHJvZHVjdC5zcGVjaWFsRGVzaWduYXRpb24nIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdpZGVudGlmaWVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0eXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdpbnRlbmRlZFVzZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnaW5kaWNhdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnc3RhdHVzJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkYXRlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzcGVjaWVzJyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2luYWxQcm9kdWN0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljaW5hbFByb2R1Y3RBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJNZWRpY2luYWxQcm9kdWN0XCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEJ1c2luZXNzIGlkZW50aWZpZXIgZm9yIHRoaXMgcHJvZHVjdC4gQ291bGQgYmUgYW4gTVBJRC5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZWd1bGF0b3J5IHR5cGUsIGUuZy4gSW52ZXN0aWdhdGlvbmFsIG9yIEF1dGhvcml6ZWQuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyBtZWRpY2luZSBhcHBsaWVzIHRvIGh1bWFuIG9yIHZldGVyaW5hcnkgdXNlcy5cclxuICAgKi9cclxuICBkb21haW4/OiBmaGlyLkNvZGluZ0FyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkb3NlIGZvcm0gZm9yIGEgc2luZ2xlIHBhcnQgcHJvZHVjdCwgb3IgY29tYmluZWQgZm9ybSBvZiBhIG11bHRpcGxlIHBhcnQgcHJvZHVjdC5cclxuICAgKi9cclxuICBjb21iaW5lZFBoYXJtYWNldXRpY2FsRG9zZUZvcm0/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsZWdhbCBzdGF0dXMgb2Ygc3VwcGx5IG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdCBhcyBjbGFzc2lmaWVkIGJ5IHRoZSByZWd1bGF0b3IuXHJcbiAgICovXHJcbiAgbGVnYWxTdGF0dXNPZlN1cHBseT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgTWVkaWNpbmFsIFByb2R1Y3QgaXMgc3ViamVjdCB0byBhZGRpdGlvbmFsIG1vbml0b3JpbmcgZm9yIHJlZ3VsYXRvcnkgcmVhc29ucy5cclxuICAgKi9cclxuICBhZGRpdGlvbmFsTW9uaXRvcmluZ0luZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgTWVkaWNpbmFsIFByb2R1Y3QgaXMgc3ViamVjdCB0byBzcGVjaWFsIG1lYXN1cmVzIGZvciByZWd1bGF0b3J5IHJlYXNvbnMuXHJcbiAgICovXHJcbiAgc3BlY2lhbE1lYXN1cmVzPzogZmhpci5GaGlyU3RyaW5nW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNpbmFsUHJvZHVjdC5zcGVjaWFsTWVhc3VyZXNcclxuICAgKi9cclxuICBfc3BlY2lhbE1lYXN1cmVzPzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBJZiBhdXRob3Jpc2VkIGZvciB1c2UgaW4gY2hpbGRyZW4uXHJcbiAgICovXHJcbiAgcGFlZGlhdHJpY1VzZUluZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIHRoZSBwcm9kdWN0IHRvIGJlIGNsYXNzaWZpZWQgYnkgdmFyaW91cyBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIHByb2R1Y3RDbGFzc2lmaWNhdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXJrZXRpbmcgc3RhdHVzIG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdCwgaW4gY29udHJhc3QgdG8gbWFya2V0aW5nIGF1dGhvcml6YXRvbi5cclxuICAgKi9cclxuICBtYXJrZXRpbmdTdGF0dXM/OiBmaGlyLk1hcmtldGluZ1N0YXR1c0FyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUGhhcm1hY2V1dGljYWwgYXNwZWN0cyBvZiBwcm9kdWN0LlxyXG4gICAqL1xyXG4gIHBoYXJtYWNldXRpY2FsUHJvZHVjdD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYWNrYWdlIHJlcHJlc2VudGF0aW9uIGZvciB0aGUgcHJvZHVjdC5cclxuICAgKi9cclxuICBwYWNrYWdlZE1lZGljaW5hbFByb2R1Y3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBkb2N1bWVudGF0aW9uLCB0eXBpY2FsbHkgZm9yIHJlZ3VsYXRvcnkgc3VibWlzc2lvbi5cclxuICAgKi9cclxuICBhdHRhY2hlZERvY3VtZW50PzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbWFzdGVyIGZpbGUgZm9yIHRvIHRoZSBtZWRpY2luYWwgcHJvZHVjdCAoZS5nLiBQaGFybWFjb3ZpZ2lsYW5jZSBTeXN0ZW0gTWFzdGVyIEZpbGUpLlxyXG4gICAqL1xyXG4gIG1hc3RlckZpbGU/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBwcm9kdWN0IHNwZWNpZmljIGNvbnRhY3QsIHBlcnNvbiAoaW4gYSByb2xlKSwgb3IgYW4gb3JnYW5pemF0aW9uLlxyXG4gICAqL1xyXG4gIGNvbnRhY3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljYWwgdHJpYWxzIG9yIHN0dWRpZXMgdGhhdCB0aGlzIHByb2R1Y3QgaXMgaW52b2x2ZWQgaW4uXHJcbiAgICovXHJcbiAgY2xpbmljYWxUcmlhbD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJvZHVjdCdzIG5hbWUsIGluY2x1ZGluZyBmdWxsIG5hbWUgYW5kIHBvc3NpYmx5IGNvZGVkIHBhcnRzLlxyXG4gICAqL1xyXG4gIG5hbWU6IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE5hbWVBcmdzW118bnVsbDtcclxuICAvKipcclxuICAgKiBSZWZlcmVuY2UgdG8gYW5vdGhlciBwcm9kdWN0LCBlLmcuIGZvciBsaW5raW5nIGF1dGhvcmlzZWQgdG8gaW52ZXN0aWdhdGlvbmFsIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgY3Jvc3NSZWZlcmVuY2U/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wZXJhdGlvbiBhcHBsaWVkIHRvIHRoZSBwcm9kdWN0LCBmb3IgbWFudWZhY3R1cmluZyBvciBhZG1pbnNpdHJhdGl2ZSBwdXJwb3NlLlxyXG4gICAqL1xyXG4gIG1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbj86IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIGlmIHRoZSBtZWRpY2luYWwgcHJvZHVjdCBoYXMgYW4gb3JwaGFuIGRlc2lnbmF0aW9uIGZvciB0aGUgdHJlYXRtZW50IG9mIGEgcmFyZSBkaXNlYXNlLlxyXG4gICAqL1xyXG4gIHNwZWNpYWxEZXNpZ25hdGlvbj86IGZoaXIuTWVkaWNpbmFsUHJvZHVjdFNwZWNpYWxEZXNpZ25hdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXRhaWxlZCBkZWZpbml0aW9uIG9mIGEgbWVkaWNpbmFsIHByb2R1Y3QsIHR5cGljYWxseSBmb3IgdXNlcyBvdGhlciB0aGFuIGRpcmVjdCBwYXRpZW50IGNhcmUgKGUuZy4gcmVndWxhdG9yeSB1c2UpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljaW5hbFByb2R1Y3QgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3QnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiTWVkaWNpbmFsUHJvZHVjdFwiO1xyXG4gIC8qKlxyXG4gICAqIEJ1c2luZXNzIGlkZW50aWZpZXIgZm9yIHRoaXMgcHJvZHVjdC4gQ291bGQgYmUgYW4gTVBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogUmVndWxhdG9yeSB0eXBlLCBlLmcuIEludmVzdGlnYXRpb25hbCBvciBBdXRob3JpemVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoaXMgbWVkaWNpbmUgYXBwbGllcyB0byBodW1hbiBvciB2ZXRlcmluYXJ5IHVzZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRvbWFpbj86IGZoaXIuQ29kaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZG9zZSBmb3JtIGZvciBhIHNpbmdsZSBwYXJ0IHByb2R1Y3QsIG9yIGNvbWJpbmVkIGZvcm0gb2YgYSBtdWx0aXBsZSBwYXJ0IHByb2R1Y3QuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbWJpbmVkUGhhcm1hY2V1dGljYWxEb3NlRm9ybT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGVnYWwgc3RhdHVzIG9mIHN1cHBseSBvZiB0aGUgbWVkaWNpbmFsIHByb2R1Y3QgYXMgY2xhc3NpZmllZCBieSB0aGUgcmVndWxhdG9yLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsZWdhbFN0YXR1c09mU3VwcGx5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIE1lZGljaW5hbCBQcm9kdWN0IGlzIHN1YmplY3QgdG8gYWRkaXRpb25hbCBtb25pdG9yaW5nIGZvciByZWd1bGF0b3J5IHJlYXNvbnMuXHJcbiAgICovXHJcbiAgcHVibGljIGFkZGl0aW9uYWxNb25pdG9yaW5nSW5kaWNhdG9yPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIE1lZGljaW5hbCBQcm9kdWN0IGlzIHN1YmplY3QgdG8gc3BlY2lhbCBtZWFzdXJlcyBmb3IgcmVndWxhdG9yeSByZWFzb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzcGVjaWFsTWVhc3VyZXM6IGZoaXIuRmhpclN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIElmIGF1dGhvcmlzZWQgZm9yIHVzZSBpbiBjaGlsZHJlbi5cclxuICAgKi9cclxuICBwdWJsaWMgcGFlZGlhdHJpY1VzZUluZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgdGhlIHByb2R1Y3QgdG8gYmUgY2xhc3NpZmllZCBieSB2YXJpb3VzIHN5c3RlbXMuXHJcbiAgICovXHJcbiAgcHVibGljIHByb2R1Y3RDbGFzc2lmaWNhdGlvbjogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBNYXJrZXRpbmcgc3RhdHVzIG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdCwgaW4gY29udHJhc3QgdG8gbWFya2V0aW5nIGF1dGhvcml6YXRvbi5cclxuICAgKi9cclxuICBwdWJsaWMgbWFya2V0aW5nU3RhdHVzOiBmaGlyLk1hcmtldGluZ1N0YXR1c1tdO1xyXG4gIC8qKlxyXG4gICAqIFBoYXJtYWNldXRpY2FsIGFzcGVjdHMgb2YgcHJvZHVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgcGhhcm1hY2V1dGljYWxQcm9kdWN0OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIFBhY2thZ2UgcmVwcmVzZW50YXRpb24gZm9yIHRoZSBwcm9kdWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYWNrYWdlZE1lZGljaW5hbFByb2R1Y3Q6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBkb2N1bWVudGF0aW9uLCB0eXBpY2FsbHkgZm9yIHJlZ3VsYXRvcnkgc3VibWlzc2lvbi5cclxuICAgKi9cclxuICBwdWJsaWMgYXR0YWNoZWREb2N1bWVudDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBBIG1hc3RlciBmaWxlIGZvciB0byB0aGUgbWVkaWNpbmFsIHByb2R1Y3QgKGUuZy4gUGhhcm1hY292aWdpbGFuY2UgU3lzdGVtIE1hc3RlciBGaWxlKS5cclxuICAgKi9cclxuICBwdWJsaWMgbWFzdGVyRmlsZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBBIHByb2R1Y3Qgc3BlY2lmaWMgY29udGFjdCwgcGVyc29uIChpbiBhIHJvbGUpLCBvciBhbiBvcmdhbml6YXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhY3Q6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljYWwgdHJpYWxzIG9yIHN0dWRpZXMgdGhhdCB0aGlzIHByb2R1Y3QgaXMgaW52b2x2ZWQgaW4uXHJcbiAgICovXHJcbiAgcHVibGljIGNsaW5pY2FsVHJpYWw6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHByb2R1Y3QncyBuYW1lLCBpbmNsdWRpbmcgZnVsbCBuYW1lIGFuZCBwb3NzaWJseSBjb2RlZCBwYXJ0cy5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZTogZmhpci5NZWRpY2luYWxQcm9kdWN0TmFtZVtdO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZSB0byBhbm90aGVyIHByb2R1Y3QsIGUuZy4gZm9yIGxpbmtpbmcgYXV0aG9yaXNlZCB0byBpbnZlc3RpZ2F0aW9uYWwgcHJvZHVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgY3Jvc3NSZWZlcmVuY2U6IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wZXJhdGlvbiBhcHBsaWVkIHRvIHRoZSBwcm9kdWN0LCBmb3IgbWFudWZhY3R1cmluZyBvciBhZG1pbnNpdHJhdGl2ZSBwdXJwb3NlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb246IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBpZiB0aGUgbWVkaWNpbmFsIHByb2R1Y3QgaGFzIGFuIG9ycGhhbiBkZXNpZ25hdGlvbiBmb3IgdGhlIHRyZWF0bWVudCBvZiBhIHJhcmUgZGlzZWFzZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3BlY2lhbERlc2lnbmF0aW9uOiBmaGlyLk1lZGljaW5hbFByb2R1Y3RTcGVjaWFsRGVzaWduYXRpb25bXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2luYWxQcm9kdWN0IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNpbmFsUHJvZHVjdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdNZWRpY2luYWxQcm9kdWN0JztcclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydkb21haW4nXSkgeyB0aGlzLmRvbWFpbiA9IG5ldyBmaGlyLkNvZGluZyhzb3VyY2UuZG9tYWluLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tYmluZWRQaGFybWFjZXV0aWNhbERvc2VGb3JtJ10pIHsgdGhpcy5jb21iaW5lZFBoYXJtYWNldXRpY2FsRG9zZUZvcm0gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmNvbWJpbmVkUGhhcm1hY2V1dGljYWxEb3NlRm9ybSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2xlZ2FsU3RhdHVzT2ZTdXBwbHknXSkgeyB0aGlzLmxlZ2FsU3RhdHVzT2ZTdXBwbHkgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmxlZ2FsU3RhdHVzT2ZTdXBwbHksIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydhZGRpdGlvbmFsTW9uaXRvcmluZ0luZGljYXRvciddKSB7IHRoaXMuYWRkaXRpb25hbE1vbml0b3JpbmdJbmRpY2F0b3IgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmFkZGl0aW9uYWxNb25pdG9yaW5nSW5kaWNhdG9yLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3BlY2lhbE1lYXN1cmVzJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLnNwZWNpYWxNZWFzdXJlcyA9IHNvdXJjZS5zcGVjaWFsTWVhc3VyZXMubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogeH0sIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3BlY2lhbE1lYXN1cmVzID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19zcGVjaWFsTWVhc3VyZXMnXSkge1xyXG4gICAgICBzb3VyY2UuX3NwZWNpYWxNZWFzdXJlcy5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zcGVjaWFsTWVhc3VyZXMubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5zcGVjaWFsTWVhc3VyZXNbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5zcGVjaWFsTWVhc3VyZXMucHVzaChuZXcgZmhpci5GaGlyU3RyaW5nKHggYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwYWVkaWF0cmljVXNlSW5kaWNhdG9yJ10pIHsgdGhpcy5wYWVkaWF0cmljVXNlSW5kaWNhdG9yID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5wYWVkaWF0cmljVXNlSW5kaWNhdG9yLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvZHVjdENsYXNzaWZpY2F0aW9uJ10pIHsgdGhpcy5wcm9kdWN0Q2xhc3NpZmljYXRpb24gPSBzb3VyY2UucHJvZHVjdENsYXNzaWZpY2F0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucHJvZHVjdENsYXNzaWZpY2F0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ21hcmtldGluZ1N0YXR1cyddKSB7IHRoaXMubWFya2V0aW5nU3RhdHVzID0gc291cmNlLm1hcmtldGluZ1N0YXR1cy5tYXAoKHgpID0+IG5ldyBmaGlyLk1hcmtldGluZ1N0YXR1cyh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm1hcmtldGluZ1N0YXR1cyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwaGFybWFjZXV0aWNhbFByb2R1Y3QnXSkgeyB0aGlzLnBoYXJtYWNldXRpY2FsUHJvZHVjdCA9IHNvdXJjZS5waGFybWFjZXV0aWNhbFByb2R1Y3QubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5waGFybWFjZXV0aWNhbFByb2R1Y3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGFja2FnZWRNZWRpY2luYWxQcm9kdWN0J10pIHsgdGhpcy5wYWNrYWdlZE1lZGljaW5hbFByb2R1Y3QgPSBzb3VyY2UucGFja2FnZWRNZWRpY2luYWxQcm9kdWN0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGFja2FnZWRNZWRpY2luYWxQcm9kdWN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2F0dGFjaGVkRG9jdW1lbnQnXSkgeyB0aGlzLmF0dGFjaGVkRG9jdW1lbnQgPSBzb3VyY2UuYXR0YWNoZWREb2N1bWVudC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmF0dGFjaGVkRG9jdW1lbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFzdGVyRmlsZSddKSB7IHRoaXMubWFzdGVyRmlsZSA9IHNvdXJjZS5tYXN0ZXJGaWxlLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubWFzdGVyRmlsZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjb250YWN0J10pIHsgdGhpcy5jb250YWN0ID0gc291cmNlLmNvbnRhY3QubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250YWN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NsaW5pY2FsVHJpYWwnXSkgeyB0aGlzLmNsaW5pY2FsVHJpYWwgPSBzb3VyY2UuY2xpbmljYWxUcmlhbC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNsaW5pY2FsVHJpYWwgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lLm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE5hbWUoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5uYW1lID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2Nyb3NzUmVmZXJlbmNlJ10pIHsgdGhpcy5jcm9zc1JlZmVyZW5jZSA9IHNvdXJjZS5jcm9zc1JlZmVyZW5jZS5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jcm9zc1JlZmVyZW5jZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24nXSkgeyB0aGlzLm1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbiA9IHNvdXJjZS5tYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2luYWxQcm9kdWN0TWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3NwZWNpYWxEZXNpZ25hdGlvbiddKSB7IHRoaXMuc3BlY2lhbERlc2lnbmF0aW9uID0gc291cmNlLnNwZWNpYWxEZXNpZ25hdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljaW5hbFByb2R1Y3RTcGVjaWFsRGVzaWduYXRpb24oeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zcGVjaWFsRGVzaWduYXRpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ01lZGljaW5hbFByb2R1Y3QnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdpZGVudGlmaWVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd0eXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkb21haW4nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2NvbWJpbmVkUGhhcm1hY2V1dGljYWxEb3NlRm9ybScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbGVnYWxTdGF0dXNPZlN1cHBseScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnYWRkaXRpb25hbE1vbml0b3JpbmdJbmRpY2F0b3InLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3NwZWNpYWxNZWFzdXJlcycsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygncGFlZGlhdHJpY1VzZUluZGljYXRvcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncHJvZHVjdENsYXNzaWZpY2F0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdtYXJrZXRpbmdTdGF0dXMnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3BoYXJtYWNldXRpY2FsUHJvZHVjdCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncGFja2FnZWRNZWRpY2luYWxQcm9kdWN0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdhdHRhY2hlZERvY3VtZW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdtYXN0ZXJGaWxlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdjb250YWN0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdjbGluaWNhbFRyaWFsJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJBKCduYW1lJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdjcm9zc1JlZmVyZW5jZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdzcGVjaWFsRGVzaWduYXRpb24nLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuIl19