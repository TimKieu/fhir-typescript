// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProduct
import * as fhir from '../fhir.js';
/**
 * Coding words or phrases of the name.
 */
export class MedicinalProductNameNamePart extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameNamePart - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['part']) {
            this.part = new fhir.FhirString({ value: source.part });
        }
        else {
            this.part = null;
        }
        if (source['_part']) {
            if (this.part) {
                this.part.addExtendedProperties(source._part);
            }
            else {
                this.part = new fhir.FhirString(source._part);
            }
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.name.namePart';
        }
        if (!this['part']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property part fhir: MedicinalProduct.name.namePart.part:string', expression: [expression] });
        }
        if (this["part"]) {
            issues.push(...this.part.doModelValidation(expression + '.part'));
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: MedicinalProduct.name.namePart.type:Coding', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductNameNamePart._fts_dataType = 'MedicinalProductNameNamePart';
/**
 * Country where the name applies.
 */
export class MedicinalProductNameCountryLanguage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductNameCountryLanguage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country);
        }
        else {
            this.country = null;
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction);
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.name.countryLanguage';
        }
        if (!this['country']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property country fhir: MedicinalProduct.name.countryLanguage.country:CodeableConcept', expression: [expression] });
        }
        if (this["country"]) {
            issues.push(...this.country.doModelValidation(expression + '.country'));
        }
        if (this["jurisdiction"]) {
            issues.push(...this.jurisdiction.doModelValidation(expression + '.jurisdiction'));
        }
        if (!this['language']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property language fhir: MedicinalProduct.name.countryLanguage.language:CodeableConcept', expression: [expression] });
        }
        if (this["language"]) {
            issues.push(...this.language.doModelValidation(expression + '.language'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductNameCountryLanguage._fts_dataType = 'MedicinalProductNameCountryLanguage';
/**
 * The product's name, including full name and possibly coded parts.
 */
export class MedicinalProductName extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productName']) {
            this.productName = new fhir.FhirString({ value: source.productName });
        }
        else {
            this.productName = null;
        }
        if (source['_productName']) {
            if (this.productName) {
                this.productName.addExtendedProperties(source._productName);
            }
            else {
                this.productName = new fhir.FhirString(source._productName);
            }
        }
        if (source['namePart']) {
            this.namePart = source.namePart.map((x) => new fhir.MedicinalProductNameNamePart(x));
        }
        else {
            this.namePart = [];
        }
        if (source['countryLanguage']) {
            this.countryLanguage = source.countryLanguage.map((x) => new fhir.MedicinalProductNameCountryLanguage(x));
        }
        else {
            this.countryLanguage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.name';
        }
        if (!this['productName']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productName fhir: MedicinalProduct.name.productName:string', expression: [expression] });
        }
        if (this["productName"]) {
            issues.push(...this.productName.doModelValidation(expression + '.productName'));
        }
        if (this["namePart"]) {
            this.namePart.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.namePart[${i}]`)); });
        }
        if (this["countryLanguage"]) {
            this.countryLanguage.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.countryLanguage[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductName._fts_dataType = 'MedicinalProductName';
/**
 * An operation applied to the product, for manufacturing or adminsitrative purpose.
 */
export class MedicinalProductManufacturingBusinessOperation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductManufacturingBusinessOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operationType']) {
            this.operationType = new fhir.CodeableConcept(source.operationType);
        }
        if (source['authorisationReferenceNumber']) {
            this.authorisationReferenceNumber = new fhir.Identifier(source.authorisationReferenceNumber);
        }
        if (source['effectiveDate']) {
            this.effectiveDate = new fhir.FhirDateTime({ value: source.effectiveDate });
        }
        if (source['_effectiveDate']) {
            if (this.effectiveDate) {
                this.effectiveDate.addExtendedProperties(source._effectiveDate);
            }
            else {
                this.effectiveDate = new fhir.FhirDateTime(source._effectiveDate);
            }
        }
        if (source['confidentialityIndicator']) {
            this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator);
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['regulator']) {
            this.regulator = new fhir.Reference(source.regulator);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.manufacturingBusinessOperation';
        }
        if (this["operationType"]) {
            issues.push(...this.operationType.doModelValidation(expression + '.operationType'));
        }
        if (this["authorisationReferenceNumber"]) {
            issues.push(...this.authorisationReferenceNumber.doModelValidation(expression + '.authorisationReferenceNumber'));
        }
        if (this["effectiveDate"]) {
            issues.push(...this.effectiveDate.doModelValidation(expression + '.effectiveDate'));
        }
        if (this["confidentialityIndicator"]) {
            issues.push(...this.confidentialityIndicator.doModelValidation(expression + '.confidentialityIndicator'));
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.manufacturer[${i}]`)); });
        }
        if (this["regulator"]) {
            issues.push(...this.regulator.doModelValidation(expression + '.regulator'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductManufacturingBusinessOperation._fts_dataType = 'MedicinalProductManufacturingBusinessOperation';
/**
 * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
 */
export class MedicinalProductSpecialDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductSpecialDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['intendedUse']) {
            this.intendedUse = new fhir.CodeableConcept(source.intendedUse);
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['species']) {
            this.species = new fhir.CodeableConcept(source.species);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct.specialDesignation';
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["intendedUse"]) {
            issues.push(...this.intendedUse.doModelValidation(expression + '.intendedUse'));
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["species"]) {
            issues.push(...this.species.doModelValidation(expression + '.species'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductSpecialDesignation._fts_dataType = 'MedicinalProductSpecialDesignation';
/**
 * Internal flag to properly serialize choice-type element MedicinalProduct.specialDesignation.indication[x]
 */
MedicinalProductSpecialDesignation._fts_indicationIsChoice = true;
/**
 * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
 */
export class MedicinalProduct extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['domain']) {
            this.domain = new fhir.Coding(source.domain);
        }
        if (source['combinedPharmaceuticalDoseForm']) {
            this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm);
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['additionalMonitoringIndicator']) {
            this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator);
        }
        if (source['specialMeasures']) {
            this.specialMeasures = source.specialMeasures.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.specialMeasures = [];
        }
        if (source['_specialMeasures']) {
            source._specialMeasures.forEach((x, i) => {
                if (this.specialMeasures.length >= i) {
                    if (x) {
                        this.specialMeasures[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.specialMeasures.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['paediatricUseIndicator']) {
            this.paediatricUseIndicator = new fhir.CodeableConcept(source.paediatricUseIndicator);
        }
        if (source['productClassification']) {
            this.productClassification = source.productClassification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.productClassification = [];
        }
        if (source['marketingStatus']) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x));
        }
        else {
            this.marketingStatus = [];
        }
        if (source['pharmaceuticalProduct']) {
            this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x) => new fhir.Reference(x));
        }
        else {
            this.pharmaceuticalProduct = [];
        }
        if (source['packagedMedicinalProduct']) {
            this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhir.Reference(x));
        }
        else {
            this.packagedMedicinalProduct = [];
        }
        if (source['attachedDocument']) {
            this.attachedDocument = source.attachedDocument.map((x) => new fhir.Reference(x));
        }
        else {
            this.attachedDocument = [];
        }
        if (source['masterFile']) {
            this.masterFile = source.masterFile.map((x) => new fhir.Reference(x));
        }
        else {
            this.masterFile = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.Reference(x));
        }
        else {
            this.contact = [];
        }
        if (source['clinicalTrial']) {
            this.clinicalTrial = source.clinicalTrial.map((x) => new fhir.Reference(x));
        }
        else {
            this.clinicalTrial = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.MedicinalProductName(x));
        }
        else {
            this.name = [];
        }
        if (source['crossReference']) {
            this.crossReference = source.crossReference.map((x) => new fhir.Identifier(x));
        }
        else {
            this.crossReference = [];
        }
        if (source['manufacturingBusinessOperation']) {
            this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x) => new fhir.MedicinalProductManufacturingBusinessOperation(x));
        }
        else {
            this.manufacturingBusinessOperation = [];
        }
        if (source['specialDesignation']) {
            this.specialDesignation = source.specialDesignation.map((x) => new fhir.MedicinalProductSpecialDesignation(x));
        }
        else {
            this.specialDesignation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProduct';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: MedicinalProduct.resourceType:"MedicinalProduct"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["domain"]) {
            issues.push(...this.domain.doModelValidation(expression + '.domain'));
        }
        if (this["combinedPharmaceuticalDoseForm"]) {
            issues.push(...this.combinedPharmaceuticalDoseForm.doModelValidation(expression + '.combinedPharmaceuticalDoseForm'));
        }
        if (this["legalStatusOfSupply"]) {
            issues.push(...this.legalStatusOfSupply.doModelValidation(expression + '.legalStatusOfSupply'));
        }
        if (this["additionalMonitoringIndicator"]) {
            issues.push(...this.additionalMonitoringIndicator.doModelValidation(expression + '.additionalMonitoringIndicator'));
        }
        if (this["specialMeasures"]) {
            this.specialMeasures.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.specialMeasures[${i}]`)); });
        }
        if (this["paediatricUseIndicator"]) {
            issues.push(...this.paediatricUseIndicator.doModelValidation(expression + '.paediatricUseIndicator'));
        }
        if (this["productClassification"]) {
            this.productClassification.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.productClassification[${i}]`)); });
        }
        if (this["marketingStatus"]) {
            this.marketingStatus.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.marketingStatus[${i}]`)); });
        }
        if (this["pharmaceuticalProduct"]) {
            this.pharmaceuticalProduct.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.pharmaceuticalProduct[${i}]`)); });
        }
        if (this["packagedMedicinalProduct"]) {
            this.packagedMedicinalProduct.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.packagedMedicinalProduct[${i}]`)); });
        }
        if (this["attachedDocument"]) {
            this.attachedDocument.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.attachedDocument[${i}]`)); });
        }
        if (this["masterFile"]) {
            this.masterFile.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.masterFile[${i}]`)); });
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["clinicalTrial"]) {
            this.clinicalTrial.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.clinicalTrial[${i}]`)); });
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: MedicinalProduct.name:name', expression: [expression] });
        }
        else if (!Array.isArray(this.name)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property name fhir: MedicinalProduct.name:name', expression: [expression] });
        }
        else if (this.name.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: MedicinalProduct.name:name', expression: [expression] });
        }
        if (this["name"]) {
            this.name.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.name[${i}]`)); });
        }
        if (this["crossReference"]) {
            this.crossReference.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.crossReference[${i}]`)); });
        }
        if (this["manufacturingBusinessOperation"]) {
            this.manufacturingBusinessOperation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.manufacturingBusinessOperation[${i}]`)); });
        }
        if (this["specialDesignation"]) {
            this.specialDesignation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.specialDesignation[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProduct._fts_dataType = 'MedicinalProduct';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNpbmFsUHJvZHVjdC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvTWVkaWNpbmFsUHJvZHVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFFbEMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFvQm5DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE2QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBYXBFOztPQUVHO0lBQ0gsWUFBWSxTQUFtRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN6RyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7U0FBRTthQUN6RTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbkIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLEtBQU0sQ0FBQyxDQUFDO2FBQUU7aUJBQzdEO2dCQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFxQyxDQUFDLENBQUM7YUFBRTtTQUN4RjtRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQUU7YUFDNUQ7WUFBRSxJQUFJ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LENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDcEgsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDbEosSUFBSSxJQUFJLENBQUMsZ0NBQWdDLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBQyxtQ0FBbUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUNsTSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQzlKLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBNUtEOztHQUVHO0FBQzZCLDhCQUFhLEdBQVUsa0JBQWtCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IE1lZGljaW5hbFByb2R1Y3RcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2luYWxQcm9kdWN0TmFtZU5hbWVQYXJ0QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQSBmcmFnbWVudCBvZiBhIHByb2R1Y3QgbmFtZS5cclxuICAgKi9cclxuICBwYXJ0OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNpbmFsUHJvZHVjdC5uYW1lLm5hbWVQYXJ0LnBhcnRcclxuICAgKi9cclxuICBfcGFydD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWRlbmlmeWluZyB0eXBlIGZvciB0aGlzIHBhcnQgb2YgdGhlIG5hbWUgKGUuZy4gc3RyZW5ndGggcGFydCkuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5Db2RpbmdBcmdzfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2Rpbmcgd29yZHMgb3IgcGhyYXNlcyBvZiB0aGUgbmFtZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2luYWxQcm9kdWN0TmFtZU5hbWVQYXJ0IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydCc7XHJcbiAgLyoqXHJcbiAgICogQSBmcmFnbWVudCBvZiBhIHByb2R1Y3QgbmFtZS5cclxuICAgKi9cclxuICBwdWJsaWMgcGFydDogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogSWRlbmlmeWluZyB0eXBlIGZvciB0aGlzIHBhcnQgb2YgdGhlIG5hbWUgKGUuZy4gc3RyZW5ndGggcGFydCkuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuQ29kaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljaW5hbFByb2R1Y3ROYW1lTmFtZVBhcnRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncGFydCddKSB7IHRoaXMucGFydCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGFydH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wYXJ0ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3BhcnQnXSkge1xyXG4gICAgICBpZiAodGhpcy5wYXJ0KSB7IHRoaXMucGFydC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9wYXJ0ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucGFydCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9wYXJ0IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS50eXBlKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnTWVkaWNpbmFsUHJvZHVjdC5uYW1lLm5hbWVQYXJ0JyB9XHJcbiAgICBpZiAoIXRoaXNbJ3BhcnQnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcGFydCBmaGlyOiBNZWRpY2luYWxQcm9kdWN0Lm5hbWUubmFtZVBhcnQucGFydDpzdHJpbmcnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInBhcnRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wYXJ0LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5wYXJ0JykpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ3R5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdHlwZSBmaGlyOiBNZWRpY2luYWxQcm9kdWN0Lm5hbWUubmFtZVBhcnQudHlwZTpDb2RpbmcnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy50eXBlJykpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNpbmFsUHJvZHVjdE5hbWVDb3VudHJ5TGFuZ3VhZ2UgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNpbmFsUHJvZHVjdE5hbWVDb3VudHJ5TGFuZ3VhZ2VBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBDb3VudHJ5IGNvZGUgZm9yIHdoZXJlIHRoaXMgbmFtZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGNvdW50cnk6IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEp1cmlzZGljdGlvbiBjb2RlIGZvciB3aGVyZSB0aGlzIG5hbWUgYXBwbGllcy5cclxuICAgKi9cclxuICBqdXJpc2RpY3Rpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIExhbmd1YWdlIGNvZGUgZm9yIHRoaXMgbmFtZS5cclxuICAgKi9cclxuICBsYW5ndWFnZTogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3VudHJ5IHdoZXJlIHRoZSBuYW1lIGFwcGxpZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNpbmFsUHJvZHVjdE5hbWVDb3VudHJ5TGFuZ3VhZ2UgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdNZWRpY2luYWxQcm9kdWN0TmFtZUNvdW50cnlMYW5ndWFnZSc7XHJcbiAgLyoqXHJcbiAgICogQ291bnRyeSBjb2RlIGZvciB3aGVyZSB0aGlzIG5hbWUgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgY291bnRyeTogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBKdXJpc2RpY3Rpb24gY29kZSBmb3Igd2hlcmUgdGhpcyBuYW1lIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBMYW5ndWFnZSBjb2RlIGZvciB0aGlzIG5hbWUuXHJcbiAgICovXHJcbiAgcHVibGljIGxhbmd1YWdlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljaW5hbFByb2R1Y3ROYW1lQ291bnRyeUxhbmd1YWdlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNpbmFsUHJvZHVjdE5hbWVDb3VudHJ5TGFuZ3VhZ2VBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnY291bnRyeSddKSB7IHRoaXMuY291bnRyeSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY291bnRyeSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvdW50cnkgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydqdXJpc2RpY3Rpb24nXSkgeyB0aGlzLmp1cmlzZGljdGlvbiA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuanVyaXNkaWN0aW9uKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbGFuZ3VhZ2UnXSkgeyB0aGlzLmxhbmd1YWdlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5sYW5ndWFnZSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxhbmd1YWdlID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdNZWRpY2luYWxQcm9kdWN0Lm5hbWUuY291bnRyeUxhbmd1YWdlJyB9XHJcbiAgICBpZiAoIXRoaXNbJ2NvdW50cnknXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgY291bnRyeSBmaGlyOiBNZWRpY2luYWxQcm9kdWN0Lm5hbWUuY291bnRyeUxhbmd1YWdlLmNvdW50cnk6Q29kZWFibGVDb25jZXB0JywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJjb3VudHJ5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY291bnRyeS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuY291bnRyeScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJqdXJpc2RpY3Rpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5qdXJpc2RpY3Rpb24uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmp1cmlzZGljdGlvbicpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydsYW5ndWFnZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBsYW5ndWFnZSBmaGlyOiBNZWRpY2luYWxQcm9kdWN0Lm5hbWUuY291bnRyeUxhbmd1YWdlLmxhbmd1YWdlOkNvZGVhYmxlQ29uY2VwdCcsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wibGFuZ3VhZ2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5sYW5ndWFnZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycubGFuZ3VhZ2UnKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2luYWxQcm9kdWN0TmFtZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2luYWxQcm9kdWN0TmFtZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmdWxsIHByb2R1Y3QgbmFtZS5cclxuICAgKi9cclxuICBwcm9kdWN0TmFtZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljaW5hbFByb2R1Y3QubmFtZS5wcm9kdWN0TmFtZVxyXG4gICAqL1xyXG4gIF9wcm9kdWN0TmFtZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29kaW5nIHdvcmRzIG9yIHBocmFzZXMgb2YgdGhlIG5hbWUuXHJcbiAgICovXHJcbiAgbmFtZVBhcnQ/OiBmaGlyLk1lZGljaW5hbFByb2R1Y3ROYW1lTmFtZVBhcnRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvdW50cnkgd2hlcmUgdGhlIG5hbWUgYXBwbGllcy5cclxuICAgKi9cclxuICBjb3VudHJ5TGFuZ3VhZ2U/OiBmaGlyLk1lZGljaW5hbFByb2R1Y3ROYW1lQ291bnRyeUxhbmd1YWdlQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBwcm9kdWN0J3MgbmFtZSwgaW5jbHVkaW5nIGZ1bGwgbmFtZSBhbmQgcG9zc2libHkgY29kZWQgcGFydHMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNpbmFsUHJvZHVjdE5hbWUgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdNZWRpY2luYWxQcm9kdWN0TmFtZSc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZ1bGwgcHJvZHVjdCBuYW1lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9kdWN0TmFtZTogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQ29kaW5nIHdvcmRzIG9yIHBocmFzZXMgb2YgdGhlIG5hbWUuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWVQYXJ0OiBmaGlyLk1lZGljaW5hbFByb2R1Y3ROYW1lTmFtZVBhcnRbXTtcclxuICAvKipcclxuICAgKiBDb3VudHJ5IHdoZXJlIHRoZSBuYW1lIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGNvdW50cnlMYW5ndWFnZTogZmhpci5NZWRpY2luYWxQcm9kdWN0TmFtZUNvdW50cnlMYW5ndWFnZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljaW5hbFByb2R1Y3ROYW1lIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNpbmFsUHJvZHVjdE5hbWVBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncHJvZHVjdE5hbWUnXSkgeyB0aGlzLnByb2R1Y3ROYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5wcm9kdWN0TmFtZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm9kdWN0TmFtZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wcm9kdWN0TmFtZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnByb2R1Y3ROYW1lKSB7IHRoaXMucHJvZHVjdE5hbWUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcHJvZHVjdE5hbWUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wcm9kdWN0TmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9wcm9kdWN0TmFtZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZVBhcnQnXSkgeyB0aGlzLm5hbWVQYXJ0ID0gc291cmNlLm5hbWVQYXJ0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE5hbWVOYW1lUGFydCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm5hbWVQYXJ0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvdW50cnlMYW5ndWFnZSddKSB7IHRoaXMuY291bnRyeUxhbmd1YWdlID0gc291cmNlLmNvdW50cnlMYW5ndWFnZS5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljaW5hbFByb2R1Y3ROYW1lQ291bnRyeUxhbmd1YWdlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY291bnRyeUxhbmd1YWdlID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnTWVkaWNpbmFsUHJvZHVjdC5uYW1lJyB9XHJcbiAgICBpZiAoIXRoaXNbJ3Byb2R1Y3ROYW1lJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHByb2R1Y3ROYW1lIGZoaXI6IE1lZGljaW5hbFByb2R1Y3QubmFtZS5wcm9kdWN0TmFtZTpzdHJpbmcnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInByb2R1Y3ROYW1lXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucHJvZHVjdE5hbWUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnByb2R1Y3ROYW1lJykpOyB9XHJcbiAgICBpZiAodGhpc1tcIm5hbWVQYXJ0XCJdKSB7IHRoaXMubmFtZVBhcnQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLm5hbWVQYXJ0WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImNvdW50cnlMYW5ndWFnZVwiXSkgeyB0aGlzLmNvdW50cnlMYW5ndWFnZS5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuY291bnRyeUxhbmd1YWdlWyR7aX1dYCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2luYWxQcm9kdWN0TWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgbWFudWZhY3R1cmluZyBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgb3BlcmF0aW9uVHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVndWxhdG9yeSBhdXRob3JpemF0aW9uIHJlZmVyZW5jZSBudW1iZXIuXHJcbiAgICovXHJcbiAgYXV0aG9yaXNhdGlvblJlZmVyZW5jZU51bWJlcj86IGZoaXIuSWRlbnRpZmllckFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZ3VsYXRvcnkgYXV0aG9yaXphdGlvbiBkYXRlLlxyXG4gICAqL1xyXG4gIGVmZmVjdGl2ZURhdGU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZWRpY2luYWxQcm9kdWN0Lm1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbi5lZmZlY3RpdmVEYXRlXHJcbiAgICovXHJcbiAgX2VmZmVjdGl2ZURhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRvIGluZGljYXRlIGlmIHRoaXMgcHJvY2VzIGlzIGNvbW1lcmNpYWxseSBjb25maWRlbnRpYWwuXHJcbiAgICovXHJcbiAgY29uZmlkZW50aWFsaXR5SW5kaWNhdG9yPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbWFudWZhY3R1cmVyIG9yIGVzdGFibGlzaG1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm9jZXNzLlxyXG4gICAqL1xyXG4gIG1hbnVmYWN0dXJlcj86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHJlZ3VsYXRvciB3aGljaCBvdmVyc2VlcyB0aGUgb3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIHJlZ3VsYXRvcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBvcGVyYXRpb24gYXBwbGllZCB0byB0aGUgcHJvZHVjdCwgZm9yIG1hbnVmYWN0dXJpbmcgb3IgYWRtaW5zaXRyYXRpdmUgcHVycG9zZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2luYWxQcm9kdWN0TWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbic7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgbWFudWZhY3R1cmluZyBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIG9wZXJhdGlvblR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVndWxhdG9yeSBhdXRob3JpemF0aW9uIHJlZmVyZW5jZSBudW1iZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGF1dGhvcmlzYXRpb25SZWZlcmVuY2VOdW1iZXI/OiBmaGlyLklkZW50aWZpZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZ3VsYXRvcnkgYXV0aG9yaXphdGlvbiBkYXRlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlZmZlY3RpdmVEYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRvIGluZGljYXRlIGlmIHRoaXMgcHJvY2VzIGlzIGNvbW1lcmNpYWxseSBjb25maWRlbnRpYWwuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbmZpZGVudGlhbGl0eUluZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbWFudWZhY3R1cmVyIG9yIGVzdGFibGlzaG1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm9jZXNzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYW51ZmFjdHVyZXI6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogQSByZWd1bGF0b3Igd2hpY2ggb3ZlcnNlZXMgdGhlIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVndWxhdG9yPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljaW5hbFByb2R1Y3RNYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2luYWxQcm9kdWN0TWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ29wZXJhdGlvblR5cGUnXSkgeyB0aGlzLm9wZXJhdGlvblR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLm9wZXJhdGlvblR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydhdXRob3Jpc2F0aW9uUmVmZXJlbmNlTnVtYmVyJ10pIHsgdGhpcy5hdXRob3Jpc2F0aW9uUmVmZXJlbmNlTnVtYmVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UuYXV0aG9yaXNhdGlvblJlZmVyZW5jZU51bWJlcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2VmZmVjdGl2ZURhdGUnXSkgeyB0aGlzLmVmZmVjdGl2ZURhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuZWZmZWN0aXZlRGF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZWZmZWN0aXZlRGF0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmVmZmVjdGl2ZURhdGUpIHsgdGhpcy5lZmZlY3RpdmVEYXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2VmZmVjdGl2ZURhdGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5lZmZlY3RpdmVEYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fZWZmZWN0aXZlRGF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb25maWRlbnRpYWxpdHlJbmRpY2F0b3InXSkgeyB0aGlzLmNvbmZpZGVudGlhbGl0eUluZGljYXRvciA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY29uZmlkZW50aWFsaXR5SW5kaWNhdG9yKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFudWZhY3R1cmVyJ10pIHsgdGhpcy5tYW51ZmFjdHVyZXIgPSBzb3VyY2UubWFudWZhY3R1cmVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubWFudWZhY3R1cmVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlZ3VsYXRvciddKSB7IHRoaXMucmVndWxhdG9yID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZWd1bGF0b3IpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ01lZGljaW5hbFByb2R1Y3QubWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uJyB9XHJcbiAgICBpZiAodGhpc1tcIm9wZXJhdGlvblR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5vcGVyYXRpb25UeXBlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5vcGVyYXRpb25UeXBlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImF1dGhvcmlzYXRpb25SZWZlcmVuY2VOdW1iZXJcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5hdXRob3Jpc2F0aW9uUmVmZXJlbmNlTnVtYmVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5hdXRob3Jpc2F0aW9uUmVmZXJlbmNlTnVtYmVyJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImVmZmVjdGl2ZURhdGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5lZmZlY3RpdmVEYXRlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5lZmZlY3RpdmVEYXRlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvbmZpZGVudGlhbGl0eUluZGljYXRvclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvbmZpZGVudGlhbGl0eUluZGljYXRvci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuY29uZmlkZW50aWFsaXR5SW5kaWNhdG9yJykpOyB9XHJcbiAgICBpZiAodGhpc1tcIm1hbnVmYWN0dXJlclwiXSkgeyB0aGlzLm1hbnVmYWN0dXJlci5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AubWFudWZhY3R1cmVyWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInJlZ3VsYXRvclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnJlZ3VsYXRvci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycucmVndWxhdG9yJykpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNpbmFsUHJvZHVjdFNwZWNpYWxEZXNpZ25hdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2luYWxQcm9kdWN0U3BlY2lhbERlc2lnbmF0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllciBmb3IgdGhlIGRlc2lnbmF0aW9uLCBvciBwcm9jZWR1cmUgbnVtYmVyLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHNwZWNpYWwgZGVzaWduYXRpb24sIGUuZy4gb3JwaGFuIGRydWcsIG1pbm9yIHVzZS5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgaW50ZW5kZWQgdXNlIG9mIHRoZSBwcm9kdWN0LCBlLmcuIHByZXZlbnRpb24sIHRyZWF0bWVudC5cclxuICAgKi9cclxuICBpbnRlbmRlZFVzZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29uZGl0aW9uIGZvciB3aGljaCB0aGUgbWVkaWNpbmFsIHVzZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGluZGljYXRpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29uZGl0aW9uIGZvciB3aGljaCB0aGUgbWVkaWNpbmFsIHVzZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGluZGljYXRpb25Db2RlYWJsZUNvbmNlcHQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbmRpdGlvbiBmb3Igd2hpY2ggdGhlIG1lZGljaW5hbCB1c2UgYXBwbGllcy5cclxuICAgKi9cclxuICBpbmRpY2F0aW9uUmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZSBncmFudGVkLCBwZW5kaW5nLCBleHBpcmVkIG9yIHdpdGhkcmF3bi5cclxuICAgKi9cclxuICBzdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgd2hlbiB0aGUgZGVzaWduYXRpb24gd2FzIGdyYW50ZWQuXHJcbiAgICovXHJcbiAgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljaW5hbFByb2R1Y3Quc3BlY2lhbERlc2lnbmF0aW9uLmRhdGVcclxuICAgKi9cclxuICBfZGF0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQW5pbWFsIHNwZWNpZXMgZm9yIHdoaWNoIHRoaXMgYXBwbGllcy5cclxuICAgKi9cclxuICBzcGVjaWVzPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyBpZiB0aGUgbWVkaWNpbmFsIHByb2R1Y3QgaGFzIGFuIG9ycGhhbiBkZXNpZ25hdGlvbiBmb3IgdGhlIHRyZWF0bWVudCBvZiBhIHJhcmUgZGlzZWFzZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2luYWxQcm9kdWN0U3BlY2lhbERlc2lnbmF0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNpbmFsUHJvZHVjdFNwZWNpYWxEZXNpZ25hdGlvbic7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllciBmb3IgdGhlIGRlc2lnbmF0aW9uLCBvciBwcm9jZWR1cmUgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyOiBmaGlyLklkZW50aWZpZXJbXTtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBzcGVjaWFsIGRlc2lnbmF0aW9uLCBlLmcuIG9ycGhhbiBkcnVnLCBtaW5vciB1c2UuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGludGVuZGVkIHVzZSBvZiB0aGUgcHJvZHVjdCwgZS5nLiBwcmV2ZW50aW9uLCB0cmVhdG1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGludGVuZGVkVXNlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbmRpdGlvbiBmb3Igd2hpY2ggdGhlIG1lZGljaW5hbCB1c2UgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgaW5kaWNhdGlvbj86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZSl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgTWVkaWNpbmFsUHJvZHVjdC5zcGVjaWFsRGVzaWduYXRpb24uaW5kaWNhdGlvblt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c19pbmRpY2F0aW9uSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogRm9yIGV4YW1wbGUgZ3JhbnRlZCwgcGVuZGluZywgZXhwaXJlZCBvciB3aXRoZHJhd24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1cz86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEYXRlIHdoZW4gdGhlIGRlc2lnbmF0aW9uIHdhcyBncmFudGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuaW1hbCBzcGVjaWVzIGZvciB3aGljaCB0aGlzIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHNwZWNpZXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNpbmFsUHJvZHVjdFNwZWNpYWxEZXNpZ25hdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljaW5hbFByb2R1Y3RTcGVjaWFsRGVzaWduYXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IHNvdXJjZS5pZGVudGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuSWRlbnRpZmllcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2ludGVuZGVkVXNlJ10pIHsgdGhpcy5pbnRlbmRlZFVzZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuaW50ZW5kZWRVc2UpOyB9XHJcbiAgICBpZiAoc291cmNlWydpbmRpY2F0aW9uJ10pIHsgdGhpcy5pbmRpY2F0aW9uID0gc291cmNlLmluZGljYXRpb247IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnaW5kaWNhdGlvbkNvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuaW5kaWNhdGlvbiA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuaW5kaWNhdGlvbkNvZGVhYmxlQ29uY2VwdCk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnaW5kaWNhdGlvblJlZmVyZW5jZSddKSB7IHRoaXMuaW5kaWNhdGlvbiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuaW5kaWNhdGlvblJlZmVyZW5jZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXR1cyddKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zdGF0dXMpOyB9XHJcbiAgICBpZiAoc291cmNlWydkYXRlJ10pIHsgdGhpcy5kYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLmRhdGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5kYXRlKSB7IHRoaXMuZGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZShzb3VyY2UuX2RhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3BlY2llcyddKSB7IHRoaXMuc3BlY2llcyA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uuc3BlY2llcyk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnTWVkaWNpbmFsUHJvZHVjdC5zcGVjaWFsRGVzaWduYXRpb24nIH1cclxuICAgIGlmICh0aGlzW1wiaWRlbnRpZmllclwiXSkgeyB0aGlzLmlkZW50aWZpZXIuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmlkZW50aWZpZXJbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1widHlwZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnR5cGUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnR5cGUnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiaW50ZW5kZWRVc2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5pbnRlbmRlZFVzZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuaW50ZW5kZWRVc2UnKSk7IH1cclxuICAgIGlmICh0aGlzW1wic3RhdHVzXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3RhdHVzLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5zdGF0dXMnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGF0ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRhdGUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmRhdGUnKSk7IH1cclxuICAgIGlmICh0aGlzW1wic3BlY2llc1wiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnNwZWNpZXMuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnNwZWNpZXMnKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2luYWxQcm9kdWN0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljaW5hbFByb2R1Y3RBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJNZWRpY2luYWxQcm9kdWN0XCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEJ1c2luZXNzIGlkZW50aWZpZXIgZm9yIHRoaXMgcHJvZHVjdC4gQ291bGQgYmUgYW4gTVBJRC5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZWd1bGF0b3J5IHR5cGUsIGUuZy4gSW52ZXN0aWdhdGlvbmFsIG9yIEF1dGhvcml6ZWQuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyBtZWRpY2luZSBhcHBsaWVzIHRvIGh1bWFuIG9yIHZldGVyaW5hcnkgdXNlcy5cclxuICAgKi9cclxuICBkb21haW4/OiBmaGlyLkNvZGluZ0FyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkb3NlIGZvcm0gZm9yIGEgc2luZ2xlIHBhcnQgcHJvZHVjdCwgb3IgY29tYmluZWQgZm9ybSBvZiBhIG11bHRpcGxlIHBhcnQgcHJvZHVjdC5cclxuICAgKi9cclxuICBjb21iaW5lZFBoYXJtYWNldXRpY2FsRG9zZUZvcm0/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsZWdhbCBzdGF0dXMgb2Ygc3VwcGx5IG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdCBhcyBjbGFzc2lmaWVkIGJ5IHRoZSByZWd1bGF0b3IuXHJcbiAgICovXHJcbiAgbGVnYWxTdGF0dXNPZlN1cHBseT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgTWVkaWNpbmFsIFByb2R1Y3QgaXMgc3ViamVjdCB0byBhZGRpdGlvbmFsIG1vbml0b3JpbmcgZm9yIHJlZ3VsYXRvcnkgcmVhc29ucy5cclxuICAgKi9cclxuICBhZGRpdGlvbmFsTW9uaXRvcmluZ0luZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgTWVkaWNpbmFsIFByb2R1Y3QgaXMgc3ViamVjdCB0byBzcGVjaWFsIG1lYXN1cmVzIGZvciByZWd1bGF0b3J5IHJlYXNvbnMuXHJcbiAgICovXHJcbiAgc3BlY2lhbE1lYXN1cmVzPzogZmhpci5GaGlyU3RyaW5nW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNpbmFsUHJvZHVjdC5zcGVjaWFsTWVhc3VyZXNcclxuICAgKi9cclxuICBfc3BlY2lhbE1lYXN1cmVzPzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBJZiBhdXRob3Jpc2VkIGZvciB1c2UgaW4gY2hpbGRyZW4uXHJcbiAgICovXHJcbiAgcGFlZGlhdHJpY1VzZUluZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIHRoZSBwcm9kdWN0IHRvIGJlIGNsYXNzaWZpZWQgYnkgdmFyaW91cyBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIHByb2R1Y3RDbGFzc2lmaWNhdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXJrZXRpbmcgc3RhdHVzIG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdCwgaW4gY29udHJhc3QgdG8gbWFya2V0aW5nIGF1dGhvcml6YXRvbi5cclxuICAgKi9cclxuICBtYXJrZXRpbmdTdGF0dXM/OiBmaGlyLk1hcmtldGluZ1N0YXR1c0FyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUGhhcm1hY2V1dGljYWwgYXNwZWN0cyBvZiBwcm9kdWN0LlxyXG4gICAqL1xyXG4gIHBoYXJtYWNldXRpY2FsUHJvZHVjdD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYWNrYWdlIHJlcHJlc2VudGF0aW9uIGZvciB0aGUgcHJvZHVjdC5cclxuICAgKi9cclxuICBwYWNrYWdlZE1lZGljaW5hbFByb2R1Y3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBkb2N1bWVudGF0aW9uLCB0eXBpY2FsbHkgZm9yIHJlZ3VsYXRvcnkgc3VibWlzc2lvbi5cclxuICAgKi9cclxuICBhdHRhY2hlZERvY3VtZW50PzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbWFzdGVyIGZpbGUgZm9yIHRvIHRoZSBtZWRpY2luYWwgcHJvZHVjdCAoZS5nLiBQaGFybWFjb3ZpZ2lsYW5jZSBTeXN0ZW0gTWFzdGVyIEZpbGUpLlxyXG4gICAqL1xyXG4gIG1hc3RlckZpbGU/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBwcm9kdWN0IHNwZWNpZmljIGNvbnRhY3QsIHBlcnNvbiAoaW4gYSByb2xlKSwgb3IgYW4gb3JnYW5pemF0aW9uLlxyXG4gICAqL1xyXG4gIGNvbnRhY3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljYWwgdHJpYWxzIG9yIHN0dWRpZXMgdGhhdCB0aGlzIHByb2R1Y3QgaXMgaW52b2x2ZWQgaW4uXHJcbiAgICovXHJcbiAgY2xpbmljYWxUcmlhbD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJvZHVjdCdzIG5hbWUsIGluY2x1ZGluZyBmdWxsIG5hbWUgYW5kIHBvc3NpYmx5IGNvZGVkIHBhcnRzLlxyXG4gICAqL1xyXG4gIG5hbWU6IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE5hbWVBcmdzW118bnVsbDtcclxuICAvKipcclxuICAgKiBSZWZlcmVuY2UgdG8gYW5vdGhlciBwcm9kdWN0LCBlLmcuIGZvciBsaW5raW5nIGF1dGhvcmlzZWQgdG8gaW52ZXN0aWdhdGlvbmFsIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgY3Jvc3NSZWZlcmVuY2U/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wZXJhdGlvbiBhcHBsaWVkIHRvIHRoZSBwcm9kdWN0LCBmb3IgbWFudWZhY3R1cmluZyBvciBhZG1pbnNpdHJhdGl2ZSBwdXJwb3NlLlxyXG4gICAqL1xyXG4gIG1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbj86IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIGlmIHRoZSBtZWRpY2luYWwgcHJvZHVjdCBoYXMgYW4gb3JwaGFuIGRlc2lnbmF0aW9uIGZvciB0aGUgdHJlYXRtZW50IG9mIGEgcmFyZSBkaXNlYXNlLlxyXG4gICAqL1xyXG4gIHNwZWNpYWxEZXNpZ25hdGlvbj86IGZoaXIuTWVkaWNpbmFsUHJvZHVjdFNwZWNpYWxEZXNpZ25hdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXRhaWxlZCBkZWZpbml0aW9uIG9mIGEgbWVkaWNpbmFsIHByb2R1Y3QsIHR5cGljYWxseSBmb3IgdXNlcyBvdGhlciB0aGFuIGRpcmVjdCBwYXRpZW50IGNhcmUgKGUuZy4gcmVndWxhdG9yeSB1c2UpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljaW5hbFByb2R1Y3QgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3QnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiTWVkaWNpbmFsUHJvZHVjdFwiO1xyXG4gIC8qKlxyXG4gICAqIEJ1c2luZXNzIGlkZW50aWZpZXIgZm9yIHRoaXMgcHJvZHVjdC4gQ291bGQgYmUgYW4gTVBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogUmVndWxhdG9yeSB0eXBlLCBlLmcuIEludmVzdGlnYXRpb25hbCBvciBBdXRob3JpemVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoaXMgbWVkaWNpbmUgYXBwbGllcyB0byBodW1hbiBvciB2ZXRlcmluYXJ5IHVzZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRvbWFpbj86IGZoaXIuQ29kaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZG9zZSBmb3JtIGZvciBhIHNpbmdsZSBwYXJ0IHByb2R1Y3QsIG9yIGNvbWJpbmVkIGZvcm0gb2YgYSBtdWx0aXBsZSBwYXJ0IHByb2R1Y3QuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbWJpbmVkUGhhcm1hY2V1dGljYWxEb3NlRm9ybT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGVnYWwgc3RhdHVzIG9mIHN1cHBseSBvZiB0aGUgbWVkaWNpbmFsIHByb2R1Y3QgYXMgY2xhc3NpZmllZCBieSB0aGUgcmVndWxhdG9yLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsZWdhbFN0YXR1c09mU3VwcGx5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIE1lZGljaW5hbCBQcm9kdWN0IGlzIHN1YmplY3QgdG8gYWRkaXRpb25hbCBtb25pdG9yaW5nIGZvciByZWd1bGF0b3J5IHJlYXNvbnMuXHJcbiAgICovXHJcbiAgcHVibGljIGFkZGl0aW9uYWxNb25pdG9yaW5nSW5kaWNhdG9yPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIE1lZGljaW5hbCBQcm9kdWN0IGlzIHN1YmplY3QgdG8gc3BlY2lhbCBtZWFzdXJlcyBmb3IgcmVndWxhdG9yeSByZWFzb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzcGVjaWFsTWVhc3VyZXM6IGZoaXIuRmhpclN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIElmIGF1dGhvcmlzZWQgZm9yIHVzZSBpbiBjaGlsZHJlbi5cclxuICAgKi9cclxuICBwdWJsaWMgcGFlZGlhdHJpY1VzZUluZGljYXRvcj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgdGhlIHByb2R1Y3QgdG8gYmUgY2xhc3NpZmllZCBieSB2YXJpb3VzIHN5c3RlbXMuXHJcbiAgICovXHJcbiAgcHVibGljIHByb2R1Y3RDbGFzc2lmaWNhdGlvbjogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBNYXJrZXRpbmcgc3RhdHVzIG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdCwgaW4gY29udHJhc3QgdG8gbWFya2V0aW5nIGF1dGhvcml6YXRvbi5cclxuICAgKi9cclxuICBwdWJsaWMgbWFya2V0aW5nU3RhdHVzOiBmaGlyLk1hcmtldGluZ1N0YXR1c1tdO1xyXG4gIC8qKlxyXG4gICAqIFBoYXJtYWNldXRpY2FsIGFzcGVjdHMgb2YgcHJvZHVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgcGhhcm1hY2V1dGljYWxQcm9kdWN0OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIFBhY2thZ2UgcmVwcmVzZW50YXRpb24gZm9yIHRoZSBwcm9kdWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYWNrYWdlZE1lZGljaW5hbFByb2R1Y3Q6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBkb2N1bWVudGF0aW9uLCB0eXBpY2FsbHkgZm9yIHJlZ3VsYXRvcnkgc3VibWlzc2lvbi5cclxuICAgKi9cclxuICBwdWJsaWMgYXR0YWNoZWREb2N1bWVudDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBBIG1hc3RlciBmaWxlIGZvciB0byB0aGUgbWVkaWNpbmFsIHByb2R1Y3QgKGUuZy4gUGhhcm1hY292aWdpbGFuY2UgU3lzdGVtIE1hc3RlciBGaWxlKS5cclxuICAgKi9cclxuICBwdWJsaWMgbWFzdGVyRmlsZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBBIHByb2R1Y3Qgc3BlY2lmaWMgY29udGFjdCwgcGVyc29uIChpbiBhIHJvbGUpLCBvciBhbiBvcmdhbml6YXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhY3Q6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogQ2xpbmljYWwgdHJpYWxzIG9yIHN0dWRpZXMgdGhhdCB0aGlzIHByb2R1Y3QgaXMgaW52b2x2ZWQgaW4uXHJcbiAgICovXHJcbiAgcHVibGljIGNsaW5pY2FsVHJpYWw6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHByb2R1Y3QncyBuYW1lLCBpbmNsdWRpbmcgZnVsbCBuYW1lIGFuZCBwb3NzaWJseSBjb2RlZCBwYXJ0cy5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZTogZmhpci5NZWRpY2luYWxQcm9kdWN0TmFtZVtdO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZSB0byBhbm90aGVyIHByb2R1Y3QsIGUuZy4gZm9yIGxpbmtpbmcgYXV0aG9yaXNlZCB0byBpbnZlc3RpZ2F0aW9uYWwgcHJvZHVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgY3Jvc3NSZWZlcmVuY2U6IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wZXJhdGlvbiBhcHBsaWVkIHRvIHRoZSBwcm9kdWN0LCBmb3IgbWFudWZhY3R1cmluZyBvciBhZG1pbnNpdHJhdGl2ZSBwdXJwb3NlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb246IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBpZiB0aGUgbWVkaWNpbmFsIHByb2R1Y3QgaGFzIGFuIG9ycGhhbiBkZXNpZ25hdGlvbiBmb3IgdGhlIHRyZWF0bWVudCBvZiBhIHJhcmUgZGlzZWFzZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3BlY2lhbERlc2lnbmF0aW9uOiBmaGlyLk1lZGljaW5hbFByb2R1Y3RTcGVjaWFsRGVzaWduYXRpb25bXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2luYWxQcm9kdWN0IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNpbmFsUHJvZHVjdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdNZWRpY2luYWxQcm9kdWN0JztcclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydkb21haW4nXSkgeyB0aGlzLmRvbWFpbiA9IG5ldyBmaGlyLkNvZGluZyhzb3VyY2UuZG9tYWluKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tYmluZWRQaGFybWFjZXV0aWNhbERvc2VGb3JtJ10pIHsgdGhpcy5jb21iaW5lZFBoYXJtYWNldXRpY2FsRG9zZUZvcm0gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmNvbWJpbmVkUGhhcm1hY2V1dGljYWxEb3NlRm9ybSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2xlZ2FsU3RhdHVzT2ZTdXBwbHknXSkgeyB0aGlzLmxlZ2FsU3RhdHVzT2ZTdXBwbHkgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmxlZ2FsU3RhdHVzT2ZTdXBwbHkpOyB9XHJcbiAgICBpZiAoc291cmNlWydhZGRpdGlvbmFsTW9uaXRvcmluZ0luZGljYXRvciddKSB7IHRoaXMuYWRkaXRpb25hbE1vbml0b3JpbmdJbmRpY2F0b3IgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmFkZGl0aW9uYWxNb25pdG9yaW5nSW5kaWNhdG9yKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3BlY2lhbE1lYXN1cmVzJ10pIHsgdGhpcy5zcGVjaWFsTWVhc3VyZXMgPSBzb3VyY2Uuc3BlY2lhbE1lYXN1cmVzLm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNwZWNpYWxNZWFzdXJlcyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfc3BlY2lhbE1lYXN1cmVzJ10pIHtcclxuICAgICAgc291cmNlLl9zcGVjaWFsTWVhc3VyZXMuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3BlY2lhbE1lYXN1cmVzLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMuc3BlY2lhbE1lYXN1cmVzW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMuc3BlY2lhbE1lYXN1cmVzLnB1c2gobmV3IGZoaXIuRmhpclN0cmluZyh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncGFlZGlhdHJpY1VzZUluZGljYXRvciddKSB7IHRoaXMucGFlZGlhdHJpY1VzZUluZGljYXRvciA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucGFlZGlhdHJpY1VzZUluZGljYXRvcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3Byb2R1Y3RDbGFzc2lmaWNhdGlvbiddKSB7IHRoaXMucHJvZHVjdENsYXNzaWZpY2F0aW9uID0gc291cmNlLnByb2R1Y3RDbGFzc2lmaWNhdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnByb2R1Y3RDbGFzc2lmaWNhdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtYXJrZXRpbmdTdGF0dXMnXSkgeyB0aGlzLm1hcmtldGluZ1N0YXR1cyA9IHNvdXJjZS5tYXJrZXRpbmdTdGF0dXMubWFwKCh4KSA9PiBuZXcgZmhpci5NYXJrZXRpbmdTdGF0dXMoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5tYXJrZXRpbmdTdGF0dXMgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGhhcm1hY2V1dGljYWxQcm9kdWN0J10pIHsgdGhpcy5waGFybWFjZXV0aWNhbFByb2R1Y3QgPSBzb3VyY2UucGhhcm1hY2V1dGljYWxQcm9kdWN0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGhhcm1hY2V1dGljYWxQcm9kdWN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3BhY2thZ2VkTWVkaWNpbmFsUHJvZHVjdCddKSB7IHRoaXMucGFja2FnZWRNZWRpY2luYWxQcm9kdWN0ID0gc291cmNlLnBhY2thZ2VkTWVkaWNpbmFsUHJvZHVjdC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnBhY2thZ2VkTWVkaWNpbmFsUHJvZHVjdCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydhdHRhY2hlZERvY3VtZW50J10pIHsgdGhpcy5hdHRhY2hlZERvY3VtZW50ID0gc291cmNlLmF0dGFjaGVkRG9jdW1lbnQubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hdHRhY2hlZERvY3VtZW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ21hc3RlckZpbGUnXSkgeyB0aGlzLm1hc3RlckZpbGUgPSBzb3VyY2UubWFzdGVyRmlsZS5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm1hc3RlckZpbGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGFjdCddKSB7IHRoaXMuY29udGFjdCA9IHNvdXJjZS5jb250YWN0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY29udGFjdCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjbGluaWNhbFRyaWFsJ10pIHsgdGhpcy5jbGluaWNhbFRyaWFsID0gc291cmNlLmNsaW5pY2FsVHJpYWwubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jbGluaWNhbFRyaWFsID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBzb3VyY2UubmFtZS5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljaW5hbFByb2R1Y3ROYW1lKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubmFtZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjcm9zc1JlZmVyZW5jZSddKSB7IHRoaXMuY3Jvc3NSZWZlcmVuY2UgPSBzb3VyY2UuY3Jvc3NSZWZlcmVuY2UubWFwKCh4KSA9PiBuZXcgZmhpci5JZGVudGlmaWVyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY3Jvc3NSZWZlcmVuY2UgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uJ10pIHsgdGhpcy5tYW51ZmFjdHVyaW5nQnVzaW5lc3NPcGVyYXRpb24gPSBzb3VyY2UubWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzcGVjaWFsRGVzaWduYXRpb24nXSkgeyB0aGlzLnNwZWNpYWxEZXNpZ25hdGlvbiA9IHNvdXJjZS5zcGVjaWFsRGVzaWduYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2luYWxQcm9kdWN0U3BlY2lhbERlc2lnbmF0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3BlY2lhbERlc2lnbmF0aW9uID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnTWVkaWNpbmFsUHJvZHVjdCcgfVxyXG4gICAgaWYgKCF0aGlzWydyZXNvdXJjZVR5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcmVzb3VyY2VUeXBlIGZoaXI6IE1lZGljaW5hbFByb2R1Y3QucmVzb3VyY2VUeXBlOlwiTWVkaWNpbmFsUHJvZHVjdFwiJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJpZGVudGlmaWVyXCJdKSB7IHRoaXMuaWRlbnRpZmllci5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuaWRlbnRpZmllclske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycudHlwZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkb21haW5cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kb21haW4uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmRvbWFpbicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb21iaW5lZFBoYXJtYWNldXRpY2FsRG9zZUZvcm1cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jb21iaW5lZFBoYXJtYWNldXRpY2FsRG9zZUZvcm0uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmNvbWJpbmVkUGhhcm1hY2V1dGljYWxEb3NlRm9ybScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJsZWdhbFN0YXR1c09mU3VwcGx5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubGVnYWxTdGF0dXNPZlN1cHBseS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycubGVnYWxTdGF0dXNPZlN1cHBseScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJhZGRpdGlvbmFsTW9uaXRvcmluZ0luZGljYXRvclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmFkZGl0aW9uYWxNb25pdG9yaW5nSW5kaWNhdG9yLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5hZGRpdGlvbmFsTW9uaXRvcmluZ0luZGljYXRvcicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJzcGVjaWFsTWVhc3VyZXNcIl0pIHsgdGhpcy5zcGVjaWFsTWVhc3VyZXMuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnNwZWNpYWxNZWFzdXJlc1ske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJwYWVkaWF0cmljVXNlSW5kaWNhdG9yXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucGFlZGlhdHJpY1VzZUluZGljYXRvci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycucGFlZGlhdHJpY1VzZUluZGljYXRvcicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwcm9kdWN0Q2xhc3NpZmljYXRpb25cIl0pIHsgdGhpcy5wcm9kdWN0Q2xhc3NpZmljYXRpb24uZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnByb2R1Y3RDbGFzc2lmaWNhdGlvblske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJtYXJrZXRpbmdTdGF0dXNcIl0pIHsgdGhpcy5tYXJrZXRpbmdTdGF0dXMuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLm1hcmtldGluZ1N0YXR1c1ske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJwaGFybWFjZXV0aWNhbFByb2R1Y3RcIl0pIHsgdGhpcy5waGFybWFjZXV0aWNhbFByb2R1Y3QuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnBoYXJtYWNldXRpY2FsUHJvZHVjdFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJwYWNrYWdlZE1lZGljaW5hbFByb2R1Y3RcIl0pIHsgdGhpcy5wYWNrYWdlZE1lZGljaW5hbFByb2R1Y3QuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnBhY2thZ2VkTWVkaWNpbmFsUHJvZHVjdFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJhdHRhY2hlZERvY3VtZW50XCJdKSB7IHRoaXMuYXR0YWNoZWREb2N1bWVudC5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuYXR0YWNoZWREb2N1bWVudFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJtYXN0ZXJGaWxlXCJdKSB7IHRoaXMubWFzdGVyRmlsZS5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AubWFzdGVyRmlsZVske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJjb250YWN0XCJdKSB7IHRoaXMuY29udGFjdC5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuY29udGFjdFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJjbGluaWNhbFRyaWFsXCJdKSB7IHRoaXMuY2xpbmljYWxUcmlhbC5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuY2xpbmljYWxUcmlhbFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKCF0aGlzWyduYW1lJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IG5hbWUgZmhpcjogTWVkaWNpbmFsUHJvZHVjdC5uYW1lOm5hbWUnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMubmFtZSkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3N0cnVjdHVyZScsIGRpYWdub3N0aWNzOiAnRm91bmQgc2NhbGFyIGluIGFycmF5IHByb3BlcnR5IG5hbWUgZmhpcjogTWVkaWNpbmFsUHJvZHVjdC5uYW1lOm5hbWUnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubmFtZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IG5hbWUgZmhpcjogTWVkaWNpbmFsUHJvZHVjdC5uYW1lOm5hbWUnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcIm5hbWVcIl0pIHsgdGhpcy5uYW1lLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5uYW1lWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImNyb3NzUmVmZXJlbmNlXCJdKSB7IHRoaXMuY3Jvc3NSZWZlcmVuY2UuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmNyb3NzUmVmZXJlbmNlWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcIm1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvblwiXSkgeyB0aGlzLm1hbnVmYWN0dXJpbmdCdXNpbmVzc09wZXJhdGlvbi5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AubWFudWZhY3R1cmluZ0J1c2luZXNzT3BlcmF0aW9uWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInNwZWNpYWxEZXNpZ25hdGlvblwiXSkgeyB0aGlzLnNwZWNpYWxEZXNpZ25hdGlvbi5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2Auc3BlY2lhbERlc2lnbmF0aW9uWyR7aX1dYCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=