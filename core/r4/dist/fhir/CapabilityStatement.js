// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CapabilityStatement
import * as fhir from '../fhir.js';
// @ts-ignore
import { RestfulSecurityServiceCodings, } from '../fhirValueSets/RestfulSecurityServiceCodings.js';
// @ts-ignore
import { TypeRestfulInteractionCodings, } from '../fhirValueSets/TypeRestfulInteractionCodings.js';
// @ts-ignore
import { SearchParamTypeCodings, } from '../fhirValueSets/SearchParamTypeCodings.js';
// @ts-ignore
import { ResourceTypesCodings, } from '../fhirValueSets/ResourceTypesCodings.js';
// @ts-ignore
import { VersioningPolicyCodings, } from '../fhirValueSets/VersioningPolicyCodings.js';
// @ts-ignore
import { ConditionalReadStatusCodings, } from '../fhirValueSets/ConditionalReadStatusCodings.js';
// @ts-ignore
import { ConditionalDeleteStatusCodings, } from '../fhirValueSets/ConditionalDeleteStatusCodings.js';
// @ts-ignore
import { ReferenceHandlingPolicyCodings, } from '../fhirValueSets/ReferenceHandlingPolicyCodings.js';
// @ts-ignore
import { SystemRestfulInteractionCodings, } from '../fhirValueSets/SystemRestfulInteractionCodings.js';
// @ts-ignore
import { RestfulCapabilityModeCodings, } from '../fhirValueSets/RestfulCapabilityModeCodings.js';
// @ts-ignore
import { MessageTransportCodings, } from '../fhirValueSets/MessageTransportCodings.js';
// @ts-ignore
import { EventCapabilityModeCodings, } from '../fhirValueSets/EventCapabilityModeCodings.js';
// @ts-ignore
import { DocumentModeCodings, } from '../fhirValueSets/DocumentModeCodings.js';
// @ts-ignore
import { PublicationStatusCodings, } from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { CapabilityStatementKindCodings, } from '../fhirValueSets/CapabilityStatementKindCodings.js';
// @ts-ignore
import { FHIRVersionCodings, } from '../fhirValueSets/FHIRVersionCodings.js';
/**
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
export class CapabilityStatementSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['releaseDate']) {
            this.releaseDate = new fhir.FhirDateTime({ value: source.releaseDate });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: CapabilityStatement.software.name:string', });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["releaseDate"]) {
            issues.push(...this.releaseDate.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementSoftware._fts_dataType = 'CapabilityStatementSoftware';
/**
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class CapabilityStatementImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['description']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description:fhir.FhirString fhir: CapabilityStatement.implementation.description:string', });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["custodian"]) {
            issues.push(...this.custodian.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementImplementation._fts_dataType = 'CapabilityStatementImplementation';
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export class CapabilityStatementRestSecurity extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestSecurity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['cors']) {
            this.cors = new fhir.FhirBoolean({ value: source.cors });
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.service = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
    }
    /**
     * Extensible-bound Value Set for service (CapabilityStatement.rest.security.service)
     */
    static serviceExtensibleCoding() {
        return RestfulSecurityServiceCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["cors"]) {
            issues.push(...this.cors.doModelValidation());
        }
        if (this["service"]) {
            this.service.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestSecurity._fts_dataType = 'CapabilityStatementRestSecurity';
/**
 * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
 */
export class CapabilityStatementRestResourceInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
    }
    /**
     * Required-bound Value Set for code (CapabilityStatement.rest.resource.interaction.code)
     */
    static codeRequiredCoding() {
        return TypeRestfulInteractionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:TypeRestfulInteractionCodeType fhir: CapabilityStatement.rest.resource.interaction.code:code', });
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceInteraction._fts_dataType = 'CapabilityStatementRestResourceInteraction';
/**
 * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
 */
export class CapabilityStatementRestResourceSearchParam extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceSearchParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
    }
    /**
     * Required-bound Value Set for type (CapabilityStatement.rest.resource.searchParam.type)
     */
    static typeRequiredCoding() {
        return SearchParamTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: CapabilityStatement.rest.resource.searchParam.name:string', });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:SearchParamTypeCodeType fhir: CapabilityStatement.rest.resource.searchParam.type:code', });
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceSearchParam._fts_dataType = 'CapabilityStatementRestResourceSearchParam';
/**
 * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.
 * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
 */
export class CapabilityStatementRestResourceOperation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        else {
            this.definition = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: CapabilityStatement.rest.resource.operation.name:string', });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (!this['definition']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property definition:fhir.FhirCanonical fhir: CapabilityStatement.rest.resource.operation.definition:canonical', });
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation());
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceOperation._fts_dataType = 'CapabilityStatementRestResourceOperation';
/**
 * Max of one repetition per resource type.
 */
export class CapabilityStatementRestResource extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        if (source['supportedProfile']) {
            this.supportedProfile = source.supportedProfile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.supportedProfile = [];
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestResourceInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['versioning']) {
            this.versioning = source.versioning;
        }
        if (source['readHistory']) {
            this.readHistory = new fhir.FhirBoolean({ value: source.readHistory });
        }
        if (source['updateCreate']) {
            this.updateCreate = new fhir.FhirBoolean({ value: source.updateCreate });
        }
        if (source['conditionalCreate']) {
            this.conditionalCreate = new fhir.FhirBoolean({ value: source.conditionalCreate });
        }
        if (source['conditionalRead']) {
            this.conditionalRead = source.conditionalRead;
        }
        if (source['conditionalUpdate']) {
            this.conditionalUpdate = new fhir.FhirBoolean({ value: source.conditionalUpdate });
        }
        if (source['conditionalDelete']) {
            this.conditionalDelete = source.conditionalDelete;
        }
        if (source['referencePolicy']) {
            this.referencePolicy = source.referencePolicy.map((x) => x);
        }
        else {
            this.referencePolicy = [];
        }
        if (source['searchInclude']) {
            this.searchInclude = source.searchInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchInclude = [];
        }
        if (source['searchRevInclude']) {
            this.searchRevInclude = source.searchRevInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchRevInclude = [];
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.CapabilityStatementRestResourceOperation(x));
        }
        else {
            this.operation = [];
        }
    }
    /**
     * Required-bound Value Set for type (CapabilityStatement.rest.resource.type)
     */
    static typeRequiredCoding() {
        return ResourceTypesCodings;
    }
    /**
     * Required-bound Value Set for versioning (CapabilityStatement.rest.resource.versioning)
     */
    static versioningRequiredCoding() {
        return VersioningPolicyCodings;
    }
    /**
     * Required-bound Value Set for conditionalRead (CapabilityStatement.rest.resource.conditionalRead)
     */
    static conditionalReadRequiredCoding() {
        return ConditionalReadStatusCodings;
    }
    /**
     * Required-bound Value Set for conditionalDelete (CapabilityStatement.rest.resource.conditionalDelete)
     */
    static conditionalDeleteRequiredCoding() {
        return ConditionalDeleteStatusCodings;
    }
    /**
     * Required-bound Value Set for referencePolicy (CapabilityStatement.rest.resource.referencePolicy)
     */
    static referencePolicyRequiredCoding() {
        return ReferenceHandlingPolicyCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode fhir: CapabilityStatement.rest.resource.type:code', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation());
        }
        if (this["supportedProfile"]) {
            this.supportedProfile.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        if (this["interaction"]) {
            this.interaction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["readHistory"]) {
            issues.push(...this.readHistory.doModelValidation());
        }
        if (this["updateCreate"]) {
            issues.push(...this.updateCreate.doModelValidation());
        }
        if (this["conditionalCreate"]) {
            issues.push(...this.conditionalCreate.doModelValidation());
        }
        if (this["conditionalUpdate"]) {
            issues.push(...this.conditionalUpdate.doModelValidation());
        }
        if (this["searchInclude"]) {
            this.searchInclude.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["searchRevInclude"]) {
            this.searchRevInclude.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["searchParam"]) {
            this.searchParam.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["operation"]) {
            this.operation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResource._fts_dataType = 'CapabilityStatementRestResource';
/**
 * A specification of restful operations supported by the system.
 */
export class CapabilityStatementRestInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
    }
    /**
     * Required-bound Value Set for code (CapabilityStatement.rest.interaction.code)
     */
    static codeRequiredCoding() {
        return SystemRestfulInteractionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:SystemRestfulInteractionCodeType fhir: CapabilityStatement.rest.interaction.code:code', });
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestInteraction._fts_dataType = 'CapabilityStatementRestInteraction';
/**
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export class CapabilityStatementRest extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['security']) {
            this.security = new fhir.CapabilityStatementRestSecurity(source.security);
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.CapabilityStatementRestResource(x));
        }
        else {
            this.resource = [];
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.CapabilityStatementRestResourceOperation(x));
        }
        else {
            this.operation = [];
        }
        if (source['compartment']) {
            this.compartment = source.compartment.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.compartment = [];
        }
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.rest.mode)
     */
    static modeRequiredCoding() {
        return RestfulCapabilityModeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode:RestfulCapabilityModeCodeType fhir: CapabilityStatement.rest.mode:code', });
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        if (this["security"]) {
            issues.push(...this.security.doModelValidation());
        }
        if (this["resource"]) {
            this.resource.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["interaction"]) {
            this.interaction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["searchParam"]) {
            this.searchParam.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["operation"]) {
            this.operation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["compartment"]) {
            this.compartment.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRest._fts_dataType = 'CapabilityStatementRest';
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export class CapabilityStatementMessagingEndpoint extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingEndpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['protocol']) {
            this.protocol = new fhir.Coding(source.protocol);
        }
        else {
            this.protocol = null;
        }
        if (source['address']) {
            this.address = new fhir.FhirUrl({ value: source.address });
        }
        else {
            this.address = null;
        }
    }
    /**
     * Extensible-bound Value Set for protocol (CapabilityStatement.messaging.endpoint.protocol)
     */
    static protocolExtensibleCoding() {
        return MessageTransportCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['protocol']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property protocol:fhir.Coding fhir: CapabilityStatement.messaging.endpoint.protocol:Coding', });
        }
        if (this["protocol"]) {
            issues.push(...this.protocol.doModelValidation());
        }
        if (!this['address']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property address:fhir.FhirUrl fhir: CapabilityStatement.messaging.endpoint.address:url', });
        }
        if (this["address"]) {
            issues.push(...this.address.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingEndpoint._fts_dataType = 'CapabilityStatementMessagingEndpoint';
/**
 * This is a proposed alternative to the messaging.event structure.
 */
export class CapabilityStatementMessagingSupportedMessage extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingSupportedMessage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        else {
            this.definition = null;
        }
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.messaging.supportedMessage.mode)
     */
    static modeRequiredCoding() {
        return EventCapabilityModeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode:EventCapabilityModeCodeType fhir: CapabilityStatement.messaging.supportedMessage.mode:code', });
        }
        if (!this['definition']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property definition:fhir.FhirCanonical fhir: CapabilityStatement.messaging.supportedMessage.definition:canonical', });
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingSupportedMessage._fts_dataType = 'CapabilityStatementMessagingSupportedMessage';
/**
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export class CapabilityStatementMessaging extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.CapabilityStatementMessagingEndpoint(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['reliableCache']) {
            this.reliableCache = new fhir.FhirUnsignedInt({ value: source.reliableCache });
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['supportedMessage']) {
            this.supportedMessage = source.supportedMessage.map((x) => new fhir.CapabilityStatementMessagingSupportedMessage(x));
        }
        else {
            this.supportedMessage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reliableCache"]) {
            issues.push(...this.reliableCache.doModelValidation());
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        if (this["supportedMessage"]) {
            this.supportedMessage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessaging._fts_dataType = 'CapabilityStatementMessaging';
/**
 * A document definition.
 */
export class CapabilityStatementDocument extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementDocument - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.document.mode)
     */
    static modeRequiredCoding() {
        return DocumentModeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode:DocumentModeCodeType fhir: CapabilityStatement.document.mode:code', });
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        if (!this['profile']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property profile:fhir.FhirCanonical fhir: CapabilityStatement.document.profile:canonical', });
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementDocument._fts_dataType = 'CapabilityStatementDocument';
/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class CapabilityStatement extends fhir.DomainResource {
    /**
     * Default constructor for CapabilityStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CapabilityStatement';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiates = [];
        }
        if (source['imports']) {
            this.imports = source.imports.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.imports = [];
        }
        if (source['software']) {
            this.software = new fhir.CapabilityStatementSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.CapabilityStatementImplementation(source.implementation);
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirCode({ value: source.fhirVersion });
        }
        else {
            this.fhirVersion = null;
        }
        if (source['format']) {
            this.format = source.format.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.format = [];
        }
        if (source['patchFormat']) {
            this.patchFormat = source.patchFormat.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.patchFormat = [];
        }
        if (source['implementationGuide']) {
            this.implementationGuide = source.implementationGuide.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.implementationGuide = [];
        }
        if (source['rest']) {
            this.rest = source.rest.map((x) => new fhir.CapabilityStatementRest(x));
        }
        else {
            this.rest = [];
        }
        if (source['messaging']) {
            this.messaging = source.messaging.map((x) => new fhir.CapabilityStatementMessaging(x));
        }
        else {
            this.messaging = [];
        }
        if (source['document']) {
            this.document = source.document.map((x) => new fhir.CapabilityStatementDocument(x));
        }
        else {
            this.document = [];
        }
    }
    /**
     * Required-bound Value Set for status (CapabilityStatement.status)
     */
    static statusRequiredCoding() {
        return PublicationStatusCodings;
    }
    /**
     * Required-bound Value Set for kind (CapabilityStatement.kind)
     */
    static kindRequiredCoding() {
        return CapabilityStatementKindCodings;
    }
    /**
     * Required-bound Value Set for fhirVersion (CapabilityStatement.fhirVersion)
     */
    static fhirVersionRequiredCoding() {
        return FHIRVersionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"CapabilityStatement" fhir: CapabilityStatement.resourceType:"CapabilityStatement"', });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: CapabilityStatement.status:code', });
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (!this['date']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: CapabilityStatement.date:dateTime', });
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind:CapabilityStatementKindCodeType fhir: CapabilityStatement.kind:code', });
        }
        if (this["instantiates"]) {
            this.instantiates.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["imports"]) {
            this.imports.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["software"]) {
            issues.push(...this.software.doModelValidation());
        }
        if (this["implementation"]) {
            issues.push(...this.implementation.doModelValidation());
        }
        if (!this['fhirVersion']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property fhirVersion:fhir.FhirCode fhir: CapabilityStatement.fhirVersion:code', });
        }
        if (this["fhirVersion"]) {
            issues.push(...this.fhirVersion.doModelValidation());
        }
        if (!this['format']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property format:fhir.FhirCode[] fhir: CapabilityStatement.format:code', });
        }
        else if (!Array.isArray(this.format)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property format:fhir.FhirCode[] fhir: CapabilityStatement.format:code', });
        }
        else if (this.format.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property format:fhir.FhirCode[] fhir: CapabilityStatement.format:code', });
        }
        if (this["format"]) {
            this.format.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["patchFormat"]) {
            this.patchFormat.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["implementationGuide"]) {
            this.implementationGuide.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["rest"]) {
            this.rest.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["messaging"]) {
            this.messaging.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["document"]) {
            this.document.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatement._fts_dataType = 'CapabilityStatement';
//# sourceMappingURL=data:application/json;base64,