// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CapabilityStatement
import * as fhir from '../fhir.js';
// @ts-ignore
import { TypeRestfulInteractionVsValidation } from '../fhirValueSets/TypeRestfulInteractionVsValidation.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { VersioningPolicyVsValidation } from '../fhirValueSets/VersioningPolicyVsValidation.js';
// @ts-ignore
import { ConditionalReadStatusVsValidation } from '../fhirValueSets/ConditionalReadStatusVsValidation.js';
// @ts-ignore
import { ConditionalDeleteStatusVsValidation } from '../fhirValueSets/ConditionalDeleteStatusVsValidation.js';
// @ts-ignore
import { ReferenceHandlingPolicyVsValidation } from '../fhirValueSets/ReferenceHandlingPolicyVsValidation.js';
// @ts-ignore
import { SystemRestfulInteractionVsValidation } from '../fhirValueSets/SystemRestfulInteractionVsValidation.js';
// @ts-ignore
import { RestfulCapabilityModeVsValidation } from '../fhirValueSets/RestfulCapabilityModeVsValidation.js';
// @ts-ignore
import { EventCapabilityModeVsValidation } from '../fhirValueSets/EventCapabilityModeVsValidation.js';
// @ts-ignore
import { DocumentModeVsValidation } from '../fhirValueSets/DocumentModeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { CapabilityStatementKindVsValidation } from '../fhirValueSets/CapabilityStatementKindVsValidation.js';
// @ts-ignore
import { FHIRVersionVsValidation } from '../fhirValueSets/FHIRVersionVsValidation.js';
/**
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
export class CapabilityStatementSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['releaseDate']) {
            this.releaseDate = new fhir.FhirDateTime({ value: source.releaseDate });
        }
        if (source['_releaseDate']) {
            if (this.releaseDate) {
                this.releaseDate.addExtendedProperties(source._releaseDate);
            }
            else {
                this.releaseDate = new fhir.FhirDateTime(source._releaseDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.software';
        }
        this.vReqS('name', expression);
        this.vOptS('version', expression);
        this.vOptS('releaseDate', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementSoftware._fts_dataType = 'CapabilityStatementSoftware';
/**
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class CapabilityStatementImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUrl(source._url);
            }
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.implementation';
        }
        this.vReqS('description', expression);
        this.vOptS('url', expression);
        this.vOptS('custodian', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementImplementation._fts_dataType = 'CapabilityStatementImplementation';
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export class CapabilityStatementRestSecurity extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestSecurity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['cors']) {
            this.cors = new fhir.FhirBoolean({ value: source.cors });
        }
        if (source['_cors']) {
            if (this.cors) {
                this.cors.addExtendedProperties(source._cors);
            }
            else {
                this.cors = new fhir.FhirBoolean(source._cors);
            }
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.service = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.security';
        }
        this.vOptS('cors', expression);
        this.vOptA('service', expression);
        this.vOptS('description', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestSecurity._fts_dataType = 'CapabilityStatementRestSecurity';
/**
 * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
 */
export class CapabilityStatementRestResourceInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource.interaction';
        }
        this.vReqSV('code', expression, 'TypeRestfulInteraction', TypeRestfulInteractionVsValidation, 'r');
        this.vOptS('documentation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceInteraction._fts_dataType = 'CapabilityStatementRestResourceInteraction';
/**
 * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
 */
export class CapabilityStatementRestResourceSearchParam extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceSearchParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirCanonical(source._definition);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource.searchParam';
        }
        this.vReqS('name', expression);
        this.vOptS('definition', expression);
        this.vReqSV('type', expression, 'SearchParamType', SearchParamTypeVsValidation, 'r');
        this.vOptS('documentation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceSearchParam._fts_dataType = 'CapabilityStatementRestResourceSearchParam';
/**
 * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.
 * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
 */
export class CapabilityStatementRestResourceOperation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        else {
            this.definition = null;
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirCanonical(source._definition);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource.operation';
        }
        this.vReqS('name', expression);
        this.vReqS('definition', expression);
        this.vOptS('documentation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceOperation._fts_dataType = 'CapabilityStatementRestResourceOperation';
/**
 * Max of one repetition per resource type.
 */
export class CapabilityStatementRestResource extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirCanonical(source._profile);
            }
        }
        if (source['supportedProfile']) {
            this.supportedProfile = source.supportedProfile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.supportedProfile = [];
        }
        if (source['_supportedProfile']) {
            source._supportedProfile.forEach((x, i) => {
                if (this.supportedProfile.length >= i) {
                    if (x) {
                        this.supportedProfile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.supportedProfile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestResourceInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['versioning']) {
            this.versioning = new fhir.FhirCode({ value: source.versioning });
        }
        if (source['_versioning']) {
            if (this.versioning) {
                this.versioning.addExtendedProperties(source._versioning);
            }
            else {
                this.versioning = new fhir.FhirCode(source._versioning);
            }
        }
        if (source['readHistory']) {
            this.readHistory = new fhir.FhirBoolean({ value: source.readHistory });
        }
        if (source['_readHistory']) {
            if (this.readHistory) {
                this.readHistory.addExtendedProperties(source._readHistory);
            }
            else {
                this.readHistory = new fhir.FhirBoolean(source._readHistory);
            }
        }
        if (source['updateCreate']) {
            this.updateCreate = new fhir.FhirBoolean({ value: source.updateCreate });
        }
        if (source['_updateCreate']) {
            if (this.updateCreate) {
                this.updateCreate.addExtendedProperties(source._updateCreate);
            }
            else {
                this.updateCreate = new fhir.FhirBoolean(source._updateCreate);
            }
        }
        if (source['conditionalCreate']) {
            this.conditionalCreate = new fhir.FhirBoolean({ value: source.conditionalCreate });
        }
        if (source['_conditionalCreate']) {
            if (this.conditionalCreate) {
                this.conditionalCreate.addExtendedProperties(source._conditionalCreate);
            }
            else {
                this.conditionalCreate = new fhir.FhirBoolean(source._conditionalCreate);
            }
        }
        if (source['conditionalRead']) {
            this.conditionalRead = new fhir.FhirCode({ value: source.conditionalRead });
        }
        if (source['_conditionalRead']) {
            if (this.conditionalRead) {
                this.conditionalRead.addExtendedProperties(source._conditionalRead);
            }
            else {
                this.conditionalRead = new fhir.FhirCode(source._conditionalRead);
            }
        }
        if (source['conditionalUpdate']) {
            this.conditionalUpdate = new fhir.FhirBoolean({ value: source.conditionalUpdate });
        }
        if (source['_conditionalUpdate']) {
            if (this.conditionalUpdate) {
                this.conditionalUpdate.addExtendedProperties(source._conditionalUpdate);
            }
            else {
                this.conditionalUpdate = new fhir.FhirBoolean(source._conditionalUpdate);
            }
        }
        if (source['conditionalDelete']) {
            this.conditionalDelete = new fhir.FhirCode({ value: source.conditionalDelete });
        }
        if (source['_conditionalDelete']) {
            if (this.conditionalDelete) {
                this.conditionalDelete.addExtendedProperties(source._conditionalDelete);
            }
            else {
                this.conditionalDelete = new fhir.FhirCode(source._conditionalDelete);
            }
        }
        if (source['referencePolicy']) {
            this.referencePolicy = source.referencePolicy.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.referencePolicy = [];
        }
        if (source['_referencePolicy']) {
            source._referencePolicy.forEach((x, i) => {
                if (this.referencePolicy.length >= i) {
                    if (x) {
                        this.referencePolicy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.referencePolicy.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['searchInclude']) {
            this.searchInclude = source.searchInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchInclude = [];
        }
        if (source['_searchInclude']) {
            source._searchInclude.forEach((x, i) => {
                if (this.searchInclude.length >= i) {
                    if (x) {
                        this.searchInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchRevInclude']) {
            this.searchRevInclude = source.searchRevInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchRevInclude = [];
        }
        if (source['_searchRevInclude']) {
            source._searchRevInclude.forEach((x, i) => {
                if (this.searchRevInclude.length >= i) {
                    if (x) {
                        this.searchRevInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchRevInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.CapabilityStatementRestResourceOperation(x));
        }
        else {
            this.operation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource';
        }
        this.vReqSV('type', expression, 'ResourceTypes', ResourceTypesVsValidation, 'r');
        this.vOptS('profile', expression);
        this.vOptA('supportedProfile', expression);
        this.vOptS('documentation', expression);
        this.vOptA('interaction', expression);
        this.vOptSV('versioning', expression, 'VersioningPolicy', VersioningPolicyVsValidation, 'r');
        this.vOptS('readHistory', expression);
        this.vOptS('updateCreate', expression);
        this.vOptS('conditionalCreate', expression);
        this.vOptSV('conditionalRead', expression, 'ConditionalReadStatus', ConditionalReadStatusVsValidation, 'r');
        this.vOptS('conditionalUpdate', expression);
        this.vOptSV('conditionalDelete', expression, 'ConditionalDeleteStatus', ConditionalDeleteStatusVsValidation, 'r');
        this.vOptAV('referencePolicy', expression, 'ReferenceHandlingPolicy', ReferenceHandlingPolicyVsValidation, 'r');
        this.vOptA('searchInclude', expression);
        this.vOptA('searchRevInclude', expression);
        this.vOptA('searchParam', expression);
        this.vOptA('operation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResource._fts_dataType = 'CapabilityStatementRestResource';
/**
 * A specification of restful operations supported by the system.
 */
export class CapabilityStatementRestInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.interaction';
        }
        this.vReqSV('code', expression, 'SystemRestfulInteraction', SystemRestfulInteractionVsValidation, 'r');
        this.vOptS('documentation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestInteraction._fts_dataType = 'CapabilityStatementRestInteraction';
/**
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export class CapabilityStatementRest extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['security']) {
            this.security = new fhir.CapabilityStatementRestSecurity(source.security);
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.CapabilityStatementRestResource(x));
        }
        else {
            this.resource = [];
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.CapabilityStatementRestResourceOperation(x));
        }
        else {
            this.operation = [];
        }
        if (source['compartment']) {
            this.compartment = source.compartment.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.compartment = [];
        }
        if (source['_compartment']) {
            source._compartment.forEach((x, i) => {
                if (this.compartment.length >= i) {
                    if (x) {
                        this.compartment[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.compartment.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest';
        }
        this.vReqSV('mode', expression, 'RestfulCapabilityMode', RestfulCapabilityModeVsValidation, 'r');
        this.vOptS('documentation', expression);
        this.vOptS('security', expression);
        this.vOptA('resource', expression);
        this.vOptA('interaction', expression);
        this.vOptA('searchParam', expression);
        this.vOptA('operation', expression);
        this.vOptA('compartment', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRest._fts_dataType = 'CapabilityStatementRest';
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export class CapabilityStatementMessagingEndpoint extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingEndpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['protocol']) {
            this.protocol = new fhir.Coding(source.protocol);
        }
        else {
            this.protocol = null;
        }
        if (source['address']) {
            this.address = new fhir.FhirUrl({ value: source.address });
        }
        else {
            this.address = null;
        }
        if (source['_address']) {
            if (this.address) {
                this.address.addExtendedProperties(source._address);
            }
            else {
                this.address = new fhir.FhirUrl(source._address);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.messaging.endpoint';
        }
        this.vReqS('protocol', expression);
        this.vReqS('address', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingEndpoint._fts_dataType = 'CapabilityStatementMessagingEndpoint';
/**
 * This is a proposed alternative to the messaging.event structure.
 */
export class CapabilityStatementMessagingSupportedMessage extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingSupportedMessage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        else {
            this.definition = null;
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirCanonical(source._definition);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.messaging.supportedMessage';
        }
        this.vReqSV('mode', expression, 'EventCapabilityMode', EventCapabilityModeVsValidation, 'r');
        this.vReqS('definition', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingSupportedMessage._fts_dataType = 'CapabilityStatementMessagingSupportedMessage';
/**
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export class CapabilityStatementMessaging extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.CapabilityStatementMessagingEndpoint(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['reliableCache']) {
            this.reliableCache = new fhir.FhirUnsignedInt({ value: source.reliableCache });
        }
        if (source['_reliableCache']) {
            if (this.reliableCache) {
                this.reliableCache.addExtendedProperties(source._reliableCache);
            }
            else {
                this.reliableCache = new fhir.FhirUnsignedInt(source._reliableCache);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['supportedMessage']) {
            this.supportedMessage = source.supportedMessage.map((x) => new fhir.CapabilityStatementMessagingSupportedMessage(x));
        }
        else {
            this.supportedMessage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.messaging';
        }
        this.vOptA('endpoint', expression);
        this.vOptS('reliableCache', expression);
        this.vOptS('documentation', expression);
        this.vOptA('supportedMessage', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessaging._fts_dataType = 'CapabilityStatementMessaging';
/**
 * A document definition.
 */
export class CapabilityStatementDocument extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementDocument - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        else {
            this.profile = null;
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirCanonical(source._profile);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.document';
        }
        this.vReqSV('mode', expression, 'DocumentMode', DocumentModeVsValidation, 'r');
        this.vOptS('documentation', expression);
        this.vReqS('profile', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementDocument._fts_dataType = 'CapabilityStatementDocument';
/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class CapabilityStatement extends fhir.DomainResource {
    /**
     * Default constructor for CapabilityStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CapabilityStatement';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiates = [];
        }
        if (source['_instantiates']) {
            source._instantiates.forEach((x, i) => {
                if (this.instantiates.length >= i) {
                    if (x) {
                        this.instantiates[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiates.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['imports']) {
            this.imports = source.imports.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.imports = [];
        }
        if (source['_imports']) {
            source._imports.forEach((x, i) => {
                if (this.imports.length >= i) {
                    if (x) {
                        this.imports[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.imports.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['software']) {
            this.software = new fhir.CapabilityStatementSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.CapabilityStatementImplementation(source.implementation);
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirCode({ value: source.fhirVersion });
        }
        else {
            this.fhirVersion = null;
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirCode(source._fhirVersion);
            }
        }
        if (source['format']) {
            this.format = source.format.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.format = [];
        }
        if (source['_format']) {
            source._format.forEach((x, i) => {
                if (this.format.length >= i) {
                    if (x) {
                        this.format[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.format.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['patchFormat']) {
            this.patchFormat = source.patchFormat.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.patchFormat = [];
        }
        if (source['_patchFormat']) {
            source._patchFormat.forEach((x, i) => {
                if (this.patchFormat.length >= i) {
                    if (x) {
                        this.patchFormat[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.patchFormat.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['implementationGuide']) {
            this.implementationGuide = source.implementationGuide.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.implementationGuide = [];
        }
        if (source['_implementationGuide']) {
            source._implementationGuide.forEach((x, i) => {
                if (this.implementationGuide.length >= i) {
                    if (x) {
                        this.implementationGuide[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.implementationGuide.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['rest']) {
            this.rest = source.rest.map((x) => new fhir.CapabilityStatementRest(x));
        }
        else {
            this.rest = [];
        }
        if (source['messaging']) {
            this.messaging = source.messaging.map((x) => new fhir.CapabilityStatementMessaging(x));
        }
        else {
            this.messaging = [];
        }
        if (source['document']) {
            this.document = source.document.map((x) => new fhir.CapabilityStatementDocument(x));
        }
        else {
            this.document = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement';
        }
        this.vReqS('resourceType', expression);
        this.vOptS('url', expression);
        this.vOptS('version', expression);
        this.vOptS('name', expression);
        this.vOptS('title', expression);
        this.vReqSV('status', expression, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOptS('experimental', expression);
        this.vReqS('date', expression);
        this.vOptS('publisher', expression);
        this.vOptA('contact', expression);
        this.vOptS('description', expression);
        this.vOptA('useContext', expression);
        this.vOptA('jurisdiction', expression);
        this.vOptS('purpose', expression);
        this.vOptS('copyright', expression);
        this.vReqSV('kind', expression, 'CapabilityStatementKind', CapabilityStatementKindVsValidation, 'r');
        this.vOptA('instantiates', expression);
        this.vOptA('imports', expression);
        this.vOptS('software', expression);
        this.vOptS('implementation', expression);
        this.vReqSV('fhirVersion', expression, 'FHIRVersion', FHIRVersionVsValidation, 'r');
        this.vReqA('format', expression);
        this.vOptA('patchFormat', expression);
        this.vOptA('implementationGuide', expression);
        this.vOptA('rest', expression);
        this.vOptA('messaging', expression);
        this.vOptA('document', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatement._fts_dataType = 'CapabilityStatement';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FwYWJpbGl0eVN0YXRlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvQ2FwYWJpbGl0eVN0YXRlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFFckMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFRbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBRzVHLGFBQWE7QUFDYixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUc5RixhQUFhO0FBQ2IsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFHMUYsYUFBYTtBQUNiLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBR2hHLGFBQWE7QUFDYixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUcxRyxhQUFhO0FBQ2IsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0seURBQXlELENBQUM7QUFHOUcsYUFBYTtBQUNiLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBRzlHLGFBQWE7QUFDYixPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUdoSCxhQUFhO0FBQ2IsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sdURBQXVELENBQUM7QUFPMUcsYUFBYTtBQUNiLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBR3RHLGFBQWE7QUFDYixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUd4RixhQUFhO0FBQ2IsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFHbEcsYUFBYTtBQUNiLE9BQU8s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QUMsV0FBVyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFDLFVBQVUsRUFBQyx5QkFBeUIsRUFBQyxtQ0FBbUMsRUFBQyxHQUFHLENBQUMsQ0FBQTtRQUNoRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUNyQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFDLFVBQVUsRUFBQyxhQUFhLEVBQUMsdUJBQXVCLEVBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUNqQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQXhSRDs7R0FFRztBQUM2QixpQ0FBYSxHQUFVLHFCQUFxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBDYXBhYmlsaXR5U3RhdGVtZW50XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZXN0ZnVsU2VjdXJpdHlTZXJ2aWNlQ29kZXMsICBSZXN0ZnVsU2VjdXJpdHlTZXJ2aWNlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1Jlc3RmdWxTZWN1cml0eVNlcnZpY2VDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVzdGZ1bFNlY3VyaXR5U2VydmljZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVzdGZ1bFNlY3VyaXR5U2VydmljZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGVzLCAgVHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9UeXBlUmVzdGZ1bEludGVyYWN0aW9uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Wc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1R5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Wc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNlYXJjaFBhcmFtVHlwZUNvZGVzLCAgU2VhcmNoUGFyYW1UeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NlYXJjaFBhcmFtVHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTZWFyY2hQYXJhbVR5cGVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NlYXJjaFBhcmFtVHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVzb3VyY2VUeXBlc0NvZGVzLCAgUmVzb3VyY2VUeXBlc0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9SZXNvdXJjZVR5cGVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFJlc291cmNlVHlwZXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1Jlc291cmNlVHlwZXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFZlcnNpb25pbmdQb2xpY3lDb2RlcywgIFZlcnNpb25pbmdQb2xpY3lDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVmVyc2lvbmluZ1BvbGljeUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWZXJzaW9uaW5nUG9saWN5VnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9WZXJzaW9uaW5nUG9saWN5VnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb25kaXRpb25hbFJlYWRTdGF0dXNDb2RlcywgIENvbmRpdGlvbmFsUmVhZFN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Db25kaXRpb25hbFJlYWRTdGF0dXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ29uZGl0aW9uYWxSZWFkU3RhdHVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Db25kaXRpb25hbFJlYWRTdGF0dXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENvbmRpdGlvbmFsRGVsZXRlU3RhdHVzQ29kZXMsICBDb25kaXRpb25hbERlbGV0ZVN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Db25kaXRpb25hbERlbGV0ZVN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb25kaXRpb25hbERlbGV0ZVN0YXR1c1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ29uZGl0aW9uYWxEZWxldGVTdGF0dXNWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFJlZmVyZW5jZUhhbmRsaW5nUG9saWN5Q29kZXMsICBSZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9SZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZWZlcmVuY2VIYW5kbGluZ1BvbGljeVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFN5c3RlbVJlc3RmdWxJbnRlcmFjdGlvbkNvZGVzLCAgU3lzdGVtUmVzdGZ1bEludGVyYWN0aW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1N5c3RlbVJlc3RmdWxJbnRlcmFjdGlvbkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTeXN0ZW1SZXN0ZnVsSW50ZXJhY3Rpb25Wc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1N5c3RlbVJlc3RmdWxJbnRlcmFjdGlvblZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVzdGZ1bENhcGFiaWxpdHlNb2RlQ29kZXMsICBSZXN0ZnVsQ2FwYWJpbGl0eU1vZGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVzdGZ1bENhcGFiaWxpdHlNb2RlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFJlc3RmdWxDYXBhYmlsaXR5TW9kZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVzdGZ1bENhcGFiaWxpdHlNb2RlVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZXNzYWdlVHJhbnNwb3J0Q29kZXMsICBNZXNzYWdlVHJhbnNwb3J0Q29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL01lc3NhZ2VUcmFuc3BvcnRDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVzc2FnZVRyYW5zcG9ydFZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVzc2FnZVRyYW5zcG9ydFZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXZlbnRDYXBhYmlsaXR5TW9kZUNvZGVzLCAgRXZlbnRDYXBhYmlsaXR5TW9kZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FdmVudENhcGFiaWxpdHlNb2RlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEV2ZW50Q2FwYWJpbGl0eU1vZGVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V2ZW50Q2FwYWJpbGl0eU1vZGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERvY3VtZW50TW9kZUNvZGVzLCAgRG9jdW1lbnRNb2RlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RvY3VtZW50TW9kZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEb2N1bWVudE1vZGVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RvY3VtZW50TW9kZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHVibGljYXRpb25TdGF0dXNDb2RlcywgIFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1B1YmxpY2F0aW9uU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RlcywgIENhcGFiaWxpdHlTdGF0ZW1lbnRLaW5kQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NhcGFiaWxpdHlTdGF0ZW1lbnRLaW5kQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENhcGFiaWxpdHlTdGF0ZW1lbnRLaW5kVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DYXBhYmlsaXR5U3RhdGVtZW50S2luZFZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRkhJUlZlcnNpb25Db2RlcywgIEZISVJWZXJzaW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0ZISVJWZXJzaW9uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEZISVJWZXJzaW9uVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9GSElSVmVyc2lvblZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDYXBhYmlsaXR5U3RhdGVtZW50U29mdHdhcmUgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0eVN0YXRlbWVudFNvZnR3YXJlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogTmFtZSB0aGUgc29mdHdhcmUgaXMga25vd24gYnkuXHJcbiAgICovXHJcbiAgbmFtZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQuc29mdHdhcmUubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBJZiBwb3NzaWJsZSwgYSB2ZXJzaW9uIHNob3VsZCBiZSBzcGVjaWZpZWQsIGFzIHN0YXRlbWVudHMgYXJlIGxpa2VseSB0byBiZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBzb2Z0d2FyZS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQuc29mdHdhcmUudmVyc2lvblxyXG4gICAqL1xyXG4gIF92ZXJzaW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBEYXRlIHRoaXMgdmVyc2lvbiBvZiB0aGUgc29mdHdhcmUgd2FzIHJlbGVhc2VkLlxyXG4gICAqL1xyXG4gIHJlbGVhc2VEYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5zb2Z0d2FyZS5yZWxlYXNlRGF0ZVxyXG4gICAqL1xyXG4gIF9yZWxlYXNlRGF0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTb2Z0d2FyZSB0aGF0IGlzIGNvdmVyZWQgYnkgdGhpcyBjYXBhYmlsaXR5IHN0YXRlbWVudC4gIEl0IGlzIHVzZWQgd2hlbiB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgZGVzY3JpYmVzIHRoZSBjYXBhYmlsaXRpZXMgb2YgYSBwYXJ0aWN1bGFyIHNvZnR3YXJlIHZlcnNpb24sIGluZGVwZW5kZW50IG9mIGFuIGluc3RhbGxhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXBhYmlsaXR5U3RhdGVtZW50U29mdHdhcmUgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDYXBhYmlsaXR5U3RhdGVtZW50U29mdHdhcmUnO1xyXG4gIC8qKlxyXG4gICAqIE5hbWUgdGhlIHNvZnR3YXJlIGlzIGtub3duIGJ5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBJZiBwb3NzaWJsZSwgYSB2ZXJzaW9uIHNob3VsZCBiZSBzcGVjaWZpZWQsIGFzIHN0YXRlbWVudHMgYXJlIGxpa2VseSB0byBiZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBzb2Z0d2FyZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGF0ZSB0aGlzIHZlcnNpb24gb2YgdGhlIHNvZnR3YXJlIHdhcyByZWxlYXNlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZURhdGU/OiBmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudFNvZnR3YXJlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2FwYWJpbGl0eVN0YXRlbWVudFNvZnR3YXJlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubmFtZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19uYW1lJ10pIHtcclxuICAgICAgaWYgKHRoaXMubmFtZSkgeyB0aGlzLm5hbWUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbmFtZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fbmFtZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndmVyc2lvbiddKSB7IHRoaXMudmVyc2lvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdmVyc2lvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLnZlcnNpb24pIHsgdGhpcy52ZXJzaW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3ZlcnNpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy52ZXJzaW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3ZlcnNpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3JlbGVhc2VEYXRlJ10pIHsgdGhpcy5yZWxlYXNlRGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5yZWxlYXNlRGF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcmVsZWFzZURhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5yZWxlYXNlRGF0ZSkgeyB0aGlzLnJlbGVhc2VEYXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3JlbGVhc2VEYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucmVsZWFzZURhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoc291cmNlLl9yZWxlYXNlRGF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnQuc29mdHdhcmUnIH1cclxuICAgIHRoaXMudlJlcVMoJ25hbWUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCd2ZXJzaW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygncmVsZWFzZURhdGUnLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2FwYWJpbGl0eVN0YXRlbWVudEltcGxlbWVudGF0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENhcGFiaWxpdHlTdGF0ZW1lbnRJbXBsZW1lbnRhdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBzcGVjaWZpYyBpbnN0YWxsYXRpb24gdGhhdCB0aGlzIGNhcGFiaWxpdHkgc3RhdGVtZW50IHJlbGF0ZXMgdG8uXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb246IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LmltcGxlbWVudGF0aW9uLmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBbiBhYnNvbHV0ZSBiYXNlIFVSTCBmb3IgdGhlIGltcGxlbWVudGF0aW9uLiAgVGhpcyBmb3JtcyB0aGUgYmFzZSBmb3IgUkVTVCBpbnRlcmZhY2VzIGFzIHdlbGwgYXMgdGhlIG1haWxib3ggYW5kIGRvY3VtZW50IGludGVyZmFjZXMuXHJcbiAgICovXHJcbiAgdXJsPzogZmhpci5GaGlyVXJsfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQuaW1wbGVtZW50YXRpb24udXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIG9yZ2FuaXphdGlvbiByZXNwb25zaWJsZSBmb3IgdGhlIG1hbmFnZW1lbnQgb2YgdGhlIGluc3RhbmNlIGFuZCBvdmVyc2lnaHQgb2YgdGhlIGRhdGEgb24gdGhlIHNlcnZlciBhdCB0aGUgc3BlY2lmaWVkIFVSTC5cclxuICAgKi9cclxuICBjdXN0b2RpYW4/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogSWRlbnRpZmllcyBhIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGluc3RhbmNlIHRoYXQgaXMgZGVzY3JpYmVkIGJ5IHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCAtIGkuZS4gYSBwYXJ0aWN1bGFyIGluc3RhbGxhdGlvbiwgcmF0aGVyIHRoYW4gdGhlIGNhcGFiaWxpdGllcyBvZiBhIHNvZnR3YXJlIHByb2dyYW0uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2FwYWJpbGl0eVN0YXRlbWVudEltcGxlbWVudGF0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2FwYWJpbGl0eVN0YXRlbWVudEltcGxlbWVudGF0aW9uJztcclxuICAvKipcclxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgc3BlY2lmaWMgaW5zdGFsbGF0aW9uIHRoYXQgdGhpcyBjYXBhYmlsaXR5IHN0YXRlbWVudCByZWxhdGVzIHRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbjogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQW4gYWJzb2x1dGUgYmFzZSBVUkwgZm9yIHRoZSBpbXBsZW1lbnRhdGlvbi4gIFRoaXMgZm9ybXMgdGhlIGJhc2UgZm9yIFJFU1QgaW50ZXJmYWNlcyBhcyB3ZWxsIGFzIHRoZSBtYWlsYm94IGFuZCBkb2N1bWVudCBpbnRlcmZhY2VzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cmw/OiBmaGlyLkZoaXJVcmx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcmdhbml6YXRpb24gcmVzcG9uc2libGUgZm9yIHRoZSBtYW5hZ2VtZW50IG9mIHRoZSBpbnN0YW5jZSBhbmQgb3ZlcnNpZ2h0IG9mIHRoZSBkYXRhIG9uIHRoZSBzZXJ2ZXIgYXQgdGhlIHNwZWNpZmllZCBVUkwuXHJcbiAgICovXHJcbiAgcHVibGljIGN1c3RvZGlhbj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDYXBhYmlsaXR5U3RhdGVtZW50SW1wbGVtZW50YXRpb24gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDYXBhYmlsaXR5U3RhdGVtZW50SW1wbGVtZW50YXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZXNjcmlwdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uKSB7IHRoaXMuZGVzY3JpcHRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVzY3JpcHRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9kZXNjcmlwdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndXJsJ10pIHsgdGhpcy51cmwgPSBuZXcgZmhpci5GaGlyVXJsKHt2YWx1ZTogc291cmNlLnVybH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdXJsJ10pIHtcclxuICAgICAgaWYgKHRoaXMudXJsKSB7IHRoaXMudXJsLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3VybCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJVcmwoc291cmNlLl91cmwgYXMgUGFydGlhbDxmaGlyLkZoaXJVcmxBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2N1c3RvZGlhbiddKSB7IHRoaXMuY3VzdG9kaWFuID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5jdXN0b2RpYW4pOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnQuaW1wbGVtZW50YXRpb24nIH1cclxuICAgIHRoaXMudlJlcVMoJ2Rlc2NyaXB0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygndXJsJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnY3VzdG9kaWFuJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0U2VjdXJpdHkgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RTZWN1cml0eUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlYXNpZXN0IENPUlMgaGVhZGVycyB0byBhZGQgYXJlIEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbjogKiAmYW1wOyBBY2Nlc3MtQ29udHJvbC1SZXF1ZXN0LU1ldGhvZDogR0VULCBQT1NULCBQVVQsIERFTEVURS4gQWxsIHNlcnZlcnMgU0hPVUxEIHN1cHBvcnQgQ09SUy5cclxuICAgKi9cclxuICBjb3JzPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnNlY3VyaXR5LmNvcnNcclxuICAgKi9cclxuICBfY29ycz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVHlwZXMgb2Ygc2VjdXJpdHkgc2VydmljZXMgdGhhdCBhcmUgc3VwcG9ydGVkL3JlcXVpcmVkIGJ5IHRoZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgc2VydmljZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBHZW5lcmFsIGRlc2NyaXB0aW9uIG9mIGhvdyBzZWN1cml0eSB3b3Jrcy5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5zZWN1cml0eS5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmZvcm1hdGlvbiBhYm91dCBzZWN1cml0eSBpbXBsZW1lbnRhdGlvbiBmcm9tIGFuIGludGVyZmFjZSBwZXJzcGVjdGl2ZSAtIHdoYXQgYSBjbGllbnQgbmVlZHMgdG8ga25vdy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdFNlY3VyaXR5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RTZWN1cml0eSc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVhc2llc3QgQ09SUyBoZWFkZXJzIHRvIGFkZCBhcmUgQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luOiAqICZhbXA7IEFjY2Vzcy1Db250cm9sLVJlcXVlc3QtTWV0aG9kOiBHRVQsIFBPU1QsIFBVVCwgREVMRVRFLiBBbGwgc2VydmVycyBTSE9VTEQgc3VwcG9ydCBDT1JTLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3JzPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVHlwZXMgb2Ygc2VjdXJpdHkgc2VydmljZXMgdGhhdCBhcmUgc3VwcG9ydGVkL3JlcXVpcmVkIGJ5IHRoZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgcHVibGljIHNlcnZpY2U6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogR2VuZXJhbCBkZXNjcmlwdGlvbiBvZiBob3cgc2VjdXJpdHkgd29ya3MuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0U2VjdXJpdHkgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDYXBhYmlsaXR5U3RhdGVtZW50UmVzdFNlY3VyaXR5QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2NvcnMnXSkgeyB0aGlzLmNvcnMgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5jb3JzfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb3JzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuY29ycykgeyB0aGlzLmNvcnMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY29ycyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmNvcnMgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX2NvcnMgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzZXJ2aWNlJ10pIHsgdGhpcy5zZXJ2aWNlID0gc291cmNlLnNlcnZpY2UubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zZXJ2aWNlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzY3JpcHRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikgeyB0aGlzLmRlc2NyaXB0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc2NyaXB0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oc291cmNlLl9kZXNjcmlwdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpck1hcmtkb3duQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5zZWN1cml0eScgfVxyXG4gICAgdGhpcy52T3B0UygnY29ycycsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ3NlcnZpY2UnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdkZXNjcmlwdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlSW50ZXJhY3Rpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZUludGVyYWN0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQ29kZWQgaWRlbnRpZmllciBvZiB0aGUgb3BlcmF0aW9uLCBzdXBwb3J0ZWQgYnkgdGhlIHN5c3RlbSByZXNvdXJjZS5cclxuICAgKi9cclxuICBjb2RlOiBmaGlyLkZoaXJDb2RlPFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLmludGVyYWN0aW9uLmNvZGVcclxuICAgKi9cclxuICBfY29kZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogR3VpZGFuY2Ugc3BlY2lmaWMgdG8gdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgb3BlcmF0aW9uLCBzdWNoIGFzICdkZWxldGUgaXMgYSBsb2dpY2FsIGRlbGV0ZScgb3IgJ3VwZGF0ZXMgYXJlIG9ubHkgYWxsb3dlZCB3aXRoIHZlcnNpb24gaWQnIG9yICdjcmVhdGVzIHBlcm1pdHRlZCBmcm9tIHByZS1hdXRob3JpemVkIGNlcnRpZmljYXRlcyBvbmx5Jy5cclxuICAgKi9cclxuICBkb2N1bWVudGF0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLmludGVyYWN0aW9uLmRvY3VtZW50YXRpb25cclxuICAgKi9cclxuICBfZG9jdW1lbnRhdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbiBnZW5lcmFsLCBhIFJlc291cmNlIHdpbGwgb25seSBhcHBlYXIgaW4gYSBDYXBhYmlsaXR5U3RhdGVtZW50IGlmIHRoZSBzZXJ2ZXIgYWN0dWFsbHkgaGFzIHNvbWUgY2FwYWJpbGl0aWVzIC0gZS5nLiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgaW50ZXJhY3Rpb24gc3VwcG9ydGVkLiBIb3dldmVyIGludGVyYWN0aW9ucyBjYW4gYmUgb21pdHRlZCB0byBzdXBwb3J0IHN1bW1hcml6YXRpb24gKF9zdW1tYXJ5ID0gdHJ1ZSkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZUludGVyYWN0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZUludGVyYWN0aW9uJztcclxuICAvKipcclxuICAgKiBDb2RlZCBpZGVudGlmaWVyIG9mIHRoZSBvcGVyYXRpb24sIHN1cHBvcnRlZCBieSB0aGUgc3lzdGVtIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2RlOiBmaGlyLkZoaXJDb2RlPFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Db2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBHdWlkYW5jZSBzcGVjaWZpYyB0byB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBvcGVyYXRpb24sIHN1Y2ggYXMgJ2RlbGV0ZSBpcyBhIGxvZ2ljYWwgZGVsZXRlJyBvciAndXBkYXRlcyBhcmUgb25seSBhbGxvd2VkIHdpdGggdmVyc2lvbiBpZCcgb3IgJ2NyZWF0ZXMgcGVybWl0dGVkIGZyb20gcHJlLWF1dGhvcml6ZWQgY2VydGlmaWNhdGVzIG9ubHknLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb2N1bWVudGF0aW9uPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VJbnRlcmFjdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VJbnRlcmFjdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydjb2RlJ10pIHsgdGhpcy5jb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8VHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5jb2RlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvZGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfY29kZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvZGUpIHsgdGhpcy5jb2RlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NvZGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8VHlwZVJlc3RmdWxJbnRlcmFjdGlvbkNvZGVUeXBlPihzb3VyY2UuX2NvZGUgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RvY3VtZW50YXRpb24nXSkgeyB0aGlzLmRvY3VtZW50YXRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UuZG9jdW1lbnRhdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZG9jdW1lbnRhdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRvY3VtZW50YXRpb24pIHsgdGhpcy5kb2N1bWVudGF0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RvY3VtZW50YXRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kb2N1bWVudGF0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHNvdXJjZS5fZG9jdW1lbnRhdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpck1hcmtkb3duQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5pbnRlcmFjdGlvbicgfVxyXG4gICAgdGhpcy52UmVxU1YoJ2NvZGUnLGV4cHJlc3Npb24sJ1R5cGVSZXN0ZnVsSW50ZXJhY3Rpb24nLFR5cGVSZXN0ZnVsSW50ZXJhY3Rpb25Wc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52T3B0UygnZG9jdW1lbnRhdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlU2VhcmNoUGFyYW0gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogUGFyYW1ldGVyIG5hbWVzIGNhbm5vdCBvdmVybGFwIHdpdGggc3RhbmRhcmQgcGFyYW1ldGVyIG5hbWVzLCBhbmQgc3RhbmRhcmQgcGFyYW1ldGVycyBjYW5ub3QgYmUgcmVkZWZpbmVkLlxyXG4gICAqL1xyXG4gIG5hbWU6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2Uuc2VhcmNoUGFyYW0ubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGlzIFNIT1VMRCBiZSBwcmVzZW50LCBhbmQgbWF0Y2hlcyByZWZlcnMgdG8gYSBTZWFyY2hQYXJhbWV0ZXIgYnkgaXRzIGNhbm9uaWNhbCBVUkwuIElmIHN5c3RlbXMgd2lzaCB0byBkb2N1bWVudCB0aGVpciBzdXBwb3J0IGZvciBtb2RpZmllcnMsIGNvbXBhcmF0b3JzLCB0YXJnZXQgcmVzb3VyY2UgdHlwZXMsIGFuZCBjaGFpbmVkIHBhcmFtZXRlcnMsIHRoZXkgc2hvdWxkIGRvIHVzaW5nIGEgc2VhcmNoIHBhcmFtZXRlciByZXNvdXJjZS4gVGhpcyBlbGVtZW50IFNIQUxMIGJlIHBvcHVsYXRlZCBpZiB0aGUgc2VhcmNoIHBhcmFtZXRlciByZWZlcnMgdG8gYSBTZWFyY2hQYXJhbWV0ZXIgZGVmaW5lZCBieSB0aGUgRkhJUiBjb3JlIHNwZWNpZmljYXRpb24gb3IgZXh0ZXJuYWxseSBkZWZpbmVkIElHcy5cclxuICAgKi9cclxuICBkZWZpbml0aW9uPzogZmhpci5GaGlyQ2Fub25pY2FsfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5zZWFyY2hQYXJhbS5kZWZpbml0aW9uXHJcbiAgICovXHJcbiAgX2RlZmluaXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFdoaWxlIHRoaXMgY2FuIGJlIGxvb2tlZCB1cCBmcm9tIHRoZSBkZWZpbml0aW9uLCBpdCBpcyBpbmNsdWRlZCBoZXJlIGFzIGEgY29udmVuaWVuY2UgZm9yIHN5c3RlbXMgdGhhdCBhdXRvZ2VuZXJhdGUgYSBxdWVyeSBpbnRlcmZhY2UgYmFzZWQgb24gdGhlIHNlcnZlciBjYXBhYmlsaXR5IHN0YXRlbWVudC4gIEl0IFNIQUxMIGJlIHRoZSBzYW1lIGFzIHRoZSB0eXBlIGluIHRoZSBzZWFyY2ggcGFyYW1ldGVyIGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5GaGlyQ29kZTxTZWFyY2hQYXJhbVR5cGVDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLnNlYXJjaFBhcmFtLnR5cGVcclxuICAgKi9cclxuICBfdHlwZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBhbGxvd3MgZG9jdW1lbnRhdGlvbiBvZiBhbnkgZGlzdGluY3QgYmVoYXZpb3JzIGFib3V0IGhvdyB0aGUgc2VhcmNoIHBhcmFtZXRlciBpcyB1c2VkLiAgRm9yIGV4YW1wbGUsIHRleHQgbWF0Y2hpbmcgYWxnb3JpdGhtcy5cclxuICAgKi9cclxuICBkb2N1bWVudGF0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLnNlYXJjaFBhcmFtLmRvY3VtZW50YXRpb25cclxuICAgKi9cclxuICBfZG9jdW1lbnRhdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgc2VhcmNoIHBhcmFtZXRlcnMgc2hvdWxkIGluY2x1ZGUgdGhlIGNvbnRyb2wgc2VhcmNoIHBhcmFtZXRlcnMgc3VjaCBhcyBfc29ydCwgX2NvdW50LCBldGMuIHRoYXQgYWxzbyBhcHBseSB0byB0aGlzIHJlc291cmNlICh0aG91Z2ggbWFueSB3aWxsIGJlIGxpc3RlZCBhdCBbQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnNlYXJjaFBhcmFtXShjYXBhYmlsaXR5c3RhdGVtZW50LWRlZmluaXRpb25zLmh0bWwjQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnNlYXJjaFBhcmFtKSkuIFRoZSBiZWhhdmlvciBvZiBzb21lIHNlYXJjaCBwYXJhbWV0ZXJzIG1heSBiZSBmdXJ0aGVyIGRlc2NyaWJlZCBieSBvdGhlciBjb2RlIG9yIGV4dGVuc2lvbiBlbGVtZW50cywgb3IgbmFycmF0aXZlIHdpdGhpbiB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgb3IgbGlua2VkIFtTZWFyY2hQYXJhbWV0ZXJdKHNlYXJjaHBhcmFtZXRlci5odG1sIykgZGVmaW5pdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtJztcclxuICAvKipcclxuICAgKiBQYXJhbWV0ZXIgbmFtZXMgY2Fubm90IG92ZXJsYXAgd2l0aCBzdGFuZGFyZCBwYXJhbWV0ZXIgbmFtZXMsIGFuZCBzdGFuZGFyZCBwYXJhbWV0ZXJzIGNhbm5vdCBiZSByZWRlZmluZWQuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgU0hPVUxEIGJlIHByZXNlbnQsIGFuZCBtYXRjaGVzIHJlZmVycyB0byBhIFNlYXJjaFBhcmFtZXRlciBieSBpdHMgY2Fub25pY2FsIFVSTC4gSWYgc3lzdGVtcyB3aXNoIHRvIGRvY3VtZW50IHRoZWlyIHN1cHBvcnQgZm9yIG1vZGlmaWVycywgY29tcGFyYXRvcnMsIHRhcmdldCByZXNvdXJjZSB0eXBlcywgYW5kIGNoYWluZWQgcGFyYW1ldGVycywgdGhleSBzaG91bGQgZG8gdXNpbmcgYSBzZWFyY2ggcGFyYW1ldGVyIHJlc291cmNlLiBUaGlzIGVsZW1lbnQgU0hBTEwgYmUgcG9wdWxhdGVkIGlmIHRoZSBzZWFyY2ggcGFyYW1ldGVyIHJlZmVycyB0byBhIFNlYXJjaFBhcmFtZXRlciBkZWZpbmVkIGJ5IHRoZSBGSElSIGNvcmUgc3BlY2lmaWNhdGlvbiBvciBleHRlcm5hbGx5IGRlZmluZWQgSUdzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWZpbml0aW9uPzogZmhpci5GaGlyQ2Fub25pY2FsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGlsZSB0aGlzIGNhbiBiZSBsb29rZWQgdXAgZnJvbSB0aGUgZGVmaW5pdGlvbiwgaXQgaXMgaW5jbHVkZWQgaGVyZSBhcyBhIGNvbnZlbmllbmNlIGZvciBzeXN0ZW1zIHRoYXQgYXV0b2dlbmVyYXRlIGEgcXVlcnkgaW50ZXJmYWNlIGJhc2VkIG9uIHRoZSBzZXJ2ZXIgY2FwYWJpbGl0eSBzdGF0ZW1lbnQuICBJdCBTSEFMTCBiZSB0aGUgc2FtZSBhcyB0aGUgdHlwZSBpbiB0aGUgc2VhcmNoIHBhcmFtZXRlciBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkZoaXJDb2RlPFNlYXJjaFBhcmFtVHlwZUNvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgYWxsb3dzIGRvY3VtZW50YXRpb24gb2YgYW55IGRpc3RpbmN0IGJlaGF2aW9ycyBhYm91dCBob3cgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgaXMgdXNlZC4gIEZvciBleGFtcGxlLCB0ZXh0IG1hdGNoaW5nIGFsZ29yaXRobXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRvY3VtZW50YXRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubmFtZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19uYW1lJ10pIHtcclxuICAgICAgaWYgKHRoaXMubmFtZSkgeyB0aGlzLm5hbWUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbmFtZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fbmFtZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVmaW5pdGlvbiddKSB7IHRoaXMuZGVmaW5pdGlvbiA9IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoe3ZhbHVlOiBzb3VyY2UuZGVmaW5pdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVmaW5pdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlZmluaXRpb24pIHsgdGhpcy5kZWZpbml0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RlZmluaXRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kZWZpbml0aW9uID0gbmV3IGZoaXIuRmhpckNhbm9uaWNhbChzb3VyY2UuX2RlZmluaXRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJDYW5vbmljYWxBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZTxTZWFyY2hQYXJhbVR5cGVDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UudHlwZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3R5cGUnXSkge1xyXG4gICAgICBpZiAodGhpcy50eXBlKSB7IHRoaXMudHlwZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl90eXBlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJDb2RlPFNlYXJjaFBhcmFtVHlwZUNvZGVUeXBlPihzb3VyY2UuX3R5cGUgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RvY3VtZW50YXRpb24nXSkgeyB0aGlzLmRvY3VtZW50YXRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UuZG9jdW1lbnRhdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZG9jdW1lbnRhdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRvY3VtZW50YXRpb24pIHsgdGhpcy5kb2N1bWVudGF0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RvY3VtZW50YXRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kb2N1bWVudGF0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHNvdXJjZS5fZG9jdW1lbnRhdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpck1hcmtkb3duQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5zZWFyY2hQYXJhbScgfVxyXG4gICAgdGhpcy52UmVxUygnbmFtZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ2RlZmluaXRpb24nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZSZXFTVigndHlwZScsZXhwcmVzc2lvbiwnU2VhcmNoUGFyYW1UeXBlJyxTZWFyY2hQYXJhbVR5cGVWc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52T3B0UygnZG9jdW1lbnRhdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlT3BlcmF0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VPcGVyYXRpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBoZXJlIFNIT1VMRCBiZSB0aGUgc2FtZSBhcyB0aGUgbmFtZSBpbiB0aGUgZGVmaW5pdGlvbiwgdW5sZXNzIHRoZXJlIGlzIGEgbmFtZSBjbGFzaCBhbmQgdGhlIG5hbWUgY2Fubm90IGJlIHVzZWQuIFRoZSBuYW1lIGRvZXMgbm90IGluY2x1ZGUgdGhlIFwiJFwiIHBvcnRpb24gdGhhdCBpcyBhbHdheXMgaW5jbHVkZWQgaW4gdGhlIFVSTC5cclxuICAgKi9cclxuICBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLm9wZXJhdGlvbi5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gYnVpbGQgYW4gSFRNTCBmb3JtIHRvIGludm9rZSB0aGUgb3BlcmF0aW9uLCBmb3IgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgZGVmaW5pdGlvbjogZmhpci5GaGlyQ2Fub25pY2FsfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5vcGVyYXRpb24uZGVmaW5pdGlvblxyXG4gICAqL1xyXG4gIF9kZWZpbml0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBEb2N1bWVudGF0aW9uIHRoYXQgZGVzY3JpYmVzIGFueXRoaW5nIHNwZWNpYWwgYWJvdXQgdGhlIG9wZXJhdGlvbiBiZWhhdmlvciwgcG9zc2libHkgZGV0YWlsaW5nIGRpZmZlcmVudCBiZWhhdmlvciBmb3Igc3lzdGVtLCB0eXBlIGFuZCBpbnN0YW5jZS1sZXZlbCBpbnZvY2F0aW9uIG9mIHRoZSBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgZG9jdW1lbnRhdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5vcGVyYXRpb24uZG9jdW1lbnRhdGlvblxyXG4gICAqL1xyXG4gIF9kb2N1bWVudGF0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wZXJhdGlvbnMgbGlua2VkIGZyb20gQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLm9wZXJhdGlvbiBtdXN0IGhhdmUgT3BlcmF0aW9uRGVmaW5pdGlvbi50eXBlID0gdHJ1ZSBvciBPcGVyYXRpb25EZWZpbml0aW9uLmluc3RhbmNlID0gdHJ1ZS4gICAgXHJcbiAqIElmIGFuIG9wZXJhdGlvbiB0aGF0IGlzIGxpc3RlZCBpbiBtdWx0aXBsZSBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2Uub3BlcmF0aW9uIChlLmcuIGZvciBkaWZmZXJlbnQgcmVzb3VyY2UgdHlwZXMpLCB0aGVuIGNsaWVudHMgc2hvdWxkIHVuZGVyc3RhbmQgdGhhdCB0aGUgb3BlcmF0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIG9uIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgdHlwZXMsIGFuZCB0aGF0IG1heSBiZSBhIHN1YnNldCBvZiB0aG9zZSBsaXN0ZWQgaW4gT3BlcmF0aW9uRGVmaW5pdGlvbi5yZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlT3BlcmF0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZU9wZXJhdGlvbic7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaGVyZSBTSE9VTEQgYmUgdGhlIHNhbWUgYXMgdGhlIG5hbWUgaW4gdGhlIGRlZmluaXRpb24sIHVubGVzcyB0aGVyZSBpcyBhIG5hbWUgY2xhc2ggYW5kIHRoZSBuYW1lIGNhbm5vdCBiZSB1c2VkLiBUaGUgbmFtZSBkb2VzIG5vdCBpbmNsdWRlIHRoZSBcIiRcIiBwb3J0aW9uIHRoYXQgaXMgYWx3YXlzIGluY2x1ZGVkIGluIHRoZSBVUkwuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gYnVpbGQgYW4gSFRNTCBmb3JtIHRvIGludm9rZSB0aGUgb3BlcmF0aW9uLCBmb3IgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIGRlZmluaXRpb246IGZoaXIuRmhpckNhbm9uaWNhbHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERvY3VtZW50YXRpb24gdGhhdCBkZXNjcmliZXMgYW55dGhpbmcgc3BlY2lhbCBhYm91dCB0aGUgb3BlcmF0aW9uIGJlaGF2aW9yLCBwb3NzaWJseSBkZXRhaWxpbmcgZGlmZmVyZW50IGJlaGF2aW9yIGZvciBzeXN0ZW0sIHR5cGUgYW5kIGluc3RhbmNlLWxldmVsIGludm9jYXRpb24gb2YgdGhlIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZG9jdW1lbnRhdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlT3BlcmF0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZU9wZXJhdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5uYW1lfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm5hbWUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfbmFtZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLm5hbWUpIHsgdGhpcy5uYW1lLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX25hbWUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX25hbWUgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RlZmluaXRpb24nXSkgeyB0aGlzLmRlZmluaXRpb24gPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogc291cmNlLmRlZmluaXRpb259KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZGVmaW5pdGlvbiA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZWZpbml0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbikgeyB0aGlzLmRlZmluaXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVmaW5pdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlZmluaXRpb24gPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHNvdXJjZS5fZGVmaW5pdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZG9jdW1lbnRhdGlvbiddKSB7IHRoaXMuZG9jdW1lbnRhdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kb2N1bWVudGF0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kb2N1bWVudGF0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZG9jdW1lbnRhdGlvbikgeyB0aGlzLmRvY3VtZW50YXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZG9jdW1lbnRhdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRvY3VtZW50YXRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oc291cmNlLl9kb2N1bWVudGF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyTWFya2Rvd25BcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLm9wZXJhdGlvbicgfVxyXG4gICAgdGhpcy52UmVxUygnbmFtZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudlJlcVMoJ2RlZmluaXRpb24nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdkb2N1bWVudGF0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2UgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEEgdHlwZSBvZiByZXNvdXJjZSBleHBvc2VkIHZpYSB0aGUgcmVzdGZ1bCBpbnRlcmZhY2UuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2UudHlwZVxyXG4gICAqL1xyXG4gIF90eXBlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgcHJvZmlsZSBhcHBsaWVzIHRvIGFsbCAgcmVzb3VyY2VzIG9mIHRoaXMgdHlwZSAtIGkuZS4gaXQgaXMgdGhlIHN1cGVyc2V0IG9mIHdoYXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgcHJvZmlsZT86IGZoaXIuRmhpckNhbm9uaWNhbHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2UucHJvZmlsZVxyXG4gICAqL1xyXG4gIF9wcm9maWxlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBTdXBwb3J0ZWQgcHJvZmlsZXMgYXJlIGRpZmZlcmVudCB0aGFuIHRoZSBwcm9maWxlIHRoYXQgYXBwbGllcyB0byBhIHBhcnRpY3VsYXIgcmVzb3VyY2UgaW4gLnJlc3QucmVzb3VyY2UucHJvZmlsZS4gVGhlIHJlc291cmNlIHByb2ZpbGUgaXMgYSBnZW5lcmFsIHN0YXRlbWVudCBvZiB3aGF0IGZlYXR1cmVzIG9mIHRoZSByZXNvdXJjZSBhcmUgc3VwcG9ydGVkIG92ZXJhbGwgYnkgdGhlIHN5c3RlbSAtIHRoZSBzdW0gdG90YWwgb2YgdGhlIGZhY2lsaXRpZXMgaXQgc3VwcG9ydHMuIEEgc3VwcG9ydGVkIHByb2ZpbGUgaXMgYSBkZWVwZXIgc3RhdGVtZW50IGFib3V0IHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZSBkYXRhIGFuZCBzZXJ2aWNlcyBwcm92aWRlZCBieSB0aGUgc2VydmVyIChvciB1c2VkIGJ5IHRoZSBjbGllbnQpLiBBIHR5cGljYWwgY2FzZSBpcyBhIGxhYm9yYXRvcnkgc3lzdGVtIHRoYXQgcHJvZHVjZXMgYSBzZXQgb2YgZGlmZmVyZW50IHJlcG9ydHMgLSB0aGlzIGlzIHRoZSBsaXN0IG9mIHR5cGVzIG9mIGRhdGEgdGhhdCBpdCBwdWJsaXNoZXMuIEEga2V5IGFzcGVjdCBvZiBkZWNsYXJpbmcgcHJvZmlsZXMgaGVyZSBpcyB0aGUgcXVlc3Rpb24gb2YgaG93IHRoZSBjbGllbnQgY29udmVydHMga25vd2xlZGdlIHRoYXQgdGhlIHNlcnZlciBwdWJsaXNoZXMgdGhpcyBkYXRhIGludG8gd29ya2luZyB3aXRoIHRoZSBkYXRhOyB0aGUgY2xpZW50IGNhbiBpbnNwZWN0IGluZGl2aWR1YWwgcmVzb3VyY2VzIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgY29uZm9ybSB0byBhIHBhcnRpY3VsYXIgcHJvZmlsZSwgYnV0IGhvdyBkb2VzIGl0IGZpbmQgdGhlIG9uZXMgdGhhdCBkbz8gSXQgZG9lcyBzbyBieSBzZWFyY2hpbmcgdXNpbmcgdGhlIF9wcm9maWxlIHBhcmFtZXRlciwgc28gYW55IHJlc291cmNlcyBsaXN0ZWQgaGVyZSBtdXN0IGJlIHZhbGlkIHZhbHVlcyBmb3IgdGhlIF9wcm9maWxlIHJlc291cmNlICh1c2luZyB0aGUgaWRlbnRpZmllciBpbiB0aGUgdGFyZ2V0IHByb2ZpbGUpLlxyXG4gICAqL1xyXG4gIHN1cHBvcnRlZFByb2ZpbGU/OiBmaGlyLkZoaXJDYW5vbmljYWxbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2Uuc3VwcG9ydGVkUHJvZmlsZVxyXG4gICAqL1xyXG4gIF9zdXBwb3J0ZWRQcm9maWxlPzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXNvdXJjZSB0eXBlIHVzZWQgYnkgdGhlIHN5c3RlbS5cclxuICAgKi9cclxuICBkb2N1bWVudGF0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLmRvY3VtZW50YXRpb25cclxuICAgKi9cclxuICBfZG9jdW1lbnRhdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW4gZ2VuZXJhbCwgYSBSZXNvdXJjZSB3aWxsIG9ubHkgYXBwZWFyIGluIGEgQ2FwYWJpbGl0eVN0YXRlbWVudCBpZiB0aGUgc2VydmVyIGFjdHVhbGx5IGhhcyBzb21lIGNhcGFiaWxpdGllcyAtIGUuZy4gdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGludGVyYWN0aW9uIHN1cHBvcnRlZC4gSG93ZXZlciBpbnRlcmFjdGlvbnMgY2FuIGJlIG9taXR0ZWQgdG8gc3VwcG9ydCBzdW1tYXJpemF0aW9uIChfc3VtbWFyeSA9IHRydWUpLlxyXG4gICAqL1xyXG4gIGludGVyYWN0aW9uPzogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlSW50ZXJhY3Rpb25BcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIGEgc2VydmVyIHN1cHBvcnRzIHZlcnNpb25JZHMgY29ycmVjdGx5LCBpdCBTSE9VTEQgc3VwcG9ydCB2cmVhZCB0b28sIGJ1dCBpcyBub3QgcmVxdWlyZWQgdG8gZG8gc28uXHJcbiAgICovXHJcbiAgdmVyc2lvbmluZz86IGZoaXIuRmhpckNvZGU8VmVyc2lvbmluZ1BvbGljeUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2UudmVyc2lvbmluZ1xyXG4gICAqL1xyXG4gIF92ZXJzaW9uaW5nPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBJdCBpcyB1c2VmdWwgdG8gc3VwcG9ydCB0aGUgdlJlYWQgb3BlcmF0aW9uIGZvciBjdXJyZW50IG9wZXJhdGlvbnMsIGV2ZW4gaWYgcGFzdCB2ZXJzaW9ucyBhcmVuJ3QgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIHJlYWRIaXN0b3J5PzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLnJlYWRIaXN0b3J5XHJcbiAgICovXHJcbiAgX3JlYWRIaXN0b3J5PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBbGxvd2luZyB0aGUgY2xpZW50cyB0byBjcmVhdGUgbmV3IGlkZW50aXRpZXMgb24gdGhlIHNlcnZlciBtZWFucyB0aGF0IHRoZSBzeXN0ZW0gYWRtaW5pc3RyYXRvciBuZWVkcyB0byBoYXZlIGNvbmZpZGVuY2UgdGhhdCB0aGUgY2xpZW50cyBkbyBub3QgY3JlYXRlIGNsYXNoaW5nIGlkZW50aXRpZXMgYmV0d2VlbiB0aGVtLiBPYnZpb3VzbHksIGlmIHRoZXJlIGlzIG9ubHkgb25lIGNsaWVudCwgdGhpcyB3b24ndCBoYXBwZW4uIFdoaWxlIGNyZWF0aW5nIGlkZW50aXRpZXMgb24gdGhlIGNsaWVudCBtZWFucyB0aGF0IHRoZSBjbGllbnRzIG5lZWQgdG8gYmUgbWFuYWdlZCwgaXQncyBtdWNoIG1vcmUgY29udmVuaWVudCBmb3IgbWFueSBzY2VuYXJpb3MgaWYgc3VjaCBtYW5hZ2VtZW50IGNhbiBiZSBwdXQgaW4gcGxhY2UuXHJcbiAgICovXHJcbiAgdXBkYXRlQ3JlYXRlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLnVwZGF0ZUNyZWF0ZVxyXG4gICAqL1xyXG4gIF91cGRhdGVDcmVhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIENvbmRpdGlvbmFsIENyZWF0ZSBpcyBtYWlubHkgYXBwcm9wcmlhdGUgZm9yIGludGVyZmFjZSBlbmdpbmUgc2NyaXB0cyBjb252ZXJ0aW5nIGZyb20gb3RoZXIgZm9ybWF0cywgc3VjaCBhcyB2Mi5cclxuICAgKi9cclxuICBjb25kaXRpb25hbENyZWF0ZT86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5jb25kaXRpb25hbENyZWF0ZVxyXG4gICAqL1xyXG4gIF9jb25kaXRpb25hbENyZWF0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29uZGl0aW9uYWwgUmVhZCBpcyBtYWlubHkgYXBwcm9wcmlhdGUgZm9yIGludGVyZmFjZSBlbmdpbmUgc2NyaXB0cyBjb252ZXJ0aW5nIGZyb20gb3RoZXIgZm9ybWF0cywgc3VjaCBhcyB2Mi5cclxuICAgKi9cclxuICBjb25kaXRpb25hbFJlYWQ/OiBmaGlyLkZoaXJDb2RlPENvbmRpdGlvbmFsUmVhZFN0YXR1c0NvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2UuY29uZGl0aW9uYWxSZWFkXHJcbiAgICovXHJcbiAgX2NvbmRpdGlvbmFsUmVhZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQ29uZGl0aW9uYWwgVXBkYXRlIGlzIG1haW5seSBhcHByb3ByaWF0ZSBmb3IgaW50ZXJmYWNlIGVuZ2luZSBzY3JpcHRzIGNvbnZlcnRpbmcgZnJvbSBvdGhlciBmb3JtYXRzLCBzdWNoIGFzIHYyLlxyXG4gICAqL1xyXG4gIGNvbmRpdGlvbmFsVXBkYXRlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLmNvbmRpdGlvbmFsVXBkYXRlXHJcbiAgICovXHJcbiAgX2NvbmRpdGlvbmFsVXBkYXRlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBDb25kaXRpb25hbCBEZWxldGUgaXMgbWFpbmx5IGFwcHJvcHJpYXRlIGZvciBpbnRlcmZhY2UgZW5naW5lIHNjcmlwdHMgY29udmVydGluZyBmcm9tIG90aGVyIGZvcm1hdHMsIHN1Y2ggYXMgdjIuXHJcbiAgICovXHJcbiAgY29uZGl0aW9uYWxEZWxldGU/OiBmaGlyLkZoaXJDb2RlPENvbmRpdGlvbmFsRGVsZXRlU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5jb25kaXRpb25hbERlbGV0ZVxyXG4gICAqL1xyXG4gIF9jb25kaXRpb25hbERlbGV0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBzZXQgb2YgZmxhZ3MgdGhhdCBkZWZpbmVzIGhvdyByZWZlcmVuY2VzIGFyZSBzdXBwb3J0ZWQuXHJcbiAgICovXHJcbiAgcmVmZXJlbmNlUG9saWN5PzogZmhpci5GaGlyQ29kZTxSZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGVUeXBlPltdfChzdHJpbmd8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5yZWZlcmVuY2VQb2xpY3lcclxuICAgKi9cclxuICBfcmVmZXJlbmNlUG9saWN5PzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBJZiB0aGlzIGxpc3QgaXMgZW1wdHksIHRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCBpbmNsdWRlcy5cclxuICAgKi9cclxuICBzZWFyY2hJbmNsdWRlPzogZmhpci5GaGlyU3RyaW5nW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLnNlYXJjaEluY2x1ZGVcclxuICAgKi9cclxuICBfc2VhcmNoSW5jbHVkZT86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyBsaXN0IGlzIGVtcHR5LCB0aGUgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgcmV2ZXJzZSBpbmNsdWRlcy5cclxuICAgKi9cclxuICBzZWFyY2hSZXZJbmNsdWRlPzogZmhpci5GaGlyU3RyaW5nW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLnNlYXJjaFJldkluY2x1ZGVcclxuICAgKi9cclxuICBfc2VhcmNoUmV2SW5jbHVkZT86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlYXJjaCBwYXJhbWV0ZXJzIHNob3VsZCBpbmNsdWRlIHRoZSBjb250cm9sIHNlYXJjaCBwYXJhbWV0ZXJzIHN1Y2ggYXMgX3NvcnQsIF9jb3VudCwgZXRjLiB0aGF0IGFsc28gYXBwbHkgdG8gdGhpcyByZXNvdXJjZSAodGhvdWdoIG1hbnkgd2lsbCBiZSBsaXN0ZWQgYXQgW0NhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5zZWFyY2hQYXJhbV0oY2FwYWJpbGl0eXN0YXRlbWVudC1kZWZpbml0aW9ucy5odG1sI0NhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5zZWFyY2hQYXJhbSkpLiBUaGUgYmVoYXZpb3Igb2Ygc29tZSBzZWFyY2ggcGFyYW1ldGVycyBtYXkgYmUgZnVydGhlciBkZXNjcmliZWQgYnkgb3RoZXIgY29kZSBvciBleHRlbnNpb24gZWxlbWVudHMsIG9yIG5hcnJhdGl2ZSB3aXRoaW4gdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IG9yIGxpbmtlZCBbU2VhcmNoUGFyYW1ldGVyXShzZWFyY2hwYXJhbWV0ZXIuaHRtbCMpIGRlZmluaXRpb25zLlxyXG4gICAqL1xyXG4gIHNlYXJjaFBhcmFtPzogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlU2VhcmNoUGFyYW1BcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE9wZXJhdGlvbnMgbGlua2VkIGZyb20gQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLm9wZXJhdGlvbiBtdXN0IGhhdmUgT3BlcmF0aW9uRGVmaW5pdGlvbi50eXBlID0gdHJ1ZSBvciBPcGVyYXRpb25EZWZpbml0aW9uLmluc3RhbmNlID0gdHJ1ZS4gICAgXHJcbiAgICogSWYgYW4gb3BlcmF0aW9uIHRoYXQgaXMgbGlzdGVkIGluIG11bHRpcGxlIENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5yZXNvdXJjZS5vcGVyYXRpb24gKGUuZy4gZm9yIGRpZmZlcmVudCByZXNvdXJjZSB0eXBlcyksIHRoZW4gY2xpZW50cyBzaG91bGQgdW5kZXJzdGFuZCB0aGF0IHRoZSBvcGVyYXRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gdGhlIHNwZWNpZmllZCByZXNvdXJjZSB0eXBlcywgYW5kIHRoYXQgbWF5IGJlIGEgc3Vic2V0IG9mIHRob3NlIGxpc3RlZCBpbiBPcGVyYXRpb25EZWZpbml0aW9uLnJlc291cmNlLlxyXG4gICAqL1xyXG4gIG9wZXJhdGlvbj86IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZU9wZXJhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXggb2Ygb25lIHJlcGV0aXRpb24gcGVyIHJlc291cmNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2UnO1xyXG4gIC8qKlxyXG4gICAqIEEgdHlwZSBvZiByZXNvdXJjZSBleHBvc2VkIHZpYSB0aGUgcmVzdGZ1bCBpbnRlcmZhY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuRmhpckNvZGV8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgcHJvZmlsZSBhcHBsaWVzIHRvIGFsbCAgcmVzb3VyY2VzIG9mIHRoaXMgdHlwZSAtIGkuZS4gaXQgaXMgdGhlIHN1cGVyc2V0IG9mIHdoYXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgcHVibGljIHByb2ZpbGU/OiBmaGlyLkZoaXJDYW5vbmljYWx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN1cHBvcnRlZCBwcm9maWxlcyBhcmUgZGlmZmVyZW50IHRoYW4gdGhlIHByb2ZpbGUgdGhhdCBhcHBsaWVzIHRvIGEgcGFydGljdWxhciByZXNvdXJjZSBpbiAucmVzdC5yZXNvdXJjZS5wcm9maWxlLiBUaGUgcmVzb3VyY2UgcHJvZmlsZSBpcyBhIGdlbmVyYWwgc3RhdGVtZW50IG9mIHdoYXQgZmVhdHVyZXMgb2YgdGhlIHJlc291cmNlIGFyZSBzdXBwb3J0ZWQgb3ZlcmFsbCBieSB0aGUgc3lzdGVtIC0gdGhlIHN1bSB0b3RhbCBvZiB0aGUgZmFjaWxpdGllcyBpdCBzdXBwb3J0cy4gQSBzdXBwb3J0ZWQgcHJvZmlsZSBpcyBhIGRlZXBlciBzdGF0ZW1lbnQgYWJvdXQgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIGRhdGEgYW5kIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXIgKG9yIHVzZWQgYnkgdGhlIGNsaWVudCkuIEEgdHlwaWNhbCBjYXNlIGlzIGEgbGFib3JhdG9yeSBzeXN0ZW0gdGhhdCBwcm9kdWNlcyBhIHNldCBvZiBkaWZmZXJlbnQgcmVwb3J0cyAtIHRoaXMgaXMgdGhlIGxpc3Qgb2YgdHlwZXMgb2YgZGF0YSB0aGF0IGl0IHB1Ymxpc2hlcy4gQSBrZXkgYXNwZWN0IG9mIGRlY2xhcmluZyBwcm9maWxlcyBoZXJlIGlzIHRoZSBxdWVzdGlvbiBvZiBob3cgdGhlIGNsaWVudCBjb252ZXJ0cyBrbm93bGVkZ2UgdGhhdCB0aGUgc2VydmVyIHB1Ymxpc2hlcyB0aGlzIGRhdGEgaW50byB3b3JraW5nIHdpdGggdGhlIGRhdGE7IHRoZSBjbGllbnQgY2FuIGluc3BlY3QgaW5kaXZpZHVhbCByZXNvdXJjZXMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhleSBjb25mb3JtIHRvIGEgcGFydGljdWxhciBwcm9maWxlLCBidXQgaG93IGRvZXMgaXQgZmluZCB0aGUgb25lcyB0aGF0IGRvPyBJdCBkb2VzIHNvIGJ5IHNlYXJjaGluZyB1c2luZyB0aGUgX3Byb2ZpbGUgcGFyYW1ldGVyLCBzbyBhbnkgcmVzb3VyY2VzIGxpc3RlZCBoZXJlIG11c3QgYmUgdmFsaWQgdmFsdWVzIGZvciB0aGUgX3Byb2ZpbGUgcmVzb3VyY2UgKHVzaW5nIHRoZSBpZGVudGlmaWVyIGluIHRoZSB0YXJnZXQgcHJvZmlsZSkuXHJcbiAgICovXHJcbiAgcHVibGljIHN1cHBvcnRlZFByb2ZpbGU6IGZoaXIuRmhpckNhbm9uaWNhbFtdO1xyXG4gIC8qKlxyXG4gICAqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlc291cmNlIHR5cGUgdXNlZCBieSB0aGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb2N1bWVudGF0aW9uPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluIGdlbmVyYWwsIGEgUmVzb3VyY2Ugd2lsbCBvbmx5IGFwcGVhciBpbiBhIENhcGFiaWxpdHlTdGF0ZW1lbnQgaWYgdGhlIHNlcnZlciBhY3R1YWxseSBoYXMgc29tZSBjYXBhYmlsaXRpZXMgLSBlLmcuIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBpbnRlcmFjdGlvbiBzdXBwb3J0ZWQuIEhvd2V2ZXIgaW50ZXJhY3Rpb25zIGNhbiBiZSBvbWl0dGVkIHRvIHN1cHBvcnQgc3VtbWFyaXphdGlvbiAoX3N1bW1hcnkgPSB0cnVlKS5cclxuICAgKi9cclxuICBwdWJsaWMgaW50ZXJhY3Rpb246IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZUludGVyYWN0aW9uW107XHJcbiAgLyoqXHJcbiAgICogSWYgYSBzZXJ2ZXIgc3VwcG9ydHMgdmVyc2lvbklkcyBjb3JyZWN0bHksIGl0IFNIT1VMRCBzdXBwb3J0IHZyZWFkIHRvbywgYnV0IGlzIG5vdCByZXF1aXJlZCB0byBkbyBzby5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbmluZz86IGZoaXIuRmhpckNvZGU8VmVyc2lvbmluZ1BvbGljeUNvZGVUeXBlPnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSXQgaXMgdXNlZnVsIHRvIHN1cHBvcnQgdGhlIHZSZWFkIG9wZXJhdGlvbiBmb3IgY3VycmVudCBvcGVyYXRpb25zLCBldmVuIGlmIHBhc3QgdmVyc2lvbnMgYXJlbid0IGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhZEhpc3Rvcnk/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd2luZyB0aGUgY2xpZW50cyB0byBjcmVhdGUgbmV3IGlkZW50aXRpZXMgb24gdGhlIHNlcnZlciBtZWFucyB0aGF0IHRoZSBzeXN0ZW0gYWRtaW5pc3RyYXRvciBuZWVkcyB0byBoYXZlIGNvbmZpZGVuY2UgdGhhdCB0aGUgY2xpZW50cyBkbyBub3QgY3JlYXRlIGNsYXNoaW5nIGlkZW50aXRpZXMgYmV0d2VlbiB0aGVtLiBPYnZpb3VzbHksIGlmIHRoZXJlIGlzIG9ubHkgb25lIGNsaWVudCwgdGhpcyB3b24ndCBoYXBwZW4uIFdoaWxlIGNyZWF0aW5nIGlkZW50aXRpZXMgb24gdGhlIGNsaWVudCBtZWFucyB0aGF0IHRoZSBjbGllbnRzIG5lZWQgdG8gYmUgbWFuYWdlZCwgaXQncyBtdWNoIG1vcmUgY29udmVuaWVudCBmb3IgbWFueSBzY2VuYXJpb3MgaWYgc3VjaCBtYW5hZ2VtZW50IGNhbiBiZSBwdXQgaW4gcGxhY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZUNyZWF0ZT86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbmRpdGlvbmFsIENyZWF0ZSBpcyBtYWlubHkgYXBwcm9wcmlhdGUgZm9yIGludGVyZmFjZSBlbmdpbmUgc2NyaXB0cyBjb252ZXJ0aW5nIGZyb20gb3RoZXIgZm9ybWF0cywgc3VjaCBhcyB2Mi5cclxuICAgKi9cclxuICBwdWJsaWMgY29uZGl0aW9uYWxDcmVhdGU/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb25kaXRpb25hbCBSZWFkIGlzIG1haW5seSBhcHByb3ByaWF0ZSBmb3IgaW50ZXJmYWNlIGVuZ2luZSBzY3JpcHRzIGNvbnZlcnRpbmcgZnJvbSBvdGhlciBmb3JtYXRzLCBzdWNoIGFzIHYyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25kaXRpb25hbFJlYWQ/OiBmaGlyLkZoaXJDb2RlPENvbmRpdGlvbmFsUmVhZFN0YXR1c0NvZGVUeXBlPnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29uZGl0aW9uYWwgVXBkYXRlIGlzIG1haW5seSBhcHByb3ByaWF0ZSBmb3IgaW50ZXJmYWNlIGVuZ2luZSBzY3JpcHRzIGNvbnZlcnRpbmcgZnJvbSBvdGhlciBmb3JtYXRzLCBzdWNoIGFzIHYyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25kaXRpb25hbFVwZGF0ZT86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbmRpdGlvbmFsIERlbGV0ZSBpcyBtYWlubHkgYXBwcm9wcmlhdGUgZm9yIGludGVyZmFjZSBlbmdpbmUgc2NyaXB0cyBjb252ZXJ0aW5nIGZyb20gb3RoZXIgZm9ybWF0cywgc3VjaCBhcyB2Mi5cclxuICAgKi9cclxuICBwdWJsaWMgY29uZGl0aW9uYWxEZWxldGU/OiBmaGlyLkZoaXJDb2RlPENvbmRpdGlvbmFsRGVsZXRlU3RhdHVzQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHNldCBvZiBmbGFncyB0aGF0IGRlZmluZXMgaG93IHJlZmVyZW5jZXMgYXJlIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVmZXJlbmNlUG9saWN5OiBmaGlyLkZoaXJDb2RlPFJlZmVyZW5jZUhhbmRsaW5nUG9saWN5Q29kZVR5cGU+W107XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyBsaXN0IGlzIGVtcHR5LCB0aGUgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgaW5jbHVkZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHNlYXJjaEluY2x1ZGU6IGZoaXIuRmhpclN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoaXMgbGlzdCBpcyBlbXB0eSwgdGhlIHNlcnZlciBkb2VzIG5vdCBzdXBwb3J0IHJldmVyc2UgaW5jbHVkZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHNlYXJjaFJldkluY2x1ZGU6IGZoaXIuRmhpclN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZWFyY2ggcGFyYW1ldGVycyBzaG91bGQgaW5jbHVkZSB0aGUgY29udHJvbCBzZWFyY2ggcGFyYW1ldGVycyBzdWNoIGFzIF9zb3J0LCBfY291bnQsIGV0Yy4gdGhhdCBhbHNvIGFwcGx5IHRvIHRoaXMgcmVzb3VyY2UgKHRob3VnaCBtYW55IHdpbGwgYmUgbGlzdGVkIGF0IFtDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Quc2VhcmNoUGFyYW1dKGNhcGFiaWxpdHlzdGF0ZW1lbnQtZGVmaW5pdGlvbnMuaHRtbCNDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Quc2VhcmNoUGFyYW0pKS4gVGhlIGJlaGF2aW9yIG9mIHNvbWUgc2VhcmNoIHBhcmFtZXRlcnMgbWF5IGJlIGZ1cnRoZXIgZGVzY3JpYmVkIGJ5IG90aGVyIGNvZGUgb3IgZXh0ZW5zaW9uIGVsZW1lbnRzLCBvciBuYXJyYXRpdmUgd2l0aGluIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCBvciBsaW5rZWQgW1NlYXJjaFBhcmFtZXRlcl0oc2VhcmNocGFyYW1ldGVyLmh0bWwjKSBkZWZpbml0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgc2VhcmNoUGFyYW06IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtW107XHJcbiAgLyoqXHJcbiAgICogT3BlcmF0aW9ucyBsaW5rZWQgZnJvbSBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2Uub3BlcmF0aW9uIG11c3QgaGF2ZSBPcGVyYXRpb25EZWZpbml0aW9uLnR5cGUgPSB0cnVlIG9yIE9wZXJhdGlvbkRlZmluaXRpb24uaW5zdGFuY2UgPSB0cnVlLiAgICBcclxuICAgKiBJZiBhbiBvcGVyYXRpb24gdGhhdCBpcyBsaXN0ZWQgaW4gbXVsdGlwbGUgQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLm9wZXJhdGlvbiAoZS5nLiBmb3IgZGlmZmVyZW50IHJlc291cmNlIHR5cGVzKSwgdGhlbiBjbGllbnRzIHNob3VsZCB1bmRlcnN0YW5kIHRoYXQgdGhlIG9wZXJhdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiB0aGUgc3BlY2lmaWVkIHJlc291cmNlIHR5cGVzLCBhbmQgdGhhdCBtYXkgYmUgYSBzdWJzZXQgb2YgdGhvc2UgbGlzdGVkIGluIE9wZXJhdGlvbkRlZmluaXRpb24ucmVzb3VyY2UuXHJcbiAgICovXHJcbiAgcHVibGljIG9wZXJhdGlvbjogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlT3BlcmF0aW9uW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogc291cmNlLnR5cGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ190eXBlJ10pIHtcclxuICAgICAgaWYgKHRoaXMudHlwZSkgeyB0aGlzLnR5cGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdHlwZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZShzb3VyY2UuX3R5cGUgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwcm9maWxlJ10pIHsgdGhpcy5wcm9maWxlID0gbmV3IGZoaXIuRmhpckNhbm9uaWNhbCh7dmFsdWU6IHNvdXJjZS5wcm9maWxlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wcm9maWxlJ10pIHtcclxuICAgICAgaWYgKHRoaXMucHJvZmlsZSkgeyB0aGlzLnByb2ZpbGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcHJvZmlsZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnByb2ZpbGUgPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHNvdXJjZS5fcHJvZmlsZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3VwcG9ydGVkUHJvZmlsZSddKSB7IHRoaXMuc3VwcG9ydGVkUHJvZmlsZSA9IHNvdXJjZS5zdXBwb3J0ZWRQcm9maWxlLm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpckNhbm9uaWNhbCh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN1cHBvcnRlZFByb2ZpbGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N1cHBvcnRlZFByb2ZpbGUnXSkge1xyXG4gICAgICBzb3VyY2UuX3N1cHBvcnRlZFByb2ZpbGUuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydGVkUHJvZmlsZS5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLnN1cHBvcnRlZFByb2ZpbGVbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5zdXBwb3J0ZWRQcm9maWxlLnB1c2gobmV3IGZoaXIuRmhpckNhbm9uaWNhbCh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyQ2Fub25pY2FsQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZG9jdW1lbnRhdGlvbiddKSB7IHRoaXMuZG9jdW1lbnRhdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kb2N1bWVudGF0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kb2N1bWVudGF0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZG9jdW1lbnRhdGlvbikgeyB0aGlzLmRvY3VtZW50YXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZG9jdW1lbnRhdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRvY3VtZW50YXRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oc291cmNlLl9kb2N1bWVudGF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyTWFya2Rvd25BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2ludGVyYWN0aW9uJ10pIHsgdGhpcy5pbnRlcmFjdGlvbiA9IHNvdXJjZS5pbnRlcmFjdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VJbnRlcmFjdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmludGVyYWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZlcnNpb25pbmcnXSkgeyB0aGlzLnZlcnNpb25pbmcgPSBuZXcgZmhpci5GaGlyQ29kZTxWZXJzaW9uaW5nUG9saWN5Q29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnZlcnNpb25pbmd9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ZlcnNpb25pbmcnXSkge1xyXG4gICAgICBpZiAodGhpcy52ZXJzaW9uaW5nKSB7IHRoaXMudmVyc2lvbmluZy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl92ZXJzaW9uaW5nISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudmVyc2lvbmluZyA9IG5ldyBmaGlyLkZoaXJDb2RlPFZlcnNpb25pbmdQb2xpY3lDb2RlVHlwZT4oc291cmNlLl92ZXJzaW9uaW5nIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZWFkSGlzdG9yeSddKSB7IHRoaXMucmVhZEhpc3RvcnkgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5yZWFkSGlzdG9yeX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcmVhZEhpc3RvcnknXSkge1xyXG4gICAgICBpZiAodGhpcy5yZWFkSGlzdG9yeSkgeyB0aGlzLnJlYWRIaXN0b3J5LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3JlYWRIaXN0b3J5ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucmVhZEhpc3RvcnkgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX3JlYWRIaXN0b3J5IGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndXBkYXRlQ3JlYXRlJ10pIHsgdGhpcy51cGRhdGVDcmVhdGUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS51cGRhdGVDcmVhdGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3VwZGF0ZUNyZWF0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnVwZGF0ZUNyZWF0ZSkgeyB0aGlzLnVwZGF0ZUNyZWF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl91cGRhdGVDcmVhdGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy51cGRhdGVDcmVhdGUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX3VwZGF0ZUNyZWF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbmRpdGlvbmFsQ3JlYXRlJ10pIHsgdGhpcy5jb25kaXRpb25hbENyZWF0ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmNvbmRpdGlvbmFsQ3JlYXRlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb25kaXRpb25hbENyZWF0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvbmRpdGlvbmFsQ3JlYXRlKSB7IHRoaXMuY29uZGl0aW9uYWxDcmVhdGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY29uZGl0aW9uYWxDcmVhdGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb25kaXRpb25hbENyZWF0ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fY29uZGl0aW9uYWxDcmVhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb25kaXRpb25hbFJlYWQnXSkgeyB0aGlzLmNvbmRpdGlvbmFsUmVhZCA9IG5ldyBmaGlyLkZoaXJDb2RlPENvbmRpdGlvbmFsUmVhZFN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5jb25kaXRpb25hbFJlYWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvbmRpdGlvbmFsUmVhZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvbmRpdGlvbmFsUmVhZCkgeyB0aGlzLmNvbmRpdGlvbmFsUmVhZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9jb25kaXRpb25hbFJlYWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb25kaXRpb25hbFJlYWQgPSBuZXcgZmhpci5GaGlyQ29kZTxDb25kaXRpb25hbFJlYWRTdGF0dXNDb2RlVHlwZT4oc291cmNlLl9jb25kaXRpb25hbFJlYWQgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbmRpdGlvbmFsVXBkYXRlJ10pIHsgdGhpcy5jb25kaXRpb25hbFVwZGF0ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmNvbmRpdGlvbmFsVXBkYXRlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb25kaXRpb25hbFVwZGF0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvbmRpdGlvbmFsVXBkYXRlKSB7IHRoaXMuY29uZGl0aW9uYWxVcGRhdGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY29uZGl0aW9uYWxVcGRhdGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb25kaXRpb25hbFVwZGF0ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fY29uZGl0aW9uYWxVcGRhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb25kaXRpb25hbERlbGV0ZSddKSB7IHRoaXMuY29uZGl0aW9uYWxEZWxldGUgPSBuZXcgZmhpci5GaGlyQ29kZTxDb25kaXRpb25hbERlbGV0ZVN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5jb25kaXRpb25hbERlbGV0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfY29uZGl0aW9uYWxEZWxldGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5jb25kaXRpb25hbERlbGV0ZSkgeyB0aGlzLmNvbmRpdGlvbmFsRGVsZXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NvbmRpdGlvbmFsRGVsZXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuY29uZGl0aW9uYWxEZWxldGUgPSBuZXcgZmhpci5GaGlyQ29kZTxDb25kaXRpb25hbERlbGV0ZVN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX2NvbmRpdGlvbmFsRGVsZXRlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZWZlcmVuY2VQb2xpY3knXSkgeyB0aGlzLnJlZmVyZW5jZVBvbGljeSA9IHNvdXJjZS5yZWZlcmVuY2VQb2xpY3kubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyQ29kZTxSZWZlcmVuY2VIYW5kbGluZ1BvbGljeUNvZGVUeXBlPih7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlZmVyZW5jZVBvbGljeSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfcmVmZXJlbmNlUG9saWN5J10pIHtcclxuICAgICAgc291cmNlLl9yZWZlcmVuY2VQb2xpY3kuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVmZXJlbmNlUG9saWN5Lmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMucmVmZXJlbmNlUG9saWN5W2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMucmVmZXJlbmNlUG9saWN5LnB1c2gobmV3IGZoaXIuRmhpckNvZGU8UmVmZXJlbmNlSGFuZGxpbmdQb2xpY3lDb2RlVHlwZT4oeCBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NlYXJjaEluY2x1ZGUnXSkgeyB0aGlzLnNlYXJjaEluY2x1ZGUgPSBzb3VyY2Uuc2VhcmNoSW5jbHVkZS5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zZWFyY2hJbmNsdWRlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19zZWFyY2hJbmNsdWRlJ10pIHtcclxuICAgICAgc291cmNlLl9zZWFyY2hJbmNsdWRlLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaEluY2x1ZGUubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5zZWFyY2hJbmNsdWRlW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMuc2VhcmNoSW5jbHVkZS5wdXNoKG5ldyBmaGlyLkZoaXJTdHJpbmcoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NlYXJjaFJldkluY2x1ZGUnXSkgeyB0aGlzLnNlYXJjaFJldkluY2x1ZGUgPSBzb3VyY2Uuc2VhcmNoUmV2SW5jbHVkZS5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zZWFyY2hSZXZJbmNsdWRlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19zZWFyY2hSZXZJbmNsdWRlJ10pIHtcclxuICAgICAgc291cmNlLl9zZWFyY2hSZXZJbmNsdWRlLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaFJldkluY2x1ZGUubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5zZWFyY2hSZXZJbmNsdWRlW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMuc2VhcmNoUmV2SW5jbHVkZS5wdXNoKG5ldyBmaGlyLkZoaXJTdHJpbmcoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NlYXJjaFBhcmFtJ10pIHsgdGhpcy5zZWFyY2hQYXJhbSA9IHNvdXJjZS5zZWFyY2hQYXJhbS5tYXAoKHgpID0+IG5ldyBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VTZWFyY2hQYXJhbSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNlYXJjaFBhcmFtID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ29wZXJhdGlvbiddKSB7IHRoaXMub3BlcmF0aW9uID0gc291cmNlLm9wZXJhdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VPcGVyYXRpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5vcGVyYXRpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2UnIH1cclxuICAgIHRoaXMudlJlcVNWKCd0eXBlJyxleHByZXNzaW9uLCdSZXNvdXJjZVR5cGVzJyxSZXNvdXJjZVR5cGVzVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9wdFMoJ3Byb2ZpbGUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdzdXBwb3J0ZWRQcm9maWxlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnZG9jdW1lbnRhdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2ludGVyYWN0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0U1YoJ3ZlcnNpb25pbmcnLGV4cHJlc3Npb24sJ1ZlcnNpb25pbmdQb2xpY3knLFZlcnNpb25pbmdQb2xpY3lWc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52T3B0UygncmVhZEhpc3RvcnknLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCd1cGRhdGVDcmVhdGUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdjb25kaXRpb25hbENyZWF0ZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFNWKCdjb25kaXRpb25hbFJlYWQnLGV4cHJlc3Npb24sJ0NvbmRpdGlvbmFsUmVhZFN0YXR1cycsQ29uZGl0aW9uYWxSZWFkU3RhdHVzVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9wdFMoJ2NvbmRpdGlvbmFsVXBkYXRlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0U1YoJ2NvbmRpdGlvbmFsRGVsZXRlJyxleHByZXNzaW9uLCdDb25kaXRpb25hbERlbGV0ZVN0YXR1cycsQ29uZGl0aW9uYWxEZWxldGVTdGF0dXNWc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52T3B0QVYoJ3JlZmVyZW5jZVBvbGljeScsZXhwcmVzc2lvbiwnUmVmZXJlbmNlSGFuZGxpbmdQb2xpY3knLFJlZmVyZW5jZUhhbmRsaW5nUG9saWN5VnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9wdEEoJ3NlYXJjaEluY2x1ZGUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdzZWFyY2hSZXZJbmNsdWRlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnc2VhcmNoUGFyYW0nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdvcGVyYXRpb24nLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RJbnRlcmFjdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdEludGVyYWN0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQSBjb2RlZCBpZGVudGlmaWVyIG9mIHRoZSBvcGVyYXRpb24sIHN1cHBvcnRlZCBieSB0aGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIGNvZGU6IGZoaXIuRmhpckNvZGU8U3lzdGVtUmVzdGZ1bEludGVyYWN0aW9uQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5pbnRlcmFjdGlvbi5jb2RlXHJcbiAgICovXHJcbiAgX2NvZGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEd1aWRhbmNlIHNwZWNpZmljIHRvIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG9wZXJhdGlvbiwgc3VjaCBhcyBsaW1pdGF0aW9ucyBvbiB0aGUga2luZCBvZiB0cmFuc2FjdGlvbnMgYWxsb3dlZCwgb3IgaW5mb3JtYXRpb24gYWJvdXQgc3lzdGVtIHdpZGUgc2VhcmNoIGlzIGltcGxlbWVudGVkLlxyXG4gICAqL1xyXG4gIGRvY3VtZW50YXRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QuaW50ZXJhY3Rpb24uZG9jdW1lbnRhdGlvblxyXG4gICAqL1xyXG4gIF9kb2N1bWVudGF0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgc3BlY2lmaWNhdGlvbiBvZiByZXN0ZnVsIG9wZXJhdGlvbnMgc3VwcG9ydGVkIGJ5IHRoZSBzeXN0ZW0uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RJbnRlcmFjdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0SW50ZXJhY3Rpb24nO1xyXG4gIC8qKlxyXG4gICAqIEEgY29kZWQgaWRlbnRpZmllciBvZiB0aGUgb3BlcmF0aW9uLCBzdXBwb3J0ZWQgYnkgdGhlIHN5c3RlbS5cclxuICAgKi9cclxuICBwdWJsaWMgY29kZTogZmhpci5GaGlyQ29kZTxTeXN0ZW1SZXN0ZnVsSW50ZXJhY3Rpb25Db2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBHdWlkYW5jZSBzcGVjaWZpYyB0byB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBvcGVyYXRpb24sIHN1Y2ggYXMgbGltaXRhdGlvbnMgb24gdGhlIGtpbmQgb2YgdHJhbnNhY3Rpb25zIGFsbG93ZWQsIG9yIGluZm9ybWF0aW9uIGFib3V0IHN5c3RlbSB3aWRlIHNlYXJjaCBpcyBpbXBsZW1lbnRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgZG9jdW1lbnRhdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdEludGVyYWN0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2FwYWJpbGl0eVN0YXRlbWVudFJlc3RJbnRlcmFjdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydjb2RlJ10pIHsgdGhpcy5jb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8U3lzdGVtUmVzdGZ1bEludGVyYWN0aW9uQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLmNvZGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY29kZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb2RlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuY29kZSkgeyB0aGlzLmNvZGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY29kZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmNvZGUgPSBuZXcgZmhpci5GaGlyQ29kZTxTeXN0ZW1SZXN0ZnVsSW50ZXJhY3Rpb25Db2RlVHlwZT4oc291cmNlLl9jb2RlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkb2N1bWVudGF0aW9uJ10pIHsgdGhpcy5kb2N1bWVudGF0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmRvY3VtZW50YXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RvY3VtZW50YXRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kb2N1bWVudGF0aW9uKSB7IHRoaXMuZG9jdW1lbnRhdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kb2N1bWVudGF0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZG9jdW1lbnRhdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bihzb3VyY2UuX2RvY3VtZW50YXRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJNYXJrZG93bkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QuaW50ZXJhY3Rpb24nIH1cclxuICAgIHRoaXMudlJlcVNWKCdjb2RlJyxleHByZXNzaW9uLCdTeXN0ZW1SZXN0ZnVsSW50ZXJhY3Rpb24nLFN5c3RlbVJlc3RmdWxJbnRlcmFjdGlvblZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZPcHRTKCdkb2N1bWVudGF0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyB3aGV0aGVyIHRoaXMgcG9ydGlvbiBvZiB0aGUgc3RhdGVtZW50IGlzIGRlc2NyaWJpbmcgdGhlIGFiaWxpdHkgdG8gaW5pdGlhdGUgb3IgcmVjZWl2ZSByZXN0ZnVsIG9wZXJhdGlvbnMuXHJcbiAgICovXHJcbiAgbW9kZTogZmhpci5GaGlyQ29kZTxSZXN0ZnVsQ2FwYWJpbGl0eU1vZGVDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0Lm1vZGVcclxuICAgKi9cclxuICBfbW9kZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIHN5c3RlbSdzIHJlc3RmdWwgY2FwYWJpbGl0aWVzIHRoYXQgYXBwbHkgYWNyb3NzIGFsbCBhcHBsaWNhdGlvbnMsIHN1Y2ggYXMgc2VjdXJpdHkuXHJcbiAgICovXHJcbiAgZG9jdW1lbnRhdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5kb2N1bWVudGF0aW9uXHJcbiAgICovXHJcbiAgX2RvY3VtZW50YXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IHNlY3VyaXR5IGltcGxlbWVudGF0aW9uIGZyb20gYW4gaW50ZXJmYWNlIHBlcnNwZWN0aXZlIC0gd2hhdCBhIGNsaWVudCBuZWVkcyB0byBrbm93LlxyXG4gICAqL1xyXG4gIHNlY3VyaXR5PzogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50UmVzdFNlY3VyaXR5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWF4IG9mIG9uZSByZXBldGl0aW9uIHBlciByZXNvdXJjZSB0eXBlLlxyXG4gICAqL1xyXG4gIHJlc291cmNlPzogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHNwZWNpZmljYXRpb24gb2YgcmVzdGZ1bCBvcGVyYXRpb25zIHN1cHBvcnRlZCBieSB0aGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIGludGVyYWN0aW9uPzogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50UmVzdEludGVyYWN0aW9uQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUeXBpY2FsbHksIHRoZSBvbmx5IHNlYXJjaCBwYXJhbWV0ZXJzIHN1cHBvcnRlZCBmb3IgYWxsIHNlYXJjaGVzIGFyZSB0aG9zZSB0aGF0IGFwcGx5IHRvIGFsbCByZXNvdXJjZXMgLSB0YWdzLCBwcm9maWxlcywgdGV4dCBzZWFyY2ggZXRjLiBUaGVzZSBzZWFyY2ggcGFyYW1ldGVycyBzaG91bGQgaW5jbHVkZSB0aGUgY29udHJvbCBzZWFyY2ggcGFyYW1ldGVycyBzdWNoIGFzIF9zb3J0LCBfY291bnQsIGV0Yy4gdGhhdCBhbHNvIGFwcGx5IHRvIHRoaXMgcmVzb3VyY2UgKHRob3VnaCBtYW55IHdpbGwgYmUgbGlzdGVkIGF0IFtDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Quc2VhcmNoUGFyYW1dKGNhcGFiaWxpdHlzdGF0ZW1lbnQtZGVmaW5pdGlvbnMuaHRtbCNDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Quc2VhcmNoUGFyYW0pKS4gVGhlIGJlaGF2aW9yIG9mIHNvbWUgc2VhcmNoIHBhcmFtZXRlcnMgbWF5IGJlIGZ1cnRoZXIgZGVzY3JpYmVkIGJ5IG90aGVyIGNvZGUgb3IgZXh0ZW5zaW9uIGVsZW1lbnRzLCBvciBuYXJyYXRpdmUgd2l0aGluIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCBvciBsaW5rZWQgW1NlYXJjaFBhcmFtZXRlcl0oc2VhcmNocGFyYW1ldGVyLmh0bWwjKSBkZWZpbml0aW9ucy5cclxuICAgKi9cclxuICBzZWFyY2hQYXJhbT86IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Qub3BlcmF0aW9uIGlzIGZvciBvcGVyYXRpb25zIGludm9rZWQgYXQgdGhlIHN5c3RlbSBsZXZlbCwgb3IgZm9yIG9wZXJhdGlvbnMgdGhhdCBhcmUgc3VwcG9ydGVkIGFjcm9zcyBtdWx0aXBsZSByZXNvdXJjZSB0eXBlcy4gT3BlcmF0aW9ucyBsaW5rZWQgZnJvbSBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Qub3BlcmF0aW9uIG11c3QgaGF2ZSBPcGVyYXRpb25EZWZpbml0aW9uLnN5c3RlbSA9IHRydWUsIG9yIG1vcmUgdGhhbiBvbmUgT3BlcmF0aW9uLnJlc291cmNlLlxyXG4gICAqL1xyXG4gIG9wZXJhdGlvbj86IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZU9wZXJhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQXQgcHJlc2VudCwgdGhlIG9ubHkgZGVmaW5lZCBjb21wYXJ0bWVudHMgYXJlIGF0IFtDb21wYXJ0bWVudERlZmluaXRpb25dKGNvbXBhcnRtZW50ZGVmaW5pdGlvbi5odG1sKS5cclxuICAgKi9cclxuICBjb21wYXJ0bWVudD86IGZoaXIuRmhpckNhbm9uaWNhbFtdfChzdHJpbmd8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucmVzdC5jb21wYXJ0bWVudFxyXG4gICAqL1xyXG4gIF9jb21wYXJ0bWVudD86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsZSByZXBldGl0aW9ucyBhbGxvdyBkZWZpbml0aW9uIG9mIGJvdGggY2xpZW50IGFuZC9vciBzZXJ2ZXIgYmVoYXZpb3JzIG9yIHBvc3NpYmx5IGJlaGF2aW9ycyB1bmRlciBkaWZmZXJlbnQgY29uZmlndXJhdGlvbiBzZXR0aW5ncyAoZm9yIHNvZnR3YXJlIG9yIHJlcXVpcmVtZW50cyBzdGF0ZW1lbnRzKS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXBhYmlsaXR5U3RhdGVtZW50UmVzdCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0JztcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHdoZXRoZXIgdGhpcyBwb3J0aW9uIG9mIHRoZSBzdGF0ZW1lbnQgaXMgZGVzY3JpYmluZyB0aGUgYWJpbGl0eSB0byBpbml0aWF0ZSBvciByZWNlaXZlIHJlc3RmdWwgb3BlcmF0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgbW9kZTogZmhpci5GaGlyQ29kZTxSZXN0ZnVsQ2FwYWJpbGl0eU1vZGVDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgc3lzdGVtJ3MgcmVzdGZ1bCBjYXBhYmlsaXRpZXMgdGhhdCBhcHBseSBhY3Jvc3MgYWxsIGFwcGxpY2F0aW9ucywgc3VjaCBhcyBzZWN1cml0eS5cclxuICAgKi9cclxuICBwdWJsaWMgZG9jdW1lbnRhdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCBzZWN1cml0eSBpbXBsZW1lbnRhdGlvbiBmcm9tIGFuIGludGVyZmFjZSBwZXJzcGVjdGl2ZSAtIHdoYXQgYSBjbGllbnQgbmVlZHMgdG8ga25vdy5cclxuICAgKi9cclxuICBwdWJsaWMgc2VjdXJpdHk/OiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0U2VjdXJpdHl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1heCBvZiBvbmUgcmVwZXRpdGlvbiBwZXIgcmVzb3VyY2UgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzb3VyY2U6IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgc3BlY2lmaWNhdGlvbiBvZiByZXN0ZnVsIG9wZXJhdGlvbnMgc3VwcG9ydGVkIGJ5IHRoZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgcHVibGljIGludGVyYWN0aW9uOiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0SW50ZXJhY3Rpb25bXTtcclxuICAvKipcclxuICAgKiBUeXBpY2FsbHksIHRoZSBvbmx5IHNlYXJjaCBwYXJhbWV0ZXJzIHN1cHBvcnRlZCBmb3IgYWxsIHNlYXJjaGVzIGFyZSB0aG9zZSB0aGF0IGFwcGx5IHRvIGFsbCByZXNvdXJjZXMgLSB0YWdzLCBwcm9maWxlcywgdGV4dCBzZWFyY2ggZXRjLiBUaGVzZSBzZWFyY2ggcGFyYW1ldGVycyBzaG91bGQgaW5jbHVkZSB0aGUgY29udHJvbCBzZWFyY2ggcGFyYW1ldGVycyBzdWNoIGFzIF9zb3J0LCBfY291bnQsIGV0Yy4gdGhhdCBhbHNvIGFwcGx5IHRvIHRoaXMgcmVzb3VyY2UgKHRob3VnaCBtYW55IHdpbGwgYmUgbGlzdGVkIGF0IFtDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Quc2VhcmNoUGFyYW1dKGNhcGFiaWxpdHlzdGF0ZW1lbnQtZGVmaW5pdGlvbnMuaHRtbCNDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3Quc2VhcmNoUGFyYW0pKS4gVGhlIGJlaGF2aW9yIG9mIHNvbWUgc2VhcmNoIHBhcmFtZXRlcnMgbWF5IGJlIGZ1cnRoZXIgZGVzY3JpYmVkIGJ5IG90aGVyIGNvZGUgb3IgZXh0ZW5zaW9uIGVsZW1lbnRzLCBvciBuYXJyYXRpdmUgd2l0aGluIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCBvciBsaW5rZWQgW1NlYXJjaFBhcmFtZXRlcl0oc2VhcmNocGFyYW1ldGVyLmh0bWwjKSBkZWZpbml0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgc2VhcmNoUGFyYW06IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RSZXNvdXJjZVNlYXJjaFBhcmFtW107XHJcbiAgLyoqXHJcbiAgICogQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0Lm9wZXJhdGlvbiBpcyBmb3Igb3BlcmF0aW9ucyBpbnZva2VkIGF0IHRoZSBzeXN0ZW0gbGV2ZWwsIG9yIGZvciBvcGVyYXRpb25zIHRoYXQgYXJlIHN1cHBvcnRlZCBhY3Jvc3MgbXVsdGlwbGUgcmVzb3VyY2UgdHlwZXMuIE9wZXJhdGlvbnMgbGlua2VkIGZyb20gQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0Lm9wZXJhdGlvbiBtdXN0IGhhdmUgT3BlcmF0aW9uRGVmaW5pdGlvbi5zeXN0ZW0gPSB0cnVlLCBvciBtb3JlIHRoYW4gb25lIE9wZXJhdGlvbi5yZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgb3BlcmF0aW9uOiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VPcGVyYXRpb25bXTtcclxuICAvKipcclxuICAgKiBBdCBwcmVzZW50LCB0aGUgb25seSBkZWZpbmVkIGNvbXBhcnRtZW50cyBhcmUgYXQgW0NvbXBhcnRtZW50RGVmaW5pdGlvbl0oY29tcGFydG1lbnRkZWZpbml0aW9uLmh0bWwpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wYXJ0bWVudDogZmhpci5GaGlyQ2Fub25pY2FsW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3QgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDYXBhYmlsaXR5U3RhdGVtZW50UmVzdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydtb2RlJ10pIHsgdGhpcy5tb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8UmVzdGZ1bENhcGFiaWxpdHlNb2RlQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLm1vZGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubW9kZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19tb2RlJ10pIHtcclxuICAgICAgaWYgKHRoaXMubW9kZSkgeyB0aGlzLm1vZGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbW9kZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm1vZGUgPSBuZXcgZmhpci5GaGlyQ29kZTxSZXN0ZnVsQ2FwYWJpbGl0eU1vZGVDb2RlVHlwZT4oc291cmNlLl9tb2RlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkb2N1bWVudGF0aW9uJ10pIHsgdGhpcy5kb2N1bWVudGF0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmRvY3VtZW50YXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RvY3VtZW50YXRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kb2N1bWVudGF0aW9uKSB7IHRoaXMuZG9jdW1lbnRhdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kb2N1bWVudGF0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZG9jdW1lbnRhdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bihzb3VyY2UuX2RvY3VtZW50YXRpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJNYXJrZG93bkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VjdXJpdHknXSkgeyB0aGlzLnNlY3VyaXR5ID0gbmV3IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RTZWN1cml0eShzb3VyY2Uuc2VjdXJpdHkpOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXNvdXJjZSddKSB7IHRoaXMucmVzb3VyY2UgPSBzb3VyY2UucmVzb3VyY2UubWFwKCh4KSA9PiBuZXcgZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50UmVzdFJlc291cmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVzb3VyY2UgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaW50ZXJhY3Rpb24nXSkgeyB0aGlzLmludGVyYWN0aW9uID0gc291cmNlLmludGVyYWN0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RJbnRlcmFjdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmludGVyYWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3NlYXJjaFBhcmFtJ10pIHsgdGhpcy5zZWFyY2hQYXJhbSA9IHNvdXJjZS5zZWFyY2hQYXJhbS5tYXAoKHgpID0+IG5ldyBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VTZWFyY2hQYXJhbSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNlYXJjaFBhcmFtID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ29wZXJhdGlvbiddKSB7IHRoaXMub3BlcmF0aW9uID0gc291cmNlLm9wZXJhdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0UmVzb3VyY2VPcGVyYXRpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5vcGVyYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tcGFydG1lbnQnXSkgeyB0aGlzLmNvbXBhcnRtZW50ID0gc291cmNlLmNvbXBhcnRtZW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpckNhbm9uaWNhbCh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbXBhcnRtZW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb21wYXJ0bWVudCddKSB7XHJcbiAgICAgIHNvdXJjZS5fY29tcGFydG1lbnQuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcGFydG1lbnQubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5jb21wYXJ0bWVudFtpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLmNvbXBhcnRtZW50LnB1c2gobmV3IGZoaXIuRmhpckNhbm9uaWNhbCh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyQ2Fub25pY2FsQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QnIH1cclxuICAgIHRoaXMudlJlcVNWKCdtb2RlJyxleHByZXNzaW9uLCdSZXN0ZnVsQ2FwYWJpbGl0eU1vZGUnLFJlc3RmdWxDYXBhYmlsaXR5TW9kZVZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZPcHRTKCdkb2N1bWVudGF0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0Uygnc2VjdXJpdHknLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdyZXNvdXJjZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2ludGVyYWN0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnc2VhcmNoUGFyYW0nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdvcGVyYXRpb24nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdjb21wYXJ0bWVudCcsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nRW5kcG9pbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ0VuZHBvaW50QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIHRoZSBtZXNzYWdpbmcgdHJhbnNwb3J0IHByb3RvY29sKHMpIGlkZW50aWZpZXJzLCBzdXBwb3J0ZWQgYnkgdGhpcyBlbmRwb2ludC5cclxuICAgKi9cclxuICBwcm90b2NvbDogZmhpci5Db2RpbmdBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5ldHdvcmsgYWRkcmVzcyBvZiB0aGUgZW5kcG9pbnQuIEZvciBzb2x1dGlvbnMgdGhhdCBkbyBub3QgdXNlIG5ldHdvcmsgYWRkcmVzc2VzIGZvciByb3V0aW5nLCBpdCBjYW4gYmUganVzdCBhbiBpZGVudGlmaWVyLlxyXG4gICAqL1xyXG4gIGFkZHJlc3M6IGZoaXIuRmhpclVybHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50Lm1lc3NhZ2luZy5lbmRwb2ludC5hZGRyZXNzXHJcbiAgICovXHJcbiAgX2FkZHJlc3M/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gZW5kcG9pbnQgKG5ldHdvcmsgYWNjZXNzaWJsZSBhZGRyZXNzKSB0byB3aGljaCBtZXNzYWdlcyBhbmQvb3IgcmVwbGllcyBhcmUgdG8gYmUgc2VudC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nRW5kcG9pbnQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nRW5kcG9pbnQnO1xyXG4gIC8qKlxyXG4gICAqIEEgbGlzdCBvZiB0aGUgbWVzc2FnaW5nIHRyYW5zcG9ydCBwcm90b2NvbChzKSBpZGVudGlmaWVycywgc3VwcG9ydGVkIGJ5IHRoaXMgZW5kcG9pbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHByb3RvY29sOiBmaGlyLkNvZGluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuZXR3b3JrIGFkZHJlc3Mgb2YgdGhlIGVuZHBvaW50LiBGb3Igc29sdXRpb25zIHRoYXQgZG8gbm90IHVzZSBuZXR3b3JrIGFkZHJlc3NlcyBmb3Igcm91dGluZywgaXQgY2FuIGJlIGp1c3QgYW4gaWRlbnRpZmllci5cclxuICAgKi9cclxuICBwdWJsaWMgYWRkcmVzczogZmhpci5GaGlyVXJsfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ0VuZHBvaW50IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ0VuZHBvaW50QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3Byb3RvY29sJ10pIHsgdGhpcy5wcm90b2NvbCA9IG5ldyBmaGlyLkNvZGluZyhzb3VyY2UucHJvdG9jb2wpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm90b2NvbCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2FkZHJlc3MnXSkgeyB0aGlzLmFkZHJlc3MgPSBuZXcgZmhpci5GaGlyVXJsKHt2YWx1ZTogc291cmNlLmFkZHJlc3N9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWRkcmVzcyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19hZGRyZXNzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuYWRkcmVzcykgeyB0aGlzLmFkZHJlc3MuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fYWRkcmVzcyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmFkZHJlc3MgPSBuZXcgZmhpci5GaGlyVXJsKHNvdXJjZS5fYWRkcmVzcyBhcyBQYXJ0aWFsPGZoaXIuRmhpclVybEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXBhYmlsaXR5U3RhdGVtZW50Lm1lc3NhZ2luZy5lbmRwb2ludCcgfVxyXG4gICAgdGhpcy52UmVxUygncHJvdG9jb2wnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZSZXFTKCdhZGRyZXNzJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmdTdXBwb3J0ZWRNZXNzYWdlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmdTdXBwb3J0ZWRNZXNzYWdlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1vZGUgb2YgdGhpcyBldmVudCBkZWNsYXJhdGlvbiAtIHdoZXRoZXIgYXBwbGljYXRpb24gaXMgc2VuZGVyIG9yIHJlY2VpdmVyLlxyXG4gICAqL1xyXG4gIG1vZGU6IGZoaXIuRmhpckNvZGU8RXZlbnRDYXBhYmlsaXR5TW9kZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50Lm1lc3NhZ2luZy5zdXBwb3J0ZWRNZXNzYWdlLm1vZGVcclxuICAgKi9cclxuICBfbW9kZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogUG9pbnRzIHRvIGEgbWVzc2FnZSBkZWZpbml0aW9uIHRoYXQgaWRlbnRpZmllcyB0aGUgbWVzc2FnaW5nIGV2ZW50LCBtZXNzYWdlIHN0cnVjdHVyZSwgYWxsb3dlZCByZXNwb25zZXMsIGV0Yy5cclxuICAgKi9cclxuICBkZWZpbml0aW9uOiBmaGlyLkZoaXJDYW5vbmljYWx8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5tZXNzYWdpbmcuc3VwcG9ydGVkTWVzc2FnZS5kZWZpbml0aW9uXHJcbiAgICovXHJcbiAgX2RlZmluaXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBpcyBhIHByb3Bvc2VkIGFsdGVybmF0aXZlIHRvIHRoZSBtZXNzYWdpbmcuZXZlbnQgc3RydWN0dXJlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmdTdXBwb3J0ZWRNZXNzYWdlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ1N1cHBvcnRlZE1lc3NhZ2UnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtb2RlIG9mIHRoaXMgZXZlbnQgZGVjbGFyYXRpb24gLSB3aGV0aGVyIGFwcGxpY2F0aW9uIGlzIHNlbmRlciBvciByZWNlaXZlci5cclxuICAgKi9cclxuICBwdWJsaWMgbW9kZTogZmhpci5GaGlyQ29kZTxFdmVudENhcGFiaWxpdHlNb2RlQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogUG9pbnRzIHRvIGEgbWVzc2FnZSBkZWZpbml0aW9uIHRoYXQgaWRlbnRpZmllcyB0aGUgbWVzc2FnaW5nIGV2ZW50LCBtZXNzYWdlIHN0cnVjdHVyZSwgYWxsb3dlZCByZXNwb25zZXMsIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgZGVmaW5pdGlvbjogZmhpci5GaGlyQ2Fub25pY2FsfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ1N1cHBvcnRlZE1lc3NhZ2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nU3VwcG9ydGVkTWVzc2FnZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydtb2RlJ10pIHsgdGhpcy5tb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8RXZlbnRDYXBhYmlsaXR5TW9kZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5tb2RlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm1vZGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfbW9kZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLm1vZGUpIHsgdGhpcy5tb2RlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX21vZGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5tb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8RXZlbnRDYXBhYmlsaXR5TW9kZUNvZGVUeXBlPihzb3VyY2UuX21vZGUgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RlZmluaXRpb24nXSkgeyB0aGlzLmRlZmluaXRpb24gPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogc291cmNlLmRlZmluaXRpb259KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZGVmaW5pdGlvbiA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZWZpbml0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbikgeyB0aGlzLmRlZmluaXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVmaW5pdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlZmluaXRpb24gPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHNvdXJjZS5fZGVmaW5pdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXBhYmlsaXR5U3RhdGVtZW50Lm1lc3NhZ2luZy5zdXBwb3J0ZWRNZXNzYWdlJyB9XHJcbiAgICB0aGlzLnZSZXFTVignbW9kZScsZXhwcmVzc2lvbiwnRXZlbnRDYXBhYmlsaXR5TW9kZScsRXZlbnRDYXBhYmlsaXR5TW9kZVZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZSZXFTKCdkZWZpbml0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmcgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ0FyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEFuIGVuZHBvaW50IChuZXR3b3JrIGFjY2Vzc2libGUgYWRkcmVzcykgdG8gd2hpY2ggbWVzc2FnZXMgYW5kL29yIHJlcGxpZXMgYXJlIHRvIGJlIHNlbnQuXHJcbiAgICovXHJcbiAgZW5kcG9pbnQ/OiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmdFbmRwb2ludEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyB2YWx1ZSBpcyBtaXNzaW5nIHRoZW4gdGhlIGFwcGxpY2F0aW9uIGRvZXMgbm90IGltcGxlbWVudCAocmVjZWl2ZXIpIG9yIGRlcGVuZCBvbiAoc2VuZGVyKSByZWxpYWJsZSBtZXNzYWdpbmcuXHJcbiAgICovXHJcbiAgcmVsaWFibGVDYWNoZT86IGZoaXIuRmhpclVuc2lnbmVkSW50fG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQubWVzc2FnaW5nLnJlbGlhYmxlQ2FjaGVcclxuICAgKi9cclxuICBfcmVsaWFibGVDYWNoZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogRG9jdW1lbnRhdGlvbiBhYm91dCB0aGUgc3lzdGVtJ3MgbWVzc2FnaW5nIGNhcGFiaWxpdGllcyBmb3IgdGhpcyBlbmRwb2ludCBub3Qgb3RoZXJ3aXNlIGRvY3VtZW50ZWQgYnkgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50LiAgRm9yIGV4YW1wbGUsIHRoZSBwcm9jZXNzIGZvciBiZWNvbWluZyBhbiBhdXRob3JpemVkIG1lc3NhZ2luZyBleGNoYW5nZSBwYXJ0bmVyLlxyXG4gICAqL1xyXG4gIGRvY3VtZW50YXRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50Lm1lc3NhZ2luZy5kb2N1bWVudGF0aW9uXHJcbiAgICovXHJcbiAgX2RvY3VtZW50YXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgYSBwcm9wb3NlZCBhbHRlcm5hdGl2ZSB0byB0aGUgbWVzc2FnaW5nLmV2ZW50IHN0cnVjdHVyZS5cclxuICAgKi9cclxuICBzdXBwb3J0ZWRNZXNzYWdlPzogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nU3VwcG9ydGVkTWVzc2FnZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsZSByZXBldGl0aW9ucyBhbGxvdyB0aGUgZG9jdW1lbnRhdGlvbiBvZiBtdWx0aXBsZSBlbmRwb2ludHMgcGVyIHNvbHV0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmcgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nJztcclxuICAvKipcclxuICAgKiBBbiBlbmRwb2ludCAobmV0d29yayBhY2Nlc3NpYmxlIGFkZHJlc3MpIHRvIHdoaWNoIG1lc3NhZ2VzIGFuZC9vciByZXBsaWVzIGFyZSB0byBiZSBzZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmRwb2ludDogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nRW5kcG9pbnRbXTtcclxuICAvKipcclxuICAgKiBJZiB0aGlzIHZhbHVlIGlzIG1pc3NpbmcgdGhlbiB0aGUgYXBwbGljYXRpb24gZG9lcyBub3QgaW1wbGVtZW50IChyZWNlaXZlcikgb3IgZGVwZW5kIG9uIChzZW5kZXIpIHJlbGlhYmxlIG1lc3NhZ2luZy5cclxuICAgKi9cclxuICBwdWJsaWMgcmVsaWFibGVDYWNoZT86IGZoaXIuRmhpclVuc2lnbmVkSW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEb2N1bWVudGF0aW9uIGFib3V0IHRoZSBzeXN0ZW0ncyBtZXNzYWdpbmcgY2FwYWJpbGl0aWVzIGZvciB0aGlzIGVuZHBvaW50IG5vdCBvdGhlcndpc2UgZG9jdW1lbnRlZCBieSB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQuICBGb3IgZXhhbXBsZSwgdGhlIHByb2Nlc3MgZm9yIGJlY29taW5nIGFuIGF1dGhvcml6ZWQgbWVzc2FnaW5nIGV4Y2hhbmdlIHBhcnRuZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGRvY3VtZW50YXRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyBhIHByb3Bvc2VkIGFsdGVybmF0aXZlIHRvIHRoZSBtZXNzYWdpbmcuZXZlbnQgc3RydWN0dXJlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdXBwb3J0ZWRNZXNzYWdlOiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmdTdXBwb3J0ZWRNZXNzYWdlW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZyAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENhcGFiaWxpdHlTdGF0ZW1lbnRNZXNzYWdpbmdBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnZW5kcG9pbnQnXSkgeyB0aGlzLmVuZHBvaW50ID0gc291cmNlLmVuZHBvaW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ0VuZHBvaW50KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZW5kcG9pbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVsaWFibGVDYWNoZSddKSB7IHRoaXMucmVsaWFibGVDYWNoZSA9IG5ldyBmaGlyLkZoaXJVbnNpZ25lZEludCh7dmFsdWU6IHNvdXJjZS5yZWxpYWJsZUNhY2hlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yZWxpYWJsZUNhY2hlJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVsaWFibGVDYWNoZSkgeyB0aGlzLnJlbGlhYmxlQ2FjaGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmVsaWFibGVDYWNoZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlbGlhYmxlQ2FjaGUgPSBuZXcgZmhpci5GaGlyVW5zaWduZWRJbnQoc291cmNlLl9yZWxpYWJsZUNhY2hlIGFzIFBhcnRpYWw8Zmhpci5GaGlyVW5zaWduZWRJbnRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RvY3VtZW50YXRpb24nXSkgeyB0aGlzLmRvY3VtZW50YXRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UuZG9jdW1lbnRhdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZG9jdW1lbnRhdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRvY3VtZW50YXRpb24pIHsgdGhpcy5kb2N1bWVudGF0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RvY3VtZW50YXRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kb2N1bWVudGF0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHNvdXJjZS5fZG9jdW1lbnRhdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpck1hcmtkb3duQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzdXBwb3J0ZWRNZXNzYWdlJ10pIHsgdGhpcy5zdXBwb3J0ZWRNZXNzYWdlID0gc291cmNlLnN1cHBvcnRlZE1lc3NhZ2UubWFwKCh4KSA9PiBuZXcgZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nU3VwcG9ydGVkTWVzc2FnZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN1cHBvcnRlZE1lc3NhZ2UgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXBhYmlsaXR5U3RhdGVtZW50Lm1lc3NhZ2luZycgfVxyXG4gICAgdGhpcy52T3B0QSgnZW5kcG9pbnQnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdyZWxpYWJsZUNhY2hlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnZG9jdW1lbnRhdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ3N1cHBvcnRlZE1lc3NhZ2UnLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2FwYWJpbGl0eVN0YXRlbWVudERvY3VtZW50IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENhcGFiaWxpdHlTdGF0ZW1lbnREb2N1bWVudEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIE1vZGUgb2YgdGhpcyBkb2N1bWVudCBkZWNsYXJhdGlvbiAtIHdoZXRoZXIgYW4gYXBwbGljYXRpb24gaXMgYSBwcm9kdWNlciBvciBjb25zdW1lci5cclxuICAgKi9cclxuICBtb2RlOiBmaGlyLkZoaXJDb2RlPERvY3VtZW50TW9kZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LmRvY3VtZW50Lm1vZGVcclxuICAgKi9cclxuICBfbW9kZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBkZXNjcmlwdGlvbiBvZiBob3cgdGhlIGFwcGxpY2F0aW9uIHN1cHBvcnRzIG9yIHVzZXMgdGhlIHNwZWNpZmllZCBkb2N1bWVudCBwcm9maWxlLiAgRm9yIGV4YW1wbGUsIHdoZW4gZG9jdW1lbnRzIGFyZSBjcmVhdGVkLCB3aGF0IGFjdGlvbiBpcyB0YWtlbiB3aXRoIGNvbnN1bWVkIGRvY3VtZW50cywgZXRjLlxyXG4gICAqL1xyXG4gIGRvY3VtZW50YXRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LmRvY3VtZW50LmRvY3VtZW50YXRpb25cclxuICAgKi9cclxuICBfZG9jdW1lbnRhdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHByb2ZpbGUgaXMgYWN0dWFsbHkgb24gdGhlIEJ1bmRsZS5cclxuICAgKi9cclxuICBwcm9maWxlOiBmaGlyLkZoaXJDYW5vbmljYWx8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5kb2N1bWVudC5wcm9maWxlXHJcbiAgICovXHJcbiAgX3Byb2ZpbGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBkb2N1bWVudCBkZWZpbml0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENhcGFiaWxpdHlTdGF0ZW1lbnREb2N1bWVudCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NhcGFiaWxpdHlTdGF0ZW1lbnREb2N1bWVudCc7XHJcbiAgLyoqXHJcbiAgICogTW9kZSBvZiB0aGlzIGRvY3VtZW50IGRlY2xhcmF0aW9uIC0gd2hldGhlciBhbiBhcHBsaWNhdGlvbiBpcyBhIHByb2R1Y2VyIG9yIGNvbnN1bWVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb2RlOiBmaGlyLkZoaXJDb2RlPERvY3VtZW50TW9kZUNvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEEgZGVzY3JpcHRpb24gb2YgaG93IHRoZSBhcHBsaWNhdGlvbiBzdXBwb3J0cyBvciB1c2VzIHRoZSBzcGVjaWZpZWQgZG9jdW1lbnQgcHJvZmlsZS4gIEZvciBleGFtcGxlLCB3aGVuIGRvY3VtZW50cyBhcmUgY3JlYXRlZCwgd2hhdCBhY3Rpb24gaXMgdGFrZW4gd2l0aCBjb25zdW1lZCBkb2N1bWVudHMsIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgZG9jdW1lbnRhdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJvZmlsZSBpcyBhY3R1YWxseSBvbiB0aGUgQnVuZGxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9maWxlOiBmaGlyLkZoaXJDYW5vbmljYWx8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDYXBhYmlsaXR5U3RhdGVtZW50RG9jdW1lbnQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxDYXBhYmlsaXR5U3RhdGVtZW50RG9jdW1lbnRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnbW9kZSddKSB7IHRoaXMubW9kZSA9IG5ldyBmaGlyLkZoaXJDb2RlPERvY3VtZW50TW9kZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5tb2RlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm1vZGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfbW9kZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLm1vZGUpIHsgdGhpcy5tb2RlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX21vZGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5tb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8RG9jdW1lbnRNb2RlQ29kZVR5cGU+KHNvdXJjZS5fbW9kZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZG9jdW1lbnRhdGlvbiddKSB7IHRoaXMuZG9jdW1lbnRhdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kb2N1bWVudGF0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kb2N1bWVudGF0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZG9jdW1lbnRhdGlvbikgeyB0aGlzLmRvY3VtZW50YXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZG9jdW1lbnRhdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRvY3VtZW50YXRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oc291cmNlLl9kb2N1bWVudGF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyTWFya2Rvd25BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3Byb2ZpbGUnXSkgeyB0aGlzLnByb2ZpbGUgPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogc291cmNlLnByb2ZpbGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucHJvZmlsZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wcm9maWxlJ10pIHtcclxuICAgICAgaWYgKHRoaXMucHJvZmlsZSkgeyB0aGlzLnByb2ZpbGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcHJvZmlsZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnByb2ZpbGUgPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHNvdXJjZS5fcHJvZmlsZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXBhYmlsaXR5U3RhdGVtZW50LmRvY3VtZW50JyB9XHJcbiAgICB0aGlzLnZSZXFTVignbW9kZScsZXhwcmVzc2lvbiwnRG9jdW1lbnRNb2RlJyxEb2N1bWVudE1vZGVWc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52T3B0UygnZG9jdW1lbnRhdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudlJlcVMoJ3Byb2ZpbGUnLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2FwYWJpbGl0eVN0YXRlbWVudCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDYXBhYmlsaXR5U3RhdGVtZW50QXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiQ2FwYWJpbGl0eVN0YXRlbWVudFwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDYW4gYmUgYSB1cm46dXVpZDogb3IgYSB1cm46b2lkOiBidXQgcmVhbCBodHRwOiBhZGRyZXNzZXMgYXJlIHByZWZlcnJlZC4gIE11bHRpcGxlIGluc3RhbmNlcyBtYXkgc2hhcmUgdGhlIHNhbWUgVVJMIGlmIHRoZXkgaGF2ZSBhIGRpc3RpbmN0IHZlcnNpb24uXHJcbiAgICogVGhlIGRldGVybWluYXRpb24gb2Ygd2hlbiB0byBjcmVhdGUgYSBuZXcgdmVyc2lvbiBvZiBhIHJlc291cmNlIChzYW1lIHVybCwgbmV3IHZlcnNpb24pIHZzLiBkZWZpbmluZyBhIG5ldyBhcnRpZmFjdCBpcyB1cCB0byB0aGUgYXV0aG9yLiAgQ29uc2lkZXJhdGlvbnMgZm9yIG1ha2luZyB0aGlzIGRlY2lzaW9uIGFyZSBmb3VuZCBpbiBbVGVjaG5pY2FsIGFuZCBCdXNpbmVzcyBWZXJzaW9uc10ocmVzb3VyY2UuaHRtbCN2ZXJzaW9ucykuIFxyXG4gICAqIEluIHNvbWUgY2FzZXMsIHRoZSByZXNvdXJjZSBjYW4gbm8gbG9uZ2VyIGJlIGZvdW5kIGF0IHRoZSBzdGF0ZWQgdXJsLCBidXQgdGhlIHVybCBpdHNlbGYgY2Fubm90IGNoYW5nZS4gSW1wbGVtZW50YXRpb25zIGNhbiB1c2UgdGhlIFttZXRhLnNvdXJjZV0ocmVzb3VyY2UuaHRtbCNtZXRhKSBlbGVtZW50IHRvIGluZGljYXRlIHdoZXJlIHRoZSBjdXJyZW50IG1hc3RlciBzb3VyY2Ugb2YgdGhlIHJlc291cmNlIGNhbiBiZSBmb3VuZC5cclxuICAgKi9cclxuICB1cmw/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC51cmxcclxuICAgKi9cclxuICBfdXJsPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGVyZSBtYXkgYmUgZGlmZmVyZW50IGNhcGFiaWxpdHkgc3RhdGVtZW50IGluc3RhbmNlcyB0aGF0IGhhdmUgdGhlIHNhbWUgaWRlbnRpZmllciBidXQgZGlmZmVyZW50IHZlcnNpb25zLiAgVGhlIHZlcnNpb24gY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSB1cmwgaW4gYSByZWZlcmVuY2UgdG8gYWxsb3cgYSByZWZlcmVuY2UgdG8gYSBwYXJ0aWN1bGFyIGJ1c2luZXNzIHZlcnNpb24gb2YgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IHdpdGggdGhlIGZvcm1hdCBbdXJsXXxbdmVyc2lvbl0uXHJcbiAgICovXHJcbiAgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnZlcnNpb25cclxuICAgKi9cclxuICBfdmVyc2lvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LlxyXG4gICAqL1xyXG4gIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgbmFtZSBkb2VzIG5vdCBuZWVkIHRvIGJlIG1hY2hpbmUtcHJvY2Vzc2luZyBmcmllbmRseSBhbmQgbWF5IGNvbnRhaW4gcHVuY3R1YXRpb24sIHdoaXRlLXNwYWNlLCBldGMuXHJcbiAgICovXHJcbiAgdGl0bGU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC50aXRsZVxyXG4gICAqL1xyXG4gIF90aXRsZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiBjYXBhYmlsaXR5IHN0YXRlbWVudHMgdGhhdCBhcmUgYXBwcm9wcmlhdGUgZm9yIHVzZSB2ZXJzdXMgbm90LlRoaXMgaXMgbm90IGludGVuZGVkIGZvciB1c2Ugd2l0aCBhY3R1YWwgY2FwYWJpbGl0eSBzdGF0ZW1lbnRzLCBidXQgd2hlcmUgY2FwYWJpbGl0eSBzdGF0ZW1lbnRzIGFyZSB1c2VkIHRvIGRlc2NyaWJlIHBvc3NpYmxlIG9yIGRlc2lyZWQgc3lzdGVtcy5cclxuICAgKi9cclxuICBzdGF0dXM6IGZoaXIuRmhpckNvZGU8UHVibGljYXRpb25TdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIGNhcGFiaWxpdHkgc3RhdGVtZW50cyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuXHJcbiAgICovXHJcbiAgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5leHBlcmltZW50YWxcclxuICAgKi9cclxuICBfZXhwZXJpbWVudGFsPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBOb3RlIHRoYXQgdGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgdGhlIHJlc291cmNlIGxhc3QtbW9kaWZpZWQtZGF0ZSwgc2luY2UgdGhlIHJlc291cmNlIG1heSBiZSBhIHNlY29uZGFyeSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQuIEFkZGl0aW9uYWwgc3BlY2lmaWMgZGF0ZXMgbWF5IGJlIGFkZGVkIGFzIGV4dGVuc2lvbnMgb3IgYmUgZm91bmQgYnkgY29uc3VsdGluZyBQcm92ZW5hbmNlcyBhc3NvY2lhdGVkIHdpdGggcGFzdCB2ZXJzaW9ucyBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgZGF0ZTogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5kYXRlXHJcbiAgICovXHJcbiAgX2RhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudC4gVGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgaW5kaXZpZHVhbCBvciBvcmdhbml6YXRpb24gdGhhdCBkZXZlbG9wZWQgYW5kIGluaXRpYWxseSBhdXRob3JlZCB0aGUgY29udGVudC4gVGhlIHB1Ymxpc2hlciBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBjb250YWN0IGZvciBxdWVzdGlvbnMgb3IgaXNzdWVzIHdpdGggdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50LiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGlzaGVyPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQucHVibGlzaGVyXHJcbiAgICovXHJcbiAgX3B1Ymxpc2hlcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogTWF5IGJlIGEgd2ViIHNpdGUsIGFuIGVtYWlsIGFkZHJlc3MsIGEgdGVsZXBob25lIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIGNvbnRhY3Q/OiBmaGlyLkNvbnRhY3REZXRhaWxBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZGVzY3JpcHRpb24gY2FuIGJlIHVzZWQgdG8gY2FwdHVyZSBkZXRhaWxzIHN1Y2ggYXMgd2h5IHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCB3YXMgYnVpbHQsIGNvbW1lbnRzIGFib3V0IG1pc3VzZSwgaW5zdHJ1Y3Rpb25zIGZvciBjbGluaWNhbCB1c2UgYW5kIGludGVycHJldGF0aW9uLCBsaXRlcmF0dXJlIHJlZmVyZW5jZXMsIGV4YW1wbGVzIGZyb20gdGhlIHBhcGVyIHdvcmxkLCBldGMuIEl0IGlzIG5vdCBhIHJlbmRlcmluZyBvZiB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgYXMgY29udmV5ZWQgaW4gdGhlICd0ZXh0JyBmaWVsZCBvZiB0aGUgcmVzb3VyY2UgaXRzZWxmLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQgKGUuZy4gdGhlIGxhbmd1YWdlIG9mIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCBpcyBwcmVzdW1lZCB0byBiZSB0aGUgcHJlZG9taW5hbnQgbGFuZ3VhZ2UgaW4gdGhlIHBsYWNlIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCB3YXMgY3JlYXRlZCkuVGhpcyBkb2VzIG5vdCBuZWVkIHRvIGJlIHBvcHVsYXRlZCBpZiB0aGUgZGVzY3JpcHRpb24gaXMgYWRlcXVhdGVseSBpbXBsaWVkIGJ5IHRoZSBzb2Z0d2FyZSBvciBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogV2hlbiBtdWx0aXBsZSB1c2VDb250ZXh0cyBhcmUgc3BlY2lmaWVkLCB0aGVyZSBpcyBubyBleHBlY3RhdGlvbiB0aGF0IGFsbCBvciBhbnkgb2YgdGhlIGNvbnRleHRzIGFwcGx5LlxyXG4gICAqL1xyXG4gIHVzZUNvbnRleHQ/OiBmaGlyLlVzYWdlQ29udGV4dEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSXQgbWF5IGJlIHBvc3NpYmxlIGZvciB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgdG8gYmUgdXNlZCBpbiBqdXJpc2RpY3Rpb25zIG90aGVyIHRoYW4gdGhvc2UgZm9yIHdoaWNoIGl0IHdhcyBvcmlnaW5hbGx5IGRlc2lnbmVkIG9yIGludGVuZGVkLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIHVzYWdlIG9mIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudC4gSW5zdGVhZCwgaXQgcHJvdmlkZXMgdHJhY2VhYmlsaXR5IG9mICcnd2h5JycgdGhlIHJlc291cmNlIGlzIGVpdGhlciBuZWVkZWQgb3IgJyd3aHknJyBpdCBpcyBkZWZpbmVkIGFzIGl0IGlzLiAgVGhpcyBtYXkgYmUgdXNlZCB0byBwb2ludCB0byBzb3VyY2UgbWF0ZXJpYWxzIG9yIHNwZWNpZmljYXRpb25zIHRoYXQgZHJvdmUgdGhlIHN0cnVjdHVyZSBvZiB0aGlzIGNhcGFiaWxpdHkgc3RhdGVtZW50LlxyXG4gICAqL1xyXG4gIHB1cnBvc2U/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LnB1cnBvc2VcclxuICAgKi9cclxuICBfcHVycG9zZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBjb3B5cmlnaHQgc3RhdGVtZW50IHJlbGF0aW5nIHRvIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCBhbmQvb3IgaXRzIGNvbnRlbnRzLiBDb3B5cmlnaHQgc3RhdGVtZW50cyBhcmUgZ2VuZXJhbGx5IGxlZ2FsIHJlc3RyaWN0aW9ucyBvbiB0aGUgdXNlIGFuZCBwdWJsaXNoaW5nIG9mIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudC5cclxuICAgKi9cclxuICBjb3B5cmlnaHQ/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LmNvcHlyaWdodFxyXG4gICAqL1xyXG4gIF9jb3B5cmlnaHQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB3YXkgdGhhdCB0aGlzIHN0YXRlbWVudCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLCB0byBkZXNjcmliZSBhbiBhY3R1YWwgcnVubmluZyBpbnN0YW5jZSBvZiBzb2Z0d2FyZSwgYSBwYXJ0aWN1bGFyIHByb2R1Y3QgKGtpbmQsIG5vdCBpbnN0YW5jZSBvZiBzb2Z0d2FyZSkgb3IgYSBjbGFzcyBvZiBpbXBsZW1lbnRhdGlvbiAoZS5nLiBhIGRlc2lyZWQgcHVyY2hhc2UpLlxyXG4gICAqL1xyXG4gIGtpbmQ6IGZoaXIuRmhpckNvZGU8Q2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5raW5kXHJcbiAgICovXHJcbiAgX2tpbmQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEhMNyBkZWZpbmVzIHRoZSBmb2xsb3dpbmcgU2VydmljZXM6IFtUZXJtaW5vbG9neSBTZXJ2aWNlXSh0ZXJtaW5vbG9neS1zZXJ2aWNlLmh0bWwpLiAgICBcclxuICAgKiBNYW55IFtJbXBsZW1lbnRhdGlvbiBHdWlkZXNdKGh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvcmVnaXN0cnkpIGRlZmluZSBhZGRpdGlvbmFsIHNlcnZpY2VzLlxyXG4gICAqL1xyXG4gIGluc3RhbnRpYXRlcz86IGZoaXIuRmhpckNhbm9uaWNhbFtdfChzdHJpbmd8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQuaW5zdGFudGlhdGVzXHJcbiAgICovXHJcbiAgX2luc3RhbnRpYXRlcz86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogdGhlIGNvbnRlbnRzIG9mIGFueSBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGltcG9ydGVkIENhcGFiaWxpdHlTdGF0ZW1lbnRzIFNIQUxMIE5PVCBvdmVybGFwLCBpLmUuIHRoZXkgY2Fubm90IHJlZmVyIHRvIHRoZSBzYW1lIHJlc3QvcmVzb3VyY2UsIG9wZXJhdGlvbnMvbmFtZSwgc2VhcmNocGFyYW0vbmFtZSwgaW50ZXJhY3Rpb24vY29kZSwgbWVzc2FnaW5nL2VuZHBvaW50LCBkb2N1bWVudC9tb2RlIHBhaXIuXHJcbiAgICogQSBjYXBhYmlsaXR5IHN0YXRlbWVudCB0aGF0IGltcG9ydHMgYW5vdGhlciBDYXBhYmlsaXR5U3RhdGVtZW50IGF1dG9tYXRpY2FsbHkgaW5zdGFudGlhdGVzIGl0IHRvbyAodGhvdWdoIHRoaXMgaXMgb2Z0ZW4gbm90IGEgdmVyeSB1c2VmdWwgc3RhdGVtZW50IGZvciB0aGUga2luZHMgb2YgQ2FwYWJpbGl0eVN0YXRlbWVudHMgdGhhdCBhcmUgc3VpdGFibGUgZm9yIGltcG9ydGluZykuXHJcbiAgICovXHJcbiAgaW1wb3J0cz86IGZoaXIuRmhpckNhbm9uaWNhbFtdfChzdHJpbmd8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhcGFiaWxpdHlTdGF0ZW1lbnQuaW1wb3J0c1xyXG4gICAqL1xyXG4gIF9pbXBvcnRzPzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBTb2Z0d2FyZSB0aGF0IGlzIGNvdmVyZWQgYnkgdGhpcyBjYXBhYmlsaXR5IHN0YXRlbWVudC4gIEl0IGlzIHVzZWQgd2hlbiB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgZGVzY3JpYmVzIHRoZSBjYXBhYmlsaXRpZXMgb2YgYSBwYXJ0aWN1bGFyIHNvZnR3YXJlIHZlcnNpb24sIGluZGVwZW5kZW50IG9mIGFuIGluc3RhbGxhdGlvbi5cclxuICAgKi9cclxuICBzb2Z0d2FyZT86IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFNvZnR3YXJlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyBhIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGluc3RhbmNlIHRoYXQgaXMgZGVzY3JpYmVkIGJ5IHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCAtIGkuZS4gYSBwYXJ0aWN1bGFyIGluc3RhbGxhdGlvbiwgcmF0aGVyIHRoYW4gdGhlIGNhcGFiaWxpdGllcyBvZiBhIHNvZnR3YXJlIHByb2dyYW0uXHJcbiAgICovXHJcbiAgaW1wbGVtZW50YXRpb24/OiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRJbXBsZW1lbnRhdGlvbkFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNlcnZlcnMgbWF5IGltcGxlbWVudCBtdWx0aXBsZSB2ZXJzaW9ucyAoc2VlIFtNYW5hZ2luZyBNdWx0aXBsZSBWZXJzaW9uc10odmVyc2lvbmluZy5odG1sKSwgYW5kIHRoZSBbJHZlcnNpb25zXShjYXBhYmlsaXR5c3RhdGVtZW50LW9wZXJhdGlvbi12ZXJzaW9ucy5odG1sKSBvcGVyYXRpb24pLiBJZiB0aGV5IGRvLCBhbmQgdGhlIENhcGFiaWxpdHlTdGF0ZW1lbnQgaXMgcmVxdWVzdGVkIGZyb20gdGhlIHNlcnZlciwgdGhlbiB0aGlzIGZoaXJWZXJzaW9uIHdpbGwgYmUgZWl0aGVyIHRoZSB2ZXJzaW9uIHJlcXVlc3RlZCwgb3IgdGhlIHNlcnZlcidzIGRlZmF1bHQgdmVyc2lvbi5cclxuICAgKi9cclxuICBmaGlyVmVyc2lvbjogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LmZoaXJWZXJzaW9uXHJcbiAgICovXHJcbiAgX2ZoaXJWZXJzaW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBcInhtbFwiLCBcImpzb25cIiBhbmQgXCJ0dGxcIiBhcmUgYWxsb3dlZCwgd2hpY2ggZGVzY3JpYmUgdGhlIHNpbXBsZSBlbmNvZGluZ3MgZGVzY3JpYmVkIGluIHRoZSBzcGVjaWZpY2F0aW9uIChhbmQgaW1wbHkgYXBwcm9wcmlhdGUgYnVuZGxlIHN1cHBvcnQpLiBPdGhlcndpc2UsIG1pbWUgdHlwZXMgYXJlIGxlZ2FsIGhlcmUuXHJcbiAgICovXHJcbiAgZm9ybWF0OiBmaGlyLkZoaXJDb2RlW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5mb3JtYXRcclxuICAgKi9cclxuICBfZm9ybWF0PzooZmhpci5GaGlyRWxlbWVudEFyZ3N8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBBdCBwcmVzZW50LCB0aGUgcGF0Y2ggbWltZSB0eXBlcyBhcHBsaWNhdGlvbi9qc29uLXBhdGNoK2pzb24gYW5kIGFwcGxpY2F0aW9uL3htbC1wYXRjaCt4bWwgYXJlIGxlZ2FsLiBHZW5lcmFsbHksIGlmIGEgc2VydmVyIHN1cHBvcnRzIFBBVENILCBpdCB3b3VsZCBiZSBleHBlY3RlZCB0byBzdXBwb3J0IHRoZSBwYXRjaCBmb3JtYXRzIGFuZCBtYXRjaCB0aGUgZm9ybWF0cyBpdCBzdXBwb3J0cywgYnV0IHRoaXMgaXMgbm90IGFsd2F5cyBwb3NzaWJsZSBvciBuZWNlc3NhcnkuXHJcbiAgICovXHJcbiAgcGF0Y2hGb3JtYXQ/OiBmaGlyLkZoaXJDb2RlW118KHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2FwYWJpbGl0eVN0YXRlbWVudC5wYXRjaEZvcm1hdFxyXG4gICAqL1xyXG4gIF9wYXRjaEZvcm1hdD86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIGltcGxlbWVudGF0aW9uIGd1aWRlcyB0aGF0IHRoZSBzZXJ2ZXIgZG9lcyAob3Igc2hvdWxkKSBzdXBwb3J0IGluIHRoZWlyIGVudGlyZXR5LlxyXG4gICAqL1xyXG4gIGltcGxlbWVudGF0aW9uR3VpZGU/OiBmaGlyLkZoaXJDYW5vbmljYWxbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXBhYmlsaXR5U3RhdGVtZW50LmltcGxlbWVudGF0aW9uR3VpZGVcclxuICAgKi9cclxuICBfaW1wbGVtZW50YXRpb25HdWlkZT86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogTXVsdGlwbGUgcmVwZXRpdGlvbnMgYWxsb3cgZGVmaW5pdGlvbiBvZiBib3RoIGNsaWVudCBhbmQvb3Igc2VydmVyIGJlaGF2aW9ycyBvciBwb3NzaWJseSBiZWhhdmlvcnMgdW5kZXIgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgKGZvciBzb2Z0d2FyZSBvciByZXF1aXJlbWVudHMgc3RhdGVtZW50cykuXHJcbiAgICovXHJcbiAgcmVzdD86IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE11bHRpcGxlIHJlcGV0aXRpb25zIGFsbG93IHRoZSBkb2N1bWVudGF0aW9uIG9mIG11bHRpcGxlIGVuZHBvaW50cyBwZXIgc29sdXRpb24uXHJcbiAgICovXHJcbiAgbWVzc2FnaW5nPzogZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGRvY3VtZW50IGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgZG9jdW1lbnQ/OiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnREb2N1bWVudEFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIENhcGFiaWxpdHkgU3RhdGVtZW50IGRvY3VtZW50cyBhIHNldCBvZiBjYXBhYmlsaXRpZXMgKGJlaGF2aW9ycykgb2YgYSBGSElSIFNlcnZlciBmb3IgYSBwYXJ0aWN1bGFyIHZlcnNpb24gb2YgRkhJUiB0aGF0IG1heSBiZSB1c2VkIGFzIGEgc3RhdGVtZW50IG9mIGFjdHVhbCBzZXJ2ZXIgZnVuY3Rpb25hbGl0eSBvciBhIHN0YXRlbWVudCBvZiByZXF1aXJlZCBvciBkZXNpcmVkIHNlcnZlciBpbXBsZW1lbnRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXBhYmlsaXR5U3RhdGVtZW50IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDYXBhYmlsaXR5U3RhdGVtZW50JztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIkNhcGFiaWxpdHlTdGF0ZW1lbnRcIjtcclxuICAvKipcclxuICAgKiBDYW4gYmUgYSB1cm46dXVpZDogb3IgYSB1cm46b2lkOiBidXQgcmVhbCBodHRwOiBhZGRyZXNzZXMgYXJlIHByZWZlcnJlZC4gIE11bHRpcGxlIGluc3RhbmNlcyBtYXkgc2hhcmUgdGhlIHNhbWUgVVJMIGlmIHRoZXkgaGF2ZSBhIGRpc3RpbmN0IHZlcnNpb24uXHJcbiAgICogVGhlIGRldGVybWluYXRpb24gb2Ygd2hlbiB0byBjcmVhdGUgYSBuZXcgdmVyc2lvbiBvZiBhIHJlc291cmNlIChzYW1lIHVybCwgbmV3IHZlcnNpb24pIHZzLiBkZWZpbmluZyBhIG5ldyBhcnRpZmFjdCBpcyB1cCB0byB0aGUgYXV0aG9yLiAgQ29uc2lkZXJhdGlvbnMgZm9yIG1ha2luZyB0aGlzIGRlY2lzaW9uIGFyZSBmb3VuZCBpbiBbVGVjaG5pY2FsIGFuZCBCdXNpbmVzcyBWZXJzaW9uc10ocmVzb3VyY2UuaHRtbCN2ZXJzaW9ucykuIFxyXG4gICAqIEluIHNvbWUgY2FzZXMsIHRoZSByZXNvdXJjZSBjYW4gbm8gbG9uZ2VyIGJlIGZvdW5kIGF0IHRoZSBzdGF0ZWQgdXJsLCBidXQgdGhlIHVybCBpdHNlbGYgY2Fubm90IGNoYW5nZS4gSW1wbGVtZW50YXRpb25zIGNhbiB1c2UgdGhlIFttZXRhLnNvdXJjZV0ocmVzb3VyY2UuaHRtbCNtZXRhKSBlbGVtZW50IHRvIGluZGljYXRlIHdoZXJlIHRoZSBjdXJyZW50IG1hc3RlciBzb3VyY2Ugb2YgdGhlIHJlc291cmNlIGNhbiBiZSBmb3VuZC5cclxuICAgKi9cclxuICBwdWJsaWMgdXJsPzogZmhpci5GaGlyVXJpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGVyZSBtYXkgYmUgZGlmZmVyZW50IGNhcGFiaWxpdHkgc3RhdGVtZW50IGluc3RhbmNlcyB0aGF0IGhhdmUgdGhlIHNhbWUgaWRlbnRpZmllciBidXQgZGlmZmVyZW50IHZlcnNpb25zLiAgVGhlIHZlcnNpb24gY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSB1cmwgaW4gYSByZWZlcmVuY2UgdG8gYWxsb3cgYSByZWZlcmVuY2UgdG8gYSBwYXJ0aWN1bGFyIGJ1c2luZXNzIHZlcnNpb24gb2YgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IHdpdGggdGhlIGZvcm1hdCBbdXJsXXxbdmVyc2lvbl0uXHJcbiAgICovXHJcbiAgcHVibGljIHZlcnNpb24/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIGlzIG5vdCBleHBlY3RlZCB0byBiZSBnbG9iYWxseSB1bmlxdWUuIFRoZSBuYW1lIHNob3VsZCBiZSBhIHNpbXBsZSBhbHBoYW51bWVyaWMgdHlwZSBuYW1lIHRvIGVuc3VyZSB0aGF0IGl0IGlzIG1hY2hpbmUtcHJvY2Vzc2luZyBmcmllbmRseS5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBuYW1lIGRvZXMgbm90IG5lZWQgdG8gYmUgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5IGFuZCBtYXkgY29udGFpbiBwdW5jdHVhdGlvbiwgd2hpdGUtc3BhY2UsIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgdGl0bGU/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2YgY2FwYWJpbGl0eSBzdGF0ZW1lbnRzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5UaGlzIGlzIG5vdCBpbnRlbmRlZCBmb3IgdXNlIHdpdGggYWN0dWFsIGNhcGFiaWxpdHkgc3RhdGVtZW50cywgYnV0IHdoZXJlIGNhcGFiaWxpdHkgc3RhdGVtZW50cyBhcmUgdXNlZCB0byBkZXNjcmliZSBwb3NzaWJsZSBvciBkZXNpcmVkIHN5c3RlbXMuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1czogZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2YgY2FwYWJpbGl0eSBzdGF0ZW1lbnRzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSByZXNvdXJjZSBsYXN0LW1vZGlmaWVkLWRhdGUsIHNpbmNlIHRoZSByZXNvdXJjZSBtYXkgYmUgYSBzZWNvbmRhcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50LiBBZGRpdGlvbmFsIHNwZWNpZmljIGRhdGVzIG1heSBiZSBhZGRlZCBhcyBleHRlbnNpb25zIG9yIGJlIGZvdW5kIGJ5IGNvbnN1bHRpbmcgUHJvdmVuYW5jZXMgYXNzb2NpYXRlZCB3aXRoIHBhc3QgdmVyc2lvbnMgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXRlOiBmaGlyLkZoaXJEYXRlVGltZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudC4gVGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgaW5kaXZpZHVhbCBvciBvcmdhbml6YXRpb24gdGhhdCBkZXZlbG9wZWQgYW5kIGluaXRpYWxseSBhdXRob3JlZCB0aGUgY29udGVudC4gVGhlIHB1Ymxpc2hlciBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBjb250YWN0IGZvciBxdWVzdGlvbnMgb3IgaXNzdWVzIHdpdGggdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50LiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIHB1Ymxpc2hlcj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWF5IGJlIGEgd2ViIHNpdGUsIGFuIGVtYWlsIGFkZHJlc3MsIGEgdGVsZXBob25lIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250YWN0OiBmaGlyLkNvbnRhY3REZXRhaWxbXTtcclxuICAvKipcclxuICAgKiBUaGlzIGRlc2NyaXB0aW9uIGNhbiBiZSB1c2VkIHRvIGNhcHR1cmUgZGV0YWlscyBzdWNoIGFzIHdoeSB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgd2FzIGJ1aWx0LCBjb21tZW50cyBhYm91dCBtaXN1c2UsIGluc3RydWN0aW9ucyBmb3IgY2xpbmljYWwgdXNlIGFuZCBpbnRlcnByZXRhdGlvbiwgbGl0ZXJhdHVyZSByZWZlcmVuY2VzLCBleGFtcGxlcyBmcm9tIHRoZSBwYXBlciB3b3JsZCwgZXRjLiBJdCBpcyBub3QgYSByZW5kZXJpbmcgb2YgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IGFzIGNvbnZleWVkIGluIHRoZSAndGV4dCcgZmllbGQgb2YgdGhlIHJlc291cmNlIGl0c2VsZi4gVGhpcyBpdGVtIFNIT1VMRCBiZSBwb3B1bGF0ZWQgdW5sZXNzIHRoZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgZnJvbSBjb250ZXh0IChlLmcuIHRoZSBsYW5ndWFnZSBvZiB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgaXMgcHJlc3VtZWQgdG8gYmUgdGhlIHByZWRvbWluYW50IGxhbmd1YWdlIGluIHRoZSBwbGFjZSB0aGUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgd2FzIGNyZWF0ZWQpLlRoaXMgZG9lcyBub3QgbmVlZCB0byBiZSBwb3B1bGF0ZWQgaWYgdGhlIGRlc2NyaXB0aW9uIGlzIGFkZXF1YXRlbHkgaW1wbGllZCBieSB0aGUgc29mdHdhcmUgb3IgaW1wbGVtZW50YXRpb24gZGV0YWlscy5cclxuICAgKi9cclxuICBwdWJsaWMgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiBtdWx0aXBsZSB1c2VDb250ZXh0cyBhcmUgc3BlY2lmaWVkLCB0aGVyZSBpcyBubyBleHBlY3RhdGlvbiB0aGF0IGFsbCBvciBhbnkgb2YgdGhlIGNvbnRleHRzIGFwcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1c2VDb250ZXh0OiBmaGlyLlVzYWdlQ29udGV4dFtdO1xyXG4gIC8qKlxyXG4gICAqIEl0IG1heSBiZSBwb3NzaWJsZSBmb3IgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IHRvIGJlIHVzZWQgaW4ganVyaXNkaWN0aW9ucyBvdGhlciB0aGFuIHRob3NlIGZvciB3aGljaCBpdCB3YXMgb3JpZ2luYWxseSBkZXNpZ25lZCBvciBpbnRlbmRlZC5cclxuICAgKi9cclxuICBwdWJsaWMganVyaXNkaWN0aW9uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgdXNhZ2Ugb2YgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50LiBJbnN0ZWFkLCBpdCBwcm92aWRlcyB0cmFjZWFiaWxpdHkgb2YgJyd3aHknJyB0aGUgcmVzb3VyY2UgaXMgZWl0aGVyIG5lZWRlZCBvciAnJ3doeScnIGl0IGlzIGRlZmluZWQgYXMgaXQgaXMuICBUaGlzIG1heSBiZSB1c2VkIHRvIHBvaW50IHRvIHNvdXJjZSBtYXRlcmlhbHMgb3Igc3BlY2lmaWNhdGlvbnMgdGhhdCBkcm92ZSB0aGUgc3RydWN0dXJlIG9mIHRoaXMgY2FwYWJpbGl0eSBzdGF0ZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHB1cnBvc2U/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb3B5cmlnaHQgc3RhdGVtZW50IHJlbGF0aW5nIHRvIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCBhbmQvb3IgaXRzIGNvbnRlbnRzLiBDb3B5cmlnaHQgc3RhdGVtZW50cyBhcmUgZ2VuZXJhbGx5IGxlZ2FsIHJlc3RyaWN0aW9ucyBvbiB0aGUgdXNlIGFuZCBwdWJsaXNoaW5nIG9mIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgY29weXJpZ2h0PzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB3YXkgdGhhdCB0aGlzIHN0YXRlbWVudCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLCB0byBkZXNjcmliZSBhbiBhY3R1YWwgcnVubmluZyBpbnN0YW5jZSBvZiBzb2Z0d2FyZSwgYSBwYXJ0aWN1bGFyIHByb2R1Y3QgKGtpbmQsIG5vdCBpbnN0YW5jZSBvZiBzb2Z0d2FyZSkgb3IgYSBjbGFzcyBvZiBpbXBsZW1lbnRhdGlvbiAoZS5nLiBhIGRlc2lyZWQgcHVyY2hhc2UpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBraW5kOiBmaGlyLkZoaXJDb2RlPENhcGFiaWxpdHlTdGF0ZW1lbnRLaW5kQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogSEw3IGRlZmluZXMgdGhlIGZvbGxvd2luZyBTZXJ2aWNlczogW1Rlcm1pbm9sb2d5IFNlcnZpY2VdKHRlcm1pbm9sb2d5LXNlcnZpY2UuaHRtbCkuICAgIFxyXG4gICAqIE1hbnkgW0ltcGxlbWVudGF0aW9uIEd1aWRlc10oaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9yZWdpc3RyeSkgZGVmaW5lIGFkZGl0aW9uYWwgc2VydmljZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGluc3RhbnRpYXRlczogZmhpci5GaGlyQ2Fub25pY2FsW107XHJcbiAgLyoqXHJcbiAgICogdGhlIGNvbnRlbnRzIG9mIGFueSBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGltcG9ydGVkIENhcGFiaWxpdHlTdGF0ZW1lbnRzIFNIQUxMIE5PVCBvdmVybGFwLCBpLmUuIHRoZXkgY2Fubm90IHJlZmVyIHRvIHRoZSBzYW1lIHJlc3QvcmVzb3VyY2UsIG9wZXJhdGlvbnMvbmFtZSwgc2VhcmNocGFyYW0vbmFtZSwgaW50ZXJhY3Rpb24vY29kZSwgbWVzc2FnaW5nL2VuZHBvaW50LCBkb2N1bWVudC9tb2RlIHBhaXIuXHJcbiAgICogQSBjYXBhYmlsaXR5IHN0YXRlbWVudCB0aGF0IGltcG9ydHMgYW5vdGhlciBDYXBhYmlsaXR5U3RhdGVtZW50IGF1dG9tYXRpY2FsbHkgaW5zdGFudGlhdGVzIGl0IHRvbyAodGhvdWdoIHRoaXMgaXMgb2Z0ZW4gbm90IGEgdmVyeSB1c2VmdWwgc3RhdGVtZW50IGZvciB0aGUga2luZHMgb2YgQ2FwYWJpbGl0eVN0YXRlbWVudHMgdGhhdCBhcmUgc3VpdGFibGUgZm9yIGltcG9ydGluZykuXHJcbiAgICovXHJcbiAgcHVibGljIGltcG9ydHM6IGZoaXIuRmhpckNhbm9uaWNhbFtdO1xyXG4gIC8qKlxyXG4gICAqIFNvZnR3YXJlIHRoYXQgaXMgY292ZXJlZCBieSB0aGlzIGNhcGFiaWxpdHkgc3RhdGVtZW50LiAgSXQgaXMgdXNlZCB3aGVuIHRoZSBjYXBhYmlsaXR5IHN0YXRlbWVudCBkZXNjcmliZXMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIHBhcnRpY3VsYXIgc29mdHdhcmUgdmVyc2lvbiwgaW5kZXBlbmRlbnQgb2YgYW4gaW5zdGFsbGF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzb2Z0d2FyZT86IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFNvZnR3YXJlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIGEgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gaW5zdGFuY2UgdGhhdCBpcyBkZXNjcmliZWQgYnkgdGhlIGNhcGFiaWxpdHkgc3RhdGVtZW50IC0gaS5lLiBhIHBhcnRpY3VsYXIgaW5zdGFsbGF0aW9uLCByYXRoZXIgdGhhbiB0aGUgY2FwYWJpbGl0aWVzIG9mIGEgc29mdHdhcmUgcHJvZ3JhbS5cclxuICAgKi9cclxuICBwdWJsaWMgaW1wbGVtZW50YXRpb24/OiBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRJbXBsZW1lbnRhdGlvbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VydmVycyBtYXkgaW1wbGVtZW50IG11bHRpcGxlIHZlcnNpb25zIChzZWUgW01hbmFnaW5nIE11bHRpcGxlIFZlcnNpb25zXSh2ZXJzaW9uaW5nLmh0bWwpLCBhbmQgdGhlIFskdmVyc2lvbnNdKGNhcGFiaWxpdHlzdGF0ZW1lbnQtb3BlcmF0aW9uLXZlcnNpb25zLmh0bWwpIG9wZXJhdGlvbikuIElmIHRoZXkgZG8sIGFuZCB0aGUgQ2FwYWJpbGl0eVN0YXRlbWVudCBpcyByZXF1ZXN0ZWQgZnJvbSB0aGUgc2VydmVyLCB0aGVuIHRoaXMgZmhpclZlcnNpb24gd2lsbCBiZSBlaXRoZXIgdGhlIHZlcnNpb24gcmVxdWVzdGVkLCBvciB0aGUgc2VydmVyJ3MgZGVmYXVsdCB2ZXJzaW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaGlyVmVyc2lvbjogZmhpci5GaGlyQ29kZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFwieG1sXCIsIFwianNvblwiIGFuZCBcInR0bFwiIGFyZSBhbGxvd2VkLCB3aGljaCBkZXNjcmliZSB0aGUgc2ltcGxlIGVuY29kaW5ncyBkZXNjcmliZWQgaW4gdGhlIHNwZWNpZmljYXRpb24gKGFuZCBpbXBseSBhcHByb3ByaWF0ZSBidW5kbGUgc3VwcG9ydCkuIE90aGVyd2lzZSwgbWltZSB0eXBlcyBhcmUgbGVnYWwgaGVyZS5cclxuICAgKi9cclxuICBwdWJsaWMgZm9ybWF0OiBmaGlyLkZoaXJDb2RlW107XHJcbiAgLyoqXHJcbiAgICogQXQgcHJlc2VudCwgdGhlIHBhdGNoIG1pbWUgdHlwZXMgYXBwbGljYXRpb24vanNvbi1wYXRjaCtqc29uIGFuZCBhcHBsaWNhdGlvbi94bWwtcGF0Y2greG1sIGFyZSBsZWdhbC4gR2VuZXJhbGx5LCBpZiBhIHNlcnZlciBzdXBwb3J0cyBQQVRDSCwgaXQgd291bGQgYmUgZXhwZWN0ZWQgdG8gc3VwcG9ydCB0aGUgcGF0Y2ggZm9ybWF0cyBhbmQgbWF0Y2ggdGhlIGZvcm1hdHMgaXQgc3VwcG9ydHMsIGJ1dCB0aGlzIGlzIG5vdCBhbHdheXMgcG9zc2libGUgb3IgbmVjZXNzYXJ5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXRjaEZvcm1hdDogZmhpci5GaGlyQ29kZVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgbGlzdCBvZiBpbXBsZW1lbnRhdGlvbiBndWlkZXMgdGhhdCB0aGUgc2VydmVyIGRvZXMgKG9yIHNob3VsZCkgc3VwcG9ydCBpbiB0aGVpciBlbnRpcmV0eS5cclxuICAgKi9cclxuICBwdWJsaWMgaW1wbGVtZW50YXRpb25HdWlkZTogZmhpci5GaGlyQ2Fub25pY2FsW107XHJcbiAgLyoqXHJcbiAgICogTXVsdGlwbGUgcmVwZXRpdGlvbnMgYWxsb3cgZGVmaW5pdGlvbiBvZiBib3RoIGNsaWVudCBhbmQvb3Igc2VydmVyIGJlaGF2aW9ycyBvciBwb3NzaWJseSBiZWhhdmlvcnMgdW5kZXIgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgKGZvciBzb2Z0d2FyZSBvciByZXF1aXJlbWVudHMgc3RhdGVtZW50cykuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc3Q6IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudFJlc3RbXTtcclxuICAvKipcclxuICAgKiBNdWx0aXBsZSByZXBldGl0aW9ucyBhbGxvdyB0aGUgZG9jdW1lbnRhdGlvbiBvZiBtdWx0aXBsZSBlbmRwb2ludHMgcGVyIHNvbHV0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtZXNzYWdpbmc6IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudE1lc3NhZ2luZ1tdO1xyXG4gIC8qKlxyXG4gICAqIEEgZG9jdW1lbnQgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZG9jdW1lbnQ6IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudERvY3VtZW50W107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ2FwYWJpbGl0eVN0YXRlbWVudCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENhcGFiaWxpdHlTdGF0ZW1lbnRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnQ2FwYWJpbGl0eVN0YXRlbWVudCc7XHJcbiAgICBpZiAoc291cmNlWyd1cmwnXSkgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudXJsfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ191cmwnXSkge1xyXG4gICAgICBpZiAodGhpcy51cmwpIHsgdGhpcy51cmwuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdXJsISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudXJsID0gbmV3IGZoaXIuRmhpclVyaShzb3VyY2UuX3VybCBhcyBQYXJ0aWFsPGZoaXIuRmhpclVyaUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndmVyc2lvbiddKSB7IHRoaXMudmVyc2lvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdmVyc2lvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLnZlcnNpb24pIHsgdGhpcy52ZXJzaW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3ZlcnNpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy52ZXJzaW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3ZlcnNpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX25hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYW1lKSB7IHRoaXMubmFtZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9uYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9uYW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd0aXRsZSddKSB7IHRoaXMudGl0bGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnRpdGxlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ190aXRsZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnRpdGxlKSB7IHRoaXMudGl0bGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdGl0bGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy50aXRsZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl90aXRsZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZXhwZXJpbWVudGFsJ10pIHsgdGhpcy5leHBlcmltZW50YWwgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5leHBlcmltZW50YWx9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2V4cGVyaW1lbnRhbCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmV4cGVyaW1lbnRhbCkgeyB0aGlzLmV4cGVyaW1lbnRhbC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9leHBlcmltZW50YWwhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5leHBlcmltZW50YWwgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX2V4cGVyaW1lbnRhbCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSkgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuZGF0ZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kYXRlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5kYXRlKSB7IHRoaXMuZGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZShzb3VyY2UuX2RhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncHVibGlzaGVyJ10pIHsgdGhpcy5wdWJsaXNoZXIgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnB1Ymxpc2hlcn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcHVibGlzaGVyJ10pIHtcclxuICAgICAgaWYgKHRoaXMucHVibGlzaGVyKSB7IHRoaXMucHVibGlzaGVyLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3B1Ymxpc2hlciEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnB1Ymxpc2hlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9wdWJsaXNoZXIgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRhY3QnXSkgeyB0aGlzLmNvbnRhY3QgPSBzb3VyY2UuY29udGFjdC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbnRhY3REZXRhaWwoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250YWN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGVzY3JpcHRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikgeyB0aGlzLmRlc2NyaXB0aW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rlc2NyaXB0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oc291cmNlLl9kZXNjcmlwdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpck1hcmtkb3duQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd1c2VDb250ZXh0J10pIHsgdGhpcy51c2VDb250ZXh0ID0gc291cmNlLnVzZUNvbnRleHQubWFwKCh4KSA9PiBuZXcgZmhpci5Vc2FnZUNvbnRleHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy51c2VDb250ZXh0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2p1cmlzZGljdGlvbiddKSB7IHRoaXMuanVyaXNkaWN0aW9uID0gc291cmNlLmp1cmlzZGljdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmp1cmlzZGljdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwdXJwb3NlJ10pIHsgdGhpcy5wdXJwb3NlID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLnB1cnBvc2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3B1cnBvc2UnXSkge1xyXG4gICAgICBpZiAodGhpcy5wdXJwb3NlKSB7IHRoaXMucHVycG9zZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9wdXJwb3NlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucHVycG9zZSA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bihzb3VyY2UuX3B1cnBvc2UgYXMgUGFydGlhbDxmaGlyLkZoaXJNYXJrZG93bkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29weXJpZ2h0J10pIHsgdGhpcy5jb3B5cmlnaHQgPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UuY29weXJpZ2h0fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb3B5cmlnaHQnXSkge1xyXG4gICAgICBpZiAodGhpcy5jb3B5cmlnaHQpIHsgdGhpcy5jb3B5cmlnaHQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY29weXJpZ2h0ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuY29weXJpZ2h0ID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHNvdXJjZS5fY29weXJpZ2h0IGFzIFBhcnRpYWw8Zmhpci5GaGlyTWFya2Rvd25BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2tpbmQnXSkgeyB0aGlzLmtpbmQgPSBuZXcgZmhpci5GaGlyQ29kZTxDYXBhYmlsaXR5U3RhdGVtZW50S2luZENvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5raW5kfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmtpbmQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfa2luZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmtpbmQpIHsgdGhpcy5raW5kLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2tpbmQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5raW5kID0gbmV3IGZoaXIuRmhpckNvZGU8Q2FwYWJpbGl0eVN0YXRlbWVudEtpbmRDb2RlVHlwZT4oc291cmNlLl9raW5kIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydpbnN0YW50aWF0ZXMnXSkgeyB0aGlzLmluc3RhbnRpYXRlcyA9IHNvdXJjZS5pbnN0YW50aWF0ZXMubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaW5zdGFudGlhdGVzID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19pbnN0YW50aWF0ZXMnXSkge1xyXG4gICAgICBzb3VyY2UuX2luc3RhbnRpYXRlcy5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pbnN0YW50aWF0ZXMubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5pbnN0YW50aWF0ZXNbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5pbnN0YW50aWF0ZXMucHVzaChuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHggYXMgUGFydGlhbDxmaGlyLkZoaXJDYW5vbmljYWxBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydpbXBvcnRzJ10pIHsgdGhpcy5pbXBvcnRzID0gc291cmNlLmltcG9ydHMubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaW1wb3J0cyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfaW1wb3J0cyddKSB7XHJcbiAgICAgIHNvdXJjZS5faW1wb3J0cy5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pbXBvcnRzLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMuaW1wb3J0c1tpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLmltcG9ydHMucHVzaChuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHggYXMgUGFydGlhbDxmaGlyLkZoaXJDYW5vbmljYWxBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzb2Z0d2FyZSddKSB7IHRoaXMuc29mdHdhcmUgPSBuZXcgZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50U29mdHdhcmUoc291cmNlLnNvZnR3YXJlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaW1wbGVtZW50YXRpb24nXSkgeyB0aGlzLmltcGxlbWVudGF0aW9uID0gbmV3IGZoaXIuQ2FwYWJpbGl0eVN0YXRlbWVudEltcGxlbWVudGF0aW9uKHNvdXJjZS5pbXBsZW1lbnRhdGlvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2ZoaXJWZXJzaW9uJ10pIHsgdGhpcy5maGlyVmVyc2lvbiA9IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogc291cmNlLmZoaXJWZXJzaW9ufSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmZoaXJWZXJzaW9uID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2ZoaXJWZXJzaW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZmhpclZlcnNpb24pIHsgdGhpcy5maGlyVmVyc2lvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9maGlyVmVyc2lvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmZoaXJWZXJzaW9uID0gbmV3IGZoaXIuRmhpckNvZGUoc291cmNlLl9maGlyVmVyc2lvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGVBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2Zvcm1hdCddKSB7IHRoaXMuZm9ybWF0ID0gc291cmNlLmZvcm1hdC5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZm9ybWF0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19mb3JtYXQnXSkge1xyXG4gICAgICBzb3VyY2UuX2Zvcm1hdC5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5mb3JtYXQubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5mb3JtYXRbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5mb3JtYXQucHVzaChuZXcgZmhpci5GaGlyQ29kZSh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZUFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3BhdGNoRm9ybWF0J10pIHsgdGhpcy5wYXRjaEZvcm1hdCA9IHNvdXJjZS5wYXRjaEZvcm1hdC5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGF0Y2hGb3JtYXQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3BhdGNoRm9ybWF0J10pIHtcclxuICAgICAgc291cmNlLl9wYXRjaEZvcm1hdC5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wYXRjaEZvcm1hdC5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLnBhdGNoRm9ybWF0W2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMucGF0Y2hGb3JtYXQucHVzaChuZXcgZmhpci5GaGlyQ29kZSh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZUFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2ltcGxlbWVudGF0aW9uR3VpZGUnXSkgeyB0aGlzLmltcGxlbWVudGF0aW9uR3VpZGUgPSBzb3VyY2UuaW1wbGVtZW50YXRpb25HdWlkZS5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pbXBsZW1lbnRhdGlvbkd1aWRlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19pbXBsZW1lbnRhdGlvbkd1aWRlJ10pIHtcclxuICAgICAgc291cmNlLl9pbXBsZW1lbnRhdGlvbkd1aWRlLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmltcGxlbWVudGF0aW9uR3VpZGUubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5pbXBsZW1lbnRhdGlvbkd1aWRlW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMuaW1wbGVtZW50YXRpb25HdWlkZS5wdXNoKG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3Jlc3QnXSkgeyB0aGlzLnJlc3QgPSBzb3VyY2UucmVzdC5tYXAoKHgpID0+IG5ldyBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnRSZXN0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVzdCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtZXNzYWdpbmcnXSkgeyB0aGlzLm1lc3NhZ2luZyA9IHNvdXJjZS5tZXNzYWdpbmcubWFwKCh4KSA9PiBuZXcgZmhpci5DYXBhYmlsaXR5U3RhdGVtZW50TWVzc2FnaW5nKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubWVzc2FnaW5nID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2RvY3VtZW50J10pIHsgdGhpcy5kb2N1bWVudCA9IHNvdXJjZS5kb2N1bWVudC5tYXAoKHgpID0+IG5ldyBmaGlyLkNhcGFiaWxpdHlTdGF0ZW1lbnREb2N1bWVudCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRvY3VtZW50ID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnQ2FwYWJpbGl0eVN0YXRlbWVudCcgfVxyXG4gICAgdGhpcy52UmVxUygncmVzb3VyY2VUeXBlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygndXJsJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygndmVyc2lvbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ25hbWUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCd0aXRsZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudlJlcVNWKCdzdGF0dXMnLGV4cHJlc3Npb24sJ1B1YmxpY2F0aW9uU3RhdHVzJyxQdWJsaWNhdGlvblN0YXR1c1ZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZPcHRTKCdleHBlcmltZW50YWwnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZSZXFTKCdkYXRlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygncHVibGlzaGVyJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnY29udGFjdCcsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ2Rlc2NyaXB0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgndXNlQ29udGV4dCcsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2p1cmlzZGljdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ3B1cnBvc2UnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdjb3B5cmlnaHQnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZSZXFTVigna2luZCcsZXhwcmVzc2lvbiwnQ2FwYWJpbGl0eVN0YXRlbWVudEtpbmQnLENhcGFiaWxpdHlTdGF0ZW1lbnRLaW5kVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9wdEEoJ2luc3RhbnRpYXRlcycsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2ltcG9ydHMnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdzb2Z0d2FyZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ2ltcGxlbWVudGF0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52UmVxU1YoJ2ZoaXJWZXJzaW9uJyxleHByZXNzaW9uLCdGSElSVmVyc2lvbicsRkhJUlZlcnNpb25Wc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52UmVxQSgnZm9ybWF0JyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgncGF0Y2hGb3JtYXQnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdpbXBsZW1lbnRhdGlvbkd1aWRlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgncmVzdCcsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ21lc3NhZ2luZycsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2RvY3VtZW50JyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19