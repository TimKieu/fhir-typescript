/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { RestfulSecurityServiceCodings } from '../fhirValueSets/RestfulSecurityServiceCodings.js';
import { TypeRestfulInteractionCodings } from '../fhirValueSets/TypeRestfulInteractionCodings.js';
import { SearchParamTypeCodings } from '../fhirValueSets/SearchParamTypeCodings.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { VersioningPolicyCodings } from '../fhirValueSets/VersioningPolicyCodings.js';
import { ConditionalReadStatusCodings } from '../fhirValueSets/ConditionalReadStatusCodings.js';
import { ConditionalDeleteStatusCodings } from '../fhirValueSets/ConditionalDeleteStatusCodings.js';
import { ReferenceHandlingPolicyCodings } from '../fhirValueSets/ReferenceHandlingPolicyCodings.js';
import { SystemRestfulInteractionCodings } from '../fhirValueSets/SystemRestfulInteractionCodings.js';
import { RestfulCapabilityModeCodings } from '../fhirValueSets/RestfulCapabilityModeCodings.js';
import { MessageTransportCodings } from '../fhirValueSets/MessageTransportCodings.js';
import { EventCapabilityModeCodings } from '../fhirValueSets/EventCapabilityModeCodings.js';
import { DocumentModeCodings } from '../fhirValueSets/DocumentModeCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { CapabilityStatementKindCodings } from '../fhirValueSets/CapabilityStatementKindCodings.js';
import { FHIRVersionCodings } from '../fhirValueSets/FHIRVersionCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirUrl } from './FhirUrl.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirCode } from './FhirCode.js';
import { Coding } from './Coding.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { FhirUri } from './FhirUri.js';
import { ContactDetail } from './ContactDetail.js';
import { UsageContext } from './UsageContext.js';

// <auto-generated/>
/**
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
var CapabilityStatementSoftware = /** @class */ (function (_super) {
    __extends(CapabilityStatementSoftware, _super);
    /**
     * Default constructor for CapabilityStatementSoftware - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementSoftware(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['releaseDate']) {
            _this.releaseDate = new FhirDateTime({ value: source.releaseDate });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementSoftware.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: CapabilityStatement.software.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["releaseDate"]) {
            (_c = outcome.issue).push.apply(_c, this.releaseDate.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementSoftware._fts_dataType = 'CapabilityStatementSoftware';
    return CapabilityStatementSoftware;
}(BackboneElement));
/**
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
var CapabilityStatementImplementation = /** @class */ (function (_super) {
    __extends(CapabilityStatementImplementation, _super);
    /**
     * Default constructor for CapabilityStatementImplementation - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementImplementation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        else {
            _this.description = null;
        }
        if (source['url']) {
            _this.url = new FhirUrl({ value: source.url });
        }
        if (source['custodian']) {
            _this.custodian = new Reference(source.custodian);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementImplementation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['description']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property description:fhir.FhirString fhir: CapabilityStatement.implementation.description:string', }));
        }
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["url"]) {
            (_b = outcome.issue).push.apply(_b, this.url.doModelValidation().issue);
        }
        if (this["custodian"]) {
            (_c = outcome.issue).push.apply(_c, this.custodian.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementImplementation._fts_dataType = 'CapabilityStatementImplementation';
    return CapabilityStatementImplementation;
}(BackboneElement));
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
var CapabilityStatementRestSecurity = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestSecurity, _super);
    /**
     * Default constructor for CapabilityStatementRestSecurity - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementRestSecurity(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['cors']) {
            _this.cors = new FhirBoolean({ value: source.cors });
        }
        if (source['service']) {
            _this.service = source.service.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.service = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for service (CapabilityStatement.rest.security.service)
     */
    CapabilityStatementRestSecurity.serviceExtensibleCoding = function () {
        return RestfulSecurityServiceCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementRestSecurity.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["cors"]) {
            (_a = outcome.issue).push.apply(_a, this.cors.doModelValidation().issue);
        }
        if (this["service"]) {
            this.service.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementRestSecurity._fts_dataType = 'CapabilityStatementRestSecurity';
    return CapabilityStatementRestSecurity;
}(BackboneElement));
/**
 * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
 */
var CapabilityStatementRestResourceInteraction = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResourceInteraction, _super);
    /**
     * Default constructor for CapabilityStatementRestResourceInteraction - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementRestResourceInteraction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = source.code;
        }
        else {
            _this.code = null;
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for code (CapabilityStatement.rest.resource.interaction.code)
     */
    CapabilityStatementRestResourceInteraction.codeRequiredCoding = function () {
        return TypeRestfulInteractionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementRestResourceInteraction.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:TypeRestfulInteractionCodeType fhir: CapabilityStatement.rest.resource.interaction.code:code', }));
        }
        if (this["documentation"]) {
            (_a = outcome.issue).push.apply(_a, this.documentation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementRestResourceInteraction._fts_dataType = 'CapabilityStatementRestResourceInteraction';
    return CapabilityStatementRestResourceInteraction;
}(BackboneElement));
/**
 * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
 */
var CapabilityStatementRestResourceSearchParam = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResourceSearchParam, _super);
    /**
     * Default constructor for CapabilityStatementRestResourceSearchParam - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementRestResourceSearchParam(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['definition']) {
            _this.definition = new FhirCanonical({ value: source.definition });
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (CapabilityStatement.rest.resource.searchParam.type)
     */
    CapabilityStatementRestResourceSearchParam.typeRequiredCoding = function () {
        return SearchParamTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementRestResourceSearchParam.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: CapabilityStatement.rest.resource.searchParam.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["definition"]) {
            (_b = outcome.issue).push.apply(_b, this.definition.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:SearchParamTypeCodeType fhir: CapabilityStatement.rest.resource.searchParam.type:code', }));
        }
        if (this["documentation"]) {
            (_c = outcome.issue).push.apply(_c, this.documentation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementRestResourceSearchParam._fts_dataType = 'CapabilityStatementRestResourceSearchParam';
    return CapabilityStatementRestResourceSearchParam;
}(BackboneElement));
/**
 * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.
 * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
 */
var CapabilityStatementRestResourceOperation = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResourceOperation, _super);
    /**
     * Default constructor for CapabilityStatementRestResourceOperation - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementRestResourceOperation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['definition']) {
            _this.definition = new FhirCanonical({ value: source.definition });
        }
        else {
            _this.definition = null;
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementRestResourceOperation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: CapabilityStatement.rest.resource.operation.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (!this['definition']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property definition:fhir.FhirCanonical fhir: CapabilityStatement.rest.resource.operation.definition:canonical', }));
        }
        if (this["definition"]) {
            (_b = outcome.issue).push.apply(_b, this.definition.doModelValidation().issue);
        }
        if (this["documentation"]) {
            (_c = outcome.issue).push.apply(_c, this.documentation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementRestResourceOperation._fts_dataType = 'CapabilityStatementRestResourceOperation';
    return CapabilityStatementRestResourceOperation;
}(BackboneElement));
/**
 * Max of one repetition per resource type.
 */
var CapabilityStatementRestResource = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestResource, _super);
    /**
     * Default constructor for CapabilityStatementRestResource - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementRestResource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new FhirCode({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['profile']) {
            _this.profile = new FhirCanonical({ value: source.profile });
        }
        if (source['supportedProfile']) {
            _this.supportedProfile = source.supportedProfile.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.supportedProfile = [];
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        if (source['interaction']) {
            _this.interaction = source.interaction.map(function (x) { return new CapabilityStatementRestResourceInteraction(x); });
        }
        else {
            _this.interaction = [];
        }
        if (source['versioning']) {
            _this.versioning = source.versioning;
        }
        if (source['readHistory']) {
            _this.readHistory = new FhirBoolean({ value: source.readHistory });
        }
        if (source['updateCreate']) {
            _this.updateCreate = new FhirBoolean({ value: source.updateCreate });
        }
        if (source['conditionalCreate']) {
            _this.conditionalCreate = new FhirBoolean({ value: source.conditionalCreate });
        }
        if (source['conditionalRead']) {
            _this.conditionalRead = source.conditionalRead;
        }
        if (source['conditionalUpdate']) {
            _this.conditionalUpdate = new FhirBoolean({ value: source.conditionalUpdate });
        }
        if (source['conditionalDelete']) {
            _this.conditionalDelete = source.conditionalDelete;
        }
        if (source['referencePolicy']) {
            _this.referencePolicy = source.referencePolicy.map(function (x) { return x; });
        }
        else {
            _this.referencePolicy = [];
        }
        if (source['searchInclude']) {
            _this.searchInclude = source.searchInclude.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.searchInclude = [];
        }
        if (source['searchRevInclude']) {
            _this.searchRevInclude = source.searchRevInclude.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.searchRevInclude = [];
        }
        if (source['searchParam']) {
            _this.searchParam = source.searchParam.map(function (x) { return new CapabilityStatementRestResourceSearchParam(x); });
        }
        else {
            _this.searchParam = [];
        }
        if (source['operation']) {
            _this.operation = source.operation.map(function (x) { return new CapabilityStatementRestResourceOperation(x); });
        }
        else {
            _this.operation = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (CapabilityStatement.rest.resource.type)
     */
    CapabilityStatementRestResource.typeRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Required-bound Value Set for versioning (CapabilityStatement.rest.resource.versioning)
     */
    CapabilityStatementRestResource.versioningRequiredCoding = function () {
        return VersioningPolicyCodings;
    };
    /**
     * Required-bound Value Set for conditionalRead (CapabilityStatement.rest.resource.conditionalRead)
     */
    CapabilityStatementRestResource.conditionalReadRequiredCoding = function () {
        return ConditionalReadStatusCodings;
    };
    /**
     * Required-bound Value Set for conditionalDelete (CapabilityStatement.rest.resource.conditionalDelete)
     */
    CapabilityStatementRestResource.conditionalDeleteRequiredCoding = function () {
        return ConditionalDeleteStatusCodings;
    };
    /**
     * Required-bound Value Set for referencePolicy (CapabilityStatement.rest.resource.referencePolicy)
     */
    CapabilityStatementRestResource.referencePolicyRequiredCoding = function () {
        return ReferenceHandlingPolicyCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementRestResource.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirCode fhir: CapabilityStatement.rest.resource.type:code', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["profile"]) {
            (_b = outcome.issue).push.apply(_b, this.profile.doModelValidation().issue);
        }
        if (this["supportedProfile"]) {
            this.supportedProfile.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["documentation"]) {
            (_c = outcome.issue).push.apply(_c, this.documentation.doModelValidation().issue);
        }
        if (this["interaction"]) {
            this.interaction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["readHistory"]) {
            (_d = outcome.issue).push.apply(_d, this.readHistory.doModelValidation().issue);
        }
        if (this["updateCreate"]) {
            (_e = outcome.issue).push.apply(_e, this.updateCreate.doModelValidation().issue);
        }
        if (this["conditionalCreate"]) {
            (_f = outcome.issue).push.apply(_f, this.conditionalCreate.doModelValidation().issue);
        }
        if (this["conditionalUpdate"]) {
            (_g = outcome.issue).push.apply(_g, this.conditionalUpdate.doModelValidation().issue);
        }
        if (this["searchInclude"]) {
            this.searchInclude.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["searchRevInclude"]) {
            this.searchRevInclude.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["searchParam"]) {
            this.searchParam.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["operation"]) {
            this.operation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementRestResource._fts_dataType = 'CapabilityStatementRestResource';
    return CapabilityStatementRestResource;
}(BackboneElement));
/**
 * A specification of restful operations supported by the system.
 */
var CapabilityStatementRestInteraction = /** @class */ (function (_super) {
    __extends(CapabilityStatementRestInteraction, _super);
    /**
     * Default constructor for CapabilityStatementRestInteraction - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementRestInteraction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = source.code;
        }
        else {
            _this.code = null;
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for code (CapabilityStatement.rest.interaction.code)
     */
    CapabilityStatementRestInteraction.codeRequiredCoding = function () {
        return SystemRestfulInteractionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementRestInteraction.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:SystemRestfulInteractionCodeType fhir: CapabilityStatement.rest.interaction.code:code', }));
        }
        if (this["documentation"]) {
            (_a = outcome.issue).push.apply(_a, this.documentation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementRestInteraction._fts_dataType = 'CapabilityStatementRestInteraction';
    return CapabilityStatementRestInteraction;
}(BackboneElement));
/**
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
var CapabilityStatementRest = /** @class */ (function (_super) {
    __extends(CapabilityStatementRest, _super);
    /**
     * Default constructor for CapabilityStatementRest - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementRest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['mode']) {
            _this.mode = source.mode;
        }
        else {
            _this.mode = null;
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        if (source['security']) {
            _this.security = new CapabilityStatementRestSecurity(source.security);
        }
        if (source['resource']) {
            _this.resource = source.resource.map(function (x) { return new CapabilityStatementRestResource(x); });
        }
        else {
            _this.resource = [];
        }
        if (source['interaction']) {
            _this.interaction = source.interaction.map(function (x) { return new CapabilityStatementRestInteraction(x); });
        }
        else {
            _this.interaction = [];
        }
        if (source['searchParam']) {
            _this.searchParam = source.searchParam.map(function (x) { return new CapabilityStatementRestResourceSearchParam(x); });
        }
        else {
            _this.searchParam = [];
        }
        if (source['operation']) {
            _this.operation = source.operation.map(function (x) { return new CapabilityStatementRestResourceOperation(x); });
        }
        else {
            _this.operation = [];
        }
        if (source['compartment']) {
            _this.compartment = source.compartment.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.compartment = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.rest.mode)
     */
    CapabilityStatementRest.modeRequiredCoding = function () {
        return RestfulCapabilityModeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementRest.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['mode']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property mode:RestfulCapabilityModeCodeType fhir: CapabilityStatement.rest.mode:code', }));
        }
        if (this["documentation"]) {
            (_a = outcome.issue).push.apply(_a, this.documentation.doModelValidation().issue);
        }
        if (this["security"]) {
            (_b = outcome.issue).push.apply(_b, this.security.doModelValidation().issue);
        }
        if (this["resource"]) {
            this.resource.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["interaction"]) {
            this.interaction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["searchParam"]) {
            this.searchParam.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["operation"]) {
            this.operation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["compartment"]) {
            this.compartment.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementRest._fts_dataType = 'CapabilityStatementRest';
    return CapabilityStatementRest;
}(BackboneElement));
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
var CapabilityStatementMessagingEndpoint = /** @class */ (function (_super) {
    __extends(CapabilityStatementMessagingEndpoint, _super);
    /**
     * Default constructor for CapabilityStatementMessagingEndpoint - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementMessagingEndpoint(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['protocol']) {
            _this.protocol = new Coding(source.protocol);
        }
        else {
            _this.protocol = null;
        }
        if (source['address']) {
            _this.address = new FhirUrl({ value: source.address });
        }
        else {
            _this.address = null;
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for protocol (CapabilityStatement.messaging.endpoint.protocol)
     */
    CapabilityStatementMessagingEndpoint.protocolExtensibleCoding = function () {
        return MessageTransportCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementMessagingEndpoint.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['protocol']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property protocol:fhir.Coding fhir: CapabilityStatement.messaging.endpoint.protocol:Coding', }));
        }
        if (this["protocol"]) {
            (_a = outcome.issue).push.apply(_a, this.protocol.doModelValidation().issue);
        }
        if (!this['address']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property address:fhir.FhirUrl fhir: CapabilityStatement.messaging.endpoint.address:url', }));
        }
        if (this["address"]) {
            (_b = outcome.issue).push.apply(_b, this.address.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementMessagingEndpoint._fts_dataType = 'CapabilityStatementMessagingEndpoint';
    return CapabilityStatementMessagingEndpoint;
}(BackboneElement));
/**
 * This is a proposed alternative to the messaging.event structure.
 */
var CapabilityStatementMessagingSupportedMessage = /** @class */ (function (_super) {
    __extends(CapabilityStatementMessagingSupportedMessage, _super);
    /**
     * Default constructor for CapabilityStatementMessagingSupportedMessage - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementMessagingSupportedMessage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['mode']) {
            _this.mode = source.mode;
        }
        else {
            _this.mode = null;
        }
        if (source['definition']) {
            _this.definition = new FhirCanonical({ value: source.definition });
        }
        else {
            _this.definition = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.messaging.supportedMessage.mode)
     */
    CapabilityStatementMessagingSupportedMessage.modeRequiredCoding = function () {
        return EventCapabilityModeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementMessagingSupportedMessage.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['mode']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property mode:EventCapabilityModeCodeType fhir: CapabilityStatement.messaging.supportedMessage.mode:code', }));
        }
        if (!this['definition']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property definition:fhir.FhirCanonical fhir: CapabilityStatement.messaging.supportedMessage.definition:canonical', }));
        }
        if (this["definition"]) {
            (_a = outcome.issue).push.apply(_a, this.definition.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementMessagingSupportedMessage._fts_dataType = 'CapabilityStatementMessagingSupportedMessage';
    return CapabilityStatementMessagingSupportedMessage;
}(BackboneElement));
/**
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
var CapabilityStatementMessaging = /** @class */ (function (_super) {
    __extends(CapabilityStatementMessaging, _super);
    /**
     * Default constructor for CapabilityStatementMessaging - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementMessaging(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['endpoint']) {
            _this.endpoint = source.endpoint.map(function (x) { return new CapabilityStatementMessagingEndpoint(x); });
        }
        else {
            _this.endpoint = [];
        }
        if (source['reliableCache']) {
            _this.reliableCache = new FhirUnsignedInt({ value: source.reliableCache });
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        if (source['supportedMessage']) {
            _this.supportedMessage = source.supportedMessage.map(function (x) { return new CapabilityStatementMessagingSupportedMessage(x); });
        }
        else {
            _this.supportedMessage = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementMessaging.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["endpoint"]) {
            this.endpoint.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reliableCache"]) {
            (_a = outcome.issue).push.apply(_a, this.reliableCache.doModelValidation().issue);
        }
        if (this["documentation"]) {
            (_b = outcome.issue).push.apply(_b, this.documentation.doModelValidation().issue);
        }
        if (this["supportedMessage"]) {
            this.supportedMessage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementMessaging._fts_dataType = 'CapabilityStatementMessaging';
    return CapabilityStatementMessaging;
}(BackboneElement));
/**
 * A document definition.
 */
var CapabilityStatementDocument = /** @class */ (function (_super) {
    __extends(CapabilityStatementDocument, _super);
    /**
     * Default constructor for CapabilityStatementDocument - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatementDocument(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['mode']) {
            _this.mode = source.mode;
        }
        else {
            _this.mode = null;
        }
        if (source['documentation']) {
            _this.documentation = new FhirMarkdown({ value: source.documentation });
        }
        if (source['profile']) {
            _this.profile = new FhirCanonical({ value: source.profile });
        }
        else {
            _this.profile = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.document.mode)
     */
    CapabilityStatementDocument.modeRequiredCoding = function () {
        return DocumentModeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatementDocument.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['mode']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property mode:DocumentModeCodeType fhir: CapabilityStatement.document.mode:code', }));
        }
        if (this["documentation"]) {
            (_a = outcome.issue).push.apply(_a, this.documentation.doModelValidation().issue);
        }
        if (!this['profile']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property profile:fhir.FhirCanonical fhir: CapabilityStatement.document.profile:canonical', }));
        }
        if (this["profile"]) {
            (_b = outcome.issue).push.apply(_b, this.profile.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatementDocument._fts_dataType = 'CapabilityStatementDocument';
    return CapabilityStatementDocument;
}(BackboneElement));
/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
var CapabilityStatement = /** @class */ (function (_super) {
    __extends(CapabilityStatement, _super);
    /**
     * Default constructor for CapabilityStatement - initializes any required elements to null if a value is not provided.
     */
    function CapabilityStatement(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'CapabilityStatement';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        else {
            _this.date = null;
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['kind']) {
            _this.kind = source.kind;
        }
        else {
            _this.kind = null;
        }
        if (source['instantiates']) {
            _this.instantiates = source.instantiates.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.instantiates = [];
        }
        if (source['imports']) {
            _this.imports = source.imports.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.imports = [];
        }
        if (source['software']) {
            _this.software = new CapabilityStatementSoftware(source.software);
        }
        if (source['implementation']) {
            _this.implementation = new CapabilityStatementImplementation(source.implementation);
        }
        if (source['fhirVersion']) {
            _this.fhirVersion = new FhirCode({ value: source.fhirVersion });
        }
        else {
            _this.fhirVersion = null;
        }
        if (source['format']) {
            _this.format = source.format.map(function (x) { return new FhirCode({ value: x }); });
        }
        else {
            _this.format = [];
        }
        if (source['patchFormat']) {
            _this.patchFormat = source.patchFormat.map(function (x) { return new FhirCode({ value: x }); });
        }
        else {
            _this.patchFormat = [];
        }
        if (source['implementationGuide']) {
            _this.implementationGuide = source.implementationGuide.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.implementationGuide = [];
        }
        if (source['rest']) {
            _this.rest = source.rest.map(function (x) { return new CapabilityStatementRest(x); });
        }
        else {
            _this.rest = [];
        }
        if (source['messaging']) {
            _this.messaging = source.messaging.map(function (x) { return new CapabilityStatementMessaging(x); });
        }
        else {
            _this.messaging = [];
        }
        if (source['document']) {
            _this.document = source.document.map(function (x) { return new CapabilityStatementDocument(x); });
        }
        else {
            _this.document = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (CapabilityStatement.status)
     */
    CapabilityStatement.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for kind (CapabilityStatement.kind)
     */
    CapabilityStatement.kindRequiredCoding = function () {
        return CapabilityStatementKindCodings;
    };
    /**
     * Required-bound Value Set for fhirVersion (CapabilityStatement.fhirVersion)
     */
    CapabilityStatement.fhirVersionRequiredCoding = function () {
        return FHIRVersionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CapabilityStatement.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"CapabilityStatement" fhir: CapabilityStatement.resourceType:"CapabilityStatement"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: CapabilityStatement.status:code', }));
        }
        if (this["experimental"]) {
            (_e = outcome.issue).push.apply(_e, this.experimental.doModelValidation().issue);
        }
        if (!this['date']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: CapabilityStatement.date:dateTime', }));
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_g = outcome.issue).push.apply(_g, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_h = outcome.issue).push.apply(_h, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_j = outcome.issue).push.apply(_j, this.purpose.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_k = outcome.issue).push.apply(_k, this.copyright.doModelValidation().issue);
        }
        if (!this['kind']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property kind:CapabilityStatementKindCodeType fhir: CapabilityStatement.kind:code', }));
        }
        if (this["instantiates"]) {
            this.instantiates.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["imports"]) {
            this.imports.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["software"]) {
            (_l = outcome.issue).push.apply(_l, this.software.doModelValidation().issue);
        }
        if (this["implementation"]) {
            (_m = outcome.issue).push.apply(_m, this.implementation.doModelValidation().issue);
        }
        if (!this['fhirVersion']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property fhirVersion:fhir.FhirCode fhir: CapabilityStatement.fhirVersion:code', }));
        }
        if (this["fhirVersion"]) {
            (_o = outcome.issue).push.apply(_o, this.fhirVersion.doModelValidation().issue);
        }
        if (!this['format']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property format:fhir.FhirCode[] fhir: CapabilityStatement.format:code', }));
        }
        else if (!Array.isArray(this.format)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property format:fhir.FhirCode[] fhir: CapabilityStatement.format:code', }));
        }
        else if (this.format.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property format:fhir.FhirCode[] fhir: CapabilityStatement.format:code', }));
        }
        if (this["format"]) {
            this.format.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["patchFormat"]) {
            this.patchFormat.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["implementationGuide"]) {
            this.implementationGuide.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["rest"]) {
            this.rest.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["messaging"]) {
            this.messaging.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["document"]) {
            this.document.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CapabilityStatement._fts_dataType = 'CapabilityStatement';
    return CapabilityStatement;
}(DomainResource));

export { CapabilityStatement, CapabilityStatementDocument, CapabilityStatementImplementation, CapabilityStatementMessaging, CapabilityStatementMessagingEndpoint, CapabilityStatementMessagingSupportedMessage, CapabilityStatementRest, CapabilityStatementRestInteraction, CapabilityStatementRestResource, CapabilityStatementRestResourceInteraction, CapabilityStatementRestResourceOperation, CapabilityStatementRestResourceSearchParam, CapabilityStatementRestSecurity, CapabilityStatementSoftware };
//# sourceMappingURL=CapabilityStatement.js.map
