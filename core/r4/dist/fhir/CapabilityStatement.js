// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CapabilityStatement
import * as fhir from '../fhir.js';
// @ts-ignore
import { RestfulSecurityServiceCodings, } from '../fhirValueSets/RestfulSecurityServiceCodings.js';
// @ts-ignore
import { TypeRestfulInteractionCodes } from '../fhirValueSets/TypeRestfulInteractionCodes.js';
// @ts-ignore
import { SearchParamTypeCodes } from '../fhirValueSets/SearchParamTypeCodes.js';
// @ts-ignore
import { ResourceTypesCodes } from '../fhirValueSets/ResourceTypesCodes.js';
// @ts-ignore
import { VersioningPolicyCodes } from '../fhirValueSets/VersioningPolicyCodes.js';
// @ts-ignore
import { ConditionalReadStatusCodes } from '../fhirValueSets/ConditionalReadStatusCodes.js';
// @ts-ignore
import { ConditionalDeleteStatusCodes } from '../fhirValueSets/ConditionalDeleteStatusCodes.js';
// @ts-ignore
import { ReferenceHandlingPolicyCodes } from '../fhirValueSets/ReferenceHandlingPolicyCodes.js';
// @ts-ignore
import { SystemRestfulInteractionCodes } from '../fhirValueSets/SystemRestfulInteractionCodes.js';
// @ts-ignore
import { RestfulCapabilityModeCodes } from '../fhirValueSets/RestfulCapabilityModeCodes.js';
// @ts-ignore
import { MessageTransportCodings, } from '../fhirValueSets/MessageTransportCodings.js';
// @ts-ignore
import { EventCapabilityModeCodes } from '../fhirValueSets/EventCapabilityModeCodes.js';
// @ts-ignore
import { DocumentModeCodes } from '../fhirValueSets/DocumentModeCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { CapabilityStatementKindCodes } from '../fhirValueSets/CapabilityStatementKindCodes.js';
// @ts-ignore
import { FHIRVersionCodes } from '../fhirValueSets/FHIRVersionCodes.js';
/**
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
export class CapabilityStatementSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['releaseDate']) {
            this.releaseDate = new fhir.FhirDateTime({ value: source.releaseDate });
        }
        if (source['_releaseDate']) {
            if (this.releaseDate) {
                this.releaseDate.addExtendedProperties(source._releaseDate);
            }
            else {
                this.releaseDate = new fhir.FhirDateTime(source._releaseDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.software';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: CapabilityStatement.software.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["releaseDate"]) {
            issues.push(...this.releaseDate.doModelValidation(expression + '.releaseDate'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementSoftware._fts_dataType = 'CapabilityStatementSoftware';
/**
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class CapabilityStatementImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUrl(source._url);
            }
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.implementation';
        }
        if (!this['description']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description fhir: CapabilityStatement.implementation.description:string', expression: [expression] });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["custodian"]) {
            issues.push(...this.custodian.doModelValidation(expression + '.custodian'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementImplementation._fts_dataType = 'CapabilityStatementImplementation';
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export class CapabilityStatementRestSecurity extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestSecurity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['cors']) {
            this.cors = new fhir.FhirBoolean({ value: source.cors });
        }
        if (source['_cors']) {
            if (this.cors) {
                this.cors.addExtendedProperties(source._cors);
            }
            else {
                this.cors = new fhir.FhirBoolean(source._cors);
            }
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.service = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
    }
    /**
     * Extensible-bound Value Set for service (CapabilityStatement.rest.security.service)
     */
    static get serviceExtensibleCodings() {
        return RestfulSecurityServiceCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.security';
        }
        if (this["cors"]) {
            issues.push(...this.cors.doModelValidation(expression + '.cors'));
        }
        if (this["service"]) {
            this.service.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.service[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestSecurity._fts_dataType = 'CapabilityStatementRestSecurity';
/**
 * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
 */
export class CapabilityStatementRestResourceInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Required-bound Value Set for code (CapabilityStatement.rest.resource.interaction.code)
     */
    static get codeRequiredCodes() {
        return TypeRestfulInteractionCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource.interaction';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: CapabilityStatement.rest.resource.interaction.code:code', expression: [expression] });
        }
        if (this['code'] && (!Object.values(TypeRestfulInteractionCodes).includes(this.code.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property code fhir: CapabilityStatement.rest.resource.interaction.code:code Required binding to: TypeRestfulInteraction', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceInteraction._fts_dataType = 'CapabilityStatementRestResourceInteraction';
/**
 * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
 */
export class CapabilityStatementRestResourceSearchParam extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceSearchParam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirCanonical(source._definition);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Required-bound Value Set for type (CapabilityStatement.rest.resource.searchParam.type)
     */
    static get typeRequiredCodes() {
        return SearchParamTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource.searchParam';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: CapabilityStatement.rest.resource.searchParam.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation(expression + '.definition'));
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: CapabilityStatement.rest.resource.searchParam.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(SearchParamTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: CapabilityStatement.rest.resource.searchParam.type:code Required binding to: SearchParamType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceSearchParam._fts_dataType = 'CapabilityStatementRestResourceSearchParam';
/**
 * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.
 * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
 */
export class CapabilityStatementRestResourceOperation extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResourceOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        else {
            this.definition = null;
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirCanonical(source._definition);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource.operation';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: CapabilityStatement.rest.resource.operation.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (!this['definition']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property definition fhir: CapabilityStatement.rest.resource.operation.definition:canonical', expression: [expression] });
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation(expression + '.definition'));
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResourceOperation._fts_dataType = 'CapabilityStatementRestResourceOperation';
/**
 * Max of one repetition per resource type.
 */
export class CapabilityStatementRestResource extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirCanonical(source._profile);
            }
        }
        if (source['supportedProfile']) {
            this.supportedProfile = source.supportedProfile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.supportedProfile = [];
        }
        if (source['_supportedProfile']) {
            source._supportedProfile.forEach((x, i) => {
                if (this.supportedProfile.length >= i) {
                    if (x) {
                        this.supportedProfile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.supportedProfile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestResourceInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['versioning']) {
            this.versioning = new fhir.FhirCode({ value: source.versioning });
        }
        if (source['_versioning']) {
            if (this.versioning) {
                this.versioning.addExtendedProperties(source._versioning);
            }
            else {
                this.versioning = new fhir.FhirCode(source._versioning);
            }
        }
        if (source['readHistory']) {
            this.readHistory = new fhir.FhirBoolean({ value: source.readHistory });
        }
        if (source['_readHistory']) {
            if (this.readHistory) {
                this.readHistory.addExtendedProperties(source._readHistory);
            }
            else {
                this.readHistory = new fhir.FhirBoolean(source._readHistory);
            }
        }
        if (source['updateCreate']) {
            this.updateCreate = new fhir.FhirBoolean({ value: source.updateCreate });
        }
        if (source['_updateCreate']) {
            if (this.updateCreate) {
                this.updateCreate.addExtendedProperties(source._updateCreate);
            }
            else {
                this.updateCreate = new fhir.FhirBoolean(source._updateCreate);
            }
        }
        if (source['conditionalCreate']) {
            this.conditionalCreate = new fhir.FhirBoolean({ value: source.conditionalCreate });
        }
        if (source['_conditionalCreate']) {
            if (this.conditionalCreate) {
                this.conditionalCreate.addExtendedProperties(source._conditionalCreate);
            }
            else {
                this.conditionalCreate = new fhir.FhirBoolean(source._conditionalCreate);
            }
        }
        if (source['conditionalRead']) {
            this.conditionalRead = new fhir.FhirCode({ value: source.conditionalRead });
        }
        if (source['_conditionalRead']) {
            if (this.conditionalRead) {
                this.conditionalRead.addExtendedProperties(source._conditionalRead);
            }
            else {
                this.conditionalRead = new fhir.FhirCode(source._conditionalRead);
            }
        }
        if (source['conditionalUpdate']) {
            this.conditionalUpdate = new fhir.FhirBoolean({ value: source.conditionalUpdate });
        }
        if (source['_conditionalUpdate']) {
            if (this.conditionalUpdate) {
                this.conditionalUpdate.addExtendedProperties(source._conditionalUpdate);
            }
            else {
                this.conditionalUpdate = new fhir.FhirBoolean(source._conditionalUpdate);
            }
        }
        if (source['conditionalDelete']) {
            this.conditionalDelete = new fhir.FhirCode({ value: source.conditionalDelete });
        }
        if (source['_conditionalDelete']) {
            if (this.conditionalDelete) {
                this.conditionalDelete.addExtendedProperties(source._conditionalDelete);
            }
            else {
                this.conditionalDelete = new fhir.FhirCode(source._conditionalDelete);
            }
        }
        if (source['referencePolicy']) {
            this.referencePolicy = source.referencePolicy.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.referencePolicy = [];
        }
        if (source['_referencePolicy']) {
            source._referencePolicy.forEach((x, i) => {
                if (this.referencePolicy.length >= i) {
                    if (x) {
                        this.referencePolicy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.referencePolicy.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['searchInclude']) {
            this.searchInclude = source.searchInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchInclude = [];
        }
        if (source['_searchInclude']) {
            source._searchInclude.forEach((x, i) => {
                if (this.searchInclude.length >= i) {
                    if (x) {
                        this.searchInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchRevInclude']) {
            this.searchRevInclude = source.searchRevInclude.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.searchRevInclude = [];
        }
        if (source['_searchRevInclude']) {
            source._searchRevInclude.forEach((x, i) => {
                if (this.searchRevInclude.length >= i) {
                    if (x) {
                        this.searchRevInclude[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.searchRevInclude.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.CapabilityStatementRestResourceOperation(x));
        }
        else {
            this.operation = [];
        }
    }
    /**
     * Required-bound Value Set for type (CapabilityStatement.rest.resource.type)
     */
    static get typeRequiredCodes() {
        return ResourceTypesCodes;
    }
    /**
     * Required-bound Value Set for versioning (CapabilityStatement.rest.resource.versioning)
     */
    static get versioningRequiredCodes() {
        return VersioningPolicyCodes;
    }
    /**
     * Required-bound Value Set for conditionalRead (CapabilityStatement.rest.resource.conditionalRead)
     */
    static get conditionalReadRequiredCodes() {
        return ConditionalReadStatusCodes;
    }
    /**
     * Required-bound Value Set for conditionalDelete (CapabilityStatement.rest.resource.conditionalDelete)
     */
    static get conditionalDeleteRequiredCodes() {
        return ConditionalDeleteStatusCodes;
    }
    /**
     * Required-bound Value Set for referencePolicy (CapabilityStatement.rest.resource.referencePolicy)
     */
    static get referencePolicyRequiredCodes() {
        return ReferenceHandlingPolicyCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.resource';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: CapabilityStatement.rest.resource.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(ResourceTypesCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: CapabilityStatement.rest.resource.type:code Required binding to: ResourceTypes', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation(expression + '.profile'));
        }
        if (this["supportedProfile"]) {
            this.supportedProfile.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.supportedProfile[${i}]`)); });
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        if (this["interaction"]) {
            this.interaction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.interaction[${i}]`)); });
        }
        if (this['versioning'] && (!Object.values(VersioningPolicyCodes).includes(this.versioning.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property versioning fhir: CapabilityStatement.rest.resource.versioning:code Required binding to: VersioningPolicy', expression: [expression] });
        }
        if (this["versioning"]) {
            issues.push(...this.versioning.doModelValidation(expression + '.versioning'));
        }
        if (this["readHistory"]) {
            issues.push(...this.readHistory.doModelValidation(expression + '.readHistory'));
        }
        if (this["updateCreate"]) {
            issues.push(...this.updateCreate.doModelValidation(expression + '.updateCreate'));
        }
        if (this["conditionalCreate"]) {
            issues.push(...this.conditionalCreate.doModelValidation(expression + '.conditionalCreate'));
        }
        if (this['conditionalRead'] && (!Object.values(ConditionalReadStatusCodes).includes(this.conditionalRead.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property conditionalRead fhir: CapabilityStatement.rest.resource.conditionalRead:code Required binding to: ConditionalReadStatus', expression: [expression] });
        }
        if (this["conditionalRead"]) {
            issues.push(...this.conditionalRead.doModelValidation(expression + '.conditionalRead'));
        }
        if (this["conditionalUpdate"]) {
            issues.push(...this.conditionalUpdate.doModelValidation(expression + '.conditionalUpdate'));
        }
        if (this['conditionalDelete'] && (!Object.values(ConditionalDeleteStatusCodes).includes(this.conditionalDelete.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property conditionalDelete fhir: CapabilityStatement.rest.resource.conditionalDelete:code Required binding to: ConditionalDeleteStatus', expression: [expression] });
        }
        if (this["conditionalDelete"]) {
            issues.push(...this.conditionalDelete.doModelValidation(expression + '.conditionalDelete'));
        }
        if (this['referencePolicy']) {
            this.referencePolicy.forEach((v) => {
                if (!Object.values(ReferenceHandlingPolicyCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property referencePolicy fhir: CapabilityStatement.rest.resource.referencePolicy:code Required binding to: ReferenceHandlingPolicy', expression: [expression] });
                }
            });
        }
        if (this["referencePolicy"]) {
            this.referencePolicy.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.referencePolicy[${i}]`)); });
        }
        if (this["searchInclude"]) {
            this.searchInclude.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.searchInclude[${i}]`)); });
        }
        if (this["searchRevInclude"]) {
            this.searchRevInclude.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.searchRevInclude[${i}]`)); });
        }
        if (this["searchParam"]) {
            this.searchParam.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.searchParam[${i}]`)); });
        }
        if (this["operation"]) {
            this.operation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.operation[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestResource._fts_dataType = 'CapabilityStatementRestResource';
/**
 * A specification of restful operations supported by the system.
 */
export class CapabilityStatementRestInteraction extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRestInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
    }
    /**
     * Required-bound Value Set for code (CapabilityStatement.rest.interaction.code)
     */
    static get codeRequiredCodes() {
        return SystemRestfulInteractionCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest.interaction';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: CapabilityStatement.rest.interaction.code:code', expression: [expression] });
        }
        if (this['code'] && (!Object.values(SystemRestfulInteractionCodes).includes(this.code.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property code fhir: CapabilityStatement.rest.interaction.code:code Required binding to: SystemRestfulInteraction', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRestInteraction._fts_dataType = 'CapabilityStatementRestInteraction';
/**
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export class CapabilityStatementRest extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementRest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['security']) {
            this.security = new fhir.CapabilityStatementRestSecurity(source.security);
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.CapabilityStatementRestResource(x));
        }
        else {
            this.resource = [];
        }
        if (source['interaction']) {
            this.interaction = source.interaction.map((x) => new fhir.CapabilityStatementRestInteraction(x));
        }
        else {
            this.interaction = [];
        }
        if (source['searchParam']) {
            this.searchParam = source.searchParam.map((x) => new fhir.CapabilityStatementRestResourceSearchParam(x));
        }
        else {
            this.searchParam = [];
        }
        if (source['operation']) {
            this.operation = source.operation.map((x) => new fhir.CapabilityStatementRestResourceOperation(x));
        }
        else {
            this.operation = [];
        }
        if (source['compartment']) {
            this.compartment = source.compartment.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.compartment = [];
        }
        if (source['_compartment']) {
            source._compartment.forEach((x, i) => {
                if (this.compartment.length >= i) {
                    if (x) {
                        this.compartment[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.compartment.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.rest.mode)
     */
    static get modeRequiredCodes() {
        return RestfulCapabilityModeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.rest';
        }
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode fhir: CapabilityStatement.rest.mode:code', expression: [expression] });
        }
        if (this['mode'] && (!Object.values(RestfulCapabilityModeCodes).includes(this.mode.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property mode fhir: CapabilityStatement.rest.mode:code Required binding to: RestfulCapabilityMode', expression: [expression] });
        }
        if (this["mode"]) {
            issues.push(...this.mode.doModelValidation(expression + '.mode'));
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        if (this["security"]) {
            issues.push(...this.security.doModelValidation(expression + '.security'));
        }
        if (this["resource"]) {
            this.resource.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.resource[${i}]`)); });
        }
        if (this["interaction"]) {
            this.interaction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.interaction[${i}]`)); });
        }
        if (this["searchParam"]) {
            this.searchParam.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.searchParam[${i}]`)); });
        }
        if (this["operation"]) {
            this.operation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.operation[${i}]`)); });
        }
        if (this["compartment"]) {
            this.compartment.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.compartment[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementRest._fts_dataType = 'CapabilityStatementRest';
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export class CapabilityStatementMessagingEndpoint extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingEndpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['protocol']) {
            this.protocol = new fhir.Coding(source.protocol);
        }
        else {
            this.protocol = null;
        }
        if (source['address']) {
            this.address = new fhir.FhirUrl({ value: source.address });
        }
        else {
            this.address = null;
        }
        if (source['_address']) {
            if (this.address) {
                this.address.addExtendedProperties(source._address);
            }
            else {
                this.address = new fhir.FhirUrl(source._address);
            }
        }
    }
    /**
     * Extensible-bound Value Set for protocol (CapabilityStatement.messaging.endpoint.protocol)
     */
    static get protocolExtensibleCodings() {
        return MessageTransportCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.messaging.endpoint';
        }
        if (!this['protocol']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property protocol fhir: CapabilityStatement.messaging.endpoint.protocol:Coding', expression: [expression] });
        }
        if (this["protocol"]) {
            issues.push(...this.protocol.doModelValidation(expression + '.protocol'));
        }
        if (!this['address']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property address fhir: CapabilityStatement.messaging.endpoint.address:url', expression: [expression] });
        }
        if (this["address"]) {
            issues.push(...this.address.doModelValidation(expression + '.address'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingEndpoint._fts_dataType = 'CapabilityStatementMessagingEndpoint';
/**
 * This is a proposed alternative to the messaging.event structure.
 */
export class CapabilityStatementMessagingSupportedMessage extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessagingSupportedMessage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
        else {
            this.definition = null;
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirCanonical(source._definition);
            }
        }
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.messaging.supportedMessage.mode)
     */
    static get modeRequiredCodes() {
        return EventCapabilityModeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.messaging.supportedMessage';
        }
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode fhir: CapabilityStatement.messaging.supportedMessage.mode:code', expression: [expression] });
        }
        if (this['mode'] && (!Object.values(EventCapabilityModeCodes).includes(this.mode.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property mode fhir: CapabilityStatement.messaging.supportedMessage.mode:code Required binding to: EventCapabilityMode', expression: [expression] });
        }
        if (this["mode"]) {
            issues.push(...this.mode.doModelValidation(expression + '.mode'));
        }
        if (!this['definition']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property definition fhir: CapabilityStatement.messaging.supportedMessage.definition:canonical', expression: [expression] });
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation(expression + '.definition'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessagingSupportedMessage._fts_dataType = 'CapabilityStatementMessagingSupportedMessage';
/**
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export class CapabilityStatementMessaging extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementMessaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.CapabilityStatementMessagingEndpoint(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['reliableCache']) {
            this.reliableCache = new fhir.FhirUnsignedInt({ value: source.reliableCache });
        }
        if (source['_reliableCache']) {
            if (this.reliableCache) {
                this.reliableCache.addExtendedProperties(source._reliableCache);
            }
            else {
                this.reliableCache = new fhir.FhirUnsignedInt(source._reliableCache);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['supportedMessage']) {
            this.supportedMessage = source.supportedMessage.map((x) => new fhir.CapabilityStatementMessagingSupportedMessage(x));
        }
        else {
            this.supportedMessage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.messaging';
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.endpoint[${i}]`)); });
        }
        if (this["reliableCache"]) {
            issues.push(...this.reliableCache.doModelValidation(expression + '.reliableCache'));
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        if (this["supportedMessage"]) {
            this.supportedMessage.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.supportedMessage[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementMessaging._fts_dataType = 'CapabilityStatementMessaging';
/**
 * A document definition.
 */
export class CapabilityStatementDocument extends fhir.BackboneElement {
    /**
     * Default constructor for CapabilityStatementDocument - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirMarkdown({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirMarkdown(source._documentation);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        else {
            this.profile = null;
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirCanonical(source._profile);
            }
        }
    }
    /**
     * Required-bound Value Set for mode (CapabilityStatement.document.mode)
     */
    static get modeRequiredCodes() {
        return DocumentModeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement.document';
        }
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode fhir: CapabilityStatement.document.mode:code', expression: [expression] });
        }
        if (this['mode'] && (!Object.values(DocumentModeCodes).includes(this.mode.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property mode fhir: CapabilityStatement.document.mode:code Required binding to: DocumentMode', expression: [expression] });
        }
        if (this["mode"]) {
            issues.push(...this.mode.doModelValidation(expression + '.mode'));
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation(expression + '.documentation'));
        }
        if (!this['profile']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property profile fhir: CapabilityStatement.document.profile:canonical', expression: [expression] });
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation(expression + '.profile'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatementDocument._fts_dataType = 'CapabilityStatementDocument';
/**
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class CapabilityStatement extends fhir.DomainResource {
    /**
     * Default constructor for CapabilityStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CapabilityStatement';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiates = [];
        }
        if (source['_instantiates']) {
            source._instantiates.forEach((x, i) => {
                if (this.instantiates.length >= i) {
                    if (x) {
                        this.instantiates[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiates.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['imports']) {
            this.imports = source.imports.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.imports = [];
        }
        if (source['_imports']) {
            source._imports.forEach((x, i) => {
                if (this.imports.length >= i) {
                    if (x) {
                        this.imports[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.imports.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['software']) {
            this.software = new fhir.CapabilityStatementSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.CapabilityStatementImplementation(source.implementation);
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirCode({ value: source.fhirVersion });
        }
        else {
            this.fhirVersion = null;
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirCode(source._fhirVersion);
            }
        }
        if (source['format']) {
            this.format = source.format.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.format = [];
        }
        if (source['_format']) {
            source._format.forEach((x, i) => {
                if (this.format.length >= i) {
                    if (x) {
                        this.format[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.format.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['patchFormat']) {
            this.patchFormat = source.patchFormat.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.patchFormat = [];
        }
        if (source['_patchFormat']) {
            source._patchFormat.forEach((x, i) => {
                if (this.patchFormat.length >= i) {
                    if (x) {
                        this.patchFormat[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.patchFormat.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['implementationGuide']) {
            this.implementationGuide = source.implementationGuide.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.implementationGuide = [];
        }
        if (source['_implementationGuide']) {
            source._implementationGuide.forEach((x, i) => {
                if (this.implementationGuide.length >= i) {
                    if (x) {
                        this.implementationGuide[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.implementationGuide.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['rest']) {
            this.rest = source.rest.map((x) => new fhir.CapabilityStatementRest(x));
        }
        else {
            this.rest = [];
        }
        if (source['messaging']) {
            this.messaging = source.messaging.map((x) => new fhir.CapabilityStatementMessaging(x));
        }
        else {
            this.messaging = [];
        }
        if (source['document']) {
            this.document = source.document.map((x) => new fhir.CapabilityStatementDocument(x));
        }
        else {
            this.document = [];
        }
    }
    /**
     * Required-bound Value Set for status (CapabilityStatement.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Required-bound Value Set for kind (CapabilityStatement.kind)
     */
    static get kindRequiredCodes() {
        return CapabilityStatementKindCodes;
    }
    /**
     * Required-bound Value Set for fhirVersion (CapabilityStatement.fhirVersion)
     */
    static get fhirVersionRequiredCodes() {
        return FHIRVersionCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CapabilityStatement';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: CapabilityStatement.resourceType:"CapabilityStatement"', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: CapabilityStatement.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: CapabilityStatement.status:code Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation(expression + '.experimental'));
        }
        if (!this['date']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property date fhir: CapabilityStatement.date:dateTime', expression: [expression] });
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation(expression + '.purpose'));
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind fhir: CapabilityStatement.kind:code', expression: [expression] });
        }
        if (this['kind'] && (!Object.values(CapabilityStatementKindCodes).includes(this.kind.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property kind fhir: CapabilityStatement.kind:code Required binding to: CapabilityStatementKind', expression: [expression] });
        }
        if (this["kind"]) {
            issues.push(...this.kind.doModelValidation(expression + '.kind'));
        }
        if (this["instantiates"]) {
            this.instantiates.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.instantiates[${i}]`)); });
        }
        if (this["imports"]) {
            this.imports.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.imports[${i}]`)); });
        }
        if (this["software"]) {
            issues.push(...this.software.doModelValidation(expression + '.software'));
        }
        if (this["implementation"]) {
            issues.push(...this.implementation.doModelValidation(expression + '.implementation'));
        }
        if (!this['fhirVersion']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property fhirVersion fhir: CapabilityStatement.fhirVersion:code', expression: [expression] });
        }
        if (this['fhirVersion'] && (!Object.values(FHIRVersionCodes).includes(this.fhirVersion.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property fhirVersion fhir: CapabilityStatement.fhirVersion:code Required binding to: FHIRVersion', expression: [expression] });
        }
        if (this["fhirVersion"]) {
            issues.push(...this.fhirVersion.doModelValidation(expression + '.fhirVersion'));
        }
        if (!this['format']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property format fhir: CapabilityStatement.format:code', expression: [expression] });
        }
        else if (!Array.isArray(this.format)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property format fhir: CapabilityStatement.format:code', expression: [expression] });
        }
        else if (this.format.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property format fhir: CapabilityStatement.format:code', expression: [expression] });
        }
        if (this["format"]) {
            this.format.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.format[${i}]`)); });
        }
        if (this["patchFormat"]) {
            this.patchFormat.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.patchFormat[${i}]`)); });
        }
        if (this["implementationGuide"]) {
            this.implementationGuide.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.implementationGuide[${i}]`)); });
        }
        if (this["rest"]) {
            this.rest.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.rest[${i}]`)); });
        }
        if (this["messaging"]) {
            this.messaging.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.messaging[${i}]`)); });
        }
        if (this["document"]) {
            this.document.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.document[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CapabilityStatement._fts_dataType = 'CapabilityStatement';
//# sourceMappingURL=data:application/json;base64,