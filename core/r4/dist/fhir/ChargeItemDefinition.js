/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { InvoicePriceComponentTypeCodings } from '../fhirValueSets/InvoicePriceComponentTypeCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Money } from './Money.js';
import { FhirUri } from './FhirUri.js';
import { Identifier } from './Identifier.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { FhirDate } from './FhirDate.js';
import { Period } from './Period.js';
import { Reference } from './Reference.js';

// <auto-generated/>
/**
 * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
 */
var ChargeItemDefinitionApplicability = /** @class */ (function (_super) {
    __extends(ChargeItemDefinitionApplicability, _super);
    /**
     * Default constructor for ChargeItemDefinitionApplicability - initializes any required elements to null if a value is not provided.
     */
    function ChargeItemDefinitionApplicability(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['language']) {
            _this.language = new FhirString({ value: source.language });
        }
        if (source['expression']) {
            _this.expression = new FhirString({ value: source.expression });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ChargeItemDefinitionApplicability.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["language"]) {
            (_b = outcome.issue).push.apply(_b, this.language.doModelValidation().issue);
        }
        if (this["expression"]) {
            (_c = outcome.issue).push.apply(_c, this.expression.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ChargeItemDefinitionApplicability._fts_dataType = 'ChargeItemDefinitionApplicability';
    return ChargeItemDefinitionApplicability;
}(BackboneElement));
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
 */
var ChargeItemDefinitionPropertyGroupPriceComponent = /** @class */ (function (_super) {
    __extends(ChargeItemDefinitionPropertyGroupPriceComponent, _super);
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroupPriceComponent - initializes any required elements to null if a value is not provided.
     */
    function ChargeItemDefinitionPropertyGroupPriceComponent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (ChargeItemDefinition.propertyGroup.priceComponent.type)
     */
    ChargeItemDefinitionPropertyGroupPriceComponent.typeRequiredCoding = function () {
        return InvoicePriceComponentTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ChargeItemDefinitionPropertyGroupPriceComponent.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:InvoicePriceComponentTypeCodeType fhir: ChargeItemDefinition.propertyGroup.priceComponent.type:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_b = outcome.issue).push.apply(_b, this.factor.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_c = outcome.issue).push.apply(_c, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ChargeItemDefinitionPropertyGroupPriceComponent._fts_dataType = 'ChargeItemDefinitionPropertyGroupPriceComponent';
    return ChargeItemDefinitionPropertyGroupPriceComponent;
}(BackboneElement));
/**
 * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
 */
var ChargeItemDefinitionPropertyGroup = /** @class */ (function (_super) {
    __extends(ChargeItemDefinitionPropertyGroup, _super);
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroup - initializes any required elements to null if a value is not provided.
     */
    function ChargeItemDefinitionPropertyGroup(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['applicability']) {
            _this.applicability = source.applicability.map(function (x) { return new ChargeItemDefinitionApplicability(x); });
        }
        else {
            _this.applicability = [];
        }
        if (source['priceComponent']) {
            _this.priceComponent = source.priceComponent.map(function (x) { return new ChargeItemDefinitionPropertyGroupPriceComponent(x); });
        }
        else {
            _this.priceComponent = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ChargeItemDefinitionPropertyGroup.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["applicability"]) {
            this.applicability.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["priceComponent"]) {
            this.priceComponent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ChargeItemDefinitionPropertyGroup._fts_dataType = 'ChargeItemDefinitionPropertyGroup';
    return ChargeItemDefinitionPropertyGroup;
}(BackboneElement));
/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
var ChargeItemDefinition = /** @class */ (function (_super) {
    __extends(ChargeItemDefinition, _super);
    /**
     * Default constructor for ChargeItemDefinition - initializes any required elements to null if a value is not provided.
     */
    function ChargeItemDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ChargeItemDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['derivedFromUri']) {
            _this.derivedFromUri = source.derivedFromUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.derivedFromUri = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.partOf = [];
        }
        if (source['replaces']) {
            _this.replaces = source.replaces.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.replaces = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            _this.approvalDate = new FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            _this.lastReviewDate = new FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            _this.effectivePeriod = new Period(source.effectivePeriod);
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['instance']) {
            _this.instance = source.instance.map(function (x) { return new Reference(x); });
        }
        else {
            _this.instance = [];
        }
        if (source['applicability']) {
            _this.applicability = source.applicability.map(function (x) { return new ChargeItemDefinitionApplicability(x); });
        }
        else {
            _this.applicability = [];
        }
        if (source['propertyGroup']) {
            _this.propertyGroup = source.propertyGroup.map(function (x) { return new ChargeItemDefinitionPropertyGroup(x); });
        }
        else {
            _this.propertyGroup = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ChargeItemDefinition.status)
     */
    ChargeItemDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ChargeItemDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ChargeItemDefinition" fhir: ChargeItemDefinition.resourceType:"ChargeItemDefinition"', }));
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: ChargeItemDefinition.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["title"]) {
            (_c = outcome.issue).push.apply(_c, this.title.doModelValidation().issue);
        }
        if (this["derivedFromUri"]) {
            this.derivedFromUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["replaces"]) {
            this.replaces.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: ChargeItemDefinition.status:code', }));
        }
        if (this["experimental"]) {
            (_d = outcome.issue).push.apply(_d, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_e = outcome.issue).push.apply(_e, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_f = outcome.issue).push.apply(_f, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_g = outcome.issue).push.apply(_g, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["copyright"]) {
            (_h = outcome.issue).push.apply(_h, this.copyright.doModelValidation().issue);
        }
        if (this["approvalDate"]) {
            (_j = outcome.issue).push.apply(_j, this.approvalDate.doModelValidation().issue);
        }
        if (this["lastReviewDate"]) {
            (_k = outcome.issue).push.apply(_k, this.lastReviewDate.doModelValidation().issue);
        }
        if (this["effectivePeriod"]) {
            (_l = outcome.issue).push.apply(_l, this.effectivePeriod.doModelValidation().issue);
        }
        if (this["code"]) {
            (_m = outcome.issue).push.apply(_m, this.code.doModelValidation().issue);
        }
        if (this["instance"]) {
            this.instance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["applicability"]) {
            this.applicability.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["propertyGroup"]) {
            this.propertyGroup.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ChargeItemDefinition._fts_dataType = 'ChargeItemDefinition';
    return ChargeItemDefinition;
}(DomainResource));

export { ChargeItemDefinition, ChargeItemDefinitionApplicability, ChargeItemDefinitionPropertyGroup, ChargeItemDefinitionPropertyGroupPriceComponent };
//# sourceMappingURL=ChargeItemDefinition.js.map
