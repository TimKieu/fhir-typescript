// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ChargeItemDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { InvoicePriceComponentTypeVsValidation } from '../fhirValueSets/InvoicePriceComponentTypeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
 */
export class ChargeItemDefinitionApplicability extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionApplicability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['language'] !== undefined) {
            this.language = new fhir.FhirString({ value: source.language }, options);
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirString(source._language, options);
            }
        }
        if (source['expression'] !== undefined) {
            this.expression = new fhir.FhirString({ value: source.expression }, options);
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ChargeItemDefinition.applicability';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vOS('expression', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItemDefinitionApplicability._fts_dataType = 'ChargeItemDefinitionApplicability';
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
 */
export class ChargeItemDefinitionPropertyGroupPriceComponent extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroupPriceComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ChargeItemDefinition.propertyGroup.priceComponent';
        }
        iss.push(...this.vRSV('type', exp, 'InvoicePriceComponentType', InvoicePriceComponentTypeVsValidation, 'r'));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItemDefinitionPropertyGroupPriceComponent._fts_dataType = 'ChargeItemDefinitionPropertyGroupPriceComponent';
/**
 * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
 */
export class ChargeItemDefinitionPropertyGroup extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemDefinitionPropertyGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['applicability']) {
            this.applicability = source.applicability.map((x) => new fhir.ChargeItemDefinitionApplicability(x, options));
        }
        else {
            this.applicability = [];
        }
        if (source['priceComponent']) {
            this.priceComponent = source.priceComponent.map((x) => new fhir.ChargeItemDefinitionPropertyGroupPriceComponent(x, options));
        }
        else {
            this.priceComponent = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ChargeItemDefinition.propertyGroup';
        }
        iss.push(...this.vOA('applicability', exp));
        iss.push(...this.vOA('priceComponent', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItemDefinitionPropertyGroup._fts_dataType = 'ChargeItemDefinitionPropertyGroup';
/**
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
export class ChargeItemDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItemDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ChargeItemDefinition';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['derivedFromUri'] !== undefined) {
            this.derivedFromUri = source.derivedFromUri.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.derivedFromUri = [];
        }
        if (source['_derivedFromUri']) {
            source._derivedFromUri.forEach((x, i) => {
                if (this.derivedFromUri.length >= i) {
                    if (x) {
                        this.derivedFromUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.derivedFromUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['partOf'] !== undefined) {
            this.partOf = source.partOf.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.partOf = [];
        }
        if (source['_partOf']) {
            source._partOf.forEach((x, i) => {
                if (this.partOf.length >= i) {
                    if (x) {
                        this.partOf[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.partOf.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['replaces'] !== undefined) {
            this.replaces = source.replaces.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.replaces = [];
        }
        if (source['_replaces']) {
            source._replaces.forEach((x, i) => {
                if (this.replaces.length >= i) {
                    if (x) {
                        this.replaces[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.replaces.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
        if (source['approvalDate'] !== undefined) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate }, options);
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate, options);
            }
        }
        if (source['lastReviewDate'] !== undefined) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate }, options);
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate, options);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod, options);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.instance = [];
        }
        if (source['applicability']) {
            this.applicability = source.applicability.map((x) => new fhir.ChargeItemDefinitionApplicability(x, options));
        }
        else {
            this.applicability = [];
        }
        if (source['propertyGroup']) {
            this.propertyGroup = source.propertyGroup.map((x) => new fhir.ChargeItemDefinitionPropertyGroup(x, options));
        }
        else {
            this.propertyGroup = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ChargeItemDefinition';
        }
        iss.push(...this.vRS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOA('derivedFromUri', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vOA('replaces', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('approvalDate', exp));
        iss.push(...this.vOS('lastReviewDate', exp));
        iss.push(...this.vOS('effectivePeriod', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOA('instance', exp));
        iss.push(...this.vOA('applicability', exp));
        iss.push(...this.vOA('propertyGroup', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItemDefinition._fts_dataType = 'ChargeItemDefinition';
//# sourceMappingURL=data:application/json;base64,