/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { InvoicePriceComponentTypeCodings } from '../fhirValueSets/InvoicePriceComponentTypeCodings.js';
import { InvoiceStatusCodings } from '../fhirValueSets/InvoiceStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Money } from './Money.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { Identifier } from './Identifier.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Indicates who or what performed or participated in the charged service.
 */
var InvoiceParticipant = /** @class */ (function (_super) {
    __extends(InvoiceParticipant, _super);
    /**
     * Default constructor for InvoiceParticipant - initializes any required elements to null if a value is not provided.
     */
    function InvoiceParticipant(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        if (source['actor']) {
            _this.actor = new Reference(source.actor);
        }
        else {
            _this.actor = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InvoiceParticipant.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["role"]) {
            (_a = outcome.issue).push.apply(_a, this.role.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actor:fhir.Reference fhir: Invoice.participant.actor:Reference', }));
        }
        if (this["actor"]) {
            (_b = outcome.issue).push.apply(_b, this.actor.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InvoiceParticipant._fts_dataType = 'InvoiceParticipant';
    return InvoiceParticipant;
}(BackboneElement));
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
 */
var InvoiceLineItemPriceComponent = /** @class */ (function (_super) {
    __extends(InvoiceLineItemPriceComponent, _super);
    /**
     * Default constructor for InvoiceLineItemPriceComponent - initializes any required elements to null if a value is not provided.
     */
    function InvoiceLineItemPriceComponent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (Invoice.lineItem.priceComponent.type)
     */
    InvoiceLineItemPriceComponent.typeRequiredCoding = function () {
        return InvoicePriceComponentTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InvoiceLineItemPriceComponent.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:InvoicePriceComponentTypeCodeType fhir: Invoice.lineItem.priceComponent.type:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_b = outcome.issue).push.apply(_b, this.factor.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_c = outcome.issue).push.apply(_c, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InvoiceLineItemPriceComponent._fts_dataType = 'InvoiceLineItemPriceComponent';
    return InvoiceLineItemPriceComponent;
}(BackboneElement));
/**
 * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
 */
var InvoiceLineItem = /** @class */ (function (_super) {
    __extends(InvoiceLineItem, _super);
    /**
     * Default constructor for InvoiceLineItem - initializes any required elements to null if a value is not provided.
     */
    function InvoiceLineItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        if (source['chargeItem']) {
            _this.chargeItem = source.chargeItem;
        }
        else if (source['chargeItemReference']) {
            _this.chargeItem = new Reference(source.chargeItemReference);
        }
        else if (source['chargeItemCodeableConcept']) {
            _this.chargeItem = new CodeableConcept(source.chargeItemCodeableConcept);
        }
        else {
            _this.chargeItem = null;
        }
        if (source['priceComponent']) {
            _this.priceComponent = source.priceComponent.map(function (x) { return new InvoiceLineItemPriceComponent(x); });
        }
        else {
            _this.priceComponent = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InvoiceLineItem.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['chargeItem']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property chargeItem: fhir: Invoice.lineItem.chargeItem[x]:', }));
        }
        if (this["priceComponent"]) {
            this.priceComponent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InvoiceLineItem._fts_dataType = 'InvoiceLineItem';
    /**
     * Internal flag to properly serialize choice-type element Invoice.lineItem.chargeItem[x]
     */
    InvoiceLineItem._fts_chargeItemIsChoice = true;
    return InvoiceLineItem;
}(BackboneElement));
/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
var Invoice = /** @class */ (function (_super) {
    __extends(Invoice, _super);
    /**
     * Default constructor for Invoice - initializes any required elements to null if a value is not provided.
     */
    function Invoice(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Invoice';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['cancelledReason']) {
            _this.cancelledReason = new FhirString({ value: source.cancelledReason });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['recipient']) {
            _this.recipient = new Reference(source.recipient);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['participant']) {
            _this.participant = source.participant.map(function (x) { return new InvoiceParticipant(x); });
        }
        else {
            _this.participant = [];
        }
        if (source['issuer']) {
            _this.issuer = new Reference(source.issuer);
        }
        if (source['account']) {
            _this.account = new Reference(source.account);
        }
        if (source['lineItem']) {
            _this.lineItem = source.lineItem.map(function (x) { return new InvoiceLineItem(x); });
        }
        else {
            _this.lineItem = [];
        }
        if (source['totalPriceComponent']) {
            _this.totalPriceComponent = source.totalPriceComponent.map(function (x) { return new InvoiceLineItemPriceComponent(x); });
        }
        else {
            _this.totalPriceComponent = [];
        }
        if (source['totalNet']) {
            _this.totalNet = new Money(source.totalNet);
        }
        if (source['totalGross']) {
            _this.totalGross = new Money(source.totalGross);
        }
        if (source['paymentTerms']) {
            _this.paymentTerms = new FhirMarkdown({ value: source.paymentTerms });
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Invoice.status)
     */
    Invoice.statusRequiredCoding = function () {
        return InvoiceStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Invoice.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Invoice" fhir: Invoice.resourceType:"Invoice"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:InvoiceStatusCodeType fhir: Invoice.status:code', }));
        }
        if (this["cancelledReason"]) {
            (_a = outcome.issue).push.apply(_a, this.cancelledReason.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["recipient"]) {
            (_d = outcome.issue).push.apply(_d, this.recipient.doModelValidation().issue);
        }
        if (this["date"]) {
            (_e = outcome.issue).push.apply(_e, this.date.doModelValidation().issue);
        }
        if (this["participant"]) {
            this.participant.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["issuer"]) {
            (_f = outcome.issue).push.apply(_f, this.issuer.doModelValidation().issue);
        }
        if (this["account"]) {
            (_g = outcome.issue).push.apply(_g, this.account.doModelValidation().issue);
        }
        if (this["lineItem"]) {
            this.lineItem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["totalPriceComponent"]) {
            this.totalPriceComponent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["totalNet"]) {
            (_h = outcome.issue).push.apply(_h, this.totalNet.doModelValidation().issue);
        }
        if (this["totalGross"]) {
            (_j = outcome.issue).push.apply(_j, this.totalGross.doModelValidation().issue);
        }
        if (this["paymentTerms"]) {
            (_k = outcome.issue).push.apply(_k, this.paymentTerms.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Invoice._fts_dataType = 'Invoice';
    return Invoice;
}(DomainResource));

export { Invoice, InvoiceLineItem, InvoiceLineItemPriceComponent, InvoiceParticipant };
//# sourceMappingURL=Invoice.js.map
