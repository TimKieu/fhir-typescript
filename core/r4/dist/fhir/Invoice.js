// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Invoice
import * as fhir from '../fhir.js';
// @ts-ignore
import { InvoicePriceComponentTypeVsValidation } from '../fhirValueSets/InvoicePriceComponentTypeVsValidation.js';
// @ts-ignore
import { InvoiceStatusVsValidation } from '../fhirValueSets/InvoiceStatusVsValidation.js';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class InvoiceParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for InvoiceParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Invoice.participant';
        }
        this.vOS('role', exp);
        this.vRS('actor', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InvoiceParticipant._fts_dataType = 'InvoiceParticipant';
/**
 * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
 */
export class InvoiceLineItemPriceComponent extends fhir.BackboneElement {
    /**
     * Default constructor for InvoiceLineItemPriceComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Invoice.lineItem.priceComponent';
        }
        this.vRSV('type', exp, 'InvoicePriceComponentType', InvoicePriceComponentTypeVsValidation, 'r');
        this.vOS('code', exp);
        this.vOS('factor', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InvoiceLineItemPriceComponent._fts_dataType = 'InvoiceLineItemPriceComponent';
/**
 * Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
 */
export class InvoiceLineItem extends fhir.BackboneElement {
    /**
     * Default constructor for InvoiceLineItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence);
            }
        }
        if (source['chargeItem']) {
            this.chargeItem = source.chargeItem;
        }
        else if (source['chargeItemReference']) {
            this.chargeItem = new fhir.Reference(source.chargeItemReference);
        }
        else if (source['chargeItemCodeableConcept']) {
            this.chargeItem = new fhir.CodeableConcept(source.chargeItemCodeableConcept);
        }
        else {
            this.chargeItem = null;
        }
        if (source['priceComponent']) {
            this.priceComponent = source.priceComponent.map((x) => new fhir.InvoiceLineItemPriceComponent(x));
        }
        else {
            this.priceComponent = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Invoice.lineItem';
        }
        this.vOS('sequence', exp);
        this.vRS('chargeItem', exp);
        this.vOA('priceComponent', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InvoiceLineItem._fts_dataType = 'InvoiceLineItem';
/**
 * Internal flag to properly serialize choice-type element Invoice.lineItem.chargeItem[x]
 */
InvoiceLineItem._fts_chargeItemIsChoice = true;
/**
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
export class Invoice extends fhir.DomainResource {
    /**
     * Default constructor for Invoice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Invoice';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['cancelledReason']) {
            this.cancelledReason = new fhir.FhirString({ value: source.cancelledReason });
        }
        if (source['_cancelledReason']) {
            if (this.cancelledReason) {
                this.cancelledReason.addExtendedProperties(source._cancelledReason);
            }
            else {
                this.cancelledReason = new fhir.FhirString(source._cancelledReason);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['recipient']) {
            this.recipient = new fhir.Reference(source.recipient);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.InvoiceParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['issuer']) {
            this.issuer = new fhir.Reference(source.issuer);
        }
        if (source['account']) {
            this.account = new fhir.Reference(source.account);
        }
        if (source['lineItem']) {
            this.lineItem = source.lineItem.map((x) => new fhir.InvoiceLineItem(x));
        }
        else {
            this.lineItem = [];
        }
        if (source['totalPriceComponent']) {
            this.totalPriceComponent = source.totalPriceComponent.map((x) => new fhir.InvoiceLineItemPriceComponent(x));
        }
        else {
            this.totalPriceComponent = [];
        }
        if (source['totalNet']) {
            this.totalNet = new fhir.Money(source.totalNet);
        }
        if (source['totalGross']) {
            this.totalGross = new fhir.Money(source.totalGross);
        }
        if (source['paymentTerms']) {
            this.paymentTerms = new fhir.FhirMarkdown({ value: source.paymentTerms });
        }
        if (source['_paymentTerms']) {
            if (this.paymentTerms) {
                this.paymentTerms.addExtendedProperties(source._paymentTerms);
            }
            else {
                this.paymentTerms = new fhir.FhirMarkdown(source._paymentTerms);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Invoice';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vRSV('status', exp, 'InvoiceStatus', InvoiceStatusVsValidation, 'r');
        this.vOS('cancelledReason', exp);
        this.vOS('type', exp);
        this.vOS('subject', exp);
        this.vOS('recipient', exp);
        this.vOS('date', exp);
        this.vOA('participant', exp);
        this.vOS('issuer', exp);
        this.vOS('account', exp);
        this.vOA('lineItem', exp);
        this.vOA('totalPriceComponent', exp);
        this.vOS('totalNet', exp);
        this.vOS('totalGross', exp);
        this.vOS('paymentTerms', exp);
        this.vOA('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Invoice._fts_dataType = 'Invoice';
//# sourceMappingURL=data:application/json;base64,