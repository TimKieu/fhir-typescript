// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductIngredient
import * as fhir from '../fhir.js';
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
        else {
            this.strength = null;
        }
        if (source['strengthLowLimit']) {
            this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit);
        }
        if (source['measurementPoint']) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint });
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.country = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["substance"]) {
            issues.push(...this.substance.doModelValidation());
        }
        if (!this['strength']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property strength:fhir.Ratio fhir: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.strength:Ratio', });
        }
        if (this["strength"]) {
            issues.push(...this.strength.doModelValidation());
        }
        if (this["strengthLowLimit"]) {
            issues.push(...this.strengthLowLimit.doModelValidation());
        }
        if (this["measurementPoint"]) {
            issues.push(...this.measurementPoint.doModelValidation());
        }
        if (this["country"]) {
            this.country.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength';
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['presentation']) {
            this.presentation = new fhir.Ratio(source.presentation);
        }
        else {
            this.presentation = null;
        }
        if (source['presentationLowLimit']) {
            this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit);
        }
        if (source['concentration']) {
            this.concentration = new fhir.Ratio(source.concentration);
        }
        if (source['concentrationLowLimit']) {
            this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit);
        }
        if (source['measurementPoint']) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint });
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.country = [];
        }
        if (source['referenceStrength']) {
            this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x));
        }
        else {
            this.referenceStrength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['presentation']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property presentation:fhir.Ratio fhir: MedicinalProductIngredient.specifiedSubstance.strength.presentation:Ratio', });
        }
        if (this["presentation"]) {
            issues.push(...this.presentation.doModelValidation());
        }
        if (this["presentationLowLimit"]) {
            issues.push(...this.presentationLowLimit.doModelValidation());
        }
        if (this["concentration"]) {
            issues.push(...this.concentration.doModelValidation());
        }
        if (this["concentrationLowLimit"]) {
            issues.push(...this.concentrationLowLimit.doModelValidation());
        }
        if (this["measurementPoint"]) {
            issues.push(...this.measurementPoint.doModelValidation());
        }
        if (this["country"]) {
            this.country.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["referenceStrength"]) {
            this.referenceStrength.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstanceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrength';
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['group']) {
            this.group = new fhir.CodeableConcept(source.group);
        }
        else {
            this.group = null;
        }
        if (source['confidentiality']) {
            this.confidentiality = new fhir.CodeableConcept(source.confidentiality);
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
        else {
            this.strength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductIngredient.specifiedSubstance.code:CodeableConcept', });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (!this['group']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property group:fhir.CodeableConcept fhir: MedicinalProductIngredient.specifiedSubstance.group:CodeableConcept', });
        }
        if (this["group"]) {
            issues.push(...this.group.doModelValidation());
        }
        if (this["confidentiality"]) {
            issues.push(...this.confidentiality.doModelValidation());
        }
        if (this["strength"]) {
            this.strength.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstance._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstance';
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
        else {
            this.strength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductIngredient.substance.code:CodeableConcept', });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["strength"]) {
            this.strength.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSubstance._fts_dataType = 'MedicinalProductIngredientSubstance';
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductIngredient';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
        if (source['allergenicIndicator']) {
            this.allergenicIndicator = new fhir.FhirBoolean({ value: source.allergenicIndicator });
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['specifiedSubstance']) {
            this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x));
        }
        else {
            this.specifiedSubstance = [];
        }
        if (source['substance']) {
            this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicinalProductIngredient" fhir: MedicinalProductIngredient.resourceType:"MedicinalProductIngredient"', });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (!this['role']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property role:fhir.CodeableConcept fhir: MedicinalProductIngredient.role:CodeableConcept', });
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        if (this["allergenicIndicator"]) {
            issues.push(...this.allergenicIndicator.doModelValidation());
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["specifiedSubstance"]) {
            this.specifiedSubstance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["substance"]) {
            issues.push(...this.substance.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredient._fts_dataType = 'MedicinalProductIngredient';
//# sourceMappingURL=data:application/json;base64,