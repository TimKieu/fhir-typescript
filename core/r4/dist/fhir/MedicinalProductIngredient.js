// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductIngredient
import * as fhir from '../fhir.js';
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance, options);
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength, options);
        }
        else {
            this.strength = null;
        }
        if (source['strengthLowLimit']) {
            this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit, options);
        }
        if (source['measurementPoint'] !== undefined) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint }, options);
        }
        if (source['_measurementPoint']) {
            if (this.measurementPoint) {
                this.measurementPoint.addExtendedProperties(source._measurementPoint);
            }
            else {
                this.measurementPoint = new fhir.FhirString(source._measurementPoint, options);
            }
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.country = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength';
        }
        iss.push(...this.vOS('substance', exp));
        iss.push(...this.vRS('strength', exp));
        iss.push(...this.vOS('strengthLowLimit', exp));
        iss.push(...this.vOS('measurementPoint', exp));
        iss.push(...this.vOA('country', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength';
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['presentation']) {
            this.presentation = new fhir.Ratio(source.presentation, options);
        }
        else {
            this.presentation = null;
        }
        if (source['presentationLowLimit']) {
            this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit, options);
        }
        if (source['concentration']) {
            this.concentration = new fhir.Ratio(source.concentration, options);
        }
        if (source['concentrationLowLimit']) {
            this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit, options);
        }
        if (source['measurementPoint'] !== undefined) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint }, options);
        }
        if (source['_measurementPoint']) {
            if (this.measurementPoint) {
                this.measurementPoint.addExtendedProperties(source._measurementPoint);
            }
            else {
                this.measurementPoint = new fhir.FhirString(source._measurementPoint, options);
            }
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.country = [];
        }
        if (source['referenceStrength']) {
            this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x, options));
        }
        else {
            this.referenceStrength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductIngredient.specifiedSubstance.strength';
        }
        iss.push(...this.vRS('presentation', exp));
        iss.push(...this.vOS('presentationLowLimit', exp));
        iss.push(...this.vOS('concentration', exp));
        iss.push(...this.vOS('concentrationLowLimit', exp));
        iss.push(...this.vOS('measurementPoint', exp));
        iss.push(...this.vOA('country', exp));
        iss.push(...this.vOA('referenceStrength', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstanceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrength';
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['group']) {
            this.group = new fhir.CodeableConcept(source.group, options);
        }
        else {
            this.group = null;
        }
        if (source['confidentiality']) {
            this.confidentiality = new fhir.CodeableConcept(source.confidentiality, options);
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x, options));
        }
        else {
            this.strength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductIngredient.specifiedSubstance';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRS('group', exp));
        iss.push(...this.vOS('confidentiality', exp));
        iss.push(...this.vOA('strength', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstance._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstance';
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x, options));
        }
        else {
            this.strength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductIngredient.substance';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vOA('strength', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSubstance._fts_dataType = 'MedicinalProductIngredientSubstance';
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductIngredient';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role, options);
        }
        else {
            this.role = null;
        }
        if (source['allergenicIndicator'] !== undefined) {
            this.allergenicIndicator = new fhir.FhirBoolean({ value: source.allergenicIndicator }, options);
        }
        if (source['_allergenicIndicator']) {
            if (this.allergenicIndicator) {
                this.allergenicIndicator.addExtendedProperties(source._allergenicIndicator);
            }
            else {
                this.allergenicIndicator = new fhir.FhirBoolean(source._allergenicIndicator, options);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.manufacturer = [];
        }
        if (source['specifiedSubstance']) {
            this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x, options));
        }
        else {
            this.specifiedSubstance = [];
        }
        if (source['substance']) {
            this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductIngredient';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRS('role', exp));
        iss.push(...this.vOS('allergenicIndicator', exp));
        iss.push(...this.vOA('manufacturer', exp));
        iss.push(...this.vOA('specifiedSubstance', exp));
        iss.push(...this.vOS('substance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredient._fts_dataType = 'MedicinalProductIngredient';
//# sourceMappingURL=data:application/json;base64,