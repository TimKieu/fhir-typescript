// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductIngredient
import * as fhir from '../fhir.js';
/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
        else {
            this.strength = null;
        }
        if (source['strengthLowLimit']) {
            this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit);
        }
        if (source['measurementPoint']) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint });
        }
        if (source['_measurementPoint']) {
            if (this.measurementPoint) {
                this.measurementPoint.addExtendedProperties(source._measurementPoint);
            }
            else {
                this.measurementPoint = new fhir.FhirString(source._measurementPoint);
            }
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.country = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength';
        }
        this.vOptS('substance', expression);
        this.vReqS('strength', expression);
        this.vOptS('strengthLowLimit', expression);
        this.vOptS('measurementPoint', expression);
        this.vOptA('country', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength';
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['presentation']) {
            this.presentation = new fhir.Ratio(source.presentation);
        }
        else {
            this.presentation = null;
        }
        if (source['presentationLowLimit']) {
            this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit);
        }
        if (source['concentration']) {
            this.concentration = new fhir.Ratio(source.concentration);
        }
        if (source['concentrationLowLimit']) {
            this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit);
        }
        if (source['measurementPoint']) {
            this.measurementPoint = new fhir.FhirString({ value: source.measurementPoint });
        }
        if (source['_measurementPoint']) {
            if (this.measurementPoint) {
                this.measurementPoint.addExtendedProperties(source._measurementPoint);
            }
            else {
                this.measurementPoint = new fhir.FhirString(source._measurementPoint);
            }
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.country = [];
        }
        if (source['referenceStrength']) {
            this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x));
        }
        else {
            this.referenceStrength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductIngredient.specifiedSubstance.strength';
        }
        this.vReqS('presentation', expression);
        this.vOptS('presentationLowLimit', expression);
        this.vOptS('concentration', expression);
        this.vOptS('concentrationLowLimit', expression);
        this.vOptS('measurementPoint', expression);
        this.vOptA('country', expression);
        this.vOptA('referenceStrength', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstanceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrength';
/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['group']) {
            this.group = new fhir.CodeableConcept(source.group);
        }
        else {
            this.group = null;
        }
        if (source['confidentiality']) {
            this.confidentiality = new fhir.CodeableConcept(source.confidentiality);
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
        else {
            this.strength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductIngredient.specifiedSubstance';
        }
        this.vReqS('code', expression);
        this.vReqS('group', expression);
        this.vOptS('confidentiality', expression);
        this.vOptA('strength', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSpecifiedSubstance._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstance';
/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['strength']) {
            this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x));
        }
        else {
            this.strength = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductIngredient.substance';
        }
        this.vReqS('code', expression);
        this.vOptA('strength', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredientSubstance._fts_dataType = 'MedicinalProductIngredientSubstance';
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductIngredient';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
        if (source['allergenicIndicator']) {
            this.allergenicIndicator = new fhir.FhirBoolean({ value: source.allergenicIndicator });
        }
        if (source['_allergenicIndicator']) {
            if (this.allergenicIndicator) {
                this.allergenicIndicator.addExtendedProperties(source._allergenicIndicator);
            }
            else {
                this.allergenicIndicator = new fhir.FhirBoolean(source._allergenicIndicator);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['specifiedSubstance']) {
            this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x));
        }
        else {
            this.specifiedSubstance = [];
        }
        if (source['substance']) {
            this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductIngredient';
        }
        this.vReqS('resourceType', expression);
        this.vOptS('identifier', expression);
        this.vReqS('role', expression);
        this.vOptS('allergenicIndicator', expression);
        this.vOptA('manufacturer', expression);
        this.vOptA('specifiedSubstance', expression);
        this.vOptS('substance', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIngredient._fts_dataType = 'MedicinalProductIngredient';
//# sourceMappingURL=data:application/json;base64,