/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Ratio } from './Ratio.js';
import { FhirString } from './FhirString.js';
import { Identifier } from './Identifier.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Reference } from './Reference.js';

// <auto-generated/>
/**
 * Strength expressed in terms of a reference substance.
 */
var MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, _super);
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['substance']) {
            _this.substance = new CodeableConcept(source.substance);
        }
        if (source['strength']) {
            _this.strength = new Ratio(source.strength);
        }
        else {
            _this.strength = null;
        }
        if (source['strengthLowLimit']) {
            _this.strengthLowLimit = new Ratio(source.strengthLowLimit);
        }
        if (source['measurementPoint']) {
            _this.measurementPoint = new FhirString({ value: source.measurementPoint });
        }
        if (source['country']) {
            _this.country = source.country.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.country = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["substance"]) {
            (_a = outcome.issue).push.apply(_a, this.substance.doModelValidation().issue);
        }
        if (!this['strength']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property strength:fhir.Ratio fhir: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.strength:Ratio', }));
        }
        if (this["strength"]) {
            (_b = outcome.issue).push.apply(_b, this.strength.doModelValidation().issue);
        }
        if (this["strengthLowLimit"]) {
            (_c = outcome.issue).push.apply(_c, this.strengthLowLimit.doModelValidation().issue);
        }
        if (this["measurementPoint"]) {
            (_d = outcome.issue).push.apply(_d, this.measurementPoint.doModelValidation().issue);
        }
        if (this["country"]) {
            this.country.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength';
    return MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength;
}(BackboneElement));
/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
var MedicinalProductIngredientSpecifiedSubstanceStrength = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSpecifiedSubstanceStrength, _super);
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductIngredientSpecifiedSubstanceStrength(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['presentation']) {
            _this.presentation = new Ratio(source.presentation);
        }
        else {
            _this.presentation = null;
        }
        if (source['presentationLowLimit']) {
            _this.presentationLowLimit = new Ratio(source.presentationLowLimit);
        }
        if (source['concentration']) {
            _this.concentration = new Ratio(source.concentration);
        }
        if (source['concentrationLowLimit']) {
            _this.concentrationLowLimit = new Ratio(source.concentrationLowLimit);
        }
        if (source['measurementPoint']) {
            _this.measurementPoint = new FhirString({ value: source.measurementPoint });
        }
        if (source['country']) {
            _this.country = source.country.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.country = [];
        }
        if (source['referenceStrength']) {
            _this.referenceStrength = source.referenceStrength.map(function (x) { return new MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x); });
        }
        else {
            _this.referenceStrength = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductIngredientSpecifiedSubstanceStrength.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['presentation']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property presentation:fhir.Ratio fhir: MedicinalProductIngredient.specifiedSubstance.strength.presentation:Ratio', }));
        }
        if (this["presentation"]) {
            (_a = outcome.issue).push.apply(_a, this.presentation.doModelValidation().issue);
        }
        if (this["presentationLowLimit"]) {
            (_b = outcome.issue).push.apply(_b, this.presentationLowLimit.doModelValidation().issue);
        }
        if (this["concentration"]) {
            (_c = outcome.issue).push.apply(_c, this.concentration.doModelValidation().issue);
        }
        if (this["concentrationLowLimit"]) {
            (_d = outcome.issue).push.apply(_d, this.concentrationLowLimit.doModelValidation().issue);
        }
        if (this["measurementPoint"]) {
            (_e = outcome.issue).push.apply(_e, this.measurementPoint.doModelValidation().issue);
        }
        if (this["country"]) {
            this.country.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["referenceStrength"]) {
            this.referenceStrength.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductIngredientSpecifiedSubstanceStrength._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstanceStrength';
    return MedicinalProductIngredientSpecifiedSubstanceStrength;
}(BackboneElement));
/**
 * A specified substance that comprises this ingredient.
 */
var MedicinalProductIngredientSpecifiedSubstance = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSpecifiedSubstance, _super);
    /**
     * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductIngredientSpecifiedSubstance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['group']) {
            _this.group = new CodeableConcept(source.group);
        }
        else {
            _this.group = null;
        }
        if (source['confidentiality']) {
            _this.confidentiality = new CodeableConcept(source.confidentiality);
        }
        if (source['strength']) {
            _this.strength = source.strength.map(function (x) { return new MedicinalProductIngredientSpecifiedSubstanceStrength(x); });
        }
        else {
            _this.strength = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductIngredientSpecifiedSubstance.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductIngredient.specifiedSubstance.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['group']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property group:fhir.CodeableConcept fhir: MedicinalProductIngredient.specifiedSubstance.group:CodeableConcept', }));
        }
        if (this["group"]) {
            (_b = outcome.issue).push.apply(_b, this.group.doModelValidation().issue);
        }
        if (this["confidentiality"]) {
            (_c = outcome.issue).push.apply(_c, this.confidentiality.doModelValidation().issue);
        }
        if (this["strength"]) {
            this.strength.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductIngredientSpecifiedSubstance._fts_dataType = 'MedicinalProductIngredientSpecifiedSubstance';
    return MedicinalProductIngredientSpecifiedSubstance;
}(BackboneElement));
/**
 * The ingredient substance.
 */
var MedicinalProductIngredientSubstance = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredientSubstance, _super);
    /**
     * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductIngredientSubstance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['strength']) {
            _this.strength = source.strength.map(function (x) { return new MedicinalProductIngredientSpecifiedSubstanceStrength(x); });
        }
        else {
            _this.strength = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductIngredientSubstance.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductIngredient.substance.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["strength"]) {
            this.strength.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductIngredientSubstance._fts_dataType = 'MedicinalProductIngredientSubstance';
    return MedicinalProductIngredientSubstance;
}(BackboneElement));
/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
var MedicinalProductIngredient = /** @class */ (function (_super) {
    __extends(MedicinalProductIngredient, _super);
    /**
     * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductIngredient(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicinalProductIngredient';
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        else {
            _this.role = null;
        }
        if (source['allergenicIndicator']) {
            _this.allergenicIndicator = new FhirBoolean({ value: source.allergenicIndicator });
        }
        if (source['manufacturer']) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new Reference(x); });
        }
        else {
            _this.manufacturer = [];
        }
        if (source['specifiedSubstance']) {
            _this.specifiedSubstance = source.specifiedSubstance.map(function (x) { return new MedicinalProductIngredientSpecifiedSubstance(x); });
        }
        else {
            _this.specifiedSubstance = [];
        }
        if (source['substance']) {
            _this.substance = new MedicinalProductIngredientSubstance(source.substance);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductIngredient.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicinalProductIngredient" fhir: MedicinalProductIngredient.resourceType:"MedicinalProductIngredient"', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (!this['role']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property role:fhir.CodeableConcept fhir: MedicinalProductIngredient.role:CodeableConcept', }));
        }
        if (this["role"]) {
            (_b = outcome.issue).push.apply(_b, this.role.doModelValidation().issue);
        }
        if (this["allergenicIndicator"]) {
            (_c = outcome.issue).push.apply(_c, this.allergenicIndicator.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["specifiedSubstance"]) {
            this.specifiedSubstance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["substance"]) {
            (_d = outcome.issue).push.apply(_d, this.substance.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductIngredient._fts_dataType = 'MedicinalProductIngredient';
    return MedicinalProductIngredient;
}(DomainResource));

export { MedicinalProductIngredient, MedicinalProductIngredientSpecifiedSubstance, MedicinalProductIngredientSpecifiedSubstanceStrength, MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, MedicinalProductIngredientSubstance };
//# sourceMappingURL=MedicinalProductIngredient.js.map
