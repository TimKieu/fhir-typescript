// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CoverageEligibilityResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { EligibilityresponsePurposeVsValidation } from '../fhirValueSets/EligibilityresponsePurposeVsValidation.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * Benefits used to date.
 */
export class CoverageEligibilityResponseInsuranceItemBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItemBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedUnsignedInt']) {
            this.allowed = new fhir.FhirUnsignedInt({ value: source.allowedUnsignedInt });
        }
        else if (source['allowedString']) {
            this.allowed = new fhir.FhirString({ value: source.allowedString });
        }
        else if (source['allowedMoney']) {
            this.allowed = new fhir.Money(source.allowedMoney);
        }
        if (source['used']) {
            this.used = source.used;
        }
        else if (source['usedUnsignedInt']) {
            this.used = new fhir.FhirUnsignedInt({ value: source.usedUnsignedInt });
        }
        else if (source['usedString']) {
            this.used = new fhir.FhirString({ value: source.usedString });
        }
        else if (source['usedMoney']) {
            this.used = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CoverageEligibilityResponse.insurance.item.benefit';
        }
        this.vReqS('type', expression);
        this.vOptS('allowed', expression);
        this.vOptS('used', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityResponseInsuranceItemBenefit._fts_dataType = 'CoverageEligibilityResponseInsuranceItemBenefit';
/**
 * Internal flag to properly serialize choice-type element CoverageEligibilityResponse.insurance.item.benefit.allowed[x]
 */
CoverageEligibilityResponseInsuranceItemBenefit._fts_allowedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element CoverageEligibilityResponse.insurance.item.benefit.used[x]
 */
CoverageEligibilityResponseInsuranceItemBenefit._fts_usedIsChoice = true;
/**
 * Benefits and optionally current balances, and authorization details by category or service.
 */
export class CoverageEligibilityResponseInsuranceItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsuranceItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        if (source['excluded']) {
            this.excluded = new fhir.FhirBoolean({ value: source.excluded });
        }
        if (source['_excluded']) {
            if (this.excluded) {
                this.excluded.addExtendedProperties(source._excluded);
            }
            else {
                this.excluded = new fhir.FhirBoolean(source._excluded);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.CoverageEligibilityResponseInsuranceItemBenefit(x));
        }
        else {
            this.benefit = [];
        }
        if (source['authorizationRequired']) {
            this.authorizationRequired = new fhir.FhirBoolean({ value: source.authorizationRequired });
        }
        if (source['_authorizationRequired']) {
            if (this.authorizationRequired) {
                this.authorizationRequired.addExtendedProperties(source._authorizationRequired);
            }
            else {
                this.authorizationRequired = new fhir.FhirBoolean(source._authorizationRequired);
            }
        }
        if (source['authorizationSupporting']) {
            this.authorizationSupporting = source.authorizationSupporting.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.authorizationSupporting = [];
        }
        if (source['authorizationUrl']) {
            this.authorizationUrl = new fhir.FhirUri({ value: source.authorizationUrl });
        }
        if (source['_authorizationUrl']) {
            if (this.authorizationUrl) {
                this.authorizationUrl.addExtendedProperties(source._authorizationUrl);
            }
            else {
                this.authorizationUrl = new fhir.FhirUri(source._authorizationUrl);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CoverageEligibilityResponse.insurance.item';
        }
        this.vOptS('category', expression);
        this.vOptS('productOrService', expression);
        this.vOptA('modifier', expression);
        this.vOptS('provider', expression);
        this.vOptS('excluded', expression);
        this.vOptS('name', expression);
        this.vOptS('description', expression);
        this.vOptS('network', expression);
        this.vOptS('unit', expression);
        this.vOptS('term', expression);
        this.vOptA('benefit', expression);
        this.vOptS('authorizationRequired', expression);
        this.vOptA('authorizationSupporting', expression);
        this.vOptS('authorizationUrl', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityResponseInsuranceItem._fts_dataType = 'CoverageEligibilityResponseInsuranceItem';
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityResponseInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['inforce']) {
            this.inforce = new fhir.FhirBoolean({ value: source.inforce });
        }
        if (source['_inforce']) {
            if (this.inforce) {
                this.inforce.addExtendedProperties(source._inforce);
            }
            else {
                this.inforce = new fhir.FhirBoolean(source._inforce);
            }
        }
        if (source['benefitPeriod']) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityResponseInsuranceItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CoverageEligibilityResponse.insurance';
        }
        this.vReqS('coverage', expression);
        this.vOptS('inforce', expression);
        this.vOptS('benefitPeriod', expression);
        this.vOptA('item', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityResponseInsurance._fts_dataType = 'CoverageEligibilityResponseInsurance';
/**
 * Errors encountered during the processing of the request.
 */
export class CoverageEligibilityResponseError extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityResponseError - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CoverageEligibilityResponse.error';
        }
        this.vReqS('code', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityResponseError._fts_dataType = 'CoverageEligibilityResponseError';
/**
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
export class CoverageEligibilityResponse extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CoverageEligibilityResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.purpose = [];
        }
        if (source['_purpose']) {
            source._purpose.forEach((x, i) => {
                if (this.purpose.length >= i) {
                    if (x) {
                        this.purpose[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.purpose.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['requestor']) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        else {
            this.request = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.FhirCode({ value: source.outcome });
        }
        else {
            this.outcome = null;
        }
        if (source['_outcome']) {
            if (this.outcome) {
                this.outcome.addExtendedProperties(source._outcome);
            }
            else {
                this.outcome = new fhir.FhirCode(source._outcome);
            }
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition);
            }
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityResponseInsurance(x));
        }
        else {
            this.insurance = [];
        }
        if (source['preAuthRef']) {
            this.preAuthRef = new fhir.FhirString({ value: source.preAuthRef });
        }
        if (source['_preAuthRef']) {
            if (this.preAuthRef) {
                this.preAuthRef.addExtendedProperties(source._preAuthRef);
            }
            else {
                this.preAuthRef = new fhir.FhirString(source._preAuthRef);
            }
        }
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['error']) {
            this.error = source.error.map((x) => new fhir.CoverageEligibilityResponseError(x));
        }
        else {
            this.error = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CoverageEligibilityResponse';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vReqSV('status', expression, 'FmStatus', FmStatusVsValidation, 'r');
        this.vReqAV('purpose', expression, 'EligibilityresponsePurpose', EligibilityresponsePurposeVsValidation, 'r');
        this.vReqS('patient', expression);
        this.vOptS('serviced', expression);
        this.vReqS('created', expression);
        this.vOptS('requestor', expression);
        this.vReqS('request', expression);
        this.vReqSV('outcome', expression, 'RemittanceOutcome', RemittanceOutcomeVsValidation, 'r');
        this.vOptS('disposition', expression);
        this.vReqS('insurer', expression);
        this.vOptA('insurance', expression);
        this.vOptS('preAuthRef', expression);
        this.vOptS('form', expression);
        this.vOptA('error', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityResponse._fts_dataType = 'CoverageEligibilityResponse';
/**
 * Internal flag to properly serialize choice-type element CoverageEligibilityResponse.serviced[x]
 */
CoverageEligibilityResponse._fts_servicedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,