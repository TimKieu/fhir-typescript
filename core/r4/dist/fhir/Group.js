/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { GroupTypeCodings } from '../fhirValueSets/GroupTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { Reference } from './Reference.js';
import { Period } from './Period.js';
import { Identifier } from './Identifier.js';
import { FhirString } from './FhirString.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';

// <auto-generated/>
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
var GroupCharacteristic = /** @class */ (function (_super) {
    __extends(GroupCharacteristic, _super);
    /**
     * Default constructor for GroupCharacteristic - initializes any required elements to null if a value is not provided.
     */
    function GroupCharacteristic(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            _this.value = new CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            _this.value = new Range(source.valueRange);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        else {
            _this.value = null;
        }
        if (source['exclude']) {
            _this.exclude = new FhirBoolean({ value: source.exclude });
        }
        else {
            _this.exclude = null;
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GroupCharacteristic.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Group.characteristic.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: Group.characteristic.value[x]:', }));
        }
        if (!this['exclude']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property exclude:fhir.FhirBoolean fhir: Group.characteristic.exclude:boolean', }));
        }
        if (this["exclude"]) {
            (_b = outcome.issue).push.apply(_b, this.exclude.doModelValidation().issue);
        }
        if (this["period"]) {
            (_c = outcome.issue).push.apply(_c, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GroupCharacteristic._fts_dataType = 'GroupCharacteristic';
    /**
     * Internal flag to properly serialize choice-type element Group.characteristic.value[x]
     */
    GroupCharacteristic._fts_valueIsChoice = true;
    return GroupCharacteristic;
}(BackboneElement));
/**
 * Identifies the resource instances that are members of the group.
 */
var GroupMember = /** @class */ (function (_super) {
    __extends(GroupMember, _super);
    /**
     * Default constructor for GroupMember - initializes any required elements to null if a value is not provided.
     */
    function GroupMember(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['entity']) {
            _this.entity = new Reference(source.entity);
        }
        else {
            _this.entity = null;
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['inactive']) {
            _this.inactive = new FhirBoolean({ value: source.inactive });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GroupMember.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['entity']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property entity:fhir.Reference fhir: Group.member.entity:Reference', }));
        }
        if (this["entity"]) {
            (_a = outcome.issue).push.apply(_a, this.entity.doModelValidation().issue);
        }
        if (this["period"]) {
            (_b = outcome.issue).push.apply(_b, this.period.doModelValidation().issue);
        }
        if (this["inactive"]) {
            (_c = outcome.issue).push.apply(_c, this.inactive.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GroupMember._fts_dataType = 'GroupMember';
    return GroupMember;
}(BackboneElement));
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    /**
     * Default constructor for Group - initializes any required elements to null if a value is not provided.
     */
    function Group(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Group';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['actual']) {
            _this.actual = new FhirBoolean({ value: source.actual });
        }
        else {
            _this.actual = null;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['quantity']) {
            _this.quantity = new FhirUnsignedInt({ value: source.quantity });
        }
        if (source['managingEntity']) {
            _this.managingEntity = new Reference(source.managingEntity);
        }
        if (source['characteristic']) {
            _this.characteristic = source.characteristic.map(function (x) { return new GroupCharacteristic(x); });
        }
        else {
            _this.characteristic = [];
        }
        if (source['member']) {
            _this.member = source.member.map(function (x) { return new GroupMember(x); });
        }
        else {
            _this.member = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (Group.type)
     */
    Group.typeRequiredCoding = function () {
        return GroupTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Group.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Group" fhir: Group.resourceType:"Group"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:GroupTypeCodeType fhir: Group.type:code', }));
        }
        if (!this['actual']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actual:fhir.FhirBoolean fhir: Group.actual:boolean', }));
        }
        if (this["actual"]) {
            (_b = outcome.issue).push.apply(_b, this.actual.doModelValidation().issue);
        }
        if (this["code"]) {
            (_c = outcome.issue).push.apply(_c, this.code.doModelValidation().issue);
        }
        if (this["name"]) {
            (_d = outcome.issue).push.apply(_d, this.name.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["managingEntity"]) {
            (_f = outcome.issue).push.apply(_f, this.managingEntity.doModelValidation().issue);
        }
        if (this["characteristic"]) {
            this.characteristic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["member"]) {
            this.member.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Group._fts_dataType = 'Group';
    return Group;
}(DomainResource));

export { Group, GroupCharacteristic, GroupMember };
//# sourceMappingURL=Group.js.map
