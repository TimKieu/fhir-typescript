// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Group
import * as fhir from '../fhir.js';
// @ts-ignore
import { GroupTypeVsValidation } from '../fhirValueSets/GroupTypeVsValidation.js';
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export class GroupCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for GroupCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else {
            this.value = null;
        }
        if (source['exclude']) {
            this.exclude = new fhir.FhirBoolean({ value: source.exclude });
        }
        else {
            this.exclude = null;
        }
        if (source['_exclude']) {
            if (this.exclude) {
                this.exclude.addExtendedProperties(source._exclude);
            }
            else {
                this.exclude = new fhir.FhirBoolean(source._exclude);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Group.characteristic';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vRS('exclude', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GroupCharacteristic._fts_dataType = 'GroupCharacteristic';
/**
 * Internal flag to properly serialize choice-type element Group.characteristic.value[x]
 */
GroupCharacteristic._fts_valueIsChoice = true;
/**
 * Identifies the resource instances that are members of the group.
 */
export class GroupMember extends fhir.BackboneElement {
    /**
     * Default constructor for GroupMember - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = new fhir.Reference(source.entity);
        }
        else {
            this.entity = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['inactive']) {
            this.inactive = new fhir.FhirBoolean({ value: source.inactive });
        }
        if (source['_inactive']) {
            if (this.inactive) {
                this.inactive.addExtendedProperties(source._inactive);
            }
            else {
                this.inactive = new fhir.FhirBoolean(source._inactive);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Group.member';
        }
        iss.push(...this.vRS('entity', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('inactive', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GroupMember._fts_dataType = 'GroupMember';
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export class Group extends fhir.DomainResource {
    /**
     * Default constructor for Group - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Group';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['actual']) {
            this.actual = new fhir.FhirBoolean({ value: source.actual });
        }
        else {
            this.actual = null;
        }
        if (source['_actual']) {
            if (this.actual) {
                this.actual.addExtendedProperties(source._actual);
            }
            else {
                this.actual = new fhir.FhirBoolean(source._actual);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.FhirUnsignedInt({ value: source.quantity });
        }
        if (source['_quantity']) {
            if (this.quantity) {
                this.quantity.addExtendedProperties(source._quantity);
            }
            else {
                this.quantity = new fhir.FhirUnsignedInt(source._quantity);
            }
        }
        if (source['managingEntity']) {
            this.managingEntity = new fhir.Reference(source.managingEntity);
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.GroupCharacteristic(x));
        }
        else {
            this.characteristic = [];
        }
        if (source['member']) {
            this.member = source.member.map((x) => new fhir.GroupMember(x));
        }
        else {
            this.member = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Group';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('active', exp));
        iss.push(...this.vRSV('type', exp, 'GroupType', GroupTypeVsValidation, 'r'));
        iss.push(...this.vRS('actual', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('managingEntity', exp));
        iss.push(...this.vOA('characteristic', exp));
        iss.push(...this.vOA('member', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Group._fts_dataType = 'Group';
//# sourceMappingURL=data:application/json;base64,