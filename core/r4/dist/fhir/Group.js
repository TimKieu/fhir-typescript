// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Group
import * as fhir from '../fhir.js';
// @ts-ignore
import { GroupTypeCodes } from '../fhirValueSets/GroupTypeCodes.js';
/**
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export class GroupCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for GroupCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else {
            this.value = null;
        }
        if (source['exclude']) {
            this.exclude = new fhir.FhirBoolean({ value: source.exclude });
        }
        else {
            this.exclude = null;
        }
        if (source['_exclude']) {
            if (this.exclude) {
                this.exclude.addExtendedProperties(source._exclude);
            }
            else {
                this.exclude = new fhir.FhirBoolean(source._exclude);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Group.characteristic';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: Group.characteristic.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: Group.characteristic.value[x]:', expression: [expression] });
        }
        if (!this['exclude']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property exclude fhir: Group.characteristic.exclude:boolean', expression: [expression] });
        }
        if (this["exclude"]) {
            issues.push(...this.exclude.doModelValidation(expression + '.exclude'));
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GroupCharacteristic._fts_dataType = 'GroupCharacteristic';
/**
 * Internal flag to properly serialize choice-type element Group.characteristic.value[x]
 */
GroupCharacteristic._fts_valueIsChoice = true;
/**
 * Identifies the resource instances that are members of the group.
 */
export class GroupMember extends fhir.BackboneElement {
    /**
     * Default constructor for GroupMember - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = new fhir.Reference(source.entity);
        }
        else {
            this.entity = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['inactive']) {
            this.inactive = new fhir.FhirBoolean({ value: source.inactive });
        }
        if (source['_inactive']) {
            if (this.inactive) {
                this.inactive.addExtendedProperties(source._inactive);
            }
            else {
                this.inactive = new fhir.FhirBoolean(source._inactive);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Group.member';
        }
        if (!this['entity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property entity fhir: Group.member.entity:Reference', expression: [expression] });
        }
        if (this["entity"]) {
            issues.push(...this.entity.doModelValidation(expression + '.entity'));
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        if (this["inactive"]) {
            issues.push(...this.inactive.doModelValidation(expression + '.inactive'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GroupMember._fts_dataType = 'GroupMember';
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export class Group extends fhir.DomainResource {
    /**
     * Default constructor for Group - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Group';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['actual']) {
            this.actual = new fhir.FhirBoolean({ value: source.actual });
        }
        else {
            this.actual = null;
        }
        if (source['_actual']) {
            if (this.actual) {
                this.actual.addExtendedProperties(source._actual);
            }
            else {
                this.actual = new fhir.FhirBoolean(source._actual);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.FhirUnsignedInt({ value: source.quantity });
        }
        if (source['_quantity']) {
            if (this.quantity) {
                this.quantity.addExtendedProperties(source._quantity);
            }
            else {
                this.quantity = new fhir.FhirUnsignedInt(source._quantity);
            }
        }
        if (source['managingEntity']) {
            this.managingEntity = new fhir.Reference(source.managingEntity);
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.GroupCharacteristic(x));
        }
        else {
            this.characteristic = [];
        }
        if (source['member']) {
            this.member = source.member.map((x) => new fhir.GroupMember(x));
        }
        else {
            this.member = [];
        }
    }
    /**
     * Required-bound Value Set for type (Group.type)
     */
    static get typeRequiredCodes() {
        return GroupTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Group';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Group.resourceType:"Group"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation(expression + '.active'));
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: Group.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(GroupTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'type (Group.type) of type code is missing code for Required binding to: GroupType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['actual']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actual fhir: Group.actual:boolean', expression: [expression] });
        }
        if (this["actual"]) {
            issues.push(...this.actual.doModelValidation(expression + '.actual'));
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation(expression + '.quantity'));
        }
        if (this["managingEntity"]) {
            issues.push(...this.managingEntity.doModelValidation(expression + '.managingEntity'));
        }
        if (this["characteristic"]) {
            this.characteristic.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.characteristic[${i}]`)); });
        }
        if (this["member"]) {
            this.member.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.member[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Group._fts_dataType = 'Group';
//# sourceMappingURL=data:application/json;base64,