// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchElementDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { UcumUnitsCodes } from '../fhirValueSets/UcumUnitsCodes.js';
// @ts-ignore
import { GroupMeasureCodes } from '../fhirValueSets/GroupMeasureCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { ResearchElementTypeCodes } from '../fhirValueSets/ResearchElementTypeCodes.js';
// @ts-ignore
import { VariableTypeCodes } from '../fhirValueSets/VariableTypeCodes.js';
/**
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
export class ResearchElementDefinitionCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchElementDefinitionCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['definition']) {
            this.definition = source.definition;
        }
        else if (source['definitionCodeableConcept']) {
            this.definition = new fhir.CodeableConcept(source.definitionCodeableConcept);
        }
        else if (source['definitionCanonical']) {
            this.definition = new fhir.FhirCanonical({ value: source.definitionCanonical });
        }
        else if (source['definitionExpression']) {
            this.definition = new fhir.Expression(source.definitionExpression);
        }
        else if (source['definitionDataRequirement']) {
            this.definition = new fhir.DataRequirement(source.definitionDataRequirement);
        }
        else {
            this.definition = null;
        }
        if (source['usageContext']) {
            this.usageContext = source.usageContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.usageContext = [];
        }
        if (source['exclude']) {
            this.exclude = new fhir.FhirBoolean({ value: source.exclude });
        }
        if (source['_exclude']) {
            if (this.exclude) {
                this.exclude.addExtendedProperties(source._exclude);
            }
            else {
                this.exclude = new fhir.FhirBoolean(source._exclude);
            }
        }
        if (source['unitOfMeasure']) {
            this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure);
        }
        if (source['studyEffectiveDescription']) {
            this.studyEffectiveDescription = new fhir.FhirString({ value: source.studyEffectiveDescription });
        }
        if (source['_studyEffectiveDescription']) {
            if (this.studyEffectiveDescription) {
                this.studyEffectiveDescription.addExtendedProperties(source._studyEffectiveDescription);
            }
            else {
                this.studyEffectiveDescription = new fhir.FhirString(source._studyEffectiveDescription);
            }
        }
        if (source['studyEffective']) {
            this.studyEffective = source.studyEffective;
        }
        else if (source['studyEffectiveDateTime']) {
            this.studyEffective = new fhir.FhirDateTime({ value: source.studyEffectiveDateTime });
        }
        else if (source['studyEffectivePeriod']) {
            this.studyEffective = new fhir.Period(source.studyEffectivePeriod);
        }
        else if (source['studyEffectiveDuration']) {
            this.studyEffective = new fhir.Duration(source.studyEffectiveDuration);
        }
        else if (source['studyEffectiveTiming']) {
            this.studyEffective = new fhir.Timing(source.studyEffectiveTiming);
        }
        if (source['studyEffectiveTimeFromStart']) {
            this.studyEffectiveTimeFromStart = new fhir.Duration(source.studyEffectiveTimeFromStart);
        }
        if (source['studyEffectiveGroupMeasure']) {
            this.studyEffectiveGroupMeasure = new fhir.FhirCode({ value: source.studyEffectiveGroupMeasure });
        }
        if (source['_studyEffectiveGroupMeasure']) {
            if (this.studyEffectiveGroupMeasure) {
                this.studyEffectiveGroupMeasure.addExtendedProperties(source._studyEffectiveGroupMeasure);
            }
            else {
                this.studyEffectiveGroupMeasure = new fhir.FhirCode(source._studyEffectiveGroupMeasure);
            }
        }
        if (source['participantEffectiveDescription']) {
            this.participantEffectiveDescription = new fhir.FhirString({ value: source.participantEffectiveDescription });
        }
        if (source['_participantEffectiveDescription']) {
            if (this.participantEffectiveDescription) {
                this.participantEffectiveDescription.addExtendedProperties(source._participantEffectiveDescription);
            }
            else {
                this.participantEffectiveDescription = new fhir.FhirString(source._participantEffectiveDescription);
            }
        }
        if (source['participantEffective']) {
            this.participantEffective = source.participantEffective;
        }
        else if (source['participantEffectiveDateTime']) {
            this.participantEffective = new fhir.FhirDateTime({ value: source.participantEffectiveDateTime });
        }
        else if (source['participantEffectivePeriod']) {
            this.participantEffective = new fhir.Period(source.participantEffectivePeriod);
        }
        else if (source['participantEffectiveDuration']) {
            this.participantEffective = new fhir.Duration(source.participantEffectiveDuration);
        }
        else if (source['participantEffectiveTiming']) {
            this.participantEffective = new fhir.Timing(source.participantEffectiveTiming);
        }
        if (source['participantEffectiveTimeFromStart']) {
            this.participantEffectiveTimeFromStart = new fhir.Duration(source.participantEffectiveTimeFromStart);
        }
        if (source['participantEffectiveGroupMeasure']) {
            this.participantEffectiveGroupMeasure = new fhir.FhirCode({ value: source.participantEffectiveGroupMeasure });
        }
        if (source['_participantEffectiveGroupMeasure']) {
            if (this.participantEffectiveGroupMeasure) {
                this.participantEffectiveGroupMeasure.addExtendedProperties(source._participantEffectiveGroupMeasure);
            }
            else {
                this.participantEffectiveGroupMeasure = new fhir.FhirCode(source._participantEffectiveGroupMeasure);
            }
        }
    }
    /**
     * Required-bound Value Set for unitOfMeasure (ResearchElementDefinition.characteristic.unitOfMeasure)
     */
    static get unitOfMeasureRequiredCodes() {
        return UcumUnitsCodes;
    }
    /**
     * Required-bound Value Set for studyEffectiveGroupMeasure (ResearchElementDefinition.characteristic.studyEffectiveGroupMeasure)
     */
    static get studyEffectiveGroupMeasureRequiredCodes() {
        return GroupMeasureCodes;
    }
    /**
     * Required-bound Value Set for participantEffectiveGroupMeasure (ResearchElementDefinition.characteristic.participantEffectiveGroupMeasure)
     */
    static get participantEffectiveGroupMeasureRequiredCodes() {
        return GroupMeasureCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['definition']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property definition: fhir: ResearchElementDefinition.characteristic.definition[x]:' });
        }
        if (this["usageContext"]) {
            this.usageContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["exclude"]) {
            issues.push(...this.exclude.doModelValidation());
        }
        if (this['unitOfMeasure'] && (!Object.values(UcumUnitsCodes).includes(this.unitOfMeasure))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property unitOfMeasure?:fhir.CodeableConcept fhir: ResearchElementDefinition.characteristic.unitOfMeasure:CodeableConcept Required binding to: UcumUnits' });
        }
        if (this["unitOfMeasure"]) {
            issues.push(...this.unitOfMeasure.doModelValidation());
        }
        if (this["studyEffectiveDescription"]) {
            issues.push(...this.studyEffectiveDescription.doModelValidation());
        }
        if (this["studyEffectiveTimeFromStart"]) {
            issues.push(...this.studyEffectiveTimeFromStart.doModelValidation());
        }
        if (this['studyEffectiveGroupMeasure'] && (!Object.values(GroupMeasureCodes).includes(this.studyEffectiveGroupMeasure))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property studyEffectiveGroupMeasure?:fhir.FhirCode<GroupMeasureCodeType> fhir: ResearchElementDefinition.characteristic.studyEffectiveGroupMeasure:code Required binding to: GroupMeasure' });
        }
        if (this["studyEffectiveGroupMeasure"]) {
            issues.push(...this.studyEffectiveGroupMeasure.doModelValidation());
        }
        if (this["participantEffectiveDescription"]) {
            issues.push(...this.participantEffectiveDescription.doModelValidation());
        }
        if (this["participantEffectiveTimeFromStart"]) {
            issues.push(...this.participantEffectiveTimeFromStart.doModelValidation());
        }
        if (this['participantEffectiveGroupMeasure'] && (!Object.values(GroupMeasureCodes).includes(this.participantEffectiveGroupMeasure))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property participantEffectiveGroupMeasure?:fhir.FhirCode<GroupMeasureCodeType> fhir: ResearchElementDefinition.characteristic.participantEffectiveGroupMeasure:code Required binding to: GroupMeasure' });
        }
        if (this["participantEffectiveGroupMeasure"]) {
            issues.push(...this.participantEffectiveGroupMeasure.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchElementDefinitionCharacteristic._fts_dataType = 'ResearchElementDefinitionCharacteristic';
/**
 * Internal flag to properly serialize choice-type element ResearchElementDefinition.characteristic.definition[x]
 */
ResearchElementDefinitionCharacteristic._fts_definitionIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ResearchElementDefinition.characteristic.studyEffective[x]
 */
ResearchElementDefinitionCharacteristic._fts_studyEffectiveIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ResearchElementDefinition.characteristic.participantEffective[x]
 */
ResearchElementDefinitionCharacteristic._fts_participantEffectiveIsChoice = true;
/**
 * The ResearchElementDefinition resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
export class ResearchElementDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ResearchElementDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ResearchElementDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['shortTitle']) {
            this.shortTitle = new fhir.FhirString({ value: source.shortTitle });
        }
        if (source['_shortTitle']) {
            if (this.shortTitle) {
                this.shortTitle.addExtendedProperties(source._shortTitle);
            }
            else {
                this.shortTitle = new fhir.FhirString(source._shortTitle);
            }
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['_subtitle']) {
            if (this.subtitle) {
                this.subtitle.addExtendedProperties(source._subtitle);
            }
            else {
                this.subtitle = new fhir.FhirString(source._subtitle);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['comment']) {
            this.comment = source.comment.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.comment = [];
        }
        if (source['_comment']) {
            source._comment.forEach((x, i) => {
                if (this.comment.length >= i) {
                    if (x) {
                        this.comment[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.comment.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['usage']) {
            this.usage = new fhir.FhirString({ value: source.usage });
        }
        if (source['_usage']) {
            if (this.usage) {
                this.usage.addExtendedProperties(source._usage);
            }
            else {
                this.usage = new fhir.FhirString(source._usage);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['library']) {
            this.library = source.library.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.library = [];
        }
        if (source['_library']) {
            source._library.forEach((x, i) => {
                if (this.library.length >= i) {
                    if (x) {
                        this.library[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.library.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['variableType']) {
            this.variableType = new fhir.FhirCode({ value: source.variableType });
        }
        if (source['_variableType']) {
            if (this.variableType) {
                this.variableType.addExtendedProperties(source._variableType);
            }
            else {
                this.variableType = new fhir.FhirCode(source._variableType);
            }
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.ResearchElementDefinitionCharacteristic(x));
        }
        else {
            this.characteristic = [];
        }
    }
    /**
     * Required-bound Value Set for status (ResearchElementDefinition.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Required-bound Value Set for type (ResearchElementDefinition.type)
     */
    static get typeRequiredCodes() {
        return ResearchElementTypeCodes;
    }
    /**
     * Required-bound Value Set for variableType (ResearchElementDefinition.variableType)
     */
    static get variableTypeRequiredCodes() {
        return VariableTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ResearchElementDefinition" fhir: ResearchElementDefinition.resourceType:"ResearchElementDefinition"' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["shortTitle"]) {
            issues.push(...this.shortTitle.doModelValidation());
        }
        if (this["subtitle"]) {
            issues.push(...this.subtitle.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ResearchElementDefinition.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ResearchElementDefinition.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["comment"]) {
            this.comment.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["usage"]) {
            issues.push(...this.usage.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["approvalDate"]) {
            issues.push(...this.approvalDate.doModelValidation());
        }
        if (this["lastReviewDate"]) {
            issues.push(...this.lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            issues.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["library"]) {
            this.library.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<ResearchElementTypeCodeType> fhir: ResearchElementDefinition.type:code' });
        }
        if (this['type'] && (!Object.values(ResearchElementTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<ResearchElementTypeCodeType> fhir: ResearchElementDefinition.type:code Required binding to: ResearchElementType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this['variableType'] && (!Object.values(VariableTypeCodes).includes(this.variableType))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property variableType?:fhir.FhirCode<VariableTypeCodeType> fhir: ResearchElementDefinition.variableType:code Required binding to: VariableType' });
        }
        if (this["variableType"]) {
            issues.push(...this.variableType.doModelValidation());
        }
        if (!this['characteristic']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property characteristic:fhir.ResearchElementDefinitionCharacteristic[] fhir: ResearchElementDefinition.characteristic:characteristic' });
        }
        else if (!Array.isArray(this.characteristic)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property characteristic:fhir.ResearchElementDefinitionCharacteristic[] fhir: ResearchElementDefinition.characteristic:characteristic' });
        }
        else if (this.characteristic.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property characteristic:fhir.ResearchElementDefinitionCharacteristic[] fhir: ResearchElementDefinition.characteristic:characteristic' });
        }
        if (this["characteristic"]) {
            this.characteristic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchElementDefinition._fts_dataType = 'ResearchElementDefinition';
/**
 * Internal flag to properly serialize choice-type element ResearchElementDefinition.subject[x]
 */
ResearchElementDefinition._fts_subjectIsChoice = true;
//# sourceMappingURL=data:application/json;base64,