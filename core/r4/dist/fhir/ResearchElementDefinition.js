/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { UcumUnitsCodings } from '../fhirValueSets/UcumUnitsCodings.js';
import { GroupMeasureCodings } from '../fhirValueSets/GroupMeasureCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { ResearchElementTypeCodings } from '../fhirValueSets/ResearchElementTypeCodings.js';
import { VariableTypeCodings } from '../fhirValueSets/VariableTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirCanonical } from './FhirCanonical.js';
import { Expression } from './Expression.js';
import { DataRequirement } from './DataRequirement.js';
import { UsageContext } from './UsageContext.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Duration } from './Duration.js';
import { Timing } from './Timing.js';
import { FhirUri } from './FhirUri.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { FhirDate } from './FhirDate.js';
import { RelatedArtifact } from './RelatedArtifact.js';

// <auto-generated/>
/**
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
var ResearchElementDefinitionCharacteristic = /** @class */ (function (_super) {
    __extends(ResearchElementDefinitionCharacteristic, _super);
    /**
     * Default constructor for ResearchElementDefinitionCharacteristic - initializes any required elements to null if a value is not provided.
     */
    function ResearchElementDefinitionCharacteristic(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['definition']) {
            _this.definition = source.definition;
        }
        else if (source['definitionCodeableConcept']) {
            _this.definition = new CodeableConcept(source.definitionCodeableConcept);
        }
        else if (source['definitionCanonical']) {
            _this.definition = new FhirCanonical({ value: source.definitionCanonical });
        }
        else if (source['definitionExpression']) {
            _this.definition = new Expression(source.definitionExpression);
        }
        else if (source['definitionDataRequirement']) {
            _this.definition = new DataRequirement(source.definitionDataRequirement);
        }
        else {
            _this.definition = null;
        }
        if (source['usageContext']) {
            _this.usageContext = source.usageContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.usageContext = [];
        }
        if (source['exclude']) {
            _this.exclude = new FhirBoolean({ value: source.exclude });
        }
        if (source['unitOfMeasure']) {
            _this.unitOfMeasure = new CodeableConcept(source.unitOfMeasure);
        }
        if (source['studyEffectiveDescription']) {
            _this.studyEffectiveDescription = new FhirString({ value: source.studyEffectiveDescription });
        }
        if (source['studyEffective']) {
            _this.studyEffective = source.studyEffective;
        }
        else if (source['studyEffectiveDateTime']) {
            _this.studyEffective = new FhirDateTime({ value: source.studyEffectiveDateTime });
        }
        else if (source['studyEffectivePeriod']) {
            _this.studyEffective = new Period(source.studyEffectivePeriod);
        }
        else if (source['studyEffectiveDuration']) {
            _this.studyEffective = new Duration(source.studyEffectiveDuration);
        }
        else if (source['studyEffectiveTiming']) {
            _this.studyEffective = new Timing(source.studyEffectiveTiming);
        }
        if (source['studyEffectiveTimeFromStart']) {
            _this.studyEffectiveTimeFromStart = new Duration(source.studyEffectiveTimeFromStart);
        }
        if (source['studyEffectiveGroupMeasure']) {
            _this.studyEffectiveGroupMeasure = source.studyEffectiveGroupMeasure;
        }
        if (source['participantEffectiveDescription']) {
            _this.participantEffectiveDescription = new FhirString({ value: source.participantEffectiveDescription });
        }
        if (source['participantEffective']) {
            _this.participantEffective = source.participantEffective;
        }
        else if (source['participantEffectiveDateTime']) {
            _this.participantEffective = new FhirDateTime({ value: source.participantEffectiveDateTime });
        }
        else if (source['participantEffectivePeriod']) {
            _this.participantEffective = new Period(source.participantEffectivePeriod);
        }
        else if (source['participantEffectiveDuration']) {
            _this.participantEffective = new Duration(source.participantEffectiveDuration);
        }
        else if (source['participantEffectiveTiming']) {
            _this.participantEffective = new Timing(source.participantEffectiveTiming);
        }
        if (source['participantEffectiveTimeFromStart']) {
            _this.participantEffectiveTimeFromStart = new Duration(source.participantEffectiveTimeFromStart);
        }
        if (source['participantEffectiveGroupMeasure']) {
            _this.participantEffectiveGroupMeasure = source.participantEffectiveGroupMeasure;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for unitOfMeasure (ResearchElementDefinition.characteristic.unitOfMeasure)
     */
    ResearchElementDefinitionCharacteristic.unitOfMeasureRequiredCoding = function () {
        return UcumUnitsCodings;
    };
    /**
     * Required-bound Value Set for studyEffectiveGroupMeasure (ResearchElementDefinition.characteristic.studyEffectiveGroupMeasure)
     */
    ResearchElementDefinitionCharacteristic.studyEffectiveGroupMeasureRequiredCoding = function () {
        return GroupMeasureCodings;
    };
    /**
     * Required-bound Value Set for participantEffectiveGroupMeasure (ResearchElementDefinition.characteristic.participantEffectiveGroupMeasure)
     */
    ResearchElementDefinitionCharacteristic.participantEffectiveGroupMeasureRequiredCoding = function () {
        return GroupMeasureCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ResearchElementDefinitionCharacteristic.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['definition']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property definition: fhir: ResearchElementDefinition.characteristic.definition[x]:', }));
        }
        if (this["usageContext"]) {
            this.usageContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["exclude"]) {
            (_a = outcome.issue).push.apply(_a, this.exclude.doModelValidation().issue);
        }
        if (this["unitOfMeasure"]) {
            (_b = outcome.issue).push.apply(_b, this.unitOfMeasure.doModelValidation().issue);
        }
        if (this["studyEffectiveDescription"]) {
            (_c = outcome.issue).push.apply(_c, this.studyEffectiveDescription.doModelValidation().issue);
        }
        if (this["studyEffectiveTimeFromStart"]) {
            (_d = outcome.issue).push.apply(_d, this.studyEffectiveTimeFromStart.doModelValidation().issue);
        }
        if (this["participantEffectiveDescription"]) {
            (_e = outcome.issue).push.apply(_e, this.participantEffectiveDescription.doModelValidation().issue);
        }
        if (this["participantEffectiveTimeFromStart"]) {
            (_f = outcome.issue).push.apply(_f, this.participantEffectiveTimeFromStart.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ResearchElementDefinitionCharacteristic._fts_dataType = 'ResearchElementDefinitionCharacteristic';
    /**
     * Internal flag to properly serialize choice-type element ResearchElementDefinition.characteristic.definition[x]
     */
    ResearchElementDefinitionCharacteristic._fts_definitionIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ResearchElementDefinition.characteristic.studyEffective[x]
     */
    ResearchElementDefinitionCharacteristic._fts_studyEffectiveIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ResearchElementDefinition.characteristic.participantEffective[x]
     */
    ResearchElementDefinitionCharacteristic._fts_participantEffectiveIsChoice = true;
    return ResearchElementDefinitionCharacteristic;
}(BackboneElement));
/**
 * The ResearchElementDefinition resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
var ResearchElementDefinition = /** @class */ (function (_super) {
    __extends(ResearchElementDefinition, _super);
    /**
     * Default constructor for ResearchElementDefinition - initializes any required elements to null if a value is not provided.
     */
    function ResearchElementDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ResearchElementDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['shortTitle']) {
            _this.shortTitle = new FhirString({ value: source.shortTitle });
        }
        if (source['subtitle']) {
            _this.subtitle = new FhirString({ value: source.subtitle });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['subject']) {
            _this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            _this.subject = new CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            _this.subject = new Reference(source.subjectReference);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['comment']) {
            _this.comment = source.comment.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.comment = [];
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['usage']) {
            _this.usage = new FhirString({ value: source.usage });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            _this.approvalDate = new FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            _this.lastReviewDate = new FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            _this.effectivePeriod = new Period(source.effectivePeriod);
        }
        if (source['topic']) {
            _this.topic = source.topic.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.topic = [];
        }
        if (source['author']) {
            _this.author = source.author.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.author = [];
        }
        if (source['editor']) {
            _this.editor = source.editor.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.editor = [];
        }
        if (source['reviewer']) {
            _this.reviewer = source.reviewer.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.reviewer = [];
        }
        if (source['endorser']) {
            _this.endorser = source.endorser.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.endorser = [];
        }
        if (source['relatedArtifact']) {
            _this.relatedArtifact = source.relatedArtifact.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.relatedArtifact = [];
        }
        if (source['library']) {
            _this.library = source.library.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.library = [];
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['variableType']) {
            _this.variableType = source.variableType;
        }
        if (source['characteristic']) {
            _this.characteristic = source.characteristic.map(function (x) { return new ResearchElementDefinitionCharacteristic(x); });
        }
        else {
            _this.characteristic = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ResearchElementDefinition.status)
     */
    ResearchElementDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for type (ResearchElementDefinition.type)
     */
    ResearchElementDefinition.typeRequiredCoding = function () {
        return ResearchElementTypeCodings;
    };
    /**
     * Required-bound Value Set for variableType (ResearchElementDefinition.variableType)
     */
    ResearchElementDefinition.variableTypeRequiredCoding = function () {
        return VariableTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ResearchElementDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ResearchElementDefinition" fhir: ResearchElementDefinition.resourceType:"ResearchElementDefinition"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (this["shortTitle"]) {
            (_e = outcome.issue).push.apply(_e, this.shortTitle.doModelValidation().issue);
        }
        if (this["subtitle"]) {
            (_f = outcome.issue).push.apply(_f, this.subtitle.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: ResearchElementDefinition.status:code', }));
        }
        if (this["experimental"]) {
            (_g = outcome.issue).push.apply(_g, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_h = outcome.issue).push.apply(_h, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_j = outcome.issue).push.apply(_j, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_k = outcome.issue).push.apply(_k, this.description.doModelValidation().issue);
        }
        if (this["comment"]) {
            this.comment.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_l = outcome.issue).push.apply(_l, this.purpose.doModelValidation().issue);
        }
        if (this["usage"]) {
            (_m = outcome.issue).push.apply(_m, this.usage.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_o = outcome.issue).push.apply(_o, this.copyright.doModelValidation().issue);
        }
        if (this["approvalDate"]) {
            (_p = outcome.issue).push.apply(_p, this.approvalDate.doModelValidation().issue);
        }
        if (this["lastReviewDate"]) {
            (_q = outcome.issue).push.apply(_q, this.lastReviewDate.doModelValidation().issue);
        }
        if (this["effectivePeriod"]) {
            (_r = outcome.issue).push.apply(_r, this.effectivePeriod.doModelValidation().issue);
        }
        if (this["topic"]) {
            this.topic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["author"]) {
            this.author.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["editor"]) {
            this.editor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["endorser"]) {
            this.endorser.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["library"]) {
            this.library.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:ResearchElementTypeCodeType fhir: ResearchElementDefinition.type:code', }));
        }
        if (!this['characteristic']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property characteristic:fhir.ResearchElementDefinitionCharacteristic[] fhir: ResearchElementDefinition.characteristic:characteristic', }));
        }
        else if (!Array.isArray(this.characteristic)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property characteristic:fhir.ResearchElementDefinitionCharacteristic[] fhir: ResearchElementDefinition.characteristic:characteristic', }));
        }
        else if (this.characteristic.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property characteristic:fhir.ResearchElementDefinitionCharacteristic[] fhir: ResearchElementDefinition.characteristic:characteristic', }));
        }
        if (this["characteristic"]) {
            this.characteristic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ResearchElementDefinition._fts_dataType = 'ResearchElementDefinition';
    /**
     * Internal flag to properly serialize choice-type element ResearchElementDefinition.subject[x]
     */
    ResearchElementDefinition._fts_subjectIsChoice = true;
    return ResearchElementDefinition;
}(DomainResource));

export { ResearchElementDefinition, ResearchElementDefinitionCharacteristic };
//# sourceMappingURL=ResearchElementDefinition.js.map
