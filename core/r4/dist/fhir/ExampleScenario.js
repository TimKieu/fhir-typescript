// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExampleScenario
import * as fhir from '../fhir.js';
// @ts-ignore
import { ExamplescenarioActorTypeCodings, } from '../fhirValueSets/ExamplescenarioActorTypeCodings.js';
// @ts-ignore
import { ResourceTypesCodings, } from '../fhirValueSets/ResourceTypesCodings.js';
// @ts-ignore
import { PublicationStatusCodings, } from '../fhirValueSets/PublicationStatusCodings.js';
/**
 * Actor participating in the resource.
 */
export class ExampleScenarioActor extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actorId']) {
            this.actorId = new fhir.FhirString({ value: source.actorId });
        }
        else {
            this.actorId = null;
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
    }
    /**
     * Required-bound Value Set for type (ExampleScenario.actor.type)
     */
    static typeRequiredCoding() {
        return ExamplescenarioActorTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['actorId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actorId:fhir.FhirString fhir: ExampleScenario.actor.actorId:string', });
        }
        if (this["actorId"]) {
            issues.push(...this.actorId.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:ExamplescenarioActorTypeCodeType fhir: ExampleScenario.actor.type:code', });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioActor._fts_dataType = 'ExampleScenarioActor';
/**
 * A specific version of the resource.
 */
export class ExampleScenarioInstanceVersion extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['versionId']) {
            this.versionId = new fhir.FhirString({ value: source.versionId });
        }
        else {
            this.versionId = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        else {
            this.description = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['versionId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property versionId:fhir.FhirString fhir: ExampleScenario.instance.version.versionId:string', });
        }
        if (this["versionId"]) {
            issues.push(...this.versionId.doModelValidation());
        }
        if (!this['description']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description:fhir.FhirMarkdown fhir: ExampleScenario.instance.version.description:markdown', });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioInstanceVersion._fts_dataType = 'ExampleScenarioInstanceVersion';
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export class ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceContainedInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['resourceId']) {
            this.resourceId = new fhir.FhirString({ value: source.resourceId });
        }
        else {
            this.resourceId = null;
        }
        if (source['versionId']) {
            this.versionId = new fhir.FhirString({ value: source.versionId });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceId:fhir.FhirString fhir: ExampleScenario.instance.containedInstance.resourceId:string', });
        }
        if (this["resourceId"]) {
            issues.push(...this.resourceId.doModelValidation());
        }
        if (this["versionId"]) {
            issues.push(...this.versionId.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioInstanceContainedInstance._fts_dataType = 'ExampleScenarioInstanceContainedInstance';
/**
 * Each resource and each version that is present in the workflow.
 */
export class ExampleScenarioInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['resourceId']) {
            this.resourceId = new fhir.FhirString({ value: source.resourceId });
        }
        else {
            this.resourceId = null;
        }
        if (source['resourceType']) {
            this.resourceType = new fhir.FhirCode({ value: source.resourceType });
        }
        else {
            this.resourceType = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.ExampleScenarioInstanceVersion(x));
        }
        else {
            this.version = [];
        }
        if (source['containedInstance']) {
            this.containedInstance = source.containedInstance.map((x) => new fhir.ExampleScenarioInstanceContainedInstance(x));
        }
        else {
            this.containedInstance = [];
        }
    }
    /**
     * Required-bound Value Set for resourceType (ExampleScenario.instance.resourceType)
     */
    static resourceTypeRequiredCoding() {
        return ResourceTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceId:fhir.FhirString fhir: ExampleScenario.instance.resourceId:string', });
        }
        if (this["resourceId"]) {
            issues.push(...this.resourceId.doModelValidation());
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:fhir.FhirCode fhir: ExampleScenario.instance.resourceType:code', });
        }
        if (this["resourceType"]) {
            issues.push(...this.resourceType.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["version"]) {
            this.version.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["containedInstance"]) {
            this.containedInstance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioInstance._fts_dataType = 'ExampleScenarioInstance';
/**
 * Each interaction or action.
 */
export class ExampleScenarioProcessStepOperation extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number']) {
            this.number = new fhir.FhirString({ value: source.number });
        }
        else {
            this.number = null;
        }
        if (source['type']) {
            this.type = new fhir.FhirString({ value: source.type });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['initiator']) {
            this.initiator = new fhir.FhirString({ value: source.initiator });
        }
        if (source['receiver']) {
            this.receiver = new fhir.FhirString({ value: source.receiver });
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['initiatorActive']) {
            this.initiatorActive = new fhir.FhirBoolean({ value: source.initiatorActive });
        }
        if (source['receiverActive']) {
            this.receiverActive = new fhir.FhirBoolean({ value: source.receiverActive });
        }
        if (source['request']) {
            this.request = new fhir.ExampleScenarioInstanceContainedInstance(source.request);
        }
        if (source['response']) {
            this.response = new fhir.ExampleScenarioInstanceContainedInstance(source.response);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['number']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property number:fhir.FhirString fhir: ExampleScenario.process.step.operation.number:string', });
        }
        if (this["number"]) {
            issues.push(...this.number.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["initiator"]) {
            issues.push(...this.initiator.doModelValidation());
        }
        if (this["receiver"]) {
            issues.push(...this.receiver.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["initiatorActive"]) {
            issues.push(...this.initiatorActive.doModelValidation());
        }
        if (this["receiverActive"]) {
            issues.push(...this.receiverActive.doModelValidation());
        }
        if (this["request"]) {
            issues.push(...this.request.doModelValidation());
        }
        if (this["response"]) {
            issues.push(...this.response.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcessStepOperation._fts_dataType = 'ExampleScenarioProcessStepOperation';
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export class ExampleScenarioProcessStepAlternative extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepAlternative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
        else {
            this.step = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['title']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property title:fhir.FhirString fhir: ExampleScenario.process.step.alternative.title:string', });
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["step"]) {
            this.step.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcessStepAlternative._fts_dataType = 'ExampleScenarioProcessStepAlternative';
/**
 * Each step of the process.
 */
export class ExampleScenarioProcessStep extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStep - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
        else {
            this.process = [];
        }
        if (source['pause']) {
            this.pause = new fhir.FhirBoolean({ value: source.pause });
        }
        if (source['operation']) {
            this.operation = new fhir.ExampleScenarioProcessStepOperation(source.operation);
        }
        if (source['alternative']) {
            this.alternative = source.alternative.map((x) => new fhir.ExampleScenarioProcessStepAlternative(x));
        }
        else {
            this.alternative = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["process"]) {
            this.process.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["pause"]) {
            issues.push(...this.pause.doModelValidation());
        }
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation());
        }
        if (this["alternative"]) {
            this.alternative.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcessStep._fts_dataType = 'ExampleScenarioProcessStep';
/**
 * Each major process - a group of operations.
 */
export class ExampleScenarioProcess extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcess - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['preConditions']) {
            this.preConditions = new fhir.FhirMarkdown({ value: source.preConditions });
        }
        if (source['postConditions']) {
            this.postConditions = new fhir.FhirMarkdown({ value: source.postConditions });
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x));
        }
        else {
            this.step = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['title']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property title:fhir.FhirString fhir: ExampleScenario.process.title:string', });
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["preConditions"]) {
            issues.push(...this.preConditions.doModelValidation());
        }
        if (this["postConditions"]) {
            issues.push(...this.postConditions.doModelValidation());
        }
        if (this["step"]) {
            this.step.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcess._fts_dataType = 'ExampleScenarioProcess';
/**
 * Example of workflow instance.
 */
export class ExampleScenario extends fhir.DomainResource {
    /**
     * Default constructor for ExampleScenario - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ExampleScenario';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ExampleScenarioActor(x));
        }
        else {
            this.actor = [];
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ExampleScenarioInstance(x));
        }
        else {
            this.instance = [];
        }
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x));
        }
        else {
            this.process = [];
        }
        if (source['workflow']) {
            this.workflow = source.workflow.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.workflow = [];
        }
    }
    /**
     * Required-bound Value Set for status (ExampleScenario.status)
     */
    static statusRequiredCoding() {
        return PublicationStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ExampleScenario" fhir: ExampleScenario.resourceType:"ExampleScenario"', });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: ExampleScenario.status:code', });
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["actor"]) {
            this.actor.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instance"]) {
            this.instance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["process"]) {
            this.process.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["workflow"]) {
            this.workflow.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenario._fts_dataType = 'ExampleScenario';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhhbXBsZVNjZW5hcmlvLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9FeGFtcGxlU2NlbmFyaW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBRWpDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBRW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsK0JBQStCLEdBQXNDLE1BQU0scURBQXFELENBQUM7QUFHMUksYUFBYTtBQUNiLE9BQU8sRUFBRSxvQkFBb0IsR0FBMkIsTUFBTSwwQ0FBMEMsQ0FBQztBQUd6RyxhQUFhO0FBQ2IsT0FBTyxFQUFFLHdCQUF3QixHQUErQixNQUFNLDhDQUE4QyxDQUFDO0FBeUJySDs7R0FFRztBQUNILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxJQUFJLENBQUMsZUFBZTtJQXFCNUQ7O09BRUc7SUFDSCxZQUFZLFNBQTJDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ2pHLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ2xGO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FBRTtRQUM3QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztTQUFFO2FBQzNDO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcs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QUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDNUYsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ2xHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUNoRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDbEcsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUFqSkQ7O0dBRUc7QUFDNkIsNkJBQWEsR0FBVSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogRXhhbXBsZVNjZW5hcmlvXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFeGFtcGxlc2NlbmFyaW9BY3RvclR5cGVDb2RpbmdzLCBFeGFtcGxlc2NlbmFyaW9BY3RvclR5cGVDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FeGFtcGxlc2NlbmFyaW9BY3RvclR5cGVDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFeGFtcGxlc2NlbmFyaW9BY3RvclR5cGVDb2RlcywgIEV4YW1wbGVzY2VuYXJpb0FjdG9yVHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FeGFtcGxlc2NlbmFyaW9BY3RvclR5cGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVzb3VyY2VUeXBlc0NvZGluZ3MsIFJlc291cmNlVHlwZXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9SZXNvdXJjZVR5cGVzQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVzb3VyY2VUeXBlc0NvZGVzLCAgUmVzb3VyY2VUeXBlc0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9SZXNvdXJjZVR5cGVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kaW5ncywgUHVibGljYXRpb25TdGF0dXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kZXMsICBQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEV4YW1wbGVTY2VuYXJpb0FjdG9yIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEV4YW1wbGVTY2VuYXJpb0FjdG9yQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogc2hvdWxkIHRoaXMgYmUgY2FsbGVkIElEIG9yIGFjcm9ueW0/XHJcbiAgICovXHJcbiAgYWN0b3JJZDogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgYWN0b3IgLSBwZXJzb24gb3Igc3lzdGVtLlxyXG4gICAqL1xyXG4gIHR5cGU6IEV4YW1wbGVzY2VuYXJpb0FjdG9yVHlwZUNvZGVUeXBlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQ2FyZGluYWxpdHk6IGlzIG5hbWUgYW5kIGRlc2NyaXB0aW9uIDEuLjE/XHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENhcmRpbmFsaXR5OiBpcyBuYW1lIGFuZCBkZXNjcmlwdGlvbiAxLi4xP1xyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdG9yIHBhcnRpY2lwYXRpbmcgaW4gdGhlIHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4YW1wbGVTY2VuYXJpb0FjdG9yIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRXhhbXBsZVNjZW5hcmlvQWN0b3InO1xyXG4gIC8qKlxyXG4gICAqIHNob3VsZCB0aGlzIGJlIGNhbGxlZCBJRCBvciBhY3JvbnltP1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhY3RvcklkOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBhY3RvciAtIHBlcnNvbiBvciBzeXN0ZW0uXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IEV4YW1wbGVzY2VuYXJpb0FjdG9yVHlwZUNvZGVUeXBlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQ2FyZGluYWxpdHk6IGlzIG5hbWUgYW5kIGRlc2NyaXB0aW9uIDEuLjE/XHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENhcmRpbmFsaXR5OiBpcyBuYW1lIGFuZCBkZXNjcmlwdGlvbiAxLi4xP1xyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBFeGFtcGxlU2NlbmFyaW9BY3RvciAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEV4YW1wbGVTY2VuYXJpb0FjdG9yQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2FjdG9ySWQnXSkgeyB0aGlzLmFjdG9ySWQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmFjdG9ySWR9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWN0b3JJZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciB0eXBlIChFeGFtcGxlU2NlbmFyaW8uYWN0b3IudHlwZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHR5cGVSZXF1aXJlZENvZGluZygpOkV4YW1wbGVzY2VuYXJpb0FjdG9yVHlwZUNvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIEV4YW1wbGVzY2VuYXJpb0FjdG9yVHlwZUNvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ2FjdG9ySWQnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCAgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGFjdG9ySWQ6Zmhpci5GaGlyU3RyaW5nIGZoaXI6IEV4YW1wbGVTY2VuYXJpby5hY3Rvci5hY3RvcklkOnN0cmluZycsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJhY3RvcklkXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuYWN0b3JJZC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWyd0eXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0eXBlOkV4YW1wbGVzY2VuYXJpb0FjdG9yVHlwZUNvZGVUeXBlIGZoaXI6IEV4YW1wbGVTY2VuYXJpby5hY3Rvci50eXBlOmNvZGUnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wibmFtZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm5hbWUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGVzY3JpcHRpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kZXNjcmlwdGlvbi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEV4YW1wbGVTY2VuYXJpb0luc3RhbmNlVmVyc2lvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFeGFtcGxlU2NlbmFyaW9JbnN0YW5jZVZlcnNpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgaWRlbnRpZmllciBvZiBhIHNwZWNpZmljIHZlcnNpb24gb2YgYSByZXNvdXJjZS5cclxuICAgKi9cclxuICB2ZXJzaW9uSWQ6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcmVzb3VyY2UgdmVyc2lvbi5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbjogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VWZXJzaW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VWZXJzaW9uJztcclxuICAvKipcclxuICAgKiBUaGUgaWRlbnRpZmllciBvZiBhIHNwZWNpZmljIHZlcnNpb24gb2YgYSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbklkOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHJlc291cmNlIHZlcnNpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uOiBmaGlyLkZoaXJNYXJrZG93bnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEV4YW1wbGVTY2VuYXJpb0luc3RhbmNlVmVyc2lvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEV4YW1wbGVTY2VuYXJpb0luc3RhbmNlVmVyc2lvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd2ZXJzaW9uSWQnXSkgeyB0aGlzLnZlcnNpb25JZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbklkfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnZlcnNpb25JZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG51bGw7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sndmVyc2lvbklkJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB2ZXJzaW9uSWQ6Zmhpci5GaGlyU3RyaW5nIGZoaXI6IEV4YW1wbGVTY2VuYXJpby5pbnN0YW5jZS52ZXJzaW9uLnZlcnNpb25JZDpzdHJpbmcnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widmVyc2lvbklkXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudmVyc2lvbklkLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ2Rlc2NyaXB0aW9uJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBkZXNjcmlwdGlvbjpmaGlyLkZoaXJNYXJrZG93biBmaGlyOiBFeGFtcGxlU2NlbmFyaW8uaW5zdGFuY2UudmVyc2lvbi5kZXNjcmlwdGlvbjptYXJrZG93bicsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNjcmlwdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRlc2NyaXB0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VDb250YWluZWRJbnN0YW5jZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFeGFtcGxlU2NlbmFyaW9JbnN0YW5jZUNvbnRhaW5lZEluc3RhbmNlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogRWFjaCByZXNvdXJjZSBjb250YWluZWQgaW4gdGhlIGluc3RhbmNlLlxyXG4gICAqL1xyXG4gIHJlc291cmNlSWQ6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc3BlY2lmaWMgdmVyc2lvbiBvZiBhIHJlc291cmNlIGNvbnRhaW5lZCBpbiB0aGUgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgdmVyc2lvbklkPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNvdXJjZXMgY29udGFpbmVkIGluIHRoZSBpbnN0YW5jZSAoZS5nLiB0aGUgb2JzZXJ2YXRpb25zIGNvbnRhaW5lZCBpbiBhIGJ1bmRsZSkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VDb250YWluZWRJbnN0YW5jZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0V4YW1wbGVTY2VuYXJpb0luc3RhbmNlQ29udGFpbmVkSW5zdGFuY2UnO1xyXG4gIC8qKlxyXG4gICAqIEVhY2ggcmVzb3VyY2UgY29udGFpbmVkIGluIHRoZSBpbnN0YW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzb3VyY2VJZDogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQSBzcGVjaWZpYyB2ZXJzaW9uIG9mIGEgcmVzb3VyY2UgY29udGFpbmVkIGluIHRoZSBpbnN0YW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbklkPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBFeGFtcGxlU2NlbmFyaW9JbnN0YW5jZUNvbnRhaW5lZEluc3RhbmNlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VDb250YWluZWRJbnN0YW5jZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyZXNvdXJjZUlkJ10pIHsgdGhpcy5yZXNvdXJjZUlkID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5yZXNvdXJjZUlkfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlc291cmNlSWQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWyd2ZXJzaW9uSWQnXSkgeyB0aGlzLnZlcnNpb25JZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbklkfSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VJZCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcmVzb3VyY2VJZDpmaGlyLkZoaXJTdHJpbmcgZmhpcjogRXhhbXBsZVNjZW5hcmlvLmluc3RhbmNlLmNvbnRhaW5lZEluc3RhbmNlLnJlc291cmNlSWQ6c3RyaW5nJywgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInJlc291cmNlSWRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5yZXNvdXJjZUlkLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInZlcnNpb25JZFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnZlcnNpb25JZC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEV4YW1wbGVTY2VuYXJpb0luc3RhbmNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEV4YW1wbGVTY2VuYXJpb0luc3RhbmNlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGlkIG9mIHRoZSByZXNvdXJjZSBmb3IgcmVmZXJlbmNpbmcuXHJcbiAgICovXHJcbiAgcmVzb3VyY2VJZDogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc2hvcnQgbmFtZSBmb3IgdGhlIHJlc291cmNlIGluc3RhbmNlLlxyXG4gICAqL1xyXG4gIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBIdW1hbi1mcmllbmRseSBkZXNjcmlwdGlvbiBvZiB0aGUgcmVzb3VyY2UgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgdmVyc2lvbj86IGZoaXIuRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VWZXJzaW9uQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZXMgY29udGFpbmVkIGluIHRoZSBpbnN0YW5jZSAoZS5nLiB0aGUgb2JzZXJ2YXRpb25zIGNvbnRhaW5lZCBpbiBhIGJ1bmRsZSkuXHJcbiAgICovXHJcbiAgY29udGFpbmVkSW5zdGFuY2U/OiBmaGlyLkV4YW1wbGVTY2VuYXJpb0luc3RhbmNlQ29udGFpbmVkSW5zdGFuY2VBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogRWFjaCByZXNvdXJjZSBhbmQgZWFjaCB2ZXJzaW9uIHRoYXQgaXMgcHJlc2VudCBpbiB0aGUgd29ya2Zsb3cuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2UgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdFeGFtcGxlU2NlbmFyaW9JbnN0YW5jZSc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGlkIG9mIHRoZSByZXNvdXJjZSBmb3IgcmVmZXJlbmNpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc291cmNlSWQ6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzb3VyY2VUeXBlOiBmaGlyLkZoaXJDb2RlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQSBzaG9ydCBuYW1lIGZvciB0aGUgcmVzb3VyY2UgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEh1bWFuLWZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSByZXNvdXJjZSBpbnN0YW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VWZXJzaW9uW107XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2VzIGNvbnRhaW5lZCBpbiB0aGUgaW5zdGFuY2UgKGUuZy4gdGhlIG9ic2VydmF0aW9ucyBjb250YWluZWQgaW4gYSBidW5kbGUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250YWluZWRJbnN0YW5jZT86IGZoaXIuRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VDb250YWluZWRJbnN0YW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEV4YW1wbGVTY2VuYXJpb0luc3RhbmNlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncmVzb3VyY2VJZCddKSB7IHRoaXMucmVzb3VyY2VJZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucmVzb3VyY2VJZH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZXNvdXJjZUlkID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzb3VyY2VUeXBlJ10pIHsgdGhpcy5yZXNvdXJjZVR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZSh7dmFsdWU6IHNvdXJjZS5yZXNvdXJjZVR5cGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVzb3VyY2VUeXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXNjcmlwdGlvbiddKSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UuZGVzY3JpcHRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndmVyc2lvbiddKSB7IHRoaXMudmVyc2lvbiA9IHNvdXJjZS52ZXJzaW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VWZXJzaW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudmVyc2lvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjb250YWluZWRJbnN0YW5jZSddKSB7IHRoaXMuY29udGFpbmVkSW5zdGFuY2UgPSBzb3VyY2UuY29udGFpbmVkSW5zdGFuY2UubWFwKCh4KSA9PiBuZXcgZmhpci5FeGFtcGxlU2NlbmFyaW9JbnN0YW5jZUNvbnRhaW5lZEluc3RhbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY29udGFpbmVkSW5zdGFuY2UgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXF1aXJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIHJlc291cmNlVHlwZSAoRXhhbXBsZVNjZW5hcmlvLmluc3RhbmNlLnJlc291cmNlVHlwZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHJlc291cmNlVHlwZVJlcXVpcmVkQ29kaW5nKCk6UmVzb3VyY2VUeXBlc0NvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIFJlc291cmNlVHlwZXNDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydyZXNvdXJjZUlkJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZUlkOmZoaXIuRmhpclN0cmluZyBmaGlyOiBFeGFtcGxlU2NlbmFyaW8uaW5zdGFuY2UucmVzb3VyY2VJZDpzdHJpbmcnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wicmVzb3VyY2VJZFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnJlc291cmNlSWQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VUeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZVR5cGU6Zmhpci5GaGlyQ29kZSBmaGlyOiBFeGFtcGxlU2NlbmFyaW8uaW5zdGFuY2UucmVzb3VyY2VUeXBlOmNvZGUnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wicmVzb3VyY2VUeXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucmVzb3VyY2VUeXBlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcIm5hbWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5uYW1lLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImRlc2NyaXB0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGVzY3JpcHRpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1widmVyc2lvblwiXSkgeyB0aGlzLnZlcnNpb24uZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRhaW5lZEluc3RhbmNlXCJdKSB7IHRoaXMuY29udGFpbmVkSW5zdGFuY2UuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBPcGVyYXRpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBPcGVyYXRpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgc2VxdWVudGlhbCBudW1iZXIgb2YgdGhlIGludGVyYWN0aW9uLCBlLmcuIDEuMi41LlxyXG4gICAqL1xyXG4gIG51bWJlcjogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2Ygb3BlcmF0aW9uIC0gQ1JVRC5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGh1bWFuLWZyaWVuZGx5IG5hbWUgb2YgdGhlIGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaG8gc3RhcnRzIHRoZSB0cmFuc2FjdGlvbi5cclxuICAgKi9cclxuICBpbml0aWF0b3I/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaG8gcmVjZWl2ZXMgdGhlIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIHJlY2VpdmVyPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb21tZW50IHRvIGJlIGluc2VydGVkIGluIHRoZSBkaWFncmFtLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBpbml0aWF0b3IgaXMgZGVhY3RpdmF0ZWQgcmlnaHQgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIGluaXRpYXRvckFjdGl2ZT86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgcmVjZWl2ZXIgaXMgZGVhY3RpdmF0ZWQgcmlnaHQgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIHJlY2VpdmVyQWN0aXZlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFYWNoIHJlc291cmNlIGluc3RhbmNlIHVzZWQgYnkgdGhlIGluaXRpYXRvci5cclxuICAgKi9cclxuICByZXF1ZXN0PzogZmhpci5FeGFtcGxlU2NlbmFyaW9JbnN0YW5jZUNvbnRhaW5lZEluc3RhbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRWFjaCByZXNvdXJjZSBpbnN0YW5jZSB1c2VkIGJ5IHRoZSByZXNwb25kZXIuXHJcbiAgICovXHJcbiAgcmVzcG9uc2U/OiBmaGlyLkV4YW1wbGVTY2VuYXJpb0luc3RhbmNlQ29udGFpbmVkSW5zdGFuY2VBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEVhY2ggaW50ZXJhY3Rpb24gb3IgYWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwT3BlcmF0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBPcGVyYXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZXF1ZW50aWFsIG51bWJlciBvZiB0aGUgaW50ZXJhY3Rpb24sIGUuZy4gMS4yLjUuXHJcbiAgICovXHJcbiAgcHVibGljIG51bWJlcjogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2Ygb3BlcmF0aW9uIC0gQ1JVRC5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGh1bWFuLWZyaWVuZGx5IG5hbWUgb2YgdGhlIGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaG8gc3RhcnRzIHRoZSB0cmFuc2FjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgaW5pdGlhdG9yPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaG8gcmVjZWl2ZXMgdGhlIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWNlaXZlcj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb21tZW50IHRvIGJlIGluc2VydGVkIGluIHRoZSBkaWFncmFtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBpbml0aWF0b3IgaXMgZGVhY3RpdmF0ZWQgcmlnaHQgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWF0b3JBY3RpdmU/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSByZWNlaXZlciBpcyBkZWFjdGl2YXRlZCByaWdodCBhZnRlciB0aGUgdHJhbnNhY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHJlY2VpdmVyQWN0aXZlPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRWFjaCByZXNvdXJjZSBpbnN0YW5jZSB1c2VkIGJ5IHRoZSBpbml0aWF0b3IuXHJcbiAgICovXHJcbiAgcHVibGljIHJlcXVlc3Q/OiBmaGlyLkV4YW1wbGVTY2VuYXJpb0luc3RhbmNlQ29udGFpbmVkSW5zdGFuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEVhY2ggcmVzb3VyY2UgaW5zdGFuY2UgdXNlZCBieSB0aGUgcmVzcG9uZGVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNwb25zZT86IGZoaXIuRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VDb250YWluZWRJbnN0YW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBPcGVyYXRpb24gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxFeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcE9wZXJhdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydudW1iZXInXSkgeyB0aGlzLm51bWJlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubnVtYmVyfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm51bWJlciA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnR5cGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydpbml0aWF0b3InXSkgeyB0aGlzLmluaXRpYXRvciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuaW5pdGlhdG9yfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlY2VpdmVyJ10pIHsgdGhpcy5yZWNlaXZlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucmVjZWl2ZXJ9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2luaXRpYXRvckFjdGl2ZSddKSB7IHRoaXMuaW5pdGlhdG9yQWN0aXZlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuaW5pdGlhdG9yQWN0aXZlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlY2VpdmVyQWN0aXZlJ10pIHsgdGhpcy5yZWNlaXZlckFjdGl2ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLnJlY2VpdmVyQWN0aXZlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcXVlc3QnXSkgeyB0aGlzLnJlcXVlc3QgPSBuZXcgZmhpci5FeGFtcGxlU2NlbmFyaW9JbnN0YW5jZUNvbnRhaW5lZEluc3RhbmNlKHNvdXJjZS5yZXF1ZXN0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzcG9uc2UnXSkgeyB0aGlzLnJlc3BvbnNlID0gbmV3IGZoaXIuRXhhbXBsZVNjZW5hcmlvSW5zdGFuY2VDb250YWluZWRJbnN0YW5jZShzb3VyY2UucmVzcG9uc2UpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ251bWJlciddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgbnVtYmVyOmZoaXIuRmhpclN0cmluZyBmaGlyOiBFeGFtcGxlU2NlbmFyaW8ucHJvY2Vzcy5zdGVwLm9wZXJhdGlvbi5udW1iZXI6c3RyaW5nJywgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcIm51bWJlclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm51bWJlci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJuYW1lXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubmFtZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJpbml0aWF0b3JcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5pbml0aWF0b3IuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicmVjZWl2ZXJcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5yZWNlaXZlci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNjcmlwdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRlc2NyaXB0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImluaXRpYXRvckFjdGl2ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmluaXRpYXRvckFjdGl2ZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJyZWNlaXZlckFjdGl2ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnJlY2VpdmVyQWN0aXZlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInJlcXVlc3RcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5yZXF1ZXN0LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInJlc3BvbnNlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucmVzcG9uc2UuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBFeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcEFsdGVybmF0aXZlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwQWx0ZXJuYXRpdmVBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgbGFiZWwgdG8gZGlzcGxheSBmb3IgdGhlIGFsdGVybmF0aXZlIHRoYXQgZ2l2ZXMgYSBzZW5zZSBvZiB0aGUgY2lyY3Vtc3RhbmNlIGluIHdoaWNoIHRoZSBhbHRlcm5hdGl2ZSBzaG91bGQgYmUgaW52b2tlZC5cclxuICAgKi9cclxuICB0aXRsZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgYWx0ZXJuYXRpdmUgZXhwbGFpbmluZyB3aGVuIHRoZSBhbHRlcm5hdGl2ZSBzaG91bGQgb2NjdXIgcmF0aGVyIHRoYW4gdGhlIGJhc2Ugc3RlcC5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hhdCBoYXBwZW5zIGluIGVhY2ggYWx0ZXJuYXRpdmUgb3B0aW9uLlxyXG4gICAqL1xyXG4gIHN0ZXA/OiBmaGlyLkV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyBhbiBhbHRlcm5hdGl2ZSBzdGVwIHRoYXQgY2FuIGJlIHRha2VuIGluc3RlYWQgb2YgdGhlIG9wZXJhdGlvbnMgb24gdGhlIGJhc2Ugc3RlcCBpbiBleGNlcHRpb25hbC9hdHlwaWNhbCBjaXJjdW1zdGFuY2VzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwQWx0ZXJuYXRpdmUgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdFeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcEFsdGVybmF0aXZlJztcclxuICAvKipcclxuICAgKiBUaGUgbGFiZWwgdG8gZGlzcGxheSBmb3IgdGhlIGFsdGVybmF0aXZlIHRoYXQgZ2l2ZXMgYSBzZW5zZSBvZiB0aGUgY2lyY3Vtc3RhbmNlIGluIHdoaWNoIHRoZSBhbHRlcm5hdGl2ZSBzaG91bGQgYmUgaW52b2tlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdGl0bGU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGFsdGVybmF0aXZlIGV4cGxhaW5pbmcgd2hlbiB0aGUgYWx0ZXJuYXRpdmUgc2hvdWxkIG9jY3VyIHJhdGhlciB0aGFuIHRoZSBiYXNlIHN0ZXAuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoYXQgaGFwcGVucyBpbiBlYWNoIGFsdGVybmF0aXZlIG9wdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc3RlcD86IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBFeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcEFsdGVybmF0aXZlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBBbHRlcm5hdGl2ZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0aXRsZSddKSB7IHRoaXMudGl0bGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnRpdGxlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRpdGxlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0ZXAnXSkgeyB0aGlzLnN0ZXAgPSBzb3VyY2Uuc3RlcC5tYXAoKHgpID0+IG5ldyBmaGlyLkV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RlcCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ3RpdGxlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0aXRsZTpmaGlyLkZoaXJTdHJpbmcgZmhpcjogRXhhbXBsZVNjZW5hcmlvLnByb2Nlc3Muc3RlcC5hbHRlcm5hdGl2ZS50aXRsZTpzdHJpbmcnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widGl0bGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50aXRsZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNjcmlwdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRlc2NyaXB0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInN0ZXBcIl0pIHsgdGhpcy5zdGVwLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogTmVzdGVkIHByb2Nlc3MuXHJcbiAgICovXHJcbiAgcHJvY2Vzcz86IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc0FyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlcmUgaXMgYSBwYXVzZSBpbiB0aGUgZmxvdy5cclxuICAgKi9cclxuICBwYXVzZT86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRWFjaCBpbnRlcmFjdGlvbiBvciBhY3Rpb24uXHJcbiAgICovXHJcbiAgb3BlcmF0aW9uPzogZmhpci5FeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcE9wZXJhdGlvbkFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBhbiBhbHRlcm5hdGl2ZSBzdGVwIHRoYXQgY2FuIGJlIHRha2VuIGluc3RlYWQgb2YgdGhlIG9wZXJhdGlvbnMgb24gdGhlIGJhc2Ugc3RlcCBpbiBleGNlcHRpb25hbC9hdHlwaWNhbCBjaXJjdW1zdGFuY2VzLlxyXG4gICAqL1xyXG4gIGFsdGVybmF0aXZlPzogZmhpci5FeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcEFsdGVybmF0aXZlQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEVhY2ggc3RlcCBvZiB0aGUgcHJvY2Vzcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0V4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwJztcclxuICAvKipcclxuICAgKiBOZXN0ZWQgcHJvY2Vzcy5cclxuICAgKi9cclxuICBwdWJsaWMgcHJvY2Vzcz86IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1tdO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZXJlIGlzIGEgcGF1c2UgaW4gdGhlIGZsb3cuXHJcbiAgICovXHJcbiAgcHVibGljIHBhdXNlPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRWFjaCBpbnRlcmFjdGlvbiBvciBhY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIG9wZXJhdGlvbj86IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBPcGVyYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBhbiBhbHRlcm5hdGl2ZSBzdGVwIHRoYXQgY2FuIGJlIHRha2VuIGluc3RlYWQgb2YgdGhlIG9wZXJhdGlvbnMgb24gdGhlIGJhc2Ugc3RlcCBpbiBleGNlcHRpb25hbC9hdHlwaWNhbCBjaXJjdW1zdGFuY2VzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhbHRlcm5hdGl2ZT86IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBBbHRlcm5hdGl2ZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncHJvY2VzcyddKSB7IHRoaXMucHJvY2VzcyA9IHNvdXJjZS5wcm9jZXNzLm1hcCgoeCkgPT4gbmV3IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzcyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnByb2Nlc3MgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGF1c2UnXSkgeyB0aGlzLnBhdXNlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UucGF1c2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb3BlcmF0aW9uJ10pIHsgdGhpcy5vcGVyYXRpb24gPSBuZXcgZmhpci5FeGFtcGxlU2NlbmFyaW9Qcm9jZXNzU3RlcE9wZXJhdGlvbihzb3VyY2Uub3BlcmF0aW9uKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWx0ZXJuYXRpdmUnXSkgeyB0aGlzLmFsdGVybmF0aXZlID0gc291cmNlLmFsdGVybmF0aXZlLm1hcCgoeCkgPT4gbmV3IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBBbHRlcm5hdGl2ZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFsdGVybmF0aXZlID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1wicHJvY2Vzc1wiXSkgeyB0aGlzLnByb2Nlc3MuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInBhdXNlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucGF1c2UuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wib3BlcmF0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMub3BlcmF0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImFsdGVybmF0aXZlXCJdKSB7IHRoaXMuYWx0ZXJuYXRpdmUuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRXhhbXBsZVNjZW5hcmlvUHJvY2VzcyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFeGFtcGxlU2NlbmFyaW9Qcm9jZXNzQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRpYWdyYW0gdGl0bGUgb2YgdGhlIGdyb3VwIG9mIG9wZXJhdGlvbnMuXHJcbiAgICovXHJcbiAgdGl0bGU6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbG9uZ2VyIGRlc2NyaXB0aW9uIG9mIHRoZSBncm91cCBvZiBvcGVyYXRpb25zLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGlvbiBvZiBpbml0aWFsIHN0YXR1cyBiZWZvcmUgdGhlIHByb2Nlc3Mgc3RhcnRzLlxyXG4gICAqL1xyXG4gIHByZUNvbmRpdGlvbnM/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlc2NyaXB0aW9uIG9mIGZpbmFsIHN0YXR1cyBhZnRlciB0aGUgcHJvY2VzcyBlbmRzLlxyXG4gICAqL1xyXG4gIHBvc3RDb25kaXRpb25zPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFYWNoIHN0ZXAgb2YgdGhlIHByb2Nlc3MuXHJcbiAgICovXHJcbiAgc3RlcD86IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc1N0ZXBBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogRWFjaCBtYWpvciBwcm9jZXNzIC0gYSBncm91cCBvZiBvcGVyYXRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdFeGFtcGxlU2NlbmFyaW9Qcm9jZXNzJztcclxuICAvKipcclxuICAgKiBUaGUgZGlhZ3JhbSB0aXRsZSBvZiB0aGUgZ3JvdXAgb2Ygb3BlcmF0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgdGl0bGU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEEgbG9uZ2VyIGRlc2NyaXB0aW9uIG9mIHRoZSBncm91cCBvZiBvcGVyYXRpb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGlvbiBvZiBpbml0aWFsIHN0YXR1cyBiZWZvcmUgdGhlIHByb2Nlc3Mgc3RhcnRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVDb25kaXRpb25zPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlc2NyaXB0aW9uIG9mIGZpbmFsIHN0YXR1cyBhZnRlciB0aGUgcHJvY2VzcyBlbmRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwb3N0Q29uZGl0aW9ucz86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFYWNoIHN0ZXAgb2YgdGhlIHByb2Nlc3MuXHJcbiAgICovXHJcbiAgcHVibGljIHN0ZXA/OiBmaGlyLkV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRXhhbXBsZVNjZW5hcmlvUHJvY2VzcyAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndGl0bGUnXSkgeyB0aGlzLnRpdGxlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS50aXRsZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50aXRsZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydwcmVDb25kaXRpb25zJ10pIHsgdGhpcy5wcmVDb25kaXRpb25zID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLnByZUNvbmRpdGlvbnN9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncG9zdENvbmRpdGlvbnMnXSkgeyB0aGlzLnBvc3RDb25kaXRpb25zID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLnBvc3RDb25kaXRpb25zfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0ZXAnXSkgeyB0aGlzLnN0ZXAgPSBzb3VyY2Uuc3RlcC5tYXAoKHgpID0+IG5ldyBmaGlyLkV4YW1wbGVTY2VuYXJpb1Byb2Nlc3NTdGVwKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RlcCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ3RpdGxlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0aXRsZTpmaGlyLkZoaXJTdHJpbmcgZmhpcjogRXhhbXBsZVNjZW5hcmlvLnByb2Nlc3MudGl0bGU6c3RyaW5nJywgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInRpdGxlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudGl0bGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGVzY3JpcHRpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kZXNjcmlwdGlvbi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwcmVDb25kaXRpb25zXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucHJlQ29uZGl0aW9ucy5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwb3N0Q29uZGl0aW9uc1wiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnBvc3RDb25kaXRpb25zLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInN0ZXBcIl0pIHsgdGhpcy5zdGVwLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEV4YW1wbGVTY2VuYXJpbyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFeGFtcGxlU2NlbmFyaW9BcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJFeGFtcGxlU2NlbmFyaW9cInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2FuIGJlIGEgdXJuOnV1aWQ6IG9yIGEgdXJuOm9pZDogYnV0IHJlYWwgaHR0cDogYWRkcmVzc2VzIGFyZSBwcmVmZXJyZWQuICBNdWx0aXBsZSBpbnN0YW5jZXMgbWF5IHNoYXJlIHRoZSBzYW1lIFVSTCBpZiB0aGV5IGhhdmUgYSBkaXN0aW5jdCB2ZXJzaW9uLlxyXG4gICAqIFRoZSBkZXRlcm1pbmF0aW9uIG9mIHdoZW4gdG8gY3JlYXRlIGEgbmV3IHZlcnNpb24gb2YgYSByZXNvdXJjZSAoc2FtZSB1cmwsIG5ldyB2ZXJzaW9uKSB2cy4gZGVmaW5pbmcgYSBuZXcgYXJ0aWZhY3QgaXMgdXAgdG8gdGhlIGF1dGhvci4gIENvbnNpZGVyYXRpb25zIGZvciBtYWtpbmcgdGhpcyBkZWNpc2lvbiBhcmUgZm91bmQgaW4gW1RlY2huaWNhbCBhbmQgQnVzaW5lc3MgVmVyc2lvbnNdKHJlc291cmNlLmh0bWwjdmVyc2lvbnMpLiBcclxuICAgKiBJbiBzb21lIGNhc2VzLCB0aGUgcmVzb3VyY2UgY2FuIG5vIGxvbmdlciBiZSBmb3VuZCBhdCB0aGUgc3RhdGVkIHVybCwgYnV0IHRoZSB1cmwgaXRzZWxmIGNhbm5vdCBjaGFuZ2UuIEltcGxlbWVudGF0aW9ucyBjYW4gdXNlIHRoZSBbbWV0YS5zb3VyY2VdKHJlc291cmNlLmh0bWwjbWV0YSkgZWxlbWVudCB0byBpbmRpY2F0ZSB3aGVyZSB0aGUgY3VycmVudCBtYXN0ZXIgc291cmNlIG9mIHRoZSByZXNvdXJjZSBjYW4gYmUgZm91bmQuXHJcbiAgICovXHJcbiAgdXJsPzogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVHlwaWNhbGx5LCB0aGlzIGlzIHVzZWQgZm9yIGlkZW50aWZpZXJzIHRoYXQgY2FuIGdvIGluIGFuIEhMNyBWMyBJSSAoaW5zdGFuY2UgaWRlbnRpZmllcikgZGF0YSB0eXBlLCBhbmQgY2FuIHRoZW4gaWRlbnRpZnkgdGhpcyBleGFtcGxlIHNjZW5hcmlvIG91dHNpZGUgb2YgRkhJUiwgd2hlcmUgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHVzZSB0aGUgbG9naWNhbCBVUkkuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlcmUgbWF5IGJlIGRpZmZlcmVudCBleGFtcGxlIHNjZW5hcmlvIGluc3RhbmNlcyB0aGF0IGhhdmUgdGhlIHNhbWUgaWRlbnRpZmllciBidXQgZGlmZmVyZW50IHZlcnNpb25zLiAgVGhlIHZlcnNpb24gY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSB1cmwgaW4gYSByZWZlcmVuY2UgdG8gYWxsb3cgYSByZWZlcmVuY2UgdG8gYSBwYXJ0aWN1bGFyIGJ1c2luZXNzIHZlcnNpb24gb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8gd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LlxyXG4gICAqL1xyXG4gIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIGV4YW1wbGUgc2NlbmFyaW9zIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBzdGF0dXM6IFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGV8bnVsbDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIGV4YW1wbGUgc2NlbmFyaW9zIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBleHBlcmltZW50YWw/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgcmVzb3VyY2UgbGFzdC1tb2RpZmllZC1kYXRlLCBzaW5jZSB0aGUgcmVzb3VyY2UgbWF5IGJlIGEgc2Vjb25kYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBleGFtcGxlIHNjZW5hcmlvLiBBZGRpdGlvbmFsIHNwZWNpZmljIGRhdGVzIG1heSBiZSBhZGRlZCBhcyBleHRlbnNpb25zIG9yIGJlIGZvdW5kIGJ5IGNvbnN1bHRpbmcgUHJvdmVuYW5jZXMgYXNzb2NpYXRlZCB3aXRoIHBhc3QgdmVyc2lvbnMgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIGRhdGU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8gaXMgdGhlIG9yZ2FuaXphdGlvbiBvciBpbmRpdmlkdWFsIHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhlIG1haW50ZW5hbmNlIGFuZCB1cGtlZXAgb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8uIFRoaXMgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIGluZGl2aWR1YWwgb3Igb3JnYW5pemF0aW9uIHRoYXQgZGV2ZWxvcGVkIGFuZCBpbml0aWFsbHkgYXV0aG9yZWQgdGhlIGNvbnRlbnQuIFRoZSBwdWJsaXNoZXIgaXMgdGhlIHByaW1hcnkgcG9pbnQgb2YgY29udGFjdCBmb3IgcXVlc3Rpb25zIG9yIGlzc3VlcyB3aXRoIHRoZSBleGFtcGxlIHNjZW5hcmlvLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGlzaGVyPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWF5IGJlIGEgd2ViIHNpdGUsIGFuIGVtYWlsIGFkZHJlc3MsIGEgdGVsZXBob25lIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIGNvbnRhY3Q/OiBmaGlyLkNvbnRhY3REZXRhaWxBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gbXVsdGlwbGUgdXNlQ29udGV4dHMgYXJlIHNwZWNpZmllZCwgdGhlcmUgaXMgbm8gZXhwZWN0YXRpb24gdGhhdCBhbGwgb3IgYW55IG9mIHRoZSBjb250ZXh0cyBhcHBseS5cclxuICAgKi9cclxuICB1c2VDb250ZXh0PzogZmhpci5Vc2FnZUNvbnRleHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEl0IG1heSBiZSBwb3NzaWJsZSBmb3IgdGhlIGV4YW1wbGUgc2NlbmFyaW8gdG8gYmUgdXNlZCBpbiBqdXJpc2RpY3Rpb25zIG90aGVyIHRoYW4gdGhvc2UgZm9yIHdoaWNoIGl0IHdhcyBvcmlnaW5hbGx5IGRlc2lnbmVkIG9yIGludGVuZGVkLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBudWxsRnJlcXVlbnRseSwgdGhlIGNvcHlyaWdodCBkaWZmZXJzIGJldHdlZW4gdGhlIHZhbHVlIHNldCBhbmQgdGhlIGNvZGVzIHRoYXQgYXJlIGluY2x1ZGVkLiBUaGUgY29weXJpZ2h0IHN0YXRlbWVudCBzaG91bGQgY2xlYXJseSBkaWZmZXJlbnRpYXRlIGJldHdlZW4gdGhlc2Ugd2hlbiByZXF1aXJlZC5cclxuICAgKi9cclxuICBjb3B5cmlnaHQ/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgdXNhZ2Ugb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8uIEluc3RlYWQsIGl0IHByb3ZpZGVzIHRyYWNlYWJpbGl0eSBvZiAnJ3doeScnIHRoZSByZXNvdXJjZSBpcyBlaXRoZXIgbmVlZGVkIG9yICcnd2h5JycgaXQgaXMgZGVmaW5lZCBhcyBpdCBpcy4gIFRoaXMgbWF5IGJlIHVzZWQgdG8gcG9pbnQgdG8gc291cmNlIG1hdGVyaWFscyBvciBzcGVjaWZpY2F0aW9ucyB0aGF0IGRyb3ZlIHRoZSBzdHJ1Y3R1cmUgb2YgdGhpcyBleGFtcGxlIHNjZW5hcmlvLlxyXG4gICAqL1xyXG4gIHB1cnBvc2U/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFjdG9yIHBhcnRpY2lwYXRpbmcgaW4gdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIGFjdG9yPzogZmhpci5FeGFtcGxlU2NlbmFyaW9BY3RvckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRWFjaCByZXNvdXJjZSBhbmQgZWFjaCB2ZXJzaW9uIHRoYXQgaXMgcHJlc2VudCBpbiB0aGUgd29ya2Zsb3cuXHJcbiAgICovXHJcbiAgaW5zdGFuY2U/OiBmaGlyLkV4YW1wbGVTY2VuYXJpb0luc3RhbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFYWNoIG1ham9yIHByb2Nlc3MgLSBhIGdyb3VwIG9mIG9wZXJhdGlvbnMuXHJcbiAgICovXHJcbiAgcHJvY2Vzcz86IGZoaXIuRXhhbXBsZVNjZW5hcmlvUHJvY2Vzc0FyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQW5vdGhlciBuZXN0ZWQgd29ya2Zsb3cuXHJcbiAgICovXHJcbiAgd29ya2Zsb3c/OiBmaGlyLkZoaXJDYW5vbmljYWxbXXxzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeGFtcGxlIG9mIHdvcmtmbG93IGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4YW1wbGVTY2VuYXJpbyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2Uge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRXhhbXBsZVNjZW5hcmlvJztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIkV4YW1wbGVTY2VuYXJpb1wiO1xyXG4gIC8qKlxyXG4gICAqIENhbiBiZSBhIHVybjp1dWlkOiBvciBhIHVybjpvaWQ6IGJ1dCByZWFsIGh0dHA6IGFkZHJlc3NlcyBhcmUgcHJlZmVycmVkLiAgTXVsdGlwbGUgaW5zdGFuY2VzIG1heSBzaGFyZSB0aGUgc2FtZSBVUkwgaWYgdGhleSBoYXZlIGEgZGlzdGluY3QgdmVyc2lvbi5cclxuICAgKiBUaGUgZGV0ZXJtaW5hdGlvbiBvZiB3aGVuIHRvIGNyZWF0ZSBhIG5ldyB2ZXJzaW9uIG9mIGEgcmVzb3VyY2UgKHNhbWUgdXJsLCBuZXcgdmVyc2lvbikgdnMuIGRlZmluaW5nIGEgbmV3IGFydGlmYWN0IGlzIHVwIHRvIHRoZSBhdXRob3IuICBDb25zaWRlcmF0aW9ucyBmb3IgbWFraW5nIHRoaXMgZGVjaXNpb24gYXJlIGZvdW5kIGluIFtUZWNobmljYWwgYW5kIEJ1c2luZXNzIFZlcnNpb25zXShyZXNvdXJjZS5odG1sI3ZlcnNpb25zKS4gXHJcbiAgICogSW4gc29tZSBjYXNlcywgdGhlIHJlc291cmNlIGNhbiBubyBsb25nZXIgYmUgZm91bmQgYXQgdGhlIHN0YXRlZCB1cmwsIGJ1dCB0aGUgdXJsIGl0c2VsZiBjYW5ub3QgY2hhbmdlLiBJbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSB0aGUgW21ldGEuc291cmNlXShyZXNvdXJjZS5odG1sI21ldGEpIGVsZW1lbnQgdG8gaW5kaWNhdGUgd2hlcmUgdGhlIGN1cnJlbnQgbWFzdGVyIHNvdXJjZSBvZiB0aGUgcmVzb3VyY2UgY2FuIGJlIGZvdW5kLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cmw/OiBmaGlyLkZoaXJVcml8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFR5cGljYWxseSwgdGhpcyBpcyB1c2VkIGZvciBpZGVudGlmaWVycyB0aGF0IGNhbiBnbyBpbiBhbiBITDcgVjMgSUkgKGluc3RhbmNlIGlkZW50aWZpZXIpIGRhdGEgdHlwZSwgYW5kIGNhbiB0aGVuIGlkZW50aWZ5IHRoaXMgZXhhbXBsZSBzY2VuYXJpbyBvdXRzaWRlIG9mIEZISVIsIHdoZXJlIGl0IGlzIG5vdCBwb3NzaWJsZSB0byB1c2UgdGhlIGxvZ2ljYWwgVVJJLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogVGhlcmUgbWF5IGJlIGRpZmZlcmVudCBleGFtcGxlIHNjZW5hcmlvIGluc3RhbmNlcyB0aGF0IGhhdmUgdGhlIHNhbWUgaWRlbnRpZmllciBidXQgZGlmZmVyZW50IHZlcnNpb25zLiAgVGhlIHZlcnNpb24gY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSB1cmwgaW4gYSByZWZlcmVuY2UgdG8gYWxsb3cgYSByZWZlcmVuY2UgdG8gYSBwYXJ0aWN1bGFyIGJ1c2luZXNzIHZlcnNpb24gb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8gd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIGV4YW1wbGUgc2NlbmFyaW9zIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzOiBQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiBleGFtcGxlIHNjZW5hcmlvcyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuXHJcbiAgICovXHJcbiAgcHVibGljIGV4cGVyaW1lbnRhbD86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgcmVzb3VyY2UgbGFzdC1tb2RpZmllZC1kYXRlLCBzaW5jZSB0aGUgcmVzb3VyY2UgbWF5IGJlIGEgc2Vjb25kYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBleGFtcGxlIHNjZW5hcmlvLiBBZGRpdGlvbmFsIHNwZWNpZmljIGRhdGVzIG1heSBiZSBhZGRlZCBhcyBleHRlbnNpb25zIG9yIGJlIGZvdW5kIGJ5IGNvbnN1bHRpbmcgUHJvdmVuYW5jZXMgYXNzb2NpYXRlZCB3aXRoIHBhc3QgdmVyc2lvbnMgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8gaXMgdGhlIG9yZ2FuaXphdGlvbiBvciBpbmRpdmlkdWFsIHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhlIG1haW50ZW5hbmNlIGFuZCB1cGtlZXAgb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8uIFRoaXMgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIGluZGl2aWR1YWwgb3Igb3JnYW5pemF0aW9uIHRoYXQgZGV2ZWxvcGVkIGFuZCBpbml0aWFsbHkgYXV0aG9yZWQgdGhlIGNvbnRlbnQuIFRoZSBwdWJsaXNoZXIgaXMgdGhlIHByaW1hcnkgcG9pbnQgb2YgY29udGFjdCBmb3IgcXVlc3Rpb25zIG9yIGlzc3VlcyB3aXRoIHRoZSBleGFtcGxlIHNjZW5hcmlvLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIHB1Ymxpc2hlcj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWF5IGJlIGEgd2ViIHNpdGUsIGFuIGVtYWlsIGFkZHJlc3MsIGEgdGVsZXBob25lIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250YWN0PzogZmhpci5Db250YWN0RGV0YWlsW107XHJcbiAgLyoqXHJcbiAgICogV2hlbiBtdWx0aXBsZSB1c2VDb250ZXh0cyBhcmUgc3BlY2lmaWVkLCB0aGVyZSBpcyBubyBleHBlY3RhdGlvbiB0aGF0IGFsbCBvciBhbnkgb2YgdGhlIGNvbnRleHRzIGFwcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1c2VDb250ZXh0PzogZmhpci5Vc2FnZUNvbnRleHRbXTtcclxuICAvKipcclxuICAgKiBJdCBtYXkgYmUgcG9zc2libGUgZm9yIHRoZSBleGFtcGxlIHNjZW5hcmlvIHRvIGJlIHVzZWQgaW4ganVyaXNkaWN0aW9ucyBvdGhlciB0aGFuIHRob3NlIGZvciB3aGljaCBpdCB3YXMgb3JpZ2luYWxseSBkZXNpZ25lZCBvciBpbnRlbmRlZC5cclxuICAgKi9cclxuICBwdWJsaWMganVyaXNkaWN0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBudWxsRnJlcXVlbnRseSwgdGhlIGNvcHlyaWdodCBkaWZmZXJzIGJldHdlZW4gdGhlIHZhbHVlIHNldCBhbmQgdGhlIGNvZGVzIHRoYXQgYXJlIGluY2x1ZGVkLiBUaGUgY29weXJpZ2h0IHN0YXRlbWVudCBzaG91bGQgY2xlYXJseSBkaWZmZXJlbnRpYXRlIGJldHdlZW4gdGhlc2Ugd2hlbiByZXF1aXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgY29weXJpZ2h0PzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgdXNhZ2Ugb2YgdGhlIGV4YW1wbGUgc2NlbmFyaW8uIEluc3RlYWQsIGl0IHByb3ZpZGVzIHRyYWNlYWJpbGl0eSBvZiAnJ3doeScnIHRoZSByZXNvdXJjZSBpcyBlaXRoZXIgbmVlZGVkIG9yICcnd2h5JycgaXQgaXMgZGVmaW5lZCBhcyBpdCBpcy4gIFRoaXMgbWF5IGJlIHVzZWQgdG8gcG9pbnQgdG8gc291cmNlIG1hdGVyaWFscyBvciBzcGVjaWZpY2F0aW9ucyB0aGF0IGRyb3ZlIHRoZSBzdHJ1Y3R1cmUgb2YgdGhpcyBleGFtcGxlIHNjZW5hcmlvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXJwb3NlPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFjdG9yIHBhcnRpY2lwYXRpbmcgaW4gdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhY3Rvcj86IGZoaXIuRXhhbXBsZVNjZW5hcmlvQWN0b3JbXTtcclxuICAvKipcclxuICAgKiBFYWNoIHJlc291cmNlIGFuZCBlYWNoIHZlcnNpb24gdGhhdCBpcyBwcmVzZW50IGluIHRoZSB3b3JrZmxvdy5cclxuICAgKi9cclxuICBwdWJsaWMgaW5zdGFuY2U/OiBmaGlyLkV4YW1wbGVTY2VuYXJpb0luc3RhbmNlW107XHJcbiAgLyoqXHJcbiAgICogRWFjaCBtYWpvciBwcm9jZXNzIC0gYSBncm91cCBvZiBvcGVyYXRpb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9jZXNzPzogZmhpci5FeGFtcGxlU2NlbmFyaW9Qcm9jZXNzW107XHJcbiAgLyoqXHJcbiAgICogQW5vdGhlciBuZXN0ZWQgd29ya2Zsb3cuXHJcbiAgICovXHJcbiAgcHVibGljIHdvcmtmbG93PzogZmhpci5GaGlyQ2Fub25pY2FsW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRXhhbXBsZVNjZW5hcmlvIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RXhhbXBsZVNjZW5hcmlvQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ0V4YW1wbGVTY2VuYXJpbyc7XHJcbiAgICBpZiAoc291cmNlWyd1cmwnXSkgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudXJsfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZlcnNpb24nXSkgeyB0aGlzLnZlcnNpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnZlcnNpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IHNvdXJjZS5zdGF0dXM7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2V4cGVyaW1lbnRhbCddKSB7IHRoaXMuZXhwZXJpbWVudGFsID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuZXhwZXJpbWVudGFsfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSkgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuZGF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydwdWJsaXNoZXInXSkgeyB0aGlzLnB1Ymxpc2hlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucHVibGlzaGVyfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRhY3QnXSkgeyB0aGlzLmNvbnRhY3QgPSBzb3VyY2UuY29udGFjdC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbnRhY3REZXRhaWwoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250YWN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3VzZUNvbnRleHQnXSkgeyB0aGlzLnVzZUNvbnRleHQgPSBzb3VyY2UudXNlQ29udGV4dC5tYXAoKHgpID0+IG5ldyBmaGlyLlVzYWdlQ29udGV4dCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVzZUNvbnRleHQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnanVyaXNkaWN0aW9uJ10pIHsgdGhpcy5qdXJpc2RpY3Rpb24gPSBzb3VyY2UuanVyaXNkaWN0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuanVyaXNkaWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvcHlyaWdodCddKSB7IHRoaXMuY29weXJpZ2h0ID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmNvcHlyaWdodH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydwdXJwb3NlJ10pIHsgdGhpcy5wdXJwb3NlID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLnB1cnBvc2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWN0b3InXSkgeyB0aGlzLmFjdG9yID0gc291cmNlLmFjdG9yLm1hcCgoeCkgPT4gbmV3IGZoaXIuRXhhbXBsZVNjZW5hcmlvQWN0b3IoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hY3RvciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydpbnN0YW5jZSddKSB7IHRoaXMuaW5zdGFuY2UgPSBzb3VyY2UuaW5zdGFuY2UubWFwKCh4KSA9PiBuZXcgZmhpci5FeGFtcGxlU2NlbmFyaW9JbnN0YW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmluc3RhbmNlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3Byb2Nlc3MnXSkgeyB0aGlzLnByb2Nlc3MgPSBzb3VyY2UucHJvY2Vzcy5tYXAoKHgpID0+IG5ldyBmaGlyLkV4YW1wbGVTY2VuYXJpb1Byb2Nlc3MoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm9jZXNzID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3dvcmtmbG93J10pIHsgdGhpcy53b3JrZmxvdyA9IHNvdXJjZS53b3JrZmxvdy5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy53b3JrZmxvdyA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3Igc3RhdHVzIChFeGFtcGxlU2NlbmFyaW8uc3RhdHVzKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgc3RhdHVzUmVxdWlyZWRDb2RpbmcoKTpQdWJsaWNhdGlvblN0YXR1c0NvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIFB1YmxpY2F0aW9uU3RhdHVzQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VUeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZVR5cGU6XCJFeGFtcGxlU2NlbmFyaW9cIiBmaGlyOiBFeGFtcGxlU2NlbmFyaW8ucmVzb3VyY2VUeXBlOlwiRXhhbXBsZVNjZW5hcmlvXCInLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widXJsXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudXJsLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImlkZW50aWZpZXJcIl0pIHsgdGhpcy5pZGVudGlmaWVyLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJ2ZXJzaW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudmVyc2lvbi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJuYW1lXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubmFtZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydzdGF0dXMnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCAgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHN0YXR1czpQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlIGZoaXI6IEV4YW1wbGVTY2VuYXJpby5zdGF0dXM6Y29kZScsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJleHBlcmltZW50YWxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5leHBlcmltZW50YWwuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGF0ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRhdGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicHVibGlzaGVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucHVibGlzaGVyLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRhY3RcIl0pIHsgdGhpcy5jb250YWN0LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJ1c2VDb250ZXh0XCJdKSB7IHRoaXMudXNlQ29udGV4dC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wianVyaXNkaWN0aW9uXCJdKSB7IHRoaXMuanVyaXNkaWN0aW9uLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJjb3B5cmlnaHRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jb3B5cmlnaHQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicHVycG9zZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnB1cnBvc2UuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiYWN0b3JcIl0pIHsgdGhpcy5hY3Rvci5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiaW5zdGFuY2VcIl0pIHsgdGhpcy5pbnN0YW5jZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicHJvY2Vzc1wiXSkgeyB0aGlzLnByb2Nlc3MuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcIndvcmtmbG93XCJdKSB7IHRoaXMud29ya2Zsb3cuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=