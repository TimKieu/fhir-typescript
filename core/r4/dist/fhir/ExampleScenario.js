// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExampleScenario
import * as fhir from '../fhir.js';
// @ts-ignore
import { ExamplescenarioActorTypeVsValidation } from '../fhirValueSets/ExamplescenarioActorTypeVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Actor participating in the resource.
 */
export class ExampleScenarioActor extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actorId'] !== undefined) {
            this.actorId = new fhir.FhirString({ value: source.actorId }, options);
        }
        else {
            this.actorId = null;
        }
        if (source['_actorId']) {
            if (this.actorId) {
                this.actorId.addExtendedProperties(source._actorId);
            }
            else {
                this.actorId = new fhir.FhirString(source._actorId, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.actor';
        }
        iss.push(...this.vRS('actorId', exp));
        iss.push(...this.vRSV('type', exp, 'ExamplescenarioActorType', ExamplescenarioActorTypeVsValidation, 'r'));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('description', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioActor._fts_dataType = 'ExampleScenarioActor';
/**
 * A specific version of the resource.
 */
export class ExampleScenarioInstanceVersion extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['versionId'] !== undefined) {
            this.versionId = new fhir.FhirString({ value: source.versionId }, options);
        }
        else {
            this.versionId = null;
        }
        if (source['_versionId']) {
            if (this.versionId) {
                this.versionId.addExtendedProperties(source._versionId);
            }
            else {
                this.versionId = new fhir.FhirString(source._versionId, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.instance.version';
        }
        iss.push(...this.vRS('versionId', exp));
        iss.push(...this.vRS('description', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioInstanceVersion._fts_dataType = 'ExampleScenarioInstanceVersion';
/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export class ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstanceContainedInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['resourceId'] !== undefined) {
            this.resourceId = new fhir.FhirString({ value: source.resourceId }, options);
        }
        else {
            this.resourceId = null;
        }
        if (source['_resourceId']) {
            if (this.resourceId) {
                this.resourceId.addExtendedProperties(source._resourceId);
            }
            else {
                this.resourceId = new fhir.FhirString(source._resourceId, options);
            }
        }
        if (source['versionId'] !== undefined) {
            this.versionId = new fhir.FhirString({ value: source.versionId }, options);
        }
        if (source['_versionId']) {
            if (this.versionId) {
                this.versionId.addExtendedProperties(source._versionId);
            }
            else {
                this.versionId = new fhir.FhirString(source._versionId, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.instance.containedInstance';
        }
        iss.push(...this.vRS('resourceId', exp));
        iss.push(...this.vOS('versionId', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioInstanceContainedInstance._fts_dataType = 'ExampleScenarioInstanceContainedInstance';
/**
 * Each resource and each version that is present in the workflow.
 */
export class ExampleScenarioInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['resourceId'] !== undefined) {
            this.resourceId = new fhir.FhirString({ value: source.resourceId }, options);
        }
        else {
            this.resourceId = null;
        }
        if (source['_resourceId']) {
            if (this.resourceId) {
                this.resourceId.addExtendedProperties(source._resourceId);
            }
            else {
                this.resourceId = new fhir.FhirString(source._resourceId, options);
            }
        }
        if (source['resourceType'] !== undefined) {
            this.resourceType = new fhir.FhirCode({ value: source.resourceType }, options);
        }
        else {
            this.resourceType = null;
        }
        if (source['_resourceType']) {
            if (this.resourceType) {
                this.resourceType.addExtendedProperties(source._resourceType);
            }
            else {
                this.resourceType = new fhir.FhirCode(source._resourceType, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.ExampleScenarioInstanceVersion(x, options));
        }
        else {
            this.version = [];
        }
        if (source['containedInstance']) {
            this.containedInstance = source.containedInstance.map((x) => new fhir.ExampleScenarioInstanceContainedInstance(x, options));
        }
        else {
            this.containedInstance = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.instance';
        }
        iss.push(...this.vRS('resourceId', exp));
        iss.push(...this.vRSV('resourceType', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('version', exp));
        iss.push(...this.vOA('containedInstance', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioInstance._fts_dataType = 'ExampleScenarioInstance';
/**
 * Each interaction or action.
 */
export class ExampleScenarioProcessStepOperation extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number'] !== undefined) {
            this.number = new fhir.FhirString({ value: source.number }, options);
        }
        else {
            this.number = null;
        }
        if (source['_number']) {
            if (this.number) {
                this.number.addExtendedProperties(source._number);
            }
            else {
                this.number = new fhir.FhirString(source._number, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirString({ value: source.type }, options);
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirString(source._type, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['initiator'] !== undefined) {
            this.initiator = new fhir.FhirString({ value: source.initiator }, options);
        }
        if (source['_initiator']) {
            if (this.initiator) {
                this.initiator.addExtendedProperties(source._initiator);
            }
            else {
                this.initiator = new fhir.FhirString(source._initiator, options);
            }
        }
        if (source['receiver'] !== undefined) {
            this.receiver = new fhir.FhirString({ value: source.receiver }, options);
        }
        if (source['_receiver']) {
            if (this.receiver) {
                this.receiver.addExtendedProperties(source._receiver);
            }
            else {
                this.receiver = new fhir.FhirString(source._receiver, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['initiatorActive'] !== undefined) {
            this.initiatorActive = new fhir.FhirBoolean({ value: source.initiatorActive }, options);
        }
        if (source['_initiatorActive']) {
            if (this.initiatorActive) {
                this.initiatorActive.addExtendedProperties(source._initiatorActive);
            }
            else {
                this.initiatorActive = new fhir.FhirBoolean(source._initiatorActive, options);
            }
        }
        if (source['receiverActive'] !== undefined) {
            this.receiverActive = new fhir.FhirBoolean({ value: source.receiverActive }, options);
        }
        if (source['_receiverActive']) {
            if (this.receiverActive) {
                this.receiverActive.addExtendedProperties(source._receiverActive);
            }
            else {
                this.receiverActive = new fhir.FhirBoolean(source._receiverActive, options);
            }
        }
        if (source['request']) {
            this.request = new fhir.ExampleScenarioInstanceContainedInstance(source.request, options);
        }
        if (source['response']) {
            this.response = new fhir.ExampleScenarioInstanceContainedInstance(source.response, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.process.step.operation';
        }
        iss.push(...this.vRS('number', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('initiator', exp));
        iss.push(...this.vOS('receiver', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('initiatorActive', exp));
        iss.push(...this.vOS('receiverActive', exp));
        iss.push(...this.vOS('request', exp));
        iss.push(...this.vOS('response', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcessStepOperation._fts_dataType = 'ExampleScenarioProcessStepOperation';
/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export class ExampleScenarioProcessStepAlternative extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStepAlternative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x, options));
        }
        else {
            this.step = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.process.step.alternative';
        }
        iss.push(...this.vRS('title', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('step', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcessStepAlternative._fts_dataType = 'ExampleScenarioProcessStepAlternative';
/**
 * Each step of the process.
 */
export class ExampleScenarioProcessStep extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcessStep - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x, options));
        }
        else {
            this.process = [];
        }
        if (source['pause'] !== undefined) {
            this.pause = new fhir.FhirBoolean({ value: source.pause }, options);
        }
        if (source['_pause']) {
            if (this.pause) {
                this.pause.addExtendedProperties(source._pause);
            }
            else {
                this.pause = new fhir.FhirBoolean(source._pause, options);
            }
        }
        if (source['operation']) {
            this.operation = new fhir.ExampleScenarioProcessStepOperation(source.operation, options);
        }
        if (source['alternative']) {
            this.alternative = source.alternative.map((x) => new fhir.ExampleScenarioProcessStepAlternative(x, options));
        }
        else {
            this.alternative = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.process.step';
        }
        iss.push(...this.vOA('process', exp));
        iss.push(...this.vOS('pause', exp));
        iss.push(...this.vOS('operation', exp));
        iss.push(...this.vOA('alternative', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcessStep._fts_dataType = 'ExampleScenarioProcessStep';
/**
 * Each major process - a group of operations.
 */
export class ExampleScenarioProcess extends fhir.BackboneElement {
    /**
     * Default constructor for ExampleScenarioProcess - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['preConditions'] !== undefined) {
            this.preConditions = new fhir.FhirMarkdown({ value: source.preConditions }, options);
        }
        if (source['_preConditions']) {
            if (this.preConditions) {
                this.preConditions.addExtendedProperties(source._preConditions);
            }
            else {
                this.preConditions = new fhir.FhirMarkdown(source._preConditions, options);
            }
        }
        if (source['postConditions'] !== undefined) {
            this.postConditions = new fhir.FhirMarkdown({ value: source.postConditions }, options);
        }
        if (source['_postConditions']) {
            if (this.postConditions) {
                this.postConditions.addExtendedProperties(source._postConditions);
            }
            else {
                this.postConditions = new fhir.FhirMarkdown(source._postConditions, options);
            }
        }
        if (source['step']) {
            this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x, options));
        }
        else {
            this.step = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario.process';
        }
        iss.push(...this.vRS('title', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('preConditions', exp));
        iss.push(...this.vOS('postConditions', exp));
        iss.push(...this.vOA('step', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenarioProcess._fts_dataType = 'ExampleScenarioProcess';
/**
 * Example of workflow instance.
 */
export class ExampleScenario extends fhir.DomainResource {
    /**
     * Default constructor for ExampleScenario - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ExampleScenario';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['experimental'] !== undefined) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental }, options);
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
        if (source['purpose'] !== undefined) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose }, options);
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose, options);
            }
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ExampleScenarioActor(x, options));
        }
        else {
            this.actor = [];
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ExampleScenarioInstance(x, options));
        }
        else {
            this.instance = [];
        }
        if (source['process']) {
            this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x, options));
        }
        else {
            this.process = [];
        }
        if (source['workflow'] !== undefined) {
            this.workflow = source.workflow.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.workflow = [];
        }
        if (source['_workflow']) {
            source._workflow.forEach((x, i) => {
                if (this.workflow.length >= i) {
                    if (x) {
                        this.workflow[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.workflow.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ExampleScenario';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOA('actor', exp));
        iss.push(...this.vOA('instance', exp));
        iss.push(...this.vOA('process', exp));
        iss.push(...this.vOA('workflow', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExampleScenario._fts_dataType = 'ExampleScenario';
//# sourceMappingURL=data:application/json;base64,