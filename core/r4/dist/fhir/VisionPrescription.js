// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VisionPrescription
import * as fhir from '../fhir.js';
// @ts-ignore
import { VisionBaseCodes } from '../fhirValueSets/VisionBaseCodes.js';
// @ts-ignore
import { VisionEyeCodes } from '../fhirValueSets/VisionEyeCodes.js';
// @ts-ignore
import { FmStatusCodes } from '../fhirValueSets/FmStatusCodes.js';
/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecificationPrism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['amount']) {
            this.amount = new fhir.FhirDecimal({ value: source.amount });
        }
        else {
            this.amount = null;
        }
        if (source['base']) {
            this.base = new fhir.FhirCode({ value: source.base });
        }
        else {
            this.base = null;
        }
    }
    /**
     * Required-bound Value Set for base (VisionPrescription.lensSpecification.prism.base)
     */
    static get baseRequiredCodes() {
        return VisionBaseCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['amount']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property amount:fhir.FhirDecimal fhir: VisionPrescription.lensSpecification.prism.amount:decimal' });
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        if (!this['base']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property base:fhir.FhirCode<VisionBaseCodeType> fhir: VisionPrescription.lensSpecification.prism.base:code' });
        }
        if (this['base'] && (!Object.values(VisionBaseCodes).includes(this.base))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property base:fhir.FhirCode<VisionBaseCodeType> fhir: VisionPrescription.lensSpecification.prism.base:code Required binding to: VisionBase' });
        }
        if (this["base"]) {
            issues.push(...this.base.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecificationPrism._fts_dataType = 'VisionPrescriptionLensSpecificationPrism';
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['product']) {
            this.product = new fhir.CodeableConcept(source.product);
        }
        else {
            this.product = null;
        }
        if (source['eye']) {
            this.eye = new fhir.FhirCode({ value: source.eye });
        }
        else {
            this.eye = null;
        }
        if (source['sphere']) {
            this.sphere = new fhir.FhirDecimal({ value: source.sphere });
        }
        if (source['cylinder']) {
            this.cylinder = new fhir.FhirDecimal({ value: source.cylinder });
        }
        if (source['axis']) {
            this.axis = new fhir.FhirInteger({ value: source.axis });
        }
        if (source['prism']) {
            this.prism = source.prism.map((x) => new fhir.VisionPrescriptionLensSpecificationPrism(x));
        }
        else {
            this.prism = [];
        }
        if (source['add']) {
            this.add = new fhir.FhirDecimal({ value: source.add });
        }
        if (source['power']) {
            this.power = new fhir.FhirDecimal({ value: source.power });
        }
        if (source['backCurve']) {
            this.backCurve = new fhir.FhirDecimal({ value: source.backCurve });
        }
        if (source['diameter']) {
            this.diameter = new fhir.FhirDecimal({ value: source.diameter });
        }
        if (source['duration']) {
            this.duration = new fhir.Quantity(source.duration);
        }
        if (source['color']) {
            this.color = new fhir.FhirString({ value: source.color });
        }
        if (source['brand']) {
            this.brand = new fhir.FhirString({ value: source.brand });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Required-bound Value Set for eye (VisionPrescription.lensSpecification.eye)
     */
    static get eyeRequiredCodes() {
        return VisionEyeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['product']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property product:fhir.CodeableConcept fhir: VisionPrescription.lensSpecification.product:CodeableConcept' });
        }
        if (this["product"]) {
            issues.push(...this.product.doModelValidation());
        }
        if (!this['eye']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property eye:fhir.FhirCode<VisionEyeCodeType> fhir: VisionPrescription.lensSpecification.eye:code' });
        }
        if (this['eye'] && (!Object.values(VisionEyeCodes).includes(this.eye))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property eye:fhir.FhirCode<VisionEyeCodeType> fhir: VisionPrescription.lensSpecification.eye:code Required binding to: VisionEye' });
        }
        if (this["eye"]) {
            issues.push(...this.eye.doModelValidation());
        }
        if (this["sphere"]) {
            issues.push(...this.sphere.doModelValidation());
        }
        if (this["cylinder"]) {
            issues.push(...this.cylinder.doModelValidation());
        }
        if (this["axis"]) {
            issues.push(...this.axis.doModelValidation());
        }
        if (this["prism"]) {
            this.prism.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["add"]) {
            issues.push(...this.add.doModelValidation());
        }
        if (this["power"]) {
            issues.push(...this.power.doModelValidation());
        }
        if (this["backCurve"]) {
            issues.push(...this.backCurve.doModelValidation());
        }
        if (this["diameter"]) {
            issues.push(...this.diameter.doModelValidation());
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation());
        }
        if (this["color"]) {
            issues.push(...this.color.doModelValidation());
        }
        if (this["brand"]) {
            issues.push(...this.brand.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecification._fts_dataType = 'VisionPrescriptionLensSpecification';
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource {
    /**
     * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'VisionPrescription';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateWritten']) {
            this.dateWritten = new fhir.FhirDateTime({ value: source.dateWritten });
        }
        else {
            this.dateWritten = null;
        }
        if (source['prescriber']) {
            this.prescriber = new fhir.Reference(source.prescriber);
        }
        else {
            this.prescriber = null;
        }
        if (source['lensSpecification']) {
            this.lensSpecification = source.lensSpecification.map((x) => new fhir.VisionPrescriptionLensSpecification(x));
        }
        else {
            this.lensSpecification = [];
        }
    }
    /**
     * Required-bound Value Set for status (VisionPrescription.status)
     */
    static get statusRequiredCodes() {
        return FmStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"VisionPrescription" fhir: VisionPrescription.resourceType:"VisionPrescription"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<FmStatusCodeType> fhir: VisionPrescription.status:code' });
        }
        if (this['status'] && (!Object.values(FmStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<FmStatusCodeType> fhir: VisionPrescription.status:code Required binding to: FmStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['created']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: VisionPrescription.created:dateTime' });
        }
        if (this["created"]) {
            issues.push(...this.created.doModelValidation());
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient:fhir.Reference fhir: VisionPrescription.patient:Reference' });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (!this['dateWritten']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dateWritten:fhir.FhirDateTime fhir: VisionPrescription.dateWritten:dateTime' });
        }
        if (this["dateWritten"]) {
            issues.push(...this.dateWritten.doModelValidation());
        }
        if (!this['prescriber']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property prescriber:fhir.Reference fhir: VisionPrescription.prescriber:Reference' });
        }
        if (this["prescriber"]) {
            issues.push(...this.prescriber.doModelValidation());
        }
        if (!this['lensSpecification']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property lensSpecification:fhir.VisionPrescriptionLensSpecification[] fhir: VisionPrescription.lensSpecification:lensSpecification' });
        }
        else if (!Array.isArray(this.lensSpecification)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property lensSpecification:fhir.VisionPrescriptionLensSpecification[] fhir: VisionPrescription.lensSpecification:lensSpecification' });
        }
        else if (this.lensSpecification.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property lensSpecification:fhir.VisionPrescriptionLensSpecification[] fhir: VisionPrescription.lensSpecification:lensSpecification' });
        }
        if (this["lensSpecification"]) {
            this.lensSpecification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescription._fts_dataType = 'VisionPrescription';
//# sourceMappingURL=data:application/json;base64,