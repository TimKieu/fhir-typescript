// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VisionPrescription
import * as fhir from '../fhir.js';
// @ts-ignore
import { VisionBaseCodes } from '../fhirValueSets/VisionBaseCodes.js';
// @ts-ignore
import { VisionEyeCodes } from '../fhirValueSets/VisionEyeCodes.js';
// @ts-ignore
import { FmStatusCodes } from '../fhirValueSets/FmStatusCodes.js';
/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecificationPrism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['amount']) {
            this.amount = new fhir.FhirDecimal({ value: source.amount });
        }
        else {
            this.amount = null;
        }
        if (source['_amount']) {
            if (this.amount) {
                this.amount.addExtendedProperties(source._amount);
            }
            else {
                this.amount = new fhir.FhirDecimal(source._amount);
            }
        }
        if (source['base']) {
            this.base = new fhir.FhirCode({ value: source.base });
        }
        else {
            this.base = null;
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirCode(source._base);
            }
        }
    }
    /**
     * Required-bound Value Set for base (VisionPrescription.lensSpecification.prism.base)
     */
    static get baseRequiredCodes() {
        return VisionBaseCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'VisionPrescription.lensSpecification.prism';
        }
        if (!this['amount']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property amount fhir: VisionPrescription.lensSpecification.prism.amount:decimal', expression: [expression] });
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation(expression + '.amount'));
        }
        if (!this['base']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property base fhir: VisionPrescription.lensSpecification.prism.base:code', expression: [expression] });
        }
        if (this['base'] && (!Object.values(VisionBaseCodes).includes(this.base.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property base fhir: VisionPrescription.lensSpecification.prism.base:code Required binding to: VisionBase', expression: [expression] });
        }
        if (this["base"]) {
            issues.push(...this.base.doModelValidation(expression + '.base'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecificationPrism._fts_dataType = 'VisionPrescriptionLensSpecificationPrism';
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['product']) {
            this.product = new fhir.CodeableConcept(source.product);
        }
        else {
            this.product = null;
        }
        if (source['eye']) {
            this.eye = new fhir.FhirCode({ value: source.eye });
        }
        else {
            this.eye = null;
        }
        if (source['_eye']) {
            if (this.eye) {
                this.eye.addExtendedProperties(source._eye);
            }
            else {
                this.eye = new fhir.FhirCode(source._eye);
            }
        }
        if (source['sphere']) {
            this.sphere = new fhir.FhirDecimal({ value: source.sphere });
        }
        if (source['_sphere']) {
            if (this.sphere) {
                this.sphere.addExtendedProperties(source._sphere);
            }
            else {
                this.sphere = new fhir.FhirDecimal(source._sphere);
            }
        }
        if (source['cylinder']) {
            this.cylinder = new fhir.FhirDecimal({ value: source.cylinder });
        }
        if (source['_cylinder']) {
            if (this.cylinder) {
                this.cylinder.addExtendedProperties(source._cylinder);
            }
            else {
                this.cylinder = new fhir.FhirDecimal(source._cylinder);
            }
        }
        if (source['axis']) {
            this.axis = new fhir.FhirInteger({ value: source.axis });
        }
        if (source['_axis']) {
            if (this.axis) {
                this.axis.addExtendedProperties(source._axis);
            }
            else {
                this.axis = new fhir.FhirInteger(source._axis);
            }
        }
        if (source['prism']) {
            this.prism = source.prism.map((x) => new fhir.VisionPrescriptionLensSpecificationPrism(x));
        }
        else {
            this.prism = [];
        }
        if (source['add']) {
            this.add = new fhir.FhirDecimal({ value: source.add });
        }
        if (source['_add']) {
            if (this.add) {
                this.add.addExtendedProperties(source._add);
            }
            else {
                this.add = new fhir.FhirDecimal(source._add);
            }
        }
        if (source['power']) {
            this.power = new fhir.FhirDecimal({ value: source.power });
        }
        if (source['_power']) {
            if (this.power) {
                this.power.addExtendedProperties(source._power);
            }
            else {
                this.power = new fhir.FhirDecimal(source._power);
            }
        }
        if (source['backCurve']) {
            this.backCurve = new fhir.FhirDecimal({ value: source.backCurve });
        }
        if (source['_backCurve']) {
            if (this.backCurve) {
                this.backCurve.addExtendedProperties(source._backCurve);
            }
            else {
                this.backCurve = new fhir.FhirDecimal(source._backCurve);
            }
        }
        if (source['diameter']) {
            this.diameter = new fhir.FhirDecimal({ value: source.diameter });
        }
        if (source['_diameter']) {
            if (this.diameter) {
                this.diameter.addExtendedProperties(source._diameter);
            }
            else {
                this.diameter = new fhir.FhirDecimal(source._diameter);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.Quantity(source.duration);
        }
        if (source['color']) {
            this.color = new fhir.FhirString({ value: source.color });
        }
        if (source['_color']) {
            if (this.color) {
                this.color.addExtendedProperties(source._color);
            }
            else {
                this.color = new fhir.FhirString(source._color);
            }
        }
        if (source['brand']) {
            this.brand = new fhir.FhirString({ value: source.brand });
        }
        if (source['_brand']) {
            if (this.brand) {
                this.brand.addExtendedProperties(source._brand);
            }
            else {
                this.brand = new fhir.FhirString(source._brand);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Required-bound Value Set for eye (VisionPrescription.lensSpecification.eye)
     */
    static get eyeRequiredCodes() {
        return VisionEyeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'VisionPrescription.lensSpecification';
        }
        if (!this['product']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property product fhir: VisionPrescription.lensSpecification.product:CodeableConcept', expression: [expression] });
        }
        if (this["product"]) {
            issues.push(...this.product.doModelValidation(expression + '.product'));
        }
        if (!this['eye']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property eye fhir: VisionPrescription.lensSpecification.eye:code', expression: [expression] });
        }
        if (this['eye'] && (!Object.values(VisionEyeCodes).includes(this.eye.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property eye fhir: VisionPrescription.lensSpecification.eye:code Required binding to: VisionEye', expression: [expression] });
        }
        if (this["eye"]) {
            issues.push(...this.eye.doModelValidation(expression + '.eye'));
        }
        if (this["sphere"]) {
            issues.push(...this.sphere.doModelValidation(expression + '.sphere'));
        }
        if (this["cylinder"]) {
            issues.push(...this.cylinder.doModelValidation(expression + '.cylinder'));
        }
        if (this["axis"]) {
            issues.push(...this.axis.doModelValidation(expression + '.axis'));
        }
        if (this["prism"]) {
            this.prism.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.prism[${i}]`)); });
        }
        if (this["add"]) {
            issues.push(...this.add.doModelValidation(expression + '.add'));
        }
        if (this["power"]) {
            issues.push(...this.power.doModelValidation(expression + '.power'));
        }
        if (this["backCurve"]) {
            issues.push(...this.backCurve.doModelValidation(expression + '.backCurve'));
        }
        if (this["diameter"]) {
            issues.push(...this.diameter.doModelValidation(expression + '.diameter'));
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation(expression + '.duration'));
        }
        if (this["color"]) {
            issues.push(...this.color.doModelValidation(expression + '.color'));
        }
        if (this["brand"]) {
            issues.push(...this.brand.doModelValidation(expression + '.brand'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecification._fts_dataType = 'VisionPrescriptionLensSpecification';
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource {
    /**
     * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'VisionPrescription';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateWritten']) {
            this.dateWritten = new fhir.FhirDateTime({ value: source.dateWritten });
        }
        else {
            this.dateWritten = null;
        }
        if (source['_dateWritten']) {
            if (this.dateWritten) {
                this.dateWritten.addExtendedProperties(source._dateWritten);
            }
            else {
                this.dateWritten = new fhir.FhirDateTime(source._dateWritten);
            }
        }
        if (source['prescriber']) {
            this.prescriber = new fhir.Reference(source.prescriber);
        }
        else {
            this.prescriber = null;
        }
        if (source['lensSpecification']) {
            this.lensSpecification = source.lensSpecification.map((x) => new fhir.VisionPrescriptionLensSpecification(x));
        }
        else {
            this.lensSpecification = [];
        }
    }
    /**
     * Required-bound Value Set for status (VisionPrescription.status)
     */
    static get statusRequiredCodes() {
        return FmStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'VisionPrescription';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: VisionPrescription.resourceType:"VisionPrescription"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: VisionPrescription.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(FmStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: VisionPrescription.status:code Required binding to: FmStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (!this['created']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property created fhir: VisionPrescription.created:dateTime', expression: [expression] });
        }
        if (this["created"]) {
            issues.push(...this.created.doModelValidation(expression + '.created'));
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient fhir: VisionPrescription.patient:Reference', expression: [expression] });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation(expression + '.patient'));
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation(expression + '.encounter'));
        }
        if (!this['dateWritten']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dateWritten fhir: VisionPrescription.dateWritten:dateTime', expression: [expression] });
        }
        if (this["dateWritten"]) {
            issues.push(...this.dateWritten.doModelValidation(expression + '.dateWritten'));
        }
        if (!this['prescriber']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property prescriber fhir: VisionPrescription.prescriber:Reference', expression: [expression] });
        }
        if (this["prescriber"]) {
            issues.push(...this.prescriber.doModelValidation(expression + '.prescriber'));
        }
        if (!this['lensSpecification']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property lensSpecification fhir: VisionPrescription.lensSpecification:lensSpecification', expression: [expression] });
        }
        else if (!Array.isArray(this.lensSpecification)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property lensSpecification fhir: VisionPrescription.lensSpecification:lensSpecification', expression: [expression] });
        }
        else if (this.lensSpecification.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property lensSpecification fhir: VisionPrescription.lensSpecification:lensSpecification', expression: [expression] });
        }
        if (this["lensSpecification"]) {
            this.lensSpecification.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.lensSpecification[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescription._fts_dataType = 'VisionPrescription';
//# sourceMappingURL=data:application/json;base64,