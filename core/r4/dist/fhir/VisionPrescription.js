// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VisionPrescription
import * as fhir from '../fhir.js';
// @ts-ignore
import { VisionBaseVsValidation } from '../fhirValueSets/VisionBaseVsValidation.js';
// @ts-ignore
import { VisionEyeVsValidation } from '../fhirValueSets/VisionEyeVsValidation.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
/**
 * Allows for adjustment on two axis.
 */
export class VisionPrescriptionLensSpecificationPrism extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecificationPrism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['amount'] !== undefined) {
            this.amount = new fhir.FhirDecimal({ value: source.amount }, options);
        }
        else {
            this.amount = null;
        }
        if (source['_amount']) {
            if (this.amount) {
                this.amount.addExtendedProperties(source._amount);
            }
            else {
                this.amount = new fhir.FhirDecimal(source._amount, options);
            }
        }
        if (source['base'] !== undefined) {
            this.base = new fhir.FhirCode({ value: source.base }, options);
        }
        else {
            this.base = null;
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirCode(source._base, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription.lensSpecification.prism';
        }
        iss.push(...this.vRS('amount', exp));
        iss.push(...this.vRSV('base', exp, 'VisionBase', VisionBaseVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecificationPrism._fts_dataType = 'VisionPrescriptionLensSpecificationPrism';
/**
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export class VisionPrescriptionLensSpecification extends fhir.BackboneElement {
    /**
     * Default constructor for VisionPrescriptionLensSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['product']) {
            this.product = new fhir.CodeableConcept(source.product, options);
        }
        else {
            this.product = null;
        }
        if (source['eye'] !== undefined) {
            this.eye = new fhir.FhirCode({ value: source.eye }, options);
        }
        else {
            this.eye = null;
        }
        if (source['_eye']) {
            if (this.eye) {
                this.eye.addExtendedProperties(source._eye);
            }
            else {
                this.eye = new fhir.FhirCode(source._eye, options);
            }
        }
        if (source['sphere'] !== undefined) {
            this.sphere = new fhir.FhirDecimal({ value: source.sphere }, options);
        }
        if (source['_sphere']) {
            if (this.sphere) {
                this.sphere.addExtendedProperties(source._sphere);
            }
            else {
                this.sphere = new fhir.FhirDecimal(source._sphere, options);
            }
        }
        if (source['cylinder'] !== undefined) {
            this.cylinder = new fhir.FhirDecimal({ value: source.cylinder }, options);
        }
        if (source['_cylinder']) {
            if (this.cylinder) {
                this.cylinder.addExtendedProperties(source._cylinder);
            }
            else {
                this.cylinder = new fhir.FhirDecimal(source._cylinder, options);
            }
        }
        if (source['axis'] !== undefined) {
            this.axis = new fhir.FhirInteger({ value: source.axis }, options);
        }
        if (source['_axis']) {
            if (this.axis) {
                this.axis.addExtendedProperties(source._axis);
            }
            else {
                this.axis = new fhir.FhirInteger(source._axis, options);
            }
        }
        if (source['prism']) {
            this.prism = source.prism.map((x) => new fhir.VisionPrescriptionLensSpecificationPrism(x, options));
        }
        else {
            this.prism = [];
        }
        if (source['add'] !== undefined) {
            this.add = new fhir.FhirDecimal({ value: source.add }, options);
        }
        if (source['_add']) {
            if (this.add) {
                this.add.addExtendedProperties(source._add);
            }
            else {
                this.add = new fhir.FhirDecimal(source._add, options);
            }
        }
        if (source['power'] !== undefined) {
            this.power = new fhir.FhirDecimal({ value: source.power }, options);
        }
        if (source['_power']) {
            if (this.power) {
                this.power.addExtendedProperties(source._power);
            }
            else {
                this.power = new fhir.FhirDecimal(source._power, options);
            }
        }
        if (source['backCurve'] !== undefined) {
            this.backCurve = new fhir.FhirDecimal({ value: source.backCurve }, options);
        }
        if (source['_backCurve']) {
            if (this.backCurve) {
                this.backCurve.addExtendedProperties(source._backCurve);
            }
            else {
                this.backCurve = new fhir.FhirDecimal(source._backCurve, options);
            }
        }
        if (source['diameter'] !== undefined) {
            this.diameter = new fhir.FhirDecimal({ value: source.diameter }, options);
        }
        if (source['_diameter']) {
            if (this.diameter) {
                this.diameter.addExtendedProperties(source._diameter);
            }
            else {
                this.diameter = new fhir.FhirDecimal(source._diameter, options);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.Quantity(source.duration, options);
        }
        if (source['color'] !== undefined) {
            this.color = new fhir.FhirString({ value: source.color }, options);
        }
        if (source['_color']) {
            if (this.color) {
                this.color.addExtendedProperties(source._color);
            }
            else {
                this.color = new fhir.FhirString(source._color, options);
            }
        }
        if (source['brand'] !== undefined) {
            this.brand = new fhir.FhirString({ value: source.brand }, options);
        }
        if (source['_brand']) {
            if (this.brand) {
                this.brand.addExtendedProperties(source._brand);
            }
            else {
                this.brand = new fhir.FhirString(source._brand, options);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription.lensSpecification';
        }
        iss.push(...this.vRS('product', exp));
        iss.push(...this.vRSV('eye', exp, 'VisionEye', VisionEyeVsValidation, 'r'));
        iss.push(...this.vOS('sphere', exp));
        iss.push(...this.vOS('cylinder', exp));
        iss.push(...this.vOS('axis', exp));
        iss.push(...this.vOA('prism', exp));
        iss.push(...this.vOS('add', exp));
        iss.push(...this.vOS('power', exp));
        iss.push(...this.vOS('backCurve', exp));
        iss.push(...this.vOS('diameter', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vOS('color', exp));
        iss.push(...this.vOS('brand', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescriptionLensSpecification._fts_dataType = 'VisionPrescriptionLensSpecification';
/**
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export class VisionPrescription extends fhir.DomainResource {
    /**
     * Default constructor for VisionPrescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'VisionPrescription';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['dateWritten'] !== undefined) {
            this.dateWritten = new fhir.FhirDateTime({ value: source.dateWritten }, options);
        }
        else {
            this.dateWritten = null;
        }
        if (source['_dateWritten']) {
            if (this.dateWritten) {
                this.dateWritten.addExtendedProperties(source._dateWritten);
            }
            else {
                this.dateWritten = new fhir.FhirDateTime(source._dateWritten, options);
            }
        }
        if (source['prescriber']) {
            this.prescriber = new fhir.Reference(source.prescriber, options);
        }
        else {
            this.prescriber = null;
        }
        if (source['lensSpecification']) {
            this.lensSpecification = source.lensSpecification.map((x) => new fhir.VisionPrescriptionLensSpecification(x, options));
        }
        else {
            this.lensSpecification = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'VisionPrescription';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vRS('created', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vRS('dateWritten', exp));
        iss.push(...this.vRS('prescriber', exp));
        iss.push(...this.vRA('lensSpecification', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VisionPrescription._fts_dataType = 'VisionPrescription';
//# sourceMappingURL=data:application/json;base64,