/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { NoteTypeCodings } from '../fhirValueSets/NoteTypeCodings.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { FmStatusCodings } from '../fhirValueSets/FmStatusCodings.js';
import { ClaimTypeCodings } from '../fhirValueSets/ClaimTypeCodings.js';
import { ClaimUseCodings } from '../fhirValueSets/ClaimUseCodings.js';
import { RemittanceOutcomeCodings } from '../fhirValueSets/RemittanceOutcomeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Money } from './Money.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { Quantity } from './Quantity.js';
import { Reference } from './Reference.js';
import { FhirDate } from './FhirDate.js';
import { Period } from './Period.js';
import { Address } from './Address.js';
import { Identifier } from './Identifier.js';
import { FhirString } from './FhirString.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Attachment } from './Attachment.js';

// <auto-generated/>
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
var ClaimResponseItemAdjudication = /** @class */ (function (_super) {
    __extends(ClaimResponseItemAdjudication, _super);
    /**
     * Default constructor for ClaimResponseItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseItemAdjudication(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['reason']) {
            _this.reason = new CodeableConcept(source.reason);
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        if (source['value']) {
            _this.value = new FhirDecimal({ value: source.value });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseItemAdjudication.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ClaimResponse.item.adjudication.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (this["reason"]) {
            (_b = outcome.issue).push.apply(_b, this.reason.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_c = outcome.issue).push.apply(_c, this.amount.doModelValidation().issue);
        }
        if (this["value"]) {
            (_d = outcome.issue).push.apply(_d, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseItemAdjudication._fts_dataType = 'ClaimResponseItemAdjudication';
    return ClaimResponseItemAdjudication;
}(BackboneElement));
/**
 * A sub-detail adjudication of a simple product or service.
 */
var ClaimResponseItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseItemDetailSubDetail, _super);
    /**
     * Default constructor for ClaimResponseItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseItemDetailSubDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['subDetailSequence']) {
            _this.subDetailSequence = new FhirPositiveInt({ value: source.subDetailSequence });
        }
        else {
            _this.subDetailSequence = null;
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ClaimResponseItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseItemDetailSubDetail.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['subDetailSequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subDetailSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.detail.subDetail.subDetailSequence:positiveInt', }));
        }
        if (this["subDetailSequence"]) {
            (_a = outcome.issue).push.apply(_a, this.subDetailSequence.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseItemDetailSubDetail._fts_dataType = 'ClaimResponseItemDetailSubDetail';
    return ClaimResponseItemDetailSubDetail;
}(BackboneElement));
/**
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
var ClaimResponseItemDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseItemDetail, _super);
    /**
     * Default constructor for ClaimResponseItemDetail - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseItemDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['detailSequence']) {
            _this.detailSequence = new FhirPositiveInt({ value: source.detailSequence });
        }
        else {
            _this.detailSequence = null;
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ClaimResponseItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['subDetail']) {
            _this.subDetail = source.subDetail.map(function (x) { return new ClaimResponseItemDetailSubDetail(x); });
        }
        else {
            _this.subDetail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseItemDetail.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['detailSequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property detailSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.detail.detailSequence:positiveInt', }));
        }
        if (this["detailSequence"]) {
            (_a = outcome.issue).push.apply(_a, this.detailSequence.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.detail.adjudication:ClaimResponse.item.adjudication', }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseItemDetail._fts_dataType = 'ClaimResponseItemDetail';
    return ClaimResponseItemDetail;
}(BackboneElement));
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
var ClaimResponseItem = /** @class */ (function (_super) {
    __extends(ClaimResponseItem, _super);
    /**
     * Default constructor for ClaimResponseItem - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['itemSequence']) {
            _this.itemSequence = new FhirPositiveInt({ value: source.itemSequence });
        }
        else {
            _this.itemSequence = null;
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ClaimResponseItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['detail']) {
            _this.detail = source.detail.map(function (x) { return new ClaimResponseItemDetail(x); });
        }
        else {
            _this.detail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseItem.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['itemSequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property itemSequence:fhir.FhirPositiveInt fhir: ClaimResponse.item.itemSequence:positiveInt', }));
        }
        if (this["itemSequence"]) {
            (_a = outcome.issue).push.apply(_a, this.itemSequence.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication', }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication', }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.item.adjudication:adjudication', }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["detail"]) {
            this.detail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseItem._fts_dataType = 'ClaimResponseItem';
    return ClaimResponseItem;
}(BackboneElement));
/**
 * The third-tier service adjudications for payor added services.
 */
var ClaimResponseAddItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseAddItemDetailSubDetail, _super);
    /**
     * Default constructor for ClaimResponseAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseAddItemDetailSubDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ClaimResponseItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseAddItemDetailSubDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.detail.subDetail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_a = outcome.issue).push.apply(_a, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_c = outcome.issue).push.apply(_c, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_d = outcome.issue).push.apply(_d, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_e = outcome.issue).push.apply(_e, this.net.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.subDetail.adjudication:ClaimResponse.item.adjudication', }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseAddItemDetailSubDetail._fts_dataType = 'ClaimResponseAddItemDetailSubDetail';
    return ClaimResponseAddItemDetailSubDetail;
}(BackboneElement));
/**
 * The second-tier service adjudications for payor added services.
 */
var ClaimResponseAddItemDetail = /** @class */ (function (_super) {
    __extends(ClaimResponseAddItemDetail, _super);
    /**
     * Default constructor for ClaimResponseAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseAddItemDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ClaimResponseItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['subDetail']) {
            _this.subDetail = source.subDetail.map(function (x) { return new ClaimResponseAddItemDetailSubDetail(x); });
        }
        else {
            _this.subDetail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseAddItemDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.detail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_a = outcome.issue).push.apply(_a, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_c = outcome.issue).push.apply(_c, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_d = outcome.issue).push.apply(_d, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_e = outcome.issue).push.apply(_e, this.net.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.detail.adjudication:ClaimResponse.item.adjudication', }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseAddItemDetail._fts_dataType = 'ClaimResponseAddItemDetail';
    return ClaimResponseAddItemDetail;
}(BackboneElement));
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
var ClaimResponseAddItem = /** @class */ (function (_super) {
    __extends(ClaimResponseAddItem, _super);
    /**
     * Default constructor for ClaimResponseAddItem - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseAddItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['itemSequence']) {
            _this.itemSequence = source.itemSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.itemSequence = [];
        }
        if (source['detailSequence']) {
            _this.detailSequence = source.detailSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.detailSequence = [];
        }
        if (source['subdetailSequence']) {
            _this.subdetailSequence = source.subdetailSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.subdetailSequence = [];
        }
        if (source['provider']) {
            _this.provider = source.provider.map(function (x) { return new Reference(x); });
        }
        else {
            _this.provider = [];
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['serviced']) {
            _this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            _this.serviced = new FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            _this.serviced = new Period(source.servicedPeriod);
        }
        if (source['location']) {
            _this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            _this.location = new CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            _this.location = new Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            _this.location = new Reference(source.locationReference);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['bodySite']) {
            _this.bodySite = new CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            _this.subSite = source.subSite.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.subSite = [];
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ClaimResponseItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['detail']) {
            _this.detail = source.detail.map(function (x) { return new ClaimResponseAddItemDetail(x); });
        }
        else {
            _this.detail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseAddItem.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["itemSequence"]) {
            this.itemSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["detailSequence"]) {
            this.detailSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subdetailSequence"]) {
            this.subdetailSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["provider"]) {
            this.provider.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ClaimResponse.addItem.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_a = outcome.issue).push.apply(_a, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_c = outcome.issue).push.apply(_c, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_d = outcome.issue).push.apply(_d, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_e = outcome.issue).push.apply(_e, this.net.doModelValidation().issue);
        }
        if (this["bodySite"]) {
            (_f = outcome.issue).push.apply(_f, this.bodySite.doModelValidation().issue);
        }
        if (this["subSite"]) {
            this.subSite.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['adjudication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (!Array.isArray(this.adjudication)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication', }));
        }
        else if (this.adjudication.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property adjudication:fhir.ClaimResponseItemAdjudication[] fhir: ClaimResponse.addItem.adjudication:ClaimResponse.item.adjudication', }));
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["detail"]) {
            this.detail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseAddItem._fts_dataType = 'ClaimResponseAddItem';
    /**
     * Internal flag to properly serialize choice-type element ClaimResponse.addItem.serviced[x]
     */
    ClaimResponseAddItem._fts_servicedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ClaimResponse.addItem.location[x]
     */
    ClaimResponseAddItem._fts_locationIsChoice = true;
    return ClaimResponseAddItem;
}(BackboneElement));
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
var ClaimResponseTotal = /** @class */ (function (_super) {
    __extends(ClaimResponseTotal, _super);
    /**
     * Default constructor for ClaimResponseTotal - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseTotal(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        else {
            _this.amount = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseTotal.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ClaimResponse.total.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (!this['amount']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property amount:fhir.Money fhir: ClaimResponse.total.amount:Money', }));
        }
        if (this["amount"]) {
            (_b = outcome.issue).push.apply(_b, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseTotal._fts_dataType = 'ClaimResponseTotal';
    return ClaimResponseTotal;
}(BackboneElement));
/**
 * Payment details for the adjudication of the claim.
 */
var ClaimResponsePayment = /** @class */ (function (_super) {
    __extends(ClaimResponsePayment, _super);
    /**
     * Default constructor for ClaimResponsePayment - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponsePayment(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['adjustment']) {
            _this.adjustment = new Money(source.adjustment);
        }
        if (source['adjustmentReason']) {
            _this.adjustmentReason = new CodeableConcept(source.adjustmentReason);
        }
        if (source['date']) {
            _this.date = new FhirDate({ value: source.date });
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        else {
            _this.amount = null;
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponsePayment.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ClaimResponse.payment.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["adjustment"]) {
            (_b = outcome.issue).push.apply(_b, this.adjustment.doModelValidation().issue);
        }
        if (this["adjustmentReason"]) {
            (_c = outcome.issue).push.apply(_c, this.adjustmentReason.doModelValidation().issue);
        }
        if (this["date"]) {
            (_d = outcome.issue).push.apply(_d, this.date.doModelValidation().issue);
        }
        if (!this['amount']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property amount:fhir.Money fhir: ClaimResponse.payment.amount:Money', }));
        }
        if (this["amount"]) {
            (_e = outcome.issue).push.apply(_e, this.amount.doModelValidation().issue);
        }
        if (this["identifier"]) {
            (_f = outcome.issue).push.apply(_f, this.identifier.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponsePayment._fts_dataType = 'ClaimResponsePayment';
    return ClaimResponsePayment;
}(BackboneElement));
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
var ClaimResponseProcessNote = /** @class */ (function (_super) {
    __extends(ClaimResponseProcessNote, _super);
    /**
     * Default constructor for ClaimResponseProcessNote - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseProcessNote(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['number']) {
            _this.number = new FhirPositiveInt({ value: source.number });
        }
        if (source['type']) {
            _this.type = source.type;
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        else {
            _this.text = null;
        }
        if (source['language']) {
            _this.language = new CodeableConcept(source.language);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (ClaimResponse.processNote.type)
     */
    ClaimResponseProcessNote.typeRequiredCoding = function () {
        return NoteTypeCodings;
    };
    /**
     * Preferred-bound Value Set for language (ClaimResponse.processNote.language)
     */
    ClaimResponseProcessNote.languagePreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseProcessNote.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["number"]) {
            (_a = outcome.issue).push.apply(_a, this.number.doModelValidation().issue);
        }
        if (!this['text']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property text:fhir.FhirString fhir: ClaimResponse.processNote.text:string', }));
        }
        if (this["text"]) {
            (_b = outcome.issue).push.apply(_b, this.text.doModelValidation().issue);
        }
        if (this["language"]) {
            (_c = outcome.issue).push.apply(_c, this.language.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseProcessNote._fts_dataType = 'ClaimResponseProcessNote';
    return ClaimResponseProcessNote;
}(BackboneElement));
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
var ClaimResponseInsurance = /** @class */ (function (_super) {
    __extends(ClaimResponseInsurance, _super);
    /**
     * Default constructor for ClaimResponseInsurance - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseInsurance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['focal']) {
            _this.focal = new FhirBoolean({ value: source.focal });
        }
        else {
            _this.focal = null;
        }
        if (source['coverage']) {
            _this.coverage = new Reference(source.coverage);
        }
        else {
            _this.coverage = null;
        }
        if (source['businessArrangement']) {
            _this.businessArrangement = new FhirString({ value: source.businessArrangement });
        }
        if (source['claimResponse']) {
            _this.claimResponse = new Reference(source.claimResponse);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseInsurance.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ClaimResponse.insurance.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['focal']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property focal:fhir.FhirBoolean fhir: ClaimResponse.insurance.focal:boolean', }));
        }
        if (this["focal"]) {
            (_b = outcome.issue).push.apply(_b, this.focal.doModelValidation().issue);
        }
        if (!this['coverage']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property coverage:fhir.Reference fhir: ClaimResponse.insurance.coverage:Reference', }));
        }
        if (this["coverage"]) {
            (_c = outcome.issue).push.apply(_c, this.coverage.doModelValidation().issue);
        }
        if (this["businessArrangement"]) {
            (_d = outcome.issue).push.apply(_d, this.businessArrangement.doModelValidation().issue);
        }
        if (this["claimResponse"]) {
            (_e = outcome.issue).push.apply(_e, this.claimResponse.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseInsurance._fts_dataType = 'ClaimResponseInsurance';
    return ClaimResponseInsurance;
}(BackboneElement));
/**
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
var ClaimResponseError = /** @class */ (function (_super) {
    __extends(ClaimResponseError, _super);
    /**
     * Default constructor for ClaimResponseError - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponseError(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['itemSequence']) {
            _this.itemSequence = new FhirPositiveInt({ value: source.itemSequence });
        }
        if (source['detailSequence']) {
            _this.detailSequence = new FhirPositiveInt({ value: source.detailSequence });
        }
        if (source['subDetailSequence']) {
            _this.subDetailSequence = new FhirPositiveInt({ value: source.subDetailSequence });
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponseError.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["itemSequence"]) {
            (_a = outcome.issue).push.apply(_a, this.itemSequence.doModelValidation().issue);
        }
        if (this["detailSequence"]) {
            (_b = outcome.issue).push.apply(_b, this.detailSequence.doModelValidation().issue);
        }
        if (this["subDetailSequence"]) {
            (_c = outcome.issue).push.apply(_c, this.subDetailSequence.doModelValidation().issue);
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: ClaimResponse.error.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_d = outcome.issue).push.apply(_d, this.code.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponseError._fts_dataType = 'ClaimResponseError';
    return ClaimResponseError;
}(BackboneElement));
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
var ClaimResponse = /** @class */ (function (_super) {
    __extends(ClaimResponse, _super);
    /**
     * Default constructor for ClaimResponse - initializes any required elements to null if a value is not provided.
     */
    function ClaimResponse(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ClaimResponse';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['subType']) {
            _this.subType = new CodeableConcept(source.subType);
        }
        if (source['use']) {
            _this.use = source.use;
        }
        else {
            _this.use = null;
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        if (source['created']) {
            _this.created = new FhirDateTime({ value: source.created });
        }
        else {
            _this.created = null;
        }
        if (source['insurer']) {
            _this.insurer = new Reference(source.insurer);
        }
        else {
            _this.insurer = null;
        }
        if (source['requestor']) {
            _this.requestor = new Reference(source.requestor);
        }
        if (source['request']) {
            _this.request = new Reference(source.request);
        }
        if (source['outcome']) {
            _this.outcome = source.outcome;
        }
        else {
            _this.outcome = null;
        }
        if (source['disposition']) {
            _this.disposition = new FhirString({ value: source.disposition });
        }
        if (source['preAuthRef']) {
            _this.preAuthRef = new FhirString({ value: source.preAuthRef });
        }
        if (source['preAuthPeriod']) {
            _this.preAuthPeriod = new Period(source.preAuthPeriod);
        }
        if (source['payeeType']) {
            _this.payeeType = new CodeableConcept(source.payeeType);
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new ClaimResponseItem(x); });
        }
        else {
            _this.item = [];
        }
        if (source['addItem']) {
            _this.addItem = source.addItem.map(function (x) { return new ClaimResponseAddItem(x); });
        }
        else {
            _this.addItem = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ClaimResponseItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['total']) {
            _this.total = source.total.map(function (x) { return new ClaimResponseTotal(x); });
        }
        else {
            _this.total = [];
        }
        if (source['payment']) {
            _this.payment = new ClaimResponsePayment(source.payment);
        }
        if (source['fundsReserve']) {
            _this.fundsReserve = new CodeableConcept(source.fundsReserve);
        }
        if (source['formCode']) {
            _this.formCode = new CodeableConcept(source.formCode);
        }
        if (source['form']) {
            _this.form = new Attachment(source.form);
        }
        if (source['processNote']) {
            _this.processNote = source.processNote.map(function (x) { return new ClaimResponseProcessNote(x); });
        }
        else {
            _this.processNote = [];
        }
        if (source['communicationRequest']) {
            _this.communicationRequest = source.communicationRequest.map(function (x) { return new Reference(x); });
        }
        else {
            _this.communicationRequest = [];
        }
        if (source['insurance']) {
            _this.insurance = source.insurance.map(function (x) { return new ClaimResponseInsurance(x); });
        }
        else {
            _this.insurance = [];
        }
        if (source['error']) {
            _this.error = source.error.map(function (x) { return new ClaimResponseError(x); });
        }
        else {
            _this.error = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ClaimResponse.status)
     */
    ClaimResponse.statusRequiredCoding = function () {
        return FmStatusCodings;
    };
    /**
     * Extensible-bound Value Set for type (ClaimResponse.type)
     */
    ClaimResponse.typeExtensibleCoding = function () {
        return ClaimTypeCodings;
    };
    /**
     * Required-bound Value Set for use (ClaimResponse.use)
     */
    ClaimResponse.useRequiredCoding = function () {
        return ClaimUseCodings;
    };
    /**
     * Required-bound Value Set for outcome (ClaimResponse.outcome)
     */
    ClaimResponse.outcomeRequiredCoding = function () {
        return RemittanceOutcomeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimResponse.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ClaimResponse" fhir: ClaimResponse.resourceType:"ClaimResponse"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:FmStatusCodeType fhir: ClaimResponse.status:code', }));
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ClaimResponse.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            (_b = outcome.issue).push.apply(_b, this.subType.doModelValidation().issue);
        }
        if (!this['use']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property use:ClaimUseCodeType fhir: ClaimResponse.use:code', }));
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: ClaimResponse.patient:Reference', }));
        }
        if (this["patient"]) {
            (_c = outcome.issue).push.apply(_c, this.patient.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: ClaimResponse.created:dateTime', }));
        }
        if (this["created"]) {
            (_d = outcome.issue).push.apply(_d, this.created.doModelValidation().issue);
        }
        if (!this['insurer']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property insurer:fhir.Reference fhir: ClaimResponse.insurer:Reference', }));
        }
        if (this["insurer"]) {
            (_e = outcome.issue).push.apply(_e, this.insurer.doModelValidation().issue);
        }
        if (this["requestor"]) {
            (_f = outcome.issue).push.apply(_f, this.requestor.doModelValidation().issue);
        }
        if (this["request"]) {
            (_g = outcome.issue).push.apply(_g, this.request.doModelValidation().issue);
        }
        if (!this['outcome']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property outcome:RemittanceOutcomeCodeType fhir: ClaimResponse.outcome:code', }));
        }
        if (this["disposition"]) {
            (_h = outcome.issue).push.apply(_h, this.disposition.doModelValidation().issue);
        }
        if (this["preAuthRef"]) {
            (_j = outcome.issue).push.apply(_j, this.preAuthRef.doModelValidation().issue);
        }
        if (this["preAuthPeriod"]) {
            (_k = outcome.issue).push.apply(_k, this.preAuthPeriod.doModelValidation().issue);
        }
        if (this["payeeType"]) {
            (_l = outcome.issue).push.apply(_l, this.payeeType.doModelValidation().issue);
        }
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["addItem"]) {
            this.addItem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["total"]) {
            this.total.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["payment"]) {
            (_m = outcome.issue).push.apply(_m, this.payment.doModelValidation().issue);
        }
        if (this["fundsReserve"]) {
            (_o = outcome.issue).push.apply(_o, this.fundsReserve.doModelValidation().issue);
        }
        if (this["formCode"]) {
            (_p = outcome.issue).push.apply(_p, this.formCode.doModelValidation().issue);
        }
        if (this["form"]) {
            (_q = outcome.issue).push.apply(_q, this.form.doModelValidation().issue);
        }
        if (this["processNote"]) {
            this.processNote.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["communicationRequest"]) {
            this.communicationRequest.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["insurance"]) {
            this.insurance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["error"]) {
            this.error.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimResponse._fts_dataType = 'ClaimResponse';
    return ClaimResponse;
}(DomainResource));

export { ClaimResponse, ClaimResponseAddItem, ClaimResponseAddItemDetail, ClaimResponseAddItemDetailSubDetail, ClaimResponseError, ClaimResponseInsurance, ClaimResponseItem, ClaimResponseItemAdjudication, ClaimResponseItemDetail, ClaimResponseItemDetailSubDetail, ClaimResponsePayment, ClaimResponseProcessNote, ClaimResponseTotal };
//# sourceMappingURL=ClaimResponse.js.map
