/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { EpisodeOfCareStatusCodings } from '../fhirValueSets/EpisodeOfCareStatusCodings.js';
import { DiagnosisRoleCodings } from '../fhirValueSets/DiagnosisRoleCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Period } from './Period.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { Identifier } from './Identifier.js';

// <auto-generated/>
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
var EpisodeOfCareStatusHistory = /** @class */ (function (_super) {
    __extends(EpisodeOfCareStatusHistory, _super);
    /**
     * Default constructor for EpisodeOfCareStatusHistory - initializes any required elements to null if a value is not provided.
     */
    function EpisodeOfCareStatusHistory(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        else {
            _this.period = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (EpisodeOfCare.statusHistory.status)
     */
    EpisodeOfCareStatusHistory.statusRequiredCoding = function () {
        return EpisodeOfCareStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EpisodeOfCareStatusHistory.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:EpisodeOfCareStatusCodeType fhir: EpisodeOfCare.statusHistory.status:code', }));
        }
        if (!this['period']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property period:fhir.Period fhir: EpisodeOfCare.statusHistory.period:Period', }));
        }
        if (this["period"]) {
            (_a = outcome.issue).push.apply(_a, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EpisodeOfCareStatusHistory._fts_dataType = 'EpisodeOfCareStatusHistory';
    return EpisodeOfCareStatusHistory;
}(BackboneElement));
/**
 * The list of diagnosis relevant to this episode of care.
 */
var EpisodeOfCareDiagnosis = /** @class */ (function (_super) {
    __extends(EpisodeOfCareDiagnosis, _super);
    /**
     * Default constructor for EpisodeOfCareDiagnosis - initializes any required elements to null if a value is not provided.
     */
    function EpisodeOfCareDiagnosis(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['condition']) {
            _this.condition = new Reference(source.condition);
        }
        else {
            _this.condition = null;
        }
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        if (source['rank']) {
            _this.rank = new FhirPositiveInt({ value: source.rank });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for role (EpisodeOfCare.diagnosis.role)
     */
    EpisodeOfCareDiagnosis.rolePreferredCoding = function () {
        return DiagnosisRoleCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EpisodeOfCareDiagnosis.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['condition']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property condition:fhir.Reference fhir: EpisodeOfCare.diagnosis.condition:Reference', }));
        }
        if (this["condition"]) {
            (_a = outcome.issue).push.apply(_a, this.condition.doModelValidation().issue);
        }
        if (this["role"]) {
            (_b = outcome.issue).push.apply(_b, this.role.doModelValidation().issue);
        }
        if (this["rank"]) {
            (_c = outcome.issue).push.apply(_c, this.rank.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EpisodeOfCareDiagnosis._fts_dataType = 'EpisodeOfCareDiagnosis';
    return EpisodeOfCareDiagnosis;
}(BackboneElement));
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
var EpisodeOfCare = /** @class */ (function (_super) {
    __extends(EpisodeOfCare, _super);
    /**
     * Default constructor for EpisodeOfCare - initializes any required elements to null if a value is not provided.
     */
    function EpisodeOfCare(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'EpisodeOfCare';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusHistory']) {
            _this.statusHistory = source.statusHistory.map(function (x) { return new EpisodeOfCareStatusHistory(x); });
        }
        else {
            _this.statusHistory = [];
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['diagnosis']) {
            _this.diagnosis = source.diagnosis.map(function (x) { return new EpisodeOfCareDiagnosis(x); });
        }
        else {
            _this.diagnosis = [];
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        if (source['managingOrganization']) {
            _this.managingOrganization = new Reference(source.managingOrganization);
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['referralRequest']) {
            _this.referralRequest = source.referralRequest.map(function (x) { return new Reference(x); });
        }
        else {
            _this.referralRequest = [];
        }
        if (source['careManager']) {
            _this.careManager = new Reference(source.careManager);
        }
        if (source['team']) {
            _this.team = source.team.map(function (x) { return new Reference(x); });
        }
        else {
            _this.team = [];
        }
        if (source['account']) {
            _this.account = source.account.map(function (x) { return new Reference(x); });
        }
        else {
            _this.account = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (EpisodeOfCare.status)
     */
    EpisodeOfCare.statusRequiredCoding = function () {
        return EpisodeOfCareStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EpisodeOfCare.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"EpisodeOfCare" fhir: EpisodeOfCare.resourceType:"EpisodeOfCare"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:EpisodeOfCareStatusCodeType fhir: EpisodeOfCare.status:code', }));
        }
        if (this["statusHistory"]) {
            this.statusHistory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: EpisodeOfCare.patient:Reference', }));
        }
        if (this["patient"]) {
            (_a = outcome.issue).push.apply(_a, this.patient.doModelValidation().issue);
        }
        if (this["managingOrganization"]) {
            (_b = outcome.issue).push.apply(_b, this.managingOrganization.doModelValidation().issue);
        }
        if (this["period"]) {
            (_c = outcome.issue).push.apply(_c, this.period.doModelValidation().issue);
        }
        if (this["referralRequest"]) {
            this.referralRequest.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["careManager"]) {
            (_d = outcome.issue).push.apply(_d, this.careManager.doModelValidation().issue);
        }
        if (this["team"]) {
            this.team.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["account"]) {
            this.account.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EpisodeOfCare._fts_dataType = 'EpisodeOfCare';
    return EpisodeOfCare;
}(DomainResource));

export { EpisodeOfCare, EpisodeOfCareDiagnosis, EpisodeOfCareStatusHistory };
//# sourceMappingURL=EpisodeOfCare.js.map
