// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EpisodeOfCare
import * as fhir from '../fhir.js';
// @ts-ignore
import { EpisodeOfCareStatusCodes } from '../fhirValueSets/EpisodeOfCareStatusCodes.js';
// @ts-ignore
import { DiagnosisRoleCodings, } from '../fhirValueSets/DiagnosisRoleCodings.js';
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export class EpisodeOfCareStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EpisodeOfCareStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Required-bound Value Set for status (EpisodeOfCare.statusHistory.status)
     */
    static get statusRequiredCodes() {
        return EpisodeOfCareStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<EpisodeOfCareStatusCodeType> fhir: EpisodeOfCare.statusHistory.status:code' });
        }
        if (this['status'] && (!Object.values(EpisodeOfCareStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<EpisodeOfCareStatusCodeType> fhir: EpisodeOfCare.statusHistory.status:code Required binding to: EpisodeOfCareStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['period']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property period:fhir.Period fhir: EpisodeOfCare.statusHistory.period:Period' });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EpisodeOfCareStatusHistory._fts_dataType = 'EpisodeOfCareStatusHistory';
/**
 * The list of diagnosis relevant to this episode of care.
 */
export class EpisodeOfCareDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for EpisodeOfCareDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        else {
            this.condition = null;
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['rank']) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank });
        }
    }
    /**
     * Preferred-bound Value Set for role (EpisodeOfCare.diagnosis.role)
     */
    static get rolePreferredCodings() {
        return DiagnosisRoleCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['condition']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property condition:fhir.Reference fhir: EpisodeOfCare.diagnosis.condition:Reference' });
        }
        if (this["condition"]) {
            issues.push(...this.condition.doModelValidation());
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        if (this["rank"]) {
            issues.push(...this.rank.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EpisodeOfCareDiagnosis._fts_dataType = 'EpisodeOfCareDiagnosis';
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export class EpisodeOfCare extends fhir.DomainResource {
    /**
     * Default constructor for EpisodeOfCare - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'EpisodeOfCare';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EpisodeOfCareStatusHistory(x));
        }
        else {
            this.statusHistory = [];
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.EpisodeOfCareDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['referralRequest']) {
            this.referralRequest = source.referralRequest.map((x) => new fhir.Reference(x));
        }
        else {
            this.referralRequest = [];
        }
        if (source['careManager']) {
            this.careManager = new fhir.Reference(source.careManager);
        }
        if (source['team']) {
            this.team = source.team.map((x) => new fhir.Reference(x));
        }
        else {
            this.team = [];
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        else {
            this.account = [];
        }
    }
    /**
     * Required-bound Value Set for status (EpisodeOfCare.status)
     */
    static get statusRequiredCodes() {
        return EpisodeOfCareStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"EpisodeOfCare" fhir: EpisodeOfCare.resourceType:"EpisodeOfCare"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<EpisodeOfCareStatusCodeType> fhir: EpisodeOfCare.status:code' });
        }
        if (this['status'] && (!Object.values(EpisodeOfCareStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<EpisodeOfCareStatusCodeType> fhir: EpisodeOfCare.status:code Required binding to: EpisodeOfCareStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusHistory"]) {
            this.statusHistory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient:fhir.Reference fhir: EpisodeOfCare.patient:Reference' });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["managingOrganization"]) {
            issues.push(...this.managingOrganization.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["referralRequest"]) {
            this.referralRequest.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["careManager"]) {
            issues.push(...this.careManager.doModelValidation());
        }
        if (this["team"]) {
            this.team.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["account"]) {
            this.account.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EpisodeOfCare._fts_dataType = 'EpisodeOfCare';
//# sourceMappingURL=data:application/json;base64,