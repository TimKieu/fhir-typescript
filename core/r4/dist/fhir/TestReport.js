/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ReportParticipantTypeCodings } from '../fhirValueSets/ReportParticipantTypeCodings.js';
import { ReportActionResultCodesCodings } from '../fhirValueSets/ReportActionResultCodesCodings.js';
import { ReportStatusCodesCodings } from '../fhirValueSets/ReportStatusCodesCodings.js';
import { ReportResultCodesCodings } from '../fhirValueSets/ReportResultCodesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirUri } from './FhirUri.js';
import { FhirString } from './FhirString.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirDateTime } from './FhirDateTime.js';

// <auto-generated/>
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
var TestReportParticipant = /** @class */ (function (_super) {
    __extends(TestReportParticipant, _super);
    /**
     * Default constructor for TestReportParticipant - initializes any required elements to null if a value is not provided.
     */
    function TestReportParticipant(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['uri']) {
            _this.uri = new FhirUri({ value: source.uri });
        }
        else {
            _this.uri = null;
        }
        if (source['display']) {
            _this.display = new FhirString({ value: source.display });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (TestReport.participant.type)
     */
    TestReportParticipant.typeRequiredCoding = function () {
        return ReportParticipantTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportParticipant.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:ReportParticipantTypeCodeType fhir: TestReport.participant.type:code', }));
        }
        if (!this['uri']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property uri:fhir.FhirUri fhir: TestReport.participant.uri:uri', }));
        }
        if (this["uri"]) {
            (_a = outcome.issue).push.apply(_a, this.uri.doModelValidation().issue);
        }
        if (this["display"]) {
            (_b = outcome.issue).push.apply(_b, this.display.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportParticipant._fts_dataType = 'TestReportParticipant';
    return TestReportParticipant;
}(BackboneElement));
/**
 * The operation performed.
 */
var TestReportSetupActionOperation = /** @class */ (function (_super) {
    __extends(TestReportSetupActionOperation, _super);
    /**
     * Default constructor for TestReportSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    function TestReportSetupActionOperation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['result']) {
            _this.result = source.result;
        }
        else {
            _this.result = null;
        }
        if (source['message']) {
            _this.message = new FhirMarkdown({ value: source.message });
        }
        if (source['detail']) {
            _this.detail = new FhirUri({ value: source.detail });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for result (TestReport.setup.action.operation.result)
     */
    TestReportSetupActionOperation.resultRequiredCoding = function () {
        return ReportActionResultCodesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportSetupActionOperation.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['result']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property result:ReportActionResultCodesCodeType fhir: TestReport.setup.action.operation.result:code', }));
        }
        if (this["message"]) {
            (_a = outcome.issue).push.apply(_a, this.message.doModelValidation().issue);
        }
        if (this["detail"]) {
            (_b = outcome.issue).push.apply(_b, this.detail.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportSetupActionOperation._fts_dataType = 'TestReportSetupActionOperation';
    return TestReportSetupActionOperation;
}(BackboneElement));
/**
 * The results of the assertion performed on the previous operations.
 */
var TestReportSetupActionAssert = /** @class */ (function (_super) {
    __extends(TestReportSetupActionAssert, _super);
    /**
     * Default constructor for TestReportSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    function TestReportSetupActionAssert(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['result']) {
            _this.result = source.result;
        }
        else {
            _this.result = null;
        }
        if (source['message']) {
            _this.message = new FhirMarkdown({ value: source.message });
        }
        if (source['detail']) {
            _this.detail = new FhirString({ value: source.detail });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for result (TestReport.setup.action.assert.result)
     */
    TestReportSetupActionAssert.resultRequiredCoding = function () {
        return ReportActionResultCodesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportSetupActionAssert.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['result']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property result:ReportActionResultCodesCodeType fhir: TestReport.setup.action.assert.result:code', }));
        }
        if (this["message"]) {
            (_a = outcome.issue).push.apply(_a, this.message.doModelValidation().issue);
        }
        if (this["detail"]) {
            (_b = outcome.issue).push.apply(_b, this.detail.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportSetupActionAssert._fts_dataType = 'TestReportSetupActionAssert';
    return TestReportSetupActionAssert;
}(BackboneElement));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestReportSetupAction = /** @class */ (function (_super) {
    __extends(TestReportSetupAction, _super);
    /**
     * Default constructor for TestReportSetupAction - initializes any required elements to null if a value is not provided.
     */
    function TestReportSetupAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['operation']) {
            _this.operation = new TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            _this.assert = new TestReportSetupActionAssert(source.assert);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportSetupAction.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["operation"]) {
            (_a = outcome.issue).push.apply(_a, this.operation.doModelValidation().issue);
        }
        if (this["assert"]) {
            (_b = outcome.issue).push.apply(_b, this.assert.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportSetupAction._fts_dataType = 'TestReportSetupAction';
    return TestReportSetupAction;
}(BackboneElement));
/**
 * The results of the series of required setup operations before the tests were executed.
 */
var TestReportSetup = /** @class */ (function (_super) {
    __extends(TestReportSetup, _super);
    /**
     * Default constructor for TestReportSetup - initializes any required elements to null if a value is not provided.
     */
    function TestReportSetup(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new TestReportSetupAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportSetup.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['action']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action', }));
        }
        else if (!Array.isArray(this.action)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action', }));
        }
        else if (this.action.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action', }));
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportSetup._fts_dataType = 'TestReportSetup';
    return TestReportSetup;
}(BackboneElement));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestReportTestAction = /** @class */ (function (_super) {
    __extends(TestReportTestAction, _super);
    /**
     * Default constructor for TestReportTestAction - initializes any required elements to null if a value is not provided.
     */
    function TestReportTestAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['operation']) {
            _this.operation = new TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            _this.assert = new TestReportSetupActionAssert(source.assert);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportTestAction.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["operation"]) {
            (_a = outcome.issue).push.apply(_a, this.operation.doModelValidation().issue);
        }
        if (this["assert"]) {
            (_b = outcome.issue).push.apply(_b, this.assert.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportTestAction._fts_dataType = 'TestReportTestAction';
    return TestReportTestAction;
}(BackboneElement));
/**
 * A test executed from the test script.
 */
var TestReportTest = /** @class */ (function (_super) {
    __extends(TestReportTest, _super);
    /**
     * Default constructor for TestReportTest - initializes any required elements to null if a value is not provided.
     */
    function TestReportTest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new TestReportTestAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportTest.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (!this['action']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action', }));
        }
        else if (!Array.isArray(this.action)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action', }));
        }
        else if (this.action.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action', }));
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportTest._fts_dataType = 'TestReportTest';
    return TestReportTest;
}(BackboneElement));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestReportTeardownAction = /** @class */ (function (_super) {
    __extends(TestReportTeardownAction, _super);
    /**
     * Default constructor for TestReportTeardownAction - initializes any required elements to null if a value is not provided.
     */
    function TestReportTeardownAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['operation']) {
            _this.operation = new TestReportSetupActionOperation(source.operation);
        }
        else {
            _this.operation = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportTeardownAction.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['operation']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property operation:fhir.TestReportSetupActionOperation fhir: TestReport.teardown.action.operation:TestReport.setup.action.operation', }));
        }
        if (this["operation"]) {
            (_a = outcome.issue).push.apply(_a, this.operation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportTeardownAction._fts_dataType = 'TestReportTeardownAction';
    return TestReportTeardownAction;
}(BackboneElement));
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
var TestReportTeardown = /** @class */ (function (_super) {
    __extends(TestReportTeardown, _super);
    /**
     * Default constructor for TestReportTeardown - initializes any required elements to null if a value is not provided.
     */
    function TestReportTeardown(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new TestReportTeardownAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReportTeardown.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['action']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action', }));
        }
        else if (!Array.isArray(this.action)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action', }));
        }
        else if (this.action.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action', }));
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReportTeardown._fts_dataType = 'TestReportTeardown';
    return TestReportTeardown;
}(BackboneElement));
/**
 * A summary of information based on the results of executing a TestScript.
 */
var TestReport = /** @class */ (function (_super) {
    __extends(TestReport, _super);
    /**
     * Default constructor for TestReport - initializes any required elements to null if a value is not provided.
     */
    function TestReport(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'TestReport';
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['testScript']) {
            _this.testScript = new Reference(source.testScript);
        }
        else {
            _this.testScript = null;
        }
        if (source['result']) {
            _this.result = source.result;
        }
        else {
            _this.result = null;
        }
        if (source['score']) {
            _this.score = new FhirDecimal({ value: source.score });
        }
        if (source['tester']) {
            _this.tester = new FhirString({ value: source.tester });
        }
        if (source['issued']) {
            _this.issued = new FhirDateTime({ value: source.issued });
        }
        if (source['participant']) {
            _this.participant = source.participant.map(function (x) { return new TestReportParticipant(x); });
        }
        else {
            _this.participant = [];
        }
        if (source['setup']) {
            _this.setup = new TestReportSetup(source.setup);
        }
        if (source['test']) {
            _this.test = source.test.map(function (x) { return new TestReportTest(x); });
        }
        else {
            _this.test = [];
        }
        if (source['teardown']) {
            _this.teardown = new TestReportTeardown(source.teardown);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (TestReport.status)
     */
    TestReport.statusRequiredCoding = function () {
        return ReportStatusCodesCodings;
    };
    /**
     * Required-bound Value Set for result (TestReport.result)
     */
    TestReport.resultRequiredCoding = function () {
        return ReportResultCodesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestReport.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"TestReport" fhir: TestReport.resourceType:"TestReport"', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ReportStatusCodesCodeType fhir: TestReport.status:code', }));
        }
        if (!this['testScript']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property testScript:fhir.Reference fhir: TestReport.testScript:Reference', }));
        }
        if (this["testScript"]) {
            (_c = outcome.issue).push.apply(_c, this.testScript.doModelValidation().issue);
        }
        if (!this['result']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property result:ReportResultCodesCodeType fhir: TestReport.result:code', }));
        }
        if (this["score"]) {
            (_d = outcome.issue).push.apply(_d, this.score.doModelValidation().issue);
        }
        if (this["tester"]) {
            (_e = outcome.issue).push.apply(_e, this.tester.doModelValidation().issue);
        }
        if (this["issued"]) {
            (_f = outcome.issue).push.apply(_f, this.issued.doModelValidation().issue);
        }
        if (this["participant"]) {
            this.participant.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["setup"]) {
            (_g = outcome.issue).push.apply(_g, this.setup.doModelValidation().issue);
        }
        if (this["test"]) {
            this.test.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["teardown"]) {
            (_h = outcome.issue).push.apply(_h, this.teardown.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestReport._fts_dataType = 'TestReport';
    return TestReport;
}(DomainResource));

export { TestReport, TestReportParticipant, TestReportSetup, TestReportSetupAction, TestReportSetupActionAssert, TestReportSetupActionOperation, TestReportTeardown, TestReportTeardownAction, TestReportTest, TestReportTestAction };
//# sourceMappingURL=TestReport.js.map
