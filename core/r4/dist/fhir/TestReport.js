// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReportParticipantTypeCodes } from '../fhirValueSets/ReportParticipantTypeCodes.js';
// @ts-ignore
import { ReportActionResultCodesCodes } from '../fhirValueSets/ReportActionResultCodesCodes.js';
// @ts-ignore
import { ReportStatusCodesCodes } from '../fhirValueSets/ReportStatusCodesCodes.js';
// @ts-ignore
import { ReportResultCodesCodes } from '../fhirValueSets/ReportResultCodesCodes.js';
/**
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export class TestReportParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        else {
            this.uri = null;
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
    }
    /**
     * Required-bound Value Set for type (TestReport.participant.type)
     */
    static get typeRequiredCodes() {
        return ReportParticipantTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<ReportParticipantTypeCodeType> fhir: TestReport.participant.type:code' });
        }
        if (this['type'] && (!Object.values(ReportParticipantTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<ReportParticipantTypeCodeType> fhir: TestReport.participant.type:code Required binding to: ReportParticipantType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['uri']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property uri:fhir.FhirUri fhir: TestReport.participant.uri:uri' });
        }
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation());
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportParticipant._fts_dataType = 'TestReportParticipant';
/**
 * The operation performed.
 */
export class TestReportSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['result']) {
            this.result = new fhir.FhirCode({ value: source.result });
        }
        else {
            this.result = null;
        }
        if (source['message']) {
            this.message = new fhir.FhirMarkdown({ value: source.message });
        }
        if (source['detail']) {
            this.detail = new fhir.FhirUri({ value: source.detail });
        }
    }
    /**
     * Required-bound Value Set for result (TestReport.setup.action.operation.result)
     */
    static get resultRequiredCodes() {
        return ReportActionResultCodesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['result']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property result:fhir.FhirCode<ReportActionResultCodesCodeType> fhir: TestReport.setup.action.operation.result:code' });
        }
        if (this['result'] && (!Object.values(ReportActionResultCodesCodes).includes(this.result))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property result:fhir.FhirCode<ReportActionResultCodesCodeType> fhir: TestReport.setup.action.operation.result:code Required binding to: ReportActionResultCodes' });
        }
        if (this["result"]) {
            issues.push(...this.result.doModelValidation());
        }
        if (this["message"]) {
            issues.push(...this.message.doModelValidation());
        }
        if (this["detail"]) {
            issues.push(...this.detail.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetupActionOperation._fts_dataType = 'TestReportSetupActionOperation';
/**
 * The results of the assertion performed on the previous operations.
 */
export class TestReportSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['result']) {
            this.result = new fhir.FhirCode({ value: source.result });
        }
        else {
            this.result = null;
        }
        if (source['message']) {
            this.message = new fhir.FhirMarkdown({ value: source.message });
        }
        if (source['detail']) {
            this.detail = new fhir.FhirString({ value: source.detail });
        }
    }
    /**
     * Required-bound Value Set for result (TestReport.setup.action.assert.result)
     */
    static get resultRequiredCodes() {
        return ReportActionResultCodesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['result']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property result:fhir.FhirCode<ReportActionResultCodesCodeType> fhir: TestReport.setup.action.assert.result:code' });
        }
        if (this['result'] && (!Object.values(ReportActionResultCodesCodes).includes(this.result))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property result:fhir.FhirCode<ReportActionResultCodesCodeType> fhir: TestReport.setup.action.assert.result:code Required binding to: ReportActionResultCodes' });
        }
        if (this["result"]) {
            issues.push(...this.result.doModelValidation());
        }
        if (this["message"]) {
            issues.push(...this.message.doModelValidation());
        }
        if (this["detail"]) {
            issues.push(...this.detail.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetupActionAssert._fts_dataType = 'TestReportSetupActionAssert';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation());
        }
        if (this["assert"]) {
            issues.push(...this.assert.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetupAction._fts_dataType = 'TestReportSetupAction';
/**
 * The results of the series of required setup operations before the tests were executed.
 */
export class TestReportSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportSetupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action' });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action' });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action' });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportSetup._fts_dataType = 'TestReportSetup';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestReportSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation());
        }
        if (this["assert"]) {
            issues.push(...this.assert.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTestAction._fts_dataType = 'TestReportTestAction';
/**
 * A test executed from the test script.
 */
export class TestReportTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportTestAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action' });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action' });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action' });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTest._fts_dataType = 'TestReportTest';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestReportTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestReportSetupActionOperation(source.operation);
        }
        else {
            this.operation = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['operation']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property operation:fhir.TestReportSetupActionOperation fhir: TestReport.teardown.action.operation:TestReport.setup.action.operation' });
        }
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTeardownAction._fts_dataType = 'TestReportTeardownAction';
/**
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export class TestReportTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestReportTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestReportTeardownAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action' });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action' });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action' });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReportTeardown._fts_dataType = 'TestReportTeardown';
/**
 * A summary of information based on the results of executing a TestScript.
 */
export class TestReport extends fhir.DomainResource {
    /**
     * Default constructor for TestReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TestReport';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['testScript']) {
            this.testScript = new fhir.Reference(source.testScript);
        }
        else {
            this.testScript = null;
        }
        if (source['result']) {
            this.result = new fhir.FhirCode({ value: source.result });
        }
        else {
            this.result = null;
        }
        if (source['score']) {
            this.score = new fhir.FhirDecimal({ value: source.score });
        }
        if (source['tester']) {
            this.tester = new fhir.FhirString({ value: source.tester });
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.TestReportParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['setup']) {
            this.setup = new fhir.TestReportSetup(source.setup);
        }
        if (source['test']) {
            this.test = source.test.map((x) => new fhir.TestReportTest(x));
        }
        else {
            this.test = [];
        }
        if (source['teardown']) {
            this.teardown = new fhir.TestReportTeardown(source.teardown);
        }
    }
    /**
     * Required-bound Value Set for status (TestReport.status)
     */
    static get statusRequiredCodes() {
        return ReportStatusCodesCodes;
    }
    /**
     * Required-bound Value Set for result (TestReport.result)
     */
    static get resultRequiredCodes() {
        return ReportResultCodesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"TestReport" fhir: TestReport.resourceType:"TestReport"' });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ReportStatusCodesCodeType> fhir: TestReport.status:code' });
        }
        if (this['status'] && (!Object.values(ReportStatusCodesCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ReportStatusCodesCodeType> fhir: TestReport.status:code Required binding to: ReportStatusCodes' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['testScript']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property testScript:fhir.Reference fhir: TestReport.testScript:Reference' });
        }
        if (this["testScript"]) {
            issues.push(...this.testScript.doModelValidation());
        }
        if (!this['result']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property result:fhir.FhirCode<ReportResultCodesCodeType> fhir: TestReport.result:code' });
        }
        if (this['result'] && (!Object.values(ReportResultCodesCodes).includes(this.result))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property result:fhir.FhirCode<ReportResultCodesCodeType> fhir: TestReport.result:code Required binding to: ReportResultCodes' });
        }
        if (this["result"]) {
            issues.push(...this.result.doModelValidation());
        }
        if (this["score"]) {
            issues.push(...this.score.doModelValidation());
        }
        if (this["tester"]) {
            issues.push(...this.tester.doModelValidation());
        }
        if (this["issued"]) {
            issues.push(...this.issued.doModelValidation());
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["setup"]) {
            issues.push(...this.setup.doModelValidation());
        }
        if (this["test"]) {
            this.test.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["teardown"]) {
            issues.push(...this.teardown.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestReport._fts_dataType = 'TestReport';
//# sourceMappingURL=data:application/json;base64,