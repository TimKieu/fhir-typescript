// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { BindingStrengthVsValidation } from '../fhirValueSets/BindingStrengthVsValidation.js';
// @ts-ignore
import { OperationParameterUseVsValidation } from '../fhirValueSets/OperationParameterUseVsValidation.js';
// @ts-ignore
import { AllTypesVsValidation } from '../fhirValueSets/AllTypesVsValidation.js';
// @ts-ignore
import { SearchParamTypeVsValidation } from '../fhirValueSets/SearchParamTypeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { OperationKindVsValidation } from '../fhirValueSets/OperationKindVsValidation.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
/**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
export class OperationDefinitionParameterBinding extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameterBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['strength']) {
            this.strength = new fhir.FhirCode({ value: source.strength });
        }
        else {
            this.strength = null;
        }
        if (source['_strength']) {
            if (this.strength) {
                this.strength.addExtendedProperties(source._strength);
            }
            else {
                this.strength = new fhir.FhirCode(source._strength);
            }
        }
        if (source['valueSet']) {
            this.valueSet = new fhir.FhirCanonical({ value: source.valueSet });
        }
        else {
            this.valueSet = null;
        }
        if (source['_valueSet']) {
            if (this.valueSet) {
                this.valueSet.addExtendedProperties(source._valueSet);
            }
            else {
                this.valueSet = new fhir.FhirCanonical(source._valueSet);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'OperationDefinition.parameter.binding';
        }
        this.vReqSV('strength', expression, 'BindingStrength', BindingStrengthVsValidation, 'r');
        this.vReqS('valueSet', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameterBinding._fts_dataType = 'OperationDefinitionParameterBinding';
/**
 * Resolution applies if the referenced parameter exists.
 */
export class OperationDefinitionParameterReferencedFrom extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameterReferencedFrom - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['source']) {
            this.source = new fhir.FhirString({ value: source.source });
        }
        else {
            this.source = null;
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirString(source._source);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirString({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirString(source._sourceId);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'OperationDefinition.parameter.referencedFrom';
        }
        this.vReqS('source', expression);
        this.vOptS('sourceId', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameterReferencedFrom._fts_dataType = 'OperationDefinitionParameterReferencedFrom';
/**
 * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
 */
export class OperationDefinitionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirCode({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirCode(source._name);
            }
        }
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['min']) {
            this.min = new fhir.FhirInteger({ value: source.min });
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirInteger(source._min);
            }
        }
        if (source['max']) {
            this.max = new fhir.FhirString({ value: source.max });
        }
        else {
            this.max = null;
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['targetProfile']) {
            this.targetProfile = source.targetProfile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.targetProfile = [];
        }
        if (source['_targetProfile']) {
            source._targetProfile.forEach((x, i) => {
                if (this.targetProfile.length >= i) {
                    if (x) {
                        this.targetProfile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.targetProfile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['searchType']) {
            this.searchType = new fhir.FhirCode({ value: source.searchType });
        }
        if (source['_searchType']) {
            if (this.searchType) {
                this.searchType.addExtendedProperties(source._searchType);
            }
            else {
                this.searchType = new fhir.FhirCode(source._searchType);
            }
        }
        if (source['binding']) {
            this.binding = new fhir.OperationDefinitionParameterBinding(source.binding);
        }
        if (source['referencedFrom']) {
            this.referencedFrom = source.referencedFrom.map((x) => new fhir.OperationDefinitionParameterReferencedFrom(x));
        }
        else {
            this.referencedFrom = [];
        }
        if (source['part']) {
            this.part = source.part.map((x) => new fhir.OperationDefinitionParameter(x));
        }
        else {
            this.part = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'OperationDefinition.parameter';
        }
        this.vReqS('name', expression);
        this.vReqSV('use', expression, 'OperationParameterUse', OperationParameterUseVsValidation, 'r');
        this.vReqS('min', expression);
        this.vReqS('max', expression);
        this.vOptS('documentation', expression);
        this.vOptSV('type', expression, 'AllTypes', AllTypesVsValidation, 'r');
        this.vOptA('targetProfile', expression);
        this.vOptSV('searchType', expression, 'SearchParamType', SearchParamTypeVsValidation, 'r');
        this.vOptS('binding', expression);
        this.vOptA('referencedFrom', expression);
        this.vOptA('part', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionParameter._fts_dataType = 'OperationDefinitionParameter';
/**
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
export class OperationDefinitionOverload extends fhir.BackboneElement {
    /**
     * Default constructor for OperationDefinitionOverload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['parameterName']) {
            this.parameterName = source.parameterName.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.parameterName = [];
        }
        if (source['_parameterName']) {
            source._parameterName.forEach((x, i) => {
                if (this.parameterName.length >= i) {
                    if (x) {
                        this.parameterName[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.parameterName.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'OperationDefinition.overload';
        }
        this.vOptA('parameterName', expression);
        this.vOptS('comment', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinitionOverload._fts_dataType = 'OperationDefinitionOverload';
/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
export class OperationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for OperationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OperationDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['affectsState']) {
            this.affectsState = new fhir.FhirBoolean({ value: source.affectsState });
        }
        if (source['_affectsState']) {
            if (this.affectsState) {
                this.affectsState.addExtendedProperties(source._affectsState);
            }
            else {
                this.affectsState = new fhir.FhirBoolean(source._affectsState);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirMarkdown({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirMarkdown(source._comment);
            }
        }
        if (source['base']) {
            this.base = new fhir.FhirCanonical({ value: source.base });
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirCanonical(source._base);
            }
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.resource = [];
        }
        if (source['_resource']) {
            source._resource.forEach((x, i) => {
                if (this.resource.length >= i) {
                    if (x) {
                        this.resource[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.resource.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['system']) {
            this.system = new fhir.FhirBoolean({ value: source.system });
        }
        else {
            this.system = null;
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirBoolean(source._system);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirBoolean({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirBoolean(source._type);
            }
        }
        if (source['instance']) {
            this.instance = new fhir.FhirBoolean({ value: source.instance });
        }
        else {
            this.instance = null;
        }
        if (source['_instance']) {
            if (this.instance) {
                this.instance.addExtendedProperties(source._instance);
            }
            else {
                this.instance = new fhir.FhirBoolean(source._instance);
            }
        }
        if (source['inputProfile']) {
            this.inputProfile = new fhir.FhirCanonical({ value: source.inputProfile });
        }
        if (source['_inputProfile']) {
            if (this.inputProfile) {
                this.inputProfile.addExtendedProperties(source._inputProfile);
            }
            else {
                this.inputProfile = new fhir.FhirCanonical(source._inputProfile);
            }
        }
        if (source['outputProfile']) {
            this.outputProfile = new fhir.FhirCanonical({ value: source.outputProfile });
        }
        if (source['_outputProfile']) {
            if (this.outputProfile) {
                this.outputProfile.addExtendedProperties(source._outputProfile);
            }
            else {
                this.outputProfile = new fhir.FhirCanonical(source._outputProfile);
            }
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.OperationDefinitionParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['overload']) {
            this.overload = source.overload.map((x) => new fhir.OperationDefinitionOverload(x));
        }
        else {
            this.overload = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'OperationDefinition';
        }
        this.vReqS('resourceType', expression);
        this.vOptS('url', expression);
        this.vOptS('version', expression);
        this.vReqS('name', expression);
        this.vOptS('title', expression);
        this.vReqSV('status', expression, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vReqSV('kind', expression, 'OperationKind', OperationKindVsValidation, 'r');
        this.vOptS('experimental', expression);
        this.vOptS('date', expression);
        this.vOptS('publisher', expression);
        this.vOptA('contact', expression);
        this.vOptS('description', expression);
        this.vOptA('useContext', expression);
        this.vOptA('jurisdiction', expression);
        this.vOptS('purpose', expression);
        this.vOptS('affectsState', expression);
        this.vReqS('code', expression);
        this.vOptS('comment', expression);
        this.vOptS('base', expression);
        this.vOptAV('resource', expression, 'ResourceTypes', ResourceTypesVsValidation, 'r');
        this.vReqS('system', expression);
        this.vReqS('type', expression);
        this.vReqS('instance', expression);
        this.vOptS('inputProfile', expression);
        this.vOptS('outputProfile', expression);
        this.vOptA('parameter', expression);
        this.vOptA('overload', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationDefinition._fts_dataType = 'OperationDefinition';
//# sourceMappingURL=data:application/json;base64,