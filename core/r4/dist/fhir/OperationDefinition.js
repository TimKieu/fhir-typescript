/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { BindingStrengthCodings } from '../fhirValueSets/BindingStrengthCodings.js';
import { OperationParameterUseCodings } from '../fhirValueSets/OperationParameterUseCodings.js';
import { AllTypesCodings } from '../fhirValueSets/AllTypesCodings.js';
import { SearchParamTypeCodings } from '../fhirValueSets/SearchParamTypeCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { OperationKindCodings } from '../fhirValueSets/OperationKindCodings.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirString } from './FhirString.js';
import { FhirCode } from './FhirCode.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirUri } from './FhirUri.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
var OperationDefinitionParameterBinding = /** @class */ (function (_super) {
    __extends(OperationDefinitionParameterBinding, _super);
    /**
     * Default constructor for OperationDefinitionParameterBinding - initializes any required elements to null if a value is not provided.
     */
    function OperationDefinitionParameterBinding(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['strength']) {
            _this.strength = source.strength;
        }
        else {
            _this.strength = null;
        }
        if (source['valueSet']) {
            _this.valueSet = new FhirCanonical({ value: source.valueSet });
        }
        else {
            _this.valueSet = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for strength (OperationDefinition.parameter.binding.strength)
     */
    OperationDefinitionParameterBinding.strengthRequiredCoding = function () {
        return BindingStrengthCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    OperationDefinitionParameterBinding.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['strength']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property strength:BindingStrengthCodeType fhir: OperationDefinition.parameter.binding.strength:code', }));
        }
        if (!this['valueSet']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property valueSet:fhir.FhirCanonical fhir: OperationDefinition.parameter.binding.valueSet:canonical', }));
        }
        if (this["valueSet"]) {
            (_a = outcome.issue).push.apply(_a, this.valueSet.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    OperationDefinitionParameterBinding._fts_dataType = 'OperationDefinitionParameterBinding';
    return OperationDefinitionParameterBinding;
}(BackboneElement));
/**
 * Resolution applies if the referenced parameter exists.
 */
var OperationDefinitionParameterReferencedFrom = /** @class */ (function (_super) {
    __extends(OperationDefinitionParameterReferencedFrom, _super);
    /**
     * Default constructor for OperationDefinitionParameterReferencedFrom - initializes any required elements to null if a value is not provided.
     */
    function OperationDefinitionParameterReferencedFrom(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['source']) {
            _this.source = new FhirString({ value: source.source });
        }
        else {
            _this.source = null;
        }
        if (source['sourceId']) {
            _this.sourceId = new FhirString({ value: source.sourceId });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    OperationDefinitionParameterReferencedFrom.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['source']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property source:fhir.FhirString fhir: OperationDefinition.parameter.referencedFrom.source:string', }));
        }
        if (this["source"]) {
            (_a = outcome.issue).push.apply(_a, this.source.doModelValidation().issue);
        }
        if (this["sourceId"]) {
            (_b = outcome.issue).push.apply(_b, this.sourceId.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    OperationDefinitionParameterReferencedFrom._fts_dataType = 'OperationDefinitionParameterReferencedFrom';
    return OperationDefinitionParameterReferencedFrom;
}(BackboneElement));
/**
 * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
 */
var OperationDefinitionParameter = /** @class */ (function (_super) {
    __extends(OperationDefinitionParameter$1, _super);
    /**
     * Default constructor for OperationDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    function OperationDefinitionParameter$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirCode({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['use']) {
            _this.use = source.use;
        }
        else {
            _this.use = null;
        }
        if (source['min']) {
            _this.min = new FhirInteger({ value: source.min });
        }
        else {
            _this.min = null;
        }
        if (source['max']) {
            _this.max = new FhirString({ value: source.max });
        }
        else {
            _this.max = null;
        }
        if (source['documentation']) {
            _this.documentation = new FhirString({ value: source.documentation });
        }
        if (source['type']) {
            _this.type = new FhirCode({ value: source.type });
        }
        if (source['targetProfile']) {
            _this.targetProfile = source.targetProfile.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.targetProfile = [];
        }
        if (source['searchType']) {
            _this.searchType = source.searchType;
        }
        if (source['binding']) {
            _this.binding = new OperationDefinitionParameterBinding(source.binding);
        }
        if (source['referencedFrom']) {
            _this.referencedFrom = source.referencedFrom.map(function (x) { return new OperationDefinitionParameterReferencedFrom(x); });
        }
        else {
            _this.referencedFrom = [];
        }
        if (source['part']) {
            _this.part = source.part.map(function (x) { return new OperationDefinitionParameter(x); });
        }
        else {
            _this.part = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for use (OperationDefinition.parameter.use)
     */
    OperationDefinitionParameter$1.useRequiredCoding = function () {
        return OperationParameterUseCodings;
    };
    /**
     * Required-bound Value Set for type (OperationDefinition.parameter.type)
     */
    OperationDefinitionParameter$1.typeRequiredCoding = function () {
        return AllTypesCodings;
    };
    /**
     * Required-bound Value Set for searchType (OperationDefinition.parameter.searchType)
     */
    OperationDefinitionParameter$1.searchTypeRequiredCoding = function () {
        return SearchParamTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    OperationDefinitionParameter$1.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirCode fhir: OperationDefinition.parameter.name:code', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (!this['use']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property use:OperationParameterUseCodeType fhir: OperationDefinition.parameter.use:code', }));
        }
        if (!this['min']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property min:fhir.FhirInteger fhir: OperationDefinition.parameter.min:integer', }));
        }
        if (this["min"]) {
            (_b = outcome.issue).push.apply(_b, this.min.doModelValidation().issue);
        }
        if (!this['max']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property max:fhir.FhirString fhir: OperationDefinition.parameter.max:string', }));
        }
        if (this["max"]) {
            (_c = outcome.issue).push.apply(_c, this.max.doModelValidation().issue);
        }
        if (this["documentation"]) {
            (_d = outcome.issue).push.apply(_d, this.documentation.doModelValidation().issue);
        }
        if (this["type"]) {
            (_e = outcome.issue).push.apply(_e, this.type.doModelValidation().issue);
        }
        if (this["targetProfile"]) {
            this.targetProfile.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["binding"]) {
            (_f = outcome.issue).push.apply(_f, this.binding.doModelValidation().issue);
        }
        if (this["referencedFrom"]) {
            this.referencedFrom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["part"]) {
            this.part.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    OperationDefinitionParameter$1._fts_dataType = 'OperationDefinitionParameter';
    return OperationDefinitionParameter$1;
}(BackboneElement));
/**
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
var OperationDefinitionOverload = /** @class */ (function (_super) {
    __extends(OperationDefinitionOverload, _super);
    /**
     * Default constructor for OperationDefinitionOverload - initializes any required elements to null if a value is not provided.
     */
    function OperationDefinitionOverload(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['parameterName']) {
            _this.parameterName = source.parameterName.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.parameterName = [];
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    OperationDefinitionOverload.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["parameterName"]) {
            this.parameterName.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["comment"]) {
            (_a = outcome.issue).push.apply(_a, this.comment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    OperationDefinitionOverload._fts_dataType = 'OperationDefinitionOverload';
    return OperationDefinitionOverload;
}(BackboneElement));
/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
var OperationDefinition = /** @class */ (function (_super) {
    __extends(OperationDefinition, _super);
    /**
     * Default constructor for OperationDefinition - initializes any required elements to null if a value is not provided.
     */
    function OperationDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'OperationDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['kind']) {
            _this.kind = source.kind;
        }
        else {
            _this.kind = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['affectsState']) {
            _this.affectsState = new FhirBoolean({ value: source.affectsState });
        }
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['comment']) {
            _this.comment = new FhirMarkdown({ value: source.comment });
        }
        if (source['base']) {
            _this.base = new FhirCanonical({ value: source.base });
        }
        if (source['resource']) {
            _this.resource = source.resource.map(function (x) { return new FhirCode({ value: x }); });
        }
        else {
            _this.resource = [];
        }
        if (source['system']) {
            _this.system = new FhirBoolean({ value: source.system });
        }
        else {
            _this.system = null;
        }
        if (source['type']) {
            _this.type = new FhirBoolean({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['instance']) {
            _this.instance = new FhirBoolean({ value: source.instance });
        }
        else {
            _this.instance = null;
        }
        if (source['inputProfile']) {
            _this.inputProfile = new FhirCanonical({ value: source.inputProfile });
        }
        if (source['outputProfile']) {
            _this.outputProfile = new FhirCanonical({ value: source.outputProfile });
        }
        if (source['parameter']) {
            _this.parameter = source.parameter.map(function (x) { return new OperationDefinitionParameter(x); });
        }
        else {
            _this.parameter = [];
        }
        if (source['overload']) {
            _this.overload = source.overload.map(function (x) { return new OperationDefinitionOverload(x); });
        }
        else {
            _this.overload = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (OperationDefinition.status)
     */
    OperationDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for kind (OperationDefinition.kind)
     */
    OperationDefinition.kindRequiredCoding = function () {
        return OperationKindCodings;
    };
    /**
     * Required-bound Value Set for resource (OperationDefinition.resource)
     */
    OperationDefinition.resourceRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    OperationDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"OperationDefinition" fhir: OperationDefinition.resourceType:"OperationDefinition"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: OperationDefinition.name:string', }));
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: OperationDefinition.status:code', }));
        }
        if (!this['kind']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property kind:OperationKindCodeType fhir: OperationDefinition.kind:code', }));
        }
        if (this["experimental"]) {
            (_e = outcome.issue).push.apply(_e, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_g = outcome.issue).push.apply(_g, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_h = outcome.issue).push.apply(_h, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_j = outcome.issue).push.apply(_j, this.purpose.doModelValidation().issue);
        }
        if (this["affectsState"]) {
            (_k = outcome.issue).push.apply(_k, this.affectsState.doModelValidation().issue);
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: OperationDefinition.code:code', }));
        }
        if (this["code"]) {
            (_l = outcome.issue).push.apply(_l, this.code.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_m = outcome.issue).push.apply(_m, this.comment.doModelValidation().issue);
        }
        if (this["base"]) {
            (_o = outcome.issue).push.apply(_o, this.base.doModelValidation().issue);
        }
        if (this["resource"]) {
            this.resource.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['system']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property system:fhir.FhirBoolean fhir: OperationDefinition.system:boolean', }));
        }
        if (this["system"]) {
            (_p = outcome.issue).push.apply(_p, this.system.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirBoolean fhir: OperationDefinition.type:boolean', }));
        }
        if (this["type"]) {
            (_q = outcome.issue).push.apply(_q, this.type.doModelValidation().issue);
        }
        if (!this['instance']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property instance:fhir.FhirBoolean fhir: OperationDefinition.instance:boolean', }));
        }
        if (this["instance"]) {
            (_r = outcome.issue).push.apply(_r, this.instance.doModelValidation().issue);
        }
        if (this["inputProfile"]) {
            (_s = outcome.issue).push.apply(_s, this.inputProfile.doModelValidation().issue);
        }
        if (this["outputProfile"]) {
            (_t = outcome.issue).push.apply(_t, this.outputProfile.doModelValidation().issue);
        }
        if (this["parameter"]) {
            this.parameter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["overload"]) {
            this.overload.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    OperationDefinition._fts_dataType = 'OperationDefinition';
    return OperationDefinition;
}(DomainResource));

export { OperationDefinition, OperationDefinitionOverload, OperationDefinitionParameter, OperationDefinitionParameterBinding, OperationDefinitionParameterReferencedFrom };
//# sourceMappingURL=OperationDefinition.js.map
