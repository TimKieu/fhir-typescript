// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: NutritionOrder
import * as fhir from '../fhir.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { RequestIntentVsValidation } from '../fhirValueSets/RequestIntentVsValidation.js';
/**
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
export class NutritionOrderOralDietNutrient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietNutrient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'NutritionOrder.oralDiet.nutrient';
        }
        this.vOptS('modifier', expression);
        this.vOptS('amount', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietNutrient._fts_dataType = 'NutritionOrderOralDietNutrient';
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export class NutritionOrderOralDietTexture extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietTexture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['foodType']) {
            this.foodType = new fhir.CodeableConcept(source.foodType);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'NutritionOrder.oralDiet.texture';
        }
        this.vOptS('modifier', expression);
        this.vOptS('foodType', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietTexture._fts_dataType = 'NutritionOrderOralDietTexture';
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export class NutritionOrderOralDiet extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDiet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        else {
            this.schedule = [];
        }
        if (source['nutrient']) {
            this.nutrient = source.nutrient.map((x) => new fhir.NutritionOrderOralDietNutrient(x));
        }
        else {
            this.nutrient = [];
        }
        if (source['texture']) {
            this.texture = source.texture.map((x) => new fhir.NutritionOrderOralDietTexture(x));
        }
        else {
            this.texture = [];
        }
        if (source['fluidConsistencyType']) {
            this.fluidConsistencyType = source.fluidConsistencyType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.fluidConsistencyType = [];
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
        if (source['_instruction']) {
            if (this.instruction) {
                this.instruction.addExtendedProperties(source._instruction);
            }
            else {
                this.instruction = new fhir.FhirString(source._instruction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'NutritionOrder.oralDiet';
        }
        this.vOptA('type', expression);
        this.vOptA('schedule', expression);
        this.vOptA('nutrient', expression);
        this.vOptA('texture', expression);
        this.vOptA('fluidConsistencyType', expression);
        this.vOptS('instruction', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDiet._fts_dataType = 'NutritionOrderOralDiet';
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export class NutritionOrderSupplement extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderSupplement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['productName']) {
            this.productName = new fhir.FhirString({ value: source.productName });
        }
        if (source['_productName']) {
            if (this.productName) {
                this.productName.addExtendedProperties(source._productName);
            }
            else {
                this.productName = new fhir.FhirString(source._productName);
            }
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        else {
            this.schedule = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
        if (source['_instruction']) {
            if (this.instruction) {
                this.instruction.addExtendedProperties(source._instruction);
            }
            else {
                this.instruction = new fhir.FhirString(source._instruction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'NutritionOrder.supplement';
        }
        this.vOptS('type', expression);
        this.vOptS('productName', expression);
        this.vOptA('schedule', expression);
        this.vOptS('quantity', expression);
        this.vOptS('instruction', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderSupplement._fts_dataType = 'NutritionOrderSupplement';
/**
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export class NutritionOrderEnteralFormulaAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['schedule']) {
            this.schedule = new fhir.Timing(source.schedule);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity);
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'NutritionOrder.enteralFormula.administration';
        }
        this.vOptS('schedule', expression);
        this.vOptS('quantity', expression);
        this.vOptS('rate', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormulaAdministration._fts_dataType = 'NutritionOrderEnteralFormulaAdministration';
/**
 * Internal flag to properly serialize choice-type element NutritionOrder.enteralFormula.administration.rate[x]
 */
NutritionOrderEnteralFormulaAdministration._fts_rateIsChoice = true;
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export class NutritionOrderEnteralFormula extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormula - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['baseFormulaType']) {
            this.baseFormulaType = new fhir.CodeableConcept(source.baseFormulaType);
        }
        if (source['baseFormulaProductName']) {
            this.baseFormulaProductName = new fhir.FhirString({ value: source.baseFormulaProductName });
        }
        if (source['_baseFormulaProductName']) {
            if (this.baseFormulaProductName) {
                this.baseFormulaProductName.addExtendedProperties(source._baseFormulaProductName);
            }
            else {
                this.baseFormulaProductName = new fhir.FhirString(source._baseFormulaProductName);
            }
        }
        if (source['additiveType']) {
            this.additiveType = new fhir.CodeableConcept(source.additiveType);
        }
        if (source['additiveProductName']) {
            this.additiveProductName = new fhir.FhirString({ value: source.additiveProductName });
        }
        if (source['_additiveProductName']) {
            if (this.additiveProductName) {
                this.additiveProductName.addExtendedProperties(source._additiveProductName);
            }
            else {
                this.additiveProductName = new fhir.FhirString(source._additiveProductName);
            }
        }
        if (source['caloricDensity']) {
            this.caloricDensity = new fhir.Quantity(source.caloricDensity);
        }
        if (source['routeofAdministration']) {
            this.routeofAdministration = new fhir.CodeableConcept(source.routeofAdministration);
        }
        if (source['administration']) {
            this.administration = source.administration.map((x) => new fhir.NutritionOrderEnteralFormulaAdministration(x));
        }
        else {
            this.administration = [];
        }
        if (source['maxVolumeToDeliver']) {
            this.maxVolumeToDeliver = new fhir.Quantity(source.maxVolumeToDeliver);
        }
        if (source['administrationInstruction']) {
            this.administrationInstruction = new fhir.FhirString({ value: source.administrationInstruction });
        }
        if (source['_administrationInstruction']) {
            if (this.administrationInstruction) {
                this.administrationInstruction.addExtendedProperties(source._administrationInstruction);
            }
            else {
                this.administrationInstruction = new fhir.FhirString(source._administrationInstruction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'NutritionOrder.enteralFormula';
        }
        this.vOptS('baseFormulaType', expression);
        this.vOptS('baseFormulaProductName', expression);
        this.vOptS('additiveType', expression);
        this.vOptS('additiveProductName', expression);
        this.vOptS('caloricDensity', expression);
        this.vOptS('routeofAdministration', expression);
        this.vOptA('administration', expression);
        this.vOptS('maxVolumeToDeliver', expression);
        this.vOptS('administrationInstruction', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormula._fts_dataType = 'NutritionOrderEnteralFormula';
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export class NutritionOrder extends fhir.DomainResource {
    /**
     * Default constructor for NutritionOrder - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'NutritionOrder';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiates = [];
        }
        if (source['_instantiates']) {
            source._instantiates.forEach((x, i) => {
                if (this.instantiates.length >= i) {
                    if (x) {
                        this.instantiates[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiates.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateTime']) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime });
        }
        else {
            this.dateTime = null;
        }
        if (source['_dateTime']) {
            if (this.dateTime) {
                this.dateTime.addExtendedProperties(source._dateTime);
            }
            else {
                this.dateTime = new fhir.FhirDateTime(source._dateTime);
            }
        }
        if (source['orderer']) {
            this.orderer = new fhir.Reference(source.orderer);
        }
        if (source['allergyIntolerance']) {
            this.allergyIntolerance = source.allergyIntolerance.map((x) => new fhir.Reference(x));
        }
        else {
            this.allergyIntolerance = [];
        }
        if (source['foodPreferenceModifier']) {
            this.foodPreferenceModifier = source.foodPreferenceModifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.foodPreferenceModifier = [];
        }
        if (source['excludeFoodModifier']) {
            this.excludeFoodModifier = source.excludeFoodModifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.excludeFoodModifier = [];
        }
        if (source['oralDiet']) {
            this.oralDiet = new fhir.NutritionOrderOralDiet(source.oralDiet);
        }
        if (source['supplement']) {
            this.supplement = source.supplement.map((x) => new fhir.NutritionOrderSupplement(x));
        }
        else {
            this.supplement = [];
        }
        if (source['enteralFormula']) {
            this.enteralFormula = new fhir.NutritionOrderEnteralFormula(source.enteralFormula);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'NutritionOrder';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vOptA('instantiatesCanonical', expression);
        this.vOptA('instantiatesUri', expression);
        this.vOptA('instantiates', expression);
        this.vReqSV('status', expression, 'RequestStatus', RequestStatusVsValidation, 'r');
        this.vReqSV('intent', expression, 'RequestIntent', RequestIntentVsValidation, 'r');
        this.vReqS('patient', expression);
        this.vOptS('encounter', expression);
        this.vReqS('dateTime', expression);
        this.vOptS('orderer', expression);
        this.vOptA('allergyIntolerance', expression);
        this.vOptA('foodPreferenceModifier', expression);
        this.vOptA('excludeFoodModifier', expression);
        this.vOptS('oralDiet', expression);
        this.vOptA('supplement', expression);
        this.vOptS('enteralFormula', expression);
        this.vOptA('note', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrder._fts_dataType = 'NutritionOrder';
//# sourceMappingURL=data:application/json;base64,