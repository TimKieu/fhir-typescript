// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: NutritionOrder
import * as fhir from '../fhir.js';
// @ts-ignore
import { EnteralRouteCodings, } from '../fhirValueSets/EnteralRouteCodings.js';
// @ts-ignore
import { RequestStatusCodings, } from '../fhirValueSets/RequestStatusCodings.js';
// @ts-ignore
import { RequestIntentCodings, } from '../fhirValueSets/RequestIntentCodings.js';
/**
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
export class NutritionOrderOralDietNutrient extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietNutrient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["modifier"]) {
            issues.push(...this.modifier.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietNutrient._fts_dataType = 'NutritionOrderOralDietNutrient';
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export class NutritionOrderOralDietTexture extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDietTexture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['modifier']) {
            this.modifier = new fhir.CodeableConcept(source.modifier);
        }
        if (source['foodType']) {
            this.foodType = new fhir.CodeableConcept(source.foodType);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["modifier"]) {
            issues.push(...this.modifier.doModelValidation());
        }
        if (this["foodType"]) {
            issues.push(...this.foodType.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDietTexture._fts_dataType = 'NutritionOrderOralDietTexture';
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export class NutritionOrderOralDiet extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderOralDiet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        else {
            this.schedule = [];
        }
        if (source['nutrient']) {
            this.nutrient = source.nutrient.map((x) => new fhir.NutritionOrderOralDietNutrient(x));
        }
        else {
            this.nutrient = [];
        }
        if (source['texture']) {
            this.texture = source.texture.map((x) => new fhir.NutritionOrderOralDietTexture(x));
        }
        else {
            this.texture = [];
        }
        if (source['fluidConsistencyType']) {
            this.fluidConsistencyType = source.fluidConsistencyType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.fluidConsistencyType = [];
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["schedule"]) {
            this.schedule.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["nutrient"]) {
            this.nutrient.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["texture"]) {
            this.texture.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["fluidConsistencyType"]) {
            this.fluidConsistencyType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instruction"]) {
            issues.push(...this.instruction.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderOralDiet._fts_dataType = 'NutritionOrderOralDiet';
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export class NutritionOrderSupplement extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderSupplement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['productName']) {
            this.productName = new fhir.FhirString({ value: source.productName });
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.Timing(x));
        }
        else {
            this.schedule = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["productName"]) {
            issues.push(...this.productName.doModelValidation());
        }
        if (this["schedule"]) {
            this.schedule.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["instruction"]) {
            issues.push(...this.instruction.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderSupplement._fts_dataType = 'NutritionOrderSupplement';
/**
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export class NutritionOrderEnteralFormulaAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormulaAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['schedule']) {
            this.schedule = new fhir.Timing(source.schedule);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity);
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["schedule"]) {
            issues.push(...this.schedule.doModelValidation());
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormulaAdministration._fts_dataType = 'NutritionOrderEnteralFormulaAdministration';
/**
 * Internal flag to properly serialize choice-type element NutritionOrder.enteralFormula.administration.rate[x]
 */
NutritionOrderEnteralFormulaAdministration._fts_rateIsChoice = true;
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export class NutritionOrderEnteralFormula extends fhir.BackboneElement {
    /**
     * Default constructor for NutritionOrderEnteralFormula - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['baseFormulaType']) {
            this.baseFormulaType = new fhir.CodeableConcept(source.baseFormulaType);
        }
        if (source['baseFormulaProductName']) {
            this.baseFormulaProductName = new fhir.FhirString({ value: source.baseFormulaProductName });
        }
        if (source['additiveType']) {
            this.additiveType = new fhir.CodeableConcept(source.additiveType);
        }
        if (source['additiveProductName']) {
            this.additiveProductName = new fhir.FhirString({ value: source.additiveProductName });
        }
        if (source['caloricDensity']) {
            this.caloricDensity = new fhir.Quantity(source.caloricDensity);
        }
        if (source['routeofAdministration']) {
            this.routeofAdministration = new fhir.CodeableConcept(source.routeofAdministration);
        }
        if (source['administration']) {
            this.administration = source.administration.map((x) => new fhir.NutritionOrderEnteralFormulaAdministration(x));
        }
        else {
            this.administration = [];
        }
        if (source['maxVolumeToDeliver']) {
            this.maxVolumeToDeliver = new fhir.Quantity(source.maxVolumeToDeliver);
        }
        if (source['administrationInstruction']) {
            this.administrationInstruction = new fhir.FhirString({ value: source.administrationInstruction });
        }
    }
    /**
     * Extensible-bound Value Set for routeofAdministration (NutritionOrder.enteralFormula.routeofAdministration)
     */
    static routeofAdministrationExtensibleCoding() {
        return EnteralRouteCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["baseFormulaType"]) {
            issues.push(...this.baseFormulaType.doModelValidation());
        }
        if (this["baseFormulaProductName"]) {
            issues.push(...this.baseFormulaProductName.doModelValidation());
        }
        if (this["additiveType"]) {
            issues.push(...this.additiveType.doModelValidation());
        }
        if (this["additiveProductName"]) {
            issues.push(...this.additiveProductName.doModelValidation());
        }
        if (this["caloricDensity"]) {
            issues.push(...this.caloricDensity.doModelValidation());
        }
        if (this["routeofAdministration"]) {
            issues.push(...this.routeofAdministration.doModelValidation());
        }
        if (this["administration"]) {
            this.administration.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["maxVolumeToDeliver"]) {
            issues.push(...this.maxVolumeToDeliver.doModelValidation());
        }
        if (this["administrationInstruction"]) {
            issues.push(...this.administrationInstruction.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrderEnteralFormula._fts_dataType = 'NutritionOrderEnteralFormula';
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export class NutritionOrder extends fhir.DomainResource {
    /**
     * Default constructor for NutritionOrder - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'NutritionOrder';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['instantiates']) {
            this.instantiates = source.instantiates.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiates = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        else {
            this.intent = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['dateTime']) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime });
        }
        else {
            this.dateTime = null;
        }
        if (source['orderer']) {
            this.orderer = new fhir.Reference(source.orderer);
        }
        if (source['allergyIntolerance']) {
            this.allergyIntolerance = source.allergyIntolerance.map((x) => new fhir.Reference(x));
        }
        else {
            this.allergyIntolerance = [];
        }
        if (source['foodPreferenceModifier']) {
            this.foodPreferenceModifier = source.foodPreferenceModifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.foodPreferenceModifier = [];
        }
        if (source['excludeFoodModifier']) {
            this.excludeFoodModifier = source.excludeFoodModifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.excludeFoodModifier = [];
        }
        if (source['oralDiet']) {
            this.oralDiet = new fhir.NutritionOrderOralDiet(source.oralDiet);
        }
        if (source['supplement']) {
            this.supplement = source.supplement.map((x) => new fhir.NutritionOrderSupplement(x));
        }
        else {
            this.supplement = [];
        }
        if (source['enteralFormula']) {
            this.enteralFormula = new fhir.NutritionOrderEnteralFormula(source.enteralFormula);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Required-bound Value Set for status (NutritionOrder.status)
     */
    static statusRequiredCoding() {
        return RequestStatusCodings;
    }
    /**
     * Required-bound Value Set for intent (NutritionOrder.intent)
     */
    static intentRequiredCoding() {
        return RequestIntentCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"NutritionOrder" fhir: NutritionOrder.resourceType:"NutritionOrder"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiates"]) {
            this.instantiates.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:RequestStatusCodeType fhir: NutritionOrder.status:code', });
        }
        if (!this['intent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property intent:RequestIntentCodeType fhir: NutritionOrder.intent:code', });
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient:fhir.Reference fhir: NutritionOrder.patient:Reference', });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (!this['dateTime']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dateTime:fhir.FhirDateTime fhir: NutritionOrder.dateTime:dateTime', });
        }
        if (this["dateTime"]) {
            issues.push(...this.dateTime.doModelValidation());
        }
        if (this["orderer"]) {
            issues.push(...this.orderer.doModelValidation());
        }
        if (this["allergyIntolerance"]) {
            this.allergyIntolerance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["foodPreferenceModifier"]) {
            this.foodPreferenceModifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["excludeFoodModifier"]) {
            this.excludeFoodModifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["oralDiet"]) {
            issues.push(...this.oralDiet.doModelValidation());
        }
        if (this["supplement"]) {
            this.supplement.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["enteralFormula"]) {
            issues.push(...this.enteralFormula.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NutritionOrder._fts_dataType = 'NutritionOrder';
//# sourceMappingURL=data:application/json;base64,