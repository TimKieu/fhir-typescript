// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductPackaged
import * as fhir from '../fhir.js';
/**
 * Batch numbering.
 */
export class MedicinalProductPackagedBatchIdentifier extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPackagedBatchIdentifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['outerPackaging']) {
            this.outerPackaging = new fhir.Identifier(source.outerPackaging);
        }
        else {
            this.outerPackaging = null;
        }
        if (source['immediatePackaging']) {
            this.immediatePackaging = new fhir.Identifier(source.immediatePackaging);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductPackaged.batchIdentifier';
        }
        this.vRS('outerPackaging', exp);
        this.vOS('immediatePackaging', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPackagedBatchIdentifier._fts_dataType = 'MedicinalProductPackagedBatchIdentifier';
/**
 * A packaging item, as a contained for medicine, possibly with other packaging items within.
 */
export class MedicinalProductPackagedPackageItem extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPackagedPackageItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['material']) {
            this.material = source.material.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.material = [];
        }
        if (source['alternateMaterial']) {
            this.alternateMaterial = source.alternateMaterial.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.alternateMaterial = [];
        }
        if (source['device']) {
            this.device = source.device.map((x) => new fhir.Reference(x));
        }
        else {
            this.device = [];
        }
        if (source['manufacturedItem']) {
            this.manufacturedItem = source.manufacturedItem.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturedItem = [];
        }
        if (source['packageItem']) {
            this.packageItem = source.packageItem.map((x) => new fhir.MedicinalProductPackagedPackageItem(x));
        }
        else {
            this.packageItem = [];
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['otherCharacteristics']) {
            this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.otherCharacteristics = [];
        }
        if (source['shelfLifeStorage']) {
            this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x));
        }
        else {
            this.shelfLifeStorage = [];
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductPackaged.packageItem';
        }
        this.vOA('identifier', exp);
        this.vRS('type', exp);
        this.vRS('quantity', exp);
        this.vOA('material', exp);
        this.vOA('alternateMaterial', exp);
        this.vOA('device', exp);
        this.vOA('manufacturedItem', exp);
        this.vOA('packageItem', exp);
        this.vOS('physicalCharacteristics', exp);
        this.vOA('otherCharacteristics', exp);
        this.vOA('shelfLifeStorage', exp);
        this.vOA('manufacturer', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPackagedPackageItem._fts_dataType = 'MedicinalProductPackagedPackageItem';
/**
 * A medicinal product in a container or package.
 */
export class MedicinalProductPackaged extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductPackaged - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductPackaged';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['marketingStatus']) {
            this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x));
        }
        else {
            this.marketingStatus = [];
        }
        if (source['marketingAuthorization']) {
            this.marketingAuthorization = new fhir.Reference(source.marketingAuthorization);
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['batchIdentifier']) {
            this.batchIdentifier = source.batchIdentifier.map((x) => new fhir.MedicinalProductPackagedBatchIdentifier(x));
        }
        else {
            this.batchIdentifier = [];
        }
        if (source['packageItem']) {
            this.packageItem = source.packageItem.map((x) => new fhir.MedicinalProductPackagedPackageItem(x));
        }
        else {
            this.packageItem = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductPackaged';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOA('subject', exp);
        this.vOS('description', exp);
        this.vOS('legalStatusOfSupply', exp);
        this.vOA('marketingStatus', exp);
        this.vOS('marketingAuthorization', exp);
        this.vOA('manufacturer', exp);
        this.vOA('batchIdentifier', exp);
        this.vRA('packageItem', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPackaged._fts_dataType = 'MedicinalProductPackaged';
//# sourceMappingURL=data:application/json;base64,