/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';
import { Reference } from './Reference.js';
import { ProdCharacteristic } from './ProdCharacteristic.js';
import { ProductShelfLife } from './ProductShelfLife.js';
import { FhirString } from './FhirString.js';
import { MarketingStatus } from './MarketingStatus.js';

// <auto-generated/>
/**
 * Batch numbering.
 */
var MedicinalProductPackagedBatchIdentifier = /** @class */ (function (_super) {
    __extends(MedicinalProductPackagedBatchIdentifier, _super);
    /**
     * Default constructor for MedicinalProductPackagedBatchIdentifier - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPackagedBatchIdentifier(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['outerPackaging']) {
            _this.outerPackaging = new Identifier(source.outerPackaging);
        }
        else {
            _this.outerPackaging = null;
        }
        if (source['immediatePackaging']) {
            _this.immediatePackaging = new Identifier(source.immediatePackaging);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPackagedBatchIdentifier.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['outerPackaging']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property outerPackaging:fhir.Identifier fhir: MedicinalProductPackaged.batchIdentifier.outerPackaging:Identifier', }));
        }
        if (this["outerPackaging"]) {
            (_a = outcome.issue).push.apply(_a, this.outerPackaging.doModelValidation().issue);
        }
        if (this["immediatePackaging"]) {
            (_b = outcome.issue).push.apply(_b, this.immediatePackaging.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPackagedBatchIdentifier._fts_dataType = 'MedicinalProductPackagedBatchIdentifier';
    return MedicinalProductPackagedBatchIdentifier;
}(BackboneElement));
/**
 * A packaging item, as a contained for medicine, possibly with other packaging items within.
 */
var MedicinalProductPackagedPackageItem = /** @class */ (function (_super) {
    __extends(MedicinalProductPackagedPackageItem$1, _super);
    /**
     * Default constructor for MedicinalProductPackagedPackageItem - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPackagedPackageItem$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        else {
            _this.quantity = null;
        }
        if (source['material']) {
            _this.material = source.material.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.material = [];
        }
        if (source['alternateMaterial']) {
            _this.alternateMaterial = source.alternateMaterial.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.alternateMaterial = [];
        }
        if (source['device']) {
            _this.device = source.device.map(function (x) { return new Reference(x); });
        }
        else {
            _this.device = [];
        }
        if (source['manufacturedItem']) {
            _this.manufacturedItem = source.manufacturedItem.map(function (x) { return new Reference(x); });
        }
        else {
            _this.manufacturedItem = [];
        }
        if (source['packageItem']) {
            _this.packageItem = source.packageItem.map(function (x) { return new MedicinalProductPackagedPackageItem(x); });
        }
        else {
            _this.packageItem = [];
        }
        if (source['physicalCharacteristics']) {
            _this.physicalCharacteristics = new ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['otherCharacteristics']) {
            _this.otherCharacteristics = source.otherCharacteristics.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.otherCharacteristics = [];
        }
        if (source['shelfLifeStorage']) {
            _this.shelfLifeStorage = source.shelfLifeStorage.map(function (x) { return new ProductShelfLife(x); });
        }
        else {
            _this.shelfLifeStorage = [];
        }
        if (source['manufacturer']) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new Reference(x); });
        }
        else {
            _this.manufacturer = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPackagedPackageItem$1.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicinalProductPackaged.packageItem.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['quantity']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property quantity:fhir.Quantity fhir: MedicinalProductPackaged.packageItem.quantity:Quantity', }));
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["material"]) {
            this.material.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["alternateMaterial"]) {
            this.alternateMaterial.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["device"]) {
            this.device.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["manufacturedItem"]) {
            this.manufacturedItem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["packageItem"]) {
            this.packageItem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["physicalCharacteristics"]) {
            (_c = outcome.issue).push.apply(_c, this.physicalCharacteristics.doModelValidation().issue);
        }
        if (this["otherCharacteristics"]) {
            this.otherCharacteristics.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["shelfLifeStorage"]) {
            this.shelfLifeStorage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPackagedPackageItem$1._fts_dataType = 'MedicinalProductPackagedPackageItem';
    return MedicinalProductPackagedPackageItem$1;
}(BackboneElement));
/**
 * A medicinal product in a container or package.
 */
var MedicinalProductPackaged = /** @class */ (function (_super) {
    __extends(MedicinalProductPackaged, _super);
    /**
     * Default constructor for MedicinalProductPackaged - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPackaged(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicinalProductPackaged';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['subject']) {
            _this.subject = source.subject.map(function (x) { return new Reference(x); });
        }
        else {
            _this.subject = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['legalStatusOfSupply']) {
            _this.legalStatusOfSupply = new CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['marketingStatus']) {
            _this.marketingStatus = source.marketingStatus.map(function (x) { return new MarketingStatus(x); });
        }
        else {
            _this.marketingStatus = [];
        }
        if (source['marketingAuthorization']) {
            _this.marketingAuthorization = new Reference(source.marketingAuthorization);
        }
        if (source['manufacturer']) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new Reference(x); });
        }
        else {
            _this.manufacturer = [];
        }
        if (source['batchIdentifier']) {
            _this.batchIdentifier = source.batchIdentifier.map(function (x) { return new MedicinalProductPackagedBatchIdentifier(x); });
        }
        else {
            _this.batchIdentifier = [];
        }
        if (source['packageItem']) {
            _this.packageItem = source.packageItem.map(function (x) { return new MedicinalProductPackagedPackageItem(x); });
        }
        else {
            _this.packageItem = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPackaged.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicinalProductPackaged" fhir: MedicinalProductPackaged.resourceType:"MedicinalProductPackaged"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subject"]) {
            this.subject.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["legalStatusOfSupply"]) {
            (_b = outcome.issue).push.apply(_b, this.legalStatusOfSupply.doModelValidation().issue);
        }
        if (this["marketingStatus"]) {
            this.marketingStatus.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["marketingAuthorization"]) {
            (_c = outcome.issue).push.apply(_c, this.marketingAuthorization.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["batchIdentifier"]) {
            this.batchIdentifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['packageItem']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property packageItem:fhir.MedicinalProductPackagedPackageItem[] fhir: MedicinalProductPackaged.packageItem:packageItem', }));
        }
        else if (!Array.isArray(this.packageItem)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property packageItem:fhir.MedicinalProductPackagedPackageItem[] fhir: MedicinalProductPackaged.packageItem:packageItem', }));
        }
        else if (this.packageItem.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property packageItem:fhir.MedicinalProductPackagedPackageItem[] fhir: MedicinalProductPackaged.packageItem:packageItem', }));
        }
        if (this["packageItem"]) {
            this.packageItem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPackaged._fts_dataType = 'MedicinalProductPackaged';
    return MedicinalProductPackaged;
}(DomainResource));

export { MedicinalProductPackaged, MedicinalProductPackagedBatchIdentifier, MedicinalProductPackagedPackageItem };
//# sourceMappingURL=MedicinalProductPackaged.js.map
