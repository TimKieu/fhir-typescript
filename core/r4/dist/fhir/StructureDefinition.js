/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ExtensionContextTypeCodings } from '../fhirValueSets/ExtensionContextTypeCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { DefinitionUseCodings } from '../fhirValueSets/DefinitionUseCodings.js';
import { FHIRVersionCodings } from '../fhirValueSets/FHIRVersionCodings.js';
import { StructureDefinitionKindCodings } from '../fhirValueSets/StructureDefinitionKindCodings.js';
import { DefinedTypesCodings } from '../fhirValueSets/DefinedTypesCodings.js';
import { TypeDerivationRuleCodings } from '../fhirValueSets/TypeDerivationRuleCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirId } from './FhirId.js';
import { FhirUri } from './FhirUri.js';
import { FhirString } from './FhirString.js';
import { ElementDefinition } from './ElementDefinition.js';
import { Identifier } from './Identifier.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Coding } from './Coding.js';
import { FhirCode } from './FhirCode.js';
import { FhirCanonical } from './FhirCanonical.js';

// <auto-generated/>
/**
 * An external specification that the content is mapped to.
 */
var StructureDefinitionMapping = /** @class */ (function (_super) {
    __extends(StructureDefinitionMapping, _super);
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    function StructureDefinitionMapping(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identity']) {
            _this.identity = new FhirId({ value: source.identity });
        }
        else {
            _this.identity = null;
        }
        if (source['uri']) {
            _this.uri = new FhirUri({ value: source.uri });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    StructureDefinitionMapping.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['identity']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property identity:fhir.FhirId fhir: StructureDefinition.mapping.identity:id', }));
        }
        if (this["identity"]) {
            (_a = outcome.issue).push.apply(_a, this.identity.doModelValidation().issue);
        }
        if (this["uri"]) {
            (_b = outcome.issue).push.apply(_b, this.uri.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_d = outcome.issue).push.apply(_d, this.comment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    StructureDefinitionMapping._fts_dataType = 'StructureDefinitionMapping';
    return StructureDefinitionMapping;
}(BackboneElement));
/**
 * Identifies the types of resource or data type elements to which the extension can be applied.
 */
var StructureDefinitionContext = /** @class */ (function (_super) {
    __extends(StructureDefinitionContext, _super);
    /**
     * Default constructor for StructureDefinitionContext - initializes any required elements to null if a value is not provided.
     */
    function StructureDefinitionContext(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['expression']) {
            _this.expression = new FhirString({ value: source.expression });
        }
        else {
            _this.expression = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (StructureDefinition.context.type)
     */
    StructureDefinitionContext.typeRequiredCoding = function () {
        return ExtensionContextTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    StructureDefinitionContext.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:ExtensionContextTypeCodeType fhir: StructureDefinition.context.type:code', }));
        }
        if (!this['expression']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property expression:fhir.FhirString fhir: StructureDefinition.context.expression:string', }));
        }
        if (this["expression"]) {
            (_a = outcome.issue).push.apply(_a, this.expression.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    StructureDefinitionContext._fts_dataType = 'StructureDefinitionContext';
    return StructureDefinitionContext;
}(BackboneElement));
/**
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
var StructureDefinitionSnapshot = /** @class */ (function (_super) {
    __extends(StructureDefinitionSnapshot, _super);
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    function StructureDefinitionSnapshot(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['element']) {
            _this.element = source.element.map(function (x) { return new ElementDefinition(x); });
        }
        else {
            _this.element = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    StructureDefinitionSnapshot.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['element']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition', }));
        }
        else if (!Array.isArray(this.element)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition', }));
        }
        else if (this.element.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition', }));
        }
        if (this["element"]) {
            this.element.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    StructureDefinitionSnapshot._fts_dataType = 'StructureDefinitionSnapshot';
    return StructureDefinitionSnapshot;
}(BackboneElement));
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
var StructureDefinitionDifferential = /** @class */ (function (_super) {
    __extends(StructureDefinitionDifferential, _super);
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    function StructureDefinitionDifferential(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['element']) {
            _this.element = source.element.map(function (x) { return new ElementDefinition(x); });
        }
        else {
            _this.element = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    StructureDefinitionDifferential.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['element']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition', }));
        }
        else if (!Array.isArray(this.element)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition', }));
        }
        else if (this.element.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition', }));
        }
        if (this["element"]) {
            this.element.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    StructureDefinitionDifferential._fts_dataType = 'StructureDefinitionDifferential';
    return StructureDefinitionDifferential;
}(BackboneElement));
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
var StructureDefinition = /** @class */ (function (_super) {
    __extends(StructureDefinition, _super);
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    function StructureDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'StructureDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['keyword']) {
            _this.keyword = source.keyword.map(function (x) { return new Coding(x); });
        }
        else {
            _this.keyword = [];
        }
        if (source['fhirVersion']) {
            _this.fhirVersion = new FhirCode({ value: source.fhirVersion });
        }
        if (source['mapping']) {
            _this.mapping = source.mapping.map(function (x) { return new StructureDefinitionMapping(x); });
        }
        else {
            _this.mapping = [];
        }
        if (source['kind']) {
            _this.kind = source.kind;
        }
        else {
            _this.kind = null;
        }
        if (source['abstract']) {
            _this.abstract = new FhirBoolean({ value: source.abstract });
        }
        else {
            _this.abstract = null;
        }
        if (source['context']) {
            _this.context = source.context.map(function (x) { return new StructureDefinitionContext(x); });
        }
        else {
            _this.context = [];
        }
        if (source['contextInvariant']) {
            _this.contextInvariant = source.contextInvariant.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.contextInvariant = [];
        }
        if (source['type']) {
            _this.type = new FhirUri({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['baseDefinition']) {
            _this.baseDefinition = new FhirCanonical({ value: source.baseDefinition });
        }
        if (source['derivation']) {
            _this.derivation = source.derivation;
        }
        if (source['snapshot']) {
            _this.snapshot = new StructureDefinitionSnapshot(source.snapshot);
        }
        if (source['differential']) {
            _this.differential = new StructureDefinitionDifferential(source.differential);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (StructureDefinition.status)
     */
    StructureDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Extensible-bound Value Set for keyword (StructureDefinition.keyword)
     */
    StructureDefinition.keywordExtensibleCoding = function () {
        return DefinitionUseCodings;
    };
    /**
     * Required-bound Value Set for fhirVersion (StructureDefinition.fhirVersion)
     */
    StructureDefinition.fhirVersionRequiredCoding = function () {
        return FHIRVersionCodings;
    };
    /**
     * Required-bound Value Set for kind (StructureDefinition.kind)
     */
    StructureDefinition.kindRequiredCoding = function () {
        return StructureDefinitionKindCodings;
    };
    /**
     * Extensible-bound Value Set for type (StructureDefinition.type)
     */
    StructureDefinition.typeExtensibleCoding = function () {
        return DefinedTypesCodings;
    };
    /**
     * Required-bound Value Set for derivation (StructureDefinition.derivation)
     */
    StructureDefinition.derivationRequiredCoding = function () {
        return TypeDerivationRuleCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    StructureDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"StructureDefinition" fhir: StructureDefinition.resourceType:"StructureDefinition"', }));
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: StructureDefinition.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: StructureDefinition.name:string', }));
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: StructureDefinition.status:code', }));
        }
        if (this["experimental"]) {
            (_e = outcome.issue).push.apply(_e, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_g = outcome.issue).push.apply(_g, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_h = outcome.issue).push.apply(_h, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_j = outcome.issue).push.apply(_j, this.purpose.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_k = outcome.issue).push.apply(_k, this.copyright.doModelValidation().issue);
        }
        if (this["keyword"]) {
            this.keyword.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["fhirVersion"]) {
            (_l = outcome.issue).push.apply(_l, this.fhirVersion.doModelValidation().issue);
        }
        if (this["mapping"]) {
            this.mapping.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['kind']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property kind:StructureDefinitionKindCodeType fhir: StructureDefinition.kind:code', }));
        }
        if (!this['abstract']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property abstract:fhir.FhirBoolean fhir: StructureDefinition.abstract:boolean', }));
        }
        if (this["abstract"]) {
            (_m = outcome.issue).push.apply(_m, this.abstract.doModelValidation().issue);
        }
        if (this["context"]) {
            this.context.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["contextInvariant"]) {
            this.contextInvariant.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirUri fhir: StructureDefinition.type:uri', }));
        }
        if (this["type"]) {
            (_o = outcome.issue).push.apply(_o, this.type.doModelValidation().issue);
        }
        if (this["baseDefinition"]) {
            (_p = outcome.issue).push.apply(_p, this.baseDefinition.doModelValidation().issue);
        }
        if (this["snapshot"]) {
            (_q = outcome.issue).push.apply(_q, this.snapshot.doModelValidation().issue);
        }
        if (this["differential"]) {
            (_r = outcome.issue).push.apply(_r, this.differential.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    StructureDefinition._fts_dataType = 'StructureDefinition';
    return StructureDefinition;
}(DomainResource));

export { StructureDefinition, StructureDefinitionContext, StructureDefinitionDifferential, StructureDefinitionMapping, StructureDefinitionSnapshot };
//# sourceMappingURL=StructureDefinition.js.map
