// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ExtensionContextTypeCodings, } from '../fhirValueSets/ExtensionContextTypeCodings.js';
// @ts-ignore
import { PublicationStatusCodings, } from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { DefinitionUseCodings, } from '../fhirValueSets/DefinitionUseCodings.js';
// @ts-ignore
import { FHIRVersionCodings, } from '../fhirValueSets/FHIRVersionCodings.js';
// @ts-ignore
import { StructureDefinitionKindCodings, } from '../fhirValueSets/StructureDefinitionKindCodings.js';
// @ts-ignore
import { DefinedTypesCodings, } from '../fhirValueSets/DefinedTypesCodings.js';
// @ts-ignore
import { TypeDerivationRuleCodings, } from '../fhirValueSets/TypeDerivationRuleCodings.js';
/**
 * An external specification that the content is mapped to.
 */
export class StructureDefinitionMapping extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity']) {
            this.identity = new fhir.FhirId({ value: source.identity });
        }
        else {
            this.identity = null;
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['identity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property identity:fhir.FhirId fhir: StructureDefinition.mapping.identity:id', });
        }
        if (this["identity"]) {
            issues.push(...this.identity.doModelValidation());
        }
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionMapping._fts_dataType = 'StructureDefinitionMapping';
/**
 * Identifies the types of resource or data type elements to which the extension can be applied.
 */
export class StructureDefinitionContext extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        else {
            this.expression = null;
        }
    }
    /**
     * Required-bound Value Set for type (StructureDefinition.context.type)
     */
    static typeRequiredCoding() {
        return ExtensionContextTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:ExtensionContextTypeCodeType fhir: StructureDefinition.context.type:code', });
        }
        if (!this['expression']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property expression:fhir.FhirString fhir: StructureDefinition.context.expression:string', });
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionContext._fts_dataType = 'StructureDefinitionContext';
/**
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
export class StructureDefinitionSnapshot extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['element']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition', });
        }
        else if (!Array.isArray(this.element)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition', });
        }
        else if (this.element.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition', });
        }
        if (this["element"]) {
            this.element.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionSnapshot._fts_dataType = 'StructureDefinitionSnapshot';
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export class StructureDefinitionDifferential extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['element']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition', });
        }
        else if (!Array.isArray(this.element)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition', });
        }
        else if (this.element.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition', });
        }
        if (this["element"]) {
            this.element.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionDifferential._fts_dataType = 'StructureDefinitionDifferential';
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export class StructureDefinition extends fhir.DomainResource {
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'StructureDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.Coding(x));
        }
        else {
            this.keyword = [];
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirCode({ value: source.fhirVersion });
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.StructureDefinitionMapping(x));
        }
        else {
            this.mapping = [];
        }
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        else {
            this.abstract = null;
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.StructureDefinitionContext(x));
        }
        else {
            this.context = [];
        }
        if (source['contextInvariant']) {
            this.contextInvariant = source.contextInvariant.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.contextInvariant = [];
        }
        if (source['type']) {
            this.type = new fhir.FhirUri({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['baseDefinition']) {
            this.baseDefinition = new fhir.FhirCanonical({ value: source.baseDefinition });
        }
        if (source['derivation']) {
            this.derivation = source.derivation;
        }
        if (source['snapshot']) {
            this.snapshot = new fhir.StructureDefinitionSnapshot(source.snapshot);
        }
        if (source['differential']) {
            this.differential = new fhir.StructureDefinitionDifferential(source.differential);
        }
    }
    /**
     * Required-bound Value Set for status (StructureDefinition.status)
     */
    static statusRequiredCoding() {
        return PublicationStatusCodings;
    }
    /**
     * Extensible-bound Value Set for keyword (StructureDefinition.keyword)
     */
    static keywordExtensibleCoding() {
        return DefinitionUseCodings;
    }
    /**
     * Required-bound Value Set for fhirVersion (StructureDefinition.fhirVersion)
     */
    static fhirVersionRequiredCoding() {
        return FHIRVersionCodings;
    }
    /**
     * Required-bound Value Set for kind (StructureDefinition.kind)
     */
    static kindRequiredCoding() {
        return StructureDefinitionKindCodings;
    }
    /**
     * Extensible-bound Value Set for type (StructureDefinition.type)
     */
    static typeExtensibleCoding() {
        return DefinedTypesCodings;
    }
    /**
     * Required-bound Value Set for derivation (StructureDefinition.derivation)
     */
    static derivationRequiredCoding() {
        return TypeDerivationRuleCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"StructureDefinition" fhir: StructureDefinition.resourceType:"StructureDefinition"', });
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url:fhir.FhirUri fhir: StructureDefinition.url:uri', });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: StructureDefinition.name:string', });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: StructureDefinition.status:code', });
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["keyword"]) {
            this.keyword.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["fhirVersion"]) {
            issues.push(...this.fhirVersion.doModelValidation());
        }
        if (this["mapping"]) {
            this.mapping.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind:StructureDefinitionKindCodeType fhir: StructureDefinition.kind:code', });
        }
        if (!this['abstract']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property abstract:fhir.FhirBoolean fhir: StructureDefinition.abstract:boolean', });
        }
        if (this["abstract"]) {
            issues.push(...this.abstract.doModelValidation());
        }
        if (this["context"]) {
            this.context.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contextInvariant"]) {
            this.contextInvariant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirUri fhir: StructureDefinition.type:uri', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["baseDefinition"]) {
            issues.push(...this.baseDefinition.doModelValidation());
        }
        if (this["snapshot"]) {
            issues.push(...this.snapshot.doModelValidation());
        }
        if (this["differential"]) {
            issues.push(...this.differential.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinition._fts_dataType = 'StructureDefinition';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RydWN0dXJlRGVmaW5pdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFFckMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFFbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSwyQkFBMkIsR0FBa0MsTUFBTSxpREFBaUQsQ0FBQztBQUc5SCxhQUFhO0FBQ2IsT0FBTyxFQUFFLHdCQUF3QixHQUErQixNQUFNLDhDQUE4QyxDQUFDO0FBR3JILGFBQWE7QUFDYixPQUFPLEVBQUUsb0JBQW9CLEdBQTJCLE1BQU0sMENBQTBDLENBQUM7QUFHekcsYUFBYTtBQUNiLE9BQU8sRUFBRSxrQkFBa0IsR0FBeUIsTUFBTSx3Q0FBd0MsQ0FBQztBQUduRyxhQUFhO0FBQ2IsT0FBTyxFQUFFLDhCQUE4QixHQUFxQyxNQUFNLG9EQUFvRCxDQUFDO0FBR3ZJLGFBQWE7QUFDYixPQUFPLEVBQUUsbUJBQW1CLEdBQTBCLE1BQU0seUNBQXlDLENBQUM7QUFHdEcsYUFBYTtBQUNiLE9BQU8sRUFBRSx5QkFBeUIsR0FBZ0MsTUFBTSwrQ0FBK0MsQ0FBQztBQXlCeEg7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUFxQmxFOztPQUVHO0lBQ0gsWUFBWSxTQUFpRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN2RyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7U0FBRTthQUNqRjtZ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QUFHLFdBQVcsRUFBRSxnRkFBZ0YsR0FBRyxDQUFDLENBQUM7U0FDdko7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3BFLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUN4RixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQzVFLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDcEYsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUFsUUQ7O0dBRUc7QUFDNkIsaUNBQWEsR0FBVSxxQkFBcUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogU3RydWN0dXJlRGVmaW5pdGlvblxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RpbmdzLCBFeHRlbnNpb25Db250ZXh0VHlwZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V4dGVuc2lvbkNvbnRleHRUeXBlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RlcywgIEV4dGVuc2lvbkNvbnRleHRUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V4dGVuc2lvbkNvbnRleHRUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kaW5ncywgUHVibGljYXRpb25TdGF0dXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kZXMsICBQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbml0aW9uVXNlQ29kaW5ncywgRGVmaW5pdGlvblVzZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RlZmluaXRpb25Vc2VDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbml0aW9uVXNlQ29kZXMsICBEZWZpbml0aW9uVXNlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RlZmluaXRpb25Vc2VDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRkhJUlZlcnNpb25Db2RpbmdzLCBGSElSVmVyc2lvbkNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0ZISVJWZXJzaW9uQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRkhJUlZlcnNpb25Db2RlcywgIEZISVJWZXJzaW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0ZISVJWZXJzaW9uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kaW5ncywgU3RydWN0dXJlRGVmaW5pdGlvbktpbmRDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kZXMsICBTdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbmVkVHlwZXNDb2RpbmdzLCBEZWZpbmVkVHlwZXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZWZpbmVkVHlwZXNDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbmVkVHlwZXNDb2RlcywgIERlZmluZWRUeXBlc0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZWZpbmVkVHlwZXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVHlwZURlcml2YXRpb25SdWxlQ29kaW5ncywgVHlwZURlcml2YXRpb25SdWxlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVHlwZURlcml2YXRpb25SdWxlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVHlwZURlcml2YXRpb25SdWxlQ29kZXMsICBUeXBlRGVyaXZhdGlvblJ1bGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVHlwZURlcml2YXRpb25SdWxlQ29kZXMuanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmcgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmdBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWNhdGlvbiBpcyBkZXNjcmliZWQgb25jZSwgd2l0aCBnZW5lcmFsIGNvbW1lbnRzLCBhbmQgdGhlbiBzcGVjaWZpYyBtYXBwaW5ncyBhcmUgbWFkZSB0aGF0IHJlZmVyZW5jZSB0aGlzIGRlY2xhcmF0aW9uLlxyXG4gICAqL1xyXG4gIGlkZW50aXR5OiBmaGlyLkZoaXJJZHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgZm9ybWFsIGlkZW50aXR5IGZvciB0aGUgc3BlY2lmaWNhdGlvbiBiZWluZyBtYXBwZWQgdG8gaGVscHMgd2l0aCBpZGVudGlmeWluZyBtYXBzIGNvbnNpc3RlbnRseS5cclxuICAgKi9cclxuICB1cmk/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG5hbWUgZm9yIHRoZSBzcGVjaWZpY2F0aW9uIHRoYXQgaXMgYmVpbmcgbWFwcGVkIHRvLlxyXG4gICAqL1xyXG4gIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb21tZW50cyBhYm91dCB0aGlzIG1hcHBpbmcsIGluY2x1ZGluZyB2ZXJzaW9uIG5vdGVzLCBpc3N1ZXMsIHNjb3BlIGxpbWl0YXRpb25zLCBhbmQgb3RoZXIgaW1wb3J0YW50IG5vdGVzIGZvciB1c2FnZS5cclxuICAgKi9cclxuICBjb21tZW50PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBleHRlcm5hbCBzcGVjaWZpY2F0aW9uIHRoYXQgdGhlIGNvbnRlbnQgaXMgbWFwcGVkIHRvLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZURlZmluaXRpb25NYXBwaW5nIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmcnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWZpY2F0aW9uIGlzIGRlc2NyaWJlZCBvbmNlLCB3aXRoIGdlbmVyYWwgY29tbWVudHMsIGFuZCB0aGVuIHNwZWNpZmljIG1hcHBpbmdzIGFyZSBtYWRlIHRoYXQgcmVmZXJlbmNlIHRoaXMgZGVjbGFyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aXR5OiBmaGlyLkZoaXJJZHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEEgZm9ybWFsIGlkZW50aXR5IGZvciB0aGUgc3BlY2lmaWNhdGlvbiBiZWluZyBtYXBwZWQgdG8gaGVscHMgd2l0aCBpZGVudGlmeWluZyBtYXBzIGNvbnNpc3RlbnRseS5cclxuICAgKi9cclxuICBwdWJsaWMgdXJpPzogZmhpci5GaGlyVXJpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG5hbWUgZm9yIHRoZSBzcGVjaWZpY2F0aW9uIHRoYXQgaXMgYmVpbmcgbWFwcGVkIHRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb21tZW50cyBhYm91dCB0aGlzIG1hcHBpbmcsIGluY2x1ZGluZyB2ZXJzaW9uIG5vdGVzLCBpc3N1ZXMsIHNjb3BlIGxpbWl0YXRpb25zLCBhbmQgb3RoZXIgaW1wb3J0YW50IG5vdGVzIGZvciB1c2FnZS5cclxuICAgKi9cclxuICBwdWJsaWMgY29tbWVudD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmcgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTdHJ1Y3R1cmVEZWZpbml0aW9uTWFwcGluZ0FyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGl0eSddKSB7IHRoaXMuaWRlbnRpdHkgPSBuZXcgZmhpci5GaGlySWQoe3ZhbHVlOiBzb3VyY2UuaWRlbnRpdHl9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaWRlbnRpdHkgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWyd1cmknXSkgeyB0aGlzLnVyaSA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudXJpfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tbWVudCddKSB7IHRoaXMuY29tbWVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuY29tbWVudH0pOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ2lkZW50aXR5J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBpZGVudGl0eTpmaGlyLkZoaXJJZCBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLm1hcHBpbmcuaWRlbnRpdHk6aWQnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiaWRlbnRpdHlcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5pZGVudGl0eS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ1cmlcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy51cmkuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wibmFtZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm5hbWUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY29tbWVudFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvbW1lbnQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIERlZmluZXMgaG93IHRvIGludGVycHJldCB0aGUgZXhwcmVzc2lvbiB0aGF0IGRlZmluZXMgd2hhdCB0aGUgY29udGV4dCBvZiB0aGUgZXh0ZW5zaW9uIGlzLlxyXG4gICAqL1xyXG4gIHR5cGU6IEV4dGVuc2lvbkNvbnRleHRUeXBlQ29kZVR5cGV8bnVsbDtcclxuICAvKipcclxuICAgKiBBbiBleHByZXNzaW9uIHRoYXQgZGVmaW5lcyB3aGVyZSBhbiBleHRlbnNpb24gY2FuIGJlIHVzZWQgaW4gcmVzb3VyY2VzLlxyXG4gICAqL1xyXG4gIGV4cHJlc3Npb246IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogSWRlbnRpZmllcyB0aGUgdHlwZXMgb2YgcmVzb3VyY2Ugb3IgZGF0YSB0eXBlIGVsZW1lbnRzIHRvIHdoaWNoIHRoZSBleHRlbnNpb24gY2FuIGJlIGFwcGxpZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlRGVmaW5pdGlvbkNvbnRleHQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdTdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dCc7XHJcbiAgLyoqXHJcbiAgICogRGVmaW5lcyBob3cgdG8gaW50ZXJwcmV0IHRoZSBleHByZXNzaW9uIHRoYXQgZGVmaW5lcyB3aGF0IHRoZSBjb250ZXh0IG9mIHRoZSBleHRlbnNpb24gaXMuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IEV4dGVuc2lvbkNvbnRleHRUeXBlQ29kZVR5cGV8bnVsbDtcclxuICAvKipcclxuICAgKiBBbiBleHByZXNzaW9uIHRoYXQgZGVmaW5lcyB3aGVyZSBhbiBleHRlbnNpb24gY2FuIGJlIHVzZWQgaW4gcmVzb3VyY2VzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleHByZXNzaW9uOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBTdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN0cnVjdHVyZURlZmluaXRpb25Db250ZXh0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2V4cHJlc3Npb24nXSkgeyB0aGlzLmV4cHJlc3Npb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmV4cHJlc3Npb259KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZXhwcmVzc2lvbiA9IG51bGw7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciB0eXBlIChTdHJ1Y3R1cmVEZWZpbml0aW9uLmNvbnRleHQudHlwZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHR5cGVSZXF1aXJlZENvZGluZygpOkV4dGVuc2lvbkNvbnRleHRUeXBlQ29kaW5nVHlwZSB7XHJcbiAgICByZXR1cm4gRXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWyd0eXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0eXBlOkV4dGVuc2lvbkNvbnRleHRUeXBlQ29kZVR5cGUgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5jb250ZXh0LnR5cGU6Y29kZScsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzWydleHByZXNzaW9uJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBleHByZXNzaW9uOmZoaXIuRmhpclN0cmluZyBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmNvbnRleHQuZXhwcmVzc2lvbjpzdHJpbmcnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiZXhwcmVzc2lvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmV4cHJlc3Npb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdHJ1Y3R1cmVEZWZpbml0aW9uU25hcHNob3QgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RydWN0dXJlRGVmaW5pdGlvblNuYXBzaG90QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQ2FwdHVyZXMgY29uc3RyYWludHMgb24gZWFjaCBlbGVtZW50IHdpdGhpbiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgZWxlbWVudDogZmhpci5FbGVtZW50RGVmaW5pdGlvbkFyZ3NbXXxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzbmFwc2hvdCB2aWV3IGlzIGV4cHJlc3NlZCBpbiBhIHN0YW5kYWxvbmUgZm9ybSB0aGF0IGNhbiBiZSB1c2VkIGFuZCBpbnRlcnByZXRlZCB3aXRob3V0IGNvbnNpZGVyaW5nIHRoZSBiYXNlIFN0cnVjdHVyZURlZmluaXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlRGVmaW5pdGlvblNuYXBzaG90IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3RydWN0dXJlRGVmaW5pdGlvblNuYXBzaG90JztcclxuICAvKipcclxuICAgKiBDYXB0dXJlcyBjb25zdHJhaW50cyBvbiBlYWNoIGVsZW1lbnQgd2l0aGluIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgZWxlbWVudDogZmhpci5FbGVtZW50RGVmaW5pdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFN0cnVjdHVyZURlZmluaXRpb25TbmFwc2hvdCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN0cnVjdHVyZURlZmluaXRpb25TbmFwc2hvdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydlbGVtZW50J10pIHsgdGhpcy5lbGVtZW50ID0gc291cmNlLmVsZW1lbnQubWFwKCh4KSA9PiBuZXcgZmhpci5FbGVtZW50RGVmaW5pdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmVsZW1lbnQgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydlbGVtZW50J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBlbGVtZW50OmZoaXIuRWxlbWVudERlZmluaXRpb25bXSBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLnNuYXBzaG90LmVsZW1lbnQ6RWxlbWVudERlZmluaXRpb24nLCB9KTtcclxuICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5lbGVtZW50KSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnc3RydWN0dXJlJywgIGRpYWdub3N0aWNzOiAnRm91bmQgc2NhbGFyIGluIGFycmF5IHByb3BlcnR5IGVsZW1lbnQ6Zmhpci5FbGVtZW50RGVmaW5pdGlvbltdIGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24uc25hcHNob3QuZWxlbWVudDpFbGVtZW50RGVmaW5pdGlvbicsIH0pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgZWxlbWVudDpmaGlyLkVsZW1lbnREZWZpbml0aW9uW10gZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5zbmFwc2hvdC5lbGVtZW50OkVsZW1lbnREZWZpbml0aW9uJywgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImVsZW1lbnRcIl0pIHsgdGhpcy5lbGVtZW50LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFN0cnVjdHVyZURlZmluaXRpb25EaWZmZXJlbnRpYWwgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RydWN0dXJlRGVmaW5pdGlvbkRpZmZlcmVudGlhbEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIENhcHR1cmVzIGNvbnN0cmFpbnRzIG9uIGVhY2ggZWxlbWVudCB3aXRoaW4gdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIGVsZW1lbnQ6IGZoaXIuRWxlbWVudERlZmluaXRpb25BcmdzW118bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZGlmZmVyZW50aWFsIHZpZXcgaXMgZXhwcmVzc2VkIHJlbGF0aXZlIHRvIHRoZSBiYXNlIFN0cnVjdHVyZURlZmluaXRpb24gLSBhIHN0YXRlbWVudCBvZiBkaWZmZXJlbmNlcyB0aGF0IGl0IGFwcGxpZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlRGVmaW5pdGlvbkRpZmZlcmVudGlhbCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N0cnVjdHVyZURlZmluaXRpb25EaWZmZXJlbnRpYWwnO1xyXG4gIC8qKlxyXG4gICAqIENhcHR1cmVzIGNvbnN0cmFpbnRzIG9uIGVhY2ggZWxlbWVudCB3aXRoaW4gdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbGVtZW50OiBmaGlyLkVsZW1lbnREZWZpbml0aW9uW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3RydWN0dXJlRGVmaW5pdGlvbkRpZmZlcmVudGlhbCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN0cnVjdHVyZURlZmluaXRpb25EaWZmZXJlbnRpYWxBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnZWxlbWVudCddKSB7IHRoaXMuZWxlbWVudCA9IHNvdXJjZS5lbGVtZW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuRWxlbWVudERlZmluaXRpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5lbGVtZW50ID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1snZWxlbWVudCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgZWxlbWVudDpmaGlyLkVsZW1lbnREZWZpbml0aW9uW10gZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5kaWZmZXJlbnRpYWwuZWxlbWVudDpFbGVtZW50RGVmaW5pdGlvbicsIH0pO1xyXG4gICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmVsZW1lbnQpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdzdHJ1Y3R1cmUnLCAgZGlhZ25vc3RpY3M6ICdGb3VuZCBzY2FsYXIgaW4gYXJyYXkgcHJvcGVydHkgZWxlbWVudDpmaGlyLkVsZW1lbnREZWZpbml0aW9uW10gZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5kaWZmZXJlbnRpYWwuZWxlbWVudDpFbGVtZW50RGVmaW5pdGlvbicsIH0pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgZWxlbWVudDpmaGlyLkVsZW1lbnREZWZpbml0aW9uW10gZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5kaWZmZXJlbnRpYWwuZWxlbWVudDpFbGVtZW50RGVmaW5pdGlvbicsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJlbGVtZW50XCJdKSB7IHRoaXMuZWxlbWVudC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdHJ1Y3R1cmVEZWZpbml0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdHVyZURlZmluaXRpb25BcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJTdHJ1Y3R1cmVEZWZpbml0aW9uXCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENhbiBiZSBhIHVybjp1dWlkOiBvciBhIHVybjpvaWQ6IGJ1dCByZWFsIGh0dHA6IGFkZHJlc3NlcyBhcmUgcHJlZmVycmVkLiAgTXVsdGlwbGUgaW5zdGFuY2VzIG1heSBzaGFyZSB0aGUgc2FtZSBVUkwgaWYgdGhleSBoYXZlIGEgZGlzdGluY3QgdmVyc2lvbi5cclxuICAgKiBUaGUgZGV0ZXJtaW5hdGlvbiBvZiB3aGVuIHRvIGNyZWF0ZSBhIG5ldyB2ZXJzaW9uIG9mIGEgcmVzb3VyY2UgKHNhbWUgdXJsLCBuZXcgdmVyc2lvbikgdnMuIGRlZmluaW5nIGEgbmV3IGFydGlmYWN0IGlzIHVwIHRvIHRoZSBhdXRob3IuICBDb25zaWRlcmF0aW9ucyBmb3IgbWFraW5nIHRoaXMgZGVjaXNpb24gYXJlIGZvdW5kIGluIFtUZWNobmljYWwgYW5kIEJ1c2luZXNzIFZlcnNpb25zXShyZXNvdXJjZS5odG1sI3ZlcnNpb25zKS4gXHJcbiAgICogSW4gc29tZSBjYXNlcywgdGhlIHJlc291cmNlIGNhbiBubyBsb25nZXIgYmUgZm91bmQgYXQgdGhlIHN0YXRlZCB1cmwsIGJ1dCB0aGUgdXJsIGl0c2VsZiBjYW5ub3QgY2hhbmdlLiBJbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSB0aGUgW21ldGEuc291cmNlXShyZXNvdXJjZS5odG1sI21ldGEpIGVsZW1lbnQgdG8gaW5kaWNhdGUgd2hlcmUgdGhlIGN1cnJlbnQgbWFzdGVyIHNvdXJjZSBvZiB0aGUgcmVzb3VyY2UgY2FuIGJlIGZvdW5kLlxyXG4gICAqL1xyXG4gIHVybDogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVHlwaWNhbGx5LCB0aGlzIGlzIHVzZWQgZm9yIGlkZW50aWZpZXJzIHRoYXQgY2FuIGdvIGluIGFuIEhMNyBWMyBJSSAoaW5zdGFuY2UgaWRlbnRpZmllcikgZGF0YSB0eXBlLCBhbmQgY2FuIHRoZW4gaWRlbnRpZnkgdGhpcyBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiBvdXRzaWRlIG9mIEZISVIsIHdoZXJlIGl0IGlzIG5vdCBwb3NzaWJsZSB0byB1c2UgdGhlIGxvZ2ljYWwgVVJJLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIG1heSBiZSBkaWZmZXJlbnQgc3RydWN0dXJlIGRlZmluaXRpb24gaW5zdGFuY2VzIHRoYXQgaGF2ZSB0aGUgc2FtZSBpZGVudGlmaWVyIGJ1dCBkaWZmZXJlbnQgdmVyc2lvbnMuICBUaGUgdmVyc2lvbiBjYW4gYmUgYXBwZW5kZWQgdG8gdGhlIHVybCBpbiBhIHJlZmVyZW5jZSB0byBhbGxvdyBhIHJlZmVyZW5jZSB0byBhIHBhcnRpY3VsYXIgYnVzaW5lc3MgdmVyc2lvbiBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LlNvbWUgRXhhbXBsZXM6IFxyXG4gICAqICogTzJTYXRPYnNlcnZhdGlvblxyXG4gICAqICogUHJlc2VudGF0aW9uUmVwb3J0XHJcbiAgICogKiBJbW11bml6YXRpb24yXHJcbiAgICogKiBBY21lQWRtaXNzaW9uUmVjb3JkT2xkLlxyXG4gICAqL1xyXG4gIG5hbWU6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgbmFtZSBkb2VzIG5vdCBuZWVkIHRvIGJlIG1hY2hpbmUtcHJvY2Vzc2luZyBmcmllbmRseSBhbmQgbWF5IGNvbnRhaW4gcHVuY3R1YXRpb24sIHdoaXRlLXNwYWNlLCBldGMuQXBwbGljYXRpb25zIGRvbid0IGhhdmUgdG8gdXNlIHRoaXMgbmFtZSBidXQgY2FuIGFsd2F5cyBmYWxsIGJhY2sgdG8gaXQuIFRoZSB0aXRsZSBhbHNvIGNvcnJlc3BvbmRzIHRvIHRoZSBsYWJlbCBmb3IgdGhlIHJvb3QgZWxlbWVudC5cclxuICAgKi9cclxuICB0aXRsZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2Ygc3RydWN0dXJlIGRlZmluaXRpb25zIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBzdGF0dXM6IFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGV8bnVsbDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIHN0cnVjdHVyZSBkZWZpbml0aW9ucyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuXHJcbiAgICovXHJcbiAgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOb3RlIHRoYXQgdGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgdGhlIHJlc291cmNlIGxhc3QtbW9kaWZpZWQtZGF0ZSwgc2luY2UgdGhlIHJlc291cmNlIG1heSBiZSBhIHNlY29uZGFyeSByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24uIEFkZGl0aW9uYWwgc3BlY2lmaWMgZGF0ZXMgbWF5IGJlIGFkZGVkIGFzIGV4dGVuc2lvbnMgb3IgYmUgZm91bmQgYnkgY29uc3VsdGluZyBQcm92ZW5hbmNlcyBhc3NvY2lhdGVkIHdpdGggcGFzdCB2ZXJzaW9ucyBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVXN1YWxseSBhbiBvcmdhbml6YXRpb24gYnV0IG1heSBiZSBhbiBpbmRpdmlkdWFsLiBUaGUgcHVibGlzaGVyIChvciBzdGV3YXJkKSBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gaXMgdGhlIG9yZ2FuaXphdGlvbiBvciBpbmRpdmlkdWFsIHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhlIG1haW50ZW5hbmNlIGFuZCB1cGtlZXAgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLiBUaGlzIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBpbmRpdmlkdWFsIG9yIG9yZ2FuaXphdGlvbiB0aGF0IGRldmVsb3BlZCBhbmQgaW5pdGlhbGx5IGF1dGhvcmVkIHRoZSBjb250ZW50LiBUaGUgcHVibGlzaGVyIGlzIHRoZSBwcmltYXJ5IHBvaW50IG9mIGNvbnRhY3QgZm9yIHF1ZXN0aW9ucyBvciBpc3N1ZXMgd2l0aCB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24uIFRoaXMgaXRlbSBTSE9VTEQgYmUgcG9wdWxhdGVkIHVubGVzcyB0aGUgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIGZyb20gY29udGV4dC5cclxuICAgKi9cclxuICBwdWJsaXNoZXI/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXkgYmUgYSB3ZWIgc2l0ZSwgYW4gZW1haWwgYWRkcmVzcywgYSB0ZWxlcGhvbmUgbnVtYmVyLCBldGMuXHJcbiAgICovXHJcbiAgY29udGFjdD86IGZoaXIuQ29udGFjdERldGFpbEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBkZXNjcmlwdGlvbiBjYW4gYmUgdXNlZCB0byBjYXB0dXJlIGRldGFpbHMgc3VjaCBhcyB3aHkgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIHdhcyBidWlsdCwgY29tbWVudHMgYWJvdXQgbWlzdXNlLCBpbnN0cnVjdGlvbnMgZm9yIGNsaW5pY2FsIHVzZSBhbmQgaW50ZXJwcmV0YXRpb24sIGxpdGVyYXR1cmUgcmVmZXJlbmNlcywgZXhhbXBsZXMgZnJvbSB0aGUgcGFwZXIgd29ybGQsIGV0Yy4gSXQgaXMgbm90IGEgcmVuZGVyaW5nIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiBhcyBjb252ZXllZCBpbiB0aGUgJ3RleHQnIGZpZWxkIG9mIHRoZSByZXNvdXJjZSBpdHNlbGYuIFRoaXMgaXRlbSBTSE9VTEQgYmUgcG9wdWxhdGVkIHVubGVzcyB0aGUgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIGZyb20gY29udGV4dCAoZS5nLiB0aGUgbGFuZ3VhZ2Ugb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGlzIHByZXN1bWVkIHRvIGJlIHRoZSBwcmVkb21pbmFudCBsYW5ndWFnZSBpbiB0aGUgcGxhY2UgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIHdhcyBjcmVhdGVkKS5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiBtdWx0aXBsZSB1c2VDb250ZXh0cyBhcmUgc3BlY2lmaWVkLCB0aGVyZSBpcyBubyBleHBlY3RhdGlvbiB0aGF0IGFsbCBvciBhbnkgb2YgdGhlIGNvbnRleHRzIGFwcGx5LlxyXG4gICAqL1xyXG4gIHVzZUNvbnRleHQ/OiBmaGlyLlVzYWdlQ29udGV4dEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSXQgbWF5IGJlIHBvc3NpYmxlIGZvciB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gdG8gYmUgdXNlZCBpbiBqdXJpc2RpY3Rpb25zIG90aGVyIHRoYW4gdGhvc2UgZm9yIHdoaWNoIGl0IHdhcyBvcmlnaW5hbGx5IGRlc2lnbmVkIG9yIGludGVuZGVkLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIHVzYWdlIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbi4gSW5zdGVhZCwgaXQgcHJvdmlkZXMgdHJhY2VhYmlsaXR5IG9mICcnd2h5JycgdGhlIHJlc291cmNlIGlzIGVpdGhlciBuZWVkZWQgb3IgJyd3aHknJyBpdCBpcyBkZWZpbmVkIGFzIGl0IGlzLiAgVGhpcyBtYXkgYmUgdXNlZCB0byBwb2ludCB0byBzb3VyY2UgbWF0ZXJpYWxzIG9yIHNwZWNpZmljYXRpb25zIHRoYXQgZHJvdmUgdGhlIHN0cnVjdHVyZSBvZiB0aGlzIHN0cnVjdHVyZSBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIHB1cnBvc2U/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgY29weXJpZ2h0IHN0YXRlbWVudCByZWxhdGluZyB0byB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gYW5kL29yIGl0cyBjb250ZW50cy4gQ29weXJpZ2h0IHN0YXRlbWVudHMgYXJlIGdlbmVyYWxseSBsZWdhbCByZXN0cmljdGlvbnMgb24gdGhlIHVzZSBhbmQgcHVibGlzaGluZyBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgY29weXJpZ2h0PzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHNldCBvZiBrZXkgd29yZHMgb3IgdGVybXMgZnJvbSBleHRlcm5hbCB0ZXJtaW5vbG9naWVzIHRoYXQgbWF5IGJlIHVzZWQgdG8gYXNzaXN0IHdpdGggaW5kZXhpbmcgYW5kIHNlYXJjaGluZyBvZiB0ZW1wbGF0ZXMgbmJ5IGRlc2NyaWJpbmcgdGhlIHVzZSBvZiB0aGlzIHN0cnVjdHVyZSBkZWZpbml0aW9uLCBvciB0aGUgY29udGVudCBpdCBkZXNjcmliZXMuXHJcbiAgICovXHJcbiAga2V5d29yZD86IGZoaXIuQ29kaW5nQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIFN0cnVjdHVyZURlZmluaXRpb24gZG9lcyBub3QgbmVlZCB0byBzcGVjaWZ5IHRoZSB0YXJnZXQgaXQgYXBwbGllcyB0byBhcyBTdHJ1Y3R1cmVEZWZpbml0aW9ucyB3aWxsIG9mdGVuIGJlIHZhbGlkIGFjcm9zcyBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBGSElSLiBGSElSIHRvb2xpbmcgY2FuIGRldGVybWluZSB3aGV0aGVyIGEgU3RydWN0dXJlRGVmaW5pdGlvbiBpcyBjb25zaXN0ZW50IHdpdGggYSBwYXJ0aWN1bGFyIFN0cnVjdHVyZURlZmluaXRpb24gaWYgZGVzaXJlZC5cclxuICAgKi9cclxuICBmaGlyVmVyc2lvbj86IGZoaXIuRmhpckNvZGV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBleHRlcm5hbCBzcGVjaWZpY2F0aW9uIHRoYXQgdGhlIGNvbnRlbnQgaXMgbWFwcGVkIHRvLlxyXG4gICAqL1xyXG4gIG1hcHBpbmc/OiBmaGlyLlN0cnVjdHVyZURlZmluaXRpb25NYXBwaW5nQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZpbmVzIHRoZSBraW5kIG9mIHN0cnVjdHVyZSB0aGF0IHRoaXMgZGVmaW5pdGlvbiBpcyBkZXNjcmliaW5nLlxyXG4gICAqL1xyXG4gIGtpbmQ6IFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kZVR5cGV8bnVsbDtcclxuICAvKipcclxuICAgKiBBYnN0cmFjdCBSZXNvdXJjZXMgY2Fubm90IGJlIGluc3RhbnRpYXRlZCAtIGEgY29uY3JldGUgc3ViLXR5cGUgbXVzdCBiZSB1c2VkLiBBYnN0cmFjdCBkYXRhdHlwZXMgYW5kIGV4dGVuc2lvbnMgY2Fubm90IGJlIHVzZWQgaW4gYW4gaW5zdGFuY2UuIEZvciBsb2dpY2FsIG1vZGVscywgdGhlIGV4YWN0IGltcGxpY2F0aW9uIG9mIFwiYWJzdHJhY3RcIiB3aWxsIHJlc3Qgd2l0aCB0aGUgYXV0aG9yLCBkZXBlbmRpbmcgaG93IHRoZSBsb2dpY2FsIG1vZGVsIGlzIHVzZWQuIEZsYWdnaW5nIGEgY29uc3RyYWludCBzdHJ1Y3R1cmUgYXMgYWJzdHJhY3QgY29udmV5cyBkZXNpZ24gaW50ZW50IGJ1dCBtYWtlcyBubyBkaWZmZXJlbmNlIHRvIGhvdyB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gaXMgaGFuZGxlZC4gTm90ZSB0aGF0IGlubGluZSBkZWNsYXJlZCBlbGVtZW50cyB0aGF0IGFyZSBnaXZlbiB0aGUgdHlwZSBcIkVsZW1lbnRcIiBpbiB0aGUgU3RydWN0dXJlRGVmaW5pdGlvbiwgYnV0IGhhdmUgY2hpbGRyZW4gZGVzY3JpYmVkLCBhcmUgYW5vbnltb3VzIGNvbmNyZXRlIHR5cGVzIHRoYXQgc3BlY2lhbGl6ZSBFbGVtZW50LlxyXG4gICAqL1xyXG4gIGFic3RyYWN0OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgdGhlIHR5cGVzIG9mIHJlc291cmNlIG9yIGRhdGEgdHlwZSBlbGVtZW50cyB0byB3aGljaCB0aGUgZXh0ZW5zaW9uIGNhbiBiZSBhcHBsaWVkLlxyXG4gICAqL1xyXG4gIGNvbnRleHQ/OiBmaGlyLlN0cnVjdHVyZURlZmluaXRpb25Db250ZXh0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcnVsZXMgYXJlIG9ubHkgZXZhbHVhdGVkIHdoZW4gdGhlIGV4dGVuc2lvbiBpcyBwcmVzZW50LiBXaGVuIGV2YWx1YXRpbmcgdGhlIGludmFyaWFudCwgdGhlIEZISVJQYXRoIGZvY3VzIGlzIHRoZSBlbGVtZW50IHRoYXQgaG9sZHMgdGhlIGV4dGVuc2lvbiwgYW5kICVleHRlbnNpb24gcmVmZXJzIHRvIHRoZSBleHRlbnNpb24gaXRzZWxmLlxyXG4gICAqL1xyXG4gIGNvbnRleHRJbnZhcmlhbnQ/OiBmaGlyLkZoaXJTdHJpbmdbXXxzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IGluIHRoZSBjYXNlIG9mIGNvbnN0cmFpbnRzLCB0aGUgdHlwZSBjb3VsZCBiZSBkZXRlcm1pbmVkIGJ5IGNoYXNpbmcgdGhyb3VnaCB0aGUgYmFzZURlZmluaXRpb24gcmVmZXJlbmNlcyB1bnRpbCBhIGNvbmNyZXRlIHN0cnVjdHVyZSAoZGVyaXZhdGlvbiA9IHNwZWNpYWxpemF0aW9uKSBpcyByZWFjaGVkLCBvciBieSBsb29raW5nIGF0IHRoZSBwYXRoIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzbmFwc2hvdCAtIGlmIHByZXNlbnQgLSBidXQgcHJvdmlkaW5nIHRoZSB0eXBlIGRpcmVjdGx5IG1ha2VzIGZvciBzaW1wbGVyIHRvb2xpbmcgYW5kIGluZGV4aW5nLiBcclxuICAgKiBUaGUgdHlwZSBtdXN0IG1hdGNoIHRoZSBlbGVtZW50cyBkZWZpbmVkIGluIHRoZSBkaWZmZXJlbnRpYWwgYW5kIHRoZSBzbmFwc2hvdC4gRm9yIGFsbCBGSElSIGRlZmluZWQgdHlwZXMsIHRoZSBwYXRoIG5hbWUgb2YgdGhlIGVsZW1lbnQgd2lsbCBzdGFydCB3aXRoIHRoZSB0eXBlIG5hbWUuIEZvciBsb2dpY2FsIG1vZGVscywgd2hlcmUgdGhlIHR5cGUgaXMgYSBVUkwsIHRoZSB0eXBlIG5hbWUgU0hPVUxEIHN0YXJ0IHdpdGggdGhlIHRhaWwgb2YgdGhlIHR5cGUgVVJMIHdoZXJlIHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIHR5cGU6IGZoaXIuRmhpclVyaXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIGRpZmZlcmVudGlhbCBjb25zdHJhaW50cyBhcmUgc3BlY2lmaWVkIGluIHRoaXMgc3RydWN0dXJlLCB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBiYXNlIGluIGEgXCJkaWZmZXJlbnRpYWxcIiBmYXNoaW9uLiBJZiB0aGVyZSBpcyBubyBiYXNlLCB0aGVuIHRoZSBkaWZmZXJlbnRpYWwgY29uc3RyYWludHMgY2Fubm90IGJlIHByb3ZpZGVkIChzbmFwc2hvdCBvbmx5KS4gRGlmZmVyZW50aWFsIHN0cnVjdHVyZXMgYXJlIHVzZWZ1bCBmb3IgdGhlIGVkaXRpbmcgcGVyc3BlY3RpdmUsIGFuZCBzbmFwc2hvdCBzdHJ1Y3R1cmVzIGFyZSBzdWl0YWJsZSBmb3Igb3BlcmF0aW9uYWwgdXNlLiBUaGUgRkhJUiBQcm9qZWN0IHByb3ZpZGVzIGEgbnVtYmVyIG9mIHRvb2xzL3NlcnZpY2VzIHRvIHBvcHVsYXRlIHNuYXBzaG90cyBmcm9tIGRpZmZlcmVudGlhbCBjb25zdHJhaW50cy4gTG9naWNhbCBNb2RlbHMgaGF2ZSBhIGJhc2Ugb2YgXCJFbGVtZW50XCIgb3IgYW5vdGhlciBsb2dpY2FsIG1vZGVsLlxyXG4gICAqL1xyXG4gIGJhc2VEZWZpbml0aW9uPzogZmhpci5GaGlyQ2Fub25pY2FsfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIGRlZmluaXRpb24gaXMgYSBzcGVjaWFsaXphdGlvbiwgdGhlbiBpdCBhZGRzIG5ldyBlbGVtZW50cyBpbiB0aGUgZGlmZmVyZW50aWFsLCBhbmQgdGhlIHNuYXBzaG90IGluY2x1ZGVzIHRoZSBpbmhlcml0ZWQgZWxlbWVudHMuICBJZiB0aGUgZGVmaW5pdGlvbiBpcyBhIGNvbnN0cmFpbnQsIHRoZW4gaXQgY2Fubm90IGRlZmluZSBuZXcgZWxlbWVudHMsIGl0IGNhbiBvbmx5IG1ha2UgbmV3IHJ1bGVzIGFib3V0IGV4aXN0aW5nIGNvbnRlbnQgKHNlZSBbUHJvZmlsaW5nIFJlc291cmNlc10ocHJvZmlsaW5nLmh0bWwjcmVzb3VyY2VzKSkuXHJcbiAgICovXHJcbiAgZGVyaXZhdGlvbj86IFR5cGVEZXJpdmF0aW9uUnVsZUNvZGVUeXBlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHNuYXBzaG90IHZpZXcgaXMgZXhwcmVzc2VkIGluIGEgc3RhbmRhbG9uZSBmb3JtIHRoYXQgY2FuIGJlIHVzZWQgYW5kIGludGVycHJldGVkIHdpdGhvdXQgY29uc2lkZXJpbmcgdGhlIGJhc2UgU3RydWN0dXJlRGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBzbmFwc2hvdD86IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvblNuYXBzaG90QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBkaWZmZXJlbnRpYWwgdmlldyBpcyBleHByZXNzZWQgcmVsYXRpdmUgdG8gdGhlIGJhc2UgU3RydWN0dXJlRGVmaW5pdGlvbiAtIGEgc3RhdGVtZW50IG9mIGRpZmZlcmVuY2VzIHRoYXQgaXQgYXBwbGllcy5cclxuICAgKi9cclxuICBkaWZmZXJlbnRpYWw/OiBmaGlyLlN0cnVjdHVyZURlZmluaXRpb25EaWZmZXJlbnRpYWxBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZGVmaW5pdGlvbiBvZiBhIEZISVIgc3RydWN0dXJlLiBUaGlzIHJlc291cmNlIGlzIHVzZWQgdG8gZGVzY3JpYmUgdGhlIHVuZGVybHlpbmcgcmVzb3VyY2VzLCBkYXRhIHR5cGVzIGRlZmluZWQgaW4gRkhJUiwgYW5kIGFsc28gZm9yIGRlc2NyaWJpbmcgZXh0ZW5zaW9ucyBhbmQgY29uc3RyYWludHMgb24gcmVzb3VyY2VzIGFuZCBkYXRhIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZURlZmluaXRpb24gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N0cnVjdHVyZURlZmluaXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiU3RydWN0dXJlRGVmaW5pdGlvblwiO1xyXG4gIC8qKlxyXG4gICAqIENhbiBiZSBhIHVybjp1dWlkOiBvciBhIHVybjpvaWQ6IGJ1dCByZWFsIGh0dHA6IGFkZHJlc3NlcyBhcmUgcHJlZmVycmVkLiAgTXVsdGlwbGUgaW5zdGFuY2VzIG1heSBzaGFyZSB0aGUgc2FtZSBVUkwgaWYgdGhleSBoYXZlIGEgZGlzdGluY3QgdmVyc2lvbi5cclxuICAgKiBUaGUgZGV0ZXJtaW5hdGlvbiBvZiB3aGVuIHRvIGNyZWF0ZSBhIG5ldyB2ZXJzaW9uIG9mIGEgcmVzb3VyY2UgKHNhbWUgdXJsLCBuZXcgdmVyc2lvbikgdnMuIGRlZmluaW5nIGEgbmV3IGFydGlmYWN0IGlzIHVwIHRvIHRoZSBhdXRob3IuICBDb25zaWRlcmF0aW9ucyBmb3IgbWFraW5nIHRoaXMgZGVjaXNpb24gYXJlIGZvdW5kIGluIFtUZWNobmljYWwgYW5kIEJ1c2luZXNzIFZlcnNpb25zXShyZXNvdXJjZS5odG1sI3ZlcnNpb25zKS4gXHJcbiAgICogSW4gc29tZSBjYXNlcywgdGhlIHJlc291cmNlIGNhbiBubyBsb25nZXIgYmUgZm91bmQgYXQgdGhlIHN0YXRlZCB1cmwsIGJ1dCB0aGUgdXJsIGl0c2VsZiBjYW5ub3QgY2hhbmdlLiBJbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSB0aGUgW21ldGEuc291cmNlXShyZXNvdXJjZS5odG1sI21ldGEpIGVsZW1lbnQgdG8gaW5kaWNhdGUgd2hlcmUgdGhlIGN1cnJlbnQgbWFzdGVyIHNvdXJjZSBvZiB0aGUgcmVzb3VyY2UgY2FuIGJlIGZvdW5kLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cmw6IGZoaXIuRmhpclVyaXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFR5cGljYWxseSwgdGhpcyBpcyB1c2VkIGZvciBpZGVudGlmaWVycyB0aGF0IGNhbiBnbyBpbiBhbiBITDcgVjMgSUkgKGluc3RhbmNlIGlkZW50aWZpZXIpIGRhdGEgdHlwZSwgYW5kIGNhbiB0aGVuIGlkZW50aWZ5IHRoaXMgc3RydWN0dXJlIGRlZmluaXRpb24gb3V0c2lkZSBvZiBGSElSLCB3aGVyZSBpdCBpcyBub3QgcG9zc2libGUgdG8gdXNlIHRoZSBsb2dpY2FsIFVSSS5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIG1heSBiZSBkaWZmZXJlbnQgc3RydWN0dXJlIGRlZmluaXRpb24gaW5zdGFuY2VzIHRoYXQgaGF2ZSB0aGUgc2FtZSBpZGVudGlmaWVyIGJ1dCBkaWZmZXJlbnQgdmVyc2lvbnMuICBUaGUgdmVyc2lvbiBjYW4gYmUgYXBwZW5kZWQgdG8gdGhlIHVybCBpbiBhIHJlZmVyZW5jZSB0byBhbGxvdyBhIHJlZmVyZW5jZSB0byBhIHBhcnRpY3VsYXIgYnVzaW5lc3MgdmVyc2lvbiBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LlNvbWUgRXhhbXBsZXM6IFxyXG4gICAqICogTzJTYXRPYnNlcnZhdGlvblxyXG4gICAqICogUHJlc2VudGF0aW9uUmVwb3J0XHJcbiAgICogKiBJbW11bml6YXRpb24yXHJcbiAgICogKiBBY21lQWRtaXNzaW9uUmVjb3JkT2xkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGlzIG5hbWUgZG9lcyBub3QgbmVlZCB0byBiZSBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkgYW5kIG1heSBjb250YWluIHB1bmN0dWF0aW9uLCB3aGl0ZS1zcGFjZSwgZXRjLkFwcGxpY2F0aW9ucyBkb24ndCBoYXZlIHRvIHVzZSB0aGlzIG5hbWUgYnV0IGNhbiBhbHdheXMgZmFsbCBiYWNrIHRvIGl0LiBUaGUgdGl0bGUgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgbGFiZWwgZm9yIHRoZSByb290IGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHRpdGxlPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIHN0cnVjdHVyZSBkZWZpbml0aW9ucyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1czogUHVibGljYXRpb25TdGF0dXNDb2RlVHlwZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2Ygc3RydWN0dXJlIGRlZmluaXRpb25zIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSByZXNvdXJjZSBsYXN0LW1vZGlmaWVkLWRhdGUsIHNpbmNlIHRoZSByZXNvdXJjZSBtYXkgYmUgYSBzZWNvbmRhcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLiBBZGRpdGlvbmFsIHNwZWNpZmljIGRhdGVzIG1heSBiZSBhZGRlZCBhcyBleHRlbnNpb25zIG9yIGJlIGZvdW5kIGJ5IGNvbnN1bHRpbmcgUHJvdmVuYW5jZXMgYXNzb2NpYXRlZCB3aXRoIHBhc3QgdmVyc2lvbnMgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbi4gVGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgaW5kaXZpZHVhbCBvciBvcmdhbml6YXRpb24gdGhhdCBkZXZlbG9wZWQgYW5kIGluaXRpYWxseSBhdXRob3JlZCB0aGUgY29udGVudC4gVGhlIHB1Ymxpc2hlciBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBjb250YWN0IGZvciBxdWVzdGlvbnMgb3IgaXNzdWVzIHdpdGggdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIHB1Ymxpc2hlcj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWF5IGJlIGEgd2ViIHNpdGUsIGFuIGVtYWlsIGFkZHJlc3MsIGEgdGVsZXBob25lIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250YWN0PzogZmhpci5Db250YWN0RGV0YWlsW107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBkZXNjcmlwdGlvbiBjYW4gYmUgdXNlZCB0byBjYXB0dXJlIGRldGFpbHMgc3VjaCBhcyB3aHkgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIHdhcyBidWlsdCwgY29tbWVudHMgYWJvdXQgbWlzdXNlLCBpbnN0cnVjdGlvbnMgZm9yIGNsaW5pY2FsIHVzZSBhbmQgaW50ZXJwcmV0YXRpb24sIGxpdGVyYXR1cmUgcmVmZXJlbmNlcywgZXhhbXBsZXMgZnJvbSB0aGUgcGFwZXIgd29ybGQsIGV0Yy4gSXQgaXMgbm90IGEgcmVuZGVyaW5nIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiBhcyBjb252ZXllZCBpbiB0aGUgJ3RleHQnIGZpZWxkIG9mIHRoZSByZXNvdXJjZSBpdHNlbGYuIFRoaXMgaXRlbSBTSE9VTEQgYmUgcG9wdWxhdGVkIHVubGVzcyB0aGUgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIGZyb20gY29udGV4dCAoZS5nLiB0aGUgbGFuZ3VhZ2Ugb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGlzIHByZXN1bWVkIHRvIGJlIHRoZSBwcmVkb21pbmFudCBsYW5ndWFnZSBpbiB0aGUgcGxhY2UgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIHdhcyBjcmVhdGVkKS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiBtdWx0aXBsZSB1c2VDb250ZXh0cyBhcmUgc3BlY2lmaWVkLCB0aGVyZSBpcyBubyBleHBlY3RhdGlvbiB0aGF0IGFsbCBvciBhbnkgb2YgdGhlIGNvbnRleHRzIGFwcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1c2VDb250ZXh0PzogZmhpci5Vc2FnZUNvbnRleHRbXTtcclxuICAvKipcclxuICAgKiBJdCBtYXkgYmUgcG9zc2libGUgZm9yIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiB0byBiZSB1c2VkIGluIGp1cmlzZGljdGlvbnMgb3RoZXIgdGhhbiB0aG9zZSBmb3Igd2hpY2ggaXQgd2FzIG9yaWdpbmFsbHkgZGVzaWduZWQgb3IgaW50ZW5kZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGRvZXMgbm90IGRlc2NyaWJlIHRoZSB1c2FnZSBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24uIEluc3RlYWQsIGl0IHByb3ZpZGVzIHRyYWNlYWJpbGl0eSBvZiAnJ3doeScnIHRoZSByZXNvdXJjZSBpcyBlaXRoZXIgbmVlZGVkIG9yICcnd2h5JycgaXQgaXMgZGVmaW5lZCBhcyBpdCBpcy4gIFRoaXMgbWF5IGJlIHVzZWQgdG8gcG9pbnQgdG8gc291cmNlIG1hdGVyaWFscyBvciBzcGVjaWZpY2F0aW9ucyB0aGF0IGRyb3ZlIHRoZSBzdHJ1Y3R1cmUgb2YgdGhpcyBzdHJ1Y3R1cmUgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcHVycG9zZT86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGNvcHlyaWdodCBzdGF0ZW1lbnQgcmVsYXRpbmcgdG8gdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGFuZC9vciBpdHMgY29udGVudHMuIENvcHlyaWdodCBzdGF0ZW1lbnRzIGFyZSBnZW5lcmFsbHkgbGVnYWwgcmVzdHJpY3Rpb25zIG9uIHRoZSB1c2UgYW5kIHB1Ymxpc2hpbmcgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3B5cmlnaHQ/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzZXQgb2Yga2V5IHdvcmRzIG9yIHRlcm1zIGZyb20gZXh0ZXJuYWwgdGVybWlub2xvZ2llcyB0aGF0IG1heSBiZSB1c2VkIHRvIGFzc2lzdCB3aXRoIGluZGV4aW5nIGFuZCBzZWFyY2hpbmcgb2YgdGVtcGxhdGVzIG5ieSBkZXNjcmliaW5nIHRoZSB1c2Ugb2YgdGhpcyBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiwgb3IgdGhlIGNvbnRlbnQgaXQgZGVzY3JpYmVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBrZXl3b3JkPzogZmhpci5Db2RpbmdbXTtcclxuICAvKipcclxuICAgKiBBIFN0cnVjdHVyZURlZmluaXRpb24gZG9lcyBub3QgbmVlZCB0byBzcGVjaWZ5IHRoZSB0YXJnZXQgaXQgYXBwbGllcyB0byBhcyBTdHJ1Y3R1cmVEZWZpbml0aW9ucyB3aWxsIG9mdGVuIGJlIHZhbGlkIGFjcm9zcyBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBGSElSLiBGSElSIHRvb2xpbmcgY2FuIGRldGVybWluZSB3aGV0aGVyIGEgU3RydWN0dXJlRGVmaW5pdGlvbiBpcyBjb25zaXN0ZW50IHdpdGggYSBwYXJ0aWN1bGFyIFN0cnVjdHVyZURlZmluaXRpb24gaWYgZGVzaXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgZmhpclZlcnNpb24/OiBmaGlyLkZoaXJDb2RlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBleHRlcm5hbCBzcGVjaWZpY2F0aW9uIHRoYXQgdGhlIGNvbnRlbnQgaXMgbWFwcGVkIHRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYXBwaW5nPzogZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uTWFwcGluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIERlZmluZXMgdGhlIGtpbmQgb2Ygc3RydWN0dXJlIHRoYXQgdGhpcyBkZWZpbml0aW9uIGlzIGRlc2NyaWJpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIGtpbmQ6IFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kZVR5cGV8bnVsbDtcclxuICAvKipcclxuICAgKiBBYnN0cmFjdCBSZXNvdXJjZXMgY2Fubm90IGJlIGluc3RhbnRpYXRlZCAtIGEgY29uY3JldGUgc3ViLXR5cGUgbXVzdCBiZSB1c2VkLiBBYnN0cmFjdCBkYXRhdHlwZXMgYW5kIGV4dGVuc2lvbnMgY2Fubm90IGJlIHVzZWQgaW4gYW4gaW5zdGFuY2UuIEZvciBsb2dpY2FsIG1vZGVscywgdGhlIGV4YWN0IGltcGxpY2F0aW9uIG9mIFwiYWJzdHJhY3RcIiB3aWxsIHJlc3Qgd2l0aCB0aGUgYXV0aG9yLCBkZXBlbmRpbmcgaG93IHRoZSBsb2dpY2FsIG1vZGVsIGlzIHVzZWQuIEZsYWdnaW5nIGEgY29uc3RyYWludCBzdHJ1Y3R1cmUgYXMgYWJzdHJhY3QgY29udmV5cyBkZXNpZ24gaW50ZW50IGJ1dCBtYWtlcyBubyBkaWZmZXJlbmNlIHRvIGhvdyB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gaXMgaGFuZGxlZC4gTm90ZSB0aGF0IGlubGluZSBkZWNsYXJlZCBlbGVtZW50cyB0aGF0IGFyZSBnaXZlbiB0aGUgdHlwZSBcIkVsZW1lbnRcIiBpbiB0aGUgU3RydWN0dXJlRGVmaW5pdGlvbiwgYnV0IGhhdmUgY2hpbGRyZW4gZGVzY3JpYmVkLCBhcmUgYW5vbnltb3VzIGNvbmNyZXRlIHR5cGVzIHRoYXQgc3BlY2lhbGl6ZSBFbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdDogZmhpci5GaGlyQm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgdGhlIHR5cGVzIG9mIHJlc291cmNlIG9yIGRhdGEgdHlwZSBlbGVtZW50cyB0byB3aGljaCB0aGUgZXh0ZW5zaW9uIGNhbiBiZSBhcHBsaWVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250ZXh0PzogZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBydWxlcyBhcmUgb25seSBldmFsdWF0ZWQgd2hlbiB0aGUgZXh0ZW5zaW9uIGlzIHByZXNlbnQuIFdoZW4gZXZhbHVhdGluZyB0aGUgaW52YXJpYW50LCB0aGUgRkhJUlBhdGggZm9jdXMgaXMgdGhlIGVsZW1lbnQgdGhhdCBob2xkcyB0aGUgZXh0ZW5zaW9uLCBhbmQgJWV4dGVuc2lvbiByZWZlcnMgdG8gdGhlIGV4dGVuc2lvbiBpdHNlbGYuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRleHRJbnZhcmlhbnQ/OiBmaGlyLkZoaXJTdHJpbmdbXTtcclxuICAvKipcclxuICAgKiBOb3RlIHRoYXQgaW4gdGhlIGNhc2Ugb2YgY29uc3RyYWludHMsIHRoZSB0eXBlIGNvdWxkIGJlIGRldGVybWluZWQgYnkgY2hhc2luZyB0aHJvdWdoIHRoZSBiYXNlRGVmaW5pdGlvbiByZWZlcmVuY2VzIHVudGlsIGEgY29uY3JldGUgc3RydWN0dXJlIChkZXJpdmF0aW9uID0gc3BlY2lhbGl6YXRpb24pIGlzIHJlYWNoZWQsIG9yIGJ5IGxvb2tpbmcgYXQgdGhlIHBhdGggb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNuYXBzaG90IC0gaWYgcHJlc2VudCAtIGJ1dCBwcm92aWRpbmcgdGhlIHR5cGUgZGlyZWN0bHkgbWFrZXMgZm9yIHNpbXBsZXIgdG9vbGluZyBhbmQgaW5kZXhpbmcuIFxyXG4gICAqIFRoZSB0eXBlIG11c3QgbWF0Y2ggdGhlIGVsZW1lbnRzIGRlZmluZWQgaW4gdGhlIGRpZmZlcmVudGlhbCBhbmQgdGhlIHNuYXBzaG90LiBGb3IgYWxsIEZISVIgZGVmaW5lZCB0eXBlcywgdGhlIHBhdGggbmFtZSBvZiB0aGUgZWxlbWVudCB3aWxsIHN0YXJ0IHdpdGggdGhlIHR5cGUgbmFtZS4gRm9yIGxvZ2ljYWwgbW9kZWxzLCB3aGVyZSB0aGUgdHlwZSBpcyBhIFVSTCwgdGhlIHR5cGUgbmFtZSBTSE9VTEQgc3RhcnQgd2l0aCB0aGUgdGFpbCBvZiB0aGUgdHlwZSBVUkwgd2hlcmUgcmVxdWlyZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuRmhpclVyaXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIElmIGRpZmZlcmVudGlhbCBjb25zdHJhaW50cyBhcmUgc3BlY2lmaWVkIGluIHRoaXMgc3RydWN0dXJlLCB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBiYXNlIGluIGEgXCJkaWZmZXJlbnRpYWxcIiBmYXNoaW9uLiBJZiB0aGVyZSBpcyBubyBiYXNlLCB0aGVuIHRoZSBkaWZmZXJlbnRpYWwgY29uc3RyYWludHMgY2Fubm90IGJlIHByb3ZpZGVkIChzbmFwc2hvdCBvbmx5KS4gRGlmZmVyZW50aWFsIHN0cnVjdHVyZXMgYXJlIHVzZWZ1bCBmb3IgdGhlIGVkaXRpbmcgcGVyc3BlY3RpdmUsIGFuZCBzbmFwc2hvdCBzdHJ1Y3R1cmVzIGFyZSBzdWl0YWJsZSBmb3Igb3BlcmF0aW9uYWwgdXNlLiBUaGUgRkhJUiBQcm9qZWN0IHByb3ZpZGVzIGEgbnVtYmVyIG9mIHRvb2xzL3NlcnZpY2VzIHRvIHBvcHVsYXRlIHNuYXBzaG90cyBmcm9tIGRpZmZlcmVudGlhbCBjb25zdHJhaW50cy4gTG9naWNhbCBNb2RlbHMgaGF2ZSBhIGJhc2Ugb2YgXCJFbGVtZW50XCIgb3IgYW5vdGhlciBsb2dpY2FsIG1vZGVsLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBiYXNlRGVmaW5pdGlvbj86IGZoaXIuRmhpckNhbm9uaWNhbHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIGRlZmluaXRpb24gaXMgYSBzcGVjaWFsaXphdGlvbiwgdGhlbiBpdCBhZGRzIG5ldyBlbGVtZW50cyBpbiB0aGUgZGlmZmVyZW50aWFsLCBhbmQgdGhlIHNuYXBzaG90IGluY2x1ZGVzIHRoZSBpbmhlcml0ZWQgZWxlbWVudHMuICBJZiB0aGUgZGVmaW5pdGlvbiBpcyBhIGNvbnN0cmFpbnQsIHRoZW4gaXQgY2Fubm90IGRlZmluZSBuZXcgZWxlbWVudHMsIGl0IGNhbiBvbmx5IG1ha2UgbmV3IHJ1bGVzIGFib3V0IGV4aXN0aW5nIGNvbnRlbnQgKHNlZSBbUHJvZmlsaW5nIFJlc291cmNlc10ocHJvZmlsaW5nLmh0bWwjcmVzb3VyY2VzKSkuXHJcbiAgICovXHJcbiAgcHVibGljIGRlcml2YXRpb24/OiBUeXBlRGVyaXZhdGlvblJ1bGVDb2RlVHlwZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzbmFwc2hvdCB2aWV3IGlzIGV4cHJlc3NlZCBpbiBhIHN0YW5kYWxvbmUgZm9ybSB0aGF0IGNhbiBiZSB1c2VkIGFuZCBpbnRlcnByZXRlZCB3aXRob3V0IGNvbnNpZGVyaW5nIHRoZSBiYXNlIFN0cnVjdHVyZURlZmluaXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHNuYXBzaG90PzogZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uU25hcHNob3R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgZGlmZmVyZW50aWFsIHZpZXcgaXMgZXhwcmVzc2VkIHJlbGF0aXZlIHRvIHRoZSBiYXNlIFN0cnVjdHVyZURlZmluaXRpb24gLSBhIHN0YXRlbWVudCBvZiBkaWZmZXJlbmNlcyB0aGF0IGl0IGFwcGxpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRpZmZlcmVudGlhbD86IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvbkRpZmZlcmVudGlhbHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3RydWN0dXJlRGVmaW5pdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN0cnVjdHVyZURlZmluaXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnU3RydWN0dXJlRGVmaW5pdGlvbic7XHJcbiAgICBpZiAoc291cmNlWyd1cmwnXSkgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudXJsfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVybCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZlcnNpb24nXSkgeyB0aGlzLnZlcnNpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnZlcnNpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5uYW1lID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGl0bGUnXSkgeyB0aGlzLnRpdGxlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS50aXRsZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IHNvdXJjZS5zdGF0dXM7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2V4cGVyaW1lbnRhbCddKSB7IHRoaXMuZXhwZXJpbWVudGFsID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuZXhwZXJpbWVudGFsfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSkgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuZGF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydwdWJsaXNoZXInXSkgeyB0aGlzLnB1Ymxpc2hlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucHVibGlzaGVyfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRhY3QnXSkgeyB0aGlzLmNvbnRhY3QgPSBzb3VyY2UuY29udGFjdC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbnRhY3REZXRhaWwoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250YWN0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWyd1c2VDb250ZXh0J10pIHsgdGhpcy51c2VDb250ZXh0ID0gc291cmNlLnVzZUNvbnRleHQubWFwKCh4KSA9PiBuZXcgZmhpci5Vc2FnZUNvbnRleHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy51c2VDb250ZXh0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2p1cmlzZGljdGlvbiddKSB7IHRoaXMuanVyaXNkaWN0aW9uID0gc291cmNlLmp1cmlzZGljdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmp1cmlzZGljdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwdXJwb3NlJ10pIHsgdGhpcy5wdXJwb3NlID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLnB1cnBvc2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29weXJpZ2h0J10pIHsgdGhpcy5jb3B5cmlnaHQgPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UuY29weXJpZ2h0fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2tleXdvcmQnXSkgeyB0aGlzLmtleXdvcmQgPSBzb3VyY2Uua2V5d29yZC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGluZyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmtleXdvcmQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZmhpclZlcnNpb24nXSkgeyB0aGlzLmZoaXJWZXJzaW9uID0gbmV3IGZoaXIuRmhpckNvZGUoe3ZhbHVlOiBzb3VyY2UuZmhpclZlcnNpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFwcGluZyddKSB7IHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nLm1hcCgoeCkgPT4gbmV3IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmcoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5tYXBwaW5nID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2tpbmQnXSkgeyB0aGlzLmtpbmQgPSBzb3VyY2Uua2luZDsgfVxyXG4gICAgZWxzZSB7IHRoaXMua2luZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Fic3RyYWN0J10pIHsgdGhpcy5hYnN0cmFjdCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmFic3RyYWN0fSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFic3RyYWN0ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGV4dCddKSB7IHRoaXMuY29udGV4dCA9IHNvdXJjZS5jb250ZXh0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvbkNvbnRleHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250ZXh0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRleHRJbnZhcmlhbnQnXSkgeyB0aGlzLmNvbnRleHRJbnZhcmlhbnQgPSBzb3VyY2UuY29udGV4dEludmFyaWFudC5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb250ZXh0SW52YXJpYW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5GaGlyVXJpKHt2YWx1ZTogc291cmNlLnR5cGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Jhc2VEZWZpbml0aW9uJ10pIHsgdGhpcy5iYXNlRGVmaW5pdGlvbiA9IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoe3ZhbHVlOiBzb3VyY2UuYmFzZURlZmluaXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVyaXZhdGlvbiddKSB7IHRoaXMuZGVyaXZhdGlvbiA9IHNvdXJjZS5kZXJpdmF0aW9uOyB9XHJcbiAgICBpZiAoc291cmNlWydzbmFwc2hvdCddKSB7IHRoaXMuc25hcHNob3QgPSBuZXcgZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uU25hcHNob3Qoc291cmNlLnNuYXBzaG90KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGlmZmVyZW50aWFsJ10pIHsgdGhpcy5kaWZmZXJlbnRpYWwgPSBuZXcgZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uRGlmZmVyZW50aWFsKHNvdXJjZS5kaWZmZXJlbnRpYWwpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3Igc3RhdHVzIChTdHJ1Y3R1cmVEZWZpbml0aW9uLnN0YXR1cylcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHN0YXR1c1JlcXVpcmVkQ29kaW5nKCk6UHVibGljYXRpb25TdGF0dXNDb2RpbmdUeXBlIHtcclxuICAgIHJldHVybiBQdWJsaWNhdGlvblN0YXR1c0NvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEV4dGVuc2libGUtYm91bmQgVmFsdWUgU2V0IGZvciBrZXl3b3JkIChTdHJ1Y3R1cmVEZWZpbml0aW9uLmtleXdvcmQpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBrZXl3b3JkRXh0ZW5zaWJsZUNvZGluZygpOkRlZmluaXRpb25Vc2VDb2RpbmdUeXBlIHtcclxuICAgIHJldHVybiBEZWZpbml0aW9uVXNlQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBmaGlyVmVyc2lvbiAoU3RydWN0dXJlRGVmaW5pdGlvbi5maGlyVmVyc2lvbilcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGZoaXJWZXJzaW9uUmVxdWlyZWRDb2RpbmcoKTpGSElSVmVyc2lvbkNvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIEZISVJWZXJzaW9uQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBraW5kIChTdHJ1Y3R1cmVEZWZpbml0aW9uLmtpbmQpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBraW5kUmVxdWlyZWRDb2RpbmcoKTpTdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5zaWJsZS1ib3VuZCBWYWx1ZSBTZXQgZm9yIHR5cGUgKFN0cnVjdHVyZURlZmluaXRpb24udHlwZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHR5cGVFeHRlbnNpYmxlQ29kaW5nKCk6RGVmaW5lZFR5cGVzQ29kaW5nVHlwZSB7XHJcbiAgICByZXR1cm4gRGVmaW5lZFR5cGVzQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBkZXJpdmF0aW9uIChTdHJ1Y3R1cmVEZWZpbml0aW9uLmRlcml2YXRpb24pXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkZXJpdmF0aW9uUmVxdWlyZWRDb2RpbmcoKTpUeXBlRGVyaXZhdGlvblJ1bGVDb2RpbmdUeXBlIHtcclxuICAgIHJldHVybiBUeXBlRGVyaXZhdGlvblJ1bGVDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydyZXNvdXJjZVR5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCAgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlc291cmNlVHlwZTpcIlN0cnVjdHVyZURlZmluaXRpb25cIiBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLnJlc291cmNlVHlwZTpcIlN0cnVjdHVyZURlZmluaXRpb25cIicsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzWyd1cmwnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCAgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHVybDpmaGlyLkZoaXJVcmkgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi51cmw6dXJpJywgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInVybFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnVybC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJpZGVudGlmaWVyXCJdKSB7IHRoaXMuaWRlbnRpZmllci5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1widmVyc2lvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnZlcnNpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1snbmFtZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgbmFtZTpmaGlyLkZoaXJTdHJpbmcgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5uYW1lOnN0cmluZycsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJuYW1lXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubmFtZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ0aXRsZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnRpdGxlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ3N0YXR1cyddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgc3RhdHVzOlB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGUgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5zdGF0dXM6Y29kZScsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJleHBlcmltZW50YWxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5leHBlcmltZW50YWwuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGF0ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRhdGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicHVibGlzaGVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucHVibGlzaGVyLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRhY3RcIl0pIHsgdGhpcy5jb250YWN0LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNjcmlwdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRlc2NyaXB0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInVzZUNvbnRleHRcIl0pIHsgdGhpcy51c2VDb250ZXh0LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJqdXJpc2RpY3Rpb25cIl0pIHsgdGhpcy5qdXJpc2RpY3Rpb24uZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInB1cnBvc2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wdXJwb3NlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvcHlyaWdodFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvcHlyaWdodC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJrZXl3b3JkXCJdKSB7IHRoaXMua2V5d29yZC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiZmhpclZlcnNpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5maGlyVmVyc2lvbi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJtYXBwaW5nXCJdKSB7IHRoaXMubWFwcGluZy5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICghdGhpc1sna2luZCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkga2luZDpTdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVUeXBlIGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24ua2luZDpjb2RlJywgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXNbJ2Fic3RyYWN0J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBhYnN0cmFjdDpmaGlyLkZoaXJCb29sZWFuIGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24uYWJzdHJhY3Q6Ym9vbGVhbicsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJhYnN0cmFjdFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmFic3RyYWN0LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRleHRcIl0pIHsgdGhpcy5jb250ZXh0LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJjb250ZXh0SW52YXJpYW50XCJdKSB7IHRoaXMuY29udGV4dEludmFyaWFudC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICghdGhpc1sndHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsICBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdHlwZTpmaGlyLkZoaXJVcmkgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi50eXBlOnVyaScsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJiYXNlRGVmaW5pdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmJhc2VEZWZpbml0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInNuYXBzaG90XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc25hcHNob3QuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGlmZmVyZW50aWFsXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGlmZmVyZW50aWFsLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=