// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ExtensionContextTypeCodes } from '../fhirValueSets/ExtensionContextTypeCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { DefinitionUseCodings, } from '../fhirValueSets/DefinitionUseCodings.js';
// @ts-ignore
import { FHIRVersionCodes } from '../fhirValueSets/FHIRVersionCodes.js';
// @ts-ignore
import { StructureDefinitionKindCodes } from '../fhirValueSets/StructureDefinitionKindCodes.js';
// @ts-ignore
import { DefinedTypesCodings, } from '../fhirValueSets/DefinedTypesCodings.js';
// @ts-ignore
import { TypeDerivationRuleCodes } from '../fhirValueSets/TypeDerivationRuleCodes.js';
/**
 * An external specification that the content is mapped to.
 */
export class StructureDefinitionMapping extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity']) {
            this.identity = new fhir.FhirId({ value: source.identity });
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            if (this.identity) {
                this.identity.addExtendedProperties(source._identity);
            }
            else {
                this.identity = new fhir.FhirId(source._identity);
            }
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'StructureDefinition.mapping';
        }
        if (!this['identity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property identity fhir: StructureDefinition.mapping.identity:id', expression: [expression] });
        }
        if (this["identity"]) {
            issues.push(...this.identity.doModelValidation(expression + '.identity'));
        }
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation(expression + '.uri'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation(expression + '.comment'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionMapping._fts_dataType = 'StructureDefinitionMapping';
/**
 * Identifies the types of resource or data type elements to which the extension can be applied.
 */
export class StructureDefinitionContext extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        else {
            this.expression = null;
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression);
            }
        }
    }
    /**
     * Required-bound Value Set for type (StructureDefinition.context.type)
     */
    static get typeRequiredCodes() {
        return ExtensionContextTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'StructureDefinition.context';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: StructureDefinition.context.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(ExtensionContextTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'type (StructureDefinition.context.type) of type code is missing code for Required binding to: ExtensionContextType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['expression']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property expression fhir: StructureDefinition.context.expression:string', expression: [expression] });
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation(expression + '.expression'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionContext._fts_dataType = 'StructureDefinitionContext';
/**
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
export class StructureDefinitionSnapshot extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'StructureDefinition.snapshot';
        }
        if (!this['element']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element fhir: StructureDefinition.snapshot.element:ElementDefinition', expression: [expression] });
        }
        else if (!Array.isArray(this.element)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property element fhir: StructureDefinition.snapshot.element:ElementDefinition', expression: [expression] });
        }
        else if (this.element.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element fhir: StructureDefinition.snapshot.element:ElementDefinition', expression: [expression] });
        }
        if (this["element"]) {
            this.element.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.element[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionSnapshot._fts_dataType = 'StructureDefinitionSnapshot';
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export class StructureDefinitionDifferential extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'StructureDefinition.differential';
        }
        if (!this['element']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element fhir: StructureDefinition.differential.element:ElementDefinition', expression: [expression] });
        }
        else if (!Array.isArray(this.element)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property element fhir: StructureDefinition.differential.element:ElementDefinition', expression: [expression] });
        }
        else if (this.element.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element fhir: StructureDefinition.differential.element:ElementDefinition', expression: [expression] });
        }
        if (this["element"]) {
            this.element.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.element[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionDifferential._fts_dataType = 'StructureDefinitionDifferential';
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export class StructureDefinition extends fhir.DomainResource {
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'StructureDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.Coding(x));
        }
        else {
            this.keyword = [];
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirCode({ value: source.fhirVersion });
        }
        if (source['_fhirVersion']) {
            if (this.fhirVersion) {
                this.fhirVersion.addExtendedProperties(source._fhirVersion);
            }
            else {
                this.fhirVersion = new fhir.FhirCode(source._fhirVersion);
            }
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.StructureDefinitionMapping(x));
        }
        else {
            this.mapping = [];
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        else {
            this.abstract = null;
        }
        if (source['_abstract']) {
            if (this.abstract) {
                this.abstract.addExtendedProperties(source._abstract);
            }
            else {
                this.abstract = new fhir.FhirBoolean(source._abstract);
            }
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.StructureDefinitionContext(x));
        }
        else {
            this.context = [];
        }
        if (source['contextInvariant']) {
            this.contextInvariant = source.contextInvariant.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.contextInvariant = [];
        }
        if (source['_contextInvariant']) {
            source._contextInvariant.forEach((x, i) => {
                if (this.contextInvariant.length >= i) {
                    if (x) {
                        this.contextInvariant[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.contextInvariant.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['type']) {
            this.type = new fhir.FhirUri({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirUri(source._type);
            }
        }
        if (source['baseDefinition']) {
            this.baseDefinition = new fhir.FhirCanonical({ value: source.baseDefinition });
        }
        if (source['_baseDefinition']) {
            if (this.baseDefinition) {
                this.baseDefinition.addExtendedProperties(source._baseDefinition);
            }
            else {
                this.baseDefinition = new fhir.FhirCanonical(source._baseDefinition);
            }
        }
        if (source['derivation']) {
            this.derivation = new fhir.FhirCode({ value: source.derivation });
        }
        if (source['_derivation']) {
            if (this.derivation) {
                this.derivation.addExtendedProperties(source._derivation);
            }
            else {
                this.derivation = new fhir.FhirCode(source._derivation);
            }
        }
        if (source['snapshot']) {
            this.snapshot = new fhir.StructureDefinitionSnapshot(source.snapshot);
        }
        if (source['differential']) {
            this.differential = new fhir.StructureDefinitionDifferential(source.differential);
        }
    }
    /**
     * Required-bound Value Set for status (StructureDefinition.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Extensible-bound Value Set for keyword (StructureDefinition.keyword)
     */
    static get keywordExtensibleCodings() {
        return DefinitionUseCodings;
    }
    /**
     * Required-bound Value Set for fhirVersion (StructureDefinition.fhirVersion)
     */
    static get fhirVersionRequiredCodes() {
        return FHIRVersionCodes;
    }
    /**
     * Required-bound Value Set for kind (StructureDefinition.kind)
     */
    static get kindRequiredCodes() {
        return StructureDefinitionKindCodes;
    }
    /**
     * Extensible-bound Value Set for type (StructureDefinition.type)
     */
    static get typeExtensibleCodings() {
        return DefinedTypesCodings;
    }
    /**
     * Required-bound Value Set for derivation (StructureDefinition.derivation)
     */
    static get derivationRequiredCodes() {
        return TypeDerivationRuleCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'StructureDefinition';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: StructureDefinition.resourceType:"StructureDefinition"', expression: [expression] });
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url fhir: StructureDefinition.url:uri', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: StructureDefinition.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: StructureDefinition.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (StructureDefinition.status) of type code is missing code for Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation(expression + '.experimental'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation(expression + '.purpose'));
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (this["keyword"]) {
            this.keyword.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.keyword[${i}]`)); });
        }
        if (this['fhirVersion'] && (!Object.values(FHIRVersionCodes).includes(this.fhirVersion.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'fhirVersion (StructureDefinition.fhirVersion) of type code is missing code for Required binding to: FHIRVersion', expression: [expression] });
        }
        if (this["fhirVersion"]) {
            issues.push(...this.fhirVersion.doModelValidation(expression + '.fhirVersion'));
        }
        if (this["mapping"]) {
            this.mapping.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.mapping[${i}]`)); });
        }
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind fhir: StructureDefinition.kind:code', expression: [expression] });
        }
        if (this['kind'] && (!Object.values(StructureDefinitionKindCodes).includes(this.kind.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'kind (StructureDefinition.kind) of type code is missing code for Required binding to: StructureDefinitionKind', expression: [expression] });
        }
        if (this["kind"]) {
            issues.push(...this.kind.doModelValidation(expression + '.kind'));
        }
        if (!this['abstract']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property abstract fhir: StructureDefinition.abstract:boolean', expression: [expression] });
        }
        if (this["abstract"]) {
            issues.push(...this.abstract.doModelValidation(expression + '.abstract'));
        }
        if (this["context"]) {
            this.context.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.context[${i}]`)); });
        }
        if (this["contextInvariant"]) {
            this.contextInvariant.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contextInvariant[${i}]`)); });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: StructureDefinition.type:uri', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["baseDefinition"]) {
            issues.push(...this.baseDefinition.doModelValidation(expression + '.baseDefinition'));
        }
        if (this['derivation'] && (!Object.values(TypeDerivationRuleCodes).includes(this.derivation.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'derivation (StructureDefinition.derivation) of type code is missing code for Required binding to: TypeDerivationRule', expression: [expression] });
        }
        if (this["derivation"]) {
            issues.push(...this.derivation.doModelValidation(expression + '.derivation'));
        }
        if (this["snapshot"]) {
            issues.push(...this.snapshot.doModelValidation(expression + '.snapshot'));
        }
        if (this["differential"]) {
            issues.push(...this.differential.doModelValidation(expression + '.differential'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinition._fts_dataType = 'StructureDefinition';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RydWN0dXJlRGVmaW5pdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFFckMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFJbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSx5QkFBeUIsRUFBaUMsTUFBTSwrQ0FBK0MsQ0FBQztBQUd6SCxhQUFhO0FBQ2IsT0FBTyxFQUFFLHNCQUFzQixFQUE4QixNQUFNLDRDQUE0QyxDQUFDO0FBQ2hILGFBQWE7QUFDYixPQUFPLEVBQUUsb0JBQW9CLEdBQTJCLE1BQU0sMENBQTBDLENBQUM7QUFLekcsYUFBYTtBQUNiLE9BQU8sRUFBRSxnQkFBZ0IsRUFBd0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUc5RixhQUFhO0FBQ2IsT0FBTyxFQUFFLDRCQUE0QixFQUFvQyxNQUFNLGtEQUFrRCxDQUFDO0FBQ2xJLGFBQWE7QUFDYixPQUFPLEVBQUUsbUJBQW1CLEdBQTBCLE1BQU0seUNBQXlDLENBQUM7QUFLdEcsYUFBYTtBQUNiLE9BQU8sRUFBRSx1QkFBdUIsRUFBK0IsTUFBTSw2Q0FBNkMsQ0FBQztBQXVDbkg7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUFxQmxFOztPQUVHO0lBQ0gsWUFBWSxTQUFpRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN2RyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7U0FBRTthQUNqRjtZ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O1NBQUU7UUFDOUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3RGLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUNyRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQzdILElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUMzRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3RJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFlBQVksQ0FB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LElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDOUcsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUE1VkQ7O0dBRUc7QUFDNkIsaUNBQWEsR0FBVSxxQkFBcUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogU3RydWN0dXJlRGVmaW5pdGlvblxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RpbmdzLCBFeHRlbnNpb25Db250ZXh0VHlwZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V4dGVuc2lvbkNvbnRleHRUeXBlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RlcywgIEV4dGVuc2lvbkNvbnRleHRUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V4dGVuc2lvbkNvbnRleHRUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kaW5ncywgUHVibGljYXRpb25TdGF0dXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kZXMsICBQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbml0aW9uVXNlQ29kaW5ncywgRGVmaW5pdGlvblVzZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RlZmluaXRpb25Vc2VDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbml0aW9uVXNlQ29kZXMsICBEZWZpbml0aW9uVXNlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RlZmluaXRpb25Vc2VDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRkhJUlZlcnNpb25Db2RpbmdzLCBGSElSVmVyc2lvbkNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0ZISVJWZXJzaW9uQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRkhJUlZlcnNpb25Db2RlcywgIEZISVJWZXJzaW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0ZISVJWZXJzaW9uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kaW5ncywgU3RydWN0dXJlRGVmaW5pdGlvbktpbmRDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kZXMsICBTdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbmVkVHlwZXNDb2RpbmdzLCBEZWZpbmVkVHlwZXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZWZpbmVkVHlwZXNDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZWZpbmVkVHlwZXNDb2RlcywgIERlZmluZWRUeXBlc0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZWZpbmVkVHlwZXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVHlwZURlcml2YXRpb25SdWxlQ29kaW5ncywgVHlwZURlcml2YXRpb25SdWxlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVHlwZURlcml2YXRpb25SdWxlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVHlwZURlcml2YXRpb25SdWxlQ29kZXMsICBUeXBlRGVyaXZhdGlvblJ1bGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVHlwZURlcml2YXRpb25SdWxlQ29kZXMuanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmcgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmdBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWNhdGlvbiBpcyBkZXNjcmliZWQgb25jZSwgd2l0aCBnZW5lcmFsIGNvbW1lbnRzLCBhbmQgdGhlbiBzcGVjaWZpYyBtYXBwaW5ncyBhcmUgbWFkZSB0aGF0IHJlZmVyZW5jZSB0aGlzIGRlY2xhcmF0aW9uLlxyXG4gICAqL1xyXG4gIGlkZW50aXR5OiBmaGlyLkZoaXJJZHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLm1hcHBpbmcuaWRlbnRpdHlcclxuICAgKi9cclxuICBfaWRlbnRpdHk/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgZm9ybWFsIGlkZW50aXR5IGZvciB0aGUgc3BlY2lmaWNhdGlvbiBiZWluZyBtYXBwZWQgdG8gaGVscHMgd2l0aCBpZGVudGlmeWluZyBtYXBzIGNvbnNpc3RlbnRseS5cclxuICAgKi9cclxuICB1cmk/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3RydWN0dXJlRGVmaW5pdGlvbi5tYXBwaW5nLnVyaVxyXG4gICAqL1xyXG4gIF91cmk/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgbmFtZSBmb3IgdGhlIHNwZWNpZmljYXRpb24gdGhhdCBpcyBiZWluZyBtYXBwZWQgdG8uXHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLm1hcHBpbmcubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBDb21tZW50cyBhYm91dCB0aGlzIG1hcHBpbmcsIGluY2x1ZGluZyB2ZXJzaW9uIG5vdGVzLCBpc3N1ZXMsIHNjb3BlIGxpbWl0YXRpb25zLCBhbmQgb3RoZXIgaW1wb3J0YW50IG5vdGVzIGZvciB1c2FnZS5cclxuICAgKi9cclxuICBjb21tZW50PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24ubWFwcGluZy5jb21tZW50XHJcbiAgICovXHJcbiAgX2NvbW1lbnQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gZXh0ZXJuYWwgc3BlY2lmaWNhdGlvbiB0aGF0IHRoZSBjb250ZW50IGlzIG1hcHBlZCB0by5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVEZWZpbml0aW9uTWFwcGluZyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N0cnVjdHVyZURlZmluaXRpb25NYXBwaW5nJztcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWNhdGlvbiBpcyBkZXNjcmliZWQgb25jZSwgd2l0aCBnZW5lcmFsIGNvbW1lbnRzLCBhbmQgdGhlbiBzcGVjaWZpYyBtYXBwaW5ncyBhcmUgbWFkZSB0aGF0IHJlZmVyZW5jZSB0aGlzIGRlY2xhcmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGl0eTogZmhpci5GaGlySWR8bnVsbDtcclxuICAvKipcclxuICAgKiBBIGZvcm1hbCBpZGVudGl0eSBmb3IgdGhlIHNwZWNpZmljYXRpb24gYmVpbmcgbWFwcGVkIHRvIGhlbHBzIHdpdGggaWRlbnRpZnlpbmcgbWFwcyBjb25zaXN0ZW50bHkuXHJcbiAgICovXHJcbiAgcHVibGljIHVyaT86IGZoaXIuRmhpclVyaXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBuYW1lIGZvciB0aGUgc3BlY2lmaWNhdGlvbiB0aGF0IGlzIGJlaW5nIG1hcHBlZCB0by5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29tbWVudHMgYWJvdXQgdGhpcyBtYXBwaW5nLCBpbmNsdWRpbmcgdmVyc2lvbiBub3RlcywgaXNzdWVzLCBzY29wZSBsaW1pdGF0aW9ucywgYW5kIG90aGVyIGltcG9ydGFudCBub3RlcyBmb3IgdXNhZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFN0cnVjdHVyZURlZmluaXRpb25NYXBwaW5nIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8U3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmdBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpdHknXSkgeyB0aGlzLmlkZW50aXR5ID0gbmV3IGZoaXIuRmhpcklkKHt2YWx1ZTogc291cmNlLmlkZW50aXR5fSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aXR5ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2lkZW50aXR5J10pIHtcclxuICAgICAgaWYgKHRoaXMuaWRlbnRpdHkpIHsgdGhpcy5pZGVudGl0eS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9pZGVudGl0eSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmlkZW50aXR5ID0gbmV3IGZoaXIuRmhpcklkKHNvdXJjZS5faWRlbnRpdHkgYXMgUGFydGlhbDxmaGlyLkZoaXJJZEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndXJpJ10pIHsgdGhpcy51cmkgPSBuZXcgZmhpci5GaGlyVXJpKHt2YWx1ZTogc291cmNlLnVyaX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdXJpJ10pIHtcclxuICAgICAgaWYgKHRoaXMudXJpKSB7IHRoaXMudXJpLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3VyaSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnVyaSA9IG5ldyBmaGlyLkZoaXJVcmkoc291cmNlLl91cmkgYXMgUGFydGlhbDxmaGlyLkZoaXJVcmlBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX25hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYW1lKSB7IHRoaXMubmFtZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9uYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9uYW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb21tZW50J10pIHsgdGhpcy5jb21tZW50ID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5jb21tZW50fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jb21tZW50J10pIHtcclxuICAgICAgaWYgKHRoaXMuY29tbWVudCkgeyB0aGlzLmNvbW1lbnQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY29tbWVudCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmNvbW1lbnQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fY29tbWVudCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdTdHJ1Y3R1cmVEZWZpbml0aW9uLm1hcHBpbmcnIH1cclxuICAgIGlmICghdGhpc1snaWRlbnRpdHknXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgaWRlbnRpdHkgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5tYXBwaW5nLmlkZW50aXR5OmlkJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJpZGVudGl0eVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmlkZW50aXR5LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5pZGVudGl0eScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ1cmlcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy51cmkuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnVyaScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJuYW1lXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubmFtZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycubmFtZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb21tZW50XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29tbWVudC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuY29tbWVudCcpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFN0cnVjdHVyZURlZmluaXRpb25Db250ZXh0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdHVyZURlZmluaXRpb25Db250ZXh0QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogRGVmaW5lcyBob3cgdG8gaW50ZXJwcmV0IHRoZSBleHByZXNzaW9uIHRoYXQgZGVmaW5lcyB3aGF0IHRoZSBjb250ZXh0IG9mIHRoZSBleHRlbnNpb24gaXMuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5GaGlyQ29kZTxFeHRlbnNpb25Db250ZXh0VHlwZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmNvbnRleHQudHlwZVxyXG4gICAqL1xyXG4gIF90eXBlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBbiBleHByZXNzaW9uIHRoYXQgZGVmaW5lcyB3aGVyZSBhbiBleHRlbnNpb24gY2FuIGJlIHVzZWQgaW4gcmVzb3VyY2VzLlxyXG4gICAqL1xyXG4gIGV4cHJlc3Npb246IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmNvbnRleHQuZXhwcmVzc2lvblxyXG4gICAqL1xyXG4gIF9leHByZXNzaW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIElkZW50aWZpZXMgdGhlIHR5cGVzIG9mIHJlc291cmNlIG9yIGRhdGEgdHlwZSBlbGVtZW50cyB0byB3aGljaCB0aGUgZXh0ZW5zaW9uIGNhbiBiZSBhcHBsaWVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZURlZmluaXRpb25Db250ZXh0IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3RydWN0dXJlRGVmaW5pdGlvbkNvbnRleHQnO1xyXG4gIC8qKlxyXG4gICAqIERlZmluZXMgaG93IHRvIGludGVycHJldCB0aGUgZXhwcmVzc2lvbiB0aGF0IGRlZmluZXMgd2hhdCB0aGUgY29udGV4dCBvZiB0aGUgZXh0ZW5zaW9uIGlzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkZoaXJDb2RlPEV4dGVuc2lvbkNvbnRleHRUeXBlQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogQW4gZXhwcmVzc2lvbiB0aGF0IGRlZmluZXMgd2hlcmUgYW4gZXh0ZW5zaW9uIGNhbiBiZSB1c2VkIGluIHJlc291cmNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgZXhwcmVzc2lvbjogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3RydWN0dXJlRGVmaW5pdGlvbkNvbnRleHQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuRmhpckNvZGU8RXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UudHlwZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3R5cGUnXSkge1xyXG4gICAgICBpZiAodGhpcy50eXBlKSB7IHRoaXMudHlwZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl90eXBlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJDb2RlPEV4dGVuc2lvbkNvbnRleHRUeXBlQ29kZVR5cGU+KHNvdXJjZS5fdHlwZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZXhwcmVzc2lvbiddKSB7IHRoaXMuZXhwcmVzc2lvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZXhwcmVzc2lvbn0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5leHByZXNzaW9uID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2V4cHJlc3Npb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5leHByZXNzaW9uKSB7IHRoaXMuZXhwcmVzc2lvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9leHByZXNzaW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZXhwcmVzc2lvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9leHByZXNzaW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3IgdHlwZSAoU3RydWN0dXJlRGVmaW5pdGlvbi5jb250ZXh0LnR5cGUpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXQgdHlwZVJlcXVpcmVkQ29kZXMoKSB7XHJcbiAgICByZXR1cm4gRXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnU3RydWN0dXJlRGVmaW5pdGlvbi5jb250ZXh0JyB9XHJcbiAgICBpZiAoIXRoaXNbJ3R5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdHlwZSBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmNvbnRleHQudHlwZTpjb2RlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ3R5cGUnXSAmJiAoIU9iamVjdC52YWx1ZXMoRXh0ZW5zaW9uQ29udGV4dFR5cGVDb2RlcykuaW5jbHVkZXModGhpcy50eXBlLnZhbHVlIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ3R5cGUgKFN0cnVjdHVyZURlZmluaXRpb24uY29udGV4dC50eXBlKSBvZiB0eXBlIGNvZGUgaXMgbWlzc2luZyBjb2RlIGZvciBSZXF1aXJlZCBiaW5kaW5nIHRvOiBFeHRlbnNpb25Db250ZXh0VHlwZScsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widHlwZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnR5cGUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnR5cGUnKSk7IH1cclxuICAgIGlmICghdGhpc1snZXhwcmVzc2lvbiddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBleHByZXNzaW9uIGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24uY29udGV4dC5leHByZXNzaW9uOnN0cmluZycsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiZXhwcmVzc2lvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmV4cHJlc3Npb24uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmV4cHJlc3Npb24nKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdHJ1Y3R1cmVEZWZpbml0aW9uU25hcHNob3QgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RydWN0dXJlRGVmaW5pdGlvblNuYXBzaG90QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQ2FwdHVyZXMgY29uc3RyYWludHMgb24gZWFjaCBlbGVtZW50IHdpdGhpbiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgZWxlbWVudDogZmhpci5FbGVtZW50RGVmaW5pdGlvbkFyZ3NbXXxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzbmFwc2hvdCB2aWV3IGlzIGV4cHJlc3NlZCBpbiBhIHN0YW5kYWxvbmUgZm9ybSB0aGF0IGNhbiBiZSB1c2VkIGFuZCBpbnRlcnByZXRlZCB3aXRob3V0IGNvbnNpZGVyaW5nIHRoZSBiYXNlIFN0cnVjdHVyZURlZmluaXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlRGVmaW5pdGlvblNuYXBzaG90IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3RydWN0dXJlRGVmaW5pdGlvblNuYXBzaG90JztcclxuICAvKipcclxuICAgKiBDYXB0dXJlcyBjb25zdHJhaW50cyBvbiBlYWNoIGVsZW1lbnQgd2l0aGluIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgZWxlbWVudDogZmhpci5FbGVtZW50RGVmaW5pdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFN0cnVjdHVyZURlZmluaXRpb25TbmFwc2hvdCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN0cnVjdHVyZURlZmluaXRpb25TbmFwc2hvdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydlbGVtZW50J10pIHsgdGhpcy5lbGVtZW50ID0gc291cmNlLmVsZW1lbnQubWFwKCh4KSA9PiBuZXcgZmhpci5FbGVtZW50RGVmaW5pdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmVsZW1lbnQgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdTdHJ1Y3R1cmVEZWZpbml0aW9uLnNuYXBzaG90JyB9XHJcbiAgICBpZiAoIXRoaXNbJ2VsZW1lbnQnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgZWxlbWVudCBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLnNuYXBzaG90LmVsZW1lbnQ6RWxlbWVudERlZmluaXRpb24nLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuZWxlbWVudCkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3N0cnVjdHVyZScsIGRpYWdub3N0aWNzOiAnRm91bmQgc2NhbGFyIGluIGFycmF5IHByb3BlcnR5IGVsZW1lbnQgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5zbmFwc2hvdC5lbGVtZW50OkVsZW1lbnREZWZpbml0aW9uJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBlbGVtZW50IGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24uc25hcHNob3QuZWxlbWVudDpFbGVtZW50RGVmaW5pdGlvbicsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiZWxlbWVudFwiXSkgeyB0aGlzLmVsZW1lbnQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmVsZW1lbnRbJHtpfV1gKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdHJ1Y3R1cmVEZWZpbml0aW9uRGlmZmVyZW50aWFsIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdHVyZURlZmluaXRpb25EaWZmZXJlbnRpYWxBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBDYXB0dXJlcyBjb25zdHJhaW50cyBvbiBlYWNoIGVsZW1lbnQgd2l0aGluIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBlbGVtZW50OiBmaGlyLkVsZW1lbnREZWZpbml0aW9uQXJnc1tdfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGRpZmZlcmVudGlhbCB2aWV3IGlzIGV4cHJlc3NlZCByZWxhdGl2ZSB0byB0aGUgYmFzZSBTdHJ1Y3R1cmVEZWZpbml0aW9uIC0gYSBzdGF0ZW1lbnQgb2YgZGlmZmVyZW5jZXMgdGhhdCBpdCBhcHBsaWVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZURlZmluaXRpb25EaWZmZXJlbnRpYWwgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdTdHJ1Y3R1cmVEZWZpbml0aW9uRGlmZmVyZW50aWFsJztcclxuICAvKipcclxuICAgKiBDYXB0dXJlcyBjb25zdHJhaW50cyBvbiBlYWNoIGVsZW1lbnQgd2l0aGluIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgZWxlbWVudDogZmhpci5FbGVtZW50RGVmaW5pdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFN0cnVjdHVyZURlZmluaXRpb25EaWZmZXJlbnRpYWwgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTdHJ1Y3R1cmVEZWZpbml0aW9uRGlmZmVyZW50aWFsQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2VsZW1lbnQnXSkgeyB0aGlzLmVsZW1lbnQgPSBzb3VyY2UuZWxlbWVudC5tYXAoKHgpID0+IG5ldyBmaGlyLkVsZW1lbnREZWZpbml0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZWxlbWVudCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ1N0cnVjdHVyZURlZmluaXRpb24uZGlmZmVyZW50aWFsJyB9XHJcbiAgICBpZiAoIXRoaXNbJ2VsZW1lbnQnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgZWxlbWVudCBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmRpZmZlcmVudGlhbC5lbGVtZW50OkVsZW1lbnREZWZpbml0aW9uJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmVsZW1lbnQpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdzdHJ1Y3R1cmUnLCBkaWFnbm9zdGljczogJ0ZvdW5kIHNjYWxhciBpbiBhcnJheSBwcm9wZXJ0eSBlbGVtZW50IGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24uZGlmZmVyZW50aWFsLmVsZW1lbnQ6RWxlbWVudERlZmluaXRpb24nLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudC5sZW5ndGggPT09IDApIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGVsZW1lbnQgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5kaWZmZXJlbnRpYWwuZWxlbWVudDpFbGVtZW50RGVmaW5pdGlvbicsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiZWxlbWVudFwiXSkgeyB0aGlzLmVsZW1lbnQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmVsZW1lbnRbJHtpfV1gKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdHJ1Y3R1cmVEZWZpbml0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdHVyZURlZmluaXRpb25BcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJTdHJ1Y3R1cmVEZWZpbml0aW9uXCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENhbiBiZSBhIHVybjp1dWlkOiBvciBhIHVybjpvaWQ6IGJ1dCByZWFsIGh0dHA6IGFkZHJlc3NlcyBhcmUgcHJlZmVycmVkLiAgTXVsdGlwbGUgaW5zdGFuY2VzIG1heSBzaGFyZSB0aGUgc2FtZSBVUkwgaWYgdGhleSBoYXZlIGEgZGlzdGluY3QgdmVyc2lvbi5cclxuICAgKiBUaGUgZGV0ZXJtaW5hdGlvbiBvZiB3aGVuIHRvIGNyZWF0ZSBhIG5ldyB2ZXJzaW9uIG9mIGEgcmVzb3VyY2UgKHNhbWUgdXJsLCBuZXcgdmVyc2lvbikgdnMuIGRlZmluaW5nIGEgbmV3IGFydGlmYWN0IGlzIHVwIHRvIHRoZSBhdXRob3IuICBDb25zaWRlcmF0aW9ucyBmb3IgbWFraW5nIHRoaXMgZGVjaXNpb24gYXJlIGZvdW5kIGluIFtUZWNobmljYWwgYW5kIEJ1c2luZXNzIFZlcnNpb25zXShyZXNvdXJjZS5odG1sI3ZlcnNpb25zKS4gXHJcbiAgICogSW4gc29tZSBjYXNlcywgdGhlIHJlc291cmNlIGNhbiBubyBsb25nZXIgYmUgZm91bmQgYXQgdGhlIHN0YXRlZCB1cmwsIGJ1dCB0aGUgdXJsIGl0c2VsZiBjYW5ub3QgY2hhbmdlLiBJbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSB0aGUgW21ldGEuc291cmNlXShyZXNvdXJjZS5odG1sI21ldGEpIGVsZW1lbnQgdG8gaW5kaWNhdGUgd2hlcmUgdGhlIGN1cnJlbnQgbWFzdGVyIHNvdXJjZSBvZiB0aGUgcmVzb3VyY2UgY2FuIGJlIGZvdW5kLlxyXG4gICAqL1xyXG4gIHVybDogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24udXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVHlwaWNhbGx5LCB0aGlzIGlzIHVzZWQgZm9yIGlkZW50aWZpZXJzIHRoYXQgY2FuIGdvIGluIGFuIEhMNyBWMyBJSSAoaW5zdGFuY2UgaWRlbnRpZmllcikgZGF0YSB0eXBlLCBhbmQgY2FuIHRoZW4gaWRlbnRpZnkgdGhpcyBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiBvdXRzaWRlIG9mIEZISVIsIHdoZXJlIGl0IGlzIG5vdCBwb3NzaWJsZSB0byB1c2UgdGhlIGxvZ2ljYWwgVVJJLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIG1heSBiZSBkaWZmZXJlbnQgc3RydWN0dXJlIGRlZmluaXRpb24gaW5zdGFuY2VzIHRoYXQgaGF2ZSB0aGUgc2FtZSBpZGVudGlmaWVyIGJ1dCBkaWZmZXJlbnQgdmVyc2lvbnMuICBUaGUgdmVyc2lvbiBjYW4gYmUgYXBwZW5kZWQgdG8gdGhlIHVybCBpbiBhIHJlZmVyZW5jZSB0byBhbGxvdyBhIHJlZmVyZW5jZSB0byBhIHBhcnRpY3VsYXIgYnVzaW5lc3MgdmVyc2lvbiBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24udmVyc2lvblxyXG4gICAqL1xyXG4gIF92ZXJzaW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBpcyBub3QgZXhwZWN0ZWQgdG8gYmUgZ2xvYmFsbHkgdW5pcXVlLiBUaGUgbmFtZSBzaG91bGQgYmUgYSBzaW1wbGUgYWxwaGFudW1lcmljIHR5cGUgbmFtZSB0byBlbnN1cmUgdGhhdCBpdCBpcyBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkuU29tZSBFeGFtcGxlczogXHJcbiAgICogKiBPMlNhdE9ic2VydmF0aW9uXHJcbiAgICogKiBQcmVzZW50YXRpb25SZXBvcnRcclxuICAgKiAqIEltbXVuaXphdGlvbjJcclxuICAgKiAqIEFjbWVBZG1pc3Npb25SZWNvcmRPbGQuXHJcbiAgICovXHJcbiAgbmFtZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24ubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGlzIG5hbWUgZG9lcyBub3QgbmVlZCB0byBiZSBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkgYW5kIG1heSBjb250YWluIHB1bmN0dWF0aW9uLCB3aGl0ZS1zcGFjZSwgZXRjLkFwcGxpY2F0aW9ucyBkb24ndCBoYXZlIHRvIHVzZSB0aGlzIG5hbWUgYnV0IGNhbiBhbHdheXMgZmFsbCBiYWNrIHRvIGl0LiBUaGUgdGl0bGUgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgbGFiZWwgZm9yIHRoZSByb290IGVsZW1lbnQuXHJcbiAgICovXHJcbiAgdGl0bGU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3RydWN0dXJlRGVmaW5pdGlvbi50aXRsZVxyXG4gICAqL1xyXG4gIF90aXRsZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiBzdHJ1Y3R1cmUgZGVmaW5pdGlvbnMgdGhhdCBhcmUgYXBwcm9wcmlhdGUgZm9yIHVzZSB2ZXJzdXMgbm90LlxyXG4gICAqL1xyXG4gIHN0YXR1czogZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2Ygc3RydWN0dXJlIGRlZmluaXRpb25zIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBleHBlcmltZW50YWw/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmV4cGVyaW1lbnRhbFxyXG4gICAqL1xyXG4gIF9leHBlcmltZW50YWw/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgcmVzb3VyY2UgbGFzdC1tb2RpZmllZC1kYXRlLCBzaW5jZSB0aGUgcmVzb3VyY2UgbWF5IGJlIGEgc2Vjb25kYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbi4gQWRkaXRpb25hbCBzcGVjaWZpYyBkYXRlcyBtYXkgYmUgYWRkZWQgYXMgZXh0ZW5zaW9ucyBvciBiZSBmb3VuZCBieSBjb25zdWx0aW5nIFByb3ZlbmFuY2VzIGFzc29jaWF0ZWQgd2l0aCBwYXN0IHZlcnNpb25zIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBkYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3RydWN0dXJlRGVmaW5pdGlvbi5kYXRlXHJcbiAgICovXHJcbiAgX2RhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbi4gVGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgaW5kaXZpZHVhbCBvciBvcmdhbml6YXRpb24gdGhhdCBkZXZlbG9wZWQgYW5kIGluaXRpYWxseSBhdXRob3JlZCB0aGUgY29udGVudC4gVGhlIHB1Ymxpc2hlciBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBjb250YWN0IGZvciBxdWVzdGlvbnMgb3IgaXNzdWVzIHdpdGggdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGlzaGVyPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24ucHVibGlzaGVyXHJcbiAgICovXHJcbiAgX3B1Ymxpc2hlcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogTWF5IGJlIGEgd2ViIHNpdGUsIGFuIGVtYWlsIGFkZHJlc3MsIGEgdGVsZXBob25lIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIGNvbnRhY3Q/OiBmaGlyLkNvbnRhY3REZXRhaWxBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZGVzY3JpcHRpb24gY2FuIGJlIHVzZWQgdG8gY2FwdHVyZSBkZXRhaWxzIHN1Y2ggYXMgd2h5IHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiB3YXMgYnVpbHQsIGNvbW1lbnRzIGFib3V0IG1pc3VzZSwgaW5zdHJ1Y3Rpb25zIGZvciBjbGluaWNhbCB1c2UgYW5kIGludGVycHJldGF0aW9uLCBsaXRlcmF0dXJlIHJlZmVyZW5jZXMsIGV4YW1wbGVzIGZyb20gdGhlIHBhcGVyIHdvcmxkLCBldGMuIEl0IGlzIG5vdCBhIHJlbmRlcmluZyBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gYXMgY29udmV5ZWQgaW4gdGhlICd0ZXh0JyBmaWVsZCBvZiB0aGUgcmVzb3VyY2UgaXRzZWxmLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQgKGUuZy4gdGhlIGxhbmd1YWdlIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiBpcyBwcmVzdW1lZCB0byBiZSB0aGUgcHJlZG9taW5hbnQgbGFuZ3VhZ2UgaW4gdGhlIHBsYWNlIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiB3YXMgY3JlYXRlZCkuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBXaGVuIG11bHRpcGxlIHVzZUNvbnRleHRzIGFyZSBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIGV4cGVjdGF0aW9uIHRoYXQgYWxsIG9yIGFueSBvZiB0aGUgY29udGV4dHMgYXBwbHkuXHJcbiAgICovXHJcbiAgdXNlQ29udGV4dD86IGZoaXIuVXNhZ2VDb250ZXh0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJdCBtYXkgYmUgcG9zc2libGUgZm9yIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiB0byBiZSB1c2VkIGluIGp1cmlzZGljdGlvbnMgb3RoZXIgdGhhbiB0aG9zZSBmb3Igd2hpY2ggaXQgd2FzIG9yaWdpbmFsbHkgZGVzaWduZWQgb3IgaW50ZW5kZWQuXHJcbiAgICovXHJcbiAganVyaXNkaWN0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgdXNhZ2Ugb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLiBJbnN0ZWFkLCBpdCBwcm92aWRlcyB0cmFjZWFiaWxpdHkgb2YgJyd3aHknJyB0aGUgcmVzb3VyY2UgaXMgZWl0aGVyIG5lZWRlZCBvciAnJ3doeScnIGl0IGlzIGRlZmluZWQgYXMgaXQgaXMuICBUaGlzIG1heSBiZSB1c2VkIHRvIHBvaW50IHRvIHNvdXJjZSBtYXRlcmlhbHMgb3Igc3BlY2lmaWNhdGlvbnMgdGhhdCBkcm92ZSB0aGUgc3RydWN0dXJlIG9mIHRoaXMgc3RydWN0dXJlIGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgcHVycG9zZT86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24ucHVycG9zZVxyXG4gICAqL1xyXG4gIF9wdXJwb3NlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBIGNvcHlyaWdodCBzdGF0ZW1lbnQgcmVsYXRpbmcgdG8gdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGFuZC9vciBpdHMgY29udGVudHMuIENvcHlyaWdodCBzdGF0ZW1lbnRzIGFyZSBnZW5lcmFsbHkgbGVnYWwgcmVzdHJpY3Rpb25zIG9uIHRoZSB1c2UgYW5kIHB1Ymxpc2hpbmcgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIGNvcHlyaWdodD86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24uY29weXJpZ2h0XHJcbiAgICovXHJcbiAgX2NvcHlyaWdodD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBzZXQgb2Yga2V5IHdvcmRzIG9yIHRlcm1zIGZyb20gZXh0ZXJuYWwgdGVybWlub2xvZ2llcyB0aGF0IG1heSBiZSB1c2VkIHRvIGFzc2lzdCB3aXRoIGluZGV4aW5nIGFuZCBzZWFyY2hpbmcgb2YgdGVtcGxhdGVzIG5ieSBkZXNjcmliaW5nIHRoZSB1c2Ugb2YgdGhpcyBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiwgb3IgdGhlIGNvbnRlbnQgaXQgZGVzY3JpYmVzLlxyXG4gICAqL1xyXG4gIGtleXdvcmQ/OiBmaGlyLkNvZGluZ0FyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBTdHJ1Y3R1cmVEZWZpbml0aW9uIGRvZXMgbm90IG5lZWQgdG8gc3BlY2lmeSB0aGUgdGFyZ2V0IGl0IGFwcGxpZXMgdG8gYXMgU3RydWN0dXJlRGVmaW5pdGlvbnMgd2lsbCBvZnRlbiBiZSB2YWxpZCBhY3Jvc3MgbXVsdGlwbGUgdmVyc2lvbnMgb2YgRkhJUi4gRkhJUiB0b29saW5nIGNhbiBkZXRlcm1pbmUgd2hldGhlciBhIFN0cnVjdHVyZURlZmluaXRpb24gaXMgY29uc2lzdGVudCB3aXRoIGEgcGFydGljdWxhciBTdHJ1Y3R1cmVEZWZpbml0aW9uIGlmIGRlc2lyZWQuXHJcbiAgICovXHJcbiAgZmhpclZlcnNpb24/OiBmaGlyLkZoaXJDb2RlfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24uZmhpclZlcnNpb25cclxuICAgKi9cclxuICBfZmhpclZlcnNpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEFuIGV4dGVybmFsIHNwZWNpZmljYXRpb24gdGhhdCB0aGUgY29udGVudCBpcyBtYXBwZWQgdG8uXHJcbiAgICovXHJcbiAgbWFwcGluZz86IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmdBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmluZXMgdGhlIGtpbmQgb2Ygc3RydWN0dXJlIHRoYXQgdGhpcyBkZWZpbml0aW9uIGlzIGRlc2NyaWJpbmcuXHJcbiAgICovXHJcbiAga2luZDogZmhpci5GaGlyQ29kZTxTdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmtpbmRcclxuICAgKi9cclxuICBfa2luZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQWJzdHJhY3QgUmVzb3VyY2VzIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWQgLSBhIGNvbmNyZXRlIHN1Yi10eXBlIG11c3QgYmUgdXNlZC4gQWJzdHJhY3QgZGF0YXR5cGVzIGFuZCBleHRlbnNpb25zIGNhbm5vdCBiZSB1c2VkIGluIGFuIGluc3RhbmNlLiBGb3IgbG9naWNhbCBtb2RlbHMsIHRoZSBleGFjdCBpbXBsaWNhdGlvbiBvZiBcImFic3RyYWN0XCIgd2lsbCByZXN0IHdpdGggdGhlIGF1dGhvciwgZGVwZW5kaW5nIGhvdyB0aGUgbG9naWNhbCBtb2RlbCBpcyB1c2VkLiBGbGFnZ2luZyBhIGNvbnN0cmFpbnQgc3RydWN0dXJlIGFzIGFic3RyYWN0IGNvbnZleXMgZGVzaWduIGludGVudCBidXQgbWFrZXMgbm8gZGlmZmVyZW5jZSB0byBob3cgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGlzIGhhbmRsZWQuIE5vdGUgdGhhdCBpbmxpbmUgZGVjbGFyZWQgZWxlbWVudHMgdGhhdCBhcmUgZ2l2ZW4gdGhlIHR5cGUgXCJFbGVtZW50XCIgaW4gdGhlIFN0cnVjdHVyZURlZmluaXRpb24sIGJ1dCBoYXZlIGNoaWxkcmVuIGRlc2NyaWJlZCwgYXJlIGFub255bW91cyBjb25jcmV0ZSB0eXBlcyB0aGF0IHNwZWNpYWxpemUgRWxlbWVudC5cclxuICAgKi9cclxuICBhYnN0cmFjdDogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3RydWN0dXJlRGVmaW5pdGlvbi5hYnN0cmFjdFxyXG4gICAqL1xyXG4gIF9hYnN0cmFjdD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyB0aGUgdHlwZXMgb2YgcmVzb3VyY2Ugb3IgZGF0YSB0eXBlIGVsZW1lbnRzIHRvIHdoaWNoIHRoZSBleHRlbnNpb24gY2FuIGJlIGFwcGxpZWQuXHJcbiAgICovXHJcbiAgY29udGV4dD86IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvbkNvbnRleHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBydWxlcyBhcmUgb25seSBldmFsdWF0ZWQgd2hlbiB0aGUgZXh0ZW5zaW9uIGlzIHByZXNlbnQuIFdoZW4gZXZhbHVhdGluZyB0aGUgaW52YXJpYW50LCB0aGUgRkhJUlBhdGggZm9jdXMgaXMgdGhlIGVsZW1lbnQgdGhhdCBob2xkcyB0aGUgZXh0ZW5zaW9uLCBhbmQgJWV4dGVuc2lvbiByZWZlcnMgdG8gdGhlIGV4dGVuc2lvbiBpdHNlbGYuXHJcbiAgICovXHJcbiAgY29udGV4dEludmFyaWFudD86IGZoaXIuRmhpclN0cmluZ1tdfHN0cmluZ1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3RydWN0dXJlRGVmaW5pdGlvbi5jb250ZXh0SW52YXJpYW50XHJcbiAgICovXHJcbiAgX2NvbnRleHRJbnZhcmlhbnQ/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCBpbiB0aGUgY2FzZSBvZiBjb25zdHJhaW50cywgdGhlIHR5cGUgY291bGQgYmUgZGV0ZXJtaW5lZCBieSBjaGFzaW5nIHRocm91Z2ggdGhlIGJhc2VEZWZpbml0aW9uIHJlZmVyZW5jZXMgdW50aWwgYSBjb25jcmV0ZSBzdHJ1Y3R1cmUgKGRlcml2YXRpb24gPSBzcGVjaWFsaXphdGlvbikgaXMgcmVhY2hlZCwgb3IgYnkgbG9va2luZyBhdCB0aGUgcGF0aCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc25hcHNob3QgLSBpZiBwcmVzZW50IC0gYnV0IHByb3ZpZGluZyB0aGUgdHlwZSBkaXJlY3RseSBtYWtlcyBmb3Igc2ltcGxlciB0b29saW5nIGFuZCBpbmRleGluZy4gXHJcbiAgICogVGhlIHR5cGUgbXVzdCBtYXRjaCB0aGUgZWxlbWVudHMgZGVmaW5lZCBpbiB0aGUgZGlmZmVyZW50aWFsIGFuZCB0aGUgc25hcHNob3QuIEZvciBhbGwgRkhJUiBkZWZpbmVkIHR5cGVzLCB0aGUgcGF0aCBuYW1lIG9mIHRoZSBlbGVtZW50IHdpbGwgc3RhcnQgd2l0aCB0aGUgdHlwZSBuYW1lLiBGb3IgbG9naWNhbCBtb2RlbHMsIHdoZXJlIHRoZSB0eXBlIGlzIGEgVVJMLCB0aGUgdHlwZSBuYW1lIFNIT1VMRCBzdGFydCB3aXRoIHRoZSB0YWlsIG9mIHRoZSB0eXBlIFVSTCB3aGVyZSByZXF1aXJlZC5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3RydWN0dXJlRGVmaW5pdGlvbi50eXBlXHJcbiAgICovXHJcbiAgX3R5cGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIElmIGRpZmZlcmVudGlhbCBjb25zdHJhaW50cyBhcmUgc3BlY2lmaWVkIGluIHRoaXMgc3RydWN0dXJlLCB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBiYXNlIGluIGEgXCJkaWZmZXJlbnRpYWxcIiBmYXNoaW9uLiBJZiB0aGVyZSBpcyBubyBiYXNlLCB0aGVuIHRoZSBkaWZmZXJlbnRpYWwgY29uc3RyYWludHMgY2Fubm90IGJlIHByb3ZpZGVkIChzbmFwc2hvdCBvbmx5KS4gRGlmZmVyZW50aWFsIHN0cnVjdHVyZXMgYXJlIHVzZWZ1bCBmb3IgdGhlIGVkaXRpbmcgcGVyc3BlY3RpdmUsIGFuZCBzbmFwc2hvdCBzdHJ1Y3R1cmVzIGFyZSBzdWl0YWJsZSBmb3Igb3BlcmF0aW9uYWwgdXNlLiBUaGUgRkhJUiBQcm9qZWN0IHByb3ZpZGVzIGEgbnVtYmVyIG9mIHRvb2xzL3NlcnZpY2VzIHRvIHBvcHVsYXRlIHNuYXBzaG90cyBmcm9tIGRpZmZlcmVudGlhbCBjb25zdHJhaW50cy4gTG9naWNhbCBNb2RlbHMgaGF2ZSBhIGJhc2Ugb2YgXCJFbGVtZW50XCIgb3IgYW5vdGhlciBsb2dpY2FsIG1vZGVsLlxyXG4gICAqL1xyXG4gIGJhc2VEZWZpbml0aW9uPzogZmhpci5GaGlyQ2Fub25pY2FsfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN0cnVjdHVyZURlZmluaXRpb24uYmFzZURlZmluaXRpb25cclxuICAgKi9cclxuICBfYmFzZURlZmluaXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBkZWZpbml0aW9uIGlzIGEgc3BlY2lhbGl6YXRpb24sIHRoZW4gaXQgYWRkcyBuZXcgZWxlbWVudHMgaW4gdGhlIGRpZmZlcmVudGlhbCwgYW5kIHRoZSBzbmFwc2hvdCBpbmNsdWRlcyB0aGUgaW5oZXJpdGVkIGVsZW1lbnRzLiAgSWYgdGhlIGRlZmluaXRpb24gaXMgYSBjb25zdHJhaW50LCB0aGVuIGl0IGNhbm5vdCBkZWZpbmUgbmV3IGVsZW1lbnRzLCBpdCBjYW4gb25seSBtYWtlIG5ldyBydWxlcyBhYm91dCBleGlzdGluZyBjb250ZW50IChzZWUgW1Byb2ZpbGluZyBSZXNvdXJjZXNdKHByb2ZpbGluZy5odG1sI3Jlc291cmNlcykpLlxyXG4gICAqL1xyXG4gIGRlcml2YXRpb24/OiBmaGlyLkZoaXJDb2RlPFR5cGVEZXJpdmF0aW9uUnVsZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdHJ1Y3R1cmVEZWZpbml0aW9uLmRlcml2YXRpb25cclxuICAgKi9cclxuICBfZGVyaXZhdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBzbmFwc2hvdCB2aWV3IGlzIGV4cHJlc3NlZCBpbiBhIHN0YW5kYWxvbmUgZm9ybSB0aGF0IGNhbiBiZSB1c2VkIGFuZCBpbnRlcnByZXRlZCB3aXRob3V0IGNvbnNpZGVyaW5nIHRoZSBiYXNlIFN0cnVjdHVyZURlZmluaXRpb24uXHJcbiAgICovXHJcbiAgc25hcHNob3Q/OiBmaGlyLlN0cnVjdHVyZURlZmluaXRpb25TbmFwc2hvdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgZGlmZmVyZW50aWFsIHZpZXcgaXMgZXhwcmVzc2VkIHJlbGF0aXZlIHRvIHRoZSBiYXNlIFN0cnVjdHVyZURlZmluaXRpb24gLSBhIHN0YXRlbWVudCBvZiBkaWZmZXJlbmNlcyB0aGF0IGl0IGFwcGxpZXMuXHJcbiAgICovXHJcbiAgZGlmZmVyZW50aWFsPzogZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uRGlmZmVyZW50aWFsQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGRlZmluaXRpb24gb2YgYSBGSElSIHN0cnVjdHVyZS4gVGhpcyByZXNvdXJjZSBpcyB1c2VkIHRvIGRlc2NyaWJlIHRoZSB1bmRlcmx5aW5nIHJlc291cmNlcywgZGF0YSB0eXBlcyBkZWZpbmVkIGluIEZISVIsIGFuZCBhbHNvIGZvciBkZXNjcmliaW5nIGV4dGVuc2lvbnMgYW5kIGNvbnN0cmFpbnRzIG9uIHJlc291cmNlcyBhbmQgZGF0YSB0eXBlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVEZWZpbml0aW9uIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdTdHJ1Y3R1cmVEZWZpbml0aW9uJztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIlN0cnVjdHVyZURlZmluaXRpb25cIjtcclxuICAvKipcclxuICAgKiBDYW4gYmUgYSB1cm46dXVpZDogb3IgYSB1cm46b2lkOiBidXQgcmVhbCBodHRwOiBhZGRyZXNzZXMgYXJlIHByZWZlcnJlZC4gIE11bHRpcGxlIGluc3RhbmNlcyBtYXkgc2hhcmUgdGhlIHNhbWUgVVJMIGlmIHRoZXkgaGF2ZSBhIGRpc3RpbmN0IHZlcnNpb24uXHJcbiAgICogVGhlIGRldGVybWluYXRpb24gb2Ygd2hlbiB0byBjcmVhdGUgYSBuZXcgdmVyc2lvbiBvZiBhIHJlc291cmNlIChzYW1lIHVybCwgbmV3IHZlcnNpb24pIHZzLiBkZWZpbmluZyBhIG5ldyBhcnRpZmFjdCBpcyB1cCB0byB0aGUgYXV0aG9yLiAgQ29uc2lkZXJhdGlvbnMgZm9yIG1ha2luZyB0aGlzIGRlY2lzaW9uIGFyZSBmb3VuZCBpbiBbVGVjaG5pY2FsIGFuZCBCdXNpbmVzcyBWZXJzaW9uc10ocmVzb3VyY2UuaHRtbCN2ZXJzaW9ucykuIFxyXG4gICAqIEluIHNvbWUgY2FzZXMsIHRoZSByZXNvdXJjZSBjYW4gbm8gbG9uZ2VyIGJlIGZvdW5kIGF0IHRoZSBzdGF0ZWQgdXJsLCBidXQgdGhlIHVybCBpdHNlbGYgY2Fubm90IGNoYW5nZS4gSW1wbGVtZW50YXRpb25zIGNhbiB1c2UgdGhlIFttZXRhLnNvdXJjZV0ocmVzb3VyY2UuaHRtbCNtZXRhKSBlbGVtZW50IHRvIGluZGljYXRlIHdoZXJlIHRoZSBjdXJyZW50IG1hc3RlciBzb3VyY2Ugb2YgdGhlIHJlc291cmNlIGNhbiBiZSBmb3VuZC5cclxuICAgKi9cclxuICBwdWJsaWMgdXJsOiBmaGlyLkZoaXJVcml8bnVsbDtcclxuICAvKipcclxuICAgKiBUeXBpY2FsbHksIHRoaXMgaXMgdXNlZCBmb3IgaWRlbnRpZmllcnMgdGhhdCBjYW4gZ28gaW4gYW4gSEw3IFYzIElJIChpbnN0YW5jZSBpZGVudGlmaWVyKSBkYXRhIHR5cGUsIGFuZCBjYW4gdGhlbiBpZGVudGlmeSB0aGlzIHN0cnVjdHVyZSBkZWZpbml0aW9uIG91dHNpZGUgb2YgRkhJUiwgd2hlcmUgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHVzZSB0aGUgbG9naWNhbCBVUkkuXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aWZpZXI6IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIG1heSBiZSBkaWZmZXJlbnQgc3RydWN0dXJlIGRlZmluaXRpb24gaW5zdGFuY2VzIHRoYXQgaGF2ZSB0aGUgc2FtZSBpZGVudGlmaWVyIGJ1dCBkaWZmZXJlbnQgdmVyc2lvbnMuICBUaGUgdmVyc2lvbiBjYW4gYmUgYXBwZW5kZWQgdG8gdGhlIHVybCBpbiBhIHJlZmVyZW5jZSB0byBhbGxvdyBhIHJlZmVyZW5jZSB0byBhIHBhcnRpY3VsYXIgYnVzaW5lc3MgdmVyc2lvbiBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LlNvbWUgRXhhbXBsZXM6IFxyXG4gICAqICogTzJTYXRPYnNlcnZhdGlvblxyXG4gICAqICogUHJlc2VudGF0aW9uUmVwb3J0XHJcbiAgICogKiBJbW11bml6YXRpb24yXHJcbiAgICogKiBBY21lQWRtaXNzaW9uUmVjb3JkT2xkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGlzIG5hbWUgZG9lcyBub3QgbmVlZCB0byBiZSBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkgYW5kIG1heSBjb250YWluIHB1bmN0dWF0aW9uLCB3aGl0ZS1zcGFjZSwgZXRjLkFwcGxpY2F0aW9ucyBkb24ndCBoYXZlIHRvIHVzZSB0aGlzIG5hbWUgYnV0IGNhbiBhbHdheXMgZmFsbCBiYWNrIHRvIGl0LiBUaGUgdGl0bGUgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgbGFiZWwgZm9yIHRoZSByb290IGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHRpdGxlPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIHN0cnVjdHVyZSBkZWZpbml0aW9ucyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1czogZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2Ygc3RydWN0dXJlIGRlZmluaXRpb25zIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSByZXNvdXJjZSBsYXN0LW1vZGlmaWVkLWRhdGUsIHNpbmNlIHRoZSByZXNvdXJjZSBtYXkgYmUgYSBzZWNvbmRhcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLiBBZGRpdGlvbmFsIHNwZWNpZmljIGRhdGVzIG1heSBiZSBhZGRlZCBhcyBleHRlbnNpb25zIG9yIGJlIGZvdW5kIGJ5IGNvbnN1bHRpbmcgUHJvdmVuYW5jZXMgYXNzb2NpYXRlZCB3aXRoIHBhc3QgdmVyc2lvbnMgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSBzdHJ1Y3R1cmUgZGVmaW5pdGlvbi4gVGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgaW5kaXZpZHVhbCBvciBvcmdhbml6YXRpb24gdGhhdCBkZXZlbG9wZWQgYW5kIGluaXRpYWxseSBhdXRob3JlZCB0aGUgY29udGVudC4gVGhlIHB1Ymxpc2hlciBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBjb250YWN0IGZvciBxdWVzdGlvbnMgb3IgaXNzdWVzIHdpdGggdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIHB1Ymxpc2hlcj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWF5IGJlIGEgd2ViIHNpdGUsIGFuIGVtYWlsIGFkZHJlc3MsIGEgdGVsZXBob25lIG51bWJlciwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250YWN0OiBmaGlyLkNvbnRhY3REZXRhaWxbXTtcclxuICAvKipcclxuICAgKiBUaGlzIGRlc2NyaXB0aW9uIGNhbiBiZSB1c2VkIHRvIGNhcHR1cmUgZGV0YWlscyBzdWNoIGFzIHdoeSB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gd2FzIGJ1aWx0LCBjb21tZW50cyBhYm91dCBtaXN1c2UsIGluc3RydWN0aW9ucyBmb3IgY2xpbmljYWwgdXNlIGFuZCBpbnRlcnByZXRhdGlvbiwgbGl0ZXJhdHVyZSByZWZlcmVuY2VzLCBleGFtcGxlcyBmcm9tIHRoZSBwYXBlciB3b3JsZCwgZXRjLiBJdCBpcyBub3QgYSByZW5kZXJpbmcgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGFzIGNvbnZleWVkIGluIHRoZSAndGV4dCcgZmllbGQgb2YgdGhlIHJlc291cmNlIGl0c2VsZi4gVGhpcyBpdGVtIFNIT1VMRCBiZSBwb3B1bGF0ZWQgdW5sZXNzIHRoZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgZnJvbSBjb250ZXh0IChlLmcuIHRoZSBsYW5ndWFnZSBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gaXMgcHJlc3VtZWQgdG8gYmUgdGhlIHByZWRvbWluYW50IGxhbmd1YWdlIGluIHRoZSBwbGFjZSB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gd2FzIGNyZWF0ZWQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIG11bHRpcGxlIHVzZUNvbnRleHRzIGFyZSBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIGV4cGVjdGF0aW9uIHRoYXQgYWxsIG9yIGFueSBvZiB0aGUgY29udGV4dHMgYXBwbHkuXHJcbiAgICovXHJcbiAgcHVibGljIHVzZUNvbnRleHQ6IGZoaXIuVXNhZ2VDb250ZXh0W107XHJcbiAgLyoqXHJcbiAgICogSXQgbWF5IGJlIHBvc3NpYmxlIGZvciB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24gdG8gYmUgdXNlZCBpbiBqdXJpc2RpY3Rpb25zIG90aGVyIHRoYW4gdGhvc2UgZm9yIHdoaWNoIGl0IHdhcyBvcmlnaW5hbGx5IGRlc2lnbmVkIG9yIGludGVuZGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBqdXJpc2RpY3Rpb246IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGRvZXMgbm90IGRlc2NyaWJlIHRoZSB1c2FnZSBvZiB0aGUgc3RydWN0dXJlIGRlZmluaXRpb24uIEluc3RlYWQsIGl0IHByb3ZpZGVzIHRyYWNlYWJpbGl0eSBvZiAnJ3doeScnIHRoZSByZXNvdXJjZSBpcyBlaXRoZXIgbmVlZGVkIG9yICcnd2h5JycgaXQgaXMgZGVmaW5lZCBhcyBpdCBpcy4gIFRoaXMgbWF5IGJlIHVzZWQgdG8gcG9pbnQgdG8gc291cmNlIG1hdGVyaWFscyBvciBzcGVjaWZpY2F0aW9ucyB0aGF0IGRyb3ZlIHRoZSBzdHJ1Y3R1cmUgb2YgdGhpcyBzdHJ1Y3R1cmUgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcHVycG9zZT86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGNvcHlyaWdodCBzdGF0ZW1lbnQgcmVsYXRpbmcgdG8gdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGFuZC9vciBpdHMgY29udGVudHMuIENvcHlyaWdodCBzdGF0ZW1lbnRzIGFyZSBnZW5lcmFsbHkgbGVnYWwgcmVzdHJpY3Rpb25zIG9uIHRoZSB1c2UgYW5kIHB1Ymxpc2hpbmcgb2YgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3B5cmlnaHQ/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzZXQgb2Yga2V5IHdvcmRzIG9yIHRlcm1zIGZyb20gZXh0ZXJuYWwgdGVybWlub2xvZ2llcyB0aGF0IG1heSBiZSB1c2VkIHRvIGFzc2lzdCB3aXRoIGluZGV4aW5nIGFuZCBzZWFyY2hpbmcgb2YgdGVtcGxhdGVzIG5ieSBkZXNjcmliaW5nIHRoZSB1c2Ugb2YgdGhpcyBzdHJ1Y3R1cmUgZGVmaW5pdGlvbiwgb3IgdGhlIGNvbnRlbnQgaXQgZGVzY3JpYmVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBrZXl3b3JkOiBmaGlyLkNvZGluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIEEgU3RydWN0dXJlRGVmaW5pdGlvbiBkb2VzIG5vdCBuZWVkIHRvIHNwZWNpZnkgdGhlIHRhcmdldCBpdCBhcHBsaWVzIHRvIGFzIFN0cnVjdHVyZURlZmluaXRpb25zIHdpbGwgb2Z0ZW4gYmUgdmFsaWQgYWNyb3NzIG11bHRpcGxlIHZlcnNpb25zIG9mIEZISVIuIEZISVIgdG9vbGluZyBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgYSBTdHJ1Y3R1cmVEZWZpbml0aW9uIGlzIGNvbnNpc3RlbnQgd2l0aCBhIHBhcnRpY3VsYXIgU3RydWN0dXJlRGVmaW5pdGlvbiBpZiBkZXNpcmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaGlyVmVyc2lvbj86IGZoaXIuRmhpckNvZGV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIGV4dGVybmFsIHNwZWNpZmljYXRpb24gdGhhdCB0aGUgY29udGVudCBpcyBtYXBwZWQgdG8uXHJcbiAgICovXHJcbiAgcHVibGljIG1hcHBpbmc6IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmdbXTtcclxuICAvKipcclxuICAgKiBEZWZpbmVzIHRoZSBraW5kIG9mIHN0cnVjdHVyZSB0aGF0IHRoaXMgZGVmaW5pdGlvbiBpcyBkZXNjcmliaW5nLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBraW5kOiBmaGlyLkZoaXJDb2RlPFN0cnVjdHVyZURlZmluaXRpb25LaW5kQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogQWJzdHJhY3QgUmVzb3VyY2VzIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWQgLSBhIGNvbmNyZXRlIHN1Yi10eXBlIG11c3QgYmUgdXNlZC4gQWJzdHJhY3QgZGF0YXR5cGVzIGFuZCBleHRlbnNpb25zIGNhbm5vdCBiZSB1c2VkIGluIGFuIGluc3RhbmNlLiBGb3IgbG9naWNhbCBtb2RlbHMsIHRoZSBleGFjdCBpbXBsaWNhdGlvbiBvZiBcImFic3RyYWN0XCIgd2lsbCByZXN0IHdpdGggdGhlIGF1dGhvciwgZGVwZW5kaW5nIGhvdyB0aGUgbG9naWNhbCBtb2RlbCBpcyB1c2VkLiBGbGFnZ2luZyBhIGNvbnN0cmFpbnQgc3RydWN0dXJlIGFzIGFic3RyYWN0IGNvbnZleXMgZGVzaWduIGludGVudCBidXQgbWFrZXMgbm8gZGlmZmVyZW5jZSB0byBob3cgdGhlIHN0cnVjdHVyZSBkZWZpbml0aW9uIGlzIGhhbmRsZWQuIE5vdGUgdGhhdCBpbmxpbmUgZGVjbGFyZWQgZWxlbWVudHMgdGhhdCBhcmUgZ2l2ZW4gdGhlIHR5cGUgXCJFbGVtZW50XCIgaW4gdGhlIFN0cnVjdHVyZURlZmluaXRpb24sIGJ1dCBoYXZlIGNoaWxkcmVuIGRlc2NyaWJlZCwgYXJlIGFub255bW91cyBjb25jcmV0ZSB0eXBlcyB0aGF0IHNwZWNpYWxpemUgRWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3Q6IGZoaXIuRmhpckJvb2xlYW58bnVsbDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHRoZSB0eXBlcyBvZiByZXNvdXJjZSBvciBkYXRhIHR5cGUgZWxlbWVudHMgdG8gd2hpY2ggdGhlIGV4dGVuc2lvbiBjYW4gYmUgYXBwbGllZC5cclxuICAgKi9cclxuICBwdWJsaWMgY29udGV4dDogZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBydWxlcyBhcmUgb25seSBldmFsdWF0ZWQgd2hlbiB0aGUgZXh0ZW5zaW9uIGlzIHByZXNlbnQuIFdoZW4gZXZhbHVhdGluZyB0aGUgaW52YXJpYW50LCB0aGUgRkhJUlBhdGggZm9jdXMgaXMgdGhlIGVsZW1lbnQgdGhhdCBob2xkcyB0aGUgZXh0ZW5zaW9uLCBhbmQgJWV4dGVuc2lvbiByZWZlcnMgdG8gdGhlIGV4dGVuc2lvbiBpdHNlbGYuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRleHRJbnZhcmlhbnQ6IGZoaXIuRmhpclN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCBpbiB0aGUgY2FzZSBvZiBjb25zdHJhaW50cywgdGhlIHR5cGUgY291bGQgYmUgZGV0ZXJtaW5lZCBieSBjaGFzaW5nIHRocm91Z2ggdGhlIGJhc2VEZWZpbml0aW9uIHJlZmVyZW5jZXMgdW50aWwgYSBjb25jcmV0ZSBzdHJ1Y3R1cmUgKGRlcml2YXRpb24gPSBzcGVjaWFsaXphdGlvbikgaXMgcmVhY2hlZCwgb3IgYnkgbG9va2luZyBhdCB0aGUgcGF0aCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc25hcHNob3QgLSBpZiBwcmVzZW50IC0gYnV0IHByb3ZpZGluZyB0aGUgdHlwZSBkaXJlY3RseSBtYWtlcyBmb3Igc2ltcGxlciB0b29saW5nIGFuZCBpbmRleGluZy4gXHJcbiAgICogVGhlIHR5cGUgbXVzdCBtYXRjaCB0aGUgZWxlbWVudHMgZGVmaW5lZCBpbiB0aGUgZGlmZmVyZW50aWFsIGFuZCB0aGUgc25hcHNob3QuIEZvciBhbGwgRkhJUiBkZWZpbmVkIHR5cGVzLCB0aGUgcGF0aCBuYW1lIG9mIHRoZSBlbGVtZW50IHdpbGwgc3RhcnQgd2l0aCB0aGUgdHlwZSBuYW1lLiBGb3IgbG9naWNhbCBtb2RlbHMsIHdoZXJlIHRoZSB0eXBlIGlzIGEgVVJMLCB0aGUgdHlwZSBuYW1lIFNIT1VMRCBzdGFydCB3aXRoIHRoZSB0YWlsIG9mIHRoZSB0eXBlIFVSTCB3aGVyZSByZXF1aXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZTogZmhpci5GaGlyVXJpfG51bGw7XHJcbiAgLyoqXHJcbiAgICogSWYgZGlmZmVyZW50aWFsIGNvbnN0cmFpbnRzIGFyZSBzcGVjaWZpZWQgaW4gdGhpcyBzdHJ1Y3R1cmUsIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIGJhc2UgaW4gYSBcImRpZmZlcmVudGlhbFwiIGZhc2hpb24uIElmIHRoZXJlIGlzIG5vIGJhc2UsIHRoZW4gdGhlIGRpZmZlcmVudGlhbCBjb25zdHJhaW50cyBjYW5ub3QgYmUgcHJvdmlkZWQgKHNuYXBzaG90IG9ubHkpLiBEaWZmZXJlbnRpYWwgc3RydWN0dXJlcyBhcmUgdXNlZnVsIGZvciB0aGUgZWRpdGluZyBwZXJzcGVjdGl2ZSwgYW5kIHNuYXBzaG90IHN0cnVjdHVyZXMgYXJlIHN1aXRhYmxlIGZvciBvcGVyYXRpb25hbCB1c2UuIFRoZSBGSElSIFByb2plY3QgcHJvdmlkZXMgYSBudW1iZXIgb2YgdG9vbHMvc2VydmljZXMgdG8gcG9wdWxhdGUgc25hcHNob3RzIGZyb20gZGlmZmVyZW50aWFsIGNvbnN0cmFpbnRzLiBMb2dpY2FsIE1vZGVscyBoYXZlIGEgYmFzZSBvZiBcIkVsZW1lbnRcIiBvciBhbm90aGVyIGxvZ2ljYWwgbW9kZWwuXHJcbiAgICovXHJcbiAgcHVibGljIGJhc2VEZWZpbml0aW9uPzogZmhpci5GaGlyQ2Fub25pY2FsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiB0aGUgZGVmaW5pdGlvbiBpcyBhIHNwZWNpYWxpemF0aW9uLCB0aGVuIGl0IGFkZHMgbmV3IGVsZW1lbnRzIGluIHRoZSBkaWZmZXJlbnRpYWwsIGFuZCB0aGUgc25hcHNob3QgaW5jbHVkZXMgdGhlIGluaGVyaXRlZCBlbGVtZW50cy4gIElmIHRoZSBkZWZpbml0aW9uIGlzIGEgY29uc3RyYWludCwgdGhlbiBpdCBjYW5ub3QgZGVmaW5lIG5ldyBlbGVtZW50cywgaXQgY2FuIG9ubHkgbWFrZSBuZXcgcnVsZXMgYWJvdXQgZXhpc3RpbmcgY29udGVudCAoc2VlIFtQcm9maWxpbmcgUmVzb3VyY2VzXShwcm9maWxpbmcuaHRtbCNyZXNvdXJjZXMpKS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVyaXZhdGlvbj86IGZoaXIuRmhpckNvZGU8VHlwZURlcml2YXRpb25SdWxlQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHNuYXBzaG90IHZpZXcgaXMgZXhwcmVzc2VkIGluIGEgc3RhbmRhbG9uZSBmb3JtIHRoYXQgY2FuIGJlIHVzZWQgYW5kIGludGVycHJldGVkIHdpdGhvdXQgY29uc2lkZXJpbmcgdGhlIGJhc2UgU3RydWN0dXJlRGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc25hcHNob3Q/OiBmaGlyLlN0cnVjdHVyZURlZmluaXRpb25TbmFwc2hvdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBkaWZmZXJlbnRpYWwgdmlldyBpcyBleHByZXNzZWQgcmVsYXRpdmUgdG8gdGhlIGJhc2UgU3RydWN0dXJlRGVmaW5pdGlvbiAtIGEgc3RhdGVtZW50IG9mIGRpZmZlcmVuY2VzIHRoYXQgaXQgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgZGlmZmVyZW50aWFsPzogZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uRGlmZmVyZW50aWFsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBTdHJ1Y3R1cmVEZWZpbml0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8U3RydWN0dXJlRGVmaW5pdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdTdHJ1Y3R1cmVEZWZpbml0aW9uJztcclxuICAgIGlmIChzb3VyY2VbJ3VybCddKSB7IHRoaXMudXJsID0gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHNvdXJjZS51cmx9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudXJsID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3VybCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnVybCkgeyB0aGlzLnVybC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl91cmwhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy51cmwgPSBuZXcgZmhpci5GaGlyVXJpKHNvdXJjZS5fdXJsIGFzIFBhcnRpYWw8Zmhpci5GaGlyVXJpQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gc291cmNlLmlkZW50aWZpZXIubWFwKCh4KSA9PiBuZXcgZmhpci5JZGVudGlmaWVyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaWRlbnRpZmllciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd2ZXJzaW9uJ10pIHsgdGhpcy52ZXJzaW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS52ZXJzaW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ192ZXJzaW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMudmVyc2lvbikgeyB0aGlzLnZlcnNpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdmVyc2lvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnZlcnNpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fdmVyc2lvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbmFtZSddKSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubmFtZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5uYW1lID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX25hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYW1lKSB7IHRoaXMubmFtZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9uYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9uYW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd0aXRsZSddKSB7IHRoaXMudGl0bGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnRpdGxlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ190aXRsZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnRpdGxlKSB7IHRoaXMudGl0bGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdGl0bGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy50aXRsZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl90aXRsZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZXhwZXJpbWVudGFsJ10pIHsgdGhpcy5leHBlcmltZW50YWwgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5leHBlcmltZW50YWx9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2V4cGVyaW1lbnRhbCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmV4cGVyaW1lbnRhbCkgeyB0aGlzLmV4cGVyaW1lbnRhbC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9leHBlcmltZW50YWwhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5leHBlcmltZW50YWwgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX2V4cGVyaW1lbnRhbCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSkgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuZGF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGF0ZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRhdGUpIHsgdGhpcy5kYXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RhdGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fZGF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwdWJsaXNoZXInXSkgeyB0aGlzLnB1Ymxpc2hlciA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucHVibGlzaGVyfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wdWJsaXNoZXInXSkge1xyXG4gICAgICBpZiAodGhpcy5wdWJsaXNoZXIpIHsgdGhpcy5wdWJsaXNoZXIuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcHVibGlzaGVyISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucHVibGlzaGVyID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3B1Ymxpc2hlciBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGFjdCddKSB7IHRoaXMuY29udGFjdCA9IHNvdXJjZS5jb250YWN0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29udGFjdERldGFpbCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRhY3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZXNjcmlwdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uKSB7IHRoaXMuZGVzY3JpcHRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVzY3JpcHRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bihzb3VyY2UuX2Rlc2NyaXB0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyTWFya2Rvd25BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3VzZUNvbnRleHQnXSkgeyB0aGlzLnVzZUNvbnRleHQgPSBzb3VyY2UudXNlQ29udGV4dC5tYXAoKHgpID0+IG5ldyBmaGlyLlVzYWdlQ29udGV4dCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVzZUNvbnRleHQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnanVyaXNkaWN0aW9uJ10pIHsgdGhpcy5qdXJpc2RpY3Rpb24gPSBzb3VyY2UuanVyaXNkaWN0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuanVyaXNkaWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3B1cnBvc2UnXSkgeyB0aGlzLnB1cnBvc2UgPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UucHVycG9zZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcHVycG9zZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnB1cnBvc2UpIHsgdGhpcy5wdXJwb3NlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3B1cnBvc2UhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wdXJwb3NlID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHNvdXJjZS5fcHVycG9zZSBhcyBQYXJ0aWFsPGZoaXIuRmhpck1hcmtkb3duQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb3B5cmlnaHQnXSkgeyB0aGlzLmNvcHlyaWdodCA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5jb3B5cmlnaHR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvcHlyaWdodCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvcHlyaWdodCkgeyB0aGlzLmNvcHlyaWdodC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9jb3B5cmlnaHQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb3B5cmlnaHQgPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oc291cmNlLl9jb3B5cmlnaHQgYXMgUGFydGlhbDxmaGlyLkZoaXJNYXJrZG93bkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsna2V5d29yZCddKSB7IHRoaXMua2V5d29yZCA9IHNvdXJjZS5rZXl3b3JkLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kaW5nKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMua2V5d29yZCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydmaGlyVmVyc2lvbiddKSB7IHRoaXMuZmhpclZlcnNpb24gPSBuZXcgZmhpci5GaGlyQ29kZSh7dmFsdWU6IHNvdXJjZS5maGlyVmVyc2lvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZmhpclZlcnNpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5maGlyVmVyc2lvbikgeyB0aGlzLmZoaXJWZXJzaW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2ZoaXJWZXJzaW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZmhpclZlcnNpb24gPSBuZXcgZmhpci5GaGlyQ29kZShzb3VyY2UuX2ZoaXJWZXJzaW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFwcGluZyddKSB7IHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nLm1hcCgoeCkgPT4gbmV3IGZoaXIuU3RydWN0dXJlRGVmaW5pdGlvbk1hcHBpbmcoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5tYXBwaW5nID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2tpbmQnXSkgeyB0aGlzLmtpbmQgPSBuZXcgZmhpci5GaGlyQ29kZTxTdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5raW5kfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmtpbmQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfa2luZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmtpbmQpIHsgdGhpcy5raW5kLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2tpbmQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5raW5kID0gbmV3IGZoaXIuRmhpckNvZGU8U3RydWN0dXJlRGVmaW5pdGlvbktpbmRDb2RlVHlwZT4oc291cmNlLl9raW5kIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhYnN0cmFjdCddKSB7IHRoaXMuYWJzdHJhY3QgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5hYnN0cmFjdH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hYnN0cmFjdCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19hYnN0cmFjdCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmFic3RyYWN0KSB7IHRoaXMuYWJzdHJhY3QuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fYWJzdHJhY3QhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5hYnN0cmFjdCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fYWJzdHJhY3QgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb250ZXh0J10pIHsgdGhpcy5jb250ZXh0ID0gc291cmNlLmNvbnRleHQubWFwKCh4KSA9PiBuZXcgZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uQ29udGV4dCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRleHQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGV4dEludmFyaWFudCddKSB7IHRoaXMuY29udGV4dEludmFyaWFudCA9IHNvdXJjZS5jb250ZXh0SW52YXJpYW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRleHRJbnZhcmlhbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvbnRleHRJbnZhcmlhbnQnXSkge1xyXG4gICAgICBzb3VyY2UuX2NvbnRleHRJbnZhcmlhbnQuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dEludmFyaWFudC5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLmNvbnRleHRJbnZhcmlhbnRbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5jb250ZXh0SW52YXJpYW50LnB1c2gobmV3IGZoaXIuRmhpclN0cmluZyh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudHlwZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3R5cGUnXSkge1xyXG4gICAgICBpZiAodGhpcy50eXBlKSB7IHRoaXMudHlwZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl90eXBlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJVcmkoc291cmNlLl90eXBlIGFzIFBhcnRpYWw8Zmhpci5GaGlyVXJpQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydiYXNlRGVmaW5pdGlvbiddKSB7IHRoaXMuYmFzZURlZmluaXRpb24gPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogc291cmNlLmJhc2VEZWZpbml0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19iYXNlRGVmaW5pdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmJhc2VEZWZpbml0aW9uKSB7IHRoaXMuYmFzZURlZmluaXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fYmFzZURlZmluaXRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5iYXNlRGVmaW5pdGlvbiA9IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoc291cmNlLl9iYXNlRGVmaW5pdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVyaXZhdGlvbiddKSB7IHRoaXMuZGVyaXZhdGlvbiA9IG5ldyBmaGlyLkZoaXJDb2RlPFR5cGVEZXJpdmF0aW9uUnVsZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5kZXJpdmF0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZXJpdmF0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVyaXZhdGlvbikgeyB0aGlzLmRlcml2YXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVyaXZhdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlcml2YXRpb24gPSBuZXcgZmhpci5GaGlyQ29kZTxUeXBlRGVyaXZhdGlvblJ1bGVDb2RlVHlwZT4oc291cmNlLl9kZXJpdmF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzbmFwc2hvdCddKSB7IHRoaXMuc25hcHNob3QgPSBuZXcgZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uU25hcHNob3Qoc291cmNlLnNuYXBzaG90KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGlmZmVyZW50aWFsJ10pIHsgdGhpcy5kaWZmZXJlbnRpYWwgPSBuZXcgZmhpci5TdHJ1Y3R1cmVEZWZpbml0aW9uRGlmZmVyZW50aWFsKHNvdXJjZS5kaWZmZXJlbnRpYWwpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3Igc3RhdHVzIChTdHJ1Y3R1cmVEZWZpbml0aW9uLnN0YXR1cylcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBzdGF0dXNSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIFB1YmxpY2F0aW9uU3RhdHVzQ29kZXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEV4dGVuc2libGUtYm91bmQgVmFsdWUgU2V0IGZvciBrZXl3b3JkIChTdHJ1Y3R1cmVEZWZpbml0aW9uLmtleXdvcmQpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXQga2V5d29yZEV4dGVuc2libGVDb2RpbmdzKCk6RGVmaW5pdGlvblVzZUNvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIERlZmluaXRpb25Vc2VDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXF1aXJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIGZoaXJWZXJzaW9uIChTdHJ1Y3R1cmVEZWZpbml0aW9uLmZoaXJWZXJzaW9uKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IGZoaXJWZXJzaW9uUmVxdWlyZWRDb2RlcygpIHtcclxuICAgIHJldHVybiBGSElSVmVyc2lvbkNvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXF1aXJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIGtpbmQgKFN0cnVjdHVyZURlZmluaXRpb24ua2luZClcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBraW5kUmVxdWlyZWRDb2RlcygpIHtcclxuICAgIHJldHVybiBTdHJ1Y3R1cmVEZWZpbml0aW9uS2luZENvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBFeHRlbnNpYmxlLWJvdW5kIFZhbHVlIFNldCBmb3IgdHlwZSAoU3RydWN0dXJlRGVmaW5pdGlvbi50eXBlKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHR5cGVFeHRlbnNpYmxlQ29kaW5ncygpOkRlZmluZWRUeXBlc0NvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIERlZmluZWRUeXBlc0NvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3IgZGVyaXZhdGlvbiAoU3RydWN0dXJlRGVmaW5pdGlvbi5kZXJpdmF0aW9uKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IGRlcml2YXRpb25SZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIFR5cGVEZXJpdmF0aW9uUnVsZUNvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdTdHJ1Y3R1cmVEZWZpbml0aW9uJyB9XHJcbiAgICBpZiAoIXRoaXNbJ3Jlc291cmNlVHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZVR5cGUgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5yZXNvdXJjZVR5cGU6XCJTdHJ1Y3R1cmVEZWZpbml0aW9uXCInLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXNbJ3VybCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB1cmwgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi51cmw6dXJpJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ1cmxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy51cmwuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnVybCcpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJpZGVudGlmaWVyXCJdKSB7IHRoaXMuaWRlbnRpZmllci5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuaWRlbnRpZmllclske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJ2ZXJzaW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudmVyc2lvbi5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycudmVyc2lvbicpKTsgfVxyXG4gICAgaWYgKCF0aGlzWyduYW1lJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IG5hbWUgZmhpcjogU3RydWN0dXJlRGVmaW5pdGlvbi5uYW1lOnN0cmluZycsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wibmFtZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm5hbWUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLm5hbWUnKSk7IH1cclxuICAgIGlmICh0aGlzW1widGl0bGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50aXRsZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycudGl0bGUnKSk7IH1cclxuICAgIGlmICghdGhpc1snc3RhdHVzJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHN0YXR1cyBmaGlyOiBTdHJ1Y3R1cmVEZWZpbml0aW9uLnN0YXR1czpjb2RlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ3N0YXR1cyddICYmICghT2JqZWN0LnZhbHVlcyhQdWJsaWNhdGlvblN0YXR1c0NvZGVzKS5pbmNsdWRlcyh0aGlzLnN0YXR1cy52YWx1ZSBhcyBhbnkpKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnY29kZS1pbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdzdGF0dXMgKFN0cnVjdHVyZURlZmluaXRpb24uc3RhdHVzKSBvZiB0eXBlIGNvZGUgaXMgbWlzc2luZyBjb2RlIGZvciBSZXF1aXJlZCBiaW5kaW5nIHRvOiBQdWJsaWNhdGlvblN0YXR1cycsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wic3RhdHVzXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3RhdHVzLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5zdGF0dXMnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZXhwZXJpbWVudGFsXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZXhwZXJpbWVudGFsLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5leHBlcmltZW50YWwnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGF0ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRhdGUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmRhdGUnKSk7IH1cclxuICAgIGlmICh0aGlzW1wicHVibGlzaGVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucHVibGlzaGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5wdWJsaXNoZXInKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY29udGFjdFwiXSkgeyB0aGlzLmNvbnRhY3QuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmNvbnRhY3RbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiZGVzY3JpcHRpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kZXNjcmlwdGlvbi5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuZGVzY3JpcHRpb24nKSk7IH1cclxuICAgIGlmICh0aGlzW1widXNlQ29udGV4dFwiXSkgeyB0aGlzLnVzZUNvbnRleHQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnVzZUNvbnRleHRbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wianVyaXNkaWN0aW9uXCJdKSB7IHRoaXMuanVyaXNkaWN0aW9uLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5qdXJpc2RpY3Rpb25bJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicHVycG9zZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnB1cnBvc2UuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnB1cnBvc2UnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY29weXJpZ2h0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29weXJpZ2h0LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5jb3B5cmlnaHQnKSk7IH1cclxuICAgIGlmICh0aGlzW1wia2V5d29yZFwiXSkgeyB0aGlzLmtleXdvcmQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmtleXdvcmRbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICh0aGlzWydmaGlyVmVyc2lvbiddICYmICghT2JqZWN0LnZhbHVlcyhGSElSVmVyc2lvbkNvZGVzKS5pbmNsdWRlcyh0aGlzLmZoaXJWZXJzaW9uLnZhbHVlIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ2ZoaXJWZXJzaW9uIChTdHJ1Y3R1cmVEZWZpbml0aW9uLmZoaXJWZXJzaW9uKSBvZiB0eXBlIGNvZGUgaXMgbWlzc2luZyBjb2RlIGZvciBSZXF1aXJlZCBiaW5kaW5nIHRvOiBGSElSVmVyc2lvbicsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiZmhpclZlcnNpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5maGlyVmVyc2lvbi5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuZmhpclZlcnNpb24nKSk7IH1cclxuICAgIGlmICh0aGlzW1wibWFwcGluZ1wiXSkgeyB0aGlzLm1hcHBpbmcuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLm1hcHBpbmdbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICghdGhpc1sna2luZCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBraW5kIGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24ua2luZDpjb2RlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ2tpbmQnXSAmJiAoIU9iamVjdC52YWx1ZXMoU3RydWN0dXJlRGVmaW5pdGlvbktpbmRDb2RlcykuaW5jbHVkZXModGhpcy5raW5kLnZhbHVlIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ2tpbmQgKFN0cnVjdHVyZURlZmluaXRpb24ua2luZCkgb2YgdHlwZSBjb2RlIGlzIG1pc3NpbmcgY29kZSBmb3IgUmVxdWlyZWQgYmluZGluZyB0bzogU3RydWN0dXJlRGVmaW5pdGlvbktpbmQnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImtpbmRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5raW5kLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5raW5kJykpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ2Fic3RyYWN0J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGFic3RyYWN0IGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24uYWJzdHJhY3Q6Ym9vbGVhbicsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiYWJzdHJhY3RcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5hYnN0cmFjdC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuYWJzdHJhY3QnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY29udGV4dFwiXSkgeyB0aGlzLmNvbnRleHQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmNvbnRleHRbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiY29udGV4dEludmFyaWFudFwiXSkgeyB0aGlzLmNvbnRleHRJbnZhcmlhbnQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmNvbnRleHRJbnZhcmlhbnRbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICghdGhpc1sndHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0eXBlIGZoaXI6IFN0cnVjdHVyZURlZmluaXRpb24udHlwZTp1cmknLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy50eXBlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImJhc2VEZWZpbml0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuYmFzZURlZmluaXRpb24uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmJhc2VEZWZpbml0aW9uJykpOyB9XHJcbiAgICBpZiAodGhpc1snZGVyaXZhdGlvbiddICYmICghT2JqZWN0LnZhbHVlcyhUeXBlRGVyaXZhdGlvblJ1bGVDb2RlcykuaW5jbHVkZXModGhpcy5kZXJpdmF0aW9uLnZhbHVlIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ2Rlcml2YXRpb24gKFN0cnVjdHVyZURlZmluaXRpb24uZGVyaXZhdGlvbikgb2YgdHlwZSBjb2RlIGlzIG1pc3NpbmcgY29kZSBmb3IgUmVxdWlyZWQgYmluZGluZyB0bzogVHlwZURlcml2YXRpb25SdWxlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXJpdmF0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGVyaXZhdGlvbi5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuZGVyaXZhdGlvbicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJzbmFwc2hvdFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnNuYXBzaG90LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5zbmFwc2hvdCcpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkaWZmZXJlbnRpYWxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kaWZmZXJlbnRpYWwuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmRpZmZlcmVudGlhbCcpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19