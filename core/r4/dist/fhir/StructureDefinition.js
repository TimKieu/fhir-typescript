// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ExtensionContextTypeCodes } from '../fhirValueSets/ExtensionContextTypeCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { DefinitionUseCodings, } from '../fhirValueSets/DefinitionUseCodings.js';
// @ts-ignore
import { FHIRVersionCodes } from '../fhirValueSets/FHIRVersionCodes.js';
// @ts-ignore
import { StructureDefinitionKindCodes } from '../fhirValueSets/StructureDefinitionKindCodes.js';
// @ts-ignore
import { DefinedTypesCodings, } from '../fhirValueSets/DefinedTypesCodings.js';
// @ts-ignore
import { TypeDerivationRuleCodes } from '../fhirValueSets/TypeDerivationRuleCodes.js';
/**
 * An external specification that the content is mapped to.
 */
export class StructureDefinitionMapping extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity']) {
            this.identity = new fhir.FhirId({ value: source.identity });
        }
        else {
            this.identity = null;
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['identity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property identity:fhir.FhirId fhir: StructureDefinition.mapping.identity:id' });
        }
        if (this["identity"]) {
            issues.push(...this.identity.doModelValidation());
        }
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionMapping._fts_dataType = 'StructureDefinitionMapping';
/**
 * Identifies the types of resource or data type elements to which the extension can be applied.
 */
export class StructureDefinitionContext extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        else {
            this.expression = null;
        }
    }
    /**
     * Required-bound Value Set for type (StructureDefinition.context.type)
     */
    static get typeRequiredCodes() {
        return ExtensionContextTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<ExtensionContextTypeCodeType> fhir: StructureDefinition.context.type:code' });
        }
        if (this['type'] && (!Object.values(ExtensionContextTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<ExtensionContextTypeCodeType> fhir: StructureDefinition.context.type:code Required binding to: ExtensionContextType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['expression']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property expression:fhir.FhirString fhir: StructureDefinition.context.expression:string' });
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionContext._fts_dataType = 'StructureDefinitionContext';
/**
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
export class StructureDefinitionSnapshot extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionSnapshot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['element']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition' });
        }
        else if (!Array.isArray(this.element)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition' });
        }
        else if (this.element.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.snapshot.element:ElementDefinition' });
        }
        if (this["element"]) {
            this.element.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionSnapshot._fts_dataType = 'StructureDefinitionSnapshot';
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export class StructureDefinitionDifferential extends fhir.BackboneElement {
    /**
     * Default constructor for StructureDefinitionDifferential - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ElementDefinition(x));
        }
        else {
            this.element = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['element']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition' });
        }
        else if (!Array.isArray(this.element)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition' });
        }
        else if (this.element.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element:fhir.ElementDefinition[] fhir: StructureDefinition.differential.element:ElementDefinition' });
        }
        if (this["element"]) {
            this.element.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinitionDifferential._fts_dataType = 'StructureDefinitionDifferential';
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export class StructureDefinition extends fhir.DomainResource {
    /**
     * Default constructor for StructureDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'StructureDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.Coding(x));
        }
        else {
            this.keyword = [];
        }
        if (source['fhirVersion']) {
            this.fhirVersion = new fhir.FhirCode({ value: source.fhirVersion });
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.StructureDefinitionMapping(x));
        }
        else {
            this.mapping = [];
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        else {
            this.abstract = null;
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.StructureDefinitionContext(x));
        }
        else {
            this.context = [];
        }
        if (source['contextInvariant']) {
            this.contextInvariant = source.contextInvariant.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.contextInvariant = [];
        }
        if (source['type']) {
            this.type = new fhir.FhirUri({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['baseDefinition']) {
            this.baseDefinition = new fhir.FhirCanonical({ value: source.baseDefinition });
        }
        if (source['derivation']) {
            this.derivation = new fhir.FhirCode({ value: source.derivation });
        }
        if (source['snapshot']) {
            this.snapshot = new fhir.StructureDefinitionSnapshot(source.snapshot);
        }
        if (source['differential']) {
            this.differential = new fhir.StructureDefinitionDifferential(source.differential);
        }
    }
    /**
     * Required-bound Value Set for status (StructureDefinition.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Extensible-bound Value Set for keyword (StructureDefinition.keyword)
     */
    static get keywordExtensibleCodings() {
        return DefinitionUseCodings;
    }
    /**
     * Required-bound Value Set for fhirVersion (StructureDefinition.fhirVersion)
     */
    static get fhirVersionRequiredCodes() {
        return FHIRVersionCodes;
    }
    /**
     * Required-bound Value Set for kind (StructureDefinition.kind)
     */
    static get kindRequiredCodes() {
        return StructureDefinitionKindCodes;
    }
    /**
     * Extensible-bound Value Set for type (StructureDefinition.type)
     */
    static get typeExtensibleCodings() {
        return DefinedTypesCodings;
    }
    /**
     * Required-bound Value Set for derivation (StructureDefinition.derivation)
     */
    static get derivationRequiredCodes() {
        return TypeDerivationRuleCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"StructureDefinition" fhir: StructureDefinition.resourceType:"StructureDefinition"' });
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url:fhir.FhirUri fhir: StructureDefinition.url:uri' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: StructureDefinition.name:string' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: StructureDefinition.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: StructureDefinition.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["keyword"]) {
            this.keyword.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['fhirVersion'] && (!Object.values(FHIRVersionCodes).includes(this.fhirVersion))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property fhirVersion?:fhir.FhirCode fhir: StructureDefinition.fhirVersion:code Required binding to: FHIRVersion' });
        }
        if (this["fhirVersion"]) {
            issues.push(...this.fhirVersion.doModelValidation());
        }
        if (this["mapping"]) {
            this.mapping.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind:fhir.FhirCode<StructureDefinitionKindCodeType> fhir: StructureDefinition.kind:code' });
        }
        if (this['kind'] && (!Object.values(StructureDefinitionKindCodes).includes(this.kind))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property kind:fhir.FhirCode<StructureDefinitionKindCodeType> fhir: StructureDefinition.kind:code Required binding to: StructureDefinitionKind' });
        }
        if (this["kind"]) {
            issues.push(...this.kind.doModelValidation());
        }
        if (!this['abstract']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property abstract:fhir.FhirBoolean fhir: StructureDefinition.abstract:boolean' });
        }
        if (this["abstract"]) {
            issues.push(...this.abstract.doModelValidation());
        }
        if (this["context"]) {
            this.context.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contextInvariant"]) {
            this.contextInvariant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirUri fhir: StructureDefinition.type:uri' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["baseDefinition"]) {
            issues.push(...this.baseDefinition.doModelValidation());
        }
        if (this['derivation'] && (!Object.values(TypeDerivationRuleCodes).includes(this.derivation))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property derivation?:fhir.FhirCode<TypeDerivationRuleCodeType> fhir: StructureDefinition.derivation:code Required binding to: TypeDerivationRule' });
        }
        if (this["derivation"]) {
            issues.push(...this.derivation.doModelValidation());
        }
        if (this["snapshot"]) {
            issues.push(...this.snapshot.doModelValidation());
        }
        if (this["differential"]) {
            issues.push(...this.differential.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
StructureDefinition._fts_dataType = 'StructureDefinition';
//# sourceMappingURL=data:application/json;base64,