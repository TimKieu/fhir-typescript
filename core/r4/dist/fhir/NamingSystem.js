// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: NamingSystem
import * as fhir from '../fhir.js';
// @ts-ignore
import { NamingsystemIdentifierTypeCodes } from '../fhirValueSets/NamingsystemIdentifierTypeCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { NamingsystemTypeCodes } from '../fhirValueSets/NamingsystemTypeCodes.js';
// @ts-ignore
import { IdentifierTypeCodings, } from '../fhirValueSets/IdentifierTypeCodings.js';
/**
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export class NamingSystemUniqueId extends fhir.BackboneElement {
    /**
     * Default constructor for NamingSystemUniqueId - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['preferred']) {
            this.preferred = new fhir.FhirBoolean({ value: source.preferred });
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for type (NamingSystem.uniqueId.type)
     */
    static get typeRequiredCodes() {
        return NamingsystemIdentifierTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<NamingsystemIdentifierTypeCodeType> fhir: NamingSystem.uniqueId.type:code' });
        }
        if (this['type'] && (!Object.values(NamingsystemIdentifierTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<NamingsystemIdentifierTypeCodeType> fhir: NamingSystem.uniqueId.type:code Required binding to: NamingsystemIdentifierType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value:fhir.FhirString fhir: NamingSystem.uniqueId.value:string' });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (this["preferred"]) {
            issues.push(...this.preferred.doModelValidation());
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NamingSystemUniqueId._fts_dataType = 'NamingSystemUniqueId';
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export class NamingSystem extends fhir.DomainResource {
    /**
     * Default constructor for NamingSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'NamingSystem';
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['responsible']) {
            this.responsible = new fhir.FhirString({ value: source.responsible });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['usage']) {
            this.usage = new fhir.FhirString({ value: source.usage });
        }
        if (source['uniqueId']) {
            this.uniqueId = source.uniqueId.map((x) => new fhir.NamingSystemUniqueId(x));
        }
        else {
            this.uniqueId = [];
        }
    }
    /**
     * Required-bound Value Set for status (NamingSystem.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Required-bound Value Set for kind (NamingSystem.kind)
     */
    static get kindRequiredCodes() {
        return NamingsystemTypeCodes;
    }
    /**
     * Extensible-bound Value Set for type (NamingSystem.type)
     */
    static get typeExtensibleCodings() {
        return IdentifierTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"NamingSystem" fhir: NamingSystem.resourceType:"NamingSystem"' });
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: NamingSystem.name:string' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: NamingSystem.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: NamingSystem.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind:fhir.FhirCode<NamingsystemTypeCodeType> fhir: NamingSystem.kind:code' });
        }
        if (this['kind'] && (!Object.values(NamingsystemTypeCodes).includes(this.kind))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property kind:fhir.FhirCode<NamingsystemTypeCodeType> fhir: NamingSystem.kind:code Required binding to: NamingsystemType' });
        }
        if (this["kind"]) {
            issues.push(...this.kind.doModelValidation());
        }
        if (!this['date']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: NamingSystem.date:dateTime' });
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["responsible"]) {
            issues.push(...this.responsible.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["usage"]) {
            issues.push(...this.usage.doModelValidation());
        }
        if (!this['uniqueId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property uniqueId:fhir.NamingSystemUniqueId[] fhir: NamingSystem.uniqueId:uniqueId' });
        }
        else if (!Array.isArray(this.uniqueId)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property uniqueId:fhir.NamingSystemUniqueId[] fhir: NamingSystem.uniqueId:uniqueId' });
        }
        else if (this.uniqueId.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property uniqueId:fhir.NamingSystemUniqueId[] fhir: NamingSystem.uniqueId:uniqueId' });
        }
        if (this["uniqueId"]) {
            this.uniqueId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
NamingSystem._fts_dataType = 'NamingSystem';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmFtaW5nU3lzdGVtLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9OYW1pbmdTeXN0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsK0JBQStCLEVBQXVDLE1BQU0scURBQXFELENBQUM7QUFHM0ksYUFBYTtBQUNiLE9BQU8sRUFBRSxzQkFBc0IsRUFBOEIsTUFBTSw0Q0FBNEMsQ0FBQztBQUdoSCxhQUFhO0FBQ2IsT0FBTyxFQUFFLHFCQUFxQixFQUE2QixNQUFNLDJDQUEyQyxDQUFDO0FBQzdHLGFBQWE7QUFDYixPQUFPLEVBQUUscUJBQXFCLEdBQTRCLE1BQU0sMkNBQTJDLENBQUM7QUE2QjVHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFxQixTQUFRLElBQUksQ0FBQyxlQUFlO0lBeUI1RDs7T0FFRztJQUNILFlBQVksU0FBMkMsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDakcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFxQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQzNHO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDNUU7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QUM7U0FBRTtRQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLHFHQUFxRyxFQUFFLENBQUMsQ0FBQztTQUMxSzthQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSwwR0FBMEcsRUFBRSxDQUFDLENBQUM7U0FDaEw7YUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxxR0FBcUcsRUFBRSxDQUFDLENBQUM7U0FDMUs7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDbEcsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUF6SkQ7O0dBRUc7QUFDNkIsMEJBQWEsR0FBVSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IE5hbWluZ1N5c3RlbVxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTmFtaW5nc3lzdGVtSWRlbnRpZmllclR5cGVDb2RpbmdzLCBOYW1pbmdzeXN0ZW1JZGVudGlmaWVyVHlwZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL05hbWluZ3N5c3RlbUlkZW50aWZpZXJUeXBlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTmFtaW5nc3lzdGVtSWRlbnRpZmllclR5cGVDb2RlcywgIE5hbWluZ3N5c3RlbUlkZW50aWZpZXJUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL05hbWluZ3N5c3RlbUlkZW50aWZpZXJUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kaW5ncywgUHVibGljYXRpb25TdGF0dXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzQ29kZXMsICBQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBOYW1pbmdzeXN0ZW1UeXBlQ29kaW5ncywgTmFtaW5nc3lzdGVtVHlwZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL05hbWluZ3N5c3RlbVR5cGVDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBOYW1pbmdzeXN0ZW1UeXBlQ29kZXMsICBOYW1pbmdzeXN0ZW1UeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL05hbWluZ3N5c3RlbVR5cGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgSWRlbnRpZmllclR5cGVDb2RpbmdzLCBJZGVudGlmaWVyVHlwZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0lkZW50aWZpZXJUeXBlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgSWRlbnRpZmllclR5cGVDb2RlcywgIElkZW50aWZpZXJUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0lkZW50aWZpZXJUeXBlQ29kZXMuanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTmFtaW5nU3lzdGVtVW5pcXVlSWQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmFtaW5nU3lzdGVtVW5pcXVlSWRBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBEaWZmZXJlbnQgaWRlbnRpZmllciB0eXBlcyBtYXkgYmUgdXNlZCBpbiBkaWZmZXJlbnQgdHlwZXMgb2YgY29tbXVuaWNhdGlvbnMgKE9JRHMgZm9yIHYzLCBVUklzIGZvciBGSElSLCBldGMuKS4gIE90aGVyIGluY2x1ZGVzIFJVSURzIGZyb20gdjMsIHN0YW5kYXJkIHYyIGNvZGUgbmFtZSBzdHJpbmdzLCBldGMuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5GaGlyQ29kZTxOYW1pbmdzeXN0ZW1JZGVudGlmaWVyVHlwZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBhIFVSSSBpbnRlbmRlZCBmb3IgdXNlIGFzIEZISVIgc3lzdGVtIGlkZW50aWZpZXIsIHRoZSBVUkkgc2hvdWxkIG5vdCBjb250YWluIFwiXFxcIiBvciBcIj9cIiBvciBcIixcIiBzaW5jZSB0aGlzIG1ha2VzIGVzY2FwaW5nIHZlcnkgZGlmZmljdWx0LlxyXG4gICAqL1xyXG4gIHZhbHVlOiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlkZW50aWZpZXIgaXMgdGhlIFwicHJlZmVycmVkXCIgaWRlbnRpZmllciBvZiB0aGlzIHR5cGUuXHJcbiAgICovXHJcbiAgcHJlZmVycmVkPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBlLmcuIFwibXVzdCBiZSB1c2VkIGluIEdlcm1hbnlcIiBvciBcIndhcyBpbml0aWFsbHkgcHVibGlzaGVkIGluIGVycm9yIHdpdGggdGhpcyB2YWx1ZVwiLlxyXG4gICAqL1xyXG4gIGNvbW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaXRoaW4gYSByZWdpc3RyeSwgYSBnaXZlbiBpZGVudGlmaWVyIHNob3VsZCBvbmx5IGJlIFwiYWN0aXZlXCIgZm9yIGEgc2luZ2xlIG5hbWVzcGFjZSBhdCBhIHRpbWUuICAoSWRlYWxseSwgYW4gaWRlbnRpZmllciBzaG91bGQgb25seSBldmVyIGJlIGFzc29jaWF0ZWQgd2l0aCBhIHNpbmdsZSBuYW1lc3BhY2UgYWNyb3NzIGFsbCB0aW1lKS5cclxuICAgKi9cclxuICBwZXJpb2Q/OiBmaGlyLlBlcmlvZEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbGUgaWRlbnRpZmllcnMgbWF5IGV4aXN0LCBlaXRoZXIgZHVlIHRvIGR1cGxpY2F0ZSByZWdpc3RyYXRpb24sIHJlZ2lvbmFsIHJ1bGVzLCBuZWVkcyBvZiBkaWZmZXJlbnQgY29tbXVuaWNhdGlvbiB0ZWNobm9sb2dpZXMsIGV0Yy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOYW1pbmdTeXN0ZW1VbmlxdWVJZCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ05hbWluZ1N5c3RlbVVuaXF1ZUlkJztcclxuICAvKipcclxuICAgKiBEaWZmZXJlbnQgaWRlbnRpZmllciB0eXBlcyBtYXkgYmUgdXNlZCBpbiBkaWZmZXJlbnQgdHlwZXMgb2YgY29tbXVuaWNhdGlvbnMgKE9JRHMgZm9yIHYzLCBVUklzIGZvciBGSElSLCBldGMuKS4gIE90aGVyIGluY2x1ZGVzIFJVSURzIGZyb20gdjMsIHN0YW5kYXJkIHYyIGNvZGUgbmFtZSBzdHJpbmdzLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuRmhpckNvZGU8TmFtaW5nc3lzdGVtSWRlbnRpZmllclR5cGVDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBJZiB0aGUgdmFsdWUgaXMgYSBVUkkgaW50ZW5kZWQgZm9yIHVzZSBhcyBGSElSIHN5c3RlbSBpZGVudGlmaWVyLCB0aGUgVVJJIHNob3VsZCBub3QgY29udGFpbiBcIlxcXCIgb3IgXCI/XCIgb3IgXCIsXCIgc2luY2UgdGhpcyBtYWtlcyBlc2NhcGluZyB2ZXJ5IGRpZmZpY3VsdC5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoaXMgaWRlbnRpZmllciBpcyB0aGUgXCJwcmVmZXJyZWRcIiBpZGVudGlmaWVyIG9mIHRoaXMgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgcHJlZmVycmVkPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogZS5nLiBcIm11c3QgYmUgdXNlZCBpbiBHZXJtYW55XCIgb3IgXCJ3YXMgaW5pdGlhbGx5IHB1Ymxpc2hlZCBpbiBlcnJvciB3aXRoIHRoaXMgdmFsdWVcIi5cclxuICAgKi9cclxuICBwdWJsaWMgY29tbWVudD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2l0aGluIGEgcmVnaXN0cnksIGEgZ2l2ZW4gaWRlbnRpZmllciBzaG91bGQgb25seSBiZSBcImFjdGl2ZVwiIGZvciBhIHNpbmdsZSBuYW1lc3BhY2UgYXQgYSB0aW1lLiAgKElkZWFsbHksIGFuIGlkZW50aWZpZXIgc2hvdWxkIG9ubHkgZXZlciBiZSBhc3NvY2lhdGVkIHdpdGggYSBzaW5nbGUgbmFtZXNwYWNlIGFjcm9zcyBhbGwgdGltZSkuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZD86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBOYW1pbmdTeXN0ZW1VbmlxdWVJZCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE5hbWluZ1N5c3RlbVVuaXF1ZUlkQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZTxOYW1pbmdzeXN0ZW1JZGVudGlmaWVyVHlwZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS50eXBlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZSddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnZhbHVlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnZhbHVlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJlZmVycmVkJ10pIHsgdGhpcy5wcmVmZXJyZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5wcmVmZXJyZWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tbWVudCddKSB7IHRoaXMuY29tbWVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuY29tbWVudH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydwZXJpb2QnXSkgeyB0aGlzLnBlcmlvZCA9IG5ldyBmaGlyLlBlcmlvZChzb3VyY2UucGVyaW9kKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXF1aXJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIHR5cGUgKE5hbWluZ1N5c3RlbS51bmlxdWVJZC50eXBlKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHR5cGVSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIE5hbWluZ3N5c3RlbUlkZW50aWZpZXJUeXBlQ29kZXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ3R5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdHlwZTpmaGlyLkZoaXJDb2RlPE5hbWluZ3N5c3RlbUlkZW50aWZpZXJUeXBlQ29kZVR5cGU+IGZoaXI6IE5hbWluZ1N5c3RlbS51bmlxdWVJZC50eXBlOmNvZGUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ3R5cGUnXSAmJiAoIU9iamVjdC52YWx1ZXMoTmFtaW5nc3lzdGVtSWRlbnRpZmllclR5cGVDb2RlcykuaW5jbHVkZXModGhpcy50eXBlIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ0ludmFsaWQgY29kZSBwcm9wZXJ0eSB0eXBlOmZoaXIuRmhpckNvZGU8TmFtaW5nc3lzdGVtSWRlbnRpZmllclR5cGVDb2RlVHlwZT4gZmhpcjogTmFtaW5nU3lzdGVtLnVuaXF1ZUlkLnR5cGU6Y29kZSBSZXF1aXJlZCBiaW5kaW5nIHRvOiBOYW1pbmdzeXN0ZW1JZGVudGlmaWVyVHlwZScgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ3ZhbHVlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHZhbHVlOmZoaXIuRmhpclN0cmluZyBmaGlyOiBOYW1pbmdTeXN0ZW0udW5pcXVlSWQudmFsdWU6c3RyaW5nJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widmFsdWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy52YWx1ZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwcmVmZXJyZWRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wcmVmZXJyZWQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY29tbWVudFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvbW1lbnQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicGVyaW9kXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucGVyaW9kLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTmFtaW5nU3lzdGVtIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5hbWluZ1N5c3RlbUFyZ3MgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlQXJncyB7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIk5hbWluZ1N5c3RlbVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBpcyBub3QgZXhwZWN0ZWQgdG8gYmUgZ2xvYmFsbHkgdW5pcXVlLiBUaGUgbmFtZSBzaG91bGQgYmUgYSBzaW1wbGUgYWxwaGFudW1lcmljIHR5cGUgbmFtZSB0byBlbnN1cmUgdGhhdCBpdCBpcyBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkuVGhlXCJzeW1ib2xpYyBuYW1lXCIgZm9yIGFuIE9JRCB3b3VsZCBiZSBjYXB0dXJlZCBhcyBhbiBleHRlbnNpb24uXHJcbiAgICovXHJcbiAgbmFtZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiBuYW1pbmcgc3lzdGVtcyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSBwdXJwb3NlIGZvciB0aGUgbmFtaW5nIHN5c3RlbSAtIHdoYXQga2luZHMgb2YgdGhpbmdzIGRvZXMgaXQgbWFrZSB1bmlxdWU/XHJcbiAgICovXHJcbiAga2luZDogZmhpci5GaGlyQ29kZTxOYW1pbmdzeXN0ZW1UeXBlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSByZXNvdXJjZSBsYXN0LW1vZGlmaWVkLWRhdGUsIHNpbmNlIHRoZSByZXNvdXJjZSBtYXkgYmUgYSBzZWNvbmRhcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIG5hbWluZyBzeXN0ZW0uIEFkZGl0aW9uYWwgc3BlY2lmaWMgZGF0ZXMgbWF5IGJlIGFkZGVkIGFzIGV4dGVuc2lvbnMgb3IgYmUgZm91bmQgYnkgY29uc3VsdGluZyBQcm92ZW5hbmNlcyBhc3NvY2lhdGVkIHdpdGggcGFzdCB2ZXJzaW9ucyBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgZGF0ZTogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc3VhbGx5IGFuIG9yZ2FuaXphdGlvbiBidXQgbWF5IGJlIGFuIGluZGl2aWR1YWwuIFRoZSBwdWJsaXNoZXIgKG9yIHN0ZXdhcmQpIG9mIHRoZSBuYW1pbmcgc3lzdGVtIGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSBuYW1pbmcgc3lzdGVtLiBUaGlzIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBpbmRpdmlkdWFsIG9yIG9yZ2FuaXphdGlvbiB0aGF0IGRldmVsb3BlZCBhbmQgaW5pdGlhbGx5IGF1dGhvcmVkIHRoZSBjb250ZW50LiBUaGUgcHVibGlzaGVyIGlzIHRoZSBwcmltYXJ5IHBvaW50IG9mIGNvbnRhY3QgZm9yIHF1ZXN0aW9ucyBvciBpc3N1ZXMgd2l0aCB0aGUgbmFtaW5nIHN5c3RlbS4gVGhpcyBpdGVtIFNIT1VMRCBiZSBwb3B1bGF0ZWQgdW5sZXNzIHRoZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgZnJvbSBjb250ZXh0LlxyXG4gICAqL1xyXG4gIHB1Ymxpc2hlcj86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1heSBiZSBhIHdlYiBzaXRlLCBhbiBlbWFpbCBhZGRyZXNzLCBhIHRlbGVwaG9uZSBudW1iZXIsIGV0Yy5cclxuICAgKi9cclxuICBjb250YWN0PzogZmhpci5Db250YWN0RGV0YWlsQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGlzIHRoZSBwcmltYXJ5IG9yZ2FuaXphdGlvbi4gIFJlc3BvbnNpYmlsaXR5IGZvciBzb21lIGFzcGVjdHMgb2YgYSBuYW1lc3BhY2UgbWF5IGJlIGRlbGVnYXRlZC5cclxuICAgKi9cclxuICByZXNwb25zaWJsZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgd2lsbCBtb3N0IGNvbW1vbmx5IGJlIHVzZWQgZm9yIGlkZW50aWZpZXIgbmFtZXNwYWNlcywgYnV0IGNhdGVnb3JpZXMgY291bGQgcG90ZW50aWFsbHkgYmUgdXNlZnVsIGZvciBjb2RlIHN5c3RlbXMgYW5kIGF1dGhvcml0aWVzIGFzIHdlbGwuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBkZXNjcmlwdGlvbiBjYW4gYmUgdXNlZCB0byBjYXB0dXJlIGRldGFpbHMgc3VjaCBhcyB3aHkgdGhlIG5hbWluZyBzeXN0ZW0gd2FzIGJ1aWx0LCBjb21tZW50cyBhYm91dCBtaXN1c2UsIGluc3RydWN0aW9ucyBmb3IgY2xpbmljYWwgdXNlIGFuZCBpbnRlcnByZXRhdGlvbiwgbGl0ZXJhdHVyZSByZWZlcmVuY2VzLCBleGFtcGxlcyBmcm9tIHRoZSBwYXBlciB3b3JsZCwgZXRjLiBJdCBpcyBub3QgYSByZW5kZXJpbmcgb2YgdGhlIG5hbWluZyBzeXN0ZW0gYXMgY29udmV5ZWQgaW4gdGhlICd0ZXh0JyBmaWVsZCBvZiB0aGUgcmVzb3VyY2UgaXRzZWxmLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQgKGUuZy4gdGhlIGxhbmd1YWdlIG9mIHRoZSBuYW1pbmcgc3lzdGVtIGlzIHByZXN1bWVkIHRvIGJlIHRoZSBwcmVkb21pbmFudCBsYW5ndWFnZSBpbiB0aGUgcGxhY2UgdGhlIG5hbWluZyBzeXN0ZW0gd2FzIGNyZWF0ZWQpLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIG11bHRpcGxlIHVzZUNvbnRleHRzIGFyZSBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIGV4cGVjdGF0aW9uIHRoYXQgYWxsIG9yIGFueSBvZiB0aGUgY29udGV4dHMgYXBwbHkuXHJcbiAgICovXHJcbiAgdXNlQ29udGV4dD86IGZoaXIuVXNhZ2VDb250ZXh0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJdCBtYXkgYmUgcG9zc2libGUgZm9yIHRoZSBuYW1pbmcgc3lzdGVtIHRvIGJlIHVzZWQgaW4ganVyaXNkaWN0aW9ucyBvdGhlciB0aGFuIHRob3NlIGZvciB3aGljaCBpdCB3YXMgb3JpZ2luYWxseSBkZXNpZ25lZCBvciBpbnRlbmRlZC5cclxuICAgKi9cclxuICBqdXJpc2RpY3Rpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgZ3VpZGFuY2Ugb24gdGhlIHVzZSBvZiB0aGUgbmFtZXNwYWNlLCBpbmNsdWRpbmcgdGhlIGhhbmRsaW5nIG9mIGZvcm1hdHRpbmcgY2hhcmFjdGVycywgdXNlIG9mIHVwcGVyIHZzLiBsb3dlciBjYXNlLCBldGMuXHJcbiAgICovXHJcbiAgdXNhZ2U/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNdWx0aXBsZSBpZGVudGlmaWVycyBtYXkgZXhpc3QsIGVpdGhlciBkdWUgdG8gZHVwbGljYXRlIHJlZ2lzdHJhdGlvbiwgcmVnaW9uYWwgcnVsZXMsIG5lZWRzIG9mIGRpZmZlcmVudCBjb21tdW5pY2F0aW9uIHRlY2hub2xvZ2llcywgZXRjLlxyXG4gICAqL1xyXG4gIHVuaXF1ZUlkOiBmaGlyLk5hbWluZ1N5c3RlbVVuaXF1ZUlkQXJnc1tdfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGN1cmF0ZWQgbmFtZXNwYWNlIHRoYXQgaXNzdWVzIHVuaXF1ZSBzeW1ib2xzIHdpdGhpbiB0aGF0IG5hbWVzcGFjZSBmb3IgdGhlIGlkZW50aWZpY2F0aW9uIG9mIGNvbmNlcHRzLCBwZW9wbGUsIGRldmljZXMsIGV0Yy4gIFJlcHJlc2VudHMgYSBcIlN5c3RlbVwiIHVzZWQgd2l0aGluIHRoZSBJZGVudGlmaWVyIGFuZCBDb2RpbmcgZGF0YSB0eXBlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOYW1pbmdTeXN0ZW0gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ05hbWluZ1N5c3RlbSc7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJOYW1pbmdTeXN0ZW1cIjtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBpcyBub3QgZXhwZWN0ZWQgdG8gYmUgZ2xvYmFsbHkgdW5pcXVlLiBUaGUgbmFtZSBzaG91bGQgYmUgYSBzaW1wbGUgYWxwaGFudW1lcmljIHR5cGUgbmFtZSB0byBlbnN1cmUgdGhhdCBpdCBpcyBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkuVGhlXCJzeW1ib2xpYyBuYW1lXCIgZm9yIGFuIE9JRCB3b3VsZCBiZSBjYXB0dXJlZCBhcyBhbiBleHRlbnNpb24uXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2YgbmFtaW5nIHN5c3RlbXMgdGhhdCBhcmUgYXBwcm9wcmlhdGUgZm9yIHVzZSB2ZXJzdXMgbm90LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM6IGZoaXIuRmhpckNvZGU8UHVibGljYXRpb25TdGF0dXNDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIHB1cnBvc2UgZm9yIHRoZSBuYW1pbmcgc3lzdGVtIC0gd2hhdCBraW5kcyBvZiB0aGluZ3MgZG9lcyBpdCBtYWtlIHVuaXF1ZT9cclxuICAgKi9cclxuICBwdWJsaWMga2luZDogZmhpci5GaGlyQ29kZTxOYW1pbmdzeXN0ZW1UeXBlQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSByZXNvdXJjZSBsYXN0LW1vZGlmaWVkLWRhdGUsIHNpbmNlIHRoZSByZXNvdXJjZSBtYXkgYmUgYSBzZWNvbmRhcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIG5hbWluZyBzeXN0ZW0uIEFkZGl0aW9uYWwgc3BlY2lmaWMgZGF0ZXMgbWF5IGJlIGFkZGVkIGFzIGV4dGVuc2lvbnMgb3IgYmUgZm91bmQgYnkgY29uc3VsdGluZyBQcm92ZW5hbmNlcyBhc3NvY2lhdGVkIHdpdGggcGFzdCB2ZXJzaW9ucyBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgcHVibGljIGRhdGU6IGZoaXIuRmhpckRhdGVUaW1lfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVXN1YWxseSBhbiBvcmdhbml6YXRpb24gYnV0IG1heSBiZSBhbiBpbmRpdmlkdWFsLiBUaGUgcHVibGlzaGVyIChvciBzdGV3YXJkKSBvZiB0aGUgbmFtaW5nIHN5c3RlbSBpcyB0aGUgb3JnYW5pemF0aW9uIG9yIGluZGl2aWR1YWwgcHJpbWFyaWx5IHJlc3BvbnNpYmxlIGZvciB0aGUgbWFpbnRlbmFuY2UgYW5kIHVwa2VlcCBvZiB0aGUgbmFtaW5nIHN5c3RlbS4gVGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgaW5kaXZpZHVhbCBvciBvcmdhbml6YXRpb24gdGhhdCBkZXZlbG9wZWQgYW5kIGluaXRpYWxseSBhdXRob3JlZCB0aGUgY29udGVudC4gVGhlIHB1Ymxpc2hlciBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBjb250YWN0IGZvciBxdWVzdGlvbnMgb3IgaXNzdWVzIHdpdGggdGhlIG5hbWluZyBzeXN0ZW0uIFRoaXMgaXRlbSBTSE9VTEQgYmUgcG9wdWxhdGVkIHVubGVzcyB0aGUgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIGZyb20gY29udGV4dC5cclxuICAgKi9cclxuICBwdWJsaWMgcHVibGlzaGVyPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXkgYmUgYSB3ZWIgc2l0ZSwgYW4gZW1haWwgYWRkcmVzcywgYSB0ZWxlcGhvbmUgbnVtYmVyLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhY3Q6IGZoaXIuQ29udGFjdERldGFpbFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgdGhlIHByaW1hcnkgb3JnYW5pemF0aW9uLiAgUmVzcG9uc2liaWxpdHkgZm9yIHNvbWUgYXNwZWN0cyBvZiBhIG5hbWVzcGFjZSBtYXkgYmUgZGVsZWdhdGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNwb25zaWJsZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyB3aWxsIG1vc3QgY29tbW9ubHkgYmUgdXNlZCBmb3IgaWRlbnRpZmllciBuYW1lc3BhY2VzLCBidXQgY2F0ZWdvcmllcyBjb3VsZCBwb3RlbnRpYWxseSBiZSB1c2VmdWwgZm9yIGNvZGUgc3lzdGVtcyBhbmQgYXV0aG9yaXRpZXMgYXMgd2VsbC5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGRlc2NyaXB0aW9uIGNhbiBiZSB1c2VkIHRvIGNhcHR1cmUgZGV0YWlscyBzdWNoIGFzIHdoeSB0aGUgbmFtaW5nIHN5c3RlbSB3YXMgYnVpbHQsIGNvbW1lbnRzIGFib3V0IG1pc3VzZSwgaW5zdHJ1Y3Rpb25zIGZvciBjbGluaWNhbCB1c2UgYW5kIGludGVycHJldGF0aW9uLCBsaXRlcmF0dXJlIHJlZmVyZW5jZXMsIGV4YW1wbGVzIGZyb20gdGhlIHBhcGVyIHdvcmxkLCBldGMuIEl0IGlzIG5vdCBhIHJlbmRlcmluZyBvZiB0aGUgbmFtaW5nIHN5c3RlbSBhcyBjb252ZXllZCBpbiB0aGUgJ3RleHQnIGZpZWxkIG9mIHRoZSByZXNvdXJjZSBpdHNlbGYuIFRoaXMgaXRlbSBTSE9VTEQgYmUgcG9wdWxhdGVkIHVubGVzcyB0aGUgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIGZyb20gY29udGV4dCAoZS5nLiB0aGUgbGFuZ3VhZ2Ugb2YgdGhlIG5hbWluZyBzeXN0ZW0gaXMgcHJlc3VtZWQgdG8gYmUgdGhlIHByZWRvbWluYW50IGxhbmd1YWdlIGluIHRoZSBwbGFjZSB0aGUgbmFtaW5nIHN5c3RlbSB3YXMgY3JlYXRlZCkuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gbXVsdGlwbGUgdXNlQ29udGV4dHMgYXJlIHNwZWNpZmllZCwgdGhlcmUgaXMgbm8gZXhwZWN0YXRpb24gdGhhdCBhbGwgb3IgYW55IG9mIHRoZSBjb250ZXh0cyBhcHBseS5cclxuICAgKi9cclxuICBwdWJsaWMgdXNlQ29udGV4dDogZmhpci5Vc2FnZUNvbnRleHRbXTtcclxuICAvKipcclxuICAgKiBJdCBtYXkgYmUgcG9zc2libGUgZm9yIHRoZSBuYW1pbmcgc3lzdGVtIHRvIGJlIHVzZWQgaW4ganVyaXNkaWN0aW9ucyBvdGhlciB0aGFuIHRob3NlIGZvciB3aGljaCBpdCB3YXMgb3JpZ2luYWxseSBkZXNpZ25lZCBvciBpbnRlbmRlZC5cclxuICAgKi9cclxuICBwdWJsaWMganVyaXNkaWN0aW9uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFByb3ZpZGVzIGd1aWRhbmNlIG9uIHRoZSB1c2Ugb2YgdGhlIG5hbWVzcGFjZSwgaW5jbHVkaW5nIHRoZSBoYW5kbGluZyBvZiBmb3JtYXR0aW5nIGNoYXJhY3RlcnMsIHVzZSBvZiB1cHBlciB2cy4gbG93ZXIgY2FzZSwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1c2FnZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTXVsdGlwbGUgaWRlbnRpZmllcnMgbWF5IGV4aXN0LCBlaXRoZXIgZHVlIHRvIGR1cGxpY2F0ZSByZWdpc3RyYXRpb24sIHJlZ2lvbmFsIHJ1bGVzLCBuZWVkcyBvZiBkaWZmZXJlbnQgY29tbXVuaWNhdGlvbiB0ZWNobm9sb2dpZXMsIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgdW5pcXVlSWQ6IGZoaXIuTmFtaW5nU3lzdGVtVW5pcXVlSWRbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBOYW1pbmdTeXN0ZW0gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxOYW1pbmdTeXN0ZW1BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnTmFtaW5nU3lzdGVtJztcclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubmFtZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXR1cyddKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8UHVibGljYXRpb25TdGF0dXNDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2Uuc3RhdHVzfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2tpbmQnXSkgeyB0aGlzLmtpbmQgPSBuZXcgZmhpci5GaGlyQ29kZTxOYW1pbmdzeXN0ZW1UeXBlQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLmtpbmR9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMua2luZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGUnXSkgeyB0aGlzLmRhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UuZGF0ZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kYXRlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHVibGlzaGVyJ10pIHsgdGhpcy5wdWJsaXNoZXIgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnB1Ymxpc2hlcn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydjb250YWN0J10pIHsgdGhpcy5jb250YWN0ID0gc291cmNlLmNvbnRhY3QubWFwKCh4KSA9PiBuZXcgZmhpci5Db250YWN0RGV0YWlsKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY29udGFjdCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXNwb25zaWJsZSddKSB7IHRoaXMucmVzcG9uc2libGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnJlc3BvbnNpYmxlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXNjcmlwdGlvbiddKSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UuZGVzY3JpcHRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndXNlQ29udGV4dCddKSB7IHRoaXMudXNlQ29udGV4dCA9IHNvdXJjZS51c2VDb250ZXh0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuVXNhZ2VDb250ZXh0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudXNlQ29udGV4dCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydqdXJpc2RpY3Rpb24nXSkgeyB0aGlzLmp1cmlzZGljdGlvbiA9IHNvdXJjZS5qdXJpc2RpY3Rpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5qdXJpc2RpY3Rpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndXNhZ2UnXSkgeyB0aGlzLnVzYWdlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS51c2FnZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWyd1bmlxdWVJZCddKSB7IHRoaXMudW5pcXVlSWQgPSBzb3VyY2UudW5pcXVlSWQubWFwKCh4KSA9PiBuZXcgZmhpci5OYW1pbmdTeXN0ZW1VbmlxdWVJZCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVuaXF1ZUlkID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBzdGF0dXMgKE5hbWluZ1N5c3RlbS5zdGF0dXMpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXQgc3RhdHVzUmVxdWlyZWRDb2RlcygpIHtcclxuICAgIHJldHVybiBQdWJsaWNhdGlvblN0YXR1c0NvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXF1aXJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIGtpbmQgKE5hbWluZ1N5c3RlbS5raW5kKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IGtpbmRSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIE5hbWluZ3N5c3RlbVR5cGVDb2RlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5zaWJsZS1ib3VuZCBWYWx1ZSBTZXQgZm9yIHR5cGUgKE5hbWluZ1N5c3RlbS50eXBlKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHR5cGVFeHRlbnNpYmxlQ29kaW5ncygpOklkZW50aWZpZXJUeXBlQ29kaW5nVHlwZSB7XHJcbiAgICByZXR1cm4gSWRlbnRpZmllclR5cGVDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydyZXNvdXJjZVR5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcmVzb3VyY2VUeXBlOlwiTmFtaW5nU3lzdGVtXCIgZmhpcjogTmFtaW5nU3lzdGVtLnJlc291cmNlVHlwZTpcIk5hbWluZ1N5c3RlbVwiJyB9KTtcclxuICAgIH1cclxuICAgIGlmICghdGhpc1snbmFtZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBuYW1lOmZoaXIuRmhpclN0cmluZyBmaGlyOiBOYW1pbmdTeXN0ZW0ubmFtZTpzdHJpbmcnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJuYW1lXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubmFtZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydzdGF0dXMnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgc3RhdHVzOmZoaXIuRmhpckNvZGU8UHVibGljYXRpb25TdGF0dXNDb2RlVHlwZT4gZmhpcjogTmFtaW5nU3lzdGVtLnN0YXR1czpjb2RlJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzWydzdGF0dXMnXSAmJiAoIU9iamVjdC52YWx1ZXMoUHVibGljYXRpb25TdGF0dXNDb2RlcykuaW5jbHVkZXModGhpcy5zdGF0dXMgYXMgYW55KSkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ2NvZGUtaW52YWxpZCcsIGRpYWdub3N0aWNzOiAnSW52YWxpZCBjb2RlIHByb3BlcnR5IHN0YXR1czpmaGlyLkZoaXJDb2RlPFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGU+IGZoaXI6IE5hbWluZ1N5c3RlbS5zdGF0dXM6Y29kZSBSZXF1aXJlZCBiaW5kaW5nIHRvOiBQdWJsaWNhdGlvblN0YXR1cycgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInN0YXR1c1wiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnN0YXR1cy5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydraW5kJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGtpbmQ6Zmhpci5GaGlyQ29kZTxOYW1pbmdzeXN0ZW1UeXBlQ29kZVR5cGU+IGZoaXI6IE5hbWluZ1N5c3RlbS5raW5kOmNvZGUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ2tpbmQnXSAmJiAoIU9iamVjdC52YWx1ZXMoTmFtaW5nc3lzdGVtVHlwZUNvZGVzKS5pbmNsdWRlcyh0aGlzLmtpbmQgYXMgYW55KSkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ2NvZGUtaW52YWxpZCcsIGRpYWdub3N0aWNzOiAnSW52YWxpZCBjb2RlIHByb3BlcnR5IGtpbmQ6Zmhpci5GaGlyQ29kZTxOYW1pbmdzeXN0ZW1UeXBlQ29kZVR5cGU+IGZoaXI6IE5hbWluZ1N5c3RlbS5raW5kOmNvZGUgUmVxdWlyZWQgYmluZGluZyB0bzogTmFtaW5nc3lzdGVtVHlwZScgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImtpbmRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5raW5kLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ2RhdGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgZGF0ZTpmaGlyLkZoaXJEYXRlVGltZSBmaGlyOiBOYW1pbmdTeXN0ZW0uZGF0ZTpkYXRlVGltZScgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImRhdGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kYXRlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInB1Ymxpc2hlclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnB1Ymxpc2hlci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb250YWN0XCJdKSB7IHRoaXMuY29udGFjdC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicmVzcG9uc2libGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5yZXNwb25zaWJsZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNjcmlwdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRlc2NyaXB0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInVzZUNvbnRleHRcIl0pIHsgdGhpcy51c2VDb250ZXh0LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJqdXJpc2RpY3Rpb25cIl0pIHsgdGhpcy5qdXJpc2RpY3Rpb24uZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInVzYWdlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudXNhZ2UuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1sndW5pcXVlSWQnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdW5pcXVlSWQ6Zmhpci5OYW1pbmdTeXN0ZW1VbmlxdWVJZFtdIGZoaXI6IE5hbWluZ1N5c3RlbS51bmlxdWVJZDp1bmlxdWVJZCcgfSk7XHJcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudW5pcXVlSWQpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdzdHJ1Y3R1cmUnLCBkaWFnbm9zdGljczogJ0ZvdW5kIHNjYWxhciBpbiBhcnJheSBwcm9wZXJ0eSB1bmlxdWVJZDpmaGlyLk5hbWluZ1N5c3RlbVVuaXF1ZUlkW10gZmhpcjogTmFtaW5nU3lzdGVtLnVuaXF1ZUlkOnVuaXF1ZUlkJyB9KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy51bmlxdWVJZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHVuaXF1ZUlkOmZoaXIuTmFtaW5nU3lzdGVtVW5pcXVlSWRbXSBmaGlyOiBOYW1pbmdTeXN0ZW0udW5pcXVlSWQ6dW5pcXVlSWQnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ1bmlxdWVJZFwiXSkgeyB0aGlzLnVuaXF1ZUlkLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19