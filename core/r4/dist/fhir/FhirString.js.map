{"version":3,"file":"FhirString.js","sources":["../../src/fhir/FhirString.ts"],"sourcesContent":["// Minimum TypeScript Version: 3.7\r\n// FHIR Primitive: string\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n\r\n/**\r\n * Note that FHIR strings SHALL NOT exceed 1MB in size\r\n */\r\nexport interface FhirStringArgs extends fhir.FhirPrimitiveArgs {\r\n  /**\r\n   * Note that FHIR strings SHALL NOT exceed 1MB in size\r\n   */\r\n  value?:FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * Note that FHIR strings SHALL NOT exceed 1MB in size\r\n */\r\nexport class FhirString extends fhir.FhirPrimitive {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'String';\r\n  /**\r\n   * Mapping of this datatype to a JSON equivalent\r\n   */\r\n  public static readonly _fts_jsonType:string = 'string';\r\n  // published regex: [ \\r\\n\\t\\S]+\r\n  public static readonly _fts_regex:RegExp = /^[ \\r\\n\\t\\S]+$/\r\n  /**\r\n   * A string value, represented as a JS string\r\n   */\r\n  declare value?:string|null|undefined;\r\n  /**\r\n     * Create a FhirString\r\n     * @param value Note that FHIR strings SHALL NOT exceed 1MB in size\r\n     * @param id Unique id for inter-element referencing (uncommon on primitives)\r\n     * @param extension Additional content defined by implementations\r\n     * @param options Options to pass to extension constructors\r\n  */\r\n  constructor(source:Partial<FhirStringArgs> = {}, options:fhir.FhirConstructorOptions = { } ) {\r\n    super(source, options);\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if ((this.value) && (!FhirString._fts_regex.test(this.value))) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.InvalidContent,  diagnostics: \"Invalid value in primitive type string\", }));\r\n    }\r\n    return outcome;\r\n  }\r\n  /**\r\n   * Returns a string representation of a string.\r\n   */\r\n  public toString():string { return (this.value ?? '').toString(); }\r\n  /**\r\n   * Returns the character at the specified index.\r\n   * @param pos The zero-based index of the desired character.\r\n   */\r\n  public charAt(pos: number):string { return (this.value ?? '').charAt(pos); }\r\n  /**\r\n   * Returns the Unicode value of the character at the specified location.\r\n   * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\r\n   */\r\n  public charCodeAt(index: number):number { return (this.value ?? '').charCodeAt(index); }\r\n  /**\r\n   * Returns a string that contains the concatenation of two or more strings.\r\n   * @param strings The strings to append to the end of the string.\r\n   */\r\n  public concat(...strings: string[]):string { return (this.value ?? '').concat(...strings); }\r\n  /**\r\n   * Returns the position of the first occurrence of a substring.\r\n   * @param searchString The substring to search for in the string\r\n   * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n   */\r\n  public indexOf(searchString: string, position?: number):number { return (this.value ?? '').indexOf(searchString, position); }\r\n  /**\r\n   * Returns the last occurrence of a substring in the string.\r\n   * @param searchString The substring to search for.\r\n   * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\r\n   */\r\n  public lastIndexOf(searchString: string, position?: number):number { return (this.value ?? '').lastIndexOf(searchString, position); }\r\n  /**\r\n   * Determines whether two strings are equivalent in the current locale.\r\n   * @param that String to compare to target string\r\n   */\r\n  public localeCompare(that: string):number { return (this.value ?? '').localeCompare(that); }\r\n  /**\r\n   * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n   * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n   */\r\n  public match(regexp: string|RegExp):RegExpMatchArray|null { return (this.value ?? '').match(regexp); }\r\n  /**\r\n   * Replaces text in a string, using a regular expression or search string.\r\n   * @param searchValue A string to search for.\r\n   * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n   */\r\n  public replace(searchValue:string|RegExp, replaceValue:string):string { return (this.value ?? '').replace(searchValue, replaceValue); }\r\n  /**\r\n   * Finds the first substring match in a regular expression search.\r\n   * @param regexp The regular expression pattern and applicable flags.\r\n   */\r\n  public search(regexp:string|RegExp):number { return (this.value ?? '').search(regexp); }\r\n  /**\r\n   * Returns a section of a string.\r\n   * @param start The index to the beginning of the specified portion of stringObj.\r\n   * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\r\n   * If this value is not specified, the substring continues to the end of stringObj.\r\n   */\r\n  public slice(start?:number, end?:number):string { return (this.value ?? '').slice(start, end); }\r\n  /**\r\n   * Split a string into substrings using the specified separator and return them as an array.\r\n   * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\r\n   * @param limit A value used to limit the number of elements returned in the array.\r\n   */\r\n  public split(separator:string|RegExp, limit?:number):string[] { return (this.value ?? '').split(separator, limit); }\r\n  /**\r\n   * Returns the substring at the specified location within a String object.\r\n   * @param start The zero-based index number indicating the beginning of the substring.\r\n   * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\n   * If end is omitted, the characters from start through the end of the original string are returned.\r\n   */\r\n  public substring(start:number, end?:number):string { return (this.value ?? '').substring(start, end); }\r\n  /**\r\n   * Converts all the alphabetic characters in a string to lowercase.\r\n   */\r\n  public toLowerCase():string { return (this.value ?? '').toLowerCase(); }\r\n  /**\r\n   * Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.\r\n   */\r\n  public toLocaleLowerCase(locales?:string|string[]):string { return (this.value ?? '').toLocaleLowerCase(locales); }\r\n  /**\r\n   * Converts all the alphabetic characters in a string to uppercase.\r\n   */\r\n  public toUpperCase():string { return (this.value ?? '').toUpperCase(); }\r\n  /**\r\n   * Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.\r\n   */\r\n  public toLocaleUpperCase(locales?:string|string[]):string { return (this.value ?? '').toLocaleUpperCase(locales); }\r\n  /**\r\n   * Removes the leading and trailing white space and line terminator characters from a string.\r\n   */\r\n  public trim():string { return (this.value ?? '').trim(); }\r\n  /**\r\n   * Returns the length of a String object.\r\n   */\r\n  public get length():number { return this.value?.length ?? 0 };\r\n  /**\r\n   * Returns the primitive value of the specified object.\r\n   */\r\n  public valueOf():string { return this.value ?? ''; }\r\n}\r\n"],"names":["fhir.OperationOutcomeIssue","fhir.FhirPrimitive"],"mappings":"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"}