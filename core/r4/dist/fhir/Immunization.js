// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization
import * as fhir from '../fhir.js';
// @ts-ignore
import { ImmunizationFunctionCodings, } from '../fhirValueSets/ImmunizationFunctionCodings.js';
// @ts-ignore
import { ImmunizationStatusCodings, } from '../fhirValueSets/ImmunizationStatusCodings.js';
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Extensible-bound Value Set for function (Immunization.performer.function)
     */
    static functionExtensibleCoding() {
        return ImmunizationFunctionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["function"]) {
            issues.push(...this.function.doModelValidation());
        }
        if (!this['actor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actor:fhir.Reference fhir: Immunization.performer.actor:Reference', });
        }
        if (this["actor"]) {
            issues.push(...this.actor.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationPerformer._fts_dataType = 'ImmunizationPerformer';
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['documentType']) {
            this.documentType = new fhir.FhirString({ value: source.documentType });
        }
        if (source['reference']) {
            this.reference = new fhir.FhirUri({ value: source.reference });
        }
        if (source['publicationDate']) {
            this.publicationDate = new fhir.FhirDateTime({ value: source.publicationDate });
        }
        if (source['presentationDate']) {
            this.presentationDate = new fhir.FhirDateTime({ value: source.presentationDate });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["documentType"]) {
            issues.push(...this.documentType.doModelValidation());
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation());
        }
        if (this["publicationDate"]) {
            issues.push(...this.publicationDate.doModelValidation());
        }
        if (this["presentationDate"]) {
            issues.push(...this.presentationDate.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationEducation._fts_dataType = 'ImmunizationEducation';
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['detail']) {
            this.detail = new fhir.Reference(source.detail);
        }
        if (source['reported']) {
            this.reported = new fhir.FhirBoolean({ value: source.reported });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["detail"]) {
            issues.push(...this.detail.doModelValidation());
        }
        if (this["reported"]) {
            issues.push(...this.reported.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationReaction._fts_dataType = 'ImmunizationReaction';
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['series']) {
            this.series = new fhir.FhirString({ value: source.series });
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source['targetDisease']) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.targetDisease = [];
        }
        if (source['doseNumber']) {
            this.doseNumber = source.doseNumber;
        }
        else if (source['doseNumberPositiveInt']) {
            this.doseNumber = new fhir.FhirPositiveInt({ value: source.doseNumberPositiveInt });
        }
        else if (source['doseNumberString']) {
            this.doseNumber = new fhir.FhirString({ value: source.doseNumberString });
        }
        else {
            this.doseNumber = null;
        }
        if (source['seriesDoses']) {
            this.seriesDoses = source.seriesDoses;
        }
        else if (source['seriesDosesPositiveInt']) {
            this.seriesDoses = new fhir.FhirPositiveInt({ value: source.seriesDosesPositiveInt });
        }
        else if (source['seriesDosesString']) {
            this.seriesDoses = new fhir.FhirString({ value: source.seriesDosesString });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["series"]) {
            issues.push(...this.series.doModelValidation());
        }
        if (this["authority"]) {
            issues.push(...this.authority.doModelValidation());
        }
        if (this["targetDisease"]) {
            this.targetDisease.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['doseNumber']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property doseNumber: fhir: Immunization.protocolApplied.doseNumber[x]:', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationProtocolApplied._fts_dataType = 'ImmunizationProtocolApplied';
/**
 * Internal flag to properly serialize choice-type element Immunization.protocolApplied.doseNumber[x]
 */
ImmunizationProtocolApplied._fts_doseNumberIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Immunization.protocolApplied.seriesDoses[x]
 */
ImmunizationProtocolApplied._fts_seriesDosesIsChoice = true;
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Immunization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrenceString']) {
            this.occurrence = new fhir.FhirString({ value: source.occurrenceString });
        }
        else {
            this.occurrence = null;
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirDateTime({ value: source.recorded });
        }
        if (source['primarySource']) {
            this.primarySource = new fhir.FhirBoolean({ value: source.primarySource });
        }
        if (source['reportOrigin']) {
            this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDate({ value: source.expirationDate });
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImmunizationPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['isSubpotent']) {
            this.isSubpotent = new fhir.FhirBoolean({ value: source.isSubpotent });
        }
        if (source['subpotentReason']) {
            this.subpotentReason = source.subpotentReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subpotentReason = [];
        }
        if (source['education']) {
            this.education = source.education.map((x) => new fhir.ImmunizationEducation(x));
        }
        else {
            this.education = [];
        }
        if (source['programEligibility']) {
            this.programEligibility = source.programEligibility.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programEligibility = [];
        }
        if (source['fundingSource']) {
            this.fundingSource = new fhir.CodeableConcept(source.fundingSource);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x));
        }
        else {
            this.reaction = [];
        }
        if (source['protocolApplied']) {
            this.protocolApplied = source.protocolApplied.map((x) => new fhir.ImmunizationProtocolApplied(x));
        }
        else {
            this.protocolApplied = [];
        }
    }
    /**
     * Required-bound Value Set for status (Immunization.status)
     */
    static statusRequiredCoding() {
        return ImmunizationStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Immunization" fhir: Immunization.resourceType:"Immunization"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:ImmunizationStatusCodeType fhir: Immunization.status:code', });
        }
        if (this["statusReason"]) {
            issues.push(...this.statusReason.doModelValidation());
        }
        if (!this['vaccineCode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property vaccineCode:fhir.CodeableConcept fhir: Immunization.vaccineCode:CodeableConcept', });
        }
        if (this["vaccineCode"]) {
            issues.push(...this.vaccineCode.doModelValidation());
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient:fhir.Reference fhir: Immunization.patient:Reference', });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (!this['occurrence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property occurrence: fhir: Immunization.occurrence[x]:', });
        }
        if (this["recorded"]) {
            issues.push(...this.recorded.doModelValidation());
        }
        if (this["primarySource"]) {
            issues.push(...this.primarySource.doModelValidation());
        }
        if (this["reportOrigin"]) {
            issues.push(...this.reportOrigin.doModelValidation());
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["manufacturer"]) {
            issues.push(...this.manufacturer.doModelValidation());
        }
        if (this["lotNumber"]) {
            issues.push(...this.lotNumber.doModelValidation());
        }
        if (this["expirationDate"]) {
            issues.push(...this.expirationDate.doModelValidation());
        }
        if (this["site"]) {
            issues.push(...this.site.doModelValidation());
        }
        if (this["route"]) {
            issues.push(...this.route.doModelValidation());
        }
        if (this["doseQuantity"]) {
            issues.push(...this.doseQuantity.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["isSubpotent"]) {
            issues.push(...this.isSubpotent.doModelValidation());
        }
        if (this["subpotentReason"]) {
            this.subpotentReason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["education"]) {
            this.education.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["programEligibility"]) {
            this.programEligibility.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["fundingSource"]) {
            issues.push(...this.fundingSource.doModelValidation());
        }
        if (this["reaction"]) {
            this.reaction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["protocolApplied"]) {
            this.protocolApplied.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Immunization._fts_dataType = 'Immunization';
/**
 * Internal flag to properly serialize choice-type element Immunization.occurrence[x]
 */
Immunization._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,