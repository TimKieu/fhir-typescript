// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization
import * as fhir from '../fhir.js';
// @ts-ignore
import { ImmunizationStatusVsValidation } from '../fhirValueSets/ImmunizationStatusVsValidation.js';
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function, options);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.performer';
        }
        iss.push(...this.vOS('function', exp));
        iss.push(...this.vRS('actor', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationPerformer._fts_dataType = 'ImmunizationPerformer';
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['documentType'] !== undefined) {
            this.documentType = new fhir.FhirString({ value: source.documentType }, options);
        }
        if (source['_documentType']) {
            if (this.documentType) {
                this.documentType.addExtendedProperties(source._documentType);
            }
            else {
                this.documentType = new fhir.FhirString(source._documentType, options);
            }
        }
        if (source['reference'] !== undefined) {
            this.reference = new fhir.FhirUri({ value: source.reference }, options);
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirUri(source._reference, options);
            }
        }
        if (source['publicationDate'] !== undefined) {
            this.publicationDate = new fhir.FhirDateTime({ value: source.publicationDate }, options);
        }
        if (source['_publicationDate']) {
            if (this.publicationDate) {
                this.publicationDate.addExtendedProperties(source._publicationDate);
            }
            else {
                this.publicationDate = new fhir.FhirDateTime(source._publicationDate, options);
            }
        }
        if (source['presentationDate'] !== undefined) {
            this.presentationDate = new fhir.FhirDateTime({ value: source.presentationDate }, options);
        }
        if (source['_presentationDate']) {
            if (this.presentationDate) {
                this.presentationDate.addExtendedProperties(source._presentationDate);
            }
            else {
                this.presentationDate = new fhir.FhirDateTime(source._presentationDate, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.education';
        }
        iss.push(...this.vOS('documentType', exp));
        iss.push(...this.vOS('reference', exp));
        iss.push(...this.vOS('publicationDate', exp));
        iss.push(...this.vOS('presentationDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationEducation._fts_dataType = 'ImmunizationEducation';
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['detail']) {
            this.detail = new fhir.Reference(source.detail, options);
        }
        if (source['reported'] !== undefined) {
            this.reported = new fhir.FhirBoolean({ value: source.reported }, options);
        }
        if (source['_reported']) {
            if (this.reported) {
                this.reported.addExtendedProperties(source._reported);
            }
            else {
                this.reported = new fhir.FhirBoolean(source._reported, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.reaction';
        }
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('detail', exp));
        iss.push(...this.vOS('reported', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationReaction._fts_dataType = 'ImmunizationReaction';
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['series'] !== undefined) {
            this.series = new fhir.FhirString({ value: source.series }, options);
        }
        if (source['_series']) {
            if (this.series) {
                this.series.addExtendedProperties(source._series);
            }
            else {
                this.series = new fhir.FhirString(source._series, options);
            }
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority, options);
        }
        if (source['targetDisease']) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.targetDisease = [];
        }
        if (source['doseNumber']) {
            this.doseNumber = source.doseNumber;
        }
        else if (source['doseNumberPositiveInt'] !== undefined) {
            this.doseNumber = new fhir.FhirPositiveInt({ value: source.doseNumberPositiveInt }, options);
        }
        else if (source['doseNumberString'] !== undefined) {
            this.doseNumber = new fhir.FhirString({ value: source.doseNumberString }, options);
        }
        else {
            this.doseNumber = null;
        }
        if (source['seriesDoses']) {
            this.seriesDoses = source.seriesDoses;
        }
        else if (source['seriesDosesPositiveInt'] !== undefined) {
            this.seriesDoses = new fhir.FhirPositiveInt({ value: source.seriesDosesPositiveInt }, options);
        }
        else if (source['seriesDosesString'] !== undefined) {
            this.seriesDoses = new fhir.FhirString({ value: source.seriesDosesString }, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization.protocolApplied';
        }
        iss.push(...this.vOS('series', exp));
        iss.push(...this.vOS('authority', exp));
        iss.push(...this.vOA('targetDisease', exp));
        iss.push(...this.vRS('doseNumber', exp));
        iss.push(...this.vOS('seriesDoses', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationProtocolApplied._fts_dataType = 'ImmunizationProtocolApplied';
/**
 * Internal flag to properly serialize choice-type element Immunization.protocolApplied.doseNumber[x]
 */
ImmunizationProtocolApplied._fts_doseNumberIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Immunization.protocolApplied.seriesDoses[x]
 */
ImmunizationProtocolApplied._fts_seriesDosesIsChoice = true;
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Immunization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason, options);
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode, options);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime'] !== undefined) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime }, options);
        }
        else if (source['occurrenceString'] !== undefined) {
            this.occurrence = new fhir.FhirString({ value: source.occurrenceString }, options);
        }
        else {
            this.occurrence = null;
        }
        if (source['recorded'] !== undefined) {
            this.recorded = new fhir.FhirDateTime({ value: source.recorded }, options);
        }
        if (source['_recorded']) {
            if (this.recorded) {
                this.recorded.addExtendedProperties(source._recorded);
            }
            else {
                this.recorded = new fhir.FhirDateTime(source._recorded, options);
            }
        }
        if (source['primarySource'] !== undefined) {
            this.primarySource = new fhir.FhirBoolean({ value: source.primarySource }, options);
        }
        if (source['_primarySource']) {
            if (this.primarySource) {
                this.primarySource.addExtendedProperties(source._primarySource);
            }
            else {
                this.primarySource = new fhir.FhirBoolean(source._primarySource, options);
            }
        }
        if (source['reportOrigin']) {
            this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin, options);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer, options);
        }
        if (source['lotNumber'] !== undefined) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber }, options);
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber, options);
            }
        }
        if (source['expirationDate'] !== undefined) {
            this.expirationDate = new fhir.FhirDate({ value: source.expirationDate }, options);
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDate(source._expirationDate, options);
            }
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site, options);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route, options);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity, options);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImmunizationPerformer(x, options));
        }
        else {
            this.performer = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['isSubpotent'] !== undefined) {
            this.isSubpotent = new fhir.FhirBoolean({ value: source.isSubpotent }, options);
        }
        if (source['_isSubpotent']) {
            if (this.isSubpotent) {
                this.isSubpotent.addExtendedProperties(source._isSubpotent);
            }
            else {
                this.isSubpotent = new fhir.FhirBoolean(source._isSubpotent, options);
            }
        }
        if (source['subpotentReason']) {
            this.subpotentReason = source.subpotentReason.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.subpotentReason = [];
        }
        if (source['education']) {
            this.education = source.education.map((x) => new fhir.ImmunizationEducation(x, options));
        }
        else {
            this.education = [];
        }
        if (source['programEligibility']) {
            this.programEligibility = source.programEligibility.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.programEligibility = [];
        }
        if (source['fundingSource']) {
            this.fundingSource = new fhir.CodeableConcept(source.fundingSource, options);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x, options));
        }
        else {
            this.reaction = [];
        }
        if (source['protocolApplied']) {
            this.protocolApplied = source.protocolApplied.map((x) => new fhir.ImmunizationProtocolApplied(x, options));
        }
        else {
            this.protocolApplied = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Immunization';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'ImmunizationStatus', ImmunizationStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusReason', exp));
        iss.push(...this.vRS('vaccineCode', exp));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vRS('occurrence', exp));
        iss.push(...this.vOS('recorded', exp));
        iss.push(...this.vOS('primarySource', exp));
        iss.push(...this.vOS('reportOrigin', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOS('manufacturer', exp));
        iss.push(...this.vOS('lotNumber', exp));
        iss.push(...this.vOS('expirationDate', exp));
        iss.push(...this.vOS('site', exp));
        iss.push(...this.vOS('route', exp));
        iss.push(...this.vOS('doseQuantity', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOS('isSubpotent', exp));
        iss.push(...this.vOA('subpotentReason', exp));
        iss.push(...this.vOA('education', exp));
        iss.push(...this.vOA('programEligibility', exp));
        iss.push(...this.vOS('fundingSource', exp));
        iss.push(...this.vOA('reaction', exp));
        iss.push(...this.vOA('protocolApplied', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Immunization._fts_dataType = 'Immunization';
/**
 * Internal flag to properly serialize choice-type element Immunization.occurrence[x]
 */
Immunization._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,