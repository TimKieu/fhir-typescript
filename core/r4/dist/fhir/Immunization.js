// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Immunization
import * as fhir from '../fhir.js';
// @ts-ignore
import { ImmunizationFunctionCodings, } from '../fhirValueSets/ImmunizationFunctionCodings.js';
// @ts-ignore
import { ImmunizationStatusCodes } from '../fhirValueSets/ImmunizationStatusCodes.js';
/**
 * Indicates who performed the immunization event.
 */
export class ImmunizationPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Extensible-bound Value Set for function (Immunization.performer.function)
     */
    static get functionExtensibleCodings() {
        return ImmunizationFunctionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Immunization.performer';
        }
        if (this["function"]) {
            issues.push(...this.function.doModelValidation(expression + '.function'));
        }
        if (!this['actor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actor fhir: Immunization.performer.actor:Reference', expression: [expression] });
        }
        if (this["actor"]) {
            issues.push(...this.actor.doModelValidation(expression + '.actor'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationPerformer._fts_dataType = 'ImmunizationPerformer';
/**
 * Educational material presented to the patient (or guardian) at the time of vaccine administration.
 */
export class ImmunizationEducation extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationEducation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['documentType']) {
            this.documentType = new fhir.FhirString({ value: source.documentType });
        }
        if (source['_documentType']) {
            if (this.documentType) {
                this.documentType.addExtendedProperties(source._documentType);
            }
            else {
                this.documentType = new fhir.FhirString(source._documentType);
            }
        }
        if (source['reference']) {
            this.reference = new fhir.FhirUri({ value: source.reference });
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirUri(source._reference);
            }
        }
        if (source['publicationDate']) {
            this.publicationDate = new fhir.FhirDateTime({ value: source.publicationDate });
        }
        if (source['_publicationDate']) {
            if (this.publicationDate) {
                this.publicationDate.addExtendedProperties(source._publicationDate);
            }
            else {
                this.publicationDate = new fhir.FhirDateTime(source._publicationDate);
            }
        }
        if (source['presentationDate']) {
            this.presentationDate = new fhir.FhirDateTime({ value: source.presentationDate });
        }
        if (source['_presentationDate']) {
            if (this.presentationDate) {
                this.presentationDate.addExtendedProperties(source._presentationDate);
            }
            else {
                this.presentationDate = new fhir.FhirDateTime(source._presentationDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Immunization.education';
        }
        if (this["documentType"]) {
            issues.push(...this.documentType.doModelValidation(expression + '.documentType'));
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation(expression + '.reference'));
        }
        if (this["publicationDate"]) {
            issues.push(...this.publicationDate.doModelValidation(expression + '.publicationDate'));
        }
        if (this["presentationDate"]) {
            issues.push(...this.presentationDate.doModelValidation(expression + '.presentationDate'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationEducation._fts_dataType = 'ImmunizationEducation';
/**
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export class ImmunizationReaction extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['detail']) {
            this.detail = new fhir.Reference(source.detail);
        }
        if (source['reported']) {
            this.reported = new fhir.FhirBoolean({ value: source.reported });
        }
        if (source['_reported']) {
            if (this.reported) {
                this.reported.addExtendedProperties(source._reported);
            }
            else {
                this.reported = new fhir.FhirBoolean(source._reported);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Immunization.reaction';
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["detail"]) {
            issues.push(...this.detail.doModelValidation(expression + '.detail'));
        }
        if (this["reported"]) {
            issues.push(...this.reported.doModelValidation(expression + '.reported'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationReaction._fts_dataType = 'ImmunizationReaction';
/**
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export class ImmunizationProtocolApplied extends fhir.BackboneElement {
    /**
     * Default constructor for ImmunizationProtocolApplied - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['series']) {
            this.series = new fhir.FhirString({ value: source.series });
        }
        if (source['_series']) {
            if (this.series) {
                this.series.addExtendedProperties(source._series);
            }
            else {
                this.series = new fhir.FhirString(source._series);
            }
        }
        if (source['authority']) {
            this.authority = new fhir.Reference(source.authority);
        }
        if (source['targetDisease']) {
            this.targetDisease = source.targetDisease.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.targetDisease = [];
        }
        if (source['doseNumber']) {
            this.doseNumber = source.doseNumber;
        }
        else if (source['doseNumberPositiveInt']) {
            this.doseNumber = new fhir.FhirPositiveInt({ value: source.doseNumberPositiveInt });
        }
        else if (source['doseNumberString']) {
            this.doseNumber = new fhir.FhirString({ value: source.doseNumberString });
        }
        else {
            this.doseNumber = null;
        }
        if (source['seriesDoses']) {
            this.seriesDoses = source.seriesDoses;
        }
        else if (source['seriesDosesPositiveInt']) {
            this.seriesDoses = new fhir.FhirPositiveInt({ value: source.seriesDosesPositiveInt });
        }
        else if (source['seriesDosesString']) {
            this.seriesDoses = new fhir.FhirString({ value: source.seriesDosesString });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Immunization.protocolApplied';
        }
        if (this["series"]) {
            issues.push(...this.series.doModelValidation(expression + '.series'));
        }
        if (this["authority"]) {
            issues.push(...this.authority.doModelValidation(expression + '.authority'));
        }
        if (this["targetDisease"]) {
            this.targetDisease.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.targetDisease[${i}]`)); });
        }
        if (!this['doseNumber']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property doseNumber fhir: Immunization.protocolApplied.doseNumber[x]:', expression: [expression] });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImmunizationProtocolApplied._fts_dataType = 'ImmunizationProtocolApplied';
/**
 * Internal flag to properly serialize choice-type element Immunization.protocolApplied.doseNumber[x]
 */
ImmunizationProtocolApplied._fts_doseNumberIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Immunization.protocolApplied.seriesDoses[x]
 */
ImmunizationProtocolApplied._fts_seriesDosesIsChoice = true;
/**
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export class Immunization extends fhir.DomainResource {
    /**
     * Default constructor for Immunization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Immunization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['vaccineCode']) {
            this.vaccineCode = new fhir.CodeableConcept(source.vaccineCode);
        }
        else {
            this.vaccineCode = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrenceString']) {
            this.occurrence = new fhir.FhirString({ value: source.occurrenceString });
        }
        else {
            this.occurrence = null;
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirDateTime({ value: source.recorded });
        }
        if (source['_recorded']) {
            if (this.recorded) {
                this.recorded.addExtendedProperties(source._recorded);
            }
            else {
                this.recorded = new fhir.FhirDateTime(source._recorded);
            }
        }
        if (source['primarySource']) {
            this.primarySource = new fhir.FhirBoolean({ value: source.primarySource });
        }
        if (source['_primarySource']) {
            if (this.primarySource) {
                this.primarySource.addExtendedProperties(source._primarySource);
            }
            else {
                this.primarySource = new fhir.FhirBoolean(source._primarySource);
            }
        }
        if (source['reportOrigin']) {
            this.reportOrigin = new fhir.CodeableConcept(source.reportOrigin);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber);
            }
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDate({ value: source.expirationDate });
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDate(source._expirationDate);
            }
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['doseQuantity']) {
            this.doseQuantity = new fhir.Quantity(source.doseQuantity);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImmunizationPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['isSubpotent']) {
            this.isSubpotent = new fhir.FhirBoolean({ value: source.isSubpotent });
        }
        if (source['_isSubpotent']) {
            if (this.isSubpotent) {
                this.isSubpotent.addExtendedProperties(source._isSubpotent);
            }
            else {
                this.isSubpotent = new fhir.FhirBoolean(source._isSubpotent);
            }
        }
        if (source['subpotentReason']) {
            this.subpotentReason = source.subpotentReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subpotentReason = [];
        }
        if (source['education']) {
            this.education = source.education.map((x) => new fhir.ImmunizationEducation(x));
        }
        else {
            this.education = [];
        }
        if (source['programEligibility']) {
            this.programEligibility = source.programEligibility.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programEligibility = [];
        }
        if (source['fundingSource']) {
            this.fundingSource = new fhir.CodeableConcept(source.fundingSource);
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.ImmunizationReaction(x));
        }
        else {
            this.reaction = [];
        }
        if (source['protocolApplied']) {
            this.protocolApplied = source.protocolApplied.map((x) => new fhir.ImmunizationProtocolApplied(x));
        }
        else {
            this.protocolApplied = [];
        }
    }
    /**
     * Required-bound Value Set for status (Immunization.status)
     */
    static get statusRequiredCodes() {
        return ImmunizationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Immunization';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Immunization.resourceType:"Immunization"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: Immunization.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(ImmunizationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (Immunization.status) of type code is missing code for Required binding to: ImmunizationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["statusReason"]) {
            issues.push(...this.statusReason.doModelValidation(expression + '.statusReason'));
        }
        if (!this['vaccineCode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property vaccineCode fhir: Immunization.vaccineCode:CodeableConcept', expression: [expression] });
        }
        if (this["vaccineCode"]) {
            issues.push(...this.vaccineCode.doModelValidation(expression + '.vaccineCode'));
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient fhir: Immunization.patient:Reference', expression: [expression] });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation(expression + '.patient'));
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation(expression + '.encounter'));
        }
        if (!this['occurrence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property occurrence fhir: Immunization.occurrence[x]:', expression: [expression] });
        }
        if (this["recorded"]) {
            issues.push(...this.recorded.doModelValidation(expression + '.recorded'));
        }
        if (this["primarySource"]) {
            issues.push(...this.primarySource.doModelValidation(expression + '.primarySource'));
        }
        if (this["reportOrigin"]) {
            issues.push(...this.reportOrigin.doModelValidation(expression + '.reportOrigin'));
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation(expression + '.location'));
        }
        if (this["manufacturer"]) {
            issues.push(...this.manufacturer.doModelValidation(expression + '.manufacturer'));
        }
        if (this["lotNumber"]) {
            issues.push(...this.lotNumber.doModelValidation(expression + '.lotNumber'));
        }
        if (this["expirationDate"]) {
            issues.push(...this.expirationDate.doModelValidation(expression + '.expirationDate'));
        }
        if (this["site"]) {
            issues.push(...this.site.doModelValidation(expression + '.site'));
        }
        if (this["route"]) {
            issues.push(...this.route.doModelValidation(expression + '.route'));
        }
        if (this["doseQuantity"]) {
            issues.push(...this.doseQuantity.doModelValidation(expression + '.doseQuantity'));
        }
        if (this["performer"]) {
            this.performer.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.performer[${i}]`)); });
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonCode[${i}]`)); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonReference[${i}]`)); });
        }
        if (this["isSubpotent"]) {
            issues.push(...this.isSubpotent.doModelValidation(expression + '.isSubpotent'));
        }
        if (this["subpotentReason"]) {
            this.subpotentReason.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.subpotentReason[${i}]`)); });
        }
        if (this["education"]) {
            this.education.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.education[${i}]`)); });
        }
        if (this["programEligibility"]) {
            this.programEligibility.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.programEligibility[${i}]`)); });
        }
        if (this["fundingSource"]) {
            issues.push(...this.fundingSource.doModelValidation(expression + '.fundingSource'));
        }
        if (this["reaction"]) {
            this.reaction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reaction[${i}]`)); });
        }
        if (this["protocolApplied"]) {
            this.protocolApplied.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.protocolApplied[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Immunization._fts_dataType = 'Immunization';
/**
 * Internal flag to properly serialize choice-type element Immunization.occurrence[x]
 */
Immunization._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,