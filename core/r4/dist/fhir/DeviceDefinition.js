// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { DeviceNametypeCodes } from '../fhirValueSets/DeviceNametypeCodes.js';
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export class DeviceDefinitionUdiDeviceIdentifier extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionUdiDeviceIdentifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['deviceIdentifier']) {
            this.deviceIdentifier = new fhir.FhirString({ value: source.deviceIdentifier });
        }
        else {
            this.deviceIdentifier = null;
        }
        if (source['_deviceIdentifier']) {
            if (this.deviceIdentifier) {
                this.deviceIdentifier.addExtendedProperties(source._deviceIdentifier);
            }
            else {
                this.deviceIdentifier = new fhir.FhirString(source._deviceIdentifier);
            }
        }
        if (source['issuer']) {
            this.issuer = new fhir.FhirUri({ value: source.issuer });
        }
        else {
            this.issuer = null;
        }
        if (source['_issuer']) {
            if (this.issuer) {
                this.issuer.addExtendedProperties(source._issuer);
            }
            else {
                this.issuer = new fhir.FhirUri(source._issuer);
            }
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.FhirUri({ value: source.jurisdiction });
        }
        else {
            this.jurisdiction = null;
        }
        if (source['_jurisdiction']) {
            if (this.jurisdiction) {
                this.jurisdiction.addExtendedProperties(source._jurisdiction);
            }
            else {
                this.jurisdiction = new fhir.FhirUri(source._jurisdiction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceDefinition.udiDeviceIdentifier';
        }
        if (!this['deviceIdentifier']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property deviceIdentifier fhir: DeviceDefinition.udiDeviceIdentifier.deviceIdentifier:string', expression: [expression] });
        }
        if (this["deviceIdentifier"]) {
            issues.push(...this.deviceIdentifier.doModelValidation(expression + '.deviceIdentifier'));
        }
        if (!this['issuer']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property issuer fhir: DeviceDefinition.udiDeviceIdentifier.issuer:uri', expression: [expression] });
        }
        if (this["issuer"]) {
            issues.push(...this.issuer.doModelValidation(expression + '.issuer'));
        }
        if (!this['jurisdiction']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property jurisdiction fhir: DeviceDefinition.udiDeviceIdentifier.jurisdiction:uri', expression: [expression] });
        }
        if (this["jurisdiction"]) {
            issues.push(...this.jurisdiction.doModelValidation(expression + '.jurisdiction'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionUdiDeviceIdentifier._fts_dataType = 'DeviceDefinitionUdiDeviceIdentifier';
/**
 * A name given to the device to identify it.
 */
export class DeviceDefinitionDeviceName extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionDeviceName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
    }
    /**
     * Required-bound Value Set for type (DeviceDefinition.deviceName.type)
     */
    static get typeRequiredCodes() {
        return DeviceNametypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceDefinition.deviceName';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: DeviceDefinition.deviceName.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: DeviceDefinition.deviceName.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(DeviceNametypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'type (DeviceDefinition.deviceName.type) of type code is missing code for Required binding to: DeviceNametype', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionDeviceName._fts_dataType = 'DeviceDefinitionDeviceName';
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceDefinitionSpecialization extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionSpecialization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['systemType']) {
            this.systemType = new fhir.FhirString({ value: source.systemType });
        }
        else {
            this.systemType = null;
        }
        if (source['_systemType']) {
            if (this.systemType) {
                this.systemType.addExtendedProperties(source._systemType);
            }
            else {
                this.systemType = new fhir.FhirString(source._systemType);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceDefinition.specialization';
        }
        if (!this['systemType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property systemType fhir: DeviceDefinition.specialization.systemType:string', expression: [expression] });
        }
        if (this["systemType"]) {
            issues.push(...this.systemType.doModelValidation(expression + '.systemType'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionSpecialization._fts_dataType = 'DeviceDefinitionSpecialization';
/**
 * Device capabilities.
 */
export class DeviceDefinitionCapability extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['description']) {
            this.description = source.description.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.description = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceDefinition.capability';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: DeviceDefinition.capability.type:CodeableConcept', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["description"]) {
            this.description.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.description[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionCapability._fts_dataType = 'DeviceDefinitionCapability';
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceDefinitionProperty extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['valueQuantity']) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x));
        }
        else {
            this.valueQuantity = [];
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.valueCode = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceDefinition.property';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: DeviceDefinition.property.type:CodeableConcept', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["valueQuantity"]) {
            this.valueQuantity.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.valueQuantity[${i}]`)); });
        }
        if (this["valueCode"]) {
            this.valueCode.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.valueCode[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionProperty._fts_dataType = 'DeviceDefinitionProperty';
/**
 * A substance used to create the material(s) of which the device is made.
 */
export class DeviceDefinitionMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        else {
            this.substance = null;
        }
        if (source['alternate']) {
            this.alternate = new fhir.FhirBoolean({ value: source.alternate });
        }
        if (source['_alternate']) {
            if (this.alternate) {
                this.alternate.addExtendedProperties(source._alternate);
            }
            else {
                this.alternate = new fhir.FhirBoolean(source._alternate);
            }
        }
        if (source['allergenicIndicator']) {
            this.allergenicIndicator = new fhir.FhirBoolean({ value: source.allergenicIndicator });
        }
        if (source['_allergenicIndicator']) {
            if (this.allergenicIndicator) {
                this.allergenicIndicator.addExtendedProperties(source._allergenicIndicator);
            }
            else {
                this.allergenicIndicator = new fhir.FhirBoolean(source._allergenicIndicator);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceDefinition.material';
        }
        if (!this['substance']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property substance fhir: DeviceDefinition.material.substance:CodeableConcept', expression: [expression] });
        }
        if (this["substance"]) {
            issues.push(...this.substance.doModelValidation(expression + '.substance'));
        }
        if (this["alternate"]) {
            issues.push(...this.alternate.doModelValidation(expression + '.alternate'));
        }
        if (this["allergenicIndicator"]) {
            issues.push(...this.allergenicIndicator.doModelValidation(expression + '.allergenicIndicator'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionMaterial._fts_dataType = 'DeviceDefinitionMaterial';
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceDefinition extends fhir.DomainResource {
    /**
     * Default constructor for DeviceDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['udiDeviceIdentifier']) {
            this.udiDeviceIdentifier = source.udiDeviceIdentifier.map((x) => new fhir.DeviceDefinitionUdiDeviceIdentifier(x));
        }
        else {
            this.udiDeviceIdentifier = [];
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer;
        }
        else if (source['manufacturerString']) {
            this.manufacturer = new fhir.FhirString({ value: source.manufacturerString });
        }
        else if (source['manufacturerReference']) {
            this.manufacturer = new fhir.Reference(source.manufacturerReference);
        }
        if (source['deviceName']) {
            this.deviceName = source.deviceName.map((x) => new fhir.DeviceDefinitionDeviceName(x));
        }
        else {
            this.deviceName = [];
        }
        if (source['modelNumber']) {
            this.modelNumber = new fhir.FhirString({ value: source.modelNumber });
        }
        if (source['_modelNumber']) {
            if (this.modelNumber) {
                this.modelNumber.addExtendedProperties(source._modelNumber);
            }
            else {
                this.modelNumber = new fhir.FhirString(source._modelNumber);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['specialization']) {
            this.specialization = source.specialization.map((x) => new fhir.DeviceDefinitionSpecialization(x));
        }
        else {
            this.specialization = [];
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.version = [];
        }
        if (source['_version']) {
            source._version.forEach((x, i) => {
                if (this.version.length >= i) {
                    if (x) {
                        this.version[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.version.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['safety']) {
            this.safety = source.safety.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.safety = [];
        }
        if (source['shelfLifeStorage']) {
            this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x));
        }
        else {
            this.shelfLifeStorage = [];
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['languageCode']) {
            this.languageCode = source.languageCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.languageCode = [];
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.DeviceDefinitionCapability(x));
        }
        else {
            this.capability = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.DeviceDefinitionProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.contact = [];
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['onlineInformation']) {
            this.onlineInformation = new fhir.FhirUri({ value: source.onlineInformation });
        }
        if (source['_onlineInformation']) {
            if (this.onlineInformation) {
                this.onlineInformation.addExtendedProperties(source._onlineInformation);
            }
            else {
                this.onlineInformation = new fhir.FhirUri(source._onlineInformation);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['parentDevice']) {
            this.parentDevice = new fhir.Reference(source.parentDevice);
        }
        if (source['material']) {
            this.material = source.material.map((x) => new fhir.DeviceDefinitionMaterial(x));
        }
        else {
            this.material = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceDefinition';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: DeviceDefinition.resourceType:"DeviceDefinition"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["udiDeviceIdentifier"]) {
            this.udiDeviceIdentifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.udiDeviceIdentifier[${i}]`)); });
        }
        if (this["deviceName"]) {
            this.deviceName.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.deviceName[${i}]`)); });
        }
        if (this["modelNumber"]) {
            issues.push(...this.modelNumber.doModelValidation(expression + '.modelNumber'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["specialization"]) {
            this.specialization.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.specialization[${i}]`)); });
        }
        if (this["version"]) {
            this.version.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.version[${i}]`)); });
        }
        if (this["safety"]) {
            this.safety.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.safety[${i}]`)); });
        }
        if (this["shelfLifeStorage"]) {
            this.shelfLifeStorage.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.shelfLifeStorage[${i}]`)); });
        }
        if (this["physicalCharacteristics"]) {
            issues.push(...this.physicalCharacteristics.doModelValidation(expression + '.physicalCharacteristics'));
        }
        if (this["languageCode"]) {
            this.languageCode.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.languageCode[${i}]`)); });
        }
        if (this["capability"]) {
            this.capability.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.capability[${i}]`)); });
        }
        if (this["property"]) {
            this.property.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.property[${i}]`)); });
        }
        if (this["owner"]) {
            issues.push(...this.owner.doModelValidation(expression + '.owner'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["onlineInformation"]) {
            issues.push(...this.onlineInformation.doModelValidation(expression + '.onlineInformation'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation(expression + '.quantity'));
        }
        if (this["parentDevice"]) {
            issues.push(...this.parentDevice.doModelValidation(expression + '.parentDevice'));
        }
        if (this["material"]) {
            this.material.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.material[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinition._fts_dataType = 'DeviceDefinition';
/**
 * Internal flag to properly serialize choice-type element DeviceDefinition.manufacturer[x]
 */
DeviceDefinition._fts_manufacturerIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlRGVmaW5pdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvRGV2aWNlRGVmaW5pdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFFbEMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFJbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSxtQkFBbUIsRUFBMkIsTUFBTSx5Q0FBeUMsQ0FBQztBQW1Ddkc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW9DLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUFpQjNFOztPQUVHO0lBQ0gsWUFBWSxTQUEwRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUNoSCxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBQyxDQUFDLENBQUM7U0FBRTthQUM3RztZQUFFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7U0FBRTtRQUN0QyxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQy9CLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsaUJBQWtCLENBQUMsQ0FBQzthQUFFO2lCQUNqRztnQkFBRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUQsQ0FBQyxDQUFDO2FBQUU7U0FDaEg7UUFDRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFN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QUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3BILElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUNsRyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDOUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUNoSSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQWpNRDs7R0FFRztBQUM2Qiw4QkFBYSxHQUFVLGtCQUFrQixDQUFDO0FBaUIxRTs7R0FFRztBQUN1QiwwQ0FBeUIsR0FBUSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IERldmljZURlZmluaXRpb25cclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERldmljZU5hbWV0eXBlQ29kaW5ncywgRGV2aWNlTmFtZXR5cGVDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZXZpY2VOYW1ldHlwZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERldmljZU5hbWV0eXBlQ29kZXMsICBEZXZpY2VOYW1ldHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZXZpY2VOYW1ldHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZXZpY2VLaW5kQ29kaW5ncywgRGV2aWNlS2luZENvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RldmljZUtpbmRDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEZXZpY2VLaW5kQ29kZXMsICBEZXZpY2VLaW5kQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RldmljZUtpbmRDb2Rlcy5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBEZXZpY2VEZWZpbml0aW9uVWRpRGV2aWNlSWRlbnRpZmllciB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VEZWZpbml0aW9uVWRpRGV2aWNlSWRlbnRpZmllckFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpZGVudGlmaWVyIHRoYXQgaXMgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIGV2ZXJ5IERldmljZSB0aGF0IHJlZmVyZW5jZXMgdGhpcyBEZXZpY2VEZWZpbnRpaW9uIGZvciB0aGUgaXNzdWVyIGFuZCBqdXJpc2RpY2F0aW9uIHBvcnZpZGVkIGluIHRoZSBEZXZpY2VEZWZpbml0aW9uLnVkaURldmljZUlkZW50aWZpZXIuXHJcbiAgICovXHJcbiAgZGV2aWNlSWRlbnRpZmllcjogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldmljZURlZmluaXRpb24udWRpRGV2aWNlSWRlbnRpZmllci5kZXZpY2VJZGVudGlmaWVyXHJcbiAgICovXHJcbiAgX2RldmljZUlkZW50aWZpZXI/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcmdhbml6YXRpb24gdGhhdCBhc3NpZ25zIHRoZSBpZGVudGlmaWVyIGFsZ29yaXRobS5cclxuICAgKi9cclxuICBpc3N1ZXI6IGZoaXIuRmhpclVyaXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VEZWZpbml0aW9uLnVkaURldmljZUlkZW50aWZpZXIuaXNzdWVyXHJcbiAgICovXHJcbiAgX2lzc3Vlcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGp1cmlzZGljdGlvbiB0byB3aGljaCB0aGUgZGV2aWNlSWRlbnRpZmllciBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbjogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldmljZURlZmluaXRpb24udWRpRGV2aWNlSWRlbnRpZmllci5qdXJpc2RpY3Rpb25cclxuICAgKi9cclxuICBfanVyaXNkaWN0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFVuaXF1ZSBkZXZpY2UgaWRlbnRpZmllciAoVURJKSBhc3NpZ25lZCB0byBkZXZpY2UgbGFiZWwgb3IgcGFja2FnZS4gIE5vdGUgdGhhdCB0aGUgRGV2aWNlIG1heSBpbmNsdWRlIG11bHRpcGxlIHVkaUNhcnJpZXJzIGFzIGl0IGVpdGhlciBtYXkgaW5jbHVkZSBqdXN0IHRoZSB1ZGlDYXJyaWVyIGZvciB0aGUganVyaXNkaWN0aW9uIGl0IGlzIHNvbGQsIG9yIGZvciBtdWx0aXBsZSBqdXJpc2RpY3Rpb25zIGl0IGNvdWxkIGhhdmUgYmVlbiBzb2xkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERldmljZURlZmluaXRpb25VZGlEZXZpY2VJZGVudGlmaWVyIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRGV2aWNlRGVmaW5pdGlvblVkaURldmljZUlkZW50aWZpZXInO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpZGVudGlmaWVyIHRoYXQgaXMgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIGV2ZXJ5IERldmljZSB0aGF0IHJlZmVyZW5jZXMgdGhpcyBEZXZpY2VEZWZpbnRpaW9uIGZvciB0aGUgaXNzdWVyIGFuZCBqdXJpc2RpY2F0aW9uIHBvcnZpZGVkIGluIHRoZSBEZXZpY2VEZWZpbml0aW9uLnVkaURldmljZUlkZW50aWZpZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGRldmljZUlkZW50aWZpZXI6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcmdhbml6YXRpb24gdGhhdCBhc3NpZ25zIHRoZSBpZGVudGlmaWVyIGFsZ29yaXRobS5cclxuICAgKi9cclxuICBwdWJsaWMgaXNzdWVyOiBmaGlyLkZoaXJVcml8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUganVyaXNkaWN0aW9uIHRvIHdoaWNoIHRoZSBkZXZpY2VJZGVudGlmaWVyIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGp1cmlzZGljdGlvbjogZmhpci5GaGlyVXJpfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRGV2aWNlRGVmaW5pdGlvblVkaURldmljZUlkZW50aWZpZXIgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxEZXZpY2VEZWZpbml0aW9uVWRpRGV2aWNlSWRlbnRpZmllckFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydkZXZpY2VJZGVudGlmaWVyJ10pIHsgdGhpcy5kZXZpY2VJZGVudGlmaWVyID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXZpY2VJZGVudGlmaWVyfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRldmljZUlkZW50aWZpZXIgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGV2aWNlSWRlbnRpZmllciddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRldmljZUlkZW50aWZpZXIpIHsgdGhpcy5kZXZpY2VJZGVudGlmaWVyLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2RldmljZUlkZW50aWZpZXIhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kZXZpY2VJZGVudGlmaWVyID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2RldmljZUlkZW50aWZpZXIgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2lzc3VlciddKSB7IHRoaXMuaXNzdWVyID0gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHNvdXJjZS5pc3N1ZXJ9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaXNzdWVyID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2lzc3VlciddKSB7XHJcbiAgICAgIGlmICh0aGlzLmlzc3VlcikgeyB0aGlzLmlzc3Vlci5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9pc3N1ZXIhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5pc3N1ZXIgPSBuZXcgZmhpci5GaGlyVXJpKHNvdXJjZS5faXNzdWVyIGFzIFBhcnRpYWw8Zmhpci5GaGlyVXJpQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydqdXJpc2RpY3Rpb24nXSkgeyB0aGlzLmp1cmlzZGljdGlvbiA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UuanVyaXNkaWN0aW9ufSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmp1cmlzZGljdGlvbiA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19qdXJpc2RpY3Rpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5qdXJpc2RpY3Rpb24pIHsgdGhpcy5qdXJpc2RpY3Rpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fanVyaXNkaWN0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuanVyaXNkaWN0aW9uID0gbmV3IGZoaXIuRmhpclVyaShzb3VyY2UuX2p1cmlzZGljdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclVyaUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdEZXZpY2VEZWZpbml0aW9uLnVkaURldmljZUlkZW50aWZpZXInIH1cclxuICAgIGlmICghdGhpc1snZGV2aWNlSWRlbnRpZmllciddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBkZXZpY2VJZGVudGlmaWVyIGZoaXI6IERldmljZURlZmluaXRpb24udWRpRGV2aWNlSWRlbnRpZmllci5kZXZpY2VJZGVudGlmaWVyOnN0cmluZycsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiZGV2aWNlSWRlbnRpZmllclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRldmljZUlkZW50aWZpZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmRldmljZUlkZW50aWZpZXInKSk7IH1cclxuICAgIGlmICghdGhpc1snaXNzdWVyJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGlzc3VlciBmaGlyOiBEZXZpY2VEZWZpbml0aW9uLnVkaURldmljZUlkZW50aWZpZXIuaXNzdWVyOnVyaScsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiaXNzdWVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuaXNzdWVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5pc3N1ZXInKSk7IH1cclxuICAgIGlmICghdGhpc1snanVyaXNkaWN0aW9uJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGp1cmlzZGljdGlvbiBmaGlyOiBEZXZpY2VEZWZpbml0aW9uLnVkaURldmljZUlkZW50aWZpZXIuanVyaXNkaWN0aW9uOnVyaScsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wianVyaXNkaWN0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuanVyaXNkaWN0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5qdXJpc2RpY3Rpb24nKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBEZXZpY2VEZWZpbml0aW9uRGV2aWNlTmFtZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VEZWZpbml0aW9uRGV2aWNlTmFtZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgbmFtZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldmljZURlZmluaXRpb24uZGV2aWNlTmFtZS5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIGRldmljZU5hbWUuXHJcbiAgICogVURJTGFiZWxOYW1lIHwgVXNlckZyaWVuZGx5TmFtZSB8IFBhdGllbnRSZXBvcnRlZE5hbWUgfCBNYW51ZmFjdHVyZURldmljZU5hbWUgfCBNb2RlbE5hbWUuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5GaGlyQ29kZTxEZXZpY2VOYW1ldHlwZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VEZWZpbml0aW9uLmRldmljZU5hbWUudHlwZVxyXG4gICAqL1xyXG4gIF90eXBlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgbmFtZSBnaXZlbiB0byB0aGUgZGV2aWNlIHRvIGlkZW50aWZ5IGl0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERldmljZURlZmluaXRpb25EZXZpY2VOYW1lIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRGV2aWNlRGVmaW5pdGlvbkRldmljZU5hbWUnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIGRldmljZU5hbWUuXHJcbiAgICogVURJTGFiZWxOYW1lIHwgVXNlckZyaWVuZGx5TmFtZSB8IFBhdGllbnRSZXBvcnRlZE5hbWUgfCBNYW51ZmFjdHVyZURldmljZU5hbWUgfCBNb2RlbE5hbWUuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuRmhpckNvZGU8RGV2aWNlTmFtZXR5cGVDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBEZXZpY2VEZWZpbml0aW9uRGV2aWNlTmFtZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPERldmljZURlZmluaXRpb25EZXZpY2VOYW1lQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubmFtZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19uYW1lJ10pIHtcclxuICAgICAgaWYgKHRoaXMubmFtZSkgeyB0aGlzLm5hbWUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbmFtZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fbmFtZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJDb2RlPERldmljZU5hbWV0eXBlQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnR5cGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ190eXBlJ10pIHtcclxuICAgICAgaWYgKHRoaXMudHlwZSkgeyB0aGlzLnR5cGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdHlwZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZTxEZXZpY2VOYW1ldHlwZUNvZGVUeXBlPihzb3VyY2UuX3R5cGUgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciB0eXBlIChEZXZpY2VEZWZpbml0aW9uLmRldmljZU5hbWUudHlwZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCB0eXBlUmVxdWlyZWRDb2RlcygpIHtcclxuICAgIHJldHVybiBEZXZpY2VOYW1ldHlwZUNvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdEZXZpY2VEZWZpbml0aW9uLmRldmljZU5hbWUnIH1cclxuICAgIGlmICghdGhpc1snbmFtZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBuYW1lIGZoaXI6IERldmljZURlZmluaXRpb24uZGV2aWNlTmFtZS5uYW1lOnN0cmluZycsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wibmFtZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm5hbWUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLm5hbWUnKSk7IH1cclxuICAgIGlmICghdGhpc1sndHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0eXBlIGZoaXI6IERldmljZURlZmluaXRpb24uZGV2aWNlTmFtZS50eXBlOmNvZGUnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1sndHlwZSddICYmICghT2JqZWN0LnZhbHVlcyhEZXZpY2VOYW1ldHlwZUNvZGVzKS5pbmNsdWRlcyh0aGlzLnR5cGUudmFsdWUgYXMgYW55KSkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ2NvZGUtaW52YWxpZCcsIGRpYWdub3N0aWNzOiAndHlwZSAoRGV2aWNlRGVmaW5pdGlvbi5kZXZpY2VOYW1lLnR5cGUpIG9mIHR5cGUgY29kZSBpcyBtaXNzaW5nIGNvZGUgZm9yIFJlcXVpcmVkIGJpbmRpbmcgdG86IERldmljZU5hbWV0eXBlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycudHlwZScpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIERldmljZURlZmluaXRpb25TcGVjaWFsaXphdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VEZWZpbml0aW9uU3BlY2lhbGl6YXRpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgc3RhbmRhcmQgdGhhdCBpcyB1c2VkIHRvIG9wZXJhdGUgYW5kIGNvbW11bmljYXRlLlxyXG4gICAqL1xyXG4gIHN5c3RlbVR5cGU6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VEZWZpbml0aW9uLnNwZWNpYWxpemF0aW9uLnN5c3RlbVR5cGVcclxuICAgKi9cclxuICBfc3lzdGVtVHlwZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHN0YW5kYXJkIHRoYXQgaXMgdXNlZCB0byBvcGVyYXRlIGFuZCBjb21tdW5pY2F0ZS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldmljZURlZmluaXRpb24uc3BlY2lhbGl6YXRpb24udmVyc2lvblxyXG4gICAqL1xyXG4gIF92ZXJzaW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBjYXBhYmlsaXRpZXMgc3VwcG9ydGVkIG9uIGEgIGRldmljZSwgdGhlIHN0YW5kYXJkcyB0byB3aGljaCB0aGUgZGV2aWNlIGNvbmZvcm1zIGZvciBhIHBhcnRpY3VsYXIgcHVycG9zZSwgYW5kIHVzZWQgZm9yIHRoZSBjb21tdW5pY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERldmljZURlZmluaXRpb25TcGVjaWFsaXphdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0RldmljZURlZmluaXRpb25TcGVjaWFsaXphdGlvbic7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN0YW5kYXJkIHRoYXQgaXMgdXNlZCB0byBvcGVyYXRlIGFuZCBjb21tdW5pY2F0ZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3lzdGVtVHlwZTogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHN0YW5kYXJkIHRoYXQgaXMgdXNlZCB0byBvcGVyYXRlIGFuZCBjb21tdW5pY2F0ZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRGV2aWNlRGVmaW5pdGlvblNwZWNpYWxpemF0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RGV2aWNlRGVmaW5pdGlvblNwZWNpYWxpemF0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3N5c3RlbVR5cGUnXSkgeyB0aGlzLnN5c3RlbVR5cGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnN5c3RlbVR5cGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3lzdGVtVHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zeXN0ZW1UeXBlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc3lzdGVtVHlwZSkgeyB0aGlzLnN5c3RlbVR5cGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc3lzdGVtVHlwZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnN5c3RlbVR5cGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fc3lzdGVtVHlwZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndmVyc2lvbiddKSB7IHRoaXMudmVyc2lvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdmVyc2lvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLnZlcnNpb24pIHsgdGhpcy52ZXJzaW9uLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3ZlcnNpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy52ZXJzaW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3ZlcnNpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRGV2aWNlRGVmaW5pdGlvbi5zcGVjaWFsaXphdGlvbicgfVxyXG4gICAgaWYgKCF0aGlzWydzeXN0ZW1UeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHN5c3RlbVR5cGUgZmhpcjogRGV2aWNlRGVmaW5pdGlvbi5zcGVjaWFsaXphdGlvbi5zeXN0ZW1UeXBlOnN0cmluZycsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wic3lzdGVtVHlwZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnN5c3RlbVR5cGUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnN5c3RlbVR5cGUnKSk7IH1cclxuICAgIGlmICh0aGlzW1widmVyc2lvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnZlcnNpb24uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnZlcnNpb24nKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBEZXZpY2VEZWZpbml0aW9uQ2FwYWJpbGl0eSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VEZWZpbml0aW9uQ2FwYWJpbGl0eUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFR5cGUgb2YgY2FwYWJpbGl0eS5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGlvbiBvZiBjYXBhYmlsaXR5LlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogRGV2aWNlIGNhcGFiaWxpdGllcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VEZWZpbml0aW9uQ2FwYWJpbGl0eSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0RldmljZURlZmluaXRpb25DYXBhYmlsaXR5JztcclxuICAvKipcclxuICAgKiBUeXBlIG9mIGNhcGFiaWxpdHkuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVzY3JpcHRpb24gb2YgY2FwYWJpbGl0eS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVzY3JpcHRpb246IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRGV2aWNlRGVmaW5pdGlvbkNhcGFiaWxpdHkgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxEZXZpY2VEZWZpbml0aW9uQ2FwYWJpbGl0eUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50eXBlKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IHNvdXJjZS5kZXNjcmlwdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRlc2NyaXB0aW9uID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRGV2aWNlRGVmaW5pdGlvbi5jYXBhYmlsaXR5JyB9XHJcbiAgICBpZiAoIXRoaXNbJ3R5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdHlwZSBmaGlyOiBEZXZpY2VEZWZpbml0aW9uLmNhcGFiaWxpdHkudHlwZTpDb2RlYWJsZUNvbmNlcHQnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy50eXBlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImRlc2NyaXB0aW9uXCJdKSB7IHRoaXMuZGVzY3JpcHRpb24uZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmRlc2NyaXB0aW9uWyR7aX1dYCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRGV2aWNlRGVmaW5pdGlvblByb3BlcnR5IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZURlZmluaXRpb25Qcm9wZXJ0eUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIENvZGUgdGhhdCBzcGVjaWZpZXMgdGhlIHByb3BlcnR5IERldmljZURlZmluaXRpb25Qcm9wZXR5Q29kZSAoRXh0ZW5zaWJsZSkuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogUHJvcGVydHkgdmFsdWUgYXMgYSBxdWFudGl0eS5cclxuICAgKi9cclxuICB2YWx1ZVF1YW50aXR5PzogZmhpci5RdWFudGl0eUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUHJvcGVydHkgdmFsdWUgYXMgYSBjb2RlLCBlLmcuLCBOVFA0IChzeW5jZWQgdG8gTlRQKS5cclxuICAgKi9cclxuICB2YWx1ZUNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgYWN0dWFsIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3Mgb2YgYSBkZXZpY2UgYXMgaXQgYWN0dWFsbHkgb3BlcmF0ZXMsIGUuZy4sIHJlZ3VsYXRpb24gc3RhdHVzLCB0aW1lIHByb3BlcnRpZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGV2aWNlRGVmaW5pdGlvblByb3BlcnR5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRGV2aWNlRGVmaW5pdGlvblByb3BlcnR5JztcclxuICAvKipcclxuICAgKiBDb2RlIHRoYXQgc3BlY2lmaWVzIHRoZSBwcm9wZXJ0eSBEZXZpY2VEZWZpbml0aW9uUHJvcGV0eUNvZGUgKEV4dGVuc2libGUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFByb3BlcnR5IHZhbHVlIGFzIGEgcXVhbnRpdHkuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlUXVhbnRpdHk6IGZoaXIuUXVhbnRpdHlbXTtcclxuICAvKipcclxuICAgKiBQcm9wZXJ0eSB2YWx1ZSBhcyBhIGNvZGUsIGUuZy4sIE5UUDQgKHN5bmNlZCB0byBOVFApLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB2YWx1ZUNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRGV2aWNlRGVmaW5pdGlvblByb3BlcnR5IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RGV2aWNlRGVmaW5pdGlvblByb3BlcnR5QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsndmFsdWVRdWFudGl0eSddKSB7IHRoaXMudmFsdWVRdWFudGl0eSA9IHNvdXJjZS52YWx1ZVF1YW50aXR5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUXVhbnRpdHkoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy52YWx1ZVF1YW50aXR5ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhbHVlQ29kZSddKSB7IHRoaXMudmFsdWVDb2RlID0gc291cmNlLnZhbHVlQ29kZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnZhbHVlQ29kZSA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0RldmljZURlZmluaXRpb24ucHJvcGVydHknIH1cclxuICAgIGlmICghdGhpc1sndHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0eXBlIGZoaXI6IERldmljZURlZmluaXRpb24ucHJvcGVydHkudHlwZTpDb2RlYWJsZUNvbmNlcHQnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy50eXBlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcInZhbHVlUXVhbnRpdHlcIl0pIHsgdGhpcy52YWx1ZVF1YW50aXR5LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC52YWx1ZVF1YW50aXR5WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInZhbHVlQ29kZVwiXSkgeyB0aGlzLnZhbHVlQ29kZS5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AudmFsdWVDb2RlWyR7aX1dYCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRGV2aWNlRGVmaW5pdGlvbk1hdGVyaWFsIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZURlZmluaXRpb25NYXRlcmlhbEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdWJzdGFuY2UuXHJcbiAgICovXHJcbiAgc3Vic3RhbmNlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgYW4gYWx0ZXJuYXRpdmUgbWF0ZXJpYWwgb2YgdGhlIGRldmljZS5cclxuICAgKi9cclxuICBhbHRlcm5hdGU/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VEZWZpbml0aW9uLm1hdGVyaWFsLmFsdGVybmF0ZVxyXG4gICAqL1xyXG4gIF9hbHRlcm5hdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIHN1YnN0YW5jZSBpcyBhIGtub3duIG9yIHN1c3BlY3RlZCBhbGxlcmdlbi5cclxuICAgKi9cclxuICBhbGxlcmdlbmljSW5kaWNhdG9yPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGV2aWNlRGVmaW5pdGlvbi5tYXRlcmlhbC5hbGxlcmdlbmljSW5kaWNhdG9yXHJcbiAgICovXHJcbiAgX2FsbGVyZ2VuaWNJbmRpY2F0b3I/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzdWJzdGFuY2UgdXNlZCB0byBjcmVhdGUgdGhlIG1hdGVyaWFsKHMpIG9mIHdoaWNoIHRoZSBkZXZpY2UgaXMgbWFkZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VEZWZpbml0aW9uTWF0ZXJpYWwgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdEZXZpY2VEZWZpbml0aW9uTWF0ZXJpYWwnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdWJzdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHN1YnN0YW5jZTogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgYW4gYWx0ZXJuYXRpdmUgbWF0ZXJpYWwgb2YgdGhlIGRldmljZS5cclxuICAgKi9cclxuICBwdWJsaWMgYWx0ZXJuYXRlPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgc3Vic3RhbmNlIGlzIGEga25vd24gb3Igc3VzcGVjdGVkIGFsbGVyZ2VuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhbGxlcmdlbmljSW5kaWNhdG9yPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRGV2aWNlRGVmaW5pdGlvbk1hdGVyaWFsIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RGV2aWNlRGVmaW5pdGlvbk1hdGVyaWFsQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3N1YnN0YW5jZSddKSB7IHRoaXMuc3Vic3RhbmNlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zdWJzdGFuY2UpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zdWJzdGFuY2UgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydhbHRlcm5hdGUnXSkgeyB0aGlzLmFsdGVybmF0ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmFsdGVybmF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfYWx0ZXJuYXRlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuYWx0ZXJuYXRlKSB7IHRoaXMuYWx0ZXJuYXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2FsdGVybmF0ZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmFsdGVybmF0ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fYWx0ZXJuYXRlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWxsZXJnZW5pY0luZGljYXRvciddKSB7IHRoaXMuYWxsZXJnZW5pY0luZGljYXRvciA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmFsbGVyZ2VuaWNJbmRpY2F0b3J9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2FsbGVyZ2VuaWNJbmRpY2F0b3InXSkge1xyXG4gICAgICBpZiAodGhpcy5hbGxlcmdlbmljSW5kaWNhdG9yKSB7IHRoaXMuYWxsZXJnZW5pY0luZGljYXRvci5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9hbGxlcmdlbmljSW5kaWNhdG9yISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuYWxsZXJnZW5pY0luZGljYXRvciA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fYWxsZXJnZW5pY0luZGljYXRvciBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRGV2aWNlRGVmaW5pdGlvbi5tYXRlcmlhbCcgfVxyXG4gICAgaWYgKCF0aGlzWydzdWJzdGFuY2UnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgc3Vic3RhbmNlIGZoaXI6IERldmljZURlZmluaXRpb24ubWF0ZXJpYWwuc3Vic3RhbmNlOkNvZGVhYmxlQ29uY2VwdCcsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wic3Vic3RhbmNlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3Vic3RhbmNlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5zdWJzdGFuY2UnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiYWx0ZXJuYXRlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuYWx0ZXJuYXRlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5hbHRlcm5hdGUnKSk7IH1cclxuICAgIGlmICh0aGlzW1wiYWxsZXJnZW5pY0luZGljYXRvclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmFsbGVyZ2VuaWNJbmRpY2F0b3IuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmFsbGVyZ2VuaWNJbmRpY2F0b3InKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBEZXZpY2VEZWZpbml0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZURlZmluaXRpb25BcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJEZXZpY2VEZWZpbml0aW9uXCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVuaXF1ZSBpbnN0YW5jZSBpZGVudGlmaWVycyBhc3NpZ25lZCB0byBhIGRldmljZSBieSB0aGUgc29mdHdhcmUsIG1hbnVmYWN0dXJlcnMsIG90aGVyIG9yZ2FuaXphdGlvbnMgb3Igb3duZXJzLiBGb3IgZXhhbXBsZTogaGFuZGxlIElELlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVuaXF1ZSBkZXZpY2UgaWRlbnRpZmllciAoVURJKSBhc3NpZ25lZCB0byBkZXZpY2UgbGFiZWwgb3IgcGFja2FnZS4gIE5vdGUgdGhhdCB0aGUgRGV2aWNlIG1heSBpbmNsdWRlIG11bHRpcGxlIHVkaUNhcnJpZXJzIGFzIGl0IGVpdGhlciBtYXkgaW5jbHVkZSBqdXN0IHRoZSB1ZGlDYXJyaWVyIGZvciB0aGUganVyaXNkaWN0aW9uIGl0IGlzIHNvbGQsIG9yIGZvciBtdWx0aXBsZSBqdXJpc2RpY3Rpb25zIGl0IGNvdWxkIGhhdmUgYmVlbiBzb2xkLlxyXG4gICAqL1xyXG4gIHVkaURldmljZUlkZW50aWZpZXI/OiBmaGlyLkRldmljZURlZmluaXRpb25VZGlEZXZpY2VJZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG5hbWUgb2YgdGhlIG1hbnVmYWN0dXJlci5cclxuICAgKi9cclxuICBtYW51ZmFjdHVyZXI/OiBmaGlyLkZoaXJTdHJpbmd8Zmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbmFtZSBvZiB0aGUgbWFudWZhY3R1cmVyLlxyXG4gICAqL1xyXG4gIG1hbnVmYWN0dXJlclN0cmluZz86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbmFtZSBvZiB0aGUgbWFudWZhY3R1cmVyLlxyXG4gICAqL1xyXG4gIG1hbnVmYWN0dXJlclJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBuYW1lIGdpdmVuIHRvIHRoZSBkZXZpY2UgdG8gaWRlbnRpZnkgaXQuXHJcbiAgICovXHJcbiAgZGV2aWNlTmFtZT86IGZoaXIuRGV2aWNlRGVmaW5pdGlvbkRldmljZU5hbWVBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtb2RlbCBudW1iZXIgZm9yIHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgbW9kZWxOdW1iZXI/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGV2aWNlRGVmaW5pdGlvbi5tb2RlbE51bWJlclxyXG4gICAqL1xyXG4gIF9tb2RlbE51bWJlcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogV2hhdCBraW5kIG9mIGRldmljZSBvciBkZXZpY2Ugc3lzdGVtIHRoaXMgaXMuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcGFiaWxpdGllcyBzdXBwb3J0ZWQgb24gYSAgZGV2aWNlLCB0aGUgc3RhbmRhcmRzIHRvIHdoaWNoIHRoZSBkZXZpY2UgY29uZm9ybXMgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlLCBhbmQgdXNlZCBmb3IgdGhlIGNvbW11bmljYXRpb24uXHJcbiAgICovXHJcbiAgc3BlY2lhbGl6YXRpb24/OiBmaGlyLkRldmljZURlZmluaXRpb25TcGVjaWFsaXphdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGF2YWlsYWJsZSB2ZXJzaW9ucyBvZiB0aGUgZGV2aWNlLCBlLmcuLCBzb2Z0d2FyZSB2ZXJzaW9ucy5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nW118c3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VEZWZpbml0aW9uLnZlcnNpb25cclxuICAgKi9cclxuICBfdmVyc2lvbj86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogU2FmZXR5IGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgZGV2aWNlLlxyXG4gICAqL1xyXG4gIHNhZmV0eT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTaGVsZiBMaWZlIGFuZCBzdG9yYWdlIGluZm9ybWF0aW9uLlxyXG4gICAqL1xyXG4gIHNoZWxmTGlmZVN0b3JhZ2U/OiBmaGlyLlByb2R1Y3RTaGVsZkxpZmVBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERpbWVuc2lvbnMsIGNvbG9yIGV0Yy5cclxuICAgKi9cclxuICBwaHlzaWNhbENoYXJhY3RlcmlzdGljcz86IGZoaXIuUHJvZENoYXJhY3RlcmlzdGljQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGFuZ3VhZ2UgY29kZSBmb3IgdGhlIGh1bWFuLXJlYWRhYmxlIHRleHQgc3RyaW5ncyBwcm9kdWNlZCBieSB0aGUgZGV2aWNlIChhbGwgc3VwcG9ydGVkKS5cclxuICAgKi9cclxuICBsYW5ndWFnZUNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGV2aWNlIGNhcGFiaWxpdGllcy5cclxuICAgKi9cclxuICBjYXBhYmlsaXR5PzogZmhpci5EZXZpY2VEZWZpbml0aW9uQ2FwYWJpbGl0eUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFjdHVhbCBjb25maWd1cmF0aW9uIHNldHRpbmdzIG9mIGEgZGV2aWNlIGFzIGl0IGFjdHVhbGx5IG9wZXJhdGVzLCBlLmcuLCByZWd1bGF0aW9uIHN0YXR1cywgdGltZSBwcm9wZXJ0aWVzLlxyXG4gICAqL1xyXG4gIHByb3BlcnR5PzogZmhpci5EZXZpY2VEZWZpbml0aW9uUHJvcGVydHlBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9yZ2FuaXphdGlvbiB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcHJvdmlzaW9uIGFuZCBvbmdvaW5nIG1haW50ZW5hbmNlIG9mIHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgb3duZXI/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIHVzZWQgZm9yIHRyb3VibGVzaG9vdGluZyBldGMuXHJcbiAgICovXHJcbiAgY29udGFjdD86IGZoaXIuQ29udGFjdFBvaW50QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiB0aGUgZGV2aWNlIGlzIHJ1bm5pbmcgYSBGSElSIHNlcnZlciwgdGhlIG5ldHdvcmsgYWRkcmVzcyBzaG91bGQgIGJlIHRoZSBCYXNlIFVSTCBmcm9tIHdoaWNoIGEgY29uZm9ybWFuY2Ugc3RhdGVtZW50IG1heSBiZSByZXRyaWV2ZWQuXHJcbiAgICovXHJcbiAgdXJsPzogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldmljZURlZmluaXRpb24udXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQWNjZXNzIHRvIG9uLWxpbmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGRldmljZS5cclxuICAgKi9cclxuICBvbmxpbmVJbmZvcm1hdGlvbj86IGZoaXIuRmhpclVyaXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VEZWZpbml0aW9uLm9ubGluZUluZm9ybWF0aW9uXHJcbiAgICovXHJcbiAgX29ubGluZUluZm9ybWF0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGl2ZSBpbmZvcm1hdGlvbiwgdXNhZ2UgaW5mb3JtYXRpb24gb3IgaW1wbGFudGF0aW9uIGluZm9ybWF0aW9uIHRoYXQgaXMgbm90IGNhcHR1cmVkIGluIGFuIGV4aXN0aW5nIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgbm90ZT86IGZoaXIuQW5ub3RhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHF1YW50aXR5IG9mIHRoZSBkZXZpY2UgcHJlc2VudCBpbiB0aGUgcGFja2FnaW5nIChlLmcuIHRoZSBudW1iZXIgb2YgZGV2aWNlcyBwcmVzZW50IGluIGEgcGFjaywgb3IgdGhlIG51bWJlciBvZiBkZXZpY2VzIGluIHRoZSBzYW1lIHBhY2thZ2Ugb2YgdGhlIG1lZGljaW5hbCBwcm9kdWN0KS5cclxuICAgKi9cclxuICBxdWFudGl0eT86IGZoaXIuUXVhbnRpdHlBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcGFyZW50IGRldmljZSBpdCBjYW4gYmUgcGFydCBvZi5cclxuICAgKi9cclxuICBwYXJlbnREZXZpY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc3Vic3RhbmNlIHVzZWQgdG8gY3JlYXRlIHRoZSBtYXRlcmlhbChzKSBvZiB3aGljaCB0aGUgZGV2aWNlIGlzIG1hZGUuXHJcbiAgICovXHJcbiAgbWF0ZXJpYWw/OiBmaGlyLkRldmljZURlZmluaXRpb25NYXRlcmlhbEFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgY2hhcmFjdGVyaXN0aWNzLCBvcGVyYXRpb25hbCBzdGF0dXMgYW5kIGNhcGFiaWxpdGllcyBvZiBhIG1lZGljYWwtcmVsYXRlZCBjb21wb25lbnQgb2YgYSBtZWRpY2FsIGRldmljZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VEZWZpbml0aW9uIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdEZXZpY2VEZWZpbml0aW9uJztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIkRldmljZURlZmluaXRpb25cIjtcclxuICAvKipcclxuICAgKiBVbmlxdWUgaW5zdGFuY2UgaWRlbnRpZmllcnMgYXNzaWduZWQgdG8gYSBkZXZpY2UgYnkgdGhlIHNvZnR3YXJlLCBtYW51ZmFjdHVyZXJzLCBvdGhlciBvcmdhbml6YXRpb25zIG9yIG93bmVycy4gRm9yIGV4YW1wbGU6IGhhbmRsZSBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogVW5pcXVlIGRldmljZSBpZGVudGlmaWVyIChVREkpIGFzc2lnbmVkIHRvIGRldmljZSBsYWJlbCBvciBwYWNrYWdlLiAgTm90ZSB0aGF0IHRoZSBEZXZpY2UgbWF5IGluY2x1ZGUgbXVsdGlwbGUgdWRpQ2FycmllcnMgYXMgaXQgZWl0aGVyIG1heSBpbmNsdWRlIGp1c3QgdGhlIHVkaUNhcnJpZXIgZm9yIHRoZSBqdXJpc2RpY3Rpb24gaXQgaXMgc29sZCwgb3IgZm9yIG11bHRpcGxlIGp1cmlzZGljdGlvbnMgaXQgY291bGQgaGF2ZSBiZWVuIHNvbGQuXHJcbiAgICovXHJcbiAgcHVibGljIHVkaURldmljZUlkZW50aWZpZXI6IGZoaXIuRGV2aWNlRGVmaW5pdGlvblVkaURldmljZUlkZW50aWZpZXJbXTtcclxuICAvKipcclxuICAgKiBBIG5hbWUgb2YgdGhlIG1hbnVmYWN0dXJlci5cclxuICAgKi9cclxuICBwdWJsaWMgbWFudWZhY3R1cmVyPzogKGZoaXIuRmhpclN0cmluZ3xmaGlyLlJlZmVyZW5jZSl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgRGV2aWNlRGVmaW5pdGlvbi5tYW51ZmFjdHVyZXJbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfbWFudWZhY3R1cmVySXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogQSBuYW1lIGdpdmVuIHRvIHRoZSBkZXZpY2UgdG8gaWRlbnRpZnkgaXQuXHJcbiAgICovXHJcbiAgcHVibGljIGRldmljZU5hbWU6IGZoaXIuRGV2aWNlRGVmaW5pdGlvbkRldmljZU5hbWVbXTtcclxuICAvKipcclxuICAgKiBUaGUgbW9kZWwgbnVtYmVyIGZvciB0aGUgZGV2aWNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb2RlbE51bWJlcj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hhdCBraW5kIG9mIGRldmljZSBvciBkZXZpY2Ugc3lzdGVtIHRoaXMgaXMuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcGFiaWxpdGllcyBzdXBwb3J0ZWQgb24gYSAgZGV2aWNlLCB0aGUgc3RhbmRhcmRzIHRvIHdoaWNoIHRoZSBkZXZpY2UgY29uZm9ybXMgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlLCBhbmQgdXNlZCBmb3IgdGhlIGNvbW11bmljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHNwZWNpYWxpemF0aW9uOiBmaGlyLkRldmljZURlZmluaXRpb25TcGVjaWFsaXphdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhdmFpbGFibGUgdmVyc2lvbnMgb2YgdGhlIGRldmljZSwgZS5nLiwgc29mdHdhcmUgdmVyc2lvbnMuXHJcbiAgICovXHJcbiAgcHVibGljIHZlcnNpb246IGZoaXIuRmhpclN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIFNhZmV0eSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGRldmljZS5cclxuICAgKi9cclxuICBwdWJsaWMgc2FmZXR5OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFNoZWxmIExpZmUgYW5kIHN0b3JhZ2UgaW5mb3JtYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHNoZWxmTGlmZVN0b3JhZ2U6IGZoaXIuUHJvZHVjdFNoZWxmTGlmZVtdO1xyXG4gIC8qKlxyXG4gICAqIERpbWVuc2lvbnMsIGNvbG9yIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgcGh5c2ljYWxDaGFyYWN0ZXJpc3RpY3M/OiBmaGlyLlByb2RDaGFyYWN0ZXJpc3RpY3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGFuZ3VhZ2UgY29kZSBmb3IgdGhlIGh1bWFuLXJlYWRhYmxlIHRleHQgc3RyaW5ncyBwcm9kdWNlZCBieSB0aGUgZGV2aWNlIChhbGwgc3VwcG9ydGVkKS5cclxuICAgKi9cclxuICBwdWJsaWMgbGFuZ3VhZ2VDb2RlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIERldmljZSBjYXBhYmlsaXRpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGNhcGFiaWxpdHk6IGZoaXIuRGV2aWNlRGVmaW5pdGlvbkNhcGFiaWxpdHlbXTtcclxuICAvKipcclxuICAgKiBUaGUgYWN0dWFsIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3Mgb2YgYSBkZXZpY2UgYXMgaXQgYWN0dWFsbHkgb3BlcmF0ZXMsIGUuZy4sIHJlZ3VsYXRpb24gc3RhdHVzLCB0aW1lIHByb3BlcnRpZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHByb3BlcnR5OiBmaGlyLkRldmljZURlZmluaXRpb25Qcm9wZXJ0eVtdO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9yZ2FuaXphdGlvbiB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcHJvdmlzaW9uIGFuZCBvbmdvaW5nIG1haW50ZW5hbmNlIG9mIHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgcHVibGljIG93bmVyPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIHVzZWQgZm9yIHRyb3VibGVzaG9vdGluZyBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhY3Q6IGZoaXIuQ29udGFjdFBvaW50W107XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIGRldmljZSBpcyBydW5uaW5nIGEgRkhJUiBzZXJ2ZXIsIHRoZSBuZXR3b3JrIGFkZHJlc3Mgc2hvdWxkICBiZSB0aGUgQmFzZSBVUkwgZnJvbSB3aGljaCBhIGNvbmZvcm1hbmNlIHN0YXRlbWVudCBtYXkgYmUgcmV0cmlldmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cmw/OiBmaGlyLkZoaXJVcml8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFjY2VzcyB0byBvbi1saW5lIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgcHVibGljIG9ubGluZUluZm9ybWF0aW9uPzogZmhpci5GaGlyVXJpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGl2ZSBpbmZvcm1hdGlvbiwgdXNhZ2UgaW5mb3JtYXRpb24gb3IgaW1wbGFudGF0aW9uIGluZm9ybWF0aW9uIHRoYXQgaXMgbm90IGNhcHR1cmVkIGluIGFuIGV4aXN0aW5nIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIG5vdGU6IGZoaXIuQW5ub3RhdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBxdWFudGl0eSBvZiB0aGUgZGV2aWNlIHByZXNlbnQgaW4gdGhlIHBhY2thZ2luZyAoZS5nLiB0aGUgbnVtYmVyIG9mIGRldmljZXMgcHJlc2VudCBpbiBhIHBhY2ssIG9yIHRoZSBudW1iZXIgb2YgZGV2aWNlcyBpbiB0aGUgc2FtZSBwYWNrYWdlIG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdCkuXHJcbiAgICovXHJcbiAgcHVibGljIHF1YW50aXR5PzogZmhpci5RdWFudGl0eXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBhcmVudCBkZXZpY2UgaXQgY2FuIGJlIHBhcnQgb2YuXHJcbiAgICovXHJcbiAgcHVibGljIHBhcmVudERldmljZT86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHN1YnN0YW5jZSB1c2VkIHRvIGNyZWF0ZSB0aGUgbWF0ZXJpYWwocykgb2Ygd2hpY2ggdGhlIGRldmljZSBpcyBtYWRlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYXRlcmlhbDogZmhpci5EZXZpY2VEZWZpbml0aW9uTWF0ZXJpYWxbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBEZXZpY2VEZWZpbml0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RGV2aWNlRGVmaW5pdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdEZXZpY2VEZWZpbml0aW9uJztcclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3VkaURldmljZUlkZW50aWZpZXInXSkgeyB0aGlzLnVkaURldmljZUlkZW50aWZpZXIgPSBzb3VyY2UudWRpRGV2aWNlSWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLkRldmljZURlZmluaXRpb25VZGlEZXZpY2VJZGVudGlmaWVyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudWRpRGV2aWNlSWRlbnRpZmllciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtYW51ZmFjdHVyZXInXSkgeyB0aGlzLm1hbnVmYWN0dXJlciA9IHNvdXJjZS5tYW51ZmFjdHVyZXI7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnbWFudWZhY3R1cmVyU3RyaW5nJ10pIHsgdGhpcy5tYW51ZmFjdHVyZXIgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm1hbnVmYWN0dXJlclN0cmluZ30pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ21hbnVmYWN0dXJlclJlZmVyZW5jZSddKSB7IHRoaXMubWFudWZhY3R1cmVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5tYW51ZmFjdHVyZXJSZWZlcmVuY2UpOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXZpY2VOYW1lJ10pIHsgdGhpcy5kZXZpY2VOYW1lID0gc291cmNlLmRldmljZU5hbWUubWFwKCh4KSA9PiBuZXcgZmhpci5EZXZpY2VEZWZpbml0aW9uRGV2aWNlTmFtZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRldmljZU5hbWUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbW9kZWxOdW1iZXInXSkgeyB0aGlzLm1vZGVsTnVtYmVyID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5tb2RlbE51bWJlcn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfbW9kZWxOdW1iZXInXSkge1xyXG4gICAgICBpZiAodGhpcy5tb2RlbE51bWJlcikgeyB0aGlzLm1vZGVsTnVtYmVyLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX21vZGVsTnVtYmVyISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubW9kZWxOdW1iZXIgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fbW9kZWxOdW1iZXIgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydzcGVjaWFsaXphdGlvbiddKSB7IHRoaXMuc3BlY2lhbGl6YXRpb24gPSBzb3VyY2Uuc3BlY2lhbGl6YXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5EZXZpY2VEZWZpbml0aW9uU3BlY2lhbGl6YXRpb24oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zcGVjaWFsaXphdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd2ZXJzaW9uJ10pIHsgdGhpcy52ZXJzaW9uID0gc291cmNlLnZlcnNpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudmVyc2lvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfdmVyc2lvbiddKSB7XHJcbiAgICAgIHNvdXJjZS5fdmVyc2lvbi5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMudmVyc2lvbltpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLnZlcnNpb24ucHVzaChuZXcgZmhpci5GaGlyU3RyaW5nKHggYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzYWZldHknXSkgeyB0aGlzLnNhZmV0eSA9IHNvdXJjZS5zYWZldHkubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zYWZldHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2hlbGZMaWZlU3RvcmFnZSddKSB7IHRoaXMuc2hlbGZMaWZlU3RvcmFnZSA9IHNvdXJjZS5zaGVsZkxpZmVTdG9yYWdlLm1hcCgoeCkgPT4gbmV3IGZoaXIuUHJvZHVjdFNoZWxmTGlmZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNoZWxmTGlmZVN0b3JhZ2UgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGh5c2ljYWxDaGFyYWN0ZXJpc3RpY3MnXSkgeyB0aGlzLnBoeXNpY2FsQ2hhcmFjdGVyaXN0aWNzID0gbmV3IGZoaXIuUHJvZENoYXJhY3RlcmlzdGljKHNvdXJjZS5waHlzaWNhbENoYXJhY3RlcmlzdGljcyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2xhbmd1YWdlQ29kZSddKSB7IHRoaXMubGFuZ3VhZ2VDb2RlID0gc291cmNlLmxhbmd1YWdlQ29kZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxhbmd1YWdlQ29kZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjYXBhYmlsaXR5J10pIHsgdGhpcy5jYXBhYmlsaXR5ID0gc291cmNlLmNhcGFiaWxpdHkubWFwKCh4KSA9PiBuZXcgZmhpci5EZXZpY2VEZWZpbml0aW9uQ2FwYWJpbGl0eSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNhcGFiaWxpdHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvcGVydHknXSkgeyB0aGlzLnByb3BlcnR5ID0gc291cmNlLnByb3BlcnR5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuRGV2aWNlRGVmaW5pdGlvblByb3BlcnR5KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucHJvcGVydHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb3duZXInXSkgeyB0aGlzLm93bmVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5vd25lcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRhY3QnXSkgeyB0aGlzLmNvbnRhY3QgPSBzb3VyY2UuY29udGFjdC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvbnRhY3RQb2ludCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRhY3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndXJsJ10pIHsgdGhpcy51cmwgPSBuZXcgZmhpci5GaGlyVXJpKHt2YWx1ZTogc291cmNlLnVybH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdXJsJ10pIHtcclxuICAgICAgaWYgKHRoaXMudXJsKSB7IHRoaXMudXJsLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3VybCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJVcmkoc291cmNlLl91cmwgYXMgUGFydGlhbDxmaGlyLkZoaXJVcmlBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ29ubGluZUluZm9ybWF0aW9uJ10pIHsgdGhpcy5vbmxpbmVJbmZvcm1hdGlvbiA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2Uub25saW5lSW5mb3JtYXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX29ubGluZUluZm9ybWF0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMub25saW5lSW5mb3JtYXRpb24pIHsgdGhpcy5vbmxpbmVJbmZvcm1hdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9vbmxpbmVJbmZvcm1hdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm9ubGluZUluZm9ybWF0aW9uID0gbmV3IGZoaXIuRmhpclVyaShzb3VyY2UuX29ubGluZUluZm9ybWF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyVXJpQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydub3RlJ10pIHsgdGhpcy5ub3RlID0gc291cmNlLm5vdGUubWFwKCh4KSA9PiBuZXcgZmhpci5Bbm5vdGF0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubm90ZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydxdWFudGl0eSddKSB7IHRoaXMucXVhbnRpdHkgPSBuZXcgZmhpci5RdWFudGl0eShzb3VyY2UucXVhbnRpdHkpOyB9XHJcbiAgICBpZiAoc291cmNlWydwYXJlbnREZXZpY2UnXSkgeyB0aGlzLnBhcmVudERldmljZSA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UucGFyZW50RGV2aWNlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWF0ZXJpYWwnXSkgeyB0aGlzLm1hdGVyaWFsID0gc291cmNlLm1hdGVyaWFsLm1hcCgoeCkgPT4gbmV3IGZoaXIuRGV2aWNlRGVmaW5pdGlvbk1hdGVyaWFsKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubWF0ZXJpYWwgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdEZXZpY2VEZWZpbml0aW9uJyB9XHJcbiAgICBpZiAoIXRoaXNbJ3Jlc291cmNlVHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZVR5cGUgZmhpcjogRGV2aWNlRGVmaW5pdGlvbi5yZXNvdXJjZVR5cGU6XCJEZXZpY2VEZWZpbml0aW9uXCInLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImlkZW50aWZpZXJcIl0pIHsgdGhpcy5pZGVudGlmaWVyLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5pZGVudGlmaWVyWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInVkaURldmljZUlkZW50aWZpZXJcIl0pIHsgdGhpcy51ZGlEZXZpY2VJZGVudGlmaWVyLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC51ZGlEZXZpY2VJZGVudGlmaWVyWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImRldmljZU5hbWVcIl0pIHsgdGhpcy5kZXZpY2VOYW1lLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5kZXZpY2VOYW1lWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcIm1vZGVsTnVtYmVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubW9kZWxOdW1iZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLm1vZGVsTnVtYmVyJykpOyB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy50eXBlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcInNwZWNpYWxpemF0aW9uXCJdKSB7IHRoaXMuc3BlY2lhbGl6YXRpb24uZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnNwZWNpYWxpemF0aW9uWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInZlcnNpb25cIl0pIHsgdGhpcy52ZXJzaW9uLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC52ZXJzaW9uWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInNhZmV0eVwiXSkgeyB0aGlzLnNhZmV0eS5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2Auc2FmZXR5WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInNoZWxmTGlmZVN0b3JhZ2VcIl0pIHsgdGhpcy5zaGVsZkxpZmVTdG9yYWdlLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5zaGVsZkxpZmVTdG9yYWdlWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInBoeXNpY2FsQ2hhcmFjdGVyaXN0aWNzXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucGh5c2ljYWxDaGFyYWN0ZXJpc3RpY3MuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnBoeXNpY2FsQ2hhcmFjdGVyaXN0aWNzJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImxhbmd1YWdlQ29kZVwiXSkgeyB0aGlzLmxhbmd1YWdlQ29kZS5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AubGFuZ3VhZ2VDb2RlWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImNhcGFiaWxpdHlcIl0pIHsgdGhpcy5jYXBhYmlsaXR5LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5jYXBhYmlsaXR5WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInByb3BlcnR5XCJdKSB7IHRoaXMucHJvcGVydHkuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnByb3BlcnR5WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcIm93bmVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMub3duZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLm93bmVyJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRhY3RcIl0pIHsgdGhpcy5jb250YWN0LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5jb250YWN0WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInVybFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnVybC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycudXJsJykpOyB9XHJcbiAgICBpZiAodGhpc1tcIm9ubGluZUluZm9ybWF0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMub25saW5lSW5mb3JtYXRpb24uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLm9ubGluZUluZm9ybWF0aW9uJykpOyB9XHJcbiAgICBpZiAodGhpc1tcIm5vdGVcIl0pIHsgdGhpcy5ub3RlLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5ub3RlWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInF1YW50aXR5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucXVhbnRpdHkuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnF1YW50aXR5JykpOyB9XHJcbiAgICBpZiAodGhpc1tcInBhcmVudERldmljZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnBhcmVudERldmljZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycucGFyZW50RGV2aWNlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcIm1hdGVyaWFsXCJdKSB7IHRoaXMubWF0ZXJpYWwuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLm1hdGVyaWFsWyR7aX1dYCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=