// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { DeviceNametypeCodings, } from '../fhirValueSets/DeviceNametypeCodings.js';
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export class DeviceDefinitionUdiDeviceIdentifier extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionUdiDeviceIdentifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['deviceIdentifier']) {
            this.deviceIdentifier = new fhir.FhirString({ value: source.deviceIdentifier });
        }
        else {
            this.deviceIdentifier = null;
        }
        if (source['issuer']) {
            this.issuer = new fhir.FhirUri({ value: source.issuer });
        }
        else {
            this.issuer = null;
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.FhirUri({ value: source.jurisdiction });
        }
        else {
            this.jurisdiction = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['deviceIdentifier']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property deviceIdentifier:fhir.FhirString fhir: DeviceDefinition.udiDeviceIdentifier.deviceIdentifier:string', });
        }
        if (this["deviceIdentifier"]) {
            issues.push(...this.deviceIdentifier.doModelValidation());
        }
        if (!this['issuer']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property issuer:fhir.FhirUri fhir: DeviceDefinition.udiDeviceIdentifier.issuer:uri', });
        }
        if (this["issuer"]) {
            issues.push(...this.issuer.doModelValidation());
        }
        if (!this['jurisdiction']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property jurisdiction:fhir.FhirUri fhir: DeviceDefinition.udiDeviceIdentifier.jurisdiction:uri', });
        }
        if (this["jurisdiction"]) {
            issues.push(...this.jurisdiction.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionUdiDeviceIdentifier._fts_dataType = 'DeviceDefinitionUdiDeviceIdentifier';
/**
 * A name given to the device to identify it.
 */
export class DeviceDefinitionDeviceName extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionDeviceName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
    }
    /**
     * Required-bound Value Set for type (DeviceDefinition.deviceName.type)
     */
    static typeRequiredCoding() {
        return DeviceNametypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: DeviceDefinition.deviceName.name:string', });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:DeviceNametypeCodeType fhir: DeviceDefinition.deviceName.type:code', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionDeviceName._fts_dataType = 'DeviceDefinitionDeviceName';
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceDefinitionSpecialization extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionSpecialization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['systemType']) {
            this.systemType = new fhir.FhirString({ value: source.systemType });
        }
        else {
            this.systemType = null;
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['systemType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property systemType:fhir.FhirString fhir: DeviceDefinition.specialization.systemType:string', });
        }
        if (this["systemType"]) {
            issues.push(...this.systemType.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionSpecialization._fts_dataType = 'DeviceDefinitionSpecialization';
/**
 * Device capabilities.
 */
export class DeviceDefinitionCapability extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['description']) {
            this.description = source.description.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.description = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: DeviceDefinition.capability.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["description"]) {
            this.description.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionCapability._fts_dataType = 'DeviceDefinitionCapability';
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceDefinitionProperty extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['valueQuantity']) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x));
        }
        else {
            this.valueQuantity = [];
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.valueCode = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: DeviceDefinition.property.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["valueQuantity"]) {
            this.valueQuantity.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["valueCode"]) {
            this.valueCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionProperty._fts_dataType = 'DeviceDefinitionProperty';
/**
 * A substance used to create the material(s) of which the device is made.
 */
export class DeviceDefinitionMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        else {
            this.substance = null;
        }
        if (source['alternate']) {
            this.alternate = new fhir.FhirBoolean({ value: source.alternate });
        }
        if (source['allergenicIndicator']) {
            this.allergenicIndicator = new fhir.FhirBoolean({ value: source.allergenicIndicator });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['substance']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property substance:fhir.CodeableConcept fhir: DeviceDefinition.material.substance:CodeableConcept', });
        }
        if (this["substance"]) {
            issues.push(...this.substance.doModelValidation());
        }
        if (this["alternate"]) {
            issues.push(...this.alternate.doModelValidation());
        }
        if (this["allergenicIndicator"]) {
            issues.push(...this.allergenicIndicator.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionMaterial._fts_dataType = 'DeviceDefinitionMaterial';
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceDefinition extends fhir.DomainResource {
    /**
     * Default constructor for DeviceDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['udiDeviceIdentifier']) {
            this.udiDeviceIdentifier = source.udiDeviceIdentifier.map((x) => new fhir.DeviceDefinitionUdiDeviceIdentifier(x));
        }
        else {
            this.udiDeviceIdentifier = [];
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer;
        }
        else if (source['manufacturerString']) {
            this.manufacturer = new fhir.FhirString({ value: source.manufacturerString });
        }
        else if (source['manufacturerReference']) {
            this.manufacturer = new fhir.Reference(source.manufacturerReference);
        }
        if (source['deviceName']) {
            this.deviceName = source.deviceName.map((x) => new fhir.DeviceDefinitionDeviceName(x));
        }
        else {
            this.deviceName = [];
        }
        if (source['modelNumber']) {
            this.modelNumber = new fhir.FhirString({ value: source.modelNumber });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['specialization']) {
            this.specialization = source.specialization.map((x) => new fhir.DeviceDefinitionSpecialization(x));
        }
        else {
            this.specialization = [];
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.version = [];
        }
        if (source['safety']) {
            this.safety = source.safety.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.safety = [];
        }
        if (source['shelfLifeStorage']) {
            this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x));
        }
        else {
            this.shelfLifeStorage = [];
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['languageCode']) {
            this.languageCode = source.languageCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.languageCode = [];
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.DeviceDefinitionCapability(x));
        }
        else {
            this.capability = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.DeviceDefinitionProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.contact = [];
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['onlineInformation']) {
            this.onlineInformation = new fhir.FhirUri({ value: source.onlineInformation });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['parentDevice']) {
            this.parentDevice = new fhir.Reference(source.parentDevice);
        }
        if (source['material']) {
            this.material = source.material.map((x) => new fhir.DeviceDefinitionMaterial(x));
        }
        else {
            this.material = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DeviceDefinition" fhir: DeviceDefinition.resourceType:"DeviceDefinition"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["udiDeviceIdentifier"]) {
            this.udiDeviceIdentifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["deviceName"]) {
            this.deviceName.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["modelNumber"]) {
            issues.push(...this.modelNumber.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["specialization"]) {
            this.specialization.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            this.version.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["safety"]) {
            this.safety.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["shelfLifeStorage"]) {
            this.shelfLifeStorage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["physicalCharacteristics"]) {
            issues.push(...this.physicalCharacteristics.doModelValidation());
        }
        if (this["languageCode"]) {
            this.languageCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["capability"]) {
            this.capability.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["owner"]) {
            issues.push(...this.owner.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["onlineInformation"]) {
            issues.push(...this.onlineInformation.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["parentDevice"]) {
            issues.push(...this.parentDevice.doModelValidation());
        }
        if (this["material"]) {
            this.material.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinition._fts_dataType = 'DeviceDefinition';
/**
 * Internal flag to properly serialize choice-type element DeviceDefinition.manufacturer[x]
 */
DeviceDefinition._fts_manufacturerIsChoice = true;
//# sourceMappingURL=data:application/json;base64,