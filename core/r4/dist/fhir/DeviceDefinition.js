// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { DeviceNametypeVsValidation } from '../fhirValueSets/DeviceNametypeVsValidation.js';
/**
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export class DeviceDefinitionUdiDeviceIdentifier extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionUdiDeviceIdentifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['deviceIdentifier'] !== undefined) {
            this.deviceIdentifier = new fhir.FhirString({ value: source.deviceIdentifier }, options);
        }
        else {
            this.deviceIdentifier = null;
        }
        if (source['_deviceIdentifier']) {
            if (this.deviceIdentifier) {
                this.deviceIdentifier.addExtendedProperties(source._deviceIdentifier);
            }
            else {
                this.deviceIdentifier = new fhir.FhirString(source._deviceIdentifier, options);
            }
        }
        if (source['issuer'] !== undefined) {
            this.issuer = new fhir.FhirUri({ value: source.issuer }, options);
        }
        else {
            this.issuer = null;
        }
        if (source['_issuer']) {
            if (this.issuer) {
                this.issuer.addExtendedProperties(source._issuer);
            }
            else {
                this.issuer = new fhir.FhirUri(source._issuer, options);
            }
        }
        if (source['jurisdiction'] !== undefined) {
            this.jurisdiction = new fhir.FhirUri({ value: source.jurisdiction }, options);
        }
        else {
            this.jurisdiction = null;
        }
        if (source['_jurisdiction']) {
            if (this.jurisdiction) {
                this.jurisdiction.addExtendedProperties(source._jurisdiction);
            }
            else {
                this.jurisdiction = new fhir.FhirUri(source._jurisdiction, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceDefinition.udiDeviceIdentifier';
        }
        iss.push(...this.vRS('deviceIdentifier', exp));
        iss.push(...this.vRS('issuer', exp));
        iss.push(...this.vRS('jurisdiction', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionUdiDeviceIdentifier._fts_dataType = 'DeviceDefinitionUdiDeviceIdentifier';
/**
 * A name given to the device to identify it.
 */
export class DeviceDefinitionDeviceName extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionDeviceName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceDefinition.deviceName';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vRSV('type', exp, 'DeviceNametype', DeviceNametypeVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionDeviceName._fts_dataType = 'DeviceDefinitionDeviceName';
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceDefinitionSpecialization extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionSpecialization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['systemType'] !== undefined) {
            this.systemType = new fhir.FhirString({ value: source.systemType }, options);
        }
        else {
            this.systemType = null;
        }
        if (source['_systemType']) {
            if (this.systemType) {
                this.systemType.addExtendedProperties(source._systemType);
            }
            else {
                this.systemType = new fhir.FhirString(source._systemType, options);
            }
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceDefinition.specialization';
        }
        iss.push(...this.vRS('systemType', exp));
        iss.push(...this.vOS('version', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionSpecialization._fts_dataType = 'DeviceDefinitionSpecialization';
/**
 * Device capabilities.
 */
export class DeviceDefinitionCapability extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['description']) {
            this.description = source.description.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.description = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceDefinition.capability';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOA('description', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionCapability._fts_dataType = 'DeviceDefinitionCapability';
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceDefinitionProperty extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['valueQuantity']) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x, options));
        }
        else {
            this.valueQuantity = [];
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.valueCode = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceDefinition.property';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOA('valueQuantity', exp));
        iss.push(...this.vOA('valueCode', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionProperty._fts_dataType = 'DeviceDefinitionProperty';
/**
 * A substance used to create the material(s) of which the device is made.
 */
export class DeviceDefinitionMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDefinitionMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance, options);
        }
        else {
            this.substance = null;
        }
        if (source['alternate'] !== undefined) {
            this.alternate = new fhir.FhirBoolean({ value: source.alternate }, options);
        }
        if (source['_alternate']) {
            if (this.alternate) {
                this.alternate.addExtendedProperties(source._alternate);
            }
            else {
                this.alternate = new fhir.FhirBoolean(source._alternate, options);
            }
        }
        if (source['allergenicIndicator'] !== undefined) {
            this.allergenicIndicator = new fhir.FhirBoolean({ value: source.allergenicIndicator }, options);
        }
        if (source['_allergenicIndicator']) {
            if (this.allergenicIndicator) {
                this.allergenicIndicator.addExtendedProperties(source._allergenicIndicator);
            }
            else {
                this.allergenicIndicator = new fhir.FhirBoolean(source._allergenicIndicator, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceDefinition.material';
        }
        iss.push(...this.vRS('substance', exp));
        iss.push(...this.vOS('alternate', exp));
        iss.push(...this.vOS('allergenicIndicator', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinitionMaterial._fts_dataType = 'DeviceDefinitionMaterial';
/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export class DeviceDefinition extends fhir.DomainResource {
    /**
     * Default constructor for DeviceDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceDefinition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['udiDeviceIdentifier']) {
            this.udiDeviceIdentifier = source.udiDeviceIdentifier.map((x) => new fhir.DeviceDefinitionUdiDeviceIdentifier(x, options));
        }
        else {
            this.udiDeviceIdentifier = [];
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer;
        }
        else if (source['manufacturerString'] !== undefined) {
            this.manufacturer = new fhir.FhirString({ value: source.manufacturerString }, options);
        }
        else if (source['manufacturerReference']) {
            this.manufacturer = new fhir.Reference(source.manufacturerReference, options);
        }
        if (source['deviceName']) {
            this.deviceName = source.deviceName.map((x) => new fhir.DeviceDefinitionDeviceName(x, options));
        }
        else {
            this.deviceName = [];
        }
        if (source['modelNumber'] !== undefined) {
            this.modelNumber = new fhir.FhirString({ value: source.modelNumber }, options);
        }
        if (source['_modelNumber']) {
            if (this.modelNumber) {
                this.modelNumber.addExtendedProperties(source._modelNumber);
            }
            else {
                this.modelNumber = new fhir.FhirString(source._modelNumber, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['specialization']) {
            this.specialization = source.specialization.map((x) => new fhir.DeviceDefinitionSpecialization(x, options));
        }
        else {
            this.specialization = [];
        }
        if (source['version'] !== undefined) {
            this.version = source.version.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.version = [];
        }
        if (source['_version']) {
            source._version.forEach((x, i) => {
                if (this.version.length >= i) {
                    if (x) {
                        this.version[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.version.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['safety']) {
            this.safety = source.safety.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.safety = [];
        }
        if (source['shelfLifeStorage']) {
            this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x, options));
        }
        else {
            this.shelfLifeStorage = [];
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics, options);
        }
        if (source['languageCode']) {
            this.languageCode = source.languageCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.languageCode = [];
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.DeviceDefinitionCapability(x, options));
        }
        else {
            this.capability = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.DeviceDefinitionProperty(x, options));
        }
        else {
            this.property = [];
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner, options);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['onlineInformation'] !== undefined) {
            this.onlineInformation = new fhir.FhirUri({ value: source.onlineInformation }, options);
        }
        if (source['_onlineInformation']) {
            if (this.onlineInformation) {
                this.onlineInformation.addExtendedProperties(source._onlineInformation);
            }
            else {
                this.onlineInformation = new fhir.FhirUri(source._onlineInformation, options);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['parentDevice']) {
            this.parentDevice = new fhir.Reference(source.parentDevice, options);
        }
        if (source['material']) {
            this.material = source.material.map((x) => new fhir.DeviceDefinitionMaterial(x, options));
        }
        else {
            this.material = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DeviceDefinition';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('udiDeviceIdentifier', exp));
        iss.push(...this.vOS('manufacturer', exp));
        iss.push(...this.vOA('deviceName', exp));
        iss.push(...this.vOS('modelNumber', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('specialization', exp));
        iss.push(...this.vOA('version', exp));
        iss.push(...this.vOA('safety', exp));
        iss.push(...this.vOA('shelfLifeStorage', exp));
        iss.push(...this.vOS('physicalCharacteristics', exp));
        iss.push(...this.vOA('languageCode', exp));
        iss.push(...this.vOA('capability', exp));
        iss.push(...this.vOA('property', exp));
        iss.push(...this.vOS('owner', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('onlineInformation', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('parentDevice', exp));
        iss.push(...this.vOA('material', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDefinition._fts_dataType = 'DeviceDefinition';
/**
 * Internal flag to properly serialize choice-type element DeviceDefinition.manufacturer[x]
 */
DeviceDefinition._fts_manufacturerIsChoice = true;
//# sourceMappingURL=data:application/json;base64,