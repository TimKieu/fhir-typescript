/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { DiagnosticReportStatusCodings } from '../fhirValueSets/DiagnosticReportStatusCodings.js';
import { ReportCodesCodings } from '../fhirValueSets/ReportCodesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { FhirInstant } from './FhirInstant.js';
import { Attachment } from './Attachment.js';

// <auto-generated/>
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
var DiagnosticReportMedia = /** @class */ (function (_super) {
    __extends(DiagnosticReportMedia, _super);
    /**
     * Default constructor for DiagnosticReportMedia - initializes any required elements to null if a value is not provided.
     */
    function DiagnosticReportMedia(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        if (source['link']) {
            _this.link = new Reference(source.link);
        }
        else {
            _this.link = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DiagnosticReportMedia.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["comment"]) {
            (_a = outcome.issue).push.apply(_a, this.comment.doModelValidation().issue);
        }
        if (!this['link']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property link:fhir.Reference fhir: DiagnosticReport.media.link:Reference', }));
        }
        if (this["link"]) {
            (_b = outcome.issue).push.apply(_b, this.link.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DiagnosticReportMedia._fts_dataType = 'DiagnosticReportMedia';
    return DiagnosticReportMedia;
}(BackboneElement));
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
var DiagnosticReport = /** @class */ (function (_super) {
    __extends(DiagnosticReport, _super);
    /**
     * Default constructor for DiagnosticReport - initializes any required elements to null if a value is not provided.
     */
    function DiagnosticReport(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'DiagnosticReport';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['effective']) {
            _this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            _this.effective = new FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            _this.effective = new Period(source.effectivePeriod);
        }
        if (source['issued']) {
            _this.issued = new FhirInstant({ value: source.issued });
        }
        if (source['performer']) {
            _this.performer = source.performer.map(function (x) { return new Reference(x); });
        }
        else {
            _this.performer = [];
        }
        if (source['resultsInterpreter']) {
            _this.resultsInterpreter = source.resultsInterpreter.map(function (x) { return new Reference(x); });
        }
        else {
            _this.resultsInterpreter = [];
        }
        if (source['specimen']) {
            _this.specimen = source.specimen.map(function (x) { return new Reference(x); });
        }
        else {
            _this.specimen = [];
        }
        if (source['result']) {
            _this.result = source.result.map(function (x) { return new Reference(x); });
        }
        else {
            _this.result = [];
        }
        if (source['imagingStudy']) {
            _this.imagingStudy = source.imagingStudy.map(function (x) { return new Reference(x); });
        }
        else {
            _this.imagingStudy = [];
        }
        if (source['media']) {
            _this.media = source.media.map(function (x) { return new DiagnosticReportMedia(x); });
        }
        else {
            _this.media = [];
        }
        if (source['conclusion']) {
            _this.conclusion = new FhirString({ value: source.conclusion });
        }
        if (source['conclusionCode']) {
            _this.conclusionCode = source.conclusionCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.conclusionCode = [];
        }
        if (source['presentedForm']) {
            _this.presentedForm = source.presentedForm.map(function (x) { return new Attachment(x); });
        }
        else {
            _this.presentedForm = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (DiagnosticReport.status)
     */
    DiagnosticReport.statusRequiredCoding = function () {
        return DiagnosticReportStatusCodings;
    };
    /**
     * Preferred-bound Value Set for code (DiagnosticReport.code)
     */
    DiagnosticReport.codePreferredCoding = function () {
        return ReportCodesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DiagnosticReport.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"DiagnosticReport" fhir: DiagnosticReport.resourceType:"DiagnosticReport"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:DiagnosticReportStatusCodeType fhir: DiagnosticReport.status:code', }));
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: DiagnosticReport.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_c = outcome.issue).push.apply(_c, this.encounter.doModelValidation().issue);
        }
        if (this["issued"]) {
            (_d = outcome.issue).push.apply(_d, this.issued.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["resultsInterpreter"]) {
            this.resultsInterpreter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["specimen"]) {
            this.specimen.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["result"]) {
            this.result.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["imagingStudy"]) {
            this.imagingStudy.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["media"]) {
            this.media.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["conclusion"]) {
            (_e = outcome.issue).push.apply(_e, this.conclusion.doModelValidation().issue);
        }
        if (this["conclusionCode"]) {
            this.conclusionCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["presentedForm"]) {
            this.presentedForm.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DiagnosticReport._fts_dataType = 'DiagnosticReport';
    /**
     * Internal flag to properly serialize choice-type element DiagnosticReport.effective[x]
     */
    DiagnosticReport._fts_effectiveIsChoice = true;
    return DiagnosticReport;
}(DomainResource));

export { DiagnosticReport, DiagnosticReportMedia };
//# sourceMappingURL=DiagnosticReport.js.map
