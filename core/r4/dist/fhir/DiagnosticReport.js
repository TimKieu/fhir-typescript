// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DiagnosticReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { DiagnosticReportStatusCodes } from '../fhirValueSets/DiagnosticReportStatusCodes.js';
// @ts-ignore
import { ReportCodesCodings, } from '../fhirValueSets/ReportCodesCodings.js';
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
export class DiagnosticReportMedia extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticReportMedia - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['link']) {
            this.link = new fhir.Reference(source.link);
        }
        else {
            this.link = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        if (!this['link']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property link:fhir.Reference fhir: DiagnosticReport.media.link:Reference' });
        }
        if (this["link"]) {
            issues.push(...this.link.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReportMedia._fts_dataType = 'DiagnosticReportMedia';
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export class DiagnosticReport extends fhir.DomainResource {
    /**
     * Default constructor for DiagnosticReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DiagnosticReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirInstant({ value: source.issued });
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['resultsInterpreter']) {
            this.resultsInterpreter = source.resultsInterpreter.map((x) => new fhir.Reference(x));
        }
        else {
            this.resultsInterpreter = [];
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['result']) {
            this.result = source.result.map((x) => new fhir.Reference(x));
        }
        else {
            this.result = [];
        }
        if (source['imagingStudy']) {
            this.imagingStudy = source.imagingStudy.map((x) => new fhir.Reference(x));
        }
        else {
            this.imagingStudy = [];
        }
        if (source['media']) {
            this.media = source.media.map((x) => new fhir.DiagnosticReportMedia(x));
        }
        else {
            this.media = [];
        }
        if (source['conclusion']) {
            this.conclusion = new fhir.FhirString({ value: source.conclusion });
        }
        if (source['conclusionCode']) {
            this.conclusionCode = source.conclusionCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.conclusionCode = [];
        }
        if (source['presentedForm']) {
            this.presentedForm = source.presentedForm.map((x) => new fhir.Attachment(x));
        }
        else {
            this.presentedForm = [];
        }
    }
    /**
     * Required-bound Value Set for status (DiagnosticReport.status)
     */
    static get statusRequiredCodes() {
        return DiagnosticReportStatusCodes;
    }
    /**
     * Preferred-bound Value Set for code (DiagnosticReport.code)
     */
    static get codePreferredCodings() {
        return ReportCodesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DiagnosticReport" fhir: DiagnosticReport.resourceType:"DiagnosticReport"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<DiagnosticReportStatusCodeType> fhir: DiagnosticReport.status:code' });
        }
        if (this['status'] && (!Object.values(DiagnosticReportStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<DiagnosticReportStatusCodeType> fhir: DiagnosticReport.status:code Required binding to: DiagnosticReportStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: DiagnosticReport.code:CodeableConcept' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["issued"]) {
            issues.push(...this.issued.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["resultsInterpreter"]) {
            this.resultsInterpreter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["specimen"]) {
            this.specimen.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["result"]) {
            this.result.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["imagingStudy"]) {
            this.imagingStudy.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["media"]) {
            this.media.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["conclusion"]) {
            issues.push(...this.conclusion.doModelValidation());
        }
        if (this["conclusionCode"]) {
            this.conclusionCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["presentedForm"]) {
            this.presentedForm.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReport._fts_dataType = 'DiagnosticReport';
/**
 * Internal flag to properly serialize choice-type element DiagnosticReport.effective[x]
 */
DiagnosticReport._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,