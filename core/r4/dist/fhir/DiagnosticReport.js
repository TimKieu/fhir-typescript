// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DiagnosticReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { DiagnosticReportStatusVsValidation } from '../fhirValueSets/DiagnosticReportStatusVsValidation.js';
/**
 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
export class DiagnosticReportMedia extends fhir.BackboneElement {
    /**
     * Default constructor for DiagnosticReportMedia - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['link']) {
            this.link = new fhir.Reference(source.link);
        }
        else {
            this.link = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DiagnosticReport.media';
        }
        this.vOptS('comment', expression);
        this.vReqS('link', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReportMedia._fts_dataType = 'DiagnosticReportMedia';
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export class DiagnosticReport extends fhir.DomainResource {
    /**
     * Default constructor for DiagnosticReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DiagnosticReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirInstant({ value: source.issued });
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirInstant(source._issued);
            }
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['resultsInterpreter']) {
            this.resultsInterpreter = source.resultsInterpreter.map((x) => new fhir.Reference(x));
        }
        else {
            this.resultsInterpreter = [];
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['result']) {
            this.result = source.result.map((x) => new fhir.Reference(x));
        }
        else {
            this.result = [];
        }
        if (source['imagingStudy']) {
            this.imagingStudy = source.imagingStudy.map((x) => new fhir.Reference(x));
        }
        else {
            this.imagingStudy = [];
        }
        if (source['media']) {
            this.media = source.media.map((x) => new fhir.DiagnosticReportMedia(x));
        }
        else {
            this.media = [];
        }
        if (source['conclusion']) {
            this.conclusion = new fhir.FhirString({ value: source.conclusion });
        }
        if (source['_conclusion']) {
            if (this.conclusion) {
                this.conclusion.addExtendedProperties(source._conclusion);
            }
            else {
                this.conclusion = new fhir.FhirString(source._conclusion);
            }
        }
        if (source['conclusionCode']) {
            this.conclusionCode = source.conclusionCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.conclusionCode = [];
        }
        if (source['presentedForm']) {
            this.presentedForm = source.presentedForm.map((x) => new fhir.Attachment(x));
        }
        else {
            this.presentedForm = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DiagnosticReport';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vOptA('basedOn', expression);
        this.vReqSV('status', expression, 'DiagnosticReportStatus', DiagnosticReportStatusVsValidation, 'r');
        this.vOptA('category', expression);
        this.vReqS('code', expression);
        this.vOptS('subject', expression);
        this.vOptS('encounter', expression);
        this.vOptS('effective', expression);
        this.vOptS('issued', expression);
        this.vOptA('performer', expression);
        this.vOptA('resultsInterpreter', expression);
        this.vOptA('specimen', expression);
        this.vOptA('result', expression);
        this.vOptA('imagingStudy', expression);
        this.vOptA('media', expression);
        this.vOptS('conclusion', expression);
        this.vOptA('conclusionCode', expression);
        this.vOptA('presentedForm', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DiagnosticReport._fts_dataType = 'DiagnosticReport';
/**
 * Internal flag to properly serialize choice-type element DiagnosticReport.effective[x]
 */
DiagnosticReport._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,