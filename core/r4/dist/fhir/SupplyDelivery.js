/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SupplydeliveryStatusCodings } from '../fhirValueSets/SupplydeliveryStatusCodings.js';
import { SupplydeliveryTypeCodings } from '../fhirValueSets/SupplydeliveryTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Quantity } from './Quantity.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Timing } from './Timing.js';

// <auto-generated/>
/**
 * The item that is being delivered or has been supplied.
 */
var SupplyDeliverySuppliedItem = /** @class */ (function (_super) {
    __extends(SupplyDeliverySuppliedItem, _super);
    /**
     * Default constructor for SupplyDeliverySuppliedItem - initializes any required elements to null if a value is not provided.
     */
    function SupplyDeliverySuppliedItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['item']) {
            _this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            _this.item = new CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            _this.item = new Reference(source.itemReference);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SupplyDeliverySuppliedItem.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["quantity"]) {
            (_a = outcome.issue).push.apply(_a, this.quantity.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SupplyDeliverySuppliedItem._fts_dataType = 'SupplyDeliverySuppliedItem';
    /**
     * Internal flag to properly serialize choice-type element SupplyDelivery.suppliedItem.item[x]
     */
    SupplyDeliverySuppliedItem._fts_itemIsChoice = true;
    return SupplyDeliverySuppliedItem;
}(BackboneElement));
/**
 * Record of delivery of what is supplied.
 */
var SupplyDelivery = /** @class */ (function (_super) {
    __extends(SupplyDelivery, _super);
    /**
     * Default constructor for SupplyDelivery - initializes any required elements to null if a value is not provided.
     */
    function SupplyDelivery(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SupplyDelivery';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['suppliedItem']) {
            _this.suppliedItem = new SupplyDeliverySuppliedItem(source.suppliedItem);
        }
        if (source['occurrence']) {
            _this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            _this.occurrence = new FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            _this.occurrence = new Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            _this.occurrence = new Timing(source.occurrenceTiming);
        }
        if (source['supplier']) {
            _this.supplier = new Reference(source.supplier);
        }
        if (source['destination']) {
            _this.destination = new Reference(source.destination);
        }
        if (source['receiver']) {
            _this.receiver = source.receiver.map(function (x) { return new Reference(x); });
        }
        else {
            _this.receiver = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (SupplyDelivery.status)
     */
    SupplyDelivery.statusRequiredCoding = function () {
        return SupplydeliveryStatusCodings;
    };
    /**
     * Required-bound Value Set for type (SupplyDelivery.type)
     */
    SupplyDelivery.typeRequiredCoding = function () {
        return SupplydeliveryTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SupplyDelivery.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SupplyDelivery" fhir: SupplyDelivery.resourceType:"SupplyDelivery"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["patient"]) {
            (_a = outcome.issue).push.apply(_a, this.patient.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["suppliedItem"]) {
            (_c = outcome.issue).push.apply(_c, this.suppliedItem.doModelValidation().issue);
        }
        if (this["supplier"]) {
            (_d = outcome.issue).push.apply(_d, this.supplier.doModelValidation().issue);
        }
        if (this["destination"]) {
            (_e = outcome.issue).push.apply(_e, this.destination.doModelValidation().issue);
        }
        if (this["receiver"]) {
            this.receiver.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SupplyDelivery._fts_dataType = 'SupplyDelivery';
    /**
     * Internal flag to properly serialize choice-type element SupplyDelivery.occurrence[x]
     */
    SupplyDelivery._fts_occurrenceIsChoice = true;
    return SupplyDelivery;
}(DomainResource));

export { SupplyDelivery, SupplyDeliverySuppliedItem };
//# sourceMappingURL=SupplyDelivery.js.map
