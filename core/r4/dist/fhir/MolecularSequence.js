// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MolecularSequence
import * as fhir from '../fhir.js';
// @ts-ignore
import { OrientationTypeCodings, } from '../fhirValueSets/OrientationTypeCodings.js';
// @ts-ignore
import { StrandTypeCodings, } from '../fhirValueSets/StrandTypeCodings.js';
// @ts-ignore
import { QualityTypeCodings, } from '../fhirValueSets/QualityTypeCodings.js';
// @ts-ignore
import { RepositoryTypeCodings, } from '../fhirValueSets/RepositoryTypeCodings.js';
// @ts-ignore
import { SequenceTypeCodings, } from '../fhirValueSets/SequenceTypeCodings.js';
/**
 * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
 */
export class MolecularSequenceReferenceSeq extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceReferenceSeq - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['chromosome']) {
            this.chromosome = new fhir.CodeableConcept(source.chromosome);
        }
        if (source['genomeBuild']) {
            this.genomeBuild = new fhir.FhirString({ value: source.genomeBuild });
        }
        if (source['orientation']) {
            this.orientation = source.orientation;
        }
        if (source['referenceSeqId']) {
            this.referenceSeqId = new fhir.CodeableConcept(source.referenceSeqId);
        }
        if (source['referenceSeqPointer']) {
            this.referenceSeqPointer = new fhir.Reference(source.referenceSeqPointer);
        }
        if (source['referenceSeqString']) {
            this.referenceSeqString = new fhir.FhirString({ value: source.referenceSeqString });
        }
        if (source['strand']) {
            this.strand = source.strand;
        }
        if (source['windowStart']) {
            this.windowStart = new fhir.FhirInteger({ value: source.windowStart });
        }
        if (source['windowEnd']) {
            this.windowEnd = new fhir.FhirInteger({ value: source.windowEnd });
        }
    }
    /**
     * Required-bound Value Set for orientation (MolecularSequence.referenceSeq.orientation)
     */
    static orientationRequiredCoding() {
        return OrientationTypeCodings;
    }
    /**
     * Required-bound Value Set for strand (MolecularSequence.referenceSeq.strand)
     */
    static strandRequiredCoding() {
        return StrandTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["chromosome"]) {
            issues.push(...this.chromosome.doModelValidation());
        }
        if (this["genomeBuild"]) {
            issues.push(...this.genomeBuild.doModelValidation());
        }
        if (this["referenceSeqId"]) {
            issues.push(...this.referenceSeqId.doModelValidation());
        }
        if (this["referenceSeqPointer"]) {
            issues.push(...this.referenceSeqPointer.doModelValidation());
        }
        if (this["referenceSeqString"]) {
            issues.push(...this.referenceSeqString.doModelValidation());
        }
        if (this["windowStart"]) {
            issues.push(...this.windowStart.doModelValidation());
        }
        if (this["windowEnd"]) {
            issues.push(...this.windowEnd.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceReferenceSeq._fts_dataType = 'MolecularSequenceReferenceSeq';
/**
 * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
 */
export class MolecularSequenceVariant extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceVariant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
        if (source['observedAllele']) {
            this.observedAllele = new fhir.FhirString({ value: source.observedAllele });
        }
        if (source['referenceAllele']) {
            this.referenceAllele = new fhir.FhirString({ value: source.referenceAllele });
        }
        if (source['cigar']) {
            this.cigar = new fhir.FhirString({ value: source.cigar });
        }
        if (source['variantPointer']) {
            this.variantPointer = new fhir.Reference(source.variantPointer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["start"]) {
            issues.push(...this.start.doModelValidation());
        }
        if (this["end"]) {
            issues.push(...this.end.doModelValidation());
        }
        if (this["observedAllele"]) {
            issues.push(...this.observedAllele.doModelValidation());
        }
        if (this["referenceAllele"]) {
            issues.push(...this.referenceAllele.doModelValidation());
        }
        if (this["cigar"]) {
            issues.push(...this.cigar.doModelValidation());
        }
        if (this["variantPointer"]) {
            issues.push(...this.variantPointer.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceVariant._fts_dataType = 'MolecularSequenceVariant';
/**
 * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
 */
export class MolecularSequenceQualityRoc extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceQualityRoc - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['score']) {
            this.score = source.score.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.score = [];
        }
        if (source['numTP']) {
            this.numTP = source.numTP.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.numTP = [];
        }
        if (source['numFP']) {
            this.numFP = source.numFP.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.numFP = [];
        }
        if (source['numFN']) {
            this.numFN = source.numFN.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.numFN = [];
        }
        if (source['precision']) {
            this.precision = source.precision.map((x) => new fhir.FhirDecimal({ value: x }));
        }
        else {
            this.precision = [];
        }
        if (source['sensitivity']) {
            this.sensitivity = source.sensitivity.map((x) => new fhir.FhirDecimal({ value: x }));
        }
        else {
            this.sensitivity = [];
        }
        if (source['fMeasure']) {
            this.fMeasure = source.fMeasure.map((x) => new fhir.FhirDecimal({ value: x }));
        }
        else {
            this.fMeasure = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["score"]) {
            this.score.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["numTP"]) {
            this.numTP.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["numFP"]) {
            this.numFP.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["numFN"]) {
            this.numFN.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["precision"]) {
            this.precision.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["sensitivity"]) {
            this.sensitivity.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["fMeasure"]) {
            this.fMeasure.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceQualityRoc._fts_dataType = 'MolecularSequenceQualityRoc';
/**
 * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
 */
export class MolecularSequenceQuality extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceQuality - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['standardSequence']) {
            this.standardSequence = new fhir.CodeableConcept(source.standardSequence);
        }
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
        if (source['score']) {
            this.score = new fhir.Quantity(source.score);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['truthTP']) {
            this.truthTP = new fhir.FhirDecimal({ value: source.truthTP });
        }
        if (source['queryTP']) {
            this.queryTP = new fhir.FhirDecimal({ value: source.queryTP });
        }
        if (source['truthFN']) {
            this.truthFN = new fhir.FhirDecimal({ value: source.truthFN });
        }
        if (source['queryFP']) {
            this.queryFP = new fhir.FhirDecimal({ value: source.queryFP });
        }
        if (source['gtFP']) {
            this.gtFP = new fhir.FhirDecimal({ value: source.gtFP });
        }
        if (source['precision']) {
            this.precision = new fhir.FhirDecimal({ value: source.precision });
        }
        if (source['recall']) {
            this.recall = new fhir.FhirDecimal({ value: source.recall });
        }
        if (source['fScore']) {
            this.fScore = new fhir.FhirDecimal({ value: source.fScore });
        }
        if (source['roc']) {
            this.roc = new fhir.MolecularSequenceQualityRoc(source.roc);
        }
    }
    /**
     * Required-bound Value Set for type (MolecularSequence.quality.type)
     */
    static typeRequiredCoding() {
        return QualityTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:QualityTypeCodeType fhir: MolecularSequence.quality.type:code', });
        }
        if (this["standardSequence"]) {
            issues.push(...this.standardSequence.doModelValidation());
        }
        if (this["start"]) {
            issues.push(...this.start.doModelValidation());
        }
        if (this["end"]) {
            issues.push(...this.end.doModelValidation());
        }
        if (this["score"]) {
            issues.push(...this.score.doModelValidation());
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation());
        }
        if (this["truthTP"]) {
            issues.push(...this.truthTP.doModelValidation());
        }
        if (this["queryTP"]) {
            issues.push(...this.queryTP.doModelValidation());
        }
        if (this["truthFN"]) {
            issues.push(...this.truthFN.doModelValidation());
        }
        if (this["queryFP"]) {
            issues.push(...this.queryFP.doModelValidation());
        }
        if (this["gtFP"]) {
            issues.push(...this.gtFP.doModelValidation());
        }
        if (this["precision"]) {
            issues.push(...this.precision.doModelValidation());
        }
        if (this["recall"]) {
            issues.push(...this.recall.doModelValidation());
        }
        if (this["fScore"]) {
            issues.push(...this.fScore.doModelValidation());
        }
        if (this["roc"]) {
            issues.push(...this.roc.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceQuality._fts_dataType = 'MolecularSequenceQuality';
/**
 * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
 */
export class MolecularSequenceRepository extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceRepository - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['datasetId']) {
            this.datasetId = new fhir.FhirString({ value: source.datasetId });
        }
        if (source['variantsetId']) {
            this.variantsetId = new fhir.FhirString({ value: source.variantsetId });
        }
        if (source['readsetId']) {
            this.readsetId = new fhir.FhirString({ value: source.readsetId });
        }
    }
    /**
     * Required-bound Value Set for type (MolecularSequence.repository.type)
     */
    static typeRequiredCoding() {
        return RepositoryTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:RepositoryTypeCodeType fhir: MolecularSequence.repository.type:code', });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["datasetId"]) {
            issues.push(...this.datasetId.doModelValidation());
        }
        if (this["variantsetId"]) {
            issues.push(...this.variantsetId.doModelValidation());
        }
        if (this["readsetId"]) {
            issues.push(...this.readsetId.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceRepository._fts_dataType = 'MolecularSequenceRepository';
/**
 * Structural variant outer.
 */
export class MolecularSequenceStructureVariantOuter extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariantOuter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["start"]) {
            issues.push(...this.start.doModelValidation());
        }
        if (this["end"]) {
            issues.push(...this.end.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceStructureVariantOuter._fts_dataType = 'MolecularSequenceStructureVariantOuter';
/**
 * Structural variant inner.
 */
export class MolecularSequenceStructureVariantInner extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariantInner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['start']) {
            this.start = new fhir.FhirInteger({ value: source.start });
        }
        if (source['end']) {
            this.end = new fhir.FhirInteger({ value: source.end });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["start"]) {
            issues.push(...this.start.doModelValidation());
        }
        if (this["end"]) {
            issues.push(...this.end.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceStructureVariantInner._fts_dataType = 'MolecularSequenceStructureVariantInner';
/**
 * Information about chromosome structure variation.
 */
export class MolecularSequenceStructureVariant extends fhir.BackboneElement {
    /**
     * Default constructor for MolecularSequenceStructureVariant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['variantType']) {
            this.variantType = new fhir.CodeableConcept(source.variantType);
        }
        if (source['exact']) {
            this.exact = new fhir.FhirBoolean({ value: source.exact });
        }
        if (source['length']) {
            this.length = new fhir.FhirInteger({ value: source.length });
        }
        if (source['outer']) {
            this.outer = new fhir.MolecularSequenceStructureVariantOuter(source.outer);
        }
        if (source['inner']) {
            this.inner = new fhir.MolecularSequenceStructureVariantInner(source.inner);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["variantType"]) {
            issues.push(...this.variantType.doModelValidation());
        }
        if (this["exact"]) {
            issues.push(...this.exact.doModelValidation());
        }
        if (this["length"]) {
            issues.push(...this.length.doModelValidation());
        }
        if (this["outer"]) {
            issues.push(...this.outer.doModelValidation());
        }
        if (this["inner"]) {
            issues.push(...this.inner.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequenceStructureVariant._fts_dataType = 'MolecularSequenceStructureVariant';
/**
 * Raw data describing a biological sequence.
 */
export class MolecularSequence extends fhir.DomainResource {
    /**
     * Default constructor for MolecularSequence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MolecularSequence';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['coordinateSystem']) {
            this.coordinateSystem = new fhir.FhirInteger({ value: source.coordinateSystem });
        }
        else {
            this.coordinateSystem = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['specimen']) {
            this.specimen = new fhir.Reference(source.specimen);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['referenceSeq']) {
            this.referenceSeq = new fhir.MolecularSequenceReferenceSeq(source.referenceSeq);
        }
        if (source['variant']) {
            this.variant = source.variant.map((x) => new fhir.MolecularSequenceVariant(x));
        }
        else {
            this.variant = [];
        }
        if (source['observedSeq']) {
            this.observedSeq = new fhir.FhirString({ value: source.observedSeq });
        }
        if (source['quality']) {
            this.quality = source.quality.map((x) => new fhir.MolecularSequenceQuality(x));
        }
        else {
            this.quality = [];
        }
        if (source['readCoverage']) {
            this.readCoverage = new fhir.FhirInteger({ value: source.readCoverage });
        }
        if (source['repository']) {
            this.repository = source.repository.map((x) => new fhir.MolecularSequenceRepository(x));
        }
        else {
            this.repository = [];
        }
        if (source['pointer']) {
            this.pointer = source.pointer.map((x) => new fhir.Reference(x));
        }
        else {
            this.pointer = [];
        }
        if (source['structureVariant']) {
            this.structureVariant = source.structureVariant.map((x) => new fhir.MolecularSequenceStructureVariant(x));
        }
        else {
            this.structureVariant = [];
        }
    }
    /**
     * Required-bound Value Set for type (MolecularSequence.type)
     */
    static typeRequiredCoding() {
        return SequenceTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MolecularSequence" fhir: MolecularSequence.resourceType:"MolecularSequence"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['coordinateSystem']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property coordinateSystem:fhir.FhirInteger fhir: MolecularSequence.coordinateSystem:integer', });
        }
        if (this["coordinateSystem"]) {
            issues.push(...this.coordinateSystem.doModelValidation());
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["specimen"]) {
            issues.push(...this.specimen.doModelValidation());
        }
        if (this["device"]) {
            issues.push(...this.device.doModelValidation());
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation());
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["referenceSeq"]) {
            issues.push(...this.referenceSeq.doModelValidation());
        }
        if (this["variant"]) {
            this.variant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["observedSeq"]) {
            issues.push(...this.observedSeq.doModelValidation());
        }
        if (this["quality"]) {
            this.quality.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["readCoverage"]) {
            issues.push(...this.readCoverage.doModelValidation());
        }
        if (this["repository"]) {
            this.repository.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["pointer"]) {
            this.pointer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["structureVariant"]) {
            this.structureVariant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MolecularSequence._fts_dataType = 'MolecularSequence';
//# sourceMappingURL=data:application/json;base64,