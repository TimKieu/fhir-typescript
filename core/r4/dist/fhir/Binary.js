// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Binary
import * as fhir from '../fhir.js';
/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
export class Binary extends fhir.Resource {
    /**
     * Default constructor for Binary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Binary';
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        else {
            this.contentType = null;
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['securityContext']) {
            this.securityContext = new fhir.Reference(source.securityContext);
        }
        if (source['data']) {
            this.data = new fhir.FhirBase64Binary({ value: source.data });
        }
        if (source['_data']) {
            if (this.data) {
                this.data.addExtendedProperties(source._data);
            }
            else {
                this.data = new fhir.FhirBase64Binary(source._data);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Binary" fhir: Binary.resourceType:"Binary"' });
        }
        if (!this['contentType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property contentType:fhir.FhirCode fhir: Binary.contentType:code' });
        }
        if (this["contentType"]) {
            issues.push(...this.contentType.doModelValidation());
        }
        if (this["securityContext"]) {
            issues.push(...this.securityContext.doModelValidation());
        }
        if (this["data"]) {
            issues.push(...this.data.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Binary._fts_dataType = 'Binary';
//# sourceMappingURL=data:application/json;base64,