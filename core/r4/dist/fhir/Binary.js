/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { Resource } from './Resource.js';
import { FhirCode } from './FhirCode.js';
import { Reference } from './Reference.js';
import { FhirBase64Binary } from './FhirBase64Binary.js';

// <auto-generated/>
/**
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
var Binary = /** @class */ (function (_super) {
    __extends(Binary, _super);
    /**
     * Default constructor for Binary - initializes any required elements to null if a value is not provided.
     */
    function Binary(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Binary';
        if (source['contentType']) {
            _this.contentType = new FhirCode({ value: source.contentType });
        }
        else {
            _this.contentType = null;
        }
        if (source['securityContext']) {
            _this.securityContext = new Reference(source.securityContext);
        }
        if (source['data']) {
            _this.data = new FhirBase64Binary({ value: source.data });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Binary.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Binary" fhir: Binary.resourceType:"Binary"', }));
        }
        if (!this['contentType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property contentType:fhir.FhirCode fhir: Binary.contentType:code', }));
        }
        if (this["contentType"]) {
            (_a = outcome.issue).push.apply(_a, this.contentType.doModelValidation().issue);
        }
        if (this["securityContext"]) {
            (_b = outcome.issue).push.apply(_b, this.securityContext.doModelValidation().issue);
        }
        if (this["data"]) {
            (_c = outcome.issue).push.apply(_c, this.data.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Binary._fts_dataType = 'Binary';
    return Binary;
}(Resource));

export { Binary };
//# sourceMappingURL=Binary.js.map
