/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { OperationParameterUseCodings } from '../fhirValueSets/OperationParameterUseCodings.js';
import { AllTypesCodings } from '../fhirValueSets/AllTypesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirElement } from './FhirElement.js';
import { FhirCode } from './FhirCode.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirString } from './FhirString.js';
import { FhirCanonical } from './FhirCanonical.js';

// <auto-generated/>
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
var ParameterDefinition = /** @class */ (function (_super) {
    __extends(ParameterDefinition, _super);
    /**
     * Default constructor for ParameterDefinition - initializes any required elements to null if a value is not provided.
     */
    function ParameterDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirCode({ value: source.name });
        }
        if (source['use']) {
            _this.use = source.use;
        }
        else {
            _this.use = null;
        }
        if (source['min']) {
            _this.min = new FhirInteger({ value: source.min });
        }
        if (source['max']) {
            _this.max = new FhirString({ value: source.max });
        }
        if (source['documentation']) {
            _this.documentation = new FhirString({ value: source.documentation });
        }
        if (source['type']) {
            _this.type = new FhirCode({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['profile']) {
            _this.profile = new FhirCanonical({ value: source.profile });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for use (ParameterDefinition.use)
     */
    ParameterDefinition.useRequiredCoding = function () {
        return OperationParameterUseCodings;
    };
    /**
     * Required-bound Value Set for type (ParameterDefinition.type)
     */
    ParameterDefinition.typeRequiredCoding = function () {
        return AllTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ParameterDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (!this['use']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property use:OperationParameterUseCodeType fhir: ParameterDefinition.use:code', }));
        }
        if (this["min"]) {
            (_b = outcome.issue).push.apply(_b, this.min.doModelValidation().issue);
        }
        if (this["max"]) {
            (_c = outcome.issue).push.apply(_c, this.max.doModelValidation().issue);
        }
        if (this["documentation"]) {
            (_d = outcome.issue).push.apply(_d, this.documentation.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirCode fhir: ParameterDefinition.type:code', }));
        }
        if (this["type"]) {
            (_e = outcome.issue).push.apply(_e, this.type.doModelValidation().issue);
        }
        if (this["profile"]) {
            (_f = outcome.issue).push.apply(_f, this.profile.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ParameterDefinition._fts_dataType = 'ParameterDefinition';
    return ParameterDefinition;
}(FhirElement));

export { ParameterDefinition };
//# sourceMappingURL=ParameterDefinition.js.map
