// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ParameterDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { OperationParameterUseVsValidation } from '../fhirValueSets/OperationParameterUseVsValidation.js';
// @ts-ignore
import { AllTypesVsValidation } from '../fhirValueSets/AllTypesVsValidation.js';
/**
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export class ParameterDefinition extends fhir.FhirElement {
    /**
     * Default constructor for ParameterDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirCode({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirCode(source._name, options);
            }
        }
        if (source['use'] !== undefined) {
            this.use = new fhir.FhirCode({ value: source.use }, options);
        }
        else {
            this.use = null;
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use, options);
            }
        }
        if (source['min'] !== undefined) {
            this.min = new fhir.FhirInteger({ value: source.min }, options);
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirInteger(source._min, options);
            }
        }
        if (source['max'] !== undefined) {
            this.max = new fhir.FhirString({ value: source.max }, options);
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max, options);
            }
        }
        if (source['documentation'] !== undefined) {
            this.documentation = new fhir.FhirString({ value: source.documentation }, options);
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['profile'] !== undefined) {
            this.profile = new fhir.FhirCanonical({ value: source.profile }, options);
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirCanonical(source._profile, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ParameterDefinition';
        }
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRSV('use', exp, 'OperationParameterUse', OperationParameterUseVsValidation, 'r'));
        iss.push(...this.vOS('min', exp));
        iss.push(...this.vOS('max', exp));
        iss.push(...this.vOS('documentation', exp));
        iss.push(...this.vRSV('type', exp, 'AllTypes', AllTypesVsValidation, 'r'));
        iss.push(...this.vOS('profile', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ParameterDefinition._fts_dataType = 'ParameterDefinition';
//# sourceMappingURL=data:application/json;base64,