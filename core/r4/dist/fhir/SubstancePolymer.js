/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirBoolean } from './FhirBoolean.js';
import { SubstanceAmount } from './SubstanceAmount.js';
import { FhirString } from './FhirString.js';
import { Attachment } from './Attachment.js';
import { FhirInteger } from './FhirInteger.js';

// <auto-generated/>
/**
 * Todo.
 */
var SubstancePolymerMonomerSetStartingMaterial = /** @class */ (function (_super) {
    __extends(SubstancePolymerMonomerSetStartingMaterial, _super);
    /**
     * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
     */
    function SubstancePolymerMonomerSetStartingMaterial(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['material']) {
            _this.material = new CodeableConcept(source.material);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['isDefining']) {
            _this.isDefining = new FhirBoolean({ value: source.isDefining });
        }
        if (source['amount']) {
            _this.amount = new SubstanceAmount(source.amount);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstancePolymerMonomerSetStartingMaterial.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["material"]) {
            (_a = outcome.issue).push.apply(_a, this.material.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["isDefining"]) {
            (_c = outcome.issue).push.apply(_c, this.isDefining.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_d = outcome.issue).push.apply(_d, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstancePolymerMonomerSetStartingMaterial._fts_dataType = 'SubstancePolymerMonomerSetStartingMaterial';
    return SubstancePolymerMonomerSetStartingMaterial;
}(BackboneElement));
/**
 * Todo.
 */
var SubstancePolymerMonomerSet = /** @class */ (function (_super) {
    __extends(SubstancePolymerMonomerSet, _super);
    /**
     * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
     */
    function SubstancePolymerMonomerSet(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['ratioType']) {
            _this.ratioType = new CodeableConcept(source.ratioType);
        }
        if (source['startingMaterial']) {
            _this.startingMaterial = source.startingMaterial.map(function (x) { return new SubstancePolymerMonomerSetStartingMaterial(x); });
        }
        else {
            _this.startingMaterial = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstancePolymerMonomerSet.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["ratioType"]) {
            (_a = outcome.issue).push.apply(_a, this.ratioType.doModelValidation().issue);
        }
        if (this["startingMaterial"]) {
            this.startingMaterial.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstancePolymerMonomerSet._fts_dataType = 'SubstancePolymerMonomerSet';
    return SubstancePolymerMonomerSet;
}(BackboneElement));
/**
 * Todo.
 */
var SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation = /** @class */ (function (_super) {
    __extends(SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation, _super);
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
     */
    function SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['degree']) {
            _this.degree = new CodeableConcept(source.degree);
        }
        if (source['amount']) {
            _this.amount = new SubstanceAmount(source.amount);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["degree"]) {
            (_a = outcome.issue).push.apply(_a, this.degree.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_b = outcome.issue).push.apply(_b, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation';
    return SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation;
}(BackboneElement));
/**
 * Todo.
 */
var SubstancePolymerRepeatRepeatUnitStructuralRepresentation = /** @class */ (function (_super) {
    __extends(SubstancePolymerRepeatRepeatUnitStructuralRepresentation, _super);
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
     */
    function SubstancePolymerRepeatRepeatUnitStructuralRepresentation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['representation']) {
            _this.representation = new FhirString({ value: source.representation });
        }
        if (source['attachment']) {
            _this.attachment = new Attachment(source.attachment);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstancePolymerRepeatRepeatUnitStructuralRepresentation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["representation"]) {
            (_b = outcome.issue).push.apply(_b, this.representation.doModelValidation().issue);
        }
        if (this["attachment"]) {
            (_c = outcome.issue).push.apply(_c, this.attachment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstancePolymerRepeatRepeatUnitStructuralRepresentation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitStructuralRepresentation';
    return SubstancePolymerRepeatRepeatUnitStructuralRepresentation;
}(BackboneElement));
/**
 * Todo.
 */
var SubstancePolymerRepeatRepeatUnit = /** @class */ (function (_super) {
    __extends(SubstancePolymerRepeatRepeatUnit, _super);
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
     */
    function SubstancePolymerRepeatRepeatUnit(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['orientationOfPolymerisation']) {
            _this.orientationOfPolymerisation = new CodeableConcept(source.orientationOfPolymerisation);
        }
        if (source['repeatUnit']) {
            _this.repeatUnit = new FhirString({ value: source.repeatUnit });
        }
        if (source['amount']) {
            _this.amount = new SubstanceAmount(source.amount);
        }
        if (source['degreeOfPolymerisation']) {
            _this.degreeOfPolymerisation = source.degreeOfPolymerisation.map(function (x) { return new SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x); });
        }
        else {
            _this.degreeOfPolymerisation = [];
        }
        if (source['structuralRepresentation']) {
            _this.structuralRepresentation = source.structuralRepresentation.map(function (x) { return new SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x); });
        }
        else {
            _this.structuralRepresentation = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstancePolymerRepeatRepeatUnit.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["orientationOfPolymerisation"]) {
            (_a = outcome.issue).push.apply(_a, this.orientationOfPolymerisation.doModelValidation().issue);
        }
        if (this["repeatUnit"]) {
            (_b = outcome.issue).push.apply(_b, this.repeatUnit.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_c = outcome.issue).push.apply(_c, this.amount.doModelValidation().issue);
        }
        if (this["degreeOfPolymerisation"]) {
            this.degreeOfPolymerisation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["structuralRepresentation"]) {
            this.structuralRepresentation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstancePolymerRepeatRepeatUnit._fts_dataType = 'SubstancePolymerRepeatRepeatUnit';
    return SubstancePolymerRepeatRepeatUnit;
}(BackboneElement));
/**
 * Todo.
 */
var SubstancePolymerRepeat = /** @class */ (function (_super) {
    __extends(SubstancePolymerRepeat, _super);
    /**
     * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
     */
    function SubstancePolymerRepeat(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['numberOfUnits']) {
            _this.numberOfUnits = new FhirInteger({ value: source.numberOfUnits });
        }
        if (source['averageMolecularFormula']) {
            _this.averageMolecularFormula = new FhirString({ value: source.averageMolecularFormula });
        }
        if (source['repeatUnitAmountType']) {
            _this.repeatUnitAmountType = new CodeableConcept(source.repeatUnitAmountType);
        }
        if (source['repeatUnit']) {
            _this.repeatUnit = source.repeatUnit.map(function (x) { return new SubstancePolymerRepeatRepeatUnit(x); });
        }
        else {
            _this.repeatUnit = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstancePolymerRepeat.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["numberOfUnits"]) {
            (_a = outcome.issue).push.apply(_a, this.numberOfUnits.doModelValidation().issue);
        }
        if (this["averageMolecularFormula"]) {
            (_b = outcome.issue).push.apply(_b, this.averageMolecularFormula.doModelValidation().issue);
        }
        if (this["repeatUnitAmountType"]) {
            (_c = outcome.issue).push.apply(_c, this.repeatUnitAmountType.doModelValidation().issue);
        }
        if (this["repeatUnit"]) {
            this.repeatUnit.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstancePolymerRepeat._fts_dataType = 'SubstancePolymerRepeat';
    return SubstancePolymerRepeat;
}(BackboneElement));
/**
 * Todo.
 */
var SubstancePolymer = /** @class */ (function (_super) {
    __extends(SubstancePolymer, _super);
    /**
     * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
     */
    function SubstancePolymer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SubstancePolymer';
        if (source['class']) {
            _this.class = new CodeableConcept(source.class);
        }
        if (source['geometry']) {
            _this.geometry = new CodeableConcept(source.geometry);
        }
        if (source['copolymerConnectivity']) {
            _this.copolymerConnectivity = source.copolymerConnectivity.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.copolymerConnectivity = [];
        }
        if (source['modification']) {
            _this.modification = source.modification.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.modification = [];
        }
        if (source['monomerSet']) {
            _this.monomerSet = source.monomerSet.map(function (x) { return new SubstancePolymerMonomerSet(x); });
        }
        else {
            _this.monomerSet = [];
        }
        if (source['repeat']) {
            _this.repeat = source.repeat.map(function (x) { return new SubstancePolymerRepeat(x); });
        }
        else {
            _this.repeat = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstancePolymer.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SubstancePolymer" fhir: SubstancePolymer.resourceType:"SubstancePolymer"', }));
        }
        if (this["class"]) {
            (_a = outcome.issue).push.apply(_a, this.class.doModelValidation().issue);
        }
        if (this["geometry"]) {
            (_b = outcome.issue).push.apply(_b, this.geometry.doModelValidation().issue);
        }
        if (this["copolymerConnectivity"]) {
            this.copolymerConnectivity.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["modification"]) {
            this.modification.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["monomerSet"]) {
            this.monomerSet.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["repeat"]) {
            this.repeat.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstancePolymer._fts_dataType = 'SubstancePolymer';
    return SubstancePolymer;
}(DomainResource));

export { SubstancePolymer, SubstancePolymerMonomerSet, SubstancePolymerMonomerSetStartingMaterial, SubstancePolymerRepeat, SubstancePolymerRepeatRepeatUnit, SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation, SubstancePolymerRepeatRepeatUnitStructuralRepresentation };
//# sourceMappingURL=SubstancePolymer.js.map
