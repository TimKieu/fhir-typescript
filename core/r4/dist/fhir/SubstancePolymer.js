// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstancePolymer
import * as fhir from '../fhir.js';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['material']) {
            this.material = new fhir.CodeableConcept(source.material);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['isDefining']) {
            this.isDefining = new fhir.FhirBoolean({ value: source.isDefining });
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["material"]) {
            issues.push(...this.material.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["isDefining"]) {
            issues.push(...this.isDefining.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerMonomerSetStartingMaterial._fts_dataType = 'SubstancePolymerMonomerSetStartingMaterial';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['ratioType']) {
            this.ratioType = new fhir.CodeableConcept(source.ratioType);
        }
        if (source['startingMaterial']) {
            this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x));
        }
        else {
            this.startingMaterial = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["ratioType"]) {
            issues.push(...this.ratioType.doModelValidation());
        }
        if (this["startingMaterial"]) {
            this.startingMaterial.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerMonomerSet._fts_dataType = 'SubstancePolymerMonomerSet';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['degree']) {
            this.degree = new fhir.CodeableConcept(source.degree);
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["degree"]) {
            issues.push(...this.degree.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['representation']) {
            this.representation = new fhir.FhirString({ value: source.representation });
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["representation"]) {
            issues.push(...this.representation.doModelValidation());
        }
        if (this["attachment"]) {
            issues.push(...this.attachment.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnitStructuralRepresentation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitStructuralRepresentation';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['orientationOfPolymerisation']) {
            this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = new fhir.FhirString({ value: source.repeatUnit });
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
        if (source['degreeOfPolymerisation']) {
            this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x));
        }
        else {
            this.degreeOfPolymerisation = [];
        }
        if (source['structuralRepresentation']) {
            this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x));
        }
        else {
            this.structuralRepresentation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["orientationOfPolymerisation"]) {
            issues.push(...this.orientationOfPolymerisation.doModelValidation());
        }
        if (this["repeatUnit"]) {
            issues.push(...this.repeatUnit.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        if (this["degreeOfPolymerisation"]) {
            this.degreeOfPolymerisation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["structuralRepresentation"]) {
            this.structuralRepresentation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnit._fts_dataType = 'SubstancePolymerRepeatRepeatUnit';
/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['numberOfUnits']) {
            this.numberOfUnits = new fhir.FhirInteger({ value: source.numberOfUnits });
        }
        if (source['averageMolecularFormula']) {
            this.averageMolecularFormula = new fhir.FhirString({ value: source.averageMolecularFormula });
        }
        if (source['repeatUnitAmountType']) {
            this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x));
        }
        else {
            this.repeatUnit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["numberOfUnits"]) {
            issues.push(...this.numberOfUnits.doModelValidation());
        }
        if (this["averageMolecularFormula"]) {
            issues.push(...this.averageMolecularFormula.doModelValidation());
        }
        if (this["repeatUnitAmountType"]) {
            issues.push(...this.repeatUnitAmountType.doModelValidation());
        }
        if (this["repeatUnit"]) {
            this.repeatUnit.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeat._fts_dataType = 'SubstancePolymerRepeat';
/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource {
    /**
     * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstancePolymer';
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['geometry']) {
            this.geometry = new fhir.CodeableConcept(source.geometry);
        }
        if (source['copolymerConnectivity']) {
            this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.copolymerConnectivity = [];
        }
        if (source['modification']) {
            this.modification = source.modification.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.modification = [];
        }
        if (source['monomerSet']) {
            this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x));
        }
        else {
            this.monomerSet = [];
        }
        if (source['repeat']) {
            this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x));
        }
        else {
            this.repeat = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"SubstancePolymer" fhir: SubstancePolymer.resourceType:"SubstancePolymer"' });
        }
        if (this["class"]) {
            issues.push(...this.class.doModelValidation());
        }
        if (this["geometry"]) {
            issues.push(...this.geometry.doModelValidation());
        }
        if (this["copolymerConnectivity"]) {
            this.copolymerConnectivity.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["modification"]) {
            this.modification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["monomerSet"]) {
            this.monomerSet.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["repeat"]) {
            this.repeat.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymer._fts_dataType = 'SubstancePolymer';
//# sourceMappingURL=data:application/json;base64,