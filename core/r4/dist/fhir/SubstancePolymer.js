// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstancePolymer
import * as fhir from '../fhir.js';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['material']) {
            this.material = new fhir.CodeableConcept(source.material);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['isDefining']) {
            this.isDefining = new fhir.FhirBoolean({ value: source.isDefining });
        }
        if (source['_isDefining']) {
            if (this.isDefining) {
                this.isDefining.addExtendedProperties(source._isDefining);
            }
            else {
                this.isDefining = new fhir.FhirBoolean(source._isDefining);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.monomerSet.startingMaterial';
        }
        this.vOptS('material', expression);
        this.vOptS('type', expression);
        this.vOptS('isDefining', expression);
        this.vOptS('amount', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerMonomerSetStartingMaterial._fts_dataType = 'SubstancePolymerMonomerSetStartingMaterial';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['ratioType']) {
            this.ratioType = new fhir.CodeableConcept(source.ratioType);
        }
        if (source['startingMaterial']) {
            this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x));
        }
        else {
            this.startingMaterial = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.monomerSet';
        }
        this.vOptS('ratioType', expression);
        this.vOptA('startingMaterial', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerMonomerSet._fts_dataType = 'SubstancePolymerMonomerSet';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['degree']) {
            this.degree = new fhir.CodeableConcept(source.degree);
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation';
        }
        this.vOptS('degree', expression);
        this.vOptS('amount', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['representation']) {
            this.representation = new fhir.FhirString({ value: source.representation });
        }
        if (source['_representation']) {
            if (this.representation) {
                this.representation.addExtendedProperties(source._representation);
            }
            else {
                this.representation = new fhir.FhirString(source._representation);
            }
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat.repeatUnit.structuralRepresentation';
        }
        this.vOptS('type', expression);
        this.vOptS('representation', expression);
        this.vOptS('attachment', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnitStructuralRepresentation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitStructuralRepresentation';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['orientationOfPolymerisation']) {
            this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = new fhir.FhirString({ value: source.repeatUnit });
        }
        if (source['_repeatUnit']) {
            if (this.repeatUnit) {
                this.repeatUnit.addExtendedProperties(source._repeatUnit);
            }
            else {
                this.repeatUnit = new fhir.FhirString(source._repeatUnit);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
        if (source['degreeOfPolymerisation']) {
            this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x));
        }
        else {
            this.degreeOfPolymerisation = [];
        }
        if (source['structuralRepresentation']) {
            this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x));
        }
        else {
            this.structuralRepresentation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat.repeatUnit';
        }
        this.vOptS('orientationOfPolymerisation', expression);
        this.vOptS('repeatUnit', expression);
        this.vOptS('amount', expression);
        this.vOptA('degreeOfPolymerisation', expression);
        this.vOptA('structuralRepresentation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnit._fts_dataType = 'SubstancePolymerRepeatRepeatUnit';
/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['numberOfUnits']) {
            this.numberOfUnits = new fhir.FhirInteger({ value: source.numberOfUnits });
        }
        if (source['_numberOfUnits']) {
            if (this.numberOfUnits) {
                this.numberOfUnits.addExtendedProperties(source._numberOfUnits);
            }
            else {
                this.numberOfUnits = new fhir.FhirInteger(source._numberOfUnits);
            }
        }
        if (source['averageMolecularFormula']) {
            this.averageMolecularFormula = new fhir.FhirString({ value: source.averageMolecularFormula });
        }
        if (source['_averageMolecularFormula']) {
            if (this.averageMolecularFormula) {
                this.averageMolecularFormula.addExtendedProperties(source._averageMolecularFormula);
            }
            else {
                this.averageMolecularFormula = new fhir.FhirString(source._averageMolecularFormula);
            }
        }
        if (source['repeatUnitAmountType']) {
            this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x));
        }
        else {
            this.repeatUnit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat';
        }
        this.vOptS('numberOfUnits', expression);
        this.vOptS('averageMolecularFormula', expression);
        this.vOptS('repeatUnitAmountType', expression);
        this.vOptA('repeatUnit', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeat._fts_dataType = 'SubstancePolymerRepeat';
/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource {
    /**
     * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstancePolymer';
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['geometry']) {
            this.geometry = new fhir.CodeableConcept(source.geometry);
        }
        if (source['copolymerConnectivity']) {
            this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.copolymerConnectivity = [];
        }
        if (source['modification']) {
            this.modification = source.modification.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.modification = [];
        }
        if (source['_modification']) {
            source._modification.forEach((x, i) => {
                if (this.modification.length >= i) {
                    if (x) {
                        this.modification[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.modification.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['monomerSet']) {
            this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x));
        }
        else {
            this.monomerSet = [];
        }
        if (source['repeat']) {
            this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x));
        }
        else {
            this.repeat = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer';
        }
        this.vReqS('resourceType', expression);
        this.vOptS('class', expression);
        this.vOptS('geometry', expression);
        this.vOptA('copolymerConnectivity', expression);
        this.vOptA('modification', expression);
        this.vOptA('monomerSet', expression);
        this.vOptA('repeat', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymer._fts_dataType = 'SubstancePolymer';
//# sourceMappingURL=data:application/json;base64,