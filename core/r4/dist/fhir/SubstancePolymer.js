// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstancePolymer
import * as fhir from '../fhir.js';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['material']) {
            this.material = new fhir.CodeableConcept(source.material);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['isDefining']) {
            this.isDefining = new fhir.FhirBoolean({ value: source.isDefining });
        }
        if (source['_isDefining']) {
            if (this.isDefining) {
                this.isDefining.addExtendedProperties(source._isDefining);
            }
            else {
                this.isDefining = new fhir.FhirBoolean(source._isDefining);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.monomerSet.startingMaterial';
        }
        if (this["material"]) {
            issues.push(...this.material.doModelValidation(expression + '.material'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["isDefining"]) {
            issues.push(...this.isDefining.doModelValidation(expression + '.isDefining'));
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation(expression + '.amount'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerMonomerSetStartingMaterial._fts_dataType = 'SubstancePolymerMonomerSetStartingMaterial';
/**
 * Todo.
 */
export class SubstancePolymerMonomerSet extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['ratioType']) {
            this.ratioType = new fhir.CodeableConcept(source.ratioType);
        }
        if (source['startingMaterial']) {
            this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x));
        }
        else {
            this.startingMaterial = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.monomerSet';
        }
        if (this["ratioType"]) {
            issues.push(...this.ratioType.doModelValidation(expression + '.ratioType'));
        }
        if (this["startingMaterial"]) {
            this.startingMaterial.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.startingMaterial[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerMonomerSet._fts_dataType = 'SubstancePolymerMonomerSet';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['degree']) {
            this.degree = new fhir.CodeableConcept(source.degree);
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation';
        }
        if (this["degree"]) {
            issues.push(...this.degree.doModelValidation(expression + '.degree'));
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation(expression + '.amount'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['representation']) {
            this.representation = new fhir.FhirString({ value: source.representation });
        }
        if (source['_representation']) {
            if (this.representation) {
                this.representation.addExtendedProperties(source._representation);
            }
            else {
                this.representation = new fhir.FhirString(source._representation);
            }
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat.repeatUnit.structuralRepresentation';
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["representation"]) {
            issues.push(...this.representation.doModelValidation(expression + '.representation'));
        }
        if (this["attachment"]) {
            issues.push(...this.attachment.doModelValidation(expression + '.attachment'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnitStructuralRepresentation._fts_dataType = 'SubstancePolymerRepeatRepeatUnitStructuralRepresentation';
/**
 * Todo.
 */
export class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['orientationOfPolymerisation']) {
            this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = new fhir.FhirString({ value: source.repeatUnit });
        }
        if (source['_repeatUnit']) {
            if (this.repeatUnit) {
                this.repeatUnit.addExtendedProperties(source._repeatUnit);
            }
            else {
                this.repeatUnit = new fhir.FhirString(source._repeatUnit);
            }
        }
        if (source['amount']) {
            this.amount = new fhir.SubstanceAmount(source.amount);
        }
        if (source['degreeOfPolymerisation']) {
            this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x));
        }
        else {
            this.degreeOfPolymerisation = [];
        }
        if (source['structuralRepresentation']) {
            this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x));
        }
        else {
            this.structuralRepresentation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat.repeatUnit';
        }
        if (this["orientationOfPolymerisation"]) {
            issues.push(...this.orientationOfPolymerisation.doModelValidation(expression + '.orientationOfPolymerisation'));
        }
        if (this["repeatUnit"]) {
            issues.push(...this.repeatUnit.doModelValidation(expression + '.repeatUnit'));
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation(expression + '.amount'));
        }
        if (this["degreeOfPolymerisation"]) {
            this.degreeOfPolymerisation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.degreeOfPolymerisation[${i}]`)); });
        }
        if (this["structuralRepresentation"]) {
            this.structuralRepresentation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.structuralRepresentation[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeatRepeatUnit._fts_dataType = 'SubstancePolymerRepeatRepeatUnit';
/**
 * Todo.
 */
export class SubstancePolymerRepeat extends fhir.BackboneElement {
    /**
     * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['numberOfUnits']) {
            this.numberOfUnits = new fhir.FhirInteger({ value: source.numberOfUnits });
        }
        if (source['_numberOfUnits']) {
            if (this.numberOfUnits) {
                this.numberOfUnits.addExtendedProperties(source._numberOfUnits);
            }
            else {
                this.numberOfUnits = new fhir.FhirInteger(source._numberOfUnits);
            }
        }
        if (source['averageMolecularFormula']) {
            this.averageMolecularFormula = new fhir.FhirString({ value: source.averageMolecularFormula });
        }
        if (source['_averageMolecularFormula']) {
            if (this.averageMolecularFormula) {
                this.averageMolecularFormula.addExtendedProperties(source._averageMolecularFormula);
            }
            else {
                this.averageMolecularFormula = new fhir.FhirString(source._averageMolecularFormula);
            }
        }
        if (source['repeatUnitAmountType']) {
            this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType);
        }
        if (source['repeatUnit']) {
            this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x));
        }
        else {
            this.repeatUnit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer.repeat';
        }
        if (this["numberOfUnits"]) {
            issues.push(...this.numberOfUnits.doModelValidation(expression + '.numberOfUnits'));
        }
        if (this["averageMolecularFormula"]) {
            issues.push(...this.averageMolecularFormula.doModelValidation(expression + '.averageMolecularFormula'));
        }
        if (this["repeatUnitAmountType"]) {
            issues.push(...this.repeatUnitAmountType.doModelValidation(expression + '.repeatUnitAmountType'));
        }
        if (this["repeatUnit"]) {
            this.repeatUnit.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.repeatUnit[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymerRepeat._fts_dataType = 'SubstancePolymerRepeat';
/**
 * Todo.
 */
export class SubstancePolymer extends fhir.DomainResource {
    /**
     * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstancePolymer';
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['geometry']) {
            this.geometry = new fhir.CodeableConcept(source.geometry);
        }
        if (source['copolymerConnectivity']) {
            this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.copolymerConnectivity = [];
        }
        if (source['modification']) {
            this.modification = source.modification.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.modification = [];
        }
        if (source['_modification']) {
            source._modification.forEach((x, i) => {
                if (this.modification.length >= i) {
                    if (x) {
                        this.modification[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.modification.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['monomerSet']) {
            this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x));
        }
        else {
            this.monomerSet = [];
        }
        if (source['repeat']) {
            this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x));
        }
        else {
            this.repeat = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstancePolymer';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: SubstancePolymer.resourceType:"SubstancePolymer"', expression: [expression] });
        }
        if (this["class"]) {
            issues.push(...this.class.doModelValidation(expression + '.class'));
        }
        if (this["geometry"]) {
            issues.push(...this.geometry.doModelValidation(expression + '.geometry'));
        }
        if (this["copolymerConnectivity"]) {
            this.copolymerConnectivity.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.copolymerConnectivity[${i}]`)); });
        }
        if (this["modification"]) {
            this.modification.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.modification[${i}]`)); });
        }
        if (this["monomerSet"]) {
            this.monomerSet.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.monomerSet[${i}]`)); });
        }
        if (this["repeat"]) {
            this.repeat.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.repeat[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstancePolymer._fts_dataType = 'SubstancePolymer';
//# sourceMappingURL=data:application/json;base64,