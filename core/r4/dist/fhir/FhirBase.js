// Minimum TypeScript Version: 3.7
export class FhirBase {
    /** Default constructor */
    constructor(source = {}, options = {}) {
        if (options.allowUnknownElements === true) {
            Object.assign(this, source);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(_expression = '') {
        let issues = [];
        return issues;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        let c = {};
        for (const key in this) {
            if ((this[key] === undefined) ||
                (this[key] === null) ||
                (this[key] === '') ||
                (Number.isNaN(this[key]))) {
                continue;
            }
            let isArray = Array.isArray(this[key]);
            if (isArray && this[key].length === 0) {
                continue;
            }
            let ftsDt = (isArray ? this[key][0].constructor._fts_dataType : this[key].constructor._fts_dataType) ?? '';
            let isChoice = this.constructor['_fts_' + key + 'IsChoice'] ?? false;
            let isPrimitive = (isArray ? this[key][0].constructor['_fts_isPrimitive'] : this[key].constructor['_fts_isPrimitive']) ?? false;
            let dKey = key + (isChoice ? ftsDt : '');
            if (isArray) {
                if (isPrimitive) {
                    const eName = '_' + dKey;
                    let foundAnyVal = false;
                    let foundAnyExt = false;
                    c[dKey] = [];
                    c[eName] = [];
                    this[key].forEach((av) => {
                        let addElement = false;
                        if (av.value) {
                            c[dKey].push(av.value);
                            foundAnyVal = true;
                            addElement = true;
                        }
                        else {
                            c[dKey].push(null);
                        }
                        let ao = {};
                        if (av.id) {
                            ao['id'] = av.id;
                            foundAnyExt = true;
                        }
                        if ((av.extension) && (av.extension.length !== 0)) {
                            ao['extension'] = [];
                            av.extension.forEach((e) => {
                                ao['extension'].push(e);
                            });
                            foundAnyExt = true;
                        }
                        if (foundAnyExt) {
                            c[eName].push(ao);
                            addElement = true;
                        }
                        else {
                            c[eName].push(null);
                        }
                        if (!addElement) {
                            c[dKey].pop();
                            c[eName].pop();
                        }
                    });
                    if (!foundAnyVal) {
                        delete c[dKey];
                    }
                    if (!foundAnyExt) {
                        delete c[eName];
                    }
                }
                else if (ftsDt) {
                    c[dKey] = [];
                    this[key].forEach((v) => {
                        // c[dKey].push(v.toJSON());
                        c[dKey].push(v);
                    });
                }
                else {
                    c[dKey] = this[key];
                }
            }
            else if (isPrimitive) {
                if (this[key].value) {
                    c[dKey] = this[key].value;
                }
                const eName = '_' + dKey;
                c[eName] = {};
                if (this[key]['id']) {
                    c[eName]['id'] = this[key]['id'];
                }
                if ((this[key]['extension']) && (this[key]['extension'].length !== 0)) {
                    c[eName]['extension'] = [];
                    this[key]['extension'].forEach((e) => {
                        c[eName]['extension'].push(e);
                    });
                }
                if (Object.keys(c[eName]).length === 0) {
                    delete c[eName];
                }
            }
            else if (ftsDt) {
                c[dKey] = this[key];
            }
            else {
                c[dKey] = this[key];
            }
        }
        return c;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FhirBase._fts_dataType = 'Base';
FhirBase._fts_regex = /.?/;
//# sourceMappingURL=data:application/json;base64,