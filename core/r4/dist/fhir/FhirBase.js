// Minimum TypeScript Version: 3.7
export class FhirBase {
    /** Default constructor */
    constructor(source = {}, options = {}) {
        if (options.allowUnknownElements === true) {
            Object.assign(this, source);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = [];
        return issues;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        let c = {};
        for (const key in this) {
            if ((this[key] === undefined) ||
                (this[key] === null) ||
                (this[key] === '') ||
                (this[key] === NaN) ||
                (this[key] === [])) {
                continue;
            }
            let isArray = Array.isArray(this[key]);
            if (isArray && this[key].length === 0) {
                continue;
            }
            let ftsDt = (isArray ? this[key][0].constructor._fts_dataType : this[key].constructor._fts_dataType) ?? '';
            let isChoice = this.constructor['_fts_' + key + 'IsChoice'] ?? false;
            let isPrimitive = (isArray ? this[key][0].constructor['_fts_isPrimitive'] : this[key].constructor['_fts_isPrimitive']) ?? false;
            let dKey = key + (isChoice ? ftsDt : '');
            if (isArray) {
                if (isPrimitive) {
                    const eName = '_' + dKey;
                    let foundAnyVal = false;
                    let foundAnyExt = false;
                    c[dKey] = [];
                    c[eName] = [];
                    this[key].forEach((av) => {
                        let addElement = false;
                        if (av.value) {
                            c[dKey].push(av.value);
                            foundAnyVal = true;
                            addElement = true;
                        }
                        else {
                            c[dKey].push(null);
                        }
                        let ao = {};
                        if (av.id) {
                            ao['id'] = av.id;
                            foundAnyExt = true;
                        }
                        if ((av.extension) && (av.extension.length !== 0)) {
                            ao['extension'] = [];
                            av.extension.forEach((e) => {
                                ao['extension'].push(e);
                            });
                            foundAnyExt = true;
                        }
                        if (foundAnyExt) {
                            c[eName].push(ao);
                            addElement = true;
                        }
                        else {
                            c[eName].push(null);
                        }
                        if (!addElement) {
                            c[dKey].pop();
                            c[eName].pop();
                        }
                    });
                    if (!foundAnyVal) {
                        delete c[dKey];
                    }
                    if (!foundAnyExt) {
                        delete c[eName];
                    }
                }
                else if (ftsDt) {
                    c[dKey] = [];
                    this[key].forEach((v) => {
                        // c[dKey].push(v.toJSON());
                        c[dKey].push(v);
                    });
                }
                else {
                    c[dKey] = this[key];
                }
            }
            else if (isPrimitive) {
                if (this[key].value) {
                    c[dKey] = this[key].value;
                }
                const eName = '_' + dKey;
                c[eName] = {};
                if (this[key]['id']) {
                    c[eName]['id'] = this[key]['id'];
                }
                if ((this[key]['extension']) && (this[key]['extension'].length !== 0)) {
                    c[eName]['extension'] = [];
                    this[key]['extension'].forEach((e) => {
                        c[eName]['extension'].push(e);
                    });
                }
                if (Object.keys(c[eName]).length === 0) {
                    delete c[eName];
                }
            }
            else if (ftsDt) {
                c[dKey] = this[key];
            }
            else {
                c[dKey] = this[key];
            }
        }
        return c;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FhirBase._fts_dataType = 'Base';
FhirBase._fts_regex = /.?/;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmhpckJhc2UuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL0ZoaXJCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQXFGbEMsTUFBTSxPQUFPLFFBQVE7SUFPbkIsMEJBQTBCO0lBQzFCLFlBQVksU0FBK0IsRUFBRSxFQUFFLFVBQWlDLEVBQUU7UUFDaEYsSUFBSSxPQUFPLENBQUMsb0JBQW9CLEtBQUssSUFBSSxFQUFFO1lBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FBRTtJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSyxpQkFBaUI7UUFDdkIsSUFBSSxNQUFNLEdBQWMsRUFBRSxDQUFDO1FBQzNCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNLLE1BQU07UUFDWixJQUFJLENBQUMsR0FBTyxFQUFFLENBQUM7UUFFZixLQUFLLE1BQU0sR0FBRyxJQUFLLElBQVksRUFBRTtZQUMvQixJQUFJLENBQUUsSUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsQ0FBQztnQkFDbEMsQ0FBRSxJQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDO2dCQUM3QixDQUFFLElBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzNCLENBQUUsSUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztnQkFDNUIsQ0FBRSxJQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUU7Z0JBQy9CLFNBQVM7YUFDVjtZQUVELElBQUksT0FBTyxHQUFXLEtBQUssQ0FBQyxPQUFPLENBQUUsSUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFeEQsSUFBSSxPQUFPLElBQUssSUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzlDLFNBQVM7YUFDVjtZQUVELElBQUks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QUFDLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFFLElBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ3ZGLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBQzFCLElBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFLLEVBQUUsRUFBRTt3QkFDaEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDaEMsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7Z0JBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQUUsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQUU7YUFDN0Q7aUJBQU0sSUFBSSxLQUFLLEVBQUU7Z0JBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBSSxJQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDOUI7aUJBQU07Z0JBQ0wsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFJLElBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM5QjtTQUNGO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDOztBQXpIRDs7R0FFRztBQUNvQixzQkFBYSxHQUFRLE1BQU0sQ0FBQztBQUM1QixtQkFBVSxHQUFVLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmhpckNvbnN0cnVjdG9yT3B0aW9ucyB7XHJcbiAgLyoqIElmIGluc3RhbnRpYXRlZCBvYmplY3RzIHNob3VsZCBhbGxvdyBub24tRkhJUiBkZWZpbmVkIHByb3BlcnRpZXMgKi9cclxuICBhbGxvd1Vua25vd25FbGVtZW50cz86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgRWxlbWVudCAtIGVxdWl2YWxlbnQgdG8gYSBGSElSIEpTT04gRWxlbWVudCAoQ29tcGxleCBEYXRhVHlwZSksIHdpdGhvdXQgZXh0ZW5zaW9uc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBGdHNFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBVbmlxdWUgaWQgZm9yIHRoZSBlbGVtZW50IHdpdGhpbiBhIHJlc291cmNlIChmb3IgaW50ZXJuYWwgcmVmZXJlbmNlcykuIFRoaXMgbWF5IGJlIGFueSBzdHJpbmcgdmFsdWUgdGhhdCBkb2VzIG5vdCBjb250YWluIHNwYWNlcy5cclxuICAgKi9cclxuICAgaWQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgY29kaW5nIC0gZXF1aXZhbGVudCB0byBhIEZISVIgSlNPTiBDb2RpbmcgKENvbXBsZXggRGF0YVR5cGUpLCB3aXRob3V0IGV4dGVuc2lvbnNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRnRzQ29kaW5nIGV4dGVuZHMgRnRzRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogVGhlIFVSSSBtYXkgYmUgYW4gT0lEICh1cm46b2lkOi4uLikgb3IgYSBVVUlEICh1cm46dXVpZDouLi4pLiAgT0lEcyBhbmQgVVVJRHMgU0hBTEwgYmUgcmVmZXJlbmNlcyB0byB0aGUgSEw3IE9JRCByZWdpc3RyeS4gT3RoZXJ3aXNlLCB0aGUgVVJJIHNob3VsZCBjb21lIGZyb20gSEw3J3MgbGlzdCBvZiBGSElSIGRlZmluZWQgc3BlY2lhbCBVUklzIG9yIGl0IHNob3VsZCByZWZlcmVuY2UgdG8gc29tZSBkZWZpbml0aW9uIHRoYXQgZXN0YWJsaXNoZXMgdGhlIHN5c3RlbSBjbGVhcmx5IGFuZCB1bmFtYmlndW91c2x5LlxyXG4gICAqL1xyXG4gICBzeXN0ZW0/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gICAvKipcclxuICAgICogV2hlcmUgdGhlIHRlcm1pbm9sb2d5IGRvZXMgbm90IGNsZWFybHkgZGVmaW5lIHdoYXQgc3RyaW5nIHNob3VsZCBiZSB1c2VkIHRvIGlkZW50aWZ5IGNvZGUgc3lzdGVtIHZlcnNpb25zLCB0aGUgcmVjb21tZW5kYXRpb24gaXMgdG8gdXNlIHRoZSBkYXRlIChleHByZXNzZWQgaW4gRkhJUiBkYXRlIGZvcm1hdCkgb24gd2hpY2ggdGhhdCB2ZXJzaW9uIHdhcyBvZmZpY2lhbGx5IHB1Ymxpc2hlZCBhcyB0aGUgdmVyc2lvbiBkYXRlLlxyXG4gICAgKi9cclxuICAgdmVyc2lvbj86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgIC8qKlxyXG4gICAgKiBBIHN5bWJvbCBpbiBzeW50YXggZGVmaW5lZCBieSB0aGUgc3lzdGVtLiBUaGUgc3ltYm9sIG1heSBiZSBhIHByZWRlZmluZWQgY29kZSBvciBhbiBleHByZXNzaW9uIGluIGEgc3ludGF4IGRlZmluZWQgYnkgdGhlIGNvZGluZyBzeXN0ZW0gKGUuZy4gcG9zdC1jb29yZGluYXRpb24pLlxyXG4gICAgKi9cclxuICAgY29kZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgIC8qKlxyXG4gICAgKiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZWFuaW5nIG9mIHRoZSBjb2RlIGluIHRoZSBzeXN0ZW0sIGZvbGxvd2luZyB0aGUgcnVsZXMgb2YgdGhlIHN5c3RlbS5cclxuICAgICovXHJcbiAgIGRpc3BsYXk/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gICAvKipcclxuICAgICogQW1vbmdzdCBhIHNldCBvZiBhbHRlcm5hdGl2ZXMsIGEgZGlyZWN0bHkgY2hvc2VuIGNvZGUgaXMgdGhlIG1vc3QgYXBwcm9wcmlhdGUgc3RhcnRpbmcgcG9pbnQgZm9yIG5ldyB0cmFuc2xhdGlvbnMuIFRoZXJlIGlzIHNvbWUgYW1iaWd1aXR5IGFib3V0IHdoYXQgZXhhY3RseSAnZGlyZWN0bHkgY2hvc2VuJyBpbXBsaWVzLCBhbmQgdHJhZGluZyBwYXJ0bmVyIGFncmVlbWVudCBtYXkgYmUgbmVlZGVkIHRvIGNsYXJpZnkgdGhlIHVzZSBvZiB0aGlzIGVsZW1lbnQgYW5kIGl0cyBjb25zZXF1ZW5jZXMgbW9yZSBjb21wbGV0ZWx5LlxyXG4gICAgKi9cclxuICAgdXNlclNlbGVjdGVkPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBDb2RlYWJsZUNvbmNlcHQgLSBlcXVpdmFsZW50IHRvIGEgRkhJUiBKU09OIENvZGVhYmxlQ29uY2VwdCAoQ29tcGxleCBEYXRhVHlwZSksIHdpdGhvdXQgZXh0ZW5zaW9uc1xyXG4gKi9cclxuIGV4cG9ydCBpbnRlcmZhY2UgRnRzQ29kZWFibGVDb25jZXB0IGV4dGVuZHMgRnRzRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIENvZGVzIG1heSBiZSBkZWZpbmVkIHZlcnkgY2FzdWFsbHkgaW4gZW51bWVyYXRpb25zLCBvciBjb2RlIGxpc3RzLCB1cCB0byB2ZXJ5IGZvcm1hbCBkZWZpbml0aW9ucyBzdWNoIGFzIFNOT01FRCBDVCAtIHNlZSB0aGUgSEw3IHYzIENvcmUgUHJpbmNpcGxlcyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4gIE9yZGVyaW5nIG9mIGNvZGluZ3MgaXMgdW5kZWZpbmVkIGFuZCBTSEFMTCBOT1QgYmUgdXNlZCB0byBpbmZlciBtZWFuaW5nLiBHZW5lcmFsbHksIGF0IG1vc3Qgb25seSBvbmUgb2YgdGhlIGNvZGluZyB2YWx1ZXMgd2lsbCBiZSBsYWJlbGVkIGFzIFVzZXJTZWxlY3RlZCA9IHRydWUuXHJcbiAgICovXHJcbiAgY29kaW5nPzogRnRzQ29kaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFZlcnkgb2Z0ZW4gdGhlIHRleHQgaXMgdGhlIHNhbWUgYXMgYSBkaXNwbGF5TmFtZSBvZiBvbmUgb2YgdGhlIGNvZGluZ3MuXHJcbiAgICovXHJcbiAgdGV4dD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBPcGVyYXRpb25PdXRjb21lSXNzdWUgLSBlcXVpdmFsZW50IHRvIE9wZXJhdGlvbk91dGNvbWUuaXNzdWUgKEJhY2tib25lIEVsZW1lbnQpLCB3aXRob3V0IGV4dGVuc2lvbnNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRnRzSXNzdWUgZXh0ZW5kcyBGdHNFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBUaGlzIGlzIGxhYmVsZWQgYXMgXCJJcyBNb2RpZmllclwiIGJlY2F1c2UgYXBwbGljYXRpb25zIHNob3VsZCBub3QgY29uZnVzZSBoaW50cyBhbmQgd2FybmluZ3Mgd2l0aCBlcnJvcnMuXHJcbiAgICovXHJcbiAgIHNldmVyaXR5OiAnZXJyb3InfCdmYXRhbCd8J2luZm9ybWF0aW9uJ3wnd2FybmluZyd8bnVsbDtcclxuICAgLyoqXHJcbiAgICAqIERlc2NyaWJlcyB0aGUgdHlwZSBvZiB0aGUgaXNzdWUuIFRoZSBzeXN0ZW0gdGhhdCBjcmVhdGVzIGFuIE9wZXJhdGlvbk91dGNvbWUgU0hBTEwgY2hvb3NlIHRoZSBtb3N0IGFwcGxpY2FibGUgY29kZSBmcm9tIHRoZSBJc3N1ZVR5cGUgdmFsdWUgc2V0LCBhbmQgbWF5IGFkZGl0aW9uYWwgcHJvdmlkZSBpdHMgb3duIGNvZGUgZm9yIHRoZSBlcnJvciBpbiB0aGUgZGV0YWlscyBlbGVtZW50LlxyXG4gICAgKi9cclxuICAgY29kZTogJ2J1c2luZXNzLXJ1bGUnfCdjb2RlLWludmFsaWQnfCdjb25mbGljdCd8J2RlbGV0ZWQnfCdkdXBsaWNhdGUnfCdleGNlcHRpb24nfCdleHBpcmVkJ3wnZXh0ZW5zaW9uJ3wnZm9yYmlkZGVuJ3wnaW5jb21wbGV0ZSd8J2luZm9ybWF0aW9uYWwnfCdpbnZhbGlkJ3wnaW52YXJpYW50J3wnbG9jay1lcnJvcid8J2xvZ2luJ3wnbXVsdGlwbGUtbWF0Y2hlcyd8J25vLXN0b3JlJ3wnbm90LWZvdW5kJ3wnbm90LXN1cHBvcnRlZCd8J3Byb2Nlc3NpbmcnfCdyZXF1aXJlZCd8J3NlY3VyaXR5J3wnc3RydWN0dXJlJ3wnc3VwcHJlc3NlZCd8J3Rocm90dGxlZCd8J3RpbWVvdXQnfCd0b28tY29zdGx5J3wndG9vLWxvbmcnfCd0cmFuc2llbnQnfCd1bmtub3duJ3wndmFsdWUnfG51bGw7XHJcbiAgIC8qKlxyXG4gICAgKiBBIGh1bWFuIHJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciBpc3N1ZSBTSE9VTEQgYmUgcGxhY2VkIGluIGRldGFpbHMudGV4dC5cclxuICAgICovXHJcbiAgIGRldGFpbHM/OiBGdHNDb2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gICAvKipcclxuICAgICogVGhpcyBtYXkgYmUgYSBkZXNjcmlwdGlvbiBvZiBob3cgYSB2YWx1ZSBpcyBlcnJvbmVvdXMsIGEgc3RhY2sgZHVtcCB0byBoZWxwIHRyYWNlIHRoZSBpc3N1ZSBvciBvdGhlciB0cm91Ymxlc2hvb3RpbmcgaW5mb3JtYXRpb24uXHJcbiAgICAqL1xyXG4gICBkaWFnbm9zdGljcz86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgIC8qKlxyXG4gICAgKiBUaGUgcm9vdCBvZiB0aGUgRkhJUlBhdGggaXMgdGhlIHJlc291cmNlIG9yIGJ1bmRsZSB0aGF0IGdlbmVyYXRlZCBPcGVyYXRpb25PdXRjb21lLiAgRWFjaCBGSElSUGF0aCBTSEFMTCByZXNvbHZlIHRvIGEgc2luZ2xlIG5vZGUuXHJcbiAgICAqL1xyXG4gICBleHByZXNzaW9uPzogc3RyaW5nW118dW5kZWZpbmVkO1xyXG4gfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGaGlyQmFzZUFyZ3MgeyB9XHJcblxyXG5leHBvcnQgY2xhc3MgRmhpckJhc2Uge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmc9J0Jhc2UnO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgX2Z0c19yZWdleDpSZWdFeHAgPSAvLj8vO1xyXG5cclxuICAvKiogRGVmYXVsdCBjb25zdHJ1Y3RvciAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEZoaXJCYXNlQXJncz4gPSB7fSwgb3B0aW9uczpGaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIGlmIChvcHRpb25zLmFsbG93VW5rbm93bkVsZW1lbnRzID09PSB0cnVlKSB7IE9iamVjdC5hc3NpZ24odGhpcywgc291cmNlKTsgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgIHB1YmxpYyBkb01vZGVsVmFsaWRhdGlvbigpOkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpGdHNJc3N1ZVtdID0gW107XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gc3RyaXAgaW52YWxpZCBlbGVtZW50IHZhbHVlcyBmb3Igc2VyaWFsaXphdGlvbi5cclxuICAgKi9cclxuICAgcHVibGljIHRvSlNPTigpIHtcclxuICAgIGxldCBjOmFueSA9IHt9O1xyXG4gIFxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gKHRoaXMgYXMgYW55KSkge1xyXG4gICAgICBpZiAoKCh0aGlzIGFzIGFueSlba2V5XSA9PT0gdW5kZWZpbmVkKSB8fCBcclxuICAgICAgICAgICgodGhpcyBhcyBhbnkpW2tleV0gPT09IG51bGwpIHx8XHJcbiAgICAgICAgICAoKHRoaXMgYXMgYW55KVtrZXldID09PSAnJykgfHxcclxuICAgICAgICAgICgodGhpcyBhcyBhbnkpW2tleV0gPT09IE5hTikgfHxcclxuICAgICAgICAgICgodGhpcyBhcyBhbnkpW2tleV0gPT09IFtdKSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgaXNBcnJheTpib29sZWFuID0gQXJyYXkuaXNBcnJheSgodGhpcyBhcyBhbnkpW2tleV0pO1xyXG5cclxuICAgICAgaWYgKGlzQXJyYXkgJiYgKHRoaXMgYXMgYW55KVtrZXldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgZnRzRHQ6c3RyaW5nID0gKGlzQXJyYXkgPyAodGhpcyBhcyBhbnkpW2tleV1bMF0uY29uc3RydWN0b3IuX2Z0c19kYXRhVHlwZSA6ICh0aGlzIGFzIGFueSlba2V5XS5jb25zdHJ1Y3Rvci5fZnRzX2RhdGFUeXBlKSA/PyAnJztcclxuICAgICAgbGV0IGlzQ2hvaWNlOmJvb2xlYW4gPSAodGhpcyBhcyBhbnkpLmNvbnN0cnVjdG9yWydfZnRzXycgKyBrZXkgKyAnSXNDaG9pY2UnXSA/PyBmYWxzZTtcclxuICAgICAgbGV0IGlzUHJpbWl0aXZlID0gKGlzQXJyYXkgPyAodGhpcyBhcyBhbnkpW2tleV1bMF0uY29uc3RydWN0b3JbJ19mdHNfaXNQcmltaXRpdmUnXSA6ICh0aGlzIGFzIGFueSlba2V5XS5jb25zdHJ1Y3RvclsnX2Z0c19pc1ByaW1pdGl2ZSddKSA/PyBmYWxzZTtcclxuICAgICAgbGV0IGRLZXk6c3RyaW5nID0ga2V5ICsgKGlzQ2hvaWNlID8gZnRzRHQgOiAnJyk7XHJcbiAgXHJcbiAgICAgIGlmIChpc0FycmF5KSB7XHJcbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKSB7XHJcbiAgICAgICAgICBjb25zdCBlTmFtZTpzdHJpbmcgPSAnXycgKyBkS2V5O1xyXG4gICAgICAgICAgbGV0IGZvdW5kQW55VmFsOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgIGxldCBmb3VuZEFueUV4dDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICBjW2RLZXldID0gW107XHJcbiAgICAgICAgICBjW2VOYW1lXSA9IFtdO1xyXG4gICAgICAgICAgKHRoaXMgYXMgYW55KVtrZXldLmZvckVhY2goKGF2OmFueSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYWRkRWxlbWVudDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChhdi52YWx1ZSkgeyBcclxuICAgICAgICAgICAgICBjW2RLZXldLnB1c2goYXYudmFsdWUpOyBcclxuICAgICAgICAgICAgICBmb3VuZEFueVZhbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgYWRkRWxlbWVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IFxyXG4gICAgICAgICAgICAgIGNbZEtleV0ucHVzaChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgICAgICBsZXQgYW86b2JqZWN0ID0ge307XHJcbiAgICAgICAgICAgIGlmIChhdi5pZCkgeyBcclxuICAgICAgICAgICAgICAoYW8gYXMgYW55KVsnaWQnXSA9IGF2LmlkO1xyXG4gICAgICAgICAgICAgIGZvdW5kQW55RXh0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKGF2LmV4dGVuc2lvbikgJiYgKGF2LmV4dGVuc2lvbi5sZW5ndGggIT09IDApKSB7XHJcbiAgICAgICAgICAgICAgKGFvIGFzIGFueSlbJ2V4dGVuc2lvbiddID0gW107XHJcbiAgICAgICAgICAgICAgYXYuZXh0ZW5zaW9uLmZvckVhY2goKGU6YW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAoYW8gYXMgYW55KVsnZXh0ZW5zaW9uJ10ucHVzaChlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBmb3VuZEFueUV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICBcclxuICAgICAgICAgICAgaWYgKGZvdW5kQW55RXh0KSB7IFxyXG4gICAgICAgICAgICAgIGNbZU5hbWVdLnB1c2goYW8pO1xyXG4gICAgICAgICAgICAgIGFkZEVsZW1lbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGNbZU5hbWVdLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICBcclxuICAgICAgICAgICAgaWYgKCFhZGRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgY1tkS2V5XS5wb3AoKTtcclxuICAgICAgICAgICAgICBjW2VOYW1lXS5wb3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgICAgICBpZiAoIWZvdW5kQW55VmFsKSB7IGRlbGV0ZSBjW2RLZXldOyB9XHJcbiAgICAgICAgICBpZiAoIWZvdW5kQW55RXh0KSB7IGRlbGV0ZSBjW2VOYW1lXTsgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZnRzRHQpIHtcclxuICAgICAgICAgIGNbZEtleV0gPSBbXTtcclxuICAgICAgICAgICh0aGlzIGFzIGFueSlba2V5XS5mb3JFYWNoKCh2OmFueSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjW2RLZXldLnB1c2godi50b0pTT04oKSk7XHJcbiAgICAgICAgICAgIGNbZEtleV0ucHVzaCh2KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjW2RLZXldID0gKHRoaXMgYXMgYW55KVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSkge1xyXG4gICAgICAgIGlmICgodGhpcyBhcyBhbnkpW2tleV0udmFsdWUpIHsgY1tkS2V5XSA9ICh0aGlzIGFzIGFueSlba2V5XS52YWx1ZTsgfVxyXG5cclxuICAgICAgICBjb25zdCBlTmFtZTpzdHJpbmcgPSAnXycgKyBkS2V5O1xyXG4gICAgICAgIGNbZU5hbWVdID0ge307XHJcbiAgICAgICAgaWYgKCh0aGlzIGFzIGFueSlba2V5XVsnaWQnXSkgeyBjW2VOYW1lXVsnaWQnXSA9ICh0aGlzIGFzIGFueSlba2V5XVsnaWQnXTsgfVxyXG4gICAgICAgIGlmICgoKHRoaXMgYXMgYW55KVtrZXldWydleHRlbnNpb24nXSkgJiYgKCh0aGlzIGFzIGFueSlba2V5XVsnZXh0ZW5zaW9uJ10ubGVuZ3RoICE9PSAwKSkge1xyXG4gICAgICAgICAgY1tlTmFtZV1bJ2V4dGVuc2lvbiddID0gW107XHJcbiAgICAgICAgICAodGhpcyBhcyBhbnkpW2tleV1bJ2V4dGVuc2lvbiddLmZvckVhY2goKGU6YW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNbZU5hbWVdWydleHRlbnNpb24nXS5wdXNoKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoY1tlTmFtZV0pLmxlbmd0aCA9PT0gMCkgeyBkZWxldGUgY1tlTmFtZV07IH1cclxuICAgICAgfSBlbHNlIGlmIChmdHNEdCkge1xyXG4gICAgICAgIGNbZEtleV0gPSAodGhpcyBhcyBhbnkpW2tleV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY1tkS2V5XSA9ICh0aGlzIGFzIGFueSlba2V5XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcmV0dXJuIGM7XHJcbiAgfVxyXG59Il19