// Minimum TypeScript Version: 3.7
export class FhirBase {
    /** Default constructor */
    constructor(source = {}, options = {}) {
        if (options.allowUnknownElements === true) {
            Object.assign(this, source);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = [];
        return issues;
    }
    /**
     * Function to strip invalid element values for serialization.
     */
    toJSON() {
        let c = {};
        for (const key in this) {
            if ((this[key] === undefined) ||
                (this[key] === null) ||
                (this[key] === '') ||
                (this[key] === NaN) ||
                (this[key] === [])) {
                continue;
            }
            if (key.startsWith('_fts_')) {
                continue;
            }
            let dKey = key + (this['_fts_' + key + 'IsChoice'] ? (this[key]['_fts_dataType'] ?? '') : '');
            if (Array.isArray(this[key])) {
                if (this[key].length === 0) {
                    continue;
                }
                if (this[key][0]['_fts_isPrimitive']) {
                    const eName = '_' + dKey;
                    let foundAnyVal = false;
                    let foundAnyExt = false;
                    c[dKey] = [];
                    c[eName] = [];
                    this[key].forEach((av) => {
                        let addElement = false;
                        if ((av['value'] !== undefined) && (av['value'] !== null)) {
                            c[dKey].push(av.valueOf());
                            foundAnyVal = true;
                            addElement = true;
                        }
                        else {
                            c[dKey].push(null);
                        }
                        let ao = {};
                        if (av.id) {
                            ao['id'] = av.id;
                        }
                        if (av.extension) {
                            ao['extension'] = [];
                            av.extension.forEach((e) => {
                                ao['extension'].push(e.toJSON());
                            });
                        }
                        if (Object.keys(ao).length !== 0) {
                            c[eName].push(ao);
                            foundAnyExt = true;
                            addElement = true;
                        }
                        else {
                            c[eName].push(null);
                        }
                        if (!addElement) {
                            c[dKey].pop();
                            c[eName].pop();
                        }
                    });
                    if (!foundAnyVal) {
                        delete c[dKey];
                    }
                    if (!foundAnyExt) {
                        delete c[eName];
                    }
                }
                else if (this[key][0]['_fts_dataType']) {
                    c[dKey] = [];
                    this[key].forEach((v) => {
                        c[dKey].push(v.toJSON());
                    });
                }
                else {
                    c[dKey] = this[key];
                }
            }
            else {
                if (this[key]['_fts_isPrimitive']) {
                    if (this[key]['value']) {
                        c[dKey] = this[key].valueOf();
                    }
                    const eName = '_' + dKey;
                    c[eName] = {};
                    if (this[key]['id']) {
                        c[eName]['id'] = this[key]['id'];
                    }
                    if (this[key]['extension']) {
                        c[eName]['extension'] = [];
                        this[key]['extension'].forEach((e) => {
                            c[eName]['extension'].push(e.toJSON());
                        });
                    }
                    if (Object.keys(c[eName]).length === 0) {
                        delete c[eName];
                    }
                }
                else if (this[key]['_fts_dataType']) {
                    c[dKey] = this[key].toJSON();
                }
                else {
                    c[dKey] = this[key];
                }
            }
        }
        return c;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FhirBase._fts_dataType = 'Base';
FhirBase._fts_regex = /.?/;
//# sourceMappingURL=data:application/json;base64,