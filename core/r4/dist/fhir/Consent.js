// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Consent
import * as fhir from '../fhir.js';
// @ts-ignore
import { SecurityRoleTypeCodings, } from '../fhirValueSets/SecurityRoleTypeCodings.js';
// @ts-ignore
import { ConsentDataMeaningCodes } from '../fhirValueSets/ConsentDataMeaningCodes.js';
// @ts-ignore
import { ConsentProvisionTypeCodes } from '../fhirValueSets/ConsentProvisionTypeCodes.js';
// @ts-ignore
import { SecurityLabelsCodings, } from '../fhirValueSets/SecurityLabelsCodings.js';
// @ts-ignore
import { V3PurposeOfUseCodings, } from '../fhirValueSets/V3PurposeOfUseCodings.js';
// @ts-ignore
import { ConsentContentClassCodings, } from '../fhirValueSets/ConsentContentClassCodings.js';
// @ts-ignore
import { ConsentStateCodes } from '../fhirValueSets/ConsentStateCodes.js';
// @ts-ignore
import { ConsentScopeCodings, } from '../fhirValueSets/ConsentScopeCodings.js';
// @ts-ignore
import { ConsentCategoryCodings, } from '../fhirValueSets/ConsentCategoryCodings.js';
// @ts-ignore
import { ConsentPolicyCodings, } from '../fhirValueSets/ConsentPolicyCodings.js';
/**
 * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
 */
export class ConsentPolicy extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentPolicy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authority']) {
            this.authority = new fhir.FhirUri({ value: source.authority });
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["authority"]) {
            issues.push(...this.authority.doModelValidation());
        }
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentPolicy._fts_dataType = 'ConsentPolicy';
/**
 * Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
 */
export class ConsentVerification extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentVerification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['verified']) {
            this.verified = new fhir.FhirBoolean({ value: source.verified });
        }
        else {
            this.verified = null;
        }
        if (source['verifiedWith']) {
            this.verifiedWith = new fhir.Reference(source.verifiedWith);
        }
        if (source['verificationDate']) {
            this.verificationDate = new fhir.FhirDateTime({ value: source.verificationDate });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['verified']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property verified:fhir.FhirBoolean fhir: Consent.verification.verified:boolean' });
        }
        if (this["verified"]) {
            issues.push(...this.verified.doModelValidation());
        }
        if (this["verifiedWith"]) {
            issues.push(...this.verifiedWith.doModelValidation());
        }
        if (this["verificationDate"]) {
            issues.push(...this.verificationDate.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentVerification._fts_dataType = 'ConsentVerification';
/**
 * Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
 */
export class ConsentProvisionActor extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentProvisionActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Extensible-bound Value Set for role (Consent.provision.actor.role)
     */
    static get roleExtensibleCodings() {
        return SecurityRoleTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['role']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property role:fhir.CodeableConcept fhir: Consent.provision.actor.role:CodeableConcept' });
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference fhir: Consent.provision.actor.reference:Reference' });
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentProvisionActor._fts_dataType = 'ConsentProvisionActor';
/**
 * The resources controlled by this rule if specific resources are referenced.
 */
export class ConsentProvisionData extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentProvisionData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['meaning']) {
            this.meaning = new fhir.FhirCode({ value: source.meaning });
        }
        else {
            this.meaning = null;
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Required-bound Value Set for meaning (Consent.provision.data.meaning)
     */
    static get meaningRequiredCodes() {
        return ConsentDataMeaningCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['meaning']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property meaning:fhir.FhirCode<ConsentDataMeaningCodeType> fhir: Consent.provision.data.meaning:code' });
        }
        if (this['meaning'] && (!Object.values(ConsentDataMeaningCodes).includes(this.meaning))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property meaning:fhir.FhirCode<ConsentDataMeaningCodeType> fhir: Consent.provision.data.meaning:code Required binding to: ConsentDataMeaning' });
        }
        if (this["meaning"]) {
            issues.push(...this.meaning.doModelValidation());
        }
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference fhir: Consent.provision.data.reference:Reference' });
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentProvisionData._fts_dataType = 'ConsentProvisionData';
/**
 * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
 */
export class ConsentProvision extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentProvision - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ConsentProvisionActor(x));
        }
        else {
            this.actor = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.action = [];
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.Coding(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => new fhir.Coding(x));
        }
        else {
            this.purpose = [];
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.Coding(x));
        }
        else {
            this.class = [];
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['dataPeriod']) {
            this.dataPeriod = new fhir.Period(source.dataPeriod);
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.ConsentProvisionData(x));
        }
        else {
            this.data = [];
        }
        if (source['provision']) {
            this.provision = source.provision.map((x) => new fhir.ConsentProvision(x));
        }
        else {
            this.provision = [];
        }
    }
    /**
     * Required-bound Value Set for type (Consent.provision.type)
     */
    static get typeRequiredCodes() {
        return ConsentProvisionTypeCodes;
    }
    /**
     * Extensible-bound Value Set for securityLabel (Consent.provision.securityLabel)
     */
    static get securityLabelExtensibleCodings() {
        return SecurityLabelsCodings;
    }
    /**
     * Extensible-bound Value Set for purpose (Consent.provision.purpose)
     */
    static get purposeExtensibleCodings() {
        return V3PurposeOfUseCodings;
    }
    /**
     * Extensible-bound Value Set for class (Consent.provision.class)
     */
    static get classExtensibleCodings() {
        return ConsentContentClassCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['type'] && (!Object.values(ConsentProvisionTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type?:fhir.FhirCode<ConsentProvisionTypeCodeType> fhir: Consent.provision.type:code Required binding to: ConsentProvisionType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["actor"]) {
            this.actor.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            this.purpose.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["class"]) {
            this.class.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["dataPeriod"]) {
            issues.push(...this.dataPeriod.doModelValidation());
        }
        if (this["data"]) {
            this.data.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["provision"]) {
            this.provision.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentProvision._fts_dataType = 'ConsentProvision';
/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
export class Consent extends fhir.DomainResource {
    /**
     * Default constructor for Consent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Consent';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        else {
            this.scope = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['dateTime']) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime });
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['organization']) {
            this.organization = source.organization.map((x) => new fhir.Reference(x));
        }
        else {
            this.organization = [];
        }
        if (source['source']) {
            this.source = source.source;
        }
        else if (source['sourceAttachment']) {
            this.source = new fhir.Attachment(source.sourceAttachment);
        }
        else if (source['sourceReference']) {
            this.source = new fhir.Reference(source.sourceReference);
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.ConsentPolicy(x));
        }
        else {
            this.policy = [];
        }
        if (source['policyRule']) {
            this.policyRule = new fhir.CodeableConcept(source.policyRule);
        }
        if (source['verification']) {
            this.verification = source.verification.map((x) => new fhir.ConsentVerification(x));
        }
        else {
            this.verification = [];
        }
        if (source['provision']) {
            this.provision = new fhir.ConsentProvision(source.provision);
        }
    }
    /**
     * Required-bound Value Set for status (Consent.status)
     */
    static get statusRequiredCodes() {
        return ConsentStateCodes;
    }
    /**
     * Extensible-bound Value Set for scope (Consent.scope)
     */
    static get scopeExtensibleCodings() {
        return ConsentScopeCodings;
    }
    /**
     * Extensible-bound Value Set for category (Consent.category)
     */
    static get categoryExtensibleCodings() {
        return ConsentCategoryCodings;
    }
    /**
     * Extensible-bound Value Set for policyRule (Consent.policyRule)
     */
    static get policyRuleExtensibleCodings() {
        return ConsentPolicyCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Consent" fhir: Consent.resourceType:"Consent"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ConsentStateCodeType> fhir: Consent.status:code' });
        }
        if (this['status'] && (!Object.values(ConsentStateCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ConsentStateCodeType> fhir: Consent.status:code Required binding to: ConsentState' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['scope']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property scope:fhir.CodeableConcept fhir: Consent.scope:CodeableConcept' });
        }
        if (this["scope"]) {
            issues.push(...this.scope.doModelValidation());
        }
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.CodeableConcept[] fhir: Consent.category:CodeableConcept' });
        }
        else if (!Array.isArray(this.category)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property category:fhir.CodeableConcept[] fhir: Consent.category:CodeableConcept' });
        }
        else if (this.category.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.CodeableConcept[] fhir: Consent.category:CodeableConcept' });
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["dateTime"]) {
            issues.push(...this.dateTime.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["organization"]) {
            this.organization.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["policy"]) {
            this.policy.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["policyRule"]) {
            issues.push(...this.policyRule.doModelValidation());
        }
        if (this["verification"]) {
            this.verification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["provision"]) {
            issues.push(...this.provision.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Consent._fts_dataType = 'Consent';
/**
 * Internal flag to properly serialize choice-type element Consent.source[x]
 */
Consent._fts_sourceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,