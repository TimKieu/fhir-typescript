// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Consent
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConsentDataMeaningVsValidation } from '../fhirValueSets/ConsentDataMeaningVsValidation.js';
// @ts-ignore
import { ConsentProvisionTypeVsValidation } from '../fhirValueSets/ConsentProvisionTypeVsValidation.js';
// @ts-ignore
import { ConsentStateVsValidation } from '../fhirValueSets/ConsentStateVsValidation.js';
/**
 * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
 */
export class ConsentPolicy extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentPolicy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authority']) {
            this.authority = new fhir.FhirUri({ value: source.authority });
        }
        if (source['_authority']) {
            if (this.authority) {
                this.authority.addExtendedProperties(source._authority);
            }
            else {
                this.authority = new fhir.FhirUri(source._authority);
            }
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.policy';
        }
        iss.push(...this.vOS('authority', exp));
        iss.push(...this.vOS('uri', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentPolicy._fts_dataType = 'ConsentPolicy';
/**
 * Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
 */
export class ConsentVerification extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentVerification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['verified']) {
            this.verified = new fhir.FhirBoolean({ value: source.verified });
        }
        else {
            this.verified = null;
        }
        if (source['_verified']) {
            if (this.verified) {
                this.verified.addExtendedProperties(source._verified);
            }
            else {
                this.verified = new fhir.FhirBoolean(source._verified);
            }
        }
        if (source['verifiedWith']) {
            this.verifiedWith = new fhir.Reference(source.verifiedWith);
        }
        if (source['verificationDate']) {
            this.verificationDate = new fhir.FhirDateTime({ value: source.verificationDate });
        }
        if (source['_verificationDate']) {
            if (this.verificationDate) {
                this.verificationDate.addExtendedProperties(source._verificationDate);
            }
            else {
                this.verificationDate = new fhir.FhirDateTime(source._verificationDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.verification';
        }
        iss.push(...this.vRS('verified', exp));
        iss.push(...this.vOS('verifiedWith', exp));
        iss.push(...this.vOS('verificationDate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentVerification._fts_dataType = 'ConsentVerification';
/**
 * Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
 */
export class ConsentProvisionActor extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentProvisionActor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.provision.actor';
        }
        iss.push(...this.vRS('role', exp));
        iss.push(...this.vRS('reference', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentProvisionActor._fts_dataType = 'ConsentProvisionActor';
/**
 * The resources controlled by this rule if specific resources are referenced.
 */
export class ConsentProvisionData extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentProvisionData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['meaning']) {
            this.meaning = new fhir.FhirCode({ value: source.meaning });
        }
        else {
            this.meaning = null;
        }
        if (source['_meaning']) {
            if (this.meaning) {
                this.meaning.addExtendedProperties(source._meaning);
            }
            else {
                this.meaning = new fhir.FhirCode(source._meaning);
            }
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.provision.data';
        }
        iss.push(...this.vRSV('meaning', exp, 'ConsentDataMeaning', ConsentDataMeaningVsValidation, 'r'));
        iss.push(...this.vRS('reference', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentProvisionData._fts_dataType = 'ConsentProvisionData';
/**
 * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
 */
export class ConsentProvision extends fhir.BackboneElement {
    /**
     * Default constructor for ConsentProvision - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['actor']) {
            this.actor = source.actor.map((x) => new fhir.ConsentProvisionActor(x));
        }
        else {
            this.actor = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.action = [];
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.Coding(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['purpose']) {
            this.purpose = source.purpose.map((x) => new fhir.Coding(x));
        }
        else {
            this.purpose = [];
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.Coding(x));
        }
        else {
            this.class = [];
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['dataPeriod']) {
            this.dataPeriod = new fhir.Period(source.dataPeriod);
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.ConsentProvisionData(x));
        }
        else {
            this.data = [];
        }
        if (source['provision']) {
            this.provision = source.provision.map((x) => new fhir.ConsentProvision(x));
        }
        else {
            this.provision = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent.provision';
        }
        iss.push(...this.vOSV('type', exp, 'ConsentProvisionType', ConsentProvisionTypeVsValidation, 'r'));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOA('actor', exp));
        iss.push(...this.vOA('action', exp));
        iss.push(...this.vOA('securityLabel', exp));
        iss.push(...this.vOA('purpose', exp));
        iss.push(...this.vOA('class', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOS('dataPeriod', exp));
        iss.push(...this.vOA('data', exp));
        iss.push(...this.vOA('provision', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConsentProvision._fts_dataType = 'ConsentProvision';
/**
 * A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 */
export class Consent extends fhir.DomainResource {
    /**
     * Default constructor for Consent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Consent';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        else {
            this.scope = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['dateTime']) {
            this.dateTime = new fhir.FhirDateTime({ value: source.dateTime });
        }
        if (source['_dateTime']) {
            if (this.dateTime) {
                this.dateTime.addExtendedProperties(source._dateTime);
            }
            else {
                this.dateTime = new fhir.FhirDateTime(source._dateTime);
            }
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['organization']) {
            this.organization = source.organization.map((x) => new fhir.Reference(x));
        }
        else {
            this.organization = [];
        }
        if (source['source']) {
            this.source = source.source;
        }
        else if (source['sourceAttachment']) {
            this.source = new fhir.Attachment(source.sourceAttachment);
        }
        else if (source['sourceReference']) {
            this.source = new fhir.Reference(source.sourceReference);
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.ConsentPolicy(x));
        }
        else {
            this.policy = [];
        }
        if (source['policyRule']) {
            this.policyRule = new fhir.CodeableConcept(source.policyRule);
        }
        if (source['verification']) {
            this.verification = source.verification.map((x) => new fhir.ConsentVerification(x));
        }
        else {
            this.verification = [];
        }
        if (source['provision']) {
            this.provision = new fhir.ConsentProvision(source.provision);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Consent';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'ConsentState', ConsentStateVsValidation, 'r'));
        iss.push(...this.vRS('scope', exp));
        iss.push(...this.vRA('category', exp));
        iss.push(...this.vOS('patient', exp));
        iss.push(...this.vOS('dateTime', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOA('organization', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOA('policy', exp));
        iss.push(...this.vOS('policyRule', exp));
        iss.push(...this.vOA('verification', exp));
        iss.push(...this.vOS('provision', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Consent._fts_dataType = 'Consent';
/**
 * Internal flag to properly serialize choice-type element Consent.source[x]
 */
Consent._fts_sourceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,