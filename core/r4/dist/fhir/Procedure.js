/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { DeviceActionCodings } from '../fhirValueSets/DeviceActionCodings.js';
import { EventStatusCodings } from '../fhirValueSets/EventStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUri } from './FhirUri.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { FhirString } from './FhirString.js';
import { Age } from './Age.js';
import { Range } from './Range.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Limited to "real" people rather than equipment.
 */
var ProcedurePerformer = /** @class */ (function (_super) {
    __extends(ProcedurePerformer, _super);
    /**
     * Default constructor for ProcedurePerformer - initializes any required elements to null if a value is not provided.
     */
    function ProcedurePerformer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['function']) {
            _this.function = new CodeableConcept(source.function);
        }
        if (source['actor']) {
            _this.actor = new Reference(source.actor);
        }
        else {
            _this.actor = null;
        }
        if (source['onBehalfOf']) {
            _this.onBehalfOf = new Reference(source.onBehalfOf);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ProcedurePerformer.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["function"]) {
            (_a = outcome.issue).push.apply(_a, this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actor:fhir.Reference fhir: Procedure.performer.actor:Reference', }));
        }
        if (this["actor"]) {
            (_b = outcome.issue).push.apply(_b, this.actor.doModelValidation().issue);
        }
        if (this["onBehalfOf"]) {
            (_c = outcome.issue).push.apply(_c, this.onBehalfOf.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ProcedurePerformer._fts_dataType = 'ProcedurePerformer';
    return ProcedurePerformer;
}(BackboneElement));
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
var ProcedureFocalDevice = /** @class */ (function (_super) {
    __extends(ProcedureFocalDevice, _super);
    /**
     * Default constructor for ProcedureFocalDevice - initializes any required elements to null if a value is not provided.
     */
    function ProcedureFocalDevice(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['action']) {
            _this.action = new CodeableConcept(source.action);
        }
        if (source['manipulated']) {
            _this.manipulated = new Reference(source.manipulated);
        }
        else {
            _this.manipulated = null;
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for action (Procedure.focalDevice.action)
     */
    ProcedureFocalDevice.actionPreferredCoding = function () {
        return DeviceActionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ProcedureFocalDevice.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["action"]) {
            (_a = outcome.issue).push.apply(_a, this.action.doModelValidation().issue);
        }
        if (!this['manipulated']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property manipulated:fhir.Reference fhir: Procedure.focalDevice.manipulated:Reference', }));
        }
        if (this["manipulated"]) {
            (_b = outcome.issue).push.apply(_b, this.manipulated.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ProcedureFocalDevice._fts_dataType = 'ProcedureFocalDevice';
    return ProcedureFocalDevice;
}(BackboneElement));
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
var Procedure = /** @class */ (function (_super) {
    __extends(Procedure, _super);
    /**
     * Default constructor for Procedure - initializes any required elements to null if a value is not provided.
     */
    function Procedure(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Procedure';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.instantiatesUri = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = new CodeableConcept(source.statusReason);
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['performed']) {
            _this.performed = source.performed;
        }
        else if (source['performedDateTime']) {
            _this.performed = new FhirDateTime({ value: source.performedDateTime });
        }
        else if (source['performedPeriod']) {
            _this.performed = new Period(source.performedPeriod);
        }
        else if (source['performedString']) {
            _this.performed = new FhirString({ value: source.performedString });
        }
        else if (source['performedAge']) {
            _this.performed = new Age(source.performedAge);
        }
        else if (source['performedRange']) {
            _this.performed = new Range(source.performedRange);
        }
        if (source['recorder']) {
            _this.recorder = new Reference(source.recorder);
        }
        if (source['asserter']) {
            _this.asserter = new Reference(source.asserter);
        }
        if (source['performer']) {
            _this.performer = source.performer.map(function (x) { return new ProcedurePerformer(x); });
        }
        else {
            _this.performer = [];
        }
        if (source['location']) {
            _this.location = new Reference(source.location);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['bodySite']) {
            _this.bodySite = source.bodySite.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.bodySite = [];
        }
        if (source['outcome']) {
            _this.outcome = new CodeableConcept(source.outcome);
        }
        if (source['report']) {
            _this.report = source.report.map(function (x) { return new Reference(x); });
        }
        else {
            _this.report = [];
        }
        if (source['complication']) {
            _this.complication = source.complication.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.complication = [];
        }
        if (source['complicationDetail']) {
            _this.complicationDetail = source.complicationDetail.map(function (x) { return new Reference(x); });
        }
        else {
            _this.complicationDetail = [];
        }
        if (source['followUp']) {
            _this.followUp = source.followUp.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.followUp = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['focalDevice']) {
            _this.focalDevice = source.focalDevice.map(function (x) { return new ProcedureFocalDevice(x); });
        }
        else {
            _this.focalDevice = [];
        }
        if (source['usedReference']) {
            _this.usedReference = source.usedReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.usedReference = [];
        }
        if (source['usedCode']) {
            _this.usedCode = source.usedCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.usedCode = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Procedure.status)
     */
    Procedure.statusRequiredCoding = function () {
        return EventStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Procedure.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Procedure" fhir: Procedure.resourceType:"Procedure"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:EventStatusCodeType fhir: Procedure.status:code', }));
        }
        if (this["statusReason"]) {
            (_a = outcome.issue).push.apply(_a, this.statusReason.doModelValidation().issue);
        }
        if (this["category"]) {
            (_b = outcome.issue).push.apply(_b, this.category.doModelValidation().issue);
        }
        if (this["code"]) {
            (_c = outcome.issue).push.apply(_c, this.code.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: Procedure.subject:Reference', }));
        }
        if (this["subject"]) {
            (_d = outcome.issue).push.apply(_d, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_e = outcome.issue).push.apply(_e, this.encounter.doModelValidation().issue);
        }
        if (this["recorder"]) {
            (_f = outcome.issue).push.apply(_f, this.recorder.doModelValidation().issue);
        }
        if (this["asserter"]) {
            (_g = outcome.issue).push.apply(_g, this.asserter.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["location"]) {
            (_h = outcome.issue).push.apply(_h, this.location.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["bodySite"]) {
            this.bodySite.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["outcome"]) {
            (_j = outcome.issue).push.apply(_j, this.outcome.doModelValidation().issue);
        }
        if (this["report"]) {
            this.report.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["complication"]) {
            this.complication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["complicationDetail"]) {
            this.complicationDetail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["followUp"]) {
            this.followUp.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["focalDevice"]) {
            this.focalDevice.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["usedReference"]) {
            this.usedReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["usedCode"]) {
            this.usedCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Procedure._fts_dataType = 'Procedure';
    /**
     * Internal flag to properly serialize choice-type element Procedure.performed[x]
     */
    Procedure._fts_performedIsChoice = true;
    return Procedure;
}(DomainResource));

export { Procedure, ProcedureFocalDevice, ProcedurePerformer };
//# sourceMappingURL=Procedure.js.map
