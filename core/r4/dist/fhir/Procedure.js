// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Procedure
import * as fhir from '../fhir.js';
// @ts-ignore
import { EventStatusVsValidation } from '../fhirValueSets/EventStatusVsValidation.js';
/**
 * Limited to "real" people rather than equipment.
 */
export class ProcedurePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedurePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function, options);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        else {
            this.actor = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure.performer';
        }
        iss.push(...this.vOS('function', exp));
        iss.push(...this.vRS('actor', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedurePerformer._fts_dataType = 'ProcedurePerformer';
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export class ProcedureFocalDevice extends fhir.BackboneElement {
    /**
     * Default constructor for ProcedureFocalDevice - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action, options);
        }
        if (source['manipulated']) {
            this.manipulated = new fhir.Reference(source.manipulated, options);
        }
        else {
            this.manipulated = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure.focalDevice';
        }
        iss.push(...this.vOS('action', exp));
        iss.push(...this.vRS('manipulated', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProcedureFocalDevice._fts_dataType = 'ProcedureFocalDevice';
/**
 * An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
 */
export class Procedure extends fhir.DomainResource {
    /**
     * Default constructor for Procedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Procedure';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical'] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri'] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason, options);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['performed']) {
            this.performed = source.performed;
        }
        else if (source['performedDateTime'] !== undefined) {
            this.performed = new fhir.FhirDateTime({ value: source.performedDateTime }, options);
        }
        else if (source['performedPeriod']) {
            this.performed = new fhir.Period(source.performedPeriod, options);
        }
        else if (source['performedString'] !== undefined) {
            this.performed = new fhir.FhirString({ value: source.performedString }, options);
        }
        else if (source['performedAge']) {
            this.performed = new fhir.Age(source.performedAge, options);
        }
        else if (source['performedRange']) {
            this.performed = new fhir.Range(source.performedRange, options);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder, options);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter, options);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ProcedurePerformer(x, options));
        }
        else {
            this.performer = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.bodySite = [];
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome, options);
        }
        if (source['report']) {
            this.report = source.report.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.report = [];
        }
        if (source['complication']) {
            this.complication = source.complication.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.complication = [];
        }
        if (source['complicationDetail']) {
            this.complicationDetail = source.complicationDetail.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.complicationDetail = [];
        }
        if (source['followUp']) {
            this.followUp = source.followUp.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.followUp = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['focalDevice']) {
            this.focalDevice = source.focalDevice.map((x) => new fhir.ProcedureFocalDevice(x, options));
        }
        else {
            this.focalDevice = [];
        }
        if (source['usedReference']) {
            this.usedReference = source.usedReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.usedReference = [];
        }
        if (source['usedCode']) {
            this.usedCode = source.usedCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.usedCode = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Procedure';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('instantiatesCanonical', exp));
        iss.push(...this.vOA('instantiatesUri', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'EventStatus', EventStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusReason', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('performed', exp));
        iss.push(...this.vOS('recorder', exp));
        iss.push(...this.vOS('asserter', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('bodySite', exp));
        iss.push(...this.vOS('outcome', exp));
        iss.push(...this.vOA('report', exp));
        iss.push(...this.vOA('complication', exp));
        iss.push(...this.vOA('complicationDetail', exp));
        iss.push(...this.vOA('followUp', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('focalDevice', exp));
        iss.push(...this.vOA('usedReference', exp));
        iss.push(...this.vOA('usedCode', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Procedure._fts_dataType = 'Procedure';
/**
 * Internal flag to properly serialize choice-type element Procedure.performed[x]
 */
Procedure._fts_performedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,