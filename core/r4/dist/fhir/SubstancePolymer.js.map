{"version":3,"file":"SubstancePolymer.js","sources":["../../src/fhir/SubstancePolymer.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: SubstancePolymer\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SubstancePolymerMonomerSetStartingMaterial type.\r\n */\r\nexport interface SubstancePolymerMonomerSetStartingMaterialArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  material?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  isDefining?: fhir.FhirBoolean|boolean|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amount?: fhir.SubstanceAmountArgs|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstancePolymerMonomerSetStartingMaterial extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstancePolymerMonomerSetStartingMaterial';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public material?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public isDefining?: fhir.FhirBoolean|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public amount?: fhir.SubstanceAmount|undefined;\r\n  /**\r\n   * Default constructor for SubstancePolymerMonomerSetStartingMaterial - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstancePolymerMonomerSetStartingMaterialArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['material']) { this.material = new fhir.CodeableConcept(source.material); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['isDefining']) { this.isDefining = new fhir.FhirBoolean({value: source.isDefining}); }\r\n    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"material\"]) { outcome.issue!.push(...this.material.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"isDefining\"]) { outcome.issue!.push(...this.isDefining.doModelValidation().issue!); }\r\n    if (this[\"amount\"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstancePolymerMonomerSet type.\r\n */\r\nexport interface SubstancePolymerMonomerSetArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  ratioType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  startingMaterial?: fhir.SubstancePolymerMonomerSetStartingMaterialArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstancePolymerMonomerSet extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstancePolymerMonomerSet';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public ratioType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public startingMaterial?: fhir.SubstancePolymerMonomerSetStartingMaterial[];\r\n  /**\r\n   * Default constructor for SubstancePolymerMonomerSet - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstancePolymerMonomerSetArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['ratioType']) { this.ratioType = new fhir.CodeableConcept(source.ratioType); }\r\n    if (source['startingMaterial']) { this.startingMaterial = source.startingMaterial.map((x) => new fhir.SubstancePolymerMonomerSetStartingMaterial(x)); }\r\n    else { this.startingMaterial = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"ratioType\"]) { outcome.issue!.push(...this.ratioType.doModelValidation().issue!); }\r\n    if (this[\"startingMaterial\"]) { this.startingMaterial.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation type.\r\n */\r\nexport interface SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  degree?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amount?: fhir.SubstanceAmountArgs|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public degree?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public amount?: fhir.SubstanceAmount|undefined;\r\n  /**\r\n   * Default constructor for SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['degree']) { this.degree = new fhir.CodeableConcept(source.degree); }\r\n    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"degree\"]) { outcome.issue!.push(...this.degree.doModelValidation().issue!); }\r\n    if (this[\"amount\"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstancePolymerRepeatRepeatUnitStructuralRepresentation type.\r\n */\r\nexport interface SubstancePolymerRepeatRepeatUnitStructuralRepresentationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  representation?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  attachment?: fhir.AttachmentArgs|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstancePolymerRepeatRepeatUnitStructuralRepresentation';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public representation?: fhir.FhirString|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public attachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * Default constructor for SubstancePolymerRepeatRepeatUnitStructuralRepresentation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstancePolymerRepeatRepeatUnitStructuralRepresentationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['representation']) { this.representation = new fhir.FhirString({value: source.representation}); }\r\n    if (source['attachment']) { this.attachment = new fhir.Attachment(source.attachment); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"representation\"]) { outcome.issue!.push(...this.representation.doModelValidation().issue!); }\r\n    if (this[\"attachment\"]) { outcome.issue!.push(...this.attachment.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstancePolymerRepeatRepeatUnit type.\r\n */\r\nexport interface SubstancePolymerRepeatRepeatUnitArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  orientationOfPolymerisation?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  repeatUnit?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amount?: fhir.SubstanceAmountArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  degreeOfPolymerisation?: fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationArgs[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  structuralRepresentation?: fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentationArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstancePolymerRepeatRepeatUnit extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstancePolymerRepeatRepeatUnit';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public orientationOfPolymerisation?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public repeatUnit?: fhir.FhirString|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public amount?: fhir.SubstanceAmount|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public degreeOfPolymerisation?: fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public structuralRepresentation?: fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation[];\r\n  /**\r\n   * Default constructor for SubstancePolymerRepeatRepeatUnit - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstancePolymerRepeatRepeatUnitArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['orientationOfPolymerisation']) { this.orientationOfPolymerisation = new fhir.CodeableConcept(source.orientationOfPolymerisation); }\r\n    if (source['repeatUnit']) { this.repeatUnit = new fhir.FhirString({value: source.repeatUnit}); }\r\n    if (source['amount']) { this.amount = new fhir.SubstanceAmount(source.amount); }\r\n    if (source['degreeOfPolymerisation']) { this.degreeOfPolymerisation = source.degreeOfPolymerisation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(x)); }\r\n    else { this.degreeOfPolymerisation = []; }\r\n    if (source['structuralRepresentation']) { this.structuralRepresentation = source.structuralRepresentation.map((x) => new fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation(x)); }\r\n    else { this.structuralRepresentation = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"orientationOfPolymerisation\"]) { outcome.issue!.push(...this.orientationOfPolymerisation.doModelValidation().issue!); }\r\n    if (this[\"repeatUnit\"]) { outcome.issue!.push(...this.repeatUnit.doModelValidation().issue!); }\r\n    if (this[\"amount\"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }\r\n    if (this[\"degreeOfPolymerisation\"]) { this.degreeOfPolymerisation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"structuralRepresentation\"]) { this.structuralRepresentation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstancePolymerRepeat type.\r\n */\r\nexport interface SubstancePolymerRepeatArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  numberOfUnits?: fhir.FhirInteger|number|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  averageMolecularFormula?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  repeatUnitAmountType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  repeatUnit?: fhir.SubstancePolymerRepeatRepeatUnitArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstancePolymerRepeat extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstancePolymerRepeat';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public numberOfUnits?: fhir.FhirInteger|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public averageMolecularFormula?: fhir.FhirString|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public repeatUnitAmountType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public repeatUnit?: fhir.SubstancePolymerRepeatRepeatUnit[];\r\n  /**\r\n   * Default constructor for SubstancePolymerRepeat - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstancePolymerRepeatArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['numberOfUnits']) { this.numberOfUnits = new fhir.FhirInteger({value: source.numberOfUnits}); }\r\n    if (source['averageMolecularFormula']) { this.averageMolecularFormula = new fhir.FhirString({value: source.averageMolecularFormula}); }\r\n    if (source['repeatUnitAmountType']) { this.repeatUnitAmountType = new fhir.CodeableConcept(source.repeatUnitAmountType); }\r\n    if (source['repeatUnit']) { this.repeatUnit = source.repeatUnit.map((x) => new fhir.SubstancePolymerRepeatRepeatUnit(x)); }\r\n    else { this.repeatUnit = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"numberOfUnits\"]) { outcome.issue!.push(...this.numberOfUnits.doModelValidation().issue!); }\r\n    if (this[\"averageMolecularFormula\"]) { outcome.issue!.push(...this.averageMolecularFormula.doModelValidation().issue!); }\r\n    if (this[\"repeatUnitAmountType\"]) { outcome.issue!.push(...this.repeatUnitAmountType.doModelValidation().issue!); }\r\n    if (this[\"repeatUnit\"]) { this.repeatUnit.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstancePolymer type.\r\n */\r\nexport interface SubstancePolymerArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"SubstancePolymer\"|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  class?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  geometry?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  copolymerConnectivity?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  modification?: fhir.FhirString[]|string[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  monomerSet?: fhir.SubstancePolymerMonomerSetArgs[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  repeat?: fhir.SubstancePolymerRepeatArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstancePolymer extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstancePolymer';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"SubstancePolymer\";\r\n  /**\r\n   * Todo.\r\n   */\r\n  public class?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public geometry?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public copolymerConnectivity?: fhir.CodeableConcept[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public modification?: fhir.FhirString[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public monomerSet?: fhir.SubstancePolymerMonomerSet[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public repeat?: fhir.SubstancePolymerRepeat[];\r\n  /**\r\n   * Default constructor for SubstancePolymer - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstancePolymerArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'SubstancePolymer';\r\n    if (source['class']) { this.class = new fhir.CodeableConcept(source.class); }\r\n    if (source['geometry']) { this.geometry = new fhir.CodeableConcept(source.geometry); }\r\n    if (source['copolymerConnectivity']) { this.copolymerConnectivity = source.copolymerConnectivity.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.copolymerConnectivity = []; }\r\n    if (source['modification']) { this.modification = source.modification.map((x) => new fhir.FhirString({value: x})); }\r\n    else { this.modification = []; }\r\n    if (source['monomerSet']) { this.monomerSet = source.monomerSet.map((x) => new fhir.SubstancePolymerMonomerSet(x)); }\r\n    else { this.monomerSet = []; }\r\n    if (source['repeat']) { this.repeat = source.repeat.map((x) => new fhir.SubstancePolymerRepeat(x)); }\r\n    else { this.repeat = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"SubstancePolymer\" fhir: SubstancePolymer.resourceType:\"SubstancePolymer\"', }));\r\n    }\r\n    if (this[\"class\"]) { outcome.issue!.push(...this.class.doModelValidation().issue!); }\r\n    if (this[\"geometry\"]) { outcome.issue!.push(...this.geometry.doModelValidation().issue!); }\r\n    if (this[\"copolymerConnectivity\"]) { this.copolymerConnectivity.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"modification\"]) { this.modification.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"monomerSet\"]) { this.monomerSet.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"repeat\"]) { this.repeat.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.CodeableConcept","fhir.FhirBoolean","fhir.SubstanceAmount","fhir.BackboneElement","fhir.SubstancePolymerMonomerSetStartingMaterial","fhir.FhirString","fhir.Attachment","fhir.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation","fhir.SubstancePolymerRepeatRepeatUnitStructuralRepresentation","fhir.FhirInteger","fhir.SubstancePolymerRepeatRepeatUnit","fhir.SubstancePolymerMonomerSet","fhir.SubstancePolymerRepeat","fhir.OperationOutcomeIssue","fhir.DomainResource"],"mappings":"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"}