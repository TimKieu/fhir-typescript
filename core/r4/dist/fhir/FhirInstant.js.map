{"version":3,"file":"FhirInstant.js","sources":["../../src/fhir/FhirInstant.ts"],"sourcesContent":["// Minimum TypeScript Version: 3.7\r\n// FHIR Primitive: instant\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n\r\n/**\r\n * Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required\r\n */\r\nexport interface FhirInstantArgs extends fhir.FhirStringArgs {\r\n  /**\r\n   * Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required\r\n   */\r\n  value?:FhirInstant|string|undefined;\r\n}\r\n\r\n/**\r\n * Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required\r\n */\r\nexport class FhirInstant extends fhir.FhirString {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Instant';\r\n  /**\r\n   * Mapping of this datatype to a JSON equivalent\r\n   */\r\n  public static readonly _fts_jsonType:string = 'string';\r\n  // published regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\r\n  public static readonly _fts_regex:RegExp = /^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$/\r\n  /**\r\n   * A instant value, represented as a JS string\r\n   */\r\n  declare value?:string|null|undefined;\r\n  /**\r\n     * Create a FhirInstant\r\n     * @param value Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required\r\n     * @param id Unique id for inter-element referencing (uncommon on primitives)\r\n     * @param extension Additional content defined by implementations\r\n     * @param options Options to pass to extension constructors\r\n  */\r\n  constructor(source:Partial<FhirInstantArgs> = {}, options:fhir.FhirConstructorOptions = { } ) {\r\n    super(source, options);\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if ((this.value) && (!FhirInstant._fts_regex.test(this.value))) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.InvalidContent,  diagnostics: \"Invalid value in primitive type instant\", }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.OperationOutcomeIssue","fhir.FhirString"],"mappings":";;;;;;;;AAAA;AAkBA;;AAEG;AACH,IAAA,WAAA,kBAAA,UAAA,MAAA,EAAA;IAAiC,SAAe,CAAA,WAAA,EAAA,MAAA,CAAA,CAAA;AAe9C;;;;;;AAME;IACF,SAAY,WAAA,CAAA,MAAoC,EAAE,OAAyC,EAAA;AAA/E,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAoC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAyC,GAAA,EAAA,CAAA,EAAA;eACzF,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAAA,IAAA,CAAA;KACvB;AACD;;AAEG;AACa,IAAA,WAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9D,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,cAAc,EAAG,WAAW,EAAE,yCAAyC,GAAG,CAAC,CAAC,CAAC;AAC5L,SAAA;AACD,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAjCD;;AAEG;IACoB,WAAa,CAAA,aAAA,GAAU,SAAS,CAAC;AACxD;;AAEG;IACoB,WAAa,CAAA,aAAA,GAAU,QAAQ,CAAC;;IAEhC,WAAU,CAAA,UAAA,GAAU,sMAAsM,CAAA;IAyBnP,OAAC,WAAA,CAAA;AAAA,CAnCD,CAAiCC,UAAe,CAmC/C;;;;"}