// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: RelatedArtifact
import * as fhir from '../fhir.js';
// @ts-ignore
import { RelatedArtifactTypeCodes } from '../fhirValueSets/RelatedArtifactTypeCodes.js';
/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export class RelatedArtifact extends fhir.FhirElement {
    /**
     * Default constructor for RelatedArtifact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['citation']) {
            this.citation = new fhir.FhirMarkdown({ value: source.citation });
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['document']) {
            this.document = new fhir.Attachment(source.document);
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCanonical({ value: source.resource });
        }
    }
    /**
     * Required-bound Value Set for type (RelatedArtifact.type)
     */
    static get typeRequiredCodes() {
        return RelatedArtifactTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<RelatedArtifactTypeCodeType> fhir: RelatedArtifact.type:code' });
        }
        if (this['type'] && (!Object.values(RelatedArtifactTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<RelatedArtifactTypeCodeType> fhir: RelatedArtifact.type:code Required binding to: RelatedArtifactType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["label"]) {
            issues.push(...this.label.doModelValidation());
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation());
        }
        if (this["citation"]) {
            issues.push(...this.citation.doModelValidation());
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["document"]) {
            issues.push(...this.document.doModelValidation());
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RelatedArtifact._fts_dataType = 'RelatedArtifact';
//# sourceMappingURL=data:application/json;base64,