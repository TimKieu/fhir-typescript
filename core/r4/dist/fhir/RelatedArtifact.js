// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: RelatedArtifact
import * as fhir from '../fhir.js';
// @ts-ignore
import { RelatedArtifactTypeVsValidation } from '../fhirValueSets/RelatedArtifactTypeVsValidation.js';
/**
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 */
export class RelatedArtifact extends fhir.FhirElement {
    /**
     * Default constructor for RelatedArtifact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['label'] !== undefined) {
            this.label = new fhir.FhirString({ value: source.label }, options);
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label, options);
            }
        }
        if (source['display'] !== undefined) {
            this.display = new fhir.FhirString({ value: source.display }, options);
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display, options);
            }
        }
        if (source['citation'] !== undefined) {
            this.citation = new fhir.FhirMarkdown({ value: source.citation }, options);
        }
        if (source['_citation']) {
            if (this.citation) {
                this.citation.addExtendedProperties(source._citation);
            }
            else {
                this.citation = new fhir.FhirMarkdown(source._citation, options);
            }
        }
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUrl({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUrl(source._url, options);
            }
        }
        if (source['document']) {
            this.document = new fhir.Attachment(source.document, options);
        }
        if (source['resource'] !== undefined) {
            this.resource = new fhir.FhirCanonical({ value: source.resource }, options);
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirCanonical(source._resource, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RelatedArtifact';
        }
        iss.push(...this.vRSV('type', exp, 'RelatedArtifactType', RelatedArtifactTypeVsValidation, 'r'));
        iss.push(...this.vOS('label', exp));
        iss.push(...this.vOS('display', exp));
        iss.push(...this.vOS('citation', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('document', exp));
        iss.push(...this.vOS('resource', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RelatedArtifact._fts_dataType = 'RelatedArtifact';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVsYXRlZEFydGlmYWN0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9SZWxhdGVkQXJ0aWZhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0NBQW9DO0FBRXBDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQTJEdEc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxJQUFJLENBQUMsV0FBVztJQWlDbkQ7O09BRUc7SUFDSCxZQUFZLFNBQXNDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQzVGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQThCLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUFFO2FBQzNIO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNuQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsS0FBTSxDQUFDLENBQUM7YUFBRTtpQkFDN0Q7Z0JBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQThCLE1BQU0sQ0FBQyxLQUErQixFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQUU7U0FDdEg7UUFDRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLEVBQUU7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LENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7QUFwRkQ7O0dBRUc7QUFDNkIsNkJBQWEsR0FBVSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBDb21wbGV4VHlwZTogUmVsYXRlZEFydGlmYWN0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZWxhdGVkQXJ0aWZhY3RUeXBlQ29kZXMsICBSZWxhdGVkQXJ0aWZhY3RUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1JlbGF0ZWRBcnRpZmFjdFR5cGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVsYXRlZEFydGlmYWN0VHlwZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVsYXRlZEFydGlmYWN0VHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBSZWxhdGVkQXJ0aWZhY3QgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVsYXRlZEFydGlmYWN0QXJncyBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiByZWxhdGlvbnNoaXAgdG8gdGhlIHJlbGF0ZWQgYXJ0aWZhY3QuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5GaGlyQ29kZTxSZWxhdGVkQXJ0aWZhY3RUeXBlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlbGF0ZWRBcnRpZmFjdC50eXBlXHJcbiAgICovXHJcbiAgX3R5cGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgc2hvcnQgbGFiZWwgdGhhdCBjYW4gYmUgdXNlZCB0byByZWZlcmVuY2UgdGhlIGNpdGF0aW9uIGZyb20gZWxzZXdoZXJlIGluIHRoZSBjb250YWluaW5nIGFydGlmYWN0LCBzdWNoIGFzIGEgZm9vdG5vdGUgaW5kZXguXHJcbiAgICovXHJcbiAgbGFiZWw/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUmVsYXRlZEFydGlmYWN0LmxhYmVsXHJcbiAgICovXHJcbiAgX2xhYmVsPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBIGJyaWVmIGRlc2NyaXB0aW9uIG9mIHRoZSBkb2N1bWVudCBvciBrbm93bGVkZ2UgcmVzb3VyY2UgYmVpbmcgcmVmZXJlbmNlZCwgc3VpdGFibGUgZm9yIGRpc3BsYXkgdG8gYSBjb25zdW1lci5cclxuICAgKi9cclxuICBkaXNwbGF5PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlbGF0ZWRBcnRpZmFjdC5kaXNwbGF5XHJcbiAgICovXHJcbiAgX2Rpc3BsYXk/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEFkZGl0aW9uYWwgc3RydWN0dXJlZCBpbmZvcm1hdGlvbiBhYm91dCBjaXRhdGlvbnMgc2hvdWxkIGJlIGNhcHR1cmVkIGFzIGV4dGVuc2lvbnMuXHJcbiAgICovXHJcbiAgY2l0YXRpb24/OiBmaGlyLkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBSZWxhdGVkQXJ0aWZhY3QuY2l0YXRpb25cclxuICAgKi9cclxuICBfY2l0YXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIElmIGEgZG9jdW1lbnQgb3IgcmVzb3VyY2UgZWxlbWVudCBpcyBwcmVzZW50LCB0aGlzIGVsZW1lbnQgU0hBTEwgTk9UIGJlIHByb3ZpZGVkICh1c2UgdGhlIHVybCBvciByZWZlcmVuY2UgaW4gdGhlIEF0dGFjaG1lbnQgb3IgcmVzb3VyY2UgcmVmZXJlbmNlKS5cclxuICAgKi9cclxuICB1cmw/OiBmaGlyLkZoaXJVcmx8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogUmVsYXRlZEFydGlmYWN0LnVybFxyXG4gICAqL1xyXG4gIF91cmw/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkb2N1bWVudCBiZWluZyByZWZlcmVuY2VkLCByZXByZXNlbnRlZCBhcyBhbiBhdHRhY2htZW50LiBUaGlzIGlzIGV4Y2x1c2l2ZSB3aXRoIHRoZSByZXNvdXJjZSBlbGVtZW50LlxyXG4gICAqL1xyXG4gIGRvY3VtZW50PzogZmhpci5BdHRhY2htZW50QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIHR5cGUgaXMgcHJlZGVjZXNzb3IsIHRoaXMgaXMgYSByZWZlcmVuY2UgdG8gdGhlIHN1Y2NlZWRpbmcga25vd2xlZGdlIHJlc291cmNlLiBJZiB0aGUgdHlwZSBpcyBzdWNjZXNzb3IsIHRoaXMgaXMgYSByZWZlcmVuY2UgdG8gdGhlIHByaW9yIGtub3dsZWRnZSByZXNvdXJjZS5cclxuICAgKi9cclxuICByZXNvdXJjZT86IGZoaXIuRmhpckNhbm9uaWNhbHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBSZWxhdGVkQXJ0aWZhY3QucmVzb3VyY2VcclxuICAgKi9cclxuICBfcmVzb3VyY2U/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogUmVsYXRlZCBhcnRpZmFjdHMgc3VjaCBhcyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb24sIGp1c3RpZmljYXRpb24sIG9yIGJpYmxpb2dyYXBoaWMgcmVmZXJlbmNlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWxhdGVkQXJ0aWZhY3QgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1JlbGF0ZWRBcnRpZmFjdCc7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgcmVsYXRpb25zaGlwIHRvIHRoZSByZWxhdGVkIGFydGlmYWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkZoaXJDb2RlPFJlbGF0ZWRBcnRpZmFjdFR5cGVDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBBIHNob3J0IGxhYmVsIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSBjaXRhdGlvbiBmcm9tIGVsc2V3aGVyZSBpbiB0aGUgY29udGFpbmluZyBhcnRpZmFjdCwgc3VjaCBhcyBhIGZvb3Rub3RlIGluZGV4LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsYWJlbD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBicmllZiBkZXNjcmlwdGlvbiBvZiB0aGUgZG9jdW1lbnQgb3Iga25vd2xlZGdlIHJlc291cmNlIGJlaW5nIHJlZmVyZW5jZWQsIHN1aXRhYmxlIGZvciBkaXNwbGF5IHRvIGEgY29uc3VtZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3BsYXk/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFkZGl0aW9uYWwgc3RydWN0dXJlZCBpbmZvcm1hdGlvbiBhYm91dCBjaXRhdGlvbnMgc2hvdWxkIGJlIGNhcHR1cmVkIGFzIGV4dGVuc2lvbnMuXHJcbiAgICovXHJcbiAgcHVibGljIGNpdGF0aW9uPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIGEgZG9jdW1lbnQgb3IgcmVzb3VyY2UgZWxlbWVudCBpcyBwcmVzZW50LCB0aGlzIGVsZW1lbnQgU0hBTEwgTk9UIGJlIHByb3ZpZGVkICh1c2UgdGhlIHVybCBvciByZWZlcmVuY2UgaW4gdGhlIEF0dGFjaG1lbnQgb3IgcmVzb3VyY2UgcmVmZXJlbmNlKS5cclxuICAgKi9cclxuICBwdWJsaWMgdXJsPzogZmhpci5GaGlyVXJsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZG9jdW1lbnQgYmVpbmcgcmVmZXJlbmNlZCwgcmVwcmVzZW50ZWQgYXMgYW4gYXR0YWNobWVudC4gVGhpcyBpcyBleGNsdXNpdmUgd2l0aCB0aGUgcmVzb3VyY2UgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZG9jdW1lbnQ/OiBmaGlyLkF0dGFjaG1lbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSB0eXBlIGlzIHByZWRlY2Vzc29yLCB0aGlzIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSBzdWNjZWVkaW5nIGtub3dsZWRnZSByZXNvdXJjZS4gSWYgdGhlIHR5cGUgaXMgc3VjY2Vzc29yLCB0aGlzIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSBwcmlvciBrbm93bGVkZ2UgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc291cmNlPzogZmhpci5GaGlyQ2Fub25pY2FsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBSZWxhdGVkQXJ0aWZhY3QgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxSZWxhdGVkQXJ0aWZhY3RBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddICE9PSB1bmRlZmluZWQpIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuRmhpckNvZGU8UmVsYXRlZEFydGlmYWN0VHlwZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS50eXBlfSwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfdHlwZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnR5cGUpIHsgdGhpcy50eXBlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3R5cGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuRmhpckNvZGU8UmVsYXRlZEFydGlmYWN0VHlwZUNvZGVUeXBlPihzb3VyY2UuX3R5cGUgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2xhYmVsJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLmxhYmVsID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5sYWJlbH0sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydfbGFiZWwnXSkge1xyXG4gICAgICBpZiAodGhpcy5sYWJlbCkgeyB0aGlzLmxhYmVsLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2xhYmVsISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubGFiZWwgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fbGFiZWwgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2Rpc3BsYXknXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZGlzcGxheSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGlzcGxheX0sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGlzcGxheSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRpc3BsYXkpIHsgdGhpcy5kaXNwbGF5LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rpc3BsYXkhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kaXNwbGF5ID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rpc3BsYXkgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NpdGF0aW9uJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLmNpdGF0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmNpdGF0aW9ufSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jaXRhdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNpdGF0aW9uKSB7IHRoaXMuY2l0YXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY2l0YXRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jaXRhdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bihzb3VyY2UuX2NpdGF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyTWFya2Rvd25BcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3VybCddICE9PSB1bmRlZmluZWQpIHsgdGhpcy51cmwgPSBuZXcgZmhpci5GaGlyVXJsKHt2YWx1ZTogc291cmNlLnVybH0sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydfdXJsJ10pIHtcclxuICAgICAgaWYgKHRoaXMudXJsKSB7IHRoaXMudXJsLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3VybCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnVybCA9IG5ldyBmaGlyLkZoaXJVcmwoc291cmNlLl91cmwgYXMgUGFydGlhbDxmaGlyLkZoaXJVcmxBcmdzPiwgb3B0aW9ucyk7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RvY3VtZW50J10pIHsgdGhpcy5kb2N1bWVudCA9IG5ldyBmaGlyLkF0dGFjaG1lbnQoc291cmNlLmRvY3VtZW50LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzb3VyY2UnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMucmVzb3VyY2UgPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogc291cmNlLnJlc291cmNlfSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yZXNvdXJjZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlc291cmNlKSB7IHRoaXMucmVzb3VyY2UuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmVzb3VyY2UhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yZXNvdXJjZSA9IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoc291cmNlLl9yZXNvdXJjZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1JlbGF0ZWRBcnRpZmFjdCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlNWKCd0eXBlJyxleHAsJ1JlbGF0ZWRBcnRpZmFjdFR5cGUnLFJlbGF0ZWRBcnRpZmFjdFR5cGVWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbGFiZWwnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rpc3BsYXknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2NpdGF0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd1cmwnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2RvY3VtZW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdyZXNvdXJjZScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4iXX0=