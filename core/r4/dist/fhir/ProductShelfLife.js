/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';

// <auto-generated/>
/**
 * The shelf-life and storage information for a medicinal product item or container can be described using this class.
 */
var ProductShelfLife = /** @class */ (function (_super) {
    __extends(ProductShelfLife, _super);
    /**
     * Default constructor for ProductShelfLife - initializes any required elements to null if a value is not provided.
     */
    function ProductShelfLife(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['period']) {
            _this.period = new Quantity(source.period);
        }
        else {
            _this.period = null;
        }
        if (source['specialPrecautionsForStorage']) {
            _this.specialPrecautionsForStorage = source.specialPrecautionsForStorage.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.specialPrecautionsForStorage = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ProductShelfLife.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ProductShelfLife.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (!this['period']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property period:fhir.Quantity fhir: ProductShelfLife.period:Quantity', }));
        }
        if (this["period"]) {
            (_c = outcome.issue).push.apply(_c, this.period.doModelValidation().issue);
        }
        if (this["specialPrecautionsForStorage"]) {
            this.specialPrecautionsForStorage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ProductShelfLife._fts_dataType = 'ProductShelfLife';
    return ProductShelfLife;
}(BackboneElement));

export { ProductShelfLife };
//# sourceMappingURL=ProductShelfLife.js.map
