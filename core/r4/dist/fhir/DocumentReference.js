/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { DocumentRelationshipTypeCodings } from '../fhirValueSets/DocumentRelationshipTypeCodings.js';
import { FormatcodesCodings } from '../fhirValueSets/FormatcodesCodings.js';
import { DocumentReferenceStatusCodings } from '../fhirValueSets/DocumentReferenceStatusCodings.js';
import { CompositionStatusCodings } from '../fhirValueSets/CompositionStatusCodings.js';
import { C80DocTypecodesCodings } from '../fhirValueSets/C80DocTypecodesCodings.js';
import { SecurityLabelsCodings } from '../fhirValueSets/SecurityLabelsCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { Attachment } from './Attachment.js';
import { Coding } from './Coding.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Period } from './Period.js';
import { Identifier } from './Identifier.js';
import { FhirInstant } from './FhirInstant.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
var DocumentReferenceRelatesTo = /** @class */ (function (_super) {
    __extends(DocumentReferenceRelatesTo, _super);
    /**
     * Default constructor for DocumentReferenceRelatesTo - initializes any required elements to null if a value is not provided.
     */
    function DocumentReferenceRelatesTo(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = source.code;
        }
        else {
            _this.code = null;
        }
        if (source['target']) {
            _this.target = new Reference(source.target);
        }
        else {
            _this.target = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for code (DocumentReference.relatesTo.code)
     */
    DocumentReferenceRelatesTo.codeRequiredCoding = function () {
        return DocumentRelationshipTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DocumentReferenceRelatesTo.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:DocumentRelationshipTypeCodeType fhir: DocumentReference.relatesTo.code:code', }));
        }
        if (!this['target']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property target:fhir.Reference fhir: DocumentReference.relatesTo.target:Reference', }));
        }
        if (this["target"]) {
            (_a = outcome.issue).push.apply(_a, this.target.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DocumentReferenceRelatesTo._fts_dataType = 'DocumentReferenceRelatesTo';
    return DocumentReferenceRelatesTo;
}(BackboneElement));
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
var DocumentReferenceContent = /** @class */ (function (_super) {
    __extends(DocumentReferenceContent, _super);
    /**
     * Default constructor for DocumentReferenceContent - initializes any required elements to null if a value is not provided.
     */
    function DocumentReferenceContent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['attachment']) {
            _this.attachment = new Attachment(source.attachment);
        }
        else {
            _this.attachment = null;
        }
        if (source['format']) {
            _this.format = new Coding(source.format);
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for format (DocumentReference.content.format)
     */
    DocumentReferenceContent.formatPreferredCoding = function () {
        return FormatcodesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DocumentReferenceContent.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['attachment']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property attachment:fhir.Attachment fhir: DocumentReference.content.attachment:Attachment', }));
        }
        if (this["attachment"]) {
            (_a = outcome.issue).push.apply(_a, this.attachment.doModelValidation().issue);
        }
        if (this["format"]) {
            (_b = outcome.issue).push.apply(_b, this.format.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DocumentReferenceContent._fts_dataType = 'DocumentReferenceContent';
    return DocumentReferenceContent;
}(BackboneElement));
/**
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
var DocumentReferenceContext = /** @class */ (function (_super) {
    __extends(DocumentReferenceContext, _super);
    /**
     * Default constructor for DocumentReferenceContext - initializes any required elements to null if a value is not provided.
     */
    function DocumentReferenceContext(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['encounter']) {
            _this.encounter = source.encounter.map(function (x) { return new Reference(x); });
        }
        else {
            _this.encounter = [];
        }
        if (source['event']) {
            _this.event = source.event.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.event = [];
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['facilityType']) {
            _this.facilityType = new CodeableConcept(source.facilityType);
        }
        if (source['practiceSetting']) {
            _this.practiceSetting = new CodeableConcept(source.practiceSetting);
        }
        if (source['sourcePatientInfo']) {
            _this.sourcePatientInfo = new Reference(source.sourcePatientInfo);
        }
        if (source['related']) {
            _this.related = source.related.map(function (x) { return new Reference(x); });
        }
        else {
            _this.related = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DocumentReferenceContext.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["encounter"]) {
            this.encounter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["event"]) {
            this.event.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["period"]) {
            (_a = outcome.issue).push.apply(_a, this.period.doModelValidation().issue);
        }
        if (this["facilityType"]) {
            (_b = outcome.issue).push.apply(_b, this.facilityType.doModelValidation().issue);
        }
        if (this["practiceSetting"]) {
            (_c = outcome.issue).push.apply(_c, this.practiceSetting.doModelValidation().issue);
        }
        if (this["sourcePatientInfo"]) {
            (_d = outcome.issue).push.apply(_d, this.sourcePatientInfo.doModelValidation().issue);
        }
        if (this["related"]) {
            this.related.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DocumentReferenceContext._fts_dataType = 'DocumentReferenceContext';
    return DocumentReferenceContext;
}(BackboneElement));
/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
var DocumentReference = /** @class */ (function (_super) {
    __extends(DocumentReference, _super);
    /**
     * Default constructor for DocumentReference - initializes any required elements to null if a value is not provided.
     */
    function DocumentReference(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'DocumentReference';
        if (source['masterIdentifier']) {
            _this.masterIdentifier = new Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['docStatus']) {
            _this.docStatus = source.docStatus;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['date']) {
            _this.date = new FhirInstant({ value: source.date });
        }
        if (source['author']) {
            _this.author = source.author.map(function (x) { return new Reference(x); });
        }
        else {
            _this.author = [];
        }
        if (source['authenticator']) {
            _this.authenticator = new Reference(source.authenticator);
        }
        if (source['custodian']) {
            _this.custodian = new Reference(source.custodian);
        }
        if (source['relatesTo']) {
            _this.relatesTo = source.relatesTo.map(function (x) { return new DocumentReferenceRelatesTo(x); });
        }
        else {
            _this.relatesTo = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['securityLabel']) {
            _this.securityLabel = source.securityLabel.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.securityLabel = [];
        }
        if (source['content']) {
            _this.content = source.content.map(function (x) { return new DocumentReferenceContent(x); });
        }
        else {
            _this.content = [];
        }
        if (source['context']) {
            _this.context = new DocumentReferenceContext(source.context);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (DocumentReference.status)
     */
    DocumentReference.statusRequiredCoding = function () {
        return DocumentReferenceStatusCodings;
    };
    /**
     * Required-bound Value Set for docStatus (DocumentReference.docStatus)
     */
    DocumentReference.docStatusRequiredCoding = function () {
        return CompositionStatusCodings;
    };
    /**
     * Preferred-bound Value Set for type (DocumentReference.type)
     */
    DocumentReference.typePreferredCoding = function () {
        return C80DocTypecodesCodings;
    };
    /**
     * Extensible-bound Value Set for securityLabel (DocumentReference.securityLabel)
     */
    DocumentReference.securityLabelExtensibleCoding = function () {
        return SecurityLabelsCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DocumentReference.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"DocumentReference" fhir: DocumentReference.resourceType:"DocumentReference"', }));
        }
        if (this["masterIdentifier"]) {
            (_a = outcome.issue).push.apply(_a, this.masterIdentifier.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:DocumentReferenceStatusCodeType fhir: DocumentReference.status:code', }));
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["date"]) {
            (_d = outcome.issue).push.apply(_d, this.date.doModelValidation().issue);
        }
        if (this["author"]) {
            this.author.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["authenticator"]) {
            (_e = outcome.issue).push.apply(_e, this.authenticator.doModelValidation().issue);
        }
        if (this["custodian"]) {
            (_f = outcome.issue).push.apply(_f, this.custodian.doModelValidation().issue);
        }
        if (this["relatesTo"]) {
            this.relatesTo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_g = outcome.issue).push.apply(_g, this.description.doModelValidation().issue);
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content:fhir.DocumentReferenceContent[] fhir: DocumentReference.content:content', }));
        }
        else if (!Array.isArray(this.content)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property content:fhir.DocumentReferenceContent[] fhir: DocumentReference.content:content', }));
        }
        else if (this.content.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content:fhir.DocumentReferenceContent[] fhir: DocumentReference.content:content', }));
        }
        if (this["content"]) {
            this.content.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["context"]) {
            (_h = outcome.issue).push.apply(_h, this.context.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DocumentReference._fts_dataType = 'DocumentReference';
    return DocumentReference;
}(DomainResource));

export { DocumentReference, DocumentReferenceContent, DocumentReferenceContext, DocumentReferenceRelatesTo };
//# sourceMappingURL=DocumentReference.js.map
