// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentReference
import * as fhir from '../fhir.js';
// @ts-ignore
import { DocumentRelationshipTypeCodes } from '../fhirValueSets/DocumentRelationshipTypeCodes.js';
// @ts-ignore
import { FormatCodings, } from '../fhirValueSets/FormatCodings.js';
// @ts-ignore
import { DocumentReferenceStatusCodes } from '../fhirValueSets/DocumentReferenceStatusCodes.js';
// @ts-ignore
import { CompositionStatusCodes } from '../fhirValueSets/CompositionStatusCodes.js';
// @ts-ignore
import { C80DocTypeCodings, } from '../fhirValueSets/C80DocTypeCodings.js';
// @ts-ignore
import { SecurityLabelsCodings, } from '../fhirValueSets/SecurityLabelsCodings.js';
/**
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export class DocumentReferenceRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Required-bound Value Set for code (DocumentReference.relatesTo.code)
     */
    static get codeRequiredCodes() {
        return DocumentRelationshipTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DocumentReference.relatesTo';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: DocumentReference.relatesTo.code:code', expression: [expression] });
        }
        if (this['code'] && (!Object.values(DocumentRelationshipTypeCodes).includes(this.code.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property code fhir: DocumentReference.relatesTo.code:code Required binding to: DocumentRelationshipType', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['target']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target fhir: DocumentReference.relatesTo.target:Reference', expression: [expression] });
        }
        if (this["target"]) {
            issues.push(...this.target.doModelValidation(expression + '.target'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceRelatesTo._fts_dataType = 'DocumentReferenceRelatesTo';
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
export class DocumentReferenceContent extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
        else {
            this.attachment = null;
        }
        if (source['format']) {
            this.format = new fhir.Coding(source.format);
        }
    }
    /**
     * Preferred-bound Value Set for format (DocumentReference.content.format)
     */
    static get formatPreferredCodings() {
        return FormatCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DocumentReference.content';
        }
        if (!this['attachment']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property attachment fhir: DocumentReference.content.attachment:Attachment', expression: [expression] });
        }
        if (this["attachment"]) {
            issues.push(...this.attachment.doModelValidation(expression + '.attachment'));
        }
        if (this["format"]) {
            issues.push(...this.format.doModelValidation(expression + '.format'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceContent._fts_dataType = 'DocumentReferenceContent';
/**
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
export class DocumentReferenceContext extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentReferenceContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        else {
            this.encounter = [];
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.event = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['facilityType']) {
            this.facilityType = new fhir.CodeableConcept(source.facilityType);
        }
        if (source['practiceSetting']) {
            this.practiceSetting = new fhir.CodeableConcept(source.practiceSetting);
        }
        if (source['sourcePatientInfo']) {
            this.sourcePatientInfo = new fhir.Reference(source.sourcePatientInfo);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.Reference(x));
        }
        else {
            this.related = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DocumentReference.context';
        }
        if (this["encounter"]) {
            this.encounter.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.encounter[${i}]`)); });
        }
        if (this["event"]) {
            this.event.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.event[${i}]`)); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        if (this["facilityType"]) {
            issues.push(...this.facilityType.doModelValidation(expression + '.facilityType'));
        }
        if (this["practiceSetting"]) {
            issues.push(...this.practiceSetting.doModelValidation(expression + '.practiceSetting'));
        }
        if (this["sourcePatientInfo"]) {
            issues.push(...this.sourcePatientInfo.doModelValidation(expression + '.sourcePatientInfo'));
        }
        if (this["related"]) {
            this.related.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.related[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReferenceContext._fts_dataType = 'DocumentReferenceContext';
/**
 * A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
 */
export class DocumentReference extends fhir.DomainResource {
    /**
     * Default constructor for DocumentReference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DocumentReference';
        if (source['masterIdentifier']) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['docStatus']) {
            this.docStatus = new fhir.FhirCode({ value: source.docStatus });
        }
        if (source['_docStatus']) {
            if (this.docStatus) {
                this.docStatus.addExtendedProperties(source._docStatus);
            }
            else {
                this.docStatus = new fhir.FhirCode(source._docStatus);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['date']) {
            this.date = new fhir.FhirInstant({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirInstant(source._date);
            }
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['authenticator']) {
            this.authenticator = new fhir.Reference(source.authenticator);
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.DocumentReferenceRelatesTo(x));
        }
        else {
            this.relatesTo = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.DocumentReferenceContent(x));
        }
        else {
            this.content = [];
        }
        if (source['context']) {
            this.context = new fhir.DocumentReferenceContext(source.context);
        }
    }
    /**
     * Required-bound Value Set for status (DocumentReference.status)
     */
    static get statusRequiredCodes() {
        return DocumentReferenceStatusCodes;
    }
    /**
     * Required-bound Value Set for docStatus (DocumentReference.docStatus)
     */
    static get docStatusRequiredCodes() {
        return CompositionStatusCodes;
    }
    /**
     * Preferred-bound Value Set for type (DocumentReference.type)
     */
    static get typePreferredCodings() {
        return C80DocTypeCodings;
    }
    /**
     * Extensible-bound Value Set for securityLabel (DocumentReference.securityLabel)
     */
    static get securityLabelExtensibleCodings() {
        return SecurityLabelsCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DocumentReference';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: DocumentReference.resourceType:"DocumentReference"', expression: [expression] });
        }
        if (this["masterIdentifier"]) {
            issues.push(...this.masterIdentifier.doModelValidation(expression + '.masterIdentifier'));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: DocumentReference.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(DocumentReferenceStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: DocumentReference.status:code Required binding to: DocumentReferenceStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this['docStatus'] && (!Object.values(CompositionStatusCodes).includes(this.docStatus.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property docStatus fhir: DocumentReference.docStatus:code Required binding to: CompositionStatus', expression: [expression] });
        }
        if (this["docStatus"]) {
            issues.push(...this.docStatus.doModelValidation(expression + '.docStatus'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["category"]) {
            this.category.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.category[${i}]`)); });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation(expression + '.subject'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["author"]) {
            this.author.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.author[${i}]`)); });
        }
        if (this["authenticator"]) {
            issues.push(...this.authenticator.doModelValidation(expression + '.authenticator'));
        }
        if (this["custodian"]) {
            issues.push(...this.custodian.doModelValidation(expression + '.custodian'));
        }
        if (this["relatesTo"]) {
            this.relatesTo.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.relatesTo[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.securityLabel[${i}]`)); });
        }
        if (!this['content']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content fhir: DocumentReference.content:content', expression: [expression] });
        }
        else if (!Array.isArray(this.content)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property content fhir: DocumentReference.content:content', expression: [expression] });
        }
        else if (this.content.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content fhir: DocumentReference.content:content', expression: [expression] });
        }
        if (this["content"]) {
            this.content.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.content[${i}]`)); });
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation(expression + '.context'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentReference._fts_dataType = 'DocumentReference';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jdW1lbnRSZWZlcmVuY2UuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL0RvY3VtZW50UmVmZXJlbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG1DQUFtQztBQUVuQyxPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQUluQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLDZCQUE2QixFQUFxQyxNQUFNLG1EQUFtRCxDQUFDO0FBQ3JJLGFBQWE7QUFDYixPQUFPLEVBQUUsYUFBYSxHQUFvQixNQUFNLG1DQUFtQyxDQUFDO0FBaUJwRixhQUFhO0FBQ2IsT0FBTyxFQUFFLDRCQUE0QixFQUFvQyxNQUFNLGtEQUFrRCxDQUFDO0FBR2xJLGFBQWE7QUFDYixPQUFPLEVBQUUsc0JBQXNCLEVBQThCLE1BQU0sNENBQTRDLENBQUM7QUFDaEgsYUFBYTtBQUNiLE9BQU8sRUFBRSxpQkFBaUIsR0FBd0IsTUFBTSx1Q0FBdUMsQ0FBQztBQU9oRyxhQUFhO0FBQ2IsT0FBTyxFQUFFLHFCQUFxQixHQUE0QixNQUFNLDJDQUEyQyxDQUFDO0FBcUI1Rzs7R0FFRztBQUNILE1BQU0sT0FBTywwQkFBMkIsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWFsRTs7T0FFRztJQUNILFlBQVksU0FBaUQsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDdkcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFtQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3pHO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxP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QUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQzdILElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUMvRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQTFMRDs7R0FFRztBQUM2QiwrQkFBYSxHQUFVLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBEb2N1bWVudFJlZmVyZW5jZVxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kaW5ncywgRG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kZXMsICBEb2N1bWVudFJlbGF0aW9uc2hpcFR5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEZvcm1hdENvZGluZ3MsIEZvcm1hdENvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Zvcm1hdENvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEZvcm1hdENvZGVzLCAgRm9ybWF0Q29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0Zvcm1hdENvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWM0FjdENvZGluZ3MsIFYzQWN0Q29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjNBY3RDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWM0FjdENvZGVzLCAgVjNBY3RDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjNBY3RDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQzgwRmFjaWxpdHlDb2RpbmdzLCBDODBGYWNpbGl0eUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0M4MEZhY2lsaXR5Q29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQzgwRmFjaWxpdHlDb2RlcywgIEM4MEZhY2lsaXR5Q29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0M4MEZhY2lsaXR5Q29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEM4MFByYWN0aWNlQ29kaW5ncywgQzgwUHJhY3RpY2VDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DODBQcmFjdGljZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEM4MFByYWN0aWNlQ29kZXMsICBDODBQcmFjdGljZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DODBQcmFjdGljZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEb2N1bWVudFJlZmVyZW5jZVN0YXR1c0NvZGluZ3MsIERvY3VtZW50UmVmZXJlbmNlU3RhdHVzQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRG9jdW1lbnRSZWZlcmVuY2VTdGF0dXNDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEb2N1bWVudFJlZmVyZW5jZVN0YXR1c0NvZGVzLCAgRG9jdW1lbnRSZWZlcmVuY2VTdGF0dXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRG9jdW1lbnRSZWZlcmVuY2VTdGF0dXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ29tcG9zaXRpb25TdGF0dXNDb2RpbmdzLCBDb21wb3NpdGlvblN0YXR1c0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NvbXBvc2l0aW9uU3RhdHVzQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ29tcG9zaXRpb25TdGF0dXNDb2RlcywgIENvbXBvc2l0aW9uU3RhdHVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NvbXBvc2l0aW9uU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEM4MERvY1R5cGVDb2RpbmdzLCBDODBEb2NUeXBlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQzgwRG9jVHlwZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEM4MERvY1R5cGVDb2RlcywgIEM4MERvY1R5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQzgwRG9jVHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEb2N1bWVudENsYXNzQ29kaW5ncywgRG9jdW1lbnRDbGFzc0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RvY3VtZW50Q2xhc3NDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEb2N1bWVudENsYXNzQ29kZXMsICBEb2N1bWVudENsYXNzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RvY3VtZW50Q2xhc3NDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU2VjdXJpdHlMYWJlbHNDb2RpbmdzLCBTZWN1cml0eUxhYmVsc0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NlY3VyaXR5TGFiZWxzQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU2VjdXJpdHlMYWJlbHNDb2RlcywgIFNlY3VyaXR5TGFiZWxzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NlY3VyaXR5TGFiZWxzQ29kZXMuanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRG9jdW1lbnRSZWZlcmVuY2VSZWxhdGVzVG8gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRSZWZlcmVuY2VSZWxhdGVzVG9BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBJZiB0aGlzIGRvY3VtZW50IGFwcGVuZHMgYW5vdGhlciBkb2N1bWVudCwgdGhlbiB0aGUgZG9jdW1lbnQgY2Fubm90IGJlIGZ1bGx5IHVuZGVyc3Rvb2Qgd2l0aG91dCBhbHNvIGFjY2Vzc2luZyB0aGUgcmVmZXJlbmNlZCBkb2N1bWVudC5cclxuICAgKi9cclxuICBjb2RlOiBmaGlyLkZoaXJDb2RlPERvY3VtZW50UmVsYXRpb25zaGlwVHlwZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEb2N1bWVudFJlZmVyZW5jZS5yZWxhdGVzVG8uY29kZVxyXG4gICAqL1xyXG4gIF9jb2RlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgdGFyZ2V0IGRvY3VtZW50IG9mIHRoaXMgcmVsYXRpb25zaGlwLlxyXG4gICAqL1xyXG4gIHRhcmdldDogZmhpci5SZWZlcmVuY2VBcmdzfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgZG9jdW1lbnRzIHRoYXQgYXBwZW5kIHRvIG90aGVyIGRvY3VtZW50cyBhcmUgaW5jb21wbGV0ZSBvbiB0aGVpciBvd24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRSZWZlcmVuY2VSZWxhdGVzVG8gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdEb2N1bWVudFJlZmVyZW5jZVJlbGF0ZXNUbyc7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyBkb2N1bWVudCBhcHBlbmRzIGFub3RoZXIgZG9jdW1lbnQsIHRoZW4gdGhlIGRvY3VtZW50IGNhbm5vdCBiZSBmdWxseSB1bmRlcnN0b29kIHdpdGhvdXQgYWxzbyBhY2Nlc3NpbmcgdGhlIHJlZmVyZW5jZWQgZG9jdW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGNvZGU6IGZoaXIuRmhpckNvZGU8RG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRhcmdldCBkb2N1bWVudCBvZiB0aGlzIHJlbGF0aW9uc2hpcC5cclxuICAgKi9cclxuICBwdWJsaWMgdGFyZ2V0OiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIERvY3VtZW50UmVmZXJlbmNlUmVsYXRlc1RvIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RG9jdW1lbnRSZWZlcmVuY2VSZWxhdGVzVG9BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnY29kZSddKSB7IHRoaXMuY29kZSA9IG5ldyBmaGlyLkZoaXJDb2RlPERvY3VtZW50UmVsYXRpb25zaGlwVHlwZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5jb2RlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvZGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfY29kZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvZGUpIHsgdGhpcy5jb2RlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NvZGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb2RlID0gbmV3IGZoaXIuRmhpckNvZGU8RG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kZVR5cGU+KHNvdXJjZS5fY29kZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndGFyZ2V0J10pIHsgdGhpcy50YXJnZXQgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnRhcmdldCk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRhcmdldCA9IG51bGw7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBjb2RlIChEb2N1bWVudFJlZmVyZW5jZS5yZWxhdGVzVG8uY29kZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBjb2RlUmVxdWlyZWRDb2RlcygpIHtcclxuICAgIHJldHVybiBEb2N1bWVudFJlbGF0aW9uc2hpcFR5cGVDb2RlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRG9jdW1lbnRSZWZlcmVuY2UucmVsYXRlc1RvJyB9XHJcbiAgICBpZiAoIXRoaXNbJ2NvZGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgY29kZSBmaGlyOiBEb2N1bWVudFJlZmVyZW5jZS5yZWxhdGVzVG8uY29kZTpjb2RlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ2NvZGUnXSAmJiAoIU9iamVjdC52YWx1ZXMoRG9jdW1lbnRSZWxhdGlvbnNoaXBUeXBlQ29kZXMpLmluY2x1ZGVzKHRoaXMuY29kZS52YWx1ZSBhcyBhbnkpKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnY29kZS1pbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdJbnZhbGlkIGNvZGUgcHJvcGVydHkgY29kZSBmaGlyOiBEb2N1bWVudFJlZmVyZW5jZS5yZWxhdGVzVG8uY29kZTpjb2RlIFJlcXVpcmVkIGJpbmRpbmcgdG86IERvY3VtZW50UmVsYXRpb25zaGlwVHlwZScsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiY29kZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvZGUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmNvZGUnKSk7IH1cclxuICAgIGlmICghdGhpc1sndGFyZ2V0J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHRhcmdldCBmaGlyOiBEb2N1bWVudFJlZmVyZW5jZS5yZWxhdGVzVG8udGFyZ2V0OlJlZmVyZW5jZScsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widGFyZ2V0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudGFyZ2V0LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy50YXJnZXQnKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBEb2N1bWVudFJlZmVyZW5jZUNvbnRlbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRSZWZlcmVuY2VDb250ZW50QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRvY3VtZW50IG9yIFVSTCBvZiB0aGUgZG9jdW1lbnQgYWxvbmcgd2l0aCBjcml0aWNhbCBtZXRhZGF0YSB0byBwcm92ZSBjb250ZW50IGhhcyBpbnRlZ3JpdHkuXHJcbiAgICovXHJcbiAgYXR0YWNobWVudDogZmhpci5BdHRhY2htZW50QXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCB3aGlsZSBJSEUgbW9zdGx5IGlzc3VlcyBVUk5zIGZvciBmb3JtYXQgdHlwZXMsIG5vdCBhbGwgZG9jdW1lbnRzIGNhbiBiZSBpZGVudGlmaWVkIGJ5IGEgVVJJLlxyXG4gICAqL1xyXG4gIGZvcm1hdD86IGZoaXIuQ29kaW5nQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZG9jdW1lbnQgYW5kIGZvcm1hdCByZWZlcmVuY2VkLiBUaGVyZSBtYXkgYmUgbXVsdGlwbGUgY29udGVudCBlbGVtZW50IHJlcGV0aXRpb25zLCBlYWNoIHdpdGggYSBkaWZmZXJlbnQgZm9ybWF0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERvY3VtZW50UmVmZXJlbmNlQ29udGVudCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0RvY3VtZW50UmVmZXJlbmNlQ29udGVudCc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRvY3VtZW50IG9yIFVSTCBvZiB0aGUgZG9jdW1lbnQgYWxvbmcgd2l0aCBjcml0aWNhbCBtZXRhZGF0YSB0byBwcm92ZSBjb250ZW50IGhhcyBpbnRlZ3JpdHkuXHJcbiAgICovXHJcbiAgcHVibGljIGF0dGFjaG1lbnQ6IGZoaXIuQXR0YWNobWVudHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCB3aGlsZSBJSEUgbW9zdGx5IGlzc3VlcyBVUk5zIGZvciBmb3JtYXQgdHlwZXMsIG5vdCBhbGwgZG9jdW1lbnRzIGNhbiBiZSBpZGVudGlmaWVkIGJ5IGEgVVJJLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmb3JtYXQ/OiBmaGlyLkNvZGluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRG9jdW1lbnRSZWZlcmVuY2VDb250ZW50IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RG9jdW1lbnRSZWZlcmVuY2VDb250ZW50QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2F0dGFjaG1lbnQnXSkgeyB0aGlzLmF0dGFjaG1lbnQgPSBuZXcgZmhpci5BdHRhY2htZW50KHNvdXJjZS5hdHRhY2htZW50KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYXR0YWNobWVudCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Zvcm1hdCddKSB7IHRoaXMuZm9ybWF0ID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS5mb3JtYXQpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFByZWZlcnJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIGZvcm1hdCAoRG9jdW1lbnRSZWZlcmVuY2UuY29udGVudC5mb3JtYXQpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXQgZm9ybWF0UHJlZmVycmVkQ29kaW5ncygpOkZvcm1hdENvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIEZvcm1hdENvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0RvY3VtZW50UmVmZXJlbmNlLmNvbnRlbnQnIH1cclxuICAgIGlmICghdGhpc1snYXR0YWNobWVudCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBhdHRhY2htZW50IGZoaXI6IERvY3VtZW50UmVmZXJlbmNlLmNvbnRlbnQuYXR0YWNobWVudDpBdHRhY2htZW50JywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJhdHRhY2htZW50XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuYXR0YWNobWVudC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuYXR0YWNobWVudCcpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJmb3JtYXRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5mb3JtYXQuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmZvcm1hdCcpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIERvY3VtZW50UmVmZXJlbmNlQ29udGV4dCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudFJlZmVyZW5jZUNvbnRleHRBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBEZXNjcmliZXMgdGhlIGNsaW5pY2FsIGVuY291bnRlciBvciB0eXBlIG9mIGNhcmUgdGhhdCB0aGUgZG9jdW1lbnQgY29udGVudCBpcyBhc3NvY2lhdGVkIHdpdGguXHJcbiAgICovXHJcbiAgZW5jb3VudGVyPzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIGV2ZW50IGNhbiBmdXJ0aGVyIHNwZWNpYWxpemUgdGhlIGFjdCBpbmhlcmVudCBpbiB0aGUgdHlwZSwgc3VjaCBhcyAgd2hlcmUgaXQgaXMgc2ltcGx5IFwiUHJvY2VkdXJlIFJlcG9ydFwiIGFuZCB0aGUgcHJvY2VkdXJlIHdhcyBhIFwiY29sb25vc2NvcHlcIi4gSWYgb25lIG9yIG1vcmUgZXZlbnQgY29kZXMgYXJlIGluY2x1ZGVkLCB0aGV5IHNoYWxsIG5vdCBjb25mbGljdCB3aXRoIHRoZSB2YWx1ZXMgaW5oZXJlbnQgaW4gdGhlIGNsYXNzIG9yIHR5cGUgZWxlbWVudHMgYXMgc3VjaCBhIGNvbmZsaWN0IHdvdWxkIGNyZWF0ZSBhbiBhbWJpZ3VvdXMgc2l0dWF0aW9uLlxyXG4gICAqL1xyXG4gIGV2ZW50PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHBlcmlvZCBvdmVyIHdoaWNoIHRoZSBzZXJ2aWNlIHRoYXQgaXMgZGVzY3JpYmVkIGJ5IHRoZSBkb2N1bWVudCB3YXMgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5QZXJpb2RBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUga2luZCBvZiBmYWNpbGl0eSB3aGVyZSB0aGUgcGF0aWVudCB3YXMgc2Vlbi5cclxuICAgKi9cclxuICBmYWNpbGl0eVR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBzaG91bGQgYmUgYmFzZWQgb24gYSBjb2Fyc2UgY2xhc3NpZmljYXRpb24gc3lzdGVtIGZvciB0aGUgY2xhc3Mgb2Ygc3BlY2lhbHR5IHByYWN0aWNlLiBSZWNvbW1lbmQgdGhlIHVzZSBvZiB0aGUgY2xhc3NpZmljYXRpb24gc3lzdGVtIGZvciBQcmFjdGljZSBTZXR0aW5nLCBzdWNoIGFzIHRoYXQgZGVzY3JpYmVkIGJ5IHRoZSBTdWJqZWN0IE1hdHRlciBEb21haW4gaW4gTE9JTkMuXHJcbiAgICovXHJcbiAgcHJhY3RpY2VTZXR0aW5nPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgUGF0aWVudCBJbmZvcm1hdGlvbiBhcyBrbm93biB3aGVuIHRoZSBkb2N1bWVudCB3YXMgcHVibGlzaGVkLiBNYXkgYmUgYSByZWZlcmVuY2UgdG8gYSB2ZXJzaW9uIHNwZWNpZmljLCBvciBjb250YWluZWQuXHJcbiAgICovXHJcbiAgc291cmNlUGF0aWVudEluZm8/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1heSBiZSBpZGVudGlmaWVycyBvciByZXNvdXJjZXMgdGhhdCBjYXVzZWQgdGhlIERvY3VtZW50UmVmZXJlbmNlIG9yIHJlZmVyZW5jZWQgRG9jdW1lbnQgdG8gYmUgY3JlYXRlZC5cclxuICAgKi9cclxuICByZWxhdGVkPzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlc2UgdmFsdWVzIGFyZSBwcmltYXJpbHkgYWRkZWQgdG8gaGVscCB3aXRoIHNlYXJjaGluZyBmb3IgaW50ZXJlc3RpbmcvcmVsZXZhbnQgZG9jdW1lbnRzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERvY3VtZW50UmVmZXJlbmNlQ29udGV4dCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0RvY3VtZW50UmVmZXJlbmNlQ29udGV4dCc7XHJcbiAgLyoqXHJcbiAgICogRGVzY3JpYmVzIHRoZSBjbGluaWNhbCBlbmNvdW50ZXIgb3IgdHlwZSBvZiBjYXJlIHRoYXQgdGhlIGRvY3VtZW50IGNvbnRlbnQgaXMgYXNzb2NpYXRlZCB3aXRoLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmNvdW50ZXI6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogQW4gZXZlbnQgY2FuIGZ1cnRoZXIgc3BlY2lhbGl6ZSB0aGUgYWN0IGluaGVyZW50IGluIHRoZSB0eXBlLCBzdWNoIGFzICB3aGVyZSBpdCBpcyBzaW1wbHkgXCJQcm9jZWR1cmUgUmVwb3J0XCIgYW5kIHRoZSBwcm9jZWR1cmUgd2FzIGEgXCJjb2xvbm9zY29weVwiLiBJZiBvbmUgb3IgbW9yZSBldmVudCBjb2RlcyBhcmUgaW5jbHVkZWQsIHRoZXkgc2hhbGwgbm90IGNvbmZsaWN0IHdpdGggdGhlIHZhbHVlcyBpbmhlcmVudCBpbiB0aGUgY2xhc3Mgb3IgdHlwZSBlbGVtZW50cyBhcyBzdWNoIGEgY29uZmxpY3Qgd291bGQgY3JlYXRlIGFuIGFtYmlndW91cyBzaXR1YXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGV2ZW50OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHBlcmlvZCBvdmVyIHdoaWNoIHRoZSBzZXJ2aWNlIHRoYXQgaXMgZGVzY3JpYmVkIGJ5IHRoZSBkb2N1bWVudCB3YXMgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZD86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUga2luZCBvZiBmYWNpbGl0eSB3aGVyZSB0aGUgcGF0aWVudCB3YXMgc2Vlbi5cclxuICAgKi9cclxuICBwdWJsaWMgZmFjaWxpdHlUeXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBzaG91bGQgYmUgYmFzZWQgb24gYSBjb2Fyc2UgY2xhc3NpZmljYXRpb24gc3lzdGVtIGZvciB0aGUgY2xhc3Mgb2Ygc3BlY2lhbHR5IHByYWN0aWNlLiBSZWNvbW1lbmQgdGhlIHVzZSBvZiB0aGUgY2xhc3NpZmljYXRpb24gc3lzdGVtIGZvciBQcmFjdGljZSBTZXR0aW5nLCBzdWNoIGFzIHRoYXQgZGVzY3JpYmVkIGJ5IHRoZSBTdWJqZWN0IE1hdHRlciBEb21haW4gaW4gTE9JTkMuXHJcbiAgICovXHJcbiAgcHVibGljIHByYWN0aWNlU2V0dGluZz86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgUGF0aWVudCBJbmZvcm1hdGlvbiBhcyBrbm93biB3aGVuIHRoZSBkb2N1bWVudCB3YXMgcHVibGlzaGVkLiBNYXkgYmUgYSByZWZlcmVuY2UgdG8gYSB2ZXJzaW9uIHNwZWNpZmljLCBvciBjb250YWluZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHNvdXJjZVBhdGllbnRJbmZvPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1heSBiZSBpZGVudGlmaWVycyBvciByZXNvdXJjZXMgdGhhdCBjYXVzZWQgdGhlIERvY3VtZW50UmVmZXJlbmNlIG9yIHJlZmVyZW5jZWQgRG9jdW1lbnQgdG8gYmUgY3JlYXRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVsYXRlZDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBEb2N1bWVudFJlZmVyZW5jZUNvbnRleHQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxEb2N1bWVudFJlZmVyZW5jZUNvbnRleHRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnZW5jb3VudGVyJ10pIHsgdGhpcy5lbmNvdW50ZXIgPSBzb3VyY2UuZW5jb3VudGVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZW5jb3VudGVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2V2ZW50J10pIHsgdGhpcy5ldmVudCA9IHNvdXJjZS5ldmVudC5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmV2ZW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZCddKSB7IHRoaXMucGVyaW9kID0gbmV3IGZoaXIuUGVyaW9kKHNvdXJjZS5wZXJpb2QpOyB9XHJcbiAgICBpZiAoc291cmNlWydmYWNpbGl0eVR5cGUnXSkgeyB0aGlzLmZhY2lsaXR5VHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuZmFjaWxpdHlUeXBlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJhY3RpY2VTZXR0aW5nJ10pIHsgdGhpcy5wcmFjdGljZVNldHRpbmcgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnByYWN0aWNlU2V0dGluZyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3NvdXJjZVBhdGllbnRJbmZvJ10pIHsgdGhpcy5zb3VyY2VQYXRpZW50SW5mbyA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uuc291cmNlUGF0aWVudEluZm8pOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWxhdGVkJ10pIHsgdGhpcy5yZWxhdGVkID0gc291cmNlLnJlbGF0ZWQubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWxhdGVkID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRG9jdW1lbnRSZWZlcmVuY2UuY29udGV4dCcgfVxyXG4gICAgaWYgKHRoaXNbXCJlbmNvdW50ZXJcIl0pIHsgdGhpcy5lbmNvdW50ZXIuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmVuY291bnRlclske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJldmVudFwiXSkgeyB0aGlzLmV2ZW50LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5ldmVudFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJwZXJpb2RcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wZXJpb2QuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnBlcmlvZCcpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJmYWNpbGl0eVR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5mYWNpbGl0eVR5cGUuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmZhY2lsaXR5VHlwZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwcmFjdGljZVNldHRpbmdcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wcmFjdGljZVNldHRpbmcuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnByYWN0aWNlU2V0dGluZycpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJzb3VyY2VQYXRpZW50SW5mb1wiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnNvdXJjZVBhdGllbnRJbmZvLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5zb3VyY2VQYXRpZW50SW5mbycpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJyZWxhdGVkXCJdKSB7IHRoaXMucmVsYXRlZC5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AucmVsYXRlZFske2l9XWApKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIERvY3VtZW50UmVmZXJlbmNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50UmVmZXJlbmNlQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiRG9jdW1lbnRSZWZlcmVuY2VcInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ0RBIERvY3VtZW50IElkIGV4dGVuc2lvbiBhbmQgcm9vdC5cclxuICAgKi9cclxuICBtYXN0ZXJJZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT3RoZXIgaWRlbnRpZmllcnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkb2N1bWVudCwgaW5jbHVkaW5nIHZlcnNpb24gaW5kZXBlbmRlbnQgaWRlbnRpZmllcnMuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyB0aGUgc3RhdHVzIG9mIHRoZSBEb2N1bWVudFJlZmVyZW5jZSBvYmplY3QsIHdoaWNoIG1pZ2h0IGJlIGluZGVwZW5kZW50IGZyb20gdGhlIGRvY1N0YXR1cyBlbGVtZW50LlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIHRoZSBjb2RlcyB0aGF0IG1hcmsgdGhlIGRvY3VtZW50IG9yIHJlZmVyZW5jZSBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHN0YXR1czogZmhpci5GaGlyQ29kZTxEb2N1bWVudFJlZmVyZW5jZVN0YXR1c0NvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEb2N1bWVudFJlZmVyZW5jZS5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgZG9jdW1lbnQgdGhhdCBpcyBwb2ludGVkIHRvIG1pZ2h0IGJlIGluIHZhcmlvdXMgbGlmZWN5Y2xlIHN0YXRlcy5cclxuICAgKi9cclxuICBkb2NTdGF0dXM/OiBmaGlyLkZoaXJDb2RlPENvbXBvc2l0aW9uU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERvY3VtZW50UmVmZXJlbmNlLmRvY1N0YXR1c1xyXG4gICAqL1xyXG4gIF9kb2NTdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEtleSBtZXRhZGF0YSBlbGVtZW50IGRlc2NyaWJpbmcgdGhlIGRvY3VtZW50IHRoYXQgZGVzY3JpYmVzIGhlIGV4YWN0IHR5cGUgb2YgZG9jdW1lbnQuIEhlbHBzIGh1bWFucyB0byBhc3Nlc3Mgd2hldGhlciB0aGUgZG9jdW1lbnQgaXMgb2YgaW50ZXJlc3Qgd2hlbiB2aWV3aW5nIGEgbGlzdCBvZiBkb2N1bWVudHMuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogS2V5IG1ldGFkYXRhIGVsZW1lbnQgZGVzY3JpYmluZyB0aGUgdGhlIGNhdGVnb3J5IG9yIGNsYXNzaWZpY2F0aW9uIG9mIHRoZSBkb2N1bWVudC4gVGhpcyBpcyBhIGJyb2FkZXIgcGVyc3BlY3RpdmUgdGhhdCBncm91cHMgc2ltaWxhciBkb2N1bWVudHMgYmFzZWQgb24gaG93IHRoZXkgd291bGQgYmUgdXNlZC4gVGhpcyBpcyBhIHByaW1hcnkga2V5IHVzZWQgaW4gc2VhcmNoaW5nLlxyXG4gICAqL1xyXG4gIGNhdGVnb3J5PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdobyBvciB3aGF0IHRoZSBkb2N1bWVudCBpcyBhYm91dC4gVGhlIGRvY3VtZW50IGNhbiBiZSBhYm91dCBhIHBlcnNvbiwgKHBhdGllbnQgb3IgaGVhbHRoY2FyZSBwcmFjdGl0aW9uZXIpLCBhIGRldmljZSAoZS5nLiBhIG1hY2hpbmUpIG9yIGV2ZW4gYSBncm91cCBvZiBzdWJqZWN0cyAoc3VjaCBhcyBhIGRvY3VtZW50IGFib3V0IGEgaGVyZCBvZiBmYXJtIGFuaW1hbHMsIG9yIGEgc2V0IG9mIHBhdGllbnRzIHRoYXQgc2hhcmUgYSBjb21tb24gZXhwb3N1cmUpLlxyXG4gICAqL1xyXG4gIHN1YmplY3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jaW5nL2luZGV4aW5nIHRpbWUgaXMgdXNlZCBmb3IgdHJhY2tpbmcsIG9yZ2FuaXppbmcgdmVyc2lvbnMgYW5kIHNlYXJjaGluZy5cclxuICAgKi9cclxuICBkYXRlPzogZmhpci5GaGlySW5zdGFudHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEb2N1bWVudFJlZmVyZW5jZS5kYXRlXHJcbiAgICovXHJcbiAgX2RhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE5vdCBuZWNlc3NhcmlseSB3aG8gZGlkIHRoZSBhY3R1YWwgZGF0YSBlbnRyeSAoaS5lLiB0eXBpc3QpIG9yIHdobyB3YXMgdGhlIHNvdXJjZSAoaW5mb3JtYW50KS5cclxuICAgKi9cclxuICBhdXRob3I/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVwcmVzZW50cyBhIHBhcnRpY2lwYW50IHdpdGhpbiB0aGUgYXV0aG9yIGluc3RpdHV0aW9uIHdobyBoYXMgbGVnYWxseSBhdXRoZW50aWNhdGVkIG9yIGF0dGVzdGVkIHRoZSBkb2N1bWVudC4gTGVnYWwgYXV0aGVudGljYXRpb24gaW1wbGllcyB0aGF0IGEgZG9jdW1lbnQgaGFzIGJlZW4gc2lnbmVkIG1hbnVhbGx5IG9yIGVsZWN0cm9uaWNhbGx5IGJ5IHRoZSBsZWdhbCBBdXRoZW50aWNhdG9yLlxyXG4gICAqL1xyXG4gIGF1dGhlbnRpY2F0b3I/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgdGhlIGxvZ2ljYWwgb3JnYW5pemF0aW9uIChzb2Z0d2FyZSBzeXN0ZW0sIHZlbmRvciwgb3IgZGVwYXJ0bWVudCkgdG8gZ28gdG8gZmluZCB0aGUgY3VycmVudCB2ZXJzaW9uLCB3aGVyZSB0byByZXBvcnQgaXNzdWVzLCBldGMuIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gdGhlIHBoeXNpY2FsIGxvY2F0aW9uIChVUkwsIGRpc2sgZHJpdmUsIG9yIHNlcnZlcikgb2YgdGhlIGRvY3VtZW50LCB3aGljaCBpcyB0aGUgdGVjaG5pY2FsIGxvY2F0aW9uIG9mIHRoZSBkb2N1bWVudCwgd2hpY2ggaG9zdCBtYXkgYmUgZGVsZWdhdGVkIHRvIHRoZSBtYW5hZ2VtZW50IG9mIHNvbWUgb3RoZXIgb3JnYW5pemF0aW9uLlxyXG4gICAqL1xyXG4gIGN1c3RvZGlhbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIGRvY3VtZW50cyB0aGF0IGFwcGVuZCB0byBvdGhlciBkb2N1bWVudHMgYXJlIGluY29tcGxldGUgb24gdGhlaXIgb3duLlxyXG4gICAqL1xyXG4gIHJlbGF0ZXNUbz86IGZoaXIuRG9jdW1lbnRSZWZlcmVuY2VSZWxhdGVzVG9BcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoYXQgdGhlIGRvY3VtZW50IGlzIGFib3V0LCAgYSB0ZXJzZSBzdW1tYXJ5IG9mIHRoZSBkb2N1bWVudC5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEb2N1bWVudFJlZmVyZW5jZS5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbmZpZGVudGlhbGl0eSBjb2RlcyBjYW4gY2FycnkgbXVsdGlwbGUgdm9jYWJ1bGFyeSBpdGVtcy4gSEw3IGhhcyBkZXZlbG9wZWQgYW4gdW5kZXJzdGFuZGluZyBvZiBzZWN1cml0eSBhbmQgcHJpdmFjeSB0YWdzIHRoYXQgbWlnaHQgYmUgZGVzaXJhYmxlIGluIGEgRG9jdW1lbnQgU2hhcmluZyBlbnZpcm9ubWVudCwgY2FsbGVkIEhMNyBIZWFsdGhjYXJlIFByaXZhY3kgYW5kIFNlY3VyaXR5IENsYXNzaWZpY2F0aW9uIFN5c3RlbSAoSENTKS4gVGhlIGZvbGxvd2luZyBzcGVjaWZpY2F0aW9uIGlzIHJlY29tbWVuZGVkIGJ1dCBub3QgbWFuZGF0ZWQsIGFzIHRoZSB2b2NhYnVsYXJ5IGJpbmRpbmdzIGFyZSBhbiBhZG1pbmlzdHJhdGl2ZSBkb21haW4gcmVzcG9uc2liaWxpdHkuIFRoZSB1c2Ugb2YgdGhpcyBtZXRob2QgaXMgdXAgdG8gdGhlIHBvbGljeSBkb21haW4gc3VjaCBhcyB0aGUgWERTIEFmZmluaXR5IERvbWFpbiBvciBvdGhlciBUcnVzdCBEb21haW4gd2hlcmUgYWxsIHBhcnRpZXMgaW5jbHVkaW5nIHNlbmRlciBhbmQgcmVjaXBpZW50cyBhcmUgdHJ1c3RlZCB0byBhcHByb3ByaWF0ZWx5IHRhZyBhbmQgZW5mb3JjZS4gICBcclxuICAgKiBJbiB0aGUgSEw3IEhlYWx0aGNhcmUgUHJpdmFjeSBhbmQgU2VjdXJpdHkgQ2xhc3NpZmljYXRpb24gKEhDUykgdGhlcmUgYXJlIGNvZGUgc3lzdGVtcyBzcGVjaWZpYyB0byBDb25maWRlbnRpYWxpdHksIFNlbnNpdGl2aXR5LCBJbnRlZ3JpdHksIGFuZCBIYW5kbGluZyBDYXZlYXRzLiBTb21lIHZhbHVlcyB3b3VsZCBjb21lIGZyb20gYSBsb2NhbCB2b2NhYnVsYXJ5IGFzIHRoZXkgYXJlIHJlbGF0ZWQgdG8gd29ya2Zsb3cgcm9sZXMgYW5kIHNwZWNpYWwgcHJvamVjdHMuXHJcbiAgICovXHJcbiAgc2VjdXJpdHlMYWJlbD86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZG9jdW1lbnQgYW5kIGZvcm1hdCByZWZlcmVuY2VkLiBUaGVyZSBtYXkgYmUgbXVsdGlwbGUgY29udGVudCBlbGVtZW50IHJlcGV0aXRpb25zLCBlYWNoIHdpdGggYSBkaWZmZXJlbnQgZm9ybWF0LlxyXG4gICAqL1xyXG4gIGNvbnRlbnQ6IGZoaXIuRG9jdW1lbnRSZWZlcmVuY2VDb250ZW50QXJnc1tdfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlc2UgdmFsdWVzIGFyZSBwcmltYXJpbHkgYWRkZWQgdG8gaGVscCB3aXRoIHNlYXJjaGluZyBmb3IgaW50ZXJlc3RpbmcvcmVsZXZhbnQgZG9jdW1lbnRzLlxyXG4gICAqL1xyXG4gIGNvbnRleHQ/OiBmaGlyLkRvY3VtZW50UmVmZXJlbmNlQ29udGV4dEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQSByZWZlcmVuY2UgdG8gYSBkb2N1bWVudCBvZiBhbnkga2luZCBmb3IgYW55IHB1cnBvc2UuIFByb3ZpZGVzIG1ldGFkYXRhIGFib3V0IHRoZSBkb2N1bWVudCBzbyB0aGF0IHRoZSBkb2N1bWVudCBjYW4gYmUgZGlzY292ZXJlZCBhbmQgbWFuYWdlZC4gVGhlIHNjb3BlIG9mIGEgZG9jdW1lbnQgaXMgYW55IHNlcmFsaXplZCBvYmplY3Qgd2l0aCBhIG1pbWUtdHlwZSwgc28gaW5jbHVkZXMgZm9ybWFsIHBhdGllbnQgY2VudHJpYyBkb2N1bWVudHMgKENEQSksIGNsaWljYWwgbm90ZXMsIHNjYW5uZWQgcGFwZXIsIGFuZCBub24tcGF0aWVudCBzcGVjaWZpYyBkb2N1bWVudHMgbGlrZSBwb2xpY3kgdGV4dC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEb2N1bWVudFJlZmVyZW5jZSBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2Uge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRG9jdW1lbnRSZWZlcmVuY2UnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiRG9jdW1lbnRSZWZlcmVuY2VcIjtcclxuICAvKipcclxuICAgKiBDREEgRG9jdW1lbnQgSWQgZXh0ZW5zaW9uIGFuZCByb290LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYXN0ZXJJZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBPdGhlciBpZGVudGlmaWVycyBhc3NvY2lhdGVkIHdpdGggdGhlIGRvY3VtZW50LCBpbmNsdWRpbmcgdmVyc2lvbiBpbmRlcGVuZGVudCBpZGVudGlmaWVycy5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyB0aGUgc3RhdHVzIG9mIHRoZSBEb2N1bWVudFJlZmVyZW5jZSBvYmplY3QsIHdoaWNoIG1pZ2h0IGJlIGluZGVwZW5kZW50IGZyb20gdGhlIGRvY1N0YXR1cyBlbGVtZW50LlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIHRoZSBjb2RlcyB0aGF0IG1hcmsgdGhlIGRvY3VtZW50IG9yIHJlZmVyZW5jZSBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM6IGZoaXIuRmhpckNvZGU8RG9jdW1lbnRSZWZlcmVuY2VTdGF0dXNDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgZG9jdW1lbnQgdGhhdCBpcyBwb2ludGVkIHRvIG1pZ2h0IGJlIGluIHZhcmlvdXMgbGlmZWN5Y2xlIHN0YXRlcy5cclxuICAgKi9cclxuICBwdWJsaWMgZG9jU3RhdHVzPzogZmhpci5GaGlyQ29kZTxDb21wb3NpdGlvblN0YXR1c0NvZGVUeXBlPnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogS2V5IG1ldGFkYXRhIGVsZW1lbnQgZGVzY3JpYmluZyB0aGUgZG9jdW1lbnQgdGhhdCBkZXNjcmliZXMgaGUgZXhhY3QgdHlwZSBvZiBkb2N1bWVudC4gSGVscHMgaHVtYW5zIHRvIGFzc2VzcyB3aGV0aGVyIHRoZSBkb2N1bWVudCBpcyBvZiBpbnRlcmVzdCB3aGVuIHZpZXdpbmcgYSBsaXN0IG9mIGRvY3VtZW50cy5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBLZXkgbWV0YWRhdGEgZWxlbWVudCBkZXNjcmliaW5nIHRoZSB0aGUgY2F0ZWdvcnkgb3IgY2xhc3NpZmljYXRpb24gb2YgdGhlIGRvY3VtZW50LiBUaGlzIGlzIGEgYnJvYWRlciBwZXJzcGVjdGl2ZSB0aGF0IGdyb3VwcyBzaW1pbGFyIGRvY3VtZW50cyBiYXNlZCBvbiBob3cgdGhleSB3b3VsZCBiZSB1c2VkLiBUaGlzIGlzIGEgcHJpbWFyeSBrZXkgdXNlZCBpbiBzZWFyY2hpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIGNhdGVnb3J5OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFdobyBvciB3aGF0IHRoZSBkb2N1bWVudCBpcyBhYm91dC4gVGhlIGRvY3VtZW50IGNhbiBiZSBhYm91dCBhIHBlcnNvbiwgKHBhdGllbnQgb3IgaGVhbHRoY2FyZSBwcmFjdGl0aW9uZXIpLCBhIGRldmljZSAoZS5nLiBhIG1hY2hpbmUpIG9yIGV2ZW4gYSBncm91cCBvZiBzdWJqZWN0cyAoc3VjaCBhcyBhIGRvY3VtZW50IGFib3V0IGEgaGVyZCBvZiBmYXJtIGFuaW1hbHMsIG9yIGEgc2V0IG9mIHBhdGllbnRzIHRoYXQgc2hhcmUgYSBjb21tb24gZXhwb3N1cmUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJqZWN0PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jaW5nL2luZGV4aW5nIHRpbWUgaXMgdXNlZCBmb3IgdHJhY2tpbmcsIG9yZ2FuaXppbmcgdmVyc2lvbnMgYW5kIHNlYXJjaGluZy5cclxuICAgKi9cclxuICBwdWJsaWMgZGF0ZT86IGZoaXIuRmhpckluc3RhbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5vdCBuZWNlc3NhcmlseSB3aG8gZGlkIHRoZSBhY3R1YWwgZGF0YSBlbnRyeSAoaS5lLiB0eXBpc3QpIG9yIHdobyB3YXMgdGhlIHNvdXJjZSAoaW5mb3JtYW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgYXV0aG9yOiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIFJlcHJlc2VudHMgYSBwYXJ0aWNpcGFudCB3aXRoaW4gdGhlIGF1dGhvciBpbnN0aXR1dGlvbiB3aG8gaGFzIGxlZ2FsbHkgYXV0aGVudGljYXRlZCBvciBhdHRlc3RlZCB0aGUgZG9jdW1lbnQuIExlZ2FsIGF1dGhlbnRpY2F0aW9uIGltcGxpZXMgdGhhdCBhIGRvY3VtZW50IGhhcyBiZWVuIHNpZ25lZCBtYW51YWxseSBvciBlbGVjdHJvbmljYWxseSBieSB0aGUgbGVnYWwgQXV0aGVudGljYXRvci5cclxuICAgKi9cclxuICBwdWJsaWMgYXV0aGVudGljYXRvcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHRoZSBsb2dpY2FsIG9yZ2FuaXphdGlvbiAoc29mdHdhcmUgc3lzdGVtLCB2ZW5kb3IsIG9yIGRlcGFydG1lbnQpIHRvIGdvIHRvIGZpbmQgdGhlIGN1cnJlbnQgdmVyc2lvbiwgd2hlcmUgdG8gcmVwb3J0IGlzc3VlcywgZXRjLiBUaGlzIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBwaHlzaWNhbCBsb2NhdGlvbiAoVVJMLCBkaXNrIGRyaXZlLCBvciBzZXJ2ZXIpIG9mIHRoZSBkb2N1bWVudCwgd2hpY2ggaXMgdGhlIHRlY2huaWNhbCBsb2NhdGlvbiBvZiB0aGUgZG9jdW1lbnQsIHdoaWNoIGhvc3QgbWF5IGJlIGRlbGVnYXRlZCB0byB0aGUgbWFuYWdlbWVudCBvZiBzb21lIG90aGVyIG9yZ2FuaXphdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgY3VzdG9kaWFuPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSBkb2N1bWVudHMgdGhhdCBhcHBlbmQgdG8gb3RoZXIgZG9jdW1lbnRzIGFyZSBpbmNvbXBsZXRlIG9uIHRoZWlyIG93bi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVsYXRlc1RvOiBmaGlyLkRvY3VtZW50UmVmZXJlbmNlUmVsYXRlc1RvW107XHJcbiAgLyoqXHJcbiAgICogV2hhdCB0aGUgZG9jdW1lbnQgaXMgYWJvdXQsICBhIHRlcnNlIHN1bW1hcnkgb2YgdGhlIGRvY3VtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbmZpZGVudGlhbGl0eSBjb2RlcyBjYW4gY2FycnkgbXVsdGlwbGUgdm9jYWJ1bGFyeSBpdGVtcy4gSEw3IGhhcyBkZXZlbG9wZWQgYW4gdW5kZXJzdGFuZGluZyBvZiBzZWN1cml0eSBhbmQgcHJpdmFjeSB0YWdzIHRoYXQgbWlnaHQgYmUgZGVzaXJhYmxlIGluIGEgRG9jdW1lbnQgU2hhcmluZyBlbnZpcm9ubWVudCwgY2FsbGVkIEhMNyBIZWFsdGhjYXJlIFByaXZhY3kgYW5kIFNlY3VyaXR5IENsYXNzaWZpY2F0aW9uIFN5c3RlbSAoSENTKS4gVGhlIGZvbGxvd2luZyBzcGVjaWZpY2F0aW9uIGlzIHJlY29tbWVuZGVkIGJ1dCBub3QgbWFuZGF0ZWQsIGFzIHRoZSB2b2NhYnVsYXJ5IGJpbmRpbmdzIGFyZSBhbiBhZG1pbmlzdHJhdGl2ZSBkb21haW4gcmVzcG9uc2liaWxpdHkuIFRoZSB1c2Ugb2YgdGhpcyBtZXRob2QgaXMgdXAgdG8gdGhlIHBvbGljeSBkb21haW4gc3VjaCBhcyB0aGUgWERTIEFmZmluaXR5IERvbWFpbiBvciBvdGhlciBUcnVzdCBEb21haW4gd2hlcmUgYWxsIHBhcnRpZXMgaW5jbHVkaW5nIHNlbmRlciBhbmQgcmVjaXBpZW50cyBhcmUgdHJ1c3RlZCB0byBhcHByb3ByaWF0ZWx5IHRhZyBhbmQgZW5mb3JjZS4gICBcclxuICAgKiBJbiB0aGUgSEw3IEhlYWx0aGNhcmUgUHJpdmFjeSBhbmQgU2VjdXJpdHkgQ2xhc3NpZmljYXRpb24gKEhDUykgdGhlcmUgYXJlIGNvZGUgc3lzdGVtcyBzcGVjaWZpYyB0byBDb25maWRlbnRpYWxpdHksIFNlbnNpdGl2aXR5LCBJbnRlZ3JpdHksIGFuZCBIYW5kbGluZyBDYXZlYXRzLiBTb21lIHZhbHVlcyB3b3VsZCBjb21lIGZyb20gYSBsb2NhbCB2b2NhYnVsYXJ5IGFzIHRoZXkgYXJlIHJlbGF0ZWQgdG8gd29ya2Zsb3cgcm9sZXMgYW5kIHNwZWNpYWwgcHJvamVjdHMuXHJcbiAgICovXHJcbiAgcHVibGljIHNlY3VyaXR5TGFiZWw6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhlIGRvY3VtZW50IGFuZCBmb3JtYXQgcmVmZXJlbmNlZC4gVGhlcmUgbWF5IGJlIG11bHRpcGxlIGNvbnRlbnQgZWxlbWVudCByZXBldGl0aW9ucywgZWFjaCB3aXRoIGEgZGlmZmVyZW50IGZvcm1hdC5cclxuICAgKi9cclxuICBwdWJsaWMgY29udGVudDogZmhpci5Eb2N1bWVudFJlZmVyZW5jZUNvbnRlbnRbXTtcclxuICAvKipcclxuICAgKiBUaGVzZSB2YWx1ZXMgYXJlIHByaW1hcmlseSBhZGRlZCB0byBoZWxwIHdpdGggc2VhcmNoaW5nIGZvciBpbnRlcmVzdGluZy9yZWxldmFudCBkb2N1bWVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRleHQ/OiBmaGlyLkRvY3VtZW50UmVmZXJlbmNlQ29udGV4dHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRG9jdW1lbnRSZWZlcmVuY2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxEb2N1bWVudFJlZmVyZW5jZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdEb2N1bWVudFJlZmVyZW5jZSc7XHJcbiAgICBpZiAoc291cmNlWydtYXN0ZXJJZGVudGlmaWVyJ10pIHsgdGhpcy5tYXN0ZXJJZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UubWFzdGVySWRlbnRpZmllcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXR1cyddKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8RG9jdW1lbnRSZWZlcmVuY2VTdGF0dXNDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2Uuc3RhdHVzfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zdGF0dXMnXSkge1xyXG4gICAgICBpZiAodGhpcy5zdGF0dXMpIHsgdGhpcy5zdGF0dXMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc3RhdHVzISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8RG9jdW1lbnRSZWZlcmVuY2VTdGF0dXNDb2RlVHlwZT4oc291cmNlLl9zdGF0dXMgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RvY1N0YXR1cyddKSB7IHRoaXMuZG9jU3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8Q29tcG9zaXRpb25TdGF0dXNDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UuZG9jU3RhdHVzfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kb2NTdGF0dXMnXSkge1xyXG4gICAgICBpZiAodGhpcy5kb2NTdGF0dXMpIHsgdGhpcy5kb2NTdGF0dXMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZG9jU3RhdHVzISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZG9jU3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8Q29tcG9zaXRpb25TdGF0dXNDb2RlVHlwZT4oc291cmNlLl9kb2NTdGF0dXMgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydjYXRlZ29yeSddKSB7IHRoaXMuY2F0ZWdvcnkgPSBzb3VyY2UuY2F0ZWdvcnkubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jYXRlZ29yeSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzdWJqZWN0J10pIHsgdGhpcy5zdWJqZWN0ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdWJqZWN0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGF0ZSddKSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHt2YWx1ZTogc291cmNlLmRhdGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5kYXRlKSB7IHRoaXMuZGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHNvdXJjZS5fZGF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckluc3RhbnRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2F1dGhvciddKSB7IHRoaXMuYXV0aG9yID0gc291cmNlLmF1dGhvci5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmF1dGhvciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydhdXRoZW50aWNhdG9yJ10pIHsgdGhpcy5hdXRoZW50aWNhdG9yID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5hdXRoZW50aWNhdG9yKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY3VzdG9kaWFuJ10pIHsgdGhpcy5jdXN0b2RpYW4gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmN1c3RvZGlhbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlbGF0ZXNUbyddKSB7IHRoaXMucmVsYXRlc1RvID0gc291cmNlLnJlbGF0ZXNUby5tYXAoKHgpID0+IG5ldyBmaGlyLkRvY3VtZW50UmVmZXJlbmNlUmVsYXRlc1RvKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVsYXRlc1RvID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGVzY3JpcHRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2Rlc2NyaXB0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVzY3JpcHRpb24pIHsgdGhpcy5kZXNjcmlwdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kZXNjcmlwdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rlc2NyaXB0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzZWN1cml0eUxhYmVsJ10pIHsgdGhpcy5zZWN1cml0eUxhYmVsID0gc291cmNlLnNlY3VyaXR5TGFiZWwubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zZWN1cml0eUxhYmVsID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRlbnQnXSkgeyB0aGlzLmNvbnRlbnQgPSBzb3VyY2UuY29udGVudC5tYXAoKHgpID0+IG5ldyBmaGlyLkRvY3VtZW50UmVmZXJlbmNlQ29udGVudCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRlbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGV4dCddKSB7IHRoaXMuY29udGV4dCA9IG5ldyBmaGlyLkRvY3VtZW50UmVmZXJlbmNlQ29udGV4dChzb3VyY2UuY29udGV4dCk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBzdGF0dXMgKERvY3VtZW50UmVmZXJlbmNlLnN0YXR1cylcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBzdGF0dXNSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIERvY3VtZW50UmVmZXJlbmNlU3RhdHVzQ29kZXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3IgZG9jU3RhdHVzIChEb2N1bWVudFJlZmVyZW5jZS5kb2NTdGF0dXMpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXQgZG9jU3RhdHVzUmVxdWlyZWRDb2RlcygpIHtcclxuICAgIHJldHVybiBDb21wb3NpdGlvblN0YXR1c0NvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBQcmVmZXJyZWQtYm91bmQgVmFsdWUgU2V0IGZvciB0eXBlIChEb2N1bWVudFJlZmVyZW5jZS50eXBlKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHR5cGVQcmVmZXJyZWRDb2RpbmdzKCk6QzgwRG9jVHlwZUNvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIEM4MERvY1R5cGVDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBFeHRlbnNpYmxlLWJvdW5kIFZhbHVlIFNldCBmb3Igc2VjdXJpdHlMYWJlbCAoRG9jdW1lbnRSZWZlcmVuY2Uuc2VjdXJpdHlMYWJlbClcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBzZWN1cml0eUxhYmVsRXh0ZW5zaWJsZUNvZGluZ3MoKTpTZWN1cml0eUxhYmVsc0NvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIFNlY3VyaXR5TGFiZWxzQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRG9jdW1lbnRSZWZlcmVuY2UnIH1cclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VUeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlc291cmNlVHlwZSBmaGlyOiBEb2N1bWVudFJlZmVyZW5jZS5yZXNvdXJjZVR5cGU6XCJEb2N1bWVudFJlZmVyZW5jZVwiJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJtYXN0ZXJJZGVudGlmaWVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubWFzdGVySWRlbnRpZmllci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycubWFzdGVySWRlbnRpZmllcicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJpZGVudGlmaWVyXCJdKSB7IHRoaXMuaWRlbnRpZmllci5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuaWRlbnRpZmllclske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKCF0aGlzWydzdGF0dXMnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgc3RhdHVzIGZoaXI6IERvY3VtZW50UmVmZXJlbmNlLnN0YXR1czpjb2RlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ3N0YXR1cyddICYmICghT2JqZWN0LnZhbHVlcyhEb2N1bWVudFJlZmVyZW5jZVN0YXR1c0NvZGVzKS5pbmNsdWRlcyh0aGlzLnN0YXR1cy52YWx1ZSBhcyBhbnkpKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnY29kZS1pbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdJbnZhbGlkIGNvZGUgcHJvcGVydHkgc3RhdHVzIGZoaXI6IERvY3VtZW50UmVmZXJlbmNlLnN0YXR1czpjb2RlIFJlcXVpcmVkIGJpbmRpbmcgdG86IERvY3VtZW50UmVmZXJlbmNlU3RhdHVzJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJzdGF0dXNcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5zdGF0dXMuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLnN0YXR1cycpKTsgfVxyXG4gICAgaWYgKHRoaXNbJ2RvY1N0YXR1cyddICYmICghT2JqZWN0LnZhbHVlcyhDb21wb3NpdGlvblN0YXR1c0NvZGVzKS5pbmNsdWRlcyh0aGlzLmRvY1N0YXR1cy52YWx1ZSBhcyBhbnkpKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnY29kZS1pbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdJbnZhbGlkIGNvZGUgcHJvcGVydHkgZG9jU3RhdHVzIGZoaXI6IERvY3VtZW50UmVmZXJlbmNlLmRvY1N0YXR1czpjb2RlIFJlcXVpcmVkIGJpbmRpbmcgdG86IENvbXBvc2l0aW9uU3RhdHVzJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJkb2NTdGF0dXNcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kb2NTdGF0dXMuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmRvY1N0YXR1cycpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycudHlwZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjYXRlZ29yeVwiXSkgeyB0aGlzLmNhdGVnb3J5LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5jYXRlZ29yeVske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJzdWJqZWN0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3ViamVjdC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuc3ViamVjdCcpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkYXRlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGF0ZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuZGF0ZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJhdXRob3JcIl0pIHsgdGhpcy5hdXRob3IuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmF1dGhvclske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJhdXRoZW50aWNhdG9yXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuYXV0aGVudGljYXRvci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuYXV0aGVudGljYXRvcicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjdXN0b2RpYW5cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jdXN0b2RpYW4uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmN1c3RvZGlhbicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJyZWxhdGVzVG9cIl0pIHsgdGhpcy5yZWxhdGVzVG8uZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnJlbGF0ZXNUb1ske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNjcmlwdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRlc2NyaXB0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5kZXNjcmlwdGlvbicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJzZWN1cml0eUxhYmVsXCJdKSB7IHRoaXMuc2VjdXJpdHlMYWJlbC5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2Auc2VjdXJpdHlMYWJlbFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKCF0aGlzWydjb250ZW50J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGNvbnRlbnQgZmhpcjogRG9jdW1lbnRSZWZlcmVuY2UuY29udGVudDpjb250ZW50JywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmNvbnRlbnQpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdzdHJ1Y3R1cmUnLCBkaWFnbm9zdGljczogJ0ZvdW5kIHNjYWxhciBpbiBhcnJheSBwcm9wZXJ0eSBjb250ZW50IGZoaXI6IERvY3VtZW50UmVmZXJlbmNlLmNvbnRlbnQ6Y29udGVudCcsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jb250ZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgY29udGVudCBmaGlyOiBEb2N1bWVudFJlZmVyZW5jZS5jb250ZW50OmNvbnRlbnQnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRlbnRcIl0pIHsgdGhpcy5jb250ZW50LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5jb250ZW50WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRleHRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jb250ZXh0LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5jb250ZXh0JykpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=