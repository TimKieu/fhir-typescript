// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Appointment
import * as fhir from '../fhir.js';
// @ts-ignore
import { ParticipantrequiredVsValidation } from '../fhirValueSets/ParticipantrequiredVsValidation.js';
// @ts-ignore
import { ParticipationstatusVsValidation } from '../fhirValueSets/ParticipationstatusVsValidation.js';
// @ts-ignore
import { AppointmentstatusVsValidation } from '../fhirValueSets/AppointmentstatusVsValidation.js';
/**
 * List of participants involved in the appointment.
 */
export class AppointmentParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for AppointmentParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['required']) {
            this.required = new fhir.FhirCode({ value: source.required });
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirCode(source._required);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Appointment.participant';
        }
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('actor', exp));
        iss.push(...this.vOSV('required', exp, 'Participantrequired', ParticipantrequiredVsValidation, 'r'));
        iss.push(...this.vRSV('status', exp, 'Participationstatus', ParticipationstatusVsValidation, 'r'));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AppointmentParticipant._fts_dataType = 'AppointmentParticipant';
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export class Appointment extends fhir.DomainResource {
    /**
     * Default constructor for Appointment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Appointment';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['cancelationReason']) {
            this.cancelationReason = new fhir.CodeableConcept(source.cancelationReason);
        }
        if (source['serviceCategory']) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceCategory = [];
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceType = [];
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialty = [];
        }
        if (source['appointmentType']) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['priority']) {
            this.priority = new fhir.FhirUnsignedInt({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirUnsignedInt(source._priority);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['start']) {
            this.start = new fhir.FhirInstant({ value: source.start });
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInstant(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInstant({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInstant(source._end);
            }
        }
        if (source['minutesDuration']) {
            this.minutesDuration = new fhir.FhirPositiveInt({ value: source.minutesDuration });
        }
        if (source['_minutesDuration']) {
            if (this.minutesDuration) {
                this.minutesDuration.addExtendedProperties(source._minutesDuration);
            }
            else {
                this.minutesDuration = new fhir.FhirPositiveInt(source._minutesDuration);
            }
        }
        if (source['slot']) {
            this.slot = source.slot.map((x) => new fhir.Reference(x));
        }
        else {
            this.slot = [];
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['patientInstruction']) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction });
        }
        if (source['_patientInstruction']) {
            if (this.patientInstruction) {
                this.patientInstruction.addExtendedProperties(source._patientInstruction);
            }
            else {
                this.patientInstruction = new fhir.FhirString(source._patientInstruction);
            }
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.AppointmentParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['requestedPeriod']) {
            this.requestedPeriod = source.requestedPeriod.map((x) => new fhir.Period(x));
        }
        else {
            this.requestedPeriod = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Appointment';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'Appointmentstatus', AppointmentstatusVsValidation, 'r'));
        iss.push(...this.vOS('cancelationReason', exp));
        iss.push(...this.vOA('serviceCategory', exp));
        iss.push(...this.vOA('serviceType', exp));
        iss.push(...this.vOA('specialty', exp));
        iss.push(...this.vOS('appointmentType', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('supportingInformation', exp));
        iss.push(...this.vOS('start', exp));
        iss.push(...this.vOS('end', exp));
        iss.push(...this.vOS('minutesDuration', exp));
        iss.push(...this.vOA('slot', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOS('patientInstruction', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vRA('participant', exp));
        iss.push(...this.vOA('requestedPeriod', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Appointment._fts_dataType = 'Appointment';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwb2ludG1lbnQuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL0FwcG9pbnRtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZCQUE2QjtBQUU3QixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQVFuQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFHdEcsYUFBYTtBQUNiLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBR3RHLGFBQWE7QUFDYixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQTZEbEc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUEyQjlEOztPQUVHO0lBQ0gsWUFBWSxTQUE2QyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUNuRyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNuRjtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDeEIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FBRTtRQUN2RSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdB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QyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDeEc7WUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQy9CLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNsRztZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDN0IsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUFFO1FBQzNHLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNyRztZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDOUIsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENB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SyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQTdNRDs7R0FFRztBQUM2Qix5QkFBYSxHQUFVLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogQXBwb2ludG1lbnRcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlclBhcnRpY2lwYW50VHlwZUNvZGVzLCAgRW5jb3VudGVyUGFydGljaXBhbnRUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlclBhcnRpY2lwYW50VHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFbmNvdW50ZXJQYXJ0aWNpcGFudFR5cGVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlclBhcnRpY2lwYW50VHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUGFydGljaXBhbnRyZXF1aXJlZENvZGVzLCAgUGFydGljaXBhbnRyZXF1aXJlZENvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QYXJ0aWNpcGFudHJlcXVpcmVkQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFBhcnRpY2lwYW50cmVxdWlyZWRWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1BhcnRpY2lwYW50cmVxdWlyZWRWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFBhcnRpY2lwYXRpb25zdGF0dXNDb2RlcywgIFBhcnRpY2lwYXRpb25zdGF0dXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUGFydGljaXBhdGlvbnN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBQYXJ0aWNpcGF0aW9uc3RhdHVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QYXJ0aWNpcGF0aW9uc3RhdHVzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBBcHBvaW50bWVudHN0YXR1c0NvZGVzLCAgQXBwb2ludG1lbnRzdGF0dXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQXBwb2ludG1lbnRzdGF0dXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQXBwb2ludG1lbnRzdGF0dXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0FwcG9pbnRtZW50c3RhdHVzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBBcHBvaW50bWVudENhbmNlbGxhdGlvblJlYXNvbkNvZGVzLCAgQXBwb2ludG1lbnRDYW5jZWxsYXRpb25SZWFzb25Db2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQXBwb2ludG1lbnRDYW5jZWxsYXRpb25SZWFzb25Db2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQXBwb2ludG1lbnRDYW5jZWxsYXRpb25SZWFzb25Wc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0FwcG9pbnRtZW50Q2FuY2VsbGF0aW9uUmVhc29uVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTZXJ2aWNlQ2F0ZWdvcnlDb2RlcywgIFNlcnZpY2VDYXRlZ29yeUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TZXJ2aWNlQ2F0ZWdvcnlDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU2VydmljZUNhdGVnb3J5VnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TZXJ2aWNlQ2F0ZWdvcnlWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNlcnZpY2VUeXBlQ29kZXMsICBTZXJ2aWNlVHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TZXJ2aWNlVHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTZXJ2aWNlVHlwZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU2VydmljZVR5cGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEM4MFByYWN0aWNlQ29kZXMsICBDODBQcmFjdGljZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DODBQcmFjdGljZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDODBQcmFjdGljZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQzgwUHJhY3RpY2VWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFYyMDI3NkNvZGVzLCAgVjIwMjc2Q29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1YyMDI3NkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWMjAyNzZWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1YyMDI3NlZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyUmVhc29uQ29kZXMsICBFbmNvdW50ZXJSZWFzb25Db2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyUmVhc29uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlclJlYXNvblZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyUmVhc29uVnNWYWxpZGF0aW9uLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEFwcG9pbnRtZW50UGFydGljaXBhbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwb2ludG1lbnRQYXJ0aWNpcGFudEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSByb2xlIG9mIHRoZSBwYXJ0aWNpcGFudCBjYW4gYmUgdXNlZCB0byBkZWNsYXJlIHdoYXQgdGhlIGFjdG9yIHdpbGwgYmUgZG9pbmcgaW4gdGhlIHNjb3BlIG9mIHRoaXMgYXBwb2ludG1lbnQuXHJcbiAgICogSWYgdGhlIGFjdG9yIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gaXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgYWN0b3Igd2lsbCBiZSBmaWxsZWQgaW4gYXQgYSBsYXRlciBzdGFnZSBvZiBwbGFubmluZy5cclxuICAgKiBUaGlzIHZhbHVlIFNIQUxMIGJlIHRoZSBzYW1lIHdoZW4gY3JlYXRpbmcgYW4gQXBwb2ludG1lbnRSZXNwb25zZSBzbyB0aGF0IHRoZXkgY2FuIGJlIG1hdGNoZWQsIGFuZCBzdWJzZXF1ZW50bHkgdXBkYXRlIHRoZSBBcHBvaW50bWVudC5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgUGVyc29uLCBMb2NhdGlvbi9IZWFsdGhjYXJlU2VydmljZSBvciBEZXZpY2UgdGhhdCBpcyBwYXJ0aWNpcGF0aW5nIGluIHRoZSBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBhY3Rvcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGlzIHBhcnRpY2lwYW50IGlzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQgYXQgdGhlIG1lZXRpbmcuIFRoaXMgY292ZXJzIGEgdXNlLWNhc2Ugd2hlcmUgdHdvIGRvY3RvcnMgbmVlZCB0byBtZWV0IHRvIGRpc2N1c3MgdGhlIHJlc3VsdHMgZm9yIGEgc3BlY2lmaWMgcGF0aWVudCwgYW5kIHRoZSBwYXRpZW50IGlzIG5vdCByZXF1aXJlZCB0byBiZSBwcmVzZW50LlxyXG4gICAqL1xyXG4gIHJlcXVpcmVkPzogZmhpci5GaGlyQ29kZTxQYXJ0aWNpcGFudHJlcXVpcmVkQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFwcG9pbnRtZW50LnBhcnRpY2lwYW50LnJlcXVpcmVkXHJcbiAgICovXHJcbiAgX3JlcXVpcmVkPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBQYXJ0aWNpcGF0aW9uIHN0YXR1cyBvZiB0aGUgYWN0b3IuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPFBhcnRpY2lwYXRpb25zdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQXBwb2ludG1lbnQucGFydGljaXBhbnQuc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogUGFydGljaXBhdGlvbiBwZXJpb2Qgb2YgdGhlIGFjdG9yLlxyXG4gICAqL1xyXG4gIHBlcmlvZD86IGZoaXIuUGVyaW9kQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHBhcnRpY2lwYW50cyBpbnZvbHZlZCBpbiB0aGUgYXBwb2ludG1lbnQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXBwb2ludG1lbnRQYXJ0aWNpcGFudCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0FwcG9pbnRtZW50UGFydGljaXBhbnQnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByb2xlIG9mIHRoZSBwYXJ0aWNpcGFudCBjYW4gYmUgdXNlZCB0byBkZWNsYXJlIHdoYXQgdGhlIGFjdG9yIHdpbGwgYmUgZG9pbmcgaW4gdGhlIHNjb3BlIG9mIHRoaXMgYXBwb2ludG1lbnQuXHJcbiAgICogSWYgdGhlIGFjdG9yIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gaXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgYWN0b3Igd2lsbCBiZSBmaWxsZWQgaW4gYXQgYSBsYXRlciBzdGFnZSBvZiBwbGFubmluZy5cclxuICAgKiBUaGlzIHZhbHVlIFNIQUxMIGJlIHRoZSBzYW1lIHdoZW4gY3JlYXRpbmcgYW4gQXBwb2ludG1lbnRSZXNwb25zZSBzbyB0aGF0IHRoZXkgY2FuIGJlIG1hdGNoZWQsIGFuZCBzdWJzZXF1ZW50bHkgdXBkYXRlIHRoZSBBcHBvaW50bWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZTogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBBIFBlcnNvbiwgTG9jYXRpb24vSGVhbHRoY2FyZVNlcnZpY2Ugb3IgRGV2aWNlIHRoYXQgaXMgcGFydGljaXBhdGluZyBpbiB0aGUgYXBwb2ludG1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGFjdG9yPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhpcyBwYXJ0aWNpcGFudCBpcyByZXF1aXJlZCB0byBiZSBwcmVzZW50IGF0IHRoZSBtZWV0aW5nLiBUaGlzIGNvdmVycyBhIHVzZS1jYXNlIHdoZXJlIHR3byBkb2N0b3JzIG5lZWQgdG8gbWVldCB0byBkaXNjdXNzIHRoZSByZXN1bHRzIGZvciBhIHNwZWNpZmljIHBhdGllbnQsIGFuZCB0aGUgcGF0aWVudCBpcyBub3QgcmVxdWlyZWQgdG8gYmUgcHJlc2VudC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWlyZWQ/OiBmaGlyLkZoaXJDb2RlPFBhcnRpY2lwYW50cmVxdWlyZWRDb2RlVHlwZT58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBhcnRpY2lwYXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rvci5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPFBhcnRpY2lwYXRpb25zdGF0dXNDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBQYXJ0aWNpcGF0aW9uIHBlcmlvZCBvZiB0aGUgYWN0b3IuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZD86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBBcHBvaW50bWVudFBhcnRpY2lwYW50IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8QXBwb2ludG1lbnRQYXJ0aWNpcGFudEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gc291cmNlLnR5cGUubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2FjdG9yJ10pIHsgdGhpcy5hY3RvciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuYWN0b3IpOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXF1aXJlZCddKSB7IHRoaXMucmVxdWlyZWQgPSBuZXcgZmhpci5GaGlyQ29kZTxQYXJ0aWNpcGFudHJlcXVpcmVkQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnJlcXVpcmVkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yZXF1aXJlZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7IHRoaXMucmVxdWlyZWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmVxdWlyZWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yZXF1aXJlZCA9IG5ldyBmaGlyLkZoaXJDb2RlPFBhcnRpY2lwYW50cmVxdWlyZWRDb2RlVHlwZT4oc291cmNlLl9yZXF1aXJlZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQYXJ0aWNpcGF0aW9uc3RhdHVzQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnN0YXR1c30pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfc3RhdHVzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc3RhdHVzKSB7IHRoaXMuc3RhdHVzLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3N0YXR1cyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPFBhcnRpY2lwYXRpb25zdGF0dXNDb2RlVHlwZT4oc291cmNlLl9zdGF0dXMgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZCddKSB7IHRoaXMucGVyaW9kID0gbmV3IGZoaXIuUGVyaW9kKHNvdXJjZS5wZXJpb2QpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnQXBwb2ludG1lbnQucGFydGljaXBhbnQnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCd0eXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdhY3RvcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPU1YoJ3JlcXVpcmVkJyxleHAsJ1BhcnRpY2lwYW50cmVxdWlyZWQnLFBhcnRpY2lwYW50cmVxdWlyZWRWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSU1YoJ3N0YXR1cycsZXhwLCdQYXJ0aWNpcGF0aW9uc3RhdHVzJyxQYXJ0aWNpcGF0aW9uc3RhdHVzVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3BlcmlvZCcsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQXBwb2ludG1lbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwb2ludG1lbnRBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJBcHBvaW50bWVudFwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIHJlY29yZHMgaWRlbnRpZmllcnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYXBwb2ludG1lbnQgY29uY2VybiB0aGF0IGFyZSBkZWZpbmVkIGJ5IGJ1c2luZXNzIHByb2Nlc3NlcyBhbmQvb3IgdXNlZCB0byByZWZlciB0byBpdCB3aGVuIGEgZGlyZWN0IFVSTCByZWZlcmVuY2UgdG8gdGhlIHJlc291cmNlIGl0c2VsZiBpcyBub3QgYXBwcm9wcmlhdGUgKGUuZy4gaW4gQ0RBIGRvY3VtZW50cywgb3IgaW4gd3JpdHRlbiAvIHByaW50ZWQgZG9jdW1lbnRhdGlvbikuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIEFwcG9pbnRtZW50J3Mgc3RhdHVzIGlzIFwiY2FuY2VsbGVkXCIgdGhlbiBhbGwgcGFydGljaXBhbnRzIGFyZSBleHBlY3RlZCB0byBoYXZlIHRoZWlyIGNhbGVuZGFycyByZWxlYXNlZCBmb3IgdGhlIGFwcG9pbnRtZW50IHBlcmlvZCwgYW5kIGFzIHN1Y2ggYW55IFNsb3RzIHRoYXQgd2VyZSBtYXJrZWQgYXMgQlVTWSBjYW4gYmUgcmUtc2V0IHRvIEZSRUUuXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIHRoZSBzdGF0dXMgY29udGFpbnMgdGhlIGNvZGUgZW50ZXJlZC1pbi1lcnJvciB0aGF0IG1hcmsgdGhlIEFwcG9pbnRtZW50IGFzIG5vdCBjdXJyZW50bHkgdmFsaWQuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPEFwcG9pbnRtZW50c3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFwcG9pbnRtZW50LnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb2RlZCByZWFzb24gZm9yIHRoZSBhcHBvaW50bWVudCBiZWluZyBjYW5jZWxsZWQuIFRoaXMgaXMgb2Z0ZW4gdXNlZCBpbiByZXBvcnRpbmcvYmlsbGluZy9mdXRoZXIgcHJvY2Vzc2luZyB0byBkZXRlcm1pbmUgaWYgZnVydGhlciBhY3Rpb25zIGFyZSByZXF1aXJlZCwgb3Igc3BlY2lmaWMgZmVlcyBhcHBseS5cclxuICAgKi9cclxuICBjYW5jZWxhdGlvblJlYXNvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBicm9hZCBjYXRlZ29yaXphdGlvbiBvZiB0aGUgc2VydmljZSB0aGF0IGlzIHRvIGJlIHBlcmZvcm1lZCBkdXJpbmcgdGhpcyBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBzZXJ2aWNlQ2F0ZWdvcnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIGEgcHJvdmlkZXIgdG8gcHJvdmlkZXIgYXBwb2ludG1lbnQgdGhlIGNvZGUgXCJGT0xMT1dVUFwiIG1heSBiZSBhcHByb3ByaWF0ZSwgYXMgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBkaXNjdXNzaW5nIHNvbWUgcGF0aWVudCB0aGF0IHdhcyBzZWVuIGluIHRoZSBwYXN0LlxyXG4gICAqL1xyXG4gIHNlcnZpY2VUeXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWFsdHkgb2YgYSBwcmFjdGl0aW9uZXIgdGhhdCB3b3VsZCBiZSByZXF1aXJlZCB0byBwZXJmb3JtIHRoZSBzZXJ2aWNlIHJlcXVlc3RlZCBpbiB0aGlzIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIHNwZWNpYWx0eT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc3R5bGUgb2YgYXBwb2ludG1lbnQgb3IgcGF0aWVudCB0aGF0IGhhcyBiZWVuIGJvb2tlZCBpbiB0aGUgc2xvdCAobm90IHNlcnZpY2UgdHlwZSkuXHJcbiAgICovXHJcbiAgYXBwb2ludG1lbnRUeXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY29kZWQgcmVhc29uIHRoYXQgdGhpcyBhcHBvaW50bWVudCBpcyBiZWluZyBzY2hlZHVsZWQuIFRoaXMgaXMgbW9yZSBjbGluaWNhbCB0aGFuIGFkbWluaXN0cmF0aXZlLlxyXG4gICAqL1xyXG4gIHJlYXNvbkNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVhc29uIHRoZSBhcHBvaW50bWVudCBoYXMgYmVlbiBzY2hlZHVsZWQgdG8gdGFrZSBwbGFjZSwgYXMgc3BlY2lmaWVkIHVzaW5nIGluZm9ybWF0aW9uIGZyb20gYW5vdGhlciByZXNvdXJjZS4gV2hlbiB0aGUgcGF0aWVudCBhcnJpdmVzIGFuZCB0aGUgZW5jb3VudGVyIGJlZ2lucyBpdCBtYXkgYmUgdXNlZCBhcyB0aGUgYWRtaXNzaW9uIGRpYWdub3Npcy4gVGhlIGluZGljYXRpb24gd2lsbCB0eXBpY2FsbHkgYmUgYSBDb25kaXRpb24gKHdpdGggb3RoZXIgcmVzb3VyY2VzIHJlZmVyZW5jZWQgaW4gdGhlIGV2aWRlbmNlLmRldGFpbCksIG9yIGEgUHJvY2VkdXJlLlxyXG4gICAqL1xyXG4gIHJlYXNvblJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTZWVraW5nIGltcGxlbWVudGVyIGZlZWRiYWNrIG9uIHRoaXMgcHJvcGVydHkgYW5kIGhvdyBpbnRlcm9wZXJhYmxlIGl0IGlzLlxyXG4gICAqIFVzaW5nIGFuIGV4dGVuc2lvbiB0byByZWNvcmQgYSBDb2RlYWJsZUNvbmNlcHQgZm9yIG5hbWVkIHZhbHVlcyBtYXkgYmUgdGVzdGVkIGF0IGEgZnV0dXJlIGNvbm5lY3RhdGhvbi5cclxuICAgKi9cclxuICBwcmlvcml0eT86IGZoaXIuRmhpclVuc2lnbmVkSW50fG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFwcG9pbnRtZW50LnByaW9yaXR5XHJcbiAgICovXHJcbiAgX3ByaW9yaXR5PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgYnJpZWYgZGVzY3JpcHRpb24gb2YgdGhlIGFwcG9pbnRtZW50IGFzIHdvdWxkIGJlIHNob3duIG9uIGEgc3ViamVjdCBsaW5lIGluIGEgbWVldGluZyByZXF1ZXN0LCBvciBhcHBvaW50bWVudCBsaXN0LiBEZXRhaWxlZCBvciBleHBhbmRlZCBpbmZvcm1hdGlvbiBzaG91bGQgYmUgcHV0IGluIHRoZSBjb21tZW50IGZpZWxkLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFwcG9pbnRtZW50LmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIHRvIHN1cHBvcnQgdGhlIGFwcG9pbnRtZW50IHByb3ZpZGVkIHdoZW4gbWFraW5nIHRoZSBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBzdXBwb3J0aW5nSW5mb3JtYXRpb24/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGF0ZS9UaW1lIHRoYXQgdGhlIGFwcG9pbnRtZW50IGlzIHRvIHRha2UgcGxhY2UuXHJcbiAgICovXHJcbiAgc3RhcnQ/OiBmaGlyLkZoaXJJbnN0YW50fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFwcG9pbnRtZW50LnN0YXJ0XHJcbiAgICovXHJcbiAgX3N0YXJ0PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBEYXRlL1RpbWUgdGhhdCB0aGUgYXBwb2ludG1lbnQgaXMgdG8gY29uY2x1ZGUuXHJcbiAgICovXHJcbiAgZW5kPzogZmhpci5GaGlySW5zdGFudHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBcHBvaW50bWVudC5lbmRcclxuICAgKi9cclxuICBfZW5kPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBOdW1iZXIgb2YgbWludXRlcyB0aGF0IHRoZSBhcHBvaW50bWVudCBpcyB0byB0YWtlLiBUaGlzIGNhbiBiZSBsZXNzIHRoYW4gdGhlIGR1cmF0aW9uIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdGltZXMuICBGb3IgZXhhbXBsZSwgd2hlcmUgdGhlIGFjdHVhbCB0aW1lIG9mIGFwcG9pbnRtZW50IGlzIG9ubHkgYW4gZXN0aW1hdGUgb3IgaWYgYSAzMCBtaW51dGUgYXBwb2ludG1lbnQgaXMgYmVpbmcgcmVxdWVzdGVkLCBidXQgYW55IHRpbWUgd291bGQgd29yay4gIEFsc28sIGlmIHRoZXJlIGlzLCBmb3IgZXhhbXBsZSwgYSBwbGFubmVkIDE1IG1pbnV0ZSBicmVhayBpbiB0aGUgbWlkZGxlIG9mIGEgbG9uZyBhcHBvaW50bWVudCwgdGhlIGR1cmF0aW9uIG1heSBiZSAxNSBtaW51dGVzIGxlc3MgdGhhbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kLlxyXG4gICAqL1xyXG4gIG1pbnV0ZXNEdXJhdGlvbj86IGZoaXIuRmhpclBvc2l0aXZlSW50fG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFwcG9pbnRtZW50Lm1pbnV0ZXNEdXJhdGlvblxyXG4gICAqL1xyXG4gIF9taW51dGVzRHVyYXRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzbG90cyBmcm9tIHRoZSBwYXJ0aWNpcGFudHMnIHNjaGVkdWxlcyB0aGF0IHdpbGwgYmUgZmlsbGVkIGJ5IHRoZSBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBzbG90PzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgZm9yIG1hbnkgdXNlIGNhc2VzIHdoZXJlIHRoZSBhZ2Ugb2YgYW4gYXBwb2ludG1lbnQgaXMgY29uc2lkZXJlZCBpbiBwcm9jZXNzaW5nIHdvcmtmbG93cyBmb3Igc2NoZWR1bGluZyBhbmQgYmlsbGluZyBvZiBhcHBvaW50bWVudHMuXHJcbiAgICovXHJcbiAgY3JlYXRlZD86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFwcG9pbnRtZW50LmNyZWF0ZWRcclxuICAgKi9cclxuICBfY3JlYXRlZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQWRkaXRpb25hbCB0ZXh0IHRvIGFpZCBpbiBmYWNpbGl0YXRpbmcgdGhlIGFwcG9pbnRtZW50LiBGb3IgaW5zdGFuY2UsIGEgY29tbWVudCBtaWdodCBiZSwgXCJwYXRpZW50IHNob3VsZCBwcm9jZWVkIGltbWVkaWF0ZWx5IHRvIGluZnVzaW9uIHJvb20gdXBvbiBhcnJpdmFsXCJcclxuICAgKiBXaGVyZSB0aGlzIGlzIGEgcGxhbm5lZCBhcHBvaW50bWVudCBhbmQgdGhlIHN0YXJ0L2VuZCBkYXRlcyBhcmUgbm90IHNldCB0aGVuIHRoaXMgZmllbGQgY2FuIGJlIHVzZWQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGd1aWRhbmNlIG9uIHRoZSBkZXRhaWxzIG9mIHRoZSBhcHBvaW50bWVudCByZXF1ZXN0LCBpbmNsdWRpbmcgYW55IHJlc3RyaWN0aW9ucyBvbiB3aGVuIHRvIGJvb2sgaXQuXHJcbiAgICovXHJcbiAgY29tbWVudD86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBcHBvaW50bWVudC5jb21tZW50XHJcbiAgICovXHJcbiAgX2NvbW1lbnQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFdoaWxlIEFwcG9pbnRtZW50LmNvbW1lbnQgY29udGFpbnMgaW5mb3JtYXRpb24gZm9yIGludGVybmFsIHVzZSwgQXBwb2ludG1lbnQucGF0aWVudEluc3RydWN0aW9ucyBpcyB1c2VkIHRvIGNhcHR1cmUgcGF0aWVudCBmYWNpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIEFwcG9pbnRtZW50IChlLmcuIHBsZWFzZSBicmluZyB5b3VyIHJlZmVycmFsIG9yIGZhc3QgZnJvbSA4cG0gbmlnaHQgYmVmb3JlKS5cclxuICAgKi9cclxuICBwYXRpZW50SW5zdHJ1Y3Rpb24/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQXBwb2ludG1lbnQucGF0aWVudEluc3RydWN0aW9uXHJcbiAgICovXHJcbiAgX3BhdGllbnRJbnN0cnVjdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlcnZpY2UgcmVxdWVzdCB0aGlzIGFwcG9pbnRtZW50IGlzIGFsbG9jYXRlZCB0byBhc3Nlc3MgKGUuZy4gaW5jb21pbmcgcmVmZXJyYWwgb3IgcHJvY2VkdXJlIHJlcXVlc3QpLlxyXG4gICAqL1xyXG4gIGJhc2VkT24/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGlzdCBvZiBwYXJ0aWNpcGFudHMgaW52b2x2ZWQgaW4gdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIHBhcnRpY2lwYW50OiBmaGlyLkFwcG9pbnRtZW50UGFydGljaXBhbnRBcmdzW118bnVsbDtcclxuICAvKipcclxuICAgKiBUaGlzIGRvZXMgbm90IGludHJvZHVjZSBhIGNhcGFjaXR5IGZvciByZWN1cnJpbmcgYXBwb2ludG1lbnRzLlxyXG4gICAqL1xyXG4gIHJlcXVlc3RlZFBlcmlvZD86IGZoaXIuUGVyaW9kQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgYm9va2luZyBvZiBhIGhlYWx0aGNhcmUgZXZlbnQgYW1vbmcgcGF0aWVudChzKSwgcHJhY3RpdGlvbmVyKHMpLCByZWxhdGVkIHBlcnNvbihzKSBhbmQvb3IgZGV2aWNlKHMpIGZvciBhIHNwZWNpZmljIGRhdGUvdGltZS4gVGhpcyBtYXkgcmVzdWx0IGluIG9uZSBvciBtb3JlIEVuY291bnRlcihzKS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBcHBvaW50bWVudCBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2Uge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQXBwb2ludG1lbnQnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiQXBwb2ludG1lbnRcIjtcclxuICAvKipcclxuICAgKiBUaGlzIHJlY29yZHMgaWRlbnRpZmllcnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYXBwb2ludG1lbnQgY29uY2VybiB0aGF0IGFyZSBkZWZpbmVkIGJ5IGJ1c2luZXNzIHByb2Nlc3NlcyBhbmQvb3IgdXNlZCB0byByZWZlciB0byBpdCB3aGVuIGEgZGlyZWN0IFVSTCByZWZlcmVuY2UgdG8gdGhlIHJlc291cmNlIGl0c2VsZiBpcyBub3QgYXBwcm9wcmlhdGUgKGUuZy4gaW4gQ0RBIGRvY3VtZW50cywgb3IgaW4gd3JpdHRlbiAvIHByaW50ZWQgZG9jdW1lbnRhdGlvbikuXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aWZpZXI6IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBBcHBvaW50bWVudCdzIHN0YXR1cyBpcyBcImNhbmNlbGxlZFwiIHRoZW4gYWxsIHBhcnRpY2lwYW50cyBhcmUgZXhwZWN0ZWQgdG8gaGF2ZSB0aGVpciBjYWxlbmRhcnMgcmVsZWFzZWQgZm9yIHRoZSBhcHBvaW50bWVudCBwZXJpb2QsIGFuZCBhcyBzdWNoIGFueSBTbG90cyB0aGF0IHdlcmUgbWFya2VkIGFzIEJVU1kgY2FuIGJlIHJlLXNldCB0byBGUkVFLlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIHRoZSBjb2RlIGVudGVyZWQtaW4tZXJyb3IgdGhhdCBtYXJrIHRoZSBBcHBvaW50bWVudCBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM6IGZoaXIuRmhpckNvZGU8QXBwb2ludG1lbnRzdGF0dXNDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgY29kZWQgcmVhc29uIGZvciB0aGUgYXBwb2ludG1lbnQgYmVpbmcgY2FuY2VsbGVkLiBUaGlzIGlzIG9mdGVuIHVzZWQgaW4gcmVwb3J0aW5nL2JpbGxpbmcvZnV0aGVyIHByb2Nlc3NpbmcgdG8gZGV0ZXJtaW5lIGlmIGZ1cnRoZXIgYWN0aW9ucyBhcmUgcmVxdWlyZWQsIG9yIHNwZWNpZmljIGZlZXMgYXBwbHkuXHJcbiAgICovXHJcbiAgcHVibGljIGNhbmNlbGF0aW9uUmVhc29uPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgYnJvYWQgY2F0ZWdvcml6YXRpb24gb2YgdGhlIHNlcnZpY2UgdGhhdCBpcyB0byBiZSBwZXJmb3JtZWQgZHVyaW5nIHRoaXMgYXBwb2ludG1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHNlcnZpY2VDYXRlZ29yeTogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBGb3IgYSBwcm92aWRlciB0byBwcm92aWRlciBhcHBvaW50bWVudCB0aGUgY29kZSBcIkZPTExPV1VQXCIgbWF5IGJlIGFwcHJvcHJpYXRlLCBhcyB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGRpc2N1c3Npbmcgc29tZSBwYXRpZW50IHRoYXQgd2FzIHNlZW4gaW4gdGhlIHBhc3QuXHJcbiAgICovXHJcbiAgcHVibGljIHNlcnZpY2VUeXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWFsdHkgb2YgYSBwcmFjdGl0aW9uZXIgdGhhdCB3b3VsZCBiZSByZXF1aXJlZCB0byBwZXJmb3JtIHRoZSBzZXJ2aWNlIHJlcXVlc3RlZCBpbiB0aGlzIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzcGVjaWFsdHk6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhlIHN0eWxlIG9mIGFwcG9pbnRtZW50IG9yIHBhdGllbnQgdGhhdCBoYXMgYmVlbiBib29rZWQgaW4gdGhlIHNsb3QgKG5vdCBzZXJ2aWNlIHR5cGUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBvaW50bWVudFR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvZGVkIHJlYXNvbiB0aGF0IHRoaXMgYXBwb2ludG1lbnQgaXMgYmVpbmcgc2NoZWR1bGVkLiBUaGlzIGlzIG1vcmUgY2xpbmljYWwgdGhhbiBhZG1pbmlzdHJhdGl2ZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uQ29kZTogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBSZWFzb24gdGhlIGFwcG9pbnRtZW50IGhhcyBiZWVuIHNjaGVkdWxlZCB0byB0YWtlIHBsYWNlLCBhcyBzcGVjaWZpZWQgdXNpbmcgaW5mb3JtYXRpb24gZnJvbSBhbm90aGVyIHJlc291cmNlLiBXaGVuIHRoZSBwYXRpZW50IGFycml2ZXMgYW5kIHRoZSBlbmNvdW50ZXIgYmVnaW5zIGl0IG1heSBiZSB1c2VkIGFzIHRoZSBhZG1pc3Npb24gZGlhZ25vc2lzLiBUaGUgaW5kaWNhdGlvbiB3aWxsIHR5cGljYWxseSBiZSBhIENvbmRpdGlvbiAod2l0aCBvdGhlciByZXNvdXJjZXMgcmVmZXJlbmNlZCBpbiB0aGUgZXZpZGVuY2UuZGV0YWlsKSwgb3IgYSBQcm9jZWR1cmUuXHJcbiAgICovXHJcbiAgcHVibGljIHJlYXNvblJlZmVyZW5jZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBTZWVraW5nIGltcGxlbWVudGVyIGZlZWRiYWNrIG9uIHRoaXMgcHJvcGVydHkgYW5kIGhvdyBpbnRlcm9wZXJhYmxlIGl0IGlzLlxyXG4gICAqIFVzaW5nIGFuIGV4dGVuc2lvbiB0byByZWNvcmQgYSBDb2RlYWJsZUNvbmNlcHQgZm9yIG5hbWVkIHZhbHVlcyBtYXkgYmUgdGVzdGVkIGF0IGEgZnV0dXJlIGNvbm5lY3RhdGhvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcHJpb3JpdHk/OiBmaGlyLkZoaXJVbnNpZ25lZEludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGJyaWVmIGRlc2NyaXB0aW9uIG9mIHRoZSBhcHBvaW50bWVudCBhcyB3b3VsZCBiZSBzaG93biBvbiBhIHN1YmplY3QgbGluZSBpbiBhIG1lZXRpbmcgcmVxdWVzdCwgb3IgYXBwb2ludG1lbnQgbGlzdC4gRGV0YWlsZWQgb3IgZXhwYW5kZWQgaW5mb3JtYXRpb24gc2hvdWxkIGJlIHB1dCBpbiB0aGUgY29tbWVudCBmaWVsZC5cclxuICAgKi9cclxuICBwdWJsaWMgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gdG8gc3VwcG9ydCB0aGUgYXBwb2ludG1lbnQgcHJvdmlkZWQgd2hlbiBtYWtpbmcgdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdXBwb3J0aW5nSW5mb3JtYXRpb246IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogRGF0ZS9UaW1lIHRoYXQgdGhlIGFwcG9pbnRtZW50IGlzIHRvIHRha2UgcGxhY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXJ0PzogZmhpci5GaGlySW5zdGFudHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGF0ZS9UaW1lIHRoYXQgdGhlIGFwcG9pbnRtZW50IGlzIHRvIGNvbmNsdWRlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmQ/OiBmaGlyLkZoaXJJbnN0YW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOdW1iZXIgb2YgbWludXRlcyB0aGF0IHRoZSBhcHBvaW50bWVudCBpcyB0byB0YWtlLiBUaGlzIGNhbiBiZSBsZXNzIHRoYW4gdGhlIGR1cmF0aW9uIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdGltZXMuICBGb3IgZXhhbXBsZSwgd2hlcmUgdGhlIGFjdHVhbCB0aW1lIG9mIGFwcG9pbnRtZW50IGlzIG9ubHkgYW4gZXN0aW1hdGUgb3IgaWYgYSAzMCBtaW51dGUgYXBwb2ludG1lbnQgaXMgYmVpbmcgcmVxdWVzdGVkLCBidXQgYW55IHRpbWUgd291bGQgd29yay4gIEFsc28sIGlmIHRoZXJlIGlzLCBmb3IgZXhhbXBsZSwgYSBwbGFubmVkIDE1IG1pbnV0ZSBicmVhayBpbiB0aGUgbWlkZGxlIG9mIGEgbG9uZyBhcHBvaW50bWVudCwgdGhlIGR1cmF0aW9uIG1heSBiZSAxNSBtaW51dGVzIGxlc3MgdGhhbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtaW51dGVzRHVyYXRpb24/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNsb3RzIGZyb20gdGhlIHBhcnRpY2lwYW50cycgc2NoZWR1bGVzIHRoYXQgd2lsbCBiZSBmaWxsZWQgYnkgdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzbG90OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgZm9yIG1hbnkgdXNlIGNhc2VzIHdoZXJlIHRoZSBhZ2Ugb2YgYW4gYXBwb2ludG1lbnQgaXMgY29uc2lkZXJlZCBpbiBwcm9jZXNzaW5nIHdvcmtmbG93cyBmb3Igc2NoZWR1bGluZyBhbmQgYmlsbGluZyBvZiBhcHBvaW50bWVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZWQ/OiBmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWRkaXRpb25hbCB0ZXh0IHRvIGFpZCBpbiBmYWNpbGl0YXRpbmcgdGhlIGFwcG9pbnRtZW50LiBGb3IgaW5zdGFuY2UsIGEgY29tbWVudCBtaWdodCBiZSwgXCJwYXRpZW50IHNob3VsZCBwcm9jZWVkIGltbWVkaWF0ZWx5IHRvIGluZnVzaW9uIHJvb20gdXBvbiBhcnJpdmFsXCJcclxuICAgKiBXaGVyZSB0aGlzIGlzIGEgcGxhbm5lZCBhcHBvaW50bWVudCBhbmQgdGhlIHN0YXJ0L2VuZCBkYXRlcyBhcmUgbm90IHNldCB0aGVuIHRoaXMgZmllbGQgY2FuIGJlIHVzZWQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGd1aWRhbmNlIG9uIHRoZSBkZXRhaWxzIG9mIHRoZSBhcHBvaW50bWVudCByZXF1ZXN0LCBpbmNsdWRpbmcgYW55IHJlc3RyaWN0aW9ucyBvbiB3aGVuIHRvIGJvb2sgaXQuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoaWxlIEFwcG9pbnRtZW50LmNvbW1lbnQgY29udGFpbnMgaW5mb3JtYXRpb24gZm9yIGludGVybmFsIHVzZSwgQXBwb2ludG1lbnQucGF0aWVudEluc3RydWN0aW9ucyBpcyB1c2VkIHRvIGNhcHR1cmUgcGF0aWVudCBmYWNpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIEFwcG9pbnRtZW50IChlLmcuIHBsZWFzZSBicmluZyB5b3VyIHJlZmVycmFsIG9yIGZhc3QgZnJvbSA4cG0gbmlnaHQgYmVmb3JlKS5cclxuICAgKi9cclxuICBwdWJsaWMgcGF0aWVudEluc3RydWN0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc2VydmljZSByZXF1ZXN0IHRoaXMgYXBwb2ludG1lbnQgaXMgYWxsb2NhdGVkIHRvIGFzc2VzcyAoZS5nLiBpbmNvbWluZyByZWZlcnJhbCBvciBwcm9jZWR1cmUgcmVxdWVzdCkuXHJcbiAgICovXHJcbiAgcHVibGljIGJhc2VkT246IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogTGlzdCBvZiBwYXJ0aWNpcGFudHMgaW52b2x2ZWQgaW4gdGhlIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJ0aWNpcGFudDogZmhpci5BcHBvaW50bWVudFBhcnRpY2lwYW50W107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBkb2VzIG5vdCBpbnRyb2R1Y2UgYSBjYXBhY2l0eSBmb3IgcmVjdXJyaW5nIGFwcG9pbnRtZW50cy5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWVzdGVkUGVyaW9kOiBmaGlyLlBlcmlvZFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEFwcG9pbnRtZW50IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8QXBwb2ludG1lbnRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnQXBwb2ludG1lbnQnO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IHNvdXJjZS5pZGVudGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuSWRlbnRpZmllcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxBcHBvaW50bWVudHN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxBcHBvaW50bWVudHN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY2FuY2VsYXRpb25SZWFzb24nXSkgeyB0aGlzLmNhbmNlbGF0aW9uUmVhc29uID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5jYW5jZWxhdGlvblJlYXNvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3NlcnZpY2VDYXRlZ29yeSddKSB7IHRoaXMuc2VydmljZUNhdGVnb3J5ID0gc291cmNlLnNlcnZpY2VDYXRlZ29yeS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNlcnZpY2VDYXRlZ29yeSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzZXJ2aWNlVHlwZSddKSB7IHRoaXMuc2VydmljZVR5cGUgPSBzb3VyY2Uuc2VydmljZVR5cGUubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zZXJ2aWNlVHlwZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzcGVjaWFsdHknXSkgeyB0aGlzLnNwZWNpYWx0eSA9IHNvdXJjZS5zcGVjaWFsdHkubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zcGVjaWFsdHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYXBwb2ludG1lbnRUeXBlJ10pIHsgdGhpcy5hcHBvaW50bWVudFR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmFwcG9pbnRtZW50VHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlYXNvbkNvZGUnXSkgeyB0aGlzLnJlYXNvbkNvZGUgPSBzb3VyY2UucmVhc29uQ29kZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlYXNvbkNvZGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVhc29uUmVmZXJlbmNlJ10pIHsgdGhpcy5yZWFzb25SZWZlcmVuY2UgPSBzb3VyY2UucmVhc29uUmVmZXJlbmNlLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVhc29uUmVmZXJlbmNlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3ByaW9yaXR5J10pIHsgdGhpcy5wcmlvcml0eSA9IG5ldyBmaGlyLkZoaXJVbnNpZ25lZEludCh7dmFsdWU6IHNvdXJjZS5wcmlvcml0eX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcHJpb3JpdHknXSkge1xyXG4gICAgICBpZiAodGhpcy5wcmlvcml0eSkgeyB0aGlzLnByaW9yaXR5LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3ByaW9yaXR5ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucHJpb3JpdHkgPSBuZXcgZmhpci5GaGlyVW5zaWduZWRJbnQoc291cmNlLl9wcmlvcml0eSBhcyBQYXJ0aWFsPGZoaXIuRmhpclVuc2lnbmVkSW50QXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkZXNjcmlwdGlvbiddKSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZXNjcmlwdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uKSB7IHRoaXMuZGVzY3JpcHRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVzY3JpcHRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9kZXNjcmlwdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3VwcG9ydGluZ0luZm9ybWF0aW9uJ10pIHsgdGhpcy5zdXBwb3J0aW5nSW5mb3JtYXRpb24gPSBzb3VyY2Uuc3VwcG9ydGluZ0luZm9ybWF0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3VwcG9ydGluZ0luZm9ybWF0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXJ0J10pIHsgdGhpcy5zdGFydCA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHt2YWx1ZTogc291cmNlLnN0YXJ0fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zdGFydCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXJ0KSB7IHRoaXMuc3RhcnQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc3RhcnQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGFydCA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHNvdXJjZS5fc3RhcnQgYXMgUGFydGlhbDxmaGlyLkZoaXJJbnN0YW50QXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydlbmQnXSkgeyB0aGlzLmVuZCA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHt2YWx1ZTogc291cmNlLmVuZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZW5kJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZW5kKSB7IHRoaXMuZW5kLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2VuZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmVuZCA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHNvdXJjZS5fZW5kIGFzIFBhcnRpYWw8Zmhpci5GaGlySW5zdGFudEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWludXRlc0R1cmF0aW9uJ10pIHsgdGhpcy5taW51dGVzRHVyYXRpb24gPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiBzb3VyY2UubWludXRlc0R1cmF0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19taW51dGVzRHVyYXRpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5taW51dGVzRHVyYXRpb24pIHsgdGhpcy5taW51dGVzRHVyYXRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbWludXRlc0R1cmF0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubWludXRlc0R1cmF0aW9uID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHNvdXJjZS5fbWludXRlc0R1cmF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3Nsb3QnXSkgeyB0aGlzLnNsb3QgPSBzb3VyY2Uuc2xvdC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNsb3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY3JlYXRlZCddKSB7IHRoaXMuY3JlYXRlZCA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5jcmVhdGVkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19jcmVhdGVkJ10pIHtcclxuICAgICAgaWYgKHRoaXMuY3JlYXRlZCkgeyB0aGlzLmNyZWF0ZWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fY3JlYXRlZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmNyZWF0ZWQgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoc291cmNlLl9jcmVhdGVkIGFzIFBhcnRpYWw8Zmhpci5GaGlyRGF0ZVRpbWVBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbW1lbnQnXSkgeyB0aGlzLmNvbW1lbnQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmNvbW1lbnR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2NvbW1lbnQnXSkge1xyXG4gICAgICBpZiAodGhpcy5jb21tZW50KSB7IHRoaXMuY29tbWVudC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9jb21tZW50ISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuY29tbWVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9jb21tZW50IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwYXRpZW50SW5zdHJ1Y3Rpb24nXSkgeyB0aGlzLnBhdGllbnRJbnN0cnVjdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGF0aWVudEluc3RydWN0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wYXRpZW50SW5zdHJ1Y3Rpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5wYXRpZW50SW5zdHJ1Y3Rpb24pIHsgdGhpcy5wYXRpZW50SW5zdHJ1Y3Rpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcGF0aWVudEluc3RydWN0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucGF0aWVudEluc3RydWN0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3BhdGllbnRJbnN0cnVjdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYmFzZWRPbiddKSB7IHRoaXMuYmFzZWRPbiA9IHNvdXJjZS5iYXNlZE9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYmFzZWRPbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwYXJ0aWNpcGFudCddKSB7IHRoaXMucGFydGljaXBhbnQgPSBzb3VyY2UucGFydGljaXBhbnQubWFwKCh4KSA9PiBuZXcgZmhpci5BcHBvaW50bWVudFBhcnRpY2lwYW50KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGFydGljaXBhbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVxdWVzdGVkUGVyaW9kJ10pIHsgdGhpcy5yZXF1ZXN0ZWRQZXJpb2QgPSBzb3VyY2UucmVxdWVzdGVkUGVyaW9kLm1hcCgoeCkgPT4gbmV3IGZoaXIuUGVyaW9kKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVxdWVzdGVkUGVyaW9kID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdBcHBvaW50bWVudCcgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2lkZW50aWZpZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlNWKCdzdGF0dXMnLGV4cCwnQXBwb2ludG1lbnRzdGF0dXMnLEFwcG9pbnRtZW50c3RhdHVzVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2NhbmNlbGF0aW9uUmVhc29uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdzZXJ2aWNlQ2F0ZWdvcnknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3NlcnZpY2VUeXBlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdzcGVjaWFsdHknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2FwcG9pbnRtZW50VHlwZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncmVhc29uQ29kZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncmVhc29uUmVmZXJlbmNlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwcmlvcml0eScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnZGVzY3JpcHRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3N1cHBvcnRpbmdJbmZvcm1hdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnc3RhcnQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2VuZCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnbWludXRlc0R1cmF0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdzbG90JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdjcmVhdGVkJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdjb21tZW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwYXRpZW50SW5zdHJ1Y3Rpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2Jhc2VkT24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UkEoJ3BhcnRpY2lwYW50JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdyZXF1ZXN0ZWRQZXJpb2QnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuIl19