{"version":3,"file":"Population.js","sources":["../../src/fhir/Population.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ComplexType: Population\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the Population type.\r\n */\r\nexport interface PopulationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The age of the specific population.\r\n   */\r\n  age?: fhir.Range|fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The age of the specific population.\r\n   */\r\n  ageRange?: fhir.RangeArgs|undefined;\r\n  /**\r\n   * The age of the specific population.\r\n   */\r\n  ageCodeableConcept?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The gender of the specific population.\r\n   */\r\n  gender?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Race of the specific population.\r\n   */\r\n  race?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The existing physiological conditions of the specific population to which this applies.\r\n   */\r\n  physiologicalCondition?: fhir.CodeableConceptArgs|undefined;\r\n}\r\n\r\n/**\r\n * A populatioof people with some set of grouping criteria.\r\n */\r\nexport class Population extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Population';\r\n  /**\r\n   * The age of the specific population.\r\n   */\r\n  public age?: (fhir.Range|fhir.CodeableConcept)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element Population.age[x]\r\n   */\r\n  protected static readonly _fts_ageIsChoice:true = true;\r\n  /**\r\n   * The gender of the specific population.\r\n   */\r\n  public gender?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Race of the specific population.\r\n   */\r\n  public race?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The existing physiological conditions of the specific population to which this applies.\r\n   */\r\n  public physiologicalCondition?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Default constructor for Population - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<PopulationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['age']) { this.age = source.age; }\r\n    else if (source['ageRange']) { this.age = new fhir.Range(source.ageRange); }\r\n    else if (source['ageCodeableConcept']) { this.age = new fhir.CodeableConcept(source.ageCodeableConcept); }\r\n    if (source['gender']) { this.gender = new fhir.CodeableConcept(source.gender); }\r\n    if (source['race']) { this.race = new fhir.CodeableConcept(source.race); }\r\n    if (source['physiologicalCondition']) { this.physiologicalCondition = new fhir.CodeableConcept(source.physiologicalCondition); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"gender\"]) { outcome.issue!.push(...this.gender.doModelValidation().issue!); }\r\n    if (this[\"race\"]) { outcome.issue!.push(...this.race.doModelValidation().issue!); }\r\n    if (this[\"physiologicalCondition\"]) { outcome.issue!.push(...this.physiologicalCondition.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Range","fhir.CodeableConcept","fhir.BackboneElement"],"mappings":";;;;;;;AAAA;AAyCA;;AAEG;AACH,IAAA,UAAA,kBAAA,UAAA,MAAA,EAAA;IAAgC,SAAoB,CAAA,UAAA,EAAA,MAAA,CAAA,CAAA;AAyBlD;;AAEG;IACH,SAAY,UAAA,CAAA,MAAmC,EAAE,OAAwC,EAAA;AAA7E,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAmC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAzF,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAOvB,IAAA,CAAA;AANC,QAAA,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAAE,SAAA;AACxC,aAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,GAAG,GAAG,IAAIA,KAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAAE,SAAA;AACvE,aAAA,IAAI,MAAM,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,GAAG,GAAG,IAAIC,eAAoB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAAE,SAAA;AAC1G,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAAE,SAAA;AAChF,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AAC1E,QAAA,IAAI,MAAM,CAAC,wBAAwB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,sBAAsB,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAAE,SAAA;;KACjI;AACD;;AAEG;AACa,IAAA,UAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,wBAAwB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvH,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA7CD;;AAEG;IACoB,UAAa,CAAA,aAAA,GAAU,YAAY,CAAC;AAK3D;;AAEG;IACuB,UAAgB,CAAA,gBAAA,GAAQ,IAAI,CAAC;IAmCzD,OAAC,UAAA,CAAA;AAAA,CA/CD,CAAgCC,eAAoB,CA+CnD;;;;"}