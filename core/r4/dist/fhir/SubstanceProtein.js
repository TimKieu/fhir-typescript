/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirString } from './FhirString.js';
import { Attachment } from './Attachment.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
var SubstanceProteinSubunit = /** @class */ (function (_super) {
    __extends(SubstanceProteinSubunit, _super);
    /**
     * Default constructor for SubstanceProteinSubunit - initializes any required elements to null if a value is not provided.
     */
    function SubstanceProteinSubunit(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['subunit']) {
            _this.subunit = new FhirInteger({ value: source.subunit });
        }
        if (source['sequence']) {
            _this.sequence = new FhirString({ value: source.sequence });
        }
        if (source['length']) {
            _this.length = new FhirInteger({ value: source.length });
        }
        if (source['sequenceAttachment']) {
            _this.sequenceAttachment = new Attachment(source.sequenceAttachment);
        }
        if (source['nTerminalModificationId']) {
            _this.nTerminalModificationId = new Identifier(source.nTerminalModificationId);
        }
        if (source['nTerminalModification']) {
            _this.nTerminalModification = new FhirString({ value: source.nTerminalModification });
        }
        if (source['cTerminalModificationId']) {
            _this.cTerminalModificationId = new Identifier(source.cTerminalModificationId);
        }
        if (source['cTerminalModification']) {
            _this.cTerminalModification = new FhirString({ value: source.cTerminalModification });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceProteinSubunit.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["subunit"]) {
            (_a = outcome.issue).push.apply(_a, this.subunit.doModelValidation().issue);
        }
        if (this["sequence"]) {
            (_b = outcome.issue).push.apply(_b, this.sequence.doModelValidation().issue);
        }
        if (this["length"]) {
            (_c = outcome.issue).push.apply(_c, this.length.doModelValidation().issue);
        }
        if (this["sequenceAttachment"]) {
            (_d = outcome.issue).push.apply(_d, this.sequenceAttachment.doModelValidation().issue);
        }
        if (this["nTerminalModificationId"]) {
            (_e = outcome.issue).push.apply(_e, this.nTerminalModificationId.doModelValidation().issue);
        }
        if (this["nTerminalModification"]) {
            (_f = outcome.issue).push.apply(_f, this.nTerminalModification.doModelValidation().issue);
        }
        if (this["cTerminalModificationId"]) {
            (_g = outcome.issue).push.apply(_g, this.cTerminalModificationId.doModelValidation().issue);
        }
        if (this["cTerminalModification"]) {
            (_h = outcome.issue).push.apply(_h, this.cTerminalModification.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceProteinSubunit._fts_dataType = 'SubstanceProteinSubunit';
    return SubstanceProteinSubunit;
}(BackboneElement));
/**
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
 */
var SubstanceProtein = /** @class */ (function (_super) {
    __extends(SubstanceProtein, _super);
    /**
     * Default constructor for SubstanceProtein - initializes any required elements to null if a value is not provided.
     */
    function SubstanceProtein(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SubstanceProtein';
        if (source['sequenceType']) {
            _this.sequenceType = new CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            _this.numberOfSubunits = new FhirInteger({ value: source.numberOfSubunits });
        }
        if (source['disulfideLinkage']) {
            _this.disulfideLinkage = source.disulfideLinkage.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.disulfideLinkage = [];
        }
        if (source['subunit']) {
            _this.subunit = source.subunit.map(function (x) { return new SubstanceProteinSubunit(x); });
        }
        else {
            _this.subunit = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceProtein.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SubstanceProtein" fhir: SubstanceProtein.resourceType:"SubstanceProtein"', }));
        }
        if (this["sequenceType"]) {
            (_a = outcome.issue).push.apply(_a, this.sequenceType.doModelValidation().issue);
        }
        if (this["numberOfSubunits"]) {
            (_b = outcome.issue).push.apply(_b, this.numberOfSubunits.doModelValidation().issue);
        }
        if (this["disulfideLinkage"]) {
            this.disulfideLinkage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subunit"]) {
            this.subunit.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceProtein._fts_dataType = 'SubstanceProtein';
    return SubstanceProtein;
}(DomainResource));

export { SubstanceProtein, SubstanceProteinSubunit };
//# sourceMappingURL=SubstanceProtein.js.map
