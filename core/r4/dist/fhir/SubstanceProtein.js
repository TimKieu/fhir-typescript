// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceProtein
import * as fhir from '../fhir.js';
/**
 * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export class SubstanceProteinSubunit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceProteinSubunit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['subunit']) {
            this.subunit = new fhir.FhirInteger({ value: source.subunit });
        }
        if (source['sequence']) {
            this.sequence = new fhir.FhirString({ value: source.sequence });
        }
        if (source['length']) {
            this.length = new fhir.FhirInteger({ value: source.length });
        }
        if (source['sequenceAttachment']) {
            this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment);
        }
        if (source['nTerminalModificationId']) {
            this.nTerminalModificationId = new fhir.Identifier(source.nTerminalModificationId);
        }
        if (source['nTerminalModification']) {
            this.nTerminalModification = new fhir.FhirString({ value: source.nTerminalModification });
        }
        if (source['cTerminalModificationId']) {
            this.cTerminalModificationId = new fhir.Identifier(source.cTerminalModificationId);
        }
        if (source['cTerminalModification']) {
            this.cTerminalModification = new fhir.FhirString({ value: source.cTerminalModification });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["subunit"]) {
            issues.push(...this.subunit.doModelValidation());
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (this["length"]) {
            issues.push(...this.length.doModelValidation());
        }
        if (this["sequenceAttachment"]) {
            issues.push(...this.sequenceAttachment.doModelValidation());
        }
        if (this["nTerminalModificationId"]) {
            issues.push(...this.nTerminalModificationId.doModelValidation());
        }
        if (this["nTerminalModification"]) {
            issues.push(...this.nTerminalModification.doModelValidation());
        }
        if (this["cTerminalModificationId"]) {
            issues.push(...this.cTerminalModificationId.doModelValidation());
        }
        if (this["cTerminalModification"]) {
            issues.push(...this.cTerminalModification.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceProteinSubunit._fts_dataType = 'SubstanceProteinSubunit';
/**
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
 */
export class SubstanceProtein extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceProtein - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceProtein';
        if (source['sequenceType']) {
            this.sequenceType = new fhir.CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            this.numberOfSubunits = new fhir.FhirInteger({ value: source.numberOfSubunits });
        }
        if (source['disulfideLinkage']) {
            this.disulfideLinkage = source.disulfideLinkage.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.disulfideLinkage = [];
        }
        if (source['subunit']) {
            this.subunit = source.subunit.map((x) => new fhir.SubstanceProteinSubunit(x));
        }
        else {
            this.subunit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"SubstanceProtein" fhir: SubstanceProtein.resourceType:"SubstanceProtein"' });
        }
        if (this["sequenceType"]) {
            issues.push(...this.sequenceType.doModelValidation());
        }
        if (this["numberOfSubunits"]) {
            issues.push(...this.numberOfSubunits.doModelValidation());
        }
        if (this["disulfideLinkage"]) {
            this.disulfideLinkage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subunit"]) {
            this.subunit.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceProtein._fts_dataType = 'SubstanceProtein';
//# sourceMappingURL=data:application/json;base64,