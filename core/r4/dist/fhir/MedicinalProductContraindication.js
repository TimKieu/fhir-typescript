/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Population } from './Population.js';

// <auto-generated/>
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
var MedicinalProductContraindicationOtherTherapy = /** @class */ (function (_super) {
    __extends(MedicinalProductContraindicationOtherTherapy, _super);
    /**
     * Default constructor for MedicinalProductContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductContraindicationOtherTherapy(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['therapyRelationshipType']) {
            _this.therapyRelationshipType = new CodeableConcept(source.therapyRelationshipType);
        }
        else {
            _this.therapyRelationshipType = null;
        }
        if (source['medication']) {
            _this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            _this.medication = new CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            _this.medication = new Reference(source.medicationReference);
        }
        else {
            _this.medication = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductContraindicationOtherTherapy.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['therapyRelationshipType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property therapyRelationshipType:fhir.CodeableConcept fhir: MedicinalProductContraindication.otherTherapy.therapyRelationshipType:CodeableConcept', }));
        }
        if (this["therapyRelationshipType"]) {
            (_a = outcome.issue).push.apply(_a, this.therapyRelationshipType.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property medication: fhir: MedicinalProductContraindication.otherTherapy.medication[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductContraindicationOtherTherapy._fts_dataType = 'MedicinalProductContraindicationOtherTherapy';
    /**
     * Internal flag to properly serialize choice-type element MedicinalProductContraindication.otherTherapy.medication[x]
     */
    MedicinalProductContraindicationOtherTherapy._fts_medicationIsChoice = true;
    return MedicinalProductContraindicationOtherTherapy;
}(BackboneElement));
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
var MedicinalProductContraindication = /** @class */ (function (_super) {
    __extends(MedicinalProductContraindication, _super);
    /**
     * Default constructor for MedicinalProductContraindication - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductContraindication(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicinalProductContraindication';
        if (source['subject']) {
            _this.subject = source.subject.map(function (x) { return new Reference(x); });
        }
        else {
            _this.subject = [];
        }
        if (source['disease']) {
            _this.disease = new CodeableConcept(source.disease);
        }
        if (source['diseaseStatus']) {
            _this.diseaseStatus = new CodeableConcept(source.diseaseStatus);
        }
        if (source['comorbidity']) {
            _this.comorbidity = source.comorbidity.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.comorbidity = [];
        }
        if (source['therapeuticIndication']) {
            _this.therapeuticIndication = source.therapeuticIndication.map(function (x) { return new Reference(x); });
        }
        else {
            _this.therapeuticIndication = [];
        }
        if (source['otherTherapy']) {
            _this.otherTherapy = source.otherTherapy.map(function (x) { return new MedicinalProductContraindicationOtherTherapy(x); });
        }
        else {
            _this.otherTherapy = [];
        }
        if (source['population']) {
            _this.population = source.population.map(function (x) { return new Population(x); });
        }
        else {
            _this.population = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductContraindication.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicinalProductContraindication" fhir: MedicinalProductContraindication.resourceType:"MedicinalProductContraindication"', }));
        }
        if (this["subject"]) {
            this.subject.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["disease"]) {
            (_a = outcome.issue).push.apply(_a, this.disease.doModelValidation().issue);
        }
        if (this["diseaseStatus"]) {
            (_b = outcome.issue).push.apply(_b, this.diseaseStatus.doModelValidation().issue);
        }
        if (this["comorbidity"]) {
            this.comorbidity.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["therapeuticIndication"]) {
            this.therapeuticIndication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["otherTherapy"]) {
            this.otherTherapy.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["population"]) {
            this.population.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductContraindication._fts_dataType = 'MedicinalProductContraindication';
    return MedicinalProductContraindication;
}(DomainResource));

export { MedicinalProductContraindication, MedicinalProductContraindicationOtherTherapy };
//# sourceMappingURL=MedicinalProductContraindication.js.map
