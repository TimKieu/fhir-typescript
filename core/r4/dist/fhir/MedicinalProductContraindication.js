// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductContraindication
import * as fhir from '../fhir.js';
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductContraindicationOtherTherapy extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductContraindicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['therapyRelationshipType']) {
            this.therapyRelationshipType = new fhir.CodeableConcept(source.therapyRelationshipType);
        }
        else {
            this.therapyRelationshipType = null;
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductContraindication.otherTherapy';
        }
        this.vRS('therapyRelationshipType', exp);
        this.vRS('medication', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductContraindicationOtherTherapy._fts_dataType = 'MedicinalProductContraindicationOtherTherapy';
/**
 * Internal flag to properly serialize choice-type element MedicinalProductContraindication.otherTherapy.medication[x]
 */
MedicinalProductContraindicationOtherTherapy._fts_medicationIsChoice = true;
/**
 * The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.
 */
export class MedicinalProductContraindication extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductContraindication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductContraindication';
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['disease']) {
            this.disease = new fhir.CodeableConcept(source.disease);
        }
        if (source['diseaseStatus']) {
            this.diseaseStatus = new fhir.CodeableConcept(source.diseaseStatus);
        }
        if (source['comorbidity']) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.comorbidity = [];
        }
        if (source['therapeuticIndication']) {
            this.therapeuticIndication = source.therapeuticIndication.map((x) => new fhir.Reference(x));
        }
        else {
            this.therapeuticIndication = [];
        }
        if (source['otherTherapy']) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.MedicinalProductContraindicationOtherTherapy(x));
        }
        else {
            this.otherTherapy = [];
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.Population(x));
        }
        else {
            this.population = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductContraindication';
        }
        this.vRS('resourceType', exp);
        this.vOA('subject', exp);
        this.vOS('disease', exp);
        this.vOS('diseaseStatus', exp);
        this.vOA('comorbidity', exp);
        this.vOA('therapeuticIndication', exp);
        this.vOA('otherTherapy', exp);
        this.vOA('population', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductContraindication._fts_dataType = 'MedicinalProductContraindication';
//# sourceMappingURL=data:application/json;base64,