{"version":3,"file":"SubstanceNucleicAcid.js","sources":["../../src/fhir/SubstanceNucleicAcid.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: SubstanceNucleicAcid\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SubstanceNucleicAcidSubunitLinkage type.\r\n */\r\nexport interface SubstanceNucleicAcidSubunitLinkageArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.\r\n   */\r\n  connectivity?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Each linkage will be registered as a fragment and have an ID.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.\r\n   */\r\n  name?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Residues shall be captured as described in 5.3.6.8.3.\r\n   */\r\n  residueSite?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * The linkages between sugar residues will also be captured.\r\n */\r\nexport class SubstanceNucleicAcidSubunitLinkage extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceNucleicAcidSubunitLinkage';\r\n  /**\r\n   * The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.\r\n   */\r\n  public connectivity?: fhir.FhirString|undefined;\r\n  /**\r\n   * Each linkage will be registered as a fragment and have an ID.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.\r\n   */\r\n  public name?: fhir.FhirString|undefined;\r\n  /**\r\n   * Residues shall be captured as described in 5.3.6.8.3.\r\n   */\r\n  public residueSite?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for SubstanceNucleicAcidSubunitLinkage - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceNucleicAcidSubunitLinkageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['connectivity']) { this.connectivity = new fhir.FhirString({value: source.connectivity}); }\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    if (source['residueSite']) { this.residueSite = new fhir.FhirString({value: source.residueSite}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"connectivity\"]) { outcome.issue!.push(...this.connectivity.doModelValidation().issue!); }\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (this[\"residueSite\"]) { outcome.issue!.push(...this.residueSite.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceNucleicAcidSubunitSugar type.\r\n */\r\nexport interface SubstanceNucleicAcidSubunitSugarArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The Substance ID of the sugar or sugar-like component that make up the nucleotide.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * The name of the sugar or sugar-like component that make up the nucleotide.\r\n   */\r\n  name?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.\r\n   */\r\n  residueSite?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * 5.3.6.8.1 Sugar ID (Mandatory).\r\n */\r\nexport class SubstanceNucleicAcidSubunitSugar extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceNucleicAcidSubunitSugar';\r\n  /**\r\n   * The Substance ID of the sugar or sugar-like component that make up the nucleotide.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * The name of the sugar or sugar-like component that make up the nucleotide.\r\n   */\r\n  public name?: fhir.FhirString|undefined;\r\n  /**\r\n   * The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.\r\n   */\r\n  public residueSite?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for SubstanceNucleicAcidSubunitSugar - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceNucleicAcidSubunitSugarArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    if (source['residueSite']) { this.residueSite = new fhir.FhirString({value: source.residueSite}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (this[\"residueSite\"]) { outcome.issue!.push(...this.residueSite.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceNucleicAcidSubunit type.\r\n */\r\nexport interface SubstanceNucleicAcidSubunitArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.\r\n   */\r\n  subunit?: fhir.FhirInteger|number|undefined;\r\n  /**\r\n   * Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.\r\n   */\r\n  sequence?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The length of the sequence shall be captured.\r\n   */\r\n  length?: fhir.FhirInteger|number|undefined;\r\n  /**\r\n   * (TBC).\r\n   */\r\n  sequenceAttachment?: fhir.AttachmentArgs|undefined;\r\n  /**\r\n   * The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.\r\n   */\r\n  fivePrime?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.\r\n   */\r\n  threePrime?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The linkages between sugar residues will also be captured.\r\n   */\r\n  linkage?: fhir.SubstanceNucleicAcidSubunitLinkageArgs[]|undefined;\r\n  /**\r\n   * 5.3.6.8.1 Sugar ID (Mandatory).\r\n   */\r\n  sugar?: fhir.SubstanceNucleicAcidSubunitSugarArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.\r\n */\r\nexport class SubstanceNucleicAcidSubunit extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceNucleicAcidSubunit';\r\n  /**\r\n   * Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.\r\n   */\r\n  public subunit?: fhir.FhirInteger|undefined;\r\n  /**\r\n   * Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.\r\n   */\r\n  public sequence?: fhir.FhirString|undefined;\r\n  /**\r\n   * The length of the sequence shall be captured.\r\n   */\r\n  public length?: fhir.FhirInteger|undefined;\r\n  /**\r\n   * (TBC).\r\n   */\r\n  public sequenceAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.\r\n   */\r\n  public fivePrime?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.\r\n   */\r\n  public threePrime?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The linkages between sugar residues will also be captured.\r\n   */\r\n  public linkage?: fhir.SubstanceNucleicAcidSubunitLinkage[];\r\n  /**\r\n   * 5.3.6.8.1 Sugar ID (Mandatory).\r\n   */\r\n  public sugar?: fhir.SubstanceNucleicAcidSubunitSugar[];\r\n  /**\r\n   * Default constructor for SubstanceNucleicAcidSubunit - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceNucleicAcidSubunitArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['subunit']) { this.subunit = new fhir.FhirInteger({value: source.subunit}); }\r\n    if (source['sequence']) { this.sequence = new fhir.FhirString({value: source.sequence}); }\r\n    if (source['length']) { this.length = new fhir.FhirInteger({value: source.length}); }\r\n    if (source['sequenceAttachment']) { this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment); }\r\n    if (source['fivePrime']) { this.fivePrime = new fhir.CodeableConcept(source.fivePrime); }\r\n    if (source['threePrime']) { this.threePrime = new fhir.CodeableConcept(source.threePrime); }\r\n    if (source['linkage']) { this.linkage = source.linkage.map((x) => new fhir.SubstanceNucleicAcidSubunitLinkage(x)); }\r\n    else { this.linkage = []; }\r\n    if (source['sugar']) { this.sugar = source.sugar.map((x) => new fhir.SubstanceNucleicAcidSubunitSugar(x)); }\r\n    else { this.sugar = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"subunit\"]) { outcome.issue!.push(...this.subunit.doModelValidation().issue!); }\r\n    if (this[\"sequence\"]) { outcome.issue!.push(...this.sequence.doModelValidation().issue!); }\r\n    if (this[\"length\"]) { outcome.issue!.push(...this.length.doModelValidation().issue!); }\r\n    if (this[\"sequenceAttachment\"]) { outcome.issue!.push(...this.sequenceAttachment.doModelValidation().issue!); }\r\n    if (this[\"fivePrime\"]) { outcome.issue!.push(...this.fivePrime.doModelValidation().issue!); }\r\n    if (this[\"threePrime\"]) { outcome.issue!.push(...this.threePrime.doModelValidation().issue!); }\r\n    if (this[\"linkage\"]) { this.linkage.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"sugar\"]) { this.sugar.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceNucleicAcid type.\r\n */\r\nexport interface SubstanceNucleicAcidArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"SubstanceNucleicAcid\"|undefined;\r\n  /**\r\n   * The type of the sequence shall be specified based on a controlled vocabulary.\r\n   */\r\n  sequenceType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.\r\n   */\r\n  numberOfSubunits?: fhir.FhirInteger|number|undefined;\r\n  /**\r\n   * The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.\r\n   */\r\n  areaOfHybridisation?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * (TBC).\r\n   */\r\n  oligoNucleotideType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.\r\n   */\r\n  subunit?: fhir.SubstanceNucleicAcidSubunitArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.\r\n */\r\nexport class SubstanceNucleicAcid extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceNucleicAcid';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"SubstanceNucleicAcid\";\r\n  /**\r\n   * The type of the sequence shall be specified based on a controlled vocabulary.\r\n   */\r\n  public sequenceType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.\r\n   */\r\n  public numberOfSubunits?: fhir.FhirInteger|undefined;\r\n  /**\r\n   * The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.\r\n   */\r\n  public areaOfHybridisation?: fhir.FhirString|undefined;\r\n  /**\r\n   * (TBC).\r\n   */\r\n  public oligoNucleotideType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.\r\n   */\r\n  public subunit?: fhir.SubstanceNucleicAcidSubunit[];\r\n  /**\r\n   * Default constructor for SubstanceNucleicAcid - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceNucleicAcidArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'SubstanceNucleicAcid';\r\n    if (source['sequenceType']) { this.sequenceType = new fhir.CodeableConcept(source.sequenceType); }\r\n    if (source['numberOfSubunits']) { this.numberOfSubunits = new fhir.FhirInteger({value: source.numberOfSubunits}); }\r\n    if (source['areaOfHybridisation']) { this.areaOfHybridisation = new fhir.FhirString({value: source.areaOfHybridisation}); }\r\n    if (source['oligoNucleotideType']) { this.oligoNucleotideType = new fhir.CodeableConcept(source.oligoNucleotideType); }\r\n    if (source['subunit']) { this.subunit = source.subunit.map((x) => new fhir.SubstanceNucleicAcidSubunit(x)); }\r\n    else { this.subunit = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"SubstanceNucleicAcid\" fhir: SubstanceNucleicAcid.resourceType:\"SubstanceNucleicAcid\"', }));\r\n    }\r\n    if (this[\"sequenceType\"]) { outcome.issue!.push(...this.sequenceType.doModelValidation().issue!); }\r\n    if (this[\"numberOfSubunits\"]) { outcome.issue!.push(...this.numberOfSubunits.doModelValidation().issue!); }\r\n    if (this[\"areaOfHybridisation\"]) { outcome.issue!.push(...this.areaOfHybridisation.doModelValidation().issue!); }\r\n    if (this[\"oligoNucleotideType\"]) { outcome.issue!.push(...this.oligoNucleotideType.doModelValidation().issue!); }\r\n    if (this[\"subunit\"]) { this.subunit.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirString","fhir.Identifier","fhir.BackboneElement","fhir.FhirInteger","fhir.Attachment","fhir.CodeableConcept","fhir.SubstanceNucleicAcidSubunitLinkage","fhir.SubstanceNucleicAcidSubunitSugar","fhir.SubstanceNucleicAcidSubunit","fhir.OperationOutcomeIssue","fhir.DomainResource"],"mappings":";;;;;;;;;;;;;;AAAA;AAiCA;;AAEG;AACH,IAAA,kCAAA,kBAAA,UAAA,MAAA,EAAA;IAAwD,SAAoB,CAAA,kCAAA,EAAA,MAAA,CAAA,CAAA;AAqB1E;;AAEG;IACH,SAAY,kCAAA,CAAA,MAA2D,EAAE,OAAwC,EAAA;AAArG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA2D,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAjH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAKvB,IAAA,CAAA;AAJC,QAAA,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,YAAY,GAAG,IAAIA,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,YAAY,EAAC,CAAC,CAAC;AAAE,SAAA;AACtG,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,IAAIC,UAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAAE,SAAA;AACvF,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAID,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAC,CAAC,CAAC;AAAE,SAAA;AAC9E,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAIA,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,CAAC,CAAC;AAAE,SAAA;;KACpG;AACD;;AAEG;AACa,IAAA,kCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnG,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/F,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAxCD;;AAEG;IACoB,kCAAa,CAAA,aAAA,GAAU,oCAAoC,CAAC;IAsCrF,OAAC,kCAAA,CAAA;AAAA,CA1CD,CAAwDE,eAAoB,CA0C3E,EAAA;AAmBD;;AAEG;AACH,IAAA,gCAAA,kBAAA,UAAA,MAAA,EAAA;IAAsD,SAAoB,CAAA,gCAAA,EAAA,MAAA,CAAA,CAAA;AAiBxE;;AAEG;IACH,SAAY,gCAAA,CAAA,MAAyD,EAAE,OAAwC,EAAA;AAAnG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAyD,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA/G,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAIvB,IAAA,CAAA;AAHC,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,IAAID,UAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAAE,SAAA;AACvF,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAID,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAC,CAAC,CAAC;AAAE,SAAA;AAC9E,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAIA,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,CAAC,CAAC;AAAE,SAAA;;KACpG;AACD;;AAEG;AACa,IAAA,gCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/F,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAlCD;;AAEG;IACoB,gCAAa,CAAA,aAAA,GAAU,kCAAkC,CAAC;IAgCnF,OAAC,gCAAA,CAAA;AAAA,CApCD,CAAsDE,eAAoB,CAoCzE,EAAA;AAuCD;;AAEG;AACH,IAAA,2BAAA,kBAAA,UAAA,MAAA,EAAA;IAAiD,SAAoB,CAAA,2BAAA,EAAA,MAAA,CAAA,CAAA;AAqCnE;;AAEG;IACH,SAAY,2BAAA,CAAA,MAAoD,EAAE,OAAwC,EAAA;AAA9F,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAoD,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA1G,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAWvB,IAAA,CAAA;AAVC,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,IAAIC,WAAgB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,OAAO,EAAC,CAAC,CAAC;AAAE,SAAA;AACxF,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIH,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAC,CAAC,CAAC;AAAE,SAAA;AAC1F,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIG,WAAgB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAC,CAAC,CAAC;AAAE,SAAA;AACrF,QAAA,IAAI,MAAM,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,kBAAkB,GAAG,IAAIC,UAAe,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAAE,SAAA;AAC/G,QAAA,IAAI,MAAM,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,SAAS,GAAG,IAAIC,eAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAAE,SAAA;AACzF,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAAE,SAAA;AAC5F,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;YAAE,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,kCAAuC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC/G,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAAE,SAAA;AAC3B,QAAA,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;YAAE,KAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,gCAAqC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACvG,aAAA;AAAE,YAAA,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC1B;AACD;;AAEG;AACa,IAAA,2BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACzF,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3F,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,IAAI,IAAI,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC7F,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/F,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC3G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAlED;;AAEG;IACoB,2BAAa,CAAA,aAAA,GAAU,6BAA6B,CAAC;IAgE9E,OAAC,2BAAA,CAAA;AAAA,CApED,CAAiDL,eAAoB,CAoEpE,EAAA;AA+BD;;AAEG;AACH,IAAA,oBAAA,kBAAA,UAAA,MAAA,EAAA;IAA0C,SAAmB,CAAA,oBAAA,EAAA,MAAA,CAAA,CAAA;AA6B3D;;AAEG;IACH,SAAY,oBAAA,CAAA,MAA6C,EAAE,OAAwC,EAAA;AAAvF,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA6C,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAnG,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAQvB,IAAA,CAAA;AAPC,QAAA,KAAI,CAAC,YAAY,GAAG,sBAAsB,CAAC;AAC3C,QAAA,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,YAAY,GAAG,IAAIG,eAAoB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AAAE,SAAA;AAClG,QAAA,IAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,gBAAgB,GAAG,IAAIF,WAAgB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,gBAAgB,EAAC,CAAC,CAAC;AAAE,SAAA;AACnH,QAAA,IAAI,MAAM,CAAC,qBAAqB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,mBAAmB,GAAG,IAAIH,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,mBAAmB,EAAC,CAAC,CAAC;AAAE,SAAA;AAC3H,QAAA,IAAI,MAAM,CAAC,qBAAqB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,mBAAmB,GAAG,IAAIK,eAAoB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAAE,SAAA;AACvH,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;YAAE,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIG,2BAAgC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACxG,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC5B;AACD;;AAEG;AACa,IAAA,oBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;AACzB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIC,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,8HAA8H,GAAG,CAAC,CAAC,CAAC;AACzR,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnG,QAAA,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3G,QAAA,IAAI,IAAI,CAAC,qBAAqB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjH,QAAA,IAAI,IAAI,CAAC,qBAAqB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjH,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAvDD;;AAEG;IACoB,oBAAa,CAAA,aAAA,GAAU,sBAAsB,CAAC;IAqDvE,OAAC,oBAAA,CAAA;AAAA,CAzDD,CAA0CC,cAAmB,CAyD5D;;;;"}