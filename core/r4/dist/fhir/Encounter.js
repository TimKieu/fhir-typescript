// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Encounter
import * as fhir from '../fhir.js';
// @ts-ignore
import { EncounterStatusCodes } from '../fhirValueSets/EncounterStatusCodes.js';
// @ts-ignore
import { V3ActEncounterCodeCodings, } from '../fhirValueSets/V3ActEncounterCodeCodings.js';
// @ts-ignore
import { EncounterParticipantTypeCodings, } from '../fhirValueSets/EncounterParticipantTypeCodings.js';
// @ts-ignore
import { DiagnosisRoleCodings, } from '../fhirValueSets/DiagnosisRoleCodings.js';
// @ts-ignore
import { EncounterAdmitSourceCodings, } from '../fhirValueSets/EncounterAdmitSourceCodings.js';
// @ts-ignore
import { EncounterSpecialCourtesyCodings, } from '../fhirValueSets/EncounterSpecialCourtesyCodings.js';
// @ts-ignore
import { EncounterSpecialArrangementsCodings, } from '../fhirValueSets/EncounterSpecialArrangementsCodings.js';
// @ts-ignore
import { EncounterLocationStatusCodes } from '../fhirValueSets/EncounterLocationStatusCodes.js';
// @ts-ignore
import { EncounterReasonCodings, } from '../fhirValueSets/EncounterReasonCodings.js';
/**
 * The current status is always found in the current version of the resource, not the status history.
 */
export class EncounterStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Required-bound Value Set for status (Encounter.statusHistory.status)
     */
    static get statusRequiredCodes() {
        return EncounterStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<EncounterStatusCodeType> fhir: Encounter.statusHistory.status:code' });
        }
        if (this['status'] && (!Object.values(EncounterStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<EncounterStatusCodeType> fhir: Encounter.statusHistory.status:code Required binding to: EncounterStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['period']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property period:fhir.Period fhir: Encounter.statusHistory.period:Period' });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterStatusHistory._fts_dataType = 'EncounterStatusHistory';
/**
 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
 */
export class EncounterClassHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterClassHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        else {
            this.class = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Extensible-bound Value Set for class (Encounter.classHistory.class)
     */
    static get classExtensibleCodings() {
        return V3ActEncounterCodeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['class']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property class:fhir.Coding fhir: Encounter.classHistory.class:Coding' });
        }
        if (this["class"]) {
            issues.push(...this.class.doModelValidation());
        }
        if (!this['period']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property period:fhir.Period fhir: Encounter.classHistory.period:Period' });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterClassHistory._fts_dataType = 'EncounterClassHistory';
/**
 * The list of people responsible for providing the service.
 */
export class EncounterParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
    }
    /**
     * Extensible-bound Value Set for type (Encounter.participant.type)
     */
    static get typeExtensibleCodings() {
        return EncounterParticipantTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["individual"]) {
            issues.push(...this.individual.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterParticipant._fts_dataType = 'EncounterParticipant';
/**
 * The list of diagnosis relevant to this encounter.
 */
export class EncounterDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        else {
            this.condition = null;
        }
        if (source['use']) {
            this.use = new fhir.CodeableConcept(source.use);
        }
        if (source['rank']) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank });
        }
    }
    /**
     * Preferred-bound Value Set for use (Encounter.diagnosis.use)
     */
    static get usePreferredCodings() {
        return DiagnosisRoleCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['condition']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property condition:fhir.Reference fhir: Encounter.diagnosis.condition:Reference' });
        }
        if (this["condition"]) {
            issues.push(...this.condition.doModelValidation());
        }
        if (this["use"]) {
            issues.push(...this.use.doModelValidation());
        }
        if (this["rank"]) {
            issues.push(...this.rank.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterDiagnosis._fts_dataType = 'EncounterDiagnosis';
/**
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
export class EncounterHospitalization extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterHospitalization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['preAdmissionIdentifier']) {
            this.preAdmissionIdentifier = new fhir.Identifier(source.preAdmissionIdentifier);
        }
        if (source['origin']) {
            this.origin = new fhir.Reference(source.origin);
        }
        if (source['admitSource']) {
            this.admitSource = new fhir.CodeableConcept(source.admitSource);
        }
        if (source['reAdmission']) {
            this.reAdmission = new fhir.CodeableConcept(source.reAdmission);
        }
        if (source['dietPreference']) {
            this.dietPreference = source.dietPreference.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.dietPreference = [];
        }
        if (source['specialCourtesy']) {
            this.specialCourtesy = source.specialCourtesy.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialCourtesy = [];
        }
        if (source['specialArrangement']) {
            this.specialArrangement = source.specialArrangement.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialArrangement = [];
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['dischargeDisposition']) {
            this.dischargeDisposition = new fhir.CodeableConcept(source.dischargeDisposition);
        }
    }
    /**
     * Preferred-bound Value Set for admitSource (Encounter.hospitalization.admitSource)
     */
    static get admitSourcePreferredCodings() {
        return EncounterAdmitSourceCodings;
    }
    /**
     * Preferred-bound Value Set for specialCourtesy (Encounter.hospitalization.specialCourtesy)
     */
    static get specialCourtesyPreferredCodings() {
        return EncounterSpecialCourtesyCodings;
    }
    /**
     * Preferred-bound Value Set for specialArrangement (Encounter.hospitalization.specialArrangement)
     */
    static get specialArrangementPreferredCodings() {
        return EncounterSpecialArrangementsCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["preAdmissionIdentifier"]) {
            issues.push(...this.preAdmissionIdentifier.doModelValidation());
        }
        if (this["origin"]) {
            issues.push(...this.origin.doModelValidation());
        }
        if (this["admitSource"]) {
            issues.push(...this.admitSource.doModelValidation());
        }
        if (this["reAdmission"]) {
            issues.push(...this.reAdmission.doModelValidation());
        }
        if (this["dietPreference"]) {
            this.dietPreference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["specialCourtesy"]) {
            this.specialCourtesy.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["specialArrangement"]) {
            this.specialArrangement.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["destination"]) {
            issues.push(...this.destination.doModelValidation());
        }
        if (this["dischargeDisposition"]) {
            issues.push(...this.dischargeDisposition.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterHospitalization._fts_dataType = 'EncounterHospitalization';
/**
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export class EncounterLocation extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        else {
            this.location = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for status (Encounter.location.status)
     */
    static get statusRequiredCodes() {
        return EncounterLocationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['location']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property location:fhir.Reference fhir: Encounter.location.location:Reference' });
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this['status'] && (!Object.values(EncounterLocationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<EncounterLocationStatusCodeType> fhir: Encounter.location.status:code Required binding to: EncounterLocationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["physicalType"]) {
            issues.push(...this.physicalType.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterLocation._fts_dataType = 'EncounterLocation';
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export class Encounter extends fhir.DomainResource {
    /**
     * Default constructor for Encounter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Encounter';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EncounterStatusHistory(x));
        }
        else {
            this.statusHistory = [];
        }
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        else {
            this.class = null;
        }
        if (source['classHistory']) {
            this.classHistory = source.classHistory.map((x) => new fhir.EncounterClassHistory(x));
        }
        else {
            this.classHistory = [];
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['serviceType']) {
            this.serviceType = new fhir.CodeableConcept(source.serviceType);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['episodeOfCare']) {
            this.episodeOfCare = source.episodeOfCare.map((x) => new fhir.Reference(x));
        }
        else {
            this.episodeOfCare = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.EncounterParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['appointment']) {
            this.appointment = source.appointment.map((x) => new fhir.Reference(x));
        }
        else {
            this.appointment = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['length']) {
            this.length = new fhir.Duration(source.length);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.EncounterDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        else {
            this.account = [];
        }
        if (source['hospitalization']) {
            this.hospitalization = new fhir.EncounterHospitalization(source.hospitalization);
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.EncounterLocation(x));
        }
        else {
            this.location = [];
        }
        if (source['serviceProvider']) {
            this.serviceProvider = new fhir.Reference(source.serviceProvider);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
    }
    /**
     * Required-bound Value Set for status (Encounter.status)
     */
    static get statusRequiredCodes() {
        return EncounterStatusCodes;
    }
    /**
     * Extensible-bound Value Set for class (Encounter.class)
     */
    static get classExtensibleCodings() {
        return V3ActEncounterCodeCodings;
    }
    /**
     * Preferred-bound Value Set for reasonCode (Encounter.reasonCode)
     */
    static get reasonCodePreferredCodings() {
        return EncounterReasonCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Encounter" fhir: Encounter.resourceType:"Encounter"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<EncounterStatusCodeType> fhir: Encounter.status:code' });
        }
        if (this['status'] && (!Object.values(EncounterStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<EncounterStatusCodeType> fhir: Encounter.status:code Required binding to: EncounterStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusHistory"]) {
            this.statusHistory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['class']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property class:fhir.Coding fhir: Encounter.class:Coding' });
        }
        if (this["class"]) {
            issues.push(...this.class.doModelValidation());
        }
        if (this["classHistory"]) {
            this.classHistory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["serviceType"]) {
            issues.push(...this.serviceType.doModelValidation());
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation());
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["episodeOfCare"]) {
            this.episodeOfCare.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["appointment"]) {
            this.appointment.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["length"]) {
            issues.push(...this.length.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["account"]) {
            this.account.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["hospitalization"]) {
            issues.push(...this.hospitalization.doModelValidation());
        }
        if (this["location"]) {
            this.location.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["serviceProvider"]) {
            issues.push(...this.serviceProvider.doModelValidation());
        }
        if (this["partOf"]) {
            issues.push(...this.partOf.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Encounter._fts_dataType = 'Encounter';
//# sourceMappingURL=data:application/json;base64,