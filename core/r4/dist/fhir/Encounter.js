// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Encounter
import * as fhir from '../fhir.js';
// @ts-ignore
import { EncounterStatusVsValidation } from '../fhirValueSets/EncounterStatusVsValidation.js';
// @ts-ignore
import { EncounterLocationStatusVsValidation } from '../fhirValueSets/EncounterLocationStatusVsValidation.js';
/**
 * The current status is always found in the current version of the resource, not the status history.
 */
export class EncounterStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Encounter.statusHistory';
        }
        this.vReqSV('status', expression, 'EncounterStatus', EncounterStatusVsValidation, 'r');
        this.vReqS('period', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterStatusHistory._fts_dataType = 'EncounterStatusHistory';
/**
 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
 */
export class EncounterClassHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterClassHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        else {
            this.class = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Encounter.classHistory';
        }
        this.vReqS('class', expression);
        this.vReqS('period', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterClassHistory._fts_dataType = 'EncounterClassHistory';
/**
 * The list of people responsible for providing the service.
 */
export class EncounterParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Encounter.participant';
        }
        this.vOptA('type', expression);
        this.vOptS('period', expression);
        this.vOptS('individual', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterParticipant._fts_dataType = 'EncounterParticipant';
/**
 * The list of diagnosis relevant to this encounter.
 */
export class EncounterDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        else {
            this.condition = null;
        }
        if (source['use']) {
            this.use = new fhir.CodeableConcept(source.use);
        }
        if (source['rank']) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank });
        }
        if (source['_rank']) {
            if (this.rank) {
                this.rank.addExtendedProperties(source._rank);
            }
            else {
                this.rank = new fhir.FhirPositiveInt(source._rank);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Encounter.diagnosis';
        }
        this.vReqS('condition', expression);
        this.vOptS('use', expression);
        this.vOptS('rank', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterDiagnosis._fts_dataType = 'EncounterDiagnosis';
/**
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
export class EncounterHospitalization extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterHospitalization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['preAdmissionIdentifier']) {
            this.preAdmissionIdentifier = new fhir.Identifier(source.preAdmissionIdentifier);
        }
        if (source['origin']) {
            this.origin = new fhir.Reference(source.origin);
        }
        if (source['admitSource']) {
            this.admitSource = new fhir.CodeableConcept(source.admitSource);
        }
        if (source['reAdmission']) {
            this.reAdmission = new fhir.CodeableConcept(source.reAdmission);
        }
        if (source['dietPreference']) {
            this.dietPreference = source.dietPreference.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.dietPreference = [];
        }
        if (source['specialCourtesy']) {
            this.specialCourtesy = source.specialCourtesy.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialCourtesy = [];
        }
        if (source['specialArrangement']) {
            this.specialArrangement = source.specialArrangement.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialArrangement = [];
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['dischargeDisposition']) {
            this.dischargeDisposition = new fhir.CodeableConcept(source.dischargeDisposition);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Encounter.hospitalization';
        }
        this.vOptS('preAdmissionIdentifier', expression);
        this.vOptS('origin', expression);
        this.vOptS('admitSource', expression);
        this.vOptS('reAdmission', expression);
        this.vOptA('dietPreference', expression);
        this.vOptA('specialCourtesy', expression);
        this.vOptA('specialArrangement', expression);
        this.vOptS('destination', expression);
        this.vOptS('dischargeDisposition', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterHospitalization._fts_dataType = 'EncounterHospitalization';
/**
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export class EncounterLocation extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        else {
            this.location = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Encounter.location';
        }
        this.vReqS('location', expression);
        this.vOptSV('status', expression, 'EncounterLocationStatus', EncounterLocationStatusVsValidation, 'r');
        this.vOptS('physicalType', expression);
        this.vOptS('period', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterLocation._fts_dataType = 'EncounterLocation';
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export class Encounter extends fhir.DomainResource {
    /**
     * Default constructor for Encounter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Encounter';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EncounterStatusHistory(x));
        }
        else {
            this.statusHistory = [];
        }
        if (source['class']) {
            this.class = new fhir.Coding(source.class);
        }
        else {
            this.class = null;
        }
        if (source['classHistory']) {
            this.classHistory = source.classHistory.map((x) => new fhir.EncounterClassHistory(x));
        }
        else {
            this.classHistory = [];
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['serviceType']) {
            this.serviceType = new fhir.CodeableConcept(source.serviceType);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['episodeOfCare']) {
            this.episodeOfCare = source.episodeOfCare.map((x) => new fhir.Reference(x));
        }
        else {
            this.episodeOfCare = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.EncounterParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['appointment']) {
            this.appointment = source.appointment.map((x) => new fhir.Reference(x));
        }
        else {
            this.appointment = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['length']) {
            this.length = new fhir.Duration(source.length);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.EncounterDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        else {
            this.account = [];
        }
        if (source['hospitalization']) {
            this.hospitalization = new fhir.EncounterHospitalization(source.hospitalization);
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.EncounterLocation(x));
        }
        else {
            this.location = [];
        }
        if (source['serviceProvider']) {
            this.serviceProvider = new fhir.Reference(source.serviceProvider);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Encounter';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vReqSV('status', expression, 'EncounterStatus', EncounterStatusVsValidation, 'r');
        this.vOptA('statusHistory', expression);
        this.vReqS('class', expression);
        this.vOptA('classHistory', expression);
        this.vOptA('type', expression);
        this.vOptS('serviceType', expression);
        this.vOptS('priority', expression);
        this.vOptS('subject', expression);
        this.vOptA('episodeOfCare', expression);
        this.vOptA('basedOn', expression);
        this.vOptA('participant', expression);
        this.vOptA('appointment', expression);
        this.vOptS('period', expression);
        this.vOptS('length', expression);
        this.vOptA('reasonCode', expression);
        this.vOptA('reasonReference', expression);
        this.vOptA('diagnosis', expression);
        this.vOptA('account', expression);
        this.vOptS('hospitalization', expression);
        this.vOptA('location', expression);
        this.vOptS('serviceProvider', expression);
        this.vOptS('partOf', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Encounter._fts_dataType = 'Encounter';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5jb3VudGVyLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9FbmNvdW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMkJBQTJCO0FBRTNCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQXVDOUYsYUFBYTtBQUNiLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBdUM5Rzs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWE5RDs7T0FFRztJQUNILFlBQVksU0FBNkMsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDbkcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUEwQixFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3RHO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FBRTtRQUM1QixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNyQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsT0FBUSxDQUFDLENBQUM7YUFBRTtpQkFDbkU7Z0JBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQTBCLE1BQU0sQ0FBQyxPQUFpQyxDQUFDLENBQUM7YUFBRTtTQUM3RztRQUNELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxF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QUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDeEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQy9CLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBdExEOztHQUVHO0FBQzZCLHVCQUFhLEdBQVUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBFbmNvdW50ZXJcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlclN0YXR1c0NvZGVzLCAgRW5jb3VudGVyU3RhdHVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlclN0YXR1c0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFbmNvdW50ZXJTdGF0dXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlclN0YXR1c1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjNBY3RFbmNvdW50ZXJDb2RlcywgIFYzQWN0RW5jb3VudGVyQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1YzQWN0RW5jb3VudGVyQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFYzQWN0RW5jb3VudGVyVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9WM0FjdEVuY291bnRlclZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyUGFydGljaXBhbnRUeXBlQ29kZXMsICBFbmNvdW50ZXJQYXJ0aWNpcGFudFR5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyUGFydGljaXBhbnRUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlclBhcnRpY2lwYW50VHlwZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyUGFydGljaXBhbnRUeXBlVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEaWFnbm9zaXNSb2xlQ29kZXMsICBEaWFnbm9zaXNSb2xlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RpYWdub3Npc1JvbGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRGlhZ25vc2lzUm9sZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRGlhZ25vc2lzUm9sZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyQWRtaXRTb3VyY2VDb2RlcywgIEVuY291bnRlckFkbWl0U291cmNlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlckFkbWl0U291cmNlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlckFkbWl0U291cmNlVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJBZG1pdFNvdXJjZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjIwMDkyQ29kZXMsICBWMjAwOTJDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjIwMDkyQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFYyMDA5MlZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjIwMDkyVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFbmNvdW50ZXJEaWV0Q29kZXMsICBFbmNvdW50ZXJEaWV0Q29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlckRpZXRDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyRGlldFZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyRGlldFZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyU3BlY2lhbENvdXJ0ZXN5Q29kZXMsICBFbmNvdW50ZXJTcGVjaWFsQ291cnRlc3lDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyU3BlY2lhbENvdXJ0ZXN5Q29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlclNwZWNpYWxDb3VydGVzeVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyU3BlY2lhbENvdXJ0ZXN5VnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFbmNvdW50ZXJTcGVjaWFsQXJyYW5nZW1lbnRzQ29kZXMsICBFbmNvdW50ZXJTcGVjaWFsQXJyYW5nZW1lbnRzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlclNwZWNpYWxBcnJhbmdlbWVudHNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyU3BlY2lhbEFycmFuZ2VtZW50c1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRW5jb3VudGVyU3BlY2lhbEFycmFuZ2VtZW50c1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyRGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlcywgIEVuY291bnRlckRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlckRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlckRpc2NoYXJnZURpc3Bvc2l0aW9uVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJEaXNjaGFyZ2VEaXNwb3NpdGlvblZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyTG9jYXRpb25TdGF0dXNDb2RlcywgIEVuY291bnRlckxvY2F0aW9uU3RhdHVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlckxvY2F0aW9uU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlckxvY2F0aW9uU3RhdHVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJMb2NhdGlvblN0YXR1c1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTG9jYXRpb25QaHlzaWNhbFR5cGVDb2RlcywgIExvY2F0aW9uUGh5c2ljYWxUeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0xvY2F0aW9uUGh5c2ljYWxUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IExvY2F0aW9uUGh5c2ljYWxUeXBlVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Mb2NhdGlvblBoeXNpY2FsVHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyVHlwZUNvZGVzLCAgRW5jb3VudGVyVHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEVuY291bnRlclR5cGVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0VuY291bnRlclR5cGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNlcnZpY2VUeXBlQ29kZXMsICBTZXJ2aWNlVHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9TZXJ2aWNlVHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTZXJ2aWNlVHlwZVZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU2VydmljZVR5cGVWc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFYzQWN0UHJpb3JpdHlDb2RlcywgIFYzQWN0UHJpb3JpdHlDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjNBY3RQcmlvcml0eUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWM0FjdFByaW9yaXR5VnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9WM0FjdFByaW9yaXR5VnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBFbmNvdW50ZXJSZWFzb25Db2RlcywgIEVuY291bnRlclJlYXNvbkNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJSZWFzb25Db2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRW5jb3VudGVyUmVhc29uVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9FbmNvdW50ZXJSZWFzb25Wc1ZhbGlkYXRpb24uanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRW5jb3VudGVyU3RhdHVzSGlzdG9yeSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFbmNvdW50ZXJTdGF0dXNIaXN0b3J5QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogcGxhbm5lZCB8IGFycml2ZWQgfCB0cmlhZ2VkIHwgaW4tcHJvZ3Jlc3MgfCBvbmxlYXZlIHwgZmluaXNoZWQgfCBjYW5jZWxsZWQgKy5cclxuICAgKi9cclxuICBzdGF0dXM6IGZoaXIuRmhpckNvZGU8RW5jb3VudGVyU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEVuY291bnRlci5zdGF0dXNIaXN0b3J5LnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHRoYXQgdGhlIGVwaXNvZGUgd2FzIGluIHRoZSBzcGVjaWZpZWQgc3RhdHVzLlxyXG4gICAqL1xyXG4gIHBlcmlvZDogZmhpci5QZXJpb2RBcmdzfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBzdGF0dXMgaXMgYWx3YXlzIGZvdW5kIGluIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIHJlc291cmNlLCBub3QgdGhlIHN0YXR1cyBoaXN0b3J5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVuY291bnRlclN0YXR1c0hpc3RvcnkgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdFbmNvdW50ZXJTdGF0dXNIaXN0b3J5JztcclxuICAvKipcclxuICAgKiBwbGFubmVkIHwgYXJyaXZlZCB8IHRyaWFnZWQgfCBpbi1wcm9ncmVzcyB8IG9ubGVhdmUgfCBmaW5pc2hlZCB8IGNhbmNlbGxlZCArLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM6IGZoaXIuRmhpckNvZGU8RW5jb3VudGVyU3RhdHVzQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgdGhhdCB0aGUgZXBpc29kZSB3YXMgaW4gdGhlIHNwZWNpZmllZCBzdGF0dXMuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZDogZmhpci5QZXJpb2R8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBFbmNvdW50ZXJTdGF0dXNIaXN0b3J5IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RW5jb3VudGVyU3RhdHVzSGlzdG9yeUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPEVuY291bnRlclN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxFbmNvdW50ZXJTdGF0dXNDb2RlVHlwZT4oc291cmNlLl9zdGF0dXMgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZCddKSB7IHRoaXMucGVyaW9kID0gbmV3IGZoaXIuUGVyaW9kKHNvdXJjZS5wZXJpb2QpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wZXJpb2QgPSBudWxsOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0VuY291bnRlci5zdGF0dXNIaXN0b3J5JyB9XHJcbiAgICB0aGlzLnZSZXFTVignc3RhdHVzJyxleHByZXNzaW9uLCdFbmNvdW50ZXJTdGF0dXMnLEVuY291bnRlclN0YXR1c1ZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZSZXFTKCdwZXJpb2QnLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRW5jb3VudGVyQ2xhc3NIaXN0b3J5IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEVuY291bnRlckNsYXNzSGlzdG9yeUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIGlucGF0aWVudCB8IG91dHBhdGllbnQgfCBhbWJ1bGF0b3J5IHwgZW1lcmdlbmN5ICsuXHJcbiAgICovXHJcbiAgY2xhc3M6IGZoaXIuQ29kaW5nQXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHRoYXQgdGhlIGVwaXNvZGUgd2FzIGluIHRoZSBzcGVjaWZpZWQgY2xhc3MuXHJcbiAgICovXHJcbiAgcGVyaW9kOiBmaGlyLlBlcmlvZEFyZ3N8bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBjbGFzcyBoaXN0b3J5IHBlcm1pdHMgdGhlIHRyYWNraW5nIG9mIHRoZSBlbmNvdW50ZXJzIHRyYW5zaXRpb25zIHdpdGhvdXQgbmVlZGluZyB0byBnbyAgdGhyb3VnaCB0aGUgcmVzb3VyY2UgaGlzdG9yeS4gIFRoaXMgd291bGQgYmUgdXNlZCBmb3IgYSBjYXNlIHdoZXJlIGFuIGFkbWlzc2lvbiBzdGFydHMgb2YgYXMgYW4gZW1lcmdlbmN5IGVuY291bnRlciwgdGhlbiB0cmFuc2l0aW9ucyBpbnRvIGFuIGlucGF0aWVudCBzY2VuYXJpby4gRG9pbmcgdGhpcyBhbmQgbm90IHJlc3RhcnRpbmcgYSBuZXcgZW5jb3VudGVyIGVuc3VyZXMgdGhhdCBhbnkgbGFiL2RpYWdub3N0aWMgcmVzdWx0cyBjYW4gbW9yZSBlYXNpbHkgZm9sbG93IHRoZSBwYXRpZW50IGFuZCBub3QgcmVxdWlyZSByZS1wcm9jZXNzaW5nIGFuZCBub3QgZ2V0IGxvc3Qgb3IgY2FuY2VsbGVkIGR1cmluZyBhIGtpbmQgb2YgZGlzY2hhcmdlIGZyb20gZW1lcmdlbmN5IHRvIGlucGF0aWVudC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbmNvdW50ZXJDbGFzc0hpc3RvcnkgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdFbmNvdW50ZXJDbGFzc0hpc3RvcnknO1xyXG4gIC8qKlxyXG4gICAqIGlucGF0aWVudCB8IG91dHBhdGllbnQgfCBhbWJ1bGF0b3J5IHwgZW1lcmdlbmN5ICsuXHJcbiAgICovXHJcbiAgcHVibGljIGNsYXNzOiBmaGlyLkNvZGluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHRoYXQgdGhlIGVwaXNvZGUgd2FzIGluIHRoZSBzcGVjaWZpZWQgY2xhc3MuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZDogZmhpci5QZXJpb2R8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBFbmNvdW50ZXJDbGFzc0hpc3RvcnkgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxFbmNvdW50ZXJDbGFzc0hpc3RvcnlBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnY2xhc3MnXSkgeyB0aGlzLmNsYXNzID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS5jbGFzcyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNsYXNzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGVyaW9kJ10pIHsgdGhpcy5wZXJpb2QgPSBuZXcgZmhpci5QZXJpb2Qoc291cmNlLnBlcmlvZCk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnBlcmlvZCA9IG51bGw7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRW5jb3VudGVyLmNsYXNzSGlzdG9yeScgfVxyXG4gICAgdGhpcy52UmVxUygnY2xhc3MnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZSZXFTKCdwZXJpb2QnLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRW5jb3VudGVyUGFydGljaXBhbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW5jb3VudGVyUGFydGljaXBhbnRBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgcGFydGljaXBhbnQgdHlwZSBpbmRpY2F0ZXMgaG93IGFuIGluZGl2aWR1YWwgcGFydGljaXBhdGVzIGluIGFuIGVuY291bnRlci4gSXQgaW5jbHVkZXMgbm9uLXByYWN0aXRpb25lciBwYXJ0aWNpcGFudHMsIGFuZCBmb3IgcHJhY3RpdGlvbmVycyB0aGlzIGlzIHRvIGRlc2NyaWJlIHRoZSBhY3Rpb24gdHlwZSBpbiB0aGUgY29udGV4dCBvZiB0aGlzIGVuY291bnRlciAoZS5nLiBBZG1pdHRpbmcgRHIsIEF0dGVuZGluZyBEciwgVHJhbnNsYXRvciwgQ29uc3VsdGluZyBEcikuIFRoaXMgaXMgZGlmZmVyZW50IHRvIHRoZSBwcmFjdGl0aW9uZXIgcm9sZXMgd2hpY2ggYXJlIGZ1bmN0aW9uYWwgcm9sZXMsIGRlcml2ZWQgZnJvbSB0ZXJtcyBvZiBlbXBsb3ltZW50LCBlZHVjYXRpb24sIGxpY2Vuc2luZywgZXRjLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcmlvZCBvZiB0aW1lIHRoYXQgdGhlIHNwZWNpZmllZCBwYXJ0aWNpcGFudCBwYXJ0aWNpcGF0ZWQgaW4gdGhlIGVuY291bnRlci4gVGhlc2UgY2FuIG92ZXJsYXAgb3IgYmUgc3ViLXNldHMgb2YgdGhlIG92ZXJhbGwgZW5jb3VudGVyJ3MgcGVyaW9kLlxyXG4gICAqL1xyXG4gIHBlcmlvZD86IGZoaXIuUGVyaW9kQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUGVyc29ucyBpbnZvbHZlZCBpbiB0aGUgZW5jb3VudGVyIG90aGVyIHRoYW4gdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgaW5kaXZpZHVhbD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbGlzdCBvZiBwZW9wbGUgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyB0aGUgc2VydmljZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbmNvdW50ZXJQYXJ0aWNpcGFudCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0VuY291bnRlclBhcnRpY2lwYW50JztcclxuICAvKipcclxuICAgKiBUaGUgcGFydGljaXBhbnQgdHlwZSBpbmRpY2F0ZXMgaG93IGFuIGluZGl2aWR1YWwgcGFydGljaXBhdGVzIGluIGFuIGVuY291bnRlci4gSXQgaW5jbHVkZXMgbm9uLXByYWN0aXRpb25lciBwYXJ0aWNpcGFudHMsIGFuZCBmb3IgcHJhY3RpdGlvbmVycyB0aGlzIGlzIHRvIGRlc2NyaWJlIHRoZSBhY3Rpb24gdHlwZSBpbiB0aGUgY29udGV4dCBvZiB0aGlzIGVuY291bnRlciAoZS5nLiBBZG1pdHRpbmcgRHIsIEF0dGVuZGluZyBEciwgVHJhbnNsYXRvciwgQ29uc3VsdGluZyBEcikuIFRoaXMgaXMgZGlmZmVyZW50IHRvIHRoZSBwcmFjdGl0aW9uZXIgcm9sZXMgd2hpY2ggYXJlIGZ1bmN0aW9uYWwgcm9sZXMsIGRlcml2ZWQgZnJvbSB0ZXJtcyBvZiBlbXBsb3ltZW50LCBlZHVjYXRpb24sIGxpY2Vuc2luZywgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwZXJpb2Qgb2YgdGltZSB0aGF0IHRoZSBzcGVjaWZpZWQgcGFydGljaXBhbnQgcGFydGljaXBhdGVkIGluIHRoZSBlbmNvdW50ZXIuIFRoZXNlIGNhbiBvdmVybGFwIG9yIGJlIHN1Yi1zZXRzIG9mIHRoZSBvdmVyYWxsIGVuY291bnRlcidzIHBlcmlvZC5cclxuICAgKi9cclxuICBwdWJsaWMgcGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBlcnNvbnMgaW52b2x2ZWQgaW4gdGhlIGVuY291bnRlciBvdGhlciB0aGFuIHRoZSBwYXRpZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmRpdmlkdWFsPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEVuY291bnRlclBhcnRpY2lwYW50IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RW5jb3VudGVyUGFydGljaXBhbnRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IHNvdXJjZS50eXBlLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHlwZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwZXJpb2QnXSkgeyB0aGlzLnBlcmlvZCA9IG5ldyBmaGlyLlBlcmlvZChzb3VyY2UucGVyaW9kKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaW5kaXZpZHVhbCddKSB7IHRoaXMuaW5kaXZpZHVhbCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuaW5kaXZpZHVhbCk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRW5jb3VudGVyLnBhcnRpY2lwYW50JyB9XHJcbiAgICB0aGlzLnZPcHRBKCd0eXBlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygncGVyaW9kJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnaW5kaXZpZHVhbCcsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBFbmNvdW50ZXJEaWFnbm9zaXMgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW5jb3VudGVyRGlhZ25vc2lzQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogRm9yIHN5c3RlbXMgdGhhdCBuZWVkIHRvIGtub3cgd2hpY2ggd2FzIHRoZSBwcmltYXJ5IGRpYWdub3NpcywgdGhlc2Ugd2lsbCBiZSBtYXJrZWQgd2l0aCB0aGUgc3RhbmRhcmQgZXh0ZW5zaW9uIHByaW1hcnlEaWFnbm9zaXMgKHdoaWNoIGlzIGEgc2VxdWVuY2UgdmFsdWUgcmF0aGVyIHRoYW4gYSBmbGFnLCAxID0gcHJpbWFyeSBkaWFnbm9zaXMpLlxyXG4gICAqL1xyXG4gIGNvbmRpdGlvbjogZmhpci5SZWZlcmVuY2VBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogUm9sZSB0aGF0IHRoaXMgZGlhZ25vc2lzIGhhcyB3aXRoaW4gdGhlIGVuY291bnRlciAoZS5nLiBhZG1pc3Npb24sIGJpbGxpbmcsIGRpc2NoYXJnZSDigKYpLlxyXG4gICAqL1xyXG4gIHVzZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmFua2luZyBvZiB0aGUgZGlhZ25vc2lzIChmb3IgZWFjaCByb2xlIHR5cGUpLlxyXG4gICAqL1xyXG4gIHJhbms/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBFbmNvdW50ZXIuZGlhZ25vc2lzLnJhbmtcclxuICAgKi9cclxuICBfcmFuaz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbGlzdCBvZiBkaWFnbm9zaXMgcmVsZXZhbnQgdG8gdGhpcyBlbmNvdW50ZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRW5jb3VudGVyRGlhZ25vc2lzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnRW5jb3VudGVyRGlhZ25vc2lzJztcclxuICAvKipcclxuICAgKiBGb3Igc3lzdGVtcyB0aGF0IG5lZWQgdG8ga25vdyB3aGljaCB3YXMgdGhlIHByaW1hcnkgZGlhZ25vc2lzLCB0aGVzZSB3aWxsIGJlIG1hcmtlZCB3aXRoIHRoZSBzdGFuZGFyZCBleHRlbnNpb24gcHJpbWFyeURpYWdub3NpcyAod2hpY2ggaXMgYSBzZXF1ZW5jZSB2YWx1ZSByYXRoZXIgdGhhbiBhIGZsYWcsIDEgPSBwcmltYXJ5IGRpYWdub3NpcykuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbmRpdGlvbjogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBSb2xlIHRoYXQgdGhpcyBkaWFnbm9zaXMgaGFzIHdpdGhpbiB0aGUgZW5jb3VudGVyIChlLmcuIGFkbWlzc2lvbiwgYmlsbGluZywgZGlzY2hhcmdlIOKApikuXHJcbiAgICovXHJcbiAgcHVibGljIHVzZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSYW5raW5nIG9mIHRoZSBkaWFnbm9zaXMgKGZvciBlYWNoIHJvbGUgdHlwZSkuXHJcbiAgICovXHJcbiAgcHVibGljIHJhbms/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRW5jb3VudGVyRGlhZ25vc2lzIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RW5jb3VudGVyRGlhZ25vc2lzQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2NvbmRpdGlvbiddKSB7IHRoaXMuY29uZGl0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5jb25kaXRpb24pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb25kaXRpb24gPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWyd1c2UnXSkgeyB0aGlzLnVzZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudXNlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmFuayddKSB7IHRoaXMucmFuayA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh7dmFsdWU6IHNvdXJjZS5yYW5rfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yYW5rJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmFuaykgeyB0aGlzLnJhbmsuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmFuayEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJhbmsgPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoc291cmNlLl9yYW5rIGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnRW5jb3VudGVyLmRpYWdub3NpcycgfVxyXG4gICAgdGhpcy52UmVxUygnY29uZGl0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygndXNlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygncmFuaycsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBFbmNvdW50ZXJIb3NwaXRhbGl6YXRpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW5jb3VudGVySG9zcGl0YWxpemF0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogUHJlLWFkbWlzc2lvbiBpZGVudGlmaWVyLlxyXG4gICAqL1xyXG4gIHByZUFkbWlzc2lvbklkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbG9jYXRpb24vb3JnYW5pemF0aW9uIGZyb20gd2hpY2ggdGhlIHBhdGllbnQgY2FtZSBiZWZvcmUgYWRtaXNzaW9uLlxyXG4gICAqL1xyXG4gIG9yaWdpbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRnJvbSB3aGVyZSBwYXRpZW50IHdhcyBhZG1pdHRlZCAocGh5c2ljaWFuIHJlZmVycmFsLCB0cmFuc2ZlcikuXHJcbiAgICovXHJcbiAgYWRtaXRTb3VyY2U/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhpcyBob3NwaXRhbGl6YXRpb24gaXMgYSByZWFkbWlzc2lvbiBhbmQgd2h5IGlmIGtub3duLlxyXG4gICAqL1xyXG4gIHJlQWRtaXNzaW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZSwgYSBwYXRpZW50IG1heSByZXF1ZXN0IGJvdGggYSBkYWlyeS1mcmVlIGFuZCBudXQtZnJlZSBkaWV0IHByZWZlcmVuY2UgKG5vdCBtdXR1YWxseSBleGNsdXNpdmUpLlxyXG4gICAqL1xyXG4gIGRpZXRQcmVmZXJlbmNlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpYWwgY291cnRlc2llcyAoVklQLCBib2FyZCBtZW1iZXIpLlxyXG4gICAqL1xyXG4gIHNwZWNpYWxDb3VydGVzeT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbnkgc3BlY2lhbCByZXF1ZXN0cyB0aGF0IGhhdmUgYmVlbiBtYWRlIGZvciB0aGlzIGhvc3BpdGFsaXphdGlvbiBlbmNvdW50ZXIsIHN1Y2ggYXMgdGhlIHByb3Zpc2lvbiBvZiBzcGVjaWZpYyBlcXVpcG1lbnQgb3Igb3RoZXIgdGhpbmdzLlxyXG4gICAqL1xyXG4gIHNwZWNpYWxBcnJhbmdlbWVudD86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBMb2NhdGlvbi9vcmdhbml6YXRpb24gdG8gd2hpY2ggdGhlIHBhdGllbnQgaXMgZGlzY2hhcmdlZC5cclxuICAgKi9cclxuICBkZXN0aW5hdGlvbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2F0ZWdvcnkgb3Iga2luZCBvZiBsb2NhdGlvbiBhZnRlciBkaXNjaGFyZ2UuXHJcbiAgICovXHJcbiAgZGlzY2hhcmdlRGlzcG9zaXRpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gRW5jb3VudGVyIG1heSBjb3ZlciBtb3JlIHRoYW4ganVzdCB0aGUgaW5wYXRpZW50IHN0YXkuIENvbnRleHRzIHN1Y2ggYXMgb3V0cGF0aWVudHMsIGNvbW11bml0eSBjbGluaWNzLCBhbmQgYWdlZCBjYXJlIGZhY2lsaXRpZXMgYXJlIGFsc28gaW5jbHVkZWQuXHJcbiAqIFRoZSBkdXJhdGlvbiByZWNvcmRlZCBpbiB0aGUgcGVyaW9kIG9mIHRoaXMgZW5jb3VudGVyIGNvdmVycyB0aGUgZW50aXJlIHNjb3BlIG9mIHRoaXMgaG9zcGl0YWxpemF0aW9uIHJlY29yZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbmNvdW50ZXJIb3NwaXRhbGl6YXRpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdFbmNvdW50ZXJIb3NwaXRhbGl6YXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFByZS1hZG1pc3Npb24gaWRlbnRpZmllci5cclxuICAgKi9cclxuICBwdWJsaWMgcHJlQWRtaXNzaW9uSWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxvY2F0aW9uL29yZ2FuaXphdGlvbiBmcm9tIHdoaWNoIHRoZSBwYXRpZW50IGNhbWUgYmVmb3JlIGFkbWlzc2lvbi5cclxuICAgKi9cclxuICBwdWJsaWMgb3JpZ2luPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZyb20gd2hlcmUgcGF0aWVudCB3YXMgYWRtaXR0ZWQgKHBoeXNpY2lhbiByZWZlcnJhbCwgdHJhbnNmZXIpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZG1pdFNvdXJjZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoaXMgaG9zcGl0YWxpemF0aW9uIGlzIGEgcmVhZG1pc3Npb24gYW5kIHdoeSBpZiBrbm93bi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVBZG1pc3Npb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIGV4YW1wbGUsIGEgcGF0aWVudCBtYXkgcmVxdWVzdCBib3RoIGEgZGFpcnktZnJlZSBhbmQgbnV0LWZyZWUgZGlldCBwcmVmZXJlbmNlIChub3QgbXV0dWFsbHkgZXhjbHVzaXZlKS5cclxuICAgKi9cclxuICBwdWJsaWMgZGlldFByZWZlcmVuY2U6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogU3BlY2lhbCBjb3VydGVzaWVzIChWSVAsIGJvYXJkIG1lbWJlcikuXHJcbiAgICovXHJcbiAgcHVibGljIHNwZWNpYWxDb3VydGVzeTogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBBbnkgc3BlY2lhbCByZXF1ZXN0cyB0aGF0IGhhdmUgYmVlbiBtYWRlIGZvciB0aGlzIGhvc3BpdGFsaXphdGlvbiBlbmNvdW50ZXIsIHN1Y2ggYXMgdGhlIHByb3Zpc2lvbiBvZiBzcGVjaWZpYyBlcXVpcG1lbnQgb3Igb3RoZXIgdGhpbmdzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzcGVjaWFsQXJyYW5nZW1lbnQ6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogTG9jYXRpb24vb3JnYW5pemF0aW9uIHRvIHdoaWNoIHRoZSBwYXRpZW50IGlzIGRpc2NoYXJnZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc3RpbmF0aW9uPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENhdGVnb3J5IG9yIGtpbmQgb2YgbG9jYXRpb24gYWZ0ZXIgZGlzY2hhcmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNjaGFyZ2VEaXNwb3NpdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBFbmNvdW50ZXJIb3NwaXRhbGl6YXRpb24gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxFbmNvdW50ZXJIb3NwaXRhbGl6YXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncHJlQWRtaXNzaW9uSWRlbnRpZmllciddKSB7IHRoaXMucHJlQWRtaXNzaW9uSWRlbnRpZmllciA9IG5ldyBmaGlyLklkZW50aWZpZXIoc291cmNlLnByZUFkbWlzc2lvbklkZW50aWZpZXIpOyB9XHJcbiAgICBpZiAoc291cmNlWydvcmlnaW4nXSkgeyB0aGlzLm9yaWdpbiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uub3JpZ2luKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRtaXRTb3VyY2UnXSkgeyB0aGlzLmFkbWl0U291cmNlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5hZG1pdFNvdXJjZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlQWRtaXNzaW9uJ10pIHsgdGhpcy5yZUFkbWlzc2lvbiA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucmVBZG1pc3Npb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydkaWV0UHJlZmVyZW5jZSddKSB7IHRoaXMuZGlldFByZWZlcmVuY2UgPSBzb3VyY2UuZGlldFByZWZlcmVuY2UubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kaWV0UHJlZmVyZW5jZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzcGVjaWFsQ291cnRlc3knXSkgeyB0aGlzLnNwZWNpYWxDb3VydGVzeSA9IHNvdXJjZS5zcGVjaWFsQ291cnRlc3kubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zcGVjaWFsQ291cnRlc3kgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3BlY2lhbEFycmFuZ2VtZW50J10pIHsgdGhpcy5zcGVjaWFsQXJyYW5nZW1lbnQgPSBzb3VyY2Uuc3BlY2lhbEFycmFuZ2VtZW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3BlY2lhbEFycmFuZ2VtZW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc3RpbmF0aW9uJ10pIHsgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuZGVzdGluYXRpb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydkaXNjaGFyZ2VEaXNwb3NpdGlvbiddKSB7IHRoaXMuZGlzY2hhcmdlRGlzcG9zaXRpb24gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmRpc2NoYXJnZURpc3Bvc2l0aW9uKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdFbmNvdW50ZXIuaG9zcGl0YWxpemF0aW9uJyB9XHJcbiAgICB0aGlzLnZPcHRTKCdwcmVBZG1pc3Npb25JZGVudGlmaWVyJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0Uygnb3JpZ2luJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnYWRtaXRTb3VyY2UnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdyZUFkbWlzc2lvbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2RpZXRQcmVmZXJlbmNlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnc3BlY2lhbENvdXJ0ZXN5JyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnc3BlY2lhbEFycmFuZ2VtZW50JyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnZGVzdGluYXRpb24nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdkaXNjaGFyZ2VEaXNwb3NpdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBFbmNvdW50ZXJMb2NhdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFbmNvdW50ZXJMb2NhdGlvbkFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgZW5jb3VudGVyIHRha2VzIHBsYWNlLlxyXG4gICAqL1xyXG4gIGxvY2F0aW9uOiBmaGlyLlJlZmVyZW5jZUFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBXaGVuIHRoZSBwYXRpZW50IGlzIG5vIGxvbmdlciBhY3RpdmUgYXQgYSBsb2NhdGlvbiwgdGhlbiB0aGUgcGVyaW9kIGVuZCBkYXRlIGlzIGVudGVyZWQsIGFuZCB0aGUgc3RhdHVzIG1heSBiZSBjaGFuZ2VkIHRvIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBzdGF0dXM/OiBmaGlyLkZoaXJDb2RlPEVuY291bnRlckxvY2F0aW9uU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEVuY291bnRlci5sb2NhdGlvbi5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGlzIGluZm9ybWF0aW9uIGlzIGRlLW5vcm1hbGl6ZWQgZnJvbSB0aGUgTG9jYXRpb24gcmVzb3VyY2UgdG8gc3VwcG9ydCB0aGUgZWFzaWVyIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGVuY291bnRlciByZXNvdXJjZSBhbmQgcHJvY2Vzc2luZyBpbiBtZXNzYWdpbmcgb3IgcXVlcnkuXHJcbiAgICogVGhlcmUgbWF5IGJlIG1hbnkgbGV2ZWxzIGluIHRoZSBoaWVyYWNoeSwgYW5kIHRoaXMgbWF5IG9ubHkgcGljIHNwZWNpZmljIGxldmVscyB0aGF0IGFyZSByZXF1aXJlZCBmb3IgYSBzcGVjaWZpYyB1c2FnZSBzY2VuYXJpby5cclxuICAgKi9cclxuICBwaHlzaWNhbFR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRpbWUgcGVyaW9kIGR1cmluZyB3aGljaCB0aGUgcGF0aWVudCB3YXMgcHJlc2VudCBhdCB0aGUgbG9jYXRpb24uXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5QZXJpb2RBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFZpcnR1YWwgZW5jb3VudGVycyBjYW4gYmUgcmVjb3JkZWQgaW4gdGhlIEVuY291bnRlciBieSBzcGVjaWZ5aW5nIGEgbG9jYXRpb24gcmVmZXJlbmNlIHRvIGEgbG9jYXRpb24gb2YgdHlwZSBcImtpbmRcIiBzdWNoIGFzIFwiY2xpZW50J3MgaG9tZVwiIGFuZCBhbiBlbmNvdW50ZXIuY2xhc3MgPSBcInZpcnR1YWxcIi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbmNvdW50ZXJMb2NhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0VuY291bnRlckxvY2F0aW9uJztcclxuICAvKipcclxuICAgKiBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGVuY291bnRlciB0YWtlcyBwbGFjZS5cclxuICAgKi9cclxuICBwdWJsaWMgbG9jYXRpb246IGZoaXIuUmVmZXJlbmNlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogV2hlbiB0aGUgcGF0aWVudCBpcyBubyBsb25nZXIgYWN0aXZlIGF0IGEgbG9jYXRpb24sIHRoZW4gdGhlIHBlcmlvZCBlbmQgZGF0ZSBpcyBlbnRlcmVkLCBhbmQgdGhlIHN0YXR1cyBtYXkgYmUgY2hhbmdlZCB0byBjb21wbGV0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1cz86IGZoaXIuRmhpckNvZGU8RW5jb3VudGVyTG9jYXRpb25TdGF0dXNDb2RlVHlwZT58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgaW5mb3JtYXRpb24gaXMgZGUtbm9ybWFsaXplZCBmcm9tIHRoZSBMb2NhdGlvbiByZXNvdXJjZSB0byBzdXBwb3J0IHRoZSBlYXNpZXIgdW5kZXJzdGFuZGluZyBvZiB0aGUgZW5jb3VudGVyIHJlc291cmNlIGFuZCBwcm9jZXNzaW5nIGluIG1lc3NhZ2luZyBvciBxdWVyeS5cclxuICAgKiBUaGVyZSBtYXkgYmUgbWFueSBsZXZlbHMgaW4gdGhlIGhpZXJhY2h5LCBhbmQgdGhpcyBtYXkgb25seSBwaWMgc3BlY2lmaWMgbGV2ZWxzIHRoYXQgYXJlIHJlcXVpcmVkIGZvciBhIHNwZWNpZmljIHVzYWdlIHNjZW5hcmlvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwaHlzaWNhbFR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGltZSBwZXJpb2QgZHVyaW5nIHdoaWNoIHRoZSBwYXRpZW50IHdhcyBwcmVzZW50IGF0IHRoZSBsb2NhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEVuY291bnRlckxvY2F0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RW5jb3VudGVyTG9jYXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnbG9jYXRpb24nXSkgeyB0aGlzLmxvY2F0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5sb2NhdGlvbik7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxvY2F0aW9uID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxFbmNvdW50ZXJMb2NhdGlvblN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxFbmNvdW50ZXJMb2NhdGlvblN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncGh5c2ljYWxUeXBlJ10pIHsgdGhpcy5waHlzaWNhbFR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnBoeXNpY2FsVHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZCddKSB7IHRoaXMucGVyaW9kID0gbmV3IGZoaXIuUGVyaW9kKHNvdXJjZS5wZXJpb2QpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKTtcclxuICAgIGlmIChleHByZXNzaW9uID09PSAnJykgeyBleHByZXNzaW9uID0gJ0VuY291bnRlci5sb2NhdGlvbicgfVxyXG4gICAgdGhpcy52UmVxUygnbG9jYXRpb24nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTVignc3RhdHVzJyxleHByZXNzaW9uLCdFbmNvdW50ZXJMb2NhdGlvblN0YXR1cycsRW5jb3VudGVyTG9jYXRpb25TdGF0dXNWc1ZhbGlkYXRpb24sJ3InKVxyXG4gICAgdGhpcy52T3B0UygncGh5c2ljYWxUeXBlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygncGVyaW9kJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEVuY291bnRlciB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFbmNvdW50ZXJBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJFbmNvdW50ZXJcInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcihzKSBieSB3aGljaCB0aGlzIGVuY291bnRlciBpcyBrbm93bi5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOb3RlIHRoYXQgaW50ZXJuYWwgYnVzaW5lc3MgcnVsZXMgd2lsbCBkZXRlcm1pbmUgdGhlIGFwcHJvcHJpYXRlIHRyYW5zaXRpb25zIHRoYXQgbWF5IG9jY3VyIGJldHdlZW4gc3RhdHVzZXMgKGFuZCBhbHNvIGNsYXNzZXMpLlxyXG4gICAqL1xyXG4gIHN0YXR1czogZmhpci5GaGlyQ29kZTxFbmNvdW50ZXJTdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRW5jb3VudGVyLnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjdXJyZW50IHN0YXR1cyBpcyBhbHdheXMgZm91bmQgaW4gdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UsIG5vdCB0aGUgc3RhdHVzIGhpc3RvcnkuXHJcbiAgICovXHJcbiAgc3RhdHVzSGlzdG9yeT86IGZoaXIuRW5jb3VudGVyU3RhdHVzSGlzdG9yeUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29uY2VwdHMgcmVwcmVzZW50aW5nIGNsYXNzaWZpY2F0aW9uIG9mIHBhdGllbnQgZW5jb3VudGVyIHN1Y2ggYXMgYW1idWxhdG9yeSAob3V0cGF0aWVudCksIGlucGF0aWVudCwgZW1lcmdlbmN5LCBob21lIGhlYWx0aCBvciBvdGhlcnMgZHVlIHRvIGxvY2FsIHZhcmlhdGlvbnMuXHJcbiAgICovXHJcbiAgY2xhc3M6IGZoaXIuQ29kaW5nQXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjbGFzcyBoaXN0b3J5IHBlcm1pdHMgdGhlIHRyYWNraW5nIG9mIHRoZSBlbmNvdW50ZXJzIHRyYW5zaXRpb25zIHdpdGhvdXQgbmVlZGluZyB0byBnbyAgdGhyb3VnaCB0aGUgcmVzb3VyY2UgaGlzdG9yeS4gIFRoaXMgd291bGQgYmUgdXNlZCBmb3IgYSBjYXNlIHdoZXJlIGFuIGFkbWlzc2lvbiBzdGFydHMgb2YgYXMgYW4gZW1lcmdlbmN5IGVuY291bnRlciwgdGhlbiB0cmFuc2l0aW9ucyBpbnRvIGFuIGlucGF0aWVudCBzY2VuYXJpby4gRG9pbmcgdGhpcyBhbmQgbm90IHJlc3RhcnRpbmcgYSBuZXcgZW5jb3VudGVyIGVuc3VyZXMgdGhhdCBhbnkgbGFiL2RpYWdub3N0aWMgcmVzdWx0cyBjYW4gbW9yZSBlYXNpbHkgZm9sbG93IHRoZSBwYXRpZW50IGFuZCBub3QgcmVxdWlyZSByZS1wcm9jZXNzaW5nIGFuZCBub3QgZ2V0IGxvc3Qgb3IgY2FuY2VsbGVkIGR1cmluZyBhIGtpbmQgb2YgZGlzY2hhcmdlIGZyb20gZW1lcmdlbmN5IHRvIGlucGF0aWVudC5cclxuICAgKi9cclxuICBjbGFzc0hpc3Rvcnk/OiBmaGlyLkVuY291bnRlckNsYXNzSGlzdG9yeUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2luY2UgdGhlcmUgYXJlIG1hbnkgd2F5cyB0byBmdXJ0aGVyIGNsYXNzaWZ5IGVuY291bnRlcnMsIHRoaXMgZWxlbWVudCBpcyAwLi4qLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQnJvYWQgY2F0ZWdvcml6YXRpb24gb2YgdGhlIHNlcnZpY2UgdGhhdCBpcyB0byBiZSBwcm92aWRlZCAoZS5nLiBjYXJkaW9sb2d5KS5cclxuICAgKi9cclxuICBzZXJ2aWNlVHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSB1cmdlbmN5IG9mIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgcHJpb3JpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoaWxlIHRoZSBlbmNvdW50ZXIgaXMgYWx3YXlzIGFib3V0IHRoZSBwYXRpZW50LCB0aGUgcGF0aWVudCBtaWdodCBub3QgYWN0dWFsbHkgYmUga25vd24gaW4gYWxsIGNvbnRleHRzIG9mIHVzZSwgYW5kIHRoZXJlIG1heSBiZSBhIGdyb3VwIG9mIHBhdGllbnRzIHRoYXQgY291bGQgYmUgYW5vbnltb3VzIChzdWNoIGFzIGluIGEgZ3JvdXAgdGhlcmFweSBmb3IgQWxjb2hvbGljcyBBbm9ueW1vdXMgLSB3aGVyZSB0aGUgcmVjb3JkaW5nIG9mIHRoZSBlbmNvdW50ZXIgY291bGQgYmUgdXNlZCBmb3IgYmlsbGluZyBvbiB0aGUgbnVtYmVyIG9mIHBlb3BsZS9zdGFmZiBhbmQgbm90IGltcG9ydGFudCB0byB0aGUgY29udGV4dCBvZiB0aGUgc3BlY2lmaWMgcGF0aWVudHMpIG9yIGFsdGVybmF0ZWx5IGluIHZldGVyaW5hcnkgY2FyZSBhIGhlcmQgb2Ygc2hlZXAgcmVjZWl2aW5nIHRyZWF0bWVudCAod2hlcmUgdGhlIGFuaW1hbHMgYXJlIG5vdCBpbmRpdmlkdWFsbHkgdHJhY2tlZCkuXHJcbiAgICovXHJcbiAgc3ViamVjdD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlcmUgYSBzcGVjaWZpYyBlbmNvdW50ZXIgc2hvdWxkIGJlIGNsYXNzaWZpZWQgYXMgYSBwYXJ0IG9mIGEgc3BlY2lmaWMgZXBpc29kZShzKSBvZiBjYXJlIHRoaXMgZmllbGQgc2hvdWxkIGJlIHVzZWQuIFRoaXMgYXNzb2NpYXRpb24gY2FuIGZhY2lsaXRhdGUgZ3JvdXBpbmcgb2YgcmVsYXRlZCBlbmNvdW50ZXJzIHRvZ2V0aGVyIGZvciBhIHNwZWNpZmljIHB1cnBvc2UsIHN1Y2ggYXMgZ292ZXJubWVudCByZXBvcnRpbmcsIGlzc3VlIHRyYWNraW5nLCBhc3NvY2lhdGlvbiB2aWEgYSBjb21tb24gcHJvYmxlbS4gIFRoZSBhc3NvY2lhdGlvbiBpcyByZWNvcmRlZCBvbiB0aGUgZW5jb3VudGVyIGFzIHRoZXNlIGFyZSB0eXBpY2FsbHkgY3JlYXRlZCBhZnRlciB0aGUgZXBpc29kZSBvZiBjYXJlIGFuZCBncm91cGVkIG9uIGVudHJ5IHJhdGhlciB0aGFuIGVkaXRpbmcgdGhlIGVwaXNvZGUgb2YgY2FyZSB0byBhcHBlbmQgYW5vdGhlciBlbmNvdW50ZXIgdG8gaXQgKHRoZSBlcGlzb2RlIG9mIGNhcmUgY291bGQgc3BhbiB5ZWFycykuXHJcbiAgICovXHJcbiAgZXBpc29kZU9mQ2FyZT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcmVxdWVzdCB0aGlzIGVuY291bnRlciBzYXRpc2ZpZXMgKGUuZy4gaW5jb21pbmcgcmVmZXJyYWwgb3IgcHJvY2VkdXJlIHJlcXVlc3QpLlxyXG4gICAqL1xyXG4gIGJhc2VkT24/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpc3Qgb2YgcGVvcGxlIHJlc3BvbnNpYmxlIGZvciBwcm92aWRpbmcgdGhlIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgcGFydGljaXBhbnQ/OiBmaGlyLkVuY291bnRlclBhcnRpY2lwYW50QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgYXBwb2ludG1lbnQgdGhhdCBzY2hlZHVsZWQgdGhpcyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgYXBwb2ludG1lbnQ/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgbm90ICh5ZXQpIGtub3duLCB0aGUgZW5kIG9mIHRoZSBQZXJpb2QgbWF5IGJlIG9taXR0ZWQuXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5QZXJpb2RBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXkgZGlmZmVyIGZyb20gdGhlIHRpbWUgdGhlIEVuY291bnRlci5wZXJpb2QgbGFzdGVkIGJlY2F1c2Ugb2YgbGVhdmUgb2YgYWJzZW5jZS5cclxuICAgKi9cclxuICBsZW5ndGg/OiBmaGlyLkR1cmF0aW9uQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIHN5c3RlbXMgdGhhdCBuZWVkIHRvIGtub3cgd2hpY2ggd2FzIHRoZSBwcmltYXJ5IGRpYWdub3NpcywgdGhlc2Ugd2lsbCBiZSBtYXJrZWQgd2l0aCB0aGUgc3RhbmRhcmQgZXh0ZW5zaW9uIHByaW1hcnlEaWFnbm9zaXMgKHdoaWNoIGlzIGEgc2VxdWVuY2UgdmFsdWUgcmF0aGVyIHRoYW4gYSBmbGFnLCAxID0gcHJpbWFyeSBkaWFnbm9zaXMpLlxyXG4gICAqL1xyXG4gIHJlYXNvbkNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIHN5c3RlbXMgdGhhdCBuZWVkIHRvIGtub3cgd2hpY2ggd2FzIHRoZSBwcmltYXJ5IGRpYWdub3NpcywgdGhlc2Ugd2lsbCBiZSBtYXJrZWQgd2l0aCB0aGUgc3RhbmRhcmQgZXh0ZW5zaW9uIHByaW1hcnlEaWFnbm9zaXMgKHdoaWNoIGlzIGEgc2VxdWVuY2UgdmFsdWUgcmF0aGVyIHRoYW4gYSBmbGFnLCAxID0gcHJpbWFyeSBkaWFnbm9zaXMpLlxyXG4gICAqL1xyXG4gIHJlYXNvblJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiBkaWFnbm9zaXMgcmVsZXZhbnQgdG8gdGhpcyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgZGlhZ25vc2lzPzogZmhpci5FbmNvdW50ZXJEaWFnbm9zaXNBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBiaWxsaW5nIHN5c3RlbSBtYXkgY2hvb3NlIHRvIGFsbG9jYXRlIGJpbGxhYmxlIGl0ZW1zIGFzc29jaWF0ZWQgd2l0aCB0aGUgRW5jb3VudGVyIHRvIGRpZmZlcmVudCByZWZlcmVuY2VkIEFjY291bnRzIGJhc2VkIG9uIGludGVybmFsIGJ1c2luZXNzIHJ1bGVzLlxyXG4gICAqL1xyXG4gIGFjY291bnQ/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQW4gRW5jb3VudGVyIG1heSBjb3ZlciBtb3JlIHRoYW4ganVzdCB0aGUgaW5wYXRpZW50IHN0YXkuIENvbnRleHRzIHN1Y2ggYXMgb3V0cGF0aWVudHMsIGNvbW11bml0eSBjbGluaWNzLCBhbmQgYWdlZCBjYXJlIGZhY2lsaXRpZXMgYXJlIGFsc28gaW5jbHVkZWQuXHJcbiAgICogVGhlIGR1cmF0aW9uIHJlY29yZGVkIGluIHRoZSBwZXJpb2Qgb2YgdGhpcyBlbmNvdW50ZXIgY292ZXJzIHRoZSBlbnRpcmUgc2NvcGUgb2YgdGhpcyBob3NwaXRhbGl6YXRpb24gcmVjb3JkLlxyXG4gICAqL1xyXG4gIGhvc3BpdGFsaXphdGlvbj86IGZoaXIuRW5jb3VudGVySG9zcGl0YWxpemF0aW9uQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVmlydHVhbCBlbmNvdW50ZXJzIGNhbiBiZSByZWNvcmRlZCBpbiB0aGUgRW5jb3VudGVyIGJ5IHNwZWNpZnlpbmcgYSBsb2NhdGlvbiByZWZlcmVuY2UgdG8gYSBsb2NhdGlvbiBvZiB0eXBlIFwia2luZFwiIHN1Y2ggYXMgXCJjbGllbnQncyBob21lXCIgYW5kIGFuIGVuY291bnRlci5jbGFzcyA9IFwidmlydHVhbFwiLlxyXG4gICAqL1xyXG4gIGxvY2F0aW9uPzogZmhpci5FbmNvdW50ZXJMb2NhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG9yZ2FuaXphdGlvbiB0aGF0IGlzIHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhpcyBFbmNvdW50ZXIncyBzZXJ2aWNlcy4gVGhpcyBNQVkgYmUgdGhlIHNhbWUgYXMgdGhlIG9yZ2FuaXphdGlvbiBvbiB0aGUgUGF0aWVudCByZWNvcmQsIGhvd2V2ZXIgaXQgY291bGQgYmUgZGlmZmVyZW50LCBzdWNoIGFzIGlmIHRoZSBhY3RvciBwZXJmb3JtaW5nIHRoZSBzZXJ2aWNlcyB3YXMgZnJvbSBhbiBleHRlcm5hbCBvcmdhbml6YXRpb24gKHdoaWNoIG1heSBiZSBiaWxsZWQgc2VwZXJhdGVseSkgZm9yIGFuIGV4dGVybmFsIGNvbnN1bHRhdGlvbi4gIFJlZmVyIHRvIHRoZSBleGFtcGxlIGJ1bmRsZSBzaG93aW5nIGFuIGFiYnJldmlhdGVkIHNldCBvZiBFbmNvdW50ZXJzIGZvciBhIGNvbG9ub3Njb3B5LlxyXG4gICAqL1xyXG4gIHNlcnZpY2VQcm92aWRlcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyBhbHNvIHVzZWQgZm9yIGFzc29jaWF0aW5nIGEgY2hpbGQncyBlbmNvdW50ZXIgYmFjayB0byB0aGUgbW90aGVyJ3MgZW5jb3VudGVyLlxyXG4gICAqIFJlZmVyIHRvIHRoZSBOb3RlcyBzZWN0aW9uIGluIHRoZSBQYXRpZW50IHJlc291cmNlIGZvciBmdXJ0aGVyIGRldGFpbHMuXHJcbiAgICovXHJcbiAgcGFydE9mPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGludGVyYWN0aW9uIGJldHdlZW4gYSBwYXRpZW50IGFuZCBoZWFsdGhjYXJlIHByb3ZpZGVyKHMpIGZvciB0aGUgcHVycG9zZSBvZiBwcm92aWRpbmcgaGVhbHRoY2FyZSBzZXJ2aWNlKHMpIG9yIGFzc2Vzc2luZyB0aGUgaGVhbHRoIHN0YXR1cyBvZiBhIHBhdGllbnQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRW5jb3VudGVyIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdFbmNvdW50ZXInO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiRW5jb3VudGVyXCI7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcihzKSBieSB3aGljaCB0aGlzIGVuY291bnRlciBpcyBrbm93bi5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IGludGVybmFsIGJ1c2luZXNzIHJ1bGVzIHdpbGwgZGV0ZXJtaW5lIHRoZSBhcHByb3ByaWF0ZSB0cmFuc2l0aW9ucyB0aGF0IG1heSBvY2N1ciBiZXR3ZWVuIHN0YXR1c2VzIChhbmQgYWxzbyBjbGFzc2VzKS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPEVuY291bnRlclN0YXR1c0NvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjdXJyZW50IHN0YXR1cyBpcyBhbHdheXMgZm91bmQgaW4gdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UsIG5vdCB0aGUgc3RhdHVzIGhpc3RvcnkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1c0hpc3Rvcnk6IGZoaXIuRW5jb3VudGVyU3RhdHVzSGlzdG9yeVtdO1xyXG4gIC8qKlxyXG4gICAqIENvbmNlcHRzIHJlcHJlc2VudGluZyBjbGFzc2lmaWNhdGlvbiBvZiBwYXRpZW50IGVuY291bnRlciBzdWNoIGFzIGFtYnVsYXRvcnkgKG91dHBhdGllbnQpLCBpbnBhdGllbnQsIGVtZXJnZW5jeSwgaG9tZSBoZWFsdGggb3Igb3RoZXJzIGR1ZSB0byBsb2NhbCB2YXJpYXRpb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGFzczogZmhpci5Db2Rpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgY2xhc3MgaGlzdG9yeSBwZXJtaXRzIHRoZSB0cmFja2luZyBvZiB0aGUgZW5jb3VudGVycyB0cmFuc2l0aW9ucyB3aXRob3V0IG5lZWRpbmcgdG8gZ28gIHRocm91Z2ggdGhlIHJlc291cmNlIGhpc3RvcnkuICBUaGlzIHdvdWxkIGJlIHVzZWQgZm9yIGEgY2FzZSB3aGVyZSBhbiBhZG1pc3Npb24gc3RhcnRzIG9mIGFzIGFuIGVtZXJnZW5jeSBlbmNvdW50ZXIsIHRoZW4gdHJhbnNpdGlvbnMgaW50byBhbiBpbnBhdGllbnQgc2NlbmFyaW8uIERvaW5nIHRoaXMgYW5kIG5vdCByZXN0YXJ0aW5nIGEgbmV3IGVuY291bnRlciBlbnN1cmVzIHRoYXQgYW55IGxhYi9kaWFnbm9zdGljIHJlc3VsdHMgY2FuIG1vcmUgZWFzaWx5IGZvbGxvdyB0aGUgcGF0aWVudCBhbmQgbm90IHJlcXVpcmUgcmUtcHJvY2Vzc2luZyBhbmQgbm90IGdldCBsb3N0IG9yIGNhbmNlbGxlZCBkdXJpbmcgYSBraW5kIG9mIGRpc2NoYXJnZSBmcm9tIGVtZXJnZW5jeSB0byBpbnBhdGllbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGNsYXNzSGlzdG9yeTogZmhpci5FbmNvdW50ZXJDbGFzc0hpc3RvcnlbXTtcclxuICAvKipcclxuICAgKiBTaW5jZSB0aGVyZSBhcmUgbWFueSB3YXlzIHRvIGZ1cnRoZXIgY2xhc3NpZnkgZW5jb3VudGVycywgdGhpcyBlbGVtZW50IGlzIDAuLiouXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogQnJvYWQgY2F0ZWdvcml6YXRpb24gb2YgdGhlIHNlcnZpY2UgdGhhdCBpcyB0byBiZSBwcm92aWRlZCAoZS5nLiBjYXJkaW9sb2d5KS5cclxuICAgKi9cclxuICBwdWJsaWMgc2VydmljZVR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSB1cmdlbmN5IG9mIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgcHVibGljIHByaW9yaXR5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoaWxlIHRoZSBlbmNvdW50ZXIgaXMgYWx3YXlzIGFib3V0IHRoZSBwYXRpZW50LCB0aGUgcGF0aWVudCBtaWdodCBub3QgYWN0dWFsbHkgYmUga25vd24gaW4gYWxsIGNvbnRleHRzIG9mIHVzZSwgYW5kIHRoZXJlIG1heSBiZSBhIGdyb3VwIG9mIHBhdGllbnRzIHRoYXQgY291bGQgYmUgYW5vbnltb3VzIChzdWNoIGFzIGluIGEgZ3JvdXAgdGhlcmFweSBmb3IgQWxjb2hvbGljcyBBbm9ueW1vdXMgLSB3aGVyZSB0aGUgcmVjb3JkaW5nIG9mIHRoZSBlbmNvdW50ZXIgY291bGQgYmUgdXNlZCBmb3IgYmlsbGluZyBvbiB0aGUgbnVtYmVyIG9mIHBlb3BsZS9zdGFmZiBhbmQgbm90IGltcG9ydGFudCB0byB0aGUgY29udGV4dCBvZiB0aGUgc3BlY2lmaWMgcGF0aWVudHMpIG9yIGFsdGVybmF0ZWx5IGluIHZldGVyaW5hcnkgY2FyZSBhIGhlcmQgb2Ygc2hlZXAgcmVjZWl2aW5nIHRyZWF0bWVudCAod2hlcmUgdGhlIGFuaW1hbHMgYXJlIG5vdCBpbmRpdmlkdWFsbHkgdHJhY2tlZCkuXHJcbiAgICovXHJcbiAgcHVibGljIHN1YmplY3Q/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlcmUgYSBzcGVjaWZpYyBlbmNvdW50ZXIgc2hvdWxkIGJlIGNsYXNzaWZpZWQgYXMgYSBwYXJ0IG9mIGEgc3BlY2lmaWMgZXBpc29kZShzKSBvZiBjYXJlIHRoaXMgZmllbGQgc2hvdWxkIGJlIHVzZWQuIFRoaXMgYXNzb2NpYXRpb24gY2FuIGZhY2lsaXRhdGUgZ3JvdXBpbmcgb2YgcmVsYXRlZCBlbmNvdW50ZXJzIHRvZ2V0aGVyIGZvciBhIHNwZWNpZmljIHB1cnBvc2UsIHN1Y2ggYXMgZ292ZXJubWVudCByZXBvcnRpbmcsIGlzc3VlIHRyYWNraW5nLCBhc3NvY2lhdGlvbiB2aWEgYSBjb21tb24gcHJvYmxlbS4gIFRoZSBhc3NvY2lhdGlvbiBpcyByZWNvcmRlZCBvbiB0aGUgZW5jb3VudGVyIGFzIHRoZXNlIGFyZSB0eXBpY2FsbHkgY3JlYXRlZCBhZnRlciB0aGUgZXBpc29kZSBvZiBjYXJlIGFuZCBncm91cGVkIG9uIGVudHJ5IHJhdGhlciB0aGFuIGVkaXRpbmcgdGhlIGVwaXNvZGUgb2YgY2FyZSB0byBhcHBlbmQgYW5vdGhlciBlbmNvdW50ZXIgdG8gaXQgKHRoZSBlcGlzb2RlIG9mIGNhcmUgY291bGQgc3BhbiB5ZWFycykuXHJcbiAgICovXHJcbiAgcHVibGljIGVwaXNvZGVPZkNhcmU6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlcXVlc3QgdGhpcyBlbmNvdW50ZXIgc2F0aXNmaWVzIChlLmcuIGluY29taW5nIHJlZmVycmFsIG9yIHByb2NlZHVyZSByZXF1ZXN0KS5cclxuICAgKi9cclxuICBwdWJsaWMgYmFzZWRPbjogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiBwZW9wbGUgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyB0aGUgc2VydmljZS5cclxuICAgKi9cclxuICBwdWJsaWMgcGFydGljaXBhbnQ6IGZoaXIuRW5jb3VudGVyUGFydGljaXBhbnRbXTtcclxuICAvKipcclxuICAgKiBUaGUgYXBwb2ludG1lbnQgdGhhdCBzY2hlZHVsZWQgdGhpcyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGFwcG9pbnRtZW50OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIElmIG5vdCAoeWV0KSBrbm93biwgdGhlIGVuZCBvZiB0aGUgUGVyaW9kIG1heSBiZSBvbWl0dGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwZXJpb2Q/OiBmaGlyLlBlcmlvZHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWF5IGRpZmZlciBmcm9tIHRoZSB0aW1lIHRoZSBFbmNvdW50ZXIucGVyaW9kIGxhc3RlZCBiZWNhdXNlIG9mIGxlYXZlIG9mIGFic2VuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIGxlbmd0aD86IGZoaXIuRHVyYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBzeXN0ZW1zIHRoYXQgbmVlZCB0byBrbm93IHdoaWNoIHdhcyB0aGUgcHJpbWFyeSBkaWFnbm9zaXMsIHRoZXNlIHdpbGwgYmUgbWFya2VkIHdpdGggdGhlIHN0YW5kYXJkIGV4dGVuc2lvbiBwcmltYXJ5RGlhZ25vc2lzICh3aGljaCBpcyBhIHNlcXVlbmNlIHZhbHVlIHJhdGhlciB0aGFuIGEgZmxhZywgMSA9IHByaW1hcnkgZGlhZ25vc2lzKS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uQ29kZTogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBGb3Igc3lzdGVtcyB0aGF0IG5lZWQgdG8ga25vdyB3aGljaCB3YXMgdGhlIHByaW1hcnkgZGlhZ25vc2lzLCB0aGVzZSB3aWxsIGJlIG1hcmtlZCB3aXRoIHRoZSBzdGFuZGFyZCBleHRlbnNpb24gcHJpbWFyeURpYWdub3NpcyAod2hpY2ggaXMgYSBzZXF1ZW5jZSB2YWx1ZSByYXRoZXIgdGhhbiBhIGZsYWcsIDEgPSBwcmltYXJ5IGRpYWdub3NpcykuXHJcbiAgICovXHJcbiAgcHVibGljIHJlYXNvblJlZmVyZW5jZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiBkaWFnbm9zaXMgcmVsZXZhbnQgdG8gdGhpcyBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGRpYWdub3NpczogZmhpci5FbmNvdW50ZXJEaWFnbm9zaXNbXTtcclxuICAvKipcclxuICAgKiBUaGUgYmlsbGluZyBzeXN0ZW0gbWF5IGNob29zZSB0byBhbGxvY2F0ZSBiaWxsYWJsZSBpdGVtcyBhc3NvY2lhdGVkIHdpdGggdGhlIEVuY291bnRlciB0byBkaWZmZXJlbnQgcmVmZXJlbmNlZCBBY2NvdW50cyBiYXNlZCBvbiBpbnRlcm5hbCBidXNpbmVzcyBydWxlcy5cclxuICAgKi9cclxuICBwdWJsaWMgYWNjb3VudDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBBbiBFbmNvdW50ZXIgbWF5IGNvdmVyIG1vcmUgdGhhbiBqdXN0IHRoZSBpbnBhdGllbnQgc3RheS4gQ29udGV4dHMgc3VjaCBhcyBvdXRwYXRpZW50cywgY29tbXVuaXR5IGNsaW5pY3MsIGFuZCBhZ2VkIGNhcmUgZmFjaWxpdGllcyBhcmUgYWxzbyBpbmNsdWRlZC5cclxuICAgKiBUaGUgZHVyYXRpb24gcmVjb3JkZWQgaW4gdGhlIHBlcmlvZCBvZiB0aGlzIGVuY291bnRlciBjb3ZlcnMgdGhlIGVudGlyZSBzY29wZSBvZiB0aGlzIGhvc3BpdGFsaXphdGlvbiByZWNvcmQuXHJcbiAgICovXHJcbiAgcHVibGljIGhvc3BpdGFsaXphdGlvbj86IGZoaXIuRW5jb3VudGVySG9zcGl0YWxpemF0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBWaXJ0dWFsIGVuY291bnRlcnMgY2FuIGJlIHJlY29yZGVkIGluIHRoZSBFbmNvdW50ZXIgYnkgc3BlY2lmeWluZyBhIGxvY2F0aW9uIHJlZmVyZW5jZSB0byBhIGxvY2F0aW9uIG9mIHR5cGUgXCJraW5kXCIgc3VjaCBhcyBcImNsaWVudCdzIGhvbWVcIiBhbmQgYW4gZW5jb3VudGVyLmNsYXNzID0gXCJ2aXJ0dWFsXCIuXHJcbiAgICovXHJcbiAgcHVibGljIGxvY2F0aW9uOiBmaGlyLkVuY291bnRlckxvY2F0aW9uW107XHJcbiAgLyoqXHJcbiAgICogVGhlIG9yZ2FuaXphdGlvbiB0aGF0IGlzIHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhpcyBFbmNvdW50ZXIncyBzZXJ2aWNlcy4gVGhpcyBNQVkgYmUgdGhlIHNhbWUgYXMgdGhlIG9yZ2FuaXphdGlvbiBvbiB0aGUgUGF0aWVudCByZWNvcmQsIGhvd2V2ZXIgaXQgY291bGQgYmUgZGlmZmVyZW50LCBzdWNoIGFzIGlmIHRoZSBhY3RvciBwZXJmb3JtaW5nIHRoZSBzZXJ2aWNlcyB3YXMgZnJvbSBhbiBleHRlcm5hbCBvcmdhbml6YXRpb24gKHdoaWNoIG1heSBiZSBiaWxsZWQgc2VwZXJhdGVseSkgZm9yIGFuIGV4dGVybmFsIGNvbnN1bHRhdGlvbi4gIFJlZmVyIHRvIHRoZSBleGFtcGxlIGJ1bmRsZSBzaG93aW5nIGFuIGFiYnJldmlhdGVkIHNldCBvZiBFbmNvdW50ZXJzIGZvciBhIGNvbG9ub3Njb3B5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXJ2aWNlUHJvdmlkZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyBhbHNvIHVzZWQgZm9yIGFzc29jaWF0aW5nIGEgY2hpbGQncyBlbmNvdW50ZXIgYmFjayB0byB0aGUgbW90aGVyJ3MgZW5jb3VudGVyLlxyXG4gICAqIFJlZmVyIHRvIHRoZSBOb3RlcyBzZWN0aW9uIGluIHRoZSBQYXRpZW50IHJlc291cmNlIGZvciBmdXJ0aGVyIGRldGFpbHMuXHJcbiAgICovXHJcbiAgcHVibGljIHBhcnRPZj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBFbmNvdW50ZXIgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxFbmNvdW50ZXJBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnRW5jb3VudGVyJztcclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXR1cyddKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8RW5jb3VudGVyU3RhdHVzQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnN0YXR1c30pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfc3RhdHVzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc3RhdHVzKSB7IHRoaXMuc3RhdHVzLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3N0YXR1cyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPEVuY291bnRlclN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzSGlzdG9yeSddKSB7IHRoaXMuc3RhdHVzSGlzdG9yeSA9IHNvdXJjZS5zdGF0dXNIaXN0b3J5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuRW5jb3VudGVyU3RhdHVzSGlzdG9yeSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN0YXR1c0hpc3RvcnkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY2xhc3MnXSkgeyB0aGlzLmNsYXNzID0gbmV3IGZoaXIuQ29kaW5nKHNvdXJjZS5jbGFzcyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNsYXNzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY2xhc3NIaXN0b3J5J10pIHsgdGhpcy5jbGFzc0hpc3RvcnkgPSBzb3VyY2UuY2xhc3NIaXN0b3J5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuRW5jb3VudGVyQ2xhc3NIaXN0b3J5KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY2xhc3NIaXN0b3J5ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBzb3VyY2UudHlwZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VydmljZVR5cGUnXSkgeyB0aGlzLnNlcnZpY2VUeXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zZXJ2aWNlVHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3ByaW9yaXR5J10pIHsgdGhpcy5wcmlvcml0eSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucHJpb3JpdHkpOyB9XHJcbiAgICBpZiAoc291cmNlWydzdWJqZWN0J10pIHsgdGhpcy5zdWJqZWN0ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdWJqZWN0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZXBpc29kZU9mQ2FyZSddKSB7IHRoaXMuZXBpc29kZU9mQ2FyZSA9IHNvdXJjZS5lcGlzb2RlT2ZDYXJlLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZXBpc29kZU9mQ2FyZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydiYXNlZE9uJ10pIHsgdGhpcy5iYXNlZE9uID0gc291cmNlLmJhc2VkT24ubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5iYXNlZE9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3BhcnRpY2lwYW50J10pIHsgdGhpcy5wYXJ0aWNpcGFudCA9IHNvdXJjZS5wYXJ0aWNpcGFudC5tYXAoKHgpID0+IG5ldyBmaGlyLkVuY291bnRlclBhcnRpY2lwYW50KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGFydGljaXBhbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYXBwb2ludG1lbnQnXSkgeyB0aGlzLmFwcG9pbnRtZW50ID0gc291cmNlLmFwcG9pbnRtZW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYXBwb2ludG1lbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGVyaW9kJ10pIHsgdGhpcy5wZXJpb2QgPSBuZXcgZmhpci5QZXJpb2Qoc291cmNlLnBlcmlvZCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2xlbmd0aCddKSB7IHRoaXMubGVuZ3RoID0gbmV3IGZoaXIuRHVyYXRpb24oc291cmNlLmxlbmd0aCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlYXNvbkNvZGUnXSkgeyB0aGlzLnJlYXNvbkNvZGUgPSBzb3VyY2UucmVhc29uQ29kZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlYXNvbkNvZGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVhc29uUmVmZXJlbmNlJ10pIHsgdGhpcy5yZWFzb25SZWZlcmVuY2UgPSBzb3VyY2UucmVhc29uUmVmZXJlbmNlLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVhc29uUmVmZXJlbmNlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2RpYWdub3NpcyddKSB7IHRoaXMuZGlhZ25vc2lzID0gc291cmNlLmRpYWdub3Npcy5tYXAoKHgpID0+IG5ldyBmaGlyLkVuY291bnRlckRpYWdub3Npcyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRpYWdub3NpcyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydhY2NvdW50J10pIHsgdGhpcy5hY2NvdW50ID0gc291cmNlLmFjY291bnQubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hY2NvdW50ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2hvc3BpdGFsaXphdGlvbiddKSB7IHRoaXMuaG9zcGl0YWxpemF0aW9uID0gbmV3IGZoaXIuRW5jb3VudGVySG9zcGl0YWxpemF0aW9uKHNvdXJjZS5ob3NwaXRhbGl6YXRpb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydsb2NhdGlvbiddKSB7IHRoaXMubG9jYXRpb24gPSBzb3VyY2UubG9jYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5FbmNvdW50ZXJMb2NhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxvY2F0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3NlcnZpY2VQcm92aWRlciddKSB7IHRoaXMuc2VydmljZVByb3ZpZGVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zZXJ2aWNlUHJvdmlkZXIpOyB9XHJcbiAgICBpZiAoc291cmNlWydwYXJ0T2YnXSkgeyB0aGlzLnBhcnRPZiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UucGFydE9mKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdFbmNvdW50ZXInIH1cclxuICAgIHRoaXMudlJlcVMoJ3Jlc291cmNlVHlwZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2lkZW50aWZpZXInLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZSZXFTVignc3RhdHVzJyxleHByZXNzaW9uLCdFbmNvdW50ZXJTdGF0dXMnLEVuY291bnRlclN0YXR1c1ZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZPcHRBKCdzdGF0dXNIaXN0b3J5JyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52UmVxUygnY2xhc3MnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdjbGFzc0hpc3RvcnknLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCd0eXBlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0Uygnc2VydmljZVR5cGUnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdwcmlvcml0eScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ3N1YmplY3QnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdlcGlzb2RlT2ZDYXJlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnYmFzZWRPbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ3BhcnRpY2lwYW50JyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnYXBwb2ludG1lbnQnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdwZXJpb2QnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdsZW5ndGgnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdyZWFzb25Db2RlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgncmVhc29uUmVmZXJlbmNlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnZGlhZ25vc2lzJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnYWNjb3VudCcsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ2hvc3BpdGFsaXphdGlvbicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2xvY2F0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0Uygnc2VydmljZVByb3ZpZGVyJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygncGFydE9mJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19