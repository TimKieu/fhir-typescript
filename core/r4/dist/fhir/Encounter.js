// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Encounter
import * as fhir from '../fhir.js';
// @ts-ignore
import { EncounterStatusVsValidation } from '../fhirValueSets/EncounterStatusVsValidation.js';
// @ts-ignore
import { EncounterLocationStatusVsValidation } from '../fhirValueSets/EncounterLocationStatusVsValidation.js';
/**
 * The current status is always found in the current version of the resource, not the status history.
 */
export class EncounterStatusHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterStatusHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.statusHistory';
        }
        iss.push(...this.vRSV('status', exp, 'EncounterStatus', EncounterStatusVsValidation, 'r'));
        iss.push(...this.vRS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterStatusHistory._fts_dataType = 'EncounterStatusHistory';
/**
 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
 */
export class EncounterClassHistory extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterClassHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['class']) {
            this.class = new fhir.Coding(source.class, options);
        }
        else {
            this.class = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        else {
            this.period = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.classHistory';
        }
        iss.push(...this.vRS('class', exp));
        iss.push(...this.vRS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterClassHistory._fts_dataType = 'EncounterClassHistory';
/**
 * The list of people responsible for providing the service.
 */
export class EncounterParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.participant';
        }
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('individual', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterParticipant._fts_dataType = 'EncounterParticipant';
/**
 * The list of diagnosis relevant to this encounter.
 */
export class EncounterDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition, options);
        }
        else {
            this.condition = null;
        }
        if (source['use']) {
            this.use = new fhir.CodeableConcept(source.use, options);
        }
        if (source['rank'] !== undefined) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank }, options);
        }
        if (source['_rank']) {
            if (this.rank) {
                this.rank.addExtendedProperties(source._rank);
            }
            else {
                this.rank = new fhir.FhirPositiveInt(source._rank, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.diagnosis';
        }
        iss.push(...this.vRS('condition', exp));
        iss.push(...this.vOS('use', exp));
        iss.push(...this.vOS('rank', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterDiagnosis._fts_dataType = 'EncounterDiagnosis';
/**
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
export class EncounterHospitalization extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterHospitalization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['preAdmissionIdentifier']) {
            this.preAdmissionIdentifier = new fhir.Identifier(source.preAdmissionIdentifier, options);
        }
        if (source['origin']) {
            this.origin = new fhir.Reference(source.origin, options);
        }
        if (source['admitSource']) {
            this.admitSource = new fhir.CodeableConcept(source.admitSource, options);
        }
        if (source['reAdmission']) {
            this.reAdmission = new fhir.CodeableConcept(source.reAdmission, options);
        }
        if (source['dietPreference']) {
            this.dietPreference = source.dietPreference.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.dietPreference = [];
        }
        if (source['specialCourtesy']) {
            this.specialCourtesy = source.specialCourtesy.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.specialCourtesy = [];
        }
        if (source['specialArrangement']) {
            this.specialArrangement = source.specialArrangement.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.specialArrangement = [];
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination, options);
        }
        if (source['dischargeDisposition']) {
            this.dischargeDisposition = new fhir.CodeableConcept(source.dischargeDisposition, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.hospitalization';
        }
        iss.push(...this.vOS('preAdmissionIdentifier', exp));
        iss.push(...this.vOS('origin', exp));
        iss.push(...this.vOS('admitSource', exp));
        iss.push(...this.vOS('reAdmission', exp));
        iss.push(...this.vOA('dietPreference', exp));
        iss.push(...this.vOA('specialCourtesy', exp));
        iss.push(...this.vOA('specialArrangement', exp));
        iss.push(...this.vOS('destination', exp));
        iss.push(...this.vOS('dischargeDisposition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterHospitalization._fts_dataType = 'EncounterHospitalization';
/**
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export class EncounterLocation extends fhir.BackboneElement {
    /**
     * Default constructor for EncounterLocation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        else {
            this.location = null;
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType, options);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter.location';
        }
        iss.push(...this.vRS('location', exp));
        iss.push(...this.vOSV('status', exp, 'EncounterLocationStatus', EncounterLocationStatusVsValidation, 'r'));
        iss.push(...this.vOS('physicalType', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EncounterLocation._fts_dataType = 'EncounterLocation';
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export class Encounter extends fhir.DomainResource {
    /**
     * Default constructor for Encounter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Encounter';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['statusHistory']) {
            this.statusHistory = source.statusHistory.map((x) => new fhir.EncounterStatusHistory(x, options));
        }
        else {
            this.statusHistory = [];
        }
        if (source['class']) {
            this.class = new fhir.Coding(source.class, options);
        }
        else {
            this.class = null;
        }
        if (source['classHistory']) {
            this.classHistory = source.classHistory.map((x) => new fhir.EncounterClassHistory(x, options));
        }
        else {
            this.classHistory = [];
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['serviceType']) {
            this.serviceType = new fhir.CodeableConcept(source.serviceType, options);
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority, options);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['episodeOfCare']) {
            this.episodeOfCare = source.episodeOfCare.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.episodeOfCare = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.EncounterParticipant(x, options));
        }
        else {
            this.participant = [];
        }
        if (source['appointment']) {
            this.appointment = source.appointment.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.appointment = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['length']) {
            this.length = new fhir.Duration(source.length, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.EncounterDiagnosis(x, options));
        }
        else {
            this.diagnosis = [];
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.account = [];
        }
        if (source['hospitalization']) {
            this.hospitalization = new fhir.EncounterHospitalization(source.hospitalization, options);
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.EncounterLocation(x, options));
        }
        else {
            this.location = [];
        }
        if (source['serviceProvider']) {
            this.serviceProvider = new fhir.Reference(source.serviceProvider, options);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Encounter';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'EncounterStatus', EncounterStatusVsValidation, 'r'));
        iss.push(...this.vOA('statusHistory', exp));
        iss.push(...this.vRS('class', exp));
        iss.push(...this.vOA('classHistory', exp));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOS('serviceType', exp));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOA('episodeOfCare', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('participant', exp));
        iss.push(...this.vOA('appointment', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('length', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('diagnosis', exp));
        iss.push(...this.vOA('account', exp));
        iss.push(...this.vOS('hospitalization', exp));
        iss.push(...this.vOA('location', exp));
        iss.push(...this.vOS('serviceProvider', exp));
        iss.push(...this.vOS('partOf', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Encounter._fts_dataType = 'Encounter';
//# sourceMappingURL=data:application/json;base64,