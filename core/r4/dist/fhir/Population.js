/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { BackboneElement } from './BackboneElement.js';
import { Range } from './Range.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * A populatioof people with some set of grouping criteria.
 */
var Population = /** @class */ (function (_super) {
    __extends(Population, _super);
    /**
     * Default constructor for Population - initializes any required elements to null if a value is not provided.
     */
    function Population(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['age']) {
            _this.age = source.age;
        }
        else if (source['ageRange']) {
            _this.age = new Range(source.ageRange);
        }
        else if (source['ageCodeableConcept']) {
            _this.age = new CodeableConcept(source.ageCodeableConcept);
        }
        if (source['gender']) {
            _this.gender = new CodeableConcept(source.gender);
        }
        if (source['race']) {
            _this.race = new CodeableConcept(source.race);
        }
        if (source['physiologicalCondition']) {
            _this.physiologicalCondition = new CodeableConcept(source.physiologicalCondition);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Population.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["gender"]) {
            (_a = outcome.issue).push.apply(_a, this.gender.doModelValidation().issue);
        }
        if (this["race"]) {
            (_b = outcome.issue).push.apply(_b, this.race.doModelValidation().issue);
        }
        if (this["physiologicalCondition"]) {
            (_c = outcome.issue).push.apply(_c, this.physiologicalCondition.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Population._fts_dataType = 'Population';
    /**
     * Internal flag to properly serialize choice-type element Population.age[x]
     */
    Population._fts_ageIsChoice = true;
    return Population;
}(BackboneElement));

export { Population };
//# sourceMappingURL=Population.js.map
