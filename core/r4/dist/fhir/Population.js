// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Population
import * as fhir from '../fhir.js';
/**
 * A populatioof people with some set of grouping criteria.
 */
export class Population extends fhir.BackboneElement {
    /**
     * Default constructor for Population - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['age']) {
            this.age = source.age;
        }
        else if (source['ageRange']) {
            this.age = new fhir.Range(source.ageRange, options);
        }
        else if (source['ageCodeableConcept']) {
            this.age = new fhir.CodeableConcept(source.ageCodeableConcept, options);
        }
        if (source['gender']) {
            this.gender = new fhir.CodeableConcept(source.gender, options);
        }
        if (source['race']) {
            this.race = new fhir.CodeableConcept(source.race, options);
        }
        if (source['physiologicalCondition']) {
            this.physiologicalCondition = new fhir.CodeableConcept(source.physiologicalCondition, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Population';
        }
        iss.push(...this.vOS('age', exp));
        iss.push(...this.vOS('gender', exp));
        iss.push(...this.vOS('race', exp));
        iss.push(...this.vOS('physiologicalCondition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Population._fts_dataType = 'Population';
/**
 * Internal flag to properly serialize choice-type element Population.age[x]
 */
Population._fts_ageIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9wdWxhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvUG9wdWxhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrQkFBK0I7QUFFL0IsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFnQ25DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVcsU0FBUSxJQUFJLENBQUMsZUFBZTtJQXlCbEQ7O09BRUc7SUFDSCxZQUFZLFNBQWlDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ3ZGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7U0FBRTthQUN4QyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FBRTthQUNoRixJQUFJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDbkgsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDekYsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDbkYsSUFBSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQUU7SUFDM0ksQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsTUFBYSxFQUFFO1FBQy9DLElBQUksR0FBRyxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFO1lBQUUsR0FBRyxHQUFHLFlBQVksQ0FBQTtTQUFFO1FBQ3RDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQS9DRDs7R0FFRztBQUM2Qix3QkFBYSxHQUFVLFlBQVksQ0FBQztBQUtwRTs7R0FFRztBQUN1QiwyQkFBZ0IsR0FBUSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgQ29tcGxleFR5cGU6IFBvcHVsYXRpb25cclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgUG9wdWxhdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQb3B1bGF0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFnZSBvZiB0aGUgc3BlY2lmaWMgcG9wdWxhdGlvbi5cclxuICAgKi9cclxuICBhZ2U/OiBmaGlyLlJhbmdlfGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgYWdlIG9mIHRoZSBzcGVjaWZpYyBwb3B1bGF0aW9uLlxyXG4gICAqL1xyXG4gIGFnZVJhbmdlPzogZmhpci5SYW5nZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZ2Ugb2YgdGhlIHNwZWNpZmljIHBvcHVsYXRpb24uXHJcbiAgICovXHJcbiAgYWdlQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZ2VuZGVyIG9mIHRoZSBzcGVjaWZpYyBwb3B1bGF0aW9uLlxyXG4gICAqL1xyXG4gIGdlbmRlcj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmFjZSBvZiB0aGUgc3BlY2lmaWMgcG9wdWxhdGlvbi5cclxuICAgKi9cclxuICByYWNlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZXhpc3RpbmcgcGh5c2lvbG9naWNhbCBjb25kaXRpb25zIG9mIHRoZSBzcGVjaWZpYyBwb3B1bGF0aW9uIHRvIHdoaWNoIHRoaXMgYXBwbGllcy5cclxuICAgKi9cclxuICBwaHlzaW9sb2dpY2FsQ29uZGl0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgcG9wdWxhdGlvb2YgcGVvcGxlIHdpdGggc29tZSBzZXQgb2YgZ3JvdXBpbmcgY3JpdGVyaWEuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUG9wdWxhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1BvcHVsYXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZ2Ugb2YgdGhlIHNwZWNpZmljIHBvcHVsYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGFnZT86IChmaGlyLlJhbmdlfGZoaXIuQ29kZWFibGVDb25jZXB0KXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBQb3B1bGF0aW9uLmFnZVt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c19hZ2VJc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBUaGUgZ2VuZGVyIG9mIHRoZSBzcGVjaWZpYyBwb3B1bGF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZW5kZXI/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmFjZSBvZiB0aGUgc3BlY2lmaWMgcG9wdWxhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmFjZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZXhpc3RpbmcgcGh5c2lvbG9naWNhbCBjb25kaXRpb25zIG9mIHRoZSBzcGVjaWZpYyBwb3B1bGF0aW9uIHRvIHdoaWNoIHRoaXMgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgcGh5c2lvbG9naWNhbENvbmRpdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBQb3B1bGF0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UG9wdWxhdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydhZ2UnXSkgeyB0aGlzLmFnZSA9IHNvdXJjZS5hZ2U7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnYWdlUmFuZ2UnXSkgeyB0aGlzLmFnZSA9IG5ldyBmaGlyLlJhbmdlKHNvdXJjZS5hZ2VSYW5nZSwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnYWdlQ29kZWFibGVDb25jZXB0J10pIHsgdGhpcy5hZ2UgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmFnZUNvZGVhYmxlQ29uY2VwdCwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2dlbmRlciddKSB7IHRoaXMuZ2VuZGVyID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5nZW5kZXIsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydyYWNlJ10pIHsgdGhpcy5yYWNlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5yYWNlLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGh5c2lvbG9naWNhbENvbmRpdGlvbiddKSB7IHRoaXMucGh5c2lvbG9naWNhbENvbmRpdGlvbiA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucGh5c2lvbG9naWNhbENvbmRpdGlvbiwgb3B0aW9ucyk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdQb3B1bGF0aW9uJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnYWdlJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdnZW5kZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3JhY2UnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3BoeXNpb2xvZ2ljYWxDb25kaXRpb24nLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuIl19