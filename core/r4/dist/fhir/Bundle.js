/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { resourceFactory } from '../fhir.js';
import { SearchEntryModeCodings } from '../fhirValueSets/SearchEntryModeCodings.js';
import { HttpVerbCodings } from '../fhirValueSets/HttpVerbCodings.js';
import { BundleTypeCodings } from '../fhirValueSets/BundleTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { Resource } from './Resource.js';
import { FhirString } from './FhirString.js';
import { FhirUri } from './FhirUri.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirInstant } from './FhirInstant.js';
import { Identifier } from './Identifier.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { Signature } from './Signature.js';

// <auto-generated/>
/**
 * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)).
 * Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
 * This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.
 */
var BundleLink = /** @class */ (function (_super) {
    __extends(BundleLink, _super);
    /**
     * Default constructor for BundleLink - initializes any required elements to null if a value is not provided.
     */
    function BundleLink(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['relation']) {
            _this.relation = new FhirString({ value: source.relation });
        }
        else {
            _this.relation = null;
        }
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BundleLink.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['relation']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property relation:fhir.FhirString fhir: Bundle.link.relation:string', }));
        }
        if (this["relation"]) {
            (_a = outcome.issue).push.apply(_a, this.relation.doModelValidation().issue);
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: Bundle.link.url:uri', }));
        }
        if (this["url"]) {
            (_b = outcome.issue).push.apply(_b, this.url.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BundleLink._fts_dataType = 'BundleLink';
    return BundleLink;
}(BackboneElement));
/**
 * Information about the search process that lead to the creation of this entry.
 */
var BundleEntrySearch = /** @class */ (function (_super) {
    __extends(BundleEntrySearch, _super);
    /**
     * Default constructor for BundleEntrySearch - initializes any required elements to null if a value is not provided.
     */
    function BundleEntrySearch(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['mode']) {
            _this.mode = source.mode;
        }
        if (source['score']) {
            _this.score = new FhirDecimal({ value: source.score });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for mode (Bundle.entry.search.mode)
     */
    BundleEntrySearch.modeRequiredCoding = function () {
        return SearchEntryModeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BundleEntrySearch.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["score"]) {
            (_a = outcome.issue).push.apply(_a, this.score.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BundleEntrySearch._fts_dataType = 'BundleEntrySearch';
    return BundleEntrySearch;
}(BackboneElement));
/**
 * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
 */
var BundleEntryRequest = /** @class */ (function (_super) {
    __extends(BundleEntryRequest, _super);
    /**
     * Default constructor for BundleEntryRequest - initializes any required elements to null if a value is not provided.
     */
    function BundleEntryRequest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['method']) {
            _this.method = source.method;
        }
        else {
            _this.method = null;
        }
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['ifNoneMatch']) {
            _this.ifNoneMatch = new FhirString({ value: source.ifNoneMatch });
        }
        if (source['ifModifiedSince']) {
            _this.ifModifiedSince = new FhirInstant({ value: source.ifModifiedSince });
        }
        if (source['ifMatch']) {
            _this.ifMatch = new FhirString({ value: source.ifMatch });
        }
        if (source['ifNoneExist']) {
            _this.ifNoneExist = new FhirString({ value: source.ifNoneExist });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for method (Bundle.entry.request.method)
     */
    BundleEntryRequest.methodRequiredCoding = function () {
        return HttpVerbCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BundleEntryRequest.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['method']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property method:HttpVerbCodeType fhir: Bundle.entry.request.method:code', }));
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: Bundle.entry.request.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["ifNoneMatch"]) {
            (_b = outcome.issue).push.apply(_b, this.ifNoneMatch.doModelValidation().issue);
        }
        if (this["ifModifiedSince"]) {
            (_c = outcome.issue).push.apply(_c, this.ifModifiedSince.doModelValidation().issue);
        }
        if (this["ifMatch"]) {
            (_d = outcome.issue).push.apply(_d, this.ifMatch.doModelValidation().issue);
        }
        if (this["ifNoneExist"]) {
            (_e = outcome.issue).push.apply(_e, this.ifNoneExist.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BundleEntryRequest._fts_dataType = 'BundleEntryRequest';
    return BundleEntryRequest;
}(BackboneElement));
/**
 * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
 */
var BundleEntryResponse = /** @class */ (function (_super) {
    __extends(BundleEntryResponse, _super);
    /**
     * Default constructor for BundleEntryResponse - initializes any required elements to null if a value is not provided.
     */
    function BundleEntryResponse(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = this;
        var _a;
        _this = _super.call(this, source, options) || this;
        if (source['status']) {
            _this.status = new FhirString({ value: source.status });
        }
        else {
            _this.status = null;
        }
        if (source['location']) {
            _this.location = new FhirUri({ value: source.location });
        }
        if (source['etag']) {
            _this.etag = new FhirString({ value: source.etag });
        }
        if (source['lastModified']) {
            _this.lastModified = new FhirInstant({ value: source.lastModified });
        }
        if (source['outcome']) {
            _this.outcome = ((_a = resourceFactory(source.outcome)) !== null && _a !== void 0 ? _a : undefined);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BundleEntryResponse.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:fhir.FhirString fhir: Bundle.entry.response.status:string', }));
        }
        if (this["status"]) {
            (_a = outcome.issue).push.apply(_a, this.status.doModelValidation().issue);
        }
        if (this["location"]) {
            (_b = outcome.issue).push.apply(_b, this.location.doModelValidation().issue);
        }
        if (this["etag"]) {
            (_c = outcome.issue).push.apply(_c, this.etag.doModelValidation().issue);
        }
        if (this["lastModified"]) {
            (_d = outcome.issue).push.apply(_d, this.lastModified.doModelValidation().issue);
        }
        if (this["outcome"]) {
            (_e = outcome.issue).push.apply(_e, this.outcome.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BundleEntryResponse._fts_dataType = 'BundleEntryResponse';
    return BundleEntryResponse;
}(BackboneElement));
/**
 * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
 */
var BundleEntry = /** @class */ (function (_super) {
    __extends(BundleEntry, _super);
    /**
     * Default constructor for BundleEntry - initializes any required elements to null if a value is not provided.
     */
    function BundleEntry(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = this;
        var _a;
        _this = _super.call(this, source, options) || this;
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new BundleLink(x); });
        }
        else {
            _this.link = [];
        }
        if (source['fullUrl']) {
            _this.fullUrl = new FhirUri({ value: source.fullUrl });
        }
        if (source['resource']) {
            _this.resource = ((_a = resourceFactory(source.resource)) !== null && _a !== void 0 ? _a : undefined);
        }
        if (source['search']) {
            _this.search = new BundleEntrySearch(source.search);
        }
        if (source['request']) {
            _this.request = new BundleEntryRequest(source.request);
        }
        if (source['response']) {
            _this.response = new BundleEntryResponse(source.response);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BundleEntry.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["fullUrl"]) {
            (_a = outcome.issue).push.apply(_a, this.fullUrl.doModelValidation().issue);
        }
        if (this["resource"]) {
            (_b = outcome.issue).push.apply(_b, this.resource.doModelValidation().issue);
        }
        if (this["search"]) {
            (_c = outcome.issue).push.apply(_c, this.search.doModelValidation().issue);
        }
        if (this["request"]) {
            (_d = outcome.issue).push.apply(_d, this.request.doModelValidation().issue);
        }
        if (this["response"]) {
            (_e = outcome.issue).push.apply(_e, this.response.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Access a bundle.entry[].resource as a typed resource
     */
    BundleEntry.prototype.resourceAs = function () {
        return this.resource;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BundleEntry._fts_dataType = 'BundleEntry';
    return BundleEntry;
}(BackboneElement));
/**
 * A container for a collection of resources.
 */
var Bundle = /** @class */ (function (_super) {
    __extends(Bundle, _super);
    /**
     * Default constructor for Bundle - initializes any required elements to null if a value is not provided.
     */
    function Bundle(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Bundle';
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['timestamp']) {
            _this.timestamp = new FhirInstant({ value: source.timestamp });
        }
        if (source['total']) {
            _this.total = new FhirUnsignedInt({ value: source.total });
        }
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new BundleLink(x); });
        }
        else {
            _this.link = [];
        }
        if (source['entry']) {
            _this.entry = source.entry.map(function (x) { return new BundleEntry(x); });
        }
        else {
            _this.entry = [];
        }
        if (source['signature']) {
            _this.signature = new Signature(source.signature);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (Bundle.type)
     */
    Bundle.typeRequiredCoding = function () {
        return BundleTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Bundle.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Bundle" fhir: Bundle.resourceType:"Bundle"', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:BundleTypeCodeType fhir: Bundle.type:code', }));
        }
        if (this["timestamp"]) {
            (_b = outcome.issue).push.apply(_b, this.timestamp.doModelValidation().issue);
        }
        if (this["total"]) {
            (_c = outcome.issue).push.apply(_c, this.total.doModelValidation().issue);
        }
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["entry"]) {
            this.entry.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["signature"]) {
            (_d = outcome.issue).push.apply(_d, this.signature.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Bundle._fts_dataType = 'Bundle';
    return Bundle;
}(Resource));

export { Bundle, BundleEntry, BundleEntryRequest, BundleEntryResponse, BundleEntrySearch, BundleLink };
//# sourceMappingURL=Bundle.js.map
