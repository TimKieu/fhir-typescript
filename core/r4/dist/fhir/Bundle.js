// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Bundle
import * as fhir from '../fhir.js';
// @ts-ignore
import { SearchEntryModeCodes } from '../fhirValueSets/SearchEntryModeCodes.js';
// @ts-ignore
import { HttpVerbCodes } from '../fhirValueSets/HttpVerbCodes.js';
// @ts-ignore
import { BundleTypeCodes } from '../fhirValueSets/BundleTypeCodes.js';
/**
 * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)).
 * Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
 * This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.
 */
export class BundleLink extends fhir.BackboneElement {
    /**
     * Default constructor for BundleLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relation']) {
            this.relation = new fhir.FhirString({ value: source.relation });
        }
        else {
            this.relation = null;
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['relation']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property relation:fhir.FhirString fhir: Bundle.link.relation:string' });
        }
        if (this["relation"]) {
            issues.push(...this.relation.doModelValidation());
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url:fhir.FhirUri fhir: Bundle.link.url:uri' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleLink._fts_dataType = 'BundleLink';
/**
 * Information about the search process that lead to the creation of this entry.
 */
export class BundleEntrySearch extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntrySearch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        if (source['score']) {
            this.score = new fhir.FhirDecimal({ value: source.score });
        }
    }
    /**
     * Required-bound Value Set for mode (Bundle.entry.search.mode)
     */
    static get modeRequiredCodes() {
        return SearchEntryModeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['mode'] && (!Object.values(SearchEntryModeCodes).includes(this.mode))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property mode?:fhir.FhirCode<SearchEntryModeCodeType> fhir: Bundle.entry.search.mode:code Required binding to: SearchEntryMode' });
        }
        if (this["mode"]) {
            issues.push(...this.mode.doModelValidation());
        }
        if (this["score"]) {
            issues.push(...this.score.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntrySearch._fts_dataType = 'BundleEntrySearch';
/**
 * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
 */
export class BundleEntryRequest extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['method']) {
            this.method = new fhir.FhirCode({ value: source.method });
        }
        else {
            this.method = null;
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['ifNoneMatch']) {
            this.ifNoneMatch = new fhir.FhirString({ value: source.ifNoneMatch });
        }
        if (source['ifModifiedSince']) {
            this.ifModifiedSince = new fhir.FhirInstant({ value: source.ifModifiedSince });
        }
        if (source['ifMatch']) {
            this.ifMatch = new fhir.FhirString({ value: source.ifMatch });
        }
        if (source['ifNoneExist']) {
            this.ifNoneExist = new fhir.FhirString({ value: source.ifNoneExist });
        }
    }
    /**
     * Required-bound Value Set for method (Bundle.entry.request.method)
     */
    static get methodRequiredCodes() {
        return HttpVerbCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['method']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property method:fhir.FhirCode<HttpVerbCodeType> fhir: Bundle.entry.request.method:code' });
        }
        if (this['method'] && (!Object.values(HttpVerbCodes).includes(this.method))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property method:fhir.FhirCode<HttpVerbCodeType> fhir: Bundle.entry.request.method:code Required binding to: HttpVerb' });
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation());
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url:fhir.FhirUri fhir: Bundle.entry.request.url:uri' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["ifNoneMatch"]) {
            issues.push(...this.ifNoneMatch.doModelValidation());
        }
        if (this["ifModifiedSince"]) {
            issues.push(...this.ifModifiedSince.doModelValidation());
        }
        if (this["ifMatch"]) {
            issues.push(...this.ifMatch.doModelValidation());
        }
        if (this["ifNoneExist"]) {
            issues.push(...this.ifNoneExist.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntryRequest._fts_dataType = 'BundleEntryRequest';
/**
 * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
 */
export class BundleEntryResponse extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntryResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirString({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['location']) {
            this.location = new fhir.FhirUri({ value: source.location });
        }
        if (source['etag']) {
            this.etag = new fhir.FhirString({ value: source.etag });
        }
        if (source['lastModified']) {
            this.lastModified = new fhir.FhirInstant({ value: source.lastModified });
        }
        if (source['outcome']) {
            this.outcome = (fhir.resourceFactory(source.outcome) ?? undefined);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirString fhir: Bundle.entry.response.status:string' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["etag"]) {
            issues.push(...this.etag.doModelValidation());
        }
        if (this["lastModified"]) {
            issues.push(...this.lastModified.doModelValidation());
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntryResponse._fts_dataType = 'BundleEntryResponse';
/**
 * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
 */
export class BundleEntry extends fhir.BackboneElement {
    /**
     * Default constructor for BundleEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        else {
            this.link = [];
        }
        if (source['fullUrl']) {
            this.fullUrl = new fhir.FhirUri({ value: source.fullUrl });
        }
        if (source['resource']) {
            this.resource = (fhir.resourceFactory(source.resource) ?? undefined);
        }
        if (source['search']) {
            this.search = new fhir.BundleEntrySearch(source.search);
        }
        if (source['request']) {
            this.request = new fhir.BundleEntryRequest(source.request);
        }
        if (source['response']) {
            this.response = new fhir.BundleEntryResponse(source.response);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["link"]) {
            this.link.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["fullUrl"]) {
            issues.push(...this.fullUrl.doModelValidation());
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation());
        }
        if (this["search"]) {
            issues.push(...this.search.doModelValidation());
        }
        if (this["request"]) {
            issues.push(...this.request.doModelValidation());
        }
        if (this["response"]) {
            issues.push(...this.response.doModelValidation());
        }
        return issues;
    }
    /**
     * Access a bundle.entry[].resource as a typed resource
     */
    resourceAs() {
        return this.resource;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BundleEntry._fts_dataType = 'BundleEntry';
/**
 * A container for a collection of resources.
 */
export class Bundle extends fhir.Resource {
    /**
     * Default constructor for Bundle - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Bundle';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['timestamp']) {
            this.timestamp = new fhir.FhirInstant({ value: source.timestamp });
        }
        if (source['total']) {
            this.total = new fhir.FhirUnsignedInt({ value: source.total });
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.BundleLink(x));
        }
        else {
            this.link = [];
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.BundleEntry(x));
        }
        else {
            this.entry = [];
        }
        if (source['signature']) {
            this.signature = new fhir.Signature(source.signature);
        }
    }
    /**
     * Required-bound Value Set for type (Bundle.type)
     */
    static get typeRequiredCodes() {
        return BundleTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Bundle" fhir: Bundle.resourceType:"Bundle"' });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<BundleTypeCodeType> fhir: Bundle.type:code' });
        }
        if (this['type'] && (!Object.values(BundleTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<BundleTypeCodeType> fhir: Bundle.type:code Required binding to: BundleType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["timestamp"]) {
            issues.push(...this.timestamp.doModelValidation());
        }
        if (this["total"]) {
            issues.push(...this.total.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["entry"]) {
            this.entry.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["signature"]) {
            issues.push(...this.signature.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Bundle._fts_dataType = 'Bundle';
//# sourceMappingURL=data:application/json;base64,