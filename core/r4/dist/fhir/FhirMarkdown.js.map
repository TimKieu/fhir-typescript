{"version":3,"file":"FhirMarkdown.js","sources":["../../src/fhir/FhirMarkdown.ts"],"sourcesContent":["// Minimum TypeScript Version: 3.7\r\n// FHIR Primitive: markdown\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n\r\n/**\r\n * Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/\r\n */\r\nexport interface FhirMarkdownArgs extends fhir.FhirStringArgs {\r\n  /**\r\n   * Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/\r\n   */\r\n  value?:FhirMarkdown|string|undefined;\r\n}\r\n\r\n/**\r\n * Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/\r\n */\r\nexport class FhirMarkdown extends fhir.FhirString {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Markdown';\r\n  /**\r\n   * Mapping of this datatype to a JSON equivalent\r\n   */\r\n  public static readonly _fts_jsonType:string = 'string';\r\n  // published regex: [ \\r\\n\\t\\S]+\r\n  public static readonly _fts_regex:RegExp = /^[ \\r\\n\\t\\S]+$/\r\n  /**\r\n   * A markdown value, represented as a JS string\r\n   */\r\n  declare value?:string|null|undefined;\r\n  /**\r\n     * Create a FhirMarkdown\r\n     * @param value Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/\r\n     * @param id Unique id for inter-element referencing (uncommon on primitives)\r\n     * @param extension Additional content defined by implementations\r\n     * @param options Options to pass to extension constructors\r\n  */\r\n  constructor(source:Partial<FhirMarkdownArgs> = {}, options:fhir.FhirConstructorOptions = { } ) {\r\n    super(source, options);\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if ((this.value) && (!FhirMarkdown._fts_regex.test(this.value))) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.InvalidContent,  diagnostics: \"Invalid value in primitive type markdown\", }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.OperationOutcomeIssue","fhir.FhirString"],"mappings":";;;;;;;;AAAA;AAkBA;;AAEG;AACH,IAAA,YAAA,kBAAA,UAAA,MAAA,EAAA;IAAkC,SAAe,CAAA,YAAA,EAAA,MAAA,CAAA,CAAA;AAe/C;;;;;;AAME;IACF,SAAY,YAAA,CAAA,MAAqC,EAAE,OAAyC,EAAA;AAAhF,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAqC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAyC,GAAA,EAAA,CAAA,EAAA;eAC1F,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAAA,IAAA,CAAA;KACvB;AACD;;AAEG;AACa,IAAA,YAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC/D,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,cAAc,EAAG,WAAW,EAAE,0CAA0C,GAAG,CAAC,CAAC,CAAC;AAC7L,SAAA;AACD,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAjCD;;AAEG;IACoB,YAAa,CAAA,aAAA,GAAU,UAAU,CAAC;AACzD;;AAEG;IACoB,YAAa,CAAA,aAAA,GAAU,QAAQ,CAAC;;IAEhC,YAAU,CAAA,UAAA,GAAU,gBAAgB,CAAA;IAyB7D,OAAC,YAAA,CAAA;AAAA,CAnCD,CAAkCC,UAAe,CAmChD;;;;"}