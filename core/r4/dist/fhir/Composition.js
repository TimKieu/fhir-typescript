// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Composition
import * as fhir from '../fhir.js';
// @ts-ignore
import { CompositionAttestationModeCodings, } from '../fhirValueSets/CompositionAttestationModeCodings.js';
// @ts-ignore
import { DocumentRelationshipTypeCodings, } from '../fhirValueSets/DocumentRelationshipTypeCodings.js';
// @ts-ignore
import { ListModeCodings, } from '../fhirValueSets/ListModeCodings.js';
// @ts-ignore
import { ListOrderCodings, } from '../fhirValueSets/ListOrderCodings.js';
// @ts-ignore
import { ListEmptyReasonCodings, } from '../fhirValueSets/ListEmptyReasonCodings.js';
// @ts-ignore
import { CompositionStatusCodings, } from '../fhirValueSets/CompositionStatusCodings.js';
// @ts-ignore
import { DocTypecodesCodings, } from '../fhirValueSets/DocTypecodesCodings.js';
// @ts-ignore
import { V3ConfidentialityClassificationCodings, } from '../fhirValueSets/V3ConfidentialityClassificationCodings.js';
/**
 * Only list each attester once.
 */
export class CompositionAttester extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionAttester - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = source.mode;
        }
        else {
            this.mode = null;
        }
        if (source['time']) {
            this.time = new fhir.FhirDateTime({ value: source.time });
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Required-bound Value Set for mode (Composition.attester.mode)
     */
    static modeRequiredCoding() {
        return CompositionAttestationModeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode:CompositionAttestationModeCodeType fhir: Composition.attester.mode:code', });
        }
        if (this["time"]) {
            issues.push(...this.time.doModelValidation());
        }
        if (this["party"]) {
            issues.push(...this.party.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CompositionAttester._fts_dataType = 'CompositionAttester';
/**
 * A document is a version specific composition.
 */
export class CompositionRelatesTo extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionRelatesTo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code;
        }
        else {
            this.code = null;
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetIdentifier']) {
            this.target = new fhir.Identifier(source.targetIdentifier);
        }
        else if (source['targetReference']) {
            this.target = new fhir.Reference(source.targetReference);
        }
        else {
            this.target = null;
        }
    }
    /**
     * Required-bound Value Set for code (Composition.relatesTo.code)
     */
    static codeRequiredCoding() {
        return DocumentRelationshipTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:DocumentRelationshipTypeCodeType fhir: Composition.relatesTo.code:code', });
        }
        if (!this['target']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target: fhir: Composition.relatesTo.target[x]:', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CompositionRelatesTo._fts_dataType = 'CompositionRelatesTo';
/**
 * Internal flag to properly serialize choice-type element Composition.relatesTo.target[x]
 */
CompositionRelatesTo._fts_targetIsChoice = true;
/**
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
export class CompositionEvent extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CompositionEvent._fts_dataType = 'CompositionEvent';
/**
 * The root of the sections that make up the composition.
 */
export class CompositionSection extends fhir.BackboneElement {
    /**
     * Default constructor for CompositionSection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['focus']) {
            this.focus = new fhir.Reference(source.focus);
        }
        if (source['text']) {
            this.text = new fhir.Narrative(source.text);
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        if (source['orderedBy']) {
            this.orderedBy = new fhir.CodeableConcept(source.orderedBy);
        }
        if (source['entry']) {
            this.entry = source.entry.map((x) => new fhir.Reference(x));
        }
        else {
            this.entry = [];
        }
        if (source['emptyReason']) {
            this.emptyReason = new fhir.CodeableConcept(source.emptyReason);
        }
        if (source['section']) {
            this.section = source.section.map((x) => new fhir.CompositionSection(x));
        }
        else {
            this.section = [];
        }
    }
    /**
     * Required-bound Value Set for mode (Composition.section.mode)
     */
    static modeRequiredCoding() {
        return ListModeCodings;
    }
    /**
     * Preferred-bound Value Set for orderedBy (Composition.section.orderedBy)
     */
    static orderedByPreferredCoding() {
        return ListOrderCodings;
    }
    /**
     * Preferred-bound Value Set for emptyReason (Composition.section.emptyReason)
     */
    static emptyReasonPreferredCoding() {
        return ListEmptyReasonCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["focus"]) {
            issues.push(...this.focus.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["orderedBy"]) {
            issues.push(...this.orderedBy.doModelValidation());
        }
        if (this["entry"]) {
            this.entry.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["emptyReason"]) {
            issues.push(...this.emptyReason.doModelValidation());
        }
        if (this["section"]) {
            this.section.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CompositionSection._fts_dataType = 'CompositionSection';
/**
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 */
export class Composition extends fhir.DomainResource {
    /**
     * Default constructor for Composition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Composition';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['confidentiality']) {
            this.confidentiality = new fhir.FhirCode({ value: source.confidentiality });
        }
        if (source['attester']) {
            this.attester = source.attester.map((x) => new fhir.CompositionAttester(x));
        }
        else {
            this.attester = [];
        }
        if (source['custodian']) {
            this.custodian = new fhir.Reference(source.custodian);
        }
        if (source['relatesTo']) {
            this.relatesTo = source.relatesTo.map((x) => new fhir.CompositionRelatesTo(x));
        }
        else {
            this.relatesTo = [];
        }
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.CompositionEvent(x));
        }
        else {
            this.event = [];
        }
        if (source['section']) {
            this.section = source.section.map((x) => new fhir.CompositionSection(x));
        }
        else {
            this.section = [];
        }
    }
    /**
     * Required-bound Value Set for status (Composition.status)
     */
    static statusRequiredCoding() {
        return CompositionStatusCodings;
    }
    /**
     * Preferred-bound Value Set for type (Composition.type)
     */
    static typePreferredCoding() {
        return DocTypecodesCodings;
    }
    /**
     * Required-bound Value Set for confidentiality (Composition.confidentiality)
     */
    static confidentialityRequiredCoding() {
        return V3ConfidentialityClassificationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Composition" fhir: Composition.resourceType:"Composition"', });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:CompositionStatusCodeType fhir: Composition.status:code', });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Composition.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (!this['date']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: Composition.date:dateTime', });
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (!this['author']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property author:fhir.Reference[] fhir: Composition.author:Reference', });
        }
        else if (!Array.isArray(this.author)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property author:fhir.Reference[] fhir: Composition.author:Reference', });
        }
        else if (this.author.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property author:fhir.Reference[] fhir: Composition.author:Reference', });
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['title']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property title:fhir.FhirString fhir: Composition.title:string', });
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["confidentiality"]) {
            issues.push(...this.confidentiality.doModelValidation());
        }
        if (this["attester"]) {
            this.attester.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["custodian"]) {
            issues.push(...this.custodian.doModelValidation());
        }
        if (this["relatesTo"]) {
            this.relatesTo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["event"]) {
            this.event.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["section"]) {
            this.section.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Composition._fts_dataType = 'Composition';
//# sourceMappingURL=data:application/json;base64,