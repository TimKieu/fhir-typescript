// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchStudy
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResearchStudyObjectiveTypeCodings, } from '../fhirValueSets/ResearchStudyObjectiveTypeCodings.js';
// @ts-ignore
import { ResearchStudyStatusCodes } from '../fhirValueSets/ResearchStudyStatusCodes.js';
// @ts-ignore
import { ResearchStudyPrimPurpTypeCodings, } from '../fhirValueSets/ResearchStudyPrimPurpTypeCodings.js';
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
export class ResearchStudyArm extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyArm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ResearchStudy.arm';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: ResearchStudy.arm.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudyArm._fts_dataType = 'ResearchStudyArm';
/**
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
export class ResearchStudyObjective extends fhir.BackboneElement {
    /**
     * Default constructor for ResearchStudyObjective - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
    }
    /**
     * Preferred-bound Value Set for type (ResearchStudy.objective.type)
     */
    static get typePreferredCodings() {
        return ResearchStudyObjectiveTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ResearchStudy.objective';
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudyObjective._fts_dataType = 'ResearchStudyObjective';
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
export class ResearchStudy extends fhir.DomainResource {
    /**
     * Default constructor for ResearchStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ResearchStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['protocol']) {
            this.protocol = source.protocol.map((x) => new fhir.Reference(x));
        }
        else {
            this.protocol = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['primaryPurposeType']) {
            this.primaryPurposeType = new fhir.CodeableConcept(source.primaryPurposeType);
        }
        if (source['phase']) {
            this.phase = new fhir.CodeableConcept(source.phase);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.focus = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.condition = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['keyword']) {
            this.keyword = source.keyword.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.keyword = [];
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.location = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['enrollment']) {
            this.enrollment = source.enrollment.map((x) => new fhir.Reference(x));
        }
        else {
            this.enrollment = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['sponsor']) {
            this.sponsor = new fhir.Reference(source.sponsor);
        }
        if (source['principalInvestigator']) {
            this.principalInvestigator = new fhir.Reference(source.principalInvestigator);
        }
        if (source['site']) {
            this.site = source.site.map((x) => new fhir.Reference(x));
        }
        else {
            this.site = [];
        }
        if (source['reasonStopped']) {
            this.reasonStopped = new fhir.CodeableConcept(source.reasonStopped);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['arm']) {
            this.arm = source.arm.map((x) => new fhir.ResearchStudyArm(x));
        }
        else {
            this.arm = [];
        }
        if (source['objective']) {
            this.objective = source.objective.map((x) => new fhir.ResearchStudyObjective(x));
        }
        else {
            this.objective = [];
        }
    }
    /**
     * Required-bound Value Set for status (ResearchStudy.status)
     */
    static get statusRequiredCodes() {
        return ResearchStudyStatusCodes;
    }
    /**
     * Extensible-bound Value Set for primaryPurposeType (ResearchStudy.primaryPurposeType)
     */
    static get primaryPurposeTypeExtensibleCodings() {
        return ResearchStudyPrimPurpTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ResearchStudy';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: ResearchStudy.resourceType:"ResearchStudy"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (this["protocol"]) {
            this.protocol.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.protocol[${i}]`)); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.partOf[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: ResearchStudy.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(ResearchStudyStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: ResearchStudy.status:code Required binding to: ResearchStudyStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["primaryPurposeType"]) {
            issues.push(...this.primaryPurposeType.doModelValidation(expression + '.primaryPurposeType'));
        }
        if (this["phase"]) {
            issues.push(...this.phase.doModelValidation(expression + '.phase'));
        }
        if (this["category"]) {
            this.category.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.category[${i}]`)); });
        }
        if (this["focus"]) {
            this.focus.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.focus[${i}]`)); });
        }
        if (this["condition"]) {
            this.condition.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.condition[${i}]`)); });
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.relatedArtifact[${i}]`)); });
        }
        if (this["keyword"]) {
            this.keyword.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.keyword[${i}]`)); });
        }
        if (this["location"]) {
            this.location.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.location[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["enrollment"]) {
            this.enrollment.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.enrollment[${i}]`)); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        if (this["sponsor"]) {
            issues.push(...this.sponsor.doModelValidation(expression + '.sponsor'));
        }
        if (this["principalInvestigator"]) {
            issues.push(...this.principalInvestigator.doModelValidation(expression + '.principalInvestigator'));
        }
        if (this["site"]) {
            this.site.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.site[${i}]`)); });
        }
        if (this["reasonStopped"]) {
            issues.push(...this.reasonStopped.doModelValidation(expression + '.reasonStopped'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["arm"]) {
            this.arm.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.arm[${i}]`)); });
        }
        if (this["objective"]) {
            this.objective.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.objective[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchStudy._fts_dataType = 'ResearchStudy';
//# sourceMappingURL=data:application/json;base64,