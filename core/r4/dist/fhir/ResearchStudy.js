/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ResearchStudyObjectiveTypeCodings } from '../fhirValueSets/ResearchStudyObjectiveTypeCodings.js';
import { ResearchStudyStatusCodings } from '../fhirValueSets/ResearchStudyStatusCodings.js';
import { ResearchStudyPrimPurpTypeCodings } from '../fhirValueSets/ResearchStudyPrimPurpTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { ContactDetail } from './ContactDetail.js';
import { RelatedArtifact } from './RelatedArtifact.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { Period } from './Period.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
var ResearchStudyArm = /** @class */ (function (_super) {
    __extends(ResearchStudyArm, _super);
    /**
     * Default constructor for ResearchStudyArm - initializes any required elements to null if a value is not provided.
     */
    function ResearchStudyArm(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ResearchStudyArm.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: ResearchStudy.arm.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ResearchStudyArm._fts_dataType = 'ResearchStudyArm';
    return ResearchStudyArm;
}(BackboneElement));
/**
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
var ResearchStudyObjective = /** @class */ (function (_super) {
    __extends(ResearchStudyObjective, _super);
    /**
     * Default constructor for ResearchStudyObjective - initializes any required elements to null if a value is not provided.
     */
    function ResearchStudyObjective(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for type (ResearchStudy.objective.type)
     */
    ResearchStudyObjective.typePreferredCoding = function () {
        return ResearchStudyObjectiveTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ResearchStudyObjective.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ResearchStudyObjective._fts_dataType = 'ResearchStudyObjective';
    return ResearchStudyObjective;
}(BackboneElement));
/**
 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
 */
var ResearchStudy = /** @class */ (function (_super) {
    __extends(ResearchStudy, _super);
    /**
     * Default constructor for ResearchStudy - initializes any required elements to null if a value is not provided.
     */
    function ResearchStudy(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ResearchStudy';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['protocol']) {
            _this.protocol = source.protocol.map(function (x) { return new Reference(x); });
        }
        else {
            _this.protocol = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['primaryPurposeType']) {
            _this.primaryPurposeType = new CodeableConcept(source.primaryPurposeType);
        }
        if (source['phase']) {
            _this.phase = new CodeableConcept(source.phase);
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['focus']) {
            _this.focus = source.focus.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.focus = [];
        }
        if (source['condition']) {
            _this.condition = source.condition.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.condition = [];
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['relatedArtifact']) {
            _this.relatedArtifact = source.relatedArtifact.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.relatedArtifact = [];
        }
        if (source['keyword']) {
            _this.keyword = source.keyword.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.keyword = [];
        }
        if (source['location']) {
            _this.location = source.location.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.location = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['enrollment']) {
            _this.enrollment = source.enrollment.map(function (x) { return new Reference(x); });
        }
        else {
            _this.enrollment = [];
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['sponsor']) {
            _this.sponsor = new Reference(source.sponsor);
        }
        if (source['principalInvestigator']) {
            _this.principalInvestigator = new Reference(source.principalInvestigator);
        }
        if (source['site']) {
            _this.site = source.site.map(function (x) { return new Reference(x); });
        }
        else {
            _this.site = [];
        }
        if (source['reasonStopped']) {
            _this.reasonStopped = new CodeableConcept(source.reasonStopped);
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['arm']) {
            _this.arm = source.arm.map(function (x) { return new ResearchStudyArm(x); });
        }
        else {
            _this.arm = [];
        }
        if (source['objective']) {
            _this.objective = source.objective.map(function (x) { return new ResearchStudyObjective(x); });
        }
        else {
            _this.objective = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ResearchStudy.status)
     */
    ResearchStudy.statusRequiredCoding = function () {
        return ResearchStudyStatusCodings;
    };
    /**
     * Extensible-bound Value Set for primaryPurposeType (ResearchStudy.primaryPurposeType)
     */
    ResearchStudy.primaryPurposeTypeExtensibleCoding = function () {
        return ResearchStudyPrimPurpTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ResearchStudy.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ResearchStudy" fhir: ResearchStudy.resourceType:"ResearchStudy"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["title"]) {
            (_a = outcome.issue).push.apply(_a, this.title.doModelValidation().issue);
        }
        if (this["protocol"]) {
            this.protocol.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ResearchStudyStatusCodeType fhir: ResearchStudy.status:code', }));
        }
        if (this["primaryPurposeType"]) {
            (_b = outcome.issue).push.apply(_b, this.primaryPurposeType.doModelValidation().issue);
        }
        if (this["phase"]) {
            (_c = outcome.issue).push.apply(_c, this.phase.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["focus"]) {
            this.focus.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["condition"]) {
            this.condition.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["keyword"]) {
            this.keyword.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["location"]) {
            this.location.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_d = outcome.issue).push.apply(_d, this.description.doModelValidation().issue);
        }
        if (this["enrollment"]) {
            this.enrollment.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["period"]) {
            (_e = outcome.issue).push.apply(_e, this.period.doModelValidation().issue);
        }
        if (this["sponsor"]) {
            (_f = outcome.issue).push.apply(_f, this.sponsor.doModelValidation().issue);
        }
        if (this["principalInvestigator"]) {
            (_g = outcome.issue).push.apply(_g, this.principalInvestigator.doModelValidation().issue);
        }
        if (this["site"]) {
            this.site.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonStopped"]) {
            (_h = outcome.issue).push.apply(_h, this.reasonStopped.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["arm"]) {
            this.arm.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["objective"]) {
            this.objective.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ResearchStudy._fts_dataType = 'ResearchStudy';
    return ResearchStudy;
}(DomainResource));

export { ResearchStudy, ResearchStudyArm, ResearchStudyObjective };
//# sourceMappingURL=ResearchStudy.js.map
