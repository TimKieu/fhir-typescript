// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TerminologyCapabilities
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { CapabilityStatementKindVsValidation } from '../fhirValueSets/CapabilityStatementKindVsValidation.js';
// @ts-ignore
import { CodeSearchSupportVsValidation } from '../fhirValueSets/CodeSearchSupportVsValidation.js';
/**
 * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
 */
export class TerminologyCapabilitiesSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.software';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('version', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesSoftware._fts_dataType = 'TerminologyCapabilitiesSoftware';
/**
 * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class TerminologyCapabilitiesImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUrl(source._url);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.implementation';
        }
        iss.push(...this.vRS('description', exp));
        iss.push(...this.vOS('url', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesImplementation._fts_dataType = 'TerminologyCapabilitiesImplementation';
/**
 * Filter Properties supported.
 */
export class TerminologyCapabilitiesCodeSystemVersionFilter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersionFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['op']) {
            this.op = source.op.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.op = [];
        }
        if (source['_op']) {
            source._op.forEach((x, i) => {
                if (this.op.length >= i) {
                    if (x) {
                        this.op[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.op.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.codeSystem.version.filter';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRA('op', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystemVersionFilter._fts_dataType = 'TerminologyCapabilitiesCodeSystemVersionFilter';
/**
 * Language translations might not be available for all codes.
 */
export class TerminologyCapabilitiesCodeSystemVersion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirString({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirString(source._code);
            }
        }
        if (source['isDefault']) {
            this.isDefault = new fhir.FhirBoolean({ value: source.isDefault });
        }
        if (source['_isDefault']) {
            if (this.isDefault) {
                this.isDefault.addExtendedProperties(source._isDefault);
            }
            else {
                this.isDefault = new fhir.FhirBoolean(source._isDefault);
            }
        }
        if (source['compositional']) {
            this.compositional = new fhir.FhirBoolean({ value: source.compositional });
        }
        if (source['_compositional']) {
            if (this.compositional) {
                this.compositional.addExtendedProperties(source._compositional);
            }
            else {
                this.compositional = new fhir.FhirBoolean(source._compositional);
            }
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.language = [];
        }
        if (source['_language']) {
            source._language.forEach((x, i) => {
                if (this.language.length >= i) {
                    if (x) {
                        this.language[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.language.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersionFilter(x));
        }
        else {
            this.filter = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.property = [];
        }
        if (source['_property']) {
            source._property.forEach((x, i) => {
                if (this.property.length >= i) {
                    if (x) {
                        this.property[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.property.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.codeSystem.version';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('isDefault', exp));
        iss.push(...this.vOS('compositional', exp));
        iss.push(...this.vOA('language', exp));
        iss.push(...this.vOA('filter', exp));
        iss.push(...this.vOA('property', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystemVersion._fts_dataType = 'TerminologyCapabilitiesCodeSystemVersion';
/**
 * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
 */
export class TerminologyCapabilitiesCodeSystem extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uri']) {
            this.uri = new fhir.FhirCanonical({ value: source.uri });
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirCanonical(source._uri);
            }
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersion(x));
        }
        else {
            this.version = [];
        }
        if (source['subsumption']) {
            this.subsumption = new fhir.FhirBoolean({ value: source.subsumption });
        }
        if (source['_subsumption']) {
            if (this.subsumption) {
                this.subsumption.addExtendedProperties(source._subsumption);
            }
            else {
                this.subsumption = new fhir.FhirBoolean(source._subsumption);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.codeSystem';
        }
        iss.push(...this.vOS('uri', exp));
        iss.push(...this.vOA('version', exp));
        iss.push(...this.vOS('subsumption', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystem._fts_dataType = 'TerminologyCapabilitiesCodeSystem';
/**
 * Supported expansion parameter.
 */
export class TerminologyCapabilitiesExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirCode({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirCode(source._name);
            }
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
        if (source['_documentation']) {
            if (this.documentation) {
                this.documentation.addExtendedProperties(source._documentation);
            }
            else {
                this.documentation = new fhir.FhirString(source._documentation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.expansion.parameter';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('documentation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesExpansionParameter._fts_dataType = 'TerminologyCapabilitiesExpansionParameter';
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
 */
export class TerminologyCapabilitiesExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['hierarchical']) {
            this.hierarchical = new fhir.FhirBoolean({ value: source.hierarchical });
        }
        if (source['_hierarchical']) {
            if (this.hierarchical) {
                this.hierarchical.addExtendedProperties(source._hierarchical);
            }
            else {
                this.hierarchical = new fhir.FhirBoolean(source._hierarchical);
            }
        }
        if (source['paging']) {
            this.paging = new fhir.FhirBoolean({ value: source.paging });
        }
        if (source['_paging']) {
            if (this.paging) {
                this.paging.addExtendedProperties(source._paging);
            }
            else {
                this.paging = new fhir.FhirBoolean(source._paging);
            }
        }
        if (source['incomplete']) {
            this.incomplete = new fhir.FhirBoolean({ value: source.incomplete });
        }
        if (source['_incomplete']) {
            if (this.incomplete) {
                this.incomplete.addExtendedProperties(source._incomplete);
            }
            else {
                this.incomplete = new fhir.FhirBoolean(source._incomplete);
            }
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.TerminologyCapabilitiesExpansionParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['textFilter']) {
            this.textFilter = new fhir.FhirMarkdown({ value: source.textFilter });
        }
        if (source['_textFilter']) {
            if (this.textFilter) {
                this.textFilter.addExtendedProperties(source._textFilter);
            }
            else {
                this.textFilter = new fhir.FhirMarkdown(source._textFilter);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.expansion';
        }
        iss.push(...this.vOS('hierarchical', exp));
        iss.push(...this.vOS('paging', exp));
        iss.push(...this.vOS('incomplete', exp));
        iss.push(...this.vOA('parameter', exp));
        iss.push(...this.vOS('textFilter', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesExpansion._fts_dataType = 'TerminologyCapabilitiesExpansion';
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
export class TerminologyCapabilitiesValidateCode extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesValidateCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['translations']) {
            this.translations = new fhir.FhirBoolean({ value: source.translations });
        }
        else {
            this.translations = null;
        }
        if (source['_translations']) {
            if (this.translations) {
                this.translations.addExtendedProperties(source._translations);
            }
            else {
                this.translations = new fhir.FhirBoolean(source._translations);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.validateCode';
        }
        iss.push(...this.vRS('translations', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesValidateCode._fts_dataType = 'TerminologyCapabilitiesValidateCode';
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
export class TerminologyCapabilitiesTranslation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesTranslation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['needsMap']) {
            this.needsMap = new fhir.FhirBoolean({ value: source.needsMap });
        }
        else {
            this.needsMap = null;
        }
        if (source['_needsMap']) {
            if (this.needsMap) {
                this.needsMap.addExtendedProperties(source._needsMap);
            }
            else {
                this.needsMap = new fhir.FhirBoolean(source._needsMap);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.translation';
        }
        iss.push(...this.vRS('needsMap', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesTranslation._fts_dataType = 'TerminologyCapabilitiesTranslation';
/**
 * Whether the $closure operation is supported.
 */
export class TerminologyCapabilitiesClosure extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesClosure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['translation']) {
            this.translation = new fhir.FhirBoolean({ value: source.translation });
        }
        if (source['_translation']) {
            if (this.translation) {
                this.translation.addExtendedProperties(source._translation);
            }
            else {
                this.translation = new fhir.FhirBoolean(source._translation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities.closure';
        }
        iss.push(...this.vOS('translation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesClosure._fts_dataType = 'TerminologyCapabilitiesClosure';
/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class TerminologyCapabilities extends fhir.DomainResource {
    /**
     * Default constructor for TerminologyCapabilities - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TerminologyCapabilities';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['software']) {
            this.software = new fhir.TerminologyCapabilitiesSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.TerminologyCapabilitiesImplementation(source.implementation);
        }
        if (source['lockedDate']) {
            this.lockedDate = new fhir.FhirBoolean({ value: source.lockedDate });
        }
        if (source['_lockedDate']) {
            if (this.lockedDate) {
                this.lockedDate.addExtendedProperties(source._lockedDate);
            }
            else {
                this.lockedDate = new fhir.FhirBoolean(source._lockedDate);
            }
        }
        if (source['codeSystem']) {
            this.codeSystem = source.codeSystem.map((x) => new fhir.TerminologyCapabilitiesCodeSystem(x));
        }
        else {
            this.codeSystem = [];
        }
        if (source['expansion']) {
            this.expansion = new fhir.TerminologyCapabilitiesExpansion(source.expansion);
        }
        if (source['codeSearch']) {
            this.codeSearch = new fhir.FhirCode({ value: source.codeSearch });
        }
        if (source['_codeSearch']) {
            if (this.codeSearch) {
                this.codeSearch.addExtendedProperties(source._codeSearch);
            }
            else {
                this.codeSearch = new fhir.FhirCode(source._codeSearch);
            }
        }
        if (source['validateCode']) {
            this.validateCode = new fhir.TerminologyCapabilitiesValidateCode(source.validateCode);
        }
        if (source['translation']) {
            this.translation = new fhir.TerminologyCapabilitiesTranslation(source.translation);
        }
        if (source['closure']) {
            this.closure = new fhir.TerminologyCapabilitiesClosure(source.closure);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TerminologyCapabilities';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vRSV('kind', exp, 'CapabilityStatementKind', CapabilityStatementKindVsValidation, 'r'));
        iss.push(...this.vOS('software', exp));
        iss.push(...this.vOS('implementation', exp));
        iss.push(...this.vOS('lockedDate', exp));
        iss.push(...this.vOA('codeSystem', exp));
        iss.push(...this.vOS('expansion', exp));
        iss.push(...this.vOSV('codeSearch', exp, 'CodeSearchSupport', CodeSearchSupportVsValidation, 'r'));
        iss.push(...this.vOS('validateCode', exp));
        iss.push(...this.vOS('translation', exp));
        iss.push(...this.vOS('closure', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilities._fts_dataType = 'TerminologyCapabilities';
//# sourceMappingURL=data:application/json;base64,