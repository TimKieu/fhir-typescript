// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TerminologyCapabilities
import * as fhir from '../fhir.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { CapabilityStatementKindCodes } from '../fhirValueSets/CapabilityStatementKindCodes.js';
// @ts-ignore
import { CodeSearchSupportCodes } from '../fhirValueSets/CodeSearchSupportCodes.js';
/**
 * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
 */
export class TerminologyCapabilitiesSoftware extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesSoftware - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: TerminologyCapabilities.software.name:string' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesSoftware._fts_dataType = 'TerminologyCapabilitiesSoftware';
/**
 * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export class TerminologyCapabilitiesImplementation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesImplementation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['description']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description:fhir.FhirString fhir: TerminologyCapabilities.implementation.description:string' });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesImplementation._fts_dataType = 'TerminologyCapabilitiesImplementation';
/**
 * Filter Properties supported.
 */
export class TerminologyCapabilitiesCodeSystemVersionFilter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersionFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['op']) {
            this.op = source.op.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.op = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.FhirCode fhir: TerminologyCapabilities.codeSystem.version.filter.code:code' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (!this['op']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property op:fhir.FhirCode[] fhir: TerminologyCapabilities.codeSystem.version.filter.op:code' });
        }
        else if (!Array.isArray(this.op)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property op:fhir.FhirCode[] fhir: TerminologyCapabilities.codeSystem.version.filter.op:code' });
        }
        else if (this.op.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property op:fhir.FhirCode[] fhir: TerminologyCapabilities.codeSystem.version.filter.op:code' });
        }
        if (this["op"]) {
            this.op.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystemVersionFilter._fts_dataType = 'TerminologyCapabilitiesCodeSystemVersionFilter';
/**
 * Language translations might not be available for all codes.
 */
export class TerminologyCapabilitiesCodeSystemVersion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystemVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirString({ value: source.code });
        }
        if (source['isDefault']) {
            this.isDefault = new fhir.FhirBoolean({ value: source.isDefault });
        }
        if (source['compositional']) {
            this.compositional = new fhir.FhirBoolean({ value: source.compositional });
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.language = [];
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersionFilter(x));
        }
        else {
            this.filter = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.property = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["isDefault"]) {
            issues.push(...this.isDefault.doModelValidation());
        }
        if (this["compositional"]) {
            issues.push(...this.compositional.doModelValidation());
        }
        if (this["language"]) {
            this.language.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["filter"]) {
            this.filter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystemVersion._fts_dataType = 'TerminologyCapabilitiesCodeSystemVersion';
/**
 * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
 */
export class TerminologyCapabilitiesCodeSystem extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesCodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uri']) {
            this.uri = new fhir.FhirCanonical({ value: source.uri });
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.TerminologyCapabilitiesCodeSystemVersion(x));
        }
        else {
            this.version = [];
        }
        if (source['subsumption']) {
            this.subsumption = new fhir.FhirBoolean({ value: source.subsumption });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation());
        }
        if (this["version"]) {
            this.version.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subsumption"]) {
            issues.push(...this.subsumption.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesCodeSystem._fts_dataType = 'TerminologyCapabilitiesCodeSystem';
/**
 * Supported expansion parameter.
 */
export class TerminologyCapabilitiesExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirCode({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['documentation']) {
            this.documentation = new fhir.FhirString({ value: source.documentation });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirCode fhir: TerminologyCapabilities.expansion.parameter.name:code' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["documentation"]) {
            issues.push(...this.documentation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesExpansionParameter._fts_dataType = 'TerminologyCapabilitiesExpansionParameter';
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
 */
export class TerminologyCapabilitiesExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['hierarchical']) {
            this.hierarchical = new fhir.FhirBoolean({ value: source.hierarchical });
        }
        if (source['paging']) {
            this.paging = new fhir.FhirBoolean({ value: source.paging });
        }
        if (source['incomplete']) {
            this.incomplete = new fhir.FhirBoolean({ value: source.incomplete });
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.TerminologyCapabilitiesExpansionParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['textFilter']) {
            this.textFilter = new fhir.FhirMarkdown({ value: source.textFilter });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["hierarchical"]) {
            issues.push(...this.hierarchical.doModelValidation());
        }
        if (this["paging"]) {
            issues.push(...this.paging.doModelValidation());
        }
        if (this["incomplete"]) {
            issues.push(...this.incomplete.doModelValidation());
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["textFilter"]) {
            issues.push(...this.textFilter.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesExpansion._fts_dataType = 'TerminologyCapabilitiesExpansion';
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
export class TerminologyCapabilitiesValidateCode extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesValidateCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['translations']) {
            this.translations = new fhir.FhirBoolean({ value: source.translations });
        }
        else {
            this.translations = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['translations']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property translations:fhir.FhirBoolean fhir: TerminologyCapabilities.validateCode.translations:boolean' });
        }
        if (this["translations"]) {
            issues.push(...this.translations.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesValidateCode._fts_dataType = 'TerminologyCapabilitiesValidateCode';
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
export class TerminologyCapabilitiesTranslation extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesTranslation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['needsMap']) {
            this.needsMap = new fhir.FhirBoolean({ value: source.needsMap });
        }
        else {
            this.needsMap = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['needsMap']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property needsMap:fhir.FhirBoolean fhir: TerminologyCapabilities.translation.needsMap:boolean' });
        }
        if (this["needsMap"]) {
            issues.push(...this.needsMap.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesTranslation._fts_dataType = 'TerminologyCapabilitiesTranslation';
/**
 * Whether the $closure operation is supported.
 */
export class TerminologyCapabilitiesClosure extends fhir.BackboneElement {
    /**
     * Default constructor for TerminologyCapabilitiesClosure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['translation']) {
            this.translation = new fhir.FhirBoolean({ value: source.translation });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["translation"]) {
            issues.push(...this.translation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilitiesClosure._fts_dataType = 'TerminologyCapabilitiesClosure';
/**
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export class TerminologyCapabilities extends fhir.DomainResource {
    /**
     * Default constructor for TerminologyCapabilities - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TerminologyCapabilities';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['software']) {
            this.software = new fhir.TerminologyCapabilitiesSoftware(source.software);
        }
        if (source['implementation']) {
            this.implementation = new fhir.TerminologyCapabilitiesImplementation(source.implementation);
        }
        if (source['lockedDate']) {
            this.lockedDate = new fhir.FhirBoolean({ value: source.lockedDate });
        }
        if (source['codeSystem']) {
            this.codeSystem = source.codeSystem.map((x) => new fhir.TerminologyCapabilitiesCodeSystem(x));
        }
        else {
            this.codeSystem = [];
        }
        if (source['expansion']) {
            this.expansion = new fhir.TerminologyCapabilitiesExpansion(source.expansion);
        }
        if (source['codeSearch']) {
            this.codeSearch = new fhir.FhirCode({ value: source.codeSearch });
        }
        if (source['validateCode']) {
            this.validateCode = new fhir.TerminologyCapabilitiesValidateCode(source.validateCode);
        }
        if (source['translation']) {
            this.translation = new fhir.TerminologyCapabilitiesTranslation(source.translation);
        }
        if (source['closure']) {
            this.closure = new fhir.TerminologyCapabilitiesClosure(source.closure);
        }
    }
    /**
     * Required-bound Value Set for status (TerminologyCapabilities.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Required-bound Value Set for kind (TerminologyCapabilities.kind)
     */
    static get kindRequiredCodes() {
        return CapabilityStatementKindCodes;
    }
    /**
     * Required-bound Value Set for codeSearch (TerminologyCapabilities.codeSearch)
     */
    static get codeSearchRequiredCodes() {
        return CodeSearchSupportCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"TerminologyCapabilities" fhir: TerminologyCapabilities.resourceType:"TerminologyCapabilities"' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: TerminologyCapabilities.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: TerminologyCapabilities.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (!this['date']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: TerminologyCapabilities.date:dateTime' });
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind:fhir.FhirCode<CapabilityStatementKindCodeType> fhir: TerminologyCapabilities.kind:code' });
        }
        if (this['kind'] && (!Object.values(CapabilityStatementKindCodes).includes(this.kind))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property kind:fhir.FhirCode<CapabilityStatementKindCodeType> fhir: TerminologyCapabilities.kind:code Required binding to: CapabilityStatementKind' });
        }
        if (this["kind"]) {
            issues.push(...this.kind.doModelValidation());
        }
        if (this["software"]) {
            issues.push(...this.software.doModelValidation());
        }
        if (this["implementation"]) {
            issues.push(...this.implementation.doModelValidation());
        }
        if (this["lockedDate"]) {
            issues.push(...this.lockedDate.doModelValidation());
        }
        if (this["codeSystem"]) {
            this.codeSystem.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["expansion"]) {
            issues.push(...this.expansion.doModelValidation());
        }
        if (this['codeSearch'] && (!Object.values(CodeSearchSupportCodes).includes(this.codeSearch))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property codeSearch?:fhir.FhirCode<CodeSearchSupportCodeType> fhir: TerminologyCapabilities.codeSearch:code Required binding to: CodeSearchSupport' });
        }
        if (this["codeSearch"]) {
            issues.push(...this.codeSearch.doModelValidation());
        }
        if (this["validateCode"]) {
            issues.push(...this.validateCode.doModelValidation());
        }
        if (this["translation"]) {
            issues.push(...this.translation.doModelValidation());
        }
        if (this["closure"]) {
            issues.push(...this.closure.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TerminologyCapabilities._fts_dataType = 'TerminologyCapabilities';
//# sourceMappingURL=data:application/json;base64,