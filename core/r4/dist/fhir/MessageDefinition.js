/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { MessageSignificanceCategoryCodings } from '../fhirValueSets/MessageSignificanceCategoryCodings.js';
import { MessageheaderResponseRequestCodings } from '../fhirValueSets/MessageheaderResponseRequestCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirCode } from './FhirCode.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { FhirString } from './FhirString.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { FhirUri } from './FhirUri.js';
import { Identifier } from './Identifier.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Coding } from './Coding.js';

// <auto-generated/>
/**
 * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
 */
var MessageDefinitionFocus = /** @class */ (function (_super) {
    __extends(MessageDefinitionFocus, _super);
    /**
     * Default constructor for MessageDefinitionFocus - initializes any required elements to null if a value is not provided.
     */
    function MessageDefinitionFocus(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['profile']) {
            _this.profile = new FhirCanonical({ value: source.profile });
        }
        if (source['min']) {
            _this.min = new FhirUnsignedInt({ value: source.min });
        }
        else {
            _this.min = null;
        }
        if (source['max']) {
            _this.max = new FhirString({ value: source.max });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for code (MessageDefinition.focus.code)
     */
    MessageDefinitionFocus.codeRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MessageDefinitionFocus.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: MessageDefinition.focus.code:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["profile"]) {
            (_b = outcome.issue).push.apply(_b, this.profile.doModelValidation().issue);
        }
        if (!this['min']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property min:fhir.FhirUnsignedInt fhir: MessageDefinition.focus.min:unsignedInt', }));
        }
        if (this["min"]) {
            (_c = outcome.issue).push.apply(_c, this.min.doModelValidation().issue);
        }
        if (this["max"]) {
            (_d = outcome.issue).push.apply(_d, this.max.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MessageDefinitionFocus._fts_dataType = 'MessageDefinitionFocus';
    return MessageDefinitionFocus;
}(BackboneElement));
/**
 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
 */
var MessageDefinitionAllowedResponse = /** @class */ (function (_super) {
    __extends(MessageDefinitionAllowedResponse, _super);
    /**
     * Default constructor for MessageDefinitionAllowedResponse - initializes any required elements to null if a value is not provided.
     */
    function MessageDefinitionAllowedResponse(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['message']) {
            _this.message = new FhirCanonical({ value: source.message });
        }
        else {
            _this.message = null;
        }
        if (source['situation']) {
            _this.situation = new FhirMarkdown({ value: source.situation });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MessageDefinitionAllowedResponse.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['message']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property message:fhir.FhirCanonical fhir: MessageDefinition.allowedResponse.message:canonical', }));
        }
        if (this["message"]) {
            (_a = outcome.issue).push.apply(_a, this.message.doModelValidation().issue);
        }
        if (this["situation"]) {
            (_b = outcome.issue).push.apply(_b, this.situation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MessageDefinitionAllowedResponse._fts_dataType = 'MessageDefinitionAllowedResponse';
    return MessageDefinitionAllowedResponse;
}(BackboneElement));
/**
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 */
var MessageDefinition = /** @class */ (function (_super) {
    __extends(MessageDefinition, _super);
    /**
     * Default constructor for MessageDefinition - initializes any required elements to null if a value is not provided.
     */
    function MessageDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MessageDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['replaces']) {
            _this.replaces = source.replaces.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.replaces = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        else {
            _this.date = null;
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['base']) {
            _this.base = new FhirCanonical({ value: source.base });
        }
        if (source['parent']) {
            _this.parent = source.parent.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.parent = [];
        }
        if (source['event']) {
            _this.event = source.event;
        }
        else if (source['eventCoding']) {
            _this.event = new Coding(source.eventCoding);
        }
        else if (source['eventUri']) {
            _this.event = new FhirUri({ value: source.eventUri });
        }
        else {
            _this.event = null;
        }
        if (source['category']) {
            _this.category = source.category;
        }
        if (source['focus']) {
            _this.focus = source.focus.map(function (x) { return new MessageDefinitionFocus(x); });
        }
        else {
            _this.focus = [];
        }
        if (source['responseRequired']) {
            _this.responseRequired = source.responseRequired;
        }
        if (source['allowedResponse']) {
            _this.allowedResponse = source.allowedResponse.map(function (x) { return new MessageDefinitionAllowedResponse(x); });
        }
        else {
            _this.allowedResponse = [];
        }
        if (source['graph']) {
            _this.graph = source.graph.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.graph = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (MessageDefinition.status)
     */
    MessageDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for category (MessageDefinition.category)
     */
    MessageDefinition.categoryRequiredCoding = function () {
        return MessageSignificanceCategoryCodings;
    };
    /**
     * Required-bound Value Set for responseRequired (MessageDefinition.responseRequired)
     */
    MessageDefinition.responseRequiredRequiredCoding = function () {
        return MessageheaderResponseRequestCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MessageDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MessageDefinition" fhir: MessageDefinition.resourceType:"MessageDefinition"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (this["replaces"]) {
            this.replaces.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: MessageDefinition.status:code', }));
        }
        if (this["experimental"]) {
            (_e = outcome.issue).push.apply(_e, this.experimental.doModelValidation().issue);
        }
        if (!this['date']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: MessageDefinition.date:dateTime', }));
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_g = outcome.issue).push.apply(_g, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_h = outcome.issue).push.apply(_h, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_j = outcome.issue).push.apply(_j, this.purpose.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_k = outcome.issue).push.apply(_k, this.copyright.doModelValidation().issue);
        }
        if (this["base"]) {
            (_l = outcome.issue).push.apply(_l, this.base.doModelValidation().issue);
        }
        if (this["parent"]) {
            this.parent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['event']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property event: fhir: MessageDefinition.event[x]:', }));
        }
        if (this["focus"]) {
            this.focus.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["allowedResponse"]) {
            this.allowedResponse.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["graph"]) {
            this.graph.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MessageDefinition._fts_dataType = 'MessageDefinition';
    /**
     * Internal flag to properly serialize choice-type element MessageDefinition.event[x]
     */
    MessageDefinition._fts_eventIsChoice = true;
    return MessageDefinition;
}(DomainResource));

export { MessageDefinition, MessageDefinitionAllowedResponse, MessageDefinitionFocus };
//# sourceMappingURL=MessageDefinition.js.map
