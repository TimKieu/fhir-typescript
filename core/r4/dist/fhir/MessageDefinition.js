// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResourceTypesVsValidation } from '../fhirValueSets/ResourceTypesVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { MessageSignificanceCategoryVsValidation } from '../fhirValueSets/MessageSignificanceCategoryVsValidation.js';
// @ts-ignore
import { MessageheaderResponseRequestVsValidation } from '../fhirValueSets/MessageheaderResponseRequestVsValidation.js';
/**
 * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
 */
export class MessageDefinitionFocus extends fhir.BackboneElement {
    /**
     * Default constructor for MessageDefinitionFocus - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirCanonical(source._profile);
            }
        }
        if (source['min']) {
            this.min = new fhir.FhirUnsignedInt({ value: source.min });
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirUnsignedInt(source._min);
            }
        }
        if (source['max']) {
            this.max = new fhir.FhirString({ value: source.max });
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageDefinition.focus';
        }
        iss.push(...this.vRSV('code', exp, 'ResourceTypes', ResourceTypesVsValidation, 'r'));
        iss.push(...this.vOS('profile', exp));
        iss.push(...this.vRS('min', exp));
        iss.push(...this.vOS('max', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageDefinitionFocus._fts_dataType = 'MessageDefinitionFocus';
/**
 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
 */
export class MessageDefinitionAllowedResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageDefinitionAllowedResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['message']) {
            this.message = new fhir.FhirCanonical({ value: source.message });
        }
        else {
            this.message = null;
        }
        if (source['_message']) {
            if (this.message) {
                this.message.addExtendedProperties(source._message);
            }
            else {
                this.message = new fhir.FhirCanonical(source._message);
            }
        }
        if (source['situation']) {
            this.situation = new fhir.FhirMarkdown({ value: source.situation });
        }
        if (source['_situation']) {
            if (this.situation) {
                this.situation.addExtendedProperties(source._situation);
            }
            else {
                this.situation = new fhir.FhirMarkdown(source._situation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageDefinition.allowedResponse';
        }
        iss.push(...this.vRS('message', exp));
        iss.push(...this.vOS('situation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageDefinitionAllowedResponse._fts_dataType = 'MessageDefinitionAllowedResponse';
/**
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 */
export class MessageDefinition extends fhir.DomainResource {
    /**
     * Default constructor for MessageDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MessageDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.replaces = [];
        }
        if (source['_replaces']) {
            source._replaces.forEach((x, i) => {
                if (this.replaces.length >= i) {
                    if (x) {
                        this.replaces[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.replaces.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        else {
            this.date = null;
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['base']) {
            this.base = new fhir.FhirCanonical({ value: source.base });
        }
        if (source['_base']) {
            if (this.base) {
                this.base.addExtendedProperties(source._base);
            }
            else {
                this.base = new fhir.FhirCanonical(source._base);
            }
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.parent = [];
        }
        if (source['_parent']) {
            source._parent.forEach((x, i) => {
                if (this.parent.length >= i) {
                    if (x) {
                        this.parent[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.parent.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['event']) {
            this.event = source.event;
        }
        else if (source['eventCoding']) {
            this.event = new fhir.Coding(source.eventCoding);
        }
        else if (source['eventUri']) {
            this.event = new fhir.FhirUri({ value: source.eventUri });
        }
        else {
            this.event = null;
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.MessageDefinitionFocus(x));
        }
        else {
            this.focus = [];
        }
        if (source['responseRequired']) {
            this.responseRequired = new fhir.FhirCode({ value: source.responseRequired });
        }
        if (source['_responseRequired']) {
            if (this.responseRequired) {
                this.responseRequired.addExtendedProperties(source._responseRequired);
            }
            else {
                this.responseRequired = new fhir.FhirCode(source._responseRequired);
            }
        }
        if (source['allowedResponse']) {
            this.allowedResponse = source.allowedResponse.map((x) => new fhir.MessageDefinitionAllowedResponse(x));
        }
        else {
            this.allowedResponse = [];
        }
        if (source['graph']) {
            this.graph = source.graph.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.graph = [];
        }
        if (source['_graph']) {
            source._graph.forEach((x, i) => {
                if (this.graph.length >= i) {
                    if (x) {
                        this.graph[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.graph.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MessageDefinition';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOA('replaces', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('experimental', exp));
        iss.push(...this.vRS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('purpose', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('base', exp));
        iss.push(...this.vOA('parent', exp));
        iss.push(...this.vRS('event', exp));
        iss.push(...this.vOSV('category', exp, 'MessageSignificanceCategory', MessageSignificanceCategoryVsValidation, 'r'));
        iss.push(...this.vOA('focus', exp));
        iss.push(...this.vOSV('responseRequired', exp, 'MessageheaderResponseRequest', MessageheaderResponseRequestVsValidation, 'r'));
        iss.push(...this.vOA('allowedResponse', exp));
        iss.push(...this.vOA('graph', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageDefinition._fts_dataType = 'MessageDefinition';
/**
 * Internal flag to properly serialize choice-type element MessageDefinition.event[x]
 */
MessageDefinition._fts_eventIsChoice = true;
//# sourceMappingURL=data:application/json;base64,