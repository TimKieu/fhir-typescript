/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MedicationAdminStatusCodings } from '../fhirValueSets/MedicationAdminStatusCodings.js';
import { MedicationAdminCategoryCodings } from '../fhirValueSets/MedicationAdminCategoryCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirString } from './FhirString.js';
import { Quantity } from './Quantity.js';
import { Ratio } from './Ratio.js';
import { Identifier } from './Identifier.js';
import { FhirUri } from './FhirUri.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Indicates who or what performed the medication administration and how they were involved.
 */
var MedicationAdministrationPerformer = /** @class */ (function (_super) {
    __extends(MedicationAdministrationPerformer, _super);
    /**
     * Default constructor for MedicationAdministrationPerformer - initializes any required elements to null if a value is not provided.
     */
    function MedicationAdministrationPerformer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['function']) {
            _this.function = new CodeableConcept(source.function);
        }
        if (source['actor']) {
            _this.actor = new Reference(source.actor);
        }
        else {
            _this.actor = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationAdministrationPerformer.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["function"]) {
            (_a = outcome.issue).push.apply(_a, this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actor:fhir.Reference fhir: MedicationAdministration.performer.actor:Reference', }));
        }
        if (this["actor"]) {
            (_b = outcome.issue).push.apply(_b, this.actor.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationAdministrationPerformer._fts_dataType = 'MedicationAdministrationPerformer';
    return MedicationAdministrationPerformer;
}(BackboneElement));
/**
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
var MedicationAdministrationDosage = /** @class */ (function (_super) {
    __extends(MedicationAdministrationDosage, _super);
    /**
     * Default constructor for MedicationAdministrationDosage - initializes any required elements to null if a value is not provided.
     */
    function MedicationAdministrationDosage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['site']) {
            _this.site = new CodeableConcept(source.site);
        }
        if (source['route']) {
            _this.route = new CodeableConcept(source.route);
        }
        if (source['method']) {
            _this.method = new CodeableConcept(source.method);
        }
        if (source['dose']) {
            _this.dose = new Quantity(source.dose);
        }
        if (source['rate']) {
            _this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            _this.rate = new Ratio(source.rateRatio);
        }
        else if (source['rateQuantity']) {
            _this.rate = new Quantity(source.rateQuantity);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationAdministrationDosage.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["text"]) {
            (_a = outcome.issue).push.apply(_a, this.text.doModelValidation().issue);
        }
        if (this["site"]) {
            (_b = outcome.issue).push.apply(_b, this.site.doModelValidation().issue);
        }
        if (this["route"]) {
            (_c = outcome.issue).push.apply(_c, this.route.doModelValidation().issue);
        }
        if (this["method"]) {
            (_d = outcome.issue).push.apply(_d, this.method.doModelValidation().issue);
        }
        if (this["dose"]) {
            (_e = outcome.issue).push.apply(_e, this.dose.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationAdministrationDosage._fts_dataType = 'MedicationAdministrationDosage';
    /**
     * Internal flag to properly serialize choice-type element MedicationAdministration.dosage.rate[x]
     */
    MedicationAdministrationDosage._fts_rateIsChoice = true;
    return MedicationAdministrationDosage;
}(BackboneElement));
/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
var MedicationAdministration = /** @class */ (function (_super) {
    __extends(MedicationAdministration, _super);
    /**
     * Default constructor for MedicationAdministration - initializes any required elements to null if a value is not provided.
     */
    function MedicationAdministration(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicationAdministration';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['instantiates']) {
            _this.instantiates = source.instantiates.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.instantiates = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = source.statusReason.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.statusReason = [];
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['medication']) {
            _this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            _this.medication = new CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            _this.medication = new Reference(source.medicationReference);
        }
        else {
            _this.medication = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['context']) {
            _this.context = new Reference(source.context);
        }
        if (source['supportingInformation']) {
            _this.supportingInformation = source.supportingInformation.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingInformation = [];
        }
        if (source['effective']) {
            _this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            _this.effective = new FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            _this.effective = new Period(source.effectivePeriod);
        }
        else {
            _this.effective = null;
        }
        if (source['performer']) {
            _this.performer = source.performer.map(function (x) { return new MedicationAdministrationPerformer(x); });
        }
        else {
            _this.performer = [];
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['request']) {
            _this.request = new Reference(source.request);
        }
        if (source['device']) {
            _this.device = source.device.map(function (x) { return new Reference(x); });
        }
        else {
            _this.device = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['dosage']) {
            _this.dosage = new MedicationAdministrationDosage(source.dosage);
        }
        if (source['eventHistory']) {
            _this.eventHistory = source.eventHistory.map(function (x) { return new Reference(x); });
        }
        else {
            _this.eventHistory = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (MedicationAdministration.status)
     */
    MedicationAdministration.statusRequiredCoding = function () {
        return MedicationAdminStatusCodings;
    };
    /**
     * Preferred-bound Value Set for category (MedicationAdministration.category)
     */
    MedicationAdministration.categoryPreferredCoding = function () {
        return MedicationAdminCategoryCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationAdministration.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicationAdministration" fhir: MedicationAdministration.resourceType:"MedicationAdministration"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiates"]) {
            this.instantiates.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:MedicationAdminStatusCodeType fhir: MedicationAdministration.status:code', }));
        }
        if (this["statusReason"]) {
            this.statusReason.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property medication: fhir: MedicationAdministration.medication[x]:', }));
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: MedicationAdministration.subject:Reference', }));
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["context"]) {
            (_c = outcome.issue).push.apply(_c, this.context.doModelValidation().issue);
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['effective']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property effective: fhir: MedicationAdministration.effective[x]:', }));
        }
        if (this["performer"]) {
            this.performer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["request"]) {
            (_d = outcome.issue).push.apply(_d, this.request.doModelValidation().issue);
        }
        if (this["device"]) {
            this.device.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dosage"]) {
            (_e = outcome.issue).push.apply(_e, this.dosage.doModelValidation().issue);
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationAdministration._fts_dataType = 'MedicationAdministration';
    /**
     * Internal flag to properly serialize choice-type element MedicationAdministration.medication[x]
     */
    MedicationAdministration._fts_medicationIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element MedicationAdministration.effective[x]
     */
    MedicationAdministration._fts_effectiveIsChoice = true;
    return MedicationAdministration;
}(DomainResource));

export { MedicationAdministration, MedicationAdministrationDosage, MedicationAdministrationPerformer };
//# sourceMappingURL=MedicationAdministration.js.map
