/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SignatureTypeCodings } from '../fhirValueSets/SignatureTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirElement } from './FhirElement.js';
import { Coding } from './Coding.js';
import { FhirInstant } from './FhirInstant.js';
import { Reference } from './Reference.js';
import { FhirCode } from './FhirCode.js';
import { FhirBase64Binary } from './FhirBase64Binary.js';

// <auto-generated/>
/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
var Signature = /** @class */ (function (_super) {
    __extends(Signature, _super);
    /**
     * Default constructor for Signature - initializes any required elements to null if a value is not provided.
     */
    function Signature(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new Coding(x); });
        }
        else {
            _this.type = [];
        }
        if (source['when']) {
            _this.when = new FhirInstant({ value: source.when });
        }
        else {
            _this.when = null;
        }
        if (source['who']) {
            _this.who = new Reference(source.who);
        }
        else {
            _this.who = null;
        }
        if (source['onBehalfOf']) {
            _this.onBehalfOf = new Reference(source.onBehalfOf);
        }
        if (source['targetFormat']) {
            _this.targetFormat = new FhirCode({ value: source.targetFormat });
        }
        if (source['sigFormat']) {
            _this.sigFormat = new FhirCode({ value: source.sigFormat });
        }
        if (source['data']) {
            _this.data = new FhirBase64Binary({ value: source.data });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for type (Signature.type)
     */
    Signature.typePreferredCoding = function () {
        return SignatureTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Signature.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding', }));
        }
        else if (!Array.isArray(this.type)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property type:fhir.Coding[] fhir: Signature.type:Coding', }));
        }
        else if (this.type.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding', }));
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['when']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property when:fhir.FhirInstant fhir: Signature.when:instant', }));
        }
        if (this["when"]) {
            (_a = outcome.issue).push.apply(_a, this.when.doModelValidation().issue);
        }
        if (!this['who']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property who:fhir.Reference fhir: Signature.who:Reference', }));
        }
        if (this["who"]) {
            (_b = outcome.issue).push.apply(_b, this.who.doModelValidation().issue);
        }
        if (this["onBehalfOf"]) {
            (_c = outcome.issue).push.apply(_c, this.onBehalfOf.doModelValidation().issue);
        }
        if (this["targetFormat"]) {
            (_d = outcome.issue).push.apply(_d, this.targetFormat.doModelValidation().issue);
        }
        if (this["sigFormat"]) {
            (_e = outcome.issue).push.apply(_e, this.sigFormat.doModelValidation().issue);
        }
        if (this["data"]) {
            (_f = outcome.issue).push.apply(_f, this.data.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Signature._fts_dataType = 'Signature';
    return Signature;
}(FhirElement));

export { Signature };
//# sourceMappingURL=Signature.js.map
