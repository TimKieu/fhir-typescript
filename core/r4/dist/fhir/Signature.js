// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Signature
import * as fhir from '../fhir.js';
/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
export class Signature extends fhir.FhirElement {
    /**
     * Default constructor for Signature - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.Coding(x));
        }
        else {
            this.type = [];
        }
        if (source['when']) {
            this.when = new fhir.FhirInstant({ value: source.when });
        }
        else {
            this.when = null;
        }
        if (source['_when']) {
            if (this.when) {
                this.when.addExtendedProperties(source._when);
            }
            else {
                this.when = new fhir.FhirInstant(source._when);
            }
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source['targetFormat']) {
            this.targetFormat = new fhir.FhirCode({ value: source.targetFormat });
        }
        if (source['_targetFormat']) {
            if (this.targetFormat) {
                this.targetFormat.addExtendedProperties(source._targetFormat);
            }
            else {
                this.targetFormat = new fhir.FhirCode(source._targetFormat);
            }
        }
        if (source['sigFormat']) {
            this.sigFormat = new fhir.FhirCode({ value: source.sigFormat });
        }
        if (source['_sigFormat']) {
            if (this.sigFormat) {
                this.sigFormat.addExtendedProperties(source._sigFormat);
            }
            else {
                this.sigFormat = new fhir.FhirCode(source._sigFormat);
            }
        }
        if (source['data']) {
            this.data = new fhir.FhirBase64Binary({ value: source.data });
        }
        if (source['_data']) {
            if (this.data) {
                this.data.addExtendedProperties(source._data);
            }
            else {
                this.data = new fhir.FhirBase64Binary(source._data);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Signature';
        }
        iss.push(...this.vRA('type', exp));
        iss.push(...this.vRS('when', exp));
        iss.push(...this.vRS('who', exp));
        iss.push(...this.vOS('onBehalfOf', exp));
        iss.push(...this.vOS('targetFormat', exp));
        iss.push(...this.vOS('sigFormat', exp));
        iss.push(...this.vOS('data', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Signature._fts_dataType = 'Signature';
//# sourceMappingURL=data:application/json;base64,