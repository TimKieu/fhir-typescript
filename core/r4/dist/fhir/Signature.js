// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Signature
import * as fhir from '../fhir.js';
// @ts-ignore
import { SignatureTypeCodings, } from '../fhirValueSets/SignatureTypeCodings.js';
/**
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 */
export class Signature extends fhir.FhirElement {
    /**
     * Default constructor for Signature - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.Coding(x));
        }
        else {
            this.type = [];
        }
        if (source['when']) {
            this.when = new fhir.FhirInstant({ value: source.when });
        }
        else {
            this.when = null;
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source['targetFormat']) {
            this.targetFormat = new fhir.FhirCode({ value: source.targetFormat });
        }
        if (source['sigFormat']) {
            this.sigFormat = new fhir.FhirCode({ value: source.sigFormat });
        }
        if (source['data']) {
            this.data = new fhir.FhirBase64Binary({ value: source.data });
        }
    }
    /**
     * Preferred-bound Value Set for type (Signature.type)
     */
    static get typePreferredCodings() {
        return SignatureTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding' });
        }
        else if (!Array.isArray(this.type)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property type:fhir.Coding[] fhir: Signature.type:Coding' });
        }
        else if (this.type.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding' });
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['when']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property when:fhir.FhirInstant fhir: Signature.when:instant' });
        }
        if (this["when"]) {
            issues.push(...this.when.doModelValidation());
        }
        if (!this['who']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property who:fhir.Reference fhir: Signature.who:Reference' });
        }
        if (this["who"]) {
            issues.push(...this.who.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            issues.push(...this.onBehalfOf.doModelValidation());
        }
        if (this["targetFormat"]) {
            issues.push(...this.targetFormat.doModelValidation());
        }
        if (this["sigFormat"]) {
            issues.push(...this.sigFormat.doModelValidation());
        }
        if (this["data"]) {
            issues.push(...this.data.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Signature._fts_dataType = 'Signature';
//# sourceMappingURL=data:application/json;base64,