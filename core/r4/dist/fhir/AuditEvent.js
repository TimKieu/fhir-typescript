/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { NetworkTypeCodings } from '../fhirValueSets/NetworkTypeCodings.js';
import { ParticipationRoleTypeCodings } from '../fhirValueSets/ParticipationRoleTypeCodings.js';
import { Dicm405MediatypeCodings } from '../fhirValueSets/Dicm405MediatypeCodings.js';
import { V3PurposeOfUseCodings } from '../fhirValueSets/V3PurposeOfUseCodings.js';
import { AuditSourceTypeCodings } from '../fhirValueSets/AuditSourceTypeCodings.js';
import { AuditEntityTypeCodings } from '../fhirValueSets/AuditEntityTypeCodings.js';
import { ObjectRoleCodings } from '../fhirValueSets/ObjectRoleCodings.js';
import { SecurityLabelsCodings } from '../fhirValueSets/SecurityLabelsCodings.js';
import { AuditEventTypeCodings } from '../fhirValueSets/AuditEventTypeCodings.js';
import { AuditEventSubTypeCodings } from '../fhirValueSets/AuditEventSubTypeCodings.js';
import { AuditEventActionCodings } from '../fhirValueSets/AuditEventActionCodings.js';
import { AuditEventOutcomeCodings } from '../fhirValueSets/AuditEventOutcomeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { FhirCode } from './FhirCode.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirUri } from './FhirUri.js';
import { Coding } from './Coding.js';
import { FhirBase64Binary } from './FhirBase64Binary.js';
import { Period } from './Period.js';
import { FhirInstant } from './FhirInstant.js';

// <auto-generated/>
/**
 * Logical network location for application activity, if the activity has a network location.
 */
var AuditEventAgentNetwork = /** @class */ (function (_super) {
    __extends(AuditEventAgentNetwork, _super);
    /**
     * Default constructor for AuditEventAgentNetwork - initializes any required elements to null if a value is not provided.
     */
    function AuditEventAgentNetwork(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['address']) {
            _this.address = new FhirString({ value: source.address });
        }
        if (source['type']) {
            _this.type = new FhirCode({ value: source.type });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (AuditEvent.agent.network.type)
     */
    AuditEventAgentNetwork.typeRequiredCoding = function () {
        return NetworkTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AuditEventAgentNetwork.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["address"]) {
            (_a = outcome.issue).push.apply(_a, this.address.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AuditEventAgentNetwork._fts_dataType = 'AuditEventAgentNetwork';
    return AuditEventAgentNetwork;
}(BackboneElement));
/**
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
 * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
 */
var AuditEventAgent = /** @class */ (function (_super) {
    __extends(AuditEventAgent, _super);
    /**
     * Default constructor for AuditEventAgent - initializes any required elements to null if a value is not provided.
     */
    function AuditEventAgent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['role']) {
            _this.role = source.role.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.role = [];
        }
        if (source['who']) {
            _this.who = new Reference(source.who);
        }
        if (source['altId']) {
            _this.altId = new FhirString({ value: source.altId });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['requestor']) {
            _this.requestor = new FhirBoolean({ value: source.requestor });
        }
        else {
            _this.requestor = null;
        }
        if (source['location']) {
            _this.location = new Reference(source.location);
        }
        if (source['policy']) {
            _this.policy = source.policy.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.policy = [];
        }
        if (source['media']) {
            _this.media = new Coding(source.media);
        }
        if (source['network']) {
            _this.network = new AuditEventAgentNetwork(source.network);
        }
        if (source['purposeOfUse']) {
            _this.purposeOfUse = source.purposeOfUse.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.purposeOfUse = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.agent.type)
     */
    AuditEventAgent.typeExtensibleCoding = function () {
        return ParticipationRoleTypeCodings;
    };
    /**
     * Extensible-bound Value Set for media (AuditEvent.agent.media)
     */
    AuditEventAgent.mediaExtensibleCoding = function () {
        return Dicm405MediatypeCodings;
    };
    /**
     * Extensible-bound Value Set for purposeOfUse (AuditEvent.agent.purposeOfUse)
     */
    AuditEventAgent.purposeOfUseExtensibleCoding = function () {
        return V3PurposeOfUseCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AuditEventAgent.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["role"]) {
            this.role.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["who"]) {
            (_b = outcome.issue).push.apply(_b, this.who.doModelValidation().issue);
        }
        if (this["altId"]) {
            (_c = outcome.issue).push.apply(_c, this.altId.doModelValidation().issue);
        }
        if (this["name"]) {
            (_d = outcome.issue).push.apply(_d, this.name.doModelValidation().issue);
        }
        if (!this['requestor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property requestor:fhir.FhirBoolean fhir: AuditEvent.agent.requestor:boolean', }));
        }
        if (this["requestor"]) {
            (_e = outcome.issue).push.apply(_e, this.requestor.doModelValidation().issue);
        }
        if (this["location"]) {
            (_f = outcome.issue).push.apply(_f, this.location.doModelValidation().issue);
        }
        if (this["policy"]) {
            this.policy.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["media"]) {
            (_g = outcome.issue).push.apply(_g, this.media.doModelValidation().issue);
        }
        if (this["network"]) {
            (_h = outcome.issue).push.apply(_h, this.network.doModelValidation().issue);
        }
        if (this["purposeOfUse"]) {
            this.purposeOfUse.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AuditEventAgent._fts_dataType = 'AuditEventAgent';
    return AuditEventAgent;
}(BackboneElement));
/**
 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
 */
var AuditEventSource = /** @class */ (function (_super) {
    __extends(AuditEventSource, _super);
    /**
     * Default constructor for AuditEventSource - initializes any required elements to null if a value is not provided.
     */
    function AuditEventSource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['site']) {
            _this.site = new FhirString({ value: source.site });
        }
        if (source['observer']) {
            _this.observer = new Reference(source.observer);
        }
        else {
            _this.observer = null;
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new Coding(x); });
        }
        else {
            _this.type = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.source.type)
     */
    AuditEventSource.typeExtensibleCoding = function () {
        return AuditSourceTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AuditEventSource.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["site"]) {
            (_a = outcome.issue).push.apply(_a, this.site.doModelValidation().issue);
        }
        if (!this['observer']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property observer:fhir.Reference fhir: AuditEvent.source.observer:Reference', }));
        }
        if (this["observer"]) {
            (_b = outcome.issue).push.apply(_b, this.observer.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AuditEventSource._fts_dataType = 'AuditEventSource';
    return AuditEventSource;
}(BackboneElement));
/**
 * Tagged value pairs for conveying additional information about the entity.
 */
var AuditEventEntityDetail = /** @class */ (function (_super) {
    __extends(AuditEventEntityDetail, _super);
    /**
     * Default constructor for AuditEventEntityDetail - initializes any required elements to null if a value is not provided.
     */
    function AuditEventEntityDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new FhirString({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueBase64Binary']) {
            _this.value = new FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AuditEventEntityDetail.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirString fhir: AuditEvent.entity.detail.type:string', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: AuditEvent.entity.detail.value[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AuditEventEntityDetail._fts_dataType = 'AuditEventEntityDetail';
    /**
     * Internal flag to properly serialize choice-type element AuditEvent.entity.detail.value[x]
     */
    AuditEventEntityDetail._fts_valueIsChoice = true;
    return AuditEventEntityDetail;
}(BackboneElement));
/**
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
var AuditEventEntity = /** @class */ (function (_super) {
    __extends(AuditEventEntity, _super);
    /**
     * Default constructor for AuditEventEntity - initializes any required elements to null if a value is not provided.
     */
    function AuditEventEntity(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['what']) {
            _this.what = new Reference(source.what);
        }
        if (source['type']) {
            _this.type = new Coding(source.type);
        }
        if (source['role']) {
            _this.role = new Coding(source.role);
        }
        if (source['lifecycle']) {
            _this.lifecycle = new Coding(source.lifecycle);
        }
        if (source['securityLabel']) {
            _this.securityLabel = source.securityLabel.map(function (x) { return new Coding(x); });
        }
        else {
            _this.securityLabel = [];
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['query']) {
            _this.query = new FhirBase64Binary({ value: source.query });
        }
        if (source['detail']) {
            _this.detail = source.detail.map(function (x) { return new AuditEventEntityDetail(x); });
        }
        else {
            _this.detail = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.entity.type)
     */
    AuditEventEntity.typeExtensibleCoding = function () {
        return AuditEntityTypeCodings;
    };
    /**
     * Extensible-bound Value Set for role (AuditEvent.entity.role)
     */
    AuditEventEntity.roleExtensibleCoding = function () {
        return ObjectRoleCodings;
    };
    /**
     * Extensible-bound Value Set for securityLabel (AuditEvent.entity.securityLabel)
     */
    AuditEventEntity.securityLabelExtensibleCoding = function () {
        return SecurityLabelsCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AuditEventEntity.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["what"]) {
            (_a = outcome.issue).push.apply(_a, this.what.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["role"]) {
            (_c = outcome.issue).push.apply(_c, this.role.doModelValidation().issue);
        }
        if (this["lifecycle"]) {
            (_d = outcome.issue).push.apply(_d, this.lifecycle.doModelValidation().issue);
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            (_e = outcome.issue).push.apply(_e, this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            (_f = outcome.issue).push.apply(_f, this.description.doModelValidation().issue);
        }
        if (this["query"]) {
            (_g = outcome.issue).push.apply(_g, this.query.doModelValidation().issue);
        }
        if (this["detail"]) {
            this.detail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AuditEventEntity._fts_dataType = 'AuditEventEntity';
    return AuditEventEntity;
}(BackboneElement));
/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
var AuditEvent = /** @class */ (function (_super) {
    __extends(AuditEvent, _super);
    /**
     * Default constructor for AuditEvent - initializes any required elements to null if a value is not provided.
     */
    function AuditEvent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'AuditEvent';
        if (source['type']) {
            _this.type = new Coding(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['subtype']) {
            _this.subtype = source.subtype.map(function (x) { return new Coding(x); });
        }
        else {
            _this.subtype = [];
        }
        if (source['action']) {
            _this.action = new FhirCode({ value: source.action });
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['recorded']) {
            _this.recorded = new FhirInstant({ value: source.recorded });
        }
        else {
            _this.recorded = null;
        }
        if (source['outcome']) {
            _this.outcome = new FhirCode({ value: source.outcome });
        }
        if (source['outcomeDesc']) {
            _this.outcomeDesc = new FhirString({ value: source.outcomeDesc });
        }
        if (source['purposeOfEvent']) {
            _this.purposeOfEvent = source.purposeOfEvent.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.purposeOfEvent = [];
        }
        if (source['agent']) {
            _this.agent = source.agent.map(function (x) { return new AuditEventAgent(x); });
        }
        else {
            _this.agent = [];
        }
        if (source['source']) {
            _this.source = new AuditEventSource(source.source);
        }
        else {
            _this.source = null;
        }
        if (source['entity']) {
            _this.entity = source.entity.map(function (x) { return new AuditEventEntity(x); });
        }
        else {
            _this.entity = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.type)
     */
    AuditEvent.typeExtensibleCoding = function () {
        return AuditEventTypeCodings;
    };
    /**
     * Extensible-bound Value Set for subtype (AuditEvent.subtype)
     */
    AuditEvent.subtypeExtensibleCoding = function () {
        return AuditEventSubTypeCodings;
    };
    /**
     * Required-bound Value Set for action (AuditEvent.action)
     */
    AuditEvent.actionRequiredCoding = function () {
        return AuditEventActionCodings;
    };
    /**
     * Required-bound Value Set for outcome (AuditEvent.outcome)
     */
    AuditEvent.outcomeRequiredCoding = function () {
        return AuditEventOutcomeCodings;
    };
    /**
     * Extensible-bound Value Set for purposeOfEvent (AuditEvent.purposeOfEvent)
     */
    AuditEvent.purposeOfEventExtensibleCoding = function () {
        return V3PurposeOfUseCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AuditEvent.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"AuditEvent" fhir: AuditEvent.resourceType:"AuditEvent"', }));
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.Coding fhir: AuditEvent.type:Coding', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["subtype"]) {
            this.subtype.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["action"]) {
            (_b = outcome.issue).push.apply(_b, this.action.doModelValidation().issue);
        }
        if (this["period"]) {
            (_c = outcome.issue).push.apply(_c, this.period.doModelValidation().issue);
        }
        if (!this['recorded']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property recorded:fhir.FhirInstant fhir: AuditEvent.recorded:instant', }));
        }
        if (this["recorded"]) {
            (_d = outcome.issue).push.apply(_d, this.recorded.doModelValidation().issue);
        }
        if (this["outcome"]) {
            (_e = outcome.issue).push.apply(_e, this.outcome.doModelValidation().issue);
        }
        if (this["outcomeDesc"]) {
            (_f = outcome.issue).push.apply(_f, this.outcomeDesc.doModelValidation().issue);
        }
        if (this["purposeOfEvent"]) {
            this.purposeOfEvent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['agent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property agent:fhir.AuditEventAgent[] fhir: AuditEvent.agent:agent', }));
        }
        else if (!Array.isArray(this.agent)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property agent:fhir.AuditEventAgent[] fhir: AuditEvent.agent:agent', }));
        }
        else if (this.agent.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property agent:fhir.AuditEventAgent[] fhir: AuditEvent.agent:agent', }));
        }
        if (this["agent"]) {
            this.agent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['source']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property source:fhir.AuditEventSource fhir: AuditEvent.source:source', }));
        }
        if (this["source"]) {
            (_g = outcome.issue).push.apply(_g, this.source.doModelValidation().issue);
        }
        if (this["entity"]) {
            this.entity.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AuditEvent._fts_dataType = 'AuditEvent';
    return AuditEvent;
}(DomainResource));

export { AuditEvent, AuditEventAgent, AuditEventAgentNetwork, AuditEventEntity, AuditEventEntityDetail, AuditEventSource };
//# sourceMappingURL=AuditEvent.js.map
