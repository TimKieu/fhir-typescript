// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AuditEvent
import * as fhir from '../fhir.js';
// @ts-ignore
import { NetworkTypeCodes } from '../fhirValueSets/NetworkTypeCodes.js';
// @ts-ignore
import { ParticipationRoleTypeCodings, } from '../fhirValueSets/ParticipationRoleTypeCodings.js';
// @ts-ignore
import { Dicm405MediatypeCodings, } from '../fhirValueSets/Dicm405MediatypeCodings.js';
// @ts-ignore
import { V3PurposeOfUseCodings, } from '../fhirValueSets/V3PurposeOfUseCodings.js';
// @ts-ignore
import { AuditSourceTypeCodings, } from '../fhirValueSets/AuditSourceTypeCodings.js';
// @ts-ignore
import { AuditEntityTypeCodings, } from '../fhirValueSets/AuditEntityTypeCodings.js';
// @ts-ignore
import { ObjectRoleCodings, } from '../fhirValueSets/ObjectRoleCodings.js';
// @ts-ignore
import { SecurityLabelsCodings, } from '../fhirValueSets/SecurityLabelsCodings.js';
// @ts-ignore
import { AuditEventTypeCodings, } from '../fhirValueSets/AuditEventTypeCodings.js';
// @ts-ignore
import { AuditEventSubTypeCodings, } from '../fhirValueSets/AuditEventSubTypeCodings.js';
// @ts-ignore
import { AuditEventActionCodes } from '../fhirValueSets/AuditEventActionCodes.js';
// @ts-ignore
import { AuditEventOutcomeCodes } from '../fhirValueSets/AuditEventOutcomeCodes.js';
/**
 * Logical network location for application activity, if the activity has a network location.
 */
export class AuditEventAgentNetwork extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventAgentNetwork - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['address']) {
            this.address = new fhir.FhirString({ value: source.address });
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
    }
    /**
     * Required-bound Value Set for type (AuditEvent.agent.network.type)
     */
    static get typeRequiredCodes() {
        return NetworkTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["address"]) {
            issues.push(...this.address.doModelValidation());
        }
        if (this['type'] && (!Object.values(NetworkTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type?:fhir.FhirCode fhir: AuditEvent.agent.network.type:code Required binding to: NetworkType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventAgentNetwork._fts_dataType = 'AuditEventAgentNetwork';
/**
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
 * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
 */
export class AuditEventAgent extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.role = [];
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['altId']) {
            this.altId = new fhir.FhirString({ value: source.altId });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['requestor']) {
            this.requestor = new fhir.FhirBoolean({ value: source.requestor });
        }
        else {
            this.requestor = null;
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.policy = [];
        }
        if (source['media']) {
            this.media = new fhir.Coding(source.media);
        }
        if (source['network']) {
            this.network = new fhir.AuditEventAgentNetwork(source.network);
        }
        if (source['purposeOfUse']) {
            this.purposeOfUse = source.purposeOfUse.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.purposeOfUse = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.agent.type)
     */
    static get typeExtensibleCodings() {
        return ParticipationRoleTypeCodings;
    }
    /**
     * Extensible-bound Value Set for media (AuditEvent.agent.media)
     */
    static get mediaExtensibleCodings() {
        return Dicm405MediatypeCodings;
    }
    /**
     * Extensible-bound Value Set for purposeOfUse (AuditEvent.agent.purposeOfUse)
     */
    static get purposeOfUseExtensibleCodings() {
        return V3PurposeOfUseCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["role"]) {
            this.role.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["who"]) {
            issues.push(...this.who.doModelValidation());
        }
        if (this["altId"]) {
            issues.push(...this.altId.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (!this['requestor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property requestor:fhir.FhirBoolean fhir: AuditEvent.agent.requestor:boolean' });
        }
        if (this["requestor"]) {
            issues.push(...this.requestor.doModelValidation());
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["policy"]) {
            this.policy.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["media"]) {
            issues.push(...this.media.doModelValidation());
        }
        if (this["network"]) {
            issues.push(...this.network.doModelValidation());
        }
        if (this["purposeOfUse"]) {
            this.purposeOfUse.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventAgent._fts_dataType = 'AuditEventAgent';
/**
 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
 */
export class AuditEventSource extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['site']) {
            this.site = new fhir.FhirString({ value: source.site });
        }
        if (source['observer']) {
            this.observer = new fhir.Reference(source.observer);
        }
        else {
            this.observer = null;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.Coding(x));
        }
        else {
            this.type = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.source.type)
     */
    static get typeExtensibleCodings() {
        return AuditSourceTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["site"]) {
            issues.push(...this.site.doModelValidation());
        }
        if (!this['observer']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property observer:fhir.Reference fhir: AuditEvent.source.observer:Reference' });
        }
        if (this["observer"]) {
            issues.push(...this.observer.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventSource._fts_dataType = 'AuditEventSource';
/**
 * Tagged value pairs for conveying additional information about the entity.
 */
export class AuditEventEntityDetail extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventEntityDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirString({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirString fhir: AuditEvent.entity.detail.type:string' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value: fhir: AuditEvent.entity.detail.value[x]:' });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventEntityDetail._fts_dataType = 'AuditEventEntityDetail';
/**
 * Internal flag to properly serialize choice-type element AuditEvent.entity.detail.value[x]
 */
AuditEventEntityDetail._fts_valueIsChoice = true;
/**
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
export class AuditEventEntity extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['what']) {
            this.what = new fhir.Reference(source.what);
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['role']) {
            this.role = new fhir.Coding(source.role);
        }
        if (source['lifecycle']) {
            this.lifecycle = new fhir.Coding(source.lifecycle);
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.Coding(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['query']) {
            this.query = new fhir.FhirBase64Binary({ value: source.query });
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.AuditEventEntityDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.entity.type)
     */
    static get typeExtensibleCodings() {
        return AuditEntityTypeCodings;
    }
    /**
     * Extensible-bound Value Set for role (AuditEvent.entity.role)
     */
    static get roleExtensibleCodings() {
        return ObjectRoleCodings;
    }
    /**
     * Extensible-bound Value Set for securityLabel (AuditEvent.entity.securityLabel)
     */
    static get securityLabelExtensibleCodings() {
        return SecurityLabelsCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["what"]) {
            issues.push(...this.what.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        if (this["lifecycle"]) {
            issues.push(...this.lifecycle.doModelValidation());
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["query"]) {
            issues.push(...this.query.doModelValidation());
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventEntity._fts_dataType = 'AuditEventEntity';
/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
export class AuditEvent extends fhir.DomainResource {
    /**
     * Default constructor for AuditEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AuditEvent';
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subtype']) {
            this.subtype = source.subtype.map((x) => new fhir.Coding(x));
        }
        else {
            this.subtype = [];
        }
        if (source['action']) {
            this.action = new fhir.FhirCode({ value: source.action });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded });
        }
        else {
            this.recorded = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.FhirCode({ value: source.outcome });
        }
        if (source['outcomeDesc']) {
            this.outcomeDesc = new fhir.FhirString({ value: source.outcomeDesc });
        }
        if (source['purposeOfEvent']) {
            this.purposeOfEvent = source.purposeOfEvent.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.purposeOfEvent = [];
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.AuditEventAgent(x));
        }
        else {
            this.agent = [];
        }
        if (source['source']) {
            this.source = new fhir.AuditEventSource(source.source);
        }
        else {
            this.source = null;
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.AuditEventEntity(x));
        }
        else {
            this.entity = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (AuditEvent.type)
     */
    static get typeExtensibleCodings() {
        return AuditEventTypeCodings;
    }
    /**
     * Extensible-bound Value Set for subtype (AuditEvent.subtype)
     */
    static get subtypeExtensibleCodings() {
        return AuditEventSubTypeCodings;
    }
    /**
     * Required-bound Value Set for action (AuditEvent.action)
     */
    static get actionRequiredCodes() {
        return AuditEventActionCodes;
    }
    /**
     * Required-bound Value Set for outcome (AuditEvent.outcome)
     */
    static get outcomeRequiredCodes() {
        return AuditEventOutcomeCodes;
    }
    /**
     * Extensible-bound Value Set for purposeOfEvent (AuditEvent.purposeOfEvent)
     */
    static get purposeOfEventExtensibleCodings() {
        return V3PurposeOfUseCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"AuditEvent" fhir: AuditEvent.resourceType:"AuditEvent"' });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.Coding fhir: AuditEvent.type:Coding' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["subtype"]) {
            this.subtype.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['action'] && (!Object.values(AuditEventActionCodes).includes(this.action))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property action?:fhir.FhirCode fhir: AuditEvent.action:code Required binding to: AuditEventAction' });
        }
        if (this["action"]) {
            issues.push(...this.action.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (!this['recorded']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property recorded:fhir.FhirInstant fhir: AuditEvent.recorded:instant' });
        }
        if (this["recorded"]) {
            issues.push(...this.recorded.doModelValidation());
        }
        if (this['outcome'] && (!Object.values(AuditEventOutcomeCodes).includes(this.outcome))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property outcome?:fhir.FhirCode fhir: AuditEvent.outcome:code Required binding to: AuditEventOutcome' });
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation());
        }
        if (this["outcomeDesc"]) {
            issues.push(...this.outcomeDesc.doModelValidation());
        }
        if (this["purposeOfEvent"]) {
            this.purposeOfEvent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['agent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property agent:fhir.AuditEventAgent[] fhir: AuditEvent.agent:agent' });
        }
        else if (!Array.isArray(this.agent)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property agent:fhir.AuditEventAgent[] fhir: AuditEvent.agent:agent' });
        }
        else if (this.agent.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property agent:fhir.AuditEventAgent[] fhir: AuditEvent.agent:agent' });
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['source']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property source:fhir.AuditEventSource fhir: AuditEvent.source:source' });
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (this["entity"]) {
            this.entity.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEvent._fts_dataType = 'AuditEvent';
//# sourceMappingURL=data:application/json;base64,