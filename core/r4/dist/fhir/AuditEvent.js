// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AuditEvent
import * as fhir from '../fhir.js';
// @ts-ignore
import { NetworkTypeVsValidation } from '../fhirValueSets/NetworkTypeVsValidation.js';
// @ts-ignore
import { AuditEventActionVsValidation } from '../fhirValueSets/AuditEventActionVsValidation.js';
// @ts-ignore
import { AuditEventOutcomeVsValidation } from '../fhirValueSets/AuditEventOutcomeVsValidation.js';
/**
 * Logical network location for application activity, if the activity has a network location.
 */
export class AuditEventAgentNetwork extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventAgentNetwork - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['address']) {
            this.address = new fhir.FhirString({ value: source.address });
        }
        if (source['_address']) {
            if (this.address) {
                this.address.addExtendedProperties(source._address);
            }
            else {
                this.address = new fhir.FhirString(source._address);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AuditEvent.agent.network';
        }
        iss.push(...this.vOS('address', exp));
        iss.push(...this.vOSV('type', exp, 'NetworkType', NetworkTypeVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventAgentNetwork._fts_dataType = 'AuditEventAgentNetwork';
/**
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
 * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
 */
export class AuditEventAgent extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.role = [];
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['altId']) {
            this.altId = new fhir.FhirString({ value: source.altId });
        }
        if (source['_altId']) {
            if (this.altId) {
                this.altId.addExtendedProperties(source._altId);
            }
            else {
                this.altId = new fhir.FhirString(source._altId);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['requestor']) {
            this.requestor = new fhir.FhirBoolean({ value: source.requestor });
        }
        else {
            this.requestor = null;
        }
        if (source['_requestor']) {
            if (this.requestor) {
                this.requestor.addExtendedProperties(source._requestor);
            }
            else {
                this.requestor = new fhir.FhirBoolean(source._requestor);
            }
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.policy = [];
        }
        if (source['_policy']) {
            source._policy.forEach((x, i) => {
                if (this.policy.length >= i) {
                    if (x) {
                        this.policy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.policy.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['media']) {
            this.media = new fhir.Coding(source.media);
        }
        if (source['network']) {
            this.network = new fhir.AuditEventAgentNetwork(source.network);
        }
        if (source['purposeOfUse']) {
            this.purposeOfUse = source.purposeOfUse.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.purposeOfUse = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AuditEvent.agent';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('role', exp));
        iss.push(...this.vOS('who', exp));
        iss.push(...this.vOS('altId', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vRS('requestor', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('policy', exp));
        iss.push(...this.vOS('media', exp));
        iss.push(...this.vOS('network', exp));
        iss.push(...this.vOA('purposeOfUse', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventAgent._fts_dataType = 'AuditEventAgent';
/**
 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
 */
export class AuditEventSource extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['site']) {
            this.site = new fhir.FhirString({ value: source.site });
        }
        if (source['_site']) {
            if (this.site) {
                this.site.addExtendedProperties(source._site);
            }
            else {
                this.site = new fhir.FhirString(source._site);
            }
        }
        if (source['observer']) {
            this.observer = new fhir.Reference(source.observer);
        }
        else {
            this.observer = null;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.Coding(x));
        }
        else {
            this.type = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AuditEvent.source';
        }
        iss.push(...this.vOS('site', exp));
        iss.push(...this.vRS('observer', exp));
        iss.push(...this.vOA('type', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventSource._fts_dataType = 'AuditEventSource';
/**
 * Tagged value pairs for conveying additional information about the entity.
 */
export class AuditEventEntityDetail extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventEntityDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirString({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirString(source._type);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AuditEvent.entity.detail';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventEntityDetail._fts_dataType = 'AuditEventEntityDetail';
/**
 * Internal flag to properly serialize choice-type element AuditEvent.entity.detail.value[x]
 */
AuditEventEntityDetail._fts_valueIsChoice = true;
/**
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
export class AuditEventEntity extends fhir.BackboneElement {
    /**
     * Default constructor for AuditEventEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['what']) {
            this.what = new fhir.Reference(source.what);
        }
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['role']) {
            this.role = new fhir.Coding(source.role);
        }
        if (source['lifecycle']) {
            this.lifecycle = new fhir.Coding(source.lifecycle);
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.Coding(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['query']) {
            this.query = new fhir.FhirBase64Binary({ value: source.query });
        }
        if (source['_query']) {
            if (this.query) {
                this.query.addExtendedProperties(source._query);
            }
            else {
                this.query = new fhir.FhirBase64Binary(source._query);
            }
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.AuditEventEntityDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AuditEvent.entity';
        }
        iss.push(...this.vOS('what', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOS('lifecycle', exp));
        iss.push(...this.vOA('securityLabel', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('query', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEventEntity._fts_dataType = 'AuditEventEntity';
/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
export class AuditEvent extends fhir.DomainResource {
    /**
     * Default constructor for AuditEvent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AuditEvent';
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subtype']) {
            this.subtype = source.subtype.map((x) => new fhir.Coding(x));
        }
        else {
            this.subtype = [];
        }
        if (source['action']) {
            this.action = new fhir.FhirCode({ value: source.action });
        }
        if (source['_action']) {
            if (this.action) {
                this.action.addExtendedProperties(source._action);
            }
            else {
                this.action = new fhir.FhirCode(source._action);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded });
        }
        else {
            this.recorded = null;
        }
        if (source['_recorded']) {
            if (this.recorded) {
                this.recorded.addExtendedProperties(source._recorded);
            }
            else {
                this.recorded = new fhir.FhirInstant(source._recorded);
            }
        }
        if (source['outcome']) {
            this.outcome = new fhir.FhirCode({ value: source.outcome });
        }
        if (source['_outcome']) {
            if (this.outcome) {
                this.outcome.addExtendedProperties(source._outcome);
            }
            else {
                this.outcome = new fhir.FhirCode(source._outcome);
            }
        }
        if (source['outcomeDesc']) {
            this.outcomeDesc = new fhir.FhirString({ value: source.outcomeDesc });
        }
        if (source['_outcomeDesc']) {
            if (this.outcomeDesc) {
                this.outcomeDesc.addExtendedProperties(source._outcomeDesc);
            }
            else {
                this.outcomeDesc = new fhir.FhirString(source._outcomeDesc);
            }
        }
        if (source['purposeOfEvent']) {
            this.purposeOfEvent = source.purposeOfEvent.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.purposeOfEvent = [];
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.AuditEventAgent(x));
        }
        else {
            this.agent = [];
        }
        if (source['source']) {
            this.source = new fhir.AuditEventSource(source.source);
        }
        else {
            this.source = null;
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.AuditEventEntity(x));
        }
        else {
            this.entity = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'AuditEvent';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOA('subtype', exp));
        iss.push(...this.vOSV('action', exp, 'AuditEventAction', AuditEventActionVsValidation, 'r'));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRS('recorded', exp));
        iss.push(...this.vOSV('outcome', exp, 'AuditEventOutcome', AuditEventOutcomeVsValidation, 'r'));
        iss.push(...this.vOS('outcomeDesc', exp));
        iss.push(...this.vOA('purposeOfEvent', exp));
        iss.push(...this.vRA('agent', exp));
        iss.push(...this.vRS('source', exp));
        iss.push(...this.vOA('entity', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AuditEvent._fts_dataType = 'AuditEvent';
//# sourceMappingURL=data:application/json;base64,