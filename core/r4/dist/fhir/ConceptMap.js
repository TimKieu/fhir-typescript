// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ConceptMap
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConceptMapEquivalenceCodes } from '../fhirValueSets/ConceptMapEquivalenceCodes.js';
// @ts-ignore
import { ConceptmapUnmappedModeCodes } from '../fhirValueSets/ConceptmapUnmappedModeCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
 */
export class ConceptMapGroupElementTargetDependsOn extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTargetDependsOn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['property']) {
            this.property = new fhir.FhirUri({ value: source.property });
        }
        else {
            this.property = null;
        }
        if (source['_property']) {
            if (this.property) {
                this.property.addExtendedProperties(source._property);
            }
            else {
                this.property = new fhir.FhirUri(source._property);
            }
        }
        if (source['system']) {
            this.system = new fhir.FhirCanonical({ value: source.system });
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirCanonical(source._system);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ConceptMap.group.element.target.dependsOn';
        }
        if (!this['property']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property property fhir: ConceptMap.group.element.target.dependsOn.property:uri', expression: [expression] });
        }
        if (this["property"]) {
            issues.push(...this.property.doModelValidation(expression + '.property'));
        }
        if (this["system"]) {
            issues.push(...this.system.doModelValidation(expression + '.system'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: ConceptMap.group.element.target.dependsOn.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation(expression + '.display'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupElementTargetDependsOn._fts_dataType = 'ConceptMapGroupElementTargetDependsOn';
/**
 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
 */
export class ConceptMapGroupElementTarget extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElementTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['equivalence']) {
            this.equivalence = new fhir.FhirCode({ value: source.equivalence });
        }
        else {
            this.equivalence = null;
        }
        if (source['_equivalence']) {
            if (this.equivalence) {
                this.equivalence.addExtendedProperties(source._equivalence);
            }
            else {
                this.equivalence = new fhir.FhirCode(source._equivalence);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['dependsOn']) {
            this.dependsOn = source.dependsOn.map((x) => new fhir.ConceptMapGroupElementTargetDependsOn(x));
        }
        else {
            this.dependsOn = [];
        }
        if (source['product']) {
            this.product = source.product.map((x) => new fhir.ConceptMapGroupElementTargetDependsOn(x));
        }
        else {
            this.product = [];
        }
    }
    /**
     * Required-bound Value Set for equivalence (ConceptMap.group.element.target.equivalence)
     */
    static get equivalenceRequiredCodes() {
        return ConceptMapEquivalenceCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ConceptMap.group.element.target';
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation(expression + '.display'));
        }
        if (!this['equivalence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property equivalence fhir: ConceptMap.group.element.target.equivalence:code', expression: [expression] });
        }
        if (this['equivalence'] && (!Object.values(ConceptMapEquivalenceCodes).includes(this.equivalence.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'equivalence (ConceptMap.group.element.target.equivalence) of type code is missing code for Required binding to: ConceptMapEquivalence', expression: [expression] });
        }
        if (this["equivalence"]) {
            issues.push(...this.equivalence.doModelValidation(expression + '.equivalence'));
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation(expression + '.comment'));
        }
        if (this["dependsOn"]) {
            this.dependsOn.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.dependsOn[${i}]`)); });
        }
        if (this["product"]) {
            this.product.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.product[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupElementTarget._fts_dataType = 'ConceptMapGroupElementTarget';
/**
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
export class ConceptMapGroupElement extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.ConceptMapGroupElementTarget(x));
        }
        else {
            this.target = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ConceptMap.group.element';
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation(expression + '.display'));
        }
        if (this["target"]) {
            this.target.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.target[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupElement._fts_dataType = 'ConceptMapGroupElement';
/**
 * This only applies if the source code has a system value that matches the system defined for the group.
 */
export class ConceptMapGroupUnmapped extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroupUnmapped - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        else {
            this.mode = null;
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirCanonical({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirCanonical(source._url);
            }
        }
    }
    /**
     * Required-bound Value Set for mode (ConceptMap.group.unmapped.mode)
     */
    static get modeRequiredCodes() {
        return ConceptmapUnmappedModeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ConceptMap.group.unmapped';
        }
        if (!this['mode']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property mode fhir: ConceptMap.group.unmapped.mode:code', expression: [expression] });
        }
        if (this['mode'] && (!Object.values(ConceptmapUnmappedModeCodes).includes(this.mode.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'mode (ConceptMap.group.unmapped.mode) of type code is missing code for Required binding to: ConceptmapUnmappedMode', expression: [expression] });
        }
        if (this["mode"]) {
            issues.push(...this.mode.doModelValidation(expression + '.mode'));
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation(expression + '.display'));
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroupUnmapped._fts_dataType = 'ConceptMapGroupUnmapped';
/**
 * A group of mappings that all have the same source and target system.
 */
export class ConceptMapGroup extends fhir.BackboneElement {
    /**
     * Default constructor for ConceptMapGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['source']) {
            this.source = new fhir.FhirUri({ value: source.source });
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirUri(source._source);
            }
        }
        if (source['sourceVersion']) {
            this.sourceVersion = new fhir.FhirString({ value: source.sourceVersion });
        }
        if (source['_sourceVersion']) {
            if (this.sourceVersion) {
                this.sourceVersion.addExtendedProperties(source._sourceVersion);
            }
            else {
                this.sourceVersion = new fhir.FhirString(source._sourceVersion);
            }
        }
        if (source['target']) {
            this.target = new fhir.FhirUri({ value: source.target });
        }
        if (source['_target']) {
            if (this.target) {
                this.target.addExtendedProperties(source._target);
            }
            else {
                this.target = new fhir.FhirUri(source._target);
            }
        }
        if (source['targetVersion']) {
            this.targetVersion = new fhir.FhirString({ value: source.targetVersion });
        }
        if (source['_targetVersion']) {
            if (this.targetVersion) {
                this.targetVersion.addExtendedProperties(source._targetVersion);
            }
            else {
                this.targetVersion = new fhir.FhirString(source._targetVersion);
            }
        }
        if (source['element']) {
            this.element = source.element.map((x) => new fhir.ConceptMapGroupElement(x));
        }
        else {
            this.element = [];
        }
        if (source['unmapped']) {
            this.unmapped = new fhir.ConceptMapGroupUnmapped(source.unmapped);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ConceptMap.group';
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation(expression + '.source'));
        }
        if (this["sourceVersion"]) {
            issues.push(...this.sourceVersion.doModelValidation(expression + '.sourceVersion'));
        }
        if (this["target"]) {
            issues.push(...this.target.doModelValidation(expression + '.target'));
        }
        if (this["targetVersion"]) {
            issues.push(...this.targetVersion.doModelValidation(expression + '.targetVersion'));
        }
        if (!this['element']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element fhir: ConceptMap.group.element:element', expression: [expression] });
        }
        else if (!Array.isArray(this.element)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property element fhir: ConceptMap.group.element:element', expression: [expression] });
        }
        else if (this.element.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property element fhir: ConceptMap.group.element:element', expression: [expression] });
        }
        if (this["element"]) {
            this.element.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.element[${i}]`)); });
        }
        if (this["unmapped"]) {
            issues.push(...this.unmapped.doModelValidation(expression + '.unmapped'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMapGroup._fts_dataType = 'ConceptMapGroup';
/**
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
export class ConceptMap extends fhir.DomainResource {
    /**
     * Default constructor for ConceptMap - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ConceptMap';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['source']) {
            this.source = source.source;
        }
        else if (source['sourceUri']) {
            this.source = new fhir.FhirUri({ value: source.sourceUri });
        }
        else if (source['sourceCanonical']) {
            this.source = new fhir.FhirCanonical({ value: source.sourceCanonical });
        }
        if (source['target']) {
            this.target = source.target;
        }
        else if (source['targetUri']) {
            this.target = new fhir.FhirUri({ value: source.targetUri });
        }
        else if (source['targetCanonical']) {
            this.target = new fhir.FhirCanonical({ value: source.targetCanonical });
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.ConceptMapGroup(x));
        }
        else {
            this.group = [];
        }
    }
    /**
     * Required-bound Value Set for status (ConceptMap.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ConceptMap';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: ConceptMap.resourceType:"ConceptMap"', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation(expression + '.identifier'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: ConceptMap.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (ConceptMap.status) of type code is missing code for Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation(expression + '.experimental'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation(expression + '.purpose'));
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (this["group"]) {
            this.group.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.group[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConceptMap._fts_dataType = 'ConceptMap';
/**
 * Internal flag to properly serialize choice-type element ConceptMap.source[x]
 */
ConceptMap._fts_sourceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ConceptMap.target[x]
 */
ConceptMap._fts_targetIsChoice = true;
//# sourceMappingURL=data:application/json;base64,