/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { Identifier } from './Identifier.js';
import { FhirInteger } from './FhirInteger.js';
import { Attachment } from './Attachment.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * The linkages between sugar residues will also be captured.
 */
var SubstanceNucleicAcidSubunitLinkage = /** @class */ (function (_super) {
    __extends(SubstanceNucleicAcidSubunitLinkage, _super);
    /**
     * Default constructor for SubstanceNucleicAcidSubunitLinkage - initializes any required elements to null if a value is not provided.
     */
    function SubstanceNucleicAcidSubunitLinkage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['connectivity']) {
            _this.connectivity = new FhirString({ value: source.connectivity });
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['residueSite']) {
            _this.residueSite = new FhirString({ value: source.residueSite });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceNucleicAcidSubunitLinkage.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["connectivity"]) {
            (_a = outcome.issue).push.apply(_a, this.connectivity.doModelValidation().issue);
        }
        if (this["identifier"]) {
            (_b = outcome.issue).push.apply(_b, this.identifier.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["residueSite"]) {
            (_d = outcome.issue).push.apply(_d, this.residueSite.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceNucleicAcidSubunitLinkage._fts_dataType = 'SubstanceNucleicAcidSubunitLinkage';
    return SubstanceNucleicAcidSubunitLinkage;
}(BackboneElement));
/**
 * 5.3.6.8.1 Sugar ID (Mandatory).
 */
var SubstanceNucleicAcidSubunitSugar = /** @class */ (function (_super) {
    __extends(SubstanceNucleicAcidSubunitSugar, _super);
    /**
     * Default constructor for SubstanceNucleicAcidSubunitSugar - initializes any required elements to null if a value is not provided.
     */
    function SubstanceNucleicAcidSubunitSugar(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['residueSite']) {
            _this.residueSite = new FhirString({ value: source.residueSite });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceNucleicAcidSubunitSugar.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        if (this["residueSite"]) {
            (_c = outcome.issue).push.apply(_c, this.residueSite.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceNucleicAcidSubunitSugar._fts_dataType = 'SubstanceNucleicAcidSubunitSugar';
    return SubstanceNucleicAcidSubunitSugar;
}(BackboneElement));
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
var SubstanceNucleicAcidSubunit = /** @class */ (function (_super) {
    __extends(SubstanceNucleicAcidSubunit, _super);
    /**
     * Default constructor for SubstanceNucleicAcidSubunit - initializes any required elements to null if a value is not provided.
     */
    function SubstanceNucleicAcidSubunit(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['subunit']) {
            _this.subunit = new FhirInteger({ value: source.subunit });
        }
        if (source['sequence']) {
            _this.sequence = new FhirString({ value: source.sequence });
        }
        if (source['length']) {
            _this.length = new FhirInteger({ value: source.length });
        }
        if (source['sequenceAttachment']) {
            _this.sequenceAttachment = new Attachment(source.sequenceAttachment);
        }
        if (source['fivePrime']) {
            _this.fivePrime = new CodeableConcept(source.fivePrime);
        }
        if (source['threePrime']) {
            _this.threePrime = new CodeableConcept(source.threePrime);
        }
        if (source['linkage']) {
            _this.linkage = source.linkage.map(function (x) { return new SubstanceNucleicAcidSubunitLinkage(x); });
        }
        else {
            _this.linkage = [];
        }
        if (source['sugar']) {
            _this.sugar = source.sugar.map(function (x) { return new SubstanceNucleicAcidSubunitSugar(x); });
        }
        else {
            _this.sugar = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceNucleicAcidSubunit.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["subunit"]) {
            (_a = outcome.issue).push.apply(_a, this.subunit.doModelValidation().issue);
        }
        if (this["sequence"]) {
            (_b = outcome.issue).push.apply(_b, this.sequence.doModelValidation().issue);
        }
        if (this["length"]) {
            (_c = outcome.issue).push.apply(_c, this.length.doModelValidation().issue);
        }
        if (this["sequenceAttachment"]) {
            (_d = outcome.issue).push.apply(_d, this.sequenceAttachment.doModelValidation().issue);
        }
        if (this["fivePrime"]) {
            (_e = outcome.issue).push.apply(_e, this.fivePrime.doModelValidation().issue);
        }
        if (this["threePrime"]) {
            (_f = outcome.issue).push.apply(_f, this.threePrime.doModelValidation().issue);
        }
        if (this["linkage"]) {
            this.linkage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["sugar"]) {
            this.sugar.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceNucleicAcidSubunit._fts_dataType = 'SubstanceNucleicAcidSubunit';
    return SubstanceNucleicAcidSubunit;
}(BackboneElement));
/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
var SubstanceNucleicAcid = /** @class */ (function (_super) {
    __extends(SubstanceNucleicAcid, _super);
    /**
     * Default constructor for SubstanceNucleicAcid - initializes any required elements to null if a value is not provided.
     */
    function SubstanceNucleicAcid(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SubstanceNucleicAcid';
        if (source['sequenceType']) {
            _this.sequenceType = new CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            _this.numberOfSubunits = new FhirInteger({ value: source.numberOfSubunits });
        }
        if (source['areaOfHybridisation']) {
            _this.areaOfHybridisation = new FhirString({ value: source.areaOfHybridisation });
        }
        if (source['oligoNucleotideType']) {
            _this.oligoNucleotideType = new CodeableConcept(source.oligoNucleotideType);
        }
        if (source['subunit']) {
            _this.subunit = source.subunit.map(function (x) { return new SubstanceNucleicAcidSubunit(x); });
        }
        else {
            _this.subunit = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceNucleicAcid.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SubstanceNucleicAcid" fhir: SubstanceNucleicAcid.resourceType:"SubstanceNucleicAcid"', }));
        }
        if (this["sequenceType"]) {
            (_a = outcome.issue).push.apply(_a, this.sequenceType.doModelValidation().issue);
        }
        if (this["numberOfSubunits"]) {
            (_b = outcome.issue).push.apply(_b, this.numberOfSubunits.doModelValidation().issue);
        }
        if (this["areaOfHybridisation"]) {
            (_c = outcome.issue).push.apply(_c, this.areaOfHybridisation.doModelValidation().issue);
        }
        if (this["oligoNucleotideType"]) {
            (_d = outcome.issue).push.apply(_d, this.oligoNucleotideType.doModelValidation().issue);
        }
        if (this["subunit"]) {
            this.subunit.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceNucleicAcid._fts_dataType = 'SubstanceNucleicAcid';
    return SubstanceNucleicAcid;
}(DomainResource));

export { SubstanceNucleicAcid, SubstanceNucleicAcidSubunit, SubstanceNucleicAcidSubunitLinkage, SubstanceNucleicAcidSubunitSugar };
//# sourceMappingURL=SubstanceNucleicAcid.js.map
