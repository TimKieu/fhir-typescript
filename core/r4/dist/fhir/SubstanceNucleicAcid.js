// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceNucleicAcid
import * as fhir from '../fhir.js';
/**
 * The linkages between sugar residues will also be captured.
 */
export class SubstanceNucleicAcidSubunitLinkage extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitLinkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['connectivity']) {
            this.connectivity = new fhir.FhirString({ value: source.connectivity });
        }
        if (source['_connectivity']) {
            if (this.connectivity) {
                this.connectivity.addExtendedProperties(source._connectivity);
            }
            else {
                this.connectivity = new fhir.FhirString(source._connectivity);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['residueSite']) {
            this.residueSite = new fhir.FhirString({ value: source.residueSite });
        }
        if (source['_residueSite']) {
            if (this.residueSite) {
                this.residueSite.addExtendedProperties(source._residueSite);
            }
            else {
                this.residueSite = new fhir.FhirString(source._residueSite);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceNucleicAcid.subunit.linkage';
        }
        iss.push(...this.vOS('connectivity', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('residueSite', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcidSubunitLinkage._fts_dataType = 'SubstanceNucleicAcidSubunitLinkage';
/**
 * 5.3.6.8.1 Sugar ID (Mandatory).
 */
export class SubstanceNucleicAcidSubunitSugar extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitSugar - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['residueSite']) {
            this.residueSite = new fhir.FhirString({ value: source.residueSite });
        }
        if (source['_residueSite']) {
            if (this.residueSite) {
                this.residueSite.addExtendedProperties(source._residueSite);
            }
            else {
                this.residueSite = new fhir.FhirString(source._residueSite);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceNucleicAcid.subunit.sugar';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('residueSite', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcidSubunitSugar._fts_dataType = 'SubstanceNucleicAcidSubunitSugar';
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export class SubstanceNucleicAcidSubunit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['subunit']) {
            this.subunit = new fhir.FhirInteger({ value: source.subunit });
        }
        if (source['_subunit']) {
            if (this.subunit) {
                this.subunit.addExtendedProperties(source._subunit);
            }
            else {
                this.subunit = new fhir.FhirInteger(source._subunit);
            }
        }
        if (source['sequence']) {
            this.sequence = new fhir.FhirString({ value: source.sequence });
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirString(source._sequence);
            }
        }
        if (source['length']) {
            this.length = new fhir.FhirInteger({ value: source.length });
        }
        if (source['_length']) {
            if (this.length) {
                this.length.addExtendedProperties(source._length);
            }
            else {
                this.length = new fhir.FhirInteger(source._length);
            }
        }
        if (source['sequenceAttachment']) {
            this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment);
        }
        if (source['fivePrime']) {
            this.fivePrime = new fhir.CodeableConcept(source.fivePrime);
        }
        if (source['threePrime']) {
            this.threePrime = new fhir.CodeableConcept(source.threePrime);
        }
        if (source['linkage']) {
            this.linkage = source.linkage.map((x) => new fhir.SubstanceNucleicAcidSubunitLinkage(x));
        }
        else {
            this.linkage = [];
        }
        if (source['sugar']) {
            this.sugar = source.sugar.map((x) => new fhir.SubstanceNucleicAcidSubunitSugar(x));
        }
        else {
            this.sugar = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceNucleicAcid.subunit';
        }
        iss.push(...this.vOS('subunit', exp));
        iss.push(...this.vOS('sequence', exp));
        iss.push(...this.vOS('length', exp));
        iss.push(...this.vOS('sequenceAttachment', exp));
        iss.push(...this.vOS('fivePrime', exp));
        iss.push(...this.vOS('threePrime', exp));
        iss.push(...this.vOA('linkage', exp));
        iss.push(...this.vOA('sugar', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcidSubunit._fts_dataType = 'SubstanceNucleicAcidSubunit';
/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
export class SubstanceNucleicAcid extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceNucleicAcid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceNucleicAcid';
        if (source['sequenceType']) {
            this.sequenceType = new fhir.CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            this.numberOfSubunits = new fhir.FhirInteger({ value: source.numberOfSubunits });
        }
        if (source['_numberOfSubunits']) {
            if (this.numberOfSubunits) {
                this.numberOfSubunits.addExtendedProperties(source._numberOfSubunits);
            }
            else {
                this.numberOfSubunits = new fhir.FhirInteger(source._numberOfSubunits);
            }
        }
        if (source['areaOfHybridisation']) {
            this.areaOfHybridisation = new fhir.FhirString({ value: source.areaOfHybridisation });
        }
        if (source['_areaOfHybridisation']) {
            if (this.areaOfHybridisation) {
                this.areaOfHybridisation.addExtendedProperties(source._areaOfHybridisation);
            }
            else {
                this.areaOfHybridisation = new fhir.FhirString(source._areaOfHybridisation);
            }
        }
        if (source['oligoNucleotideType']) {
            this.oligoNucleotideType = new fhir.CodeableConcept(source.oligoNucleotideType);
        }
        if (source['subunit']) {
            this.subunit = source.subunit.map((x) => new fhir.SubstanceNucleicAcidSubunit(x));
        }
        else {
            this.subunit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceNucleicAcid';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('sequenceType', exp));
        iss.push(...this.vOS('numberOfSubunits', exp));
        iss.push(...this.vOS('areaOfHybridisation', exp));
        iss.push(...this.vOS('oligoNucleotideType', exp));
        iss.push(...this.vOA('subunit', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcid._fts_dataType = 'SubstanceNucleicAcid';
//# sourceMappingURL=data:application/json;base64,