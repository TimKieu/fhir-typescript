// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceNucleicAcid
import * as fhir from '../fhir.js';
/**
 * The linkages between sugar residues will also be captured.
 */
export class SubstanceNucleicAcidSubunitLinkage extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitLinkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['connectivity']) {
            this.connectivity = new fhir.FhirString({ value: source.connectivity });
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['residueSite']) {
            this.residueSite = new fhir.FhirString({ value: source.residueSite });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["connectivity"]) {
            issues.push(...this.connectivity.doModelValidation());
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["residueSite"]) {
            issues.push(...this.residueSite.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcidSubunitLinkage._fts_dataType = 'SubstanceNucleicAcidSubunitLinkage';
/**
 * 5.3.6.8.1 Sugar ID (Mandatory).
 */
export class SubstanceNucleicAcidSubunitSugar extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunitSugar - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['residueSite']) {
            this.residueSite = new fhir.FhirString({ value: source.residueSite });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["residueSite"]) {
            issues.push(...this.residueSite.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcidSubunitSugar._fts_dataType = 'SubstanceNucleicAcidSubunitSugar';
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export class SubstanceNucleicAcidSubunit extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceNucleicAcidSubunit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['subunit']) {
            this.subunit = new fhir.FhirInteger({ value: source.subunit });
        }
        if (source['sequence']) {
            this.sequence = new fhir.FhirString({ value: source.sequence });
        }
        if (source['length']) {
            this.length = new fhir.FhirInteger({ value: source.length });
        }
        if (source['sequenceAttachment']) {
            this.sequenceAttachment = new fhir.Attachment(source.sequenceAttachment);
        }
        if (source['fivePrime']) {
            this.fivePrime = new fhir.CodeableConcept(source.fivePrime);
        }
        if (source['threePrime']) {
            this.threePrime = new fhir.CodeableConcept(source.threePrime);
        }
        if (source['linkage']) {
            this.linkage = source.linkage.map((x) => new fhir.SubstanceNucleicAcidSubunitLinkage(x));
        }
        else {
            this.linkage = [];
        }
        if (source['sugar']) {
            this.sugar = source.sugar.map((x) => new fhir.SubstanceNucleicAcidSubunitSugar(x));
        }
        else {
            this.sugar = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["subunit"]) {
            issues.push(...this.subunit.doModelValidation());
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (this["length"]) {
            issues.push(...this.length.doModelValidation());
        }
        if (this["sequenceAttachment"]) {
            issues.push(...this.sequenceAttachment.doModelValidation());
        }
        if (this["fivePrime"]) {
            issues.push(...this.fivePrime.doModelValidation());
        }
        if (this["threePrime"]) {
            issues.push(...this.threePrime.doModelValidation());
        }
        if (this["linkage"]) {
            this.linkage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["sugar"]) {
            this.sugar.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcidSubunit._fts_dataType = 'SubstanceNucleicAcidSubunit';
/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
export class SubstanceNucleicAcid extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceNucleicAcid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceNucleicAcid';
        if (source['sequenceType']) {
            this.sequenceType = new fhir.CodeableConcept(source.sequenceType);
        }
        if (source['numberOfSubunits']) {
            this.numberOfSubunits = new fhir.FhirInteger({ value: source.numberOfSubunits });
        }
        if (source['areaOfHybridisation']) {
            this.areaOfHybridisation = new fhir.FhirString({ value: source.areaOfHybridisation });
        }
        if (source['oligoNucleotideType']) {
            this.oligoNucleotideType = new fhir.CodeableConcept(source.oligoNucleotideType);
        }
        if (source['subunit']) {
            this.subunit = source.subunit.map((x) => new fhir.SubstanceNucleicAcidSubunit(x));
        }
        else {
            this.subunit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"SubstanceNucleicAcid" fhir: SubstanceNucleicAcid.resourceType:"SubstanceNucleicAcid"', });
        }
        if (this["sequenceType"]) {
            issues.push(...this.sequenceType.doModelValidation());
        }
        if (this["numberOfSubunits"]) {
            issues.push(...this.numberOfSubunits.doModelValidation());
        }
        if (this["areaOfHybridisation"]) {
            issues.push(...this.areaOfHybridisation.doModelValidation());
        }
        if (this["oligoNucleotideType"]) {
            issues.push(...this.oligoNucleotideType.doModelValidation());
        }
        if (this["subunit"]) {
            this.subunit.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceNucleicAcid._fts_dataType = 'SubstanceNucleicAcid';
//# sourceMappingURL=data:application/json;base64,