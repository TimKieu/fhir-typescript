// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AllergyIntolerance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReactionEventSeverityCodes } from '../fhirValueSets/ReactionEventSeverityCodes.js';
// @ts-ignore
import { AllergyintoleranceClinicalCodes } from '../fhirValueSets/AllergyintoleranceClinicalCodes.js';
// @ts-ignore
import { AllergyintoleranceVerificationCodes } from '../fhirValueSets/AllergyintoleranceVerificationCodes.js';
// @ts-ignore
import { AllergyIntoleranceTypeCodes } from '../fhirValueSets/AllergyIntoleranceTypeCodes.js';
// @ts-ignore
import { AllergyIntoleranceCategoryCodes } from '../fhirValueSets/AllergyIntoleranceCategoryCodes.js';
// @ts-ignore
import { AllergyIntoleranceCriticalityCodes } from '../fhirValueSets/AllergyIntoleranceCriticalityCodes.js';
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
export class AllergyIntoleranceReaction extends fhir.BackboneElement {
    /**
     * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = new fhir.CodeableConcept(source.substance);
        }
        if (source['manifestation']) {
            this.manifestation = source.manifestation.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.manifestation = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['onset']) {
            this.onset = new fhir.FhirDateTime({ value: source.onset });
        }
        if (source['_onset']) {
            if (this.onset) {
                this.onset.addExtendedProperties(source._onset);
            }
            else {
                this.onset = new fhir.FhirDateTime(source._onset);
            }
        }
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity);
            }
        }
        if (source['exposureRoute']) {
            this.exposureRoute = new fhir.CodeableConcept(source.exposureRoute);
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Required-bound Value Set for severity (AllergyIntolerance.reaction.severity)
     */
    static get severityRequiredCodes() {
        return ReactionEventSeverityCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'AllergyIntolerance.reaction';
        }
        if (this["substance"]) {
            issues.push(...this.substance.doModelValidation(expression + '.substance'));
        }
        if (!this['manifestation']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property manifestation fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept', expression: [expression] });
        }
        else if (!Array.isArray(this.manifestation)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property manifestation fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept', expression: [expression] });
        }
        else if (this.manifestation.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property manifestation fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept', expression: [expression] });
        }
        if (this["manifestation"]) {
            this.manifestation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.manifestation[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["onset"]) {
            issues.push(...this.onset.doModelValidation(expression + '.onset'));
        }
        if (this['severity'] && (!Object.values(ReactionEventSeverityCodes).includes(this.severity.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property severity fhir: AllergyIntolerance.reaction.severity:code Required binding to: ReactionEventSeverity', expression: [expression] });
        }
        if (this["severity"]) {
            issues.push(...this.severity.doModelValidation(expression + '.severity'));
        }
        if (this["exposureRoute"]) {
            issues.push(...this.exposureRoute.doModelValidation(expression + '.exposureRoute'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntoleranceReaction._fts_dataType = 'AllergyIntoleranceReaction';
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export class AllergyIntolerance extends fhir.DomainResource {
    /**
     * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AllergyIntolerance';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['clinicalStatus']) {
            this.clinicalStatus = new fhir.CodeableConcept(source.clinicalStatus);
        }
        if (source['verificationStatus']) {
            this.verificationStatus = new fhir.CodeableConcept(source.verificationStatus);
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.category = [];
        }
        if (source['_category']) {
            source._category.forEach((x, i) => {
                if (this.category.length >= i) {
                    if (x) {
                        this.category[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.category.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['criticality']) {
            this.criticality = new fhir.FhirCode({ value: source.criticality });
        }
        if (source['_criticality']) {
            if (this.criticality) {
                this.criticality.addExtendedProperties(source._criticality);
            }
            else {
                this.criticality = new fhir.FhirCode(source._criticality);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetDateTime']) {
            this.onset = new fhir.FhirDateTime({ value: source.onsetDateTime });
        }
        else if (source['onsetAge']) {
            this.onset = new fhir.Age(source.onsetAge);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange);
        }
        else if (source['onsetString']) {
            this.onset = new fhir.FhirString({ value: source.onsetString });
        }
        if (source['recordedDate']) {
            this.recordedDate = new fhir.FhirDateTime({ value: source.recordedDate });
        }
        if (source['_recordedDate']) {
            if (this.recordedDate) {
                this.recordedDate.addExtendedProperties(source._recordedDate);
            }
            else {
                this.recordedDate = new fhir.FhirDateTime(source._recordedDate);
            }
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter);
        }
        if (source['lastOccurrence']) {
            this.lastOccurrence = new fhir.FhirDateTime({ value: source.lastOccurrence });
        }
        if (source['_lastOccurrence']) {
            if (this.lastOccurrence) {
                this.lastOccurrence.addExtendedProperties(source._lastOccurrence);
            }
            else {
                this.lastOccurrence = new fhir.FhirDateTime(source._lastOccurrence);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['reaction']) {
            this.reaction = source.reaction.map((x) => new fhir.AllergyIntoleranceReaction(x));
        }
        else {
            this.reaction = [];
        }
    }
    /**
     * Required-bound Value Set for clinicalStatus (AllergyIntolerance.clinicalStatus)
     */
    static get clinicalStatusRequiredCodes() {
        return AllergyintoleranceClinicalCodes;
    }
    /**
     * Required-bound Value Set for verificationStatus (AllergyIntolerance.verificationStatus)
     */
    static get verificationStatusRequiredCodes() {
        return AllergyintoleranceVerificationCodes;
    }
    /**
     * Required-bound Value Set for type (AllergyIntolerance.type)
     */
    static get typeRequiredCodes() {
        return AllergyIntoleranceTypeCodes;
    }
    /**
     * Required-bound Value Set for category (AllergyIntolerance.category)
     */
    static get categoryRequiredCodes() {
        return AllergyIntoleranceCategoryCodes;
    }
    /**
     * Required-bound Value Set for criticality (AllergyIntolerance.criticality)
     */
    static get criticalityRequiredCodes() {
        return AllergyIntoleranceCriticalityCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'AllergyIntolerance';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: AllergyIntolerance.resourceType:"AllergyIntolerance"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["clinicalStatus"]) {
            issues.push(...this.clinicalStatus.doModelValidation(expression + '.clinicalStatus'));
        }
        if (this["verificationStatus"]) {
            issues.push(...this.verificationStatus.doModelValidation(expression + '.verificationStatus'));
        }
        if (this['type'] && (!Object.values(AllergyIntoleranceTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: AllergyIntolerance.type:code Required binding to: AllergyIntoleranceType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this['category']) {
            this.category.forEach((v) => {
                if (!Object.values(AllergyIntoleranceCategoryCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property category fhir: AllergyIntolerance.category:code Required binding to: AllergyIntoleranceCategory', expression: [expression] });
                }
            });
        }
        if (this["category"]) {
            this.category.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.category[${i}]`)); });
        }
        if (this['criticality'] && (!Object.values(AllergyIntoleranceCriticalityCodes).includes(this.criticality.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property criticality fhir: AllergyIntolerance.criticality:code Required binding to: AllergyIntoleranceCriticality', expression: [expression] });
        }
        if (this["criticality"]) {
            issues.push(...this.criticality.doModelValidation(expression + '.criticality'));
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient fhir: AllergyIntolerance.patient:Reference', expression: [expression] });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation(expression + '.patient'));
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation(expression + '.encounter'));
        }
        if (this["recordedDate"]) {
            issues.push(...this.recordedDate.doModelValidation(expression + '.recordedDate'));
        }
        if (this["recorder"]) {
            issues.push(...this.recorder.doModelValidation(expression + '.recorder'));
        }
        if (this["asserter"]) {
            issues.push(...this.asserter.doModelValidation(expression + '.asserter'));
        }
        if (this["lastOccurrence"]) {
            issues.push(...this.lastOccurrence.doModelValidation(expression + '.lastOccurrence'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["reaction"]) {
            this.reaction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reaction[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AllergyIntolerance._fts_dataType = 'AllergyIntolerance';
/**
 * Internal flag to properly serialize choice-type element AllergyIntolerance.onset[x]
 */
AllergyIntolerance._fts_onsetIsChoice = true;
//# sourceMappingURL=data:application/json;base64,