/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ReactionEventSeverityCodings } from '../fhirValueSets/ReactionEventSeverityCodings.js';
import { AllergyintoleranceClinicalCodings } from '../fhirValueSets/AllergyintoleranceClinicalCodings.js';
import { AllergyintoleranceVerificationCodings } from '../fhirValueSets/AllergyintoleranceVerificationCodings.js';
import { AllergyIntoleranceTypeCodings } from '../fhirValueSets/AllergyIntoleranceTypeCodings.js';
import { AllergyIntoleranceCategoryCodings } from '../fhirValueSets/AllergyIntoleranceCategoryCodings.js';
import { AllergyIntoleranceCriticalityCodings } from '../fhirValueSets/AllergyIntoleranceCriticalityCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Annotation } from './Annotation.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { Age } from './Age.js';
import { Period } from './Period.js';
import { Range } from './Range.js';

// <auto-generated/>
/**
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
var AllergyIntoleranceReaction = /** @class */ (function (_super) {
    __extends(AllergyIntoleranceReaction, _super);
    /**
     * Default constructor for AllergyIntoleranceReaction - initializes any required elements to null if a value is not provided.
     */
    function AllergyIntoleranceReaction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['substance']) {
            _this.substance = new CodeableConcept(source.substance);
        }
        if (source['manifestation']) {
            _this.manifestation = source.manifestation.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.manifestation = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['onset']) {
            _this.onset = new FhirDateTime({ value: source.onset });
        }
        if (source['severity']) {
            _this.severity = source.severity;
        }
        if (source['exposureRoute']) {
            _this.exposureRoute = new CodeableConcept(source.exposureRoute);
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for severity (AllergyIntolerance.reaction.severity)
     */
    AllergyIntoleranceReaction.severityRequiredCoding = function () {
        return ReactionEventSeverityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AllergyIntoleranceReaction.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["substance"]) {
            (_a = outcome.issue).push.apply(_a, this.substance.doModelValidation().issue);
        }
        if (!this['manifestation']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property manifestation:fhir.CodeableConcept[] fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept', }));
        }
        else if (!Array.isArray(this.manifestation)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property manifestation:fhir.CodeableConcept[] fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept', }));
        }
        else if (this.manifestation.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property manifestation:fhir.CodeableConcept[] fhir: AllergyIntolerance.reaction.manifestation:CodeableConcept', }));
        }
        if (this["manifestation"]) {
            this.manifestation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (this["onset"]) {
            (_c = outcome.issue).push.apply(_c, this.onset.doModelValidation().issue);
        }
        if (this["exposureRoute"]) {
            (_d = outcome.issue).push.apply(_d, this.exposureRoute.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AllergyIntoleranceReaction._fts_dataType = 'AllergyIntoleranceReaction';
    return AllergyIntoleranceReaction;
}(BackboneElement));
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
var AllergyIntolerance = /** @class */ (function (_super) {
    __extends(AllergyIntolerance, _super);
    /**
     * Default constructor for AllergyIntolerance - initializes any required elements to null if a value is not provided.
     */
    function AllergyIntolerance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'AllergyIntolerance';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['clinicalStatus']) {
            _this.clinicalStatus = new CodeableConcept(source.clinicalStatus);
        }
        if (source['verificationStatus']) {
            _this.verificationStatus = new CodeableConcept(source.verificationStatus);
        }
        if (source['type']) {
            _this.type = source.type;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return x; });
        }
        else {
            _this.category = [];
        }
        if (source['criticality']) {
            _this.criticality = source.criticality;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['onset']) {
            _this.onset = source.onset;
        }
        else if (source['onsetDateTime']) {
            _this.onset = new FhirDateTime({ value: source.onsetDateTime });
        }
        else if (source['onsetAge']) {
            _this.onset = new Age(source.onsetAge);
        }
        else if (source['onsetPeriod']) {
            _this.onset = new Period(source.onsetPeriod);
        }
        else if (source['onsetRange']) {
            _this.onset = new Range(source.onsetRange);
        }
        else if (source['onsetString']) {
            _this.onset = new FhirString({ value: source.onsetString });
        }
        if (source['recordedDate']) {
            _this.recordedDate = new FhirDateTime({ value: source.recordedDate });
        }
        if (source['recorder']) {
            _this.recorder = new Reference(source.recorder);
        }
        if (source['asserter']) {
            _this.asserter = new Reference(source.asserter);
        }
        if (source['lastOccurrence']) {
            _this.lastOccurrence = new FhirDateTime({ value: source.lastOccurrence });
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['reaction']) {
            _this.reaction = source.reaction.map(function (x) { return new AllergyIntoleranceReaction(x); });
        }
        else {
            _this.reaction = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for clinicalStatus (AllergyIntolerance.clinicalStatus)
     */
    AllergyIntolerance.clinicalStatusRequiredCoding = function () {
        return AllergyintoleranceClinicalCodings;
    };
    /**
     * Required-bound Value Set for verificationStatus (AllergyIntolerance.verificationStatus)
     */
    AllergyIntolerance.verificationStatusRequiredCoding = function () {
        return AllergyintoleranceVerificationCodings;
    };
    /**
     * Required-bound Value Set for type (AllergyIntolerance.type)
     */
    AllergyIntolerance.typeRequiredCoding = function () {
        return AllergyIntoleranceTypeCodings;
    };
    /**
     * Required-bound Value Set for category (AllergyIntolerance.category)
     */
    AllergyIntolerance.categoryRequiredCoding = function () {
        return AllergyIntoleranceCategoryCodings;
    };
    /**
     * Required-bound Value Set for criticality (AllergyIntolerance.criticality)
     */
    AllergyIntolerance.criticalityRequiredCoding = function () {
        return AllergyIntoleranceCriticalityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AllergyIntolerance.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"AllergyIntolerance" fhir: AllergyIntolerance.resourceType:"AllergyIntolerance"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["clinicalStatus"]) {
            (_a = outcome.issue).push.apply(_a, this.clinicalStatus.doModelValidation().issue);
        }
        if (this["verificationStatus"]) {
            (_b = outcome.issue).push.apply(_b, this.verificationStatus.doModelValidation().issue);
        }
        if (this["code"]) {
            (_c = outcome.issue).push.apply(_c, this.code.doModelValidation().issue);
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: AllergyIntolerance.patient:Reference', }));
        }
        if (this["patient"]) {
            (_d = outcome.issue).push.apply(_d, this.patient.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_e = outcome.issue).push.apply(_e, this.encounter.doModelValidation().issue);
        }
        if (this["recordedDate"]) {
            (_f = outcome.issue).push.apply(_f, this.recordedDate.doModelValidation().issue);
        }
        if (this["recorder"]) {
            (_g = outcome.issue).push.apply(_g, this.recorder.doModelValidation().issue);
        }
        if (this["asserter"]) {
            (_h = outcome.issue).push.apply(_h, this.asserter.doModelValidation().issue);
        }
        if (this["lastOccurrence"]) {
            (_j = outcome.issue).push.apply(_j, this.lastOccurrence.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reaction"]) {
            this.reaction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AllergyIntolerance._fts_dataType = 'AllergyIntolerance';
    /**
     * Internal flag to properly serialize choice-type element AllergyIntolerance.onset[x]
     */
    AllergyIntolerance._fts_onsetIsChoice = true;
    return AllergyIntolerance;
}(DomainResource));

export { AllergyIntolerance, AllergyIntoleranceReaction };
//# sourceMappingURL=AllergyIntolerance.js.map
