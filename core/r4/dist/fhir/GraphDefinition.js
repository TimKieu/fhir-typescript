/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { GraphCompartmentUseCodings } from '../fhirValueSets/GraphCompartmentUseCodings.js';
import { CompartmentTypeCodings } from '../fhirValueSets/CompartmentTypeCodings.js';
import { GraphCompartmentRuleCodings } from '../fhirValueSets/GraphCompartmentRuleCodings.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { FhirCode } from './FhirCode.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirUri } from './FhirUri.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * Compartment Consistency Rules.
 */
var GraphDefinitionLinkTargetCompartment = /** @class */ (function (_super) {
    __extends(GraphDefinitionLinkTargetCompartment, _super);
    /**
     * Default constructor for GraphDefinitionLinkTargetCompartment - initializes any required elements to null if a value is not provided.
     */
    function GraphDefinitionLinkTargetCompartment(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['use']) {
            _this.use = source.use;
        }
        else {
            _this.use = null;
        }
        if (source['code']) {
            _this.code = source.code;
        }
        else {
            _this.code = null;
        }
        if (source['rule']) {
            _this.rule = source.rule;
        }
        else {
            _this.rule = null;
        }
        if (source['expression']) {
            _this.expression = new FhirString({ value: source.expression });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for use (GraphDefinition.link.target.compartment.use)
     */
    GraphDefinitionLinkTargetCompartment.useRequiredCoding = function () {
        return GraphCompartmentUseCodings;
    };
    /**
     * Required-bound Value Set for code (GraphDefinition.link.target.compartment.code)
     */
    GraphDefinitionLinkTargetCompartment.codeRequiredCoding = function () {
        return CompartmentTypeCodings;
    };
    /**
     * Required-bound Value Set for rule (GraphDefinition.link.target.compartment.rule)
     */
    GraphDefinitionLinkTargetCompartment.ruleRequiredCoding = function () {
        return GraphCompartmentRuleCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GraphDefinitionLinkTargetCompartment.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['use']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property use:GraphCompartmentUseCodeType fhir: GraphDefinition.link.target.compartment.use:code', }));
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:CompartmentTypeCodeType fhir: GraphDefinition.link.target.compartment.code:code', }));
        }
        if (!this['rule']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property rule:GraphCompartmentRuleCodeType fhir: GraphDefinition.link.target.compartment.rule:code', }));
        }
        if (this["expression"]) {
            (_a = outcome.issue).push.apply(_a, this.expression.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GraphDefinitionLinkTargetCompartment._fts_dataType = 'GraphDefinitionLinkTargetCompartment';
    return GraphDefinitionLinkTargetCompartment;
}(BackboneElement));
/**
 * Potential target for the link.
 */
var GraphDefinitionLinkTarget = /** @class */ (function (_super) {
    __extends(GraphDefinitionLinkTarget, _super);
    /**
     * Default constructor for GraphDefinitionLinkTarget - initializes any required elements to null if a value is not provided.
     */
    function GraphDefinitionLinkTarget(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new FhirCode({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['params']) {
            _this.params = new FhirString({ value: source.params });
        }
        if (source['profile']) {
            _this.profile = new FhirCanonical({ value: source.profile });
        }
        if (source['compartment']) {
            _this.compartment = source.compartment.map(function (x) { return new GraphDefinitionLinkTargetCompartment(x); });
        }
        else {
            _this.compartment = [];
        }
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new GraphDefinitionLink(x); });
        }
        else {
            _this.link = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (GraphDefinition.link.target.type)
     */
    GraphDefinitionLinkTarget.typeRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GraphDefinitionLinkTarget.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirCode fhir: GraphDefinition.link.target.type:code', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["params"]) {
            (_b = outcome.issue).push.apply(_b, this.params.doModelValidation().issue);
        }
        if (this["profile"]) {
            (_c = outcome.issue).push.apply(_c, this.profile.doModelValidation().issue);
        }
        if (this["compartment"]) {
            this.compartment.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GraphDefinitionLinkTarget._fts_dataType = 'GraphDefinitionLinkTarget';
    return GraphDefinitionLinkTarget;
}(BackboneElement));
/**
 * Links this graph makes rules about.
 */
var GraphDefinitionLink = /** @class */ (function (_super) {
    __extends(GraphDefinitionLink, _super);
    /**
     * Default constructor for GraphDefinitionLink - initializes any required elements to null if a value is not provided.
     */
    function GraphDefinitionLink(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['path']) {
            _this.path = new FhirString({ value: source.path });
        }
        if (source['sliceName']) {
            _this.sliceName = new FhirString({ value: source.sliceName });
        }
        if (source['min']) {
            _this.min = new FhirInteger({ value: source.min });
        }
        if (source['max']) {
            _this.max = new FhirString({ value: source.max });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['target']) {
            _this.target = source.target.map(function (x) { return new GraphDefinitionLinkTarget(x); });
        }
        else {
            _this.target = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GraphDefinitionLink.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["path"]) {
            (_a = outcome.issue).push.apply(_a, this.path.doModelValidation().issue);
        }
        if (this["sliceName"]) {
            (_b = outcome.issue).push.apply(_b, this.sliceName.doModelValidation().issue);
        }
        if (this["min"]) {
            (_c = outcome.issue).push.apply(_c, this.min.doModelValidation().issue);
        }
        if (this["max"]) {
            (_d = outcome.issue).push.apply(_d, this.max.doModelValidation().issue);
        }
        if (this["description"]) {
            (_e = outcome.issue).push.apply(_e, this.description.doModelValidation().issue);
        }
        if (this["target"]) {
            this.target.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GraphDefinitionLink._fts_dataType = 'GraphDefinitionLink';
    return GraphDefinitionLink;
}(BackboneElement));
/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
var GraphDefinition = /** @class */ (function (_super) {
    __extends(GraphDefinition, _super);
    /**
     * Default constructor for GraphDefinition - initializes any required elements to null if a value is not provided.
     */
    function GraphDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'GraphDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['start']) {
            _this.start = new FhirCode({ value: source.start });
        }
        else {
            _this.start = null;
        }
        if (source['profile']) {
            _this.profile = new FhirCanonical({ value: source.profile });
        }
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new GraphDefinitionLink(x); });
        }
        else {
            _this.link = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (GraphDefinition.status)
     */
    GraphDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for start (GraphDefinition.start)
     */
    GraphDefinition.startRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GraphDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"GraphDefinition" fhir: GraphDefinition.resourceType:"GraphDefinition"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: GraphDefinition.name:string', }));
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: GraphDefinition.status:code', }));
        }
        if (this["experimental"]) {
            (_d = outcome.issue).push.apply(_d, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_e = outcome.issue).push.apply(_e, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_f = outcome.issue).push.apply(_f, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_g = outcome.issue).push.apply(_g, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_h = outcome.issue).push.apply(_h, this.purpose.doModelValidation().issue);
        }
        if (!this['start']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property start:fhir.FhirCode fhir: GraphDefinition.start:code', }));
        }
        if (this["start"]) {
            (_j = outcome.issue).push.apply(_j, this.start.doModelValidation().issue);
        }
        if (this["profile"]) {
            (_k = outcome.issue).push.apply(_k, this.profile.doModelValidation().issue);
        }
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GraphDefinition._fts_dataType = 'GraphDefinition';
    return GraphDefinition;
}(DomainResource));

export { GraphDefinition, GraphDefinitionLink, GraphDefinitionLinkTarget, GraphDefinitionLinkTargetCompartment };
//# sourceMappingURL=GraphDefinition.js.map
