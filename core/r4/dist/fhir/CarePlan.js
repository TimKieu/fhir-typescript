/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { CarePlanActivityKindCodings } from '../fhirValueSets/CarePlanActivityKindCodings.js';
import { CarePlanActivityStatusCodings } from '../fhirValueSets/CarePlanActivityStatusCodings.js';
import { RequestStatusCodings } from '../fhirValueSets/RequestStatusCodings.js';
import { CarePlanIntentCodings } from '../fhirValueSets/CarePlanIntentCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUri } from './FhirUri.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Timing } from './Timing.js';
import { Period } from './Period.js';
import { FhirString } from './FhirString.js';
import { Quantity } from './Quantity.js';
import { Annotation } from './Annotation.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';

// <auto-generated/>
/**
 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
 */
var CarePlanActivityDetail = /** @class */ (function (_super) {
    __extends(CarePlanActivityDetail, _super);
    /**
     * Default constructor for CarePlanActivityDetail - initializes any required elements to null if a value is not provided.
     */
    function CarePlanActivityDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['kind']) {
            _this.kind = source.kind;
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.instantiatesUri = [];
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['goal']) {
            _this.goal = source.goal.map(function (x) { return new Reference(x); });
        }
        else {
            _this.goal = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = new CodeableConcept(source.statusReason);
        }
        if (source['doNotPerform']) {
            _this.doNotPerform = new FhirBoolean({ value: source.doNotPerform });
        }
        if (source['scheduled']) {
            _this.scheduled = source.scheduled;
        }
        else if (source['scheduledTiming']) {
            _this.scheduled = new Timing(source.scheduledTiming);
        }
        else if (source['scheduledPeriod']) {
            _this.scheduled = new Period(source.scheduledPeriod);
        }
        else if (source['scheduledString']) {
            _this.scheduled = new FhirString({ value: source.scheduledString });
        }
        if (source['location']) {
            _this.location = new Reference(source.location);
        }
        if (source['performer']) {
            _this.performer = source.performer.map(function (x) { return new Reference(x); });
        }
        else {
            _this.performer = [];
        }
        if (source['product']) {
            _this.product = source.product;
        }
        else if (source['productCodeableConcept']) {
            _this.product = new CodeableConcept(source.productCodeableConcept);
        }
        else if (source['productReference']) {
            _this.product = new Reference(source.productReference);
        }
        if (source['dailyAmount']) {
            _this.dailyAmount = new Quantity(source.dailyAmount);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for kind (CarePlan.activity.detail.kind)
     */
    CarePlanActivityDetail.kindRequiredCoding = function () {
        return CarePlanActivityKindCodings;
    };
    /**
     * Required-bound Value Set for status (CarePlan.activity.detail.status)
     */
    CarePlanActivityDetail.statusRequiredCoding = function () {
        return CarePlanActivityStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CarePlanActivityDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["goal"]) {
            this.goal.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:CarePlanActivityStatusCodeType fhir: CarePlan.activity.detail.status:code', }));
        }
        if (this["statusReason"]) {
            (_b = outcome.issue).push.apply(_b, this.statusReason.doModelValidation().issue);
        }
        if (this["doNotPerform"]) {
            (_c = outcome.issue).push.apply(_c, this.doNotPerform.doModelValidation().issue);
        }
        if (this["location"]) {
            (_d = outcome.issue).push.apply(_d, this.location.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dailyAmount"]) {
            (_e = outcome.issue).push.apply(_e, this.dailyAmount.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_f = outcome.issue).push.apply(_f, this.quantity.doModelValidation().issue);
        }
        if (this["description"]) {
            (_g = outcome.issue).push.apply(_g, this.description.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CarePlanActivityDetail._fts_dataType = 'CarePlanActivityDetail';
    /**
     * Internal flag to properly serialize choice-type element CarePlan.activity.detail.scheduled[x]
     */
    CarePlanActivityDetail._fts_scheduledIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element CarePlan.activity.detail.product[x]
     */
    CarePlanActivityDetail._fts_productIsChoice = true;
    return CarePlanActivityDetail;
}(BackboneElement));
/**
 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
var CarePlanActivity = /** @class */ (function (_super) {
    __extends(CarePlanActivity, _super);
    /**
     * Default constructor for CarePlanActivity - initializes any required elements to null if a value is not provided.
     */
    function CarePlanActivity(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['outcomeCodeableConcept']) {
            _this.outcomeCodeableConcept = source.outcomeCodeableConcept.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.outcomeCodeableConcept = [];
        }
        if (source['outcomeReference']) {
            _this.outcomeReference = source.outcomeReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.outcomeReference = [];
        }
        if (source['progress']) {
            _this.progress = source.progress.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.progress = [];
        }
        if (source['reference']) {
            _this.reference = new Reference(source.reference);
        }
        if (source['detail']) {
            _this.detail = new CarePlanActivityDetail(source.detail);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CarePlanActivity.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["outcomeCodeableConcept"]) {
            this.outcomeCodeableConcept.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["outcomeReference"]) {
            this.outcomeReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["progress"]) {
            this.progress.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reference"]) {
            (_a = outcome.issue).push.apply(_a, this.reference.doModelValidation().issue);
        }
        if (this["detail"]) {
            (_b = outcome.issue).push.apply(_b, this.detail.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CarePlanActivity._fts_dataType = 'CarePlanActivity';
    return CarePlanActivity;
}(BackboneElement));
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
var CarePlan = /** @class */ (function (_super) {
    __extends(CarePlan, _super);
    /**
     * Default constructor for CarePlan - initializes any required elements to null if a value is not provided.
     */
    function CarePlan(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'CarePlan';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.instantiatesUri = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['replaces']) {
            _this.replaces = source.replaces.map(function (x) { return new Reference(x); });
        }
        else {
            _this.replaces = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['intent']) {
            _this.intent = source.intent;
        }
        else {
            _this.intent = null;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['created']) {
            _this.created = new FhirDateTime({ value: source.created });
        }
        if (source['author']) {
            _this.author = new Reference(source.author);
        }
        if (source['contributor']) {
            _this.contributor = source.contributor.map(function (x) { return new Reference(x); });
        }
        else {
            _this.contributor = [];
        }
        if (source['careTeam']) {
            _this.careTeam = source.careTeam.map(function (x) { return new Reference(x); });
        }
        else {
            _this.careTeam = [];
        }
        if (source['addresses']) {
            _this.addresses = source.addresses.map(function (x) { return new Reference(x); });
        }
        else {
            _this.addresses = [];
        }
        if (source['supportingInfo']) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingInfo = [];
        }
        if (source['goal']) {
            _this.goal = source.goal.map(function (x) { return new Reference(x); });
        }
        else {
            _this.goal = [];
        }
        if (source['activity']) {
            _this.activity = source.activity.map(function (x) { return new CarePlanActivity(x); });
        }
        else {
            _this.activity = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (CarePlan.status)
     */
    CarePlan.statusRequiredCoding = function () {
        return RequestStatusCodings;
    };
    /**
     * Required-bound Value Set for intent (CarePlan.intent)
     */
    CarePlan.intentRequiredCoding = function () {
        return CarePlanIntentCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CarePlan.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"CarePlan" fhir: CarePlan.resourceType:"CarePlan"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["replaces"]) {
            this.replaces.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:RequestStatusCodeType fhir: CarePlan.status:code', }));
        }
        if (!this['intent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property intent:CarePlanIntentCodeType fhir: CarePlan.intent:code', }));
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["title"]) {
            (_a = outcome.issue).push.apply(_a, this.title.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: CarePlan.subject:Reference', }));
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_d = outcome.issue).push.apply(_d, this.encounter.doModelValidation().issue);
        }
        if (this["period"]) {
            (_e = outcome.issue).push.apply(_e, this.period.doModelValidation().issue);
        }
        if (this["created"]) {
            (_f = outcome.issue).push.apply(_f, this.created.doModelValidation().issue);
        }
        if (this["author"]) {
            (_g = outcome.issue).push.apply(_g, this.author.doModelValidation().issue);
        }
        if (this["contributor"]) {
            this.contributor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["careTeam"]) {
            this.careTeam.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["addresses"]) {
            this.addresses.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["goal"]) {
            this.goal.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["activity"]) {
            this.activity.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CarePlan._fts_dataType = 'CarePlan';
    return CarePlan;
}(DomainResource));

export { CarePlan, CarePlanActivity, CarePlanActivityDetail };
//# sourceMappingURL=CarePlan.js.map
