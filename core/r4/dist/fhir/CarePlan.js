// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CarePlan
import * as fhir from '../fhir.js';
// @ts-ignore
import { CarePlanActivityKindVsValidation } from '../fhirValueSets/CarePlanActivityKindVsValidation.js';
// @ts-ignore
import { CarePlanActivityStatusVsValidation } from '../fhirValueSets/CarePlanActivityStatusVsValidation.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { CarePlanIntentVsValidation } from '../fhirValueSets/CarePlanIntentVsValidation.js';
/**
 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
 */
export class CarePlanActivityDetail extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivityDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['kind'] !== undefined) {
            this.kind = new fhir.FhirCode({ value: source.kind }, options);
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind, options);
            }
        }
        if (source['instantiatesCanonical'] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri'] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.goal = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason, options);
        }
        if (source['doNotPerform'] !== undefined) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform }, options);
        }
        if (source['_doNotPerform']) {
            if (this.doNotPerform) {
                this.doNotPerform.addExtendedProperties(source._doNotPerform);
            }
            else {
                this.doNotPerform = new fhir.FhirBoolean(source._doNotPerform, options);
            }
        }
        if (source['scheduled']) {
            this.scheduled = source.scheduled;
        }
        else if (source['scheduledTiming']) {
            this.scheduled = new fhir.Timing(source.scheduledTiming, options);
        }
        else if (source['scheduledPeriod']) {
            this.scheduled = new fhir.Period(source.scheduledPeriod, options);
        }
        else if (source['scheduledString'] !== undefined) {
            this.scheduled = new fhir.FhirString({ value: source.scheduledString }, options);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.performer = [];
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept, options);
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference, options);
        }
        if (source['dailyAmount']) {
            this.dailyAmount = new fhir.Quantity(source.dailyAmount, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.activity.detail';
        }
        iss.push(...this.vOSV('kind', exp, 'CarePlanActivityKind', CarePlanActivityKindVsValidation, 'r'));
        iss.push(...this.vOA('instantiatesCanonical', exp));
        iss.push(...this.vOA('instantiatesUri', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('goal', exp));
        iss.push(...this.vRSV('status', exp, 'CarePlanActivityStatus', CarePlanActivityStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusReason', exp));
        iss.push(...this.vOS('doNotPerform', exp));
        iss.push(...this.vOS('scheduled', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('product', exp));
        iss.push(...this.vOS('dailyAmount', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('description', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanActivityDetail._fts_dataType = 'CarePlanActivityDetail';
/**
 * Internal flag to properly serialize choice-type element CarePlan.activity.detail.scheduled[x]
 */
CarePlanActivityDetail._fts_scheduledIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element CarePlan.activity.detail.product[x]
 */
CarePlanActivityDetail._fts_productIsChoice = true;
/**
 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
export class CarePlanActivity extends fhir.BackboneElement {
    /**
     * Default constructor for CarePlanActivity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['outcomeCodeableConcept']) {
            this.outcomeCodeableConcept = source.outcomeCodeableConcept.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.outcomeCodeableConcept = [];
        }
        if (source['outcomeReference']) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.outcomeReference = [];
        }
        if (source['progress']) {
            this.progress = source.progress.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.progress = [];
        }
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference, options);
        }
        if (source['detail']) {
            this.detail = new fhir.CarePlanActivityDetail(source.detail, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan.activity';
        }
        iss.push(...this.vOA('outcomeCodeableConcept', exp));
        iss.push(...this.vOA('outcomeReference', exp));
        iss.push(...this.vOA('progress', exp));
        iss.push(...this.vOS('reference', exp));
        iss.push(...this.vOS('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlanActivity._fts_dataType = 'CarePlanActivity';
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
export class CarePlan extends fhir.DomainResource {
    /**
     * Default constructor for CarePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CarePlan';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical'] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri'] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.replaces = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['intent'] !== undefined) {
            this.intent = new fhir.FhirCode({ value: source.intent }, options);
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent, options);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.category = [];
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['contributor']) {
            this.contributor = source.contributor.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.contributor = [];
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.careTeam = [];
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.addresses = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.goal = [];
        }
        if (source['activity']) {
            this.activity = source.activity.map((x) => new fhir.CarePlanActivity(x, options));
        }
        else {
            this.activity = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CarePlan';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('instantiatesCanonical', exp));
        iss.push(...this.vOA('instantiatesUri', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('replaces', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'RequestStatus', RequestStatusVsValidation, 'r'));
        iss.push(...this.vRSV('intent', exp, 'CarePlanIntent', CarePlanIntentVsValidation, 'r'));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOA('contributor', exp));
        iss.push(...this.vOA('careTeam', exp));
        iss.push(...this.vOA('addresses', exp));
        iss.push(...this.vOA('supportingInfo', exp));
        iss.push(...this.vOA('goal', exp));
        iss.push(...this.vOA('activity', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CarePlan._fts_dataType = 'CarePlan';
//# sourceMappingURL=data:application/json;base64,