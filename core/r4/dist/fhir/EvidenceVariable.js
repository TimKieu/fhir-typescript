// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EvidenceVariable
import * as fhir from '../fhir.js';
// @ts-ignore
import { GroupMeasureVsValidation } from '../fhirValueSets/GroupMeasureVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
// @ts-ignore
import { VariableTypeVsValidation } from '../fhirValueSets/VariableTypeVsValidation.js';
/**
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
export class EvidenceVariableCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for EvidenceVariableCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        else if (source['definitionReference']) {
            this.definition = new fhir.Reference(source.definitionReference);
        }
        else if (source['definitionCanonical']) {
            this.definition = new fhir.FhirCanonical({ value: source.definitionCanonical });
        }
        else if (source['definitionCodeableConcept']) {
            this.definition = new fhir.CodeableConcept(source.definitionCodeableConcept);
        }
        else if (source['definitionExpression']) {
            this.definition = new fhir.Expression(source.definitionExpression);
        }
        else if (source['definitionDataRequirement']) {
            this.definition = new fhir.DataRequirement(source.definitionDataRequirement);
        }
        else if (source['definitionTriggerDefinition']) {
            this.definition = new fhir.TriggerDefinition(source.definitionTriggerDefinition);
        }
        else {
            this.definition = null;
        }
        if (source['usageContext']) {
            this.usageContext = source.usageContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.usageContext = [];
        }
        if (source['exclude']) {
            this.exclude = new fhir.FhirBoolean({ value: source.exclude });
        }
        if (source['_exclude']) {
            if (this.exclude) {
                this.exclude.addExtendedProperties(source._exclude);
            }
            else {
                this.exclude = new fhir.FhirBoolean(source._exclude);
            }
        }
        if (source['participantEffective']) {
            this.participantEffective = source.participantEffective;
        }
        else if (source['participantEffectiveDateTime']) {
            this.participantEffective = new fhir.FhirDateTime({ value: source.participantEffectiveDateTime });
        }
        else if (source['participantEffectivePeriod']) {
            this.participantEffective = new fhir.Period(source.participantEffectivePeriod);
        }
        else if (source['participantEffectiveDuration']) {
            this.participantEffective = new fhir.Duration(source.participantEffectiveDuration);
        }
        else if (source['participantEffectiveTiming']) {
            this.participantEffective = new fhir.Timing(source.participantEffectiveTiming);
        }
        if (source['timeFromStart']) {
            this.timeFromStart = new fhir.Duration(source.timeFromStart);
        }
        if (source['groupMeasure']) {
            this.groupMeasure = new fhir.FhirCode({ value: source.groupMeasure });
        }
        if (source['_groupMeasure']) {
            if (this.groupMeasure) {
                this.groupMeasure.addExtendedProperties(source._groupMeasure);
            }
            else {
                this.groupMeasure = new fhir.FhirCode(source._groupMeasure);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EvidenceVariable.characteristic';
        }
        this.vOS('description', exp);
        this.vRS('definition', exp);
        this.vOA('usageContext', exp);
        this.vOS('exclude', exp);
        this.vOS('participantEffective', exp);
        this.vOS('timeFromStart', exp);
        this.vOSV('groupMeasure', exp, 'GroupMeasure', GroupMeasureVsValidation, 'r');
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EvidenceVariableCharacteristic._fts_dataType = 'EvidenceVariableCharacteristic';
/**
 * Internal flag to properly serialize choice-type element EvidenceVariable.characteristic.definition[x]
 */
EvidenceVariableCharacteristic._fts_definitionIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element EvidenceVariable.characteristic.participantEffective[x]
 */
EvidenceVariableCharacteristic._fts_participantEffectiveIsChoice = true;
/**
 * The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
 */
export class EvidenceVariable extends fhir.DomainResource {
    /**
     * Default constructor for EvidenceVariable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'EvidenceVariable';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['shortTitle']) {
            this.shortTitle = new fhir.FhirString({ value: source.shortTitle });
        }
        if (source['_shortTitle']) {
            if (this.shortTitle) {
                this.shortTitle.addExtendedProperties(source._shortTitle);
            }
            else {
                this.shortTitle = new fhir.FhirString(source._shortTitle);
            }
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['_subtitle']) {
            if (this.subtitle) {
                this.subtitle.addExtendedProperties(source._subtitle);
            }
            else {
                this.subtitle = new fhir.FhirString(source._subtitle);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.EvidenceVariableCharacteristic(x));
        }
        else {
            this.characteristic = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'EvidenceVariable';
        }
        this.vRS('resourceType', exp);
        this.vOS('url', exp);
        this.vOA('identifier', exp);
        this.vOS('version', exp);
        this.vOS('name', exp);
        this.vOS('title', exp);
        this.vOS('shortTitle', exp);
        this.vOS('subtitle', exp);
        this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOS('date', exp);
        this.vOS('publisher', exp);
        this.vOA('contact', exp);
        this.vOS('description', exp);
        this.vOA('note', exp);
        this.vOA('useContext', exp);
        this.vOA('jurisdiction', exp);
        this.vOS('copyright', exp);
        this.vOS('approvalDate', exp);
        this.vOS('lastReviewDate', exp);
        this.vOS('effectivePeriod', exp);
        this.vOA('topic', exp);
        this.vOA('author', exp);
        this.vOA('editor', exp);
        this.vOA('reviewer', exp);
        this.vOA('endorser', exp);
        this.vOA('relatedArtifact', exp);
        this.vOSV('type', exp, 'VariableType', VariableTypeVsValidation, 'r');
        this.vRA('characteristic', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EvidenceVariable._fts_dataType = 'EvidenceVariable';
//# sourceMappingURL=data:application/json;base64,