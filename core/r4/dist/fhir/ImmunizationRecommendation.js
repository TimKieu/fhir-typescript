/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirString } from './FhirString.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';

// <auto-generated/>
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
var ImmunizationRecommendationRecommendationDateCriterion = /** @class */ (function (_super) {
    __extends(ImmunizationRecommendationRecommendationDateCriterion, _super);
    /**
     * Default constructor for ImmunizationRecommendationRecommendationDateCriterion - initializes any required elements to null if a value is not provided.
     */
    function ImmunizationRecommendationRecommendationDateCriterion(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['value']) {
            _this.value = new FhirDateTime({ value: source.value });
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImmunizationRecommendationRecommendationDateCriterion.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: ImmunizationRecommendation.recommendation.dateCriterion.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.FhirDateTime fhir: ImmunizationRecommendation.recommendation.dateCriterion.value:dateTime', }));
        }
        if (this["value"]) {
            (_b = outcome.issue).push.apply(_b, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImmunizationRecommendationRecommendationDateCriterion._fts_dataType = 'ImmunizationRecommendationRecommendationDateCriterion';
    return ImmunizationRecommendationRecommendationDateCriterion;
}(BackboneElement));
/**
 * Vaccine administration recommendations.
 */
var ImmunizationRecommendationRecommendation = /** @class */ (function (_super) {
    __extends(ImmunizationRecommendationRecommendation, _super);
    /**
     * Default constructor for ImmunizationRecommendationRecommendation - initializes any required elements to null if a value is not provided.
     */
    function ImmunizationRecommendationRecommendation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['vaccineCode']) {
            _this.vaccineCode = source.vaccineCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.vaccineCode = [];
        }
        if (source['targetDisease']) {
            _this.targetDisease = new CodeableConcept(source.targetDisease);
        }
        if (source['contraindicatedVaccineCode']) {
            _this.contraindicatedVaccineCode = source.contraindicatedVaccineCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.contraindicatedVaccineCode = [];
        }
        if (source['forecastStatus']) {
            _this.forecastStatus = new CodeableConcept(source.forecastStatus);
        }
        else {
            _this.forecastStatus = null;
        }
        if (source['forecastReason']) {
            _this.forecastReason = source.forecastReason.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.forecastReason = [];
        }
        if (source['dateCriterion']) {
            _this.dateCriterion = source.dateCriterion.map(function (x) { return new ImmunizationRecommendationRecommendationDateCriterion(x); });
        }
        else {
            _this.dateCriterion = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['series']) {
            _this.series = new FhirString({ value: source.series });
        }
        if (source['doseNumber']) {
            _this.doseNumber = source.doseNumber;
        }
        else if (source['doseNumberPositiveInt']) {
            _this.doseNumber = new FhirPositiveInt({ value: source.doseNumberPositiveInt });
        }
        else if (source['doseNumberString']) {
            _this.doseNumber = new FhirString({ value: source.doseNumberString });
        }
        if (source['seriesDoses']) {
            _this.seriesDoses = source.seriesDoses;
        }
        else if (source['seriesDosesPositiveInt']) {
            _this.seriesDoses = new FhirPositiveInt({ value: source.seriesDosesPositiveInt });
        }
        else if (source['seriesDosesString']) {
            _this.seriesDoses = new FhirString({ value: source.seriesDosesString });
        }
        if (source['supportingImmunization']) {
            _this.supportingImmunization = source.supportingImmunization.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingImmunization = [];
        }
        if (source['supportingPatientInformation']) {
            _this.supportingPatientInformation = source.supportingPatientInformation.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingPatientInformation = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImmunizationRecommendationRecommendation.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["vaccineCode"]) {
            this.vaccineCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["targetDisease"]) {
            (_a = outcome.issue).push.apply(_a, this.targetDisease.doModelValidation().issue);
        }
        if (this["contraindicatedVaccineCode"]) {
            this.contraindicatedVaccineCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['forecastStatus']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property forecastStatus:fhir.CodeableConcept fhir: ImmunizationRecommendation.recommendation.forecastStatus:CodeableConcept', }));
        }
        if (this["forecastStatus"]) {
            (_b = outcome.issue).push.apply(_b, this.forecastStatus.doModelValidation().issue);
        }
        if (this["forecastReason"]) {
            this.forecastReason.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dateCriterion"]) {
            this.dateCriterion.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (this["series"]) {
            (_d = outcome.issue).push.apply(_d, this.series.doModelValidation().issue);
        }
        if (this["supportingImmunization"]) {
            this.supportingImmunization.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingPatientInformation"]) {
            this.supportingPatientInformation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImmunizationRecommendationRecommendation._fts_dataType = 'ImmunizationRecommendationRecommendation';
    /**
     * Internal flag to properly serialize choice-type element ImmunizationRecommendation.recommendation.doseNumber[x]
     */
    ImmunizationRecommendationRecommendation._fts_doseNumberIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ImmunizationRecommendation.recommendation.seriesDoses[x]
     */
    ImmunizationRecommendationRecommendation._fts_seriesDosesIsChoice = true;
    return ImmunizationRecommendationRecommendation;
}(BackboneElement));
/**
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
var ImmunizationRecommendation = /** @class */ (function (_super) {
    __extends(ImmunizationRecommendation, _super);
    /**
     * Default constructor for ImmunizationRecommendation - initializes any required elements to null if a value is not provided.
     */
    function ImmunizationRecommendation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ImmunizationRecommendation';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        else {
            _this.date = null;
        }
        if (source['authority']) {
            _this.authority = new Reference(source.authority);
        }
        if (source['recommendation']) {
            _this.recommendation = source.recommendation.map(function (x) { return new ImmunizationRecommendationRecommendation(x); });
        }
        else {
            _this.recommendation = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImmunizationRecommendation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ImmunizationRecommendation" fhir: ImmunizationRecommendation.resourceType:"ImmunizationRecommendation"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: ImmunizationRecommendation.patient:Reference', }));
        }
        if (this["patient"]) {
            (_a = outcome.issue).push.apply(_a, this.patient.doModelValidation().issue);
        }
        if (!this['date']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property date:fhir.FhirDateTime fhir: ImmunizationRecommendation.date:dateTime', }));
        }
        if (this["date"]) {
            (_b = outcome.issue).push.apply(_b, this.date.doModelValidation().issue);
        }
        if (this["authority"]) {
            (_c = outcome.issue).push.apply(_c, this.authority.doModelValidation().issue);
        }
        if (!this['recommendation']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property recommendation:fhir.ImmunizationRecommendationRecommendation[] fhir: ImmunizationRecommendation.recommendation:recommendation', }));
        }
        else if (!Array.isArray(this.recommendation)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property recommendation:fhir.ImmunizationRecommendationRecommendation[] fhir: ImmunizationRecommendation.recommendation:recommendation', }));
        }
        else if (this.recommendation.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property recommendation:fhir.ImmunizationRecommendationRecommendation[] fhir: ImmunizationRecommendation.recommendation:recommendation', }));
        }
        if (this["recommendation"]) {
            this.recommendation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImmunizationRecommendation._fts_dataType = 'ImmunizationRecommendation';
    return ImmunizationRecommendation;
}(DomainResource));

export { ImmunizationRecommendation, ImmunizationRecommendationRecommendation, ImmunizationRecommendationRecommendationDateCriterion };
//# sourceMappingURL=ImmunizationRecommendation.js.map
