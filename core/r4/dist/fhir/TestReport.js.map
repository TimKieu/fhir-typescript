{"version":3,"file":"TestReport.js","sources":["../../src/fhir/TestReport.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: TestReport\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { ReportParticipantTypeCodings, ReportParticipantTypeCodingType,} from '../fhirValueSets/ReportParticipantTypeCodings.js';\r\n// @ts-ignore\r\nimport { ReportParticipantTypeCodes,  ReportParticipantTypeCodeType } from '../fhirValueSets/ReportParticipantTypeCodes.js';\r\n// @ts-ignore\r\nimport { ReportActionResultCodesCodings, ReportActionResultCodesCodingType,} from '../fhirValueSets/ReportActionResultCodesCodings.js';\r\n// @ts-ignore\r\nimport { ReportActionResultCodesCodes,  ReportActionResultCodesCodeType } from '../fhirValueSets/ReportActionResultCodesCodes.js';\r\n// @ts-ignore\r\nimport { ReportStatusCodesCodings, ReportStatusCodesCodingType,} from '../fhirValueSets/ReportStatusCodesCodings.js';\r\n// @ts-ignore\r\nimport { ReportStatusCodesCodes,  ReportStatusCodesCodeType } from '../fhirValueSets/ReportStatusCodesCodes.js';\r\n// @ts-ignore\r\nimport { ReportResultCodesCodings, ReportResultCodesCodingType,} from '../fhirValueSets/ReportResultCodesCodings.js';\r\n// @ts-ignore\r\nimport { ReportResultCodesCodes,  ReportResultCodesCodeType } from '../fhirValueSets/ReportResultCodesCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the TestReportParticipant type.\r\n */\r\nexport interface TestReportParticipantArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of participant.\r\n   */\r\n  type: ReportParticipantTypeCodeType|null;\r\n  /**\r\n   * The uri of the participant. An absolute URL is preferred.\r\n   */\r\n  uri: fhir.FhirUri|string|undefined;\r\n  /**\r\n   * The display name of the participant.\r\n   */\r\n  display?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * A participant in the test execution, either the execution engine, a client, or a server.\r\n */\r\nexport class TestReportParticipant extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportParticipant';\r\n  /**\r\n   * The type of participant.\r\n   */\r\n  public type: ReportParticipantTypeCodeType|null;\r\n  /**\r\n   * The uri of the participant. An absolute URL is preferred.\r\n   */\r\n  public uri: fhir.FhirUri|null;\r\n  /**\r\n   * The display name of the participant.\r\n   */\r\n  public display?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for TestReportParticipant - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportParticipantArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = source.type; }\r\n    else { this.type = null; }\r\n    if (source['uri']) { this.uri = new fhir.FhirUri({value: source.uri}); }\r\n    else { this.uri = null; }\r\n    if (source['display']) { this.display = new fhir.FhirString({value: source.display}); }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for type (TestReport.participant.type)\r\n   */\r\n  public static typeRequiredCoding():ReportParticipantTypeCodingType {\r\n    return ReportParticipantTypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:ReportParticipantTypeCodeType fhir: TestReport.participant.type:code', }));\r\n    }\r\n    if (!this['uri']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property uri:fhir.FhirUri fhir: TestReport.participant.uri:uri', }));\r\n    }\r\n    if (this[\"uri\"]) { outcome.issue!.push(...this.uri.doModelValidation().issue!); }\r\n    if (this[\"display\"]) { outcome.issue!.push(...this.display.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportSetupActionOperation type.\r\n */\r\nexport interface TestReportSetupActionOperationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The result of this operation.\r\n   */\r\n  result: ReportActionResultCodesCodeType|null;\r\n  /**\r\n   * An explanatory message associated with the result.\r\n   */\r\n  message?: fhir.FhirMarkdown|string|undefined;\r\n  /**\r\n   * A link to further details on the result.\r\n   */\r\n  detail?: fhir.FhirUri|string|undefined;\r\n}\r\n\r\n/**\r\n * The operation performed.\r\n */\r\nexport class TestReportSetupActionOperation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportSetupActionOperation';\r\n  /**\r\n   * The result of this operation.\r\n   */\r\n  public result: ReportActionResultCodesCodeType|null;\r\n  /**\r\n   * An explanatory message associated with the result.\r\n   */\r\n  public message?: fhir.FhirMarkdown|undefined;\r\n  /**\r\n   * A link to further details on the result.\r\n   */\r\n  public detail?: fhir.FhirUri|undefined;\r\n  /**\r\n   * Default constructor for TestReportSetupActionOperation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportSetupActionOperationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['result']) { this.result = source.result; }\r\n    else { this.result = null; }\r\n    if (source['message']) { this.message = new fhir.FhirMarkdown({value: source.message}); }\r\n    if (source['detail']) { this.detail = new fhir.FhirUri({value: source.detail}); }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for result (TestReport.setup.action.operation.result)\r\n   */\r\n  public static resultRequiredCoding():ReportActionResultCodesCodingType {\r\n    return ReportActionResultCodesCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['result']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property result:ReportActionResultCodesCodeType fhir: TestReport.setup.action.operation.result:code', }));\r\n    }\r\n    if (this[\"message\"]) { outcome.issue!.push(...this.message.doModelValidation().issue!); }\r\n    if (this[\"detail\"]) { outcome.issue!.push(...this.detail.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportSetupActionAssert type.\r\n */\r\nexport interface TestReportSetupActionAssertArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The result of this assertion.\r\n   */\r\n  result: ReportActionResultCodesCodeType|null;\r\n  /**\r\n   * An explanatory message associated with the result.\r\n   */\r\n  message?: fhir.FhirMarkdown|string|undefined;\r\n  /**\r\n   * A link to further details on the result.\r\n   */\r\n  detail?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * The results of the assertion performed on the previous operations.\r\n */\r\nexport class TestReportSetupActionAssert extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportSetupActionAssert';\r\n  /**\r\n   * The result of this assertion.\r\n   */\r\n  public result: ReportActionResultCodesCodeType|null;\r\n  /**\r\n   * An explanatory message associated with the result.\r\n   */\r\n  public message?: fhir.FhirMarkdown|undefined;\r\n  /**\r\n   * A link to further details on the result.\r\n   */\r\n  public detail?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for TestReportSetupActionAssert - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportSetupActionAssertArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['result']) { this.result = source.result; }\r\n    else { this.result = null; }\r\n    if (source['message']) { this.message = new fhir.FhirMarkdown({value: source.message}); }\r\n    if (source['detail']) { this.detail = new fhir.FhirString({value: source.detail}); }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for result (TestReport.setup.action.assert.result)\r\n   */\r\n  public static resultRequiredCoding():ReportActionResultCodesCodingType {\r\n    return ReportActionResultCodesCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['result']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property result:ReportActionResultCodesCodeType fhir: TestReport.setup.action.assert.result:code', }));\r\n    }\r\n    if (this[\"message\"]) { outcome.issue!.push(...this.message.doModelValidation().issue!); }\r\n    if (this[\"detail\"]) { outcome.issue!.push(...this.detail.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportSetupAction type.\r\n */\r\nexport interface TestReportSetupActionArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The operation performed.\r\n   */\r\n  operation?: fhir.TestReportSetupActionOperationArgs|undefined;\r\n  /**\r\n   * The results of the assertion performed on the previous operations.\r\n   */\r\n  assert?: fhir.TestReportSetupActionAssertArgs|undefined;\r\n}\r\n\r\n/**\r\n * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n */\r\nexport class TestReportSetupAction extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportSetupAction';\r\n  /**\r\n   * The operation performed.\r\n   */\r\n  public operation?: fhir.TestReportSetupActionOperation|undefined;\r\n  /**\r\n   * The results of the assertion performed on the previous operations.\r\n   */\r\n  public assert?: fhir.TestReportSetupActionAssert|undefined;\r\n  /**\r\n   * Default constructor for TestReportSetupAction - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportSetupActionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['operation']) { this.operation = new fhir.TestReportSetupActionOperation(source.operation); }\r\n    if (source['assert']) { this.assert = new fhir.TestReportSetupActionAssert(source.assert); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"operation\"]) { outcome.issue!.push(...this.operation.doModelValidation().issue!); }\r\n    if (this[\"assert\"]) { outcome.issue!.push(...this.assert.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportSetup type.\r\n */\r\nexport interface TestReportSetupArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  action: fhir.TestReportSetupActionArgs[]|null;\r\n}\r\n\r\n/**\r\n * The results of the series of required setup operations before the tests were executed.\r\n */\r\nexport class TestReportSetup extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportSetup';\r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  public action: fhir.TestReportSetupAction[];\r\n  /**\r\n   * Default constructor for TestReportSetup - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportSetupArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['action']) { this.action = source.action.map((x) => new fhir.TestReportSetupAction(x)); }\r\n    else { this.action = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['action']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action', }));\r\n    } else if (!Array.isArray(this.action)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action', }));\r\n    } else if (this.action.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property action:fhir.TestReportSetupAction[] fhir: TestReport.setup.action:action', }));\r\n    }\r\n    if (this[\"action\"]) { this.action.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportTestAction type.\r\n */\r\nexport interface TestReportTestActionArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  operation?: fhir.TestReportSetupActionOperationArgs|undefined;\r\n  /**\r\n   * The results of the assertion performed on the previous operations.\r\n   */\r\n  assert?: fhir.TestReportSetupActionAssertArgs|undefined;\r\n}\r\n\r\n/**\r\n * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n */\r\nexport class TestReportTestAction extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportTestAction';\r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  public operation?: fhir.TestReportSetupActionOperation|undefined;\r\n  /**\r\n   * The results of the assertion performed on the previous operations.\r\n   */\r\n  public assert?: fhir.TestReportSetupActionAssert|undefined;\r\n  /**\r\n   * Default constructor for TestReportTestAction - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportTestActionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['operation']) { this.operation = new fhir.TestReportSetupActionOperation(source.operation); }\r\n    if (source['assert']) { this.assert = new fhir.TestReportSetupActionAssert(source.assert); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"operation\"]) { outcome.issue!.push(...this.operation.doModelValidation().issue!); }\r\n    if (this[\"assert\"]) { outcome.issue!.push(...this.assert.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportTest type.\r\n */\r\nexport interface TestReportTestArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The name of this test used for tracking/logging purposes by test engines.\r\n   */\r\n  name?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * A short description of the test used by test engines for tracking and reporting purposes.\r\n   */\r\n  description?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  action: fhir.TestReportTestActionArgs[]|null;\r\n}\r\n\r\n/**\r\n * A test executed from the test script.\r\n */\r\nexport class TestReportTest extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportTest';\r\n  /**\r\n   * The name of this test used for tracking/logging purposes by test engines.\r\n   */\r\n  public name?: fhir.FhirString|undefined;\r\n  /**\r\n   * A short description of the test used by test engines for tracking and reporting purposes.\r\n   */\r\n  public description?: fhir.FhirString|undefined;\r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  public action: fhir.TestReportTestAction[];\r\n  /**\r\n   * Default constructor for TestReportTest - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportTestArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }\r\n    if (source['action']) { this.action = source.action.map((x) => new fhir.TestReportTestAction(x)); }\r\n    else { this.action = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (this[\"description\"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }\r\n    if (!this['action']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action', }));\r\n    } else if (!Array.isArray(this.action)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action', }));\r\n    } else if (this.action.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property action:fhir.TestReportTestAction[] fhir: TestReport.test.action:action', }));\r\n    }\r\n    if (this[\"action\"]) { this.action.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportTeardownAction type.\r\n */\r\nexport interface TestReportTeardownActionArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  operation: fhir.TestReportSetupActionOperationArgs|null;\r\n}\r\n\r\n/**\r\n * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n */\r\nexport class TestReportTeardownAction extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportTeardownAction';\r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  public operation: fhir.TestReportSetupActionOperation|null;\r\n  /**\r\n   * Default constructor for TestReportTeardownAction - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportTeardownActionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['operation']) { this.operation = new fhir.TestReportSetupActionOperation(source.operation); }\r\n    else { this.operation = null; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['operation']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property operation:fhir.TestReportSetupActionOperation fhir: TestReport.teardown.action.operation:TestReport.setup.action.operation', }));\r\n    }\r\n    if (this[\"operation\"]) { outcome.issue!.push(...this.operation.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReportTeardown type.\r\n */\r\nexport interface TestReportTeardownArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  action: fhir.TestReportTeardownActionArgs[]|null;\r\n}\r\n\r\n/**\r\n * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).\r\n */\r\nexport class TestReportTeardown extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReportTeardown';\r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  public action: fhir.TestReportTeardownAction[];\r\n  /**\r\n   * Default constructor for TestReportTeardown - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportTeardownArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['action']) { this.action = source.action.map((x) => new fhir.TestReportTeardownAction(x)); }\r\n    else { this.action = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['action']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action', }));\r\n    } else if (!Array.isArray(this.action)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action', }));\r\n    } else if (this.action.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property action:fhir.TestReportTeardownAction[] fhir: TestReport.teardown.action:action', }));\r\n    }\r\n    if (this[\"action\"]) { this.action.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the TestReport type.\r\n */\r\nexport interface TestReportArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"TestReport\"|undefined;\r\n  /**\r\n   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Not expected to be globally unique.\r\n   */\r\n  name?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The status represents where the execution is currently within the test script execution life cycle.\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  status: ReportStatusCodesCodeType|null;\r\n  /**\r\n   * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.\r\n   */\r\n  testScript: fhir.ReferenceArgs|null;\r\n  /**\r\n   * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.\r\n   */\r\n  result: ReportResultCodesCodeType|null;\r\n  /**\r\n   * The final score (percentage of tests passed) resulting from the execution of the TestScript.\r\n   */\r\n  score?: fhir.FhirDecimal|number|undefined;\r\n  /**\r\n   * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  tester?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Additional specific dates may be added as extensions.\r\n   */\r\n  issued?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * A participant in the test execution, either the execution engine, a client, or a server.\r\n   */\r\n  participant?: fhir.TestReportParticipantArgs[]|undefined;\r\n  /**\r\n   * The results of the series of required setup operations before the tests were executed.\r\n   */\r\n  setup?: fhir.TestReportSetupArgs|undefined;\r\n  /**\r\n   * A test executed from the test script.\r\n   */\r\n  test?: fhir.TestReportTestArgs[]|undefined;\r\n  /**\r\n   * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).\r\n   */\r\n  teardown?: fhir.TestReportTeardownArgs|undefined;\r\n}\r\n\r\n/**\r\n * A summary of information based on the results of executing a TestScript.\r\n */\r\nexport class TestReport extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'TestReport';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"TestReport\";\r\n  /**\r\n   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Not expected to be globally unique.\r\n   */\r\n  public name?: fhir.FhirString|undefined;\r\n  /**\r\n   * The status represents where the execution is currently within the test script execution life cycle.\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  public status: ReportStatusCodesCodeType|null;\r\n  /**\r\n   * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.\r\n   */\r\n  public testScript: fhir.Reference|null;\r\n  /**\r\n   * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.\r\n   */\r\n  public result: ReportResultCodesCodeType|null;\r\n  /**\r\n   * The final score (percentage of tests passed) resulting from the execution of the TestScript.\r\n   */\r\n  public score?: fhir.FhirDecimal|undefined;\r\n  /**\r\n   * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  public tester?: fhir.FhirString|undefined;\r\n  /**\r\n   * Additional specific dates may be added as extensions.\r\n   */\r\n  public issued?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * A participant in the test execution, either the execution engine, a client, or a server.\r\n   */\r\n  public participant?: fhir.TestReportParticipant[];\r\n  /**\r\n   * The results of the series of required setup operations before the tests were executed.\r\n   */\r\n  public setup?: fhir.TestReportSetup|undefined;\r\n  /**\r\n   * A test executed from the test script.\r\n   */\r\n  public test?: fhir.TestReportTest[];\r\n  /**\r\n   * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).\r\n   */\r\n  public teardown?: fhir.TestReportTeardown|undefined;\r\n  /**\r\n   * Default constructor for TestReport - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<TestReportArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'TestReport';\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    if (source['status']) { this.status = source.status; }\r\n    else { this.status = null; }\r\n    if (source['testScript']) { this.testScript = new fhir.Reference(source.testScript); }\r\n    else { this.testScript = null; }\r\n    if (source['result']) { this.result = source.result; }\r\n    else { this.result = null; }\r\n    if (source['score']) { this.score = new fhir.FhirDecimal({value: source.score}); }\r\n    if (source['tester']) { this.tester = new fhir.FhirString({value: source.tester}); }\r\n    if (source['issued']) { this.issued = new fhir.FhirDateTime({value: source.issued}); }\r\n    if (source['participant']) { this.participant = source.participant.map((x) => new fhir.TestReportParticipant(x)); }\r\n    else { this.participant = []; }\r\n    if (source['setup']) { this.setup = new fhir.TestReportSetup(source.setup); }\r\n    if (source['test']) { this.test = source.test.map((x) => new fhir.TestReportTest(x)); }\r\n    else { this.test = []; }\r\n    if (source['teardown']) { this.teardown = new fhir.TestReportTeardown(source.teardown); }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (TestReport.status)\r\n   */\r\n  public static statusRequiredCoding():ReportStatusCodesCodingType {\r\n    return ReportStatusCodesCodings;\r\n  }\r\n  /**\r\n   * Required-bound Value Set for result (TestReport.result)\r\n   */\r\n  public static resultRequiredCoding():ReportResultCodesCodingType {\r\n    return ReportResultCodesCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"TestReport\" fhir: TestReport.resourceType:\"TestReport\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (!this['status']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property status:ReportStatusCodesCodeType fhir: TestReport.status:code', }));\r\n    }\r\n    if (!this['testScript']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property testScript:fhir.Reference fhir: TestReport.testScript:Reference', }));\r\n    }\r\n    if (this[\"testScript\"]) { outcome.issue!.push(...this.testScript.doModelValidation().issue!); }\r\n    if (!this['result']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property result:ReportResultCodesCodeType fhir: TestReport.result:code', }));\r\n    }\r\n    if (this[\"score\"]) { outcome.issue!.push(...this.score.doModelValidation().issue!); }\r\n    if (this[\"tester\"]) { outcome.issue!.push(...this.tester.doModelValidation().issue!); }\r\n    if (this[\"issued\"]) { outcome.issue!.push(...this.issued.doModelValidation().issue!); }\r\n    if (this[\"participant\"]) { this.participant.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"setup\"]) { outcome.issue!.push(...this.setup.doModelValidation().issue!); }\r\n    if (this[\"test\"]) { this.test.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"teardown\"]) { outcome.issue!.push(...this.teardown.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirUri","fhir.FhirString","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.FhirMarkdown","fhir.TestReportSetupActionOperation","fhir.TestReportSetupActionAssert","fhir.TestReportSetupAction","fhir.TestReportTestAction","fhir.TestReportTeardownAction","fhir.Identifier","fhir.Reference","fhir.FhirDecimal","fhir.FhirDateTime","fhir.TestReportParticipant","fhir.TestReportSetup","fhir.TestReportTest","fhir.TestReportTeardown","fhir.DomainResource"],"mappings":"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"}