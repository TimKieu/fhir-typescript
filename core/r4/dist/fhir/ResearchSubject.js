/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ResearchSubjectStatusCodings } from '../fhirValueSets/ResearchSubjectStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { Period } from './Period.js';
import { Reference } from './Reference.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
var ResearchSubject = /** @class */ (function (_super) {
    __extends(ResearchSubject, _super);
    /**
     * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
     */
    function ResearchSubject(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ResearchSubject';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['study']) {
            _this.study = new Reference(source.study);
        }
        else {
            _this.study = null;
        }
        if (source['individual']) {
            _this.individual = new Reference(source.individual);
        }
        else {
            _this.individual = null;
        }
        if (source['assignedArm']) {
            _this.assignedArm = new FhirString({ value: source.assignedArm });
        }
        if (source['actualArm']) {
            _this.actualArm = new FhirString({ value: source.actualArm });
        }
        if (source['consent']) {
            _this.consent = new Reference(source.consent);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ResearchSubject.status)
     */
    ResearchSubject.statusRequiredCoding = function () {
        return ResearchSubjectStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ResearchSubject.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ResearchSubject" fhir: ResearchSubject.resourceType:"ResearchSubject"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ResearchSubjectStatusCodeType fhir: ResearchSubject.status:code', }));
        }
        if (this["period"]) {
            (_a = outcome.issue).push.apply(_a, this.period.doModelValidation().issue);
        }
        if (!this['study']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property study:fhir.Reference fhir: ResearchSubject.study:Reference', }));
        }
        if (this["study"]) {
            (_b = outcome.issue).push.apply(_b, this.study.doModelValidation().issue);
        }
        if (!this['individual']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property individual:fhir.Reference fhir: ResearchSubject.individual:Reference', }));
        }
        if (this["individual"]) {
            (_c = outcome.issue).push.apply(_c, this.individual.doModelValidation().issue);
        }
        if (this["assignedArm"]) {
            (_d = outcome.issue).push.apply(_d, this.assignedArm.doModelValidation().issue);
        }
        if (this["actualArm"]) {
            (_e = outcome.issue).push.apply(_e, this.actualArm.doModelValidation().issue);
        }
        if (this["consent"]) {
            (_f = outcome.issue).push.apply(_f, this.consent.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ResearchSubject._fts_dataType = 'ResearchSubject';
    return ResearchSubject;
}(DomainResource));

export { ResearchSubject };
//# sourceMappingURL=ResearchSubject.js.map
