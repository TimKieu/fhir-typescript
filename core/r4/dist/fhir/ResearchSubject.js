// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ResearchSubject
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResearchSubjectStatusCodes } from '../fhirValueSets/ResearchSubjectStatusCodes.js';
/**
 * A physical entity which is the primary unit of operational and/or administrative interest in a study.
 */
export class ResearchSubject extends fhir.DomainResource {
    /**
     * Default constructor for ResearchSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ResearchSubject';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['study']) {
            this.study = new fhir.Reference(source.study);
        }
        else {
            this.study = null;
        }
        if (source['individual']) {
            this.individual = new fhir.Reference(source.individual);
        }
        else {
            this.individual = null;
        }
        if (source['assignedArm']) {
            this.assignedArm = new fhir.FhirString({ value: source.assignedArm });
        }
        if (source['_assignedArm']) {
            if (this.assignedArm) {
                this.assignedArm.addExtendedProperties(source._assignedArm);
            }
            else {
                this.assignedArm = new fhir.FhirString(source._assignedArm);
            }
        }
        if (source['actualArm']) {
            this.actualArm = new fhir.FhirString({ value: source.actualArm });
        }
        if (source['_actualArm']) {
            if (this.actualArm) {
                this.actualArm.addExtendedProperties(source._actualArm);
            }
            else {
                this.actualArm = new fhir.FhirString(source._actualArm);
            }
        }
        if (source['consent']) {
            this.consent = new fhir.Reference(source.consent);
        }
    }
    /**
     * Required-bound Value Set for status (ResearchSubject.status)
     */
    static get statusRequiredCodes() {
        return ResearchSubjectStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ResearchSubject" fhir: ResearchSubject.resourceType:"ResearchSubject"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ResearchSubjectStatusCodeType> fhir: ResearchSubject.status:code' });
        }
        if (this['status'] && (!Object.values(ResearchSubjectStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ResearchSubjectStatusCodeType> fhir: ResearchSubject.status:code Required binding to: ResearchSubjectStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (!this['study']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property study:fhir.Reference fhir: ResearchSubject.study:Reference' });
        }
        if (this["study"]) {
            issues.push(...this.study.doModelValidation());
        }
        if (!this['individual']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property individual:fhir.Reference fhir: ResearchSubject.individual:Reference' });
        }
        if (this["individual"]) {
            issues.push(...this.individual.doModelValidation());
        }
        if (this["assignedArm"]) {
            issues.push(...this.assignedArm.doModelValidation());
        }
        if (this["actualArm"]) {
            issues.push(...this.actualArm.doModelValidation());
        }
        if (this["consent"]) {
            issues.push(...this.consent.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ResearchSubject._fts_dataType = 'ResearchSubject';
//# sourceMappingURL=data:application/json;base64,