// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestScript
import * as fhir from '../fhir.js';
// @ts-ignore
import { TestscriptProfileOriginTypesCodings, } from '../fhirValueSets/TestscriptProfileOriginTypesCodings.js';
// @ts-ignore
import { TestscriptProfileDestinationTypesCodings, } from '../fhirValueSets/TestscriptProfileDestinationTypesCodings.js';
// @ts-ignore
import { TestscriptOperationCodings, } from '../fhirValueSets/TestscriptOperationCodings.js';
// @ts-ignore
import { DefinedTypesCodes } from '../fhirValueSets/DefinedTypesCodes.js';
// @ts-ignore
import { HttpOperationsCodes } from '../fhirValueSets/HttpOperationsCodes.js';
// @ts-ignore
import { AssertDirectionCodes } from '../fhirValueSets/AssertDirectionCodes.js';
// @ts-ignore
import { AssertOperatorCodes } from '../fhirValueSets/AssertOperatorCodes.js';
// @ts-ignore
import { AssertResponseCodeTypesCodes } from '../fhirValueSets/AssertResponseCodeTypesCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
export class TestScriptOrigin extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptOrigin - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['index']) {
            this.index = new fhir.FhirInteger({ value: source.index });
        }
        else {
            this.index = null;
        }
        if (source['_index']) {
            if (this.index) {
                this.index.addExtendedProperties(source._index);
            }
            else {
                this.index = new fhir.FhirInteger(source._index);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Coding(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Extensible-bound Value Set for profile (TestScript.origin.profile)
     */
    static get profileExtensibleCodings() {
        return TestscriptProfileOriginTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.origin';
        }
        if (!this['index']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property index fhir: TestScript.origin.index:integer', expression: [expression] });
        }
        if (this["index"]) {
            issues.push(...this.index.doModelValidation(expression + '.index'));
        }
        if (!this['profile']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property profile fhir: TestScript.origin.profile:Coding', expression: [expression] });
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation(expression + '.profile'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptOrigin._fts_dataType = 'TestScriptOrigin';
/**
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
export class TestScriptDestination extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['index']) {
            this.index = new fhir.FhirInteger({ value: source.index });
        }
        else {
            this.index = null;
        }
        if (source['_index']) {
            if (this.index) {
                this.index.addExtendedProperties(source._index);
            }
            else {
                this.index = new fhir.FhirInteger(source._index);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.Coding(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Extensible-bound Value Set for profile (TestScript.destination.profile)
     */
    static get profileExtensibleCodings() {
        return TestscriptProfileDestinationTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.destination';
        }
        if (!this['index']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property index fhir: TestScript.destination.index:integer', expression: [expression] });
        }
        if (this["index"]) {
            issues.push(...this.index.doModelValidation(expression + '.index'));
        }
        if (!this['profile']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property profile fhir: TestScript.destination.profile:Coding', expression: [expression] });
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation(expression + '.profile'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptDestination._fts_dataType = 'TestScriptDestination';
/**
 * A link to the FHIR specification that this test is covering.
 */
export class TestScriptMetadataLink extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.metadata.link';
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url fhir: TestScript.metadata.link.url:uri', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataLink._fts_dataType = 'TestScriptMetadataLink';
/**
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
export class TestScriptMetadataCapability extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['required']) {
            this.required = new fhir.FhirBoolean({ value: source.required });
        }
        else {
            this.required = null;
        }
        if (source['_required']) {
            if (this.required) {
                this.required.addExtendedProperties(source._required);
            }
            else {
                this.required = new fhir.FhirBoolean(source._required);
            }
        }
        if (source['validated']) {
            this.validated = new fhir.FhirBoolean({ value: source.validated });
        }
        else {
            this.validated = null;
        }
        if (source['_validated']) {
            if (this.validated) {
                this.validated.addExtendedProperties(source._validated);
            }
            else {
                this.validated = new fhir.FhirBoolean(source._validated);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['origin']) {
            this.origin = source.origin.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.origin = [];
        }
        if (source['_origin']) {
            source._origin.forEach((x, i) => {
                if (this.origin.length >= i) {
                    if (x) {
                        this.origin[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.origin.push(new fhir.FhirInteger(x));
                    }
                }
            });
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['_destination']) {
            if (this.destination) {
                this.destination.addExtendedProperties(source._destination);
            }
            else {
                this.destination = new fhir.FhirInteger(source._destination);
            }
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.link = [];
        }
        if (source['_link']) {
            source._link.forEach((x, i) => {
                if (this.link.length >= i) {
                    if (x) {
                        this.link[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.link.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['capabilities']) {
            this.capabilities = new fhir.FhirCanonical({ value: source.capabilities });
        }
        else {
            this.capabilities = null;
        }
        if (source['_capabilities']) {
            if (this.capabilities) {
                this.capabilities.addExtendedProperties(source._capabilities);
            }
            else {
                this.capabilities = new fhir.FhirCanonical(source._capabilities);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.metadata.capability';
        }
        if (!this['required']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property required fhir: TestScript.metadata.capability.required:boolean', expression: [expression] });
        }
        if (this["required"]) {
            issues.push(...this.required.doModelValidation(expression + '.required'));
        }
        if (!this['validated']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property validated fhir: TestScript.metadata.capability.validated:boolean', expression: [expression] });
        }
        if (this["validated"]) {
            issues.push(...this.validated.doModelValidation(expression + '.validated'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["origin"]) {
            this.origin.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.origin[${i}]`)); });
        }
        if (this["destination"]) {
            issues.push(...this.destination.doModelValidation(expression + '.destination'));
        }
        if (this["link"]) {
            this.link.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.link[${i}]`)); });
        }
        if (!this['capabilities']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property capabilities fhir: TestScript.metadata.capability.capabilities:canonical', expression: [expression] });
        }
        if (this["capabilities"]) {
            issues.push(...this.capabilities.doModelValidation(expression + '.capabilities'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataCapability._fts_dataType = 'TestScriptMetadataCapability';
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
export class TestScriptMetadata extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadata - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.TestScriptMetadataLink(x));
        }
        else {
            this.link = [];
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.TestScriptMetadataCapability(x));
        }
        else {
            this.capability = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.metadata';
        }
        if (this["link"]) {
            this.link.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.link[${i}]`)); });
        }
        if (!this['capability']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property capability fhir: TestScript.metadata.capability:capability', expression: [expression] });
        }
        else if (!Array.isArray(this.capability)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property capability fhir: TestScript.metadata.capability:capability', expression: [expression] });
        }
        else if (this.capability.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property capability fhir: TestScript.metadata.capability:capability', expression: [expression] });
        }
        if (this["capability"]) {
            this.capability.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.capability[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadata._fts_dataType = 'TestScriptMetadata';
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
export class TestScriptFixture extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptFixture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['autocreate']) {
            this.autocreate = new fhir.FhirBoolean({ value: source.autocreate });
        }
        else {
            this.autocreate = null;
        }
        if (source['_autocreate']) {
            if (this.autocreate) {
                this.autocreate.addExtendedProperties(source._autocreate);
            }
            else {
                this.autocreate = new fhir.FhirBoolean(source._autocreate);
            }
        }
        if (source['autodelete']) {
            this.autodelete = new fhir.FhirBoolean({ value: source.autodelete });
        }
        else {
            this.autodelete = null;
        }
        if (source['_autodelete']) {
            if (this.autodelete) {
                this.autodelete.addExtendedProperties(source._autodelete);
            }
            else {
                this.autodelete = new fhir.FhirBoolean(source._autodelete);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.fixture';
        }
        if (!this['autocreate']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property autocreate fhir: TestScript.fixture.autocreate:boolean', expression: [expression] });
        }
        if (this["autocreate"]) {
            issues.push(...this.autocreate.doModelValidation(expression + '.autocreate'));
        }
        if (!this['autodelete']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property autodelete fhir: TestScript.fixture.autodelete:boolean', expression: [expression] });
        }
        if (this["autodelete"]) {
            issues.push(...this.autodelete.doModelValidation(expression + '.autodelete'));
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation(expression + '.resource'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptFixture._fts_dataType = 'TestScriptFixture';
/**
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
export class TestScriptVariable extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptVariable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['defaultValue']) {
            this.defaultValue = new fhir.FhirString({ value: source.defaultValue });
        }
        if (source['_defaultValue']) {
            if (this.defaultValue) {
                this.defaultValue.addExtendedProperties(source._defaultValue);
            }
            else {
                this.defaultValue = new fhir.FhirString(source._defaultValue);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression);
            }
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['_headerField']) {
            if (this.headerField) {
                this.headerField.addExtendedProperties(source._headerField);
            }
            else {
                this.headerField = new fhir.FhirString(source._headerField);
            }
        }
        if (source['hint']) {
            this.hint = new fhir.FhirString({ value: source.hint });
        }
        if (source['_hint']) {
            if (this.hint) {
                this.hint.addExtendedProperties(source._hint);
            }
            else {
                this.hint = new fhir.FhirString(source._hint);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.variable';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: TestScript.variable.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["defaultValue"]) {
            issues.push(...this.defaultValue.doModelValidation(expression + '.defaultValue'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation(expression + '.expression'));
        }
        if (this["headerField"]) {
            issues.push(...this.headerField.doModelValidation(expression + '.headerField'));
        }
        if (this["hint"]) {
            issues.push(...this.hint.doModelValidation(expression + '.hint'));
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation(expression + '.path'));
        }
        if (this["sourceId"]) {
            issues.push(...this.sourceId.doModelValidation(expression + '.sourceId'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptVariable._fts_dataType = 'TestScriptVariable';
/**
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
 */
export class TestScriptSetupActionOperationRequestHeader extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperationRequestHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['field']) {
            this.field = new fhir.FhirString({ value: source.field });
        }
        else {
            this.field = null;
        }
        if (source['_field']) {
            if (this.field) {
                this.field.addExtendedProperties(source._field);
            }
            else {
                this.field = new fhir.FhirString(source._field);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.setup.action.operation.requestHeader';
        }
        if (!this['field']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property field fhir: TestScript.setup.action.operation.requestHeader.field:string', expression: [expression] });
        }
        if (this["field"]) {
            issues.push(...this.field.doModelValidation(expression + '.field'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: TestScript.setup.action.operation.requestHeader.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperationRequestHeader._fts_dataType = 'TestScriptSetupActionOperationRequestHeader';
/**
 * The operation to perform.
 */
export class TestScriptSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirCode(source._resource);
            }
        }
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['accept']) {
            this.accept = new fhir.FhirCode({ value: source.accept });
        }
        if (source['_accept']) {
            if (this.accept) {
                this.accept.addExtendedProperties(source._accept);
            }
            else {
                this.accept = new fhir.FhirCode(source._accept);
            }
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['_destination']) {
            if (this.destination) {
                this.destination.addExtendedProperties(source._destination);
            }
            else {
                this.destination = new fhir.FhirInteger(source._destination);
            }
        }
        if (source['encodeRequestUrl']) {
            this.encodeRequestUrl = new fhir.FhirBoolean({ value: source.encodeRequestUrl });
        }
        else {
            this.encodeRequestUrl = null;
        }
        if (source['_encodeRequestUrl']) {
            if (this.encodeRequestUrl) {
                this.encodeRequestUrl.addExtendedProperties(source._encodeRequestUrl);
            }
            else {
                this.encodeRequestUrl = new fhir.FhirBoolean(source._encodeRequestUrl);
            }
        }
        if (source['method']) {
            this.method = new fhir.FhirCode({ value: source.method });
        }
        if (source['_method']) {
            if (this.method) {
                this.method.addExtendedProperties(source._method);
            }
            else {
                this.method = new fhir.FhirCode(source._method);
            }
        }
        if (source['origin']) {
            this.origin = new fhir.FhirInteger({ value: source.origin });
        }
        if (source['_origin']) {
            if (this.origin) {
                this.origin.addExtendedProperties(source._origin);
            }
            else {
                this.origin = new fhir.FhirInteger(source._origin);
            }
        }
        if (source['params']) {
            this.params = new fhir.FhirString({ value: source.params });
        }
        if (source['_params']) {
            if (this.params) {
                this.params.addExtendedProperties(source._params);
            }
            else {
                this.params = new fhir.FhirString(source._params);
            }
        }
        if (source['requestHeader']) {
            this.requestHeader = source.requestHeader.map((x) => new fhir.TestScriptSetupActionOperationRequestHeader(x));
        }
        else {
            this.requestHeader = [];
        }
        if (source['requestId']) {
            this.requestId = new fhir.FhirId({ value: source.requestId });
        }
        if (source['_requestId']) {
            if (this.requestId) {
                this.requestId.addExtendedProperties(source._requestId);
            }
            else {
                this.requestId = new fhir.FhirId(source._requestId);
            }
        }
        if (source['responseId']) {
            this.responseId = new fhir.FhirId({ value: source.responseId });
        }
        if (source['_responseId']) {
            if (this.responseId) {
                this.responseId.addExtendedProperties(source._responseId);
            }
            else {
                this.responseId = new fhir.FhirId(source._responseId);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
        if (source['targetId']) {
            this.targetId = new fhir.FhirId({ value: source.targetId });
        }
        if (source['_targetId']) {
            if (this.targetId) {
                this.targetId.addExtendedProperties(source._targetId);
            }
            else {
                this.targetId = new fhir.FhirId(source._targetId);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirString({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirString(source._url);
            }
        }
    }
    /**
     * Extensible-bound Value Set for type (TestScript.setup.action.operation.type)
     */
    static get typeExtensibleCodings() {
        return TestscriptOperationCodings;
    }
    /**
     * Required-bound Value Set for resource (TestScript.setup.action.operation.resource)
     */
    static get resourceRequiredCodes() {
        return DefinedTypesCodes;
    }
    /**
     * Required-bound Value Set for method (TestScript.setup.action.operation.method)
     */
    static get methodRequiredCodes() {
        return HttpOperationsCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.setup.action.operation';
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this['resource'] && (!Object.values(DefinedTypesCodes).includes(this.resource.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property resource fhir: TestScript.setup.action.operation.resource:code Required binding to: DefinedTypes', expression: [expression] });
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation(expression + '.resource'));
        }
        if (this["label"]) {
            issues.push(...this.label.doModelValidation(expression + '.label'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["accept"]) {
            issues.push(...this.accept.doModelValidation(expression + '.accept'));
        }
        if (this["contentType"]) {
            issues.push(...this.contentType.doModelValidation(expression + '.contentType'));
        }
        if (this["destination"]) {
            issues.push(...this.destination.doModelValidation(expression + '.destination'));
        }
        if (!this['encodeRequestUrl']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property encodeRequestUrl fhir: TestScript.setup.action.operation.encodeRequestUrl:boolean', expression: [expression] });
        }
        if (this["encodeRequestUrl"]) {
            issues.push(...this.encodeRequestUrl.doModelValidation(expression + '.encodeRequestUrl'));
        }
        if (this['method'] && (!Object.values(HttpOperationsCodes).includes(this.method.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property method fhir: TestScript.setup.action.operation.method:code Required binding to: HttpOperations', expression: [expression] });
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation(expression + '.method'));
        }
        if (this["origin"]) {
            issues.push(...this.origin.doModelValidation(expression + '.origin'));
        }
        if (this["params"]) {
            issues.push(...this.params.doModelValidation(expression + '.params'));
        }
        if (this["requestHeader"]) {
            this.requestHeader.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.requestHeader[${i}]`)); });
        }
        if (this["requestId"]) {
            issues.push(...this.requestId.doModelValidation(expression + '.requestId'));
        }
        if (this["responseId"]) {
            issues.push(...this.responseId.doModelValidation(expression + '.responseId'));
        }
        if (this["sourceId"]) {
            issues.push(...this.sourceId.doModelValidation(expression + '.sourceId'));
        }
        if (this["targetId"]) {
            issues.push(...this.targetId.doModelValidation(expression + '.targetId'));
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperation._fts_dataType = 'TestScriptSetupActionOperation';
/**
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
export class TestScriptSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['direction']) {
            this.direction = new fhir.FhirCode({ value: source.direction });
        }
        if (source['_direction']) {
            if (this.direction) {
                this.direction.addExtendedProperties(source._direction);
            }
            else {
                this.direction = new fhir.FhirCode(source._direction);
            }
        }
        if (source['compareToSourceId']) {
            this.compareToSourceId = new fhir.FhirString({ value: source.compareToSourceId });
        }
        if (source['_compareToSourceId']) {
            if (this.compareToSourceId) {
                this.compareToSourceId.addExtendedProperties(source._compareToSourceId);
            }
            else {
                this.compareToSourceId = new fhir.FhirString(source._compareToSourceId);
            }
        }
        if (source['compareToSourceExpression']) {
            this.compareToSourceExpression = new fhir.FhirString({ value: source.compareToSourceExpression });
        }
        if (source['_compareToSourceExpression']) {
            if (this.compareToSourceExpression) {
                this.compareToSourceExpression.addExtendedProperties(source._compareToSourceExpression);
            }
            else {
                this.compareToSourceExpression = new fhir.FhirString(source._compareToSourceExpression);
            }
        }
        if (source['compareToSourcePath']) {
            this.compareToSourcePath = new fhir.FhirString({ value: source.compareToSourcePath });
        }
        if (source['_compareToSourcePath']) {
            if (this.compareToSourcePath) {
                this.compareToSourcePath.addExtendedProperties(source._compareToSourcePath);
            }
            else {
                this.compareToSourcePath = new fhir.FhirString(source._compareToSourcePath);
            }
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression);
            }
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['_headerField']) {
            if (this.headerField) {
                this.headerField.addExtendedProperties(source._headerField);
            }
            else {
                this.headerField = new fhir.FhirString(source._headerField);
            }
        }
        if (source['minimumId']) {
            this.minimumId = new fhir.FhirString({ value: source.minimumId });
        }
        if (source['_minimumId']) {
            if (this.minimumId) {
                this.minimumId.addExtendedProperties(source._minimumId);
            }
            else {
                this.minimumId = new fhir.FhirString(source._minimumId);
            }
        }
        if (source['navigationLinks']) {
            this.navigationLinks = new fhir.FhirBoolean({ value: source.navigationLinks });
        }
        if (source['_navigationLinks']) {
            if (this.navigationLinks) {
                this.navigationLinks.addExtendedProperties(source._navigationLinks);
            }
            else {
                this.navigationLinks = new fhir.FhirBoolean(source._navigationLinks);
            }
        }
        if (source['operator']) {
            this.operator = new fhir.FhirCode({ value: source.operator });
        }
        if (source['_operator']) {
            if (this.operator) {
                this.operator.addExtendedProperties(source._operator);
            }
            else {
                this.operator = new fhir.FhirCode(source._operator);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['requestMethod']) {
            this.requestMethod = new fhir.FhirCode({ value: source.requestMethod });
        }
        if (source['_requestMethod']) {
            if (this.requestMethod) {
                this.requestMethod.addExtendedProperties(source._requestMethod);
            }
            else {
                this.requestMethod = new fhir.FhirCode(source._requestMethod);
            }
        }
        if (source['requestURL']) {
            this.requestURL = new fhir.FhirString({ value: source.requestURL });
        }
        if (source['_requestURL']) {
            if (this.requestURL) {
                this.requestURL.addExtendedProperties(source._requestURL);
            }
            else {
                this.requestURL = new fhir.FhirString(source._requestURL);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['_resource']) {
            if (this.resource) {
                this.resource.addExtendedProperties(source._resource);
            }
            else {
                this.resource = new fhir.FhirCode(source._resource);
            }
        }
        if (source['response']) {
            this.response = new fhir.FhirCode({ value: source.response });
        }
        if (source['_response']) {
            if (this.response) {
                this.response.addExtendedProperties(source._response);
            }
            else {
                this.response = new fhir.FhirCode(source._response);
            }
        }
        if (source['responseCode']) {
            this.responseCode = new fhir.FhirString({ value: source.responseCode });
        }
        if (source['_responseCode']) {
            if (this.responseCode) {
                this.responseCode.addExtendedProperties(source._responseCode);
            }
            else {
                this.responseCode = new fhir.FhirString(source._responseCode);
            }
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['_sourceId']) {
            if (this.sourceId) {
                this.sourceId.addExtendedProperties(source._sourceId);
            }
            else {
                this.sourceId = new fhir.FhirId(source._sourceId);
            }
        }
        if (source['validateProfileId']) {
            this.validateProfileId = new fhir.FhirId({ value: source.validateProfileId });
        }
        if (source['_validateProfileId']) {
            if (this.validateProfileId) {
                this.validateProfileId.addExtendedProperties(source._validateProfileId);
            }
            else {
                this.validateProfileId = new fhir.FhirId(source._validateProfileId);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['warningOnly']) {
            this.warningOnly = new fhir.FhirBoolean({ value: source.warningOnly });
        }
        else {
            this.warningOnly = null;
        }
        if (source['_warningOnly']) {
            if (this.warningOnly) {
                this.warningOnly.addExtendedProperties(source._warningOnly);
            }
            else {
                this.warningOnly = new fhir.FhirBoolean(source._warningOnly);
            }
        }
    }
    /**
     * Required-bound Value Set for direction (TestScript.setup.action.assert.direction)
     */
    static get directionRequiredCodes() {
        return AssertDirectionCodes;
    }
    /**
     * Required-bound Value Set for operator (TestScript.setup.action.assert.operator)
     */
    static get operatorRequiredCodes() {
        return AssertOperatorCodes;
    }
    /**
     * Required-bound Value Set for requestMethod (TestScript.setup.action.assert.requestMethod)
     */
    static get requestMethodRequiredCodes() {
        return HttpOperationsCodes;
    }
    /**
     * Required-bound Value Set for resource (TestScript.setup.action.assert.resource)
     */
    static get resourceRequiredCodes() {
        return DefinedTypesCodes;
    }
    /**
     * Required-bound Value Set for response (TestScript.setup.action.assert.response)
     */
    static get responseRequiredCodes() {
        return AssertResponseCodeTypesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.setup.action.assert';
        }
        if (this["label"]) {
            issues.push(...this.label.doModelValidation(expression + '.label'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this['direction'] && (!Object.values(AssertDirectionCodes).includes(this.direction.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property direction fhir: TestScript.setup.action.assert.direction:code Required binding to: AssertDirection', expression: [expression] });
        }
        if (this["direction"]) {
            issues.push(...this.direction.doModelValidation(expression + '.direction'));
        }
        if (this["compareToSourceId"]) {
            issues.push(...this.compareToSourceId.doModelValidation(expression + '.compareToSourceId'));
        }
        if (this["compareToSourceExpression"]) {
            issues.push(...this.compareToSourceExpression.doModelValidation(expression + '.compareToSourceExpression'));
        }
        if (this["compareToSourcePath"]) {
            issues.push(...this.compareToSourcePath.doModelValidation(expression + '.compareToSourcePath'));
        }
        if (this["contentType"]) {
            issues.push(...this.contentType.doModelValidation(expression + '.contentType'));
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation(expression + '.expression'));
        }
        if (this["headerField"]) {
            issues.push(...this.headerField.doModelValidation(expression + '.headerField'));
        }
        if (this["minimumId"]) {
            issues.push(...this.minimumId.doModelValidation(expression + '.minimumId'));
        }
        if (this["navigationLinks"]) {
            issues.push(...this.navigationLinks.doModelValidation(expression + '.navigationLinks'));
        }
        if (this['operator'] && (!Object.values(AssertOperatorCodes).includes(this.operator.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property operator fhir: TestScript.setup.action.assert.operator:code Required binding to: AssertOperator', expression: [expression] });
        }
        if (this["operator"]) {
            issues.push(...this.operator.doModelValidation(expression + '.operator'));
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation(expression + '.path'));
        }
        if (this['requestMethod'] && (!Object.values(HttpOperationsCodes).includes(this.requestMethod.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property requestMethod fhir: TestScript.setup.action.assert.requestMethod:code Required binding to: HttpOperations', expression: [expression] });
        }
        if (this["requestMethod"]) {
            issues.push(...this.requestMethod.doModelValidation(expression + '.requestMethod'));
        }
        if (this["requestURL"]) {
            issues.push(...this.requestURL.doModelValidation(expression + '.requestURL'));
        }
        if (this['resource'] && (!Object.values(DefinedTypesCodes).includes(this.resource.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property resource fhir: TestScript.setup.action.assert.resource:code Required binding to: DefinedTypes', expression: [expression] });
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation(expression + '.resource'));
        }
        if (this['response'] && (!Object.values(AssertResponseCodeTypesCodes).includes(this.response.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property response fhir: TestScript.setup.action.assert.response:code Required binding to: AssertResponseCodeTypes', expression: [expression] });
        }
        if (this["response"]) {
            issues.push(...this.response.doModelValidation(expression + '.response'));
        }
        if (this["responseCode"]) {
            issues.push(...this.responseCode.doModelValidation(expression + '.responseCode'));
        }
        if (this["sourceId"]) {
            issues.push(...this.sourceId.doModelValidation(expression + '.sourceId'));
        }
        if (this["validateProfileId"]) {
            issues.push(...this.validateProfileId.doModelValidation(expression + '.validateProfileId'));
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        if (!this['warningOnly']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property warningOnly fhir: TestScript.setup.action.assert.warningOnly:boolean', expression: [expression] });
        }
        if (this["warningOnly"]) {
            issues.push(...this.warningOnly.doModelValidation(expression + '.warningOnly'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssert._fts_dataType = 'TestScriptSetupActionAssert';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.setup.action';
        }
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation(expression + '.operation'));
        }
        if (this["assert"]) {
            issues.push(...this.assert.doModelValidation(expression + '.assert'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupAction._fts_dataType = 'TestScriptSetupAction';
/**
 * A series of required setup operations before tests are executed.
 */
export class TestScriptSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptSetupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.setup';
        }
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action fhir: TestScript.setup.action:action', expression: [expression] });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action fhir: TestScript.setup.action:action', expression: [expression] });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action fhir: TestScript.setup.action:action', expression: [expression] });
        }
        if (this["action"]) {
            this.action.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.action[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetup._fts_dataType = 'TestScriptSetup';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.test.action';
        }
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation(expression + '.operation'));
        }
        if (this["assert"]) {
            issues.push(...this.assert.doModelValidation(expression + '.assert'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTestAction._fts_dataType = 'TestScriptTestAction';
/**
 * A test in this script.
 */
export class TestScriptTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTestAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.test';
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action fhir: TestScript.test.action:action', expression: [expression] });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action fhir: TestScript.test.action:action', expression: [expression] });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action fhir: TestScript.test.action:action', expression: [expression] });
        }
        if (this["action"]) {
            this.action.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.action[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTest._fts_dataType = 'TestScriptTest';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        else {
            this.operation = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.teardown.action';
        }
        if (!this['operation']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property operation fhir: TestScript.teardown.action.operation:TestScript.setup.action.operation', expression: [expression] });
        }
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation(expression + '.operation'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardownAction._fts_dataType = 'TestScriptTeardownAction';
/**
 * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
 */
export class TestScriptTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTeardownAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript.teardown';
        }
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action fhir: TestScript.teardown.action:action', expression: [expression] });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action fhir: TestScript.teardown.action:action', expression: [expression] });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action fhir: TestScript.teardown.action:action', expression: [expression] });
        }
        if (this["action"]) {
            this.action.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.action[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardown._fts_dataType = 'TestScriptTeardown';
/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
export class TestScript extends fhir.DomainResource {
    /**
     * Default constructor for TestScript - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TestScript';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['origin']) {
            this.origin = source.origin.map((x) => new fhir.TestScriptOrigin(x));
        }
        else {
            this.origin = [];
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.TestScriptDestination(x));
        }
        else {
            this.destination = [];
        }
        if (source['metadata']) {
            this.metadata = new fhir.TestScriptMetadata(source.metadata);
        }
        if (source['fixture']) {
            this.fixture = source.fixture.map((x) => new fhir.TestScriptFixture(x));
        }
        else {
            this.fixture = [];
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.Reference(x));
        }
        else {
            this.profile = [];
        }
        if (source['variable']) {
            this.variable = source.variable.map((x) => new fhir.TestScriptVariable(x));
        }
        else {
            this.variable = [];
        }
        if (source['setup']) {
            this.setup = new fhir.TestScriptSetup(source.setup);
        }
        if (source['test']) {
            this.test = source.test.map((x) => new fhir.TestScriptTest(x));
        }
        else {
            this.test = [];
        }
        if (source['teardown']) {
            this.teardown = new fhir.TestScriptTeardown(source.teardown);
        }
    }
    /**
     * Required-bound Value Set for status (TestScript.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TestScript';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: TestScript.resourceType:"TestScript"', expression: [expression] });
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url fhir: TestScript.url:uri', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation(expression + '.identifier'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: TestScript.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: TestScript.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: TestScript.status:code Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation(expression + '.experimental'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation(expression + '.purpose'));
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (this["origin"]) {
            this.origin.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.origin[${i}]`)); });
        }
        if (this["destination"]) {
            this.destination.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.destination[${i}]`)); });
        }
        if (this["metadata"]) {
            issues.push(...this.metadata.doModelValidation(expression + '.metadata'));
        }
        if (this["fixture"]) {
            this.fixture.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.fixture[${i}]`)); });
        }
        if (this["profile"]) {
            this.profile.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.profile[${i}]`)); });
        }
        if (this["variable"]) {
            this.variable.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.variable[${i}]`)); });
        }
        if (this["setup"]) {
            issues.push(...this.setup.doModelValidation(expression + '.setup'));
        }
        if (this["test"]) {
            this.test.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.test[${i}]`)); });
        }
        if (this["teardown"]) {
            issues.push(...this.teardown.doModelValidation(expression + '.teardown'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScript._fts_dataType = 'TestScript';
//# sourceMappingURL=data:application/json;base64,