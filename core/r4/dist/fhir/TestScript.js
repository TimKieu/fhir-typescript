// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestScript
import * as fhir from '../fhir.js';
// @ts-ignore
import { TestscriptProfileOriginTypesCodings, } from '../fhirValueSets/TestscriptProfileOriginTypesCodings.js';
// @ts-ignore
import { TestscriptProfileDestinationTypesCodings, } from '../fhirValueSets/TestscriptProfileDestinationTypesCodings.js';
// @ts-ignore
import { TestscriptOperationCodings, } from '../fhirValueSets/TestscriptOperationCodings.js';
// @ts-ignore
import { DefinedTypesCodes } from '../fhirValueSets/DefinedTypesCodes.js';
// @ts-ignore
import { HttpOperationsCodes } from '../fhirValueSets/HttpOperationsCodes.js';
// @ts-ignore
import { AssertDirectionCodes } from '../fhirValueSets/AssertDirectionCodes.js';
// @ts-ignore
import { AssertOperatorCodes } from '../fhirValueSets/AssertOperatorCodes.js';
// @ts-ignore
import { AssertResponseCodeTypesCodes } from '../fhirValueSets/AssertResponseCodeTypesCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
export class TestScriptOrigin extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptOrigin - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['index']) {
            this.index = new fhir.FhirInteger({ value: source.index });
        }
        else {
            this.index = null;
        }
        if (source['profile']) {
            this.profile = new fhir.Coding(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Extensible-bound Value Set for profile (TestScript.origin.profile)
     */
    static get profileExtensibleCodings() {
        return TestscriptProfileOriginTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['index']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property index:fhir.FhirInteger fhir: TestScript.origin.index:integer' });
        }
        if (this["index"]) {
            issues.push(...this.index.doModelValidation());
        }
        if (!this['profile']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property profile:fhir.Coding fhir: TestScript.origin.profile:Coding' });
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptOrigin._fts_dataType = 'TestScriptOrigin';
/**
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
export class TestScriptDestination extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['index']) {
            this.index = new fhir.FhirInteger({ value: source.index });
        }
        else {
            this.index = null;
        }
        if (source['profile']) {
            this.profile = new fhir.Coding(source.profile);
        }
        else {
            this.profile = null;
        }
    }
    /**
     * Extensible-bound Value Set for profile (TestScript.destination.profile)
     */
    static get profileExtensibleCodings() {
        return TestscriptProfileDestinationTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['index']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property index:fhir.FhirInteger fhir: TestScript.destination.index:integer' });
        }
        if (this["index"]) {
            issues.push(...this.index.doModelValidation());
        }
        if (!this['profile']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property profile:fhir.Coding fhir: TestScript.destination.profile:Coding' });
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptDestination._fts_dataType = 'TestScriptDestination';
/**
 * A link to the FHIR specification that this test is covering.
 */
export class TestScriptMetadataLink extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url:fhir.FhirUri fhir: TestScript.metadata.link.url:uri' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataLink._fts_dataType = 'TestScriptMetadataLink';
/**
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
export class TestScriptMetadataCapability extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadataCapability - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['required']) {
            this.required = new fhir.FhirBoolean({ value: source.required });
        }
        else {
            this.required = null;
        }
        if (source['validated']) {
            this.validated = new fhir.FhirBoolean({ value: source.validated });
        }
        else {
            this.validated = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['origin']) {
            this.origin = source.origin.map((x) => new fhir.FhirInteger({ value: x }));
        }
        else {
            this.origin = [];
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.link = [];
        }
        if (source['capabilities']) {
            this.capabilities = new fhir.FhirCanonical({ value: source.capabilities });
        }
        else {
            this.capabilities = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['required']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property required:fhir.FhirBoolean fhir: TestScript.metadata.capability.required:boolean' });
        }
        if (this["required"]) {
            issues.push(...this.required.doModelValidation());
        }
        if (!this['validated']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property validated:fhir.FhirBoolean fhir: TestScript.metadata.capability.validated:boolean' });
        }
        if (this["validated"]) {
            issues.push(...this.validated.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["origin"]) {
            this.origin.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["destination"]) {
            issues.push(...this.destination.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['capabilities']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property capabilities:fhir.FhirCanonical fhir: TestScript.metadata.capability.capabilities:canonical' });
        }
        if (this["capabilities"]) {
            issues.push(...this.capabilities.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadataCapability._fts_dataType = 'TestScriptMetadataCapability';
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
export class TestScriptMetadata extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptMetadata - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.TestScriptMetadataLink(x));
        }
        else {
            this.link = [];
        }
        if (source['capability']) {
            this.capability = source.capability.map((x) => new fhir.TestScriptMetadataCapability(x));
        }
        else {
            this.capability = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["link"]) {
            this.link.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['capability']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property capability:fhir.TestScriptMetadataCapability[] fhir: TestScript.metadata.capability:capability' });
        }
        else if (!Array.isArray(this.capability)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property capability:fhir.TestScriptMetadataCapability[] fhir: TestScript.metadata.capability:capability' });
        }
        else if (this.capability.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property capability:fhir.TestScriptMetadataCapability[] fhir: TestScript.metadata.capability:capability' });
        }
        if (this["capability"]) {
            this.capability.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptMetadata._fts_dataType = 'TestScriptMetadata';
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
export class TestScriptFixture extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptFixture - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['autocreate']) {
            this.autocreate = new fhir.FhirBoolean({ value: source.autocreate });
        }
        else {
            this.autocreate = null;
        }
        if (source['autodelete']) {
            this.autodelete = new fhir.FhirBoolean({ value: source.autodelete });
        }
        else {
            this.autodelete = null;
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['autocreate']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property autocreate:fhir.FhirBoolean fhir: TestScript.fixture.autocreate:boolean' });
        }
        if (this["autocreate"]) {
            issues.push(...this.autocreate.doModelValidation());
        }
        if (!this['autodelete']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property autodelete:fhir.FhirBoolean fhir: TestScript.fixture.autodelete:boolean' });
        }
        if (this["autodelete"]) {
            issues.push(...this.autodelete.doModelValidation());
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptFixture._fts_dataType = 'TestScriptFixture';
/**
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
export class TestScriptVariable extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptVariable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['defaultValue']) {
            this.defaultValue = new fhir.FhirString({ value: source.defaultValue });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['hint']) {
            this.hint = new fhir.FhirString({ value: source.hint });
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: TestScript.variable.name:string' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["defaultValue"]) {
            issues.push(...this.defaultValue.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation());
        }
        if (this["headerField"]) {
            issues.push(...this.headerField.doModelValidation());
        }
        if (this["hint"]) {
            issues.push(...this.hint.doModelValidation());
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation());
        }
        if (this["sourceId"]) {
            issues.push(...this.sourceId.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptVariable._fts_dataType = 'TestScriptVariable';
/**
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
 */
export class TestScriptSetupActionOperationRequestHeader extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperationRequestHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['field']) {
            this.field = new fhir.FhirString({ value: source.field });
        }
        else {
            this.field = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['field']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property field:fhir.FhirString fhir: TestScript.setup.action.operation.requestHeader.field:string' });
        }
        if (this["field"]) {
            issues.push(...this.field.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value:fhir.FhirString fhir: TestScript.setup.action.operation.requestHeader.value:string' });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperationRequestHeader._fts_dataType = 'TestScriptSetupActionOperationRequestHeader';
/**
 * The operation to perform.
 */
export class TestScriptSetupActionOperation extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['accept']) {
            this.accept = new fhir.FhirCode({ value: source.accept });
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['destination']) {
            this.destination = new fhir.FhirInteger({ value: source.destination });
        }
        if (source['encodeRequestUrl']) {
            this.encodeRequestUrl = new fhir.FhirBoolean({ value: source.encodeRequestUrl });
        }
        else {
            this.encodeRequestUrl = null;
        }
        if (source['method']) {
            this.method = new fhir.FhirCode({ value: source.method });
        }
        if (source['origin']) {
            this.origin = new fhir.FhirInteger({ value: source.origin });
        }
        if (source['params']) {
            this.params = new fhir.FhirString({ value: source.params });
        }
        if (source['requestHeader']) {
            this.requestHeader = source.requestHeader.map((x) => new fhir.TestScriptSetupActionOperationRequestHeader(x));
        }
        else {
            this.requestHeader = [];
        }
        if (source['requestId']) {
            this.requestId = new fhir.FhirId({ value: source.requestId });
        }
        if (source['responseId']) {
            this.responseId = new fhir.FhirId({ value: source.responseId });
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['targetId']) {
            this.targetId = new fhir.FhirId({ value: source.targetId });
        }
        if (source['url']) {
            this.url = new fhir.FhirString({ value: source.url });
        }
    }
    /**
     * Extensible-bound Value Set for type (TestScript.setup.action.operation.type)
     */
    static get typeExtensibleCodings() {
        return TestscriptOperationCodings;
    }
    /**
     * Required-bound Value Set for resource (TestScript.setup.action.operation.resource)
     */
    static get resourceRequiredCodes() {
        return DefinedTypesCodes;
    }
    /**
     * Required-bound Value Set for method (TestScript.setup.action.operation.method)
     */
    static get methodRequiredCodes() {
        return HttpOperationsCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this['resource'] && (!Object.values(DefinedTypesCodes).includes(this.resource))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property resource?:fhir.FhirCode fhir: TestScript.setup.action.operation.resource:code Required binding to: DefinedTypes' });
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation());
        }
        if (this["label"]) {
            issues.push(...this.label.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["accept"]) {
            issues.push(...this.accept.doModelValidation());
        }
        if (this["contentType"]) {
            issues.push(...this.contentType.doModelValidation());
        }
        if (this["destination"]) {
            issues.push(...this.destination.doModelValidation());
        }
        if (!this['encodeRequestUrl']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property encodeRequestUrl:fhir.FhirBoolean fhir: TestScript.setup.action.operation.encodeRequestUrl:boolean' });
        }
        if (this["encodeRequestUrl"]) {
            issues.push(...this.encodeRequestUrl.doModelValidation());
        }
        if (this['method'] && (!Object.values(HttpOperationsCodes).includes(this.method))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property method?:fhir.FhirCode<HttpOperationsCodeType> fhir: TestScript.setup.action.operation.method:code Required binding to: HttpOperations' });
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation());
        }
        if (this["origin"]) {
            issues.push(...this.origin.doModelValidation());
        }
        if (this["params"]) {
            issues.push(...this.params.doModelValidation());
        }
        if (this["requestHeader"]) {
            this.requestHeader.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["requestId"]) {
            issues.push(...this.requestId.doModelValidation());
        }
        if (this["responseId"]) {
            issues.push(...this.responseId.doModelValidation());
        }
        if (this["sourceId"]) {
            issues.push(...this.sourceId.doModelValidation());
        }
        if (this["targetId"]) {
            issues.push(...this.targetId.doModelValidation());
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionOperation._fts_dataType = 'TestScriptSetupActionOperation';
/**
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
export class TestScriptSetupActionAssert extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['direction']) {
            this.direction = new fhir.FhirCode({ value: source.direction });
        }
        if (source['compareToSourceId']) {
            this.compareToSourceId = new fhir.FhirString({ value: source.compareToSourceId });
        }
        if (source['compareToSourceExpression']) {
            this.compareToSourceExpression = new fhir.FhirString({ value: source.compareToSourceExpression });
        }
        if (source['compareToSourcePath']) {
            this.compareToSourcePath = new fhir.FhirString({ value: source.compareToSourcePath });
        }
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        if (source['headerField']) {
            this.headerField = new fhir.FhirString({ value: source.headerField });
        }
        if (source['minimumId']) {
            this.minimumId = new fhir.FhirString({ value: source.minimumId });
        }
        if (source['navigationLinks']) {
            this.navigationLinks = new fhir.FhirBoolean({ value: source.navigationLinks });
        }
        if (source['operator']) {
            this.operator = new fhir.FhirCode({ value: source.operator });
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['requestMethod']) {
            this.requestMethod = new fhir.FhirCode({ value: source.requestMethod });
        }
        if (source['requestURL']) {
            this.requestURL = new fhir.FhirString({ value: source.requestURL });
        }
        if (source['resource']) {
            this.resource = new fhir.FhirCode({ value: source.resource });
        }
        if (source['response']) {
            this.response = new fhir.FhirCode({ value: source.response });
        }
        if (source['responseCode']) {
            this.responseCode = new fhir.FhirString({ value: source.responseCode });
        }
        if (source['sourceId']) {
            this.sourceId = new fhir.FhirId({ value: source.sourceId });
        }
        if (source['validateProfileId']) {
            this.validateProfileId = new fhir.FhirId({ value: source.validateProfileId });
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['warningOnly']) {
            this.warningOnly = new fhir.FhirBoolean({ value: source.warningOnly });
        }
        else {
            this.warningOnly = null;
        }
    }
    /**
     * Required-bound Value Set for direction (TestScript.setup.action.assert.direction)
     */
    static get directionRequiredCodes() {
        return AssertDirectionCodes;
    }
    /**
     * Required-bound Value Set for operator (TestScript.setup.action.assert.operator)
     */
    static get operatorRequiredCodes() {
        return AssertOperatorCodes;
    }
    /**
     * Required-bound Value Set for requestMethod (TestScript.setup.action.assert.requestMethod)
     */
    static get requestMethodRequiredCodes() {
        return HttpOperationsCodes;
    }
    /**
     * Required-bound Value Set for resource (TestScript.setup.action.assert.resource)
     */
    static get resourceRequiredCodes() {
        return DefinedTypesCodes;
    }
    /**
     * Required-bound Value Set for response (TestScript.setup.action.assert.response)
     */
    static get responseRequiredCodes() {
        return AssertResponseCodeTypesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["label"]) {
            issues.push(...this.label.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this['direction'] && (!Object.values(AssertDirectionCodes).includes(this.direction))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property direction?:fhir.FhirCode<AssertDirectionCodeType> fhir: TestScript.setup.action.assert.direction:code Required binding to: AssertDirection' });
        }
        if (this["direction"]) {
            issues.push(...this.direction.doModelValidation());
        }
        if (this["compareToSourceId"]) {
            issues.push(...this.compareToSourceId.doModelValidation());
        }
        if (this["compareToSourceExpression"]) {
            issues.push(...this.compareToSourceExpression.doModelValidation());
        }
        if (this["compareToSourcePath"]) {
            issues.push(...this.compareToSourcePath.doModelValidation());
        }
        if (this["contentType"]) {
            issues.push(...this.contentType.doModelValidation());
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation());
        }
        if (this["headerField"]) {
            issues.push(...this.headerField.doModelValidation());
        }
        if (this["minimumId"]) {
            issues.push(...this.minimumId.doModelValidation());
        }
        if (this["navigationLinks"]) {
            issues.push(...this.navigationLinks.doModelValidation());
        }
        if (this['operator'] && (!Object.values(AssertOperatorCodes).includes(this.operator))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property operator?:fhir.FhirCode<AssertOperatorCodeType> fhir: TestScript.setup.action.assert.operator:code Required binding to: AssertOperator' });
        }
        if (this["operator"]) {
            issues.push(...this.operator.doModelValidation());
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation());
        }
        if (this['requestMethod'] && (!Object.values(HttpOperationsCodes).includes(this.requestMethod))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property requestMethod?:fhir.FhirCode<HttpOperationsCodeType> fhir: TestScript.setup.action.assert.requestMethod:code Required binding to: HttpOperations' });
        }
        if (this["requestMethod"]) {
            issues.push(...this.requestMethod.doModelValidation());
        }
        if (this["requestURL"]) {
            issues.push(...this.requestURL.doModelValidation());
        }
        if (this['resource'] && (!Object.values(DefinedTypesCodes).includes(this.resource))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property resource?:fhir.FhirCode fhir: TestScript.setup.action.assert.resource:code Required binding to: DefinedTypes' });
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation());
        }
        if (this['response'] && (!Object.values(AssertResponseCodeTypesCodes).includes(this.response))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property response?:fhir.FhirCode<AssertResponseCodeTypesCodeType> fhir: TestScript.setup.action.assert.response:code Required binding to: AssertResponseCodeTypes' });
        }
        if (this["response"]) {
            issues.push(...this.response.doModelValidation());
        }
        if (this["responseCode"]) {
            issues.push(...this.responseCode.doModelValidation());
        }
        if (this["sourceId"]) {
            issues.push(...this.sourceId.doModelValidation());
        }
        if (this["validateProfileId"]) {
            issues.push(...this.validateProfileId.doModelValidation());
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (!this['warningOnly']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property warningOnly:fhir.FhirBoolean fhir: TestScript.setup.action.assert.warningOnly:boolean' });
        }
        if (this["warningOnly"]) {
            issues.push(...this.warningOnly.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupActionAssert._fts_dataType = 'TestScriptSetupActionAssert';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptSetupAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation());
        }
        if (this["assert"]) {
            issues.push(...this.assert.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetupAction._fts_dataType = 'TestScriptSetupAction';
/**
 * A series of required setup operations before tests are executed.
 */
export class TestScriptSetup extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptSetup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptSetupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestScriptSetupAction[] fhir: TestScript.setup.action:action' });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action:fhir.TestScriptSetupAction[] fhir: TestScript.setup.action:action' });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestScriptSetupAction[] fhir: TestScript.setup.action:action' });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptSetup._fts_dataType = 'TestScriptSetup';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptTestAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTestAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            this.assert = new fhir.TestScriptSetupActionAssert(source.assert);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation());
        }
        if (this["assert"]) {
            issues.push(...this.assert.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTestAction._fts_dataType = 'TestScriptTestAction';
/**
 * A test in this script.
 */
export class TestScriptTest extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTestAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestScriptTestAction[] fhir: TestScript.test.action:action' });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action:fhir.TestScriptTestAction[] fhir: TestScript.test.action:action' });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestScriptTestAction[] fhir: TestScript.test.action:action' });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTest._fts_dataType = 'TestScriptTest';
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export class TestScriptTeardownAction extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardownAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['operation']) {
            this.operation = new fhir.TestScriptSetupActionOperation(source.operation);
        }
        else {
            this.operation = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['operation']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property operation:fhir.TestScriptSetupActionOperation fhir: TestScript.teardown.action.operation:TestScript.setup.action.operation' });
        }
        if (this["operation"]) {
            issues.push(...this.operation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardownAction._fts_dataType = 'TestScriptTeardownAction';
/**
 * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
 */
export class TestScriptTeardown extends fhir.BackboneElement {
    /**
     * Default constructor for TestScriptTeardown - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.TestScriptTeardownAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestScriptTeardownAction[] fhir: TestScript.teardown.action:action' });
        }
        else if (!Array.isArray(this.action)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property action:fhir.TestScriptTeardownAction[] fhir: TestScript.teardown.action:action' });
        }
        else if (this.action.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.TestScriptTeardownAction[] fhir: TestScript.teardown.action:action' });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScriptTeardown._fts_dataType = 'TestScriptTeardown';
/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
export class TestScript extends fhir.DomainResource {
    /**
     * Default constructor for TestScript - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'TestScript';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['origin']) {
            this.origin = source.origin.map((x) => new fhir.TestScriptOrigin(x));
        }
        else {
            this.origin = [];
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.TestScriptDestination(x));
        }
        else {
            this.destination = [];
        }
        if (source['metadata']) {
            this.metadata = new fhir.TestScriptMetadata(source.metadata);
        }
        if (source['fixture']) {
            this.fixture = source.fixture.map((x) => new fhir.TestScriptFixture(x));
        }
        else {
            this.fixture = [];
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.Reference(x));
        }
        else {
            this.profile = [];
        }
        if (source['variable']) {
            this.variable = source.variable.map((x) => new fhir.TestScriptVariable(x));
        }
        else {
            this.variable = [];
        }
        if (source['setup']) {
            this.setup = new fhir.TestScriptSetup(source.setup);
        }
        if (source['test']) {
            this.test = source.test.map((x) => new fhir.TestScriptTest(x));
        }
        else {
            this.test = [];
        }
        if (source['teardown']) {
            this.teardown = new fhir.TestScriptTeardown(source.teardown);
        }
    }
    /**
     * Required-bound Value Set for status (TestScript.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"TestScript" fhir: TestScript.resourceType:"TestScript"' });
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url:fhir.FhirUri fhir: TestScript.url:uri' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: TestScript.name:string' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: TestScript.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: TestScript.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["origin"]) {
            this.origin.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["destination"]) {
            this.destination.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["metadata"]) {
            issues.push(...this.metadata.doModelValidation());
        }
        if (this["fixture"]) {
            this.fixture.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["profile"]) {
            this.profile.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["variable"]) {
            this.variable.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["setup"]) {
            issues.push(...this.setup.doModelValidation());
        }
        if (this["test"]) {
            this.test.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["teardown"]) {
            issues.push(...this.teardown.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TestScript._fts_dataType = 'TestScript';
//# sourceMappingURL=data:application/json;base64,