/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { TestscriptProfileOriginTypesCodings } from '../fhirValueSets/TestscriptProfileOriginTypesCodings.js';
import { TestscriptProfileDestinationTypesCodings } from '../fhirValueSets/TestscriptProfileDestinationTypesCodings.js';
import { TestscriptOperationCodesCodings } from '../fhirValueSets/TestscriptOperationCodesCodings.js';
import { DefinedTypesCodings } from '../fhirValueSets/DefinedTypesCodings.js';
import { HttpOperationsCodings } from '../fhirValueSets/HttpOperationsCodings.js';
import { AssertDirectionCodesCodings } from '../fhirValueSets/AssertDirectionCodesCodings.js';
import { AssertOperatorCodesCodings } from '../fhirValueSets/AssertOperatorCodesCodings.js';
import { AssertResponseCodeTypesCodings } from '../fhirValueSets/AssertResponseCodeTypesCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirInteger } from './FhirInteger.js';
import { Coding } from './Coding.js';
import { FhirUri } from './FhirUri.js';
import { FhirString } from './FhirString.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirCanonical } from './FhirCanonical.js';
import { Reference } from './Reference.js';
import { FhirId } from './FhirId.js';
import { FhirCode } from './FhirCode.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
var TestScriptOrigin = /** @class */ (function (_super) {
    __extends(TestScriptOrigin, _super);
    /**
     * Default constructor for TestScriptOrigin - initializes any required elements to null if a value is not provided.
     */
    function TestScriptOrigin(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['index']) {
            _this.index = new FhirInteger({ value: source.index });
        }
        else {
            _this.index = null;
        }
        if (source['profile']) {
            _this.profile = new Coding(source.profile);
        }
        else {
            _this.profile = null;
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for profile (TestScript.origin.profile)
     */
    TestScriptOrigin.profileExtensibleCoding = function () {
        return TestscriptProfileOriginTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptOrigin.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['index']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property index:fhir.FhirInteger fhir: TestScript.origin.index:integer', }));
        }
        if (this["index"]) {
            (_a = outcome.issue).push.apply(_a, this.index.doModelValidation().issue);
        }
        if (!this['profile']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property profile:fhir.Coding fhir: TestScript.origin.profile:Coding', }));
        }
        if (this["profile"]) {
            (_b = outcome.issue).push.apply(_b, this.profile.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptOrigin._fts_dataType = 'TestScriptOrigin';
    return TestScriptOrigin;
}(BackboneElement));
/**
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
var TestScriptDestination = /** @class */ (function (_super) {
    __extends(TestScriptDestination, _super);
    /**
     * Default constructor for TestScriptDestination - initializes any required elements to null if a value is not provided.
     */
    function TestScriptDestination(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['index']) {
            _this.index = new FhirInteger({ value: source.index });
        }
        else {
            _this.index = null;
        }
        if (source['profile']) {
            _this.profile = new Coding(source.profile);
        }
        else {
            _this.profile = null;
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for profile (TestScript.destination.profile)
     */
    TestScriptDestination.profileExtensibleCoding = function () {
        return TestscriptProfileDestinationTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptDestination.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['index']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property index:fhir.FhirInteger fhir: TestScript.destination.index:integer', }));
        }
        if (this["index"]) {
            (_a = outcome.issue).push.apply(_a, this.index.doModelValidation().issue);
        }
        if (!this['profile']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property profile:fhir.Coding fhir: TestScript.destination.profile:Coding', }));
        }
        if (this["profile"]) {
            (_b = outcome.issue).push.apply(_b, this.profile.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptDestination._fts_dataType = 'TestScriptDestination';
    return TestScriptDestination;
}(BackboneElement));
/**
 * A link to the FHIR specification that this test is covering.
 */
var TestScriptMetadataLink = /** @class */ (function (_super) {
    __extends(TestScriptMetadataLink, _super);
    /**
     * Default constructor for TestScriptMetadataLink - initializes any required elements to null if a value is not provided.
     */
    function TestScriptMetadataLink(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptMetadataLink.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: TestScript.metadata.link.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptMetadataLink._fts_dataType = 'TestScriptMetadataLink';
    return TestScriptMetadataLink;
}(BackboneElement));
/**
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
var TestScriptMetadataCapability = /** @class */ (function (_super) {
    __extends(TestScriptMetadataCapability, _super);
    /**
     * Default constructor for TestScriptMetadataCapability - initializes any required elements to null if a value is not provided.
     */
    function TestScriptMetadataCapability(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['required']) {
            _this.required = new FhirBoolean({ value: source.required });
        }
        else {
            _this.required = null;
        }
        if (source['validated']) {
            _this.validated = new FhirBoolean({ value: source.validated });
        }
        else {
            _this.validated = null;
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['origin']) {
            _this.origin = source.origin.map(function (x) { return new FhirInteger({ value: x }); });
        }
        else {
            _this.origin = [];
        }
        if (source['destination']) {
            _this.destination = new FhirInteger({ value: source.destination });
        }
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.link = [];
        }
        if (source['capabilities']) {
            _this.capabilities = new FhirCanonical({ value: source.capabilities });
        }
        else {
            _this.capabilities = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptMetadataCapability.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['required']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property required:fhir.FhirBoolean fhir: TestScript.metadata.capability.required:boolean', }));
        }
        if (this["required"]) {
            (_a = outcome.issue).push.apply(_a, this.required.doModelValidation().issue);
        }
        if (!this['validated']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property validated:fhir.FhirBoolean fhir: TestScript.metadata.capability.validated:boolean', }));
        }
        if (this["validated"]) {
            (_b = outcome.issue).push.apply(_b, this.validated.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (this["origin"]) {
            this.origin.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["destination"]) {
            (_d = outcome.issue).push.apply(_d, this.destination.doModelValidation().issue);
        }
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['capabilities']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property capabilities:fhir.FhirCanonical fhir: TestScript.metadata.capability.capabilities:canonical', }));
        }
        if (this["capabilities"]) {
            (_e = outcome.issue).push.apply(_e, this.capabilities.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptMetadataCapability._fts_dataType = 'TestScriptMetadataCapability';
    return TestScriptMetadataCapability;
}(BackboneElement));
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
var TestScriptMetadata = /** @class */ (function (_super) {
    __extends(TestScriptMetadata, _super);
    /**
     * Default constructor for TestScriptMetadata - initializes any required elements to null if a value is not provided.
     */
    function TestScriptMetadata(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new TestScriptMetadataLink(x); });
        }
        else {
            _this.link = [];
        }
        if (source['capability']) {
            _this.capability = source.capability.map(function (x) { return new TestScriptMetadataCapability(x); });
        }
        else {
            _this.capability = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptMetadata.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['capability']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property capability:fhir.TestScriptMetadataCapability[] fhir: TestScript.metadata.capability:capability', }));
        }
        else if (!Array.isArray(this.capability)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property capability:fhir.TestScriptMetadataCapability[] fhir: TestScript.metadata.capability:capability', }));
        }
        else if (this.capability.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property capability:fhir.TestScriptMetadataCapability[] fhir: TestScript.metadata.capability:capability', }));
        }
        if (this["capability"]) {
            this.capability.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptMetadata._fts_dataType = 'TestScriptMetadata';
    return TestScriptMetadata;
}(BackboneElement));
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
var TestScriptFixture = /** @class */ (function (_super) {
    __extends(TestScriptFixture, _super);
    /**
     * Default constructor for TestScriptFixture - initializes any required elements to null if a value is not provided.
     */
    function TestScriptFixture(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['autocreate']) {
            _this.autocreate = new FhirBoolean({ value: source.autocreate });
        }
        else {
            _this.autocreate = null;
        }
        if (source['autodelete']) {
            _this.autodelete = new FhirBoolean({ value: source.autodelete });
        }
        else {
            _this.autodelete = null;
        }
        if (source['resource']) {
            _this.resource = new Reference(source.resource);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptFixture.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['autocreate']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property autocreate:fhir.FhirBoolean fhir: TestScript.fixture.autocreate:boolean', }));
        }
        if (this["autocreate"]) {
            (_a = outcome.issue).push.apply(_a, this.autocreate.doModelValidation().issue);
        }
        if (!this['autodelete']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property autodelete:fhir.FhirBoolean fhir: TestScript.fixture.autodelete:boolean', }));
        }
        if (this["autodelete"]) {
            (_b = outcome.issue).push.apply(_b, this.autodelete.doModelValidation().issue);
        }
        if (this["resource"]) {
            (_c = outcome.issue).push.apply(_c, this.resource.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptFixture._fts_dataType = 'TestScriptFixture';
    return TestScriptFixture;
}(BackboneElement));
/**
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
var TestScriptVariable = /** @class */ (function (_super) {
    __extends(TestScriptVariable, _super);
    /**
     * Default constructor for TestScriptVariable - initializes any required elements to null if a value is not provided.
     */
    function TestScriptVariable(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['defaultValue']) {
            _this.defaultValue = new FhirString({ value: source.defaultValue });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['expression']) {
            _this.expression = new FhirString({ value: source.expression });
        }
        if (source['headerField']) {
            _this.headerField = new FhirString({ value: source.headerField });
        }
        if (source['hint']) {
            _this.hint = new FhirString({ value: source.hint });
        }
        if (source['path']) {
            _this.path = new FhirString({ value: source.path });
        }
        if (source['sourceId']) {
            _this.sourceId = new FhirId({ value: source.sourceId });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptVariable.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: TestScript.variable.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["defaultValue"]) {
            (_b = outcome.issue).push.apply(_b, this.defaultValue.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (this["expression"]) {
            (_d = outcome.issue).push.apply(_d, this.expression.doModelValidation().issue);
        }
        if (this["headerField"]) {
            (_e = outcome.issue).push.apply(_e, this.headerField.doModelValidation().issue);
        }
        if (this["hint"]) {
            (_f = outcome.issue).push.apply(_f, this.hint.doModelValidation().issue);
        }
        if (this["path"]) {
            (_g = outcome.issue).push.apply(_g, this.path.doModelValidation().issue);
        }
        if (this["sourceId"]) {
            (_h = outcome.issue).push.apply(_h, this.sourceId.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptVariable._fts_dataType = 'TestScriptVariable';
    return TestScriptVariable;
}(BackboneElement));
/**
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
 */
var TestScriptSetupActionOperationRequestHeader = /** @class */ (function (_super) {
    __extends(TestScriptSetupActionOperationRequestHeader, _super);
    /**
     * Default constructor for TestScriptSetupActionOperationRequestHeader - initializes any required elements to null if a value is not provided.
     */
    function TestScriptSetupActionOperationRequestHeader(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['field']) {
            _this.field = new FhirString({ value: source.field });
        }
        else {
            _this.field = null;
        }
        if (source['value']) {
            _this.value = new FhirString({ value: source.value });
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptSetupActionOperationRequestHeader.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['field']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property field:fhir.FhirString fhir: TestScript.setup.action.operation.requestHeader.field:string', }));
        }
        if (this["field"]) {
            (_a = outcome.issue).push.apply(_a, this.field.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.FhirString fhir: TestScript.setup.action.operation.requestHeader.value:string', }));
        }
        if (this["value"]) {
            (_b = outcome.issue).push.apply(_b, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptSetupActionOperationRequestHeader._fts_dataType = 'TestScriptSetupActionOperationRequestHeader';
    return TestScriptSetupActionOperationRequestHeader;
}(BackboneElement));
/**
 * The operation to perform.
 */
var TestScriptSetupActionOperation = /** @class */ (function (_super) {
    __extends(TestScriptSetupActionOperation, _super);
    /**
     * Default constructor for TestScriptSetupActionOperation - initializes any required elements to null if a value is not provided.
     */
    function TestScriptSetupActionOperation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new Coding(source.type);
        }
        if (source['resource']) {
            _this.resource = new FhirCode({ value: source.resource });
        }
        if (source['label']) {
            _this.label = new FhirString({ value: source.label });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['accept']) {
            _this.accept = new FhirCode({ value: source.accept });
        }
        if (source['contentType']) {
            _this.contentType = new FhirCode({ value: source.contentType });
        }
        if (source['destination']) {
            _this.destination = new FhirInteger({ value: source.destination });
        }
        if (source['encodeRequestUrl']) {
            _this.encodeRequestUrl = new FhirBoolean({ value: source.encodeRequestUrl });
        }
        else {
            _this.encodeRequestUrl = null;
        }
        if (source['method']) {
            _this.method = source.method;
        }
        if (source['origin']) {
            _this.origin = new FhirInteger({ value: source.origin });
        }
        if (source['params']) {
            _this.params = new FhirString({ value: source.params });
        }
        if (source['requestHeader']) {
            _this.requestHeader = source.requestHeader.map(function (x) { return new TestScriptSetupActionOperationRequestHeader(x); });
        }
        else {
            _this.requestHeader = [];
        }
        if (source['requestId']) {
            _this.requestId = new FhirId({ value: source.requestId });
        }
        if (source['responseId']) {
            _this.responseId = new FhirId({ value: source.responseId });
        }
        if (source['sourceId']) {
            _this.sourceId = new FhirId({ value: source.sourceId });
        }
        if (source['targetId']) {
            _this.targetId = new FhirId({ value: source.targetId });
        }
        if (source['url']) {
            _this.url = new FhirString({ value: source.url });
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (TestScript.setup.action.operation.type)
     */
    TestScriptSetupActionOperation.typeExtensibleCoding = function () {
        return TestscriptOperationCodesCodings;
    };
    /**
     * Required-bound Value Set for resource (TestScript.setup.action.operation.resource)
     */
    TestScriptSetupActionOperation.resourceRequiredCoding = function () {
        return DefinedTypesCodings;
    };
    /**
     * Required-bound Value Set for method (TestScript.setup.action.operation.method)
     */
    TestScriptSetupActionOperation.methodRequiredCoding = function () {
        return HttpOperationsCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptSetupActionOperation.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["resource"]) {
            (_b = outcome.issue).push.apply(_b, this.resource.doModelValidation().issue);
        }
        if (this["label"]) {
            (_c = outcome.issue).push.apply(_c, this.label.doModelValidation().issue);
        }
        if (this["description"]) {
            (_d = outcome.issue).push.apply(_d, this.description.doModelValidation().issue);
        }
        if (this["accept"]) {
            (_e = outcome.issue).push.apply(_e, this.accept.doModelValidation().issue);
        }
        if (this["contentType"]) {
            (_f = outcome.issue).push.apply(_f, this.contentType.doModelValidation().issue);
        }
        if (this["destination"]) {
            (_g = outcome.issue).push.apply(_g, this.destination.doModelValidation().issue);
        }
        if (!this['encodeRequestUrl']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property encodeRequestUrl:fhir.FhirBoolean fhir: TestScript.setup.action.operation.encodeRequestUrl:boolean', }));
        }
        if (this["encodeRequestUrl"]) {
            (_h = outcome.issue).push.apply(_h, this.encodeRequestUrl.doModelValidation().issue);
        }
        if (this["origin"]) {
            (_j = outcome.issue).push.apply(_j, this.origin.doModelValidation().issue);
        }
        if (this["params"]) {
            (_k = outcome.issue).push.apply(_k, this.params.doModelValidation().issue);
        }
        if (this["requestHeader"]) {
            this.requestHeader.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["requestId"]) {
            (_l = outcome.issue).push.apply(_l, this.requestId.doModelValidation().issue);
        }
        if (this["responseId"]) {
            (_m = outcome.issue).push.apply(_m, this.responseId.doModelValidation().issue);
        }
        if (this["sourceId"]) {
            (_o = outcome.issue).push.apply(_o, this.sourceId.doModelValidation().issue);
        }
        if (this["targetId"]) {
            (_p = outcome.issue).push.apply(_p, this.targetId.doModelValidation().issue);
        }
        if (this["url"]) {
            (_q = outcome.issue).push.apply(_q, this.url.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptSetupActionOperation._fts_dataType = 'TestScriptSetupActionOperation';
    return TestScriptSetupActionOperation;
}(BackboneElement));
/**
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
var TestScriptSetupActionAssert = /** @class */ (function (_super) {
    __extends(TestScriptSetupActionAssert, _super);
    /**
     * Default constructor for TestScriptSetupActionAssert - initializes any required elements to null if a value is not provided.
     */
    function TestScriptSetupActionAssert(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['label']) {
            _this.label = new FhirString({ value: source.label });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['direction']) {
            _this.direction = source.direction;
        }
        if (source['compareToSourceId']) {
            _this.compareToSourceId = new FhirString({ value: source.compareToSourceId });
        }
        if (source['compareToSourceExpression']) {
            _this.compareToSourceExpression = new FhirString({ value: source.compareToSourceExpression });
        }
        if (source['compareToSourcePath']) {
            _this.compareToSourcePath = new FhirString({ value: source.compareToSourcePath });
        }
        if (source['contentType']) {
            _this.contentType = new FhirCode({ value: source.contentType });
        }
        if (source['expression']) {
            _this.expression = new FhirString({ value: source.expression });
        }
        if (source['headerField']) {
            _this.headerField = new FhirString({ value: source.headerField });
        }
        if (source['minimumId']) {
            _this.minimumId = new FhirString({ value: source.minimumId });
        }
        if (source['navigationLinks']) {
            _this.navigationLinks = new FhirBoolean({ value: source.navigationLinks });
        }
        if (source['operator']) {
            _this.operator = source.operator;
        }
        if (source['path']) {
            _this.path = new FhirString({ value: source.path });
        }
        if (source['requestMethod']) {
            _this.requestMethod = source.requestMethod;
        }
        if (source['requestURL']) {
            _this.requestURL = new FhirString({ value: source.requestURL });
        }
        if (source['resource']) {
            _this.resource = new FhirCode({ value: source.resource });
        }
        if (source['response']) {
            _this.response = source.response;
        }
        if (source['responseCode']) {
            _this.responseCode = new FhirString({ value: source.responseCode });
        }
        if (source['sourceId']) {
            _this.sourceId = new FhirId({ value: source.sourceId });
        }
        if (source['validateProfileId']) {
            _this.validateProfileId = new FhirId({ value: source.validateProfileId });
        }
        if (source['value']) {
            _this.value = new FhirString({ value: source.value });
        }
        if (source['warningOnly']) {
            _this.warningOnly = new FhirBoolean({ value: source.warningOnly });
        }
        else {
            _this.warningOnly = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for direction (TestScript.setup.action.assert.direction)
     */
    TestScriptSetupActionAssert.directionRequiredCoding = function () {
        return AssertDirectionCodesCodings;
    };
    /**
     * Required-bound Value Set for operator (TestScript.setup.action.assert.operator)
     */
    TestScriptSetupActionAssert.operatorRequiredCoding = function () {
        return AssertOperatorCodesCodings;
    };
    /**
     * Required-bound Value Set for requestMethod (TestScript.setup.action.assert.requestMethod)
     */
    TestScriptSetupActionAssert.requestMethodRequiredCoding = function () {
        return HttpOperationsCodings;
    };
    /**
     * Required-bound Value Set for resource (TestScript.setup.action.assert.resource)
     */
    TestScriptSetupActionAssert.resourceRequiredCoding = function () {
        return DefinedTypesCodings;
    };
    /**
     * Required-bound Value Set for response (TestScript.setup.action.assert.response)
     */
    TestScriptSetupActionAssert.responseRequiredCoding = function () {
        return AssertResponseCodeTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptSetupActionAssert.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["label"]) {
            (_a = outcome.issue).push.apply(_a, this.label.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (this["compareToSourceId"]) {
            (_c = outcome.issue).push.apply(_c, this.compareToSourceId.doModelValidation().issue);
        }
        if (this["compareToSourceExpression"]) {
            (_d = outcome.issue).push.apply(_d, this.compareToSourceExpression.doModelValidation().issue);
        }
        if (this["compareToSourcePath"]) {
            (_e = outcome.issue).push.apply(_e, this.compareToSourcePath.doModelValidation().issue);
        }
        if (this["contentType"]) {
            (_f = outcome.issue).push.apply(_f, this.contentType.doModelValidation().issue);
        }
        if (this["expression"]) {
            (_g = outcome.issue).push.apply(_g, this.expression.doModelValidation().issue);
        }
        if (this["headerField"]) {
            (_h = outcome.issue).push.apply(_h, this.headerField.doModelValidation().issue);
        }
        if (this["minimumId"]) {
            (_j = outcome.issue).push.apply(_j, this.minimumId.doModelValidation().issue);
        }
        if (this["navigationLinks"]) {
            (_k = outcome.issue).push.apply(_k, this.navigationLinks.doModelValidation().issue);
        }
        if (this["path"]) {
            (_l = outcome.issue).push.apply(_l, this.path.doModelValidation().issue);
        }
        if (this["requestURL"]) {
            (_m = outcome.issue).push.apply(_m, this.requestURL.doModelValidation().issue);
        }
        if (this["resource"]) {
            (_o = outcome.issue).push.apply(_o, this.resource.doModelValidation().issue);
        }
        if (this["responseCode"]) {
            (_p = outcome.issue).push.apply(_p, this.responseCode.doModelValidation().issue);
        }
        if (this["sourceId"]) {
            (_q = outcome.issue).push.apply(_q, this.sourceId.doModelValidation().issue);
        }
        if (this["validateProfileId"]) {
            (_r = outcome.issue).push.apply(_r, this.validateProfileId.doModelValidation().issue);
        }
        if (this["value"]) {
            (_s = outcome.issue).push.apply(_s, this.value.doModelValidation().issue);
        }
        if (!this['warningOnly']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property warningOnly:fhir.FhirBoolean fhir: TestScript.setup.action.assert.warningOnly:boolean', }));
        }
        if (this["warningOnly"]) {
            (_t = outcome.issue).push.apply(_t, this.warningOnly.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptSetupActionAssert._fts_dataType = 'TestScriptSetupActionAssert';
    return TestScriptSetupActionAssert;
}(BackboneElement));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestScriptSetupAction = /** @class */ (function (_super) {
    __extends(TestScriptSetupAction, _super);
    /**
     * Default constructor for TestScriptSetupAction - initializes any required elements to null if a value is not provided.
     */
    function TestScriptSetupAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['operation']) {
            _this.operation = new TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            _this.assert = new TestScriptSetupActionAssert(source.assert);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptSetupAction.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["operation"]) {
            (_a = outcome.issue).push.apply(_a, this.operation.doModelValidation().issue);
        }
        if (this["assert"]) {
            (_b = outcome.issue).push.apply(_b, this.assert.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptSetupAction._fts_dataType = 'TestScriptSetupAction';
    return TestScriptSetupAction;
}(BackboneElement));
/**
 * A series of required setup operations before tests are executed.
 */
var TestScriptSetup = /** @class */ (function (_super) {
    __extends(TestScriptSetup, _super);
    /**
     * Default constructor for TestScriptSetup - initializes any required elements to null if a value is not provided.
     */
    function TestScriptSetup(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new TestScriptSetupAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptSetup.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['action']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestScriptSetupAction[] fhir: TestScript.setup.action:action', }));
        }
        else if (!Array.isArray(this.action)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property action:fhir.TestScriptSetupAction[] fhir: TestScript.setup.action:action', }));
        }
        else if (this.action.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestScriptSetupAction[] fhir: TestScript.setup.action:action', }));
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptSetup._fts_dataType = 'TestScriptSetup';
    return TestScriptSetup;
}(BackboneElement));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestScriptTestAction = /** @class */ (function (_super) {
    __extends(TestScriptTestAction, _super);
    /**
     * Default constructor for TestScriptTestAction - initializes any required elements to null if a value is not provided.
     */
    function TestScriptTestAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['operation']) {
            _this.operation = new TestScriptSetupActionOperation(source.operation);
        }
        if (source['assert']) {
            _this.assert = new TestScriptSetupActionAssert(source.assert);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptTestAction.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["operation"]) {
            (_a = outcome.issue).push.apply(_a, this.operation.doModelValidation().issue);
        }
        if (this["assert"]) {
            (_b = outcome.issue).push.apply(_b, this.assert.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptTestAction._fts_dataType = 'TestScriptTestAction';
    return TestScriptTestAction;
}(BackboneElement));
/**
 * A test in this script.
 */
var TestScriptTest = /** @class */ (function (_super) {
    __extends(TestScriptTest, _super);
    /**
     * Default constructor for TestScriptTest - initializes any required elements to null if a value is not provided.
     */
    function TestScriptTest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new TestScriptTestAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptTest.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (!this['action']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestScriptTestAction[] fhir: TestScript.test.action:action', }));
        }
        else if (!Array.isArray(this.action)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property action:fhir.TestScriptTestAction[] fhir: TestScript.test.action:action', }));
        }
        else if (this.action.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestScriptTestAction[] fhir: TestScript.test.action:action', }));
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptTest._fts_dataType = 'TestScriptTest';
    return TestScriptTest;
}(BackboneElement));
/**
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
var TestScriptTeardownAction = /** @class */ (function (_super) {
    __extends(TestScriptTeardownAction, _super);
    /**
     * Default constructor for TestScriptTeardownAction - initializes any required elements to null if a value is not provided.
     */
    function TestScriptTeardownAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['operation']) {
            _this.operation = new TestScriptSetupActionOperation(source.operation);
        }
        else {
            _this.operation = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptTeardownAction.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['operation']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property operation:fhir.TestScriptSetupActionOperation fhir: TestScript.teardown.action.operation:TestScript.setup.action.operation', }));
        }
        if (this["operation"]) {
            (_a = outcome.issue).push.apply(_a, this.operation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptTeardownAction._fts_dataType = 'TestScriptTeardownAction';
    return TestScriptTeardownAction;
}(BackboneElement));
/**
 * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
 */
var TestScriptTeardown = /** @class */ (function (_super) {
    __extends(TestScriptTeardown, _super);
    /**
     * Default constructor for TestScriptTeardown - initializes any required elements to null if a value is not provided.
     */
    function TestScriptTeardown(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new TestScriptTeardownAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScriptTeardown.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['action']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestScriptTeardownAction[] fhir: TestScript.teardown.action:action', }));
        }
        else if (!Array.isArray(this.action)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property action:fhir.TestScriptTeardownAction[] fhir: TestScript.teardown.action:action', }));
        }
        else if (this.action.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property action:fhir.TestScriptTeardownAction[] fhir: TestScript.teardown.action:action', }));
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScriptTeardown._fts_dataType = 'TestScriptTeardown';
    return TestScriptTeardown;
}(BackboneElement));
/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
var TestScript = /** @class */ (function (_super) {
    __extends(TestScript, _super);
    /**
     * Default constructor for TestScript - initializes any required elements to null if a value is not provided.
     */
    function TestScript(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'TestScript';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['origin']) {
            _this.origin = source.origin.map(function (x) { return new TestScriptOrigin(x); });
        }
        else {
            _this.origin = [];
        }
        if (source['destination']) {
            _this.destination = source.destination.map(function (x) { return new TestScriptDestination(x); });
        }
        else {
            _this.destination = [];
        }
        if (source['metadata']) {
            _this.metadata = new TestScriptMetadata(source.metadata);
        }
        if (source['fixture']) {
            _this.fixture = source.fixture.map(function (x) { return new TestScriptFixture(x); });
        }
        else {
            _this.fixture = [];
        }
        if (source['profile']) {
            _this.profile = source.profile.map(function (x) { return new Reference(x); });
        }
        else {
            _this.profile = [];
        }
        if (source['variable']) {
            _this.variable = source.variable.map(function (x) { return new TestScriptVariable(x); });
        }
        else {
            _this.variable = [];
        }
        if (source['setup']) {
            _this.setup = new TestScriptSetup(source.setup);
        }
        if (source['test']) {
            _this.test = source.test.map(function (x) { return new TestScriptTest(x); });
        }
        else {
            _this.test = [];
        }
        if (source['teardown']) {
            _this.teardown = new TestScriptTeardown(source.teardown);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (TestScript.status)
     */
    TestScript.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TestScript.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"TestScript" fhir: TestScript.resourceType:"TestScript"', }));
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: TestScript.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            (_b = outcome.issue).push.apply(_b, this.identifier.doModelValidation().issue);
        }
        if (this["version"]) {
            (_c = outcome.issue).push.apply(_c, this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: TestScript.name:string', }));
        }
        if (this["name"]) {
            (_d = outcome.issue).push.apply(_d, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_e = outcome.issue).push.apply(_e, this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: TestScript.status:code', }));
        }
        if (this["experimental"]) {
            (_f = outcome.issue).push.apply(_f, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_g = outcome.issue).push.apply(_g, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_h = outcome.issue).push.apply(_h, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_j = outcome.issue).push.apply(_j, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_k = outcome.issue).push.apply(_k, this.purpose.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_l = outcome.issue).push.apply(_l, this.copyright.doModelValidation().issue);
        }
        if (this["origin"]) {
            this.origin.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["destination"]) {
            this.destination.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["metadata"]) {
            (_m = outcome.issue).push.apply(_m, this.metadata.doModelValidation().issue);
        }
        if (this["fixture"]) {
            this.fixture.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["profile"]) {
            this.profile.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["variable"]) {
            this.variable.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["setup"]) {
            (_o = outcome.issue).push.apply(_o, this.setup.doModelValidation().issue);
        }
        if (this["test"]) {
            this.test.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["teardown"]) {
            (_p = outcome.issue).push.apply(_p, this.teardown.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TestScript._fts_dataType = 'TestScript';
    return TestScript;
}(DomainResource));

export { TestScript, TestScriptDestination, TestScriptFixture, TestScriptMetadata, TestScriptMetadataCapability, TestScriptMetadataLink, TestScriptOrigin, TestScriptSetup, TestScriptSetupAction, TestScriptSetupActionAssert, TestScriptSetupActionOperation, TestScriptSetupActionOperationRequestHeader, TestScriptTeardown, TestScriptTeardownAction, TestScriptTest, TestScriptTestAction, TestScriptVariable };
//# sourceMappingURL=TestScript.js.map
