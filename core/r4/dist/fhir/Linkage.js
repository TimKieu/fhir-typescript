// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Linkage
import * as fhir from '../fhir.js';
// @ts-ignore
import { LinkageTypeCodings, } from '../fhirValueSets/LinkageTypeCodings.js';
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhir.BackboneElement {
    /**
     * Default constructor for LinkageItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
        else {
            this.resource = null;
        }
    }
    /**
     * Required-bound Value Set for type (Linkage.item.type)
     */
    static typeRequiredCoding() {
        return LinkageTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:LinkageTypeCodeType fhir: Linkage.item.type:code', });
        }
        if (!this['resource']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resource:fhir.Reference fhir: Linkage.item.resource:Reference', });
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LinkageItem._fts_dataType = 'LinkageItem';
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhir.DomainResource {
    /**
     * Default constructor for Linkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Linkage';
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.LinkageItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Linkage" fhir: Linkage.resourceType:"Linkage"', });
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation());
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation());
        }
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item:fhir.LinkageItem[] fhir: Linkage.item:item', });
        }
        else if (!Array.isArray(this.item)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property item:fhir.LinkageItem[] fhir: Linkage.item:item', });
        }
        else if (this.item.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item:fhir.LinkageItem[] fhir: Linkage.item:item', });
        }
        if (this["item"]) {
            this.item.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Linkage._fts_dataType = 'Linkage';
//# sourceMappingURL=data:application/json;base64,