// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Linkage
import * as fhir from '../fhir.js';
// @ts-ignore
import { LinkageTypeCodes } from '../fhirValueSets/LinkageTypeCodes.js';
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhir.BackboneElement {
    /**
     * Default constructor for LinkageItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
        else {
            this.resource = null;
        }
    }
    /**
     * Required-bound Value Set for type (Linkage.item.type)
     */
    static get typeRequiredCodes() {
        return LinkageTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Linkage.item';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: Linkage.item.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(LinkageTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: Linkage.item.type:code Required binding to: LinkageType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['resource']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resource fhir: Linkage.item.resource:Reference', expression: [expression] });
        }
        if (this["resource"]) {
            issues.push(...this.resource.doModelValidation(expression + '.resource'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LinkageItem._fts_dataType = 'LinkageItem';
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhir.DomainResource {
    /**
     * Default constructor for Linkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Linkage';
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.LinkageItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Linkage';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Linkage.resourceType:"Linkage"', expression: [expression] });
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation(expression + '.active'));
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation(expression + '.author'));
        }
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item fhir: Linkage.item:item', expression: [expression] });
        }
        else if (!Array.isArray(this.item)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property item fhir: Linkage.item:item', expression: [expression] });
        }
        else if (this.item.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item fhir: Linkage.item:item', expression: [expression] });
        }
        if (this["item"]) {
            this.item.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.item[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Linkage._fts_dataType = 'Linkage';
//# sourceMappingURL=data:application/json;base64,