/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { LinkageTypeCodings } from '../fhirValueSets/LinkageTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';

// <auto-generated/>
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
var LinkageItem = /** @class */ (function (_super) {
    __extends(LinkageItem, _super);
    /**
     * Default constructor for LinkageItem - initializes any required elements to null if a value is not provided.
     */
    function LinkageItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['resource']) {
            _this.resource = new Reference(source.resource);
        }
        else {
            _this.resource = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (Linkage.item.type)
     */
    LinkageItem.typeRequiredCoding = function () {
        return LinkageTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    LinkageItem.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:LinkageTypeCodeType fhir: Linkage.item.type:code', }));
        }
        if (!this['resource']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resource:fhir.Reference fhir: Linkage.item.resource:Reference', }));
        }
        if (this["resource"]) {
            (_a = outcome.issue).push.apply(_a, this.resource.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    LinkageItem._fts_dataType = 'LinkageItem';
    return LinkageItem;
}(BackboneElement));
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
var Linkage = /** @class */ (function (_super) {
    __extends(Linkage, _super);
    /**
     * Default constructor for Linkage - initializes any required elements to null if a value is not provided.
     */
    function Linkage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Linkage';
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['author']) {
            _this.author = new Reference(source.author);
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new LinkageItem(x); });
        }
        else {
            _this.item = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Linkage.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Linkage" fhir: Linkage.resourceType:"Linkage"', }));
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (this["author"]) {
            (_b = outcome.issue).push.apply(_b, this.author.doModelValidation().issue);
        }
        if (!this['item']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property item:fhir.LinkageItem[] fhir: Linkage.item:item', }));
        }
        else if (!Array.isArray(this.item)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property item:fhir.LinkageItem[] fhir: Linkage.item:item', }));
        }
        else if (this.item.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property item:fhir.LinkageItem[] fhir: Linkage.item:item', }));
        }
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Linkage._fts_dataType = 'Linkage';
    return Linkage;
}(DomainResource));

export { Linkage, LinkageItem };
//# sourceMappingURL=Linkage.js.map
