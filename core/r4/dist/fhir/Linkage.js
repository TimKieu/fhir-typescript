// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Linkage
import * as fhir from '../fhir.js';
// @ts-ignore
import { LinkageTypeVsValidation } from '../fhirValueSets/LinkageTypeVsValidation.js';
/**
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export class LinkageItem extends fhir.BackboneElement {
    /**
     * Default constructor for LinkageItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource, options);
        }
        else {
            this.resource = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Linkage.item';
        }
        iss.push(...this.vRSV('type', exp, 'LinkageType', LinkageTypeVsValidation, 'r'));
        iss.push(...this.vRS('resource', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LinkageItem._fts_dataType = 'LinkageItem';
/**
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export class Linkage extends fhir.DomainResource {
    /**
     * Default constructor for Linkage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Linkage';
        if (source['active'] !== undefined) {
            this.active = new fhir.FhirBoolean({ value: source.active }, options);
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.LinkageItem(x, options));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Linkage';
        }
        iss.push(...this.vOS('active', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vRA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Linkage._fts_dataType = 'Linkage';
//# sourceMappingURL=data:application/json;base64,