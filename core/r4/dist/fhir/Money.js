// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Money
import * as fhir from '../fhir.js';
// @ts-ignore
import { CurrenciesCodes } from '../fhirValueSets/CurrenciesCodes.js';
/**
 * An amount of economic utility in some recognized currency.
 */
export class Money extends fhir.FhirElement {
    /**
     * Default constructor for Money - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['currency']) {
            this.currency = new fhir.FhirCode({ value: source.currency });
        }
    }
    /**
     * Required-bound Value Set for currency (Money.currency)
     */
    static get currencyRequiredCodes() {
        return CurrenciesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (this['currency'] && (!Object.values(CurrenciesCodes).includes(this.currency))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property currency?:fhir.FhirCode fhir: Money.currency:code Required binding to: Currencies' });
        }
        if (this["currency"]) {
            issues.push(...this.currency.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Money._fts_dataType = 'Money';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9uZXkuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL01vbmV5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDBCQUEwQjtBQUUxQixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQUluQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLGVBQWUsRUFBdUIsTUFBTSxxQ0FBcUMsQ0FBQztBQWUzRjs7R0FFRztBQUNILE1BQU0sT0FBTyxLQUFNLFNBQVEsSUFBSSxDQUFDLFdBQVc7SUFhekM7O09BRUc7SUFDSCxZQUFZLFNBQTRCLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ2xGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ2xGLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7U0FBRTtJQUMxRixDQUFDO0lBQ0Q7O09BRUc7SUFDSSxNQUFNLEtBQUsscUJBQXFCO1FBQ3JDLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQjtRQUMvQixJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUN0RSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQWUsQ0FBQyxDQUFDLEVBQUU7WUFDeEYsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUseUdBQXlHLEVBQUUsQ0FBQyxDQUFDO1NBQ2xMO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUM1RSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQXJDRDs7R0FFRztBQUM2QixtQkFBYSxHQUFVLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBDb21wbGV4VHlwZTogTW9uZXlcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEN1cnJlbmNpZXNDb2RpbmdzLCBDdXJyZW5jaWVzQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ3VycmVuY2llc0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IEN1cnJlbmNpZXNDb2RlcywgIEN1cnJlbmNpZXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ3VycmVuY2llc0NvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1vbmV5IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1vbmV5QXJncyBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBNb25ldGFyeSB2YWx1ZXMgaGF2ZSB0aGVpciBvd24gcnVsZXMgZm9yIGhhbmRsaW5nIHByZWNpc2lvbiAocmVmZXIgdG8gc3RhbmRhcmQgYWNjb3VudGluZyB0ZXh0IGJvb2tzKS5cclxuICAgKi9cclxuICB2YWx1ZT86IGZoaXIuRmhpckRlY2ltYWx8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJU08gNDIxNyBDdXJyZW5jeSBDb2RlLlxyXG4gICAqL1xyXG4gIGN1cnJlbmN5PzogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gYW1vdW50IG9mIGVjb25vbWljIHV0aWxpdHkgaW4gc29tZSByZWNvZ25pemVkIGN1cnJlbmN5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vbmV5IGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdNb25leSc7XHJcbiAgLyoqXHJcbiAgICogTW9uZXRhcnkgdmFsdWVzIGhhdmUgdGhlaXIgb3duIHJ1bGVzIGZvciBoYW5kbGluZyBwcmVjaXNpb24gKHJlZmVyIHRvIHN0YW5kYXJkIGFjY291bnRpbmcgdGV4dCBib29rcykuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlPzogZmhpci5GaGlyRGVjaW1hbHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSVNPIDQyMTcgQ3VycmVuY3kgQ29kZS5cclxuICAgKi9cclxuICBwdWJsaWMgY3VycmVuY3k/OiBmaGlyLkZoaXJDb2RlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNb25leSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1vbmV5QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3ZhbHVlJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJEZWNpbWFsKHt2YWx1ZTogc291cmNlLnZhbHVlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2N1cnJlbmN5J10pIHsgdGhpcy5jdXJyZW5jeSA9IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogc291cmNlLmN1cnJlbmN5fSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBjdXJyZW5jeSAoTW9uZXkuY3VycmVuY3kpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXQgY3VycmVuY3lSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIEN1cnJlbmNpZXNDb2RlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1widmFsdWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy52YWx1ZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbJ2N1cnJlbmN5J10gJiYgKCFPYmplY3QudmFsdWVzKEN1cnJlbmNpZXNDb2RlcykuaW5jbHVkZXModGhpcy5jdXJyZW5jeSBhcyBhbnkpKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnY29kZS1pbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdJbnZhbGlkIGNvZGUgcHJvcGVydHkgY3VycmVuY3k/OmZoaXIuRmhpckNvZGUgZmhpcjogTW9uZXkuY3VycmVuY3k6Y29kZSBSZXF1aXJlZCBiaW5kaW5nIHRvOiBDdXJyZW5jaWVzJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiY3VycmVuY3lcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jdXJyZW5jeS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19