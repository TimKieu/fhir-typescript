/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MeasurePopulationCodings } from '../fhirValueSets/MeasurePopulationCodings.js';
import { MeasureDataUsageCodings } from '../fhirValueSets/MeasureDataUsageCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { MeasureScoringCodings } from '../fhirValueSets/MeasureScoringCodings.js';
import { CompositeMeasureScoringCodings } from '../fhirValueSets/CompositeMeasureScoringCodings.js';
import { MeasureTypeCodings } from '../fhirValueSets/MeasureTypeCodings.js';
import { MeasureImprovementNotationCodings } from '../fhirValueSets/MeasureImprovementNotationCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';
import { Expression } from './Expression.js';
import { FhirUri } from './FhirUri.js';
import { Identifier } from './Identifier.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { FhirDate } from './FhirDate.js';
import { Period } from './Period.js';
import { RelatedArtifact } from './RelatedArtifact.js';
import { FhirCanonical } from './FhirCanonical.js';

// <auto-generated/>
/**
 * A population criteria for the measure.
 */
var MeasureGroupPopulation = /** @class */ (function (_super) {
    __extends(MeasureGroupPopulation, _super);
    /**
     * Default constructor for MeasureGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    function MeasureGroupPopulation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['criteria']) {
            _this.criteria = new Expression(source.criteria);
        }
        else {
            _this.criteria = null;
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for code (Measure.group.population.code)
     */
    MeasureGroupPopulation.codeExtensibleCoding = function () {
        return MeasurePopulationCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureGroupPopulation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (!this['criteria']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property criteria:fhir.Expression fhir: Measure.group.population.criteria:Expression', }));
        }
        if (this["criteria"]) {
            (_c = outcome.issue).push.apply(_c, this.criteria.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureGroupPopulation._fts_dataType = 'MeasureGroupPopulation';
    return MeasureGroupPopulation;
}(BackboneElement));
/**
 * Stratifiers are defined either as a single criteria, or as a set of component criteria.
 */
var MeasureGroupStratifierComponent = /** @class */ (function (_super) {
    __extends(MeasureGroupStratifierComponent, _super);
    /**
     * Default constructor for MeasureGroupStratifierComponent - initializes any required elements to null if a value is not provided.
     */
    function MeasureGroupStratifierComponent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['criteria']) {
            _this.criteria = new Expression(source.criteria);
        }
        else {
            _this.criteria = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureGroupStratifierComponent.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (!this['criteria']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property criteria:fhir.Expression fhir: Measure.group.stratifier.component.criteria:Expression', }));
        }
        if (this["criteria"]) {
            (_c = outcome.issue).push.apply(_c, this.criteria.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureGroupStratifierComponent._fts_dataType = 'MeasureGroupStratifierComponent';
    return MeasureGroupStratifierComponent;
}(BackboneElement));
/**
 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 */
var MeasureGroupStratifier = /** @class */ (function (_super) {
    __extends(MeasureGroupStratifier, _super);
    /**
     * Default constructor for MeasureGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    function MeasureGroupStratifier(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['criteria']) {
            _this.criteria = new Expression(source.criteria);
        }
        if (source['component']) {
            _this.component = source.component.map(function (x) { return new MeasureGroupStratifierComponent(x); });
        }
        else {
            _this.component = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureGroupStratifier.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (this["criteria"]) {
            (_c = outcome.issue).push.apply(_c, this.criteria.doModelValidation().issue);
        }
        if (this["component"]) {
            this.component.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureGroupStratifier._fts_dataType = 'MeasureGroupStratifier';
    return MeasureGroupStratifier;
}(BackboneElement));
/**
 * A group of population criteria for the measure.
 */
var MeasureGroup = /** @class */ (function (_super) {
    __extends(MeasureGroup, _super);
    /**
     * Default constructor for MeasureGroup - initializes any required elements to null if a value is not provided.
     */
    function MeasureGroup(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['population']) {
            _this.population = source.population.map(function (x) { return new MeasureGroupPopulation(x); });
        }
        else {
            _this.population = [];
        }
        if (source['stratifier']) {
            _this.stratifier = source.stratifier.map(function (x) { return new MeasureGroupStratifier(x); });
        }
        else {
            _this.stratifier = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureGroup.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (this["population"]) {
            this.population.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["stratifier"]) {
            this.stratifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureGroup._fts_dataType = 'MeasureGroup';
    return MeasureGroup;
}(BackboneElement));
/**
 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
 */
var MeasureSupplementalData = /** @class */ (function (_super) {
    __extends(MeasureSupplementalData, _super);
    /**
     * Default constructor for MeasureSupplementalData - initializes any required elements to null if a value is not provided.
     */
    function MeasureSupplementalData(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['usage']) {
            _this.usage = source.usage.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.usage = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['criteria']) {
            _this.criteria = new Expression(source.criteria);
        }
        else {
            _this.criteria = null;
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for usage (Measure.supplementalData.usage)
     */
    MeasureSupplementalData.usageExtensibleCoding = function () {
        return MeasureDataUsageCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureSupplementalData.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["usage"]) {
            this.usage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (!this['criteria']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property criteria:fhir.Expression fhir: Measure.supplementalData.criteria:Expression', }));
        }
        if (this["criteria"]) {
            (_c = outcome.issue).push.apply(_c, this.criteria.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureSupplementalData._fts_dataType = 'MeasureSupplementalData';
    return MeasureSupplementalData;
}(BackboneElement));
/**
 * The Measure resource provides the definition of a quality measure.
 */
var Measure = /** @class */ (function (_super) {
    __extends(Measure, _super);
    /**
     * Default constructor for Measure - initializes any required elements to null if a value is not provided.
     */
    function Measure(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Measure';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['subtitle']) {
            _this.subtitle = new FhirString({ value: source.subtitle });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['subject']) {
            _this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            _this.subject = new CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            _this.subject = new Reference(source.subjectReference);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['usage']) {
            _this.usage = new FhirString({ value: source.usage });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            _this.approvalDate = new FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            _this.lastReviewDate = new FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            _this.effectivePeriod = new Period(source.effectivePeriod);
        }
        if (source['topic']) {
            _this.topic = source.topic.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.topic = [];
        }
        if (source['author']) {
            _this.author = source.author.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.author = [];
        }
        if (source['editor']) {
            _this.editor = source.editor.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.editor = [];
        }
        if (source['reviewer']) {
            _this.reviewer = source.reviewer.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.reviewer = [];
        }
        if (source['endorser']) {
            _this.endorser = source.endorser.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.endorser = [];
        }
        if (source['relatedArtifact']) {
            _this.relatedArtifact = source.relatedArtifact.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.relatedArtifact = [];
        }
        if (source['library']) {
            _this.library = source.library.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.library = [];
        }
        if (source['disclaimer']) {
            _this.disclaimer = new FhirMarkdown({ value: source.disclaimer });
        }
        if (source['scoring']) {
            _this.scoring = new CodeableConcept(source.scoring);
        }
        if (source['compositeScoring']) {
            _this.compositeScoring = new CodeableConcept(source.compositeScoring);
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['riskAdjustment']) {
            _this.riskAdjustment = new FhirString({ value: source.riskAdjustment });
        }
        if (source['rateAggregation']) {
            _this.rateAggregation = new FhirString({ value: source.rateAggregation });
        }
        if (source['rationale']) {
            _this.rationale = new FhirMarkdown({ value: source.rationale });
        }
        if (source['clinicalRecommendationStatement']) {
            _this.clinicalRecommendationStatement = new FhirMarkdown({ value: source.clinicalRecommendationStatement });
        }
        if (source['improvementNotation']) {
            _this.improvementNotation = new CodeableConcept(source.improvementNotation);
        }
        if (source['definition']) {
            _this.definition = source.definition.map(function (x) { return new FhirMarkdown({ value: x }); });
        }
        else {
            _this.definition = [];
        }
        if (source['guidance']) {
            _this.guidance = new FhirMarkdown({ value: source.guidance });
        }
        if (source['group']) {
            _this.group = source.group.map(function (x) { return new MeasureGroup(x); });
        }
        else {
            _this.group = [];
        }
        if (source['supplementalData']) {
            _this.supplementalData = source.supplementalData.map(function (x) { return new MeasureSupplementalData(x); });
        }
        else {
            _this.supplementalData = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Measure.status)
     */
    Measure.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Extensible-bound Value Set for scoring (Measure.scoring)
     */
    Measure.scoringExtensibleCoding = function () {
        return MeasureScoringCodings;
    };
    /**
     * Extensible-bound Value Set for compositeScoring (Measure.compositeScoring)
     */
    Measure.compositeScoringExtensibleCoding = function () {
        return CompositeMeasureScoringCodings;
    };
    /**
     * Extensible-bound Value Set for type (Measure.type)
     */
    Measure.typeExtensibleCoding = function () {
        return MeasureTypeCodings;
    };
    /**
     * Required-bound Value Set for improvementNotation (Measure.improvementNotation)
     */
    Measure.improvementNotationRequiredCoding = function () {
        return MeasureImprovementNotationCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Measure.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Measure" fhir: Measure.resourceType:"Measure"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (this["subtitle"]) {
            (_e = outcome.issue).push.apply(_e, this.subtitle.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: Measure.status:code', }));
        }
        if (this["experimental"]) {
            (_f = outcome.issue).push.apply(_f, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_g = outcome.issue).push.apply(_g, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_h = outcome.issue).push.apply(_h, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_j = outcome.issue).push.apply(_j, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_k = outcome.issue).push.apply(_k, this.purpose.doModelValidation().issue);
        }
        if (this["usage"]) {
            (_l = outcome.issue).push.apply(_l, this.usage.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_m = outcome.issue).push.apply(_m, this.copyright.doModelValidation().issue);
        }
        if (this["approvalDate"]) {
            (_o = outcome.issue).push.apply(_o, this.approvalDate.doModelValidation().issue);
        }
        if (this["lastReviewDate"]) {
            (_p = outcome.issue).push.apply(_p, this.lastReviewDate.doModelValidation().issue);
        }
        if (this["effectivePeriod"]) {
            (_q = outcome.issue).push.apply(_q, this.effectivePeriod.doModelValidation().issue);
        }
        if (this["topic"]) {
            this.topic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["author"]) {
            this.author.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["editor"]) {
            this.editor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["endorser"]) {
            this.endorser.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["library"]) {
            this.library.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["disclaimer"]) {
            (_r = outcome.issue).push.apply(_r, this.disclaimer.doModelValidation().issue);
        }
        if (this["scoring"]) {
            (_s = outcome.issue).push.apply(_s, this.scoring.doModelValidation().issue);
        }
        if (this["compositeScoring"]) {
            (_t = outcome.issue).push.apply(_t, this.compositeScoring.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["riskAdjustment"]) {
            (_u = outcome.issue).push.apply(_u, this.riskAdjustment.doModelValidation().issue);
        }
        if (this["rateAggregation"]) {
            (_v = outcome.issue).push.apply(_v, this.rateAggregation.doModelValidation().issue);
        }
        if (this["rationale"]) {
            (_w = outcome.issue).push.apply(_w, this.rationale.doModelValidation().issue);
        }
        if (this["clinicalRecommendationStatement"]) {
            (_x = outcome.issue).push.apply(_x, this.clinicalRecommendationStatement.doModelValidation().issue);
        }
        if (this["improvementNotation"]) {
            (_y = outcome.issue).push.apply(_y, this.improvementNotation.doModelValidation().issue);
        }
        if (this["definition"]) {
            this.definition.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["guidance"]) {
            (_z = outcome.issue).push.apply(_z, this.guidance.doModelValidation().issue);
        }
        if (this["group"]) {
            this.group.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supplementalData"]) {
            this.supplementalData.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Measure._fts_dataType = 'Measure';
    /**
     * Internal flag to properly serialize choice-type element Measure.subject[x]
     */
    Measure._fts_subjectIsChoice = true;
    return Measure;
}(DomainResource));

export { Measure, MeasureGroup, MeasureGroupPopulation, MeasureGroupStratifier, MeasureGroupStratifierComponent, MeasureSupplementalData };
//# sourceMappingURL=Measure.js.map
