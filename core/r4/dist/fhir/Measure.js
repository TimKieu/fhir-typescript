// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Measure
import * as fhir from '../fhir.js';
// @ts-ignore
import { MeasurePopulationCodings, } from '../fhirValueSets/MeasurePopulationCodings.js';
// @ts-ignore
import { MeasureDataUsageCodings, } from '../fhirValueSets/MeasureDataUsageCodings.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { MeasureScoringCodings, } from '../fhirValueSets/MeasureScoringCodings.js';
// @ts-ignore
import { CompositeMeasureScoringCodings, } from '../fhirValueSets/CompositeMeasureScoringCodings.js';
// @ts-ignore
import { MeasureTypeCodings, } from '../fhirValueSets/MeasureTypeCodings.js';
// @ts-ignore
import { MeasureImprovementNotationCodes } from '../fhirValueSets/MeasureImprovementNotationCodes.js';
/**
 * A population criteria for the measure.
 */
export class MeasureGroupPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        else {
            this.criteria = null;
        }
    }
    /**
     * Extensible-bound Value Set for code (Measure.group.population.code)
     */
    static get codeExtensibleCodings() {
        return MeasurePopulationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (!this['criteria']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property criteria:fhir.Expression fhir: Measure.group.population.criteria:Expression' });
        }
        if (this["criteria"]) {
            issues.push(...this.criteria.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureGroupPopulation._fts_dataType = 'MeasureGroupPopulation';
/**
 * Stratifiers are defined either as a single criteria, or as a set of component criteria.
 */
export class MeasureGroupStratifierComponent extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupStratifierComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        else {
            this.criteria = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (!this['criteria']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property criteria:fhir.Expression fhir: Measure.group.stratifier.component.criteria:Expression' });
        }
        if (this["criteria"]) {
            issues.push(...this.criteria.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureGroupStratifierComponent._fts_dataType = 'MeasureGroupStratifierComponent';
/**
 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 */
export class MeasureGroupStratifier extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.MeasureGroupStratifierComponent(x));
        }
        else {
            this.component = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["criteria"]) {
            issues.push(...this.criteria.doModelValidation());
        }
        if (this["component"]) {
            this.component.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureGroupStratifier._fts_dataType = 'MeasureGroupStratifier';
/**
 * A group of population criteria for the measure.
 */
export class MeasureGroup extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureGroupPopulation(x));
        }
        else {
            this.population = [];
        }
        if (source['stratifier']) {
            this.stratifier = source.stratifier.map((x) => new fhir.MeasureGroupStratifier(x));
        }
        else {
            this.stratifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["population"]) {
            this.population.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["stratifier"]) {
            this.stratifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureGroup._fts_dataType = 'MeasureGroup';
/**
 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
 */
export class MeasureSupplementalData extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureSupplementalData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['usage']) {
            this.usage = source.usage.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.usage = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['criteria']) {
            this.criteria = new fhir.Expression(source.criteria);
        }
        else {
            this.criteria = null;
        }
    }
    /**
     * Extensible-bound Value Set for usage (Measure.supplementalData.usage)
     */
    static get usageExtensibleCodings() {
        return MeasureDataUsageCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["usage"]) {
            this.usage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (!this['criteria']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property criteria:fhir.Expression fhir: Measure.supplementalData.criteria:Expression' });
        }
        if (this["criteria"]) {
            issues.push(...this.criteria.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureSupplementalData._fts_dataType = 'MeasureSupplementalData';
/**
 * The Measure resource provides the definition of a quality measure.
 */
export class Measure extends fhir.DomainResource {
    /**
     * Default constructor for Measure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Measure';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['_subtitle']) {
            if (this.subtitle) {
                this.subtitle.addExtendedProperties(source._subtitle);
            }
            else {
                this.subtitle = new fhir.FhirString(source._subtitle);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['usage']) {
            this.usage = new fhir.FhirString({ value: source.usage });
        }
        if (source['_usage']) {
            if (this.usage) {
                this.usage.addExtendedProperties(source._usage);
            }
            else {
                this.usage = new fhir.FhirString(source._usage);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['library']) {
            this.library = source.library.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.library = [];
        }
        if (source['_library']) {
            source._library.forEach((x, i) => {
                if (this.library.length >= i) {
                    if (x) {
                        this.library[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.library.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['disclaimer']) {
            this.disclaimer = new fhir.FhirMarkdown({ value: source.disclaimer });
        }
        if (source['_disclaimer']) {
            if (this.disclaimer) {
                this.disclaimer.addExtendedProperties(source._disclaimer);
            }
            else {
                this.disclaimer = new fhir.FhirMarkdown(source._disclaimer);
            }
        }
        if (source['scoring']) {
            this.scoring = new fhir.CodeableConcept(source.scoring);
        }
        if (source['compositeScoring']) {
            this.compositeScoring = new fhir.CodeableConcept(source.compositeScoring);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['riskAdjustment']) {
            this.riskAdjustment = new fhir.FhirString({ value: source.riskAdjustment });
        }
        if (source['_riskAdjustment']) {
            if (this.riskAdjustment) {
                this.riskAdjustment.addExtendedProperties(source._riskAdjustment);
            }
            else {
                this.riskAdjustment = new fhir.FhirString(source._riskAdjustment);
            }
        }
        if (source['rateAggregation']) {
            this.rateAggregation = new fhir.FhirString({ value: source.rateAggregation });
        }
        if (source['_rateAggregation']) {
            if (this.rateAggregation) {
                this.rateAggregation.addExtendedProperties(source._rateAggregation);
            }
            else {
                this.rateAggregation = new fhir.FhirString(source._rateAggregation);
            }
        }
        if (source['rationale']) {
            this.rationale = new fhir.FhirMarkdown({ value: source.rationale });
        }
        if (source['_rationale']) {
            if (this.rationale) {
                this.rationale.addExtendedProperties(source._rationale);
            }
            else {
                this.rationale = new fhir.FhirMarkdown(source._rationale);
            }
        }
        if (source['clinicalRecommendationStatement']) {
            this.clinicalRecommendationStatement = new fhir.FhirMarkdown({ value: source.clinicalRecommendationStatement });
        }
        if (source['_clinicalRecommendationStatement']) {
            if (this.clinicalRecommendationStatement) {
                this.clinicalRecommendationStatement.addExtendedProperties(source._clinicalRecommendationStatement);
            }
            else {
                this.clinicalRecommendationStatement = new fhir.FhirMarkdown(source._clinicalRecommendationStatement);
            }
        }
        if (source['improvementNotation']) {
            this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation);
        }
        if (source['definition']) {
            this.definition = source.definition.map((x) => new fhir.FhirMarkdown({ value: x }));
        }
        else {
            this.definition = [];
        }
        if (source['_definition']) {
            source._definition.forEach((x, i) => {
                if (this.definition.length >= i) {
                    if (x) {
                        this.definition[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definition.push(new fhir.FhirMarkdown(x));
                    }
                }
            });
        }
        if (source['guidance']) {
            this.guidance = new fhir.FhirMarkdown({ value: source.guidance });
        }
        if (source['_guidance']) {
            if (this.guidance) {
                this.guidance.addExtendedProperties(source._guidance);
            }
            else {
                this.guidance = new fhir.FhirMarkdown(source._guidance);
            }
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.MeasureGroup(x));
        }
        else {
            this.group = [];
        }
        if (source['supplementalData']) {
            this.supplementalData = source.supplementalData.map((x) => new fhir.MeasureSupplementalData(x));
        }
        else {
            this.supplementalData = [];
        }
    }
    /**
     * Required-bound Value Set for status (Measure.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Extensible-bound Value Set for scoring (Measure.scoring)
     */
    static get scoringExtensibleCodings() {
        return MeasureScoringCodings;
    }
    /**
     * Extensible-bound Value Set for compositeScoring (Measure.compositeScoring)
     */
    static get compositeScoringExtensibleCodings() {
        return CompositeMeasureScoringCodings;
    }
    /**
     * Extensible-bound Value Set for type (Measure.type)
     */
    static get typeExtensibleCodings() {
        return MeasureTypeCodings;
    }
    /**
     * Required-bound Value Set for improvementNotation (Measure.improvementNotation)
     */
    static get improvementNotationRequiredCodes() {
        return MeasureImprovementNotationCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Measure" fhir: Measure.resourceType:"Measure"' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["subtitle"]) {
            issues.push(...this.subtitle.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: Measure.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: Measure.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["usage"]) {
            issues.push(...this.usage.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["approvalDate"]) {
            issues.push(...this.approvalDate.doModelValidation());
        }
        if (this["lastReviewDate"]) {
            issues.push(...this.lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            issues.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["library"]) {
            this.library.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["disclaimer"]) {
            issues.push(...this.disclaimer.doModelValidation());
        }
        if (this["scoring"]) {
            issues.push(...this.scoring.doModelValidation());
        }
        if (this["compositeScoring"]) {
            issues.push(...this.compositeScoring.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["riskAdjustment"]) {
            issues.push(...this.riskAdjustment.doModelValidation());
        }
        if (this["rateAggregation"]) {
            issues.push(...this.rateAggregation.doModelValidation());
        }
        if (this["rationale"]) {
            issues.push(...this.rationale.doModelValidation());
        }
        if (this["clinicalRecommendationStatement"]) {
            issues.push(...this.clinicalRecommendationStatement.doModelValidation());
        }
        if (this['improvementNotation'] && (!Object.values(MeasureImprovementNotationCodes).includes(this.improvementNotation))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property improvementNotation?:fhir.CodeableConcept fhir: Measure.improvementNotation:CodeableConcept Required binding to: MeasureImprovementNotation' });
        }
        if (this["improvementNotation"]) {
            issues.push(...this.improvementNotation.doModelValidation());
        }
        if (this["definition"]) {
            this.definition.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["guidance"]) {
            issues.push(...this.guidance.doModelValidation());
        }
        if (this["group"]) {
            this.group.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["supplementalData"]) {
            this.supplementalData.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Measure._fts_dataType = 'Measure';
/**
 * Internal flag to properly serialize choice-type element Measure.subject[x]
 */
Measure._fts_subjectIsChoice = true;
//# sourceMappingURL=data:application/json;base64,