// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Quantity
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuantityComparatorCodes } from '../fhirValueSets/QuantityComparatorCodes.js';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
    /**
     * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['comparator']) {
            this.comparator = new fhir.FhirCode({ value: source.comparator });
        }
        if (source['unit']) {
            this.unit = new fhir.FhirString({ value: source.unit });
        }
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
    }
    /**
     * Required-bound Value Set for comparator (Quantity.comparator)
     */
    static get comparatorRequiredCodes() {
        return QuantityComparatorCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (this['comparator'] && (!Object.values(QuantityComparatorCodes).includes(this.comparator))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property comparator?:fhir.FhirCode<QuantityComparatorCodeType> fhir: Quantity.comparator:code Required binding to: QuantityComparator' });
        }
        if (this["comparator"]) {
            issues.push(...this.comparator.doModelValidation());
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation());
        }
        if (this["system"]) {
            issues.push(...this.system.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Quantity._fts_dataType = 'Quantity';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVhbnRpdHkuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL1F1YW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDZCQUE2QjtBQUU3QixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQUluQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLHVCQUF1QixFQUErQixNQUFNLDZDQUE2QyxDQUFDO0FBMkJuSDs7R0FFRztBQUNILE1BQU0sT0FBTyxRQUFTLFNBQVEsSUFBSSxDQUFDLFdBQVc7SUF5QjVDOztPQUVHO0lBQ0gsWUFBWSxTQUErQixFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUNyRixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7U0FBRTtRQUNsRixJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUE2QixFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzFILElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7U0FBRTtRQUM5RSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDakYsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO0lBQzlFLENBQUM7SUFDRDs7T0FFRztJQUNJLE1BQU0sS0FBSyx1QkFBdUI7UUFDdkMsT0FBTyx1QkFBdUIsQ0FBQztJQUNqQyxDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUI7UUFDL0IsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDdEUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQWlCLENBQUMsQ0FBQyxFQUFFO1lBQ3BHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLG9KQUFvSixFQUFFLENBQUMsQ0FBQztTQUM3TjtRQUNELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDaEYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUNwRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3hFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDcEUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUF2REQ7O0dBRUc7QUFDNkIsc0JBQWEsR0FBVSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgQ29tcGxleFR5cGU6IFF1YW50aXR5XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBRdWFudGl0eUNvbXBhcmF0b3JDb2RpbmdzLCBRdWFudGl0eUNvbXBhcmF0b3JDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9RdWFudGl0eUNvbXBhcmF0b3JDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBRdWFudGl0eUNvbXBhcmF0b3JDb2RlcywgIFF1YW50aXR5Q29tcGFyYXRvckNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9RdWFudGl0eUNvbXBhcmF0b3JDb2Rlcy5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBRdWFudGl0eSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBRdWFudGl0eUFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGltcGxpY2l0IHByZWNpc2lvbiBpbiB0aGUgdmFsdWUgc2hvdWxkIGFsd2F5cyBiZSBob25vcmVkLiBNb25ldGFyeSB2YWx1ZXMgaGF2ZSB0aGVpciBvd24gcnVsZXMgZm9yIGhhbmRsaW5nIHByZWNpc2lvbiAocmVmZXIgdG8gc3RhbmRhcmQgYWNjb3VudGluZyB0ZXh0IGJvb2tzKS5cclxuICAgKi9cclxuICB2YWx1ZT86IGZoaXIuRmhpckRlY2ltYWx8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBIb3cgdGhlIHZhbHVlIHNob3VsZCBiZSB1bmRlcnN0b29kIGFuZCByZXByZXNlbnRlZCAtIHdoZXRoZXIgdGhlIGFjdHVhbCB2YWx1ZSBpcyBncmVhdGVyIG9yIGxlc3MgdGhhbiB0aGUgc3RhdGVkIHZhbHVlIGR1ZSB0byBtZWFzdXJlbWVudCBpc3N1ZXM7IGUuZy4gaWYgdGhlIGNvbXBhcmF0b3IgaXMgXCImbHQ7XCIgLCB0aGVuIHRoZSByZWFsIHZhbHVlIGlzICZsdDsgc3RhdGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIGNvbXBhcmF0b3I/OiBmaGlyLkZoaXJDb2RlPFF1YW50aXR5Q29tcGFyYXRvckNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgaHVtYW4tcmVhZGFibGUgZm9ybSBvZiB0aGUgdW5pdC5cclxuICAgKi9cclxuICB1bml0PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGlkZW50aWZpY2F0aW9uIG9mIHRoZSBzeXN0ZW0gdGhhdCBwcm92aWRlcyB0aGUgY29kZWQgZm9ybSBvZiB0aGUgdW5pdC5cclxuICAgKi9cclxuICBzeXN0ZW0/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJlZmVycmVkIHN5c3RlbSBpcyBVQ1VNLCBidXQgU05PTUVEIENUIGNhbiBhbHNvIGJlIHVzZWQgKGZvciBjdXN0b21hcnkgdW5pdHMpIG9yIElTTyA0MjE3IGZvciBjdXJyZW5jeS4gIFRoZSBjb250ZXh0IG9mIHVzZSBtYXkgYWRkaXRpb25hbGx5IHJlcXVpcmUgYSBjb2RlIGZyb20gYSBwYXJ0aWN1bGFyIHN5c3RlbS5cclxuICAgKi9cclxuICBjb2RlPzogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQSBtZWFzdXJlZCBhbW91bnQgKG9yIGFuIGFtb3VudCB0aGF0IGNhbiBwb3RlbnRpYWxseSBiZSBtZWFzdXJlZCkuIE5vdGUgdGhhdCBtZWFzdXJlZCBhbW91bnRzIGluY2x1ZGUgYW1vdW50cyB0aGF0IGFyZSBub3QgcHJlY2lzZWx5IHF1YW50aWZpZWQsIGluY2x1ZGluZyBhbW91bnRzIGludm9sdmluZyBhcmJpdHJhcnkgdW5pdHMgYW5kIGZsb2F0aW5nIGN1cnJlbmNpZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUXVhbnRpdHkgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1F1YW50aXR5JztcclxuICAvKipcclxuICAgKiBUaGUgaW1wbGljaXQgcHJlY2lzaW9uIGluIHRoZSB2YWx1ZSBzaG91bGQgYWx3YXlzIGJlIGhvbm9yZWQuIE1vbmV0YXJ5IHZhbHVlcyBoYXZlIHRoZWlyIG93biBydWxlcyBmb3IgaGFuZGxpbmcgcHJlY2lzaW9uIChyZWZlciB0byBzdGFuZGFyZCBhY2NvdW50aW5nIHRleHQgYm9va3MpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB2YWx1ZT86IGZoaXIuRmhpckRlY2ltYWx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEhvdyB0aGUgdmFsdWUgc2hvdWxkIGJlIHVuZGVyc3Rvb2QgYW5kIHJlcHJlc2VudGVkIC0gd2hldGhlciB0aGUgYWN0dWFsIHZhbHVlIGlzIGdyZWF0ZXIgb3IgbGVzcyB0aGFuIHRoZSBzdGF0ZWQgdmFsdWUgZHVlIHRvIG1lYXN1cmVtZW50IGlzc3VlczsgZS5nLiBpZiB0aGUgY29tcGFyYXRvciBpcyBcIiZsdDtcIiAsIHRoZW4gdGhlIHJlYWwgdmFsdWUgaXMgJmx0OyBzdGF0ZWQgdmFsdWUuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbXBhcmF0b3I/OiBmaGlyLkZoaXJDb2RlPFF1YW50aXR5Q29tcGFyYXRvckNvZGVUeXBlPnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBodW1hbi1yZWFkYWJsZSBmb3JtIG9mIHRoZSB1bml0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1bml0PzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgaWRlbnRpZmljYXRpb24gb2YgdGhlIHN5c3RlbSB0aGF0IHByb3ZpZGVzIHRoZSBjb2RlZCBmb3JtIG9mIHRoZSB1bml0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzeXN0ZW0/OiBmaGlyLkZoaXJVcml8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwcmVmZXJyZWQgc3lzdGVtIGlzIFVDVU0sIGJ1dCBTTk9NRUQgQ1QgY2FuIGFsc28gYmUgdXNlZCAoZm9yIGN1c3RvbWFyeSB1bml0cykgb3IgSVNPIDQyMTcgZm9yIGN1cnJlbmN5LiAgVGhlIGNvbnRleHQgb2YgdXNlIG1heSBhZGRpdGlvbmFsbHkgcmVxdWlyZSBhIGNvZGUgZnJvbSBhIHBhcnRpY3VsYXIgc3lzdGVtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2RlPzogZmhpci5GaGlyQ29kZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgUXVhbnRpdHkgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxRdWFudGl0eUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZSddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyRGVjaW1hbCh7dmFsdWU6IHNvdXJjZS52YWx1ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydjb21wYXJhdG9yJ10pIHsgdGhpcy5jb21wYXJhdG9yID0gbmV3IGZoaXIuRmhpckNvZGU8UXVhbnRpdHlDb21wYXJhdG9yQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLmNvbXBhcmF0b3J9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndW5pdCddKSB7IHRoaXMudW5pdCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudW5pdH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydzeXN0ZW0nXSkgeyB0aGlzLnN5c3RlbSA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2Uuc3lzdGVtfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvZGUnXSkgeyB0aGlzLmNvZGUgPSBuZXcgZmhpci5GaGlyQ29kZSh7dmFsdWU6IHNvdXJjZS5jb2RlfSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBjb21wYXJhdG9yIChRdWFudGl0eS5jb21wYXJhdG9yKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IGNvbXBhcmF0b3JSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIFF1YW50aXR5Q29tcGFyYXRvckNvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKHRoaXNbXCJ2YWx1ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnZhbHVlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1snY29tcGFyYXRvciddICYmICghT2JqZWN0LnZhbHVlcyhRdWFudGl0eUNvbXBhcmF0b3JDb2RlcykuaW5jbHVkZXModGhpcy5jb21wYXJhdG9yIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ0ludmFsaWQgY29kZSBwcm9wZXJ0eSBjb21wYXJhdG9yPzpmaGlyLkZoaXJDb2RlPFF1YW50aXR5Q29tcGFyYXRvckNvZGVUeXBlPiBmaGlyOiBRdWFudGl0eS5jb21wYXJhdG9yOmNvZGUgUmVxdWlyZWQgYmluZGluZyB0bzogUXVhbnRpdHlDb21wYXJhdG9yJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiY29tcGFyYXRvclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvbXBhcmF0b3IuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1widW5pdFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnVuaXQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wic3lzdGVtXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3lzdGVtLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvZGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jb2RlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=