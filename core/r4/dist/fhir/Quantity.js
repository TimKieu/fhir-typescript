// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Quantity
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuantityComparatorCodes } from '../fhirValueSets/QuantityComparatorCodes.js';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
    /**
     * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value);
            }
        }
        if (source['comparator']) {
            this.comparator = new fhir.FhirCode({ value: source.comparator });
        }
        if (source['_comparator']) {
            if (this.comparator) {
                this.comparator.addExtendedProperties(source._comparator);
            }
            else {
                this.comparator = new fhir.FhirCode(source._comparator);
            }
        }
        if (source['unit']) {
            this.unit = new fhir.FhirString({ value: source.unit });
        }
        if (source['_unit']) {
            if (this.unit) {
                this.unit.addExtendedProperties(source._unit);
            }
            else {
                this.unit = new fhir.FhirString(source._unit);
            }
        }
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
    }
    /**
     * Required-bound Value Set for comparator (Quantity.comparator)
     */
    static get comparatorRequiredCodes() {
        return QuantityComparatorCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Quantity';
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        if (this['comparator'] && (!Object.values(QuantityComparatorCodes).includes(this.comparator.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'comparator (Quantity.comparator) of type code is missing code for Required binding to: QuantityComparator', expression: [expression] });
        }
        if (this["comparator"]) {
            issues.push(...this.comparator.doModelValidation(expression + '.comparator'));
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation(expression + '.unit'));
        }
        if (this["system"]) {
            issues.push(...this.system.doModelValidation(expression + '.system'));
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Quantity._fts_dataType = 'Quantity';
//# sourceMappingURL=data:application/json;base64,