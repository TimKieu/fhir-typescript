// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Quantity
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuantityComparatorCodings, } from '../fhirValueSets/QuantityComparatorCodings.js';
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export class Quantity extends fhir.FhirElement {
    /**
     * Default constructor for Quantity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['comparator']) {
            this.comparator = source.comparator;
        }
        if (source['unit']) {
            this.unit = new fhir.FhirString({ value: source.unit });
        }
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
    }
    /**
     * Required-bound Value Set for comparator (Quantity.comparator)
     */
    static comparatorRequiredCoding() {
        return QuantityComparatorCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation());
        }
        if (this["system"]) {
            issues.push(...this.system.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Quantity._fts_dataType = 'Quantity';
//# sourceMappingURL=data:application/json;base64,