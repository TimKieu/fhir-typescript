/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { FmStatusCodings } from '../fhirValueSets/FmStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirDate } from './FhirDate.js';
import { Money } from './Money.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
var PaymentNotice = /** @class */ (function (_super) {
    __extends(PaymentNotice, _super);
    /**
     * Default constructor for PaymentNotice - initializes any required elements to null if a value is not provided.
     */
    function PaymentNotice(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'PaymentNotice';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['request']) {
            _this.request = new Reference(source.request);
        }
        if (source['response']) {
            _this.response = new Reference(source.response);
        }
        if (source['created']) {
            _this.created = new FhirDateTime({ value: source.created });
        }
        else {
            _this.created = null;
        }
        if (source['provider']) {
            _this.provider = new Reference(source.provider);
        }
        if (source['payment']) {
            _this.payment = new Reference(source.payment);
        }
        else {
            _this.payment = null;
        }
        if (source['paymentDate']) {
            _this.paymentDate = new FhirDate({ value: source.paymentDate });
        }
        if (source['payee']) {
            _this.payee = new Reference(source.payee);
        }
        if (source['recipient']) {
            _this.recipient = new Reference(source.recipient);
        }
        else {
            _this.recipient = null;
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        else {
            _this.amount = null;
        }
        if (source['paymentStatus']) {
            _this.paymentStatus = new CodeableConcept(source.paymentStatus);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (PaymentNotice.status)
     */
    PaymentNotice.statusRequiredCoding = function () {
        return FmStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PaymentNotice.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"PaymentNotice" fhir: PaymentNotice.resourceType:"PaymentNotice"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:FmStatusCodeType fhir: PaymentNotice.status:code', }));
        }
        if (this["request"]) {
            (_a = outcome.issue).push.apply(_a, this.request.doModelValidation().issue);
        }
        if (this["response"]) {
            (_b = outcome.issue).push.apply(_b, this.response.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: PaymentNotice.created:dateTime', }));
        }
        if (this["created"]) {
            (_c = outcome.issue).push.apply(_c, this.created.doModelValidation().issue);
        }
        if (this["provider"]) {
            (_d = outcome.issue).push.apply(_d, this.provider.doModelValidation().issue);
        }
        if (!this['payment']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property payment:fhir.Reference fhir: PaymentNotice.payment:Reference', }));
        }
        if (this["payment"]) {
            (_e = outcome.issue).push.apply(_e, this.payment.doModelValidation().issue);
        }
        if (this["paymentDate"]) {
            (_f = outcome.issue).push.apply(_f, this.paymentDate.doModelValidation().issue);
        }
        if (this["payee"]) {
            (_g = outcome.issue).push.apply(_g, this.payee.doModelValidation().issue);
        }
        if (!this['recipient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property recipient:fhir.Reference fhir: PaymentNotice.recipient:Reference', }));
        }
        if (this["recipient"]) {
            (_h = outcome.issue).push.apply(_h, this.recipient.doModelValidation().issue);
        }
        if (!this['amount']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property amount:fhir.Money fhir: PaymentNotice.amount:Money', }));
        }
        if (this["amount"]) {
            (_j = outcome.issue).push.apply(_j, this.amount.doModelValidation().issue);
        }
        if (this["paymentStatus"]) {
            (_k = outcome.issue).push.apply(_k, this.paymentStatus.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PaymentNotice._fts_dataType = 'PaymentNotice';
    return PaymentNotice;
}(DomainResource));

export { PaymentNotice };
//# sourceMappingURL=PaymentNotice.js.map
