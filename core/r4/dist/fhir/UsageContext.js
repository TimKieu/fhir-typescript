/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { UsageContextTypeCodings } from '../fhirValueSets/UsageContextTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirElement } from './FhirElement.js';
import { Coding } from './Coding.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { Reference } from './Reference.js';

// <auto-generated/>
/**
 * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
 */
var UsageContext = /** @class */ (function (_super) {
    __extends(UsageContext, _super);
    /**
     * Default constructor for UsageContext - initializes any required elements to null if a value is not provided.
     */
    function UsageContext(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new Coding(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            _this.value = new CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            _this.value = new Range(source.valueRange);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for code (UsageContext.code)
     */
    UsageContext.codeExtensibleCoding = function () {
        return UsageContextTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    UsageContext.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.Coding fhir: UsageContext.code:Coding', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: UsageContext.value[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    UsageContext._fts_dataType = 'UsageContext';
    /**
     * Internal flag to properly serialize choice-type element UsageContext.value[x]
     */
    UsageContext._fts_valueIsChoice = true;
    return UsageContext;
}(FhirElement));

export { UsageContext };
//# sourceMappingURL=UsageContext.js.map
