/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { PatientContactrelationshipCodings } from '../fhirValueSets/PatientContactrelationshipCodings.js';
import { AdministrativeGenderCodings } from '../fhirValueSets/AdministrativeGenderCodings.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { LinkTypeCodings } from '../fhirValueSets/LinkTypeCodings.js';
import { MaritalStatusCodings } from '../fhirValueSets/MaritalStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { HumanName } from './HumanName.js';
import { ContactPoint } from './ContactPoint.js';
import { Address } from './Address.js';
import { Reference } from './Reference.js';
import { Period } from './Period.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Identifier } from './Identifier.js';
import { FhirDate } from './FhirDate.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirInteger } from './FhirInteger.js';
import { Attachment } from './Attachment.js';

// <auto-generated/>
/**
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
var PatientContact = /** @class */ (function (_super) {
    __extends(PatientContact, _super);
    /**
     * Default constructor for PatientContact - initializes any required elements to null if a value is not provided.
     */
    function PatientContact(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['relationship']) {
            _this.relationship = source.relationship.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.relationship = [];
        }
        if (source['name']) {
            _this.name = new HumanName(source.name);
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['address']) {
            _this.address = new Address(source.address);
        }
        if (source['gender']) {
            _this.gender = source.gender;
        }
        if (source['organization']) {
            _this.organization = new Reference(source.organization);
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for relationship (Patient.contact.relationship)
     */
    PatientContact.relationshipExtensibleCoding = function () {
        return PatientContactrelationshipCodings;
    };
    /**
     * Required-bound Value Set for gender (Patient.contact.gender)
     */
    PatientContact.genderRequiredCoding = function () {
        return AdministrativeGenderCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PatientContact.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["relationship"]) {
            this.relationship.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["address"]) {
            (_b = outcome.issue).push.apply(_b, this.address.doModelValidation().issue);
        }
        if (this["organization"]) {
            (_c = outcome.issue).push.apply(_c, this.organization.doModelValidation().issue);
        }
        if (this["period"]) {
            (_d = outcome.issue).push.apply(_d, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PatientContact._fts_dataType = 'PatientContact';
    return PatientContact;
}(BackboneElement));
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
var PatientCommunication = /** @class */ (function (_super) {
    __extends(PatientCommunication, _super);
    /**
     * Default constructor for PatientCommunication - initializes any required elements to null if a value is not provided.
     */
    function PatientCommunication(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['language']) {
            _this.language = new CodeableConcept(source.language);
        }
        else {
            _this.language = null;
        }
        if (source['preferred']) {
            _this.preferred = new FhirBoolean({ value: source.preferred });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for language (Patient.communication.language)
     */
    PatientCommunication.languagePreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PatientCommunication.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['language']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property language:fhir.CodeableConcept fhir: Patient.communication.language:CodeableConcept', }));
        }
        if (this["language"]) {
            (_a = outcome.issue).push.apply(_a, this.language.doModelValidation().issue);
        }
        if (this["preferred"]) {
            (_b = outcome.issue).push.apply(_b, this.preferred.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PatientCommunication._fts_dataType = 'PatientCommunication';
    return PatientCommunication;
}(BackboneElement));
/**
 * There is no assumption that linked patient records have mutual links.
 */
var PatientLink = /** @class */ (function (_super) {
    __extends(PatientLink, _super);
    /**
     * Default constructor for PatientLink - initializes any required elements to null if a value is not provided.
     */
    function PatientLink(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['other']) {
            _this.other = new Reference(source.other);
        }
        else {
            _this.other = null;
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (Patient.link.type)
     */
    PatientLink.typeRequiredCoding = function () {
        return LinkTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PatientLink.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['other']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property other:fhir.Reference fhir: Patient.link.other:Reference', }));
        }
        if (this["other"]) {
            (_a = outcome.issue).push.apply(_a, this.other.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:LinkTypeCodeType fhir: Patient.link.type:code', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PatientLink._fts_dataType = 'PatientLink';
    return PatientLink;
}(BackboneElement));
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
var Patient = /** @class */ (function (_super) {
    __extends(Patient, _super);
    /**
     * Default constructor for Patient - initializes any required elements to null if a value is not provided.
     */
    function Patient(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Patient';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['name']) {
            _this.name = source.name.map(function (x) { return new HumanName(x); });
        }
        else {
            _this.name = [];
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['gender']) {
            _this.gender = source.gender;
        }
        if (source['birthDate']) {
            _this.birthDate = new FhirDate({ value: source.birthDate });
        }
        if (source['deceased']) {
            _this.deceased = source.deceased;
        }
        else if (source['deceasedBoolean']) {
            _this.deceased = new FhirBoolean({ value: source.deceasedBoolean });
        }
        else if (source['deceasedDateTime']) {
            _this.deceased = new FhirDateTime({ value: source.deceasedDateTime });
        }
        if (source['address']) {
            _this.address = source.address.map(function (x) { return new Address(x); });
        }
        else {
            _this.address = [];
        }
        if (source['maritalStatus']) {
            _this.maritalStatus = new CodeableConcept(source.maritalStatus);
        }
        if (source['multipleBirth']) {
            _this.multipleBirth = source.multipleBirth;
        }
        else if (source['multipleBirthBoolean']) {
            _this.multipleBirth = new FhirBoolean({ value: source.multipleBirthBoolean });
        }
        else if (source['multipleBirthInteger']) {
            _this.multipleBirth = new FhirInteger({ value: source.multipleBirthInteger });
        }
        if (source['photo']) {
            _this.photo = source.photo.map(function (x) { return new Attachment(x); });
        }
        else {
            _this.photo = [];
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new PatientContact(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['communication']) {
            _this.communication = source.communication.map(function (x) { return new PatientCommunication(x); });
        }
        else {
            _this.communication = [];
        }
        if (source['generalPractitioner']) {
            _this.generalPractitioner = source.generalPractitioner.map(function (x) { return new Reference(x); });
        }
        else {
            _this.generalPractitioner = [];
        }
        if (source['managingOrganization']) {
            _this.managingOrganization = new Reference(source.managingOrganization);
        }
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new PatientLink(x); });
        }
        else {
            _this.link = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for gender (Patient.gender)
     */
    Patient.genderRequiredCoding = function () {
        return AdministrativeGenderCodings;
    };
    /**
     * Extensible-bound Value Set for maritalStatus (Patient.maritalStatus)
     */
    Patient.maritalStatusExtensibleCoding = function () {
        return MaritalStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Patient.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Patient" fhir: Patient.resourceType:"Patient"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (this["name"]) {
            this.name.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["birthDate"]) {
            (_b = outcome.issue).push.apply(_b, this.birthDate.doModelValidation().issue);
        }
        if (this["address"]) {
            this.address.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["maritalStatus"]) {
            (_c = outcome.issue).push.apply(_c, this.maritalStatus.doModelValidation().issue);
        }
        if (this["photo"]) {
            this.photo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["communication"]) {
            this.communication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["generalPractitioner"]) {
            this.generalPractitioner.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["managingOrganization"]) {
            (_d = outcome.issue).push.apply(_d, this.managingOrganization.doModelValidation().issue);
        }
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Patient._fts_dataType = 'Patient';
    /**
     * Internal flag to properly serialize choice-type element Patient.deceased[x]
     */
    Patient._fts_deceasedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element Patient.multipleBirth[x]
     */
    Patient._fts_multipleBirthIsChoice = true;
    return Patient;
}(DomainResource));

export { Patient, PatientCommunication, PatientContact, PatientLink };
//# sourceMappingURL=Patient.js.map
