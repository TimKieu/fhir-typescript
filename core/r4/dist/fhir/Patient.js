// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Patient
import * as fhir from '../fhir.js';
// @ts-ignore
import { PatientContactrelationshipCodings, } from '../fhirValueSets/PatientContactrelationshipCodings.js';
// @ts-ignore
import { AdministrativeGenderCodings, } from '../fhirValueSets/AdministrativeGenderCodings.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
// @ts-ignore
import { LinkTypeCodings, } from '../fhirValueSets/LinkTypeCodings.js';
// @ts-ignore
import { MaritalStatusCodings, } from '../fhirValueSets/MaritalStatusCodings.js';
/**
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export class PatientContact extends fhir.BackboneElement {
    /**
     * Default constructor for PatientContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.relationship = [];
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Extensible-bound Value Set for relationship (Patient.contact.relationship)
     */
    static relationshipExtensibleCoding() {
        return PatientContactrelationshipCodings;
    }
    /**
     * Required-bound Value Set for gender (Patient.contact.gender)
     */
    static genderRequiredCoding() {
        return AdministrativeGenderCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["relationship"]) {
            this.relationship.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            issues.push(...this.address.doModelValidation());
        }
        if (this["organization"]) {
            issues.push(...this.organization.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PatientContact._fts_dataType = 'PatientContact';
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export class PatientCommunication extends fhir.BackboneElement {
    /**
     * Default constructor for PatientCommunication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
        else {
            this.language = null;
        }
        if (source['preferred']) {
            this.preferred = new fhir.FhirBoolean({ value: source.preferred });
        }
    }
    /**
     * Preferred-bound Value Set for language (Patient.communication.language)
     */
    static languagePreferredCoding() {
        return LanguagesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['language']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property language:fhir.CodeableConcept fhir: Patient.communication.language:CodeableConcept', });
        }
        if (this["language"]) {
            issues.push(...this.language.doModelValidation());
        }
        if (this["preferred"]) {
            issues.push(...this.preferred.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PatientCommunication._fts_dataType = 'PatientCommunication';
/**
 * There is no assumption that linked patient records have mutual links.
 */
export class PatientLink extends fhir.BackboneElement {
    /**
     * Default constructor for PatientLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['other']) {
            this.other = new fhir.Reference(source.other);
        }
        else {
            this.other = null;
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
    }
    /**
     * Required-bound Value Set for type (Patient.link.type)
     */
    static typeRequiredCoding() {
        return LinkTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['other']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property other:fhir.Reference fhir: Patient.link.other:Reference', });
        }
        if (this["other"]) {
            issues.push(...this.other.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:LinkTypeCodeType fhir: Patient.link.type:code', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PatientLink._fts_dataType = 'PatientLink';
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
export class Patient extends fhir.DomainResource {
    /**
     * Default constructor for Patient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Patient';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        else {
            this.name = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['birthDate']) {
            this.birthDate = new fhir.FhirDate({ value: source.birthDate });
        }
        if (source['deceased']) {
            this.deceased = source.deceased;
        }
        else if (source['deceasedBoolean']) {
            this.deceased = new fhir.FhirBoolean({ value: source.deceasedBoolean });
        }
        else if (source['deceasedDateTime']) {
            this.deceased = new fhir.FhirDateTime({ value: source.deceasedDateTime });
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['maritalStatus']) {
            this.maritalStatus = new fhir.CodeableConcept(source.maritalStatus);
        }
        if (source['multipleBirth']) {
            this.multipleBirth = source.multipleBirth;
        }
        else if (source['multipleBirthBoolean']) {
            this.multipleBirth = new fhir.FhirBoolean({ value: source.multipleBirthBoolean });
        }
        else if (source['multipleBirthInteger']) {
            this.multipleBirth = new fhir.FhirInteger({ value: source.multipleBirthInteger });
        }
        if (source['photo']) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        else {
            this.photo = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.PatientContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.PatientCommunication(x));
        }
        else {
            this.communication = [];
        }
        if (source['generalPractitioner']) {
            this.generalPractitioner = source.generalPractitioner.map((x) => new fhir.Reference(x));
        }
        else {
            this.generalPractitioner = [];
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.PatientLink(x));
        }
        else {
            this.link = [];
        }
    }
    /**
     * Required-bound Value Set for gender (Patient.gender)
     */
    static genderRequiredCoding() {
        return AdministrativeGenderCodings;
    }
    /**
     * Extensible-bound Value Set for maritalStatus (Patient.maritalStatus)
     */
    static maritalStatusExtensibleCoding() {
        return MaritalStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Patient" fhir: Patient.resourceType:"Patient"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation());
        }
        if (this["name"]) {
            this.name.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["birthDate"]) {
            issues.push(...this.birthDate.doModelValidation());
        }
        if (this["address"]) {
            this.address.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["maritalStatus"]) {
            issues.push(...this.maritalStatus.doModelValidation());
        }
        if (this["photo"]) {
            this.photo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["communication"]) {
            this.communication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["generalPractitioner"]) {
            this.generalPractitioner.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["managingOrganization"]) {
            issues.push(...this.managingOrganization.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Patient._fts_dataType = 'Patient';
/**
 * Internal flag to properly serialize choice-type element Patient.deceased[x]
 */
Patient._fts_deceasedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Patient.multipleBirth[x]
 */
Patient._fts_multipleBirthIsChoice = true;
//# sourceMappingURL=data:application/json;base64,