{"version":3,"file":"Substance.js","sources":["../../src/fhir/Substance.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Substance\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { SubstanceStatusCodings, SubstanceStatusCodingType,} from '../fhirValueSets/SubstanceStatusCodings.js';\r\n// @ts-ignore\r\nimport { SubstanceStatusCodes,  SubstanceStatusCodeType } from '../fhirValueSets/SubstanceStatusCodes.js';\r\n// @ts-ignore\r\nimport { SubstanceCategoryCodings, SubstanceCategoryCodingType,} from '../fhirValueSets/SubstanceCategoryCodings.js';\r\n// @ts-ignore\r\nimport { SubstanceCategoryCodes,  SubstanceCategoryCodeType } from '../fhirValueSets/SubstanceCategoryCodes.js';\r\n// @ts-ignore\r\nimport { SubstanceCodeCodings, SubstanceCodeCodingType,} from '../fhirValueSets/SubstanceCodeCodings.js';\r\n// @ts-ignore\r\nimport { SubstanceCodeCodes,  SubstanceCodeCodeType } from '../fhirValueSets/SubstanceCodeCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SubstanceInstance type.\r\n */\r\nexport interface SubstanceInstanceArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Identifier associated with the package/container (usually a label affixed directly).\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.\r\n   */\r\n  expiry?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * The amount of the substance.\r\n   */\r\n  quantity?: fhir.QuantityArgs|undefined;\r\n}\r\n\r\n/**\r\n * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.\r\n */\r\nexport class SubstanceInstance extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceInstance';\r\n  /**\r\n   * Identifier associated with the package/container (usually a label affixed directly).\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.\r\n   */\r\n  public expiry?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * The amount of the substance.\r\n   */\r\n  public quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Default constructor for SubstanceInstance - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceInstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['expiry']) { this.expiry = new fhir.FhirDateTime({value: source.expiry}); }\r\n    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"expiry\"]) { outcome.issue!.push(...this.expiry.doModelValidation().issue!); }\r\n    if (this[\"quantity\"]) { outcome.issue!.push(...this.quantity.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceIngredient type.\r\n */\r\nexport interface SubstanceIngredientArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The amount of the ingredient in the substance - a concentration ratio.\r\n   */\r\n  quantity?: fhir.RatioArgs|undefined;\r\n  /**\r\n   * Another substance that is a component of this substance.\r\n   */\r\n  substance?: fhir.CodeableConcept|fhir.Reference|undefined;\r\n  /**\r\n   * Another substance that is a component of this substance.\r\n   */\r\n  substanceCodeableConcept?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Another substance that is a component of this substance.\r\n   */\r\n  substanceReference?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * A substance can be composed of other substances.\r\n */\r\nexport class SubstanceIngredient extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceIngredient';\r\n  /**\r\n   * The amount of the ingredient in the substance - a concentration ratio.\r\n   */\r\n  public quantity?: fhir.Ratio|undefined;\r\n  /**\r\n   * Another substance that is a component of this substance.\r\n   */\r\n  public substance: (fhir.CodeableConcept|fhir.Reference)|null;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element Substance.ingredient.substance[x]\r\n   */\r\n  protected static readonly _fts_substanceIsChoice:true = true;\r\n  /**\r\n   * Default constructor for SubstanceIngredient - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceIngredientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['quantity']) { this.quantity = new fhir.Ratio(source.quantity); }\r\n    if (source['substance']) { this.substance = source.substance; }\r\n    else if (source['substanceCodeableConcept']) { this.substance = new fhir.CodeableConcept(source.substanceCodeableConcept); }\r\n    else if (source['substanceReference']) { this.substance = new fhir.Reference(source.substanceReference); }\r\n    else { this.substance = null; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"quantity\"]) { outcome.issue!.push(...this.quantity.doModelValidation().issue!); }\r\n    if (!this['substance']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property substance: fhir: Substance.ingredient.substance[x]:', }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the Substance type.\r\n */\r\nexport interface SubstanceArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Substance\"|undefined;\r\n  /**\r\n   * This identifier is associated with the kind of substance in contrast to the  Substance.instance.identifier which is associated with the package/container.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * A code to indicate if the substance is actively used.\r\n   */\r\n  status?: SubstanceStatusCodeType|undefined;\r\n  /**\r\n   * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.\r\n   */\r\n  category?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.\r\n   */\r\n  code: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * A description of the substance - its appearance, handling requirements, and other usage notes.\r\n   */\r\n  description?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.\r\n   */\r\n  instance?: fhir.SubstanceInstanceArgs[]|undefined;\r\n  /**\r\n   * A substance can be composed of other substances.\r\n   */\r\n  ingredient?: fhir.SubstanceIngredientArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * A homogeneous material with a definite composition.\r\n */\r\nexport class Substance extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Substance';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"Substance\";\r\n  /**\r\n   * This identifier is associated with the kind of substance in contrast to the  Substance.instance.identifier which is associated with the package/container.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * A code to indicate if the substance is actively used.\r\n   */\r\n  public status?: SubstanceStatusCodeType|undefined;\r\n  /**\r\n   * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.\r\n   */\r\n  public category?: fhir.CodeableConcept[];\r\n  /**\r\n   * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.\r\n   */\r\n  public code: fhir.CodeableConcept|null;\r\n  /**\r\n   * A description of the substance - its appearance, handling requirements, and other usage notes.\r\n   */\r\n  public description?: fhir.FhirString|undefined;\r\n  /**\r\n   * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.\r\n   */\r\n  public instance?: fhir.SubstanceInstance[];\r\n  /**\r\n   * A substance can be composed of other substances.\r\n   */\r\n  public ingredient?: fhir.SubstanceIngredient[];\r\n  /**\r\n   * Default constructor for Substance - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'Substance';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['status']) { this.status = source.status; }\r\n    if (source['category']) { this.category = source.category.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.category = []; }\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    else { this.code = null; }\r\n    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }\r\n    if (source['instance']) { this.instance = source.instance.map((x) => new fhir.SubstanceInstance(x)); }\r\n    else { this.instance = []; }\r\n    if (source['ingredient']) { this.ingredient = source.ingredient.map((x) => new fhir.SubstanceIngredient(x)); }\r\n    else { this.ingredient = []; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (Substance.status)\r\n   */\r\n  public static statusRequiredCoding():SubstanceStatusCodingType {\r\n    return SubstanceStatusCodings;\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for category (Substance.category)\r\n   */\r\n  public static categoryExtensibleCoding():SubstanceCategoryCodingType {\r\n    return SubstanceCategoryCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"Substance\" fhir: Substance.resourceType:\"Substance\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"category\"]) { this.category.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['code']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Substance.code:CodeableConcept', }));\r\n    }\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"description\"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }\r\n    if (this[\"instance\"]) { this.instance.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"ingredient\"]) { this.ingredient.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Identifier","fhir.FhirDateTime","fhir.Quantity","fhir.BackboneElement","fhir.Ratio","fhir.CodeableConcept","fhir.Reference","fhir.OperationOutcomeIssue","fhir.FhirString","fhir.SubstanceInstance","fhir.SubstanceIngredient","fhir.DomainResource"],"mappings":"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"}