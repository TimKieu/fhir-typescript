/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { QuestionnaireAnswersStatusCodings } from '../fhirValueSets/QuestionnaireAnswersStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirDate } from './FhirDate.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirTime } from './FhirTime.js';
import { FhirString } from './FhirString.js';
import { FhirUri } from './FhirUri.js';
import { Attachment } from './Attachment.js';
import { Coding } from './Coding.js';
import { Quantity } from './Quantity.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { FhirCanonical } from './FhirCanonical.js';

// <auto-generated/>
/**
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
var QuestionnaireResponseItemAnswer = /** @class */ (function (_super) {
    __extends(QuestionnaireResponseItemAnswer, _super);
    /**
     * Default constructor for QuestionnaireResponseItemAnswer - initializes any required elements to null if a value is not provided.
     */
    function QuestionnaireResponseItemAnswer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            _this.value = new FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            _this.value = new FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            _this.value = new FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            _this.value = new FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            _this.value = new FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            _this.value = new FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            _this.value = new Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            _this.value = new Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new QuestionnaireResponseItem(x); });
        }
        else {
            _this.item = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    QuestionnaireResponseItemAnswer.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    QuestionnaireResponseItemAnswer._fts_dataType = 'QuestionnaireResponseItemAnswer';
    /**
     * Internal flag to properly serialize choice-type element QuestionnaireResponse.item.answer.value[x]
     */
    QuestionnaireResponseItemAnswer._fts_valueIsChoice = true;
    return QuestionnaireResponseItemAnswer;
}(BackboneElement));
/**
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
 */
var QuestionnaireResponseItem = /** @class */ (function (_super) {
    __extends(QuestionnaireResponseItem$1, _super);
    /**
     * Default constructor for QuestionnaireResponseItem - initializes any required elements to null if a value is not provided.
     */
    function QuestionnaireResponseItem$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['linkId']) {
            _this.linkId = new FhirString({ value: source.linkId });
        }
        else {
            _this.linkId = null;
        }
        if (source['definition']) {
            _this.definition = new FhirUri({ value: source.definition });
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['answer']) {
            _this.answer = source.answer.map(function (x) { return new QuestionnaireResponseItemAnswer(x); });
        }
        else {
            _this.answer = [];
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new QuestionnaireResponseItem(x); });
        }
        else {
            _this.item = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    QuestionnaireResponseItem$1.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['linkId']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property linkId:fhir.FhirString fhir: QuestionnaireResponse.item.linkId:string', }));
        }
        if (this["linkId"]) {
            (_a = outcome.issue).push.apply(_a, this.linkId.doModelValidation().issue);
        }
        if (this["definition"]) {
            (_b = outcome.issue).push.apply(_b, this.definition.doModelValidation().issue);
        }
        if (this["text"]) {
            (_c = outcome.issue).push.apply(_c, this.text.doModelValidation().issue);
        }
        if (this["answer"]) {
            this.answer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    QuestionnaireResponseItem$1._fts_dataType = 'QuestionnaireResponseItem';
    return QuestionnaireResponseItem$1;
}(BackboneElement));
/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
var QuestionnaireResponse = /** @class */ (function (_super) {
    __extends(QuestionnaireResponse, _super);
    /**
     * Default constructor for QuestionnaireResponse - initializes any required elements to null if a value is not provided.
     */
    function QuestionnaireResponse(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'QuestionnaireResponse';
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['questionnaire']) {
            _this.questionnaire = new FhirCanonical({ value: source.questionnaire });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['authored']) {
            _this.authored = new FhirDateTime({ value: source.authored });
        }
        if (source['author']) {
            _this.author = new Reference(source.author);
        }
        if (source['source']) {
            _this.source = new Reference(source.source);
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new QuestionnaireResponseItem(x); });
        }
        else {
            _this.item = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (QuestionnaireResponse.status)
     */
    QuestionnaireResponse.statusRequiredCoding = function () {
        return QuestionnaireAnswersStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    QuestionnaireResponse.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"QuestionnaireResponse" fhir: QuestionnaireResponse.resourceType:"QuestionnaireResponse"', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["questionnaire"]) {
            (_b = outcome.issue).push.apply(_b, this.questionnaire.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:QuestionnaireAnswersStatusCodeType fhir: QuestionnaireResponse.status:code', }));
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_d = outcome.issue).push.apply(_d, this.encounter.doModelValidation().issue);
        }
        if (this["authored"]) {
            (_e = outcome.issue).push.apply(_e, this.authored.doModelValidation().issue);
        }
        if (this["author"]) {
            (_f = outcome.issue).push.apply(_f, this.author.doModelValidation().issue);
        }
        if (this["source"]) {
            (_g = outcome.issue).push.apply(_g, this.source.doModelValidation().issue);
        }
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    QuestionnaireResponse._fts_dataType = 'QuestionnaireResponse';
    return QuestionnaireResponse;
}(DomainResource));

export { QuestionnaireResponse, QuestionnaireResponseItem, QuestionnaireResponseItemAnswer };
//# sourceMappingURL=QuestionnaireResponse.js.map
