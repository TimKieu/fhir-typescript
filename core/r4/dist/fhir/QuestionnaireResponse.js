// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: QuestionnaireResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuestionnaireAnswersStatusVsValidation } from '../fhirValueSets/QuestionnaireAnswersStatusVsValidation.js';
/**
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export class QuestionnaireResponseItemAnswer extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItemAnswer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'QuestionnaireResponse.item.answer';
        }
        this.vOS('value', exp);
        this.vOA('item', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponseItemAnswer._fts_dataType = 'QuestionnaireResponseItemAnswer';
/**
 * Internal flag to properly serialize choice-type element QuestionnaireResponse.item.answer.value[x]
 */
QuestionnaireResponseItemAnswer._fts_valueIsChoice = true;
/**
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
 */
export class QuestionnaireResponseItem extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId']) {
            this.linkId = new fhir.FhirString({ value: source.linkId });
        }
        else {
            this.linkId = null;
        }
        if (source['_linkId']) {
            if (this.linkId) {
                this.linkId.addExtendedProperties(source._linkId);
            }
            else {
                this.linkId = new fhir.FhirString(source._linkId);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirUri({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirUri(source._definition);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.QuestionnaireResponseItemAnswer(x));
        }
        else {
            this.answer = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'QuestionnaireResponse.item';
        }
        this.vRS('linkId', exp);
        this.vOS('definition', exp);
        this.vOS('text', exp);
        this.vOA('answer', exp);
        this.vOA('item', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponseItem._fts_dataType = 'QuestionnaireResponseItem';
/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
export class QuestionnaireResponse extends fhir.DomainResource {
    /**
     * Default constructor for QuestionnaireResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'QuestionnaireResponse';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['questionnaire']) {
            this.questionnaire = new fhir.FhirCanonical({ value: source.questionnaire });
        }
        if (source['_questionnaire']) {
            if (this.questionnaire) {
                this.questionnaire.addExtendedProperties(source._questionnaire);
            }
            else {
                this.questionnaire = new fhir.FhirCanonical(source._questionnaire);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['authored']) {
            this.authored = new fhir.FhirDateTime({ value: source.authored });
        }
        if (source['_authored']) {
            if (this.authored) {
                this.authored.addExtendedProperties(source._authored);
            }
            else {
                this.authored = new fhir.FhirDateTime(source._authored);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'QuestionnaireResponse';
        }
        this.vRS('resourceType', exp);
        this.vOS('identifier', exp);
        this.vOA('basedOn', exp);
        this.vOA('partOf', exp);
        this.vOS('questionnaire', exp);
        this.vRSV('status', exp, 'QuestionnaireAnswersStatus', QuestionnaireAnswersStatusVsValidation, 'r');
        this.vOS('subject', exp);
        this.vOS('encounter', exp);
        this.vOS('authored', exp);
        this.vOS('author', exp);
        this.vOS('source', exp);
        this.vOA('item', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponse._fts_dataType = 'QuestionnaireResponse';
//# sourceMappingURL=data:application/json;base64,