// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: QuestionnaireResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuestionnaireAnswersStatusCodings, } from '../fhirValueSets/QuestionnaireAnswersStatusCodings.js';
/**
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export class QuestionnaireResponseItemAnswer extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItemAnswer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["item"]) {
            this.item.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponseItemAnswer._fts_dataType = 'QuestionnaireResponseItemAnswer';
/**
 * Internal flag to properly serialize choice-type element QuestionnaireResponse.item.answer.value[x]
 */
QuestionnaireResponseItemAnswer._fts_valueIsChoice = true;
/**
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
 */
export class QuestionnaireResponseItem extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireResponseItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId']) {
            this.linkId = new fhir.FhirString({ value: source.linkId });
        }
        else {
            this.linkId = null;
        }
        if (source['definition']) {
            this.definition = new fhir.FhirUri({ value: source.definition });
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.QuestionnaireResponseItemAnswer(x));
        }
        else {
            this.answer = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['linkId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property linkId:fhir.FhirString fhir: QuestionnaireResponse.item.linkId:string', });
        }
        if (this["linkId"]) {
            issues.push(...this.linkId.doModelValidation());
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["answer"]) {
            this.answer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["item"]) {
            this.item.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponseItem._fts_dataType = 'QuestionnaireResponseItem';
/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 */
export class QuestionnaireResponse extends fhir.DomainResource {
    /**
     * Default constructor for QuestionnaireResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'QuestionnaireResponse';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['questionnaire']) {
            this.questionnaire = new fhir.FhirCanonical({ value: source.questionnaire });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['authored']) {
            this.authored = new fhir.FhirDateTime({ value: source.authored });
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireResponseItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Required-bound Value Set for status (QuestionnaireResponse.status)
     */
    static statusRequiredCoding() {
        return QuestionnaireAnswersStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"QuestionnaireResponse" fhir: QuestionnaireResponse.resourceType:"QuestionnaireResponse"', });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["questionnaire"]) {
            issues.push(...this.questionnaire.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:QuestionnaireAnswersStatusCodeType fhir: QuestionnaireResponse.status:code', });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["authored"]) {
            issues.push(...this.authored.doModelValidation());
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (this["item"]) {
            this.item.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireResponse._fts_dataType = 'QuestionnaireResponse';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVlc3Rpb25uYWlyZVJlc3BvbnNlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9RdWVzdGlvbm5haXJlUmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsdUNBQXVDO0FBRXZDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBRW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsaUNBQWlDLEdBQXdDLE1BQU0sdURBQXVELENBQUM7QUFpRWhKOztHQUVHO0FBQ0gsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLElBQUksQ0FBQyxlQUFlO0lBaUJ2RTs7T0FFRztJQUNILFlBQVksU0FBc0QsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDNUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUFFO2FBQzlDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBQyxDQUFDLENBQUM7U0FBRTthQUNoRyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDaEcsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ2hHLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7U0FBRTthQUN2RixJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDbkcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3ZGLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7U0FBRTthQUM3RixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDcEYsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUFFO2FBQzVGLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENB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QUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzVHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQUU7YUFDakQ7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDN0UsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7U0FBRTtRQUNuRixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDNUYsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FBRTtRQUMxRSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUFFO1FBQzFFLElBQUksTUFBTSxDQUFDLE1B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SSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUMxRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQXZHRDs7R0FFRztBQUM2QixtQ0FBYSxHQUFVLHVCQUF1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBRdWVzdGlvbm5haXJlUmVzcG9uc2VcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFF1ZXN0aW9ubmFpcmVBbnN3ZXJzU3RhdHVzQ29kaW5ncywgUXVlc3Rpb25uYWlyZUFuc3dlcnNTdGF0dXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9RdWVzdGlvbm5haXJlQW5zd2Vyc1N0YXR1c0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFF1ZXN0aW9ubmFpcmVBbnN3ZXJzU3RhdHVzQ29kZXMsICBRdWVzdGlvbm5haXJlQW5zd2Vyc1N0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9RdWVzdGlvbm5haXJlQW5zd2Vyc1N0YXR1c0NvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW1BbnN3ZXIgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFuc3dlckFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIE1vcmUgY29tcGxleCBzdHJ1Y3R1cmVzIChBdHRhY2htZW50LCBSZXNvdXJjZSBhbmQgUXVhbnRpdHkpIHdpbGwgdHlwaWNhbGx5IGJlIGxpbWl0ZWQgdG8gZWxlY3Ryb25pYyBmb3JtcyB0aGF0IGNhbiBleHBvc2UgYW4gYXBwcm9wcmlhdGUgdXNlciBpbnRlcmZhY2UgdG8gY2FwdHVyZSB0aGUgY29tcG9uZW50cyBhbmQgZW5mb3JjZSB0aGUgY29uc3RyYWludHMgb2YgYSBjb21wbGV4IGRhdGEgdHlwZS4gIEFkZGl0aW9uYWwgY29tcGxleCB0eXBlcyBjYW4gYmUgaW50cm9kdWNlZCB0aHJvdWdoIGV4dGVuc2lvbnMuIE11c3QgbWF0Y2ggdGhlIGRhdGF0eXBlIHNwZWNpZmllZCBieSBRdWVzdGlvbm5haXJlLml0ZW0udHlwZSBpbiB0aGUgY29ycmVzcG9uZGluZyBRdWVzdGlvbm5haXJlLlxyXG4gICAqL1xyXG4gIHZhbHVlPzogZmhpci5GaGlyQm9vbGVhbnxmaGlyLkZoaXJEZWNpbWFsfGZoaXIuRmhpckludGVnZXJ8Zmhpci5GaGlyRGF0ZXxmaGlyLkZoaXJEYXRlVGltZXxmaGlyLkZoaXJUaW1lfGZoaXIuRmhpclN0cmluZ3xmaGlyLkZoaXJVcml8Zmhpci5BdHRhY2htZW50fGZoaXIuQ29kaW5nfGZoaXIuUXVhbnRpdHl8Zmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1vcmUgY29tcGxleCBzdHJ1Y3R1cmVzIChBdHRhY2htZW50LCBSZXNvdXJjZSBhbmQgUXVhbnRpdHkpIHdpbGwgdHlwaWNhbGx5IGJlIGxpbWl0ZWQgdG8gZWxlY3Ryb25pYyBmb3JtcyB0aGF0IGNhbiBleHBvc2UgYW4gYXBwcm9wcmlhdGUgdXNlciBpbnRlcmZhY2UgdG8gY2FwdHVyZSB0aGUgY29tcG9uZW50cyBhbmQgZW5mb3JjZSB0aGUgY29uc3RyYWludHMgb2YgYSBjb21wbGV4IGRhdGEgdHlwZS4gIEFkZGl0aW9uYWwgY29tcGxleCB0eXBlcyBjYW4gYmUgaW50cm9kdWNlZCB0aHJvdWdoIGV4dGVuc2lvbnMuIE11c3QgbWF0Y2ggdGhlIGRhdGF0eXBlIHNwZWNpZmllZCBieSBRdWVzdGlvbm5haXJlLml0ZW0udHlwZSBpbiB0aGUgY29ycmVzcG9uZGluZyBRdWVzdGlvbm5haXJlLlxyXG4gICAqL1xyXG4gIHZhbHVlQm9vbGVhbj86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9yZSBjb21wbGV4IHN0cnVjdHVyZXMgKEF0dGFjaG1lbnQsIFJlc291cmNlIGFuZCBRdWFudGl0eSkgd2lsbCB0eXBpY2FsbHkgYmUgbGltaXRlZCB0byBlbGVjdHJvbmljIGZvcm1zIHRoYXQgY2FuIGV4cG9zZSBhbiBhcHByb3ByaWF0ZSB1c2VyIGludGVyZmFjZSB0byBjYXB0dXJlIHRoZSBjb21wb25lbnRzIGFuZCBlbmZvcmNlIHRoZSBjb25zdHJhaW50cyBvZiBhIGNvbXBsZXggZGF0YSB0eXBlLiAgQWRkaXRpb25hbCBjb21wbGV4IHR5cGVzIGNhbiBiZSBpbnRyb2R1Y2VkIHRocm91Z2ggZXh0ZW5zaW9ucy4gTXVzdCBtYXRjaCB0aGUgZGF0YXR5cGUgc3BlY2lmaWVkIGJ5IFF1ZXN0aW9ubmFpcmUuaXRlbS50eXBlIGluIHRoZSBjb3JyZXNwb25kaW5nIFF1ZXN0aW9ubmFpcmUuXHJcbiAgICovXHJcbiAgdmFsdWVEZWNpbWFsPzogZmhpci5GaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1vcmUgY29tcGxleCBzdHJ1Y3R1cmVzIChBdHRhY2htZW50LCBSZXNvdXJjZSBhbmQgUXVhbnRpdHkpIHdpbGwgdHlwaWNhbGx5IGJlIGxpbWl0ZWQgdG8gZWxlY3Ryb25pYyBmb3JtcyB0aGF0IGNhbiBleHBvc2UgYW4gYXBwcm9wcmlhdGUgdXNlciBpbnRlcmZhY2UgdG8gY2FwdHVyZSB0aGUgY29tcG9uZW50cyBhbmQgZW5mb3JjZSB0aGUgY29uc3RyYWludHMgb2YgYSBjb21wbGV4IGRhdGEgdHlwZS4gIEFkZGl0aW9uYWwgY29tcGxleCB0eXBlcyBjYW4gYmUgaW50cm9kdWNlZCB0aHJvdWdoIGV4dGVuc2lvbnMuIE11c3QgbWF0Y2ggdGhlIGRhdGF0eXBlIHNwZWNpZmllZCBieSBRdWVzdGlvbm5haXJlLml0ZW0udHlwZSBpbiB0aGUgY29ycmVzcG9uZGluZyBRdWVzdGlvbm5haXJlLlxyXG4gICAqL1xyXG4gIHZhbHVlSW50ZWdlcj86IGZoaXIuRmhpckludGVnZXJ8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNb3JlIGNvbXBsZXggc3RydWN0dXJlcyAoQXR0YWNobWVudCwgUmVzb3VyY2UgYW5kIFF1YW50aXR5KSB3aWxsIHR5cGljYWxseSBiZSBsaW1pdGVkIHRvIGVsZWN0cm9uaWMgZm9ybXMgdGhhdCBjYW4gZXhwb3NlIGFuIGFwcHJvcHJpYXRlIHVzZXIgaW50ZXJmYWNlIHRvIGNhcHR1cmUgdGhlIGNvbXBvbmVudHMgYW5kIGVuZm9yY2UgdGhlIGNvbnN0cmFpbnRzIG9mIGEgY29tcGxleCBkYXRhIHR5cGUuICBBZGRpdGlvbmFsIGNvbXBsZXggdHlwZXMgY2FuIGJlIGludHJvZHVjZWQgdGhyb3VnaCBleHRlbnNpb25zLiBNdXN0IG1hdGNoIHRoZSBkYXRhdHlwZSBzcGVjaWZpZWQgYnkgUXVlc3Rpb25uYWlyZS5pdGVtLnR5cGUgaW4gdGhlIGNvcnJlc3BvbmRpbmcgUXVlc3Rpb25uYWlyZS5cclxuICAgKi9cclxuICB2YWx1ZURhdGU/OiBmaGlyLkZoaXJEYXRlfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9yZSBjb21wbGV4IHN0cnVjdHVyZXMgKEF0dGFjaG1lbnQsIFJlc291cmNlIGFuZCBRdWFudGl0eSkgd2lsbCB0eXBpY2FsbHkgYmUgbGltaXRlZCB0byBlbGVjdHJvbmljIGZvcm1zIHRoYXQgY2FuIGV4cG9zZSBhbiBhcHByb3ByaWF0ZSB1c2VyIGludGVyZmFjZSB0byBjYXB0dXJlIHRoZSBjb21wb25lbnRzIGFuZCBlbmZvcmNlIHRoZSBjb25zdHJhaW50cyBvZiBhIGNvbXBsZXggZGF0YSB0eXBlLiAgQWRkaXRpb25hbCBjb21wbGV4IHR5cGVzIGNhbiBiZSBpbnRyb2R1Y2VkIHRocm91Z2ggZXh0ZW5zaW9ucy4gTXVzdCBtYXRjaCB0aGUgZGF0YXR5cGUgc3BlY2lmaWVkIGJ5IFF1ZXN0aW9ubmFpcmUuaXRlbS50eXBlIGluIHRoZSBjb3JyZXNwb25kaW5nIFF1ZXN0aW9ubmFpcmUuXHJcbiAgICovXHJcbiAgdmFsdWVEYXRlVGltZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9yZSBjb21wbGV4IHN0cnVjdHVyZXMgKEF0dGFjaG1lbnQsIFJlc291cmNlIGFuZCBRdWFudGl0eSkgd2lsbCB0eXBpY2FsbHkgYmUgbGltaXRlZCB0byBlbGVjdHJvbmljIGZvcm1zIHRoYXQgY2FuIGV4cG9zZSBhbiBhcHByb3ByaWF0ZSB1c2VyIGludGVyZmFjZSB0byBjYXB0dXJlIHRoZSBjb21wb25lbnRzIGFuZCBlbmZvcmNlIHRoZSBjb25zdHJhaW50cyBvZiBhIGNvbXBsZXggZGF0YSB0eXBlLiAgQWRkaXRpb25hbCBjb21wbGV4IHR5cGVzIGNhbiBiZSBpbnRyb2R1Y2VkIHRocm91Z2ggZXh0ZW5zaW9ucy4gTXVzdCBtYXRjaCB0aGUgZGF0YXR5cGUgc3BlY2lmaWVkIGJ5IFF1ZXN0aW9ubmFpcmUuaXRlbS50eXBlIGluIHRoZSBjb3JyZXNwb25kaW5nIFF1ZXN0aW9ubmFpcmUuXHJcbiAgICovXHJcbiAgdmFsdWVUaW1lPzogZmhpci5GaGlyVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1vcmUgY29tcGxleCBzdHJ1Y3R1cmVzIChBdHRhY2htZW50LCBSZXNvdXJjZSBhbmQgUXVhbnRpdHkpIHdpbGwgdHlwaWNhbGx5IGJlIGxpbWl0ZWQgdG8gZWxlY3Ryb25pYyBmb3JtcyB0aGF0IGNhbiBleHBvc2UgYW4gYXBwcm9wcmlhdGUgdXNlciBpbnRlcmZhY2UgdG8gY2FwdHVyZSB0aGUgY29tcG9uZW50cyBhbmQgZW5mb3JjZSB0aGUgY29uc3RyYWludHMgb2YgYSBjb21wbGV4IGRhdGEgdHlwZS4gIEFkZGl0aW9uYWwgY29tcGxleCB0eXBlcyBjYW4gYmUgaW50cm9kdWNlZCB0aHJvdWdoIGV4dGVuc2lvbnMuIE11c3QgbWF0Y2ggdGhlIGRhdGF0eXBlIHNwZWNpZmllZCBieSBRdWVzdGlvbm5haXJlLml0ZW0udHlwZSBpbiB0aGUgY29ycmVzcG9uZGluZyBRdWVzdGlvbm5haXJlLlxyXG4gICAqL1xyXG4gIHZhbHVlU3RyaW5nPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9yZSBjb21wbGV4IHN0cnVjdHVyZXMgKEF0dGFjaG1lbnQsIFJlc291cmNlIGFuZCBRdWFudGl0eSkgd2lsbCB0eXBpY2FsbHkgYmUgbGltaXRlZCB0byBlbGVjdHJvbmljIGZvcm1zIHRoYXQgY2FuIGV4cG9zZSBhbiBhcHByb3ByaWF0ZSB1c2VyIGludGVyZmFjZSB0byBjYXB0dXJlIHRoZSBjb21wb25lbnRzIGFuZCBlbmZvcmNlIHRoZSBjb25zdHJhaW50cyBvZiBhIGNvbXBsZXggZGF0YSB0eXBlLiAgQWRkaXRpb25hbCBjb21wbGV4IHR5cGVzIGNhbiBiZSBpbnRyb2R1Y2VkIHRocm91Z2ggZXh0ZW5zaW9ucy4gTXVzdCBtYXRjaCB0aGUgZGF0YXR5cGUgc3BlY2lmaWVkIGJ5IFF1ZXN0aW9ubmFpcmUuaXRlbS50eXBlIGluIHRoZSBjb3JyZXNwb25kaW5nIFF1ZXN0aW9ubmFpcmUuXHJcbiAgICovXHJcbiAgdmFsdWVVcmk/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNb3JlIGNvbXBsZXggc3RydWN0dXJlcyAoQXR0YWNobWVudCwgUmVzb3VyY2UgYW5kIFF1YW50aXR5KSB3aWxsIHR5cGljYWxseSBiZSBsaW1pdGVkIHRvIGVsZWN0cm9uaWMgZm9ybXMgdGhhdCBjYW4gZXhwb3NlIGFuIGFwcHJvcHJpYXRlIHVzZXIgaW50ZXJmYWNlIHRvIGNhcHR1cmUgdGhlIGNvbXBvbmVudHMgYW5kIGVuZm9yY2UgdGhlIGNvbnN0cmFpbnRzIG9mIGEgY29tcGxleCBkYXRhIHR5cGUuICBBZGRpdGlvbmFsIGNvbXBsZXggdHlwZXMgY2FuIGJlIGludHJvZHVjZWQgdGhyb3VnaCBleHRlbnNpb25zLiBNdXN0IG1hdGNoIHRoZSBkYXRhdHlwZSBzcGVjaWZpZWQgYnkgUXVlc3Rpb25uYWlyZS5pdGVtLnR5cGUgaW4gdGhlIGNvcnJlc3BvbmRpbmcgUXVlc3Rpb25uYWlyZS5cclxuICAgKi9cclxuICB2YWx1ZUF0dGFjaG1lbnQ/OiBmaGlyLkF0dGFjaG1lbnRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNb3JlIGNvbXBsZXggc3RydWN0dXJlcyAoQXR0YWNobWVudCwgUmVzb3VyY2UgYW5kIFF1YW50aXR5KSB3aWxsIHR5cGljYWxseSBiZSBsaW1pdGVkIHRvIGVsZWN0cm9uaWMgZm9ybXMgdGhhdCBjYW4gZXhwb3NlIGFuIGFwcHJvcHJpYXRlIHVzZXIgaW50ZXJmYWNlIHRvIGNhcHR1cmUgdGhlIGNvbXBvbmVudHMgYW5kIGVuZm9yY2UgdGhlIGNvbnN0cmFpbnRzIG9mIGEgY29tcGxleCBkYXRhIHR5cGUuICBBZGRpdGlvbmFsIGNvbXBsZXggdHlwZXMgY2FuIGJlIGludHJvZHVjZWQgdGhyb3VnaCBleHRlbnNpb25zLiBNdXN0IG1hdGNoIHRoZSBkYXRhdHlwZSBzcGVjaWZpZWQgYnkgUXVlc3Rpb25uYWlyZS5pdGVtLnR5cGUgaW4gdGhlIGNvcnJlc3BvbmRpbmcgUXVlc3Rpb25uYWlyZS5cclxuICAgKi9cclxuICB2YWx1ZUNvZGluZz86IGZoaXIuQ29kaW5nQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9yZSBjb21wbGV4IHN0cnVjdHVyZXMgKEF0dGFjaG1lbnQsIFJlc291cmNlIGFuZCBRdWFudGl0eSkgd2lsbCB0eXBpY2FsbHkgYmUgbGltaXRlZCB0byBlbGVjdHJvbmljIGZvcm1zIHRoYXQgY2FuIGV4cG9zZSBhbiBhcHByb3ByaWF0ZSB1c2VyIGludGVyZmFjZSB0byBjYXB0dXJlIHRoZSBjb21wb25lbnRzIGFuZCBlbmZvcmNlIHRoZSBjb25zdHJhaW50cyBvZiBhIGNvbXBsZXggZGF0YSB0eXBlLiAgQWRkaXRpb25hbCBjb21wbGV4IHR5cGVzIGNhbiBiZSBpbnRyb2R1Y2VkIHRocm91Z2ggZXh0ZW5zaW9ucy4gTXVzdCBtYXRjaCB0aGUgZGF0YXR5cGUgc3BlY2lmaWVkIGJ5IFF1ZXN0aW9ubmFpcmUuaXRlbS50eXBlIGluIHRoZSBjb3JyZXNwb25kaW5nIFF1ZXN0aW9ubmFpcmUuXHJcbiAgICovXHJcbiAgdmFsdWVRdWFudGl0eT86IGZoaXIuUXVhbnRpdHlBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNb3JlIGNvbXBsZXggc3RydWN0dXJlcyAoQXR0YWNobWVudCwgUmVzb3VyY2UgYW5kIFF1YW50aXR5KSB3aWxsIHR5cGljYWxseSBiZSBsaW1pdGVkIHRvIGVsZWN0cm9uaWMgZm9ybXMgdGhhdCBjYW4gZXhwb3NlIGFuIGFwcHJvcHJpYXRlIHVzZXIgaW50ZXJmYWNlIHRvIGNhcHR1cmUgdGhlIGNvbXBvbmVudHMgYW5kIGVuZm9yY2UgdGhlIGNvbnN0cmFpbnRzIG9mIGEgY29tcGxleCBkYXRhIHR5cGUuICBBZGRpdGlvbmFsIGNvbXBsZXggdHlwZXMgY2FuIGJlIGludHJvZHVjZWQgdGhyb3VnaCBleHRlbnNpb25zLiBNdXN0IG1hdGNoIHRoZSBkYXRhdHlwZSBzcGVjaWZpZWQgYnkgUXVlc3Rpb25uYWlyZS5pdGVtLnR5cGUgaW4gdGhlIGNvcnJlc3BvbmRpbmcgUXVlc3Rpb25uYWlyZS5cclxuICAgKi9cclxuICB2YWx1ZVJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTmVzdGVkIGdyb3VwcyBhbmQvb3IgcXVlc3Rpb25zIGZvdW5kIHdpdGhpbiB0aGlzIHBhcnRpY3VsYXIgYW5zd2VyLlxyXG4gICAqL1xyXG4gIGl0ZW0/OiBmaGlyLlF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW1BcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHZhbHVlIGlzIG5lc3RlZCBiZWNhdXNlIHdlIGNhbm5vdCBoYXZlIGEgcmVwZWF0aW5nIHN0cnVjdHVyZSB0aGF0IGhhcyB2YXJpYWJsZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW1BbnN3ZXIgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdRdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtQW5zd2VyJztcclxuICAvKipcclxuICAgKiBNb3JlIGNvbXBsZXggc3RydWN0dXJlcyAoQXR0YWNobWVudCwgUmVzb3VyY2UgYW5kIFF1YW50aXR5KSB3aWxsIHR5cGljYWxseSBiZSBsaW1pdGVkIHRvIGVsZWN0cm9uaWMgZm9ybXMgdGhhdCBjYW4gZXhwb3NlIGFuIGFwcHJvcHJpYXRlIHVzZXIgaW50ZXJmYWNlIHRvIGNhcHR1cmUgdGhlIGNvbXBvbmVudHMgYW5kIGVuZm9yY2UgdGhlIGNvbnN0cmFpbnRzIG9mIGEgY29tcGxleCBkYXRhIHR5cGUuICBBZGRpdGlvbmFsIGNvbXBsZXggdHlwZXMgY2FuIGJlIGludHJvZHVjZWQgdGhyb3VnaCBleHRlbnNpb25zLiBNdXN0IG1hdGNoIHRoZSBkYXRhdHlwZSBzcGVjaWZpZWQgYnkgUXVlc3Rpb25uYWlyZS5pdGVtLnR5cGUgaW4gdGhlIGNvcnJlc3BvbmRpbmcgUXVlc3Rpb25uYWlyZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWU/OiAoZmhpci5GaGlyQm9vbGVhbnxmaGlyLkZoaXJEZWNpbWFsfGZoaXIuRmhpckludGVnZXJ8Zmhpci5GaGlyRGF0ZXxmaGlyLkZoaXJEYXRlVGltZXxmaGlyLkZoaXJUaW1lfGZoaXIuRmhpclN0cmluZ3xmaGlyLkZoaXJVcml8Zmhpci5BdHRhY2htZW50fGZoaXIuQ29kaW5nfGZoaXIuUXVhbnRpdHl8Zmhpci5SZWZlcmVuY2UpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5pdGVtLmFuc3dlci52YWx1ZVt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c192YWx1ZUlzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIE5lc3RlZCBncm91cHMgYW5kL29yIHF1ZXN0aW9ucyBmb3VuZCB3aXRoaW4gdGhpcyBwYXJ0aWN1bGFyIGFuc3dlci5cclxuICAgKi9cclxuICBwdWJsaWMgaXRlbT86IGZoaXIuUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW1BbnN3ZXIgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxRdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtQW5zd2VyQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3ZhbHVlJ10pIHsgdGhpcy52YWx1ZSA9IHNvdXJjZS52YWx1ZTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWyd2YWx1ZUJvb2xlYW4nXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UudmFsdWVCb29sZWFufSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVEZWNpbWFsJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJEZWNpbWFsKHt2YWx1ZTogc291cmNlLnZhbHVlRGVjaW1hbH0pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlSW50ZWdlciddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlySW50ZWdlcih7dmFsdWU6IHNvdXJjZS52YWx1ZUludGVnZXJ9KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWyd2YWx1ZURhdGUnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpckRhdGUoe3ZhbHVlOiBzb3VyY2UudmFsdWVEYXRlfSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVEYXRlVGltZSddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UudmFsdWVEYXRlVGltZX0pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlVGltZSddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyVGltZSh7dmFsdWU6IHNvdXJjZS52YWx1ZVRpbWV9KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWyd2YWx1ZVN0cmluZyddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnZhbHVlU3RyaW5nfSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVVcmknXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHNvdXJjZS52YWx1ZVVyaX0pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlQXR0YWNobWVudCddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5BdHRhY2htZW50KHNvdXJjZS52YWx1ZUF0dGFjaG1lbnQpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlQ29kaW5nJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkNvZGluZyhzb3VyY2UudmFsdWVDb2RpbmcpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlUXVhbnRpdHknXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuUXVhbnRpdHkoc291cmNlLnZhbHVlUXVhbnRpdHkpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlUmVmZXJlbmNlJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UudmFsdWVSZWZlcmVuY2UpOyB9XHJcbiAgICBpZiAoc291cmNlWydpdGVtJ10pIHsgdGhpcy5pdGVtID0gc291cmNlLml0ZW0ubWFwKCh4KSA9PiBuZXcgZmhpci5RdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaXRlbSA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcIml0ZW1cIl0pIHsgdGhpcy5pdGVtLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW0gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpdGVtIGZyb20gdGhlIFF1ZXN0aW9ubmFpcmUgdGhhdCBjb3JyZXNwb25kcyB0byB0aGlzIGl0ZW0gaW4gdGhlIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBsaW5rSWQ6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBFbGVtZW50RGVmaW5pdGlvbiBtdXN0IGJlIGluIGEgW1N0cnVjdHVyZURlZmluaXRpb25dKHN0cnVjdHVyZWRlZmluaXRpb24uaHRtbCMpLCBhbmQgbXVzdCBoYXZlIGEgZnJhZ21lbnQgaWRlbnRpZmllciB0aGF0IGlkZW50aWZpZXMgdGhlIHNwZWNpZmljIGRhdGEgZWxlbWVudCBieSBpdHMgaWQgKEVsZW1lbnQuaWQpLiBFLmcuIGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9PYnNlcnZhdGlvbiNPYnNlcnZhdGlvbi52YWx1ZVt4XS5cclxuICAgKiBUaGVyZSBpcyBubyBuZWVkIGZvciB0aGlzIGVsZW1lbnQgaWYgdGhlIGl0ZW0gcG9pbnRlZCB0byBieSB0aGUgbGlua0lkIGhhcyBhIGRlZmluaXRpb24gbGlzdGVkLlxyXG4gICAqL1xyXG4gIGRlZmluaXRpb24/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUZXh0IHRoYXQgaXMgZGlzcGxheWVkIGFib3ZlIHRoZSBjb250ZW50cyBvZiB0aGUgZ3JvdXAgb3IgYXMgdGhlIHRleHQgb2YgdGhlIHF1ZXN0aW9uIGJlaW5nIGFuc3dlcmVkLlxyXG4gICAqL1xyXG4gIHRleHQ/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgaXMgbmVzdGVkIGJlY2F1c2Ugd2UgY2Fubm90IGhhdmUgYSByZXBlYXRpbmcgc3RydWN0dXJlIHRoYXQgaGFzIHZhcmlhYmxlIHR5cGUuXHJcbiAgICovXHJcbiAgYW5zd2VyPzogZmhpci5RdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtQW5zd2VyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBRdWVzdGlvbnMgb3Igc3ViLWdyb3VwcyBuZXN0ZWQgYmVuZWF0aCBhIHF1ZXN0aW9uIG9yIGdyb3VwLlxyXG4gICAqL1xyXG4gIGl0ZW0/OiBmaGlyLlF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW1BcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogR3JvdXBzIGNhbm5vdCBoYXZlIGFuc3dlcnMgYW5kIHRoZXJlZm9yZSBtdXN0IG5lc3QgZGlyZWN0bHkgd2l0aGluIGl0ZW0uIFdoZW4gZGVhbGluZyB3aXRoIHF1ZXN0aW9ucywgbmVzdGluZyBtdXN0IG9jY3VyIHdpdGhpbiBlYWNoIGFuc3dlciBiZWNhdXNlIHNvbWUgcXVlc3Rpb25zIG1heSBoYXZlIG11bHRpcGxlIGFuc3dlcnMgKGFuZCB0aGUgbmVzdGluZyBvY2N1cnMgZm9yIGVhY2ggYW5zd2VyKS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBRdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbSc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGl0ZW0gZnJvbSB0aGUgUXVlc3Rpb25uYWlyZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoaXMgaXRlbSBpbiB0aGUgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsaW5rSWQ6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBFbGVtZW50RGVmaW5pdGlvbiBtdXN0IGJlIGluIGEgW1N0cnVjdHVyZURlZmluaXRpb25dKHN0cnVjdHVyZWRlZmluaXRpb24uaHRtbCMpLCBhbmQgbXVzdCBoYXZlIGEgZnJhZ21lbnQgaWRlbnRpZmllciB0aGF0IGlkZW50aWZpZXMgdGhlIHNwZWNpZmljIGRhdGEgZWxlbWVudCBieSBpdHMgaWQgKEVsZW1lbnQuaWQpLiBFLmcuIGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9PYnNlcnZhdGlvbiNPYnNlcnZhdGlvbi52YWx1ZVt4XS5cclxuICAgKiBUaGVyZSBpcyBubyBuZWVkIGZvciB0aGlzIGVsZW1lbnQgaWYgdGhlIGl0ZW0gcG9pbnRlZCB0byBieSB0aGUgbGlua0lkIGhhcyBhIGRlZmluaXRpb24gbGlzdGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWZpbml0aW9uPzogZmhpci5GaGlyVXJpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUZXh0IHRoYXQgaXMgZGlzcGxheWVkIGFib3ZlIHRoZSBjb250ZW50cyBvZiB0aGUgZ3JvdXAgb3IgYXMgdGhlIHRleHQgb2YgdGhlIHF1ZXN0aW9uIGJlaW5nIGFuc3dlcmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0ZXh0PzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgaXMgbmVzdGVkIGJlY2F1c2Ugd2UgY2Fubm90IGhhdmUgYSByZXBlYXRpbmcgc3RydWN0dXJlIHRoYXQgaGFzIHZhcmlhYmxlIHR5cGUuXHJcbiAgICovXHJcbiAgcHVibGljIGFuc3dlcj86IGZoaXIuUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFuc3dlcltdO1xyXG4gIC8qKlxyXG4gICAqIFF1ZXN0aW9ucyBvciBzdWItZ3JvdXBzIG5lc3RlZCBiZW5lYXRoIGEgcXVlc3Rpb24gb3IgZ3JvdXAuXHJcbiAgICovXHJcbiAgcHVibGljIGl0ZW0/OiBmaGlyLlF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW1bXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBRdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydsaW5rSWQnXSkgeyB0aGlzLmxpbmtJZCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubGlua0lkfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxpbmtJZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RlZmluaXRpb24nXSkgeyB0aGlzLmRlZmluaXRpb24gPSBuZXcgZmhpci5GaGlyVXJpKHt2YWx1ZTogc291cmNlLmRlZmluaXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGV4dCddKSB7IHRoaXMudGV4dCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudGV4dH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydhbnN3ZXInXSkgeyB0aGlzLmFuc3dlciA9IHNvdXJjZS5hbnN3ZXIubWFwKCh4KSA9PiBuZXcgZmhpci5RdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtQW5zd2VyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYW5zd2VyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2l0ZW0nXSkgeyB0aGlzLml0ZW0gPSBzb3VyY2UuaXRlbS5tYXAoKHgpID0+IG5ldyBmaGlyLlF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW0oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pdGVtID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1snbGlua0lkJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBsaW5rSWQ6Zmhpci5GaGlyU3RyaW5nIGZoaXI6IFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5pdGVtLmxpbmtJZDpzdHJpbmcnLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wibGlua0lkXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubGlua0lkLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImRlZmluaXRpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kZWZpbml0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInRleHRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50ZXh0LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImFuc3dlclwiXSkgeyB0aGlzLmFuc3dlci5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiaXRlbVwiXSkgeyB0aGlzLml0ZW0uZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXN0aW9ubmFpcmVSZXNwb25zZUFyZ3MgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlQXJncyB7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIlF1ZXN0aW9ubmFpcmVSZXNwb25zZVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGJ1c2luZXNzIGlkZW50aWZpZXIgYXNzaWduZWQgdG8gYSBwYXJ0aWN1bGFyIGNvbXBsZXRlZCAob3IgcGFydGlhbGx5IGNvbXBsZXRlZCkgcXVlc3Rpb25uYWlyZS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG9yZGVyLCBwcm9wb3NhbCBvciBwbGFuIHRoYXQgaXMgZnVsZmlsbGVkIGluIHdob2xlIG9yIGluIHBhcnQgYnkgdGhpcyBRdWVzdGlvbm5haXJlUmVzcG9uc2UuICBGb3IgZXhhbXBsZSwgYSBTZXJ2aWNlUmVxdWVzdCBzZWVraW5nIGFuIGludGFrZSBhc3Nlc3NtZW50IG9yIGEgZGVjaXNpb24gc3VwcG9ydCByZWNvbW1lbmRhdGlvbiB0byBhc3Nlc3MgZm9yIHBvc3QtcGFydHVtIGRlcHJlc3Npb24uXHJcbiAgICovXHJcbiAgYmFzZWRPbj86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb21wb3NpdGlvbiBvZiBxdWVzdGlvbm5haXJlIHJlc3BvbnNlcyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIHBhcmVudCBxdWVzdGlvbm5haXJlIGhhdmluZyBhbnN3ZXJzIHRoYXQgcmVmZXJlbmNlIHRoZSBjaGlsZCBxdWVzdGlvbm5haXJlLiAgRm9yIHJlbGF0aW9uc2hpcHMgdG8gcmVmZXJyYWxzLCBhbmQgb3RoZXIgdHlwZXMgb2YgcmVxdWVzdHMsIHVzZSBiYXNlZE9uLlxyXG4gICAqL1xyXG4gIHBhcnRPZj86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBhIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSByZWZlcmVuY2VzIGEgUXVlc3Rpb25uYWlyZSwgdGhlbiB0aGUgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIHN0cnVjdHVyZSBtdXN0IGJlIGNvbnNpc3RlbnQgd2l0aCB0aGUgUXVlc3Rpb25uYWlyZSAoaS5lLiBxdWVzdGlvbnMgbXVzdCBiZSBvcmdhbml6ZWQgaW50byB0aGUgc2FtZSBncm91cHMsIG5lc3RlZCBxdWVzdGlvbnMgbXVzdCBzdGlsbCBiZSBuZXN0ZWQsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIHF1ZXN0aW9ubmFpcmU/OiBmaGlyLkZoaXJDYW5vbmljYWx8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyBjb2RlcyB0aGF0IG1hcmsgdGhlIHJlc291cmNlIGFzIG5vdCBjdXJyZW50bHkgdmFsaWQuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBRdWVzdGlvbm5haXJlQW5zd2Vyc1N0YXR1c0NvZGVUeXBlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIFF1ZXN0aW9ubmFpcmUgZGVjbGFyZWQgYSBzdWJqZWN0VHlwZSwgdGhlIHJlc291cmNlIHBvaW50ZWQgdG8gYnkgdGhpcyBlbGVtZW50IG11c3QgYmUgYW4gaW5zdGFuY2Ugb2Ygb25lIG9mIHRoZSBsaXN0ZWQgdHlwZXMuXHJcbiAgICovXHJcbiAgc3ViamVjdD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyB3aWxsIHR5cGljYWxseSBiZSB0aGUgZW5jb3VudGVyIHRoZSBldmVudCBvY2N1cnJlZCB3aXRoaW4sIGJ1dCBzb21lIGFjdGl2aXRpZXMgbWF5IGJlIGluaXRpYXRlZCBwcmlvciB0byBvciBhZnRlciB0aGUgb2ZmaWNpYWwgY29tcGxldGlvbiBvZiBhbiBlbmNvdW50ZXIgYnV0IHN0aWxsIGJlIHRpZWQgdG8gdGhlIGNvbnRleHQgb2YgdGhlIGVuY291bnRlci4gQSBxdWVzdGlvbm5haXJlIHRoYXQgd2FzIGluaXRpYXRlZCBkdXJpbmcgYW4gZW5jb3VudGVyIGJ1dCBub3QgZnVsbHkgY29tcGxldGVkIGR1cmluZyB0aGUgZW5jb3VudGVyIHdvdWxkIHN0aWxsIGdlbmVyYWxseSBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVuY291bnRlci5cclxuICAgKi9cclxuICBlbmNvdW50ZXI/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1heSBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgbGFzdFVwZGF0ZVRpbWUgb2YgdGhlIHJlc291cmNlIGl0c2VsZiwgYmVjYXVzZSB0aGF0IHJlZmxlY3RzIHdoZW4gdGhlIGRhdGEgd2FzIGtub3duIHRvIHRoZSBzZXJ2ZXIsIG5vdCB3aGVuIHRoZSBkYXRhIHdhcyBjYXB0dXJlZC5cclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgb3B0aW9uYWwgdG8gYWxsb3cgZm9yIHN5c3RlbXMgdGhhdCBtaWdodCBub3Qga25vdyB0aGUgdmFsdWUsIGhvd2V2ZXIgaXQgU0hPVUxEIGJlIHBvcHVsYXRlZCBpZiBwb3NzaWJsZS5cclxuICAgKi9cclxuICBhdXRob3JlZD86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBhIHN1YmplY3QncyBhbnN3ZXJzIHRvIG11bHRpcGxlIGNob2ljZSBvcHRpb25zIGFuZCBkZXRlcm1pbmluZyB3aGF0IHRvIHB1dCBpbiB0aGUgdGV4dHVhbCBhbnN3ZXIgaXMgYSBtYXR0ZXIgb2YgaW50ZXJwcmV0YXRpb24uICBBdXRob3JpbmcgYnkgZGV2aWNlIHdvdWxkIGluZGljYXRlIHRoYXQgc29tZSBwb3J0aW9uIG9mIHRoZSBxdWVzdGlvbm5haXJlIGhhZCBiZWVuIGF1dG8tcG9wdWxhdGVkLlxyXG4gICAqL1xyXG4gIGF1dGhvcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgbm90IHNwZWNpZmllZCwgbm8gaW5mZXJlbmNlIGNhbiBiZSBtYWRlIGFib3V0IHdobyBwcm92aWRlZCB0aGUgZGF0YS5cclxuICAgKi9cclxuICBzb3VyY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEdyb3VwcyBjYW5ub3QgaGF2ZSBhbnN3ZXJzIGFuZCB0aGVyZWZvcmUgbXVzdCBuZXN0IGRpcmVjdGx5IHdpdGhpbiBpdGVtLiBXaGVuIGRlYWxpbmcgd2l0aCBxdWVzdGlvbnMsIG5lc3RpbmcgbXVzdCBvY2N1ciB3aXRoaW4gZWFjaCBhbnN3ZXIgYmVjYXVzZSBzb21lIHF1ZXN0aW9ucyBtYXkgaGF2ZSBtdWx0aXBsZSBhbnN3ZXJzIChhbmQgdGhlIG5lc3Rpbmcgb2NjdXJzIGZvciBlYWNoIGFuc3dlcikuXHJcbiAgICovXHJcbiAgaXRlbT86IGZoaXIuUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIHN0cnVjdHVyZWQgc2V0IG9mIHF1ZXN0aW9ucyBhbmQgdGhlaXIgYW5zd2Vycy4gVGhlIHF1ZXN0aW9ucyBhcmUgb3JkZXJlZCBhbmQgZ3JvdXBlZCBpbnRvIGNvaGVyZW50IHN1YnNldHMsIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHN0cnVjdHVyZSBvZiB0aGUgZ3JvdXBpbmcgb2YgdGhlIHF1ZXN0aW9ubmFpcmUgYmVpbmcgcmVzcG9uZGVkIHRvLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2Uge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnUXVlc3Rpb25uYWlyZVJlc3BvbnNlJztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIlF1ZXN0aW9ubmFpcmVSZXNwb25zZVwiO1xyXG4gIC8qKlxyXG4gICAqIEEgYnVzaW5lc3MgaWRlbnRpZmllciBhc3NpZ25lZCB0byBhIHBhcnRpY3VsYXIgY29tcGxldGVkIChvciBwYXJ0aWFsbHkgY29tcGxldGVkKSBxdWVzdGlvbm5haXJlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgb3JkZXIsIHByb3Bvc2FsIG9yIHBsYW4gdGhhdCBpcyBmdWxmaWxsZWQgaW4gd2hvbGUgb3IgaW4gcGFydCBieSB0aGlzIFF1ZXN0aW9ubmFpcmVSZXNwb25zZS4gIEZvciBleGFtcGxlLCBhIFNlcnZpY2VSZXF1ZXN0IHNlZWtpbmcgYW4gaW50YWtlIGFzc2Vzc21lbnQgb3IgYSBkZWNpc2lvbiBzdXBwb3J0IHJlY29tbWVuZGF0aW9uIHRvIGFzc2VzcyBmb3IgcG9zdC1wYXJ0dW0gZGVwcmVzc2lvbi5cclxuICAgKi9cclxuICBwdWJsaWMgYmFzZWRPbj86IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogQ29tcG9zaXRpb24gb2YgcXVlc3Rpb25uYWlyZSByZXNwb25zZXMgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBwYXJlbnQgcXVlc3Rpb25uYWlyZSBoYXZpbmcgYW5zd2VycyB0aGF0IHJlZmVyZW5jZSB0aGUgY2hpbGQgcXVlc3Rpb25uYWlyZS4gIEZvciByZWxhdGlvbnNoaXBzIHRvIHJlZmVycmFscywgYW5kIG90aGVyIHR5cGVzIG9mIHJlcXVlc3RzLCB1c2UgYmFzZWRPbi5cclxuICAgKi9cclxuICBwdWJsaWMgcGFydE9mPzogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBJZiBhIFF1ZXN0aW9ubmFpcmVSZXNwb25zZSByZWZlcmVuY2VzIGEgUXVlc3Rpb25uYWlyZSwgdGhlbiB0aGUgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIHN0cnVjdHVyZSBtdXN0IGJlIGNvbnNpc3RlbnQgd2l0aCB0aGUgUXVlc3Rpb25uYWlyZSAoaS5lLiBxdWVzdGlvbnMgbXVzdCBiZSBvcmdhbml6ZWQgaW50byB0aGUgc2FtZSBncm91cHMsIG5lc3RlZCBxdWVzdGlvbnMgbXVzdCBzdGlsbCBiZSBuZXN0ZWQsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBxdWVzdGlvbm5haXJlPzogZmhpci5GaGlyQ2Fub25pY2FsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyBjb2RlcyB0aGF0IG1hcmsgdGhlIHJlc291cmNlIGFzIG5vdCBjdXJyZW50bHkgdmFsaWQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1czogUXVlc3Rpb25uYWlyZUFuc3dlcnNTdGF0dXNDb2RlVHlwZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBRdWVzdGlvbm5haXJlIGRlY2xhcmVkIGEgc3ViamVjdFR5cGUsIHRoZSByZXNvdXJjZSBwb2ludGVkIHRvIGJ5IHRoaXMgZWxlbWVudCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIG9uZSBvZiB0aGUgbGlzdGVkIHR5cGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJqZWN0PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgd2lsbCB0eXBpY2FsbHkgYmUgdGhlIGVuY291bnRlciB0aGUgZXZlbnQgb2NjdXJyZWQgd2l0aGluLCBidXQgc29tZSBhY3Rpdml0aWVzIG1heSBiZSBpbml0aWF0ZWQgcHJpb3IgdG8gb3IgYWZ0ZXIgdGhlIG9mZmljaWFsIGNvbXBsZXRpb24gb2YgYW4gZW5jb3VudGVyIGJ1dCBzdGlsbCBiZSB0aWVkIHRvIHRoZSBjb250ZXh0IG9mIHRoZSBlbmNvdW50ZXIuIEEgcXVlc3Rpb25uYWlyZSB0aGF0IHdhcyBpbml0aWF0ZWQgZHVyaW5nIGFuIGVuY291bnRlciBidXQgbm90IGZ1bGx5IGNvbXBsZXRlZCBkdXJpbmcgdGhlIGVuY291bnRlciB3b3VsZCBzdGlsbCBnZW5lcmFsbHkgYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGVuY291bnRlcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXkgYmUgZGlmZmVyZW50IGZyb20gdGhlIGxhc3RVcGRhdGVUaW1lIG9mIHRoZSByZXNvdXJjZSBpdHNlbGYsIGJlY2F1c2UgdGhhdCByZWZsZWN0cyB3aGVuIHRoZSBkYXRhIHdhcyBrbm93biB0byB0aGUgc2VydmVyLCBub3Qgd2hlbiB0aGUgZGF0YSB3YXMgY2FwdHVyZWQuXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIG9wdGlvbmFsIHRvIGFsbG93IGZvciBzeXN0ZW1zIHRoYXQgbWlnaHQgbm90IGtub3cgdGhlIHZhbHVlLCBob3dldmVyIGl0IFNIT1VMRCBiZSBwb3B1bGF0ZWQgaWYgcG9zc2libGUuXHJcbiAgICovXHJcbiAgcHVibGljIGF1dGhvcmVkPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgYSBzdWJqZWN0J3MgYW5zd2VycyB0byBtdWx0aXBsZSBjaG9pY2Ugb3B0aW9ucyBhbmQgZGV0ZXJtaW5pbmcgd2hhdCB0byBwdXQgaW4gdGhlIHRleHR1YWwgYW5zd2VyIGlzIGEgbWF0dGVyIG9mIGludGVycHJldGF0aW9uLiAgQXV0aG9yaW5nIGJ5IGRldmljZSB3b3VsZCBpbmRpY2F0ZSB0aGF0IHNvbWUgcG9ydGlvbiBvZiB0aGUgcXVlc3Rpb25uYWlyZSBoYWQgYmVlbiBhdXRvLXBvcHVsYXRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgYXV0aG9yPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIG5vIGluZmVyZW5jZSBjYW4gYmUgbWFkZSBhYm91dCB3aG8gcHJvdmlkZWQgdGhlIGRhdGEuXHJcbiAgICovXHJcbiAgcHVibGljIHNvdXJjZT86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBHcm91cHMgY2Fubm90IGhhdmUgYW5zd2VycyBhbmQgdGhlcmVmb3JlIG11c3QgbmVzdCBkaXJlY3RseSB3aXRoaW4gaXRlbS4gV2hlbiBkZWFsaW5nIHdpdGggcXVlc3Rpb25zLCBuZXN0aW5nIG11c3Qgb2NjdXIgd2l0aGluIGVhY2ggYW5zd2VyIGJlY2F1c2Ugc29tZSBxdWVzdGlvbnMgbWF5IGhhdmUgbXVsdGlwbGUgYW5zd2VycyAoYW5kIHRoZSBuZXN0aW5nIG9jY3VycyBmb3IgZWFjaCBhbnN3ZXIpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpdGVtPzogZmhpci5RdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UXVlc3Rpb25uYWlyZVJlc3BvbnNlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ1F1ZXN0aW9ubmFpcmVSZXNwb25zZSc7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UuaWRlbnRpZmllcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Jhc2VkT24nXSkgeyB0aGlzLmJhc2VkT24gPSBzb3VyY2UuYmFzZWRPbi5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmJhc2VkT24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGFydE9mJ10pIHsgdGhpcy5wYXJ0T2YgPSBzb3VyY2UucGFydE9mLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGFydE9mID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3F1ZXN0aW9ubmFpcmUnXSkgeyB0aGlzLnF1ZXN0aW9ubmFpcmUgPSBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogc291cmNlLnF1ZXN0aW9ubmFpcmV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBzb3VyY2Uuc3RhdHVzOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydzdWJqZWN0J10pIHsgdGhpcy5zdWJqZWN0ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdWJqZWN0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZW5jb3VudGVyJ10pIHsgdGhpcy5lbmNvdW50ZXIgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmVuY291bnRlcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2F1dGhvcmVkJ10pIHsgdGhpcy5hdXRob3JlZCA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5hdXRob3JlZH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydhdXRob3InXSkgeyB0aGlzLmF1dGhvciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuYXV0aG9yKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc291cmNlJ10pIHsgdGhpcy5zb3VyY2UgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnNvdXJjZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2l0ZW0nXSkgeyB0aGlzLml0ZW0gPSBzb3VyY2UuaXRlbS5tYXAoKHgpID0+IG5ldyBmaGlyLlF1ZXN0aW9ubmFpcmVSZXNwb25zZUl0ZW0oeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pdGVtID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBzdGF0dXMgKFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5zdGF0dXMpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBzdGF0dXNSZXF1aXJlZENvZGluZygpOlF1ZXN0aW9ubmFpcmVBbnN3ZXJzU3RhdHVzQ29kaW5nVHlwZSB7XHJcbiAgICByZXR1cm4gUXVlc3Rpb25uYWlyZUFuc3dlcnNTdGF0dXNDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydyZXNvdXJjZVR5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCAgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlc291cmNlVHlwZTpcIlF1ZXN0aW9ubmFpcmVSZXNwb25zZVwiIGZoaXI6IFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5yZXNvdXJjZVR5cGU6XCJRdWVzdGlvbm5haXJlUmVzcG9uc2VcIicsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJpZGVudGlmaWVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuaWRlbnRpZmllci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJiYXNlZE9uXCJdKSB7IHRoaXMuYmFzZWRPbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicGFydE9mXCJdKSB7IHRoaXMucGFydE9mLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJxdWVzdGlvbm5haXJlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucXVlc3Rpb25uYWlyZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydzdGF0dXMnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCAgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHN0YXR1czpRdWVzdGlvbm5haXJlQW5zd2Vyc1N0YXR1c0NvZGVUeXBlIGZoaXI6IFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5zdGF0dXM6Y29kZScsIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJzdWJqZWN0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3ViamVjdC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJlbmNvdW50ZXJcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5lbmNvdW50ZXIuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiYXV0aG9yZWRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5hdXRob3JlZC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJhdXRob3JcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5hdXRob3IuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wic291cmNlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc291cmNlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcIml0ZW1cIl0pIHsgdGhpcy5pdGVtLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19