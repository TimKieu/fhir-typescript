{"version":3,"file":"Provenance.js","sources":["../../src/fhir/Provenance.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Provenance\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { ProvenanceAgentTypeCodings, ProvenanceAgentTypeCodingType,} from '../fhirValueSets/ProvenanceAgentTypeCodings.js';\r\n// @ts-ignore\r\nimport { ProvenanceAgentTypeCodes,  ProvenanceAgentTypeCodeType } from '../fhirValueSets/ProvenanceAgentTypeCodes.js';\r\n// @ts-ignore\r\nimport { SecurityRoleTypeCodings, SecurityRoleTypeCodingType,} from '../fhirValueSets/SecurityRoleTypeCodings.js';\r\n// @ts-ignore\r\nimport { SecurityRoleTypeCodes,  SecurityRoleTypeCodeType } from '../fhirValueSets/SecurityRoleTypeCodes.js';\r\n// @ts-ignore\r\nimport { ProvenanceEntityRoleCodings, ProvenanceEntityRoleCodingType,} from '../fhirValueSets/ProvenanceEntityRoleCodings.js';\r\n// @ts-ignore\r\nimport { ProvenanceEntityRoleCodes,  ProvenanceEntityRoleCodeType } from '../fhirValueSets/ProvenanceEntityRoleCodes.js';\r\n// @ts-ignore\r\nimport { V3PurposeOfUseCodings, V3PurposeOfUseCodingType,} from '../fhirValueSets/V3PurposeOfUseCodings.js';\r\n// @ts-ignore\r\nimport { V3PurposeOfUseCodes,  V3PurposeOfUseCodeType } from '../fhirValueSets/V3PurposeOfUseCodes.js';\r\n// @ts-ignore\r\nimport { ProvenanceActivityTypeCodings, ProvenanceActivityTypeCodingType,} from '../fhirValueSets/ProvenanceActivityTypeCodings.js';\r\n// @ts-ignore\r\nimport { ProvenanceActivityTypeCodes,  ProvenanceActivityTypeCodeType } from '../fhirValueSets/ProvenanceActivityTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the ProvenanceAgent type.\r\n */\r\nexport interface ProvenanceAgentArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * For example: author, performer, enterer, attester, etc.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * For example: doctor, nurse, clerk, etc.\r\n   */\r\n  role?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * whoIdentity should be used when the agent is not a Resource type.\r\n   */\r\n  who: fhir.ReferenceArgs|null;\r\n  /**\r\n   * onBehalfOfIdentity should be used when the agent is not a Resource type.\r\n   */\r\n  onBehalfOf?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.\r\n */\r\nexport class ProvenanceAgent extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'ProvenanceAgent';\r\n  /**\r\n   * For example: author, performer, enterer, attester, etc.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example: doctor, nurse, clerk, etc.\r\n   */\r\n  public role?: fhir.CodeableConcept[];\r\n  /**\r\n   * whoIdentity should be used when the agent is not a Resource type.\r\n   */\r\n  public who: fhir.Reference|null;\r\n  /**\r\n   * onBehalfOfIdentity should be used when the agent is not a Resource type.\r\n   */\r\n  public onBehalfOf?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<ProvenanceAgentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['role']) { this.role = source.role.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.role = []; }\r\n    if (source['who']) { this.who = new fhir.Reference(source.who); }\r\n    else { this.who = null; }\r\n    if (source['onBehalfOf']) { this.onBehalfOf = new fhir.Reference(source.onBehalfOf); }\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for type (Provenance.agent.type)\r\n   */\r\n  public static typeExtensibleCoding():ProvenanceAgentTypeCodingType {\r\n    return ProvenanceAgentTypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"role\"]) { this.role.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['who']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property who:fhir.Reference fhir: Provenance.agent.who:Reference', }));\r\n    }\r\n    if (this[\"who\"]) { outcome.issue!.push(...this.who.doModelValidation().issue!); }\r\n    if (this[\"onBehalfOf\"]) { outcome.issue!.push(...this.onBehalfOf.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the ProvenanceEntity type.\r\n */\r\nexport interface ProvenanceEntityArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * How the entity was used during the activity.\r\n   */\r\n  role: ProvenanceEntityRoleCodeType|null;\r\n  /**\r\n   * whatIdentity should be used for entities that are not a Resource type.\r\n   */\r\n  what: fhir.ReferenceArgs|null;\r\n  /**\r\n   * A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.\r\n   */\r\n  agent?: fhir.ProvenanceAgentArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * An entity used in this activity.\r\n */\r\nexport class ProvenanceEntity extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'ProvenanceEntity';\r\n  /**\r\n   * How the entity was used during the activity.\r\n   */\r\n  public role: ProvenanceEntityRoleCodeType|null;\r\n  /**\r\n   * whatIdentity should be used for entities that are not a Resource type.\r\n   */\r\n  public what: fhir.Reference|null;\r\n  /**\r\n   * A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.\r\n   */\r\n  public agent?: fhir.ProvenanceAgent[];\r\n  /**\r\n   * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<ProvenanceEntityArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['role']) { this.role = source.role; }\r\n    else { this.role = null; }\r\n    if (source['what']) { this.what = new fhir.Reference(source.what); }\r\n    else { this.what = null; }\r\n    if (source['agent']) { this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x)); }\r\n    else { this.agent = []; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for role (Provenance.entity.role)\r\n   */\r\n  public static roleRequiredCoding():ProvenanceEntityRoleCodingType {\r\n    return ProvenanceEntityRoleCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['role']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property role:ProvenanceEntityRoleCodeType fhir: Provenance.entity.role:code', }));\r\n    }\r\n    if (!this['what']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property what:fhir.Reference fhir: Provenance.entity.what:Reference', }));\r\n    }\r\n    if (this[\"what\"]) { outcome.issue!.push(...this.what.doModelValidation().issue!); }\r\n    if (this[\"agent\"]) { this.agent.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the Provenance type.\r\n */\r\nexport interface ProvenanceArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Provenance\"|undefined;\r\n  /**\r\n   * Target references are usually version specific, but might not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource might not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.\r\n   */\r\n  target: fhir.ReferenceArgs[]|null;\r\n  /**\r\n   * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.\r\n   */\r\n  occurred?: fhir.Period|fhir.FhirDateTime|undefined;\r\n  /**\r\n   * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.\r\n   */\r\n  occurredPeriod?: fhir.PeriodArgs|undefined;\r\n  /**\r\n   * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.\r\n   */\r\n  occurredDateTime?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * This can be a little different from the time stamp on the resource if there is a delay between recording the event and updating the provenance and target resource.\r\n   */\r\n  recorded: fhir.FhirInstant|string|undefined;\r\n  /**\r\n   * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.\r\n   */\r\n  policy?: fhir.FhirUri[]|string[]|undefined;\r\n  /**\r\n   * Where the activity occurred, if relevant.\r\n   */\r\n  location?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * The reason that the activity was taking place.\r\n   */\r\n  reason?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.\r\n   */\r\n  activity?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.\r\n   */\r\n  agent: fhir.ProvenanceAgentArgs[]|null;\r\n  /**\r\n   * An entity used in this activity.\r\n   */\r\n  entity?: fhir.ProvenanceEntityArgs[]|undefined;\r\n  /**\r\n   * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.\r\n   */\r\n  signature?: fhir.SignatureArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.\r\n */\r\nexport class Provenance extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Provenance';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"Provenance\";\r\n  /**\r\n   * Target references are usually version specific, but might not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource might not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.\r\n   */\r\n  public target: fhir.Reference[];\r\n  /**\r\n   * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.\r\n   */\r\n  public occurred?: (fhir.Period|fhir.FhirDateTime)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element Provenance.occurred[x]\r\n   */\r\n  protected static readonly _fts_occurredIsChoice:true = true;\r\n  /**\r\n   * This can be a little different from the time stamp on the resource if there is a delay between recording the event and updating the provenance and target resource.\r\n   */\r\n  public recorded: fhir.FhirInstant|null;\r\n  /**\r\n   * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.\r\n   */\r\n  public policy?: fhir.FhirUri[];\r\n  /**\r\n   * Where the activity occurred, if relevant.\r\n   */\r\n  public location?: fhir.Reference|undefined;\r\n  /**\r\n   * The reason that the activity was taking place.\r\n   */\r\n  public reason?: fhir.CodeableConcept[];\r\n  /**\r\n   * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.\r\n   */\r\n  public activity?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.\r\n   */\r\n  public agent: fhir.ProvenanceAgent[];\r\n  /**\r\n   * An entity used in this activity.\r\n   */\r\n  public entity?: fhir.ProvenanceEntity[];\r\n  /**\r\n   * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.\r\n   */\r\n  public signature?: fhir.Signature[];\r\n  /**\r\n   * Default constructor for Provenance - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<ProvenanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'Provenance';\r\n    if (source['target']) { this.target = source.target.map((x) => new fhir.Reference(x)); }\r\n    else { this.target = []; }\r\n    if (source['occurred']) { this.occurred = source.occurred; }\r\n    else if (source['occurredPeriod']) { this.occurred = new fhir.Period(source.occurredPeriod); }\r\n    else if (source['occurredDateTime']) { this.occurred = new fhir.FhirDateTime({value: source.occurredDateTime}); }\r\n    if (source['recorded']) { this.recorded = new fhir.FhirInstant({value: source.recorded}); }\r\n    else { this.recorded = null; }\r\n    if (source['policy']) { this.policy = source.policy.map((x) => new fhir.FhirUri({value: x})); }\r\n    else { this.policy = []; }\r\n    if (source['location']) { this.location = new fhir.Reference(source.location); }\r\n    if (source['reason']) { this.reason = source.reason.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.reason = []; }\r\n    if (source['activity']) { this.activity = new fhir.CodeableConcept(source.activity); }\r\n    if (source['agent']) { this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x)); }\r\n    else { this.agent = []; }\r\n    if (source['entity']) { this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x)); }\r\n    else { this.entity = []; }\r\n    if (source['signature']) { this.signature = source.signature.map((x) => new fhir.Signature(x)); }\r\n    else { this.signature = []; }\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for reason (Provenance.reason)\r\n   */\r\n  public static reasonExtensibleCoding():V3PurposeOfUseCodingType {\r\n    return V3PurposeOfUseCodings;\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for activity (Provenance.activity)\r\n   */\r\n  public static activityExtensibleCoding():ProvenanceActivityTypeCodingType {\r\n    return ProvenanceActivityTypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"Provenance\" fhir: Provenance.resourceType:\"Provenance\"', }));\r\n    }\r\n    if (!this['target']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference', }));\r\n    } else if (!Array.isArray(this.target)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property target:fhir.Reference[] fhir: Provenance.target:Reference', }));\r\n    } else if (this.target.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference', }));\r\n    }\r\n    if (this[\"target\"]) { this.target.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['recorded']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property recorded:fhir.FhirInstant fhir: Provenance.recorded:instant', }));\r\n    }\r\n    if (this[\"recorded\"]) { outcome.issue!.push(...this.recorded.doModelValidation().issue!); }\r\n    if (this[\"policy\"]) { this.policy.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"location\"]) { outcome.issue!.push(...this.location.doModelValidation().issue!); }\r\n    if (this[\"reason\"]) { this.reason.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"activity\"]) { outcome.issue!.push(...this.activity.doModelValidation().issue!); }\r\n    if (!this['agent']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', }));\r\n    } else if (!Array.isArray(this.agent)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', }));\r\n    } else if (this.agent.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', }));\r\n    }\r\n    if (this[\"agent\"]) { this.agent.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"entity\"]) { this.entity.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"signature\"]) { this.signature.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.CodeableConcept","fhir.Reference","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.ProvenanceAgent","fhir.Period","fhir.FhirDateTime","fhir.FhirInstant","fhir.FhirUri","fhir.ProvenanceEntity","fhir.Signature","fhir.DomainResource"],"mappings":"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"}