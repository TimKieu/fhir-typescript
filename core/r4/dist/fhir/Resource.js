/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirBase } from './FhirBase.js';
import { FhirId } from './FhirId.js';
import { Meta } from './Meta.js';
import { FhirUri } from './FhirUri.js';
import { FhirCode } from './FhirCode.js';

// <auto-generated/>
/**
 * This is the base resource type for everything.
 */
var Resource = /** @class */ (function (_super) {
    __extends(Resource, _super);
    /**
     * Default constructor for Resource - initializes any required elements to null if a value is not provided.
     */
    function Resource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Resource';
        if (source['id']) {
            _this.id = new FhirId({ value: source.id });
        }
        if (source['meta']) {
            _this.meta = new Meta(source.meta);
        }
        if (source['implicitRules']) {
            _this.implicitRules = new FhirUri({ value: source.implicitRules });
        }
        if (source['language']) {
            _this.language = new FhirCode({ value: source.language });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for language (Resource.language)
     */
    Resource.languagePreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Resource.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:string fhir: Resource.resourceType:string', }));
        }
        if (this["id"]) {
            (_a = outcome.issue).push.apply(_a, this.id.doModelValidation().issue);
        }
        if (this["meta"]) {
            (_b = outcome.issue).push.apply(_b, this.meta.doModelValidation().issue);
        }
        if (this["implicitRules"]) {
            (_c = outcome.issue).push.apply(_c, this.implicitRules.doModelValidation().issue);
        }
        if (this["language"]) {
            (_d = outcome.issue).push.apply(_d, this.language.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Resource._fts_dataType = 'Resource';
    return Resource;
}(FhirBase));

export { Resource };
//# sourceMappingURL=Resource.js.map
