/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SubstanceStatusCodings } from '../fhirValueSets/SubstanceStatusCodings.js';
import { SubstanceCategoryCodings } from '../fhirValueSets/SubstanceCategoryCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Quantity } from './Quantity.js';
import { Ratio } from './Ratio.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
 */
var SubstanceInstance = /** @class */ (function (_super) {
    __extends(SubstanceInstance, _super);
    /**
     * Default constructor for SubstanceInstance - initializes any required elements to null if a value is not provided.
     */
    function SubstanceInstance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['expiry']) {
            _this.expiry = new FhirDateTime({ value: source.expiry });
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceInstance.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["expiry"]) {
            (_b = outcome.issue).push.apply(_b, this.expiry.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_c = outcome.issue).push.apply(_c, this.quantity.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceInstance._fts_dataType = 'SubstanceInstance';
    return SubstanceInstance;
}(BackboneElement));
/**
 * A substance can be composed of other substances.
 */
var SubstanceIngredient = /** @class */ (function (_super) {
    __extends(SubstanceIngredient, _super);
    /**
     * Default constructor for SubstanceIngredient - initializes any required elements to null if a value is not provided.
     */
    function SubstanceIngredient(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['quantity']) {
            _this.quantity = new Ratio(source.quantity);
        }
        if (source['substance']) {
            _this.substance = source.substance;
        }
        else if (source['substanceCodeableConcept']) {
            _this.substance = new CodeableConcept(source.substanceCodeableConcept);
        }
        else if (source['substanceReference']) {
            _this.substance = new Reference(source.substanceReference);
        }
        else {
            _this.substance = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceIngredient.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["quantity"]) {
            (_a = outcome.issue).push.apply(_a, this.quantity.doModelValidation().issue);
        }
        if (!this['substance']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property substance: fhir: Substance.ingredient.substance[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceIngredient._fts_dataType = 'SubstanceIngredient';
    /**
     * Internal flag to properly serialize choice-type element Substance.ingredient.substance[x]
     */
    SubstanceIngredient._fts_substanceIsChoice = true;
    return SubstanceIngredient;
}(BackboneElement));
/**
 * A homogeneous material with a definite composition.
 */
var Substance = /** @class */ (function (_super) {
    __extends(Substance, _super);
    /**
     * Default constructor for Substance - initializes any required elements to null if a value is not provided.
     */
    function Substance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Substance';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['instance']) {
            _this.instance = source.instance.map(function (x) { return new SubstanceInstance(x); });
        }
        else {
            _this.instance = [];
        }
        if (source['ingredient']) {
            _this.ingredient = source.ingredient.map(function (x) { return new SubstanceIngredient(x); });
        }
        else {
            _this.ingredient = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Substance.status)
     */
    Substance.statusRequiredCoding = function () {
        return SubstanceStatusCodings;
    };
    /**
     * Extensible-bound Value Set for category (Substance.category)
     */
    Substance.categoryExtensibleCoding = function () {
        return SubstanceCategoryCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Substance.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Substance" fhir: Substance.resourceType:"Substance"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Substance.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (this["instance"]) {
            this.instance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Substance._fts_dataType = 'Substance';
    return Substance;
}(DomainResource));

export { Substance, SubstanceIngredient, SubstanceInstance };
//# sourceMappingURL=Substance.js.map
