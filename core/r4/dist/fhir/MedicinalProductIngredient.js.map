{"version":3,"file":"MedicinalProductIngredient.js","sources":["../../src/fhir/MedicinalProductIngredient.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: MedicinalProductIngredient\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength type.\r\n */\r\nexport interface MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Relevant reference substance.\r\n   */\r\n  substance?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Strength expressed in terms of a reference substance.\r\n   */\r\n  strength: fhir.RatioArgs|null;\r\n  /**\r\n   * Strength expressed in terms of a reference substance.\r\n   */\r\n  strengthLowLimit?: fhir.RatioArgs|undefined;\r\n  /**\r\n   * For when strength is measured at a particular point or distance.\r\n   */\r\n  measurementPoint?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The country or countries for which the strength range applies.\r\n   */\r\n  country?: fhir.CodeableConceptArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Strength expressed in terms of a reference substance.\r\n */\r\nexport class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength';\r\n  /**\r\n   * Relevant reference substance.\r\n   */\r\n  public substance?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Strength expressed in terms of a reference substance.\r\n   */\r\n  public strength: fhir.Ratio|null;\r\n  /**\r\n   * Strength expressed in terms of a reference substance.\r\n   */\r\n  public strengthLowLimit?: fhir.Ratio|undefined;\r\n  /**\r\n   * For when strength is measured at a particular point or distance.\r\n   */\r\n  public measurementPoint?: fhir.FhirString|undefined;\r\n  /**\r\n   * The country or countries for which the strength range applies.\r\n   */\r\n  public country?: fhir.CodeableConcept[];\r\n  /**\r\n   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['substance']) { this.substance = new fhir.CodeableConcept(source.substance); }\r\n    if (source['strength']) { this.strength = new fhir.Ratio(source.strength); }\r\n    else { this.strength = null; }\r\n    if (source['strengthLowLimit']) { this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit); }\r\n    if (source['measurementPoint']) { this.measurementPoint = new fhir.FhirString({value: source.measurementPoint}); }\r\n    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.country = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"substance\"]) { outcome.issue!.push(...this.substance.doModelValidation().issue!); }\r\n    if (!this['strength']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property strength:fhir.Ratio fhir: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.strength:Ratio', }));\r\n    }\r\n    if (this[\"strength\"]) { outcome.issue!.push(...this.strength.doModelValidation().issue!); }\r\n    if (this[\"strengthLowLimit\"]) { outcome.issue!.push(...this.strengthLowLimit.doModelValidation().issue!); }\r\n    if (this[\"measurementPoint\"]) { outcome.issue!.push(...this.measurementPoint.doModelValidation().issue!); }\r\n    if (this[\"country\"]) { this.country.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductIngredientSpecifiedSubstanceStrength type.\r\n */\r\nexport interface MedicinalProductIngredientSpecifiedSubstanceStrengthArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.\r\n   */\r\n  presentation: fhir.RatioArgs|null;\r\n  /**\r\n   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.\r\n   */\r\n  presentationLowLimit?: fhir.RatioArgs|undefined;\r\n  /**\r\n   * The strength per unitary volume (or mass).\r\n   */\r\n  concentration?: fhir.RatioArgs|undefined;\r\n  /**\r\n   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.\r\n   */\r\n  concentrationLowLimit?: fhir.RatioArgs|undefined;\r\n  /**\r\n   * For when strength is measured at a particular point or distance.\r\n   */\r\n  measurementPoint?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The country or countries for which the strength range applies.\r\n   */\r\n  country?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Strength expressed in terms of a reference substance.\r\n   */\r\n  referenceStrength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.\r\n */\r\nexport class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductIngredientSpecifiedSubstanceStrength';\r\n  /**\r\n   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.\r\n   */\r\n  public presentation: fhir.Ratio|null;\r\n  /**\r\n   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.\r\n   */\r\n  public presentationLowLimit?: fhir.Ratio|undefined;\r\n  /**\r\n   * The strength per unitary volume (or mass).\r\n   */\r\n  public concentration?: fhir.Ratio|undefined;\r\n  /**\r\n   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.\r\n   */\r\n  public concentrationLowLimit?: fhir.Ratio|undefined;\r\n  /**\r\n   * For when strength is measured at a particular point or distance.\r\n   */\r\n  public measurementPoint?: fhir.FhirString|undefined;\r\n  /**\r\n   * The country or countries for which the strength range applies.\r\n   */\r\n  public country?: fhir.CodeableConcept[];\r\n  /**\r\n   * Strength expressed in terms of a reference substance.\r\n   */\r\n  public referenceStrength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[];\r\n  /**\r\n   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductIngredientSpecifiedSubstanceStrengthArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['presentation']) { this.presentation = new fhir.Ratio(source.presentation); }\r\n    else { this.presentation = null; }\r\n    if (source['presentationLowLimit']) { this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit); }\r\n    if (source['concentration']) { this.concentration = new fhir.Ratio(source.concentration); }\r\n    if (source['concentrationLowLimit']) { this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit); }\r\n    if (source['measurementPoint']) { this.measurementPoint = new fhir.FhirString({value: source.measurementPoint}); }\r\n    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.country = []; }\r\n    if (source['referenceStrength']) { this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x)); }\r\n    else { this.referenceStrength = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['presentation']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property presentation:fhir.Ratio fhir: MedicinalProductIngredient.specifiedSubstance.strength.presentation:Ratio', }));\r\n    }\r\n    if (this[\"presentation\"]) { outcome.issue!.push(...this.presentation.doModelValidation().issue!); }\r\n    if (this[\"presentationLowLimit\"]) { outcome.issue!.push(...this.presentationLowLimit.doModelValidation().issue!); }\r\n    if (this[\"concentration\"]) { outcome.issue!.push(...this.concentration.doModelValidation().issue!); }\r\n    if (this[\"concentrationLowLimit\"]) { outcome.issue!.push(...this.concentrationLowLimit.doModelValidation().issue!); }\r\n    if (this[\"measurementPoint\"]) { outcome.issue!.push(...this.measurementPoint.doModelValidation().issue!); }\r\n    if (this[\"country\"]) { this.country.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"referenceStrength\"]) { this.referenceStrength.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductIngredientSpecifiedSubstance type.\r\n */\r\nexport interface MedicinalProductIngredientSpecifiedSubstanceArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The specified substance.\r\n   */\r\n  code: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * The group of specified substance, e.g. group 1 to 4.\r\n   */\r\n  group: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * Confidentiality level of the specified substance as the ingredient.\r\n   */\r\n  confidentiality?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.\r\n   */\r\n  strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * A specified substance that comprises this ingredient.\r\n */\r\nexport class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductIngredientSpecifiedSubstance';\r\n  /**\r\n   * The specified substance.\r\n   */\r\n  public code: fhir.CodeableConcept|null;\r\n  /**\r\n   * The group of specified substance, e.g. group 1 to 4.\r\n   */\r\n  public group: fhir.CodeableConcept|null;\r\n  /**\r\n   * Confidentiality level of the specified substance as the ingredient.\r\n   */\r\n  public confidentiality?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.\r\n   */\r\n  public strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[];\r\n  /**\r\n   * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductIngredientSpecifiedSubstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    else { this.code = null; }\r\n    if (source['group']) { this.group = new fhir.CodeableConcept(source.group); }\r\n    else { this.group = null; }\r\n    if (source['confidentiality']) { this.confidentiality = new fhir.CodeableConcept(source.confidentiality); }\r\n    if (source['strength']) { this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }\r\n    else { this.strength = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['code']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductIngredient.specifiedSubstance.code:CodeableConcept', }));\r\n    }\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (!this['group']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property group:fhir.CodeableConcept fhir: MedicinalProductIngredient.specifiedSubstance.group:CodeableConcept', }));\r\n    }\r\n    if (this[\"group\"]) { outcome.issue!.push(...this.group.doModelValidation().issue!); }\r\n    if (this[\"confidentiality\"]) { outcome.issue!.push(...this.confidentiality.doModelValidation().issue!); }\r\n    if (this[\"strength\"]) { this.strength.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductIngredientSubstance type.\r\n */\r\nexport interface MedicinalProductIngredientSubstanceArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The ingredient substance.\r\n   */\r\n  code: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.\r\n   */\r\n  strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * The ingredient substance.\r\n */\r\nexport class MedicinalProductIngredientSubstance extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductIngredientSubstance';\r\n  /**\r\n   * The ingredient substance.\r\n   */\r\n  public code: fhir.CodeableConcept|null;\r\n  /**\r\n   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.\r\n   */\r\n  public strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[];\r\n  /**\r\n   * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductIngredientSubstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    else { this.code = null; }\r\n    if (source['strength']) { this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }\r\n    else { this.strength = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['code']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductIngredient.substance.code:CodeableConcept', }));\r\n    }\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"strength\"]) { this.strength.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductIngredient type.\r\n */\r\nexport interface MedicinalProductIngredientArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"MedicinalProductIngredient\"|undefined;\r\n  /**\r\n   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Ingredient role e.g. Active ingredient, excipient.\r\n   */\r\n  role: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * If the ingredient is a known or suspected allergen.\r\n   */\r\n  allergenicIndicator?: fhir.FhirBoolean|boolean|undefined;\r\n  /**\r\n   * Manufacturer of this Ingredient.\r\n   */\r\n  manufacturer?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * A specified substance that comprises this ingredient.\r\n   */\r\n  specifiedSubstance?: fhir.MedicinalProductIngredientSpecifiedSubstanceArgs[]|undefined;\r\n  /**\r\n   * The ingredient substance.\r\n   */\r\n  substance?: fhir.MedicinalProductIngredientSubstanceArgs|undefined;\r\n}\r\n\r\n/**\r\n * An ingredient of a manufactured item or pharmaceutical product.\r\n */\r\nexport class MedicinalProductIngredient extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductIngredient';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"MedicinalProductIngredient\";\r\n  /**\r\n   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Ingredient role e.g. Active ingredient, excipient.\r\n   */\r\n  public role: fhir.CodeableConcept|null;\r\n  /**\r\n   * If the ingredient is a known or suspected allergen.\r\n   */\r\n  public allergenicIndicator?: fhir.FhirBoolean|undefined;\r\n  /**\r\n   * Manufacturer of this Ingredient.\r\n   */\r\n  public manufacturer?: fhir.Reference[];\r\n  /**\r\n   * A specified substance that comprises this ingredient.\r\n   */\r\n  public specifiedSubstance?: fhir.MedicinalProductIngredientSpecifiedSubstance[];\r\n  /**\r\n   * The ingredient substance.\r\n   */\r\n  public substance?: fhir.MedicinalProductIngredientSubstance|undefined;\r\n  /**\r\n   * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductIngredientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'MedicinalProductIngredient';\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }\r\n    else { this.role = null; }\r\n    if (source['allergenicIndicator']) { this.allergenicIndicator = new fhir.FhirBoolean({value: source.allergenicIndicator}); }\r\n    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }\r\n    else { this.manufacturer = []; }\r\n    if (source['specifiedSubstance']) { this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x)); }\r\n    else { this.specifiedSubstance = []; }\r\n    if (source['substance']) { this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"MedicinalProductIngredient\" fhir: MedicinalProductIngredient.resourceType:\"MedicinalProductIngredient\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (!this['role']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property role:fhir.CodeableConcept fhir: MedicinalProductIngredient.role:CodeableConcept', }));\r\n    }\r\n    if (this[\"role\"]) { outcome.issue!.push(...this.role.doModelValidation().issue!); }\r\n    if (this[\"allergenicIndicator\"]) { outcome.issue!.push(...this.allergenicIndicator.doModelValidation().issue!); }\r\n    if (this[\"manufacturer\"]) { this.manufacturer.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"specifiedSubstance\"]) { this.specifiedSubstance.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"substance\"]) { outcome.issue!.push(...this.substance.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.CodeableConcept","fhir.Ratio","fhir.FhirString","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength","fhir.MedicinalProductIngredientSpecifiedSubstanceStrength","fhir.Identifier","fhir.FhirBoolean","fhir.Reference","fhir.MedicinalProductIngredientSpecifiedSubstance","fhir.MedicinalProductIngredientSubstance","fhir.DomainResource"],"mappings":"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"}