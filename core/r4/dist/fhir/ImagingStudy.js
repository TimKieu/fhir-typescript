/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SeriesPerformerFunctionCodings } from '../fhirValueSets/SeriesPerformerFunctionCodings.js';
import { DicomCid29AcquisitionModalityCodings } from '../fhirValueSets/DicomCid29AcquisitionModalityCodings.js';
import { ImagingstudyStatusCodings } from '../fhirValueSets/ImagingstudyStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirId } from './FhirId.js';
import { Coding } from './Coding.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Identifier } from './Identifier.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
var ImagingStudySeriesPerformer = /** @class */ (function (_super) {
    __extends(ImagingStudySeriesPerformer, _super);
    /**
     * Default constructor for ImagingStudySeriesPerformer - initializes any required elements to null if a value is not provided.
     */
    function ImagingStudySeriesPerformer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['function']) {
            _this.function = new CodeableConcept(source.function);
        }
        if (source['actor']) {
            _this.actor = new Reference(source.actor);
        }
        else {
            _this.actor = null;
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for function (ImagingStudy.series.performer.function)
     */
    ImagingStudySeriesPerformer.functionExtensibleCoding = function () {
        return SeriesPerformerFunctionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImagingStudySeriesPerformer.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["function"]) {
            (_a = outcome.issue).push.apply(_a, this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actor:fhir.Reference fhir: ImagingStudy.series.performer.actor:Reference', }));
        }
        if (this["actor"]) {
            (_b = outcome.issue).push.apply(_b, this.actor.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImagingStudySeriesPerformer._fts_dataType = 'ImagingStudySeriesPerformer';
    return ImagingStudySeriesPerformer;
}(BackboneElement));
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
var ImagingStudySeriesInstance = /** @class */ (function (_super) {
    __extends(ImagingStudySeriesInstance, _super);
    /**
     * Default constructor for ImagingStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    function ImagingStudySeriesInstance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['uid']) {
            _this.uid = new FhirId({ value: source.uid });
        }
        else {
            _this.uid = null;
        }
        if (source['sopClass']) {
            _this.sopClass = new Coding(source.sopClass);
        }
        else {
            _this.sopClass = null;
        }
        if (source['number']) {
            _this.number = new FhirUnsignedInt({ value: source.number });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImagingStudySeriesInstance.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['uid']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property uid:fhir.FhirId fhir: ImagingStudy.series.instance.uid:id', }));
        }
        if (this["uid"]) {
            (_a = outcome.issue).push.apply(_a, this.uid.doModelValidation().issue);
        }
        if (!this['sopClass']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sopClass:fhir.Coding fhir: ImagingStudy.series.instance.sopClass:Coding', }));
        }
        if (this["sopClass"]) {
            (_b = outcome.issue).push.apply(_b, this.sopClass.doModelValidation().issue);
        }
        if (this["number"]) {
            (_c = outcome.issue).push.apply(_c, this.number.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImagingStudySeriesInstance._fts_dataType = 'ImagingStudySeriesInstance';
    return ImagingStudySeriesInstance;
}(BackboneElement));
/**
 * Each study has one or more series of images or other content.
 */
var ImagingStudySeries = /** @class */ (function (_super) {
    __extends(ImagingStudySeries, _super);
    /**
     * Default constructor for ImagingStudySeries - initializes any required elements to null if a value is not provided.
     */
    function ImagingStudySeries(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['uid']) {
            _this.uid = new FhirId({ value: source.uid });
        }
        else {
            _this.uid = null;
        }
        if (source['number']) {
            _this.number = new FhirUnsignedInt({ value: source.number });
        }
        if (source['modality']) {
            _this.modality = new Coding(source.modality);
        }
        else {
            _this.modality = null;
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['numberOfInstances']) {
            _this.numberOfInstances = new FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['endpoint']) {
            _this.endpoint = source.endpoint.map(function (x) { return new Reference(x); });
        }
        else {
            _this.endpoint = [];
        }
        if (source['bodySite']) {
            _this.bodySite = new Coding(source.bodySite);
        }
        if (source['laterality']) {
            _this.laterality = new Coding(source.laterality);
        }
        if (source['specimen']) {
            _this.specimen = source.specimen.map(function (x) { return new Reference(x); });
        }
        else {
            _this.specimen = [];
        }
        if (source['started']) {
            _this.started = new FhirDateTime({ value: source.started });
        }
        if (source['performer']) {
            _this.performer = source.performer.map(function (x) { return new ImagingStudySeriesPerformer(x); });
        }
        else {
            _this.performer = [];
        }
        if (source['instance']) {
            _this.instance = source.instance.map(function (x) { return new ImagingStudySeriesInstance(x); });
        }
        else {
            _this.instance = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for modality (ImagingStudy.series.modality)
     */
    ImagingStudySeries.modalityExtensibleCoding = function () {
        return DicomCid29AcquisitionModalityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImagingStudySeries.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['uid']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property uid:fhir.FhirId fhir: ImagingStudy.series.uid:id', }));
        }
        if (this["uid"]) {
            (_a = outcome.issue).push.apply(_a, this.uid.doModelValidation().issue);
        }
        if (this["number"]) {
            (_b = outcome.issue).push.apply(_b, this.number.doModelValidation().issue);
        }
        if (!this['modality']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property modality:fhir.Coding fhir: ImagingStudy.series.modality:Coding', }));
        }
        if (this["modality"]) {
            (_c = outcome.issue).push.apply(_c, this.modality.doModelValidation().issue);
        }
        if (this["description"]) {
            (_d = outcome.issue).push.apply(_d, this.description.doModelValidation().issue);
        }
        if (this["numberOfInstances"]) {
            (_e = outcome.issue).push.apply(_e, this.numberOfInstances.doModelValidation().issue);
        }
        if (this["endpoint"]) {
            this.endpoint.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["bodySite"]) {
            (_f = outcome.issue).push.apply(_f, this.bodySite.doModelValidation().issue);
        }
        if (this["laterality"]) {
            (_g = outcome.issue).push.apply(_g, this.laterality.doModelValidation().issue);
        }
        if (this["specimen"]) {
            this.specimen.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["started"]) {
            (_h = outcome.issue).push.apply(_h, this.started.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instance"]) {
            this.instance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImagingStudySeries._fts_dataType = 'ImagingStudySeries';
    return ImagingStudySeries;
}(BackboneElement));
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
var ImagingStudy = /** @class */ (function (_super) {
    __extends(ImagingStudy, _super);
    /**
     * Default constructor for ImagingStudy - initializes any required elements to null if a value is not provided.
     */
    function ImagingStudy(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ImagingStudy';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['modality']) {
            _this.modality = source.modality.map(function (x) { return new Coding(x); });
        }
        else {
            _this.modality = [];
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['started']) {
            _this.started = new FhirDateTime({ value: source.started });
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['referrer']) {
            _this.referrer = new Reference(source.referrer);
        }
        if (source['interpreter']) {
            _this.interpreter = source.interpreter.map(function (x) { return new Reference(x); });
        }
        else {
            _this.interpreter = [];
        }
        if (source['endpoint']) {
            _this.endpoint = source.endpoint.map(function (x) { return new Reference(x); });
        }
        else {
            _this.endpoint = [];
        }
        if (source['numberOfSeries']) {
            _this.numberOfSeries = new FhirUnsignedInt({ value: source.numberOfSeries });
        }
        if (source['numberOfInstances']) {
            _this.numberOfInstances = new FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['procedureReference']) {
            _this.procedureReference = new Reference(source.procedureReference);
        }
        if (source['procedureCode']) {
            _this.procedureCode = source.procedureCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.procedureCode = [];
        }
        if (source['location']) {
            _this.location = new Reference(source.location);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['series']) {
            _this.series = source.series.map(function (x) { return new ImagingStudySeries(x); });
        }
        else {
            _this.series = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ImagingStudy.status)
     */
    ImagingStudy.statusRequiredCoding = function () {
        return ImagingstudyStatusCodings;
    };
    /**
     * Extensible-bound Value Set for modality (ImagingStudy.modality)
     */
    ImagingStudy.modalityExtensibleCoding = function () {
        return DicomCid29AcquisitionModalityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImagingStudy.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ImagingStudy" fhir: ImagingStudy.resourceType:"ImagingStudy"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ImagingstudyStatusCodeType fhir: ImagingStudy.status:code', }));
        }
        if (this["modality"]) {
            this.modality.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: ImagingStudy.subject:Reference', }));
        }
        if (this["subject"]) {
            (_a = outcome.issue).push.apply(_a, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_b = outcome.issue).push.apply(_b, this.encounter.doModelValidation().issue);
        }
        if (this["started"]) {
            (_c = outcome.issue).push.apply(_c, this.started.doModelValidation().issue);
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["referrer"]) {
            (_d = outcome.issue).push.apply(_d, this.referrer.doModelValidation().issue);
        }
        if (this["interpreter"]) {
            this.interpreter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["numberOfSeries"]) {
            (_e = outcome.issue).push.apply(_e, this.numberOfSeries.doModelValidation().issue);
        }
        if (this["numberOfInstances"]) {
            (_f = outcome.issue).push.apply(_f, this.numberOfInstances.doModelValidation().issue);
        }
        if (this["procedureReference"]) {
            (_g = outcome.issue).push.apply(_g, this.procedureReference.doModelValidation().issue);
        }
        if (this["procedureCode"]) {
            this.procedureCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["location"]) {
            (_h = outcome.issue).push.apply(_h, this.location.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_j = outcome.issue).push.apply(_j, this.description.doModelValidation().issue);
        }
        if (this["series"]) {
            this.series.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImagingStudy._fts_dataType = 'ImagingStudy';
    return ImagingStudy;
}(DomainResource));

export { ImagingStudy, ImagingStudySeries, ImagingStudySeriesInstance, ImagingStudySeriesPerformer };
//# sourceMappingURL=ImagingStudy.js.map
