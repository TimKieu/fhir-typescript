// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImagingStudy
import * as fhir from '../fhir.js';
// @ts-ignore
import { SeriesPerformerFunctionCodings, } from '../fhirValueSets/SeriesPerformerFunctionCodings.js';
// @ts-ignore
import { DicomCid29AcquisitionModalityCodings, } from '../fhirValueSets/DicomCid29AcquisitionModalityCodings.js';
// @ts-ignore
import { ImagingstudyStatusCodings, } from '../fhirValueSets/ImagingstudyStatusCodings.js';
/**
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
export class ImagingStudySeriesPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Extensible-bound Value Set for function (ImagingStudy.series.performer.function)
     */
    static functionExtensibleCoding() {
        return SeriesPerformerFunctionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["function"]) {
            issues.push(...this.function.doModelValidation());
        }
        if (!this['actor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actor:fhir.Reference fhir: ImagingStudy.series.performer.actor:Reference', });
        }
        if (this["actor"]) {
            issues.push(...this.actor.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeriesPerformer._fts_dataType = 'ImagingStudySeriesPerformer';
/**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
export class ImagingStudySeriesInstance extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeriesInstance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirId({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['sopClass']) {
            this.sopClass = new fhir.Coding(source.sopClass);
        }
        else {
            this.sopClass = null;
        }
        if (source['number']) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['uid']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property uid:fhir.FhirId fhir: ImagingStudy.series.instance.uid:id', });
        }
        if (this["uid"]) {
            issues.push(...this.uid.doModelValidation());
        }
        if (!this['sopClass']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sopClass:fhir.Coding fhir: ImagingStudy.series.instance.sopClass:Coding', });
        }
        if (this["sopClass"]) {
            issues.push(...this.sopClass.doModelValidation());
        }
        if (this["number"]) {
            issues.push(...this.number.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeriesInstance._fts_dataType = 'ImagingStudySeriesInstance';
/**
 * Each study has one or more series of images or other content.
 */
export class ImagingStudySeries extends fhir.BackboneElement {
    /**
     * Default constructor for ImagingStudySeries - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uid']) {
            this.uid = new fhir.FhirId({ value: source.uid });
        }
        else {
            this.uid = null;
        }
        if (source['number']) {
            this.number = new fhir.FhirUnsignedInt({ value: source.number });
        }
        if (source['modality']) {
            this.modality = new fhir.Coding(source.modality);
        }
        else {
            this.modality = null;
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.Coding(source.bodySite);
        }
        if (source['laterality']) {
            this.laterality = new fhir.Coding(source.laterality);
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['started']) {
            this.started = new fhir.FhirDateTime({ value: source.started });
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ImagingStudySeriesPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['instance']) {
            this.instance = source.instance.map((x) => new fhir.ImagingStudySeriesInstance(x));
        }
        else {
            this.instance = [];
        }
    }
    /**
     * Extensible-bound Value Set for modality (ImagingStudy.series.modality)
     */
    static modalityExtensibleCoding() {
        return DicomCid29AcquisitionModalityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['uid']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property uid:fhir.FhirId fhir: ImagingStudy.series.uid:id', });
        }
        if (this["uid"]) {
            issues.push(...this.uid.doModelValidation());
        }
        if (this["number"]) {
            issues.push(...this.number.doModelValidation());
        }
        if (!this['modality']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property modality:fhir.Coding fhir: ImagingStudy.series.modality:Coding', });
        }
        if (this["modality"]) {
            issues.push(...this.modality.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["numberOfInstances"]) {
            issues.push(...this.numberOfInstances.doModelValidation());
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            issues.push(...this.bodySite.doModelValidation());
        }
        if (this["laterality"]) {
            issues.push(...this.laterality.doModelValidation());
        }
        if (this["specimen"]) {
            this.specimen.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["started"]) {
            issues.push(...this.started.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instance"]) {
            this.instance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudySeries._fts_dataType = 'ImagingStudySeries';
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export class ImagingStudy extends fhir.DomainResource {
    /**
     * Default constructor for ImagingStudy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImagingStudy';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['modality']) {
            this.modality = source.modality.map((x) => new fhir.Coding(x));
        }
        else {
            this.modality = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['started']) {
            this.started = new fhir.FhirDateTime({ value: source.started });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['referrer']) {
            this.referrer = new fhir.Reference(source.referrer);
        }
        if (source['interpreter']) {
            this.interpreter = source.interpreter.map((x) => new fhir.Reference(x));
        }
        else {
            this.interpreter = [];
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['numberOfSeries']) {
            this.numberOfSeries = new fhir.FhirUnsignedInt({ value: source.numberOfSeries });
        }
        if (source['numberOfInstances']) {
            this.numberOfInstances = new fhir.FhirUnsignedInt({ value: source.numberOfInstances });
        }
        if (source['procedureReference']) {
            this.procedureReference = new fhir.Reference(source.procedureReference);
        }
        if (source['procedureCode']) {
            this.procedureCode = source.procedureCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.procedureCode = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['series']) {
            this.series = source.series.map((x) => new fhir.ImagingStudySeries(x));
        }
        else {
            this.series = [];
        }
    }
    /**
     * Required-bound Value Set for status (ImagingStudy.status)
     */
    static statusRequiredCoding() {
        return ImagingstudyStatusCodings;
    }
    /**
     * Extensible-bound Value Set for modality (ImagingStudy.modality)
     */
    static modalityExtensibleCoding() {
        return DicomCid29AcquisitionModalityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ImagingStudy" fhir: ImagingStudy.resourceType:"ImagingStudy"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:ImagingstudyStatusCodeType fhir: ImagingStudy.status:code', });
        }
        if (this["modality"]) {
            this.modality.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject:fhir.Reference fhir: ImagingStudy.subject:Reference', });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["started"]) {
            issues.push(...this.started.doModelValidation());
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["referrer"]) {
            issues.push(...this.referrer.doModelValidation());
        }
        if (this["interpreter"]) {
            this.interpreter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["numberOfSeries"]) {
            issues.push(...this.numberOfSeries.doModelValidation());
        }
        if (this["numberOfInstances"]) {
            issues.push(...this.numberOfInstances.doModelValidation());
        }
        if (this["procedureReference"]) {
            issues.push(...this.procedureReference.doModelValidation());
        }
        if (this["procedureCode"]) {
            this.procedureCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["series"]) {
            this.series.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImagingStudy._fts_dataType = 'ImagingStudy';
//# sourceMappingURL=data:application/json;base64,