{"version":3,"file":"Quantity.js","sources":["../../src/fhir/Quantity.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ComplexType: Quantity\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { QuantityComparatorCodings, QuantityComparatorCodingType,} from '../fhirValueSets/QuantityComparatorCodings.js';\r\n// @ts-ignore\r\nimport { QuantityComparatorCodes,  QuantityComparatorCodeType } from '../fhirValueSets/QuantityComparatorCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the Quantity type.\r\n */\r\nexport interface QuantityArgs extends fhir.FhirElementArgs {\r\n  /**\r\n   * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).\r\n   */\r\n  value?: fhir.FhirDecimal|number|undefined;\r\n  /**\r\n   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"&lt;\" , then the real value is &lt; stated value.\r\n   */\r\n  comparator?: QuantityComparatorCodeType|undefined;\r\n  /**\r\n   * A human-readable form of the unit.\r\n   */\r\n  unit?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The identification of the system that provides the coded form of the unit.\r\n   */\r\n  system?: fhir.FhirUri|string|undefined;\r\n  /**\r\n   * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.\r\n   */\r\n  code?: fhir.FhirCode|string|undefined;\r\n}\r\n\r\n/**\r\n * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.\r\n */\r\nexport class Quantity extends fhir.FhirElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Quantity';\r\n  /**\r\n   * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).\r\n   */\r\n  public value?: fhir.FhirDecimal|undefined;\r\n  /**\r\n   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"&lt;\" , then the real value is &lt; stated value.\r\n   */\r\n  public comparator?: QuantityComparatorCodeType|undefined;\r\n  /**\r\n   * A human-readable form of the unit.\r\n   */\r\n  public unit?: fhir.FhirString|undefined;\r\n  /**\r\n   * The identification of the system that provides the coded form of the unit.\r\n   */\r\n  public system?: fhir.FhirUri|undefined;\r\n  /**\r\n   * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.\r\n   */\r\n  public code?: fhir.FhirCode|undefined;\r\n  /**\r\n   * Default constructor for Quantity - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<QuantityArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['value']) { this.value = new fhir.FhirDecimal({value: source.value}); }\r\n    if (source['comparator']) { this.comparator = source.comparator; }\r\n    if (source['unit']) { this.unit = new fhir.FhirString({value: source.unit}); }\r\n    if (source['system']) { this.system = new fhir.FhirUri({value: source.system}); }\r\n    if (source['code']) { this.code = new fhir.FhirCode({value: source.code}); }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for comparator (Quantity.comparator)\r\n   */\r\n  public static comparatorRequiredCoding():QuantityComparatorCodingType {\r\n    return QuantityComparatorCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"value\"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }\r\n    if (this[\"unit\"]) { outcome.issue!.push(...this.unit.doModelValidation().issue!); }\r\n    if (this[\"system\"]) { outcome.issue!.push(...this.system.doModelValidation().issue!); }\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirDecimal","fhir.FhirString","fhir.FhirUri","fhir.FhirCode","fhir.FhirElement"],"mappings":"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"}