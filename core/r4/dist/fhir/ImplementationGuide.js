// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ImplementationGuide
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResourceTypesCodes } from '../fhirValueSets/ResourceTypesCodes.js';
// @ts-ignore
import { FHIRVersionCodes } from '../fhirValueSets/FHIRVersionCodes.js';
// @ts-ignore
import { GuidePageGenerationCodes } from '../fhirValueSets/GuidePageGenerationCodes.js';
// @ts-ignore
import { GuideParameterCodes } from '../fhirValueSets/GuideParameterCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { SpdxLicenseCodes } from '../fhirValueSets/SpdxLicenseCodes.js';
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export class ImplementationGuideDependsOn extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDependsOn - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['uri']) {
            this.uri = new fhir.FhirCanonical({ value: source.uri });
        }
        else {
            this.uri = null;
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirCanonical(source._uri);
            }
        }
        if (source['packageId']) {
            this.packageId = new fhir.FhirId({ value: source.packageId });
        }
        if (source['_packageId']) {
            if (this.packageId) {
                this.packageId.addExtendedProperties(source._packageId);
            }
            else {
                this.packageId = new fhir.FhirId(source._packageId);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.dependsOn';
        }
        if (!this['uri']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property uri fhir: ImplementationGuide.dependsOn.uri:canonical', expression: [expression] });
        }
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation(expression + '.uri'));
        }
        if (this["packageId"]) {
            issues.push(...this.packageId.doModelValidation(expression + '.packageId'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDependsOn._fts_dataType = 'ImplementationGuideDependsOn';
/**
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export class ImplementationGuideGlobal extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideGlobal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        else {
            this.profile = null;
        }
        if (source['_profile']) {
            if (this.profile) {
                this.profile.addExtendedProperties(source._profile);
            }
            else {
                this.profile = new fhir.FhirCanonical(source._profile);
            }
        }
    }
    /**
     * Required-bound Value Set for type (ImplementationGuide.global.type)
     */
    static get typeRequiredCodes() {
        return ResourceTypesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.global';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: ImplementationGuide.global.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(ResourceTypesCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'type (ImplementationGuide.global.type) of type code is missing code for Required binding to: ResourceTypes', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['profile']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property profile fhir: ImplementationGuide.global.profile:canonical', expression: [expression] });
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation(expression + '.profile'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideGlobal._fts_dataType = 'ImplementationGuideGlobal';
/**
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
export class ImplementationGuideDefinitionGrouping extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionGrouping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.definition.grouping';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: ImplementationGuide.definition.grouping.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDefinitionGrouping._fts_dataType = 'ImplementationGuideDefinitionGrouping';
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideDefinitionResource extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
        if (source['fhirVersion']) {
            this.fhirVersion = source.fhirVersion.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.fhirVersion = [];
        }
        if (source['_fhirVersion']) {
            source._fhirVersion.forEach((x, i) => {
                if (this.fhirVersion.length >= i) {
                    if (x) {
                        this.fhirVersion[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.fhirVersion.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['example']) {
            this.example = source.example;
        }
        else if (source['exampleBoolean']) {
            this.example = new fhir.FhirBoolean({ value: source.exampleBoolean });
        }
        else if (source['exampleCanonical']) {
            this.example = new fhir.FhirCanonical({ value: source.exampleCanonical });
        }
        if (source['groupingId']) {
            this.groupingId = new fhir.FhirId({ value: source.groupingId });
        }
        if (source['_groupingId']) {
            if (this.groupingId) {
                this.groupingId.addExtendedProperties(source._groupingId);
            }
            else {
                this.groupingId = new fhir.FhirId(source._groupingId);
            }
        }
    }
    /**
     * Required-bound Value Set for fhirVersion (ImplementationGuide.definition.resource.fhirVersion)
     */
    static get fhirVersionRequiredCodes() {
        return FHIRVersionCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.definition.resource';
        }
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference fhir: ImplementationGuide.definition.resource.reference:Reference', expression: [expression] });
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation(expression + '.reference'));
        }
        if (this['fhirVersion']) {
            this.fhirVersion.forEach((v) => {
                if (!Object.values(FHIRVersionCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'fhirVersion (ImplementationGuide.definition.resource.fhirVersion) of type code is missing code for Required binding to: FHIRVersion', expression: [expression] });
                }
            });
        }
        if (this["fhirVersion"]) {
            this.fhirVersion.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.fhirVersion[${i}]`)); });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["groupingId"]) {
            issues.push(...this.groupingId.doModelValidation(expression + '.groupingId'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDefinitionResource._fts_dataType = 'ImplementationGuideDefinitionResource';
/**
 * Internal flag to properly serialize choice-type element ImplementationGuide.definition.resource.example[x]
 */
ImplementationGuideDefinitionResource._fts_exampleIsChoice = true;
/**
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export class ImplementationGuideDefinitionPage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionPage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = source.name;
        }
        else if (source['nameUrl']) {
            this.name = new fhir.FhirUrl({ value: source.nameUrl });
        }
        else if (source['nameReference']) {
            this.name = new fhir.Reference(source.nameReference);
        }
        else {
            this.name = null;
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        else {
            this.title = null;
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['generation']) {
            this.generation = new fhir.FhirCode({ value: source.generation });
        }
        else {
            this.generation = null;
        }
        if (source['_generation']) {
            if (this.generation) {
                this.generation.addExtendedProperties(source._generation);
            }
            else {
                this.generation = new fhir.FhirCode(source._generation);
            }
        }
        if (source['page']) {
            this.page = source.page.map((x) => new fhir.ImplementationGuideDefinitionPage(x));
        }
        else {
            this.page = [];
        }
    }
    /**
     * Required-bound Value Set for generation (ImplementationGuide.definition.page.generation)
     */
    static get generationRequiredCodes() {
        return GuidePageGenerationCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.definition.page';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: ImplementationGuide.definition.page.name[x]:', expression: [expression] });
        }
        if (!this['title']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property title fhir: ImplementationGuide.definition.page.title:string', expression: [expression] });
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['generation']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property generation fhir: ImplementationGuide.definition.page.generation:code', expression: [expression] });
        }
        if (this['generation'] && (!Object.values(GuidePageGenerationCodes).includes(this.generation.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'generation (ImplementationGuide.definition.page.generation) of type code is missing code for Required binding to: GuidePageGeneration', expression: [expression] });
        }
        if (this["generation"]) {
            issues.push(...this.generation.doModelValidation(expression + '.generation'));
        }
        if (this["page"]) {
            this.page.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.page[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDefinitionPage._fts_dataType = 'ImplementationGuideDefinitionPage';
/**
 * Internal flag to properly serialize choice-type element ImplementationGuide.definition.page.name[x]
 */
ImplementationGuideDefinitionPage._fts_nameIsChoice = true;
/**
 * Defines how IG is built by tools.
 */
export class ImplementationGuideDefinitionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Required-bound Value Set for code (ImplementationGuide.definition.parameter.code)
     */
    static get codeRequiredCodes() {
        return GuideParameterCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.definition.parameter';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: ImplementationGuide.definition.parameter.code:code', expression: [expression] });
        }
        if (this['code'] && (!Object.values(GuideParameterCodes).includes(this.code.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'code (ImplementationGuide.definition.parameter.code) of type code is missing code for Required binding to: GuideParameter', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: ImplementationGuide.definition.parameter.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDefinitionParameter._fts_dataType = 'ImplementationGuideDefinitionParameter';
/**
 * A template for building resources.
 */
export class ImplementationGuideDefinitionTemplate extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinitionTemplate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['source']) {
            this.source = new fhir.FhirString({ value: source.source });
        }
        else {
            this.source = null;
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirString(source._source);
            }
        }
        if (source['scope']) {
            this.scope = new fhir.FhirString({ value: source.scope });
        }
        if (source['_scope']) {
            if (this.scope) {
                this.scope.addExtendedProperties(source._scope);
            }
            else {
                this.scope = new fhir.FhirString(source._scope);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.definition.template';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: ImplementationGuide.definition.template.code:code', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['source']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property source fhir: ImplementationGuide.definition.template.source:string', expression: [expression] });
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation(expression + '.source'));
        }
        if (this["scope"]) {
            issues.push(...this.scope.doModelValidation(expression + '.scope'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDefinitionTemplate._fts_dataType = 'ImplementationGuideDefinitionTemplate';
/**
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
export class ImplementationGuideDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['grouping']) {
            this.grouping = source.grouping.map((x) => new fhir.ImplementationGuideDefinitionGrouping(x));
        }
        else {
            this.grouping = [];
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ImplementationGuideDefinitionResource(x));
        }
        else {
            this.resource = [];
        }
        if (source['page']) {
            this.page = new fhir.ImplementationGuideDefinitionPage(source.page);
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.ImplementationGuideDefinitionParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['template']) {
            this.template = source.template.map((x) => new fhir.ImplementationGuideDefinitionTemplate(x));
        }
        else {
            this.template = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.definition';
        }
        if (this["grouping"]) {
            this.grouping.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.grouping[${i}]`)); });
        }
        if (!this['resource']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resource fhir: ImplementationGuide.definition.resource:resource', expression: [expression] });
        }
        else if (!Array.isArray(this.resource)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property resource fhir: ImplementationGuide.definition.resource:resource', expression: [expression] });
        }
        else if (this.resource.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resource fhir: ImplementationGuide.definition.resource:resource', expression: [expression] });
        }
        if (this["resource"]) {
            this.resource.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.resource[${i}]`)); });
        }
        if (this["page"]) {
            issues.push(...this.page.doModelValidation(expression + '.page'));
        }
        if (this["parameter"]) {
            this.parameter.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.parameter[${i}]`)); });
        }
        if (this["template"]) {
            this.template.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.template[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideDefinition._fts_dataType = 'ImplementationGuideDefinition';
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export class ImplementationGuideManifestResource extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifestResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        else {
            this.reference = null;
        }
        if (source['example']) {
            this.example = source.example;
        }
        else if (source['exampleBoolean']) {
            this.example = new fhir.FhirBoolean({ value: source.exampleBoolean });
        }
        else if (source['exampleCanonical']) {
            this.example = new fhir.FhirCanonical({ value: source.exampleCanonical });
        }
        if (source['relativePath']) {
            this.relativePath = new fhir.FhirUrl({ value: source.relativePath });
        }
        if (source['_relativePath']) {
            if (this.relativePath) {
                this.relativePath.addExtendedProperties(source._relativePath);
            }
            else {
                this.relativePath = new fhir.FhirUrl(source._relativePath);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.manifest.resource';
        }
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference fhir: ImplementationGuide.manifest.resource.reference:Reference', expression: [expression] });
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation(expression + '.reference'));
        }
        if (this["relativePath"]) {
            issues.push(...this.relativePath.doModelValidation(expression + '.relativePath'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideManifestResource._fts_dataType = 'ImplementationGuideManifestResource';
/**
 * Internal flag to properly serialize choice-type element ImplementationGuide.manifest.resource.example[x]
 */
ImplementationGuideManifestResource._fts_exampleIsChoice = true;
/**
 * Information about a page within the IG.
 */
export class ImplementationGuideManifestPage extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifestPage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['anchor']) {
            this.anchor = source.anchor.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.anchor = [];
        }
        if (source['_anchor']) {
            source._anchor.forEach((x, i) => {
                if (this.anchor.length >= i) {
                    if (x) {
                        this.anchor[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.anchor.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.manifest.page';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: ImplementationGuide.manifest.page.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (this["anchor"]) {
            this.anchor.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.anchor[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideManifestPage._fts_dataType = 'ImplementationGuideManifestPage';
/**
 * Information about an assembled implementation guide, created by the publication tooling.
 */
export class ImplementationGuideManifest extends fhir.BackboneElement {
    /**
     * Default constructor for ImplementationGuideManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['rendering']) {
            this.rendering = new fhir.FhirUrl({ value: source.rendering });
        }
        if (source['_rendering']) {
            if (this.rendering) {
                this.rendering.addExtendedProperties(source._rendering);
            }
            else {
                this.rendering = new fhir.FhirUrl(source._rendering);
            }
        }
        if (source['resource']) {
            this.resource = source.resource.map((x) => new fhir.ImplementationGuideManifestResource(x));
        }
        else {
            this.resource = [];
        }
        if (source['page']) {
            this.page = source.page.map((x) => new fhir.ImplementationGuideManifestPage(x));
        }
        else {
            this.page = [];
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.image = [];
        }
        if (source['_image']) {
            source._image.forEach((x, i) => {
                if (this.image.length >= i) {
                    if (x) {
                        this.image[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.image.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['other']) {
            this.other = source.other.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.other = [];
        }
        if (source['_other']) {
            source._other.forEach((x, i) => {
                if (this.other.length >= i) {
                    if (x) {
                        this.other[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.other.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide.manifest';
        }
        if (this["rendering"]) {
            issues.push(...this.rendering.doModelValidation(expression + '.rendering'));
        }
        if (!this['resource']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resource fhir: ImplementationGuide.manifest.resource:resource', expression: [expression] });
        }
        else if (!Array.isArray(this.resource)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property resource fhir: ImplementationGuide.manifest.resource:resource', expression: [expression] });
        }
        else if (this.resource.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resource fhir: ImplementationGuide.manifest.resource:resource', expression: [expression] });
        }
        if (this["resource"]) {
            this.resource.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.resource[${i}]`)); });
        }
        if (this["page"]) {
            this.page.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.page[${i}]`)); });
        }
        if (this["image"]) {
            this.image.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.image[${i}]`)); });
        }
        if (this["other"]) {
            this.other.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.other[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuideManifest._fts_dataType = 'ImplementationGuideManifest';
/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export class ImplementationGuide extends fhir.DomainResource {
    /**
     * Default constructor for ImplementationGuide - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ImplementationGuide';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        else {
            this.url = null;
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['packageId']) {
            this.packageId = new fhir.FhirId({ value: source.packageId });
        }
        else {
            this.packageId = null;
        }
        if (source['_packageId']) {
            if (this.packageId) {
                this.packageId.addExtendedProperties(source._packageId);
            }
            else {
                this.packageId = new fhir.FhirId(source._packageId);
            }
        }
        if (source['license']) {
            this.license = new fhir.FhirCode({ value: source.license });
        }
        if (source['_license']) {
            if (this.license) {
                this.license.addExtendedProperties(source._license);
            }
            else {
                this.license = new fhir.FhirCode(source._license);
            }
        }
        if (source['fhirVersion']) {
            this.fhirVersion = source.fhirVersion.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.fhirVersion = [];
        }
        if (source['_fhirVersion']) {
            source._fhirVersion.forEach((x, i) => {
                if (this.fhirVersion.length >= i) {
                    if (x) {
                        this.fhirVersion[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.fhirVersion.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['dependsOn']) {
            this.dependsOn = source.dependsOn.map((x) => new fhir.ImplementationGuideDependsOn(x));
        }
        else {
            this.dependsOn = [];
        }
        if (source['global']) {
            this.global = source.global.map((x) => new fhir.ImplementationGuideGlobal(x));
        }
        else {
            this.global = [];
        }
        if (source['definition']) {
            this.definition = new fhir.ImplementationGuideDefinition(source.definition);
        }
        if (source['manifest']) {
            this.manifest = new fhir.ImplementationGuideManifest(source.manifest);
        }
    }
    /**
     * Required-bound Value Set for status (ImplementationGuide.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Required-bound Value Set for license (ImplementationGuide.license)
     */
    static get licenseRequiredCodes() {
        return SpdxLicenseCodes;
    }
    /**
     * Required-bound Value Set for fhirVersion (ImplementationGuide.fhirVersion)
     */
    static get fhirVersionRequiredCodes() {
        return FHIRVersionCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ImplementationGuide';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: ImplementationGuide.resourceType:"ImplementationGuide"', expression: [expression] });
        }
        if (!this['url']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property url fhir: ImplementationGuide.url:uri', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: ImplementationGuide.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: ImplementationGuide.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (ImplementationGuide.status) of type code is missing code for Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation(expression + '.experimental'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (!this['packageId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property packageId fhir: ImplementationGuide.packageId:id', expression: [expression] });
        }
        if (this["packageId"]) {
            issues.push(...this.packageId.doModelValidation(expression + '.packageId'));
        }
        if (this['license'] && (!Object.values(SpdxLicenseCodes).includes(this.license.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'license (ImplementationGuide.license) of type code is missing code for Required binding to: SpdxLicense', expression: [expression] });
        }
        if (this["license"]) {
            issues.push(...this.license.doModelValidation(expression + '.license'));
        }
        if (!this['fhirVersion']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property fhirVersion fhir: ImplementationGuide.fhirVersion:code', expression: [expression] });
        }
        else if (!Array.isArray(this.fhirVersion)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property fhirVersion fhir: ImplementationGuide.fhirVersion:code', expression: [expression] });
        }
        else if (this.fhirVersion.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property fhirVersion fhir: ImplementationGuide.fhirVersion:code', expression: [expression] });
        }
        if (this['fhirVersion']) {
            this.fhirVersion.forEach((v) => {
                if (!Object.values(FHIRVersionCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'fhirVersion (ImplementationGuide.fhirVersion) of type code is missing code for Required binding to: FHIRVersion', expression: [expression] });
                }
            });
        }
        if (this["fhirVersion"]) {
            this.fhirVersion.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.fhirVersion[${i}]`)); });
        }
        if (this["dependsOn"]) {
            this.dependsOn.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.dependsOn[${i}]`)); });
        }
        if (this["global"]) {
            this.global.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.global[${i}]`)); });
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation(expression + '.definition'));
        }
        if (this["manifest"]) {
            issues.push(...this.manifest.doModelValidation(expression + '.manifest'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ImplementationGuide._fts_dataType = 'ImplementationGuide';
//# sourceMappingURL=data:application/json;base64,