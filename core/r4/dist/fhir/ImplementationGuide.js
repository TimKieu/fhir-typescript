/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { FHIRVersionCodings } from '../fhirValueSets/FHIRVersionCodings.js';
import { GuidePageGenerationCodings } from '../fhirValueSets/GuidePageGenerationCodings.js';
import { GuideParameterCodeCodings } from '../fhirValueSets/GuideParameterCodeCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { SpdxLicenseCodings } from '../fhirValueSets/SpdxLicenseCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirId } from './FhirId.js';
import { FhirString } from './FhirString.js';
import { FhirCode } from './FhirCode.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirUrl } from './FhirUrl.js';
import { FhirUri } from './FhirUri.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
var ImplementationGuideDependsOn = /** @class */ (function (_super) {
    __extends(ImplementationGuideDependsOn, _super);
    /**
     * Default constructor for ImplementationGuideDependsOn - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideDependsOn(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['uri']) {
            _this.uri = new FhirCanonical({ value: source.uri });
        }
        else {
            _this.uri = null;
        }
        if (source['packageId']) {
            _this.packageId = new FhirId({ value: source.packageId });
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideDependsOn.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['uri']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property uri:fhir.FhirCanonical fhir: ImplementationGuide.dependsOn.uri:canonical', }));
        }
        if (this["uri"]) {
            (_a = outcome.issue).push.apply(_a, this.uri.doModelValidation().issue);
        }
        if (this["packageId"]) {
            (_b = outcome.issue).push.apply(_b, this.packageId.doModelValidation().issue);
        }
        if (this["version"]) {
            (_c = outcome.issue).push.apply(_c, this.version.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideDependsOn._fts_dataType = 'ImplementationGuideDependsOn';
    return ImplementationGuideDependsOn;
}(BackboneElement));
/**
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
var ImplementationGuideGlobal = /** @class */ (function (_super) {
    __extends(ImplementationGuideGlobal, _super);
    /**
     * Default constructor for ImplementationGuideGlobal - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideGlobal(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new FhirCode({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['profile']) {
            _this.profile = new FhirCanonical({ value: source.profile });
        }
        else {
            _this.profile = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (ImplementationGuide.global.type)
     */
    ImplementationGuideGlobal.typeRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideGlobal.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirCode fhir: ImplementationGuide.global.type:code', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['profile']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property profile:fhir.FhirCanonical fhir: ImplementationGuide.global.profile:canonical', }));
        }
        if (this["profile"]) {
            (_b = outcome.issue).push.apply(_b, this.profile.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideGlobal._fts_dataType = 'ImplementationGuideGlobal';
    return ImplementationGuideGlobal;
}(BackboneElement));
/**
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
var ImplementationGuideDefinitionGrouping = /** @class */ (function (_super) {
    __extends(ImplementationGuideDefinitionGrouping, _super);
    /**
     * Default constructor for ImplementationGuideDefinitionGrouping - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideDefinitionGrouping(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideDefinitionGrouping.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: ImplementationGuide.definition.grouping.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideDefinitionGrouping._fts_dataType = 'ImplementationGuideDefinitionGrouping';
    return ImplementationGuideDefinitionGrouping;
}(BackboneElement));
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
var ImplementationGuideDefinitionResource = /** @class */ (function (_super) {
    __extends(ImplementationGuideDefinitionResource, _super);
    /**
     * Default constructor for ImplementationGuideDefinitionResource - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideDefinitionResource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['reference']) {
            _this.reference = new Reference(source.reference);
        }
        else {
            _this.reference = null;
        }
        if (source['fhirVersion']) {
            _this.fhirVersion = source.fhirVersion.map(function (x) { return new FhirCode({ value: x }); });
        }
        else {
            _this.fhirVersion = [];
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['example']) {
            _this.example = source.example;
        }
        else if (source['exampleBoolean']) {
            _this.example = new FhirBoolean({ value: source.exampleBoolean });
        }
        else if (source['exampleCanonical']) {
            _this.example = new FhirCanonical({ value: source.exampleCanonical });
        }
        if (source['groupingId']) {
            _this.groupingId = new FhirId({ value: source.groupingId });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for fhirVersion (ImplementationGuide.definition.resource.fhirVersion)
     */
    ImplementationGuideDefinitionResource.fhirVersionRequiredCoding = function () {
        return FHIRVersionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideDefinitionResource.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['reference']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference fhir: ImplementationGuide.definition.resource.reference:Reference', }));
        }
        if (this["reference"]) {
            (_a = outcome.issue).push.apply(_a, this.reference.doModelValidation().issue);
        }
        if (this["fhirVersion"]) {
            this.fhirVersion.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (this["groupingId"]) {
            (_d = outcome.issue).push.apply(_d, this.groupingId.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideDefinitionResource._fts_dataType = 'ImplementationGuideDefinitionResource';
    /**
     * Internal flag to properly serialize choice-type element ImplementationGuide.definition.resource.example[x]
     */
    ImplementationGuideDefinitionResource._fts_exampleIsChoice = true;
    return ImplementationGuideDefinitionResource;
}(BackboneElement));
/**
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
var ImplementationGuideDefinitionPage = /** @class */ (function (_super) {
    __extends(ImplementationGuideDefinitionPage$1, _super);
    /**
     * Default constructor for ImplementationGuideDefinitionPage - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideDefinitionPage$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = source.name;
        }
        else if (source['nameUrl']) {
            _this.name = new FhirUrl({ value: source.nameUrl });
        }
        else if (source['nameReference']) {
            _this.name = new Reference(source.nameReference);
        }
        else {
            _this.name = null;
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        else {
            _this.title = null;
        }
        if (source['generation']) {
            _this.generation = source.generation;
        }
        else {
            _this.generation = null;
        }
        if (source['page']) {
            _this.page = source.page.map(function (x) { return new ImplementationGuideDefinitionPage(x); });
        }
        else {
            _this.page = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for generation (ImplementationGuide.definition.page.generation)
     */
    ImplementationGuideDefinitionPage$1.generationRequiredCoding = function () {
        return GuidePageGenerationCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideDefinitionPage$1.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name: fhir: ImplementationGuide.definition.page.name[x]:', }));
        }
        if (!this['title']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property title:fhir.FhirString fhir: ImplementationGuide.definition.page.title:string', }));
        }
        if (this["title"]) {
            (_a = outcome.issue).push.apply(_a, this.title.doModelValidation().issue);
        }
        if (!this['generation']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property generation:GuidePageGenerationCodeType fhir: ImplementationGuide.definition.page.generation:code', }));
        }
        if (this["page"]) {
            this.page.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideDefinitionPage$1._fts_dataType = 'ImplementationGuideDefinitionPage';
    /**
     * Internal flag to properly serialize choice-type element ImplementationGuide.definition.page.name[x]
     */
    ImplementationGuideDefinitionPage$1._fts_nameIsChoice = true;
    return ImplementationGuideDefinitionPage$1;
}(BackboneElement));
/**
 * Defines how IG is built by tools.
 */
var ImplementationGuideDefinitionParameter = /** @class */ (function (_super) {
    __extends(ImplementationGuideDefinitionParameter, _super);
    /**
     * Default constructor for ImplementationGuideDefinitionParameter - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideDefinitionParameter(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = source.code;
        }
        else {
            _this.code = null;
        }
        if (source['value']) {
            _this.value = new FhirString({ value: source.value });
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for code (ImplementationGuide.definition.parameter.code)
     */
    ImplementationGuideDefinitionParameter.codeRequiredCoding = function () {
        return GuideParameterCodeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideDefinitionParameter.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:GuideParameterCodeCodeType fhir: ImplementationGuide.definition.parameter.code:code', }));
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.FhirString fhir: ImplementationGuide.definition.parameter.value:string', }));
        }
        if (this["value"]) {
            (_a = outcome.issue).push.apply(_a, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideDefinitionParameter._fts_dataType = 'ImplementationGuideDefinitionParameter';
    return ImplementationGuideDefinitionParameter;
}(BackboneElement));
/**
 * A template for building resources.
 */
var ImplementationGuideDefinitionTemplate = /** @class */ (function (_super) {
    __extends(ImplementationGuideDefinitionTemplate, _super);
    /**
     * Default constructor for ImplementationGuideDefinitionTemplate - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideDefinitionTemplate(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['source']) {
            _this.source = new FhirString({ value: source.source });
        }
        else {
            _this.source = null;
        }
        if (source['scope']) {
            _this.scope = new FhirString({ value: source.scope });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideDefinitionTemplate.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: ImplementationGuide.definition.template.code:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['source']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property source:fhir.FhirString fhir: ImplementationGuide.definition.template.source:string', }));
        }
        if (this["source"]) {
            (_b = outcome.issue).push.apply(_b, this.source.doModelValidation().issue);
        }
        if (this["scope"]) {
            (_c = outcome.issue).push.apply(_c, this.scope.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideDefinitionTemplate._fts_dataType = 'ImplementationGuideDefinitionTemplate';
    return ImplementationGuideDefinitionTemplate;
}(BackboneElement));
/**
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
var ImplementationGuideDefinition = /** @class */ (function (_super) {
    __extends(ImplementationGuideDefinition, _super);
    /**
     * Default constructor for ImplementationGuideDefinition - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['grouping']) {
            _this.grouping = source.grouping.map(function (x) { return new ImplementationGuideDefinitionGrouping(x); });
        }
        else {
            _this.grouping = [];
        }
        if (source['resource']) {
            _this.resource = source.resource.map(function (x) { return new ImplementationGuideDefinitionResource(x); });
        }
        else {
            _this.resource = [];
        }
        if (source['page']) {
            _this.page = new ImplementationGuideDefinitionPage(source.page);
        }
        if (source['parameter']) {
            _this.parameter = source.parameter.map(function (x) { return new ImplementationGuideDefinitionParameter(x); });
        }
        else {
            _this.parameter = [];
        }
        if (source['template']) {
            _this.template = source.template.map(function (x) { return new ImplementationGuideDefinitionTemplate(x); });
        }
        else {
            _this.template = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideDefinition.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["grouping"]) {
            this.grouping.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['resource']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resource:fhir.ImplementationGuideDefinitionResource[] fhir: ImplementationGuide.definition.resource:resource', }));
        }
        else if (!Array.isArray(this.resource)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property resource:fhir.ImplementationGuideDefinitionResource[] fhir: ImplementationGuide.definition.resource:resource', }));
        }
        else if (this.resource.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resource:fhir.ImplementationGuideDefinitionResource[] fhir: ImplementationGuide.definition.resource:resource', }));
        }
        if (this["resource"]) {
            this.resource.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["page"]) {
            (_a = outcome.issue).push.apply(_a, this.page.doModelValidation().issue);
        }
        if (this["parameter"]) {
            this.parameter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["template"]) {
            this.template.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideDefinition._fts_dataType = 'ImplementationGuideDefinition';
    return ImplementationGuideDefinition;
}(BackboneElement));
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
var ImplementationGuideManifestResource = /** @class */ (function (_super) {
    __extends(ImplementationGuideManifestResource, _super);
    /**
     * Default constructor for ImplementationGuideManifestResource - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideManifestResource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['reference']) {
            _this.reference = new Reference(source.reference);
        }
        else {
            _this.reference = null;
        }
        if (source['example']) {
            _this.example = source.example;
        }
        else if (source['exampleBoolean']) {
            _this.example = new FhirBoolean({ value: source.exampleBoolean });
        }
        else if (source['exampleCanonical']) {
            _this.example = new FhirCanonical({ value: source.exampleCanonical });
        }
        if (source['relativePath']) {
            _this.relativePath = new FhirUrl({ value: source.relativePath });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideManifestResource.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['reference']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference fhir: ImplementationGuide.manifest.resource.reference:Reference', }));
        }
        if (this["reference"]) {
            (_a = outcome.issue).push.apply(_a, this.reference.doModelValidation().issue);
        }
        if (this["relativePath"]) {
            (_b = outcome.issue).push.apply(_b, this.relativePath.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideManifestResource._fts_dataType = 'ImplementationGuideManifestResource';
    /**
     * Internal flag to properly serialize choice-type element ImplementationGuide.manifest.resource.example[x]
     */
    ImplementationGuideManifestResource._fts_exampleIsChoice = true;
    return ImplementationGuideManifestResource;
}(BackboneElement));
/**
 * Information about a page within the IG.
 */
var ImplementationGuideManifestPage = /** @class */ (function (_super) {
    __extends(ImplementationGuideManifestPage, _super);
    /**
     * Default constructor for ImplementationGuideManifestPage - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideManifestPage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['anchor']) {
            _this.anchor = source.anchor.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.anchor = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideManifestPage.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: ImplementationGuide.manifest.page.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_b = outcome.issue).push.apply(_b, this.title.doModelValidation().issue);
        }
        if (this["anchor"]) {
            this.anchor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideManifestPage._fts_dataType = 'ImplementationGuideManifestPage';
    return ImplementationGuideManifestPage;
}(BackboneElement));
/**
 * Information about an assembled implementation guide, created by the publication tooling.
 */
var ImplementationGuideManifest = /** @class */ (function (_super) {
    __extends(ImplementationGuideManifest, _super);
    /**
     * Default constructor for ImplementationGuideManifest - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuideManifest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['rendering']) {
            _this.rendering = new FhirUrl({ value: source.rendering });
        }
        if (source['resource']) {
            _this.resource = source.resource.map(function (x) { return new ImplementationGuideManifestResource(x); });
        }
        else {
            _this.resource = [];
        }
        if (source['page']) {
            _this.page = source.page.map(function (x) { return new ImplementationGuideManifestPage(x); });
        }
        else {
            _this.page = [];
        }
        if (source['image']) {
            _this.image = source.image.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.image = [];
        }
        if (source['other']) {
            _this.other = source.other.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.other = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuideManifest.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["rendering"]) {
            (_a = outcome.issue).push.apply(_a, this.rendering.doModelValidation().issue);
        }
        if (!this['resource']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resource:fhir.ImplementationGuideManifestResource[] fhir: ImplementationGuide.manifest.resource:resource', }));
        }
        else if (!Array.isArray(this.resource)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property resource:fhir.ImplementationGuideManifestResource[] fhir: ImplementationGuide.manifest.resource:resource', }));
        }
        else if (this.resource.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resource:fhir.ImplementationGuideManifestResource[] fhir: ImplementationGuide.manifest.resource:resource', }));
        }
        if (this["resource"]) {
            this.resource.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["page"]) {
            this.page.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["image"]) {
            this.image.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["other"]) {
            this.other.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuideManifest._fts_dataType = 'ImplementationGuideManifest';
    return ImplementationGuideManifest;
}(BackboneElement));
/**
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
var ImplementationGuide = /** @class */ (function (_super) {
    __extends(ImplementationGuide, _super);
    /**
     * Default constructor for ImplementationGuide - initializes any required elements to null if a value is not provided.
     */
    function ImplementationGuide(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ImplementationGuide';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['packageId']) {
            _this.packageId = new FhirId({ value: source.packageId });
        }
        else {
            _this.packageId = null;
        }
        if (source['license']) {
            _this.license = new FhirCode({ value: source.license });
        }
        if (source['fhirVersion']) {
            _this.fhirVersion = source.fhirVersion.map(function (x) { return new FhirCode({ value: x }); });
        }
        else {
            _this.fhirVersion = [];
        }
        if (source['dependsOn']) {
            _this.dependsOn = source.dependsOn.map(function (x) { return new ImplementationGuideDependsOn(x); });
        }
        else {
            _this.dependsOn = [];
        }
        if (source['global']) {
            _this.global = source.global.map(function (x) { return new ImplementationGuideGlobal(x); });
        }
        else {
            _this.global = [];
        }
        if (source['definition']) {
            _this.definition = new ImplementationGuideDefinition(source.definition);
        }
        if (source['manifest']) {
            _this.manifest = new ImplementationGuideManifest(source.manifest);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ImplementationGuide.status)
     */
    ImplementationGuide.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for license (ImplementationGuide.license)
     */
    ImplementationGuide.licenseRequiredCoding = function () {
        return SpdxLicenseCodings;
    };
    /**
     * Required-bound Value Set for fhirVersion (ImplementationGuide.fhirVersion)
     */
    ImplementationGuide.fhirVersionRequiredCoding = function () {
        return FHIRVersionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ImplementationGuide.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ImplementationGuide" fhir: ImplementationGuide.resourceType:"ImplementationGuide"', }));
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: ImplementationGuide.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: ImplementationGuide.name:string', }));
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: ImplementationGuide.status:code', }));
        }
        if (this["experimental"]) {
            (_e = outcome.issue).push.apply(_e, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_g = outcome.issue).push.apply(_g, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_h = outcome.issue).push.apply(_h, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["copyright"]) {
            (_j = outcome.issue).push.apply(_j, this.copyright.doModelValidation().issue);
        }
        if (!this['packageId']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property packageId:fhir.FhirId fhir: ImplementationGuide.packageId:id', }));
        }
        if (this["packageId"]) {
            (_k = outcome.issue).push.apply(_k, this.packageId.doModelValidation().issue);
        }
        if (this["license"]) {
            (_l = outcome.issue).push.apply(_l, this.license.doModelValidation().issue);
        }
        if (!this['fhirVersion']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property fhirVersion:fhir.FhirCode[] fhir: ImplementationGuide.fhirVersion:code', }));
        }
        else if (!Array.isArray(this.fhirVersion)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property fhirVersion:fhir.FhirCode[] fhir: ImplementationGuide.fhirVersion:code', }));
        }
        else if (this.fhirVersion.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property fhirVersion:fhir.FhirCode[] fhir: ImplementationGuide.fhirVersion:code', }));
        }
        if (this["fhirVersion"]) {
            this.fhirVersion.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dependsOn"]) {
            this.dependsOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["global"]) {
            this.global.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["definition"]) {
            (_m = outcome.issue).push.apply(_m, this.definition.doModelValidation().issue);
        }
        if (this["manifest"]) {
            (_o = outcome.issue).push.apply(_o, this.manifest.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ImplementationGuide._fts_dataType = 'ImplementationGuide';
    return ImplementationGuide;
}(DomainResource));

export { ImplementationGuide, ImplementationGuideDefinition, ImplementationGuideDefinitionGrouping, ImplementationGuideDefinitionPage, ImplementationGuideDefinitionParameter, ImplementationGuideDefinitionResource, ImplementationGuideDefinitionTemplate, ImplementationGuideDependsOn, ImplementationGuideGlobal, ImplementationGuideManifest, ImplementationGuideManifestPage, ImplementationGuideManifestResource };
//# sourceMappingURL=ImplementationGuide.js.map
