// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: HealthcareService
import * as fhir from '../fhir.js';
// @ts-ignore
import { DaysOfWeekCodes } from '../fhirValueSets/DaysOfWeekCodes.js';
// @ts-ignore
import { C80PracticeCodings, } from '../fhirValueSets/C80PracticeCodings.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
/**
 * Does this service have specific eligibility requirements that need to be met in order to use the service?
 */
export class HealthcareServiceEligibility extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceEligibility - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['comment']) {
            this.comment = new fhir.FhirMarkdown({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirMarkdown(source._comment);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceEligibility._fts_dataType = 'HealthcareServiceEligibility';
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export class HealthcareServiceAvailableTime extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceAvailableTime - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['daysOfWeek']) {
            this.daysOfWeek = source.daysOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.daysOfWeek = [];
        }
        if (source['_daysOfWeek']) {
            source._daysOfWeek.forEach((x, i) => {
                if (this.daysOfWeek.length >= i) {
                    if (x) {
                        this.daysOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.daysOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['allDay']) {
            this.allDay = new fhir.FhirBoolean({ value: source.allDay });
        }
        if (source['_allDay']) {
            if (this.allDay) {
                this.allDay.addExtendedProperties(source._allDay);
            }
            else {
                this.allDay = new fhir.FhirBoolean(source._allDay);
            }
        }
        if (source['availableStartTime']) {
            this.availableStartTime = new fhir.FhirTime({ value: source.availableStartTime });
        }
        if (source['_availableStartTime']) {
            if (this.availableStartTime) {
                this.availableStartTime.addExtendedProperties(source._availableStartTime);
            }
            else {
                this.availableStartTime = new fhir.FhirTime(source._availableStartTime);
            }
        }
        if (source['availableEndTime']) {
            this.availableEndTime = new fhir.FhirTime({ value: source.availableEndTime });
        }
        if (source['_availableEndTime']) {
            if (this.availableEndTime) {
                this.availableEndTime.addExtendedProperties(source._availableEndTime);
            }
            else {
                this.availableEndTime = new fhir.FhirTime(source._availableEndTime);
            }
        }
    }
    /**
     * Required-bound Value Set for daysOfWeek (HealthcareService.availableTime.daysOfWeek)
     */
    static get daysOfWeekRequiredCodes() {
        return DaysOfWeekCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['daysOfWeek']) {
            this.daysOfWeek.forEach((v) => {
                if (!Object.values(DaysOfWeekCodes).includes(v)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property daysOfWeek?:fhir.FhirCode<DaysOfWeekCodeType>[] fhir: HealthcareService.availableTime.daysOfWeek:code Required binding to: DaysOfWeek' });
                }
            });
        }
        if (this["daysOfWeek"]) {
            this.daysOfWeek.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["allDay"]) {
            issues.push(...this.allDay.doModelValidation());
        }
        if (this["availableStartTime"]) {
            issues.push(...this.availableStartTime.doModelValidation());
        }
        if (this["availableEndTime"]) {
            issues.push(...this.availableEndTime.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceAvailableTime._fts_dataType = 'HealthcareServiceAvailableTime';
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
export class HealthcareServiceNotAvailable extends fhir.BackboneElement {
    /**
     * Default constructor for HealthcareServiceNotAvailable - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        else {
            this.description = null;
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['during']) {
            this.during = new fhir.Period(source.during);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['description']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description:fhir.FhirString fhir: HealthcareService.notAvailable.description:string' });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["during"]) {
            issues.push(...this.during.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareServiceNotAvailable._fts_dataType = 'HealthcareServiceNotAvailable';
/**
 * The details of a healthcare service available at a location.
 */
export class HealthcareService extends fhir.DomainResource {
    /**
     * Default constructor for HealthcareService - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'HealthcareService';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['providedBy']) {
            this.providedBy = new fhir.Reference(source.providedBy);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialty = [];
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.Reference(x));
        }
        else {
            this.location = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['extraDetails']) {
            this.extraDetails = new fhir.FhirMarkdown({ value: source.extraDetails });
        }
        if (source['_extraDetails']) {
            if (this.extraDetails) {
                this.extraDetails.addExtendedProperties(source._extraDetails);
            }
            else {
                this.extraDetails = new fhir.FhirMarkdown(source._extraDetails);
            }
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        else {
            this.coverageArea = [];
        }
        if (source['serviceProvisionCode']) {
            this.serviceProvisionCode = source.serviceProvisionCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceProvisionCode = [];
        }
        if (source['eligibility']) {
            this.eligibility = source.eligibility.map((x) => new fhir.HealthcareServiceEligibility(x));
        }
        else {
            this.eligibility = [];
        }
        if (source['program']) {
            this.program = source.program.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.program = [];
        }
        if (source['characteristic']) {
            this.characteristic = source.characteristic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.characteristic = [];
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.communication = [];
        }
        if (source['referralMethod']) {
            this.referralMethod = source.referralMethod.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.referralMethod = [];
        }
        if (source['appointmentRequired']) {
            this.appointmentRequired = new fhir.FhirBoolean({ value: source.appointmentRequired });
        }
        if (source['_appointmentRequired']) {
            if (this.appointmentRequired) {
                this.appointmentRequired.addExtendedProperties(source._appointmentRequired);
            }
            else {
                this.appointmentRequired = new fhir.FhirBoolean(source._appointmentRequired);
            }
        }
        if (source['availableTime']) {
            this.availableTime = source.availableTime.map((x) => new fhir.HealthcareServiceAvailableTime(x));
        }
        else {
            this.availableTime = [];
        }
        if (source['notAvailable']) {
            this.notAvailable = source.notAvailable.map((x) => new fhir.HealthcareServiceNotAvailable(x));
        }
        else {
            this.notAvailable = [];
        }
        if (source['availabilityExceptions']) {
            this.availabilityExceptions = new fhir.FhirString({ value: source.availabilityExceptions });
        }
        if (source['_availabilityExceptions']) {
            if (this.availabilityExceptions) {
                this.availabilityExceptions.addExtendedProperties(source._availabilityExceptions);
            }
            else {
                this.availabilityExceptions = new fhir.FhirString(source._availabilityExceptions);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Preferred-bound Value Set for specialty (HealthcareService.specialty)
     */
    static get specialtyPreferredCodings() {
        return C80PracticeCodings;
    }
    /**
     * Preferred-bound Value Set for communication (HealthcareService.communication)
     */
    static get communicationPreferredCodings() {
        return LanguagesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"HealthcareService" fhir: HealthcareService.resourceType:"HealthcareService"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation());
        }
        if (this["providedBy"]) {
            issues.push(...this.providedBy.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            this.location.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        if (this["extraDetails"]) {
            issues.push(...this.extraDetails.doModelValidation());
        }
        if (this["photo"]) {
            issues.push(...this.photo.doModelValidation());
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["serviceProvisionCode"]) {
            this.serviceProvisionCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["eligibility"]) {
            this.eligibility.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["program"]) {
            this.program.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["characteristic"]) {
            this.characteristic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["communication"]) {
            this.communication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["referralMethod"]) {
            this.referralMethod.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["appointmentRequired"]) {
            issues.push(...this.appointmentRequired.doModelValidation());
        }
        if (this["availableTime"]) {
            this.availableTime.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["notAvailable"]) {
            this.notAvailable.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["availabilityExceptions"]) {
            issues.push(...this.availabilityExceptions.doModelValidation());
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
HealthcareService._fts_dataType = 'HealthcareService';
//# sourceMappingURL=data:application/json;base64,