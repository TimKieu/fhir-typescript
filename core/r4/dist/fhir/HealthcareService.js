/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { DaysOfWeekCodings } from '../fhirValueSets/DaysOfWeekCodings.js';
import { C80PracticeCodesCodings } from '../fhirValueSets/C80PracticeCodesCodings.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirTime } from './FhirTime.js';
import { FhirString } from './FhirString.js';
import { Period } from './Period.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { Attachment } from './Attachment.js';
import { ContactPoint } from './ContactPoint.js';

// <auto-generated/>
/**
 * Does this service have specific eligibility requirements that need to be met in order to use the service?
 */
var HealthcareServiceEligibility = /** @class */ (function (_super) {
    __extends(HealthcareServiceEligibility, _super);
    /**
     * Default constructor for HealthcareServiceEligibility - initializes any required elements to null if a value is not provided.
     */
    function HealthcareServiceEligibility(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['comment']) {
            _this.comment = new FhirMarkdown({ value: source.comment });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    HealthcareServiceEligibility.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_b = outcome.issue).push.apply(_b, this.comment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    HealthcareServiceEligibility._fts_dataType = 'HealthcareServiceEligibility';
    return HealthcareServiceEligibility;
}(BackboneElement));
/**
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
var HealthcareServiceAvailableTime = /** @class */ (function (_super) {
    __extends(HealthcareServiceAvailableTime, _super);
    /**
     * Default constructor for HealthcareServiceAvailableTime - initializes any required elements to null if a value is not provided.
     */
    function HealthcareServiceAvailableTime(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['daysOfWeek']) {
            _this.daysOfWeek = source.daysOfWeek.map(function (x) { return x; });
        }
        else {
            _this.daysOfWeek = [];
        }
        if (source['allDay']) {
            _this.allDay = new FhirBoolean({ value: source.allDay });
        }
        if (source['availableStartTime']) {
            _this.availableStartTime = new FhirTime({ value: source.availableStartTime });
        }
        if (source['availableEndTime']) {
            _this.availableEndTime = new FhirTime({ value: source.availableEndTime });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for daysOfWeek (HealthcareService.availableTime.daysOfWeek)
     */
    HealthcareServiceAvailableTime.daysOfWeekRequiredCoding = function () {
        return DaysOfWeekCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    HealthcareServiceAvailableTime.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["allDay"]) {
            (_a = outcome.issue).push.apply(_a, this.allDay.doModelValidation().issue);
        }
        if (this["availableStartTime"]) {
            (_b = outcome.issue).push.apply(_b, this.availableStartTime.doModelValidation().issue);
        }
        if (this["availableEndTime"]) {
            (_c = outcome.issue).push.apply(_c, this.availableEndTime.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    HealthcareServiceAvailableTime._fts_dataType = 'HealthcareServiceAvailableTime';
    return HealthcareServiceAvailableTime;
}(BackboneElement));
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
var HealthcareServiceNotAvailable = /** @class */ (function (_super) {
    __extends(HealthcareServiceNotAvailable, _super);
    /**
     * Default constructor for HealthcareServiceNotAvailable - initializes any required elements to null if a value is not provided.
     */
    function HealthcareServiceNotAvailable(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        else {
            _this.description = null;
        }
        if (source['during']) {
            _this.during = new Period(source.during);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    HealthcareServiceNotAvailable.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['description']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property description:fhir.FhirString fhir: HealthcareService.notAvailable.description:string', }));
        }
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["during"]) {
            (_b = outcome.issue).push.apply(_b, this.during.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    HealthcareServiceNotAvailable._fts_dataType = 'HealthcareServiceNotAvailable';
    return HealthcareServiceNotAvailable;
}(BackboneElement));
/**
 * The details of a healthcare service available at a location.
 */
var HealthcareService = /** @class */ (function (_super) {
    __extends(HealthcareService, _super);
    /**
     * Default constructor for HealthcareService - initializes any required elements to null if a value is not provided.
     */
    function HealthcareService(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'HealthcareService';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['providedBy']) {
            _this.providedBy = new Reference(source.providedBy);
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['specialty']) {
            _this.specialty = source.specialty.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.specialty = [];
        }
        if (source['location']) {
            _this.location = source.location.map(function (x) { return new Reference(x); });
        }
        else {
            _this.location = [];
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        if (source['extraDetails']) {
            _this.extraDetails = new FhirMarkdown({ value: source.extraDetails });
        }
        if (source['photo']) {
            _this.photo = new Attachment(source.photo);
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['coverageArea']) {
            _this.coverageArea = source.coverageArea.map(function (x) { return new Reference(x); });
        }
        else {
            _this.coverageArea = [];
        }
        if (source['serviceProvisionCode']) {
            _this.serviceProvisionCode = source.serviceProvisionCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.serviceProvisionCode = [];
        }
        if (source['eligibility']) {
            _this.eligibility = source.eligibility.map(function (x) { return new HealthcareServiceEligibility(x); });
        }
        else {
            _this.eligibility = [];
        }
        if (source['program']) {
            _this.program = source.program.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.program = [];
        }
        if (source['characteristic']) {
            _this.characteristic = source.characteristic.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.characteristic = [];
        }
        if (source['communication']) {
            _this.communication = source.communication.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.communication = [];
        }
        if (source['referralMethod']) {
            _this.referralMethod = source.referralMethod.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.referralMethod = [];
        }
        if (source['appointmentRequired']) {
            _this.appointmentRequired = new FhirBoolean({ value: source.appointmentRequired });
        }
        if (source['availableTime']) {
            _this.availableTime = source.availableTime.map(function (x) { return new HealthcareServiceAvailableTime(x); });
        }
        else {
            _this.availableTime = [];
        }
        if (source['notAvailable']) {
            _this.notAvailable = source.notAvailable.map(function (x) { return new HealthcareServiceNotAvailable(x); });
        }
        else {
            _this.notAvailable = [];
        }
        if (source['availabilityExceptions']) {
            _this.availabilityExceptions = new FhirString({ value: source.availabilityExceptions });
        }
        if (source['endpoint']) {
            _this.endpoint = source.endpoint.map(function (x) { return new Reference(x); });
        }
        else {
            _this.endpoint = [];
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for specialty (HealthcareService.specialty)
     */
    HealthcareService.specialtyPreferredCoding = function () {
        return C80PracticeCodesCodings;
    };
    /**
     * Preferred-bound Value Set for communication (HealthcareService.communication)
     */
    HealthcareService.communicationPreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    HealthcareService.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"HealthcareService" fhir: HealthcareService.resourceType:"HealthcareService"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (this["providedBy"]) {
            (_b = outcome.issue).push.apply(_b, this.providedBy.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["specialty"]) {
            this.specialty.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["location"]) {
            this.location.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_d = outcome.issue).push.apply(_d, this.comment.doModelValidation().issue);
        }
        if (this["extraDetails"]) {
            (_e = outcome.issue).push.apply(_e, this.extraDetails.doModelValidation().issue);
        }
        if (this["photo"]) {
            (_f = outcome.issue).push.apply(_f, this.photo.doModelValidation().issue);
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["serviceProvisionCode"]) {
            this.serviceProvisionCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["eligibility"]) {
            this.eligibility.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["program"]) {
            this.program.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["characteristic"]) {
            this.characteristic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["communication"]) {
            this.communication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["referralMethod"]) {
            this.referralMethod.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["appointmentRequired"]) {
            (_g = outcome.issue).push.apply(_g, this.appointmentRequired.doModelValidation().issue);
        }
        if (this["availableTime"]) {
            this.availableTime.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["notAvailable"]) {
            this.notAvailable.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["availabilityExceptions"]) {
            (_h = outcome.issue).push.apply(_h, this.availabilityExceptions.doModelValidation().issue);
        }
        if (this["endpoint"]) {
            this.endpoint.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    HealthcareService._fts_dataType = 'HealthcareService';
    return HealthcareService;
}(DomainResource));

export { HealthcareService, HealthcareServiceAvailableTime, HealthcareServiceEligibility, HealthcareServiceNotAvailable };
//# sourceMappingURL=HealthcareService.js.map
