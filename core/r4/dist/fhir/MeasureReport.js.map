{"version":3,"file":"MeasureReport.js","sources":["../../src/fhir/MeasureReport.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: MeasureReport\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { MeasurePopulationCodings, MeasurePopulationCodingType,} from '../fhirValueSets/MeasurePopulationCodings.js';\r\n// @ts-ignore\r\nimport { MeasurePopulationCodes,  MeasurePopulationCodeType } from '../fhirValueSets/MeasurePopulationCodes.js';\r\n// @ts-ignore\r\nimport { MeasureReportStatusCodings, MeasureReportStatusCodingType,} from '../fhirValueSets/MeasureReportStatusCodings.js';\r\n// @ts-ignore\r\nimport { MeasureReportStatusCodes,  MeasureReportStatusCodeType } from '../fhirValueSets/MeasureReportStatusCodes.js';\r\n// @ts-ignore\r\nimport { MeasureReportTypeCodings, MeasureReportTypeCodingType,} from '../fhirValueSets/MeasureReportTypeCodings.js';\r\n// @ts-ignore\r\nimport { MeasureReportTypeCodes,  MeasureReportTypeCodeType } from '../fhirValueSets/MeasureReportTypeCodes.js';\r\n// @ts-ignore\r\nimport { MeasureImprovementNotationCodings, MeasureImprovementNotationCodingType,} from '../fhirValueSets/MeasureImprovementNotationCodings.js';\r\n// @ts-ignore\r\nimport { MeasureImprovementNotationCodes,  MeasureImprovementNotationCodeType } from '../fhirValueSets/MeasureImprovementNotationCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the MeasureReportGroupPopulation type.\r\n */\r\nexport interface MeasureReportGroupPopulationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of the population.\r\n   */\r\n  code?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The number of members of the population.\r\n   */\r\n  count?: fhir.FhirInteger|number|undefined;\r\n  /**\r\n   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.\r\n   */\r\n  subjectResults?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * The populations that make up the population group, one for each type of population appropriate for the measure.\r\n */\r\nexport class MeasureReportGroupPopulation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MeasureReportGroupPopulation';\r\n  /**\r\n   * The type of the population.\r\n   */\r\n  public code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The number of members of the population.\r\n   */\r\n  public count?: fhir.FhirInteger|undefined;\r\n  /**\r\n   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.\r\n   */\r\n  public subjectResults?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for MeasureReportGroupPopulation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MeasureReportGroupPopulationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    if (source['count']) { this.count = new fhir.FhirInteger({value: source.count}); }\r\n    if (source['subjectResults']) { this.subjectResults = new fhir.Reference(source.subjectResults); }\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for code (MeasureReport.group.population.code)\r\n   */\r\n  public static codeExtensibleCoding():MeasurePopulationCodingType {\r\n    return MeasurePopulationCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"count\"]) { outcome.issue!.push(...this.count.doModelValidation().issue!); }\r\n    if (this[\"subjectResults\"]) { outcome.issue!.push(...this.subjectResults.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MeasureReportGroupStratifierStratumComponent type.\r\n */\r\nexport interface MeasureReportGroupStratifierStratumComponentArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The code for the stratum component value.\r\n   */\r\n  code: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * The stratum component value.\r\n   */\r\n  value: fhir.CodeableConceptArgs|null;\r\n}\r\n\r\n/**\r\n * A stratifier component value.\r\n */\r\nexport class MeasureReportGroupStratifierStratumComponent extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MeasureReportGroupStratifierStratumComponent';\r\n  /**\r\n   * The code for the stratum component value.\r\n   */\r\n  public code: fhir.CodeableConcept|null;\r\n  /**\r\n   * The stratum component value.\r\n   */\r\n  public value: fhir.CodeableConcept|null;\r\n  /**\r\n   * Default constructor for MeasureReportGroupStratifierStratumComponent - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MeasureReportGroupStratifierStratumComponentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    else { this.code = null; }\r\n    if (source['value']) { this.value = new fhir.CodeableConcept(source.value); }\r\n    else { this.value = null; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['code']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MeasureReport.group.stratifier.stratum.component.code:CodeableConcept', }));\r\n    }\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (!this['value']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property value:fhir.CodeableConcept fhir: MeasureReport.group.stratifier.stratum.component.value:CodeableConcept', }));\r\n    }\r\n    if (this[\"value\"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MeasureReportGroupStratifierStratumPopulation type.\r\n */\r\nexport interface MeasureReportGroupStratifierStratumPopulationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of the population.\r\n   */\r\n  code?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The number of members of the population in this stratum.\r\n   */\r\n  count?: fhir.FhirInteger|number|undefined;\r\n  /**\r\n   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.\r\n   */\r\n  subjectResults?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * The populations that make up the stratum, one for each type of population appropriate to the measure.\r\n */\r\nexport class MeasureReportGroupStratifierStratumPopulation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MeasureReportGroupStratifierStratumPopulation';\r\n  /**\r\n   * The type of the population.\r\n   */\r\n  public code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The number of members of the population in this stratum.\r\n   */\r\n  public count?: fhir.FhirInteger|undefined;\r\n  /**\r\n   * This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.\r\n   */\r\n  public subjectResults?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for MeasureReportGroupStratifierStratumPopulation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MeasureReportGroupStratifierStratumPopulationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    if (source['count']) { this.count = new fhir.FhirInteger({value: source.count}); }\r\n    if (source['subjectResults']) { this.subjectResults = new fhir.Reference(source.subjectResults); }\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for code (MeasureReport.group.stratifier.stratum.population.code)\r\n   */\r\n  public static codeExtensibleCoding():MeasurePopulationCodingType {\r\n    return MeasurePopulationCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"count\"]) { outcome.issue!.push(...this.count.doModelValidation().issue!); }\r\n    if (this[\"subjectResults\"]) { outcome.issue!.push(...this.subjectResults.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MeasureReportGroupStratifierStratum type.\r\n */\r\nexport interface MeasureReportGroupStratifierStratumArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.\r\n   */\r\n  value?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * A stratifier component value.\r\n   */\r\n  component?: fhir.MeasureReportGroupStratifierStratumComponentArgs[]|undefined;\r\n  /**\r\n   * The populations that make up the stratum, one for each type of population appropriate to the measure.\r\n   */\r\n  population?: fhir.MeasureReportGroupStratifierStratumPopulationArgs[]|undefined;\r\n  /**\r\n   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.\r\n   */\r\n  measureScore?: fhir.QuantityArgs|undefined;\r\n}\r\n\r\n/**\r\n * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.\r\n */\r\nexport class MeasureReportGroupStratifierStratum extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MeasureReportGroupStratifierStratum';\r\n  /**\r\n   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.\r\n   */\r\n  public value?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A stratifier component value.\r\n   */\r\n  public component?: fhir.MeasureReportGroupStratifierStratumComponent[];\r\n  /**\r\n   * The populations that make up the stratum, one for each type of population appropriate to the measure.\r\n   */\r\n  public population?: fhir.MeasureReportGroupStratifierStratumPopulation[];\r\n  /**\r\n   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.\r\n   */\r\n  public measureScore?: fhir.Quantity|undefined;\r\n  /**\r\n   * Default constructor for MeasureReportGroupStratifierStratum - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MeasureReportGroupStratifierStratumArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['value']) { this.value = new fhir.CodeableConcept(source.value); }\r\n    if (source['component']) { this.component = source.component.map((x) => new fhir.MeasureReportGroupStratifierStratumComponent(x)); }\r\n    else { this.component = []; }\r\n    if (source['population']) { this.population = source.population.map((x) => new fhir.MeasureReportGroupStratifierStratumPopulation(x)); }\r\n    else { this.population = []; }\r\n    if (source['measureScore']) { this.measureScore = new fhir.Quantity(source.measureScore); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"value\"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }\r\n    if (this[\"component\"]) { this.component.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"population\"]) { this.population.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"measureScore\"]) { outcome.issue!.push(...this.measureScore.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MeasureReportGroupStratifier type.\r\n */\r\nexport interface MeasureReportGroupStratifierArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The meaning of this stratifier, as defined in the measure definition.\r\n   */\r\n  code?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.\r\n   */\r\n  stratum?: fhir.MeasureReportGroupStratifierStratumArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.\r\n */\r\nexport class MeasureReportGroupStratifier extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MeasureReportGroupStratifier';\r\n  /**\r\n   * The meaning of this stratifier, as defined in the measure definition.\r\n   */\r\n  public code?: fhir.CodeableConcept[];\r\n  /**\r\n   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.\r\n   */\r\n  public stratum?: fhir.MeasureReportGroupStratifierStratum[];\r\n  /**\r\n   * Default constructor for MeasureReportGroupStratifier - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MeasureReportGroupStratifierArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = source.code.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.code = []; }\r\n    if (source['stratum']) { this.stratum = source.stratum.map((x) => new fhir.MeasureReportGroupStratifierStratum(x)); }\r\n    else { this.stratum = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"code\"]) { this.code.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"stratum\"]) { this.stratum.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MeasureReportGroup type.\r\n */\r\nexport interface MeasureReportGroupArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The meaning of the population group as defined in the measure definition.\r\n   */\r\n  code?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The populations that make up the population group, one for each type of population appropriate for the measure.\r\n   */\r\n  population?: fhir.MeasureReportGroupPopulationArgs[]|undefined;\r\n  /**\r\n   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.\r\n   */\r\n  measureScore?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.\r\n   */\r\n  stratifier?: fhir.MeasureReportGroupStratifierArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * The results of the calculation, one for each population group in the measure.\r\n */\r\nexport class MeasureReportGroup extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MeasureReportGroup';\r\n  /**\r\n   * The meaning of the population group as defined in the measure definition.\r\n   */\r\n  public code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The populations that make up the population group, one for each type of population appropriate for the measure.\r\n   */\r\n  public population?: fhir.MeasureReportGroupPopulation[];\r\n  /**\r\n   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.\r\n   */\r\n  public measureScore?: fhir.Quantity|undefined;\r\n  /**\r\n   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.\r\n   */\r\n  public stratifier?: fhir.MeasureReportGroupStratifier[];\r\n  /**\r\n   * Default constructor for MeasureReportGroup - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MeasureReportGroupArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    if (source['population']) { this.population = source.population.map((x) => new fhir.MeasureReportGroupPopulation(x)); }\r\n    else { this.population = []; }\r\n    if (source['measureScore']) { this.measureScore = new fhir.Quantity(source.measureScore); }\r\n    if (source['stratifier']) { this.stratifier = source.stratifier.map((x) => new fhir.MeasureReportGroupStratifier(x)); }\r\n    else { this.stratifier = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"population\"]) { this.population.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"measureScore\"]) { outcome.issue!.push(...this.measureScore.doModelValidation().issue!); }\r\n    if (this[\"stratifier\"]) { this.stratifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MeasureReport type.\r\n */\r\nexport interface MeasureReportArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"MeasureReport\"|undefined;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  status: MeasureReportStatusCodeType|null;\r\n  /**\r\n   * Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.\r\n   */\r\n  type: MeasureReportTypeCodeType|null;\r\n  /**\r\n   * A reference to the Measure that was calculated to produce this report.\r\n   */\r\n  measure: fhir.FhirCanonical|string|undefined;\r\n  /**\r\n   * Optional subject identifying the individual or individuals the report is for.\r\n   */\r\n  subject?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * The date this measure report was generated.\r\n   */\r\n  date?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * The individual, location, or organization that is reporting the data.\r\n   */\r\n  reporter?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * The reporting period for which the report was calculated.\r\n   */\r\n  period: fhir.PeriodArgs|null;\r\n  /**\r\n   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.\r\n   */\r\n  improvementNotation?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The results of the calculation, one for each population group in the measure.\r\n   */\r\n  group?: fhir.MeasureReportGroupArgs[]|undefined;\r\n  /**\r\n   * A reference to a Bundle containing the Resources that were used in the calculation of this measure.\r\n   */\r\n  evaluatedResource?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.\r\n */\r\nexport class MeasureReport extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MeasureReport';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"MeasureReport\";\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  public status: MeasureReportStatusCodeType|null;\r\n  /**\r\n   * Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.\r\n   */\r\n  public type: MeasureReportTypeCodeType|null;\r\n  /**\r\n   * A reference to the Measure that was calculated to produce this report.\r\n   */\r\n  public measure: fhir.FhirCanonical|null;\r\n  /**\r\n   * Optional subject identifying the individual or individuals the report is for.\r\n   */\r\n  public subject?: fhir.Reference|undefined;\r\n  /**\r\n   * The date this measure report was generated.\r\n   */\r\n  public date?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * The individual, location, or organization that is reporting the data.\r\n   */\r\n  public reporter?: fhir.Reference|undefined;\r\n  /**\r\n   * The reporting period for which the report was calculated.\r\n   */\r\n  public period: fhir.Period|null;\r\n  /**\r\n   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.\r\n   */\r\n  public improvementNotation?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The results of the calculation, one for each population group in the measure.\r\n   */\r\n  public group?: fhir.MeasureReportGroup[];\r\n  /**\r\n   * A reference to a Bundle containing the Resources that were used in the calculation of this measure.\r\n   */\r\n  public evaluatedResource?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for MeasureReport - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MeasureReportArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'MeasureReport';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['status']) { this.status = source.status; }\r\n    else { this.status = null; }\r\n    if (source['type']) { this.type = source.type; }\r\n    else { this.type = null; }\r\n    if (source['measure']) { this.measure = new fhir.FhirCanonical({value: source.measure}); }\r\n    else { this.measure = null; }\r\n    if (source['subject']) { this.subject = new fhir.Reference(source.subject); }\r\n    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }\r\n    if (source['reporter']) { this.reporter = new fhir.Reference(source.reporter); }\r\n    if (source['period']) { this.period = new fhir.Period(source.period); }\r\n    else { this.period = null; }\r\n    if (source['improvementNotation']) { this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation); }\r\n    if (source['group']) { this.group = source.group.map((x) => new fhir.MeasureReportGroup(x)); }\r\n    else { this.group = []; }\r\n    if (source['evaluatedResource']) { this.evaluatedResource = source.evaluatedResource.map((x) => new fhir.Reference(x)); }\r\n    else { this.evaluatedResource = []; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (MeasureReport.status)\r\n   */\r\n  public static statusRequiredCoding():MeasureReportStatusCodingType {\r\n    return MeasureReportStatusCodings;\r\n  }\r\n  /**\r\n   * Required-bound Value Set for type (MeasureReport.type)\r\n   */\r\n  public static typeRequiredCoding():MeasureReportTypeCodingType {\r\n    return MeasureReportTypeCodings;\r\n  }\r\n  /**\r\n   * Required-bound Value Set for improvementNotation (MeasureReport.improvementNotation)\r\n   */\r\n  public static improvementNotationRequiredCoding():MeasureImprovementNotationCodingType {\r\n    return MeasureImprovementNotationCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"MeasureReport\" fhir: MeasureReport.resourceType:\"MeasureReport\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['status']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property status:MeasureReportStatusCodeType fhir: MeasureReport.status:code', }));\r\n    }\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:MeasureReportTypeCodeType fhir: MeasureReport.type:code', }));\r\n    }\r\n    if (!this['measure']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property measure:fhir.FhirCanonical fhir: MeasureReport.measure:canonical', }));\r\n    }\r\n    if (this[\"measure\"]) { outcome.issue!.push(...this.measure.doModelValidation().issue!); }\r\n    if (this[\"subject\"]) { outcome.issue!.push(...this.subject.doModelValidation().issue!); }\r\n    if (this[\"date\"]) { outcome.issue!.push(...this.date.doModelValidation().issue!); }\r\n    if (this[\"reporter\"]) { outcome.issue!.push(...this.reporter.doModelValidation().issue!); }\r\n    if (!this['period']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property period:fhir.Period fhir: MeasureReport.period:Period', }));\r\n    }\r\n    if (this[\"period\"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }\r\n    if (this[\"improvementNotation\"]) { outcome.issue!.push(...this.improvementNotation.doModelValidation().issue!); }\r\n    if (this[\"group\"]) { this.group.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"evaluatedResource\"]) { this.evaluatedResource.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.CodeableConcept","fhir.FhirInteger","fhir.Reference","fhir.BackboneElement","fhir.OperationOutcomeIssue","fhir.MeasureReportGroupStratifierStratumComponent","fhir.MeasureReportGroupStratifierStratumPopulation","fhir.Quantity","fhir.MeasureReportGroupStratifierStratum","fhir.MeasureReportGroupPopulation","fhir.MeasureReportGroupStratifier","fhir.Identifier","fhir.FhirCanonical","fhir.FhirDateTime","fhir.Period","fhir.MeasureReportGroup","fhir.DomainResource"],"mappings":"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"}