// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: SampledData
import * as fhir from '../fhir.js';
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export class SampledData extends fhir.FhirElement {
    /**
     * Default constructor for SampledData - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['origin']) {
            this.origin = new fhir.Quantity(source.origin, options);
        }
        else {
            this.origin = null;
        }
        if (source['period'] !== undefined) {
            this.period = new fhir.FhirDecimal({ value: source.period }, options);
        }
        else {
            this.period = null;
        }
        if (source['_period']) {
            if (this.period) {
                this.period.addExtendedProperties(source._period);
            }
            else {
                this.period = new fhir.FhirDecimal(source._period, options);
            }
        }
        if (source['factor'] !== undefined) {
            this.factor = new fhir.FhirDecimal({ value: source.factor }, options);
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor, options);
            }
        }
        if (source['lowerLimit'] !== undefined) {
            this.lowerLimit = new fhir.FhirDecimal({ value: source.lowerLimit }, options);
        }
        if (source['_lowerLimit']) {
            if (this.lowerLimit) {
                this.lowerLimit.addExtendedProperties(source._lowerLimit);
            }
            else {
                this.lowerLimit = new fhir.FhirDecimal(source._lowerLimit, options);
            }
        }
        if (source['upperLimit'] !== undefined) {
            this.upperLimit = new fhir.FhirDecimal({ value: source.upperLimit }, options);
        }
        if (source['_upperLimit']) {
            if (this.upperLimit) {
                this.upperLimit.addExtendedProperties(source._upperLimit);
            }
            else {
                this.upperLimit = new fhir.FhirDecimal(source._upperLimit, options);
            }
        }
        if (source['dimensions'] !== undefined) {
            this.dimensions = new fhir.FhirPositiveInt({ value: source.dimensions }, options);
        }
        else {
            this.dimensions = null;
        }
        if (source['_dimensions']) {
            if (this.dimensions) {
                this.dimensions.addExtendedProperties(source._dimensions);
            }
            else {
                this.dimensions = new fhir.FhirPositiveInt(source._dimensions, options);
            }
        }
        if (source['data'] !== undefined) {
            this.data = new fhir.FhirString({ value: source.data }, options);
        }
        if (source['_data']) {
            if (this.data) {
                this.data.addExtendedProperties(source._data);
            }
            else {
                this.data = new fhir.FhirString(source._data, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SampledData';
        }
        iss.push(...this.vRS('origin', exp));
        iss.push(...this.vRS('period', exp));
        iss.push(...this.vOS('factor', exp));
        iss.push(...this.vOS('lowerLimit', exp));
        iss.push(...this.vOS('upperLimit', exp));
        iss.push(...this.vRS('dimensions', exp));
        iss.push(...this.vOS('data', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SampledData._fts_dataType = 'SampledData';
//# sourceMappingURL=data:application/json;base64,