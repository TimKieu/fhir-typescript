/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirElement } from './FhirElement.js';
import { Quantity } from './Quantity.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
var SampledData = /** @class */ (function (_super) {
    __extends(SampledData, _super);
    /**
     * Default constructor for SampledData - initializes any required elements to null if a value is not provided.
     */
    function SampledData(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['origin']) {
            _this.origin = new Quantity(source.origin);
        }
        else {
            _this.origin = null;
        }
        if (source['period']) {
            _this.period = new FhirDecimal({ value: source.period });
        }
        else {
            _this.period = null;
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['lowerLimit']) {
            _this.lowerLimit = new FhirDecimal({ value: source.lowerLimit });
        }
        if (source['upperLimit']) {
            _this.upperLimit = new FhirDecimal({ value: source.upperLimit });
        }
        if (source['dimensions']) {
            _this.dimensions = new FhirPositiveInt({ value: source.dimensions });
        }
        else {
            _this.dimensions = null;
        }
        if (source['data']) {
            _this.data = new FhirString({ value: source.data });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SampledData.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['origin']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property origin:fhir.Quantity fhir: SampledData.origin:Quantity', }));
        }
        if (this["origin"]) {
            (_a = outcome.issue).push.apply(_a, this.origin.doModelValidation().issue);
        }
        if (!this['period']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property period:fhir.FhirDecimal fhir: SampledData.period:decimal', }));
        }
        if (this["period"]) {
            (_b = outcome.issue).push.apply(_b, this.period.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_c = outcome.issue).push.apply(_c, this.factor.doModelValidation().issue);
        }
        if (this["lowerLimit"]) {
            (_d = outcome.issue).push.apply(_d, this.lowerLimit.doModelValidation().issue);
        }
        if (this["upperLimit"]) {
            (_e = outcome.issue).push.apply(_e, this.upperLimit.doModelValidation().issue);
        }
        if (!this['dimensions']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property dimensions:fhir.FhirPositiveInt fhir: SampledData.dimensions:positiveInt', }));
        }
        if (this["dimensions"]) {
            (_f = outcome.issue).push.apply(_f, this.dimensions.doModelValidation().issue);
        }
        if (this["data"]) {
            (_g = outcome.issue).push.apply(_g, this.data.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SampledData._fts_dataType = 'SampledData';
    return SampledData;
}(FhirElement));

export { SampledData };
//# sourceMappingURL=SampledData.js.map
