{"version":3,"file":"SpecimenDefinition.js","sources":["../../src/fhir/SpecimenDefinition.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: SpecimenDefinition\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { ContainerMaterialCodings, ContainerMaterialCodingType,} from '../fhirValueSets/ContainerMaterialCodings.js';\r\n// @ts-ignore\r\nimport { ContainerMaterialCodes,  ContainerMaterialCodeType } from '../fhirValueSets/ContainerMaterialCodes.js';\r\n// @ts-ignore\r\nimport { SpecimenContainerTypeCodings, SpecimenContainerTypeCodingType,} from '../fhirValueSets/SpecimenContainerTypeCodings.js';\r\n// @ts-ignore\r\nimport { SpecimenContainerTypeCodes,  SpecimenContainerTypeCodeType } from '../fhirValueSets/SpecimenContainerTypeCodes.js';\r\n// @ts-ignore\r\nimport { ContainerCapCodings, ContainerCapCodingType,} from '../fhirValueSets/ContainerCapCodings.js';\r\n// @ts-ignore\r\nimport { ContainerCapCodes,  ContainerCapCodeType } from '../fhirValueSets/ContainerCapCodes.js';\r\n// @ts-ignore\r\nimport { HandlingConditionCodings, HandlingConditionCodingType,} from '../fhirValueSets/HandlingConditionCodings.js';\r\n// @ts-ignore\r\nimport { HandlingConditionCodes,  HandlingConditionCodeType } from '../fhirValueSets/HandlingConditionCodes.js';\r\n// @ts-ignore\r\nimport { V20487Codings, V20487CodingType,} from '../fhirValueSets/V20487Codings.js';\r\n// @ts-ignore\r\nimport { V20487Codes,  V20487CodeType } from '../fhirValueSets/V20487Codes.js';\r\n// @ts-ignore\r\nimport { SpecimenContainedPreferenceCodings, SpecimenContainedPreferenceCodingType,} from '../fhirValueSets/SpecimenContainedPreferenceCodings.js';\r\n// @ts-ignore\r\nimport { SpecimenContainedPreferenceCodes,  SpecimenContainedPreferenceCodeType } from '../fhirValueSets/SpecimenContainedPreferenceCodes.js';\r\n// @ts-ignore\r\nimport { RejectionCriteriaCodings, RejectionCriteriaCodingType,} from '../fhirValueSets/RejectionCriteriaCodings.js';\r\n// @ts-ignore\r\nimport { RejectionCriteriaCodes,  RejectionCriteriaCodeType } from '../fhirValueSets/RejectionCriteriaCodes.js';\r\n// @ts-ignore\r\nimport { PreparePatientPriorSpecimenCollectionCodings, PreparePatientPriorSpecimenCollectionCodingType,} from '../fhirValueSets/PreparePatientPriorSpecimenCollectionCodings.js';\r\n// @ts-ignore\r\nimport { PreparePatientPriorSpecimenCollectionCodes,  PreparePatientPriorSpecimenCollectionCodeType } from '../fhirValueSets/PreparePatientPriorSpecimenCollectionCodes.js';\r\n// @ts-ignore\r\nimport { SpecimenCollectionCodings, SpecimenCollectionCodingType,} from '../fhirValueSets/SpecimenCollectionCodings.js';\r\n// @ts-ignore\r\nimport { SpecimenCollectionCodes,  SpecimenCollectionCodeType } from '../fhirValueSets/SpecimenCollectionCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SpecimenDefinitionTypeTestedContainerAdditive type.\r\n */\r\nexport interface SpecimenDefinitionTypeTestedContainerAdditiveArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.\r\n   */\r\n  additive?: fhir.CodeableConcept|fhir.Reference|undefined;\r\n  /**\r\n   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.\r\n   */\r\n  additiveCodeableConcept?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.\r\n   */\r\n  additiveReference?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.\r\n */\r\nexport class SpecimenDefinitionTypeTestedContainerAdditive extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SpecimenDefinitionTypeTestedContainerAdditive';\r\n  /**\r\n   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.\r\n   */\r\n  public additive: (fhir.CodeableConcept|fhir.Reference)|null;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.additive.additive[x]\r\n   */\r\n  protected static readonly _fts_additiveIsChoice:true = true;\r\n  /**\r\n   * Default constructor for SpecimenDefinitionTypeTestedContainerAdditive - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SpecimenDefinitionTypeTestedContainerAdditiveArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['additive']) { this.additive = source.additive; }\r\n    else if (source['additiveCodeableConcept']) { this.additive = new fhir.CodeableConcept(source.additiveCodeableConcept); }\r\n    else if (source['additiveReference']) { this.additive = new fhir.Reference(source.additiveReference); }\r\n    else { this.additive = null; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['additive']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property additive: fhir: SpecimenDefinition.typeTested.container.additive.additive[x]:', }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SpecimenDefinitionTypeTestedContainer type.\r\n */\r\nexport interface SpecimenDefinitionTypeTestedContainerArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of material of the container.\r\n   */\r\n  material?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The type of container used to contain this kind of specimen.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Color of container cap.\r\n   */\r\n  cap?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The textual description of the kind of container.\r\n   */\r\n  description?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The capacity (volume or other measure) of this kind of container.\r\n   */\r\n  capacity?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * The minimum volume to be conditioned in the container.\r\n   */\r\n  minimumVolume?: fhir.Quantity|fhir.FhirString|undefined;\r\n  /**\r\n   * The minimum volume to be conditioned in the container.\r\n   */\r\n  minimumVolumeQuantity?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * The minimum volume to be conditioned in the container.\r\n   */\r\n  minimumVolumeString?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.\r\n   */\r\n  additive?: fhir.SpecimenDefinitionTypeTestedContainerAdditiveArgs[]|undefined;\r\n  /**\r\n   * Special processing that should be applied to the container for this kind of specimen.\r\n   */\r\n  preparation?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * The specimen's container.\r\n */\r\nexport class SpecimenDefinitionTypeTestedContainer extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SpecimenDefinitionTypeTestedContainer';\r\n  /**\r\n   * The type of material of the container.\r\n   */\r\n  public material?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The type of container used to contain this kind of specimen.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Color of container cap.\r\n   */\r\n  public cap?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The textual description of the kind of container.\r\n   */\r\n  public description?: fhir.FhirString|undefined;\r\n  /**\r\n   * The capacity (volume or other measure) of this kind of container.\r\n   */\r\n  public capacity?: fhir.Quantity|undefined;\r\n  /**\r\n   * The minimum volume to be conditioned in the container.\r\n   */\r\n  public minimumVolume?: (fhir.Quantity|fhir.FhirString)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.minimumVolume[x]\r\n   */\r\n  protected static readonly _fts_minimumVolumeIsChoice:true = true;\r\n  /**\r\n   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.\r\n   */\r\n  public additive?: fhir.SpecimenDefinitionTypeTestedContainerAdditive[];\r\n  /**\r\n   * Special processing that should be applied to the container for this kind of specimen.\r\n   */\r\n  public preparation?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for SpecimenDefinitionTypeTestedContainer - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SpecimenDefinitionTypeTestedContainerArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['material']) { this.material = new fhir.CodeableConcept(source.material); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['cap']) { this.cap = new fhir.CodeableConcept(source.cap); }\r\n    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }\r\n    if (source['capacity']) { this.capacity = new fhir.Quantity(source.capacity); }\r\n    if (source['minimumVolume']) { this.minimumVolume = source.minimumVolume; }\r\n    else if (source['minimumVolumeQuantity']) { this.minimumVolume = new fhir.Quantity(source.minimumVolumeQuantity); }\r\n    else if (source['minimumVolumeString']) { this.minimumVolume = new fhir.FhirString({value: source.minimumVolumeString}); }\r\n    if (source['additive']) { this.additive = source.additive.map((x) => new fhir.SpecimenDefinitionTypeTestedContainerAdditive(x)); }\r\n    else { this.additive = []; }\r\n    if (source['preparation']) { this.preparation = new fhir.FhirString({value: source.preparation}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"material\"]) { outcome.issue!.push(...this.material.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"cap\"]) { outcome.issue!.push(...this.cap.doModelValidation().issue!); }\r\n    if (this[\"description\"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }\r\n    if (this[\"capacity\"]) { outcome.issue!.push(...this.capacity.doModelValidation().issue!); }\r\n    if (this[\"additive\"]) { this.additive.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"preparation\"]) { outcome.issue!.push(...this.preparation.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SpecimenDefinitionTypeTestedHandling type.\r\n */\r\nexport interface SpecimenDefinitionTypeTestedHandlingArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.\r\n   */\r\n  temperatureQualifier?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The temperature interval for this set of handling instructions.\r\n   */\r\n  temperatureRange?: fhir.RangeArgs|undefined;\r\n  /**\r\n   * The maximum time interval of preservation of the specimen with these conditions.\r\n   */\r\n  maxDuration?: fhir.DurationArgs|undefined;\r\n  /**\r\n   * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.\r\n   */\r\n  instruction?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.\r\n */\r\nexport class SpecimenDefinitionTypeTestedHandling extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SpecimenDefinitionTypeTestedHandling';\r\n  /**\r\n   * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.\r\n   */\r\n  public temperatureQualifier?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The temperature interval for this set of handling instructions.\r\n   */\r\n  public temperatureRange?: fhir.Range|undefined;\r\n  /**\r\n   * The maximum time interval of preservation of the specimen with these conditions.\r\n   */\r\n  public maxDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.\r\n   */\r\n  public instruction?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for SpecimenDefinitionTypeTestedHandling - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SpecimenDefinitionTypeTestedHandlingArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['temperatureQualifier']) { this.temperatureQualifier = new fhir.CodeableConcept(source.temperatureQualifier); }\r\n    if (source['temperatureRange']) { this.temperatureRange = new fhir.Range(source.temperatureRange); }\r\n    if (source['maxDuration']) { this.maxDuration = new fhir.Duration(source.maxDuration); }\r\n    if (source['instruction']) { this.instruction = new fhir.FhirString({value: source.instruction}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"temperatureQualifier\"]) { outcome.issue!.push(...this.temperatureQualifier.doModelValidation().issue!); }\r\n    if (this[\"temperatureRange\"]) { outcome.issue!.push(...this.temperatureRange.doModelValidation().issue!); }\r\n    if (this[\"maxDuration\"]) { outcome.issue!.push(...this.maxDuration.doModelValidation().issue!); }\r\n    if (this[\"instruction\"]) { outcome.issue!.push(...this.instruction.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SpecimenDefinitionTypeTested type.\r\n */\r\nexport interface SpecimenDefinitionTypeTestedArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Primary of secondary specimen.\r\n   */\r\n  isDerived?: fhir.FhirBoolean|boolean|undefined;\r\n  /**\r\n   * The kind of specimen conditioned for testing expected by lab.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The preference for this type of conditioned specimen.\r\n   */\r\n  preference: SpecimenContainedPreferenceCodeType|null;\r\n  /**\r\n   * The specimen's container.\r\n   */\r\n  container?: fhir.SpecimenDefinitionTypeTestedContainerArgs|undefined;\r\n  /**\r\n   * Requirements for delivery and special handling of this kind of conditioned specimen.\r\n   */\r\n  requirement?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.\r\n   */\r\n  retentionTime?: fhir.DurationArgs|undefined;\r\n  /**\r\n   * Criterion for rejection of the specimen in its container by the laboratory.\r\n   */\r\n  rejectionCriterion?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.\r\n   */\r\n  handling?: fhir.SpecimenDefinitionTypeTestedHandlingArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Specimen conditioned in a container as expected by the testing laboratory.\r\n */\r\nexport class SpecimenDefinitionTypeTested extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SpecimenDefinitionTypeTested';\r\n  /**\r\n   * Primary of secondary specimen.\r\n   */\r\n  public isDerived?: fhir.FhirBoolean|undefined;\r\n  /**\r\n   * The kind of specimen conditioned for testing expected by lab.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The preference for this type of conditioned specimen.\r\n   */\r\n  public preference: SpecimenContainedPreferenceCodeType|null;\r\n  /**\r\n   * The specimen's container.\r\n   */\r\n  public container?: fhir.SpecimenDefinitionTypeTestedContainer|undefined;\r\n  /**\r\n   * Requirements for delivery and special handling of this kind of conditioned specimen.\r\n   */\r\n  public requirement?: fhir.FhirString|undefined;\r\n  /**\r\n   * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.\r\n   */\r\n  public retentionTime?: fhir.Duration|undefined;\r\n  /**\r\n   * Criterion for rejection of the specimen in its container by the laboratory.\r\n   */\r\n  public rejectionCriterion?: fhir.CodeableConcept[];\r\n  /**\r\n   * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.\r\n   */\r\n  public handling?: fhir.SpecimenDefinitionTypeTestedHandling[];\r\n  /**\r\n   * Default constructor for SpecimenDefinitionTypeTested - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SpecimenDefinitionTypeTestedArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['isDerived']) { this.isDerived = new fhir.FhirBoolean({value: source.isDerived}); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['preference']) { this.preference = source.preference; }\r\n    else { this.preference = null; }\r\n    if (source['container']) { this.container = new fhir.SpecimenDefinitionTypeTestedContainer(source.container); }\r\n    if (source['requirement']) { this.requirement = new fhir.FhirString({value: source.requirement}); }\r\n    if (source['retentionTime']) { this.retentionTime = new fhir.Duration(source.retentionTime); }\r\n    if (source['rejectionCriterion']) { this.rejectionCriterion = source.rejectionCriterion.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.rejectionCriterion = []; }\r\n    if (source['handling']) { this.handling = source.handling.map((x) => new fhir.SpecimenDefinitionTypeTestedHandling(x)); }\r\n    else { this.handling = []; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for preference (SpecimenDefinition.typeTested.preference)\r\n   */\r\n  public static preferenceRequiredCoding():SpecimenContainedPreferenceCodingType {\r\n    return SpecimenContainedPreferenceCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"isDerived\"]) { outcome.issue!.push(...this.isDerived.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (!this['preference']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property preference:SpecimenContainedPreferenceCodeType fhir: SpecimenDefinition.typeTested.preference:code', }));\r\n    }\r\n    if (this[\"container\"]) { outcome.issue!.push(...this.container.doModelValidation().issue!); }\r\n    if (this[\"requirement\"]) { outcome.issue!.push(...this.requirement.doModelValidation().issue!); }\r\n    if (this[\"retentionTime\"]) { outcome.issue!.push(...this.retentionTime.doModelValidation().issue!); }\r\n    if (this[\"rejectionCriterion\"]) { this.rejectionCriterion.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"handling\"]) { this.handling.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SpecimenDefinition type.\r\n */\r\nexport interface SpecimenDefinitionArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"SpecimenDefinition\"|undefined;\r\n  /**\r\n   * A business identifier associated with the kind of specimen.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * The kind of material to be collected.\r\n   */\r\n  typeCollected?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Preparation of the patient for specimen collection.\r\n   */\r\n  patientPreparation?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Time aspect of specimen collection (duration or offset).\r\n   */\r\n  timeAspect?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The action to be performed for collecting the specimen.\r\n   */\r\n  collection?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Specimen conditioned in a container as expected by the testing laboratory.\r\n   */\r\n  typeTested?: fhir.SpecimenDefinitionTypeTestedArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * A kind of specimen with associated set of requirements.\r\n */\r\nexport class SpecimenDefinition extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SpecimenDefinition';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"SpecimenDefinition\";\r\n  /**\r\n   * A business identifier associated with the kind of specimen.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * The kind of material to be collected.\r\n   */\r\n  public typeCollected?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Preparation of the patient for specimen collection.\r\n   */\r\n  public patientPreparation?: fhir.CodeableConcept[];\r\n  /**\r\n   * Time aspect of specimen collection (duration or offset).\r\n   */\r\n  public timeAspect?: fhir.FhirString|undefined;\r\n  /**\r\n   * The action to be performed for collecting the specimen.\r\n   */\r\n  public collection?: fhir.CodeableConcept[];\r\n  /**\r\n   * Specimen conditioned in a container as expected by the testing laboratory.\r\n   */\r\n  public typeTested?: fhir.SpecimenDefinitionTypeTested[];\r\n  /**\r\n   * Default constructor for SpecimenDefinition - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SpecimenDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'SpecimenDefinition';\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['typeCollected']) { this.typeCollected = new fhir.CodeableConcept(source.typeCollected); }\r\n    if (source['patientPreparation']) { this.patientPreparation = source.patientPreparation.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.patientPreparation = []; }\r\n    if (source['timeAspect']) { this.timeAspect = new fhir.FhirString({value: source.timeAspect}); }\r\n    if (source['collection']) { this.collection = source.collection.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.collection = []; }\r\n    if (source['typeTested']) { this.typeTested = source.typeTested.map((x) => new fhir.SpecimenDefinitionTypeTested(x)); }\r\n    else { this.typeTested = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"SpecimenDefinition\" fhir: SpecimenDefinition.resourceType:\"SpecimenDefinition\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"typeCollected\"]) { outcome.issue!.push(...this.typeCollected.doModelValidation().issue!); }\r\n    if (this[\"patientPreparation\"]) { this.patientPreparation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"timeAspect\"]) { outcome.issue!.push(...this.timeAspect.doModelValidation().issue!); }\r\n    if (this[\"collection\"]) { this.collection.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"typeTested\"]) { this.typeTested.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.CodeableConcept","fhir.Reference","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.FhirString","fhir.Quantity","fhir.SpecimenDefinitionTypeTestedContainerAdditive","fhir.Range","fhir.Duration","fhir.FhirBoolean","fhir.SpecimenDefinitionTypeTestedContainer","fhir.SpecimenDefinitionTypeTestedHandling","fhir.Identifier","fhir.SpecimenDefinitionTypeTested","fhir.DomainResource"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAiEA;;AAEG;AACH,IAAA,6CAAA,kBAAA,UAAA,MAAA,EAAA;IAAmE,SAAoB,CAAA,6CAAA,EAAA,MAAA,CAAA,CAAA;AAarF;;AAEG;IACH,SAAY,6CAAA,CAAA,MAAsE,EAAE,OAAwC,EAAA;AAAhH,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAsE,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA5H,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAKvB,IAAA,CAAA;AAJC,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAAE,SAAA;AACvD,aAAA,IAAI,MAAM,CAAC,yBAAyB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;AAAE,SAAA;AACpH,aAAA,IAAI,MAAM,CAAC,mBAAmB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIC,SAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAAE,SAAA;AAClG,aAAA;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAAE,SAAA;;KAC/B;AACD;;AAEG;AACa,IAAA,6CAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACrB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIC,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,yGAAyG,GAAG,CAAC,CAAC,CAAC;AACpQ,SAAA;AACD,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA/BD;;AAEG;IACoB,6CAAa,CAAA,aAAA,GAAU,+CAA+C,CAAC;AAK9F;;AAEG;IACuB,6CAAqB,CAAA,qBAAA,GAAQ,IAAI,CAAC;IAqB9D,OAAC,6CAAA,CAAA;AAAA,CAjCD,CAAmEC,eAAoB,CAiCtF,EAAA;AA+CD;;AAEG;AACH,IAAA,qCAAA,kBAAA,UAAA,MAAA,EAAA;IAA2D,SAAoB,CAAA,qCAAA,EAAA,MAAA,CAAA,CAAA;AAyC7E;;AAEG;IACH,SAAY,qCAAA,CAAA,MAA8D,EAAE,OAAwC,EAAA;AAAxG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA8D,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAApH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAYvB,IAAA,CAAA;AAXC,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIH,eAAoB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAAE,SAAA;AACtF,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AAC1E,QAAA,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,GAAG,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAAE,SAAA;AACvE,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAII,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,CAAC,CAAC;AAAE,SAAA;AACnG,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIC,QAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAAE,SAAA;AAC/E,QAAA,IAAI,MAAM,CAAC,eAAe,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;AAAE,SAAA;AACtE,aAAA,IAAI,MAAM,CAAC,uBAAuB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,aAAa,GAAG,IAAIA,QAAa,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAAE,SAAA;AAC9G,aAAA,IAAI,MAAM,CAAC,qBAAqB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,aAAa,GAAG,IAAID,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,mBAAmB,EAAC,CAAC,CAAC;AAAE,SAAA;AAC1H,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;YAAE,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIE,6CAAkD,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC7H,aAAA;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AAAE,SAAA;AAC5B,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAIF,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,CAAC,CAAC;AAAE,SAAA;;KACpG;AACD;;AAEG;AACa,IAAA,qCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3F,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjF,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3F,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACjH,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAtED;;AAEG;IACoB,qCAAa,CAAA,aAAA,GAAU,uCAAuC,CAAC;AAyBtF;;AAEG;IACuB,qCAA0B,CAAA,0BAAA,GAAQ,IAAI,CAAC;IAwCnE,OAAC,qCAAA,CAAA;AAAA,CAxED,CAA2DD,eAAoB,CAwE9E,EAAA;AAuBD;;AAEG;AACH,IAAA,oCAAA,kBAAA,UAAA,MAAA,EAAA;IAA0D,SAAoB,CAAA,oCAAA,EAAA,MAAA,CAAA,CAAA;AAqB5E;;AAEG;IACH,SAAY,oCAAA,CAAA,MAA6D,EAAE,OAAwC,EAAA;AAAvG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA6D,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAnH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAKvB,IAAA,CAAA;AAJC,QAAA,IAAI,MAAM,CAAC,sBAAsB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,oBAAoB,GAAG,IAAIH,eAAoB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAAE,SAAA;AAC1H,QAAA,IAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,gBAAgB,GAAG,IAAIO,KAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAAE,SAAA;AACpG,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAIC,QAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAAE,SAAA;AACxF,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAIJ,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,CAAC,CAAC;AAAE,SAAA;;KACpG;AACD;;AAEG;AACa,IAAA,oCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnH,QAAA,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3G,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAxCD;;AAEG;IACoB,oCAAa,CAAA,aAAA,GAAU,sCAAsC,CAAC;IAsCvF,OAAC,oCAAA,CAAA;AAAA,CA1CD,CAA0DD,eAAoB,CA0C7E,EAAA;AAuCD;;AAEG;AACH,IAAA,4BAAA,kBAAA,UAAA,MAAA,EAAA;IAAkD,SAAoB,CAAA,4BAAA,EAAA,MAAA,CAAA,CAAA;AAqCpE;;AAEG;IACH,SAAY,4BAAA,CAAA,MAAqD,EAAE,OAAwC,EAAA;AAA/F,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAqD,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA3G,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAYvB,IAAA,CAAA;AAXC,QAAA,IAAI,MAAM,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,SAAS,GAAG,IAAIM,WAAgB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,SAAS,EAAC,CAAC,CAAC;AAAE,SAAA;AAC9F,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAIT,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AAC1E,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;AAAE,SAAA;AAC7D,aAAA;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAAE,SAAA;AAChC,QAAA,IAAI,MAAM,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,SAAS,GAAG,IAAIU,qCAA0C,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAAE,SAAA;AAC/G,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAIN,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,CAAC,CAAC;AAAE,SAAA;AACnG,QAAA,IAAI,MAAM,CAAC,eAAe,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,aAAa,GAAG,IAAII,QAAa,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAAE,SAAA;AAC9F,QAAA,IAAI,MAAM,CAAC,oBAAoB,CAAC,EAAE;YAAE,KAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIR,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC7H,aAAA;AAAE,YAAA,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;AAAE,SAAA;AACtC,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;YAAE,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIW,oCAAyC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACpH,aAAA;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC7B;AACD;;AAEG;AACW,IAAA,4BAAA,CAAA,wBAAwB,GAAtC,YAAA;AACE,QAAA,OAAO,kCAAkC,CAAC;KAC3C,CAAA;AACD;;AAEG;AACa,IAAA,4BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC7F,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;AACvB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIT,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,8HAA8H,GAAG,CAAC,CAAC,CAAC;AACzR,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC7F,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACrG,QAAA,IAAI,IAAI,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrI,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACjH,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA3ED;;AAEG;IACoB,4BAAa,CAAA,aAAA,GAAU,8BAA8B,CAAC;IAyE/E,OAAC,4BAAA,CAAA;AAAA,CA7ED,CAAkDC,eAAoB,CA6ErE,EAAA;AAmCD;;AAEG;AACH,IAAA,kBAAA,kBAAA,UAAA,MAAA,EAAA;IAAwC,SAAmB,CAAA,kBAAA,EAAA,MAAA,CAAA,CAAA;AAiCzD;;AAEG;IACH,SAAY,kBAAA,CAAA,MAA2C,EAAE,OAAwC,EAAA;AAArF,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA2C,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAjG,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAWvB,IAAA,CAAA;AAVC,QAAA,KAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;AACzC,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,IAAIS,UAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAAE,SAAA;AACvF,QAAA,IAAI,MAAM,CAAC,eAAe,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,aAAa,GAAG,IAAIZ,eAAoB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAAE,SAAA;AACrG,QAAA,IAAI,MAAM,CAAC,oBAAoB,CAAC,EAAE;YAAE,KAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIA,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC7H,aAAA;AAAE,YAAA,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;AAAE,SAAA;AACtC,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,IAAII,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,UAAU,EAAC,CAAC,CAAC;AAAE,SAAA;AAChG,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;YAAE,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIJ,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACrG,aAAA;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAAE,SAAA;AAC9B,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;YAAE,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIa,4BAAiC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAClH,aAAA;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC/B;AACD;;AAEG;AACa,IAAA,kBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;AACzB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIX,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,wHAAwH,GAAG,CAAC,CAAC,CAAC;AACnR,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/F,QAAA,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACrG,QAAA,IAAI,IAAI,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrI,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/F,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrH,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrH,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA/DD;;AAEG;IACoB,kBAAa,CAAA,aAAA,GAAU,oBAAoB,CAAC;IA6DrE,OAAC,kBAAA,CAAA;AAAA,CAjED,CAAwCY,cAAmB,CAiE1D;;;;"}