{"version":3,"file":"Subscription.js","sources":["../../src/fhir/Subscription.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Subscription\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { SubscriptionChannelTypeCodings, SubscriptionChannelTypeCodingType,} from '../fhirValueSets/SubscriptionChannelTypeCodings.js';\r\n// @ts-ignore\r\nimport { SubscriptionChannelTypeCodes,  SubscriptionChannelTypeCodeType } from '../fhirValueSets/SubscriptionChannelTypeCodes.js';\r\n// @ts-ignore\r\nimport { SubscriptionStatusCodings, SubscriptionStatusCodingType,} from '../fhirValueSets/SubscriptionStatusCodings.js';\r\n// @ts-ignore\r\nimport { SubscriptionStatusCodes,  SubscriptionStatusCodeType } from '../fhirValueSets/SubscriptionStatusCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SubscriptionChannel type.\r\n */\r\nexport interface SubscriptionChannelArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of channel to send notifications on.\r\n   */\r\n  type: SubscriptionChannelTypeCodeType|null;\r\n  /**\r\n   * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs).\r\n   */\r\n  endpoint?: fhir.FhirUrl|string|undefined;\r\n  /**\r\n   * Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.\r\n   */\r\n  payload?: fhir.FhirCode|string|undefined;\r\n  /**\r\n   * Exactly what these mean depend on the channel type. They can convey additional information to the recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions.\r\n   */\r\n  header?: fhir.FhirString[]|string[]|undefined;\r\n}\r\n\r\n/**\r\n * Details where to send notifications when resources are received that meet the criteria.\r\n */\r\nexport class SubscriptionChannel extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubscriptionChannel';\r\n  /**\r\n   * The type of channel to send notifications on.\r\n   */\r\n  public type: SubscriptionChannelTypeCodeType|null;\r\n  /**\r\n   * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs).\r\n   */\r\n  public endpoint?: fhir.FhirUrl|undefined;\r\n  /**\r\n   * Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.\r\n   */\r\n  public payload?: fhir.FhirCode|undefined;\r\n  /**\r\n   * Exactly what these mean depend on the channel type. They can convey additional information to the recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions.\r\n   */\r\n  public header?: fhir.FhirString[];\r\n  /**\r\n   * Default constructor for SubscriptionChannel - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubscriptionChannelArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = source.type; }\r\n    else { this.type = null; }\r\n    if (source['endpoint']) { this.endpoint = new fhir.FhirUrl({value: source.endpoint}); }\r\n    if (source['payload']) { this.payload = new fhir.FhirCode({value: source.payload}); }\r\n    if (source['header']) { this.header = source.header.map((x) => new fhir.FhirString({value: x})); }\r\n    else { this.header = []; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for type (Subscription.channel.type)\r\n   */\r\n  public static typeRequiredCoding():SubscriptionChannelTypeCodingType {\r\n    return SubscriptionChannelTypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:SubscriptionChannelTypeCodeType fhir: Subscription.channel.type:code', }));\r\n    }\r\n    if (this[\"endpoint\"]) { outcome.issue!.push(...this.endpoint.doModelValidation().issue!); }\r\n    if (this[\"payload\"]) { outcome.issue!.push(...this.payload.doModelValidation().issue!); }\r\n    if (this[\"header\"]) { this.header.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the Subscription type.\r\n */\r\nexport interface SubscriptionArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Subscription\"|undefined;\r\n  /**\r\n   * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  status: SubscriptionStatusCodeType|null;\r\n  /**\r\n   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.\r\n   */\r\n  contact?: fhir.ContactPointArgs[]|undefined;\r\n  /**\r\n   * The server is permitted to deviate from this time but should observe it.\r\n   */\r\n  end?: fhir.FhirInstant|string|undefined;\r\n  /**\r\n   * A description of why this subscription is defined.\r\n   */\r\n  reason: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading \"/\".\r\n   */\r\n  criteria: fhir.FhirString|string|undefined;\r\n  /**\r\n   * A record of the last error that occurred when the server processed a notification.\r\n   */\r\n  error?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Details where to send notifications when resources are received that meet the criteria.\r\n   */\r\n  channel: fhir.SubscriptionChannelArgs|null;\r\n}\r\n\r\n/**\r\n * The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined \"channel\" so that another system can take an appropriate action.\r\n */\r\nexport class Subscription extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Subscription';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"Subscription\";\r\n  /**\r\n   * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  public status: SubscriptionStatusCodeType|null;\r\n  /**\r\n   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.\r\n   */\r\n  public contact?: fhir.ContactPoint[];\r\n  /**\r\n   * The server is permitted to deviate from this time but should observe it.\r\n   */\r\n  public end?: fhir.FhirInstant|undefined;\r\n  /**\r\n   * A description of why this subscription is defined.\r\n   */\r\n  public reason: fhir.FhirString|null;\r\n  /**\r\n   * The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading \"/\".\r\n   */\r\n  public criteria: fhir.FhirString|null;\r\n  /**\r\n   * A record of the last error that occurred when the server processed a notification.\r\n   */\r\n  public error?: fhir.FhirString|undefined;\r\n  /**\r\n   * Details where to send notifications when resources are received that meet the criteria.\r\n   */\r\n  public channel: fhir.SubscriptionChannel|null;\r\n  /**\r\n   * Default constructor for Subscription - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubscriptionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'Subscription';\r\n    if (source['status']) { this.status = source.status; }\r\n    else { this.status = null; }\r\n    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactPoint(x)); }\r\n    else { this.contact = []; }\r\n    if (source['end']) { this.end = new fhir.FhirInstant({value: source.end}); }\r\n    if (source['reason']) { this.reason = new fhir.FhirString({value: source.reason}); }\r\n    else { this.reason = null; }\r\n    if (source['criteria']) { this.criteria = new fhir.FhirString({value: source.criteria}); }\r\n    else { this.criteria = null; }\r\n    if (source['error']) { this.error = new fhir.FhirString({value: source.error}); }\r\n    if (source['channel']) { this.channel = new fhir.SubscriptionChannel(source.channel); }\r\n    else { this.channel = null; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (Subscription.status)\r\n   */\r\n  public static statusRequiredCoding():SubscriptionStatusCodingType {\r\n    return SubscriptionStatusCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"Subscription\" fhir: Subscription.resourceType:\"Subscription\"', }));\r\n    }\r\n    if (!this['status']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property status:SubscriptionStatusCodeType fhir: Subscription.status:code', }));\r\n    }\r\n    if (this[\"contact\"]) { this.contact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"end\"]) { outcome.issue!.push(...this.end.doModelValidation().issue!); }\r\n    if (!this['reason']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property reason:fhir.FhirString fhir: Subscription.reason:string', }));\r\n    }\r\n    if (this[\"reason\"]) { outcome.issue!.push(...this.reason.doModelValidation().issue!); }\r\n    if (!this['criteria']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property criteria:fhir.FhirString fhir: Subscription.criteria:string', }));\r\n    }\r\n    if (this[\"criteria\"]) { outcome.issue!.push(...this.criteria.doModelValidation().issue!); }\r\n    if (this[\"error\"]) { outcome.issue!.push(...this.error.doModelValidation().issue!); }\r\n    if (!this['channel']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property channel:fhir.SubscriptionChannel fhir: Subscription.channel:channel', }));\r\n    }\r\n    if (this[\"channel\"]) { outcome.issue!.push(...this.channel.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirUrl","fhir.FhirCode","fhir.FhirString","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.ContactPoint","fhir.FhirInstant","fhir.SubscriptionChannel","fhir.DomainResource"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAyCA;;AAEG;AACH,IAAA,mBAAA,kBAAA,UAAA,MAAA,EAAA;IAAyC,SAAoB,CAAA,mBAAA,EAAA,MAAA,CAAA,CAAA;AAqB3D;;AAEG;IACH,SAAY,mBAAA,CAAA,MAA4C,EAAE,OAAwC,EAAA;AAAtF,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA4C,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAlG,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAOvB,IAAA,CAAA;AANC,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AAAE,SAAA;AAC3C,aAAA;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAAE,SAAA;AAC1B,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIA,OAAY,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAC,CAAC,CAAC;AAAE,SAAA;AACvF,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,IAAIC,QAAa,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,OAAO,EAAC,CAAC,CAAC;AAAE,SAAA;AACrF,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK,EAAA,OAAA,IAAIC,UAAe,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC7F,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC3B;AACD;;AAEG;AACW,IAAA,mBAAA,CAAA,kBAAkB,GAAhC,YAAA;AACE,QAAA,OAAO,8BAA8B,CAAC;KACvC,CAAA;AACD;;AAEG;AACa,IAAA,mBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACjB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIC,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,qGAAqG,GAAG,CAAC,CAAC,CAAC;AAChQ,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3F,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACzF,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAlDD;;AAEG;IACoB,mBAAa,CAAA,aAAA,GAAU,qBAAqB,CAAC;IAgDtE,OAAC,mBAAA,CAAA;AAAA,CApDD,CAAyCC,eAAoB,CAoD5D,EAAA;AAwCD;;AAEG;AACH,IAAA,YAAA,kBAAA,UAAA,MAAA,EAAA;IAAkC,SAAmB,CAAA,YAAA,EAAA,MAAA,CAAA,CAAA;AAsCnD;;AAEG;IACH,SAAY,YAAA,CAAA,MAAqC,EAAE,OAAwC,EAAA;AAA/E,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAqC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA3F,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAcvB,IAAA,CAAA;AAbC,QAAA,KAAI,CAAC,YAAY,GAAG,cAAc,CAAC;AACnC,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAAE,SAAA;AACjD,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AAAE,SAAA;AAC5B,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;YAAE,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,YAAiB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACzF,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAAE,SAAA;AAC3B,QAAA,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,GAAG,GAAG,IAAIC,WAAgB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,GAAG,EAAC,CAAC,CAAC;AAAE,SAAA;AAC5E,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIJ,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAC,CAAC,CAAC;AAAE,SAAA;AAC/E,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AAAE,SAAA;AAC5B,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIA,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAC,CAAC,CAAC;AAAE,SAAA;AACrF,aAAA;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAAE,SAAA;AAC9B,QAAA,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,KAAK,GAAG,IAAIA,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;AAAE,SAAA;AACjF,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,IAAIK,mBAAwB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAAE,SAAA;AAClF,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AAAE,SAAA;;KAC9B;AACD;;AAEG;AACW,IAAA,YAAA,CAAA,oBAAoB,GAAlC,YAAA;AACE,QAAA,OAAO,yBAAyB,CAAC;KAClC,CAAA;AACD;;AAEG;AACa,IAAA,YAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;AACzB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIJ,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,sGAAsG,GAAG,CAAC,CAAC,CAAC;AACjQ,SAAA;AACD,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACnB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,4FAA4F,GAAG,CAAC,CAAC,CAAC;AACvP,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjF,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACnB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,mFAAmF,GAAG,CAAC,CAAC,CAAC;AAC9O,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACrB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,uFAAuF,GAAG,CAAC,CAAC,CAAC;AAClP,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3F,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACrF,QAAA,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AACpB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,+FAA+F,GAAG,CAAC,CAAC,CAAC;AAC1P,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACzF,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAzFD;;AAEG;IACoB,YAAa,CAAA,aAAA,GAAU,cAAc,CAAC;IAuF/D,OAAC,YAAA,CAAA;AAAA,CA3FD,CAAkCK,cAAmB,CA2FpD;;;;"}