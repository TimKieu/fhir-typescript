/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { FhirElement } from './FhirElement.js';
import { Quantity } from './Quantity.js';

// <auto-generated/>
/**
 * A set of ordered Quantities defined by a low and high limit.
 */
var Range = /** @class */ (function (_super) {
    __extends(Range, _super);
    /**
     * Default constructor for Range - initializes any required elements to null if a value is not provided.
     */
    function Range(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['low']) {
            _this.low = new Quantity(source.low);
        }
        if (source['high']) {
            _this.high = new Quantity(source.high);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Range.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["low"]) {
            (_a = outcome.issue).push.apply(_a, this.low.doModelValidation().issue);
        }
        if (this["high"]) {
            (_b = outcome.issue).push.apply(_b, this.high.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Range._fts_dataType = 'Range';
    return Range;
}(FhirElement));

export { Range };
//# sourceMappingURL=Range.js.map
