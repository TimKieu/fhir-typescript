/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { RelatedpersonRelationshiptypeCodings } from '../fhirValueSets/RelatedpersonRelationshiptypeCodings.js';
import { AdministrativeGenderCodings } from '../fhirValueSets/AdministrativeGenderCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { HumanName } from './HumanName.js';
import { ContactPoint } from './ContactPoint.js';
import { FhirDate } from './FhirDate.js';
import { Address } from './Address.js';
import { Attachment } from './Attachment.js';
import { Period } from './Period.js';

// <auto-generated/>
/**
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
var RelatedPersonCommunication = /** @class */ (function (_super) {
    __extends(RelatedPersonCommunication, _super);
    /**
     * Default constructor for RelatedPersonCommunication - initializes any required elements to null if a value is not provided.
     */
    function RelatedPersonCommunication(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['language']) {
            _this.language = new CodeableConcept(source.language);
        }
        else {
            _this.language = null;
        }
        if (source['preferred']) {
            _this.preferred = new FhirBoolean({ value: source.preferred });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for language (RelatedPerson.communication.language)
     */
    RelatedPersonCommunication.languagePreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RelatedPersonCommunication.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['language']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property language:fhir.CodeableConcept fhir: RelatedPerson.communication.language:CodeableConcept', }));
        }
        if (this["language"]) {
            (_a = outcome.issue).push.apply(_a, this.language.doModelValidation().issue);
        }
        if (this["preferred"]) {
            (_b = outcome.issue).push.apply(_b, this.preferred.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RelatedPersonCommunication._fts_dataType = 'RelatedPersonCommunication';
    return RelatedPersonCommunication;
}(BackboneElement));
/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
var RelatedPerson = /** @class */ (function (_super) {
    __extends(RelatedPerson, _super);
    /**
     * Default constructor for RelatedPerson - initializes any required elements to null if a value is not provided.
     */
    function RelatedPerson(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'RelatedPerson';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        if (source['relationship']) {
            _this.relationship = source.relationship.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.relationship = [];
        }
        if (source['name']) {
            _this.name = source.name.map(function (x) { return new HumanName(x); });
        }
        else {
            _this.name = [];
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['gender']) {
            _this.gender = source.gender;
        }
        if (source['birthDate']) {
            _this.birthDate = new FhirDate({ value: source.birthDate });
        }
        if (source['address']) {
            _this.address = source.address.map(function (x) { return new Address(x); });
        }
        else {
            _this.address = [];
        }
        if (source['photo']) {
            _this.photo = source.photo.map(function (x) { return new Attachment(x); });
        }
        else {
            _this.photo = [];
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['communication']) {
            _this.communication = source.communication.map(function (x) { return new RelatedPersonCommunication(x); });
        }
        else {
            _this.communication = [];
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for relationship (RelatedPerson.relationship)
     */
    RelatedPerson.relationshipPreferredCoding = function () {
        return RelatedpersonRelationshiptypeCodings;
    };
    /**
     * Required-bound Value Set for gender (RelatedPerson.gender)
     */
    RelatedPerson.genderRequiredCoding = function () {
        return AdministrativeGenderCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RelatedPerson.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"RelatedPerson" fhir: RelatedPerson.resourceType:"RelatedPerson"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: RelatedPerson.patient:Reference', }));
        }
        if (this["patient"]) {
            (_b = outcome.issue).push.apply(_b, this.patient.doModelValidation().issue);
        }
        if (this["relationship"]) {
            this.relationship.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            this.name.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["birthDate"]) {
            (_c = outcome.issue).push.apply(_c, this.birthDate.doModelValidation().issue);
        }
        if (this["address"]) {
            this.address.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["photo"]) {
            this.photo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["period"]) {
            (_d = outcome.issue).push.apply(_d, this.period.doModelValidation().issue);
        }
        if (this["communication"]) {
            this.communication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RelatedPerson._fts_dataType = 'RelatedPerson';
    return RelatedPerson;
}(DomainResource));

export { RelatedPerson, RelatedPersonCommunication };
//# sourceMappingURL=RelatedPerson.js.map
