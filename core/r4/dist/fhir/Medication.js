/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MedicationStatusCodings } from '../fhirValueSets/MedicationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Ratio } from './Ratio.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Identifier } from './Identifier.js';

// <auto-generated/>
/**
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
var MedicationIngredient = /** @class */ (function (_super) {
    __extends(MedicationIngredient, _super);
    /**
     * Default constructor for MedicationIngredient - initializes any required elements to null if a value is not provided.
     */
    function MedicationIngredient(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['item']) {
            _this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            _this.item = new CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            _this.item = new Reference(source.itemReference);
        }
        else {
            _this.item = null;
        }
        if (source['isActive']) {
            _this.isActive = new FhirBoolean({ value: source.isActive });
        }
        if (source['strength']) {
            _this.strength = new Ratio(source.strength);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationIngredient.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['item']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property item: fhir: Medication.ingredient.item[x]:', }));
        }
        if (this["isActive"]) {
            (_a = outcome.issue).push.apply(_a, this.isActive.doModelValidation().issue);
        }
        if (this["strength"]) {
            (_b = outcome.issue).push.apply(_b, this.strength.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationIngredient._fts_dataType = 'MedicationIngredient';
    /**
     * Internal flag to properly serialize choice-type element Medication.ingredient.item[x]
     */
    MedicationIngredient._fts_itemIsChoice = true;
    return MedicationIngredient;
}(BackboneElement));
/**
 * Information that only applies to packages (not products).
 */
var MedicationBatch = /** @class */ (function (_super) {
    __extends(MedicationBatch, _super);
    /**
     * Default constructor for MedicationBatch - initializes any required elements to null if a value is not provided.
     */
    function MedicationBatch(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['lotNumber']) {
            _this.lotNumber = new FhirString({ value: source.lotNumber });
        }
        if (source['expirationDate']) {
            _this.expirationDate = new FhirDateTime({ value: source.expirationDate });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationBatch.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["lotNumber"]) {
            (_a = outcome.issue).push.apply(_a, this.lotNumber.doModelValidation().issue);
        }
        if (this["expirationDate"]) {
            (_b = outcome.issue).push.apply(_b, this.expirationDate.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationBatch._fts_dataType = 'MedicationBatch';
    return MedicationBatch;
}(BackboneElement));
/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
var Medication = /** @class */ (function (_super) {
    __extends(Medication, _super);
    /**
     * Default constructor for Medication - initializes any required elements to null if a value is not provided.
     */
    function Medication(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Medication';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['manufacturer']) {
            _this.manufacturer = new Reference(source.manufacturer);
        }
        if (source['form']) {
            _this.form = new CodeableConcept(source.form);
        }
        if (source['amount']) {
            _this.amount = new Ratio(source.amount);
        }
        if (source['ingredient']) {
            _this.ingredient = source.ingredient.map(function (x) { return new MedicationIngredient(x); });
        }
        else {
            _this.ingredient = [];
        }
        if (source['batch']) {
            _this.batch = new MedicationBatch(source.batch);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Medication.status)
     */
    Medication.statusRequiredCoding = function () {
        return MedicationStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Medication.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Medication" fhir: Medication.resourceType:"Medication"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            (_b = outcome.issue).push.apply(_b, this.manufacturer.doModelValidation().issue);
        }
        if (this["form"]) {
            (_c = outcome.issue).push.apply(_c, this.form.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_d = outcome.issue).push.apply(_d, this.amount.doModelValidation().issue);
        }
        if (this["ingredient"]) {
            this.ingredient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["batch"]) {
            (_e = outcome.issue).push.apply(_e, this.batch.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Medication._fts_dataType = 'Medication';
    return Medication;
}(DomainResource));

export { Medication, MedicationBatch, MedicationIngredient };
//# sourceMappingURL=Medication.js.map
