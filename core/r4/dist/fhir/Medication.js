// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Medication
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationStatusCodes } from '../fhirValueSets/MedicationStatusCodes.js';
/**
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export class MedicationIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else {
            this.item = null;
        }
        if (source['isActive']) {
            this.isActive = new fhir.FhirBoolean({ value: source.isActive });
        }
        if (source['_isActive']) {
            if (this.isActive) {
                this.isActive.addExtendedProperties(source._isActive);
            }
            else {
                this.isActive = new fhir.FhirBoolean(source._isActive);
            }
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item: fhir: Medication.ingredient.item[x]:' });
        }
        if (this["isActive"]) {
            issues.push(...this.isActive.doModelValidation());
        }
        if (this["strength"]) {
            issues.push(...this.strength.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationIngredient._fts_dataType = 'MedicationIngredient';
/**
 * Internal flag to properly serialize choice-type element Medication.ingredient.item[x]
 */
MedicationIngredient._fts_itemIsChoice = true;
/**
 * Information that only applies to packages (not products).
 */
export class MedicationBatch extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationBatch - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber);
            }
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDateTime({ value: source.expirationDate });
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDateTime(source._expirationDate);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["lotNumber"]) {
            issues.push(...this.lotNumber.doModelValidation());
        }
        if (this["expirationDate"]) {
            issues.push(...this.expirationDate.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationBatch._fts_dataType = 'MedicationBatch';
/**
 * This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
export class Medication extends fhir.DomainResource {
    /**
     * Default constructor for Medication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Medication';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['form']) {
            this.form = new fhir.CodeableConcept(source.form);
        }
        if (source['amount']) {
            this.amount = new fhir.Ratio(source.amount);
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationIngredient(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['batch']) {
            this.batch = new fhir.MedicationBatch(source.batch);
        }
    }
    /**
     * Required-bound Value Set for status (Medication.status)
     */
    static get statusRequiredCodes() {
        return MedicationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Medication" fhir: Medication.resourceType:"Medication"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this['status'] && (!Object.values(MedicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<MedicationStatusCodeType> fhir: Medication.status:code Required binding to: MedicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["manufacturer"]) {
            issues.push(...this.manufacturer.doModelValidation());
        }
        if (this["form"]) {
            issues.push(...this.form.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        if (this["ingredient"]) {
            this.ingredient.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["batch"]) {
            issues.push(...this.batch.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Medication._fts_dataType = 'Medication';
//# sourceMappingURL=data:application/json;base64,