// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: InsurancePlan
import * as fhir from '../fhir.js';
// @ts-ignore
import { ContactentityTypeCodings, } from '../fhirValueSets/ContactentityTypeCodings.js';
// @ts-ignore
import { InsuranceplanApplicabilityCodings, } from '../fhirValueSets/InsuranceplanApplicabilityCodings.js';
// @ts-ignore
import { PublicationStatusCodings, } from '../fhirValueSets/PublicationStatusCodings.js';
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export class InsurancePlanContact extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanContact - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['purpose']) {
            this.purpose = new fhir.CodeableConcept(source.purpose);
        }
        if (source['name']) {
            this.name = new fhir.HumanName(source.name);
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
    }
    /**
     * Extensible-bound Value Set for purpose (InsurancePlan.contact.purpose)
     */
    static purposeExtensibleCoding() {
        return ContactentityTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            issues.push(...this.address.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanContact._fts_dataType = 'InsurancePlanContact';
/**
 * The specific limits on the benefit.
 */
export class InsurancePlanCoverageBenefitLimit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefitLimit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanCoverageBenefitLimit._fts_dataType = 'InsurancePlanCoverageBenefitLimit';
/**
 * Specific benefits under this type of coverage.
 */
export class InsurancePlanCoverageBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverageBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['requirement']) {
            this.requirement = new fhir.FhirString({ value: source.requirement });
        }
        if (source['limit']) {
            this.limit = source.limit.map((x) => new fhir.InsurancePlanCoverageBenefitLimit(x));
        }
        else {
            this.limit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.coverage.benefit.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["requirement"]) {
            issues.push(...this.requirement.doModelValidation());
        }
        if (this["limit"]) {
            this.limit.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanCoverageBenefit._fts_dataType = 'InsurancePlanCoverageBenefit';
/**
 * Details about the coverage offered by the insurance product.
 */
export class InsurancePlanCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        else {
            this.network = [];
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanCoverageBenefit(x));
        }
        else {
            this.benefit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.coverage.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["network"]) {
            this.network.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['benefit']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit', });
        }
        else if (!Array.isArray(this.benefit)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit', });
        }
        else if (this.benefit.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit', });
        }
        if (this["benefit"]) {
            this.benefit.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanCoverage._fts_dataType = 'InsurancePlanCoverage';
/**
 * Overall costs associated with the plan.
 */
export class InsurancePlanPlanGeneralCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanGeneralCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupSize']) {
            this.groupSize = new fhir.FhirPositiveInt({ value: source.groupSize });
        }
        if (source['cost']) {
            this.cost = new fhir.Money(source.cost);
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["groupSize"]) {
            issues.push(...this.groupSize.doModelValidation());
        }
        if (this["cost"]) {
            issues.push(...this.cost.doModelValidation());
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanGeneralCost._fts_dataType = 'InsurancePlanPlanGeneralCost';
/**
 * List of the costs associated with a specific benefit.
 */
export class InsurancePlanPlanSpecificCostBenefitCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefitCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['applicability']) {
            this.applicability = new fhir.CodeableConcept(source.applicability);
        }
        if (source['qualifiers']) {
            this.qualifiers = source.qualifiers.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.qualifiers = [];
        }
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
    }
    /**
     * Required-bound Value Set for applicability (InsurancePlan.plan.specificCost.benefit.cost.applicability)
     */
    static applicabilityRequiredCoding() {
        return InsuranceplanApplicabilityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.benefit.cost.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["applicability"]) {
            issues.push(...this.applicability.doModelValidation());
        }
        if (this["qualifiers"]) {
            this.qualifiers.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanSpecificCostBenefitCost._fts_dataType = 'InsurancePlanPlanSpecificCostBenefitCost';
/**
 * List of the specific benefits under this category of benefit.
 */
export class InsurancePlanPlanSpecificCostBenefit extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['cost']) {
            this.cost = source.cost.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefitCost(x));
        }
        else {
            this.cost = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.benefit.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["cost"]) {
            this.cost.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanSpecificCostBenefit._fts_dataType = 'InsurancePlanPlanSpecificCostBenefit';
/**
 * Costs associated with the coverage provided by the product.
 */
export class InsurancePlanPlanSpecificCost extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlanSpecificCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['benefit']) {
            this.benefit = source.benefit.map((x) => new fhir.InsurancePlanPlanSpecificCostBenefit(x));
        }
        else {
            this.benefit = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.category:CodeableConcept', });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (this["benefit"]) {
            this.benefit.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlanSpecificCost._fts_dataType = 'InsurancePlanPlanSpecificCost';
/**
 * Details about an insurance plan.
 */
export class InsurancePlanPlan extends fhir.BackboneElement {
    /**
     * Default constructor for InsurancePlanPlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        else {
            this.coverageArea = [];
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        else {
            this.network = [];
        }
        if (source['generalCost']) {
            this.generalCost = source.generalCost.map((x) => new fhir.InsurancePlanPlanGeneralCost(x));
        }
        else {
            this.generalCost = [];
        }
        if (source['specificCost']) {
            this.specificCost = source.specificCost.map((x) => new fhir.InsurancePlanPlanSpecificCost(x));
        }
        else {
            this.specificCost = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["network"]) {
            this.network.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["generalCost"]) {
            this.generalCost.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["specificCost"]) {
            this.specificCost.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlanPlan._fts_dataType = 'InsurancePlanPlan';
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
export class InsurancePlan extends fhir.DomainResource {
    /**
     * Default constructor for InsurancePlan - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'InsurancePlan';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['ownedBy']) {
            this.ownedBy = new fhir.Reference(source.ownedBy);
        }
        if (source['administeredBy']) {
            this.administeredBy = new fhir.Reference(source.administeredBy);
        }
        if (source['coverageArea']) {
            this.coverageArea = source.coverageArea.map((x) => new fhir.Reference(x));
        }
        else {
            this.coverageArea = [];
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.InsurancePlanContact(x));
        }
        else {
            this.contact = [];
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
        if (source['network']) {
            this.network = source.network.map((x) => new fhir.Reference(x));
        }
        else {
            this.network = [];
        }
        if (source['coverage']) {
            this.coverage = source.coverage.map((x) => new fhir.InsurancePlanCoverage(x));
        }
        else {
            this.coverage = [];
        }
        if (source['plan']) {
            this.plan = source.plan.map((x) => new fhir.InsurancePlanPlan(x));
        }
        else {
            this.plan = [];
        }
    }
    /**
     * Required-bound Value Set for status (InsurancePlan.status)
     */
    static statusRequiredCoding() {
        return PublicationStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"InsurancePlan" fhir: InsurancePlan.resourceType:"InsurancePlan"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["alias"]) {
            this.alias.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["ownedBy"]) {
            issues.push(...this.ownedBy.doModelValidation());
        }
        if (this["administeredBy"]) {
            issues.push(...this.administeredBy.doModelValidation());
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["network"]) {
            this.network.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["coverage"]) {
            this.coverage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["plan"]) {
            this.plan.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
InsurancePlan._fts_dataType = 'InsurancePlan';
//# sourceMappingURL=data:application/json;base64,