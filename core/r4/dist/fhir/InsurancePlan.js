/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ContactentityTypeCodings } from '../fhirValueSets/ContactentityTypeCodings.js';
import { InsuranceplanApplicabilityCodings } from '../fhirValueSets/InsuranceplanApplicabilityCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { HumanName } from './HumanName.js';
import { ContactPoint } from './ContactPoint.js';
import { Address } from './Address.js';
import { Quantity } from './Quantity.js';
import { FhirString } from './FhirString.js';
import { Reference } from './Reference.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { Money } from './Money.js';
import { Identifier } from './Identifier.js';
import { Period } from './Period.js';

// <auto-generated/>
/**
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
var InsurancePlanContact = /** @class */ (function (_super) {
    __extends(InsurancePlanContact, _super);
    /**
     * Default constructor for InsurancePlanContact - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanContact(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['purpose']) {
            _this.purpose = new CodeableConcept(source.purpose);
        }
        if (source['name']) {
            _this.name = new HumanName(source.name);
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['address']) {
            _this.address = new Address(source.address);
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for purpose (InsurancePlan.contact.purpose)
     */
    InsurancePlanContact.purposeExtensibleCoding = function () {
        return ContactentityTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanContact.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["purpose"]) {
            (_a = outcome.issue).push.apply(_a, this.purpose.doModelValidation().issue);
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["address"]) {
            (_c = outcome.issue).push.apply(_c, this.address.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanContact._fts_dataType = 'InsurancePlanContact';
    return InsurancePlanContact;
}(BackboneElement));
/**
 * The specific limits on the benefit.
 */
var InsurancePlanCoverageBenefitLimit = /** @class */ (function (_super) {
    __extends(InsurancePlanCoverageBenefitLimit, _super);
    /**
     * Default constructor for InsurancePlanCoverageBenefitLimit - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanCoverageBenefitLimit(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['value']) {
            _this.value = new Quantity(source.value);
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanCoverageBenefitLimit.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["value"]) {
            (_a = outcome.issue).push.apply(_a, this.value.doModelValidation().issue);
        }
        if (this["code"]) {
            (_b = outcome.issue).push.apply(_b, this.code.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanCoverageBenefitLimit._fts_dataType = 'InsurancePlanCoverageBenefitLimit';
    return InsurancePlanCoverageBenefitLimit;
}(BackboneElement));
/**
 * Specific benefits under this type of coverage.
 */
var InsurancePlanCoverageBenefit = /** @class */ (function (_super) {
    __extends(InsurancePlanCoverageBenefit, _super);
    /**
     * Default constructor for InsurancePlanCoverageBenefit - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanCoverageBenefit(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['requirement']) {
            _this.requirement = new FhirString({ value: source.requirement });
        }
        if (source['limit']) {
            _this.limit = source.limit.map(function (x) { return new InsurancePlanCoverageBenefitLimit(x); });
        }
        else {
            _this.limit = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanCoverageBenefit.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.coverage.benefit.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["requirement"]) {
            (_b = outcome.issue).push.apply(_b, this.requirement.doModelValidation().issue);
        }
        if (this["limit"]) {
            this.limit.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanCoverageBenefit._fts_dataType = 'InsurancePlanCoverageBenefit';
    return InsurancePlanCoverageBenefit;
}(BackboneElement));
/**
 * Details about the coverage offered by the insurance product.
 */
var InsurancePlanCoverage = /** @class */ (function (_super) {
    __extends(InsurancePlanCoverage, _super);
    /**
     * Default constructor for InsurancePlanCoverage - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanCoverage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['network']) {
            _this.network = source.network.map(function (x) { return new Reference(x); });
        }
        else {
            _this.network = [];
        }
        if (source['benefit']) {
            _this.benefit = source.benefit.map(function (x) { return new InsurancePlanCoverageBenefit(x); });
        }
        else {
            _this.benefit = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanCoverage.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.coverage.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["network"]) {
            this.network.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['benefit']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit', }));
        }
        else if (!Array.isArray(this.benefit)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit', }));
        }
        else if (this.benefit.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property benefit:fhir.InsurancePlanCoverageBenefit[] fhir: InsurancePlan.coverage.benefit:benefit', }));
        }
        if (this["benefit"]) {
            this.benefit.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanCoverage._fts_dataType = 'InsurancePlanCoverage';
    return InsurancePlanCoverage;
}(BackboneElement));
/**
 * Overall costs associated with the plan.
 */
var InsurancePlanPlanGeneralCost = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanGeneralCost, _super);
    /**
     * Default constructor for InsurancePlanPlanGeneralCost - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanPlanGeneralCost(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['groupSize']) {
            _this.groupSize = new FhirPositiveInt({ value: source.groupSize });
        }
        if (source['cost']) {
            _this.cost = new Money(source.cost);
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanPlanGeneralCost.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["groupSize"]) {
            (_b = outcome.issue).push.apply(_b, this.groupSize.doModelValidation().issue);
        }
        if (this["cost"]) {
            (_c = outcome.issue).push.apply(_c, this.cost.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_d = outcome.issue).push.apply(_d, this.comment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanPlanGeneralCost._fts_dataType = 'InsurancePlanPlanGeneralCost';
    return InsurancePlanPlanGeneralCost;
}(BackboneElement));
/**
 * List of the costs associated with a specific benefit.
 */
var InsurancePlanPlanSpecificCostBenefitCost = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanSpecificCostBenefitCost, _super);
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefitCost - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanPlanSpecificCostBenefitCost(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['applicability']) {
            _this.applicability = new CodeableConcept(source.applicability);
        }
        if (source['qualifiers']) {
            _this.qualifiers = source.qualifiers.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.qualifiers = [];
        }
        if (source['value']) {
            _this.value = new Quantity(source.value);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for applicability (InsurancePlan.plan.specificCost.benefit.cost.applicability)
     */
    InsurancePlanPlanSpecificCostBenefitCost.applicabilityRequiredCoding = function () {
        return InsuranceplanApplicabilityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanPlanSpecificCostBenefitCost.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.benefit.cost.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["applicability"]) {
            (_b = outcome.issue).push.apply(_b, this.applicability.doModelValidation().issue);
        }
        if (this["qualifiers"]) {
            this.qualifiers.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["value"]) {
            (_c = outcome.issue).push.apply(_c, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanPlanSpecificCostBenefitCost._fts_dataType = 'InsurancePlanPlanSpecificCostBenefitCost';
    return InsurancePlanPlanSpecificCostBenefitCost;
}(BackboneElement));
/**
 * List of the specific benefits under this category of benefit.
 */
var InsurancePlanPlanSpecificCostBenefit = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanSpecificCostBenefit, _super);
    /**
     * Default constructor for InsurancePlanPlanSpecificCostBenefit - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanPlanSpecificCostBenefit(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['cost']) {
            _this.cost = source.cost.map(function (x) { return new InsurancePlanPlanSpecificCostBenefitCost(x); });
        }
        else {
            _this.cost = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanPlanSpecificCostBenefit.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.benefit.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["cost"]) {
            this.cost.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanPlanSpecificCostBenefit._fts_dataType = 'InsurancePlanPlanSpecificCostBenefit';
    return InsurancePlanPlanSpecificCostBenefit;
}(BackboneElement));
/**
 * Costs associated with the coverage provided by the product.
 */
var InsurancePlanPlanSpecificCost = /** @class */ (function (_super) {
    __extends(InsurancePlanPlanSpecificCost, _super);
    /**
     * Default constructor for InsurancePlanPlanSpecificCost - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanPlanSpecificCost(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['benefit']) {
            _this.benefit = source.benefit.map(function (x) { return new InsurancePlanPlanSpecificCostBenefit(x); });
        }
        else {
            _this.benefit = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanPlanSpecificCost.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: InsurancePlan.plan.specificCost.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (this["benefit"]) {
            this.benefit.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanPlanSpecificCost._fts_dataType = 'InsurancePlanPlanSpecificCost';
    return InsurancePlanPlanSpecificCost;
}(BackboneElement));
/**
 * Details about an insurance plan.
 */
var InsurancePlanPlan = /** @class */ (function (_super) {
    __extends(InsurancePlanPlan, _super);
    /**
     * Default constructor for InsurancePlanPlan - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlanPlan(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['coverageArea']) {
            _this.coverageArea = source.coverageArea.map(function (x) { return new Reference(x); });
        }
        else {
            _this.coverageArea = [];
        }
        if (source['network']) {
            _this.network = source.network.map(function (x) { return new Reference(x); });
        }
        else {
            _this.network = [];
        }
        if (source['generalCost']) {
            _this.generalCost = source.generalCost.map(function (x) { return new InsurancePlanPlanGeneralCost(x); });
        }
        else {
            _this.generalCost = [];
        }
        if (source['specificCost']) {
            _this.specificCost = source.specificCost.map(function (x) { return new InsurancePlanPlanSpecificCost(x); });
        }
        else {
            _this.specificCost = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlanPlan.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["network"]) {
            this.network.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["generalCost"]) {
            this.generalCost.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["specificCost"]) {
            this.specificCost.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlanPlan._fts_dataType = 'InsurancePlanPlan';
    return InsurancePlanPlan;
}(BackboneElement));
/**
 * Details of a Health Insurance product/plan provided by an organization.
 */
var InsurancePlan = /** @class */ (function (_super) {
    __extends(InsurancePlan, _super);
    /**
     * Default constructor for InsurancePlan - initializes any required elements to null if a value is not provided.
     */
    function InsurancePlan(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'InsurancePlan';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['alias']) {
            _this.alias = source.alias.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.alias = [];
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['ownedBy']) {
            _this.ownedBy = new Reference(source.ownedBy);
        }
        if (source['administeredBy']) {
            _this.administeredBy = new Reference(source.administeredBy);
        }
        if (source['coverageArea']) {
            _this.coverageArea = source.coverageArea.map(function (x) { return new Reference(x); });
        }
        else {
            _this.coverageArea = [];
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new InsurancePlanContact(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['endpoint']) {
            _this.endpoint = source.endpoint.map(function (x) { return new Reference(x); });
        }
        else {
            _this.endpoint = [];
        }
        if (source['network']) {
            _this.network = source.network.map(function (x) { return new Reference(x); });
        }
        else {
            _this.network = [];
        }
        if (source['coverage']) {
            _this.coverage = source.coverage.map(function (x) { return new InsurancePlanCoverage(x); });
        }
        else {
            _this.coverage = [];
        }
        if (source['plan']) {
            _this.plan = source.plan.map(function (x) { return new InsurancePlanPlan(x); });
        }
        else {
            _this.plan = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (InsurancePlan.status)
     */
    InsurancePlan.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    InsurancePlan.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"InsurancePlan" fhir: InsurancePlan.resourceType:"InsurancePlan"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["alias"]) {
            this.alias.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["period"]) {
            (_b = outcome.issue).push.apply(_b, this.period.doModelValidation().issue);
        }
        if (this["ownedBy"]) {
            (_c = outcome.issue).push.apply(_c, this.ownedBy.doModelValidation().issue);
        }
        if (this["administeredBy"]) {
            (_d = outcome.issue).push.apply(_d, this.administeredBy.doModelValidation().issue);
        }
        if (this["coverageArea"]) {
            this.coverageArea.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["endpoint"]) {
            this.endpoint.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["network"]) {
            this.network.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["coverage"]) {
            this.coverage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["plan"]) {
            this.plan.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    InsurancePlan._fts_dataType = 'InsurancePlan';
    return InsurancePlan;
}(DomainResource));

export { InsurancePlan, InsurancePlanContact, InsurancePlanCoverage, InsurancePlanCoverageBenefit, InsurancePlanCoverageBenefitLimit, InsurancePlanPlan, InsurancePlanPlanGeneralCost, InsurancePlanPlanSpecificCost, InsurancePlanPlanSpecificCostBenefit, InsurancePlanPlanSpecificCostBenefitCost };
//# sourceMappingURL=InsurancePlan.js.map
