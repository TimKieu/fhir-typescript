{"version":3,"file":"SubstanceSpecification.js","sources":["../../src/fhir/SubstanceSpecification.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: SubstanceSpecification\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SubstanceSpecificationMoiety type.\r\n */\r\nexport interface SubstanceSpecificationMoietyArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Role that the moiety is playing.\r\n   */\r\n  role?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Identifier by which this moiety substance is known.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Textual name for this moiety substance.\r\n   */\r\n  name?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Stereochemistry type.\r\n   */\r\n  stereochemistry?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Optical activity type.\r\n   */\r\n  opticalActivity?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Molecular formula.\r\n   */\r\n  molecularFormula?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Quantitative value for this moiety.\r\n   */\r\n  amount?: fhir.Quantity|fhir.FhirString|undefined;\r\n  /**\r\n   * Quantitative value for this moiety.\r\n   */\r\n  amountQuantity?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * Quantitative value for this moiety.\r\n   */\r\n  amountString?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * Moiety, for structural modifications.\r\n */\r\nexport class SubstanceSpecificationMoiety extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationMoiety';\r\n  /**\r\n   * Role that the moiety is playing.\r\n   */\r\n  public role?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Identifier by which this moiety substance is known.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Textual name for this moiety substance.\r\n   */\r\n  public name?: fhir.FhirString|undefined;\r\n  /**\r\n   * Stereochemistry type.\r\n   */\r\n  public stereochemistry?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Optical activity type.\r\n   */\r\n  public opticalActivity?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Molecular formula.\r\n   */\r\n  public molecularFormula?: fhir.FhirString|undefined;\r\n  /**\r\n   * Quantitative value for this moiety.\r\n   */\r\n  public amount?: (fhir.Quantity|fhir.FhirString)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SubstanceSpecification.moiety.amount[x]\r\n   */\r\n  protected static readonly _fts_amountIsChoice:true = true;\r\n  /**\r\n   * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationMoietyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    if (source['stereochemistry']) { this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry); }\r\n    if (source['opticalActivity']) { this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity); }\r\n    if (source['molecularFormula']) { this.molecularFormula = new fhir.FhirString({value: source.molecularFormula}); }\r\n    if (source['amount']) { this.amount = source.amount; }\r\n    else if (source['amountQuantity']) { this.amount = new fhir.Quantity(source.amountQuantity); }\r\n    else if (source['amountString']) { this.amount = new fhir.FhirString({value: source.amountString}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"role\"]) { outcome.issue!.push(...this.role.doModelValidation().issue!); }\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (this[\"stereochemistry\"]) { outcome.issue!.push(...this.stereochemistry.doModelValidation().issue!); }\r\n    if (this[\"opticalActivity\"]) { outcome.issue!.push(...this.opticalActivity.doModelValidation().issue!); }\r\n    if (this[\"molecularFormula\"]) { outcome.issue!.push(...this.molecularFormula.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationProperty type.\r\n */\r\nexport interface SubstanceSpecificationPropertyArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * A category for this property, e.g. Physical, Chemical, Enzymatic.\r\n   */\r\n  category?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Property type e.g. viscosity, pH, isoelectric point.\r\n   */\r\n  code?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).\r\n   */\r\n  parameters?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).\r\n   */\r\n  definingSubstance?: fhir.Reference|fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).\r\n   */\r\n  definingSubstanceReference?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).\r\n   */\r\n  definingSubstanceCodeableConcept?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Quantitative value for this property.\r\n   */\r\n  amount?: fhir.Quantity|fhir.FhirString|undefined;\r\n  /**\r\n   * Quantitative value for this property.\r\n   */\r\n  amountQuantity?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * Quantitative value for this property.\r\n   */\r\n  amountString?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * General specifications for this substance, including how it is related to other substances.\r\n */\r\nexport class SubstanceSpecificationProperty extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationProperty';\r\n  /**\r\n   * A category for this property, e.g. Physical, Chemical, Enzymatic.\r\n   */\r\n  public category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Property type e.g. viscosity, pH, isoelectric point.\r\n   */\r\n  public code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).\r\n   */\r\n  public parameters?: fhir.FhirString|undefined;\r\n  /**\r\n   * A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).\r\n   */\r\n  public definingSubstance?: (fhir.Reference|fhir.CodeableConcept)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SubstanceSpecification.property.definingSubstance[x]\r\n   */\r\n  protected static readonly _fts_definingSubstanceIsChoice:true = true;\r\n  /**\r\n   * Quantitative value for this property.\r\n   */\r\n  public amount?: (fhir.Quantity|fhir.FhirString)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SubstanceSpecification.property.amount[x]\r\n   */\r\n  protected static readonly _fts_amountIsChoice:true = true;\r\n  /**\r\n   * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationPropertyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    if (source['parameters']) { this.parameters = new fhir.FhirString({value: source.parameters}); }\r\n    if (source['definingSubstance']) { this.definingSubstance = source.definingSubstance; }\r\n    else if (source['definingSubstanceReference']) { this.definingSubstance = new fhir.Reference(source.definingSubstanceReference); }\r\n    else if (source['definingSubstanceCodeableConcept']) { this.definingSubstance = new fhir.CodeableConcept(source.definingSubstanceCodeableConcept); }\r\n    if (source['amount']) { this.amount = source.amount; }\r\n    else if (source['amountQuantity']) { this.amount = new fhir.Quantity(source.amountQuantity); }\r\n    else if (source['amountString']) { this.amount = new fhir.FhirString({value: source.amountString}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"category\"]) { outcome.issue!.push(...this.category.doModelValidation().issue!); }\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"parameters\"]) { outcome.issue!.push(...this.parameters.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationStructureIsotopeMolecularWeight type.\r\n */\r\nexport interface SubstanceSpecificationStructureIsotopeMolecularWeightArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The method by which the molecular weight was determined.\r\n   */\r\n  method?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Type of molecular weight such as exact, average (also known as. number average), weight average.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.\r\n   */\r\n  amount?: fhir.QuantityArgs|undefined;\r\n}\r\n\r\n/**\r\n * The molecular weight or weight range (for proteins, polymers or nucleic acids).\r\n */\r\nexport class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationStructureIsotopeMolecularWeight';\r\n  /**\r\n   * The method by which the molecular weight was determined.\r\n   */\r\n  public method?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Type of molecular weight such as exact, average (also known as. number average), weight average.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.\r\n   */\r\n  public amount?: fhir.Quantity|undefined;\r\n  /**\r\n   * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationStructureIsotopeMolecularWeightArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['method']) { this.method = new fhir.CodeableConcept(source.method); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['amount']) { this.amount = new fhir.Quantity(source.amount); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"method\"]) { outcome.issue!.push(...this.method.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"amount\"]) { outcome.issue!.push(...this.amount.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationStructureIsotope type.\r\n */\r\nexport interface SubstanceSpecificationStructureIsotopeArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Substance identifier for each non-natural or radioisotope.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Substance name for each non-natural or radioisotope.\r\n   */\r\n  name?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The type of isotopic substitution present in a single substance.\r\n   */\r\n  substitution?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Half life - for a non-natural nuclide.\r\n   */\r\n  halfLife?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * The molecular weight or weight range (for proteins, polymers or nucleic acids).\r\n   */\r\n  molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeightArgs|undefined;\r\n}\r\n\r\n/**\r\n * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.\r\n */\r\nexport class SubstanceSpecificationStructureIsotope extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationStructureIsotope';\r\n  /**\r\n   * Substance identifier for each non-natural or radioisotope.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Substance name for each non-natural or radioisotope.\r\n   */\r\n  public name?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The type of isotopic substitution present in a single substance.\r\n   */\r\n  public substitution?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Half life - for a non-natural nuclide.\r\n   */\r\n  public halfLife?: fhir.Quantity|undefined;\r\n  /**\r\n   * The molecular weight or weight range (for proteins, polymers or nucleic acids).\r\n   */\r\n  public molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeight|undefined;\r\n  /**\r\n   * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationStructureIsotopeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['name']) { this.name = new fhir.CodeableConcept(source.name); }\r\n    if (source['substitution']) { this.substitution = new fhir.CodeableConcept(source.substitution); }\r\n    if (source['halfLife']) { this.halfLife = new fhir.Quantity(source.halfLife); }\r\n    if (source['molecularWeight']) { this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (this[\"substitution\"]) { outcome.issue!.push(...this.substitution.doModelValidation().issue!); }\r\n    if (this[\"halfLife\"]) { outcome.issue!.push(...this.halfLife.doModelValidation().issue!); }\r\n    if (this[\"molecularWeight\"]) { outcome.issue!.push(...this.molecularWeight.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationStructureRepresentation type.\r\n */\r\nexport interface SubstanceSpecificationStructureRepresentationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of structure (e.g. Full, Partial, Representative).\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.\r\n   */\r\n  representation?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * An attached file with the structural representation.\r\n   */\r\n  attachment?: fhir.AttachmentArgs|undefined;\r\n}\r\n\r\n/**\r\n * Molecular structural representation.\r\n */\r\nexport class SubstanceSpecificationStructureRepresentation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationStructureRepresentation';\r\n  /**\r\n   * The type of structure (e.g. Full, Partial, Representative).\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.\r\n   */\r\n  public representation?: fhir.FhirString|undefined;\r\n  /**\r\n   * An attached file with the structural representation.\r\n   */\r\n  public attachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationStructureRepresentationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['representation']) { this.representation = new fhir.FhirString({value: source.representation}); }\r\n    if (source['attachment']) { this.attachment = new fhir.Attachment(source.attachment); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"representation\"]) { outcome.issue!.push(...this.representation.doModelValidation().issue!); }\r\n    if (this[\"attachment\"]) { outcome.issue!.push(...this.attachment.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationStructure type.\r\n */\r\nexport interface SubstanceSpecificationStructureArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Stereochemistry type.\r\n   */\r\n  stereochemistry?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Optical activity type.\r\n   */\r\n  opticalActivity?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Molecular formula.\r\n   */\r\n  molecularFormula?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.\r\n   */\r\n  molecularFormulaByMoiety?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.\r\n   */\r\n  isotope?: fhir.SubstanceSpecificationStructureIsotopeArgs[]|undefined;\r\n  /**\r\n   * The molecular weight or weight range (for proteins, polymers or nucleic acids).\r\n   */\r\n  molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeightArgs|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Molecular structural representation.\r\n   */\r\n  representation?: fhir.SubstanceSpecificationStructureRepresentationArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Structural information.\r\n */\r\nexport class SubstanceSpecificationStructure extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationStructure';\r\n  /**\r\n   * Stereochemistry type.\r\n   */\r\n  public stereochemistry?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Optical activity type.\r\n   */\r\n  public opticalActivity?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Molecular formula.\r\n   */\r\n  public molecularFormula?: fhir.FhirString|undefined;\r\n  /**\r\n   * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.\r\n   */\r\n  public molecularFormulaByMoiety?: fhir.FhirString|undefined;\r\n  /**\r\n   * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.\r\n   */\r\n  public isotope?: fhir.SubstanceSpecificationStructureIsotope[];\r\n  /**\r\n   * The molecular weight or weight range (for proteins, polymers or nucleic acids).\r\n   */\r\n  public molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeight|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Molecular structural representation.\r\n   */\r\n  public representation?: fhir.SubstanceSpecificationStructureRepresentation[];\r\n  /**\r\n   * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationStructureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['stereochemistry']) { this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry); }\r\n    if (source['opticalActivity']) { this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity); }\r\n    if (source['molecularFormula']) { this.molecularFormula = new fhir.FhirString({value: source.molecularFormula}); }\r\n    if (source['molecularFormulaByMoiety']) { this.molecularFormulaByMoiety = new fhir.FhirString({value: source.molecularFormulaByMoiety}); }\r\n    if (source['isotope']) { this.isotope = source.isotope.map((x) => new fhir.SubstanceSpecificationStructureIsotope(x)); }\r\n    else { this.isotope = []; }\r\n    if (source['molecularWeight']) { this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight); }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n    if (source['representation']) { this.representation = source.representation.map((x) => new fhir.SubstanceSpecificationStructureRepresentation(x)); }\r\n    else { this.representation = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"stereochemistry\"]) { outcome.issue!.push(...this.stereochemistry.doModelValidation().issue!); }\r\n    if (this[\"opticalActivity\"]) { outcome.issue!.push(...this.opticalActivity.doModelValidation().issue!); }\r\n    if (this[\"molecularFormula\"]) { outcome.issue!.push(...this.molecularFormula.doModelValidation().issue!); }\r\n    if (this[\"molecularFormulaByMoiety\"]) { outcome.issue!.push(...this.molecularFormulaByMoiety.doModelValidation().issue!); }\r\n    if (this[\"isotope\"]) { this.isotope.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"molecularWeight\"]) { outcome.issue!.push(...this.molecularWeight.doModelValidation().issue!); }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"representation\"]) { this.representation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationCode type.\r\n */\r\nexport interface SubstanceSpecificationCodeArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The specific code.\r\n   */\r\n  code?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Status of the code assignment.\r\n   */\r\n  status?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The date at which the code status is changed as part of the terminology maintenance.\r\n   */\r\n  statusDate?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * Any comment can be provided in this field, if necessary.\r\n   */\r\n  comment?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Codes associated with the substance.\r\n */\r\nexport class SubstanceSpecificationCode extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationCode';\r\n  /**\r\n   * The specific code.\r\n   */\r\n  public code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Status of the code assignment.\r\n   */\r\n  public status?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The date at which the code status is changed as part of the terminology maintenance.\r\n   */\r\n  public statusDate?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * Any comment can be provided in this field, if necessary.\r\n   */\r\n  public comment?: fhir.FhirString|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationCodeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    if (source['status']) { this.status = new fhir.CodeableConcept(source.status); }\r\n    if (source['statusDate']) { this.statusDate = new fhir.FhirDateTime({value: source.statusDate}); }\r\n    if (source['comment']) { this.comment = new fhir.FhirString({value: source.comment}); }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"status\"]) { outcome.issue!.push(...this.status.doModelValidation().issue!); }\r\n    if (this[\"statusDate\"]) { outcome.issue!.push(...this.statusDate.doModelValidation().issue!); }\r\n    if (this[\"comment\"]) { outcome.issue!.push(...this.comment.doModelValidation().issue!); }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationNameOfficial type.\r\n */\r\nexport interface SubstanceSpecificationNameOfficialArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Which authority uses this official name.\r\n   */\r\n  authority?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The status of the official name.\r\n   */\r\n  status?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Date of official name change.\r\n   */\r\n  date?: fhir.FhirDateTime|string|undefined;\r\n}\r\n\r\n/**\r\n * Details of the official nature of this name.\r\n */\r\nexport class SubstanceSpecificationNameOfficial extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationNameOfficial';\r\n  /**\r\n   * Which authority uses this official name.\r\n   */\r\n  public authority?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The status of the official name.\r\n   */\r\n  public status?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Date of official name change.\r\n   */\r\n  public date?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationNameOfficialArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['authority']) { this.authority = new fhir.CodeableConcept(source.authority); }\r\n    if (source['status']) { this.status = new fhir.CodeableConcept(source.status); }\r\n    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"authority\"]) { outcome.issue!.push(...this.authority.doModelValidation().issue!); }\r\n    if (this[\"status\"]) { outcome.issue!.push(...this.status.doModelValidation().issue!); }\r\n    if (this[\"date\"]) { outcome.issue!.push(...this.date.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationName type.\r\n */\r\nexport interface SubstanceSpecificationNameArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The actual name.\r\n   */\r\n  name: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Name type.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The status of the name.\r\n   */\r\n  status?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * If this is the preferred name for this substance.\r\n   */\r\n  preferred?: fhir.FhirBoolean|boolean|undefined;\r\n  /**\r\n   * Language of the name.\r\n   */\r\n  language?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.\r\n   */\r\n  domain?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * The jurisdiction where this name applies.\r\n   */\r\n  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * A synonym of this name.\r\n   */\r\n  synonym?: fhir.SubstanceSpecificationNameArgs[]|undefined;\r\n  /**\r\n   * A translation for this name.\r\n   */\r\n  translation?: fhir.SubstanceSpecificationNameArgs[]|undefined;\r\n  /**\r\n   * Details of the official nature of this name.\r\n   */\r\n  official?: fhir.SubstanceSpecificationNameOfficialArgs[]|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Names applicable to this substance.\r\n */\r\nexport class SubstanceSpecificationName extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationName';\r\n  /**\r\n   * The actual name.\r\n   */\r\n  public name: fhir.FhirString|null;\r\n  /**\r\n   * Name type.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The status of the name.\r\n   */\r\n  public status?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is the preferred name for this substance.\r\n   */\r\n  public preferred?: fhir.FhirBoolean|undefined;\r\n  /**\r\n   * Language of the name.\r\n   */\r\n  public language?: fhir.CodeableConcept[];\r\n  /**\r\n   * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.\r\n   */\r\n  public domain?: fhir.CodeableConcept[];\r\n  /**\r\n   * The jurisdiction where this name applies.\r\n   */\r\n  public jurisdiction?: fhir.CodeableConcept[];\r\n  /**\r\n   * A synonym of this name.\r\n   */\r\n  public synonym?: fhir.SubstanceSpecificationName[];\r\n  /**\r\n   * A translation for this name.\r\n   */\r\n  public translation?: fhir.SubstanceSpecificationName[];\r\n  /**\r\n   * Details of the official nature of this name.\r\n   */\r\n  public official?: fhir.SubstanceSpecificationNameOfficial[];\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationNameArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    else { this.name = null; }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['status']) { this.status = new fhir.CodeableConcept(source.status); }\r\n    if (source['preferred']) { this.preferred = new fhir.FhirBoolean({value: source.preferred}); }\r\n    if (source['language']) { this.language = source.language.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.language = []; }\r\n    if (source['domain']) { this.domain = source.domain.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.domain = []; }\r\n    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.jurisdiction = []; }\r\n    if (source['synonym']) { this.synonym = source.synonym.map((x) => new fhir.SubstanceSpecificationName(x)); }\r\n    else { this.synonym = []; }\r\n    if (source['translation']) { this.translation = source.translation.map((x) => new fhir.SubstanceSpecificationName(x)); }\r\n    else { this.translation = []; }\r\n    if (source['official']) { this.official = source.official.map((x) => new fhir.SubstanceSpecificationNameOfficial(x)); }\r\n    else { this.official = []; }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['name']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property name:fhir.FhirString fhir: SubstanceSpecification.name.name:string', }));\r\n    }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"status\"]) { outcome.issue!.push(...this.status.doModelValidation().issue!); }\r\n    if (this[\"preferred\"]) { outcome.issue!.push(...this.preferred.doModelValidation().issue!); }\r\n    if (this[\"language\"]) { this.language.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"domain\"]) { this.domain.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"jurisdiction\"]) { this.jurisdiction.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"synonym\"]) { this.synonym.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"translation\"]) { this.translation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"official\"]) { this.official.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecificationRelationship type.\r\n */\r\nexport interface SubstanceSpecificationRelationshipArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * A pointer to another substance, as a resource or just a representational code.\r\n   */\r\n  substance?: fhir.Reference|fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A pointer to another substance, as a resource or just a representational code.\r\n   */\r\n  substanceReference?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * A pointer to another substance, as a resource or just a representational code.\r\n   */\r\n  substanceCodeableConcept?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * For example \"salt to parent\", \"active moiety\", \"starting material\".\r\n   */\r\n  relationship?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.\r\n   */\r\n  isDefining?: fhir.FhirBoolean|boolean|undefined;\r\n  /**\r\n   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.\r\n   */\r\n  amount?: fhir.Quantity|fhir.Range|fhir.Ratio|fhir.FhirString|undefined;\r\n  /**\r\n   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.\r\n   */\r\n  amountQuantity?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.\r\n   */\r\n  amountRange?: fhir.RangeArgs|undefined;\r\n  /**\r\n   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.\r\n   */\r\n  amountRatio?: fhir.RatioArgs|undefined;\r\n  /**\r\n   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.\r\n   */\r\n  amountString?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * For use when the numeric.\r\n   */\r\n  amountRatioLowLimit?: fhir.RatioArgs|undefined;\r\n  /**\r\n   * An operator for the amount, for example \"average\", \"approximately\", \"less than\".\r\n   */\r\n  amountType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * A link between this substance and another, with details of the relationship.\r\n */\r\nexport class SubstanceSpecificationRelationship extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecificationRelationship';\r\n  /**\r\n   * A pointer to another substance, as a resource or just a representational code.\r\n   */\r\n  public substance?: (fhir.Reference|fhir.CodeableConcept)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.substance[x]\r\n   */\r\n  protected static readonly _fts_substanceIsChoice:true = true;\r\n  /**\r\n   * For example \"salt to parent\", \"active moiety\", \"starting material\".\r\n   */\r\n  public relationship?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.\r\n   */\r\n  public isDefining?: fhir.FhirBoolean|undefined;\r\n  /**\r\n   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.\r\n   */\r\n  public amount?: (fhir.Quantity|fhir.Range|fhir.Ratio|fhir.FhirString)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.amount[x]\r\n   */\r\n  protected static readonly _fts_amountIsChoice:true = true;\r\n  /**\r\n   * For use when the numeric.\r\n   */\r\n  public amountRatioLowLimit?: fhir.Ratio|undefined;\r\n  /**\r\n   * An operator for the amount, for example \"average\", \"approximately\", \"less than\".\r\n   */\r\n  public amountType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationRelationshipArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['substance']) { this.substance = source.substance; }\r\n    else if (source['substanceReference']) { this.substance = new fhir.Reference(source.substanceReference); }\r\n    else if (source['substanceCodeableConcept']) { this.substance = new fhir.CodeableConcept(source.substanceCodeableConcept); }\r\n    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship); }\r\n    if (source['isDefining']) { this.isDefining = new fhir.FhirBoolean({value: source.isDefining}); }\r\n    if (source['amount']) { this.amount = source.amount; }\r\n    else if (source['amountQuantity']) { this.amount = new fhir.Quantity(source.amountQuantity); }\r\n    else if (source['amountRange']) { this.amount = new fhir.Range(source.amountRange); }\r\n    else if (source['amountRatio']) { this.amount = new fhir.Ratio(source.amountRatio); }\r\n    else if (source['amountString']) { this.amount = new fhir.FhirString({value: source.amountString}); }\r\n    if (source['amountRatioLowLimit']) { this.amountRatioLowLimit = new fhir.Ratio(source.amountRatioLowLimit); }\r\n    if (source['amountType']) { this.amountType = new fhir.CodeableConcept(source.amountType); }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"relationship\"]) { outcome.issue!.push(...this.relationship.doModelValidation().issue!); }\r\n    if (this[\"isDefining\"]) { outcome.issue!.push(...this.isDefining.doModelValidation().issue!); }\r\n    if (this[\"amountRatioLowLimit\"]) { outcome.issue!.push(...this.amountRatioLowLimit.doModelValidation().issue!); }\r\n    if (this[\"amountType\"]) { outcome.issue!.push(...this.amountType.doModelValidation().issue!); }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceSpecification type.\r\n */\r\nexport interface SubstanceSpecificationArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"SubstanceSpecification\"|undefined;\r\n  /**\r\n   * Identifier by which this substance is known.\r\n   */\r\n  identifier?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * High level categorization, e.g. polymer or nucleic acid.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Status of substance within the catalogue e.g. approved.\r\n   */\r\n  status?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * If the substance applies to only human or veterinary use.\r\n   */\r\n  domain?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Textual description of the substance.\r\n   */\r\n  description?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Textual comment about this record of a substance.\r\n   */\r\n  comment?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Moiety, for structural modifications.\r\n   */\r\n  moiety?: fhir.SubstanceSpecificationMoietyArgs[]|undefined;\r\n  /**\r\n   * General specifications for this substance, including how it is related to other substances.\r\n   */\r\n  property?: fhir.SubstanceSpecificationPropertyArgs[]|undefined;\r\n  /**\r\n   * General information detailing this substance.\r\n   */\r\n  referenceInformation?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Structural information.\r\n   */\r\n  structure?: fhir.SubstanceSpecificationStructureArgs|undefined;\r\n  /**\r\n   * Codes associated with the substance.\r\n   */\r\n  code?: fhir.SubstanceSpecificationCodeArgs[]|undefined;\r\n  /**\r\n   * Names applicable to this substance.\r\n   */\r\n  name?: fhir.SubstanceSpecificationNameArgs[]|undefined;\r\n  /**\r\n   * The molecular weight or weight range (for proteins, polymers or nucleic acids).\r\n   */\r\n  molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeightArgs[]|undefined;\r\n  /**\r\n   * A link between this substance and another, with details of the relationship.\r\n   */\r\n  relationship?: fhir.SubstanceSpecificationRelationshipArgs[]|undefined;\r\n  /**\r\n   * Data items specific to nucleic acids.\r\n   */\r\n  nucleicAcid?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Data items specific to polymers.\r\n   */\r\n  polymer?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Data items specific to proteins.\r\n   */\r\n  protein?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Material or taxonomic/anatomical source for the substance.\r\n   */\r\n  sourceMaterial?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * The detailed description of a substance, typically at a level beyond what is used for prescribing.\r\n */\r\nexport class SubstanceSpecification extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceSpecification';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"SubstanceSpecification\";\r\n  /**\r\n   * Identifier by which this substance is known.\r\n   */\r\n  public identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * High level categorization, e.g. polymer or nucleic acid.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Status of substance within the catalogue e.g. approved.\r\n   */\r\n  public status?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If the substance applies to only human or veterinary use.\r\n   */\r\n  public domain?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Textual description of the substance.\r\n   */\r\n  public description?: fhir.FhirString|undefined;\r\n  /**\r\n   * Supporting literature.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Textual comment about this record of a substance.\r\n   */\r\n  public comment?: fhir.FhirString|undefined;\r\n  /**\r\n   * Moiety, for structural modifications.\r\n   */\r\n  public moiety?: fhir.SubstanceSpecificationMoiety[];\r\n  /**\r\n   * General specifications for this substance, including how it is related to other substances.\r\n   */\r\n  public property?: fhir.SubstanceSpecificationProperty[];\r\n  /**\r\n   * General information detailing this substance.\r\n   */\r\n  public referenceInformation?: fhir.Reference|undefined;\r\n  /**\r\n   * Structural information.\r\n   */\r\n  public structure?: fhir.SubstanceSpecificationStructure|undefined;\r\n  /**\r\n   * Codes associated with the substance.\r\n   */\r\n  public code?: fhir.SubstanceSpecificationCode[];\r\n  /**\r\n   * Names applicable to this substance.\r\n   */\r\n  public name?: fhir.SubstanceSpecificationName[];\r\n  /**\r\n   * The molecular weight or weight range (for proteins, polymers or nucleic acids).\r\n   */\r\n  public molecularWeight?: fhir.SubstanceSpecificationStructureIsotopeMolecularWeight[];\r\n  /**\r\n   * A link between this substance and another, with details of the relationship.\r\n   */\r\n  public relationship?: fhir.SubstanceSpecificationRelationship[];\r\n  /**\r\n   * Data items specific to nucleic acids.\r\n   */\r\n  public nucleicAcid?: fhir.Reference|undefined;\r\n  /**\r\n   * Data items specific to polymers.\r\n   */\r\n  public polymer?: fhir.Reference|undefined;\r\n  /**\r\n   * Data items specific to proteins.\r\n   */\r\n  public protein?: fhir.Reference|undefined;\r\n  /**\r\n   * Material or taxonomic/anatomical source for the substance.\r\n   */\r\n  public sourceMaterial?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceSpecificationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'SubstanceSpecification';\r\n    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['status']) { this.status = new fhir.CodeableConcept(source.status); }\r\n    if (source['domain']) { this.domain = new fhir.CodeableConcept(source.domain); }\r\n    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n    if (source['comment']) { this.comment = new fhir.FhirString({value: source.comment}); }\r\n    if (source['moiety']) { this.moiety = source.moiety.map((x) => new fhir.SubstanceSpecificationMoiety(x)); }\r\n    else { this.moiety = []; }\r\n    if (source['property']) { this.property = source.property.map((x) => new fhir.SubstanceSpecificationProperty(x)); }\r\n    else { this.property = []; }\r\n    if (source['referenceInformation']) { this.referenceInformation = new fhir.Reference(source.referenceInformation); }\r\n    if (source['structure']) { this.structure = new fhir.SubstanceSpecificationStructure(source.structure); }\r\n    if (source['code']) { this.code = source.code.map((x) => new fhir.SubstanceSpecificationCode(x)); }\r\n    else { this.code = []; }\r\n    if (source['name']) { this.name = source.name.map((x) => new fhir.SubstanceSpecificationName(x)); }\r\n    else { this.name = []; }\r\n    if (source['molecularWeight']) { this.molecularWeight = source.molecularWeight.map((x) => new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(x)); }\r\n    else { this.molecularWeight = []; }\r\n    if (source['relationship']) { this.relationship = source.relationship.map((x) => new fhir.SubstanceSpecificationRelationship(x)); }\r\n    else { this.relationship = []; }\r\n    if (source['nucleicAcid']) { this.nucleicAcid = new fhir.Reference(source.nucleicAcid); }\r\n    if (source['polymer']) { this.polymer = new fhir.Reference(source.polymer); }\r\n    if (source['protein']) { this.protein = new fhir.Reference(source.protein); }\r\n    if (source['sourceMaterial']) { this.sourceMaterial = new fhir.Reference(source.sourceMaterial); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"SubstanceSpecification\" fhir: SubstanceSpecification.resourceType:\"SubstanceSpecification\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { outcome.issue!.push(...this.identifier.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"status\"]) { outcome.issue!.push(...this.status.doModelValidation().issue!); }\r\n    if (this[\"domain\"]) { outcome.issue!.push(...this.domain.doModelValidation().issue!); }\r\n    if (this[\"description\"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"comment\"]) { outcome.issue!.push(...this.comment.doModelValidation().issue!); }\r\n    if (this[\"moiety\"]) { this.moiety.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"property\"]) { this.property.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"referenceInformation\"]) { outcome.issue!.push(...this.referenceInformation.doModelValidation().issue!); }\r\n    if (this[\"structure\"]) { outcome.issue!.push(...this.structure.doModelValidation().issue!); }\r\n    if (this[\"code\"]) { this.code.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"name\"]) { this.name.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"molecularWeight\"]) { this.molecularWeight.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"relationship\"]) { this.relationship.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"nucleicAcid\"]) { outcome.issue!.push(...this.nucleicAcid.doModelValidation().issue!); }\r\n    if (this[\"polymer\"]) { outcome.issue!.push(...this.polymer.doModelValidation().issue!); }\r\n    if (this[\"protein\"]) { outcome.issue!.push(...this.protein.doModelValidation().issue!); }\r\n    if (this[\"sourceMaterial\"]) { outcome.issue!.push(...this.sourceMaterial.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.CodeableConcept","fhir.Identifier","fhir.FhirString","fhir.Quantity","fhir.BackboneElement","fhir.Reference","fhir.SubstanceSpecificationStructureIsotopeMolecularWeight","fhir.Attachment","fhir.SubstanceSpecificationStructureIsotope","fhir.SubstanceSpecificationStructureRepresentation","fhir.FhirDateTime","SubstanceSpecificationName","fhir.FhirBoolean","fhir.SubstanceSpecificationName","fhir.SubstanceSpecificationNameOfficial","fhir.OperationOutcomeIssue","fhir.Range","fhir.Ratio","fhir.SubstanceSpecificationMoiety","fhir.SubstanceSpecificationProperty","fhir.SubstanceSpecificationStructure","fhir.SubstanceSpecificationCode","fhir.SubstanceSpecificationRelationship","fhir.DomainResource"],"mappings":"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"}