/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ActionConditionKindCodings } from '../fhirValueSets/ActionConditionKindCodings.js';
import { ActionRelationshipTypeCodings } from '../fhirValueSets/ActionRelationshipTypeCodings.js';
import { RequestPriorityCodings } from '../fhirValueSets/RequestPriorityCodings.js';
import { ActionTypeCodings } from '../fhirValueSets/ActionTypeCodings.js';
import { ActionGroupingBehaviorCodings } from '../fhirValueSets/ActionGroupingBehaviorCodings.js';
import { ActionSelectionBehaviorCodings } from '../fhirValueSets/ActionSelectionBehaviorCodings.js';
import { ActionRequiredBehaviorCodings } from '../fhirValueSets/ActionRequiredBehaviorCodings.js';
import { ActionPrecheckBehaviorCodings } from '../fhirValueSets/ActionPrecheckBehaviorCodings.js';
import { ActionCardinalityBehaviorCodings } from '../fhirValueSets/ActionCardinalityBehaviorCodings.js';
import { RequestStatusCodings } from '../fhirValueSets/RequestStatusCodings.js';
import { RequestIntentCodings } from '../fhirValueSets/RequestIntentCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Expression } from './Expression.js';
import { FhirId } from './FhirId.js';
import { Duration } from './Duration.js';
import { Range } from './Range.js';
import { FhirString } from './FhirString.js';
import { CodeableConcept } from './CodeableConcept.js';
import { RelatedArtifact } from './RelatedArtifact.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Age } from './Age.js';
import { Period } from './Period.js';
import { Timing } from './Timing.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUri } from './FhirUri.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
var RequestGroupActionCondition = /** @class */ (function (_super) {
    __extends(RequestGroupActionCondition, _super);
    /**
     * Default constructor for RequestGroupActionCondition - initializes any required elements to null if a value is not provided.
     */
    function RequestGroupActionCondition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['kind']) {
            _this.kind = source.kind;
        }
        else {
            _this.kind = null;
        }
        if (source['expression']) {
            _this.expression = new Expression(source.expression);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for kind (RequestGroup.action.condition.kind)
     */
    RequestGroupActionCondition.kindRequiredCoding = function () {
        return ActionConditionKindCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RequestGroupActionCondition.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['kind']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property kind:ActionConditionKindCodeType fhir: RequestGroup.action.condition.kind:code', }));
        }
        if (this["expression"]) {
            (_a = outcome.issue).push.apply(_a, this.expression.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RequestGroupActionCondition._fts_dataType = 'RequestGroupActionCondition';
    return RequestGroupActionCondition;
}(BackboneElement));
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
var RequestGroupActionRelatedAction = /** @class */ (function (_super) {
    __extends(RequestGroupActionRelatedAction, _super);
    /**
     * Default constructor for RequestGroupActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    function RequestGroupActionRelatedAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['actionId']) {
            _this.actionId = new FhirId({ value: source.actionId });
        }
        else {
            _this.actionId = null;
        }
        if (source['relationship']) {
            _this.relationship = source.relationship;
        }
        else {
            _this.relationship = null;
        }
        if (source['offset']) {
            _this.offset = source.offset;
        }
        else if (source['offsetDuration']) {
            _this.offset = new Duration(source.offsetDuration);
        }
        else if (source['offsetRange']) {
            _this.offset = new Range(source.offsetRange);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for relationship (RequestGroup.action.relatedAction.relationship)
     */
    RequestGroupActionRelatedAction.relationshipRequiredCoding = function () {
        return ActionRelationshipTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RequestGroupActionRelatedAction.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['actionId']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actionId:fhir.FhirId fhir: RequestGroup.action.relatedAction.actionId:id', }));
        }
        if (this["actionId"]) {
            (_a = outcome.issue).push.apply(_a, this.actionId.doModelValidation().issue);
        }
        if (!this['relationship']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property relationship:ActionRelationshipTypeCodeType fhir: RequestGroup.action.relatedAction.relationship:code', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RequestGroupActionRelatedAction._fts_dataType = 'RequestGroupActionRelatedAction';
    /**
     * Internal flag to properly serialize choice-type element RequestGroup.action.relatedAction.offset[x]
     */
    RequestGroupActionRelatedAction._fts_offsetIsChoice = true;
    return RequestGroupActionRelatedAction;
}(BackboneElement));
/**
 * The actions, if any, produced by the evaluation of the artifact.
 */
var RequestGroupAction = /** @class */ (function (_super) {
    __extends(RequestGroupAction$1, _super);
    /**
     * Default constructor for RequestGroupAction - initializes any required elements to null if a value is not provided.
     */
    function RequestGroupAction$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['prefix']) {
            _this.prefix = new FhirString({ value: source.prefix });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['textEquivalent']) {
            _this.textEquivalent = new FhirString({ value: source.textEquivalent });
        }
        if (source['priority']) {
            _this.priority = source.priority;
        }
        if (source['code']) {
            _this.code = source.code.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.code = [];
        }
        if (source['documentation']) {
            _this.documentation = source.documentation.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.documentation = [];
        }
        if (source['condition']) {
            _this.condition = source.condition.map(function (x) { return new RequestGroupActionCondition(x); });
        }
        else {
            _this.condition = [];
        }
        if (source['relatedAction']) {
            _this.relatedAction = source.relatedAction.map(function (x) { return new RequestGroupActionRelatedAction(x); });
        }
        else {
            _this.relatedAction = [];
        }
        if (source['timing']) {
            _this.timing = source.timing;
        }
        else if (source['timingDateTime']) {
            _this.timing = new FhirDateTime({ value: source.timingDateTime });
        }
        else if (source['timingAge']) {
            _this.timing = new Age(source.timingAge);
        }
        else if (source['timingPeriod']) {
            _this.timing = new Period(source.timingPeriod);
        }
        else if (source['timingDuration']) {
            _this.timing = new Duration(source.timingDuration);
        }
        else if (source['timingRange']) {
            _this.timing = new Range(source.timingRange);
        }
        else if (source['timingTiming']) {
            _this.timing = new Timing(source.timingTiming);
        }
        if (source['participant']) {
            _this.participant = source.participant.map(function (x) { return new Reference(x); });
        }
        else {
            _this.participant = [];
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['groupingBehavior']) {
            _this.groupingBehavior = source.groupingBehavior;
        }
        if (source['selectionBehavior']) {
            _this.selectionBehavior = source.selectionBehavior;
        }
        if (source['requiredBehavior']) {
            _this.requiredBehavior = source.requiredBehavior;
        }
        if (source['precheckBehavior']) {
            _this.precheckBehavior = source.precheckBehavior;
        }
        if (source['cardinalityBehavior']) {
            _this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source['resource']) {
            _this.resource = new Reference(source.resource);
        }
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new RequestGroupAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for priority (RequestGroup.action.priority)
     */
    RequestGroupAction$1.priorityRequiredCoding = function () {
        return RequestPriorityCodings;
    };
    /**
     * Extensible-bound Value Set for type (RequestGroup.action.type)
     */
    RequestGroupAction$1.typeExtensibleCoding = function () {
        return ActionTypeCodings;
    };
    /**
     * Required-bound Value Set for groupingBehavior (RequestGroup.action.groupingBehavior)
     */
    RequestGroupAction$1.groupingBehaviorRequiredCoding = function () {
        return ActionGroupingBehaviorCodings;
    };
    /**
     * Required-bound Value Set for selectionBehavior (RequestGroup.action.selectionBehavior)
     */
    RequestGroupAction$1.selectionBehaviorRequiredCoding = function () {
        return ActionSelectionBehaviorCodings;
    };
    /**
     * Required-bound Value Set for requiredBehavior (RequestGroup.action.requiredBehavior)
     */
    RequestGroupAction$1.requiredBehaviorRequiredCoding = function () {
        return ActionRequiredBehaviorCodings;
    };
    /**
     * Required-bound Value Set for precheckBehavior (RequestGroup.action.precheckBehavior)
     */
    RequestGroupAction$1.precheckBehaviorRequiredCoding = function () {
        return ActionPrecheckBehaviorCodings;
    };
    /**
     * Required-bound Value Set for cardinalityBehavior (RequestGroup.action.cardinalityBehavior)
     */
    RequestGroupAction$1.cardinalityBehaviorRequiredCoding = function () {
        return ActionCardinalityBehaviorCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RequestGroupAction$1.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["prefix"]) {
            (_a = outcome.issue).push.apply(_a, this.prefix.doModelValidation().issue);
        }
        if (this["title"]) {
            (_b = outcome.issue).push.apply(_b, this.title.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (this["textEquivalent"]) {
            (_d = outcome.issue).push.apply(_d, this.textEquivalent.doModelValidation().issue);
        }
        if (this["code"]) {
            this.code.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["documentation"]) {
            this.documentation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["condition"]) {
            this.condition.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedAction"]) {
            this.relatedAction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["participant"]) {
            this.participant.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["type"]) {
            (_e = outcome.issue).push.apply(_e, this.type.doModelValidation().issue);
        }
        if (this["resource"]) {
            (_f = outcome.issue).push.apply(_f, this.resource.doModelValidation().issue);
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RequestGroupAction$1._fts_dataType = 'RequestGroupAction';
    /**
     * Internal flag to properly serialize choice-type element RequestGroup.action.timing[x]
     */
    RequestGroupAction$1._fts_timingIsChoice = true;
    return RequestGroupAction$1;
}(BackboneElement));
/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
var RequestGroup = /** @class */ (function (_super) {
    __extends(RequestGroup, _super);
    /**
     * Default constructor for RequestGroup - initializes any required elements to null if a value is not provided.
     */
    function RequestGroup(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'RequestGroup';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.instantiatesUri = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['replaces']) {
            _this.replaces = source.replaces.map(function (x) { return new Reference(x); });
        }
        else {
            _this.replaces = [];
        }
        if (source['groupIdentifier']) {
            _this.groupIdentifier = new Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['intent']) {
            _this.intent = source.intent;
        }
        else {
            _this.intent = null;
        }
        if (source['priority']) {
            _this.priority = source.priority;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['authoredOn']) {
            _this.authoredOn = new FhirDateTime({ value: source.authoredOn });
        }
        if (source['author']) {
            _this.author = new Reference(source.author);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new RequestGroupAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (RequestGroup.status)
     */
    RequestGroup.statusRequiredCoding = function () {
        return RequestStatusCodings;
    };
    /**
     * Required-bound Value Set for intent (RequestGroup.intent)
     */
    RequestGroup.intentRequiredCoding = function () {
        return RequestIntentCodings;
    };
    /**
     * Required-bound Value Set for priority (RequestGroup.priority)
     */
    RequestGroup.priorityRequiredCoding = function () {
        return RequestPriorityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RequestGroup.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"RequestGroup" fhir: RequestGroup.resourceType:"RequestGroup"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["replaces"]) {
            this.replaces.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["groupIdentifier"]) {
            (_a = outcome.issue).push.apply(_a, this.groupIdentifier.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:RequestStatusCodeType fhir: RequestGroup.status:code', }));
        }
        if (!this['intent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property intent:RequestIntentCodeType fhir: RequestGroup.intent:code', }));
        }
        if (this["code"]) {
            (_b = outcome.issue).push.apply(_b, this.code.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_d = outcome.issue).push.apply(_d, this.encounter.doModelValidation().issue);
        }
        if (this["authoredOn"]) {
            (_e = outcome.issue).push.apply(_e, this.authoredOn.doModelValidation().issue);
        }
        if (this["author"]) {
            (_f = outcome.issue).push.apply(_f, this.author.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RequestGroup._fts_dataType = 'RequestGroup';
    return RequestGroup;
}(DomainResource));

export { RequestGroup, RequestGroupAction, RequestGroupActionCondition, RequestGroupActionRelatedAction };
//# sourceMappingURL=RequestGroup.js.map
