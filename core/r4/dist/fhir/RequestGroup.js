// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: RequestGroup
import * as fhir from '../fhir.js';
// @ts-ignore
import { ActionConditionKindVsValidation } from '../fhirValueSets/ActionConditionKindVsValidation.js';
// @ts-ignore
import { ActionRelationshipTypeVsValidation } from '../fhirValueSets/ActionRelationshipTypeVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
// @ts-ignore
import { ActionGroupingBehaviorVsValidation } from '../fhirValueSets/ActionGroupingBehaviorVsValidation.js';
// @ts-ignore
import { ActionSelectionBehaviorVsValidation } from '../fhirValueSets/ActionSelectionBehaviorVsValidation.js';
// @ts-ignore
import { ActionRequiredBehaviorVsValidation } from '../fhirValueSets/ActionRequiredBehaviorVsValidation.js';
// @ts-ignore
import { ActionPrecheckBehaviorVsValidation } from '../fhirValueSets/ActionPrecheckBehaviorVsValidation.js';
// @ts-ignore
import { ActionCardinalityBehaviorVsValidation } from '../fhirValueSets/ActionCardinalityBehaviorVsValidation.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { RequestIntentVsValidation } from '../fhirValueSets/RequestIntentVsValidation.js';
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
export class RequestGroupActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup.action.condition';
        }
        this.vRSV('kind', exp, 'ActionConditionKind', ActionConditionKindVsValidation, 'r');
        this.vOS('expression', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroupActionCondition._fts_dataType = 'RequestGroupActionCondition';
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
export class RequestGroupActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actionId']) {
            this.actionId = new fhir.FhirId({ value: source.actionId });
        }
        else {
            this.actionId = null;
        }
        if (source['_actionId']) {
            if (this.actionId) {
                this.actionId.addExtendedProperties(source._actionId);
            }
            else {
                this.actionId = new fhir.FhirId(source._actionId);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.FhirCode({ value: source.relationship });
        }
        else {
            this.relationship = null;
        }
        if (source['_relationship']) {
            if (this.relationship) {
                this.relationship.addExtendedProperties(source._relationship);
            }
            else {
                this.relationship = new fhir.FhirCode(source._relationship);
            }
        }
        if (source['offset']) {
            this.offset = source.offset;
        }
        else if (source['offsetDuration']) {
            this.offset = new fhir.Duration(source.offsetDuration);
        }
        else if (source['offsetRange']) {
            this.offset = new fhir.Range(source.offsetRange);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup.action.relatedAction';
        }
        this.vRS('actionId', exp);
        this.vRSV('relationship', exp, 'ActionRelationshipType', ActionRelationshipTypeVsValidation, 'r');
        this.vOS('offset', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroupActionRelatedAction._fts_dataType = 'RequestGroupActionRelatedAction';
/**
 * Internal flag to properly serialize choice-type element RequestGroup.action.relatedAction.offset[x]
 */
RequestGroupActionRelatedAction._fts_offsetIsChoice = true;
/**
 * The actions, if any, produced by the evaluation of the artifact.
 */
export class RequestGroupAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['prefix']) {
            this.prefix = new fhir.FhirString({ value: source.prefix });
        }
        if (source['_prefix']) {
            if (this.prefix) {
                this.prefix.addExtendedProperties(source._prefix);
            }
            else {
                this.prefix = new fhir.FhirString(source._prefix);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['textEquivalent']) {
            this.textEquivalent = new fhir.FhirString({ value: source.textEquivalent });
        }
        if (source['_textEquivalent']) {
            if (this.textEquivalent) {
                this.textEquivalent.addExtendedProperties(source._textEquivalent);
            }
            else {
                this.textEquivalent = new fhir.FhirString(source._textEquivalent);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.documentation = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.RequestGroupActionCondition(x));
        }
        else {
            this.condition = [];
        }
        if (source['relatedAction']) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.RequestGroupActionRelatedAction(x));
        }
        else {
            this.relatedAction = [];
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDateTime']) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime });
        }
        else if (source['timingAge']) {
            this.timing = new fhir.Age(source.timingAge);
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        else if (source['timingDuration']) {
            this.timing = new fhir.Duration(source.timingDuration);
        }
        else if (source['timingRange']) {
            this.timing = new fhir.Range(source.timingRange);
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.Reference(x));
        }
        else {
            this.participant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupingBehavior']) {
            this.groupingBehavior = new fhir.FhirCode({ value: source.groupingBehavior });
        }
        if (source['_groupingBehavior']) {
            if (this.groupingBehavior) {
                this.groupingBehavior.addExtendedProperties(source._groupingBehavior);
            }
            else {
                this.groupingBehavior = new fhir.FhirCode(source._groupingBehavior);
            }
        }
        if (source['selectionBehavior']) {
            this.selectionBehavior = new fhir.FhirCode({ value: source.selectionBehavior });
        }
        if (source['_selectionBehavior']) {
            if (this.selectionBehavior) {
                this.selectionBehavior.addExtendedProperties(source._selectionBehavior);
            }
            else {
                this.selectionBehavior = new fhir.FhirCode(source._selectionBehavior);
            }
        }
        if (source['requiredBehavior']) {
            this.requiredBehavior = new fhir.FhirCode({ value: source.requiredBehavior });
        }
        if (source['_requiredBehavior']) {
            if (this.requiredBehavior) {
                this.requiredBehavior.addExtendedProperties(source._requiredBehavior);
            }
            else {
                this.requiredBehavior = new fhir.FhirCode(source._requiredBehavior);
            }
        }
        if (source['precheckBehavior']) {
            this.precheckBehavior = new fhir.FhirCode({ value: source.precheckBehavior });
        }
        if (source['_precheckBehavior']) {
            if (this.precheckBehavior) {
                this.precheckBehavior.addExtendedProperties(source._precheckBehavior);
            }
            else {
                this.precheckBehavior = new fhir.FhirCode(source._precheckBehavior);
            }
        }
        if (source['cardinalityBehavior']) {
            this.cardinalityBehavior = new fhir.FhirCode({ value: source.cardinalityBehavior });
        }
        if (source['_cardinalityBehavior']) {
            if (this.cardinalityBehavior) {
                this.cardinalityBehavior.addExtendedProperties(source._cardinalityBehavior);
            }
            else {
                this.cardinalityBehavior = new fhir.FhirCode(source._cardinalityBehavior);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource);
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup.action';
        }
        this.vOS('prefix', exp);
        this.vOS('title', exp);
        this.vOS('description', exp);
        this.vOS('textEquivalent', exp);
        this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r');
        this.vOA('code', exp);
        this.vOA('documentation', exp);
        this.vOA('condition', exp);
        this.vOA('relatedAction', exp);
        this.vOS('timing', exp);
        this.vOA('participant', exp);
        this.vOS('type', exp);
        this.vOSV('groupingBehavior', exp, 'ActionGroupingBehavior', ActionGroupingBehaviorVsValidation, 'r');
        this.vOSV('selectionBehavior', exp, 'ActionSelectionBehavior', ActionSelectionBehaviorVsValidation, 'r');
        this.vOSV('requiredBehavior', exp, 'ActionRequiredBehavior', ActionRequiredBehaviorVsValidation, 'r');
        this.vOSV('precheckBehavior', exp, 'ActionPrecheckBehavior', ActionPrecheckBehaviorVsValidation, 'r');
        this.vOSV('cardinalityBehavior', exp, 'ActionCardinalityBehavior', ActionCardinalityBehaviorVsValidation, 'r');
        this.vOS('resource', exp);
        this.vOA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroupAction._fts_dataType = 'RequestGroupAction';
/**
 * Internal flag to properly serialize choice-type element RequestGroup.action.timing[x]
 */
RequestGroupAction._fts_timingIsChoice = true;
/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
export class RequestGroup extends fhir.DomainResource {
    /**
     * Default constructor for RequestGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'RequestGroup';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        else {
            this.replaces = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOA('instantiatesCanonical', exp);
        this.vOA('instantiatesUri', exp);
        this.vOA('basedOn', exp);
        this.vOA('replaces', exp);
        this.vOS('groupIdentifier', exp);
        this.vRSV('status', exp, 'RequestStatus', RequestStatusVsValidation, 'r');
        this.vRSV('intent', exp, 'RequestIntent', RequestIntentVsValidation, 'r');
        this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r');
        this.vOS('code', exp);
        this.vOS('subject', exp);
        this.vOS('encounter', exp);
        this.vOS('authoredOn', exp);
        this.vOS('author', exp);
        this.vOA('reasonCode', exp);
        this.vOA('reasonReference', exp);
        this.vOA('note', exp);
        this.vOA('action', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroup._fts_dataType = 'RequestGroup';
//# sourceMappingURL=data:application/json;base64,