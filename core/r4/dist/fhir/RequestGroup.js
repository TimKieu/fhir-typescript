// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: RequestGroup
import * as fhir from '../fhir.js';
// @ts-ignore
import { ActionConditionKindVsValidation } from '../fhirValueSets/ActionConditionKindVsValidation.js';
// @ts-ignore
import { ActionRelationshipTypeVsValidation } from '../fhirValueSets/ActionRelationshipTypeVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
// @ts-ignore
import { ActionGroupingBehaviorVsValidation } from '../fhirValueSets/ActionGroupingBehaviorVsValidation.js';
// @ts-ignore
import { ActionSelectionBehaviorVsValidation } from '../fhirValueSets/ActionSelectionBehaviorVsValidation.js';
// @ts-ignore
import { ActionRequiredBehaviorVsValidation } from '../fhirValueSets/ActionRequiredBehaviorVsValidation.js';
// @ts-ignore
import { ActionPrecheckBehaviorVsValidation } from '../fhirValueSets/ActionPrecheckBehaviorVsValidation.js';
// @ts-ignore
import { ActionCardinalityBehaviorVsValidation } from '../fhirValueSets/ActionCardinalityBehaviorVsValidation.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { RequestIntentVsValidation } from '../fhirValueSets/RequestIntentVsValidation.js';
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
export class RequestGroupActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['kind'] !== undefined) {
            this.kind = new fhir.FhirCode({ value: source.kind }, options);
        }
        else {
            this.kind = null;
        }
        if (source['_kind']) {
            if (this.kind) {
                this.kind.addExtendedProperties(source._kind);
            }
            else {
                this.kind = new fhir.FhirCode(source._kind, options);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup.action.condition';
        }
        iss.push(...this.vRSV('kind', exp, 'ActionConditionKind', ActionConditionKindVsValidation, 'r'));
        iss.push(...this.vOS('expression', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroupActionCondition._fts_dataType = 'RequestGroupActionCondition';
/**
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
export class RequestGroupActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actionId'] !== undefined) {
            this.actionId = new fhir.FhirId({ value: source.actionId }, options);
        }
        else {
            this.actionId = null;
        }
        if (source['_actionId']) {
            if (this.actionId) {
                this.actionId.addExtendedProperties(source._actionId);
            }
            else {
                this.actionId = new fhir.FhirId(source._actionId, options);
            }
        }
        if (source['relationship'] !== undefined) {
            this.relationship = new fhir.FhirCode({ value: source.relationship }, options);
        }
        else {
            this.relationship = null;
        }
        if (source['_relationship']) {
            if (this.relationship) {
                this.relationship.addExtendedProperties(source._relationship);
            }
            else {
                this.relationship = new fhir.FhirCode(source._relationship, options);
            }
        }
        if (source['offset']) {
            this.offset = source.offset;
        }
        else if (source['offsetDuration']) {
            this.offset = new fhir.Duration(source.offsetDuration, options);
        }
        else if (source['offsetRange']) {
            this.offset = new fhir.Range(source.offsetRange, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup.action.relatedAction';
        }
        iss.push(...this.vRS('actionId', exp));
        iss.push(...this.vRSV('relationship', exp, 'ActionRelationshipType', ActionRelationshipTypeVsValidation, 'r'));
        iss.push(...this.vOS('offset', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroupActionRelatedAction._fts_dataType = 'RequestGroupActionRelatedAction';
/**
 * Internal flag to properly serialize choice-type element RequestGroup.action.relatedAction.offset[x]
 */
RequestGroupActionRelatedAction._fts_offsetIsChoice = true;
/**
 * The actions, if any, produced by the evaluation of the artifact.
 */
export class RequestGroupAction extends fhir.BackboneElement {
    /**
     * Default constructor for RequestGroupAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['prefix'] !== undefined) {
            this.prefix = new fhir.FhirString({ value: source.prefix }, options);
        }
        if (source['_prefix']) {
            if (this.prefix) {
                this.prefix.addExtendedProperties(source._prefix);
            }
            else {
                this.prefix = new fhir.FhirString(source._prefix, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['textEquivalent'] !== undefined) {
            this.textEquivalent = new fhir.FhirString({ value: source.textEquivalent }, options);
        }
        if (source['_textEquivalent']) {
            if (this.textEquivalent) {
                this.textEquivalent.addExtendedProperties(source._textEquivalent);
            }
            else {
                this.textEquivalent = new fhir.FhirString(source._textEquivalent, options);
            }
        }
        if (source['priority'] !== undefined) {
            this.priority = new fhir.FhirCode({ value: source.priority }, options);
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority, options);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.code = [];
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x, options));
        }
        else {
            this.documentation = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.RequestGroupActionCondition(x, options));
        }
        else {
            this.condition = [];
        }
        if (source['relatedAction']) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.RequestGroupActionRelatedAction(x, options));
        }
        else {
            this.relatedAction = [];
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDateTime'] !== undefined) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime }, options);
        }
        else if (source['timingAge']) {
            this.timing = new fhir.Age(source.timingAge, options);
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod, options);
        }
        else if (source['timingDuration']) {
            this.timing = new fhir.Duration(source.timingDuration, options);
        }
        else if (source['timingRange']) {
            this.timing = new fhir.Range(source.timingRange, options);
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming, options);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.participant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['groupingBehavior'] !== undefined) {
            this.groupingBehavior = new fhir.FhirCode({ value: source.groupingBehavior }, options);
        }
        if (source['_groupingBehavior']) {
            if (this.groupingBehavior) {
                this.groupingBehavior.addExtendedProperties(source._groupingBehavior);
            }
            else {
                this.groupingBehavior = new fhir.FhirCode(source._groupingBehavior, options);
            }
        }
        if (source['selectionBehavior'] !== undefined) {
            this.selectionBehavior = new fhir.FhirCode({ value: source.selectionBehavior }, options);
        }
        if (source['_selectionBehavior']) {
            if (this.selectionBehavior) {
                this.selectionBehavior.addExtendedProperties(source._selectionBehavior);
            }
            else {
                this.selectionBehavior = new fhir.FhirCode(source._selectionBehavior, options);
            }
        }
        if (source['requiredBehavior'] !== undefined) {
            this.requiredBehavior = new fhir.FhirCode({ value: source.requiredBehavior }, options);
        }
        if (source['_requiredBehavior']) {
            if (this.requiredBehavior) {
                this.requiredBehavior.addExtendedProperties(source._requiredBehavior);
            }
            else {
                this.requiredBehavior = new fhir.FhirCode(source._requiredBehavior, options);
            }
        }
        if (source['precheckBehavior'] !== undefined) {
            this.precheckBehavior = new fhir.FhirCode({ value: source.precheckBehavior }, options);
        }
        if (source['_precheckBehavior']) {
            if (this.precheckBehavior) {
                this.precheckBehavior.addExtendedProperties(source._precheckBehavior);
            }
            else {
                this.precheckBehavior = new fhir.FhirCode(source._precheckBehavior, options);
            }
        }
        if (source['cardinalityBehavior'] !== undefined) {
            this.cardinalityBehavior = new fhir.FhirCode({ value: source.cardinalityBehavior }, options);
        }
        if (source['_cardinalityBehavior']) {
            if (this.cardinalityBehavior) {
                this.cardinalityBehavior.addExtendedProperties(source._cardinalityBehavior);
            }
            else {
                this.cardinalityBehavior = new fhir.FhirCode(source._cardinalityBehavior, options);
            }
        }
        if (source['resource']) {
            this.resource = new fhir.Reference(source.resource, options);
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x, options));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup.action';
        }
        iss.push(...this.vOS('prefix', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('textEquivalent', exp));
        iss.push(...this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r'));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOA('documentation', exp));
        iss.push(...this.vOA('condition', exp));
        iss.push(...this.vOA('relatedAction', exp));
        iss.push(...this.vOS('timing', exp));
        iss.push(...this.vOA('participant', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOSV('groupingBehavior', exp, 'ActionGroupingBehavior', ActionGroupingBehaviorVsValidation, 'r'));
        iss.push(...this.vOSV('selectionBehavior', exp, 'ActionSelectionBehavior', ActionSelectionBehaviorVsValidation, 'r'));
        iss.push(...this.vOSV('requiredBehavior', exp, 'ActionRequiredBehavior', ActionRequiredBehaviorVsValidation, 'r'));
        iss.push(...this.vOSV('precheckBehavior', exp, 'ActionPrecheckBehavior', ActionPrecheckBehaviorVsValidation, 'r'));
        iss.push(...this.vOSV('cardinalityBehavior', exp, 'ActionCardinalityBehavior', ActionCardinalityBehaviorVsValidation, 'r'));
        iss.push(...this.vOS('resource', exp));
        iss.push(...this.vOA('action', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroupAction._fts_dataType = 'RequestGroupAction';
/**
 * Internal flag to properly serialize choice-type element RequestGroup.action.timing[x]
 */
RequestGroupAction._fts_timingIsChoice = true;
/**
 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
export class RequestGroup extends fhir.DomainResource {
    /**
     * Default constructor for RequestGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'RequestGroup';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical'] !== undefined) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }, options));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri'] !== undefined) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }, options));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.replaces = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['intent'] !== undefined) {
            this.intent = new fhir.FhirCode({ value: source.intent }, options);
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent, options);
            }
        }
        if (source['priority'] !== undefined) {
            this.priority = new fhir.FhirCode({ value: source.priority }, options);
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority, options);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['authoredOn'] !== undefined) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn }, options);
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn, options);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.RequestGroupAction(x, options));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RequestGroup';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('instantiatesCanonical', exp));
        iss.push(...this.vOA('instantiatesUri', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('replaces', exp));
        iss.push(...this.vOS('groupIdentifier', exp));
        iss.push(...this.vRSV('status', exp, 'RequestStatus', RequestStatusVsValidation, 'r'));
        iss.push(...this.vRSV('intent', exp, 'RequestIntent', RequestIntentVsValidation, 'r'));
        iss.push(...this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r'));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('authoredOn', exp));
        iss.push(...this.vOS('author', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('action', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RequestGroup._fts_dataType = 'RequestGroup';
//# sourceMappingURL=data:application/json;base64,