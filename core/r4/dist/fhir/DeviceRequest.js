// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { RequestStatusCodes } from '../fhirValueSets/RequestStatusCodes.js';
// @ts-ignore
import { RequestIntentCodes } from '../fhirValueSets/RequestIntentCodes.js';
// @ts-ignore
import { RequestPriorityCodes } from '../fhirValueSets/RequestPriorityCodes.js';
/**
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
export class DeviceRequestParameter extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceRequestParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceRequestParameter._fts_dataType = 'DeviceRequestParameter';
/**
 * Internal flag to properly serialize choice-type element DeviceRequest.parameter.value[x]
 */
DeviceRequestParameter._fts_valueIsChoice = true;
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
export class DeviceRequest extends fhir.DomainResource {
    /**
     * Default constructor for DeviceRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['priorRequest']) {
            this.priorRequest = source.priorRequest.map((x) => new fhir.Reference(x));
        }
        else {
            this.priorRequest = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['code']) {
            this.code = source.code;
        }
        else if (source['codeReference']) {
            this.code = new fhir.Reference(source.codeReference);
        }
        else if (source['codeCodeableConcept']) {
            this.code = new fhir.CodeableConcept(source.codeCodeableConcept);
        }
        else {
            this.code = null;
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.DeviceRequestParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        else {
            this.insurance = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.relevantHistory = [];
        }
    }
    /**
     * Required-bound Value Set for status (DeviceRequest.status)
     */
    static get statusRequiredCodes() {
        return RequestStatusCodes;
    }
    /**
     * Required-bound Value Set for intent (DeviceRequest.intent)
     */
    static get intentRequiredCodes() {
        return RequestIntentCodes;
    }
    /**
     * Required-bound Value Set for priority (DeviceRequest.priority)
     */
    static get priorityRequiredCodes() {
        return RequestPriorityCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DeviceRequest" fhir: DeviceRequest.resourceType:"DeviceRequest"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["priorRequest"]) {
            this.priorRequest.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["groupIdentifier"]) {
            issues.push(...this.groupIdentifier.doModelValidation());
        }
        if (this['status'] && (!Object.values(RequestStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<RequestStatusCodeType> fhir: DeviceRequest.status:code Required binding to: RequestStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['intent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property intent:fhir.FhirCode<RequestIntentCodeType> fhir: DeviceRequest.intent:code' });
        }
        if (this['intent'] && (!Object.values(RequestIntentCodes).includes(this.intent))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property intent:fhir.FhirCode<RequestIntentCodeType> fhir: DeviceRequest.intent:code Required binding to: RequestIntent' });
        }
        if (this["intent"]) {
            issues.push(...this.intent.doModelValidation());
        }
        if (this['priority'] && (!Object.values(RequestPriorityCodes).includes(this.priority))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property priority?:fhir.FhirCode<RequestPriorityCodeType> fhir: DeviceRequest.priority:code Required binding to: RequestPriority' });
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation());
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code: fhir: DeviceRequest.code[x]:' });
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject:fhir.Reference fhir: DeviceRequest.subject:Reference' });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["authoredOn"]) {
            issues.push(...this.authoredOn.doModelValidation());
        }
        if (this["requester"]) {
            issues.push(...this.requester.doModelValidation());
        }
        if (this["performerType"]) {
            issues.push(...this.performerType.doModelValidation());
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceRequest._fts_dataType = 'DeviceRequest';
/**
 * Internal flag to properly serialize choice-type element DeviceRequest.code[x]
 */
DeviceRequest._fts_codeIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element DeviceRequest.occurrence[x]
 */
DeviceRequest._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,