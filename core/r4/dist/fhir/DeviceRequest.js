/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { RequestStatusCodings } from '../fhirValueSets/RequestStatusCodings.js';
import { RequestIntentCodings } from '../fhirValueSets/RequestIntentCodings.js';
import { RequestPriorityCodings } from '../fhirValueSets/RequestPriorityCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Identifier } from './Identifier.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUri } from './FhirUri.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Timing } from './Timing.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
var DeviceRequestParameter = /** @class */ (function (_super) {
    __extends(DeviceRequestParameter, _super);
    /**
     * Default constructor for DeviceRequestParameter - initializes any required elements to null if a value is not provided.
     */
    function DeviceRequestParameter(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            _this.value = new CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            _this.value = new Range(source.valueRange);
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DeviceRequestParameter.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DeviceRequestParameter._fts_dataType = 'DeviceRequestParameter';
    /**
     * Internal flag to properly serialize choice-type element DeviceRequest.parameter.value[x]
     */
    DeviceRequestParameter._fts_valueIsChoice = true;
    return DeviceRequestParameter;
}(BackboneElement));
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
var DeviceRequest = /** @class */ (function (_super) {
    __extends(DeviceRequest, _super);
    /**
     * Default constructor for DeviceRequest - initializes any required elements to null if a value is not provided.
     */
    function DeviceRequest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'DeviceRequest';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.instantiatesUri = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['priorRequest']) {
            _this.priorRequest = source.priorRequest.map(function (x) { return new Reference(x); });
        }
        else {
            _this.priorRequest = [];
        }
        if (source['groupIdentifier']) {
            _this.groupIdentifier = new Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['intent']) {
            _this.intent = source.intent;
        }
        else {
            _this.intent = null;
        }
        if (source['priority']) {
            _this.priority = source.priority;
        }
        if (source['code']) {
            _this.code = source.code;
        }
        else if (source['codeReference']) {
            _this.code = new Reference(source.codeReference);
        }
        else if (source['codeCodeableConcept']) {
            _this.code = new CodeableConcept(source.codeCodeableConcept);
        }
        else {
            _this.code = null;
        }
        if (source['parameter']) {
            _this.parameter = source.parameter.map(function (x) { return new DeviceRequestParameter(x); });
        }
        else {
            _this.parameter = [];
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['occurrence']) {
            _this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            _this.occurrence = new FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            _this.occurrence = new Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            _this.occurrence = new Timing(source.occurrenceTiming);
        }
        if (source['authoredOn']) {
            _this.authoredOn = new FhirDateTime({ value: source.authoredOn });
        }
        if (source['requester']) {
            _this.requester = new Reference(source.requester);
        }
        if (source['performerType']) {
            _this.performerType = new CodeableConcept(source.performerType);
        }
        if (source['performer']) {
            _this.performer = new Reference(source.performer);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['insurance']) {
            _this.insurance = source.insurance.map(function (x) { return new Reference(x); });
        }
        else {
            _this.insurance = [];
        }
        if (source['supportingInfo']) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingInfo = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['relevantHistory']) {
            _this.relevantHistory = source.relevantHistory.map(function (x) { return new Reference(x); });
        }
        else {
            _this.relevantHistory = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (DeviceRequest.status)
     */
    DeviceRequest.statusRequiredCoding = function () {
        return RequestStatusCodings;
    };
    /**
     * Required-bound Value Set for intent (DeviceRequest.intent)
     */
    DeviceRequest.intentRequiredCoding = function () {
        return RequestIntentCodings;
    };
    /**
     * Required-bound Value Set for priority (DeviceRequest.priority)
     */
    DeviceRequest.priorityRequiredCoding = function () {
        return RequestPriorityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DeviceRequest.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"DeviceRequest" fhir: DeviceRequest.resourceType:"DeviceRequest"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["priorRequest"]) {
            this.priorRequest.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["groupIdentifier"]) {
            (_a = outcome.issue).push.apply(_a, this.groupIdentifier.doModelValidation().issue);
        }
        if (!this['intent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property intent:RequestIntentCodeType fhir: DeviceRequest.intent:code', }));
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code: fhir: DeviceRequest.code[x]:', }));
        }
        if (this["parameter"]) {
            this.parameter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: DeviceRequest.subject:Reference', }));
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_c = outcome.issue).push.apply(_c, this.encounter.doModelValidation().issue);
        }
        if (this["authoredOn"]) {
            (_d = outcome.issue).push.apply(_d, this.authoredOn.doModelValidation().issue);
        }
        if (this["requester"]) {
            (_e = outcome.issue).push.apply(_e, this.requester.doModelValidation().issue);
        }
        if (this["performerType"]) {
            (_f = outcome.issue).push.apply(_f, this.performerType.doModelValidation().issue);
        }
        if (this["performer"]) {
            (_g = outcome.issue).push.apply(_g, this.performer.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["insurance"]) {
            this.insurance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DeviceRequest._fts_dataType = 'DeviceRequest';
    /**
     * Internal flag to properly serialize choice-type element DeviceRequest.code[x]
     */
    DeviceRequest._fts_codeIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element DeviceRequest.occurrence[x]
     */
    DeviceRequest._fts_occurrenceIsChoice = true;
    return DeviceRequest;
}(DomainResource));

export { DeviceRequest, DeviceRequestParameter };
//# sourceMappingURL=DeviceRequest.js.map
