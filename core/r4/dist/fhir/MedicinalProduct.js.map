{"version":3,"file":"MedicinalProduct.js","sources":["../../src/fhir/MedicinalProduct.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: MedicinalProduct\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the MedicinalProductNameNamePart type.\r\n */\r\nexport interface MedicinalProductNameNamePartArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * A fragment of a product name.\r\n   */\r\n  part: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Idenifying type for this part of the name (e.g. strength part).\r\n   */\r\n  type: fhir.CodingArgs|null;\r\n}\r\n\r\n/**\r\n * Coding words or phrases of the name.\r\n */\r\nexport class MedicinalProductNameNamePart extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductNameNamePart';\r\n  /**\r\n   * A fragment of a product name.\r\n   */\r\n  public part: fhir.FhirString|null;\r\n  /**\r\n   * Idenifying type for this part of the name (e.g. strength part).\r\n   */\r\n  public type: fhir.Coding|null;\r\n  /**\r\n   * Default constructor for MedicinalProductNameNamePart - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductNameNamePartArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['part']) { this.part = new fhir.FhirString({value: source.part}); }\r\n    else { this.part = null; }\r\n    if (source['type']) { this.type = new fhir.Coding(source.type); }\r\n    else { this.type = null; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['part']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property part:fhir.FhirString fhir: MedicinalProduct.name.namePart.part:string', }));\r\n    }\r\n    if (this[\"part\"]) { outcome.issue!.push(...this.part.doModelValidation().issue!); }\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:fhir.Coding fhir: MedicinalProduct.name.namePart.type:Coding', }));\r\n    }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductNameCountryLanguage type.\r\n */\r\nexport interface MedicinalProductNameCountryLanguageArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Country code for where this name applies.\r\n   */\r\n  country: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * Jurisdiction code for where this name applies.\r\n   */\r\n  jurisdiction?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Language code for this name.\r\n   */\r\n  language: fhir.CodeableConceptArgs|null;\r\n}\r\n\r\n/**\r\n * Country where the name applies.\r\n */\r\nexport class MedicinalProductNameCountryLanguage extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductNameCountryLanguage';\r\n  /**\r\n   * Country code for where this name applies.\r\n   */\r\n  public country: fhir.CodeableConcept|null;\r\n  /**\r\n   * Jurisdiction code for where this name applies.\r\n   */\r\n  public jurisdiction?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Language code for this name.\r\n   */\r\n  public language: fhir.CodeableConcept|null;\r\n  /**\r\n   * Default constructor for MedicinalProductNameCountryLanguage - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductNameCountryLanguageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['country']) { this.country = new fhir.CodeableConcept(source.country); }\r\n    else { this.country = null; }\r\n    if (source['jurisdiction']) { this.jurisdiction = new fhir.CodeableConcept(source.jurisdiction); }\r\n    if (source['language']) { this.language = new fhir.CodeableConcept(source.language); }\r\n    else { this.language = null; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['country']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property country:fhir.CodeableConcept fhir: MedicinalProduct.name.countryLanguage.country:CodeableConcept', }));\r\n    }\r\n    if (this[\"country\"]) { outcome.issue!.push(...this.country.doModelValidation().issue!); }\r\n    if (this[\"jurisdiction\"]) { outcome.issue!.push(...this.jurisdiction.doModelValidation().issue!); }\r\n    if (!this['language']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property language:fhir.CodeableConcept fhir: MedicinalProduct.name.countryLanguage.language:CodeableConcept', }));\r\n    }\r\n    if (this[\"language\"]) { outcome.issue!.push(...this.language.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductName type.\r\n */\r\nexport interface MedicinalProductNameArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The full product name.\r\n   */\r\n  productName: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Coding words or phrases of the name.\r\n   */\r\n  namePart?: fhir.MedicinalProductNameNamePartArgs[]|undefined;\r\n  /**\r\n   * Country where the name applies.\r\n   */\r\n  countryLanguage?: fhir.MedicinalProductNameCountryLanguageArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * The product's name, including full name and possibly coded parts.\r\n */\r\nexport class MedicinalProductName extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductName';\r\n  /**\r\n   * The full product name.\r\n   */\r\n  public productName: fhir.FhirString|null;\r\n  /**\r\n   * Coding words or phrases of the name.\r\n   */\r\n  public namePart?: fhir.MedicinalProductNameNamePart[];\r\n  /**\r\n   * Country where the name applies.\r\n   */\r\n  public countryLanguage?: fhir.MedicinalProductNameCountryLanguage[];\r\n  /**\r\n   * Default constructor for MedicinalProductName - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductNameArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['productName']) { this.productName = new fhir.FhirString({value: source.productName}); }\r\n    else { this.productName = null; }\r\n    if (source['namePart']) { this.namePart = source.namePart.map((x) => new fhir.MedicinalProductNameNamePart(x)); }\r\n    else { this.namePart = []; }\r\n    if (source['countryLanguage']) { this.countryLanguage = source.countryLanguage.map((x) => new fhir.MedicinalProductNameCountryLanguage(x)); }\r\n    else { this.countryLanguage = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['productName']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property productName:fhir.FhirString fhir: MedicinalProduct.name.productName:string', }));\r\n    }\r\n    if (this[\"productName\"]) { outcome.issue!.push(...this.productName.doModelValidation().issue!); }\r\n    if (this[\"namePart\"]) { this.namePart.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"countryLanguage\"]) { this.countryLanguage.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductManufacturingBusinessOperation type.\r\n */\r\nexport interface MedicinalProductManufacturingBusinessOperationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of manufacturing operation.\r\n   */\r\n  operationType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Regulatory authorization reference number.\r\n   */\r\n  authorisationReferenceNumber?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Regulatory authorization date.\r\n   */\r\n  effectiveDate?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * To indicate if this proces is commercially confidential.\r\n   */\r\n  confidentialityIndicator?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The manufacturer or establishment associated with the process.\r\n   */\r\n  manufacturer?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * A regulator which oversees the operation.\r\n   */\r\n  regulator?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * An operation applied to the product, for manufacturing or adminsitrative purpose.\r\n */\r\nexport class MedicinalProductManufacturingBusinessOperation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductManufacturingBusinessOperation';\r\n  /**\r\n   * The type of manufacturing operation.\r\n   */\r\n  public operationType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Regulatory authorization reference number.\r\n   */\r\n  public authorisationReferenceNumber?: fhir.Identifier|undefined;\r\n  /**\r\n   * Regulatory authorization date.\r\n   */\r\n  public effectiveDate?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * To indicate if this proces is commercially confidential.\r\n   */\r\n  public confidentialityIndicator?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The manufacturer or establishment associated with the process.\r\n   */\r\n  public manufacturer?: fhir.Reference[];\r\n  /**\r\n   * A regulator which oversees the operation.\r\n   */\r\n  public regulator?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for MedicinalProductManufacturingBusinessOperation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductManufacturingBusinessOperationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['operationType']) { this.operationType = new fhir.CodeableConcept(source.operationType); }\r\n    if (source['authorisationReferenceNumber']) { this.authorisationReferenceNumber = new fhir.Identifier(source.authorisationReferenceNumber); }\r\n    if (source['effectiveDate']) { this.effectiveDate = new fhir.FhirDateTime({value: source.effectiveDate}); }\r\n    if (source['confidentialityIndicator']) { this.confidentialityIndicator = new fhir.CodeableConcept(source.confidentialityIndicator); }\r\n    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }\r\n    else { this.manufacturer = []; }\r\n    if (source['regulator']) { this.regulator = new fhir.Reference(source.regulator); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"operationType\"]) { outcome.issue!.push(...this.operationType.doModelValidation().issue!); }\r\n    if (this[\"authorisationReferenceNumber\"]) { outcome.issue!.push(...this.authorisationReferenceNumber.doModelValidation().issue!); }\r\n    if (this[\"effectiveDate\"]) { outcome.issue!.push(...this.effectiveDate.doModelValidation().issue!); }\r\n    if (this[\"confidentialityIndicator\"]) { outcome.issue!.push(...this.confidentialityIndicator.doModelValidation().issue!); }\r\n    if (this[\"manufacturer\"]) { this.manufacturer.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"regulator\"]) { outcome.issue!.push(...this.regulator.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductSpecialDesignation type.\r\n */\r\nexport interface MedicinalProductSpecialDesignationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Identifier for the designation, or procedure number.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * The type of special designation, e.g. orphan drug, minor use.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The intended use of the product, e.g. prevention, treatment.\r\n   */\r\n  intendedUse?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Condition for which the medicinal use applies.\r\n   */\r\n  indication?: fhir.CodeableConcept|fhir.Reference|undefined;\r\n  /**\r\n   * Condition for which the medicinal use applies.\r\n   */\r\n  indicationCodeableConcept?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Condition for which the medicinal use applies.\r\n   */\r\n  indicationReference?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * For example granted, pending, expired or withdrawn.\r\n   */\r\n  status?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Date when the designation was granted.\r\n   */\r\n  date?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * Animal species for which this applies.\r\n   */\r\n  species?: fhir.CodeableConceptArgs|undefined;\r\n}\r\n\r\n/**\r\n * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.\r\n */\r\nexport class MedicinalProductSpecialDesignation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductSpecialDesignation';\r\n  /**\r\n   * Identifier for the designation, or procedure number.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * The type of special designation, e.g. orphan drug, minor use.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The intended use of the product, e.g. prevention, treatment.\r\n   */\r\n  public intendedUse?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Condition for which the medicinal use applies.\r\n   */\r\n  public indication?: (fhir.CodeableConcept|fhir.Reference)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element MedicinalProduct.specialDesignation.indication[x]\r\n   */\r\n  protected static readonly _fts_indicationIsChoice:true = true;\r\n  /**\r\n   * For example granted, pending, expired or withdrawn.\r\n   */\r\n  public status?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Date when the designation was granted.\r\n   */\r\n  public date?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * Animal species for which this applies.\r\n   */\r\n  public species?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Default constructor for MedicinalProductSpecialDesignation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductSpecialDesignationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['intendedUse']) { this.intendedUse = new fhir.CodeableConcept(source.intendedUse); }\r\n    if (source['indication']) { this.indication = source.indication; }\r\n    else if (source['indicationCodeableConcept']) { this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept); }\r\n    else if (source['indicationReference']) { this.indication = new fhir.Reference(source.indicationReference); }\r\n    if (source['status']) { this.status = new fhir.CodeableConcept(source.status); }\r\n    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }\r\n    if (source['species']) { this.species = new fhir.CodeableConcept(source.species); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"intendedUse\"]) { outcome.issue!.push(...this.intendedUse.doModelValidation().issue!); }\r\n    if (this[\"status\"]) { outcome.issue!.push(...this.status.doModelValidation().issue!); }\r\n    if (this[\"date\"]) { outcome.issue!.push(...this.date.doModelValidation().issue!); }\r\n    if (this[\"species\"]) { outcome.issue!.push(...this.species.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProduct type.\r\n */\r\nexport interface MedicinalProductArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"MedicinalProduct\"|undefined;\r\n  /**\r\n   * Business identifier for this product. Could be an MPID.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * Regulatory type, e.g. Investigational or Authorized.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * If this medicine applies to human or veterinary uses.\r\n   */\r\n  domain?: fhir.CodingArgs|undefined;\r\n  /**\r\n   * The dose form for a single part product, or combined form of a multiple part product.\r\n   */\r\n  combinedPharmaceuticalDoseForm?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The legal status of supply of the medicinal product as classified by the regulator.\r\n   */\r\n  legalStatusOfSupply?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.\r\n   */\r\n  additionalMonitoringIndicator?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Whether the Medicinal Product is subject to special measures for regulatory reasons.\r\n   */\r\n  specialMeasures?: fhir.FhirString[]|string[]|undefined;\r\n  /**\r\n   * If authorised for use in children.\r\n   */\r\n  paediatricUseIndicator?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Allows the product to be classified by various systems.\r\n   */\r\n  productClassification?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Marketing status of the medicinal product, in contrast to marketing authorizaton.\r\n   */\r\n  marketingStatus?: fhir.MarketingStatusArgs[]|undefined;\r\n  /**\r\n   * Pharmaceutical aspects of product.\r\n   */\r\n  pharmaceuticalProduct?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Package representation for the product.\r\n   */\r\n  packagedMedicinalProduct?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Supporting documentation, typically for regulatory submission.\r\n   */\r\n  attachedDocument?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).\r\n   */\r\n  masterFile?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * A product specific contact, person (in a role), or an organization.\r\n   */\r\n  contact?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Clinical trials or studies that this product is involved in.\r\n   */\r\n  clinicalTrial?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * The product's name, including full name and possibly coded parts.\r\n   */\r\n  name: fhir.MedicinalProductNameArgs[]|null;\r\n  /**\r\n   * Reference to another product, e.g. for linking authorised to investigational product.\r\n   */\r\n  crossReference?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * An operation applied to the product, for manufacturing or adminsitrative purpose.\r\n   */\r\n  manufacturingBusinessOperation?: fhir.MedicinalProductManufacturingBusinessOperationArgs[]|undefined;\r\n  /**\r\n   * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.\r\n   */\r\n  specialDesignation?: fhir.MedicinalProductSpecialDesignationArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).\r\n */\r\nexport class MedicinalProduct extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProduct';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"MedicinalProduct\";\r\n  /**\r\n   * Business identifier for this product. Could be an MPID.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * Regulatory type, e.g. Investigational or Authorized.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this medicine applies to human or veterinary uses.\r\n   */\r\n  public domain?: fhir.Coding|undefined;\r\n  /**\r\n   * The dose form for a single part product, or combined form of a multiple part product.\r\n   */\r\n  public combinedPharmaceuticalDoseForm?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The legal status of supply of the medicinal product as classified by the regulator.\r\n   */\r\n  public legalStatusOfSupply?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.\r\n   */\r\n  public additionalMonitoringIndicator?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Whether the Medicinal Product is subject to special measures for regulatory reasons.\r\n   */\r\n  public specialMeasures?: fhir.FhirString[];\r\n  /**\r\n   * If authorised for use in children.\r\n   */\r\n  public paediatricUseIndicator?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Allows the product to be classified by various systems.\r\n   */\r\n  public productClassification?: fhir.CodeableConcept[];\r\n  /**\r\n   * Marketing status of the medicinal product, in contrast to marketing authorizaton.\r\n   */\r\n  public marketingStatus?: fhir.MarketingStatus[];\r\n  /**\r\n   * Pharmaceutical aspects of product.\r\n   */\r\n  public pharmaceuticalProduct?: fhir.Reference[];\r\n  /**\r\n   * Package representation for the product.\r\n   */\r\n  public packagedMedicinalProduct?: fhir.Reference[];\r\n  /**\r\n   * Supporting documentation, typically for regulatory submission.\r\n   */\r\n  public attachedDocument?: fhir.Reference[];\r\n  /**\r\n   * A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).\r\n   */\r\n  public masterFile?: fhir.Reference[];\r\n  /**\r\n   * A product specific contact, person (in a role), or an organization.\r\n   */\r\n  public contact?: fhir.Reference[];\r\n  /**\r\n   * Clinical trials or studies that this product is involved in.\r\n   */\r\n  public clinicalTrial?: fhir.Reference[];\r\n  /**\r\n   * The product's name, including full name and possibly coded parts.\r\n   */\r\n  public name: fhir.MedicinalProductName[];\r\n  /**\r\n   * Reference to another product, e.g. for linking authorised to investigational product.\r\n   */\r\n  public crossReference?: fhir.Identifier[];\r\n  /**\r\n   * An operation applied to the product, for manufacturing or adminsitrative purpose.\r\n   */\r\n  public manufacturingBusinessOperation?: fhir.MedicinalProductManufacturingBusinessOperation[];\r\n  /**\r\n   * Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.\r\n   */\r\n  public specialDesignation?: fhir.MedicinalProductSpecialDesignation[];\r\n  /**\r\n   * Default constructor for MedicinalProduct - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'MedicinalProduct';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['domain']) { this.domain = new fhir.Coding(source.domain); }\r\n    if (source['combinedPharmaceuticalDoseForm']) { this.combinedPharmaceuticalDoseForm = new fhir.CodeableConcept(source.combinedPharmaceuticalDoseForm); }\r\n    if (source['legalStatusOfSupply']) { this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply); }\r\n    if (source['additionalMonitoringIndicator']) { this.additionalMonitoringIndicator = new fhir.CodeableConcept(source.additionalMonitoringIndicator); }\r\n    if (source['specialMeasures']) { this.specialMeasures = source.specialMeasures.map((x) => new fhir.FhirString({value: x})); }\r\n    else { this.specialMeasures = []; }\r\n    if (source['paediatricUseIndicator']) { this.paediatricUseIndicator = new fhir.CodeableConcept(source.paediatricUseIndicator); }\r\n    if (source['productClassification']) { this.productClassification = source.productClassification.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.productClassification = []; }\r\n    if (source['marketingStatus']) { this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x)); }\r\n    else { this.marketingStatus = []; }\r\n    if (source['pharmaceuticalProduct']) { this.pharmaceuticalProduct = source.pharmaceuticalProduct.map((x) => new fhir.Reference(x)); }\r\n    else { this.pharmaceuticalProduct = []; }\r\n    if (source['packagedMedicinalProduct']) { this.packagedMedicinalProduct = source.packagedMedicinalProduct.map((x) => new fhir.Reference(x)); }\r\n    else { this.packagedMedicinalProduct = []; }\r\n    if (source['attachedDocument']) { this.attachedDocument = source.attachedDocument.map((x) => new fhir.Reference(x)); }\r\n    else { this.attachedDocument = []; }\r\n    if (source['masterFile']) { this.masterFile = source.masterFile.map((x) => new fhir.Reference(x)); }\r\n    else { this.masterFile = []; }\r\n    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.Reference(x)); }\r\n    else { this.contact = []; }\r\n    if (source['clinicalTrial']) { this.clinicalTrial = source.clinicalTrial.map((x) => new fhir.Reference(x)); }\r\n    else { this.clinicalTrial = []; }\r\n    if (source['name']) { this.name = source.name.map((x) => new fhir.MedicinalProductName(x)); }\r\n    else { this.name = []; }\r\n    if (source['crossReference']) { this.crossReference = source.crossReference.map((x) => new fhir.Identifier(x)); }\r\n    else { this.crossReference = []; }\r\n    if (source['manufacturingBusinessOperation']) { this.manufacturingBusinessOperation = source.manufacturingBusinessOperation.map((x) => new fhir.MedicinalProductManufacturingBusinessOperation(x)); }\r\n    else { this.manufacturingBusinessOperation = []; }\r\n    if (source['specialDesignation']) { this.specialDesignation = source.specialDesignation.map((x) => new fhir.MedicinalProductSpecialDesignation(x)); }\r\n    else { this.specialDesignation = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"MedicinalProduct\" fhir: MedicinalProduct.resourceType:\"MedicinalProduct\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"domain\"]) { outcome.issue!.push(...this.domain.doModelValidation().issue!); }\r\n    if (this[\"combinedPharmaceuticalDoseForm\"]) { outcome.issue!.push(...this.combinedPharmaceuticalDoseForm.doModelValidation().issue!); }\r\n    if (this[\"legalStatusOfSupply\"]) { outcome.issue!.push(...this.legalStatusOfSupply.doModelValidation().issue!); }\r\n    if (this[\"additionalMonitoringIndicator\"]) { outcome.issue!.push(...this.additionalMonitoringIndicator.doModelValidation().issue!); }\r\n    if (this[\"specialMeasures\"]) { this.specialMeasures.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"paediatricUseIndicator\"]) { outcome.issue!.push(...this.paediatricUseIndicator.doModelValidation().issue!); }\r\n    if (this[\"productClassification\"]) { this.productClassification.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"marketingStatus\"]) { this.marketingStatus.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"pharmaceuticalProduct\"]) { this.pharmaceuticalProduct.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"packagedMedicinalProduct\"]) { this.packagedMedicinalProduct.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"attachedDocument\"]) { this.attachedDocument.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"masterFile\"]) { this.masterFile.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"contact\"]) { this.contact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"clinicalTrial\"]) { this.clinicalTrial.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['name']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property name:fhir.MedicinalProductName[] fhir: MedicinalProduct.name:name', }));\r\n    } else if (!Array.isArray(this.name)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property name:fhir.MedicinalProductName[] fhir: MedicinalProduct.name:name', }));\r\n    } else if (this.name.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property name:fhir.MedicinalProductName[] fhir: MedicinalProduct.name:name', }));\r\n    }\r\n    if (this[\"name\"]) { this.name.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"crossReference\"]) { this.crossReference.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"manufacturingBusinessOperation\"]) { this.manufacturingBusinessOperation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"specialDesignation\"]) { this.specialDesignation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirString","fhir.Coding","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.CodeableConcept","fhir.MedicinalProductNameNamePart","fhir.MedicinalProductNameCountryLanguage","fhir.Identifier","fhir.FhirDateTime","fhir.Reference","fhir.MarketingStatus","fhir.MedicinalProductName","fhir.MedicinalProductManufacturingBusinessOperation","fhir.MedicinalProductSpecialDesignation","fhir.DomainResource"],"mappings":"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"}