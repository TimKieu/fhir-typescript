/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ContractPublicationstatusCodings } from '../fhirValueSets/ContractPublicationstatusCodings.js';
import { V3ActConsentDirectiveCodings } from '../fhirValueSets/V3ActConsentDirectiveCodings.js';
import { ConsentContentClassCodings } from '../fhirValueSets/ConsentContentClassCodings.js';
import { ContractSignerTypeCodings } from '../fhirValueSets/ContractSignerTypeCodings.js';
import { ContractStatusCodings } from '../fhirValueSets/ContractStatusCodings.js';
import { ContractLegalstateCodings } from '../fhirValueSets/ContractLegalstateCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { Coding } from './Coding.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirDate } from './FhirDate.js';
import { FhirTime } from './FhirTime.js';
import { FhirString } from './FhirString.js';
import { FhirUri } from './FhirUri.js';
import { Attachment } from './Attachment.js';
import { Quantity } from './Quantity.js';
import { Identifier } from './Identifier.js';
import { Money } from './Money.js';
import { Period } from './Period.js';
import { Timing } from './Timing.js';
import { Annotation } from './Annotation.js';
import { Signature } from './Signature.js';

// <auto-generated/>
/**
 * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
 */
var ContractContentDefinition = /** @class */ (function (_super) {
    __extends(ContractContentDefinition, _super);
    /**
     * Default constructor for ContractContentDefinition - initializes any required elements to null if a value is not provided.
     */
    function ContractContentDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['subType']) {
            _this.subType = new CodeableConcept(source.subType);
        }
        if (source['publisher']) {
            _this.publisher = new Reference(source.publisher);
        }
        if (source['publicationDate']) {
            _this.publicationDate = new FhirDateTime({ value: source.publicationDate });
        }
        if (source['publicationStatus']) {
            _this.publicationStatus = source.publicationStatus;
        }
        else {
            _this.publicationStatus = null;
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for publicationStatus (Contract.contentDefinition.publicationStatus)
     */
    ContractContentDefinition.publicationStatusRequiredCoding = function () {
        return ContractPublicationstatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractContentDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Contract.contentDefinition.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            (_b = outcome.issue).push.apply(_b, this.subType.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_c = outcome.issue).push.apply(_c, this.publisher.doModelValidation().issue);
        }
        if (this["publicationDate"]) {
            (_d = outcome.issue).push.apply(_d, this.publicationDate.doModelValidation().issue);
        }
        if (!this['publicationStatus']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property publicationStatus:ContractPublicationstatusCodeType fhir: Contract.contentDefinition.publicationStatus:code', }));
        }
        if (this["copyright"]) {
            (_e = outcome.issue).push.apply(_e, this.copyright.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractContentDefinition._fts_dataType = 'ContractContentDefinition';
    return ContractContentDefinition;
}(BackboneElement));
/**
 * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
 */
var ContractTermSecurityLabel = /** @class */ (function (_super) {
    __extends(ContractTermSecurityLabel, _super);
    /**
     * Default constructor for ContractTermSecurityLabel - initializes any required elements to null if a value is not provided.
     */
    function ContractTermSecurityLabel(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['number']) {
            _this.number = source.number.map(function (x) { return new FhirUnsignedInt({ value: x }); });
        }
        else {
            _this.number = [];
        }
        if (source['classification']) {
            _this.classification = new Coding(source.classification);
        }
        else {
            _this.classification = null;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new Coding(x); });
        }
        else {
            _this.category = [];
        }
        if (source['control']) {
            _this.control = source.control.map(function (x) { return new Coding(x); });
        }
        else {
            _this.control = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermSecurityLabel.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["number"]) {
            this.number.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['classification']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property classification:fhir.Coding fhir: Contract.term.securityLabel.classification:Coding', }));
        }
        if (this["classification"]) {
            (_a = outcome.issue).push.apply(_a, this.classification.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["control"]) {
            this.control.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermSecurityLabel._fts_dataType = 'ContractTermSecurityLabel';
    return ContractTermSecurityLabel;
}(BackboneElement));
/**
 * Offer Recipient.
 */
var ContractTermOfferParty = /** @class */ (function (_super) {
    __extends(ContractTermOfferParty, _super);
    /**
     * Default constructor for ContractTermOfferParty - initializes any required elements to null if a value is not provided.
     */
    function ContractTermOfferParty(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['reference']) {
            _this.reference = source.reference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reference = [];
        }
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        else {
            _this.role = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermOfferParty.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['reference']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference', }));
        }
        else if (!Array.isArray(this.reference)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference', }));
        }
        else if (this.reference.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference', }));
        }
        if (this["reference"]) {
            this.reference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['role']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property role:fhir.CodeableConcept fhir: Contract.term.offer.party.role:CodeableConcept', }));
        }
        if (this["role"]) {
            (_a = outcome.issue).push.apply(_a, this.role.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermOfferParty._fts_dataType = 'ContractTermOfferParty';
    return ContractTermOfferParty;
}(BackboneElement));
/**
 * Response to offer text.
 */
var ContractTermOfferAnswer = /** @class */ (function (_super) {
    __extends(ContractTermOfferAnswer, _super);
    /**
     * Default constructor for ContractTermOfferAnswer - initializes any required elements to null if a value is not provided.
     */
    function ContractTermOfferAnswer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            _this.value = new FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            _this.value = new FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            _this.value = new FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            _this.value = new FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            _this.value = new FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            _this.value = new FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            _this.value = new Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            _this.value = new Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermOfferAnswer.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: Contract.term.offer.answer.value[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermOfferAnswer._fts_dataType = 'ContractTermOfferAnswer';
    /**
     * Internal flag to properly serialize choice-type element Contract.term.offer.answer.value[x]
     */
    ContractTermOfferAnswer._fts_valueIsChoice = true;
    return ContractTermOfferAnswer;
}(BackboneElement));
/**
 * The matter of concern in the context of this provision of the agrement.
 */
var ContractTermOffer = /** @class */ (function (_super) {
    __extends(ContractTermOffer, _super);
    /**
     * Default constructor for ContractTermOffer - initializes any required elements to null if a value is not provided.
     */
    function ContractTermOffer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['party']) {
            _this.party = source.party.map(function (x) { return new ContractTermOfferParty(x); });
        }
        else {
            _this.party = [];
        }
        if (source['topic']) {
            _this.topic = new Reference(source.topic);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['decision']) {
            _this.decision = new CodeableConcept(source.decision);
        }
        if (source['decisionMode']) {
            _this.decisionMode = source.decisionMode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.decisionMode = [];
        }
        if (source['answer']) {
            _this.answer = source.answer.map(function (x) { return new ContractTermOfferAnswer(x); });
        }
        else {
            _this.answer = [];
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['linkId']) {
            _this.linkId = source.linkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.linkId = [];
        }
        if (source['securityLabelNumber']) {
            _this.securityLabelNumber = source.securityLabelNumber.map(function (x) { return new FhirUnsignedInt({ value: x }); });
        }
        else {
            _this.securityLabelNumber = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for decision (Contract.term.offer.decision)
     */
    ContractTermOffer.decisionExtensibleCoding = function () {
        return V3ActConsentDirectiveCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermOffer.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["party"]) {
            this.party.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["topic"]) {
            (_a = outcome.issue).push.apply(_a, this.topic.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["decision"]) {
            (_c = outcome.issue).push.apply(_c, this.decision.doModelValidation().issue);
        }
        if (this["decisionMode"]) {
            this.decisionMode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["answer"]) {
            this.answer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["text"]) {
            (_d = outcome.issue).push.apply(_d, this.text.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermOffer._fts_dataType = 'ContractTermOffer';
    return ContractTermOffer;
}(BackboneElement));
/**
 * Circumstance of the asset.
 */
var ContractTermAssetContext = /** @class */ (function (_super) {
    __extends(ContractTermAssetContext, _super);
    /**
     * Default constructor for ContractTermAssetContext - initializes any required elements to null if a value is not provided.
     */
    function ContractTermAssetContext(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['reference']) {
            _this.reference = new Reference(source.reference);
        }
        if (source['code']) {
            _this.code = source.code.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.code = [];
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermAssetContext.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["reference"]) {
            (_a = outcome.issue).push.apply(_a, this.reference.doModelValidation().issue);
        }
        if (this["code"]) {
            this.code.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["text"]) {
            (_b = outcome.issue).push.apply(_b, this.text.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermAssetContext._fts_dataType = 'ContractTermAssetContext';
    return ContractTermAssetContext;
}(BackboneElement));
/**
 * Contract Valued Item List.
 */
var ContractTermAssetValuedItem = /** @class */ (function (_super) {
    __extends(ContractTermAssetValuedItem, _super);
    /**
     * Default constructor for ContractTermAssetValuedItem - initializes any required elements to null if a value is not provided.
     */
    function ContractTermAssetValuedItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['entity']) {
            _this.entity = source.entity;
        }
        else if (source['entityCodeableConcept']) {
            _this.entity = new CodeableConcept(source.entityCodeableConcept);
        }
        else if (source['entityReference']) {
            _this.entity = new Reference(source.entityReference);
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['effectiveTime']) {
            _this.effectiveTime = new FhirDateTime({ value: source.effectiveTime });
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['points']) {
            _this.points = new FhirDecimal({ value: source.points });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['payment']) {
            _this.payment = new FhirString({ value: source.payment });
        }
        if (source['paymentDate']) {
            _this.paymentDate = new FhirDateTime({ value: source.paymentDate });
        }
        if (source['responsible']) {
            _this.responsible = new Reference(source.responsible);
        }
        if (source['recipient']) {
            _this.recipient = new Reference(source.recipient);
        }
        if (source['linkId']) {
            _this.linkId = source.linkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.linkId = [];
        }
        if (source['securityLabelNumber']) {
            _this.securityLabelNumber = source.securityLabelNumber.map(function (x) { return new FhirUnsignedInt({ value: x }); });
        }
        else {
            _this.securityLabelNumber = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermAssetValuedItem.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["effectiveTime"]) {
            (_b = outcome.issue).push.apply(_b, this.effectiveTime.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_c = outcome.issue).push.apply(_c, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_d = outcome.issue).push.apply(_d, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_e = outcome.issue).push.apply(_e, this.factor.doModelValidation().issue);
        }
        if (this["points"]) {
            (_f = outcome.issue).push.apply(_f, this.points.doModelValidation().issue);
        }
        if (this["net"]) {
            (_g = outcome.issue).push.apply(_g, this.net.doModelValidation().issue);
        }
        if (this["payment"]) {
            (_h = outcome.issue).push.apply(_h, this.payment.doModelValidation().issue);
        }
        if (this["paymentDate"]) {
            (_j = outcome.issue).push.apply(_j, this.paymentDate.doModelValidation().issue);
        }
        if (this["responsible"]) {
            (_k = outcome.issue).push.apply(_k, this.responsible.doModelValidation().issue);
        }
        if (this["recipient"]) {
            (_l = outcome.issue).push.apply(_l, this.recipient.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermAssetValuedItem._fts_dataType = 'ContractTermAssetValuedItem';
    /**
     * Internal flag to properly serialize choice-type element Contract.term.asset.valuedItem.entity[x]
     */
    ContractTermAssetValuedItem._fts_entityIsChoice = true;
    return ContractTermAssetValuedItem;
}(BackboneElement));
/**
 * Contract Term Asset List.
 */
var ContractTermAsset = /** @class */ (function (_super) {
    __extends(ContractTermAsset, _super);
    /**
     * Default constructor for ContractTermAsset - initializes any required elements to null if a value is not provided.
     */
    function ContractTermAsset(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['scope']) {
            _this.scope = new CodeableConcept(source.scope);
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['typeReference']) {
            _this.typeReference = source.typeReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.typeReference = [];
        }
        if (source['subtype']) {
            _this.subtype = source.subtype.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.subtype = [];
        }
        if (source['relationship']) {
            _this.relationship = new Coding(source.relationship);
        }
        if (source['context']) {
            _this.context = source.context.map(function (x) { return new ContractTermAssetContext(x); });
        }
        else {
            _this.context = [];
        }
        if (source['condition']) {
            _this.condition = new FhirString({ value: source.condition });
        }
        if (source['periodType']) {
            _this.periodType = source.periodType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.periodType = [];
        }
        if (source['period']) {
            _this.period = source.period.map(function (x) { return new Period(x); });
        }
        else {
            _this.period = [];
        }
        if (source['usePeriod']) {
            _this.usePeriod = source.usePeriod.map(function (x) { return new Period(x); });
        }
        else {
            _this.usePeriod = [];
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['linkId']) {
            _this.linkId = source.linkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.linkId = [];
        }
        if (source['answer']) {
            _this.answer = source.answer.map(function (x) { return new ContractTermOfferAnswer(x); });
        }
        else {
            _this.answer = [];
        }
        if (source['securityLabelNumber']) {
            _this.securityLabelNumber = source.securityLabelNumber.map(function (x) { return new FhirUnsignedInt({ value: x }); });
        }
        else {
            _this.securityLabelNumber = [];
        }
        if (source['valuedItem']) {
            _this.valuedItem = source.valuedItem.map(function (x) { return new ContractTermAssetValuedItem(x); });
        }
        else {
            _this.valuedItem = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for relationship (Contract.term.asset.relationship)
     */
    ContractTermAsset.relationshipExtensibleCoding = function () {
        return ConsentContentClassCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermAsset.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["scope"]) {
            (_a = outcome.issue).push.apply(_a, this.scope.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["typeReference"]) {
            this.typeReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subtype"]) {
            this.subtype.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relationship"]) {
            (_b = outcome.issue).push.apply(_b, this.relationship.doModelValidation().issue);
        }
        if (this["context"]) {
            this.context.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["condition"]) {
            (_c = outcome.issue).push.apply(_c, this.condition.doModelValidation().issue);
        }
        if (this["periodType"]) {
            this.periodType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["period"]) {
            this.period.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["usePeriod"]) {
            this.usePeriod.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["text"]) {
            (_d = outcome.issue).push.apply(_d, this.text.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["answer"]) {
            this.answer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["valuedItem"]) {
            this.valuedItem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermAsset._fts_dataType = 'ContractTermAsset';
    return ContractTermAsset;
}(BackboneElement));
/**
 * Entity of the action.
 */
var ContractTermActionSubject = /** @class */ (function (_super) {
    __extends(ContractTermActionSubject, _super);
    /**
     * Default constructor for ContractTermActionSubject - initializes any required elements to null if a value is not provided.
     */
    function ContractTermActionSubject(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['reference']) {
            _this.reference = source.reference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reference = [];
        }
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermActionSubject.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['reference']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference', }));
        }
        else if (!Array.isArray(this.reference)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference', }));
        }
        else if (this.reference.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference', }));
        }
        if (this["reference"]) {
            this.reference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["role"]) {
            (_a = outcome.issue).push.apply(_a, this.role.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermActionSubject._fts_dataType = 'ContractTermActionSubject';
    return ContractTermActionSubject;
}(BackboneElement));
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
var ContractTermAction = /** @class */ (function (_super) {
    __extends(ContractTermAction, _super);
    /**
     * Default constructor for ContractTermAction - initializes any required elements to null if a value is not provided.
     */
    function ContractTermAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['doNotPerform']) {
            _this.doNotPerform = new FhirBoolean({ value: source.doNotPerform });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['subject']) {
            _this.subject = source.subject.map(function (x) { return new ContractTermActionSubject(x); });
        }
        else {
            _this.subject = [];
        }
        if (source['intent']) {
            _this.intent = new CodeableConcept(source.intent);
        }
        else {
            _this.intent = null;
        }
        if (source['linkId']) {
            _this.linkId = source.linkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.linkId = [];
        }
        if (source['status']) {
            _this.status = new CodeableConcept(source.status);
        }
        else {
            _this.status = null;
        }
        if (source['context']) {
            _this.context = new Reference(source.context);
        }
        if (source['contextLinkId']) {
            _this.contextLinkId = source.contextLinkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.contextLinkId = [];
        }
        if (source['occurrence']) {
            _this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            _this.occurrence = new FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            _this.occurrence = new Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            _this.occurrence = new Timing(source.occurrenceTiming);
        }
        if (source['requester']) {
            _this.requester = source.requester.map(function (x) { return new Reference(x); });
        }
        else {
            _this.requester = [];
        }
        if (source['requesterLinkId']) {
            _this.requesterLinkId = source.requesterLinkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.requesterLinkId = [];
        }
        if (source['performerType']) {
            _this.performerType = source.performerType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.performerType = [];
        }
        if (source['performerRole']) {
            _this.performerRole = new CodeableConcept(source.performerRole);
        }
        if (source['performer']) {
            _this.performer = new Reference(source.performer);
        }
        if (source['performerLinkId']) {
            _this.performerLinkId = source.performerLinkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.performerLinkId = [];
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['reason']) {
            _this.reason = source.reason.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.reason = [];
        }
        if (source['reasonLinkId']) {
            _this.reasonLinkId = source.reasonLinkId.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.reasonLinkId = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['securityLabelNumber']) {
            _this.securityLabelNumber = source.securityLabelNumber.map(function (x) { return new FhirUnsignedInt({ value: x }); });
        }
        else {
            _this.securityLabelNumber = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTermAction.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["doNotPerform"]) {
            (_a = outcome.issue).push.apply(_a, this.doNotPerform.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Contract.term.action.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["subject"]) {
            this.subject.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['intent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property intent:fhir.CodeableConcept fhir: Contract.term.action.intent:CodeableConcept', }));
        }
        if (this["intent"]) {
            (_c = outcome.issue).push.apply(_c, this.intent.doModelValidation().issue);
        }
        if (this["linkId"]) {
            this.linkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:fhir.CodeableConcept fhir: Contract.term.action.status:CodeableConcept', }));
        }
        if (this["status"]) {
            (_d = outcome.issue).push.apply(_d, this.status.doModelValidation().issue);
        }
        if (this["context"]) {
            (_e = outcome.issue).push.apply(_e, this.context.doModelValidation().issue);
        }
        if (this["contextLinkId"]) {
            this.contextLinkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["requester"]) {
            this.requester.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["requesterLinkId"]) {
            this.requesterLinkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["performerType"]) {
            this.performerType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["performerRole"]) {
            (_f = outcome.issue).push.apply(_f, this.performerRole.doModelValidation().issue);
        }
        if (this["performer"]) {
            (_g = outcome.issue).push.apply(_g, this.performer.doModelValidation().issue);
        }
        if (this["performerLinkId"]) {
            this.performerLinkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reason"]) {
            this.reason.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonLinkId"]) {
            this.reasonLinkId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTermAction._fts_dataType = 'ContractTermAction';
    /**
     * Internal flag to properly serialize choice-type element Contract.term.action.occurrence[x]
     */
    ContractTermAction._fts_occurrenceIsChoice = true;
    return ContractTermAction;
}(BackboneElement));
/**
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
var ContractTerm = /** @class */ (function (_super) {
    __extends(ContractTerm$1, _super);
    /**
     * Default constructor for ContractTerm - initializes any required elements to null if a value is not provided.
     */
    function ContractTerm$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['issued']) {
            _this.issued = new FhirDateTime({ value: source.issued });
        }
        if (source['applies']) {
            _this.applies = new Period(source.applies);
        }
        if (source['topic']) {
            _this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            _this.topic = new CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            _this.topic = new Reference(source.topicReference);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['subType']) {
            _this.subType = new CodeableConcept(source.subType);
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['securityLabel']) {
            _this.securityLabel = source.securityLabel.map(function (x) { return new ContractTermSecurityLabel(x); });
        }
        else {
            _this.securityLabel = [];
        }
        if (source['offer']) {
            _this.offer = new ContractTermOffer(source.offer);
        }
        else {
            _this.offer = null;
        }
        if (source['asset']) {
            _this.asset = source.asset.map(function (x) { return new ContractTermAsset(x); });
        }
        else {
            _this.asset = [];
        }
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new ContractTermAction(x); });
        }
        else {
            _this.action = [];
        }
        if (source['group']) {
            _this.group = source.group.map(function (x) { return new ContractTerm(x); });
        }
        else {
            _this.group = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractTerm$1.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["issued"]) {
            (_b = outcome.issue).push.apply(_b, this.issued.doModelValidation().issue);
        }
        if (this["applies"]) {
            (_c = outcome.issue).push.apply(_c, this.applies.doModelValidation().issue);
        }
        if (this["type"]) {
            (_d = outcome.issue).push.apply(_d, this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            (_e = outcome.issue).push.apply(_e, this.subType.doModelValidation().issue);
        }
        if (this["text"]) {
            (_f = outcome.issue).push.apply(_f, this.text.doModelValidation().issue);
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['offer']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property offer:fhir.ContractTermOffer fhir: Contract.term.offer:offer', }));
        }
        if (this["offer"]) {
            (_g = outcome.issue).push.apply(_g, this.offer.doModelValidation().issue);
        }
        if (this["asset"]) {
            this.asset.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["group"]) {
            this.group.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractTerm$1._fts_dataType = 'ContractTerm';
    /**
     * Internal flag to properly serialize choice-type element Contract.term.topic[x]
     */
    ContractTerm$1._fts_topicIsChoice = true;
    return ContractTerm$1;
}(BackboneElement));
/**
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
 * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
var ContractSigner = /** @class */ (function (_super) {
    __extends(ContractSigner, _super);
    /**
     * Default constructor for ContractSigner - initializes any required elements to null if a value is not provided.
     */
    function ContractSigner(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new Coding(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['party']) {
            _this.party = new Reference(source.party);
        }
        else {
            _this.party = null;
        }
        if (source['signature']) {
            _this.signature = source.signature.map(function (x) { return new Signature(x); });
        }
        else {
            _this.signature = [];
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for type (Contract.signer.type)
     */
    ContractSigner.typePreferredCoding = function () {
        return ContractSignerTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractSigner.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.Coding fhir: Contract.signer.type:Coding', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['party']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property party:fhir.Reference fhir: Contract.signer.party:Reference', }));
        }
        if (this["party"]) {
            (_b = outcome.issue).push.apply(_b, this.party.doModelValidation().issue);
        }
        if (!this['signature']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature', }));
        }
        else if (!Array.isArray(this.signature)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature', }));
        }
        else if (this.signature.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature', }));
        }
        if (this["signature"]) {
            this.signature.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractSigner._fts_dataType = 'ContractSigner';
    return ContractSigner;
}(BackboneElement));
/**
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
var ContractFriendly = /** @class */ (function (_super) {
    __extends(ContractFriendly, _super);
    /**
     * Default constructor for ContractFriendly - initializes any required elements to null if a value is not provided.
     */
    function ContractFriendly(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['content']) {
            _this.content = source.content;
        }
        else if (source['contentAttachment']) {
            _this.content = new Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            _this.content = new Reference(source.contentReference);
        }
        else {
            _this.content = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractFriendly.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content: fhir: Contract.friendly.content[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractFriendly._fts_dataType = 'ContractFriendly';
    /**
     * Internal flag to properly serialize choice-type element Contract.friendly.content[x]
     */
    ContractFriendly._fts_contentIsChoice = true;
    return ContractFriendly;
}(BackboneElement));
/**
 * List of Legal expressions or representations of this Contract.
 */
var ContractLegal = /** @class */ (function (_super) {
    __extends(ContractLegal, _super);
    /**
     * Default constructor for ContractLegal - initializes any required elements to null if a value is not provided.
     */
    function ContractLegal(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['content']) {
            _this.content = source.content;
        }
        else if (source['contentAttachment']) {
            _this.content = new Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            _this.content = new Reference(source.contentReference);
        }
        else {
            _this.content = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractLegal.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content: fhir: Contract.legal.content[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractLegal._fts_dataType = 'ContractLegal';
    /**
     * Internal flag to properly serialize choice-type element Contract.legal.content[x]
     */
    ContractLegal._fts_contentIsChoice = true;
    return ContractLegal;
}(BackboneElement));
/**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
var ContractRule = /** @class */ (function (_super) {
    __extends(ContractRule, _super);
    /**
     * Default constructor for ContractRule - initializes any required elements to null if a value is not provided.
     */
    function ContractRule(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['content']) {
            _this.content = source.content;
        }
        else if (source['contentAttachment']) {
            _this.content = new Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            _this.content = new Reference(source.contentReference);
        }
        else {
            _this.content = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ContractRule.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content: fhir: Contract.rule.content[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ContractRule._fts_dataType = 'ContractRule';
    /**
     * Internal flag to properly serialize choice-type element Contract.rule.content[x]
     */
    ContractRule._fts_contentIsChoice = true;
    return ContractRule;
}(BackboneElement));
/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
var Contract = /** @class */ (function (_super) {
    __extends(Contract, _super);
    /**
     * Default constructor for Contract - initializes any required elements to null if a value is not provided.
     */
    function Contract(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Contract';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['legalState']) {
            _this.legalState = new CodeableConcept(source.legalState);
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = new Reference(source.instantiatesCanonical);
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = new FhirUri({ value: source.instantiatesUri });
        }
        if (source['contentDerivative']) {
            _this.contentDerivative = new CodeableConcept(source.contentDerivative);
        }
        if (source['issued']) {
            _this.issued = new FhirDateTime({ value: source.issued });
        }
        if (source['applies']) {
            _this.applies = new Period(source.applies);
        }
        if (source['expirationType']) {
            _this.expirationType = new CodeableConcept(source.expirationType);
        }
        if (source['subject']) {
            _this.subject = source.subject.map(function (x) { return new Reference(x); });
        }
        else {
            _this.subject = [];
        }
        if (source['authority']) {
            _this.authority = source.authority.map(function (x) { return new Reference(x); });
        }
        else {
            _this.authority = [];
        }
        if (source['domain']) {
            _this.domain = source.domain.map(function (x) { return new Reference(x); });
        }
        else {
            _this.domain = [];
        }
        if (source['site']) {
            _this.site = source.site.map(function (x) { return new Reference(x); });
        }
        else {
            _this.site = [];
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['subtitle']) {
            _this.subtitle = new FhirString({ value: source.subtitle });
        }
        if (source['alias']) {
            _this.alias = source.alias.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.alias = [];
        }
        if (source['author']) {
            _this.author = new Reference(source.author);
        }
        if (source['scope']) {
            _this.scope = new CodeableConcept(source.scope);
        }
        if (source['topic']) {
            _this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            _this.topic = new CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            _this.topic = new Reference(source.topicReference);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['subType']) {
            _this.subType = source.subType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.subType = [];
        }
        if (source['contentDefinition']) {
            _this.contentDefinition = new ContractContentDefinition(source.contentDefinition);
        }
        if (source['term']) {
            _this.term = source.term.map(function (x) { return new ContractTerm(x); });
        }
        else {
            _this.term = [];
        }
        if (source['supportingInfo']) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingInfo = [];
        }
        if (source['relevantHistory']) {
            _this.relevantHistory = source.relevantHistory.map(function (x) { return new Reference(x); });
        }
        else {
            _this.relevantHistory = [];
        }
        if (source['signer']) {
            _this.signer = source.signer.map(function (x) { return new ContractSigner(x); });
        }
        else {
            _this.signer = [];
        }
        if (source['friendly']) {
            _this.friendly = source.friendly.map(function (x) { return new ContractFriendly(x); });
        }
        else {
            _this.friendly = [];
        }
        if (source['legal']) {
            _this.legal = source.legal.map(function (x) { return new ContractLegal(x); });
        }
        else {
            _this.legal = [];
        }
        if (source['rule']) {
            _this.rule = source.rule.map(function (x) { return new ContractRule(x); });
        }
        else {
            _this.rule = [];
        }
        if (source['legallyBinding']) {
            _this.legallyBinding = source.legallyBinding;
        }
        else if (source['legallyBindingAttachment']) {
            _this.legallyBinding = new Attachment(source.legallyBindingAttachment);
        }
        else if (source['legallyBindingReference']) {
            _this.legallyBinding = new Reference(source.legallyBindingReference);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Contract.status)
     */
    Contract.statusRequiredCoding = function () {
        return ContractStatusCodings;
    };
    /**
     * Extensible-bound Value Set for legalState (Contract.legalState)
     */
    Contract.legalStateExtensibleCoding = function () {
        return ContractLegalstateCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Contract.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Contract" fhir: Contract.resourceType:"Contract"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["legalState"]) {
            (_c = outcome.issue).push.apply(_c, this.legalState.doModelValidation().issue);
        }
        if (this["instantiatesCanonical"]) {
            (_d = outcome.issue).push.apply(_d, this.instantiatesCanonical.doModelValidation().issue);
        }
        if (this["instantiatesUri"]) {
            (_e = outcome.issue).push.apply(_e, this.instantiatesUri.doModelValidation().issue);
        }
        if (this["contentDerivative"]) {
            (_f = outcome.issue).push.apply(_f, this.contentDerivative.doModelValidation().issue);
        }
        if (this["issued"]) {
            (_g = outcome.issue).push.apply(_g, this.issued.doModelValidation().issue);
        }
        if (this["applies"]) {
            (_h = outcome.issue).push.apply(_h, this.applies.doModelValidation().issue);
        }
        if (this["expirationType"]) {
            (_j = outcome.issue).push.apply(_j, this.expirationType.doModelValidation().issue);
        }
        if (this["subject"]) {
            this.subject.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["authority"]) {
            this.authority.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["domain"]) {
            this.domain.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["site"]) {
            this.site.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            (_k = outcome.issue).push.apply(_k, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_l = outcome.issue).push.apply(_l, this.title.doModelValidation().issue);
        }
        if (this["subtitle"]) {
            (_m = outcome.issue).push.apply(_m, this.subtitle.doModelValidation().issue);
        }
        if (this["alias"]) {
            this.alias.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["author"]) {
            (_o = outcome.issue).push.apply(_o, this.author.doModelValidation().issue);
        }
        if (this["scope"]) {
            (_p = outcome.issue).push.apply(_p, this.scope.doModelValidation().issue);
        }
        if (this["type"]) {
            (_q = outcome.issue).push.apply(_q, this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            this.subType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["contentDefinition"]) {
            (_r = outcome.issue).push.apply(_r, this.contentDefinition.doModelValidation().issue);
        }
        if (this["term"]) {
            this.term.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["signer"]) {
            this.signer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["friendly"]) {
            this.friendly.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["legal"]) {
            this.legal.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["rule"]) {
            this.rule.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Contract._fts_dataType = 'Contract';
    /**
     * Internal flag to properly serialize choice-type element Contract.topic[x]
     */
    Contract._fts_topicIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element Contract.legallyBinding[x]
     */
    Contract._fts_legallyBindingIsChoice = true;
    return Contract;
}(DomainResource));

export { Contract, ContractContentDefinition, ContractFriendly, ContractLegal, ContractRule, ContractSigner, ContractTerm, ContractTermAction, ContractTermActionSubject, ContractTermAsset, ContractTermAssetContext, ContractTermAssetValuedItem, ContractTermOffer, ContractTermOfferAnswer, ContractTermOfferParty, ContractTermSecurityLabel };
//# sourceMappingURL=Contract.js.map
