// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Contract
import * as fhir from '../fhir.js';
// @ts-ignore
import { ContractPublicationstatusVsValidation } from '../fhirValueSets/ContractPublicationstatusVsValidation.js';
// @ts-ignore
import { ContractStatusVsValidation } from '../fhirValueSets/ContractStatusVsValidation.js';
/**
 * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
 */
export class ContractContentDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ContractContentDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['publisher']) {
            this.publisher = new fhir.Reference(source.publisher);
        }
        if (source['publicationDate']) {
            this.publicationDate = new fhir.FhirDateTime({ value: source.publicationDate });
        }
        if (source['_publicationDate']) {
            if (this.publicationDate) {
                this.publicationDate.addExtendedProperties(source._publicationDate);
            }
            else {
                this.publicationDate = new fhir.FhirDateTime(source._publicationDate);
            }
        }
        if (source['publicationStatus']) {
            this.publicationStatus = new fhir.FhirCode({ value: source.publicationStatus });
        }
        else {
            this.publicationStatus = null;
        }
        if (source['_publicationStatus']) {
            if (this.publicationStatus) {
                this.publicationStatus.addExtendedProperties(source._publicationStatus);
            }
            else {
                this.publicationStatus = new fhir.FhirCode(source._publicationStatus);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.contentDefinition';
        }
        this.vReqS('type', expression);
        this.vOptS('subType', expression);
        this.vOptS('publisher', expression);
        this.vOptS('publicationDate', expression);
        this.vReqSV('publicationStatus', expression, 'ContractPublicationstatus', ContractPublicationstatusVsValidation, 'r');
        this.vOptS('copyright', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractContentDefinition._fts_dataType = 'ContractContentDefinition';
/**
 * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
 */
export class ContractTermSecurityLabel extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermSecurityLabel - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number']) {
            this.number = source.number.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.number = [];
        }
        if (source['_number']) {
            source._number.forEach((x, i) => {
                if (this.number.length >= i) {
                    if (x) {
                        this.number[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.number.push(new fhir.FhirUnsignedInt(x));
                    }
                }
            });
        }
        if (source['classification']) {
            this.classification = new fhir.Coding(source.classification);
        }
        else {
            this.classification = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.Coding(x));
        }
        else {
            this.category = [];
        }
        if (source['control']) {
            this.control = source.control.map((x) => new fhir.Coding(x));
        }
        else {
            this.control = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.securityLabel';
        }
        this.vOptA('number', expression);
        this.vReqS('classification', expression);
        this.vOptA('category', expression);
        this.vOptA('control', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermSecurityLabel._fts_dataType = 'ContractTermSecurityLabel';
/**
 * Offer Recipient.
 */
export class ContractTermOfferParty extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOfferParty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = [];
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.offer.party';
        }
        this.vReqA('reference', expression);
        this.vReqS('role', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermOfferParty._fts_dataType = 'ContractTermOfferParty';
/**
 * Response to offer text.
 */
export class ContractTermOfferAnswer extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOfferAnswer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.offer.answer';
        }
        this.vReqS('value', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermOfferAnswer._fts_dataType = 'ContractTermOfferAnswer';
/**
 * Internal flag to properly serialize choice-type element Contract.term.offer.answer.value[x]
 */
ContractTermOfferAnswer._fts_valueIsChoice = true;
/**
 * The matter of concern in the context of this provision of the agrement.
 */
export class ContractTermOffer extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOffer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['party']) {
            this.party = source.party.map((x) => new fhir.ContractTermOfferParty(x));
        }
        else {
            this.party = [];
        }
        if (source['topic']) {
            this.topic = new fhir.Reference(source.topic);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['decision']) {
            this.decision = new fhir.CodeableConcept(source.decision);
        }
        if (source['decisionMode']) {
            this.decisionMode = source.decisionMode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.decisionMode = [];
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.ContractTermOfferAnswer(x));
        }
        else {
            this.answer = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['_linkId']) {
            source._linkId.forEach((x, i) => {
                if (this.linkId.length >= i) {
                    if (x) {
                        this.linkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.linkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
        if (source['_securityLabelNumber']) {
            source._securityLabelNumber.forEach((x, i) => {
                if (this.securityLabelNumber.length >= i) {
                    if (x) {
                        this.securityLabelNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.securityLabelNumber.push(new fhir.FhirUnsignedInt(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.offer';
        }
        this.vOptA('identifier', expression);
        this.vOptA('party', expression);
        this.vOptS('topic', expression);
        this.vOptS('type', expression);
        this.vOptS('decision', expression);
        this.vOptA('decisionMode', expression);
        this.vOptA('answer', expression);
        this.vOptS('text', expression);
        this.vOptA('linkId', expression);
        this.vOptA('securityLabelNumber', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermOffer._fts_dataType = 'ContractTermOffer';
/**
 * Circumstance of the asset.
 */
export class ContractTermAssetContext extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAssetContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.asset.context';
        }
        this.vOptS('reference', expression);
        this.vOptA('code', expression);
        this.vOptS('text', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAssetContext._fts_dataType = 'ContractTermAssetContext';
/**
 * Contract Valued Item List.
 */
export class ContractTermAssetValuedItem extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAssetValuedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = source.entity;
        }
        else if (source['entityCodeableConcept']) {
            this.entity = new fhir.CodeableConcept(source.entityCodeableConcept);
        }
        else if (source['entityReference']) {
            this.entity = new fhir.Reference(source.entityReference);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['effectiveTime']) {
            this.effectiveTime = new fhir.FhirDateTime({ value: source.effectiveTime });
        }
        if (source['_effectiveTime']) {
            if (this.effectiveTime) {
                this.effectiveTime.addExtendedProperties(source._effectiveTime);
            }
            else {
                this.effectiveTime = new fhir.FhirDateTime(source._effectiveTime);
            }
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['_factor']) {
            if (this.factor) {
                this.factor.addExtendedProperties(source._factor);
            }
            else {
                this.factor = new fhir.FhirDecimal(source._factor);
            }
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['_points']) {
            if (this.points) {
                this.points.addExtendedProperties(source._points);
            }
            else {
                this.points = new fhir.FhirDecimal(source._points);
            }
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['payment']) {
            this.payment = new fhir.FhirString({ value: source.payment });
        }
        if (source['_payment']) {
            if (this.payment) {
                this.payment.addExtendedProperties(source._payment);
            }
            else {
                this.payment = new fhir.FhirString(source._payment);
            }
        }
        if (source['paymentDate']) {
            this.paymentDate = new fhir.FhirDateTime({ value: source.paymentDate });
        }
        if (source['_paymentDate']) {
            if (this.paymentDate) {
                this.paymentDate.addExtendedProperties(source._paymentDate);
            }
            else {
                this.paymentDate = new fhir.FhirDateTime(source._paymentDate);
            }
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['recipient']) {
            this.recipient = new fhir.Reference(source.recipient);
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['_linkId']) {
            source._linkId.forEach((x, i) => {
                if (this.linkId.length >= i) {
                    if (x) {
                        this.linkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.linkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
        if (source['_securityLabelNumber']) {
            source._securityLabelNumber.forEach((x, i) => {
                if (this.securityLabelNumber.length >= i) {
                    if (x) {
                        this.securityLabelNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.securityLabelNumber.push(new fhir.FhirUnsignedInt(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.asset.valuedItem';
        }
        this.vOptS('entity', expression);
        this.vOptS('identifier', expression);
        this.vOptS('effectiveTime', expression);
        this.vOptS('quantity', expression);
        this.vOptS('unitPrice', expression);
        this.vOptS('factor', expression);
        this.vOptS('points', expression);
        this.vOptS('net', expression);
        this.vOptS('payment', expression);
        this.vOptS('paymentDate', expression);
        this.vOptS('responsible', expression);
        this.vOptS('recipient', expression);
        this.vOptA('linkId', expression);
        this.vOptA('securityLabelNumber', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAssetValuedItem._fts_dataType = 'ContractTermAssetValuedItem';
/**
 * Internal flag to properly serialize choice-type element Contract.term.asset.valuedItem.entity[x]
 */
ContractTermAssetValuedItem._fts_entityIsChoice = true;
/**
 * Contract Term Asset List.
 */
export class ContractTermAsset extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAsset - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['typeReference']) {
            this.typeReference = source.typeReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.typeReference = [];
        }
        if (source['subtype']) {
            this.subtype = source.subtype.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subtype = [];
        }
        if (source['relationship']) {
            this.relationship = new fhir.Coding(source.relationship);
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.ContractTermAssetContext(x));
        }
        else {
            this.context = [];
        }
        if (source['condition']) {
            this.condition = new fhir.FhirString({ value: source.condition });
        }
        if (source['_condition']) {
            if (this.condition) {
                this.condition.addExtendedProperties(source._condition);
            }
            else {
                this.condition = new fhir.FhirString(source._condition);
            }
        }
        if (source['periodType']) {
            this.periodType = source.periodType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.periodType = [];
        }
        if (source['period']) {
            this.period = source.period.map((x) => new fhir.Period(x));
        }
        else {
            this.period = [];
        }
        if (source['usePeriod']) {
            this.usePeriod = source.usePeriod.map((x) => new fhir.Period(x));
        }
        else {
            this.usePeriod = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['_linkId']) {
            source._linkId.forEach((x, i) => {
                if (this.linkId.length >= i) {
                    if (x) {
                        this.linkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.linkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.ContractTermOfferAnswer(x));
        }
        else {
            this.answer = [];
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
        if (source['_securityLabelNumber']) {
            source._securityLabelNumber.forEach((x, i) => {
                if (this.securityLabelNumber.length >= i) {
                    if (x) {
                        this.securityLabelNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.securityLabelNumber.push(new fhir.FhirUnsignedInt(x));
                    }
                }
            });
        }
        if (source['valuedItem']) {
            this.valuedItem = source.valuedItem.map((x) => new fhir.ContractTermAssetValuedItem(x));
        }
        else {
            this.valuedItem = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.asset';
        }
        this.vOptS('scope', expression);
        this.vOptA('type', expression);
        this.vOptA('typeReference', expression);
        this.vOptA('subtype', expression);
        this.vOptS('relationship', expression);
        this.vOptA('context', expression);
        this.vOptS('condition', expression);
        this.vOptA('periodType', expression);
        this.vOptA('period', expression);
        this.vOptA('usePeriod', expression);
        this.vOptS('text', expression);
        this.vOptA('linkId', expression);
        this.vOptA('answer', expression);
        this.vOptA('securityLabelNumber', expression);
        this.vOptA('valuedItem', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAsset._fts_dataType = 'ContractTermAsset';
/**
 * Entity of the action.
 */
export class ContractTermActionSubject extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermActionSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = [];
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.action.subject';
        }
        this.vReqA('reference', expression);
        this.vOptS('role', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermActionSubject._fts_dataType = 'ContractTermActionSubject';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export class ContractTermAction extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['_doNotPerform']) {
            if (this.doNotPerform) {
                this.doNotPerform.addExtendedProperties(source._doNotPerform);
            }
            else {
                this.doNotPerform = new fhir.FhirBoolean(source._doNotPerform);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.ContractTermActionSubject(x));
        }
        else {
            this.subject = [];
        }
        if (source['intent']) {
            this.intent = new fhir.CodeableConcept(source.intent);
        }
        else {
            this.intent = null;
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['_linkId']) {
            source._linkId.forEach((x, i) => {
                if (this.linkId.length >= i) {
                    if (x) {
                        this.linkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.linkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        else {
            this.status = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['contextLinkId']) {
            this.contextLinkId = source.contextLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.contextLinkId = [];
        }
        if (source['_contextLinkId']) {
            source._contextLinkId.forEach((x, i) => {
                if (this.contextLinkId.length >= i) {
                    if (x) {
                        this.contextLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.contextLinkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['requester']) {
            this.requester = source.requester.map((x) => new fhir.Reference(x));
        }
        else {
            this.requester = [];
        }
        if (source['requesterLinkId']) {
            this.requesterLinkId = source.requesterLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.requesterLinkId = [];
        }
        if (source['_requesterLinkId']) {
            source._requesterLinkId.forEach((x, i) => {
                if (this.requesterLinkId.length >= i) {
                    if (x) {
                        this.requesterLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.requesterLinkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['performerType']) {
            this.performerType = source.performerType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.performerType = [];
        }
        if (source['performerRole']) {
            this.performerRole = new fhir.CodeableConcept(source.performerRole);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['performerLinkId']) {
            this.performerLinkId = source.performerLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.performerLinkId = [];
        }
        if (source['_performerLinkId']) {
            source._performerLinkId.forEach((x, i) => {
                if (this.performerLinkId.length >= i) {
                    if (x) {
                        this.performerLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.performerLinkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.reason = [];
        }
        if (source['_reason']) {
            source._reason.forEach((x, i) => {
                if (this.reason.length >= i) {
                    if (x) {
                        this.reason[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.reason.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['reasonLinkId']) {
            this.reasonLinkId = source.reasonLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.reasonLinkId = [];
        }
        if (source['_reasonLinkId']) {
            source._reasonLinkId.forEach((x, i) => {
                if (this.reasonLinkId.length >= i) {
                    if (x) {
                        this.reasonLinkId[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.reasonLinkId.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
        if (source['_securityLabelNumber']) {
            source._securityLabelNumber.forEach((x, i) => {
                if (this.securityLabelNumber.length >= i) {
                    if (x) {
                        this.securityLabelNumber[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.securityLabelNumber.push(new fhir.FhirUnsignedInt(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term.action';
        }
        this.vOptS('doNotPerform', expression);
        this.vReqS('type', expression);
        this.vOptA('subject', expression);
        this.vReqS('intent', expression);
        this.vOptA('linkId', expression);
        this.vReqS('status', expression);
        this.vOptS('context', expression);
        this.vOptA('contextLinkId', expression);
        this.vOptS('occurrence', expression);
        this.vOptA('requester', expression);
        this.vOptA('requesterLinkId', expression);
        this.vOptA('performerType', expression);
        this.vOptS('performerRole', expression);
        this.vOptS('performer', expression);
        this.vOptA('performerLinkId', expression);
        this.vOptA('reasonCode', expression);
        this.vOptA('reasonReference', expression);
        this.vOptA('reason', expression);
        this.vOptA('reasonLinkId', expression);
        this.vOptA('note', expression);
        this.vOptA('securityLabelNumber', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAction._fts_dataType = 'ContractTermAction';
/**
 * Internal flag to properly serialize choice-type element Contract.term.action.occurrence[x]
 */
ContractTermAction._fts_occurrenceIsChoice = true;
/**
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
export class ContractTerm extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTerm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirDateTime(source._issued);
            }
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['topic']) {
            this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            this.topic = new fhir.CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            this.topic = new fhir.Reference(source.topicReference);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.ContractTermSecurityLabel(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['offer']) {
            this.offer = new fhir.ContractTermOffer(source.offer);
        }
        else {
            this.offer = null;
        }
        if (source['asset']) {
            this.asset = source.asset.map((x) => new fhir.ContractTermAsset(x));
        }
        else {
            this.asset = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.ContractTermAction(x));
        }
        else {
            this.action = [];
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.ContractTerm(x));
        }
        else {
            this.group = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.term';
        }
        this.vOptS('identifier', expression);
        this.vOptS('issued', expression);
        this.vOptS('applies', expression);
        this.vOptS('topic', expression);
        this.vOptS('type', expression);
        this.vOptS('subType', expression);
        this.vOptS('text', expression);
        this.vOptA('securityLabel', expression);
        this.vReqS('offer', expression);
        this.vOptA('asset', expression);
        this.vOptA('action', expression);
        this.vOptA('group', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTerm._fts_dataType = 'ContractTerm';
/**
 * Internal flag to properly serialize choice-type element Contract.term.topic[x]
 */
ContractTerm._fts_topicIsChoice = true;
/**
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
 * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
export class ContractSigner extends fhir.BackboneElement {
    /**
     * Default constructor for ContractSigner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
        else {
            this.party = null;
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.signer';
        }
        this.vReqS('type', expression);
        this.vReqS('party', expression);
        this.vReqA('signature', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractSigner._fts_dataType = 'ContractSigner';
/**
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
export class ContractFriendly extends fhir.BackboneElement {
    /**
     * Default constructor for ContractFriendly - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.friendly';
        }
        this.vReqS('content', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractFriendly._fts_dataType = 'ContractFriendly';
/**
 * Internal flag to properly serialize choice-type element Contract.friendly.content[x]
 */
ContractFriendly._fts_contentIsChoice = true;
/**
 * List of Legal expressions or representations of this Contract.
 */
export class ContractLegal extends fhir.BackboneElement {
    /**
     * Default constructor for ContractLegal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.legal';
        }
        this.vReqS('content', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractLegal._fts_dataType = 'ContractLegal';
/**
 * Internal flag to properly serialize choice-type element Contract.legal.content[x]
 */
ContractLegal._fts_contentIsChoice = true;
/**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
export class ContractRule extends fhir.BackboneElement {
    /**
     * Default constructor for ContractRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract.rule';
        }
        this.vReqS('content', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractRule._fts_dataType = 'ContractRule';
/**
 * Internal flag to properly serialize choice-type element Contract.rule.content[x]
 */
ContractRule._fts_contentIsChoice = true;
/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
export class Contract extends fhir.DomainResource {
    /**
     * Default constructor for Contract - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Contract';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['legalState']) {
            this.legalState = new fhir.CodeableConcept(source.legalState);
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = new fhir.Reference(source.instantiatesCanonical);
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = new fhir.FhirUri({ value: source.instantiatesUri });
        }
        if (source['_instantiatesUri']) {
            if (this.instantiatesUri) {
                this.instantiatesUri.addExtendedProperties(source._instantiatesUri);
            }
            else {
                this.instantiatesUri = new fhir.FhirUri(source._instantiatesUri);
            }
        }
        if (source['contentDerivative']) {
            this.contentDerivative = new fhir.CodeableConcept(source.contentDerivative);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirDateTime(source._issued);
            }
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['expirationType']) {
            this.expirationType = new fhir.CodeableConcept(source.expirationType);
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['authority']) {
            this.authority = source.authority.map((x) => new fhir.Reference(x));
        }
        else {
            this.authority = [];
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.Reference(x));
        }
        else {
            this.domain = [];
        }
        if (source['site']) {
            this.site = source.site.map((x) => new fhir.Reference(x));
        }
        else {
            this.site = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['_subtitle']) {
            if (this.subtitle) {
                this.subtitle.addExtendedProperties(source._subtitle);
            }
            else {
                this.subtitle = new fhir.FhirString(source._subtitle);
            }
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        if (source['topic']) {
            this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            this.topic = new fhir.CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            this.topic = new fhir.Reference(source.topicReference);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = source.subType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subType = [];
        }
        if (source['contentDefinition']) {
            this.contentDefinition = new fhir.ContractContentDefinition(source.contentDefinition);
        }
        if (source['term']) {
            this.term = source.term.map((x) => new fhir.ContractTerm(x));
        }
        else {
            this.term = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.relevantHistory = [];
        }
        if (source['signer']) {
            this.signer = source.signer.map((x) => new fhir.ContractSigner(x));
        }
        else {
            this.signer = [];
        }
        if (source['friendly']) {
            this.friendly = source.friendly.map((x) => new fhir.ContractFriendly(x));
        }
        else {
            this.friendly = [];
        }
        if (source['legal']) {
            this.legal = source.legal.map((x) => new fhir.ContractLegal(x));
        }
        else {
            this.legal = [];
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.ContractRule(x));
        }
        else {
            this.rule = [];
        }
        if (source['legallyBinding']) {
            this.legallyBinding = source.legallyBinding;
        }
        else if (source['legallyBindingAttachment']) {
            this.legallyBinding = new fhir.Attachment(source.legallyBindingAttachment);
        }
        else if (source['legallyBindingReference']) {
            this.legallyBinding = new fhir.Reference(source.legallyBindingReference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Contract';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vOptS('url', expression);
        this.vOptS('version', expression);
        this.vOptSV('status', expression, 'ContractStatus', ContractStatusVsValidation, 'r');
        this.vOptS('legalState', expression);
        this.vOptS('instantiatesCanonical', expression);
        this.vOptS('instantiatesUri', expression);
        this.vOptS('contentDerivative', expression);
        this.vOptS('issued', expression);
        this.vOptS('applies', expression);
        this.vOptS('expirationType', expression);
        this.vOptA('subject', expression);
        this.vOptA('authority', expression);
        this.vOptA('domain', expression);
        this.vOptA('site', expression);
        this.vOptS('name', expression);
        this.vOptS('title', expression);
        this.vOptS('subtitle', expression);
        this.vOptA('alias', expression);
        this.vOptS('author', expression);
        this.vOptS('scope', expression);
        this.vOptS('topic', expression);
        this.vOptS('type', expression);
        this.vOptA('subType', expression);
        this.vOptS('contentDefinition', expression);
        this.vOptA('term', expression);
        this.vOptA('supportingInfo', expression);
        this.vOptA('relevantHistory', expression);
        this.vOptA('signer', expression);
        this.vOptA('friendly', expression);
        this.vOptA('legal', expression);
        this.vOptA('rule', expression);
        this.vOptS('legallyBinding', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Contract._fts_dataType = 'Contract';
/**
 * Internal flag to properly serialize choice-type element Contract.topic[x]
 */
Contract._fts_topicIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Contract.legallyBinding[x]
 */
Contract._fts_legallyBindingIsChoice = true;
//# sourceMappingURL=data:application/json;base64,