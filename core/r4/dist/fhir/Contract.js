// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Contract
import * as fhir from '../fhir.js';
// @ts-ignore
import { ContractPublicationstatusCodes } from '../fhirValueSets/ContractPublicationstatusCodes.js';
// @ts-ignore
import { V3ActConsentDirectiveCodings, } from '../fhirValueSets/V3ActConsentDirectiveCodings.js';
// @ts-ignore
import { ConsentContentClassCodings, } from '../fhirValueSets/ConsentContentClassCodings.js';
// @ts-ignore
import { ContractSignerTypeCodings, } from '../fhirValueSets/ContractSignerTypeCodings.js';
// @ts-ignore
import { ContractStatusCodes } from '../fhirValueSets/ContractStatusCodes.js';
// @ts-ignore
import { ContractLegalstateCodings, } from '../fhirValueSets/ContractLegalstateCodings.js';
/**
 * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
 */
export class ContractContentDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ContractContentDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['publisher']) {
            this.publisher = new fhir.Reference(source.publisher);
        }
        if (source['publicationDate']) {
            this.publicationDate = new fhir.FhirDateTime({ value: source.publicationDate });
        }
        if (source['publicationStatus']) {
            this.publicationStatus = new fhir.FhirCode({ value: source.publicationStatus });
        }
        else {
            this.publicationStatus = null;
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
    }
    /**
     * Required-bound Value Set for publicationStatus (Contract.contentDefinition.publicationStatus)
     */
    static get publicationStatusRequiredCodes() {
        return ContractPublicationstatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Contract.contentDefinition.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["subType"]) {
            issues.push(...this.subType.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["publicationDate"]) {
            issues.push(...this.publicationDate.doModelValidation());
        }
        if (!this['publicationStatus']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property publicationStatus:fhir.FhirCode<ContractPublicationstatusCodeType> fhir: Contract.contentDefinition.publicationStatus:code' });
        }
        if (this['publicationStatus'] && (!Object.values(ContractPublicationstatusCodes).includes(this.publicationStatus))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property publicationStatus:fhir.FhirCode<ContractPublicationstatusCodeType> fhir: Contract.contentDefinition.publicationStatus:code Required binding to: ContractPublicationstatus' });
        }
        if (this["publicationStatus"]) {
            issues.push(...this.publicationStatus.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractContentDefinition._fts_dataType = 'ContractContentDefinition';
/**
 * Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
 */
export class ContractTermSecurityLabel extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermSecurityLabel - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number']) {
            this.number = source.number.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.number = [];
        }
        if (source['classification']) {
            this.classification = new fhir.Coding(source.classification);
        }
        else {
            this.classification = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.Coding(x));
        }
        else {
            this.category = [];
        }
        if (source['control']) {
            this.control = source.control.map((x) => new fhir.Coding(x));
        }
        else {
            this.control = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["number"]) {
            this.number.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['classification']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property classification:fhir.Coding fhir: Contract.term.securityLabel.classification:Coding' });
        }
        if (this["classification"]) {
            issues.push(...this.classification.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["control"]) {
            this.control.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermSecurityLabel._fts_dataType = 'ContractTermSecurityLabel';
/**
 * Offer Recipient.
 */
export class ContractTermOfferParty extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOfferParty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = [];
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        else {
            this.role = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference' });
        }
        else if (!Array.isArray(this.reference)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference' });
        }
        else if (this.reference.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.offer.party.reference:Reference' });
        }
        if (this["reference"]) {
            this.reference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['role']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property role:fhir.CodeableConcept fhir: Contract.term.offer.party.role:CodeableConcept' });
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermOfferParty._fts_dataType = 'ContractTermOfferParty';
/**
 * Response to offer text.
 */
export class ContractTermOfferAnswer extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOfferAnswer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value: fhir: Contract.term.offer.answer.value[x]:' });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermOfferAnswer._fts_dataType = 'ContractTermOfferAnswer';
/**
 * Internal flag to properly serialize choice-type element Contract.term.offer.answer.value[x]
 */
ContractTermOfferAnswer._fts_valueIsChoice = true;
/**
 * The matter of concern in the context of this provision of the agrement.
 */
export class ContractTermOffer extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermOffer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['party']) {
            this.party = source.party.map((x) => new fhir.ContractTermOfferParty(x));
        }
        else {
            this.party = [];
        }
        if (source['topic']) {
            this.topic = new fhir.Reference(source.topic);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['decision']) {
            this.decision = new fhir.CodeableConcept(source.decision);
        }
        if (source['decisionMode']) {
            this.decisionMode = source.decisionMode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.decisionMode = [];
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.ContractTermOfferAnswer(x));
        }
        else {
            this.answer = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
    }
    /**
     * Extensible-bound Value Set for decision (Contract.term.offer.decision)
     */
    static get decisionExtensibleCodings() {
        return V3ActConsentDirectiveCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["party"]) {
            this.party.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["topic"]) {
            issues.push(...this.topic.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["decision"]) {
            issues.push(...this.decision.doModelValidation());
        }
        if (this["decisionMode"]) {
            this.decisionMode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["answer"]) {
            this.answer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermOffer._fts_dataType = 'ContractTermOffer';
/**
 * Circumstance of the asset.
 */
export class ContractTermAssetContext extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAssetContext - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.Reference(source.reference);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAssetContext._fts_dataType = 'ContractTermAssetContext';
/**
 * Contract Valued Item List.
 */
export class ContractTermAssetValuedItem extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAssetValuedItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['entity']) {
            this.entity = source.entity;
        }
        else if (source['entityCodeableConcept']) {
            this.entity = new fhir.CodeableConcept(source.entityCodeableConcept);
        }
        else if (source['entityReference']) {
            this.entity = new fhir.Reference(source.entityReference);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['effectiveTime']) {
            this.effectiveTime = new fhir.FhirDateTime({ value: source.effectiveTime });
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['points']) {
            this.points = new fhir.FhirDecimal({ value: source.points });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['payment']) {
            this.payment = new fhir.FhirString({ value: source.payment });
        }
        if (source['paymentDate']) {
            this.paymentDate = new fhir.FhirDateTime({ value: source.paymentDate });
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['recipient']) {
            this.recipient = new fhir.Reference(source.recipient);
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["effectiveTime"]) {
            issues.push(...this.effectiveTime.doModelValidation());
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            issues.push(...this.unitPrice.doModelValidation());
        }
        if (this["factor"]) {
            issues.push(...this.factor.doModelValidation());
        }
        if (this["points"]) {
            issues.push(...this.points.doModelValidation());
        }
        if (this["net"]) {
            issues.push(...this.net.doModelValidation());
        }
        if (this["payment"]) {
            issues.push(...this.payment.doModelValidation());
        }
        if (this["paymentDate"]) {
            issues.push(...this.paymentDate.doModelValidation());
        }
        if (this["responsible"]) {
            issues.push(...this.responsible.doModelValidation());
        }
        if (this["recipient"]) {
            issues.push(...this.recipient.doModelValidation());
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAssetValuedItem._fts_dataType = 'ContractTermAssetValuedItem';
/**
 * Internal flag to properly serialize choice-type element Contract.term.asset.valuedItem.entity[x]
 */
ContractTermAssetValuedItem._fts_entityIsChoice = true;
/**
 * Contract Term Asset List.
 */
export class ContractTermAsset extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAsset - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['typeReference']) {
            this.typeReference = source.typeReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.typeReference = [];
        }
        if (source['subtype']) {
            this.subtype = source.subtype.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subtype = [];
        }
        if (source['relationship']) {
            this.relationship = new fhir.Coding(source.relationship);
        }
        if (source['context']) {
            this.context = source.context.map((x) => new fhir.ContractTermAssetContext(x));
        }
        else {
            this.context = [];
        }
        if (source['condition']) {
            this.condition = new fhir.FhirString({ value: source.condition });
        }
        if (source['periodType']) {
            this.periodType = source.periodType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.periodType = [];
        }
        if (source['period']) {
            this.period = source.period.map((x) => new fhir.Period(x));
        }
        else {
            this.period = [];
        }
        if (source['usePeriod']) {
            this.usePeriod = source.usePeriod.map((x) => new fhir.Period(x));
        }
        else {
            this.usePeriod = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['answer']) {
            this.answer = source.answer.map((x) => new fhir.ContractTermOfferAnswer(x));
        }
        else {
            this.answer = [];
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
        if (source['valuedItem']) {
            this.valuedItem = source.valuedItem.map((x) => new fhir.ContractTermAssetValuedItem(x));
        }
        else {
            this.valuedItem = [];
        }
    }
    /**
     * Extensible-bound Value Set for relationship (Contract.term.asset.relationship)
     */
    static get relationshipExtensibleCodings() {
        return ConsentContentClassCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["scope"]) {
            issues.push(...this.scope.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["typeReference"]) {
            this.typeReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subtype"]) {
            this.subtype.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relationship"]) {
            issues.push(...this.relationship.doModelValidation());
        }
        if (this["context"]) {
            this.context.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            issues.push(...this.condition.doModelValidation());
        }
        if (this["periodType"]) {
            this.periodType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            this.period.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["usePeriod"]) {
            this.usePeriod.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["answer"]) {
            this.answer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["valuedItem"]) {
            this.valuedItem.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAsset._fts_dataType = 'ContractTermAsset';
/**
 * Entity of the action.
 */
export class ContractTermActionSubject extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermActionSubject - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = [];
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference' });
        }
        else if (!Array.isArray(this.reference)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference' });
        }
        else if (this.reference.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: Contract.term.action.subject.reference:Reference' });
        }
        if (this["reference"]) {
            this.reference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermActionSubject._fts_dataType = 'ContractTermActionSubject';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export class ContractTermAction extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTermAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.ContractTermActionSubject(x));
        }
        else {
            this.subject = [];
        }
        if (source['intent']) {
            this.intent = new fhir.CodeableConcept(source.intent);
        }
        else {
            this.intent = null;
        }
        if (source['linkId']) {
            this.linkId = source.linkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.linkId = [];
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        else {
            this.status = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['contextLinkId']) {
            this.contextLinkId = source.contextLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.contextLinkId = [];
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['requester']) {
            this.requester = source.requester.map((x) => new fhir.Reference(x));
        }
        else {
            this.requester = [];
        }
        if (source['requesterLinkId']) {
            this.requesterLinkId = source.requesterLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.requesterLinkId = [];
        }
        if (source['performerType']) {
            this.performerType = source.performerType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.performerType = [];
        }
        if (source['performerRole']) {
            this.performerRole = new fhir.CodeableConcept(source.performerRole);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['performerLinkId']) {
            this.performerLinkId = source.performerLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.performerLinkId = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.reason = [];
        }
        if (source['reasonLinkId']) {
            this.reasonLinkId = source.reasonLinkId.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.reasonLinkId = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['securityLabelNumber']) {
            this.securityLabelNumber = source.securityLabelNumber.map((x) => new fhir.FhirUnsignedInt({ value: x }));
        }
        else {
            this.securityLabelNumber = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["doNotPerform"]) {
            issues.push(...this.doNotPerform.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Contract.term.action.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["subject"]) {
            this.subject.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['intent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property intent:fhir.CodeableConcept fhir: Contract.term.action.intent:CodeableConcept' });
        }
        if (this["intent"]) {
            issues.push(...this.intent.doModelValidation());
        }
        if (this["linkId"]) {
            this.linkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.CodeableConcept fhir: Contract.term.action.status:CodeableConcept' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation());
        }
        if (this["contextLinkId"]) {
            this.contextLinkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["requester"]) {
            this.requester.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["requesterLinkId"]) {
            this.requesterLinkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["performerType"]) {
            this.performerType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["performerRole"]) {
            issues.push(...this.performerRole.doModelValidation());
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation());
        }
        if (this["performerLinkId"]) {
            this.performerLinkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonLinkId"]) {
            this.reasonLinkId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["securityLabelNumber"]) {
            this.securityLabelNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTermAction._fts_dataType = 'ContractTermAction';
/**
 * Internal flag to properly serialize choice-type element Contract.term.action.occurrence[x]
 */
ContractTermAction._fts_occurrenceIsChoice = true;
/**
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
export class ContractTerm extends fhir.BackboneElement {
    /**
     * Default constructor for ContractTerm - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['topic']) {
            this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            this.topic = new fhir.CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            this.topic = new fhir.Reference(source.topicReference);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['securityLabel']) {
            this.securityLabel = source.securityLabel.map((x) => new fhir.ContractTermSecurityLabel(x));
        }
        else {
            this.securityLabel = [];
        }
        if (source['offer']) {
            this.offer = new fhir.ContractTermOffer(source.offer);
        }
        else {
            this.offer = null;
        }
        if (source['asset']) {
            this.asset = source.asset.map((x) => new fhir.ContractTermAsset(x));
        }
        else {
            this.asset = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.ContractTermAction(x));
        }
        else {
            this.action = [];
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.ContractTerm(x));
        }
        else {
            this.group = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["issued"]) {
            issues.push(...this.issued.doModelValidation());
        }
        if (this["applies"]) {
            issues.push(...this.applies.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["subType"]) {
            issues.push(...this.subType.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["securityLabel"]) {
            this.securityLabel.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['offer']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property offer:fhir.ContractTermOffer fhir: Contract.term.offer:offer' });
        }
        if (this["offer"]) {
            issues.push(...this.offer.doModelValidation());
        }
        if (this["asset"]) {
            this.asset.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["group"]) {
            this.group.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractTerm._fts_dataType = 'ContractTerm';
/**
 * Internal flag to properly serialize choice-type element Contract.term.topic[x]
 */
ContractTerm._fts_topicIsChoice = true;
/**
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
 * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
export class ContractSigner extends fhir.BackboneElement {
    /**
     * Default constructor for ContractSigner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.Coding(source.type);
        }
        else {
            this.type = null;
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
        else {
            this.party = null;
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Preferred-bound Value Set for type (Contract.signer.type)
     */
    static get typePreferredCodings() {
        return ContractSignerTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.Coding fhir: Contract.signer.type:Coding' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['party']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property party:fhir.Reference fhir: Contract.signer.party:Reference' });
        }
        if (this["party"]) {
            issues.push(...this.party.doModelValidation());
        }
        if (!this['signature']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature' });
        }
        else if (!Array.isArray(this.signature)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature' });
        }
        else if (this.signature.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property signature:fhir.Signature[] fhir: Contract.signer.signature:Signature' });
        }
        if (this["signature"]) {
            this.signature.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractSigner._fts_dataType = 'ContractSigner';
/**
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
export class ContractFriendly extends fhir.BackboneElement {
    /**
     * Default constructor for ContractFriendly - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['content']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content: fhir: Contract.friendly.content[x]:' });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractFriendly._fts_dataType = 'ContractFriendly';
/**
 * Internal flag to properly serialize choice-type element Contract.friendly.content[x]
 */
ContractFriendly._fts_contentIsChoice = true;
/**
 * List of Legal expressions or representations of this Contract.
 */
export class ContractLegal extends fhir.BackboneElement {
    /**
     * Default constructor for ContractLegal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['content']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content: fhir: Contract.legal.content[x]:' });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractLegal._fts_dataType = 'ContractLegal';
/**
 * Internal flag to properly serialize choice-type element Contract.legal.content[x]
 */
ContractLegal._fts_contentIsChoice = true;
/**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
export class ContractRule extends fhir.BackboneElement {
    /**
     * Default constructor for ContractRule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['content']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content: fhir: Contract.rule.content[x]:' });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContractRule._fts_dataType = 'ContractRule';
/**
 * Internal flag to properly serialize choice-type element Contract.rule.content[x]
 */
ContractRule._fts_contentIsChoice = true;
/**
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
export class Contract extends fhir.DomainResource {
    /**
     * Default constructor for Contract - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Contract';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['legalState']) {
            this.legalState = new fhir.CodeableConcept(source.legalState);
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = new fhir.Reference(source.instantiatesCanonical);
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = new fhir.FhirUri({ value: source.instantiatesUri });
        }
        if (source['contentDerivative']) {
            this.contentDerivative = new fhir.CodeableConcept(source.contentDerivative);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirDateTime({ value: source.issued });
        }
        if (source['applies']) {
            this.applies = new fhir.Period(source.applies);
        }
        if (source['expirationType']) {
            this.expirationType = new fhir.CodeableConcept(source.expirationType);
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['authority']) {
            this.authority = source.authority.map((x) => new fhir.Reference(x));
        }
        else {
            this.authority = [];
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.Reference(x));
        }
        else {
            this.domain = [];
        }
        if (source['site']) {
            this.site = source.site.map((x) => new fhir.Reference(x));
        }
        else {
            this.site = [];
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['scope']) {
            this.scope = new fhir.CodeableConcept(source.scope);
        }
        if (source['topic']) {
            this.topic = source.topic;
        }
        else if (source['topicCodeableConcept']) {
            this.topic = new fhir.CodeableConcept(source.topicCodeableConcept);
        }
        else if (source['topicReference']) {
            this.topic = new fhir.Reference(source.topicReference);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subType']) {
            this.subType = source.subType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subType = [];
        }
        if (source['contentDefinition']) {
            this.contentDefinition = new fhir.ContractContentDefinition(source.contentDefinition);
        }
        if (source['term']) {
            this.term = source.term.map((x) => new fhir.ContractTerm(x));
        }
        else {
            this.term = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.relevantHistory = [];
        }
        if (source['signer']) {
            this.signer = source.signer.map((x) => new fhir.ContractSigner(x));
        }
        else {
            this.signer = [];
        }
        if (source['friendly']) {
            this.friendly = source.friendly.map((x) => new fhir.ContractFriendly(x));
        }
        else {
            this.friendly = [];
        }
        if (source['legal']) {
            this.legal = source.legal.map((x) => new fhir.ContractLegal(x));
        }
        else {
            this.legal = [];
        }
        if (source['rule']) {
            this.rule = source.rule.map((x) => new fhir.ContractRule(x));
        }
        else {
            this.rule = [];
        }
        if (source['legallyBinding']) {
            this.legallyBinding = source.legallyBinding;
        }
        else if (source['legallyBindingAttachment']) {
            this.legallyBinding = new fhir.Attachment(source.legallyBindingAttachment);
        }
        else if (source['legallyBindingReference']) {
            this.legallyBinding = new fhir.Reference(source.legallyBindingReference);
        }
    }
    /**
     * Required-bound Value Set for status (Contract.status)
     */
    static get statusRequiredCodes() {
        return ContractStatusCodes;
    }
    /**
     * Extensible-bound Value Set for legalState (Contract.legalState)
     */
    static get legalStateExtensibleCodings() {
        return ContractLegalstateCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Contract" fhir: Contract.resourceType:"Contract"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this['status'] && (!Object.values(ContractStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<ContractStatusCodeType> fhir: Contract.status:code Required binding to: ContractStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["legalState"]) {
            issues.push(...this.legalState.doModelValidation());
        }
        if (this["instantiatesCanonical"]) {
            issues.push(...this.instantiatesCanonical.doModelValidation());
        }
        if (this["instantiatesUri"]) {
            issues.push(...this.instantiatesUri.doModelValidation());
        }
        if (this["contentDerivative"]) {
            issues.push(...this.contentDerivative.doModelValidation());
        }
        if (this["issued"]) {
            issues.push(...this.issued.doModelValidation());
        }
        if (this["applies"]) {
            issues.push(...this.applies.doModelValidation());
        }
        if (this["expirationType"]) {
            issues.push(...this.expirationType.doModelValidation());
        }
        if (this["subject"]) {
            this.subject.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["authority"]) {
            this.authority.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["domain"]) {
            this.domain.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["site"]) {
            this.site.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["subtitle"]) {
            issues.push(...this.subtitle.doModelValidation());
        }
        if (this["alias"]) {
            this.alias.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation());
        }
        if (this["scope"]) {
            issues.push(...this.scope.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["subType"]) {
            this.subType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contentDefinition"]) {
            issues.push(...this.contentDefinition.doModelValidation());
        }
        if (this["term"]) {
            this.term.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relevantHistory"]) {
            this.relevantHistory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["signer"]) {
            this.signer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["friendly"]) {
            this.friendly.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["legal"]) {
            this.legal.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["rule"]) {
            this.rule.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Contract._fts_dataType = 'Contract';
/**
 * Internal flag to properly serialize choice-type element Contract.topic[x]
 */
Contract._fts_topicIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Contract.legallyBinding[x]
 */
Contract._fts_legallyBindingIsChoice = true;
//# sourceMappingURL=data:application/json;base64,