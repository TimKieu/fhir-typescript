// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ChargeItem
import * as fhir from '../fhir.js';
// @ts-ignore
import { ChargeitemStatusCodes } from '../fhirValueSets/ChargeitemStatusCodes.js';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class ChargeItemPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["function"]) {
            issues.push(...this.function.doModelValidation());
        }
        if (!this['actor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actor:fhir.Reference fhir: ChargeItem.performer.actor:Reference' });
        }
        if (this["actor"]) {
            issues.push(...this.actor.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItemPerformer._fts_dataType = 'ChargeItemPerformer';
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export class ChargeItem extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ChargeItem';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['definitionUri']) {
            this.definitionUri = source.definitionUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.definitionUri = [];
        }
        if (source['_definitionUri']) {
            source._definitionUri.forEach((x, i) => {
                if (this.definitionUri.length >= i) {
                    if (x) {
                        this.definitionUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definitionUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['definitionCanonical']) {
            this.definitionCanonical = source.definitionCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.definitionCanonical = [];
        }
        if (source['_definitionCanonical']) {
            source._definitionCanonical.forEach((x, i) => {
                if (this.definitionCanonical.length >= i) {
                    if (x) {
                        this.definitionCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definitionCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ChargeItemPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['performingOrganization']) {
            this.performingOrganization = new fhir.Reference(source.performingOrganization);
        }
        if (source['requestingOrganization']) {
            this.requestingOrganization = new fhir.Reference(source.requestingOrganization);
        }
        if (source['costCenter']) {
            this.costCenter = new fhir.Reference(source.costCenter);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['bodysite']) {
            this.bodysite = source.bodysite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodysite = [];
        }
        if (source['factorOverride']) {
            this.factorOverride = new fhir.FhirDecimal({ value: source.factorOverride });
        }
        if (source['_factorOverride']) {
            if (this.factorOverride) {
                this.factorOverride.addExtendedProperties(source._factorOverride);
            }
            else {
                this.factorOverride = new fhir.FhirDecimal(source._factorOverride);
            }
        }
        if (source['priceOverride']) {
            this.priceOverride = new fhir.Money(source.priceOverride);
        }
        if (source['overrideReason']) {
            this.overrideReason = new fhir.FhirString({ value: source.overrideReason });
        }
        if (source['_overrideReason']) {
            if (this.overrideReason) {
                this.overrideReason.addExtendedProperties(source._overrideReason);
            }
            else {
                this.overrideReason = new fhir.FhirString(source._overrideReason);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['enteredDate']) {
            this.enteredDate = new fhir.FhirDateTime({ value: source.enteredDate });
        }
        if (source['_enteredDate']) {
            if (this.enteredDate) {
                this.enteredDate.addExtendedProperties(source._enteredDate);
            }
            else {
                this.enteredDate = new fhir.FhirDateTime(source._enteredDate);
            }
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.Reference(x));
        }
        else {
            this.service = [];
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference);
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        else {
            this.account = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
    }
    /**
     * Required-bound Value Set for status (ChargeItem.status)
     */
    static get statusRequiredCodes() {
        return ChargeitemStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ChargeItem" fhir: ChargeItem.resourceType:"ChargeItem"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["definitionUri"]) {
            this.definitionUri.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["definitionCanonical"]) {
            this.definitionCanonical.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ChargeitemStatusCodeType> fhir: ChargeItem.status:code' });
        }
        if (this['status'] && (!Object.values(ChargeitemStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ChargeitemStatusCodeType> fhir: ChargeItem.status:code Required binding to: ChargeitemStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: ChargeItem.code:CodeableConcept' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject:fhir.Reference fhir: ChargeItem.subject:Reference' });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["performingOrganization"]) {
            issues.push(...this.performingOrganization.doModelValidation());
        }
        if (this["requestingOrganization"]) {
            issues.push(...this.requestingOrganization.doModelValidation());
        }
        if (this["costCenter"]) {
            issues.push(...this.costCenter.doModelValidation());
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["bodysite"]) {
            this.bodysite.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["factorOverride"]) {
            issues.push(...this.factorOverride.doModelValidation());
        }
        if (this["priceOverride"]) {
            issues.push(...this.priceOverride.doModelValidation());
        }
        if (this["overrideReason"]) {
            issues.push(...this.overrideReason.doModelValidation());
        }
        if (this["enterer"]) {
            issues.push(...this.enterer.doModelValidation());
        }
        if (this["enteredDate"]) {
            issues.push(...this.enteredDate.doModelValidation());
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["service"]) {
            this.service.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["account"]) {
            this.account.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItem._fts_dataType = 'ChargeItem';
/**
 * Internal flag to properly serialize choice-type element ChargeItem.occurrence[x]
 */
ChargeItem._fts_occurrenceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ChargeItem.product[x]
 */
ChargeItem._fts_productIsChoice = true;
//# sourceMappingURL=data:application/json;base64,