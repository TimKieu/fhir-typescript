/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ChargeitemStatusCodings } from '../fhirValueSets/ChargeitemStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { FhirUri } from './FhirUri.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Timing } from './Timing.js';
import { Quantity } from './Quantity.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Money } from './Money.js';
import { FhirString } from './FhirString.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Indicates who or what performed or participated in the charged service.
 */
var ChargeItemPerformer = /** @class */ (function (_super) {
    __extends(ChargeItemPerformer, _super);
    /**
     * Default constructor for ChargeItemPerformer - initializes any required elements to null if a value is not provided.
     */
    function ChargeItemPerformer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['function']) {
            _this.function = new CodeableConcept(source.function);
        }
        if (source['actor']) {
            _this.actor = new Reference(source.actor);
        }
        else {
            _this.actor = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ChargeItemPerformer.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["function"]) {
            (_a = outcome.issue).push.apply(_a, this.function.doModelValidation().issue);
        }
        if (!this['actor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actor:fhir.Reference fhir: ChargeItem.performer.actor:Reference', }));
        }
        if (this["actor"]) {
            (_b = outcome.issue).push.apply(_b, this.actor.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ChargeItemPerformer._fts_dataType = 'ChargeItemPerformer';
    return ChargeItemPerformer;
}(BackboneElement));
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
var ChargeItem = /** @class */ (function (_super) {
    __extends(ChargeItem, _super);
    /**
     * Default constructor for ChargeItem - initializes any required elements to null if a value is not provided.
     */
    function ChargeItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ChargeItem';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['definitionUri']) {
            _this.definitionUri = source.definitionUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.definitionUri = [];
        }
        if (source['definitionCanonical']) {
            _this.definitionCanonical = source.definitionCanonical.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.definitionCanonical = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['context']) {
            _this.context = new Reference(source.context);
        }
        if (source['occurrence']) {
            _this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            _this.occurrence = new FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            _this.occurrence = new Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            _this.occurrence = new Timing(source.occurrenceTiming);
        }
        if (source['performer']) {
            _this.performer = source.performer.map(function (x) { return new ChargeItemPerformer(x); });
        }
        else {
            _this.performer = [];
        }
        if (source['performingOrganization']) {
            _this.performingOrganization = new Reference(source.performingOrganization);
        }
        if (source['requestingOrganization']) {
            _this.requestingOrganization = new Reference(source.requestingOrganization);
        }
        if (source['costCenter']) {
            _this.costCenter = new Reference(source.costCenter);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['bodysite']) {
            _this.bodysite = source.bodysite.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.bodysite = [];
        }
        if (source['factorOverride']) {
            _this.factorOverride = new FhirDecimal({ value: source.factorOverride });
        }
        if (source['priceOverride']) {
            _this.priceOverride = new Money(source.priceOverride);
        }
        if (source['overrideReason']) {
            _this.overrideReason = new FhirString({ value: source.overrideReason });
        }
        if (source['enterer']) {
            _this.enterer = new Reference(source.enterer);
        }
        if (source['enteredDate']) {
            _this.enteredDate = new FhirDateTime({ value: source.enteredDate });
        }
        if (source['reason']) {
            _this.reason = source.reason.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reason = [];
        }
        if (source['service']) {
            _this.service = source.service.map(function (x) { return new Reference(x); });
        }
        else {
            _this.service = [];
        }
        if (source['product']) {
            _this.product = source.product;
        }
        else if (source['productReference']) {
            _this.product = new Reference(source.productReference);
        }
        else if (source['productCodeableConcept']) {
            _this.product = new CodeableConcept(source.productCodeableConcept);
        }
        if (source['account']) {
            _this.account = source.account.map(function (x) { return new Reference(x); });
        }
        else {
            _this.account = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['supportingInformation']) {
            _this.supportingInformation = source.supportingInformation.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingInformation = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ChargeItem.status)
     */
    ChargeItem.statusRequiredCoding = function () {
        return ChargeitemStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ChargeItem.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ChargeItem" fhir: ChargeItem.resourceType:"ChargeItem"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["definitionUri"]) {
            this.definitionUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["definitionCanonical"]) {
            this.definitionCanonical.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ChargeitemStatusCodeType fhir: ChargeItem.status:code', }));
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: ChargeItem.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: ChargeItem.subject:Reference', }));
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["context"]) {
            (_c = outcome.issue).push.apply(_c, this.context.doModelValidation().issue);
        }
        if (this["performer"]) {
            this.performer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["performingOrganization"]) {
            (_d = outcome.issue).push.apply(_d, this.performingOrganization.doModelValidation().issue);
        }
        if (this["requestingOrganization"]) {
            (_e = outcome.issue).push.apply(_e, this.requestingOrganization.doModelValidation().issue);
        }
        if (this["costCenter"]) {
            (_f = outcome.issue).push.apply(_f, this.costCenter.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_g = outcome.issue).push.apply(_g, this.quantity.doModelValidation().issue);
        }
        if (this["bodysite"]) {
            this.bodysite.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["factorOverride"]) {
            (_h = outcome.issue).push.apply(_h, this.factorOverride.doModelValidation().issue);
        }
        if (this["priceOverride"]) {
            (_j = outcome.issue).push.apply(_j, this.priceOverride.doModelValidation().issue);
        }
        if (this["overrideReason"]) {
            (_k = outcome.issue).push.apply(_k, this.overrideReason.doModelValidation().issue);
        }
        if (this["enterer"]) {
            (_l = outcome.issue).push.apply(_l, this.enterer.doModelValidation().issue);
        }
        if (this["enteredDate"]) {
            (_m = outcome.issue).push.apply(_m, this.enteredDate.doModelValidation().issue);
        }
        if (this["reason"]) {
            this.reason.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["service"]) {
            this.service.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["account"]) {
            this.account.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ChargeItem._fts_dataType = 'ChargeItem';
    /**
     * Internal flag to properly serialize choice-type element ChargeItem.occurrence[x]
     */
    ChargeItem._fts_occurrenceIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ChargeItem.product[x]
     */
    ChargeItem._fts_productIsChoice = true;
    return ChargeItem;
}(DomainResource));

export { ChargeItem, ChargeItemPerformer };
//# sourceMappingURL=ChargeItem.js.map
