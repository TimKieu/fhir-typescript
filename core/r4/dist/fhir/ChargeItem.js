// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ChargeItem
import * as fhir from '../fhir.js';
// @ts-ignore
import { ChargeitemStatusCodes } from '../fhirValueSets/ChargeitemStatusCodes.js';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class ChargeItemPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ChargeItem.performer';
        }
        if (this["function"]) {
            issues.push(...this.function.doModelValidation(expression + '.function'));
        }
        if (!this['actor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actor fhir: ChargeItem.performer.actor:Reference', expression: [expression] });
        }
        if (this["actor"]) {
            issues.push(...this.actor.doModelValidation(expression + '.actor'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItemPerformer._fts_dataType = 'ChargeItemPerformer';
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export class ChargeItem extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ChargeItem';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['definitionUri']) {
            this.definitionUri = source.definitionUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.definitionUri = [];
        }
        if (source['_definitionUri']) {
            source._definitionUri.forEach((x, i) => {
                if (this.definitionUri.length >= i) {
                    if (x) {
                        this.definitionUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definitionUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['definitionCanonical']) {
            this.definitionCanonical = source.definitionCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.definitionCanonical = [];
        }
        if (source['_definitionCanonical']) {
            source._definitionCanonical.forEach((x, i) => {
                if (this.definitionCanonical.length >= i) {
                    if (x) {
                        this.definitionCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definitionCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ChargeItemPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['performingOrganization']) {
            this.performingOrganization = new fhir.Reference(source.performingOrganization);
        }
        if (source['requestingOrganization']) {
            this.requestingOrganization = new fhir.Reference(source.requestingOrganization);
        }
        if (source['costCenter']) {
            this.costCenter = new fhir.Reference(source.costCenter);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['bodysite']) {
            this.bodysite = source.bodysite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodysite = [];
        }
        if (source['factorOverride']) {
            this.factorOverride = new fhir.FhirDecimal({ value: source.factorOverride });
        }
        if (source['_factorOverride']) {
            if (this.factorOverride) {
                this.factorOverride.addExtendedProperties(source._factorOverride);
            }
            else {
                this.factorOverride = new fhir.FhirDecimal(source._factorOverride);
            }
        }
        if (source['priceOverride']) {
            this.priceOverride = new fhir.Money(source.priceOverride);
        }
        if (source['overrideReason']) {
            this.overrideReason = new fhir.FhirString({ value: source.overrideReason });
        }
        if (source['_overrideReason']) {
            if (this.overrideReason) {
                this.overrideReason.addExtendedProperties(source._overrideReason);
            }
            else {
                this.overrideReason = new fhir.FhirString(source._overrideReason);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['enteredDate']) {
            this.enteredDate = new fhir.FhirDateTime({ value: source.enteredDate });
        }
        if (source['_enteredDate']) {
            if (this.enteredDate) {
                this.enteredDate.addExtendedProperties(source._enteredDate);
            }
            else {
                this.enteredDate = new fhir.FhirDateTime(source._enteredDate);
            }
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.Reference(x));
        }
        else {
            this.service = [];
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference);
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        else {
            this.account = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
    }
    /**
     * Required-bound Value Set for status (ChargeItem.status)
     */
    static get statusRequiredCodes() {
        return ChargeitemStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ChargeItem';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: ChargeItem.resourceType:"ChargeItem"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["definitionUri"]) {
            this.definitionUri.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.definitionUri[${i}]`)); });
        }
        if (this["definitionCanonical"]) {
            this.definitionCanonical.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.definitionCanonical[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: ChargeItem.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(ChargeitemStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: ChargeItem.status:code Required binding to: ChargeitemStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["partOf"]) {
            this.partOf.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.partOf[${i}]`)); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: ChargeItem.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject fhir: ChargeItem.subject:Reference', expression: [expression] });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation(expression + '.subject'));
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation(expression + '.context'));
        }
        if (this["performer"]) {
            this.performer.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.performer[${i}]`)); });
        }
        if (this["performingOrganization"]) {
            issues.push(...this.performingOrganization.doModelValidation(expression + '.performingOrganization'));
        }
        if (this["requestingOrganization"]) {
            issues.push(...this.requestingOrganization.doModelValidation(expression + '.requestingOrganization'));
        }
        if (this["costCenter"]) {
            issues.push(...this.costCenter.doModelValidation(expression + '.costCenter'));
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation(expression + '.quantity'));
        }
        if (this["bodysite"]) {
            this.bodysite.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.bodysite[${i}]`)); });
        }
        if (this["factorOverride"]) {
            issues.push(...this.factorOverride.doModelValidation(expression + '.factorOverride'));
        }
        if (this["priceOverride"]) {
            issues.push(...this.priceOverride.doModelValidation(expression + '.priceOverride'));
        }
        if (this["overrideReason"]) {
            issues.push(...this.overrideReason.doModelValidation(expression + '.overrideReason'));
        }
        if (this["enterer"]) {
            issues.push(...this.enterer.doModelValidation(expression + '.enterer'));
        }
        if (this["enteredDate"]) {
            issues.push(...this.enteredDate.doModelValidation(expression + '.enteredDate'));
        }
        if (this["reason"]) {
            this.reason.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reason[${i}]`)); });
        }
        if (this["service"]) {
            this.service.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.service[${i}]`)); });
        }
        if (this["account"]) {
            this.account.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.account[${i}]`)); });
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.supportingInformation[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItem._fts_dataType = 'ChargeItem';
/**
 * Internal flag to properly serialize choice-type element ChargeItem.occurrence[x]
 */
ChargeItem._fts_occurrenceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ChargeItem.product[x]
 */
ChargeItem._fts_productIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmdlSXRlbS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvQ2hhcmdlSXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw0QkFBNEI7QUFFNUIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFRbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSxxQkFBcUIsRUFBNkIsTUFBTSwyQ0FBMkMsQ0FBQztBQXVCN0c7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUFhM0Q7O09BRUc7SUFDSCxZQUFZLFNBQTBDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ2hHLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7U0FBRTtRQUN0RixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFO2FBQ2xFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FBRTtJQUM3QixDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxhQUFvQixFQUFFO1FBQ3RELElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakUsSUFBSSxVQUFVLEtBQUssRUFBRSxFQUFFO1lBQUUsVUFBVSxHQUFHLHNCQUFzQixDQUFBO1NBQUU7UUFDOUQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxNQUFNLENB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WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUFFO1FBQ3BHLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3RHO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7U0FBRTtRQUM3QixJQUFJLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUFFO1FBQzFILElBQUksTUFBTSxDQUFDLHdCQUF3QixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQUU7UUFDMUgsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FBRTtRQUN0RixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUFFO1FBQy9FLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENB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QUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDdkssT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUE3UEQ7O0dBRUc7QUFDNkIsd0JBQWEsR0FBVSxZQUFZLENBQUM7QUEwQ3BFOztHQUVHO0FBQ3VCLGtDQUF1QixHQUFRLElBQUksQ0FBQztBQXlEOUQ7O0dBRUc7QUFDdUIsK0JBQW9CLEdBQVEsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBDaGFyZ2VJdGVtXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBQZXJmb3JtZXJSb2xlQ29kaW5ncywgUGVyZm9ybWVyUm9sZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1BlcmZvcm1lclJvbGVDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBQZXJmb3JtZXJSb2xlQ29kZXMsICBQZXJmb3JtZXJSb2xlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1BlcmZvcm1lclJvbGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ2hhcmdlaXRlbVN0YXR1c0NvZGluZ3MsIENoYXJnZWl0ZW1TdGF0dXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DaGFyZ2VpdGVtU3RhdHVzQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ2hhcmdlaXRlbVN0YXR1c0NvZGVzLCAgQ2hhcmdlaXRlbVN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DaGFyZ2VpdGVtU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENoYXJnZWl0ZW1CaWxsaW5nQ29kaW5ncywgQ2hhcmdlaXRlbUJpbGxpbmdDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DaGFyZ2VpdGVtQmlsbGluZ0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENoYXJnZWl0ZW1CaWxsaW5nQ29kZXMsICBDaGFyZ2VpdGVtQmlsbGluZ0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9DaGFyZ2VpdGVtQmlsbGluZ0NvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBCb2R5U2l0ZUNvZGluZ3MsIEJvZHlTaXRlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQm9keVNpdGVDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBCb2R5U2l0ZUNvZGVzLCAgQm9keVNpdGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQm9keVNpdGVDb2Rlcy5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDaGFyZ2VJdGVtUGVyZm9ybWVyIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENoYXJnZUl0ZW1QZXJmb3JtZXJBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBEZXNjcmliZXMgdGhlIHR5cGUgb2YgcGVyZm9ybWFuY2Ugb3IgcGFydGljaXBhdGlvbihlLmcuIHByaW1hcnkgc3VyZ2VvbiwgYW5lc3RoZXNpb2xvZ2llc3QsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGV2aWNlLCBwcmFjdGl0aW9uZXIsIGV0Yy4gd2hvIHBlcmZvcm1lZCBvciBwYXJ0aWNpcGF0ZWQgaW4gdGhlIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgYWN0b3I6IGZoaXIuUmVmZXJlbmNlQXJnc3xudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHdobyBvciB3aGF0IHBlcmZvcm1lZCBvciBwYXJ0aWNpcGF0ZWQgaW4gdGhlIGNoYXJnZWQgc2VydmljZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDaGFyZ2VJdGVtUGVyZm9ybWVyIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2hhcmdlSXRlbVBlcmZvcm1lcic7XHJcbiAgLyoqXHJcbiAgICogRGVzY3JpYmVzIHRoZSB0eXBlIG9mIHBlcmZvcm1hbmNlIG9yIHBhcnRpY2lwYXRpb24oZS5nLiBwcmltYXJ5IHN1cmdlb24sIGFuZXN0aGVzaW9sb2dpZXN0LCBldGMuKS5cclxuICAgKi9cclxuICBwdWJsaWMgZnVuY3Rpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRldmljZSwgcHJhY3RpdGlvbmVyLCBldGMuIHdobyBwZXJmb3JtZWQgb3IgcGFydGljaXBhdGVkIGluIHRoZSBzZXJ2aWNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhY3RvcjogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDaGFyZ2VJdGVtUGVyZm9ybWVyIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2hhcmdlSXRlbVBlcmZvcm1lckFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydmdW5jdGlvbiddKSB7IHRoaXMuZnVuY3Rpb24gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmZ1bmN0aW9uKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWN0b3InXSkgeyB0aGlzLmFjdG9yID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5hY3Rvcik7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFjdG9yID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDaGFyZ2VJdGVtLnBlcmZvcm1lcicgfVxyXG4gICAgaWYgKHRoaXNbXCJmdW5jdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmZ1bmN0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5mdW5jdGlvbicpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydhY3RvciddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBhY3RvciBmaGlyOiBDaGFyZ2VJdGVtLnBlcmZvcm1lci5hY3RvcjpSZWZlcmVuY2UnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImFjdG9yXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuYWN0b3IuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmFjdG9yJykpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgQ2hhcmdlSXRlbSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDaGFyZ2VJdGVtQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiQ2hhcmdlSXRlbVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVycyBhc3NpZ25lZCB0byB0aGlzIGV2ZW50IHBlcmZvcm1lciBvciBvdGhlciBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZXMgdGhlIChleHRlcm5hbCkgc291cmNlIG9mIHByaWNpbmcgaW5mb3JtYXRpb24sIHJ1bGVzIG9mIGFwcGxpY2F0aW9uIGZvciB0aGUgY29kZSB0aGlzIENoYXJnZUl0ZW0gdXNlcy5cclxuICAgKi9cclxuICBkZWZpbml0aW9uVXJpPzogZmhpci5GaGlyVXJpW118c3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDaGFyZ2VJdGVtLmRlZmluaXRpb25VcmlcclxuICAgKi9cclxuICBfZGVmaW5pdGlvblVyaT86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogUmVmZXJlbmNlcyB0aGUgc291cmNlIG9mIHByaWNpbmcgaW5mb3JtYXRpb24sIHJ1bGVzIG9mIGFwcGxpY2F0aW9uIGZvciB0aGUgY29kZSB0aGlzIENoYXJnZUl0ZW0gdXNlcy5cclxuICAgKi9cclxuICBkZWZpbml0aW9uQ2Fub25pY2FsPzogZmhpci5GaGlyQ2Fub25pY2FsW118c3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDaGFyZ2VJdGVtLmRlZmluaXRpb25DYW5vbmljYWxcclxuICAgKi9cclxuICBfZGVmaW5pdGlvbkNhbm9uaWNhbD86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogVW5rbm93biBkb2VzIG5vdCByZXByZXNlbnQgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBkZWZpbmVkIHN0YXR1c2VzIG11c3QgYXBwbHkuICBVbmtub3duIGlzIHVzZWQgd2hlbiB0aGUgYXV0aG9yaW5nIHN5c3RlbSBpcyBub3Qgc3VyZSB3aGF0IHRoZSBjdXJyZW50IHN0YXR1cyBpcy5cclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyB0aGUgY29kZSBlbnRlcmVkLWluLWVycm9yIHRoYXQgbWFya3MgdGhlIGNoYXJnZSBpdGVtIGFzIG5vdCBjdXJyZW50bHkgdmFsaWQuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPENoYXJnZWl0ZW1TdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2hhcmdlSXRlbS5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBDaGFyZ2VJdGVtcyBjYW4gYmUgZ3JvdXBlZCB0byBsYXJnZXIgQ2hhcmdlSXRlbXMgY292ZXJpbmcgdGhlIHdob2xlIHNldC5cclxuICAgKi9cclxuICBwYXJ0T2Y/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb2RlIHRoYXQgaWRlbnRpZmllcyB0aGUgY2hhcmdlLCBsaWtlIGEgYmlsbGluZyBjb2RlLlxyXG4gICAqL1xyXG4gIGNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbmRpdmlkdWFsIG9yIHNldCBvZiBpbmRpdmlkdWFscyB0aGUgYWN0aW9uIGlzIGJlaW5nIG9yIHdhcyBwZXJmb3JtZWQgb24uXHJcbiAgICovXHJcbiAgc3ViamVjdDogZmhpci5SZWZlcmVuY2VBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVuY291bnRlciBvciBlcGlzb2RlIG9mIGNhcmUgdGhhdCBlc3RhYmxpc2hlcyB0aGUgY29udGV4dCBmb3IgdGhpcyBldmVudC5cclxuICAgKi9cclxuICBjb250ZXh0PzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiB0eXBlcyBtYXkgYmUgY29uc3RyYWluZWQgYXMgYXBwcm9wcmlhdGUgZm9yIHRoZSB0eXBlIG9mIGNoYXJnZSBpdGVtLlxyXG4gICAqL1xyXG4gIG9jY3VycmVuY2U/OiBmaGlyLkZoaXJEYXRlVGltZXxmaGlyLlBlcmlvZHxmaGlyLlRpbWluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpc3Qgb2YgdHlwZXMgbWF5IGJlIGNvbnN0cmFpbmVkIGFzIGFwcHJvcHJpYXRlIGZvciB0aGUgdHlwZSBvZiBjaGFyZ2UgaXRlbS5cclxuICAgKi9cclxuICBvY2N1cnJlbmNlRGF0ZVRpbWU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsaXN0IG9mIHR5cGVzIG1heSBiZSBjb25zdHJhaW5lZCBhcyBhcHByb3ByaWF0ZSBmb3IgdGhlIHR5cGUgb2YgY2hhcmdlIGl0ZW0uXHJcbiAgICovXHJcbiAgb2NjdXJyZW5jZVBlcmlvZD86IGZoaXIuUGVyaW9kQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpc3Qgb2YgdHlwZXMgbWF5IGJlIGNvbnN0cmFpbmVkIGFzIGFwcHJvcHJpYXRlIGZvciB0aGUgdHlwZSBvZiBjaGFyZ2UgaXRlbS5cclxuICAgKi9cclxuICBvY2N1cnJlbmNlVGltaW5nPzogZmhpci5UaW1pbmdBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgd2hvIG9yIHdoYXQgcGVyZm9ybWVkIG9yIHBhcnRpY2lwYXRlZCBpbiB0aGUgY2hhcmdlZCBzZXJ2aWNlLlxyXG4gICAqL1xyXG4gIHBlcmZvcm1lcj86IGZoaXIuQ2hhcmdlSXRlbVBlcmZvcm1lckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUHJhY3RpdGlvbmVycyBhbmQgRGV2aWNlcyBjYW4gYmUgYXNzb2NpYXRlZCB3aXRoIG11bHRpcGxlIG9yZ2FuaXphdGlvbnMuIEl0IGhhcyB0byBiZSBtYWRlIGNsZWFyLCBvbiBiZWhhbGYgb2Ygd2hpY2ggT3JnYW5pemF0aW9uIHRoZSBzZXJ2aWNlcyBoYXZlIGJlZW4gcmVuZGVyZWQuXHJcbiAgICovXHJcbiAgcGVyZm9ybWluZ09yZ2FuaXphdGlvbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlbmRlcmVkIFNlcnZpY2UgbWlnaHQgbm90IGJlIGFzc29jaWF0ZWQgd2l0aCBhIFJlcXVlc3QuIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoaWNoIE9yZ2FuaXphdGlvbiByZXF1ZXN0ZWQgdGhlIHNlcnZpY2VzIHRvIGJlIHJlbmRlcmVkLiAoSW4gbWFueSBjYXNlcywgdGhpcyBtYXkganVzdCBiZSB0aGUgRGVwYXJ0bWVudCBhc3NvY2lhdGVkIHdpdGggdGhlIEVuY291bnRlci5sb2NhdGlvbikuXHJcbiAgICovXHJcbiAgcmVxdWVzdGluZ09yZ2FuaXphdGlvbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvc3RDZW50ZXIgY291bGQgZWl0aGVyIGJlIGdpdmVuIGFzIGEgcmVmZXJlbmNlIHRvIGFuIE9yZ2FuaXphdGlvbihSb2xlKSByZXNvdXJjZSBvciBhcyB0aGUgaWRlbnRpZmllciBvZiB0aGUgY29zdCBjZW50ZXIgZGV0ZXJtaW5lZCBieSBSZWZlcmVuY2UuaWRlbnRpZmllci52YWx1ZSBhbmQgUmVmZXJlbmNlLmlkZW50aWZpZXIuc3lzdGVtLCBkZXBlbmRpbmcgb24gdXNlIGNhc2UgcmVxdWlyZW1lbnRzLlxyXG4gICAqL1xyXG4gIGNvc3RDZW50ZXI/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluIG1hbnkgY2FzZXMgdGhpcyBtYXkganVzdCBiZSBhIHZhbHVlLCBpZiB0aGUgdW5kZXJseWluZyB1bml0cyBhcmUgaW1wbGljaXQgaW4gdGhlIGRlZmluaXRpb24gb2YgdGhlIGNoYXJnZSBpdGVtIGNvZGUuXHJcbiAgICovXHJcbiAgcXVhbnRpdHk/OiBmaGlyLlF1YW50aXR5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT25seSB1c2VkIGlmIG5vdCBpbXBsaWNpdCBpbiBjb2RlIGZvdW5kIGluIENvbmRpdGlvbi5jb2RlLiBJZiB0aGUgdXNlIGNhc2UgcmVxdWlyZXMgYXR0cmlidXRlcyBmcm9tIHRoZSBCb2R5U2l0ZSByZXNvdXJjZSAoZS5nLiB0byBpZGVudGlmeSBhbmQgdHJhY2sgc2VwYXJhdGVseSkgdGhlbiB1c2UgdGhlIHN0YW5kYXJkIGV4dGVuc2lvbiBbYm9keVNpdGVdKGV4dGVuc2lvbi1ib2R5c2l0ZS5odG1sKS4gIE1heSBiZSBhIHN1bW1hcnkgY29kZSwgb3IgYSByZWZlcmVuY2UgdG8gYSB2ZXJ5IHByZWNpc2UgZGVmaW5pdGlvbiBvZiB0aGUgbG9jYXRpb24sIG9yIGJvdGguXHJcbiAgICovXHJcbiAgYm9keXNpdGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlcmUgaXMgbm8gcmVhc29uIHRvIGNhcnJ5IHRoZSBmYWN0b3IgaW4gdGhlIGluc3RhbmNlIG9mIGEgQ2hhcmdlSXRlbSB1bmxlc3Mgc3BlY2lhbCBjaXJjdW1zdGFuY2VzIHJlcXVpcmUgYSBtYW51YWwgb3ZlcnJpZGUuIFRoZSBmYWN0b3JzIGFyZSB1c3VhbGx5IGRlZmluZWQgYnkgYSBzZXQgb2YgcnVsZXMgaW4gYSBiYWNrIGNhdGFsb2d1ZSBvZiB0aGUgYmlsbGluZyBjb2RlcyAgKHNlZSBDaGFyZ2VJdGVtLmRlZmluaXRpb24pLiBEZXJpdmVkIHByb2ZpbGVzIG1heSByZXF1aXJlIGEgQ2hhcmdlSXRlbS5vdmVycmlkZVJlYXNvbiB0byBiZSBwcm92aWRlZCBpZiBlaXRoZXIgZmFjdG9yIG9yIHByaWNlIGFyZSBtYW51YWxseSBvdmVycmlkZGVuLlxyXG4gICAqL1xyXG4gIGZhY3Rvck92ZXJyaWRlPzogZmhpci5GaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDaGFyZ2VJdGVtLmZhY3Rvck92ZXJyaWRlXHJcbiAgICovXHJcbiAgX2ZhY3Rvck92ZXJyaWRlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGVyZSBpcyBubyByZWFzb24gdG8gY2FycnkgdGhlIHByaWNlIGluIHRoZSBpbnN0YW5jZSBvZiBhIENoYXJnZUl0ZW0gdW5sZXNzIGNpcmN1bXN0YW5jZXMgcmVxdWlyZSBhIG1hbnVhbCBvdmVycmlkZS4gVGhlIGxpc3QgcHJpY2VzIG9yIGFyZSB1c3VhbGx5IGRlZmluZWQgaW4gYSBiYWNrIGNhdGFsb2d1ZSBvZiB0aGUgYmlsbGluZyBjb2RlcyAgKHNlZSBDaGFyZ2VJdGVtLmRlZmluaXRpb24pLiBEZXJpdmVkIHByb2ZpbGVzIG1heSByZXF1aXJlIGEgQ2hhcmdlSXRlbS5vdmVycmlkZVJlYXNvbiB0byBiZSBwcm92aWRlZCBpZiBlaXRoZXIgZmFjdG9yIG9yIHByaWNlIGFyZSBtYW51YWxseSBvdmVycmlkZGVuLlxyXG4gICAqL1xyXG4gIHByaWNlT3ZlcnJpZGU/OiBmaGlyLk1vbmV5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVyaXZlZCBQcm9maWxlcyBtYXkgY2hvb3NlIHRvIGFkZCBpbnZhcmlhbnRzIHJlcXVpcmluZyB0aGlzIGZpZWxkIHRvIGJlIHBvcHVsYXRlZCBpZiBlaXRoZXIgcHJpY2VPdmVycmlkZSBvciBmYWN0b3JPdmVycmlkZSBoYXZlIGJlZW4gZmlsbGVkLlxyXG4gICAqL1xyXG4gIG92ZXJyaWRlUmVhc29uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENoYXJnZUl0ZW0ub3ZlcnJpZGVSZWFzb25cclxuICAgKi9cclxuICBfb3ZlcnJpZGVSZWFzb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbnRlcmVyIGlzIGFsc28gdGhlIHBlcnNvbiBjb25zaWRlcmVkIHJlc3BvbnNpYmxlIGZvciBmYWN0b3IvcHJpY2Ugb3ZlcnJpZGVzIGlmIGFwcGxpY2FibGUuXHJcbiAgICovXHJcbiAgZW50ZXJlcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFjdHVhbCBkYXRlIHdoZW4gdGhlIHNlcnZpY2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBjaGFyZ2UgaGFzIGJlZW4gcmVuZGVyZWQgaXMgY2FwdHVyZWQgaW4gb2NjdXJyZW5jZVt4XS5cclxuICAgKi9cclxuICBlbnRlcmVkRGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENoYXJnZUl0ZW0uZW50ZXJlZERhdGVcclxuICAgKi9cclxuICBfZW50ZXJlZERhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBhcHBsaWNhdGlvbiBvZiB0aGUgY2hhcmdlIGl0ZW0gcmVxdWlyZXMgYSByZWFzb24gdG8gYmUgZ2l2ZW4sIGl0IGNhbiBiZSBjYXB0dXJlZCBoZXJlLiBUZXh0dWFsIHJlYXNvbnMgY2FuIGJlIGNhcHR1cmVkIHVzaW5nIHJlYXNvbkNvZGUudGV4dC5cclxuICAgKi9cclxuICByZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVkIHRoZSByZW5kZXJlZCBzZXJ2aWNlIHRoYXQgY2F1c2VkIHRoaXMgY2hhcmdlLlxyXG4gICAqL1xyXG4gIHNlcnZpY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyB0aGUgZGV2aWNlLCBmb29kLCBkcnVnIG9yIG90aGVyIHByb2R1Y3QgYmVpbmcgY2hhcmdlZCBlaXRoZXIgYnkgdHlwZSBjb2RlIG9yIHJlZmVyZW5jZSB0byBhbiBpbnN0YW5jZS5cclxuICAgKi9cclxuICBwcm9kdWN0PzogZmhpci5SZWZlcmVuY2V8Zmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgdGhlIGRldmljZSwgZm9vZCwgZHJ1ZyBvciBvdGhlciBwcm9kdWN0IGJlaW5nIGNoYXJnZWQgZWl0aGVyIGJ5IHR5cGUgY29kZSBvciByZWZlcmVuY2UgdG8gYW4gaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgcHJvZHVjdFJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyB0aGUgZGV2aWNlLCBmb29kLCBkcnVnIG9yIG90aGVyIHByb2R1Y3QgYmVpbmcgY2hhcmdlZCBlaXRoZXIgYnkgdHlwZSBjb2RlIG9yIHJlZmVyZW5jZSB0byBhbiBpbnN0YW5jZS5cclxuICAgKi9cclxuICBwcm9kdWN0Q29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTeXN0ZW1zIHBvc3RpbmcgdGhlIENoYXJnZUl0ZW1zIG1pZ2h0IG5vdCBhbHdheXMgYmUgYWJsZSB0byBkZXRlcm1pbmUsIHdoaWNoIGFjY291bnRzIHRoZSBJdGVtcyBuZWVkIHRvIGJlIHBsYWNlcyBpbnRvLiBJdCBpcyB1cCB0byB0aGUgcG9zdHByb2Nlc3NpbmcgRmluYW5jaWFsIFN5c3RlbSB0byBhcHBseSBpbnRlcm5hbCBydWxlcyB0byBkZWNpZGUgYmFzZWQgb24gdGhlIEVuY291bnRlci9FcGlzb2RlT2ZDYXJlL1BhdGllbnQvQ292ZXJhZ2UgY29udGV4dCBhbmQgdGhlIHR5cGUgb2YgQ2hhcmdlSXRlbSwgd2hpY2ggQWNjb3VudCBpcyBhcHByb3ByaWF0ZS5cclxuICAgKi9cclxuICBhY2NvdW50PzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbW1lbnRzIG1hZGUgYWJvdXQgdGhlIGV2ZW50IGJ5IHRoZSBwZXJmb3JtZXIsIHN1YmplY3Qgb3Igb3RoZXIgcGFydGljaXBhbnRzLlxyXG4gICAqL1xyXG4gIG5vdGU/OiBmaGlyLkFubm90YXRpb25BcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZ1cnRoZXIgaW5mb3JtYXRpb24gc3VwcG9ydGluZyB0aGlzIGNoYXJnZS5cclxuICAgKi9cclxuICBzdXBwb3J0aW5nSW5mb3JtYXRpb24/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVzb3VyY2UgQ2hhcmdlSXRlbSBkZXNjcmliZXMgdGhlIHByb3Zpc2lvbiBvZiBoZWFsdGhjYXJlIHByb3ZpZGVyIHByb2R1Y3RzIGZvciBhIGNlcnRhaW4gcGF0aWVudCwgdGhlcmVmb3JlIHJlZmVycmluZyBub3Qgb25seSB0byB0aGUgcHJvZHVjdCwgYnV0IGNvbnRhaW5pbmcgaW4gYWRkaXRpb24gZGV0YWlscyBvZiB0aGUgcHJvdmlzaW9uLCBsaWtlIGRhdGUsIHRpbWUsIGFtb3VudHMgYW5kIHBhcnRpY2lwYXRpbmcgb3JnYW5pemF0aW9ucyBhbmQgcGVyc29ucy4gTWFpbiBVc2FnZSBvZiB0aGUgQ2hhcmdlSXRlbSBpcyB0byBlbmFibGUgdGhlIGJpbGxpbmcgcHJvY2VzcyBhbmQgaW50ZXJuYWwgY29zdCBhbGxvY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENoYXJnZUl0ZW0gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0NoYXJnZUl0ZW0nO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiQ2hhcmdlSXRlbVwiO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXJzIGFzc2lnbmVkIHRvIHRoaXMgZXZlbnQgcGVyZm9ybWVyIG9yIG90aGVyIHN5c3RlbXMuXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aWZpZXI6IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIFJlZmVyZW5jZXMgdGhlIChleHRlcm5hbCkgc291cmNlIG9mIHByaWNpbmcgaW5mb3JtYXRpb24sIHJ1bGVzIG9mIGFwcGxpY2F0aW9uIGZvciB0aGUgY29kZSB0aGlzIENoYXJnZUl0ZW0gdXNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgZGVmaW5pdGlvblVyaTogZmhpci5GaGlyVXJpW107XHJcbiAgLyoqXHJcbiAgICogUmVmZXJlbmNlcyB0aGUgc291cmNlIG9mIHByaWNpbmcgaW5mb3JtYXRpb24sIHJ1bGVzIG9mIGFwcGxpY2F0aW9uIGZvciB0aGUgY29kZSB0aGlzIENoYXJnZUl0ZW0gdXNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgZGVmaW5pdGlvbkNhbm9uaWNhbDogZmhpci5GaGlyQ2Fub25pY2FsW107XHJcbiAgLyoqXHJcbiAgICogVW5rbm93biBkb2VzIG5vdCByZXByZXNlbnQgXCJvdGhlclwiIC0gb25lIG9mIHRoZSBkZWZpbmVkIHN0YXR1c2VzIG11c3QgYXBwbHkuICBVbmtub3duIGlzIHVzZWQgd2hlbiB0aGUgYXV0aG9yaW5nIHN5c3RlbSBpcyBub3Qgc3VyZSB3aGF0IHRoZSBjdXJyZW50IHN0YXR1cyBpcy5cclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyB0aGUgY29kZSBlbnRlcmVkLWluLWVycm9yIHRoYXQgbWFya3MgdGhlIGNoYXJnZSBpdGVtIGFzIG5vdCBjdXJyZW50bHkgdmFsaWQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1czogZmhpci5GaGlyQ29kZTxDaGFyZ2VpdGVtU3RhdHVzQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogQ2hhcmdlSXRlbXMgY2FuIGJlIGdyb3VwZWQgdG8gbGFyZ2VyIENoYXJnZUl0ZW1zIGNvdmVyaW5nIHRoZSB3aG9sZSBzZXQuXHJcbiAgICovXHJcbiAgcHVibGljIHBhcnRPZjogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBBIGNvZGUgdGhhdCBpZGVudGlmaWVzIHRoZSBjaGFyZ2UsIGxpa2UgYSBiaWxsaW5nIGNvZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIGluZGl2aWR1YWwgb3Igc2V0IG9mIGluZGl2aWR1YWxzIHRoZSBhY3Rpb24gaXMgYmVpbmcgb3Igd2FzIHBlcmZvcm1lZCBvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc3ViamVjdDogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgZW5jb3VudGVyIG9yIGVwaXNvZGUgb2YgY2FyZSB0aGF0IGVzdGFibGlzaGVzIHRoZSBjb250ZXh0IGZvciB0aGlzIGV2ZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250ZXh0PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsaXN0IG9mIHR5cGVzIG1heSBiZSBjb25zdHJhaW5lZCBhcyBhcHByb3ByaWF0ZSBmb3IgdGhlIHR5cGUgb2YgY2hhcmdlIGl0ZW0uXHJcbiAgICovXHJcbiAgcHVibGljIG9jY3VycmVuY2U/OiAoZmhpci5GaGlyRGF0ZVRpbWV8Zmhpci5QZXJpb2R8Zmhpci5UaW1pbmcpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IENoYXJnZUl0ZW0ub2NjdXJyZW5jZVt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c19vY2N1cnJlbmNlSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdobyBvciB3aGF0IHBlcmZvcm1lZCBvciBwYXJ0aWNpcGF0ZWQgaW4gdGhlIGNoYXJnZWQgc2VydmljZS5cclxuICAgKi9cclxuICBwdWJsaWMgcGVyZm9ybWVyOiBmaGlyLkNoYXJnZUl0ZW1QZXJmb3JtZXJbXTtcclxuICAvKipcclxuICAgKiBQcmFjdGl0aW9uZXJzIGFuZCBEZXZpY2VzIGNhbiBiZSBhc3NvY2lhdGVkIHdpdGggbXVsdGlwbGUgb3JnYW5pemF0aW9ucy4gSXQgaGFzIHRvIGJlIG1hZGUgY2xlYXIsIG9uIGJlaGFsZiBvZiB3aGljaCBPcmdhbml6YXRpb24gdGhlIHNlcnZpY2VzIGhhdmUgYmVlbiByZW5kZXJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcGVyZm9ybWluZ09yZ2FuaXphdGlvbj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcmVuZGVyZWQgU2VydmljZSBtaWdodCBub3QgYmUgYXNzb2NpYXRlZCB3aXRoIGEgUmVxdWVzdC4gVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hpY2ggT3JnYW5pemF0aW9uIHJlcXVlc3RlZCB0aGUgc2VydmljZXMgdG8gYmUgcmVuZGVyZWQuIChJbiBtYW55IGNhc2VzLCB0aGlzIG1heSBqdXN0IGJlIHRoZSBEZXBhcnRtZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgRW5jb3VudGVyLmxvY2F0aW9uKS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWVzdGluZ09yZ2FuaXphdGlvbj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY29zdENlbnRlciBjb3VsZCBlaXRoZXIgYmUgZ2l2ZW4gYXMgYSByZWZlcmVuY2UgdG8gYW4gT3JnYW5pemF0aW9uKFJvbGUpIHJlc291cmNlIG9yIGFzIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBjb3N0IGNlbnRlciBkZXRlcm1pbmVkIGJ5IFJlZmVyZW5jZS5pZGVudGlmaWVyLnZhbHVlIGFuZCBSZWZlcmVuY2UuaWRlbnRpZmllci5zeXN0ZW0sIGRlcGVuZGluZyBvbiB1c2UgY2FzZSByZXF1aXJlbWVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIGNvc3RDZW50ZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW4gbWFueSBjYXNlcyB0aGlzIG1heSBqdXN0IGJlIGEgdmFsdWUsIGlmIHRoZSB1bmRlcmx5aW5nIHVuaXRzIGFyZSBpbXBsaWNpdCBpbiB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgY2hhcmdlIGl0ZW0gY29kZS5cclxuICAgKi9cclxuICBwdWJsaWMgcXVhbnRpdHk/OiBmaGlyLlF1YW50aXR5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBPbmx5IHVzZWQgaWYgbm90IGltcGxpY2l0IGluIGNvZGUgZm91bmQgaW4gQ29uZGl0aW9uLmNvZGUuIElmIHRoZSB1c2UgY2FzZSByZXF1aXJlcyBhdHRyaWJ1dGVzIGZyb20gdGhlIEJvZHlTaXRlIHJlc291cmNlIChlLmcuIHRvIGlkZW50aWZ5IGFuZCB0cmFjayBzZXBhcmF0ZWx5KSB0aGVuIHVzZSB0aGUgc3RhbmRhcmQgZXh0ZW5zaW9uIFtib2R5U2l0ZV0oZXh0ZW5zaW9uLWJvZHlzaXRlLmh0bWwpLiAgTWF5IGJlIGEgc3VtbWFyeSBjb2RlLCBvciBhIHJlZmVyZW5jZSB0byBhIHZlcnkgcHJlY2lzZSBkZWZpbml0aW9uIG9mIHRoZSBsb2NhdGlvbiwgb3IgYm90aC5cclxuICAgKi9cclxuICBwdWJsaWMgYm9keXNpdGU6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhlcmUgaXMgbm8gcmVhc29uIHRvIGNhcnJ5IHRoZSBmYWN0b3IgaW4gdGhlIGluc3RhbmNlIG9mIGEgQ2hhcmdlSXRlbSB1bmxlc3Mgc3BlY2lhbCBjaXJjdW1zdGFuY2VzIHJlcXVpcmUgYSBtYW51YWwgb3ZlcnJpZGUuIFRoZSBmYWN0b3JzIGFyZSB1c3VhbGx5IGRlZmluZWQgYnkgYSBzZXQgb2YgcnVsZXMgaW4gYSBiYWNrIGNhdGFsb2d1ZSBvZiB0aGUgYmlsbGluZyBjb2RlcyAgKHNlZSBDaGFyZ2VJdGVtLmRlZmluaXRpb24pLiBEZXJpdmVkIHByb2ZpbGVzIG1heSByZXF1aXJlIGEgQ2hhcmdlSXRlbS5vdmVycmlkZVJlYXNvbiB0byBiZSBwcm92aWRlZCBpZiBlaXRoZXIgZmFjdG9yIG9yIHByaWNlIGFyZSBtYW51YWxseSBvdmVycmlkZGVuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmYWN0b3JPdmVycmlkZT86IGZoaXIuRmhpckRlY2ltYWx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIGlzIG5vIHJlYXNvbiB0byBjYXJyeSB0aGUgcHJpY2UgaW4gdGhlIGluc3RhbmNlIG9mIGEgQ2hhcmdlSXRlbSB1bmxlc3MgY2lyY3Vtc3RhbmNlcyByZXF1aXJlIGEgbWFudWFsIG92ZXJyaWRlLiBUaGUgbGlzdCBwcmljZXMgb3IgYXJlIHVzdWFsbHkgZGVmaW5lZCBpbiBhIGJhY2sgY2F0YWxvZ3VlIG9mIHRoZSBiaWxsaW5nIGNvZGVzICAoc2VlIENoYXJnZUl0ZW0uZGVmaW5pdGlvbikuIERlcml2ZWQgcHJvZmlsZXMgbWF5IHJlcXVpcmUgYSBDaGFyZ2VJdGVtLm92ZXJyaWRlUmVhc29uIHRvIGJlIHByb3ZpZGVkIGlmIGVpdGhlciBmYWN0b3Igb3IgcHJpY2UgYXJlIG1hbnVhbGx5IG92ZXJyaWRkZW4uXHJcbiAgICovXHJcbiAgcHVibGljIHByaWNlT3ZlcnJpZGU/OiBmaGlyLk1vbmV5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXJpdmVkIFByb2ZpbGVzIG1heSBjaG9vc2UgdG8gYWRkIGludmFyaWFudHMgcmVxdWlyaW5nIHRoaXMgZmllbGQgdG8gYmUgcG9wdWxhdGVkIGlmIGVpdGhlciBwcmljZU92ZXJyaWRlIG9yIGZhY3Rvck92ZXJyaWRlIGhhdmUgYmVlbiBmaWxsZWQuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlUmVhc29uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZW50ZXJlciBpcyBhbHNvIHRoZSBwZXJzb24gY29uc2lkZXJlZCByZXNwb25zaWJsZSBmb3IgZmFjdG9yL3ByaWNlIG92ZXJyaWRlcyBpZiBhcHBsaWNhYmxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbnRlcmVyPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhY3R1YWwgZGF0ZSB3aGVuIHRoZSBzZXJ2aWNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2hhcmdlIGhhcyBiZWVuIHJlbmRlcmVkIGlzIGNhcHR1cmVkIGluIG9jY3VycmVuY2VbeF0uXHJcbiAgICovXHJcbiAgcHVibGljIGVudGVyZWREYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBhcHBsaWNhdGlvbiBvZiB0aGUgY2hhcmdlIGl0ZW0gcmVxdWlyZXMgYSByZWFzb24gdG8gYmUgZ2l2ZW4sIGl0IGNhbiBiZSBjYXB0dXJlZCBoZXJlLiBUZXh0dWFsIHJlYXNvbnMgY2FuIGJlIGNhcHR1cmVkIHVzaW5nIHJlYXNvbkNvZGUudGV4dC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlZCB0aGUgcmVuZGVyZWQgc2VydmljZSB0aGF0IGNhdXNlZCB0aGlzIGNoYXJnZS5cclxuICAgKi9cclxuICBwdWJsaWMgc2VydmljZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHRoZSBkZXZpY2UsIGZvb2QsIGRydWcgb3Igb3RoZXIgcHJvZHVjdCBiZWluZyBjaGFyZ2VkIGVpdGhlciBieSB0eXBlIGNvZGUgb3IgcmVmZXJlbmNlIHRvIGFuIGluc3RhbmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9kdWN0PzogKGZoaXIuUmVmZXJlbmNlfGZoaXIuQ29kZWFibGVDb25jZXB0KXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBDaGFyZ2VJdGVtLnByb2R1Y3RbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfcHJvZHVjdElzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIFN5c3RlbXMgcG9zdGluZyB0aGUgQ2hhcmdlSXRlbXMgbWlnaHQgbm90IGFsd2F5cyBiZSBhYmxlIHRvIGRldGVybWluZSwgd2hpY2ggYWNjb3VudHMgdGhlIEl0ZW1zIG5lZWQgdG8gYmUgcGxhY2VzIGludG8uIEl0IGlzIHVwIHRvIHRoZSBwb3N0cHJvY2Vzc2luZyBGaW5hbmNpYWwgU3lzdGVtIHRvIGFwcGx5IGludGVybmFsIHJ1bGVzIHRvIGRlY2lkZSBiYXNlZCBvbiB0aGUgRW5jb3VudGVyL0VwaXNvZGVPZkNhcmUvUGF0aWVudC9Db3ZlcmFnZSBjb250ZXh0IGFuZCB0aGUgdHlwZSBvZiBDaGFyZ2VJdGVtLCB3aGljaCBBY2NvdW50IGlzIGFwcHJvcHJpYXRlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhY2NvdW50OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIENvbW1lbnRzIG1hZGUgYWJvdXQgdGhlIGV2ZW50IGJ5IHRoZSBwZXJmb3JtZXIsIHN1YmplY3Qgb3Igb3RoZXIgcGFydGljaXBhbnRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBub3RlOiBmaGlyLkFubm90YXRpb25bXTtcclxuICAvKipcclxuICAgKiBGdXJ0aGVyIGluZm9ybWF0aW9uIHN1cHBvcnRpbmcgdGhpcyBjaGFyZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIHN1cHBvcnRpbmdJbmZvcm1hdGlvbjogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBDaGFyZ2VJdGVtIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q2hhcmdlSXRlbUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdDaGFyZ2VJdGVtJztcclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2RlZmluaXRpb25VcmknXSkgeyB0aGlzLmRlZmluaXRpb25VcmkgPSBzb3VyY2UuZGVmaW5pdGlvblVyaS5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kZWZpbml0aW9uVXJpID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZWZpbml0aW9uVXJpJ10pIHtcclxuICAgICAgc291cmNlLl9kZWZpbml0aW9uVXJpLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmRlZmluaXRpb25VcmkubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5kZWZpbml0aW9uVXJpW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMuZGVmaW5pdGlvblVyaS5wdXNoKG5ldyBmaGlyLkZoaXJVcmkoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpclVyaUFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RlZmluaXRpb25DYW5vbmljYWwnXSkgeyB0aGlzLmRlZmluaXRpb25DYW5vbmljYWwgPSBzb3VyY2UuZGVmaW5pdGlvbkNhbm9uaWNhbC5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kZWZpbml0aW9uQ2Fub25pY2FsID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZWZpbml0aW9uQ2Fub25pY2FsJ10pIHtcclxuICAgICAgc291cmNlLl9kZWZpbml0aW9uQ2Fub25pY2FsLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmRlZmluaXRpb25DYW5vbmljYWwubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5kZWZpbml0aW9uQ2Fub25pY2FsW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMuZGVmaW5pdGlvbkNhbm9uaWNhbC5wdXNoKG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXR1cyddKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8Q2hhcmdlaXRlbVN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxDaGFyZ2VpdGVtU3RhdHVzQ29kZVR5cGU+KHNvdXJjZS5fc3RhdHVzIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwYXJ0T2YnXSkgeyB0aGlzLnBhcnRPZiA9IHNvdXJjZS5wYXJ0T2YubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wYXJ0T2YgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29kZSddKSB7IHRoaXMuY29kZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY29kZSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvZGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydzdWJqZWN0J10pIHsgdGhpcy5zdWJqZWN0ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdWJqZWN0KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3ViamVjdCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRleHQnXSkgeyB0aGlzLmNvbnRleHQgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmNvbnRleHQpOyB9XHJcbiAgICBpZiAoc291cmNlWydvY2N1cnJlbmNlJ10pIHsgdGhpcy5vY2N1cnJlbmNlID0gc291cmNlLm9jY3VycmVuY2U7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnb2NjdXJyZW5jZURhdGVUaW1lJ10pIHsgdGhpcy5vY2N1cnJlbmNlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLm9jY3VycmVuY2VEYXRlVGltZX0pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ29jY3VycmVuY2VQZXJpb2QnXSkgeyB0aGlzLm9jY3VycmVuY2UgPSBuZXcgZmhpci5QZXJpb2Qoc291cmNlLm9jY3VycmVuY2VQZXJpb2QpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ29jY3VycmVuY2VUaW1pbmcnXSkgeyB0aGlzLm9jY3VycmVuY2UgPSBuZXcgZmhpci5UaW1pbmcoc291cmNlLm9jY3VycmVuY2VUaW1pbmcpOyB9XHJcbiAgICBpZiAoc291cmNlWydwZXJmb3JtZXInXSkgeyB0aGlzLnBlcmZvcm1lciA9IHNvdXJjZS5wZXJmb3JtZXIubWFwKCh4KSA9PiBuZXcgZmhpci5DaGFyZ2VJdGVtUGVyZm9ybWVyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGVyZm9ybWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmZvcm1pbmdPcmdhbml6YXRpb24nXSkgeyB0aGlzLnBlcmZvcm1pbmdPcmdhbml6YXRpb24gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnBlcmZvcm1pbmdPcmdhbml6YXRpb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXF1ZXN0aW5nT3JnYW5pemF0aW9uJ10pIHsgdGhpcy5yZXF1ZXN0aW5nT3JnYW5pemF0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZXF1ZXN0aW5nT3JnYW5pemF0aW9uKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29zdENlbnRlciddKSB7IHRoaXMuY29zdENlbnRlciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuY29zdENlbnRlcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3F1YW50aXR5J10pIHsgdGhpcy5xdWFudGl0eSA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5xdWFudGl0eSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2JvZHlzaXRlJ10pIHsgdGhpcy5ib2R5c2l0ZSA9IHNvdXJjZS5ib2R5c2l0ZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmJvZHlzaXRlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2ZhY3Rvck92ZXJyaWRlJ10pIHsgdGhpcy5mYWN0b3JPdmVycmlkZSA9IG5ldyBmaGlyLkZoaXJEZWNpbWFsKHt2YWx1ZTogc291cmNlLmZhY3Rvck92ZXJyaWRlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19mYWN0b3JPdmVycmlkZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmZhY3Rvck92ZXJyaWRlKSB7IHRoaXMuZmFjdG9yT3ZlcnJpZGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZmFjdG9yT3ZlcnJpZGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5mYWN0b3JPdmVycmlkZSA9IG5ldyBmaGlyLkZoaXJEZWNpbWFsKHNvdXJjZS5fZmFjdG9yT3ZlcnJpZGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEZWNpbWFsQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydwcmljZU92ZXJyaWRlJ10pIHsgdGhpcy5wcmljZU92ZXJyaWRlID0gbmV3IGZoaXIuTW9uZXkoc291cmNlLnByaWNlT3ZlcnJpZGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydvdmVycmlkZVJlYXNvbiddKSB7IHRoaXMub3ZlcnJpZGVSZWFzb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm92ZXJyaWRlUmVhc29ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19vdmVycmlkZVJlYXNvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLm92ZXJyaWRlUmVhc29uKSB7IHRoaXMub3ZlcnJpZGVSZWFzb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fb3ZlcnJpZGVSZWFzb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5vdmVycmlkZVJlYXNvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9vdmVycmlkZVJlYXNvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZW50ZXJlciddKSB7IHRoaXMuZW50ZXJlciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuZW50ZXJlcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2VudGVyZWREYXRlJ10pIHsgdGhpcy5lbnRlcmVkRGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5lbnRlcmVkRGF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZW50ZXJlZERhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5lbnRlcmVkRGF0ZSkgeyB0aGlzLmVudGVyZWREYXRlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2VudGVyZWREYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZW50ZXJlZERhdGUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoc291cmNlLl9lbnRlcmVkRGF0ZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZWFzb24nXSkgeyB0aGlzLnJlYXNvbiA9IHNvdXJjZS5yZWFzb24ubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWFzb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VydmljZSddKSB7IHRoaXMuc2VydmljZSA9IHNvdXJjZS5zZXJ2aWNlLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc2VydmljZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwcm9kdWN0J10pIHsgdGhpcy5wcm9kdWN0ID0gc291cmNlLnByb2R1Y3Q7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsncHJvZHVjdFJlZmVyZW5jZSddKSB7IHRoaXMucHJvZHVjdCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UucHJvZHVjdFJlZmVyZW5jZSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsncHJvZHVjdENvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMucHJvZHVjdCA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucHJvZHVjdENvZGVhYmxlQ29uY2VwdCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2FjY291bnQnXSkgeyB0aGlzLmFjY291bnQgPSBzb3VyY2UuYWNjb3VudC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFjY291bnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbm90ZSddKSB7IHRoaXMubm90ZSA9IHNvdXJjZS5ub3RlLm1hcCgoeCkgPT4gbmV3IGZoaXIuQW5ub3RhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm5vdGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3VwcG9ydGluZ0luZm9ybWF0aW9uJ10pIHsgdGhpcy5zdXBwb3J0aW5nSW5mb3JtYXRpb24gPSBzb3VyY2Uuc3VwcG9ydGluZ0luZm9ybWF0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3VwcG9ydGluZ0luZm9ybWF0aW9uID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBzdGF0dXMgKENoYXJnZUl0ZW0uc3RhdHVzKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHN0YXR1c1JlcXVpcmVkQ29kZXMoKSB7XHJcbiAgICByZXR1cm4gQ2hhcmdlaXRlbVN0YXR1c0NvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDaGFyZ2VJdGVtJyB9XHJcbiAgICBpZiAoIXRoaXNbJ3Jlc291cmNlVHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZVR5cGUgZmhpcjogQ2hhcmdlSXRlbS5yZXNvdXJjZVR5cGU6XCJDaGFyZ2VJdGVtXCInLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImlkZW50aWZpZXJcIl0pIHsgdGhpcy5pZGVudGlmaWVyLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5pZGVudGlmaWVyWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImRlZmluaXRpb25VcmlcIl0pIHsgdGhpcy5kZWZpbml0aW9uVXJpLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5kZWZpbml0aW9uVXJpWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImRlZmluaXRpb25DYW5vbmljYWxcIl0pIHsgdGhpcy5kZWZpbml0aW9uQ2Fub25pY2FsLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5kZWZpbml0aW9uQ2Fub25pY2FsWyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAoIXRoaXNbJ3N0YXR1cyddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBzdGF0dXMgZmhpcjogQ2hhcmdlSXRlbS5zdGF0dXM6Y29kZScsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzWydzdGF0dXMnXSAmJiAoIU9iamVjdC52YWx1ZXMoQ2hhcmdlaXRlbVN0YXR1c0NvZGVzKS5pbmNsdWRlcyh0aGlzLnN0YXR1cy52YWx1ZSBhcyBhbnkpKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnY29kZS1pbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdJbnZhbGlkIGNvZGUgcHJvcGVydHkgc3RhdHVzIGZoaXI6IENoYXJnZUl0ZW0uc3RhdHVzOmNvZGUgUmVxdWlyZWQgYmluZGluZyB0bzogQ2hhcmdlaXRlbVN0YXR1cycsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wic3RhdHVzXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3RhdHVzLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5zdGF0dXMnKSk7IH1cclxuICAgIGlmICh0aGlzW1wicGFydE9mXCJdKSB7IHRoaXMucGFydE9mLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5wYXJ0T2ZbJHtpfV1gKSk7IH0pIH1cclxuICAgIGlmICghdGhpc1snY29kZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBjb2RlIGZoaXI6IENoYXJnZUl0ZW0uY29kZTpDb2RlYWJsZUNvbmNlcHQnLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImNvZGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jb2RlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5jb2RlJykpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ3N1YmplY3QnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgc3ViamVjdCBmaGlyOiBDaGFyZ2VJdGVtLnN1YmplY3Q6UmVmZXJlbmNlJywgZXhwcmVzc2lvbjogW2V4cHJlc3Npb25dIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJzdWJqZWN0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3ViamVjdC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuc3ViamVjdCcpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb250ZXh0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29udGV4dC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuY29udGV4dCcpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwZXJmb3JtZXJcIl0pIHsgdGhpcy5wZXJmb3JtZXIuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnBlcmZvcm1lclske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJwZXJmb3JtaW5nT3JnYW5pemF0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucGVyZm9ybWluZ09yZ2FuaXphdGlvbi5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycucGVyZm9ybWluZ09yZ2FuaXphdGlvbicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJyZXF1ZXN0aW5nT3JnYW5pemF0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucmVxdWVzdGluZ09yZ2FuaXphdGlvbi5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycucmVxdWVzdGluZ09yZ2FuaXphdGlvbicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb3N0Q2VudGVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29zdENlbnRlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuY29zdENlbnRlcicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJxdWFudGl0eVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnF1YW50aXR5LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5xdWFudGl0eScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJib2R5c2l0ZVwiXSkgeyB0aGlzLmJvZHlzaXRlLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5ib2R5c2l0ZVske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJmYWN0b3JPdmVycmlkZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmZhY3Rvck92ZXJyaWRlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5mYWN0b3JPdmVycmlkZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwcmljZU92ZXJyaWRlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucHJpY2VPdmVycmlkZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycucHJpY2VPdmVycmlkZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJvdmVycmlkZVJlYXNvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm92ZXJyaWRlUmVhc29uLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5vdmVycmlkZVJlYXNvbicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJlbnRlcmVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZW50ZXJlci5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuZW50ZXJlcicpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJlbnRlcmVkRGF0ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmVudGVyZWREYXRlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5lbnRlcmVkRGF0ZScpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJyZWFzb25cIl0pIHsgdGhpcy5yZWFzb24uZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnJlYXNvblske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJzZXJ2aWNlXCJdKSB7IHRoaXMuc2VydmljZS5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2Auc2VydmljZVske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJhY2NvdW50XCJdKSB7IHRoaXMuYWNjb3VudC5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2AuYWNjb3VudFske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJub3RlXCJdKSB7IHRoaXMubm90ZS5mb3JFYWNoKCh4LGkpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uK2Aubm90ZVske2l9XWApKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJzdXBwb3J0aW5nSW5mb3JtYXRpb25cIl0pIHsgdGhpcy5zdXBwb3J0aW5nSW5mb3JtYXRpb24uZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLnN1cHBvcnRpbmdJbmZvcm1hdGlvblske2l9XWApKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19