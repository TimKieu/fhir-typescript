// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ChargeItem
import * as fhir from '../fhir.js';
// @ts-ignore
import { ChargeitemStatusVsValidation } from '../fhirValueSets/ChargeitemStatusVsValidation.js';
/**
 * Indicates who or what performed or participated in the charged service.
 */
export class ChargeItemPerformer extends fhir.BackboneElement {
    /**
     * Default constructor for ChargeItemPerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ChargeItem.performer';
        }
        iss.push(...this.vOS('function', exp));
        iss.push(...this.vRS('actor', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItemPerformer._fts_dataType = 'ChargeItemPerformer';
/**
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export class ChargeItem extends fhir.DomainResource {
    /**
     * Default constructor for ChargeItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ChargeItem';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['definitionUri']) {
            this.definitionUri = source.definitionUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.definitionUri = [];
        }
        if (source['_definitionUri']) {
            source._definitionUri.forEach((x, i) => {
                if (this.definitionUri.length >= i) {
                    if (x) {
                        this.definitionUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definitionUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['definitionCanonical']) {
            this.definitionCanonical = source.definitionCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.definitionCanonical = [];
        }
        if (source['_definitionCanonical']) {
            source._definitionCanonical.forEach((x, i) => {
                if (this.definitionCanonical.length >= i) {
                    if (x) {
                        this.definitionCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.definitionCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.ChargeItemPerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['performingOrganization']) {
            this.performingOrganization = new fhir.Reference(source.performingOrganization);
        }
        if (source['requestingOrganization']) {
            this.requestingOrganization = new fhir.Reference(source.requestingOrganization);
        }
        if (source['costCenter']) {
            this.costCenter = new fhir.Reference(source.costCenter);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['bodysite']) {
            this.bodysite = source.bodysite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodysite = [];
        }
        if (source['factorOverride']) {
            this.factorOverride = new fhir.FhirDecimal({ value: source.factorOverride });
        }
        if (source['_factorOverride']) {
            if (this.factorOverride) {
                this.factorOverride.addExtendedProperties(source._factorOverride);
            }
            else {
                this.factorOverride = new fhir.FhirDecimal(source._factorOverride);
            }
        }
        if (source['priceOverride']) {
            this.priceOverride = new fhir.Money(source.priceOverride);
        }
        if (source['overrideReason']) {
            this.overrideReason = new fhir.FhirString({ value: source.overrideReason });
        }
        if (source['_overrideReason']) {
            if (this.overrideReason) {
                this.overrideReason.addExtendedProperties(source._overrideReason);
            }
            else {
                this.overrideReason = new fhir.FhirString(source._overrideReason);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['enteredDate']) {
            this.enteredDate = new fhir.FhirDateTime({ value: source.enteredDate });
        }
        if (source['_enteredDate']) {
            if (this.enteredDate) {
                this.enteredDate.addExtendedProperties(source._enteredDate);
            }
            else {
                this.enteredDate = new fhir.FhirDateTime(source._enteredDate);
            }
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['service']) {
            this.service = source.service.map((x) => new fhir.Reference(x));
        }
        else {
            this.service = [];
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference);
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['account']) {
            this.account = source.account.map((x) => new fhir.Reference(x));
        }
        else {
            this.account = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'ChargeItem';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('definitionUri', exp));
        iss.push(...this.vOA('definitionCanonical', exp));
        iss.push(...this.vRSV('status', exp, 'ChargeitemStatus', ChargeitemStatusVsValidation, 'r'));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOS('occurrence', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('performingOrganization', exp));
        iss.push(...this.vOS('requestingOrganization', exp));
        iss.push(...this.vOS('costCenter', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOA('bodysite', exp));
        iss.push(...this.vOS('factorOverride', exp));
        iss.push(...this.vOS('priceOverride', exp));
        iss.push(...this.vOS('overrideReason', exp));
        iss.push(...this.vOS('enterer', exp));
        iss.push(...this.vOS('enteredDate', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOA('service', exp));
        iss.push(...this.vOS('product', exp));
        iss.push(...this.vOA('account', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('supportingInformation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ChargeItem._fts_dataType = 'ChargeItem';
/**
 * Internal flag to properly serialize choice-type element ChargeItem.occurrence[x]
 */
ChargeItem._fts_occurrenceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ChargeItem.product[x]
 */
ChargeItem._fts_productIsChoice = true;
//# sourceMappingURL=data:application/json;base64,