{"version":3,"file":"Expression.js","sources":["../../src/fhir/Expression.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ComplexType: Expression\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { ExpressionLanguageCodings, ExpressionLanguageCodingType,} from '../fhirValueSets/ExpressionLanguageCodings.js';\r\n// @ts-ignore\r\nimport { ExpressionLanguageCodes,  ExpressionLanguageCodeType } from '../fhirValueSets/ExpressionLanguageCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the Expression type.\r\n */\r\nexport interface ExpressionArgs extends fhir.FhirElementArgs {\r\n  /**\r\n   * A brief, natural language description of the condition that effectively communicates the intended semantics.\r\n   */\r\n  description?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.\r\n   */\r\n  name?: fhir.FhirId|string|undefined;\r\n  /**\r\n   * The media type of the language for the expression.\r\n   */\r\n  language: fhir.FhirCode|string|undefined;\r\n  /**\r\n   * An expression in the specified language that returns a value.\r\n   */\r\n  expression?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * If both a reference and an expression is found, the reference SHALL point to the same expression.\r\n   */\r\n  reference?: fhir.FhirUri|string|undefined;\r\n}\r\n\r\n/**\r\n * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.\r\n */\r\nexport class Expression extends fhir.FhirElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Expression';\r\n  /**\r\n   * A brief, natural language description of the condition that effectively communicates the intended semantics.\r\n   */\r\n  public description?: fhir.FhirString|undefined;\r\n  /**\r\n   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.\r\n   */\r\n  public name?: fhir.FhirId|undefined;\r\n  /**\r\n   * The media type of the language for the expression.\r\n   */\r\n  public language: fhir.FhirCode|null;\r\n  /**\r\n   * An expression in the specified language that returns a value.\r\n   */\r\n  public expression?: fhir.FhirString|undefined;\r\n  /**\r\n   * If both a reference and an expression is found, the reference SHALL point to the same expression.\r\n   */\r\n  public reference?: fhir.FhirUri|undefined;\r\n  /**\r\n   * Default constructor for Expression - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<ExpressionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }\r\n    if (source['name']) { this.name = new fhir.FhirId({value: source.name}); }\r\n    if (source['language']) { this.language = new fhir.FhirCode({value: source.language}); }\r\n    else { this.language = null; }\r\n    if (source['expression']) { this.expression = new fhir.FhirString({value: source.expression}); }\r\n    if (source['reference']) { this.reference = new fhir.FhirUri({value: source.reference}); }\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for language (Expression.language)\r\n   */\r\n  public static languageExtensibleCoding():ExpressionLanguageCodingType {\r\n    return ExpressionLanguageCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"description\"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (!this['language']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property language:fhir.FhirCode fhir: Expression.language:code', }));\r\n    }\r\n    if (this[\"language\"]) { outcome.issue!.push(...this.language.doModelValidation().issue!); }\r\n    if (this[\"expression\"]) { outcome.issue!.push(...this.expression.doModelValidation().issue!); }\r\n    if (this[\"reference\"]) { outcome.issue!.push(...this.reference.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirString","fhir.FhirId","fhir.FhirCode","fhir.FhirUri","fhir.OperationOutcomeIssue","fhir.FhirElement"],"mappings":"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"}