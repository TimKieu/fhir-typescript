// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSpecification
import * as fhir from '../fhir.js';
/**
 * Moiety, for structural modifications.
 */
export class SubstanceSpecificationMoiety extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role, options);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry, options);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity, options);
        }
        if (source['molecularFormula'] !== undefined) {
            this.molecularFormula = new fhir.FhirString({ value: source.molecularFormula }, options);
        }
        if (source['_molecularFormula']) {
            if (this.molecularFormula) {
                this.molecularFormula.addExtendedProperties(source._molecularFormula);
            }
            else {
                this.molecularFormula = new fhir.FhirString(source._molecularFormula, options);
            }
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity, options);
        }
        else if (source['amountString'] !== undefined) {
            this.amount = new fhir.FhirString({ value: source.amountString }, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.moiety';
        }
        iss.push(...this.vOS('role', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('stereochemistry', exp));
        iss.push(...this.vOS('opticalActivity', exp));
        iss.push(...this.vOS('molecularFormula', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationMoiety._fts_dataType = 'SubstanceSpecificationMoiety';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.moiety.amount[x]
 */
SubstanceSpecificationMoiety._fts_amountIsChoice = true;
/**
 * General specifications for this substance, including how it is related to other substances.
 */
export class SubstanceSpecificationProperty extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['parameters'] !== undefined) {
            this.parameters = new fhir.FhirString({ value: source.parameters }, options);
        }
        if (source['_parameters']) {
            if (this.parameters) {
                this.parameters.addExtendedProperties(source._parameters);
            }
            else {
                this.parameters = new fhir.FhirString(source._parameters, options);
            }
        }
        if (source['definingSubstance']) {
            this.definingSubstance = source.definingSubstance;
        }
        else if (source['definingSubstanceReference']) {
            this.definingSubstance = new fhir.Reference(source.definingSubstanceReference, options);
        }
        else if (source['definingSubstanceCodeableConcept']) {
            this.definingSubstance = new fhir.CodeableConcept(source.definingSubstanceCodeableConcept, options);
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity, options);
        }
        else if (source['amountString'] !== undefined) {
            this.amount = new fhir.FhirString({ value: source.amountString }, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.property';
        }
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('parameters', exp));
        iss.push(...this.vOS('definingSubstance', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationProperty._fts_dataType = 'SubstanceSpecificationProperty';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.property.definingSubstance[x]
 */
SubstanceSpecificationProperty._fts_definingSubstanceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.property.amount[x]
 */
SubstanceSpecificationProperty._fts_amountIsChoice = true;
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method, options);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure.isotope.molecularWeight';
        }
        iss.push(...this.vOS('method', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('amount', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureIsotopeMolecularWeight._fts_dataType = 'SubstanceSpecificationStructureIsotopeMolecularWeight';
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export class SubstanceSpecificationStructureIsotope extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['name']) {
            this.name = new fhir.CodeableConcept(source.name, options);
        }
        if (source['substitution']) {
            this.substitution = new fhir.CodeableConcept(source.substitution, options);
        }
        if (source['halfLife']) {
            this.halfLife = new fhir.Quantity(source.halfLife, options);
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure.isotope';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('substitution', exp));
        iss.push(...this.vOS('halfLife', exp));
        iss.push(...this.vOS('molecularWeight', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureIsotope._fts_dataType = 'SubstanceSpecificationStructureIsotope';
/**
 * Molecular structural representation.
 */
export class SubstanceSpecificationStructureRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['representation'] !== undefined) {
            this.representation = new fhir.FhirString({ value: source.representation }, options);
        }
        if (source['_representation']) {
            if (this.representation) {
                this.representation.addExtendedProperties(source._representation);
            }
            else {
                this.representation = new fhir.FhirString(source._representation, options);
            }
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure.representation';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('representation', exp));
        iss.push(...this.vOS('attachment', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureRepresentation._fts_dataType = 'SubstanceSpecificationStructureRepresentation';
/**
 * Structural information.
 */
export class SubstanceSpecificationStructure extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry, options);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity, options);
        }
        if (source['molecularFormula'] !== undefined) {
            this.molecularFormula = new fhir.FhirString({ value: source.molecularFormula }, options);
        }
        if (source['_molecularFormula']) {
            if (this.molecularFormula) {
                this.molecularFormula.addExtendedProperties(source._molecularFormula);
            }
            else {
                this.molecularFormula = new fhir.FhirString(source._molecularFormula, options);
            }
        }
        if (source['molecularFormulaByMoiety'] !== undefined) {
            this.molecularFormulaByMoiety = new fhir.FhirString({ value: source.molecularFormulaByMoiety }, options);
        }
        if (source['_molecularFormulaByMoiety']) {
            if (this.molecularFormulaByMoiety) {
                this.molecularFormulaByMoiety.addExtendedProperties(source._molecularFormulaByMoiety);
            }
            else {
                this.molecularFormulaByMoiety = new fhir.FhirString(source._molecularFormulaByMoiety, options);
            }
        }
        if (source['isotope']) {
            this.isotope = source.isotope.map((x) => new fhir.SubstanceSpecificationStructureIsotope(x, options));
        }
        else {
            this.isotope = [];
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight, options);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.source = [];
        }
        if (source['representation']) {
            this.representation = source.representation.map((x) => new fhir.SubstanceSpecificationStructureRepresentation(x, options));
        }
        else {
            this.representation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure';
        }
        iss.push(...this.vOS('stereochemistry', exp));
        iss.push(...this.vOS('opticalActivity', exp));
        iss.push(...this.vOS('molecularFormula', exp));
        iss.push(...this.vOS('molecularFormulaByMoiety', exp));
        iss.push(...this.vOA('isotope', exp));
        iss.push(...this.vOS('molecularWeight', exp));
        iss.push(...this.vOA('source', exp));
        iss.push(...this.vOA('representation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructure._fts_dataType = 'SubstanceSpecificationStructure';
/**
 * Codes associated with the substance.
 */
export class SubstanceSpecificationCode extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
        if (source['statusDate'] !== undefined) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate }, options);
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDateTime(source._statusDate, options);
            }
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.code';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('statusDate', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOA('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationCode._fts_dataType = 'SubstanceSpecificationCode';
/**
 * Details of the official nature of this name.
 */
export class SubstanceSpecificationNameOfficial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authority']) {
            this.authority = new fhir.CodeableConcept(source.authority, options);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.name.official';
        }
        iss.push(...this.vOS('authority', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('date', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationNameOfficial._fts_dataType = 'SubstanceSpecificationNameOfficial';
/**
 * Names applicable to this substance.
 */
export class SubstanceSpecificationName extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
        if (source['preferred'] !== undefined) {
            this.preferred = new fhir.FhirBoolean({ value: source.preferred }, options);
        }
        if (source['_preferred']) {
            if (this.preferred) {
                this.preferred.addExtendedProperties(source._preferred);
            }
            else {
                this.preferred = new fhir.FhirBoolean(source._preferred, options);
            }
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.language = [];
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.domain = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.SubstanceSpecificationName(x, options));
        }
        else {
            this.synonym = [];
        }
        if (source['translation']) {
            this.translation = source.translation.map((x) => new fhir.SubstanceSpecificationName(x, options));
        }
        else {
            this.translation = [];
        }
        if (source['official']) {
            this.official = source.official.map((x) => new fhir.SubstanceSpecificationNameOfficial(x, options));
        }
        else {
            this.official = [];
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.name';
        }
        iss.push(...this.vRS('name', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('preferred', exp));
        iss.push(...this.vOA('language', exp));
        iss.push(...this.vOA('domain', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOA('synonym', exp));
        iss.push(...this.vOA('translation', exp));
        iss.push(...this.vOA('official', exp));
        iss.push(...this.vOA('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationName._fts_dataType = 'SubstanceSpecificationName';
/**
 * A link between this substance and another, with details of the relationship.
 */
export class SubstanceSpecificationRelationship extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = source.substance;
        }
        else if (source['substanceReference']) {
            this.substance = new fhir.Reference(source.substanceReference, options);
        }
        else if (source['substanceCodeableConcept']) {
            this.substance = new fhir.CodeableConcept(source.substanceCodeableConcept, options);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship, options);
        }
        if (source['isDefining'] !== undefined) {
            this.isDefining = new fhir.FhirBoolean({ value: source.isDefining }, options);
        }
        if (source['_isDefining']) {
            if (this.isDefining) {
                this.isDefining.addExtendedProperties(source._isDefining);
            }
            else {
                this.isDefining = new fhir.FhirBoolean(source._isDefining, options);
            }
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity, options);
        }
        else if (source['amountRange']) {
            this.amount = new fhir.Range(source.amountRange, options);
        }
        else if (source['amountRatio']) {
            this.amount = new fhir.Ratio(source.amountRatio, options);
        }
        else if (source['amountString'] !== undefined) {
            this.amount = new fhir.FhirString({ value: source.amountString }, options);
        }
        if (source['amountRatioLowLimit']) {
            this.amountRatioLowLimit = new fhir.Ratio(source.amountRatioLowLimit, options);
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType, options);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.relationship';
        }
        iss.push(...this.vOS('substance', exp));
        iss.push(...this.vOS('relationship', exp));
        iss.push(...this.vOS('isDefining', exp));
        iss.push(...this.vOS('amount', exp));
        iss.push(...this.vOS('amountRatioLowLimit', exp));
        iss.push(...this.vOS('amountType', exp));
        iss.push(...this.vOA('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationRelationship._fts_dataType = 'SubstanceSpecificationRelationship';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.substance[x]
 */
SubstanceSpecificationRelationship._fts_substanceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.amount[x]
 */
SubstanceSpecificationRelationship._fts_amountIsChoice = true;
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export class SubstanceSpecification extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceSpecification';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier, options);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status, options);
        }
        if (source['domain']) {
            this.domain = new fhir.CodeableConcept(source.domain, options);
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.source = [];
        }
        if (source['comment'] !== undefined) {
            this.comment = new fhir.FhirString({ value: source.comment }, options);
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment, options);
            }
        }
        if (source['moiety']) {
            this.moiety = source.moiety.map((x) => new fhir.SubstanceSpecificationMoiety(x, options));
        }
        else {
            this.moiety = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.SubstanceSpecificationProperty(x, options));
        }
        else {
            this.property = [];
        }
        if (source['referenceInformation']) {
            this.referenceInformation = new fhir.Reference(source.referenceInformation, options);
        }
        if (source['structure']) {
            this.structure = new fhir.SubstanceSpecificationStructure(source.structure, options);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.SubstanceSpecificationCode(x, options));
        }
        else {
            this.code = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.SubstanceSpecificationName(x, options));
        }
        else {
            this.name = [];
        }
        if (source['molecularWeight']) {
            this.molecularWeight = source.molecularWeight.map((x) => new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(x, options));
        }
        else {
            this.molecularWeight = [];
        }
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.SubstanceSpecificationRelationship(x, options));
        }
        else {
            this.relationship = [];
        }
        if (source['nucleicAcid']) {
            this.nucleicAcid = new fhir.Reference(source.nucleicAcid, options);
        }
        if (source['polymer']) {
            this.polymer = new fhir.Reference(source.polymer, options);
        }
        if (source['protein']) {
            this.protein = new fhir.Reference(source.protein, options);
        }
        if (source['sourceMaterial']) {
            this.sourceMaterial = new fhir.Reference(source.sourceMaterial, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('domain', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('source', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOA('moiety', exp));
        iss.push(...this.vOA('property', exp));
        iss.push(...this.vOS('referenceInformation', exp));
        iss.push(...this.vOS('structure', exp));
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOA('name', exp));
        iss.push(...this.vOA('molecularWeight', exp));
        iss.push(...this.vOA('relationship', exp));
        iss.push(...this.vOS('nucleicAcid', exp));
        iss.push(...this.vOS('polymer', exp));
        iss.push(...this.vOS('protein', exp));
        iss.push(...this.vOS('sourceMaterial', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecification._fts_dataType = 'SubstanceSpecification';
//# sourceMappingURL=data:application/json;base64,