// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSpecification
import * as fhir from '../fhir.js';
/**
 * Moiety, for structural modifications.
 */
export class SubstanceSpecificationMoiety extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            this.molecularFormula = new fhir.FhirString({ value: source.molecularFormula });
        }
        if (source['_molecularFormula']) {
            if (this.molecularFormula) {
                this.molecularFormula.addExtendedProperties(source._molecularFormula);
            }
            else {
                this.molecularFormula = new fhir.FhirString(source._molecularFormula);
            }
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.moiety';
        }
        this.vOS('role', exp);
        this.vOS('identifier', exp);
        this.vOS('name', exp);
        this.vOS('stereochemistry', exp);
        this.vOS('opticalActivity', exp);
        this.vOS('molecularFormula', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationMoiety._fts_dataType = 'SubstanceSpecificationMoiety';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.moiety.amount[x]
 */
SubstanceSpecificationMoiety._fts_amountIsChoice = true;
/**
 * General specifications for this substance, including how it is related to other substances.
 */
export class SubstanceSpecificationProperty extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['parameters']) {
            this.parameters = new fhir.FhirString({ value: source.parameters });
        }
        if (source['_parameters']) {
            if (this.parameters) {
                this.parameters.addExtendedProperties(source._parameters);
            }
            else {
                this.parameters = new fhir.FhirString(source._parameters);
            }
        }
        if (source['definingSubstance']) {
            this.definingSubstance = source.definingSubstance;
        }
        else if (source['definingSubstanceReference']) {
            this.definingSubstance = new fhir.Reference(source.definingSubstanceReference);
        }
        else if (source['definingSubstanceCodeableConcept']) {
            this.definingSubstance = new fhir.CodeableConcept(source.definingSubstanceCodeableConcept);
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.property';
        }
        this.vOS('category', exp);
        this.vOS('code', exp);
        this.vOS('parameters', exp);
        this.vOS('definingSubstance', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationProperty._fts_dataType = 'SubstanceSpecificationProperty';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.property.definingSubstance[x]
 */
SubstanceSpecificationProperty._fts_definingSubstanceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.property.amount[x]
 */
SubstanceSpecificationProperty._fts_amountIsChoice = true;
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure.isotope.molecularWeight';
        }
        this.vOS('method', exp);
        this.vOS('type', exp);
        this.vOS('amount', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureIsotopeMolecularWeight._fts_dataType = 'SubstanceSpecificationStructureIsotopeMolecularWeight';
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export class SubstanceSpecificationStructureIsotope extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.CodeableConcept(source.name);
        }
        if (source['substitution']) {
            this.substitution = new fhir.CodeableConcept(source.substitution);
        }
        if (source['halfLife']) {
            this.halfLife = new fhir.Quantity(source.halfLife);
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure.isotope';
        }
        this.vOS('identifier', exp);
        this.vOS('name', exp);
        this.vOS('substitution', exp);
        this.vOS('halfLife', exp);
        this.vOS('molecularWeight', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureIsotope._fts_dataType = 'SubstanceSpecificationStructureIsotope';
/**
 * Molecular structural representation.
 */
export class SubstanceSpecificationStructureRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['representation']) {
            this.representation = new fhir.FhirString({ value: source.representation });
        }
        if (source['_representation']) {
            if (this.representation) {
                this.representation.addExtendedProperties(source._representation);
            }
            else {
                this.representation = new fhir.FhirString(source._representation);
            }
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure.representation';
        }
        this.vOS('type', exp);
        this.vOS('representation', exp);
        this.vOS('attachment', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureRepresentation._fts_dataType = 'SubstanceSpecificationStructureRepresentation';
/**
 * Structural information.
 */
export class SubstanceSpecificationStructure extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            this.molecularFormula = new fhir.FhirString({ value: source.molecularFormula });
        }
        if (source['_molecularFormula']) {
            if (this.molecularFormula) {
                this.molecularFormula.addExtendedProperties(source._molecularFormula);
            }
            else {
                this.molecularFormula = new fhir.FhirString(source._molecularFormula);
            }
        }
        if (source['molecularFormulaByMoiety']) {
            this.molecularFormulaByMoiety = new fhir.FhirString({ value: source.molecularFormulaByMoiety });
        }
        if (source['_molecularFormulaByMoiety']) {
            if (this.molecularFormulaByMoiety) {
                this.molecularFormulaByMoiety.addExtendedProperties(source._molecularFormulaByMoiety);
            }
            else {
                this.molecularFormulaByMoiety = new fhir.FhirString(source._molecularFormulaByMoiety);
            }
        }
        if (source['isotope']) {
            this.isotope = source.isotope.map((x) => new fhir.SubstanceSpecificationStructureIsotope(x));
        }
        else {
            this.isotope = [];
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
        if (source['representation']) {
            this.representation = source.representation.map((x) => new fhir.SubstanceSpecificationStructureRepresentation(x));
        }
        else {
            this.representation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.structure';
        }
        this.vOS('stereochemistry', exp);
        this.vOS('opticalActivity', exp);
        this.vOS('molecularFormula', exp);
        this.vOS('molecularFormulaByMoiety', exp);
        this.vOA('isotope', exp);
        this.vOS('molecularWeight', exp);
        this.vOA('source', exp);
        this.vOA('representation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructure._fts_dataType = 'SubstanceSpecificationStructure';
/**
 * Codes associated with the substance.
 */
export class SubstanceSpecificationCode extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDateTime(source._statusDate);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.code';
        }
        this.vOS('code', exp);
        this.vOS('status', exp);
        this.vOS('statusDate', exp);
        this.vOS('comment', exp);
        this.vOA('source', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationCode._fts_dataType = 'SubstanceSpecificationCode';
/**
 * Details of the official nature of this name.
 */
export class SubstanceSpecificationNameOfficial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authority']) {
            this.authority = new fhir.CodeableConcept(source.authority);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.name.official';
        }
        this.vOS('authority', exp);
        this.vOS('status', exp);
        this.vOS('date', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationNameOfficial._fts_dataType = 'SubstanceSpecificationNameOfficial';
/**
 * Names applicable to this substance.
 */
export class SubstanceSpecificationName extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['preferred']) {
            this.preferred = new fhir.FhirBoolean({ value: source.preferred });
        }
        if (source['_preferred']) {
            if (this.preferred) {
                this.preferred.addExtendedProperties(source._preferred);
            }
            else {
                this.preferred = new fhir.FhirBoolean(source._preferred);
            }
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.language = [];
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.domain = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        else {
            this.synonym = [];
        }
        if (source['translation']) {
            this.translation = source.translation.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        else {
            this.translation = [];
        }
        if (source['official']) {
            this.official = source.official.map((x) => new fhir.SubstanceSpecificationNameOfficial(x));
        }
        else {
            this.official = [];
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.name';
        }
        this.vRS('name', exp);
        this.vOS('type', exp);
        this.vOS('status', exp);
        this.vOS('preferred', exp);
        this.vOA('language', exp);
        this.vOA('domain', exp);
        this.vOA('jurisdiction', exp);
        this.vOA('synonym', exp);
        this.vOA('translation', exp);
        this.vOA('official', exp);
        this.vOA('source', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationName._fts_dataType = 'SubstanceSpecificationName';
/**
 * A link between this substance and another, with details of the relationship.
 */
export class SubstanceSpecificationRelationship extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = source.substance;
        }
        else if (source['substanceReference']) {
            this.substance = new fhir.Reference(source.substanceReference);
        }
        else if (source['substanceCodeableConcept']) {
            this.substance = new fhir.CodeableConcept(source.substanceCodeableConcept);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['isDefining']) {
            this.isDefining = new fhir.FhirBoolean({ value: source.isDefining });
        }
        if (source['_isDefining']) {
            if (this.isDefining) {
                this.isDefining.addExtendedProperties(source._isDefining);
            }
            else {
                this.isDefining = new fhir.FhirBoolean(source._isDefining);
            }
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            this.amount = new fhir.Range(source.amountRange);
        }
        else if (source['amountRatio']) {
            this.amount = new fhir.Ratio(source.amountRatio);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
        if (source['amountRatioLowLimit']) {
            this.amountRatioLowLimit = new fhir.Ratio(source.amountRatioLowLimit);
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification.relationship';
        }
        this.vOS('substance', exp);
        this.vOS('relationship', exp);
        this.vOS('isDefining', exp);
        this.vOS('amount', exp);
        this.vOS('amountRatioLowLimit', exp);
        this.vOS('amountType', exp);
        this.vOA('source', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationRelationship._fts_dataType = 'SubstanceSpecificationRelationship';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.substance[x]
 */
SubstanceSpecificationRelationship._fts_substanceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.amount[x]
 */
SubstanceSpecificationRelationship._fts_amountIsChoice = true;
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export class SubstanceSpecification extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceSpecification';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['domain']) {
            this.domain = new fhir.CodeableConcept(source.domain);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['moiety']) {
            this.moiety = source.moiety.map((x) => new fhir.SubstanceSpecificationMoiety(x));
        }
        else {
            this.moiety = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.SubstanceSpecificationProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['referenceInformation']) {
            this.referenceInformation = new fhir.Reference(source.referenceInformation);
        }
        if (source['structure']) {
            this.structure = new fhir.SubstanceSpecificationStructure(source.structure);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.SubstanceSpecificationCode(x));
        }
        else {
            this.code = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        else {
            this.name = [];
        }
        if (source['molecularWeight']) {
            this.molecularWeight = source.molecularWeight.map((x) => new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(x));
        }
        else {
            this.molecularWeight = [];
        }
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.SubstanceSpecificationRelationship(x));
        }
        else {
            this.relationship = [];
        }
        if (source['nucleicAcid']) {
            this.nucleicAcid = new fhir.Reference(source.nucleicAcid);
        }
        if (source['polymer']) {
            this.polymer = new fhir.Reference(source.polymer);
        }
        if (source['protein']) {
            this.protein = new fhir.Reference(source.protein);
        }
        if (source['sourceMaterial']) {
            this.sourceMaterial = new fhir.Reference(source.sourceMaterial);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSpecification';
        }
        this.vRS('resourceType', exp);
        this.vOS('identifier', exp);
        this.vOS('type', exp);
        this.vOS('status', exp);
        this.vOS('domain', exp);
        this.vOS('description', exp);
        this.vOA('source', exp);
        this.vOS('comment', exp);
        this.vOA('moiety', exp);
        this.vOA('property', exp);
        this.vOS('referenceInformation', exp);
        this.vOS('structure', exp);
        this.vOA('code', exp);
        this.vOA('name', exp);
        this.vOA('molecularWeight', exp);
        this.vOA('relationship', exp);
        this.vOS('nucleicAcid', exp);
        this.vOS('polymer', exp);
        this.vOS('protein', exp);
        this.vOS('sourceMaterial', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecification._fts_dataType = 'SubstanceSpecification';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx3Q0FBd0M7QUFFeEMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFvRG5DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE2QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBcUNwRTs7T0FFRztJQUNILFlBQVksU0FBbUQsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDekcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUFFO1FBQzFFLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQUU7UUFDdkYsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzlFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25CLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxLQUFNLENBQUMsQ0FBQzthQUFFO2lCQUM3RDtnQkFBRSxJQUFJLENBQUMsSUFB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QUM7O0FBeEpEOztHQUVHO0FBQzZCLG9DQUFhLEdBQVUsd0JBQXdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IFN1YnN0YW5jZVNwZWNpZmljYXRpb25cclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk1vaWV0eSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTW9pZXR5QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogUm9sZSB0aGF0IHRoZSBtb2lldHkgaXMgcGxheWluZy5cclxuICAgKi9cclxuICByb2xlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGJ5IHdoaWNoIHRoaXMgbW9pZXR5IHN1YnN0YW5jZSBpcyBrbm93bi5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGV4dHVhbCBuYW1lIGZvciB0aGlzIG1vaWV0eSBzdWJzdGFuY2UuXHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uLm1vaWV0eS5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFN0ZXJlb2NoZW1pc3RyeSB0eXBlLlxyXG4gICAqL1xyXG4gIHN0ZXJlb2NoZW1pc3RyeT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT3B0aWNhbCBhY3Rpdml0eSB0eXBlLlxyXG4gICAqL1xyXG4gIG9wdGljYWxBY3Rpdml0eT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9sZWN1bGFyIGZvcm11bGEuXHJcbiAgICovXHJcbiAgbW9sZWN1bGFyRm9ybXVsYT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uLm1vaWV0eS5tb2xlY3VsYXJGb3JtdWxhXHJcbiAgICovXHJcbiAgX21vbGVjdWxhckZvcm11bGE/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFF1YW50aXRhdGl2ZSB2YWx1ZSBmb3IgdGhpcyBtb2lldHkuXHJcbiAgICovXHJcbiAgYW1vdW50PzogZmhpci5RdWFudGl0eXxmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFF1YW50aXRhdGl2ZSB2YWx1ZSBmb3IgdGhpcyBtb2lldHkuXHJcbiAgICovXHJcbiAgYW1vdW50UXVhbnRpdHk/OiBmaGlyLlF1YW50aXR5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUXVhbnRpdGF0aXZlIHZhbHVlIGZvciB0aGlzIG1vaWV0eS5cclxuICAgKi9cclxuICBhbW91bnRTdHJpbmc/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1vaWV0eSwgZm9yIHN0cnVjdHVyYWwgbW9kaWZpY2F0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTW9pZXR5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk1vaWV0eSc7XHJcbiAgLyoqXHJcbiAgICogUm9sZSB0aGF0IHRoZSBtb2lldHkgaXMgcGxheWluZy5cclxuICAgKi9cclxuICBwdWJsaWMgcm9sZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGJ5IHdoaWNoIHRoaXMgbW9pZXR5IHN1YnN0YW5jZSBpcyBrbm93bi5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGV4dHVhbCBuYW1lIGZvciB0aGlzIG1vaWV0eSBzdWJzdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN0ZXJlb2NoZW1pc3RyeSB0eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVyZW9jaGVtaXN0cnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT3B0aWNhbCBhY3Rpdml0eSB0eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvcHRpY2FsQWN0aXZpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9sZWN1bGFyIGZvcm11bGEuXHJcbiAgICovXHJcbiAgcHVibGljIG1vbGVjdWxhckZvcm11bGE/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFF1YW50aXRhdGl2ZSB2YWx1ZSBmb3IgdGhpcyBtb2lldHkuXHJcbiAgICovXHJcbiAgcHVibGljIGFtb3VudD86IChmaGlyLlF1YW50aXR5fGZoaXIuRmhpclN0cmluZyl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5tb2lldHkuYW1vdW50W3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX2Ftb3VudElzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFN1YnN0YW5jZVNwZWNpZmljYXRpb25Nb2lldHkgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTW9pZXR5QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3JvbGUnXSkgeyB0aGlzLnJvbGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnJvbGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UuaWRlbnRpZmllcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX25hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYW1lKSB7IHRoaXMubmFtZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9uYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9uYW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzdGVyZW9jaGVtaXN0cnknXSkgeyB0aGlzLnN0ZXJlb2NoZW1pc3RyeSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uuc3RlcmVvY2hlbWlzdHJ5KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb3B0aWNhbEFjdGl2aXR5J10pIHsgdGhpcy5vcHRpY2FsQWN0aXZpdHkgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLm9wdGljYWxBY3Rpdml0eSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ21vbGVjdWxhckZvcm11bGEnXSkgeyB0aGlzLm1vbGVjdWxhckZvcm11bGEgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm1vbGVjdWxhckZvcm11bGF9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX21vbGVjdWxhckZvcm11bGEnXSkge1xyXG4gICAgICBpZiAodGhpcy5tb2xlY3VsYXJGb3JtdWxhKSB7IHRoaXMubW9sZWN1bGFyRm9ybXVsYS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9tb2xlY3VsYXJGb3JtdWxhISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubW9sZWN1bGFyRm9ybXVsYSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9tb2xlY3VsYXJGb3JtdWxhIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhbW91bnQnXSkgeyB0aGlzLmFtb3VudCA9IHNvdXJjZS5hbW91bnQ7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnYW1vdW50UXVhbnRpdHknXSkgeyB0aGlzLmFtb3VudCA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5hbW91bnRRdWFudGl0eSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnYW1vdW50U3RyaW5nJ10pIHsgdGhpcy5hbW91bnQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmFtb3VudFN0cmluZ30pOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5tb2lldHknIH1cclxuICAgIHRoaXMudk9TKCdyb2xlJyxleHApXHJcbiAgICB0aGlzLnZPUygnaWRlbnRpZmllcicsZXhwKVxyXG4gICAgdGhpcy52T1MoJ25hbWUnLGV4cClcclxuICAgIHRoaXMudk9TKCdzdGVyZW9jaGVtaXN0cnknLGV4cClcclxuICAgIHRoaXMudk9TKCdvcHRpY2FsQWN0aXZpdHknLGV4cClcclxuICAgIHRoaXMudk9TKCdtb2xlY3VsYXJGb3JtdWxhJyxleHApXHJcbiAgICB0aGlzLnZPUygnYW1vdW50JyxleHApXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblByb3BlcnR5IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN1YnN0YW5jZVNwZWNpZmljYXRpb25Qcm9wZXJ0eUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEEgY2F0ZWdvcnkgZm9yIHRoaXMgcHJvcGVydHksIGUuZy4gUGh5c2ljYWwsIENoZW1pY2FsLCBFbnp5bWF0aWMuXHJcbiAgICovXHJcbiAgY2F0ZWdvcnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFByb3BlcnR5IHR5cGUgZS5nLiB2aXNjb3NpdHksIHBILCBpc29lbGVjdHJpYyBwb2ludC5cclxuICAgKi9cclxuICBjb2RlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYXJhbWV0ZXJzIHRoYXQgd2VyZSB1c2VkIGluIHRoZSBtZWFzdXJlbWVudCBvZiBhIHByb3BlcnR5IChlLmcuIGZvciB2aXNjb3NpdHk6IG1lYXN1cmVkIGF0IDIwQyB3aXRoIGEgcEggb2YgNy4xKS5cclxuICAgKi9cclxuICBwYXJhbWV0ZXJzPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnN0YW5jZVNwZWNpZmljYXRpb24ucHJvcGVydHkucGFyYW1ldGVyc1xyXG4gICAqL1xyXG4gIF9wYXJhbWV0ZXJzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBIHN1YnN0YW5jZSB1cG9uIHdoaWNoIGEgZGVmaW5pbmcgcHJvcGVydHkgZGVwZW5kcyAoZS5nLiBmb3Igc29sdWJpbGl0eTogaW4gd2F0ZXIsIGluIGFsY29ob2wpLlxyXG4gICAqL1xyXG4gIGRlZmluaW5nU3Vic3RhbmNlPzogZmhpci5SZWZlcmVuY2V8Zmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc3Vic3RhbmNlIHVwb24gd2hpY2ggYSBkZWZpbmluZyBwcm9wZXJ0eSBkZXBlbmRzIChlLmcuIGZvciBzb2x1YmlsaXR5OiBpbiB3YXRlciwgaW4gYWxjb2hvbCkuXHJcbiAgICovXHJcbiAgZGVmaW5pbmdTdWJzdGFuY2VSZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc3Vic3RhbmNlIHVwb24gd2hpY2ggYSBkZWZpbmluZyBwcm9wZXJ0eSBkZXBlbmRzIChlLmcuIGZvciBzb2x1YmlsaXR5OiBpbiB3YXRlciwgaW4gYWxjb2hvbCkuXHJcbiAgICovXHJcbiAgZGVmaW5pbmdTdWJzdGFuY2VDb2RlYWJsZUNvbmNlcHQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFF1YW50aXRhdGl2ZSB2YWx1ZSBmb3IgdGhpcyBwcm9wZXJ0eS5cclxuICAgKi9cclxuICBhbW91bnQ/OiBmaGlyLlF1YW50aXR5fGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUXVhbnRpdGF0aXZlIHZhbHVlIGZvciB0aGlzIHByb3BlcnR5LlxyXG4gICAqL1xyXG4gIGFtb3VudFF1YW50aXR5PzogZmhpci5RdWFudGl0eUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFF1YW50aXRhdGl2ZSB2YWx1ZSBmb3IgdGhpcyBwcm9wZXJ0eS5cclxuICAgKi9cclxuICBhbW91bnRTdHJpbmc/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYWwgc3BlY2lmaWNhdGlvbnMgZm9yIHRoaXMgc3Vic3RhbmNlLCBpbmNsdWRpbmcgaG93IGl0IGlzIHJlbGF0ZWQgdG8gb3RoZXIgc3Vic3RhbmNlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uUHJvcGVydHkgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdTdWJzdGFuY2VTcGVjaWZpY2F0aW9uUHJvcGVydHknO1xyXG4gIC8qKlxyXG4gICAqIEEgY2F0ZWdvcnkgZm9yIHRoaXMgcHJvcGVydHksIGUuZy4gUGh5c2ljYWwsIENoZW1pY2FsLCBFbnp5bWF0aWMuXHJcbiAgICovXHJcbiAgcHVibGljIGNhdGVnb3J5PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFByb3BlcnR5IHR5cGUgZS5nLiB2aXNjb3NpdHksIHBILCBpc29lbGVjdHJpYyBwb2ludC5cclxuICAgKi9cclxuICBwdWJsaWMgY29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQYXJhbWV0ZXJzIHRoYXQgd2VyZSB1c2VkIGluIHRoZSBtZWFzdXJlbWVudCBvZiBhIHByb3BlcnR5IChlLmcuIGZvciB2aXNjb3NpdHk6IG1lYXN1cmVkIGF0IDIwQyB3aXRoIGEgcEggb2YgNy4xKS5cclxuICAgKi9cclxuICBwdWJsaWMgcGFyYW1ldGVycz86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzdWJzdGFuY2UgdXBvbiB3aGljaCBhIGRlZmluaW5nIHByb3BlcnR5IGRlcGVuZHMgKGUuZy4gZm9yIHNvbHViaWxpdHk6IGluIHdhdGVyLCBpbiBhbGNvaG9sKS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVmaW5pbmdTdWJzdGFuY2U/OiAoZmhpci5SZWZlcmVuY2V8Zmhpci5Db2RlYWJsZUNvbmNlcHQpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IFN1YnN0YW5jZVNwZWNpZmljYXRpb24ucHJvcGVydHkuZGVmaW5pbmdTdWJzdGFuY2VbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfZGVmaW5pbmdTdWJzdGFuY2VJc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBRdWFudGl0YXRpdmUgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuXHJcbiAgICovXHJcbiAgcHVibGljIGFtb3VudD86IChmaGlyLlF1YW50aXR5fGZoaXIuRmhpclN0cmluZyl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5wcm9wZXJ0eS5hbW91bnRbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfYW1vdW50SXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblByb3BlcnR5IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8U3Vic3RhbmNlU3BlY2lmaWNhdGlvblByb3BlcnR5QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2NhdGVnb3J5J10pIHsgdGhpcy5jYXRlZ29yeSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY2F0ZWdvcnkpOyB9XHJcbiAgICBpZiAoc291cmNlWydjb2RlJ10pIHsgdGhpcy5jb2RlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5jb2RlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGFyYW1ldGVycyddKSB7IHRoaXMucGFyYW1ldGVycyA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGFyYW1ldGVyc30pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcGFyYW1ldGVycyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMpIHsgdGhpcy5wYXJhbWV0ZXJzLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3BhcmFtZXRlcnMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wYXJhbWV0ZXJzID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3BhcmFtZXRlcnMgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2RlZmluaW5nU3Vic3RhbmNlJ10pIHsgdGhpcy5kZWZpbmluZ1N1YnN0YW5jZSA9IHNvdXJjZS5kZWZpbmluZ1N1YnN0YW5jZTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydkZWZpbmluZ1N1YnN0YW5jZVJlZmVyZW5jZSddKSB7IHRoaXMuZGVmaW5pbmdTdWJzdGFuY2UgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmRlZmluaW5nU3Vic3RhbmNlUmVmZXJlbmNlKTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydkZWZpbmluZ1N1YnN0YW5jZUNvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuZGVmaW5pbmdTdWJzdGFuY2UgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmRlZmluaW5nU3Vic3RhbmNlQ29kZWFibGVDb25jZXB0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYW1vdW50J10pIHsgdGhpcy5hbW91bnQgPSBzb3VyY2UuYW1vdW50OyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ2Ftb3VudFF1YW50aXR5J10pIHsgdGhpcy5hbW91bnQgPSBuZXcgZmhpci5RdWFudGl0eShzb3VyY2UuYW1vdW50UXVhbnRpdHkpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ2Ftb3VudFN0cmluZyddKSB7IHRoaXMuYW1vdW50ID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5hbW91bnRTdHJpbmd9KTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb24ucHJvcGVydHknIH1cclxuICAgIHRoaXMudk9TKCdjYXRlZ29yeScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2NvZGUnLGV4cClcclxuICAgIHRoaXMudk9TKCdwYXJhbWV0ZXJzJyxleHApXHJcbiAgICB0aGlzLnZPUygnZGVmaW5pbmdTdWJzdGFuY2UnLGV4cClcclxuICAgIHRoaXMudk9TKCdhbW91bnQnLGV4cClcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlSXNvdG9wZU1vbGVjdWxhcldlaWdodCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlSXNvdG9wZU1vbGVjdWxhcldlaWdodEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtZXRob2QgYnkgd2hpY2ggdGhlIG1vbGVjdWxhciB3ZWlnaHQgd2FzIGRldGVybWluZWQuXHJcbiAgICovXHJcbiAgbWV0aG9kPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUeXBlIG9mIG1vbGVjdWxhciB3ZWlnaHQgc3VjaCBhcyBleGFjdCwgYXZlcmFnZSAoYWxzbyBrbm93biBhcy4gbnVtYmVyIGF2ZXJhZ2UpLCB3ZWlnaHQgYXZlcmFnZS5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc2VkIHRvIGNhcHR1cmUgcXVhbnRpdGF0aXZlIHZhbHVlcyBmb3IgYSB2YXJpZXR5IG9mIGVsZW1lbnRzLiBJZiBvbmx5IGxpbWl0cyBhcmUgZ2l2ZW4sIHRoZSBhcml0aG1ldGljIG1lYW4gd291bGQgYmUgdGhlIGF2ZXJhZ2UuIElmIG9ubHkgYSBzaW5nbGUgZGVmaW5pdGUgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudCBpcyBnaXZlbiwgaXQgd291bGQgYmUgY2FwdHVyZWQgaW4gdGhpcyBmaWVsZC5cclxuICAgKi9cclxuICBhbW91bnQ/OiBmaGlyLlF1YW50aXR5QXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbW9sZWN1bGFyIHdlaWdodCBvciB3ZWlnaHQgcmFuZ2UgKGZvciBwcm90ZWlucywgcG9seW1lcnMgb3IgbnVjbGVpYyBhY2lkcykuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZUlzb3RvcGVNb2xlY3VsYXJXZWlnaHQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlSXNvdG9wZU1vbGVjdWxhcldlaWdodCc7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1ldGhvZCBieSB3aGljaCB0aGUgbW9sZWN1bGFyIHdlaWdodCB3YXMgZGV0ZXJtaW5lZC5cclxuICAgKi9cclxuICBwdWJsaWMgbWV0aG9kPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFR5cGUgb2YgbW9sZWN1bGFyIHdlaWdodCBzdWNoIGFzIGV4YWN0LCBhdmVyYWdlIChhbHNvIGtub3duIGFzLiBudW1iZXIgYXZlcmFnZSksIHdlaWdodCBhdmVyYWdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gY2FwdHVyZSBxdWFudGl0YXRpdmUgdmFsdWVzIGZvciBhIHZhcmlldHkgb2YgZWxlbWVudHMuIElmIG9ubHkgbGltaXRzIGFyZSBnaXZlbiwgdGhlIGFyaXRobWV0aWMgbWVhbiB3b3VsZCBiZSB0aGUgYXZlcmFnZS4gSWYgb25seSBhIHNpbmdsZSBkZWZpbml0ZSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50IGlzIGdpdmVuLCBpdCB3b3VsZCBiZSBjYXB0dXJlZCBpbiB0aGlzIGZpZWxkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhbW91bnQ/OiBmaGlyLlF1YW50aXR5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlSXNvdG9wZU1vbGVjdWxhcldlaWdodCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlTW9sZWN1bGFyV2VpZ2h0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ21ldGhvZCddKSB7IHRoaXMubWV0aG9kID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5tZXRob2QpOyB9XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50eXBlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYW1vdW50J10pIHsgdGhpcy5hbW91bnQgPSBuZXcgZmhpci5RdWFudGl0eShzb3VyY2UuYW1vdW50KTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb24uc3RydWN0dXJlLmlzb3RvcGUubW9sZWN1bGFyV2VpZ2h0JyB9XHJcbiAgICB0aGlzLnZPUygnbWV0aG9kJyxleHApXHJcbiAgICB0aGlzLnZPUygndHlwZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2Ftb3VudCcsZXhwKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogU3Vic3RhbmNlIGlkZW50aWZpZXIgZm9yIGVhY2ggbm9uLW5hdHVyYWwgb3IgcmFkaW9pc290b3BlLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdWJzdGFuY2UgbmFtZSBmb3IgZWFjaCBub24tbmF0dXJhbCBvciByYWRpb2lzb3RvcGUuXHJcbiAgICovXHJcbiAgbmFtZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgaXNvdG9waWMgc3Vic3RpdHV0aW9uIHByZXNlbnQgaW4gYSBzaW5nbGUgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIHN1YnN0aXR1dGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSGFsZiBsaWZlIC0gZm9yIGEgbm9uLW5hdHVyYWwgbnVjbGlkZS5cclxuICAgKi9cclxuICBoYWxmTGlmZT86IGZoaXIuUXVhbnRpdHlBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbW9sZWN1bGFyIHdlaWdodCBvciB3ZWlnaHQgcmFuZ2UgKGZvciBwcm90ZWlucywgcG9seW1lcnMgb3IgbnVjbGVpYyBhY2lkcykuXHJcbiAgICovXHJcbiAgbW9sZWN1bGFyV2VpZ2h0PzogZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlSXNvdG9wZU1vbGVjdWxhcldlaWdodEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQXBwbGljYWJsZSBmb3Igc2luZ2xlIHN1YnN0YW5jZXMgdGhhdCBjb250YWluIGEgcmFkaW9udWNsaWRlIG9yIGEgbm9uLW5hdHVyYWwgaXNvdG9waWMgcmF0aW8uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZUlzb3RvcGUgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlSXNvdG9wZSc7XHJcbiAgLyoqXHJcbiAgICogU3Vic3RhbmNlIGlkZW50aWZpZXIgZm9yIGVhY2ggbm9uLW5hdHVyYWwgb3IgcmFkaW9pc290b3BlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdWJzdGFuY2UgbmFtZSBmb3IgZWFjaCBub24tbmF0dXJhbCBvciByYWRpb2lzb3RvcGUuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgaXNvdG9waWMgc3Vic3RpdHV0aW9uIHByZXNlbnQgaW4gYSBzaW5nbGUgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJzdGl0dXRpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSGFsZiBsaWZlIC0gZm9yIGEgbm9uLW5hdHVyYWwgbnVjbGlkZS5cclxuICAgKi9cclxuICBwdWJsaWMgaGFsZkxpZmU/OiBmaGlyLlF1YW50aXR5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbW9sZWN1bGFyIHdlaWdodCBvciB3ZWlnaHQgcmFuZ2UgKGZvciBwcm90ZWlucywgcG9seW1lcnMgb3IgbnVjbGVpYyBhY2lkcykuXHJcbiAgICovXHJcbiAgcHVibGljIG1vbGVjdWxhcldlaWdodD86IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZUlzb3RvcGVNb2xlY3VsYXJXZWlnaHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8U3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZUlzb3RvcGVBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IG5ldyBmaGlyLklkZW50aWZpZXIoc291cmNlLmlkZW50aWZpZXIpOyB9XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5uYW1lKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3Vic3RpdHV0aW9uJ10pIHsgdGhpcy5zdWJzdGl0dXRpb24gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnN1YnN0aXR1dGlvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2hhbGZMaWZlJ10pIHsgdGhpcy5oYWxmTGlmZSA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5oYWxmTGlmZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ21vbGVjdWxhcldlaWdodCddKSB7IHRoaXMubW9sZWN1bGFyV2VpZ2h0ID0gbmV3IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZUlzb3RvcGVNb2xlY3VsYXJXZWlnaHQoc291cmNlLm1vbGVjdWxhcldlaWdodCk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdTdWJzdGFuY2VTcGVjaWZpY2F0aW9uLnN0cnVjdHVyZS5pc290b3BlJyB9XHJcbiAgICB0aGlzLnZPUygnaWRlbnRpZmllcicsZXhwKVxyXG4gICAgdGhpcy52T1MoJ25hbWUnLGV4cClcclxuICAgIHRoaXMudk9TKCdzdWJzdGl0dXRpb24nLGV4cClcclxuICAgIHRoaXMudk9TKCdoYWxmTGlmZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ21vbGVjdWxhcldlaWdodCcsZXhwKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVSZXByZXNlbnRhdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlUmVwcmVzZW50YXRpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBzdHJ1Y3R1cmUgKGUuZy4gRnVsbCwgUGFydGlhbCwgUmVwcmVzZW50YXRpdmUpLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdHJ1Y3R1cmFsIHJlcHJlc2VudGF0aW9uIGFzIHRleHQgc3RyaW5nIGluIGEgZm9ybWF0IGUuZy4gSW5DaEksIFNNSUxFUywgTU9MRklMRSwgQ0RYLlxyXG4gICAqL1xyXG4gIHJlcHJlc2VudGF0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnN0YW5jZVNwZWNpZmljYXRpb24uc3RydWN0dXJlLnJlcHJlc2VudGF0aW9uLnJlcHJlc2VudGF0aW9uXHJcbiAgICovXHJcbiAgX3JlcHJlc2VudGF0aW9uPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBBbiBhdHRhY2hlZCBmaWxlIHdpdGggdGhlIHN0cnVjdHVyYWwgcmVwcmVzZW50YXRpb24uXHJcbiAgICovXHJcbiAgYXR0YWNobWVudD86IGZoaXIuQXR0YWNobWVudEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogTW9sZWN1bGFyIHN0cnVjdHVyYWwgcmVwcmVzZW50YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZVJlcHJlc2VudGF0aW9uIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZVJlcHJlc2VudGF0aW9uJztcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBzdHJ1Y3R1cmUgKGUuZy4gRnVsbCwgUGFydGlhbCwgUmVwcmVzZW50YXRpdmUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdHJ1Y3R1cmFsIHJlcHJlc2VudGF0aW9uIGFzIHRleHQgc3RyaW5nIGluIGEgZm9ybWF0IGUuZy4gSW5DaEksIFNNSUxFUywgTU9MRklMRSwgQ0RYLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXByZXNlbnRhdGlvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQW4gYXR0YWNoZWQgZmlsZSB3aXRoIHRoZSBzdHJ1Y3R1cmFsIHJlcHJlc2VudGF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhdHRhY2htZW50PzogZmhpci5BdHRhY2htZW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlUmVwcmVzZW50YXRpb24gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlUmVwcmVzZW50YXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcHJlc2VudGF0aW9uJ10pIHsgdGhpcy5yZXByZXNlbnRhdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucmVwcmVzZW50YXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3JlcHJlc2VudGF0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMucmVwcmVzZW50YXRpb24pIHsgdGhpcy5yZXByZXNlbnRhdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZXByZXNlbnRhdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnJlcHJlc2VudGF0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3JlcHJlc2VudGF0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydhdHRhY2htZW50J10pIHsgdGhpcy5hdHRhY2htZW50ID0gbmV3IGZoaXIuQXR0YWNobWVudChzb3VyY2UuYXR0YWNobWVudCk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdTdWJzdGFuY2VTcGVjaWZpY2F0aW9uLnN0cnVjdHVyZS5yZXByZXNlbnRhdGlvbicgfVxyXG4gICAgdGhpcy52T1MoJ3R5cGUnLGV4cClcclxuICAgIHRoaXMudk9TKCdyZXByZXNlbnRhdGlvbicsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2F0dGFjaG1lbnQnLGV4cClcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBTdGVyZW9jaGVtaXN0cnkgdHlwZS5cclxuICAgKi9cclxuICBzdGVyZW9jaGVtaXN0cnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE9wdGljYWwgYWN0aXZpdHkgdHlwZS5cclxuICAgKi9cclxuICBvcHRpY2FsQWN0aXZpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1vbGVjdWxhciBmb3JtdWxhLlxyXG4gICAqL1xyXG4gIG1vbGVjdWxhckZvcm11bGE/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5zdHJ1Y3R1cmUubW9sZWN1bGFyRm9ybXVsYVxyXG4gICAqL1xyXG4gIF9tb2xlY3VsYXJGb3JtdWxhPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBTcGVjaWZpZWQgcGVyIG1vaWV0eSBhY2NvcmRpbmcgdG8gdGhlIEhpbGwgc3lzdGVtLCBpLmUuIGZpcnN0IEMsIHRoZW4gSCwgdGhlbiBhbHBoYWJldGljYWwsIGVhY2ggbW9pZXR5IHNlcGFyYXRlZCBieSBhIGRvdC5cclxuICAgKi9cclxuICBtb2xlY3VsYXJGb3JtdWxhQnlNb2lldHk/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5zdHJ1Y3R1cmUubW9sZWN1bGFyRm9ybXVsYUJ5TW9pZXR5XHJcbiAgICovXHJcbiAgX21vbGVjdWxhckZvcm11bGFCeU1vaWV0eT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQXBwbGljYWJsZSBmb3Igc2luZ2xlIHN1YnN0YW5jZXMgdGhhdCBjb250YWluIGEgcmFkaW9udWNsaWRlIG9yIGEgbm9uLW5hdHVyYWwgaXNvdG9waWMgcmF0aW8uXHJcbiAgICovXHJcbiAgaXNvdG9wZT86IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZUlzb3RvcGVBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtb2xlY3VsYXIgd2VpZ2h0IG9yIHdlaWdodCByYW5nZSAoZm9yIHByb3RlaW5zLCBwb2x5bWVycyBvciBudWNsZWljIGFjaWRzKS5cclxuICAgKi9cclxuICBtb2xlY3VsYXJXZWlnaHQ/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlTW9sZWN1bGFyV2VpZ2h0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBsaXRlcmF0dXJlLlxyXG4gICAqL1xyXG4gIHNvdXJjZT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNb2xlY3VsYXIgc3RydWN0dXJhbCByZXByZXNlbnRhdGlvbi5cclxuICAgKi9cclxuICByZXByZXNlbnRhdGlvbj86IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZVJlcHJlc2VudGF0aW9uQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0cnVjdHVyYWwgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmUnO1xyXG4gIC8qKlxyXG4gICAqIFN0ZXJlb2NoZW1pc3RyeSB0eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVyZW9jaGVtaXN0cnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogT3B0aWNhbCBhY3Rpdml0eSB0eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvcHRpY2FsQWN0aXZpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTW9sZWN1bGFyIGZvcm11bGEuXHJcbiAgICovXHJcbiAgcHVibGljIG1vbGVjdWxhckZvcm11bGE/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmllZCBwZXIgbW9pZXR5IGFjY29yZGluZyB0byB0aGUgSGlsbCBzeXN0ZW0sIGkuZS4gZmlyc3QgQywgdGhlbiBILCB0aGVuIGFscGhhYmV0aWNhbCwgZWFjaCBtb2lldHkgc2VwYXJhdGVkIGJ5IGEgZG90LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb2xlY3VsYXJGb3JtdWxhQnlNb2lldHk/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFwcGxpY2FibGUgZm9yIHNpbmdsZSBzdWJzdGFuY2VzIHRoYXQgY29udGFpbiBhIHJhZGlvbnVjbGlkZSBvciBhIG5vbi1uYXR1cmFsIGlzb3RvcGljIHJhdGlvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc290b3BlOiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlW107XHJcbiAgLyoqXHJcbiAgICogVGhlIG1vbGVjdWxhciB3ZWlnaHQgb3Igd2VpZ2h0IHJhbmdlIChmb3IgcHJvdGVpbnMsIHBvbHltZXJzIG9yIG51Y2xlaWMgYWNpZHMpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb2xlY3VsYXJXZWlnaHQ/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlTW9sZWN1bGFyV2VpZ2h0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdXBwb3J0aW5nIGxpdGVyYXR1cmUuXHJcbiAgICovXHJcbiAgcHVibGljIHNvdXJjZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBNb2xlY3VsYXIgc3RydWN0dXJhbCByZXByZXNlbnRhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVwcmVzZW50YXRpb246IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZVJlcHJlc2VudGF0aW9uW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnc3RlcmVvY2hlbWlzdHJ5J10pIHsgdGhpcy5zdGVyZW9jaGVtaXN0cnkgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnN0ZXJlb2NoZW1pc3RyeSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ29wdGljYWxBY3Rpdml0eSddKSB7IHRoaXMub3B0aWNhbEFjdGl2aXR5ID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5vcHRpY2FsQWN0aXZpdHkpOyB9XHJcbiAgICBpZiAoc291cmNlWydtb2xlY3VsYXJGb3JtdWxhJ10pIHsgdGhpcy5tb2xlY3VsYXJGb3JtdWxhID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5tb2xlY3VsYXJGb3JtdWxhfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19tb2xlY3VsYXJGb3JtdWxhJ10pIHtcclxuICAgICAgaWYgKHRoaXMubW9sZWN1bGFyRm9ybXVsYSkgeyB0aGlzLm1vbGVjdWxhckZvcm11bGEuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbW9sZWN1bGFyRm9ybXVsYSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm1vbGVjdWxhckZvcm11bGEgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fbW9sZWN1bGFyRm9ybXVsYSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbW9sZWN1bGFyRm9ybXVsYUJ5TW9pZXR5J10pIHsgdGhpcy5tb2xlY3VsYXJGb3JtdWxhQnlNb2lldHkgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm1vbGVjdWxhckZvcm11bGFCeU1vaWV0eX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfbW9sZWN1bGFyRm9ybXVsYUJ5TW9pZXR5J10pIHtcclxuICAgICAgaWYgKHRoaXMubW9sZWN1bGFyRm9ybXVsYUJ5TW9pZXR5KSB7IHRoaXMubW9sZWN1bGFyRm9ybXVsYUJ5TW9pZXR5LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX21vbGVjdWxhckZvcm11bGFCeU1vaWV0eSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLm1vbGVjdWxhckZvcm11bGFCeU1vaWV0eSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9tb2xlY3VsYXJGb3JtdWxhQnlNb2lldHkgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2lzb3RvcGUnXSkgeyB0aGlzLmlzb3RvcGUgPSBzb3VyY2UuaXNvdG9wZS5tYXAoKHgpID0+IG5ldyBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaXNvdG9wZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtb2xlY3VsYXJXZWlnaHQnXSkgeyB0aGlzLm1vbGVjdWxhcldlaWdodCA9IG5ldyBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlTW9sZWN1bGFyV2VpZ2h0KHNvdXJjZS5tb2xlY3VsYXJXZWlnaHQpOyB9XHJcbiAgICBpZiAoc291cmNlWydzb3VyY2UnXSkgeyB0aGlzLnNvdXJjZSA9IHNvdXJjZS5zb3VyY2UubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zb3VyY2UgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVwcmVzZW50YXRpb24nXSkgeyB0aGlzLnJlcHJlc2VudGF0aW9uID0gc291cmNlLnJlcHJlc2VudGF0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZVJlcHJlc2VudGF0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVwcmVzZW50YXRpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb24uc3RydWN0dXJlJyB9XHJcbiAgICB0aGlzLnZPUygnc3RlcmVvY2hlbWlzdHJ5JyxleHApXHJcbiAgICB0aGlzLnZPUygnb3B0aWNhbEFjdGl2aXR5JyxleHApXHJcbiAgICB0aGlzLnZPUygnbW9sZWN1bGFyRm9ybXVsYScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ21vbGVjdWxhckZvcm11bGFCeU1vaWV0eScsZXhwKVxyXG4gICAgdGhpcy52T0EoJ2lzb3RvcGUnLGV4cClcclxuICAgIHRoaXMudk9TKCdtb2xlY3VsYXJXZWlnaHQnLGV4cClcclxuICAgIHRoaXMudk9BKCdzb3VyY2UnLGV4cClcclxuICAgIHRoaXMudk9BKCdyZXByZXNlbnRhdGlvbicsZXhwKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFN1YnN0YW5jZVNwZWNpZmljYXRpb25Db2RlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN1YnN0YW5jZVNwZWNpZmljYXRpb25Db2RlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNwZWNpZmljIGNvZGUuXHJcbiAgICovXHJcbiAgY29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3RhdHVzIG9mIHRoZSBjb2RlIGFzc2lnbm1lbnQuXHJcbiAgICovXHJcbiAgc3RhdHVzPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGF0ZSBhdCB3aGljaCB0aGUgY29kZSBzdGF0dXMgaXMgY2hhbmdlZCBhcyBwYXJ0IG9mIHRoZSB0ZXJtaW5vbG9neSBtYWludGVuYW5jZS5cclxuICAgKi9cclxuICBzdGF0dXNEYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5jb2RlLnN0YXR1c0RhdGVcclxuICAgKi9cclxuICBfc3RhdHVzRGF0ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQW55IGNvbW1lbnQgY2FuIGJlIHByb3ZpZGVkIGluIHRoaXMgZmllbGQsIGlmIG5lY2Vzc2FyeS5cclxuICAgKi9cclxuICBjb21tZW50PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnN0YW5jZVNwZWNpZmljYXRpb24uY29kZS5jb21tZW50XHJcbiAgICovXHJcbiAgX2NvbW1lbnQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFN1cHBvcnRpbmcgbGl0ZXJhdHVyZS5cclxuICAgKi9cclxuICBzb3VyY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb2RlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHN1YnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uQ29kZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb25Db2RlJztcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWMgY29kZS5cclxuICAgKi9cclxuICBwdWJsaWMgY29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdGF0dXMgb2YgdGhlIGNvZGUgYXNzaWdubWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRlIGF0IHdoaWNoIHRoZSBjb2RlIHN0YXR1cyBpcyBjaGFuZ2VkIGFzIHBhcnQgb2YgdGhlIHRlcm1pbm9sb2d5IG1haW50ZW5hbmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXNEYXRlPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFueSBjb21tZW50IGNhbiBiZSBwcm92aWRlZCBpbiB0aGlzIGZpZWxkLCBpZiBuZWNlc3NhcnkuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN1cHBvcnRpbmcgbGl0ZXJhdHVyZS5cclxuICAgKi9cclxuICBwdWJsaWMgc291cmNlOiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFN1YnN0YW5jZVNwZWNpZmljYXRpb25Db2RlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8U3Vic3RhbmNlU3BlY2lmaWNhdGlvbkNvZGVBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnY29kZSddKSB7IHRoaXMuY29kZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY29kZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXR1cyddKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zdGF0dXMpOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXNEYXRlJ10pIHsgdGhpcy5zdGF0dXNEYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLnN0YXR1c0RhdGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1c0RhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5zdGF0dXNEYXRlKSB7IHRoaXMuc3RhdHVzRGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXNEYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc3RhdHVzRGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZShzb3VyY2UuX3N0YXR1c0RhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tbWVudCddKSB7IHRoaXMuY29tbWVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuY29tbWVudH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfY29tbWVudCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvbW1lbnQpIHsgdGhpcy5jb21tZW50LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NvbW1lbnQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb21tZW50ID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2NvbW1lbnQgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NvdXJjZSddKSB7IHRoaXMuc291cmNlID0gc291cmNlLnNvdXJjZS5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNvdXJjZSA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5jb2RlJyB9XHJcbiAgICB0aGlzLnZPUygnY29kZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3N0YXR1cycsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3N0YXR1c0RhdGUnLGV4cClcclxuICAgIHRoaXMudk9TKCdjb21tZW50JyxleHApXHJcbiAgICB0aGlzLnZPQSgnc291cmNlJyxleHApXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk5hbWVPZmZpY2lhbCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZU9mZmljaWFsQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogV2hpY2ggYXV0aG9yaXR5IHVzZXMgdGhpcyBvZmZpY2lhbCBuYW1lLlxyXG4gICAqL1xyXG4gIGF1dGhvcml0eT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgb2ZmaWNpYWwgbmFtZS5cclxuICAgKi9cclxuICBzdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgb2Ygb2ZmaWNpYWwgbmFtZSBjaGFuZ2UuXHJcbiAgICovXHJcbiAgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnN0YW5jZVNwZWNpZmljYXRpb24ubmFtZS5vZmZpY2lhbC5kYXRlXHJcbiAgICovXHJcbiAgX2RhdGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogRGV0YWlscyBvZiB0aGUgb2ZmaWNpYWwgbmF0dXJlIG9mIHRoaXMgbmFtZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZU9mZmljaWFsIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk5hbWVPZmZpY2lhbCc7XHJcbiAgLyoqXHJcbiAgICogV2hpY2ggYXV0aG9yaXR5IHVzZXMgdGhpcyBvZmZpY2lhbCBuYW1lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhdXRob3JpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgb2ZmaWNpYWwgbmFtZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgb2Ygb2ZmaWNpYWwgbmFtZSBjaGFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIGRhdGU/OiBmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk5hbWVPZmZpY2lhbCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN1YnN0YW5jZVNwZWNpZmljYXRpb25OYW1lT2ZmaWNpYWxBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnYXV0aG9yaXR5J10pIHsgdGhpcy5hdXRob3JpdHkgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmF1dGhvcml0eSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0YXR1cyddKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zdGF0dXMpOyB9XHJcbiAgICBpZiAoc291cmNlWydkYXRlJ10pIHsgdGhpcy5kYXRlID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLmRhdGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RhdGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5kYXRlKSB7IHRoaXMuZGF0ZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kYXRlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZShzb3VyY2UuX2RhdGUgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb24ubmFtZS5vZmZpY2lhbCcgfVxyXG4gICAgdGhpcy52T1MoJ2F1dGhvcml0eScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3N0YXR1cycsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2RhdGUnLGV4cClcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhY3R1YWwgbmFtZS5cclxuICAgKi9cclxuICBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5uYW1lLm5hbWVcclxuICAgKi9cclxuICBfbmFtZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogTmFtZSB0eXBlLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIG5hbWUuXHJcbiAgICovXHJcbiAgc3RhdHVzPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiB0aGlzIGlzIHRoZSBwcmVmZXJyZWQgbmFtZSBmb3IgdGhpcyBzdWJzdGFuY2UuXHJcbiAgICovXHJcbiAgcHJlZmVycmVkPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5uYW1lLnByZWZlcnJlZFxyXG4gICAqL1xyXG4gIF9wcmVmZXJyZWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIExhbmd1YWdlIG9mIHRoZSBuYW1lLlxyXG4gICAqL1xyXG4gIGxhbmd1YWdlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1c2UgY29udGV4dCBvZiB0aGlzIG5hbWUgZm9yIGV4YW1wbGUgaWYgdGhlcmUgaXMgYSBkaWZmZXJlbnQgbmFtZSBhIGRydWcgYWN0aXZlIGluZ3JlZGllbnQgYXMgb3Bwb3NlZCB0byBhIGZvb2QgY29sb3VyIGFkZGl0aXZlLlxyXG4gICAqL1xyXG4gIGRvbWFpbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUganVyaXNkaWN0aW9uIHdoZXJlIHRoaXMgbmFtZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHN5bm9ueW0gb2YgdGhpcyBuYW1lLlxyXG4gICAqL1xyXG4gIHN5bm9ueW0/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25OYW1lQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHRyYW5zbGF0aW9uIGZvciB0aGlzIG5hbWUuXHJcbiAgICovXHJcbiAgdHJhbnNsYXRpb24/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25OYW1lQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXRhaWxzIG9mIHRoZSBvZmZpY2lhbCBuYXR1cmUgb2YgdGhpcyBuYW1lLlxyXG4gICAqL1xyXG4gIG9mZmljaWFsPzogZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZU9mZmljaWFsQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdXBwb3J0aW5nIGxpdGVyYXR1cmUuXHJcbiAgICovXHJcbiAgc291cmNlPzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogTmFtZXMgYXBwbGljYWJsZSB0byB0aGlzIHN1YnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb25OYW1lJztcclxuICAvKipcclxuICAgKiBUaGUgYWN0dWFsIG5hbWUuXHJcbiAgICovXHJcbiAgcHVibGljIG5hbWU6IGZoaXIuRmhpclN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIE5hbWUgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBuYW1lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyBpcyB0aGUgcHJlZmVycmVkIG5hbWUgZm9yIHRoaXMgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVmZXJyZWQ/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBMYW5ndWFnZSBvZiB0aGUgbmFtZS5cclxuICAgKi9cclxuICBwdWJsaWMgbGFuZ3VhZ2U6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGhlIHVzZSBjb250ZXh0IG9mIHRoaXMgbmFtZSBmb3IgZXhhbXBsZSBpZiB0aGVyZSBpcyBhIGRpZmZlcmVudCBuYW1lIGEgZHJ1ZyBhY3RpdmUgaW5ncmVkaWVudCBhcyBvcHBvc2VkIHRvIGEgZm9vZCBjb2xvdXIgYWRkaXRpdmUuXHJcbiAgICovXHJcbiAgcHVibGljIGRvbWFpbjogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBUaGUganVyaXNkaWN0aW9uIHdoZXJlIHRoaXMgbmFtZSBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBqdXJpc2RpY3Rpb246IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogQSBzeW5vbnltIG9mIHRoaXMgbmFtZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3lub255bTogZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgdHJhbnNsYXRpb24gZm9yIHRoaXMgbmFtZS5cclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNsYXRpb246IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk5hbWVbXTtcclxuICAvKipcclxuICAgKiBEZXRhaWxzIG9mIHRoZSBvZmZpY2lhbCBuYXR1cmUgb2YgdGhpcyBuYW1lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvZmZpY2lhbDogZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZU9mZmljaWFsW107XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBsaXRlcmF0dXJlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzb3VyY2U6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk5hbWUgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5uYW1lfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm5hbWUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfbmFtZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLm5hbWUpIHsgdGhpcy5uYW1lLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX25hbWUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX25hbWUgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uuc3RhdHVzKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJlZmVycmVkJ10pIHsgdGhpcy5wcmVmZXJyZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5wcmVmZXJyZWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ByZWZlcnJlZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnByZWZlcnJlZCkgeyB0aGlzLnByZWZlcnJlZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9wcmVmZXJyZWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wcmVmZXJyZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX3ByZWZlcnJlZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2xhbmd1YWdlJ10pIHsgdGhpcy5sYW5ndWFnZSA9IHNvdXJjZS5sYW5ndWFnZS5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmxhbmd1YWdlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2RvbWFpbiddKSB7IHRoaXMuZG9tYWluID0gc291cmNlLmRvbWFpbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRvbWFpbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydqdXJpc2RpY3Rpb24nXSkgeyB0aGlzLmp1cmlzZGljdGlvbiA9IHNvdXJjZS5qdXJpc2RpY3Rpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5qdXJpc2RpY3Rpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3lub255bSddKSB7IHRoaXMuc3lub255bSA9IHNvdXJjZS5zeW5vbnltLm1hcCgoeCkgPT4gbmV3IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk5hbWUoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zeW5vbnltID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3RyYW5zbGF0aW9uJ10pIHsgdGhpcy50cmFuc2xhdGlvbiA9IHNvdXJjZS50cmFuc2xhdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25OYW1lKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudHJhbnNsYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb2ZmaWNpYWwnXSkgeyB0aGlzLm9mZmljaWFsID0gc291cmNlLm9mZmljaWFsLm1hcCgoeCkgPT4gbmV3IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvbk5hbWVPZmZpY2lhbCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm9mZmljaWFsID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3NvdXJjZSddKSB7IHRoaXMuc291cmNlID0gc291cmNlLnNvdXJjZS5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnNvdXJjZSA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5uYW1lJyB9XHJcbiAgICB0aGlzLnZSUygnbmFtZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3R5cGUnLGV4cClcclxuICAgIHRoaXMudk9TKCdzdGF0dXMnLGV4cClcclxuICAgIHRoaXMudk9TKCdwcmVmZXJyZWQnLGV4cClcclxuICAgIHRoaXMudk9BKCdsYW5ndWFnZScsZXhwKVxyXG4gICAgdGhpcy52T0EoJ2RvbWFpbicsZXhwKVxyXG4gICAgdGhpcy52T0EoJ2p1cmlzZGljdGlvbicsZXhwKVxyXG4gICAgdGhpcy52T0EoJ3N5bm9ueW0nLGV4cClcclxuICAgIHRoaXMudk9BKCd0cmFuc2xhdGlvbicsZXhwKVxyXG4gICAgdGhpcy52T0EoJ29mZmljaWFsJyxleHApXHJcbiAgICB0aGlzLnZPQSgnc291cmNlJyxleHApXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblJlbGF0aW9uc2hpcCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uUmVsYXRpb25zaGlwQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQSBwb2ludGVyIHRvIGFub3RoZXIgc3Vic3RhbmNlLCBhcyBhIHJlc291cmNlIG9yIGp1c3QgYSByZXByZXNlbnRhdGlvbmFsIGNvZGUuXHJcbiAgICovXHJcbiAgc3Vic3RhbmNlPzogZmhpci5SZWZlcmVuY2V8Zmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgcG9pbnRlciB0byBhbm90aGVyIHN1YnN0YW5jZSwgYXMgYSByZXNvdXJjZSBvciBqdXN0IGEgcmVwcmVzZW50YXRpb25hbCBjb2RlLlxyXG4gICAqL1xyXG4gIHN1YnN0YW5jZVJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBwb2ludGVyIHRvIGFub3RoZXIgc3Vic3RhbmNlLCBhcyBhIHJlc291cmNlIG9yIGp1c3QgYSByZXByZXNlbnRhdGlvbmFsIGNvZGUuXHJcbiAgICovXHJcbiAgc3Vic3RhbmNlQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZSBcInNhbHQgdG8gcGFyZW50XCIsIFwiYWN0aXZlIG1vaWV0eVwiLCBcInN0YXJ0aW5nIG1hdGVyaWFsXCIuXHJcbiAgICovXHJcbiAgcmVsYXRpb25zaGlwPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZSB3aGVyZSBhbiBlbnp5bWUgc3Ryb25nbHkgYm9uZHMgd2l0aCBhIHBhcnRpY3VsYXIgc3Vic3RhbmNlLCB0aGlzIGlzIGEgZGVmaW5pbmcgcmVsYXRpb25zaGlwIGZvciB0aGF0IGVuenltZSwgb3V0IG9mIHNldmVyYWwgcG9zc2libGUgc3Vic3RhbmNlIHJlbGF0aW9uc2hpcHMuXHJcbiAgICovXHJcbiAgaXNEZWZpbmluZz86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnN0YW5jZVNwZWNpZmljYXRpb24ucmVsYXRpb25zaGlwLmlzRGVmaW5pbmdcclxuICAgKi9cclxuICBfaXNEZWZpbmluZz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSBudW1lcmljIGZhY3RvciBmb3IgdGhlIHJlbGF0aW9uc2hpcCwgZm9yIGluc3RhbmNlIHRvIGV4cHJlc3MgdGhhdCB0aGUgc2FsdCBvZiBhIHN1YnN0YW5jZSBoYXMgc29tZSBwZXJjZW50YWdlIG9mIHRoZSBhY3RpdmUgc3Vic3RhbmNlIGluIHJlbGF0aW9uIHRvIHNvbWUgb3RoZXIuXHJcbiAgICovXHJcbiAgYW1vdW50PzogZmhpci5RdWFudGl0eXxmaGlyLlJhbmdlfGZoaXIuUmF0aW98Zmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG51bWVyaWMgZmFjdG9yIGZvciB0aGUgcmVsYXRpb25zaGlwLCBmb3IgaW5zdGFuY2UgdG8gZXhwcmVzcyB0aGF0IHRoZSBzYWx0IG9mIGEgc3Vic3RhbmNlIGhhcyBzb21lIHBlcmNlbnRhZ2Ugb2YgdGhlIGFjdGl2ZSBzdWJzdGFuY2UgaW4gcmVsYXRpb24gdG8gc29tZSBvdGhlci5cclxuICAgKi9cclxuICBhbW91bnRRdWFudGl0eT86IGZoaXIuUXVhbnRpdHlBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG51bWVyaWMgZmFjdG9yIGZvciB0aGUgcmVsYXRpb25zaGlwLCBmb3IgaW5zdGFuY2UgdG8gZXhwcmVzcyB0aGF0IHRoZSBzYWx0IG9mIGEgc3Vic3RhbmNlIGhhcyBzb21lIHBlcmNlbnRhZ2Ugb2YgdGhlIGFjdGl2ZSBzdWJzdGFuY2UgaW4gcmVsYXRpb24gdG8gc29tZSBvdGhlci5cclxuICAgKi9cclxuICBhbW91bnRSYW5nZT86IGZoaXIuUmFuZ2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG51bWVyaWMgZmFjdG9yIGZvciB0aGUgcmVsYXRpb25zaGlwLCBmb3IgaW5zdGFuY2UgdG8gZXhwcmVzcyB0aGF0IHRoZSBzYWx0IG9mIGEgc3Vic3RhbmNlIGhhcyBzb21lIHBlcmNlbnRhZ2Ugb2YgdGhlIGFjdGl2ZSBzdWJzdGFuY2UgaW4gcmVsYXRpb24gdG8gc29tZSBvdGhlci5cclxuICAgKi9cclxuICBhbW91bnRSYXRpbz86IGZoaXIuUmF0aW9BcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG51bWVyaWMgZmFjdG9yIGZvciB0aGUgcmVsYXRpb25zaGlwLCBmb3IgaW5zdGFuY2UgdG8gZXhwcmVzcyB0aGF0IHRoZSBzYWx0IG9mIGEgc3Vic3RhbmNlIGhhcyBzb21lIHBlcmNlbnRhZ2Ugb2YgdGhlIGFjdGl2ZSBzdWJzdGFuY2UgaW4gcmVsYXRpb24gdG8gc29tZSBvdGhlci5cclxuICAgKi9cclxuICBhbW91bnRTdHJpbmc/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgdXNlIHdoZW4gdGhlIG51bWVyaWMuXHJcbiAgICovXHJcbiAgYW1vdW50UmF0aW9Mb3dMaW1pdD86IGZoaXIuUmF0aW9BcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBvcGVyYXRvciBmb3IgdGhlIGFtb3VudCwgZm9yIGV4YW1wbGUgXCJhdmVyYWdlXCIsIFwiYXBwcm94aW1hdGVseVwiLCBcImxlc3MgdGhhblwiLlxyXG4gICAqL1xyXG4gIGFtb3VudFR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN1cHBvcnRpbmcgbGl0ZXJhdHVyZS5cclxuICAgKi9cclxuICBzb3VyY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGxpbmsgYmV0d2VlbiB0aGlzIHN1YnN0YW5jZSBhbmQgYW5vdGhlciwgd2l0aCBkZXRhaWxzIG9mIHRoZSByZWxhdGlvbnNoaXAuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblJlbGF0aW9uc2hpcCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb25SZWxhdGlvbnNoaXAnO1xyXG4gIC8qKlxyXG4gICAqIEEgcG9pbnRlciB0byBhbm90aGVyIHN1YnN0YW5jZSwgYXMgYSByZXNvdXJjZSBvciBqdXN0IGEgcmVwcmVzZW50YXRpb25hbCBjb2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJzdGFuY2U/OiAoZmhpci5SZWZlcmVuY2V8Zmhpci5Db2RlYWJsZUNvbmNlcHQpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IFN1YnN0YW5jZVNwZWNpZmljYXRpb24ucmVsYXRpb25zaGlwLnN1YnN0YW5jZVt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c19zdWJzdGFuY2VJc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZSBcInNhbHQgdG8gcGFyZW50XCIsIFwiYWN0aXZlIG1vaWV0eVwiLCBcInN0YXJ0aW5nIG1hdGVyaWFsXCIuXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGF0aW9uc2hpcD86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZSB3aGVyZSBhbiBlbnp5bWUgc3Ryb25nbHkgYm9uZHMgd2l0aCBhIHBhcnRpY3VsYXIgc3Vic3RhbmNlLCB0aGlzIGlzIGEgZGVmaW5pbmcgcmVsYXRpb25zaGlwIGZvciB0aGF0IGVuenltZSwgb3V0IG9mIHNldmVyYWwgcG9zc2libGUgc3Vic3RhbmNlIHJlbGF0aW9uc2hpcHMuXHJcbiAgICovXHJcbiAgcHVibGljIGlzRGVmaW5pbmc/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIG51bWVyaWMgZmFjdG9yIGZvciB0aGUgcmVsYXRpb25zaGlwLCBmb3IgaW5zdGFuY2UgdG8gZXhwcmVzcyB0aGF0IHRoZSBzYWx0IG9mIGEgc3Vic3RhbmNlIGhhcyBzb21lIHBlcmNlbnRhZ2Ugb2YgdGhlIGFjdGl2ZSBzdWJzdGFuY2UgaW4gcmVsYXRpb24gdG8gc29tZSBvdGhlci5cclxuICAgKi9cclxuICBwdWJsaWMgYW1vdW50PzogKGZoaXIuUXVhbnRpdHl8Zmhpci5SYW5nZXxmaGlyLlJhdGlvfGZoaXIuRmhpclN0cmluZyl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5yZWxhdGlvbnNoaXAuYW1vdW50W3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX2Ftb3VudElzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIEZvciB1c2Ugd2hlbiB0aGUgbnVtZXJpYy5cclxuICAgKi9cclxuICBwdWJsaWMgYW1vdW50UmF0aW9Mb3dMaW1pdD86IGZoaXIuUmF0aW98dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wZXJhdG9yIGZvciB0aGUgYW1vdW50LCBmb3IgZXhhbXBsZSBcImF2ZXJhZ2VcIiwgXCJhcHByb3hpbWF0ZWx5XCIsIFwibGVzcyB0aGFuXCIuXHJcbiAgICovXHJcbiAgcHVibGljIGFtb3VudFR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBsaXRlcmF0dXJlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzb3VyY2U6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3Vic3RhbmNlU3BlY2lmaWNhdGlvblJlbGF0aW9uc2hpcCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN1YnN0YW5jZVNwZWNpZmljYXRpb25SZWxhdGlvbnNoaXBBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnc3Vic3RhbmNlJ10pIHsgdGhpcy5zdWJzdGFuY2UgPSBzb3VyY2Uuc3Vic3RhbmNlOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3N1YnN0YW5jZVJlZmVyZW5jZSddKSB7IHRoaXMuc3Vic3RhbmNlID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdWJzdGFuY2VSZWZlcmVuY2UpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3N1YnN0YW5jZUNvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuc3Vic3RhbmNlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zdWJzdGFuY2VDb2RlYWJsZUNvbmNlcHQpOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWxhdGlvbnNoaXAnXSkgeyB0aGlzLnJlbGF0aW9uc2hpcCA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UucmVsYXRpb25zaGlwKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaXNEZWZpbmluZyddKSB7IHRoaXMuaXNEZWZpbmluZyA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmlzRGVmaW5pbmd9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2lzRGVmaW5pbmcnXSkge1xyXG4gICAgICBpZiAodGhpcy5pc0RlZmluaW5nKSB7IHRoaXMuaXNEZWZpbmluZy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9pc0RlZmluaW5nISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuaXNEZWZpbmluZyA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5faXNEZWZpbmluZyBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2Ftb3VudCddKSB7IHRoaXMuYW1vdW50ID0gc291cmNlLmFtb3VudDsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydhbW91bnRRdWFudGl0eSddKSB7IHRoaXMuYW1vdW50ID0gbmV3IGZoaXIuUXVhbnRpdHkoc291cmNlLmFtb3VudFF1YW50aXR5KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydhbW91bnRSYW5nZSddKSB7IHRoaXMuYW1vdW50ID0gbmV3IGZoaXIuUmFuZ2Uoc291cmNlLmFtb3VudFJhbmdlKTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydhbW91bnRSYXRpbyddKSB7IHRoaXMuYW1vdW50ID0gbmV3IGZoaXIuUmF0aW8oc291cmNlLmFtb3VudFJhdGlvKTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydhbW91bnRTdHJpbmcnXSkgeyB0aGlzLmFtb3VudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuYW1vdW50U3RyaW5nfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Ftb3VudFJhdGlvTG93TGltaXQnXSkgeyB0aGlzLmFtb3VudFJhdGlvTG93TGltaXQgPSBuZXcgZmhpci5SYXRpbyhzb3VyY2UuYW1vdW50UmF0aW9Mb3dMaW1pdCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Ftb3VudFR5cGUnXSkgeyB0aGlzLmFtb3VudFR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmFtb3VudFR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydzb3VyY2UnXSkgeyB0aGlzLnNvdXJjZSA9IHNvdXJjZS5zb3VyY2UubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zb3VyY2UgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb24ucmVsYXRpb25zaGlwJyB9XHJcbiAgICB0aGlzLnZPUygnc3Vic3RhbmNlJyxleHApXHJcbiAgICB0aGlzLnZPUygncmVsYXRpb25zaGlwJyxleHApXHJcbiAgICB0aGlzLnZPUygnaXNEZWZpbmluZycsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2Ftb3VudCcsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2Ftb3VudFJhdGlvTG93TGltaXQnLGV4cClcclxuICAgIHRoaXMudk9TKCdhbW91bnRUeXBlJyxleHApXHJcbiAgICB0aGlzLnZPQSgnc291cmNlJyxleHApXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzdGFuY2VTcGVjaWZpY2F0aW9uQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiU3Vic3RhbmNlU3BlY2lmaWNhdGlvblwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGJ5IHdoaWNoIHRoaXMgc3Vic3RhbmNlIGlzIGtub3duLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBIaWdoIGxldmVsIGNhdGVnb3JpemF0aW9uLCBlLmcuIHBvbHltZXIgb3IgbnVjbGVpYyBhY2lkLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN0YXR1cyBvZiBzdWJzdGFuY2Ugd2l0aGluIHRoZSBjYXRhbG9ndWUgZS5nLiBhcHByb3ZlZC5cclxuICAgKi9cclxuICBzdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBzdWJzdGFuY2UgYXBwbGllcyB0byBvbmx5IGh1bWFuIG9yIHZldGVyaW5hcnkgdXNlLlxyXG4gICAqL1xyXG4gIGRvbWFpbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGV4dHVhbCBkZXNjcmlwdGlvbiBvZiB0aGUgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnN0YW5jZVNwZWNpZmljYXRpb24uZGVzY3JpcHRpb25cclxuICAgKi9cclxuICBfZGVzY3JpcHRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFN1cHBvcnRpbmcgbGl0ZXJhdHVyZS5cclxuICAgKi9cclxuICBzb3VyY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGV4dHVhbCBjb21tZW50IGFib3V0IHRoaXMgcmVjb3JkIG9mIGEgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIGNvbW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic3RhbmNlU3BlY2lmaWNhdGlvbi5jb21tZW50XHJcbiAgICovXHJcbiAgX2NvbW1lbnQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIE1vaWV0eSwgZm9yIHN0cnVjdHVyYWwgbW9kaWZpY2F0aW9ucy5cclxuICAgKi9cclxuICBtb2lldHk/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25Nb2lldHlBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEdlbmVyYWwgc3BlY2lmaWNhdGlvbnMgZm9yIHRoaXMgc3Vic3RhbmNlLCBpbmNsdWRpbmcgaG93IGl0IGlzIHJlbGF0ZWQgdG8gb3RoZXIgc3Vic3RhbmNlcy5cclxuICAgKi9cclxuICBwcm9wZXJ0eT86IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblByb3BlcnR5QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBHZW5lcmFsIGluZm9ybWF0aW9uIGRldGFpbGluZyB0aGlzIHN1YnN0YW5jZS5cclxuICAgKi9cclxuICByZWZlcmVuY2VJbmZvcm1hdGlvbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3RydWN0dXJhbCBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBzdHJ1Y3R1cmU/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb2RlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHN1YnN0YW5jZS5cclxuICAgKi9cclxuICBjb2RlPzogZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uQ29kZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTmFtZXMgYXBwbGljYWJsZSB0byB0aGlzIHN1YnN0YW5jZS5cclxuICAgKi9cclxuICBuYW1lPzogZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1vbGVjdWxhciB3ZWlnaHQgb3Igd2VpZ2h0IHJhbmdlIChmb3IgcHJvdGVpbnMsIHBvbHltZXJzIG9yIG51Y2xlaWMgYWNpZHMpLlxyXG4gICAqL1xyXG4gIG1vbGVjdWxhcldlaWdodD86IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZUlzb3RvcGVNb2xlY3VsYXJXZWlnaHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbGluayBiZXR3ZWVuIHRoaXMgc3Vic3RhbmNlIGFuZCBhbm90aGVyLCB3aXRoIGRldGFpbHMgb2YgdGhlIHJlbGF0aW9uc2hpcC5cclxuICAgKi9cclxuICByZWxhdGlvbnNoaXA/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25SZWxhdGlvbnNoaXBBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERhdGEgaXRlbXMgc3BlY2lmaWMgdG8gbnVjbGVpYyBhY2lkcy5cclxuICAgKi9cclxuICBudWNsZWljQWNpZD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGF0YSBpdGVtcyBzcGVjaWZpYyB0byBwb2x5bWVycy5cclxuICAgKi9cclxuICBwb2x5bWVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEYXRhIGl0ZW1zIHNwZWNpZmljIHRvIHByb3RlaW5zLlxyXG4gICAqL1xyXG4gIHByb3RlaW4/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1hdGVyaWFsIG9yIHRheG9ub21pYy9hbmF0b21pY2FsIHNvdXJjZSBmb3IgdGhlIHN1YnN0YW5jZS5cclxuICAgKi9cclxuICBzb3VyY2VNYXRlcmlhbD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZGV0YWlsZWQgZGVzY3JpcHRpb24gb2YgYSBzdWJzdGFuY2UsIHR5cGljYWxseSBhdCBhIGxldmVsIGJleW9uZCB3aGF0IGlzIHVzZWQgZm9yIHByZXNjcmliaW5nLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN1YnN0YW5jZVNwZWNpZmljYXRpb24gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1N1YnN0YW5jZVNwZWNpZmljYXRpb24nO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiU3Vic3RhbmNlU3BlY2lmaWNhdGlvblwiO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXIgYnkgd2hpY2ggdGhpcyBzdWJzdGFuY2UgaXMga25vd24uXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEhpZ2ggbGV2ZWwgY2F0ZWdvcml6YXRpb24sIGUuZy4gcG9seW1lciBvciBudWNsZWljIGFjaWQuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3RhdHVzIG9mIHN1YnN0YW5jZSB3aXRoaW4gdGhlIGNhdGFsb2d1ZSBlLmcuIGFwcHJvdmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIHN1YnN0YW5jZSBhcHBsaWVzIHRvIG9ubHkgaHVtYW4gb3IgdmV0ZXJpbmFyeSB1c2UuXHJcbiAgICovXHJcbiAgcHVibGljIGRvbWFpbj86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUZXh0dWFsIGRlc2NyaXB0aW9uIG9mIHRoZSBzdWJzdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdXBwb3J0aW5nIGxpdGVyYXR1cmUuXHJcbiAgICovXHJcbiAgcHVibGljIHNvdXJjZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBUZXh0dWFsIGNvbW1lbnQgYWJvdXQgdGhpcyByZWNvcmQgb2YgYSBzdWJzdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1vaWV0eSwgZm9yIHN0cnVjdHVyYWwgbW9kaWZpY2F0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgbW9pZXR5OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25Nb2lldHlbXTtcclxuICAvKipcclxuICAgKiBHZW5lcmFsIHNwZWNpZmljYXRpb25zIGZvciB0aGlzIHN1YnN0YW5jZSwgaW5jbHVkaW5nIGhvdyBpdCBpcyByZWxhdGVkIHRvIG90aGVyIHN1YnN0YW5jZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHByb3BlcnR5OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25Qcm9wZXJ0eVtdO1xyXG4gIC8qKlxyXG4gICAqIEdlbmVyYWwgaW5mb3JtYXRpb24gZGV0YWlsaW5nIHRoaXMgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWZlcmVuY2VJbmZvcm1hdGlvbj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdHJ1Y3R1cmFsIGluZm9ybWF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdHJ1Y3R1cmU/OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvZGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3Vic3RhbmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2RlOiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25Db2RlW107XHJcbiAgLyoqXHJcbiAgICogTmFtZXMgYXBwbGljYWJsZSB0byB0aGlzIHN1YnN0YW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgbmFtZTogZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uTmFtZVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtb2xlY3VsYXIgd2VpZ2h0IG9yIHdlaWdodCByYW5nZSAoZm9yIHByb3RlaW5zLCBwb2x5bWVycyBvciBudWNsZWljIGFjaWRzKS5cclxuICAgKi9cclxuICBwdWJsaWMgbW9sZWN1bGFyV2VpZ2h0OiBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25TdHJ1Y3R1cmVJc290b3BlTW9sZWN1bGFyV2VpZ2h0W107XHJcbiAgLyoqXHJcbiAgICogQSBsaW5rIGJldHdlZW4gdGhpcyBzdWJzdGFuY2UgYW5kIGFub3RoZXIsIHdpdGggZGV0YWlscyBvZiB0aGUgcmVsYXRpb25zaGlwLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxhdGlvbnNoaXA6IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblJlbGF0aW9uc2hpcFtdO1xyXG4gIC8qKlxyXG4gICAqIERhdGEgaXRlbXMgc3BlY2lmaWMgdG8gbnVjbGVpYyBhY2lkcy5cclxuICAgKi9cclxuICBwdWJsaWMgbnVjbGVpY0FjaWQ/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGF0YSBpdGVtcyBzcGVjaWZpYyB0byBwb2x5bWVycy5cclxuICAgKi9cclxuICBwdWJsaWMgcG9seW1lcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEYXRhIGl0ZW1zIHNwZWNpZmljIHRvIHByb3RlaW5zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm90ZWluPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1hdGVyaWFsIG9yIHRheG9ub21pYy9hbmF0b21pY2FsIHNvdXJjZSBmb3IgdGhlIHN1YnN0YW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgc291cmNlTWF0ZXJpYWw/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3Vic3RhbmNlU3BlY2lmaWNhdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFN1YnN0YW5jZVNwZWNpZmljYXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvbic7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UuaWRlbnRpZmllcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uuc3RhdHVzKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZG9tYWluJ10pIHsgdGhpcy5kb21haW4gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmRvbWFpbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rlc2NyaXB0aW9uJ10pIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGVzY3JpcHRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2Rlc2NyaXB0aW9uJ10pIHtcclxuICAgICAgaWYgKHRoaXMuZGVzY3JpcHRpb24pIHsgdGhpcy5kZXNjcmlwdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kZXNjcmlwdGlvbiEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rlc2NyaXB0aW9uIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzb3VyY2UnXSkgeyB0aGlzLnNvdXJjZSA9IHNvdXJjZS5zb3VyY2UubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zb3VyY2UgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tbWVudCddKSB7IHRoaXMuY29tbWVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuY29tbWVudH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfY29tbWVudCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmNvbW1lbnQpIHsgdGhpcy5jb21tZW50LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2NvbW1lbnQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5jb21tZW50ID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2NvbW1lbnQgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ21vaWV0eSddKSB7IHRoaXMubW9pZXR5ID0gc291cmNlLm1vaWV0eS5tYXAoKHgpID0+IG5ldyBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25Nb2lldHkoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5tb2lldHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvcGVydHknXSkgeyB0aGlzLnByb3BlcnR5ID0gc291cmNlLnByb3BlcnR5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblByb3BlcnR5KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucHJvcGVydHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVmZXJlbmNlSW5mb3JtYXRpb24nXSkgeyB0aGlzLnJlZmVyZW5jZUluZm9ybWF0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZWZlcmVuY2VJbmZvcm1hdGlvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N0cnVjdHVyZSddKSB7IHRoaXMuc3RydWN0dXJlID0gbmV3IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvblN0cnVjdHVyZShzb3VyY2Uuc3RydWN0dXJlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29kZSddKSB7IHRoaXMuY29kZSA9IHNvdXJjZS5jb2RlLm1hcCgoeCkgPT4gbmV3IGZoaXIuU3Vic3RhbmNlU3BlY2lmaWNhdGlvbkNvZGUoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb2RlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBzb3VyY2UubmFtZS5tYXAoKHgpID0+IG5ldyBmaGlyLlN1YnN0YW5jZVNwZWNpZmljYXRpb25OYW1lKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubmFtZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtb2xlY3VsYXJXZWlnaHQnXSkgeyB0aGlzLm1vbGVjdWxhcldlaWdodCA9IHNvdXJjZS5tb2xlY3VsYXJXZWlnaHQubWFwKCh4KSA9PiBuZXcgZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uU3RydWN0dXJlSXNvdG9wZU1vbGVjdWxhcldlaWdodCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm1vbGVjdWxhcldlaWdodCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWxhdGlvbnNoaXAnXSkgeyB0aGlzLnJlbGF0aW9uc2hpcCA9IHNvdXJjZS5yZWxhdGlvbnNoaXAubWFwKCh4KSA9PiBuZXcgZmhpci5TdWJzdGFuY2VTcGVjaWZpY2F0aW9uUmVsYXRpb25zaGlwKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVsYXRpb25zaGlwID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ251Y2xlaWNBY2lkJ10pIHsgdGhpcy5udWNsZWljQWNpZCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UubnVjbGVpY0FjaWQpOyB9XHJcbiAgICBpZiAoc291cmNlWydwb2x5bWVyJ10pIHsgdGhpcy5wb2x5bWVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5wb2x5bWVyKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvdGVpbiddKSB7IHRoaXMucHJvdGVpbiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UucHJvdGVpbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3NvdXJjZU1hdGVyaWFsJ10pIHsgdGhpcy5zb3VyY2VNYXRlcmlhbCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uuc291cmNlTWF0ZXJpYWwpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnU3Vic3RhbmNlU3BlY2lmaWNhdGlvbicgfVxyXG4gICAgdGhpcy52UlMoJ3Jlc291cmNlVHlwZScsZXhwKVxyXG4gICAgdGhpcy52T1MoJ2lkZW50aWZpZXInLGV4cClcclxuICAgIHRoaXMudk9TKCd0eXBlJyxleHApXHJcbiAgICB0aGlzLnZPUygnc3RhdHVzJyxleHApXHJcbiAgICB0aGlzLnZPUygnZG9tYWluJyxleHApXHJcbiAgICB0aGlzLnZPUygnZGVzY3JpcHRpb24nLGV4cClcclxuICAgIHRoaXMudk9BKCdzb3VyY2UnLGV4cClcclxuICAgIHRoaXMudk9TKCdjb21tZW50JyxleHApXHJcbiAgICB0aGlzLnZPQSgnbW9pZXR5JyxleHApXHJcbiAgICB0aGlzLnZPQSgncHJvcGVydHknLGV4cClcclxuICAgIHRoaXMudk9TKCdyZWZlcmVuY2VJbmZvcm1hdGlvbicsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3N0cnVjdHVyZScsZXhwKVxyXG4gICAgdGhpcy52T0EoJ2NvZGUnLGV4cClcclxuICAgIHRoaXMudk9BKCduYW1lJyxleHApXHJcbiAgICB0aGlzLnZPQSgnbW9sZWN1bGFyV2VpZ2h0JyxleHApXHJcbiAgICB0aGlzLnZPQSgncmVsYXRpb25zaGlwJyxleHApXHJcbiAgICB0aGlzLnZPUygnbnVjbGVpY0FjaWQnLGV4cClcclxuICAgIHRoaXMudk9TKCdwb2x5bWVyJyxleHApXHJcbiAgICB0aGlzLnZPUygncHJvdGVpbicsZXhwKVxyXG4gICAgdGhpcy52T1MoJ3NvdXJjZU1hdGVyaWFsJyxleHApXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=