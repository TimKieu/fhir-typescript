// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSpecification
import * as fhir from '../fhir.js';
/**
 * Moiety, for structural modifications.
 */
export class SubstanceSpecificationMoiety extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            this.molecularFormula = new fhir.FhirString({ value: source.molecularFormula });
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["stereochemistry"]) {
            issues.push(...this.stereochemistry.doModelValidation());
        }
        if (this["opticalActivity"]) {
            issues.push(...this.opticalActivity.doModelValidation());
        }
        if (this["molecularFormula"]) {
            issues.push(...this.molecularFormula.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationMoiety._fts_dataType = 'SubstanceSpecificationMoiety';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.moiety.amount[x]
 */
SubstanceSpecificationMoiety._fts_amountIsChoice = true;
/**
 * General specifications for this substance, including how it is related to other substances.
 */
export class SubstanceSpecificationProperty extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['parameters']) {
            this.parameters = new fhir.FhirString({ value: source.parameters });
        }
        if (source['definingSubstance']) {
            this.definingSubstance = source.definingSubstance;
        }
        else if (source['definingSubstanceReference']) {
            this.definingSubstance = new fhir.Reference(source.definingSubstanceReference);
        }
        else if (source['definingSubstanceCodeableConcept']) {
            this.definingSubstance = new fhir.CodeableConcept(source.definingSubstanceCodeableConcept);
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["parameters"]) {
            issues.push(...this.parameters.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationProperty._fts_dataType = 'SubstanceSpecificationProperty';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.property.definingSubstance[x]
 */
SubstanceSpecificationProperty._fts_definingSubstanceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.property.amount[x]
 */
SubstanceSpecificationProperty._fts_amountIsChoice = true;
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
export class SubstanceSpecificationStructureIsotopeMolecularWeight extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["method"]) {
            issues.push(...this.method.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureIsotopeMolecularWeight._fts_dataType = 'SubstanceSpecificationStructureIsotopeMolecularWeight';
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
export class SubstanceSpecificationStructureIsotope extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['name']) {
            this.name = new fhir.CodeableConcept(source.name);
        }
        if (source['substitution']) {
            this.substitution = new fhir.CodeableConcept(source.substitution);
        }
        if (source['halfLife']) {
            this.halfLife = new fhir.Quantity(source.halfLife);
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["substitution"]) {
            issues.push(...this.substitution.doModelValidation());
        }
        if (this["halfLife"]) {
            issues.push(...this.halfLife.doModelValidation());
        }
        if (this["molecularWeight"]) {
            issues.push(...this.molecularWeight.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureIsotope._fts_dataType = 'SubstanceSpecificationStructureIsotope';
/**
 * Molecular structural representation.
 */
export class SubstanceSpecificationStructureRepresentation extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['representation']) {
            this.representation = new fhir.FhirString({ value: source.representation });
        }
        if (source['attachment']) {
            this.attachment = new fhir.Attachment(source.attachment);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["representation"]) {
            issues.push(...this.representation.doModelValidation());
        }
        if (this["attachment"]) {
            issues.push(...this.attachment.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructureRepresentation._fts_dataType = 'SubstanceSpecificationStructureRepresentation';
/**
 * Structural information.
 */
export class SubstanceSpecificationStructure extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['stereochemistry']) {
            this.stereochemistry = new fhir.CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            this.opticalActivity = new fhir.CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            this.molecularFormula = new fhir.FhirString({ value: source.molecularFormula });
        }
        if (source['molecularFormulaByMoiety']) {
            this.molecularFormulaByMoiety = new fhir.FhirString({ value: source.molecularFormulaByMoiety });
        }
        if (source['isotope']) {
            this.isotope = source.isotope.map((x) => new fhir.SubstanceSpecificationStructureIsotope(x));
        }
        else {
            this.isotope = [];
        }
        if (source['molecularWeight']) {
            this.molecularWeight = new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
        if (source['representation']) {
            this.representation = source.representation.map((x) => new fhir.SubstanceSpecificationStructureRepresentation(x));
        }
        else {
            this.representation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["stereochemistry"]) {
            issues.push(...this.stereochemistry.doModelValidation());
        }
        if (this["opticalActivity"]) {
            issues.push(...this.opticalActivity.doModelValidation());
        }
        if (this["molecularFormula"]) {
            issues.push(...this.molecularFormula.doModelValidation());
        }
        if (this["molecularFormulaByMoiety"]) {
            issues.push(...this.molecularFormulaByMoiety.doModelValidation());
        }
        if (this["isotope"]) {
            this.isotope.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["molecularWeight"]) {
            issues.push(...this.molecularWeight.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["representation"]) {
            this.representation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationStructure._fts_dataType = 'SubstanceSpecificationStructure';
/**
 * Codes associated with the substance.
 */
export class SubstanceSpecificationCode extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusDate"]) {
            issues.push(...this.statusDate.doModelValidation());
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationCode._fts_dataType = 'SubstanceSpecificationCode';
/**
 * Details of the official nature of this name.
 */
export class SubstanceSpecificationNameOfficial extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authority']) {
            this.authority = new fhir.CodeableConcept(source.authority);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["authority"]) {
            issues.push(...this.authority.doModelValidation());
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationNameOfficial._fts_dataType = 'SubstanceSpecificationNameOfficial';
/**
 * Names applicable to this substance.
 */
export class SubstanceSpecificationName extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['preferred']) {
            this.preferred = new fhir.FhirBoolean({ value: source.preferred });
        }
        if (source['language']) {
            this.language = source.language.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.language = [];
        }
        if (source['domain']) {
            this.domain = source.domain.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.domain = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        else {
            this.synonym = [];
        }
        if (source['translation']) {
            this.translation = source.translation.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        else {
            this.translation = [];
        }
        if (source['official']) {
            this.official = source.official.map((x) => new fhir.SubstanceSpecificationNameOfficial(x));
        }
        else {
            this.official = [];
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: SubstanceSpecification.name.name:string', });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["preferred"]) {
            issues.push(...this.preferred.doModelValidation());
        }
        if (this["language"]) {
            this.language.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["domain"]) {
            this.domain.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["synonym"]) {
            this.synonym.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["translation"]) {
            this.translation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["official"]) {
            this.official.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["source"]) {
            this.source.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationName._fts_dataType = 'SubstanceSpecificationName';
/**
 * A link between this substance and another, with details of the relationship.
 */
export class SubstanceSpecificationRelationship extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['substance']) {
            this.substance = source.substance;
        }
        else if (source['substanceReference']) {
            this.substance = new fhir.Reference(source.substanceReference);
        }
        else if (source['substanceCodeableConcept']) {
            this.substance = new fhir.CodeableConcept(source.substanceCodeableConcept);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['isDefining']) {
            this.isDefining = new fhir.FhirBoolean({ value: source.isDefining });
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            this.amount = new fhir.Range(source.amountRange);
        }
        else if (source['amountRatio']) {
            this.amount = new fhir.Ratio(source.amountRatio);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
        if (source['amountRatioLowLimit']) {
            this.amountRatioLowLimit = new fhir.Ratio(source.amountRatioLowLimit);
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["relationship"]) {
            issues.push(...this.relationship.doModelValidation());
        }
        if (this["isDefining"]) {
            issues.push(...this.isDefining.doModelValidation());
        }
        if (this["amountRatioLowLimit"]) {
            issues.push(...this.amountRatioLowLimit.doModelValidation());
        }
        if (this["amountType"]) {
            issues.push(...this.amountType.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecificationRelationship._fts_dataType = 'SubstanceSpecificationRelationship';
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.substance[x]
 */
SubstanceSpecificationRelationship._fts_substanceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.amount[x]
 */
SubstanceSpecificationRelationship._fts_amountIsChoice = true;
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export class SubstanceSpecification extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceSpecification';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['domain']) {
            this.domain = new fhir.CodeableConcept(source.domain);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['moiety']) {
            this.moiety = source.moiety.map((x) => new fhir.SubstanceSpecificationMoiety(x));
        }
        else {
            this.moiety = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.SubstanceSpecificationProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['referenceInformation']) {
            this.referenceInformation = new fhir.Reference(source.referenceInformation);
        }
        if (source['structure']) {
            this.structure = new fhir.SubstanceSpecificationStructure(source.structure);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.SubstanceSpecificationCode(x));
        }
        else {
            this.code = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.SubstanceSpecificationName(x));
        }
        else {
            this.name = [];
        }
        if (source['molecularWeight']) {
            this.molecularWeight = source.molecularWeight.map((x) => new fhir.SubstanceSpecificationStructureIsotopeMolecularWeight(x));
        }
        else {
            this.molecularWeight = [];
        }
        if (source['relationship']) {
            this.relationship = source.relationship.map((x) => new fhir.SubstanceSpecificationRelationship(x));
        }
        else {
            this.relationship = [];
        }
        if (source['nucleicAcid']) {
            this.nucleicAcid = new fhir.Reference(source.nucleicAcid);
        }
        if (source['polymer']) {
            this.polymer = new fhir.Reference(source.polymer);
        }
        if (source['protein']) {
            this.protein = new fhir.Reference(source.protein);
        }
        if (source['sourceMaterial']) {
            this.sourceMaterial = new fhir.Reference(source.sourceMaterial);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"SubstanceSpecification" fhir: SubstanceSpecification.resourceType:"SubstanceSpecification"', });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["domain"]) {
            issues.push(...this.domain.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["source"]) {
            this.source.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation());
        }
        if (this["moiety"]) {
            this.moiety.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["referenceInformation"]) {
            issues.push(...this.referenceInformation.doModelValidation());
        }
        if (this["structure"]) {
            issues.push(...this.structure.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            this.name.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["molecularWeight"]) {
            this.molecularWeight.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relationship"]) {
            this.relationship.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["nucleicAcid"]) {
            issues.push(...this.nucleicAcid.doModelValidation());
        }
        if (this["polymer"]) {
            issues.push(...this.polymer.doModelValidation());
        }
        if (this["protein"]) {
            issues.push(...this.protein.doModelValidation());
        }
        if (this["sourceMaterial"]) {
            issues.push(...this.sourceMaterial.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSpecification._fts_dataType = 'SubstanceSpecification';
//# sourceMappingURL=data:application/json;base64,