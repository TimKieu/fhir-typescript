/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Identifier } from './Identifier.js';
import { FhirString } from './FhirString.js';
import { Quantity } from './Quantity.js';
import { Reference } from './Reference.js';
import { Attachment } from './Attachment.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Range } from './Range.js';
import { Ratio } from './Ratio.js';

// <auto-generated/>
/**
 * Moiety, for structural modifications.
 */
var SubstanceSpecificationMoiety = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationMoiety, _super);
    /**
     * Default constructor for SubstanceSpecificationMoiety - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationMoiety(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['stereochemistry']) {
            _this.stereochemistry = new CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            _this.opticalActivity = new CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            _this.molecularFormula = new FhirString({ value: source.molecularFormula });
        }
        if (source['amount']) {
            _this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            _this.amount = new Quantity(source.amountQuantity);
        }
        else if (source['amountString']) {
            _this.amount = new FhirString({ value: source.amountString });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationMoiety.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["role"]) {
            (_a = outcome.issue).push.apply(_a, this.role.doModelValidation().issue);
        }
        if (this["identifier"]) {
            (_b = outcome.issue).push.apply(_b, this.identifier.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["stereochemistry"]) {
            (_d = outcome.issue).push.apply(_d, this.stereochemistry.doModelValidation().issue);
        }
        if (this["opticalActivity"]) {
            (_e = outcome.issue).push.apply(_e, this.opticalActivity.doModelValidation().issue);
        }
        if (this["molecularFormula"]) {
            (_f = outcome.issue).push.apply(_f, this.molecularFormula.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationMoiety._fts_dataType = 'SubstanceSpecificationMoiety';
    /**
     * Internal flag to properly serialize choice-type element SubstanceSpecification.moiety.amount[x]
     */
    SubstanceSpecificationMoiety._fts_amountIsChoice = true;
    return SubstanceSpecificationMoiety;
}(BackboneElement));
/**
 * General specifications for this substance, including how it is related to other substances.
 */
var SubstanceSpecificationProperty = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationProperty, _super);
    /**
     * Default constructor for SubstanceSpecificationProperty - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationProperty(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['parameters']) {
            _this.parameters = new FhirString({ value: source.parameters });
        }
        if (source['definingSubstance']) {
            _this.definingSubstance = source.definingSubstance;
        }
        else if (source['definingSubstanceReference']) {
            _this.definingSubstance = new Reference(source.definingSubstanceReference);
        }
        else if (source['definingSubstanceCodeableConcept']) {
            _this.definingSubstance = new CodeableConcept(source.definingSubstanceCodeableConcept);
        }
        if (source['amount']) {
            _this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            _this.amount = new Quantity(source.amountQuantity);
        }
        else if (source['amountString']) {
            _this.amount = new FhirString({ value: source.amountString });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationProperty.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (this["code"]) {
            (_b = outcome.issue).push.apply(_b, this.code.doModelValidation().issue);
        }
        if (this["parameters"]) {
            (_c = outcome.issue).push.apply(_c, this.parameters.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationProperty._fts_dataType = 'SubstanceSpecificationProperty';
    /**
     * Internal flag to properly serialize choice-type element SubstanceSpecification.property.definingSubstance[x]
     */
    SubstanceSpecificationProperty._fts_definingSubstanceIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element SubstanceSpecification.property.amount[x]
     */
    SubstanceSpecificationProperty._fts_amountIsChoice = true;
    return SubstanceSpecificationProperty;
}(BackboneElement));
/**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
var SubstanceSpecificationStructureIsotopeMolecularWeight = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationStructureIsotopeMolecularWeight, _super);
    /**
     * Default constructor for SubstanceSpecificationStructureIsotopeMolecularWeight - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationStructureIsotopeMolecularWeight(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['method']) {
            _this.method = new CodeableConcept(source.method);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['amount']) {
            _this.amount = new Quantity(source.amount);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationStructureIsotopeMolecularWeight.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["method"]) {
            (_a = outcome.issue).push.apply(_a, this.method.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_c = outcome.issue).push.apply(_c, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationStructureIsotopeMolecularWeight._fts_dataType = 'SubstanceSpecificationStructureIsotopeMolecularWeight';
    return SubstanceSpecificationStructureIsotopeMolecularWeight;
}(BackboneElement));
/**
 * Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
 */
var SubstanceSpecificationStructureIsotope = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationStructureIsotope, _super);
    /**
     * Default constructor for SubstanceSpecificationStructureIsotope - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationStructureIsotope(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['name']) {
            _this.name = new CodeableConcept(source.name);
        }
        if (source['substitution']) {
            _this.substitution = new CodeableConcept(source.substitution);
        }
        if (source['halfLife']) {
            _this.halfLife = new Quantity(source.halfLife);
        }
        if (source['molecularWeight']) {
            _this.molecularWeight = new SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationStructureIsotope.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        if (this["substitution"]) {
            (_c = outcome.issue).push.apply(_c, this.substitution.doModelValidation().issue);
        }
        if (this["halfLife"]) {
            (_d = outcome.issue).push.apply(_d, this.halfLife.doModelValidation().issue);
        }
        if (this["molecularWeight"]) {
            (_e = outcome.issue).push.apply(_e, this.molecularWeight.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationStructureIsotope._fts_dataType = 'SubstanceSpecificationStructureIsotope';
    return SubstanceSpecificationStructureIsotope;
}(BackboneElement));
/**
 * Molecular structural representation.
 */
var SubstanceSpecificationStructureRepresentation = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationStructureRepresentation, _super);
    /**
     * Default constructor for SubstanceSpecificationStructureRepresentation - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationStructureRepresentation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['representation']) {
            _this.representation = new FhirString({ value: source.representation });
        }
        if (source['attachment']) {
            _this.attachment = new Attachment(source.attachment);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationStructureRepresentation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["representation"]) {
            (_b = outcome.issue).push.apply(_b, this.representation.doModelValidation().issue);
        }
        if (this["attachment"]) {
            (_c = outcome.issue).push.apply(_c, this.attachment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationStructureRepresentation._fts_dataType = 'SubstanceSpecificationStructureRepresentation';
    return SubstanceSpecificationStructureRepresentation;
}(BackboneElement));
/**
 * Structural information.
 */
var SubstanceSpecificationStructure = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationStructure, _super);
    /**
     * Default constructor for SubstanceSpecificationStructure - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationStructure(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['stereochemistry']) {
            _this.stereochemistry = new CodeableConcept(source.stereochemistry);
        }
        if (source['opticalActivity']) {
            _this.opticalActivity = new CodeableConcept(source.opticalActivity);
        }
        if (source['molecularFormula']) {
            _this.molecularFormula = new FhirString({ value: source.molecularFormula });
        }
        if (source['molecularFormulaByMoiety']) {
            _this.molecularFormulaByMoiety = new FhirString({ value: source.molecularFormulaByMoiety });
        }
        if (source['isotope']) {
            _this.isotope = source.isotope.map(function (x) { return new SubstanceSpecificationStructureIsotope(x); });
        }
        else {
            _this.isotope = [];
        }
        if (source['molecularWeight']) {
            _this.molecularWeight = new SubstanceSpecificationStructureIsotopeMolecularWeight(source.molecularWeight);
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        if (source['representation']) {
            _this.representation = source.representation.map(function (x) { return new SubstanceSpecificationStructureRepresentation(x); });
        }
        else {
            _this.representation = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationStructure.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["stereochemistry"]) {
            (_a = outcome.issue).push.apply(_a, this.stereochemistry.doModelValidation().issue);
        }
        if (this["opticalActivity"]) {
            (_b = outcome.issue).push.apply(_b, this.opticalActivity.doModelValidation().issue);
        }
        if (this["molecularFormula"]) {
            (_c = outcome.issue).push.apply(_c, this.molecularFormula.doModelValidation().issue);
        }
        if (this["molecularFormulaByMoiety"]) {
            (_d = outcome.issue).push.apply(_d, this.molecularFormulaByMoiety.doModelValidation().issue);
        }
        if (this["isotope"]) {
            this.isotope.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["molecularWeight"]) {
            (_e = outcome.issue).push.apply(_e, this.molecularWeight.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["representation"]) {
            this.representation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationStructure._fts_dataType = 'SubstanceSpecificationStructure';
    return SubstanceSpecificationStructure;
}(BackboneElement));
/**
 * Codes associated with the substance.
 */
var SubstanceSpecificationCode = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationCode, _super);
    /**
     * Default constructor for SubstanceSpecificationCode - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationCode(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['status']) {
            _this.status = new CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            _this.statusDate = new FhirDateTime({ value: source.statusDate });
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationCode.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["status"]) {
            (_b = outcome.issue).push.apply(_b, this.status.doModelValidation().issue);
        }
        if (this["statusDate"]) {
            (_c = outcome.issue).push.apply(_c, this.statusDate.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_d = outcome.issue).push.apply(_d, this.comment.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationCode._fts_dataType = 'SubstanceSpecificationCode';
    return SubstanceSpecificationCode;
}(BackboneElement));
/**
 * Details of the official nature of this name.
 */
var SubstanceSpecificationNameOfficial = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationNameOfficial, _super);
    /**
     * Default constructor for SubstanceSpecificationNameOfficial - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationNameOfficial(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['authority']) {
            _this.authority = new CodeableConcept(source.authority);
        }
        if (source['status']) {
            _this.status = new CodeableConcept(source.status);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationNameOfficial.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["authority"]) {
            (_a = outcome.issue).push.apply(_a, this.authority.doModelValidation().issue);
        }
        if (this["status"]) {
            (_b = outcome.issue).push.apply(_b, this.status.doModelValidation().issue);
        }
        if (this["date"]) {
            (_c = outcome.issue).push.apply(_c, this.date.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationNameOfficial._fts_dataType = 'SubstanceSpecificationNameOfficial';
    return SubstanceSpecificationNameOfficial;
}(BackboneElement));
/**
 * Names applicable to this substance.
 */
var SubstanceSpecificationName = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationName$1, _super);
    /**
     * Default constructor for SubstanceSpecificationName - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationName$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['status']) {
            _this.status = new CodeableConcept(source.status);
        }
        if (source['preferred']) {
            _this.preferred = new FhirBoolean({ value: source.preferred });
        }
        if (source['language']) {
            _this.language = source.language.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.language = [];
        }
        if (source['domain']) {
            _this.domain = source.domain.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.domain = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['synonym']) {
            _this.synonym = source.synonym.map(function (x) { return new SubstanceSpecificationName(x); });
        }
        else {
            _this.synonym = [];
        }
        if (source['translation']) {
            _this.translation = source.translation.map(function (x) { return new SubstanceSpecificationName(x); });
        }
        else {
            _this.translation = [];
        }
        if (source['official']) {
            _this.official = source.official.map(function (x) { return new SubstanceSpecificationNameOfficial(x); });
        }
        else {
            _this.official = [];
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationName$1.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: SubstanceSpecification.name.name:string', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["status"]) {
            (_c = outcome.issue).push.apply(_c, this.status.doModelValidation().issue);
        }
        if (this["preferred"]) {
            (_d = outcome.issue).push.apply(_d, this.preferred.doModelValidation().issue);
        }
        if (this["language"]) {
            this.language.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["domain"]) {
            this.domain.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["synonym"]) {
            this.synonym.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["translation"]) {
            this.translation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["official"]) {
            this.official.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationName$1._fts_dataType = 'SubstanceSpecificationName';
    return SubstanceSpecificationName$1;
}(BackboneElement));
/**
 * A link between this substance and another, with details of the relationship.
 */
var SubstanceSpecificationRelationship = /** @class */ (function (_super) {
    __extends(SubstanceSpecificationRelationship, _super);
    /**
     * Default constructor for SubstanceSpecificationRelationship - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecificationRelationship(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['substance']) {
            _this.substance = source.substance;
        }
        else if (source['substanceReference']) {
            _this.substance = new Reference(source.substanceReference);
        }
        else if (source['substanceCodeableConcept']) {
            _this.substance = new CodeableConcept(source.substanceCodeableConcept);
        }
        if (source['relationship']) {
            _this.relationship = new CodeableConcept(source.relationship);
        }
        if (source['isDefining']) {
            _this.isDefining = new FhirBoolean({ value: source.isDefining });
        }
        if (source['amount']) {
            _this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            _this.amount = new Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            _this.amount = new Range(source.amountRange);
        }
        else if (source['amountRatio']) {
            _this.amount = new Ratio(source.amountRatio);
        }
        else if (source['amountString']) {
            _this.amount = new FhirString({ value: source.amountString });
        }
        if (source['amountRatioLowLimit']) {
            _this.amountRatioLowLimit = new Ratio(source.amountRatioLowLimit);
        }
        if (source['amountType']) {
            _this.amountType = new CodeableConcept(source.amountType);
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecificationRelationship.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["relationship"]) {
            (_a = outcome.issue).push.apply(_a, this.relationship.doModelValidation().issue);
        }
        if (this["isDefining"]) {
            (_b = outcome.issue).push.apply(_b, this.isDefining.doModelValidation().issue);
        }
        if (this["amountRatioLowLimit"]) {
            (_c = outcome.issue).push.apply(_c, this.amountRatioLowLimit.doModelValidation().issue);
        }
        if (this["amountType"]) {
            (_d = outcome.issue).push.apply(_d, this.amountType.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecificationRelationship._fts_dataType = 'SubstanceSpecificationRelationship';
    /**
     * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.substance[x]
     */
    SubstanceSpecificationRelationship._fts_substanceIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element SubstanceSpecification.relationship.amount[x]
     */
    SubstanceSpecificationRelationship._fts_amountIsChoice = true;
    return SubstanceSpecificationRelationship;
}(BackboneElement));
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
var SubstanceSpecification = /** @class */ (function (_super) {
    __extends(SubstanceSpecification, _super);
    /**
     * Default constructor for SubstanceSpecification - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSpecification(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SubstanceSpecification';
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['status']) {
            _this.status = new CodeableConcept(source.status);
        }
        if (source['domain']) {
            _this.domain = new CodeableConcept(source.domain);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        if (source['moiety']) {
            _this.moiety = source.moiety.map(function (x) { return new SubstanceSpecificationMoiety(x); });
        }
        else {
            _this.moiety = [];
        }
        if (source['property']) {
            _this.property = source.property.map(function (x) { return new SubstanceSpecificationProperty(x); });
        }
        else {
            _this.property = [];
        }
        if (source['referenceInformation']) {
            _this.referenceInformation = new Reference(source.referenceInformation);
        }
        if (source['structure']) {
            _this.structure = new SubstanceSpecificationStructure(source.structure);
        }
        if (source['code']) {
            _this.code = source.code.map(function (x) { return new SubstanceSpecificationCode(x); });
        }
        else {
            _this.code = [];
        }
        if (source['name']) {
            _this.name = source.name.map(function (x) { return new SubstanceSpecificationName(x); });
        }
        else {
            _this.name = [];
        }
        if (source['molecularWeight']) {
            _this.molecularWeight = source.molecularWeight.map(function (x) { return new SubstanceSpecificationStructureIsotopeMolecularWeight(x); });
        }
        else {
            _this.molecularWeight = [];
        }
        if (source['relationship']) {
            _this.relationship = source.relationship.map(function (x) { return new SubstanceSpecificationRelationship(x); });
        }
        else {
            _this.relationship = [];
        }
        if (source['nucleicAcid']) {
            _this.nucleicAcid = new Reference(source.nucleicAcid);
        }
        if (source['polymer']) {
            _this.polymer = new Reference(source.polymer);
        }
        if (source['protein']) {
            _this.protein = new Reference(source.protein);
        }
        if (source['sourceMaterial']) {
            _this.sourceMaterial = new Reference(source.sourceMaterial);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSpecification.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SubstanceSpecification" fhir: SubstanceSpecification.resourceType:"SubstanceSpecification"', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["status"]) {
            (_c = outcome.issue).push.apply(_c, this.status.doModelValidation().issue);
        }
        if (this["domain"]) {
            (_d = outcome.issue).push.apply(_d, this.domain.doModelValidation().issue);
        }
        if (this["description"]) {
            (_e = outcome.issue).push.apply(_e, this.description.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["comment"]) {
            (_f = outcome.issue).push.apply(_f, this.comment.doModelValidation().issue);
        }
        if (this["moiety"]) {
            this.moiety.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["property"]) {
            this.property.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["referenceInformation"]) {
            (_g = outcome.issue).push.apply(_g, this.referenceInformation.doModelValidation().issue);
        }
        if (this["structure"]) {
            (_h = outcome.issue).push.apply(_h, this.structure.doModelValidation().issue);
        }
        if (this["code"]) {
            this.code.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            this.name.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["molecularWeight"]) {
            this.molecularWeight.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relationship"]) {
            this.relationship.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["nucleicAcid"]) {
            (_j = outcome.issue).push.apply(_j, this.nucleicAcid.doModelValidation().issue);
        }
        if (this["polymer"]) {
            (_k = outcome.issue).push.apply(_k, this.polymer.doModelValidation().issue);
        }
        if (this["protein"]) {
            (_l = outcome.issue).push.apply(_l, this.protein.doModelValidation().issue);
        }
        if (this["sourceMaterial"]) {
            (_m = outcome.issue).push.apply(_m, this.sourceMaterial.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSpecification._fts_dataType = 'SubstanceSpecification';
    return SubstanceSpecification;
}(DomainResource));

export { SubstanceSpecification, SubstanceSpecificationCode, SubstanceSpecificationMoiety, SubstanceSpecificationName, SubstanceSpecificationNameOfficial, SubstanceSpecificationProperty, SubstanceSpecificationRelationship, SubstanceSpecificationStructure, SubstanceSpecificationStructureIsotope, SubstanceSpecificationStructureIsotopeMolecularWeight, SubstanceSpecificationStructureRepresentation };
//# sourceMappingURL=SubstanceSpecification.js.map
