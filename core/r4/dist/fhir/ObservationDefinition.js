// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ObservationDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { UcumUnitsCodings, } from '../fhirValueSets/UcumUnitsCodings.js';
// @ts-ignore
import { ObservationRangeCategoryCodes } from '../fhirValueSets/ObservationRangeCategoryCodes.js';
// @ts-ignore
import { ReferencerangeMeaningCodings, } from '../fhirValueSets/ReferencerangeMeaningCodings.js';
// @ts-ignore
import { AdministrativeGenderCodes } from '../fhirValueSets/AdministrativeGenderCodes.js';
// @ts-ignore
import { PermittedDataTypeCodes } from '../fhirValueSets/PermittedDataTypeCodes.js';
/**
 * Characteristics for quantitative results of this observation.
 */
export class ObservationDefinitionQuantitativeDetails extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQuantitativeDetails - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['customaryUnit']) {
            this.customaryUnit = new fhir.CodeableConcept(source.customaryUnit);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['conversionFactor']) {
            this.conversionFactor = new fhir.FhirDecimal({ value: source.conversionFactor });
        }
        if (source['_conversionFactor']) {
            if (this.conversionFactor) {
                this.conversionFactor.addExtendedProperties(source._conversionFactor);
            }
            else {
                this.conversionFactor = new fhir.FhirDecimal(source._conversionFactor);
            }
        }
        if (source['decimalPrecision']) {
            this.decimalPrecision = new fhir.FhirInteger({ value: source.decimalPrecision });
        }
        if (source['_decimalPrecision']) {
            if (this.decimalPrecision) {
                this.decimalPrecision.addExtendedProperties(source._decimalPrecision);
            }
            else {
                this.decimalPrecision = new fhir.FhirInteger(source._decimalPrecision);
            }
        }
    }
    /**
     * Extensible-bound Value Set for customaryUnit (ObservationDefinition.quantitativeDetails.customaryUnit)
     */
    static get customaryUnitExtensibleCodings() {
        return UcumUnitsCodings;
    }
    /**
     * Extensible-bound Value Set for unit (ObservationDefinition.quantitativeDetails.unit)
     */
    static get unitExtensibleCodings() {
        return UcumUnitsCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ObservationDefinition.quantitativeDetails';
        }
        if (this["customaryUnit"]) {
            issues.push(...this.customaryUnit.doModelValidation(expression + '.customaryUnit'));
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation(expression + '.unit'));
        }
        if (this["conversionFactor"]) {
            issues.push(...this.conversionFactor.doModelValidation(expression + '.conversionFactor'));
        }
        if (this["decimalPrecision"]) {
            issues.push(...this.decimalPrecision.doModelValidation(expression + '.decimalPrecision'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinitionQuantitativeDetails._fts_dataType = 'ObservationDefinitionQuantitativeDetails';
/**
 * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
 */
export class ObservationDefinitionQualifiedInterval extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQualifiedInterval - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['range']) {
            this.range = new fhir.Range(source.range);
        }
        if (source['context']) {
            this.context = new fhir.CodeableConcept(source.context);
        }
        if (source['appliesTo']) {
            this.appliesTo = source.appliesTo.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.appliesTo = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['_gender']) {
            if (this.gender) {
                this.gender.addExtendedProperties(source._gender);
            }
            else {
                this.gender = new fhir.FhirCode(source._gender);
            }
        }
        if (source['age']) {
            this.age = new fhir.Range(source.age);
        }
        if (source['gestationalAge']) {
            this.gestationalAge = new fhir.Range(source.gestationalAge);
        }
        if (source['condition']) {
            this.condition = new fhir.FhirString({ value: source.condition });
        }
        if (source['_condition']) {
            if (this.condition) {
                this.condition.addExtendedProperties(source._condition);
            }
            else {
                this.condition = new fhir.FhirString(source._condition);
            }
        }
    }
    /**
     * Required-bound Value Set for category (ObservationDefinition.qualifiedInterval.category)
     */
    static get categoryRequiredCodes() {
        return ObservationRangeCategoryCodes;
    }
    /**
     * Extensible-bound Value Set for context (ObservationDefinition.qualifiedInterval.context)
     */
    static get contextExtensibleCodings() {
        return ReferencerangeMeaningCodings;
    }
    /**
     * Required-bound Value Set for gender (ObservationDefinition.qualifiedInterval.gender)
     */
    static get genderRequiredCodes() {
        return AdministrativeGenderCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ObservationDefinition.qualifiedInterval';
        }
        if (this['category'] && (!Object.values(ObservationRangeCategoryCodes).includes(this.category.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'category (ObservationDefinition.qualifiedInterval.category) of type code is missing code for Required binding to: ObservationRangeCategory', expression: [expression] });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation(expression + '.category'));
        }
        if (this["range"]) {
            issues.push(...this.range.doModelValidation(expression + '.range'));
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation(expression + '.context'));
        }
        if (this["appliesTo"]) {
            this.appliesTo.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.appliesTo[${i}]`)); });
        }
        if (this['gender'] && (!Object.values(AdministrativeGenderCodes).includes(this.gender.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'gender (ObservationDefinition.qualifiedInterval.gender) of type code is missing code for Required binding to: AdministrativeGender', expression: [expression] });
        }
        if (this["gender"]) {
            issues.push(...this.gender.doModelValidation(expression + '.gender'));
        }
        if (this["age"]) {
            issues.push(...this.age.doModelValidation(expression + '.age'));
        }
        if (this["gestationalAge"]) {
            issues.push(...this.gestationalAge.doModelValidation(expression + '.gestationalAge'));
        }
        if (this["condition"]) {
            issues.push(...this.condition.doModelValidation(expression + '.condition'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinitionQualifiedInterval._fts_dataType = 'ObservationDefinitionQualifiedInterval';
/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
export class ObservationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ObservationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ObservationDefinition';
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['permittedDataType']) {
            this.permittedDataType = source.permittedDataType.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.permittedDataType = [];
        }
        if (source['_permittedDataType']) {
            source._permittedDataType.forEach((x, i) => {
                if (this.permittedDataType.length >= i) {
                    if (x) {
                        this.permittedDataType[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.permittedDataType.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['multipleResultsAllowed']) {
            this.multipleResultsAllowed = new fhir.FhirBoolean({ value: source.multipleResultsAllowed });
        }
        if (source['_multipleResultsAllowed']) {
            if (this.multipleResultsAllowed) {
                this.multipleResultsAllowed.addExtendedProperties(source._multipleResultsAllowed);
            }
            else {
                this.multipleResultsAllowed = new fhir.FhirBoolean(source._multipleResultsAllowed);
            }
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['preferredReportName']) {
            this.preferredReportName = new fhir.FhirString({ value: source.preferredReportName });
        }
        if (source['_preferredReportName']) {
            if (this.preferredReportName) {
                this.preferredReportName.addExtendedProperties(source._preferredReportName);
            }
            else {
                this.preferredReportName = new fhir.FhirString(source._preferredReportName);
            }
        }
        if (source['quantitativeDetails']) {
            this.quantitativeDetails = new fhir.ObservationDefinitionQuantitativeDetails(source.quantitativeDetails);
        }
        if (source['qualifiedInterval']) {
            this.qualifiedInterval = source.qualifiedInterval.map((x) => new fhir.ObservationDefinitionQualifiedInterval(x));
        }
        else {
            this.qualifiedInterval = [];
        }
        if (source['validCodedValueSet']) {
            this.validCodedValueSet = new fhir.Reference(source.validCodedValueSet);
        }
        if (source['normalCodedValueSet']) {
            this.normalCodedValueSet = new fhir.Reference(source.normalCodedValueSet);
        }
        if (source['abnormalCodedValueSet']) {
            this.abnormalCodedValueSet = new fhir.Reference(source.abnormalCodedValueSet);
        }
        if (source['criticalCodedValueSet']) {
            this.criticalCodedValueSet = new fhir.Reference(source.criticalCodedValueSet);
        }
    }
    /**
     * Required-bound Value Set for permittedDataType (ObservationDefinition.permittedDataType)
     */
    static get permittedDataTypeRequiredCodes() {
        return PermittedDataTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ObservationDefinition';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: ObservationDefinition.resourceType:"ObservationDefinition"', expression: [expression] });
        }
        if (this["category"]) {
            this.category.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.category[${i}]`)); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: ObservationDefinition.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this['permittedDataType']) {
            this.permittedDataType.forEach((v) => {
                if (!Object.values(PermittedDataTypeCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'permittedDataType (ObservationDefinition.permittedDataType) of type code is missing code for Required binding to: PermittedDataType', expression: [expression] });
                }
            });
        }
        if (this["permittedDataType"]) {
            this.permittedDataType.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.permittedDataType[${i}]`)); });
        }
        if (this["multipleResultsAllowed"]) {
            issues.push(...this.multipleResultsAllowed.doModelValidation(expression + '.multipleResultsAllowed'));
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation(expression + '.method'));
        }
        if (this["preferredReportName"]) {
            issues.push(...this.preferredReportName.doModelValidation(expression + '.preferredReportName'));
        }
        if (this["quantitativeDetails"]) {
            issues.push(...this.quantitativeDetails.doModelValidation(expression + '.quantitativeDetails'));
        }
        if (this["qualifiedInterval"]) {
            this.qualifiedInterval.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.qualifiedInterval[${i}]`)); });
        }
        if (this["validCodedValueSet"]) {
            issues.push(...this.validCodedValueSet.doModelValidation(expression + '.validCodedValueSet'));
        }
        if (this["normalCodedValueSet"]) {
            issues.push(...this.normalCodedValueSet.doModelValidation(expression + '.normalCodedValueSet'));
        }
        if (this["abnormalCodedValueSet"]) {
            issues.push(...this.abnormalCodedValueSet.doModelValidation(expression + '.abnormalCodedValueSet'));
        }
        if (this["criticalCodedValueSet"]) {
            issues.push(...this.criticalCodedValueSet.doModelValidation(expression + '.criticalCodedValueSet'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinition._fts_dataType = 'ObservationDefinition';
//# sourceMappingURL=data:application/json;base64,