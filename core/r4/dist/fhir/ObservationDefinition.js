// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ObservationDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ObservationRangeCategoryVsValidation } from '../fhirValueSets/ObservationRangeCategoryVsValidation.js';
// @ts-ignore
import { AdministrativeGenderVsValidation } from '../fhirValueSets/AdministrativeGenderVsValidation.js';
// @ts-ignore
import { PermittedDataTypeVsValidation } from '../fhirValueSets/PermittedDataTypeVsValidation.js';
/**
 * Characteristics for quantitative results of this observation.
 */
export class ObservationDefinitionQuantitativeDetails extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQuantitativeDetails - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['customaryUnit']) {
            this.customaryUnit = new fhir.CodeableConcept(source.customaryUnit);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['conversionFactor']) {
            this.conversionFactor = new fhir.FhirDecimal({ value: source.conversionFactor });
        }
        if (source['_conversionFactor']) {
            if (this.conversionFactor) {
                this.conversionFactor.addExtendedProperties(source._conversionFactor);
            }
            else {
                this.conversionFactor = new fhir.FhirDecimal(source._conversionFactor);
            }
        }
        if (source['decimalPrecision']) {
            this.decimalPrecision = new fhir.FhirInteger({ value: source.decimalPrecision });
        }
        if (source['_decimalPrecision']) {
            if (this.decimalPrecision) {
                this.decimalPrecision.addExtendedProperties(source._decimalPrecision);
            }
            else {
                this.decimalPrecision = new fhir.FhirInteger(source._decimalPrecision);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ObservationDefinition.quantitativeDetails';
        }
        this.vOptS('customaryUnit', expression);
        this.vOptS('unit', expression);
        this.vOptS('conversionFactor', expression);
        this.vOptS('decimalPrecision', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinitionQuantitativeDetails._fts_dataType = 'ObservationDefinitionQuantitativeDetails';
/**
 * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
 */
export class ObservationDefinitionQualifiedInterval extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQualifiedInterval - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['range']) {
            this.range = new fhir.Range(source.range);
        }
        if (source['context']) {
            this.context = new fhir.CodeableConcept(source.context);
        }
        if (source['appliesTo']) {
            this.appliesTo = source.appliesTo.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.appliesTo = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['_gender']) {
            if (this.gender) {
                this.gender.addExtendedProperties(source._gender);
            }
            else {
                this.gender = new fhir.FhirCode(source._gender);
            }
        }
        if (source['age']) {
            this.age = new fhir.Range(source.age);
        }
        if (source['gestationalAge']) {
            this.gestationalAge = new fhir.Range(source.gestationalAge);
        }
        if (source['condition']) {
            this.condition = new fhir.FhirString({ value: source.condition });
        }
        if (source['_condition']) {
            if (this.condition) {
                this.condition.addExtendedProperties(source._condition);
            }
            else {
                this.condition = new fhir.FhirString(source._condition);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ObservationDefinition.qualifiedInterval';
        }
        this.vOptSV('category', expression, 'ObservationRangeCategory', ObservationRangeCategoryVsValidation, 'r');
        this.vOptS('range', expression);
        this.vOptS('context', expression);
        this.vOptA('appliesTo', expression);
        this.vOptSV('gender', expression, 'AdministrativeGender', AdministrativeGenderVsValidation, 'r');
        this.vOptS('age', expression);
        this.vOptS('gestationalAge', expression);
        this.vOptS('condition', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinitionQualifiedInterval._fts_dataType = 'ObservationDefinitionQualifiedInterval';
/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
export class ObservationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ObservationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ObservationDefinition';
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['permittedDataType']) {
            this.permittedDataType = source.permittedDataType.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.permittedDataType = [];
        }
        if (source['_permittedDataType']) {
            source._permittedDataType.forEach((x, i) => {
                if (this.permittedDataType.length >= i) {
                    if (x) {
                        this.permittedDataType[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.permittedDataType.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['multipleResultsAllowed']) {
            this.multipleResultsAllowed = new fhir.FhirBoolean({ value: source.multipleResultsAllowed });
        }
        if (source['_multipleResultsAllowed']) {
            if (this.multipleResultsAllowed) {
                this.multipleResultsAllowed.addExtendedProperties(source._multipleResultsAllowed);
            }
            else {
                this.multipleResultsAllowed = new fhir.FhirBoolean(source._multipleResultsAllowed);
            }
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['preferredReportName']) {
            this.preferredReportName = new fhir.FhirString({ value: source.preferredReportName });
        }
        if (source['_preferredReportName']) {
            if (this.preferredReportName) {
                this.preferredReportName.addExtendedProperties(source._preferredReportName);
            }
            else {
                this.preferredReportName = new fhir.FhirString(source._preferredReportName);
            }
        }
        if (source['quantitativeDetails']) {
            this.quantitativeDetails = new fhir.ObservationDefinitionQuantitativeDetails(source.quantitativeDetails);
        }
        if (source['qualifiedInterval']) {
            this.qualifiedInterval = source.qualifiedInterval.map((x) => new fhir.ObservationDefinitionQualifiedInterval(x));
        }
        else {
            this.qualifiedInterval = [];
        }
        if (source['validCodedValueSet']) {
            this.validCodedValueSet = new fhir.Reference(source.validCodedValueSet);
        }
        if (source['normalCodedValueSet']) {
            this.normalCodedValueSet = new fhir.Reference(source.normalCodedValueSet);
        }
        if (source['abnormalCodedValueSet']) {
            this.abnormalCodedValueSet = new fhir.Reference(source.abnormalCodedValueSet);
        }
        if (source['criticalCodedValueSet']) {
            this.criticalCodedValueSet = new fhir.Reference(source.criticalCodedValueSet);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ObservationDefinition';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('category', expression);
        this.vReqS('code', expression);
        this.vOptA('identifier', expression);
        this.vOptAV('permittedDataType', expression, 'PermittedDataType', PermittedDataTypeVsValidation, 'r');
        this.vOptS('multipleResultsAllowed', expression);
        this.vOptS('method', expression);
        this.vOptS('preferredReportName', expression);
        this.vOptS('quantitativeDetails', expression);
        this.vOptA('qualifiedInterval', expression);
        this.vOptS('validCodedValueSet', expression);
        this.vOptS('normalCodedValueSet', expression);
        this.vOptS('abnormalCodedValueSet', expression);
        this.vOptS('criticalCodedValueSet', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinition._fts_dataType = 'ObservationDefinition';
//# sourceMappingURL=data:application/json;base64,