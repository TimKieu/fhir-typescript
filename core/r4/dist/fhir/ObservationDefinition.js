// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ObservationDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { UcumUnitsCodings, } from '../fhirValueSets/UcumUnitsCodings.js';
// @ts-ignore
import { ObservationRangeCategoryCodes } from '../fhirValueSets/ObservationRangeCategoryCodes.js';
// @ts-ignore
import { ReferencerangeMeaningCodings, } from '../fhirValueSets/ReferencerangeMeaningCodings.js';
// @ts-ignore
import { AdministrativeGenderCodes } from '../fhirValueSets/AdministrativeGenderCodes.js';
// @ts-ignore
import { PermittedDataTypeCodes } from '../fhirValueSets/PermittedDataTypeCodes.js';
/**
 * Characteristics for quantitative results of this observation.
 */
export class ObservationDefinitionQuantitativeDetails extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQuantitativeDetails - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['customaryUnit']) {
            this.customaryUnit = new fhir.CodeableConcept(source.customaryUnit);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['conversionFactor']) {
            this.conversionFactor = new fhir.FhirDecimal({ value: source.conversionFactor });
        }
        if (source['decimalPrecision']) {
            this.decimalPrecision = new fhir.FhirInteger({ value: source.decimalPrecision });
        }
    }
    /**
     * Extensible-bound Value Set for customaryUnit (ObservationDefinition.quantitativeDetails.customaryUnit)
     */
    static get customaryUnitExtensibleCodings() {
        return UcumUnitsCodings;
    }
    /**
     * Extensible-bound Value Set for unit (ObservationDefinition.quantitativeDetails.unit)
     */
    static get unitExtensibleCodings() {
        return UcumUnitsCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["customaryUnit"]) {
            issues.push(...this.customaryUnit.doModelValidation());
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation());
        }
        if (this["conversionFactor"]) {
            issues.push(...this.conversionFactor.doModelValidation());
        }
        if (this["decimalPrecision"]) {
            issues.push(...this.decimalPrecision.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinitionQuantitativeDetails._fts_dataType = 'ObservationDefinitionQuantitativeDetails';
/**
 * Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
 */
export class ObservationDefinitionQualifiedInterval extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationDefinitionQualifiedInterval - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        if (source['range']) {
            this.range = new fhir.Range(source.range);
        }
        if (source['context']) {
            this.context = new fhir.CodeableConcept(source.context);
        }
        if (source['appliesTo']) {
            this.appliesTo = source.appliesTo.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.appliesTo = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['age']) {
            this.age = new fhir.Range(source.age);
        }
        if (source['gestationalAge']) {
            this.gestationalAge = new fhir.Range(source.gestationalAge);
        }
        if (source['condition']) {
            this.condition = new fhir.FhirString({ value: source.condition });
        }
    }
    /**
     * Required-bound Value Set for category (ObservationDefinition.qualifiedInterval.category)
     */
    static get categoryRequiredCodes() {
        return ObservationRangeCategoryCodes;
    }
    /**
     * Extensible-bound Value Set for context (ObservationDefinition.qualifiedInterval.context)
     */
    static get contextExtensibleCodings() {
        return ReferencerangeMeaningCodings;
    }
    /**
     * Required-bound Value Set for gender (ObservationDefinition.qualifiedInterval.gender)
     */
    static get genderRequiredCodes() {
        return AdministrativeGenderCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['category'] && (!Object.values(ObservationRangeCategoryCodes).includes(this.category))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property category?:fhir.FhirCode<ObservationRangeCategoryCodeType> fhir: ObservationDefinition.qualifiedInterval.category:code Required binding to: ObservationRangeCategory' });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (this["range"]) {
            issues.push(...this.range.doModelValidation());
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation());
        }
        if (this["appliesTo"]) {
            this.appliesTo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['gender'] && (!Object.values(AdministrativeGenderCodes).includes(this.gender))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property gender?:fhir.FhirCode<AdministrativeGenderCodeType> fhir: ObservationDefinition.qualifiedInterval.gender:code Required binding to: AdministrativeGender' });
        }
        if (this["gender"]) {
            issues.push(...this.gender.doModelValidation());
        }
        if (this["age"]) {
            issues.push(...this.age.doModelValidation());
        }
        if (this["gestationalAge"]) {
            issues.push(...this.gestationalAge.doModelValidation());
        }
        if (this["condition"]) {
            issues.push(...this.condition.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinitionQualifiedInterval._fts_dataType = 'ObservationDefinitionQualifiedInterval';
/**
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 */
export class ObservationDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ObservationDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ObservationDefinition';
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['permittedDataType']) {
            this.permittedDataType = source.permittedDataType.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.permittedDataType = [];
        }
        if (source['multipleResultsAllowed']) {
            this.multipleResultsAllowed = new fhir.FhirBoolean({ value: source.multipleResultsAllowed });
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['preferredReportName']) {
            this.preferredReportName = new fhir.FhirString({ value: source.preferredReportName });
        }
        if (source['quantitativeDetails']) {
            this.quantitativeDetails = new fhir.ObservationDefinitionQuantitativeDetails(source.quantitativeDetails);
        }
        if (source['qualifiedInterval']) {
            this.qualifiedInterval = source.qualifiedInterval.map((x) => new fhir.ObservationDefinitionQualifiedInterval(x));
        }
        else {
            this.qualifiedInterval = [];
        }
        if (source['validCodedValueSet']) {
            this.validCodedValueSet = new fhir.Reference(source.validCodedValueSet);
        }
        if (source['normalCodedValueSet']) {
            this.normalCodedValueSet = new fhir.Reference(source.normalCodedValueSet);
        }
        if (source['abnormalCodedValueSet']) {
            this.abnormalCodedValueSet = new fhir.Reference(source.abnormalCodedValueSet);
        }
        if (source['criticalCodedValueSet']) {
            this.criticalCodedValueSet = new fhir.Reference(source.criticalCodedValueSet);
        }
    }
    /**
     * Required-bound Value Set for permittedDataType (ObservationDefinition.permittedDataType)
     */
    static get permittedDataTypeRequiredCodes() {
        return PermittedDataTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ObservationDefinition" fhir: ObservationDefinition.resourceType:"ObservationDefinition"' });
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: ObservationDefinition.code:CodeableConcept' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['permittedDataType']) {
            this.permittedDataType.forEach((v) => {
                if (!Object.values(PermittedDataTypeCodes).includes(v)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property permittedDataType?:fhir.FhirCode<PermittedDataTypeCodeType>[] fhir: ObservationDefinition.permittedDataType:code Required binding to: PermittedDataType' });
                }
            });
        }
        if (this["permittedDataType"]) {
            this.permittedDataType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["multipleResultsAllowed"]) {
            issues.push(...this.multipleResultsAllowed.doModelValidation());
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation());
        }
        if (this["preferredReportName"]) {
            issues.push(...this.preferredReportName.doModelValidation());
        }
        if (this["quantitativeDetails"]) {
            issues.push(...this.quantitativeDetails.doModelValidation());
        }
        if (this["qualifiedInterval"]) {
            this.qualifiedInterval.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["validCodedValueSet"]) {
            issues.push(...this.validCodedValueSet.doModelValidation());
        }
        if (this["normalCodedValueSet"]) {
            issues.push(...this.normalCodedValueSet.doModelValidation());
        }
        if (this["abnormalCodedValueSet"]) {
            issues.push(...this.abnormalCodedValueSet.doModelValidation());
        }
        if (this["criticalCodedValueSet"]) {
            issues.push(...this.criticalCodedValueSet.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationDefinition._fts_dataType = 'ObservationDefinition';
//# sourceMappingURL=data:application/json;base64,