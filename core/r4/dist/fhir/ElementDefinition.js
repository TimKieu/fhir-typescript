// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ElementDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { DiscriminatorTypeCodes } from '../fhirValueSets/DiscriminatorTypeCodes.js';
// @ts-ignore
import { ResourceSlicingRulesCodes } from '../fhirValueSets/ResourceSlicingRulesCodes.js';
// @ts-ignore
import { DefinedTypesCodings, } from '../fhirValueSets/DefinedTypesCodings.js';
// @ts-ignore
import { ResourceAggregationModeCodes } from '../fhirValueSets/ResourceAggregationModeCodes.js';
// @ts-ignore
import { ReferenceVersionRulesCodes } from '../fhirValueSets/ReferenceVersionRulesCodes.js';
// @ts-ignore
import { ConstraintSeverityCodes } from '../fhirValueSets/ConstraintSeverityCodes.js';
// @ts-ignore
import { BindingStrengthCodes } from '../fhirValueSets/BindingStrengthCodes.js';
// @ts-ignore
import { PropertyRepresentationCodes } from '../fhirValueSets/PropertyRepresentationCodes.js';
/**
 * If there is no discriminator, the content is hard to process, so this should be avoided.
 */
export class ElementDefinitionSlicingDiscriminator extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionSlicingDiscriminator - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
    }
    /**
     * Required-bound Value Set for type (ElementDefinition.slicing.discriminator.type)
     */
    static get typeRequiredCodes() {
        return DiscriminatorTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.slicing.discriminator';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: ElementDefinition.slicing.discriminator.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(DiscriminatorTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: ElementDefinition.slicing.discriminator.type:code Required binding to: DiscriminatorType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['path']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property path fhir: ElementDefinition.slicing.discriminator.path:string', expression: [expression] });
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation(expression + '.path'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionSlicingDiscriminator._fts_dataType = 'ElementDefinitionSlicingDiscriminator';
/**
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
export class ElementDefinitionSlicing extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionSlicing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['discriminator']) {
            this.discriminator = source.discriminator.map((x) => new fhir.ElementDefinitionSlicingDiscriminator(x));
        }
        else {
            this.discriminator = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['ordered']) {
            this.ordered = new fhir.FhirBoolean({ value: source.ordered });
        }
        if (source['_ordered']) {
            if (this.ordered) {
                this.ordered.addExtendedProperties(source._ordered);
            }
            else {
                this.ordered = new fhir.FhirBoolean(source._ordered);
            }
        }
        if (source['rules']) {
            this.rules = new fhir.FhirCode({ value: source.rules });
        }
        else {
            this.rules = null;
        }
        if (source['_rules']) {
            if (this.rules) {
                this.rules.addExtendedProperties(source._rules);
            }
            else {
                this.rules = new fhir.FhirCode(source._rules);
            }
        }
    }
    /**
     * Required-bound Value Set for rules (ElementDefinition.slicing.rules)
     */
    static get rulesRequiredCodes() {
        return ResourceSlicingRulesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.slicing';
        }
        if (this["discriminator"]) {
            this.discriminator.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.discriminator[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["ordered"]) {
            issues.push(...this.ordered.doModelValidation(expression + '.ordered'));
        }
        if (!this['rules']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property rules fhir: ElementDefinition.slicing.rules:code', expression: [expression] });
        }
        if (this['rules'] && (!Object.values(ResourceSlicingRulesCodes).includes(this.rules.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property rules fhir: ElementDefinition.slicing.rules:code Required binding to: ResourceSlicingRules', expression: [expression] });
        }
        if (this["rules"]) {
            issues.push(...this.rules.doModelValidation(expression + '.rules'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionSlicing._fts_dataType = 'ElementDefinitionSlicing';
/**
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
 */
export class ElementDefinitionBase extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBase - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['min']) {
            this.min = new fhir.FhirUnsignedInt({ value: source.min });
        }
        else {
            this.min = null;
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirUnsignedInt(source._min);
            }
        }
        if (source['max']) {
            this.max = new fhir.FhirString({ value: source.max });
        }
        else {
            this.max = null;
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.base';
        }
        if (!this['path']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property path fhir: ElementDefinition.base.path:string', expression: [expression] });
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation(expression + '.path'));
        }
        if (!this['min']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property min fhir: ElementDefinition.base.min:unsignedInt', expression: [expression] });
        }
        if (this["min"]) {
            issues.push(...this.min.doModelValidation(expression + '.min'));
        }
        if (!this['max']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property max fhir: ElementDefinition.base.max:string', expression: [expression] });
        }
        if (this["max"]) {
            issues.push(...this.max.doModelValidation(expression + '.max'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionBase._fts_dataType = 'ElementDefinitionBase';
/**
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
export class ElementDefinitionType extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionType - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirUri({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirUri(source._code);
            }
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.profile = [];
        }
        if (source['_profile']) {
            source._profile.forEach((x, i) => {
                if (this.profile.length >= i) {
                    if (x) {
                        this.profile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.profile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['targetProfile']) {
            this.targetProfile = source.targetProfile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.targetProfile = [];
        }
        if (source['_targetProfile']) {
            source._targetProfile.forEach((x, i) => {
                if (this.targetProfile.length >= i) {
                    if (x) {
                        this.targetProfile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.targetProfile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['aggregation']) {
            this.aggregation = source.aggregation.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.aggregation = [];
        }
        if (source['_aggregation']) {
            source._aggregation.forEach((x, i) => {
                if (this.aggregation.length >= i) {
                    if (x) {
                        this.aggregation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.aggregation.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['versioning']) {
            this.versioning = new fhir.FhirCode({ value: source.versioning });
        }
        if (source['_versioning']) {
            if (this.versioning) {
                this.versioning.addExtendedProperties(source._versioning);
            }
            else {
                this.versioning = new fhir.FhirCode(source._versioning);
            }
        }
    }
    /**
     * Extensible-bound Value Set for code (ElementDefinition.type.code)
     */
    static get codeExtensibleCodings() {
        return DefinedTypesCodings;
    }
    /**
     * Required-bound Value Set for aggregation (ElementDefinition.type.aggregation)
     */
    static get aggregationRequiredCodes() {
        return ResourceAggregationModeCodes;
    }
    /**
     * Required-bound Value Set for versioning (ElementDefinition.type.versioning)
     */
    static get versioningRequiredCodes() {
        return ReferenceVersionRulesCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.type';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: ElementDefinition.type.code:uri', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["profile"]) {
            this.profile.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.profile[${i}]`)); });
        }
        if (this["targetProfile"]) {
            this.targetProfile.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.targetProfile[${i}]`)); });
        }
        if (this['aggregation']) {
            this.aggregation.forEach((v) => {
                if (!Object.values(ResourceAggregationModeCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property aggregation fhir: ElementDefinition.type.aggregation:code Required binding to: ResourceAggregationMode', expression: [expression] });
                }
            });
        }
        if (this["aggregation"]) {
            this.aggregation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.aggregation[${i}]`)); });
        }
        if (this['versioning'] && (!Object.values(ReferenceVersionRulesCodes).includes(this.versioning.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property versioning fhir: ElementDefinition.type.versioning:code Required binding to: ReferenceVersionRules', expression: [expression] });
        }
        if (this["versioning"]) {
            issues.push(...this.versioning.doModelValidation(expression + '.versioning'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionType._fts_dataType = 'ElementDefinitionType';
/**
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
export class ElementDefinitionExample extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionExample - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        else {
            this.label = null;
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueCanonical']) {
            this.value = new fhir.FhirCanonical({ value: source.valueCanonical });
        }
        else if (source['valueCode']) {
            this.value = new fhir.FhirCode({ value: source.valueCode });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueId']) {
            this.value = new fhir.FhirId({ value: source.valueId });
        }
        else if (source['valueInstant']) {
            this.value = new fhir.FhirInstant({ value: source.valueInstant });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueMarkdown']) {
            this.value = new fhir.FhirMarkdown({ value: source.valueMarkdown });
        }
        else if (source['valueOid']) {
            this.value = new fhir.FhirOid({ value: source.valueOid });
        }
        else if (source['valuePositiveInt']) {
            this.value = new fhir.FhirPositiveInt({ value: source.valuePositiveInt });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueUnsignedInt']) {
            this.value = new fhir.FhirUnsignedInt({ value: source.valueUnsignedInt });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueUrl']) {
            this.value = new fhir.FhirUrl({ value: source.valueUrl });
        }
        else if (source['valueUuid']) {
            this.value = new fhir.FhirUuid({ value: source.valueUuid });
        }
        else if (source['valueAddress']) {
            this.value = new fhir.Address(source.valueAddress);
        }
        else if (source['valueAge']) {
            this.value = new fhir.Age(source.valueAge);
        }
        else if (source['valueAnnotation']) {
            this.value = new fhir.Annotation(source.valueAnnotation);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueContactPoint']) {
            this.value = new fhir.ContactPoint(source.valueContactPoint);
        }
        else if (source['valueCount']) {
            this.value = new fhir.Count(source.valueCount);
        }
        else if (source['valueDistance']) {
            this.value = new fhir.Distance(source.valueDistance);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration);
        }
        else if (source['valueHumanName']) {
            this.value = new fhir.HumanName(source.valueHumanName);
        }
        else if (source['valueIdentifier']) {
            this.value = new fhir.Identifier(source.valueIdentifier);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney);
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData);
        }
        else if (source['valueSignature']) {
            this.value = new fhir.Signature(source.valueSignature);
        }
        else if (source['valueTiming']) {
            this.value = new fhir.Timing(source.valueTiming);
        }
        else if (source['valueContactDetail']) {
            this.value = new fhir.ContactDetail(source.valueContactDetail);
        }
        else if (source['valueContributor']) {
            this.value = new fhir.Contributor(source.valueContributor);
        }
        else if (source['valueDataRequirement']) {
            this.value = new fhir.DataRequirement(source.valueDataRequirement);
        }
        else if (source['valueExpression']) {
            this.value = new fhir.Expression(source.valueExpression);
        }
        else if (source['valueParameterDefinition']) {
            this.value = new fhir.ParameterDefinition(source.valueParameterDefinition);
        }
        else if (source['valueRelatedArtifact']) {
            this.value = new fhir.RelatedArtifact(source.valueRelatedArtifact);
        }
        else if (source['valueTriggerDefinition']) {
            this.value = new fhir.TriggerDefinition(source.valueTriggerDefinition);
        }
        else if (source['valueUsageContext']) {
            this.value = new fhir.UsageContext(source.valueUsageContext);
        }
        else if (source['valueDosage']) {
            this.value = new fhir.Dosage(source.valueDosage);
        }
        else if (source['valueMeta']) {
            this.value = new fhir.Meta(source.valueMeta);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.example';
        }
        if (!this['label']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property label fhir: ElementDefinition.example.label:string', expression: [expression] });
        }
        if (this["label"]) {
            issues.push(...this.label.doModelValidation(expression + '.label'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: ElementDefinition.example.value[x]:', expression: [expression] });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionExample._fts_dataType = 'ElementDefinitionExample';
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.example.value[x]
 */
ElementDefinitionExample._fts_valueIsChoice = true;
/**
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
export class ElementDefinitionConstraint extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionConstraint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['key']) {
            this.key = new fhir.FhirId({ value: source.key });
        }
        else {
            this.key = null;
        }
        if (source['_key']) {
            if (this.key) {
                this.key.addExtendedProperties(source._key);
            }
            else {
                this.key = new fhir.FhirId(source._key);
            }
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirString({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirString(source._requirements);
            }
        }
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity);
            }
        }
        if (source['human']) {
            this.human = new fhir.FhirString({ value: source.human });
        }
        else {
            this.human = null;
        }
        if (source['_human']) {
            if (this.human) {
                this.human.addExtendedProperties(source._human);
            }
            else {
                this.human = new fhir.FhirString(source._human);
            }
        }
        if (source['expression']) {
            this.expression = new fhir.FhirString({ value: source.expression });
        }
        if (source['_expression']) {
            if (this.expression) {
                this.expression.addExtendedProperties(source._expression);
            }
            else {
                this.expression = new fhir.FhirString(source._expression);
            }
        }
        if (source['xpath']) {
            this.xpath = new fhir.FhirString({ value: source.xpath });
        }
        if (source['_xpath']) {
            if (this.xpath) {
                this.xpath.addExtendedProperties(source._xpath);
            }
            else {
                this.xpath = new fhir.FhirString(source._xpath);
            }
        }
        if (source['source']) {
            this.source = new fhir.FhirCanonical({ value: source.source });
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirCanonical(source._source);
            }
        }
    }
    /**
     * Required-bound Value Set for severity (ElementDefinition.constraint.severity)
     */
    static get severityRequiredCodes() {
        return ConstraintSeverityCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.constraint';
        }
        if (!this['key']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property key fhir: ElementDefinition.constraint.key:id', expression: [expression] });
        }
        if (this["key"]) {
            issues.push(...this.key.doModelValidation(expression + '.key'));
        }
        if (this["requirements"]) {
            issues.push(...this.requirements.doModelValidation(expression + '.requirements'));
        }
        if (!this['severity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property severity fhir: ElementDefinition.constraint.severity:code', expression: [expression] });
        }
        if (this['severity'] && (!Object.values(ConstraintSeverityCodes).includes(this.severity.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property severity fhir: ElementDefinition.constraint.severity:code Required binding to: ConstraintSeverity', expression: [expression] });
        }
        if (this["severity"]) {
            issues.push(...this.severity.doModelValidation(expression + '.severity'));
        }
        if (!this['human']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property human fhir: ElementDefinition.constraint.human:string', expression: [expression] });
        }
        if (this["human"]) {
            issues.push(...this.human.doModelValidation(expression + '.human'));
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation(expression + '.expression'));
        }
        if (this["xpath"]) {
            issues.push(...this.xpath.doModelValidation(expression + '.xpath'));
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation(expression + '.source'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionConstraint._fts_dataType = 'ElementDefinitionConstraint';
/**
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
export class ElementDefinitionBinding extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionBinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['strength']) {
            this.strength = new fhir.FhirCode({ value: source.strength });
        }
        else {
            this.strength = null;
        }
        if (source['_strength']) {
            if (this.strength) {
                this.strength.addExtendedProperties(source._strength);
            }
            else {
                this.strength = new fhir.FhirCode(source._strength);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['valueSet']) {
            this.valueSet = new fhir.FhirCanonical({ value: source.valueSet });
        }
        if (source['_valueSet']) {
            if (this.valueSet) {
                this.valueSet.addExtendedProperties(source._valueSet);
            }
            else {
                this.valueSet = new fhir.FhirCanonical(source._valueSet);
            }
        }
    }
    /**
     * Required-bound Value Set for strength (ElementDefinition.binding.strength)
     */
    static get strengthRequiredCodes() {
        return BindingStrengthCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.binding';
        }
        if (!this['strength']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property strength fhir: ElementDefinition.binding.strength:code', expression: [expression] });
        }
        if (this['strength'] && (!Object.values(BindingStrengthCodes).includes(this.strength.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property strength fhir: ElementDefinition.binding.strength:code Required binding to: BindingStrength', expression: [expression] });
        }
        if (this["strength"]) {
            issues.push(...this.strength.doModelValidation(expression + '.strength'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["valueSet"]) {
            issues.push(...this.valueSet.doModelValidation(expression + '.valueSet'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionBinding._fts_dataType = 'ElementDefinitionBinding';
/**
 * Mappings are not necessarily specific enough for safe translation.
 */
export class ElementDefinitionMapping extends fhir.FhirElement {
    /**
     * Default constructor for ElementDefinitionMapping - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identity']) {
            this.identity = new fhir.FhirId({ value: source.identity });
        }
        else {
            this.identity = null;
        }
        if (source['_identity']) {
            if (this.identity) {
                this.identity.addExtendedProperties(source._identity);
            }
            else {
                this.identity = new fhir.FhirId(source._identity);
            }
        }
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['map']) {
            this.map = new fhir.FhirString({ value: source.map });
        }
        else {
            this.map = null;
        }
        if (source['_map']) {
            if (this.map) {
                this.map.addExtendedProperties(source._map);
            }
            else {
                this.map = new fhir.FhirString(source._map);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition.mapping';
        }
        if (!this['identity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property identity fhir: ElementDefinition.mapping.identity:id', expression: [expression] });
        }
        if (this["identity"]) {
            issues.push(...this.identity.doModelValidation(expression + '.identity'));
        }
        if (this["language"]) {
            issues.push(...this.language.doModelValidation(expression + '.language'));
        }
        if (!this['map']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property map fhir: ElementDefinition.mapping.map:string', expression: [expression] });
        }
        if (this["map"]) {
            issues.push(...this.map.doModelValidation(expression + '.map'));
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation(expression + '.comment'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinitionMapping._fts_dataType = 'ElementDefinitionMapping';
/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
export class ElementDefinition extends fhir.BackboneElement {
    /**
     * Default constructor for ElementDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['representation']) {
            this.representation = source.representation.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.representation = [];
        }
        if (source['_representation']) {
            source._representation.forEach((x, i) => {
                if (this.representation.length >= i) {
                    if (x) {
                        this.representation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.representation.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['sliceName']) {
            this.sliceName = new fhir.FhirString({ value: source.sliceName });
        }
        if (source['_sliceName']) {
            if (this.sliceName) {
                this.sliceName.addExtendedProperties(source._sliceName);
            }
            else {
                this.sliceName = new fhir.FhirString(source._sliceName);
            }
        }
        if (source['sliceIsConstraining']) {
            this.sliceIsConstraining = new fhir.FhirBoolean({ value: source.sliceIsConstraining });
        }
        if (source['_sliceIsConstraining']) {
            if (this.sliceIsConstraining) {
                this.sliceIsConstraining.addExtendedProperties(source._sliceIsConstraining);
            }
            else {
                this.sliceIsConstraining = new fhir.FhirBoolean(source._sliceIsConstraining);
            }
        }
        if (source['label']) {
            this.label = new fhir.FhirString({ value: source.label });
        }
        if (source['_label']) {
            if (this.label) {
                this.label.addExtendedProperties(source._label);
            }
            else {
                this.label = new fhir.FhirString(source._label);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['slicing']) {
            this.slicing = new fhir.ElementDefinitionSlicing(source.slicing);
        }
        if (source['short']) {
            this.short = new fhir.FhirString({ value: source.short });
        }
        if (source['_short']) {
            if (this.short) {
                this.short.addExtendedProperties(source._short);
            }
            else {
                this.short = new fhir.FhirString(source._short);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirMarkdown({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirMarkdown(source._definition);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirMarkdown({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirMarkdown(source._comment);
            }
        }
        if (source['requirements']) {
            this.requirements = new fhir.FhirMarkdown({ value: source.requirements });
        }
        if (source['_requirements']) {
            if (this.requirements) {
                this.requirements.addExtendedProperties(source._requirements);
            }
            else {
                this.requirements = new fhir.FhirMarkdown(source._requirements);
            }
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['min']) {
            this.min = new fhir.FhirUnsignedInt({ value: source.min });
        }
        if (source['_min']) {
            if (this.min) {
                this.min.addExtendedProperties(source._min);
            }
            else {
                this.min = new fhir.FhirUnsignedInt(source._min);
            }
        }
        if (source['max']) {
            this.max = new fhir.FhirString({ value: source.max });
        }
        if (source['_max']) {
            if (this.max) {
                this.max.addExtendedProperties(source._max);
            }
            else {
                this.max = new fhir.FhirString(source._max);
            }
        }
        if (source['base']) {
            this.base = new fhir.ElementDefinitionBase(source.base);
        }
        if (source['contentReference']) {
            this.contentReference = new fhir.FhirUri({ value: source.contentReference });
        }
        if (source['_contentReference']) {
            if (this.contentReference) {
                this.contentReference.addExtendedProperties(source._contentReference);
            }
            else {
                this.contentReference = new fhir.FhirUri(source._contentReference);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.ElementDefinitionType(x));
        }
        else {
            this.type = [];
        }
        if (source['defaultValue']) {
            this.defaultValue = source.defaultValue;
        }
        else if (source['defaultValueBase64Binary']) {
            this.defaultValue = new fhir.FhirBase64Binary({ value: source.defaultValueBase64Binary });
        }
        else if (source['defaultValueBoolean']) {
            this.defaultValue = new fhir.FhirBoolean({ value: source.defaultValueBoolean });
        }
        else if (source['defaultValueCanonical']) {
            this.defaultValue = new fhir.FhirCanonical({ value: source.defaultValueCanonical });
        }
        else if (source['defaultValueCode']) {
            this.defaultValue = new fhir.FhirCode({ value: source.defaultValueCode });
        }
        else if (source['defaultValueDate']) {
            this.defaultValue = new fhir.FhirDate({ value: source.defaultValueDate });
        }
        else if (source['defaultValueDateTime']) {
            this.defaultValue = new fhir.FhirDateTime({ value: source.defaultValueDateTime });
        }
        else if (source['defaultValueDecimal']) {
            this.defaultValue = new fhir.FhirDecimal({ value: source.defaultValueDecimal });
        }
        else if (source['defaultValueId']) {
            this.defaultValue = new fhir.FhirId({ value: source.defaultValueId });
        }
        else if (source['defaultValueInstant']) {
            this.defaultValue = new fhir.FhirInstant({ value: source.defaultValueInstant });
        }
        else if (source['defaultValueInteger']) {
            this.defaultValue = new fhir.FhirInteger({ value: source.defaultValueInteger });
        }
        else if (source['defaultValueMarkdown']) {
            this.defaultValue = new fhir.FhirMarkdown({ value: source.defaultValueMarkdown });
        }
        else if (source['defaultValueOid']) {
            this.defaultValue = new fhir.FhirOid({ value: source.defaultValueOid });
        }
        else if (source['defaultValuePositiveInt']) {
            this.defaultValue = new fhir.FhirPositiveInt({ value: source.defaultValuePositiveInt });
        }
        else if (source['defaultValueString']) {
            this.defaultValue = new fhir.FhirString({ value: source.defaultValueString });
        }
        else if (source['defaultValueTime']) {
            this.defaultValue = new fhir.FhirTime({ value: source.defaultValueTime });
        }
        else if (source['defaultValueUnsignedInt']) {
            this.defaultValue = new fhir.FhirUnsignedInt({ value: source.defaultValueUnsignedInt });
        }
        else if (source['defaultValueUri']) {
            this.defaultValue = new fhir.FhirUri({ value: source.defaultValueUri });
        }
        else if (source['defaultValueUrl']) {
            this.defaultValue = new fhir.FhirUrl({ value: source.defaultValueUrl });
        }
        else if (source['defaultValueUuid']) {
            this.defaultValue = new fhir.FhirUuid({ value: source.defaultValueUuid });
        }
        else if (source['defaultValueAddress']) {
            this.defaultValue = new fhir.Address(source.defaultValueAddress);
        }
        else if (source['defaultValueAge']) {
            this.defaultValue = new fhir.Age(source.defaultValueAge);
        }
        else if (source['defaultValueAnnotation']) {
            this.defaultValue = new fhir.Annotation(source.defaultValueAnnotation);
        }
        else if (source['defaultValueAttachment']) {
            this.defaultValue = new fhir.Attachment(source.defaultValueAttachment);
        }
        else if (source['defaultValueCodeableConcept']) {
            this.defaultValue = new fhir.CodeableConcept(source.defaultValueCodeableConcept);
        }
        else if (source['defaultValueCoding']) {
            this.defaultValue = new fhir.Coding(source.defaultValueCoding);
        }
        else if (source['defaultValueContactPoint']) {
            this.defaultValue = new fhir.ContactPoint(source.defaultValueContactPoint);
        }
        else if (source['defaultValueCount']) {
            this.defaultValue = new fhir.Count(source.defaultValueCount);
        }
        else if (source['defaultValueDistance']) {
            this.defaultValue = new fhir.Distance(source.defaultValueDistance);
        }
        else if (source['defaultValueDuration']) {
            this.defaultValue = new fhir.Duration(source.defaultValueDuration);
        }
        else if (source['defaultValueHumanName']) {
            this.defaultValue = new fhir.HumanName(source.defaultValueHumanName);
        }
        else if (source['defaultValueIdentifier']) {
            this.defaultValue = new fhir.Identifier(source.defaultValueIdentifier);
        }
        else if (source['defaultValueMoney']) {
            this.defaultValue = new fhir.Money(source.defaultValueMoney);
        }
        else if (source['defaultValuePeriod']) {
            this.defaultValue = new fhir.Period(source.defaultValuePeriod);
        }
        else if (source['defaultValueQuantity']) {
            this.defaultValue = new fhir.Quantity(source.defaultValueQuantity);
        }
        else if (source['defaultValueRange']) {
            this.defaultValue = new fhir.Range(source.defaultValueRange);
        }
        else if (source['defaultValueRatio']) {
            this.defaultValue = new fhir.Ratio(source.defaultValueRatio);
        }
        else if (source['defaultValueReference']) {
            this.defaultValue = new fhir.Reference(source.defaultValueReference);
        }
        else if (source['defaultValueSampledData']) {
            this.defaultValue = new fhir.SampledData(source.defaultValueSampledData);
        }
        else if (source['defaultValueSignature']) {
            this.defaultValue = new fhir.Signature(source.defaultValueSignature);
        }
        else if (source['defaultValueTiming']) {
            this.defaultValue = new fhir.Timing(source.defaultValueTiming);
        }
        else if (source['defaultValueContactDetail']) {
            this.defaultValue = new fhir.ContactDetail(source.defaultValueContactDetail);
        }
        else if (source['defaultValueContributor']) {
            this.defaultValue = new fhir.Contributor(source.defaultValueContributor);
        }
        else if (source['defaultValueDataRequirement']) {
            this.defaultValue = new fhir.DataRequirement(source.defaultValueDataRequirement);
        }
        else if (source['defaultValueExpression']) {
            this.defaultValue = new fhir.Expression(source.defaultValueExpression);
        }
        else if (source['defaultValueParameterDefinition']) {
            this.defaultValue = new fhir.ParameterDefinition(source.defaultValueParameterDefinition);
        }
        else if (source['defaultValueRelatedArtifact']) {
            this.defaultValue = new fhir.RelatedArtifact(source.defaultValueRelatedArtifact);
        }
        else if (source['defaultValueTriggerDefinition']) {
            this.defaultValue = new fhir.TriggerDefinition(source.defaultValueTriggerDefinition);
        }
        else if (source['defaultValueUsageContext']) {
            this.defaultValue = new fhir.UsageContext(source.defaultValueUsageContext);
        }
        else if (source['defaultValueDosage']) {
            this.defaultValue = new fhir.Dosage(source.defaultValueDosage);
        }
        else if (source['defaultValueMeta']) {
            this.defaultValue = new fhir.Meta(source.defaultValueMeta);
        }
        if (source['meaningWhenMissing']) {
            this.meaningWhenMissing = new fhir.FhirMarkdown({ value: source.meaningWhenMissing });
        }
        if (source['_meaningWhenMissing']) {
            if (this.meaningWhenMissing) {
                this.meaningWhenMissing.addExtendedProperties(source._meaningWhenMissing);
            }
            else {
                this.meaningWhenMissing = new fhir.FhirMarkdown(source._meaningWhenMissing);
            }
        }
        if (source['orderMeaning']) {
            this.orderMeaning = new fhir.FhirString({ value: source.orderMeaning });
        }
        if (source['_orderMeaning']) {
            if (this.orderMeaning) {
                this.orderMeaning.addExtendedProperties(source._orderMeaning);
            }
            else {
                this.orderMeaning = new fhir.FhirString(source._orderMeaning);
            }
        }
        if (source['fixed']) {
            this.fixed = source.fixed;
        }
        else if (source['fixedBase64Binary']) {
            this.fixed = new fhir.FhirBase64Binary({ value: source.fixedBase64Binary });
        }
        else if (source['fixedBoolean']) {
            this.fixed = new fhir.FhirBoolean({ value: source.fixedBoolean });
        }
        else if (source['fixedCanonical']) {
            this.fixed = new fhir.FhirCanonical({ value: source.fixedCanonical });
        }
        else if (source['fixedCode']) {
            this.fixed = new fhir.FhirCode({ value: source.fixedCode });
        }
        else if (source['fixedDate']) {
            this.fixed = new fhir.FhirDate({ value: source.fixedDate });
        }
        else if (source['fixedDateTime']) {
            this.fixed = new fhir.FhirDateTime({ value: source.fixedDateTime });
        }
        else if (source['fixedDecimal']) {
            this.fixed = new fhir.FhirDecimal({ value: source.fixedDecimal });
        }
        else if (source['fixedId']) {
            this.fixed = new fhir.FhirId({ value: source.fixedId });
        }
        else if (source['fixedInstant']) {
            this.fixed = new fhir.FhirInstant({ value: source.fixedInstant });
        }
        else if (source['fixedInteger']) {
            this.fixed = new fhir.FhirInteger({ value: source.fixedInteger });
        }
        else if (source['fixedMarkdown']) {
            this.fixed = new fhir.FhirMarkdown({ value: source.fixedMarkdown });
        }
        else if (source['fixedOid']) {
            this.fixed = new fhir.FhirOid({ value: source.fixedOid });
        }
        else if (source['fixedPositiveInt']) {
            this.fixed = new fhir.FhirPositiveInt({ value: source.fixedPositiveInt });
        }
        else if (source['fixedString']) {
            this.fixed = new fhir.FhirString({ value: source.fixedString });
        }
        else if (source['fixedTime']) {
            this.fixed = new fhir.FhirTime({ value: source.fixedTime });
        }
        else if (source['fixedUnsignedInt']) {
            this.fixed = new fhir.FhirUnsignedInt({ value: source.fixedUnsignedInt });
        }
        else if (source['fixedUri']) {
            this.fixed = new fhir.FhirUri({ value: source.fixedUri });
        }
        else if (source['fixedUrl']) {
            this.fixed = new fhir.FhirUrl({ value: source.fixedUrl });
        }
        else if (source['fixedUuid']) {
            this.fixed = new fhir.FhirUuid({ value: source.fixedUuid });
        }
        else if (source['fixedAddress']) {
            this.fixed = new fhir.Address(source.fixedAddress);
        }
        else if (source['fixedAge']) {
            this.fixed = new fhir.Age(source.fixedAge);
        }
        else if (source['fixedAnnotation']) {
            this.fixed = new fhir.Annotation(source.fixedAnnotation);
        }
        else if (source['fixedAttachment']) {
            this.fixed = new fhir.Attachment(source.fixedAttachment);
        }
        else if (source['fixedCodeableConcept']) {
            this.fixed = new fhir.CodeableConcept(source.fixedCodeableConcept);
        }
        else if (source['fixedCoding']) {
            this.fixed = new fhir.Coding(source.fixedCoding);
        }
        else if (source['fixedContactPoint']) {
            this.fixed = new fhir.ContactPoint(source.fixedContactPoint);
        }
        else if (source['fixedCount']) {
            this.fixed = new fhir.Count(source.fixedCount);
        }
        else if (source['fixedDistance']) {
            this.fixed = new fhir.Distance(source.fixedDistance);
        }
        else if (source['fixedDuration']) {
            this.fixed = new fhir.Duration(source.fixedDuration);
        }
        else if (source['fixedHumanName']) {
            this.fixed = new fhir.HumanName(source.fixedHumanName);
        }
        else if (source['fixedIdentifier']) {
            this.fixed = new fhir.Identifier(source.fixedIdentifier);
        }
        else if (source['fixedMoney']) {
            this.fixed = new fhir.Money(source.fixedMoney);
        }
        else if (source['fixedPeriod']) {
            this.fixed = new fhir.Period(source.fixedPeriod);
        }
        else if (source['fixedQuantity']) {
            this.fixed = new fhir.Quantity(source.fixedQuantity);
        }
        else if (source['fixedRange']) {
            this.fixed = new fhir.Range(source.fixedRange);
        }
        else if (source['fixedRatio']) {
            this.fixed = new fhir.Ratio(source.fixedRatio);
        }
        else if (source['fixedReference']) {
            this.fixed = new fhir.Reference(source.fixedReference);
        }
        else if (source['fixedSampledData']) {
            this.fixed = new fhir.SampledData(source.fixedSampledData);
        }
        else if (source['fixedSignature']) {
            this.fixed = new fhir.Signature(source.fixedSignature);
        }
        else if (source['fixedTiming']) {
            this.fixed = new fhir.Timing(source.fixedTiming);
        }
        else if (source['fixedContactDetail']) {
            this.fixed = new fhir.ContactDetail(source.fixedContactDetail);
        }
        else if (source['fixedContributor']) {
            this.fixed = new fhir.Contributor(source.fixedContributor);
        }
        else if (source['fixedDataRequirement']) {
            this.fixed = new fhir.DataRequirement(source.fixedDataRequirement);
        }
        else if (source['fixedExpression']) {
            this.fixed = new fhir.Expression(source.fixedExpression);
        }
        else if (source['fixedParameterDefinition']) {
            this.fixed = new fhir.ParameterDefinition(source.fixedParameterDefinition);
        }
        else if (source['fixedRelatedArtifact']) {
            this.fixed = new fhir.RelatedArtifact(source.fixedRelatedArtifact);
        }
        else if (source['fixedTriggerDefinition']) {
            this.fixed = new fhir.TriggerDefinition(source.fixedTriggerDefinition);
        }
        else if (source['fixedUsageContext']) {
            this.fixed = new fhir.UsageContext(source.fixedUsageContext);
        }
        else if (source['fixedDosage']) {
            this.fixed = new fhir.Dosage(source.fixedDosage);
        }
        else if (source['fixedMeta']) {
            this.fixed = new fhir.Meta(source.fixedMeta);
        }
        if (source['pattern']) {
            this.pattern = source.pattern;
        }
        else if (source['patternBase64Binary']) {
            this.pattern = new fhir.FhirBase64Binary({ value: source.patternBase64Binary });
        }
        else if (source['patternBoolean']) {
            this.pattern = new fhir.FhirBoolean({ value: source.patternBoolean });
        }
        else if (source['patternCanonical']) {
            this.pattern = new fhir.FhirCanonical({ value: source.patternCanonical });
        }
        else if (source['patternCode']) {
            this.pattern = new fhir.FhirCode({ value: source.patternCode });
        }
        else if (source['patternDate']) {
            this.pattern = new fhir.FhirDate({ value: source.patternDate });
        }
        else if (source['patternDateTime']) {
            this.pattern = new fhir.FhirDateTime({ value: source.patternDateTime });
        }
        else if (source['patternDecimal']) {
            this.pattern = new fhir.FhirDecimal({ value: source.patternDecimal });
        }
        else if (source['patternId']) {
            this.pattern = new fhir.FhirId({ value: source.patternId });
        }
        else if (source['patternInstant']) {
            this.pattern = new fhir.FhirInstant({ value: source.patternInstant });
        }
        else if (source['patternInteger']) {
            this.pattern = new fhir.FhirInteger({ value: source.patternInteger });
        }
        else if (source['patternMarkdown']) {
            this.pattern = new fhir.FhirMarkdown({ value: source.patternMarkdown });
        }
        else if (source['patternOid']) {
            this.pattern = new fhir.FhirOid({ value: source.patternOid });
        }
        else if (source['patternPositiveInt']) {
            this.pattern = new fhir.FhirPositiveInt({ value: source.patternPositiveInt });
        }
        else if (source['patternString']) {
            this.pattern = new fhir.FhirString({ value: source.patternString });
        }
        else if (source['patternTime']) {
            this.pattern = new fhir.FhirTime({ value: source.patternTime });
        }
        else if (source['patternUnsignedInt']) {
            this.pattern = new fhir.FhirUnsignedInt({ value: source.patternUnsignedInt });
        }
        else if (source['patternUri']) {
            this.pattern = new fhir.FhirUri({ value: source.patternUri });
        }
        else if (source['patternUrl']) {
            this.pattern = new fhir.FhirUrl({ value: source.patternUrl });
        }
        else if (source['patternUuid']) {
            this.pattern = new fhir.FhirUuid({ value: source.patternUuid });
        }
        else if (source['patternAddress']) {
            this.pattern = new fhir.Address(source.patternAddress);
        }
        else if (source['patternAge']) {
            this.pattern = new fhir.Age(source.patternAge);
        }
        else if (source['patternAnnotation']) {
            this.pattern = new fhir.Annotation(source.patternAnnotation);
        }
        else if (source['patternAttachment']) {
            this.pattern = new fhir.Attachment(source.patternAttachment);
        }
        else if (source['patternCodeableConcept']) {
            this.pattern = new fhir.CodeableConcept(source.patternCodeableConcept);
        }
        else if (source['patternCoding']) {
            this.pattern = new fhir.Coding(source.patternCoding);
        }
        else if (source['patternContactPoint']) {
            this.pattern = new fhir.ContactPoint(source.patternContactPoint);
        }
        else if (source['patternCount']) {
            this.pattern = new fhir.Count(source.patternCount);
        }
        else if (source['patternDistance']) {
            this.pattern = new fhir.Distance(source.patternDistance);
        }
        else if (source['patternDuration']) {
            this.pattern = new fhir.Duration(source.patternDuration);
        }
        else if (source['patternHumanName']) {
            this.pattern = new fhir.HumanName(source.patternHumanName);
        }
        else if (source['patternIdentifier']) {
            this.pattern = new fhir.Identifier(source.patternIdentifier);
        }
        else if (source['patternMoney']) {
            this.pattern = new fhir.Money(source.patternMoney);
        }
        else if (source['patternPeriod']) {
            this.pattern = new fhir.Period(source.patternPeriod);
        }
        else if (source['patternQuantity']) {
            this.pattern = new fhir.Quantity(source.patternQuantity);
        }
        else if (source['patternRange']) {
            this.pattern = new fhir.Range(source.patternRange);
        }
        else if (source['patternRatio']) {
            this.pattern = new fhir.Ratio(source.patternRatio);
        }
        else if (source['patternReference']) {
            this.pattern = new fhir.Reference(source.patternReference);
        }
        else if (source['patternSampledData']) {
            this.pattern = new fhir.SampledData(source.patternSampledData);
        }
        else if (source['patternSignature']) {
            this.pattern = new fhir.Signature(source.patternSignature);
        }
        else if (source['patternTiming']) {
            this.pattern = new fhir.Timing(source.patternTiming);
        }
        else if (source['patternContactDetail']) {
            this.pattern = new fhir.ContactDetail(source.patternContactDetail);
        }
        else if (source['patternContributor']) {
            this.pattern = new fhir.Contributor(source.patternContributor);
        }
        else if (source['patternDataRequirement']) {
            this.pattern = new fhir.DataRequirement(source.patternDataRequirement);
        }
        else if (source['patternExpression']) {
            this.pattern = new fhir.Expression(source.patternExpression);
        }
        else if (source['patternParameterDefinition']) {
            this.pattern = new fhir.ParameterDefinition(source.patternParameterDefinition);
        }
        else if (source['patternRelatedArtifact']) {
            this.pattern = new fhir.RelatedArtifact(source.patternRelatedArtifact);
        }
        else if (source['patternTriggerDefinition']) {
            this.pattern = new fhir.TriggerDefinition(source.patternTriggerDefinition);
        }
        else if (source['patternUsageContext']) {
            this.pattern = new fhir.UsageContext(source.patternUsageContext);
        }
        else if (source['patternDosage']) {
            this.pattern = new fhir.Dosage(source.patternDosage);
        }
        else if (source['patternMeta']) {
            this.pattern = new fhir.Meta(source.patternMeta);
        }
        if (source['example']) {
            this.example = source.example.map((x) => new fhir.ElementDefinitionExample(x));
        }
        else {
            this.example = [];
        }
        if (source['minValue']) {
            this.minValue = source.minValue;
        }
        else if (source['minValueDate']) {
            this.minValue = new fhir.FhirDate({ value: source.minValueDate });
        }
        else if (source['minValueDateTime']) {
            this.minValue = new fhir.FhirDateTime({ value: source.minValueDateTime });
        }
        else if (source['minValueInstant']) {
            this.minValue = new fhir.FhirInstant({ value: source.minValueInstant });
        }
        else if (source['minValueTime']) {
            this.minValue = new fhir.FhirTime({ value: source.minValueTime });
        }
        else if (source['minValueDecimal']) {
            this.minValue = new fhir.FhirDecimal({ value: source.minValueDecimal });
        }
        else if (source['minValueInteger']) {
            this.minValue = new fhir.FhirInteger({ value: source.minValueInteger });
        }
        else if (source['minValuePositiveInt']) {
            this.minValue = new fhir.FhirPositiveInt({ value: source.minValuePositiveInt });
        }
        else if (source['minValueUnsignedInt']) {
            this.minValue = new fhir.FhirUnsignedInt({ value: source.minValueUnsignedInt });
        }
        else if (source['minValueQuantity']) {
            this.minValue = new fhir.Quantity(source.minValueQuantity);
        }
        if (source['maxValue']) {
            this.maxValue = source.maxValue;
        }
        else if (source['maxValueDate']) {
            this.maxValue = new fhir.FhirDate({ value: source.maxValueDate });
        }
        else if (source['maxValueDateTime']) {
            this.maxValue = new fhir.FhirDateTime({ value: source.maxValueDateTime });
        }
        else if (source['maxValueInstant']) {
            this.maxValue = new fhir.FhirInstant({ value: source.maxValueInstant });
        }
        else if (source['maxValueTime']) {
            this.maxValue = new fhir.FhirTime({ value: source.maxValueTime });
        }
        else if (source['maxValueDecimal']) {
            this.maxValue = new fhir.FhirDecimal({ value: source.maxValueDecimal });
        }
        else if (source['maxValueInteger']) {
            this.maxValue = new fhir.FhirInteger({ value: source.maxValueInteger });
        }
        else if (source['maxValuePositiveInt']) {
            this.maxValue = new fhir.FhirPositiveInt({ value: source.maxValuePositiveInt });
        }
        else if (source['maxValueUnsignedInt']) {
            this.maxValue = new fhir.FhirUnsignedInt({ value: source.maxValueUnsignedInt });
        }
        else if (source['maxValueQuantity']) {
            this.maxValue = new fhir.Quantity(source.maxValueQuantity);
        }
        if (source['maxLength']) {
            this.maxLength = new fhir.FhirInteger({ value: source.maxLength });
        }
        if (source['_maxLength']) {
            if (this.maxLength) {
                this.maxLength.addExtendedProperties(source._maxLength);
            }
            else {
                this.maxLength = new fhir.FhirInteger(source._maxLength);
            }
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.FhirId({ value: x }));
        }
        else {
            this.condition = [];
        }
        if (source['_condition']) {
            source._condition.forEach((x, i) => {
                if (this.condition.length >= i) {
                    if (x) {
                        this.condition[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.condition.push(new fhir.FhirId(x));
                    }
                }
            });
        }
        if (source['constraint']) {
            this.constraint = source.constraint.map((x) => new fhir.ElementDefinitionConstraint(x));
        }
        else {
            this.constraint = [];
        }
        if (source['mustSupport']) {
            this.mustSupport = new fhir.FhirBoolean({ value: source.mustSupport });
        }
        if (source['_mustSupport']) {
            if (this.mustSupport) {
                this.mustSupport.addExtendedProperties(source._mustSupport);
            }
            else {
                this.mustSupport = new fhir.FhirBoolean(source._mustSupport);
            }
        }
        if (source['isModifier']) {
            this.isModifier = new fhir.FhirBoolean({ value: source.isModifier });
        }
        if (source['_isModifier']) {
            if (this.isModifier) {
                this.isModifier.addExtendedProperties(source._isModifier);
            }
            else {
                this.isModifier = new fhir.FhirBoolean(source._isModifier);
            }
        }
        if (source['isModifierReason']) {
            this.isModifierReason = new fhir.FhirString({ value: source.isModifierReason });
        }
        if (source['_isModifierReason']) {
            if (this.isModifierReason) {
                this.isModifierReason.addExtendedProperties(source._isModifierReason);
            }
            else {
                this.isModifierReason = new fhir.FhirString(source._isModifierReason);
            }
        }
        if (source['isSummary']) {
            this.isSummary = new fhir.FhirBoolean({ value: source.isSummary });
        }
        if (source['_isSummary']) {
            if (this.isSummary) {
                this.isSummary.addExtendedProperties(source._isSummary);
            }
            else {
                this.isSummary = new fhir.FhirBoolean(source._isSummary);
            }
        }
        if (source['binding']) {
            this.binding = new fhir.ElementDefinitionBinding(source.binding);
        }
        if (source['mapping']) {
            this.mapping = source.mapping.map((x) => new fhir.ElementDefinitionMapping(x));
        }
        else {
            this.mapping = [];
        }
    }
    /**
     * Required-bound Value Set for representation (ElementDefinition.representation)
     */
    static get representationRequiredCodes() {
        return PropertyRepresentationCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ElementDefinition';
        }
        if (!this['path']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property path fhir: ElementDefinition.path:string', expression: [expression] });
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation(expression + '.path'));
        }
        if (this['representation']) {
            this.representation.forEach((v) => {
                if (!Object.values(PropertyRepresentationCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property representation fhir: ElementDefinition.representation:code Required binding to: PropertyRepresentation', expression: [expression] });
                }
            });
        }
        if (this["representation"]) {
            this.representation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.representation[${i}]`)); });
        }
        if (this["sliceName"]) {
            issues.push(...this.sliceName.doModelValidation(expression + '.sliceName'));
        }
        if (this["sliceIsConstraining"]) {
            issues.push(...this.sliceIsConstraining.doModelValidation(expression + '.sliceIsConstraining'));
        }
        if (this["label"]) {
            issues.push(...this.label.doModelValidation(expression + '.label'));
        }
        if (this["code"]) {
            this.code.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.code[${i}]`)); });
        }
        if (this["slicing"]) {
            issues.push(...this.slicing.doModelValidation(expression + '.slicing'));
        }
        if (this["short"]) {
            issues.push(...this.short.doModelValidation(expression + '.short'));
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation(expression + '.definition'));
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation(expression + '.comment'));
        }
        if (this["requirements"]) {
            issues.push(...this.requirements.doModelValidation(expression + '.requirements'));
        }
        if (this["alias"]) {
            this.alias.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.alias[${i}]`)); });
        }
        if (this["min"]) {
            issues.push(...this.min.doModelValidation(expression + '.min'));
        }
        if (this["max"]) {
            issues.push(...this.max.doModelValidation(expression + '.max'));
        }
        if (this["base"]) {
            issues.push(...this.base.doModelValidation(expression + '.base'));
        }
        if (this["contentReference"]) {
            issues.push(...this.contentReference.doModelValidation(expression + '.contentReference'));
        }
        if (this["type"]) {
            this.type.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.type[${i}]`)); });
        }
        if (this["meaningWhenMissing"]) {
            issues.push(...this.meaningWhenMissing.doModelValidation(expression + '.meaningWhenMissing'));
        }
        if (this["orderMeaning"]) {
            issues.push(...this.orderMeaning.doModelValidation(expression + '.orderMeaning'));
        }
        if (this["example"]) {
            this.example.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.example[${i}]`)); });
        }
        if (this["maxLength"]) {
            issues.push(...this.maxLength.doModelValidation(expression + '.maxLength'));
        }
        if (this["condition"]) {
            this.condition.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.condition[${i}]`)); });
        }
        if (this["constraint"]) {
            this.constraint.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.constraint[${i}]`)); });
        }
        if (this["mustSupport"]) {
            issues.push(...this.mustSupport.doModelValidation(expression + '.mustSupport'));
        }
        if (this["isModifier"]) {
            issues.push(...this.isModifier.doModelValidation(expression + '.isModifier'));
        }
        if (this["isModifierReason"]) {
            issues.push(...this.isModifierReason.doModelValidation(expression + '.isModifierReason'));
        }
        if (this["isSummary"]) {
            issues.push(...this.isSummary.doModelValidation(expression + '.isSummary'));
        }
        if (this["binding"]) {
            issues.push(...this.binding.doModelValidation(expression + '.binding'));
        }
        if (this["mapping"]) {
            this.mapping.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.mapping[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ElementDefinition._fts_dataType = 'ElementDefinition';
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.defaultValue[x]
 */
ElementDefinition._fts_defaultValueIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.fixed[x]
 */
ElementDefinition._fts_fixedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.pattern[x]
 */
ElementDefinition._fts_patternIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.minValue[x]
 */
ElementDefinition._fts_minValueIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ElementDefinition.maxValue[x]
 */
ElementDefinition._fts_maxValueIsChoice = true;
//# sourceMappingURL=data:application/json;base64,