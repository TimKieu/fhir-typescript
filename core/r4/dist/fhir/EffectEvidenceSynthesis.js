/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ExposureStateCodings } from '../fhirValueSets/ExposureStateCodings.js';
import { EvidenceVariantStateCodings } from '../fhirValueSets/EvidenceVariantStateCodings.js';
import { PrecisionEstimateTypeCodings } from '../fhirValueSets/PrecisionEstimateTypeCodings.js';
import { EffectEstimateTypeCodings } from '../fhirValueSets/EffectEstimateTypeCodings.js';
import { UcumUnitsCodings } from '../fhirValueSets/UcumUnitsCodings.js';
import { CertaintySubcomponentTypeCodings } from '../fhirValueSets/CertaintySubcomponentTypeCodings.js';
import { CertaintySubcomponentRatingCodings } from '../fhirValueSets/CertaintySubcomponentRatingCodings.js';
import { EvidenceQualityCodings } from '../fhirValueSets/EvidenceQualityCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { SynthesisTypeCodings } from '../fhirValueSets/SynthesisTypeCodings.js';
import { StudyTypeCodings } from '../fhirValueSets/StudyTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { FhirInteger } from './FhirInteger.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Annotation } from './Annotation.js';
import { FhirUri } from './FhirUri.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { FhirDate } from './FhirDate.js';
import { Period } from './Period.js';
import { RelatedArtifact } from './RelatedArtifact.js';

// <auto-generated/>
/**
 * A description of the size of the sample involved in the synthesis.
 */
var EffectEvidenceSynthesisSampleSize = /** @class */ (function (_super) {
    __extends(EffectEvidenceSynthesisSampleSize, _super);
    /**
     * Default constructor for EffectEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
     */
    function EffectEvidenceSynthesisSampleSize(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['numberOfStudies']) {
            _this.numberOfStudies = new FhirInteger({ value: source.numberOfStudies });
        }
        if (source['numberOfParticipants']) {
            _this.numberOfParticipants = new FhirInteger({ value: source.numberOfParticipants });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EffectEvidenceSynthesisSampleSize.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["numberOfStudies"]) {
            (_b = outcome.issue).push.apply(_b, this.numberOfStudies.doModelValidation().issue);
        }
        if (this["numberOfParticipants"]) {
            (_c = outcome.issue).push.apply(_c, this.numberOfParticipants.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EffectEvidenceSynthesisSampleSize._fts_dataType = 'EffectEvidenceSynthesisSampleSize';
    return EffectEvidenceSynthesisSampleSize;
}(BackboneElement));
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
var EffectEvidenceSynthesisResultsByExposure = /** @class */ (function (_super) {
    __extends(EffectEvidenceSynthesisResultsByExposure, _super);
    /**
     * Default constructor for EffectEvidenceSynthesisResultsByExposure - initializes any required elements to null if a value is not provided.
     */
    function EffectEvidenceSynthesisResultsByExposure(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['exposureState']) {
            _this.exposureState = source.exposureState;
        }
        if (source['variantState']) {
            _this.variantState = new CodeableConcept(source.variantState);
        }
        if (source['riskEvidenceSynthesis']) {
            _this.riskEvidenceSynthesis = new Reference(source.riskEvidenceSynthesis);
        }
        else {
            _this.riskEvidenceSynthesis = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for exposureState (EffectEvidenceSynthesis.resultsByExposure.exposureState)
     */
    EffectEvidenceSynthesisResultsByExposure.exposureStateRequiredCoding = function () {
        return ExposureStateCodings;
    };
    /**
     * Extensible-bound Value Set for variantState (EffectEvidenceSynthesis.resultsByExposure.variantState)
     */
    EffectEvidenceSynthesisResultsByExposure.variantStateExtensibleCoding = function () {
        return EvidenceVariantStateCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EffectEvidenceSynthesisResultsByExposure.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["variantState"]) {
            (_b = outcome.issue).push.apply(_b, this.variantState.doModelValidation().issue);
        }
        if (!this['riskEvidenceSynthesis']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property riskEvidenceSynthesis:fhir.Reference fhir: EffectEvidenceSynthesis.resultsByExposure.riskEvidenceSynthesis:Reference', }));
        }
        if (this["riskEvidenceSynthesis"]) {
            (_c = outcome.issue).push.apply(_c, this.riskEvidenceSynthesis.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EffectEvidenceSynthesisResultsByExposure._fts_dataType = 'EffectEvidenceSynthesisResultsByExposure';
    return EffectEvidenceSynthesisResultsByExposure;
}(BackboneElement));
/**
 * A description of the precision of the estimate for the effect.
 */
var EffectEvidenceSynthesisEffectEstimatePrecisionEstimate = /** @class */ (function (_super) {
    __extends(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, _super);
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
     */
    function EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['level']) {
            _this.level = new FhirDecimal({ value: source.level });
        }
        if (source['from']) {
            _this.from = new FhirDecimal({ value: source.from });
        }
        if (source['to']) {
            _this.to = new FhirDecimal({ value: source.to });
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.effectEstimate.precisionEstimate.type)
     */
    EffectEvidenceSynthesisEffectEstimatePrecisionEstimate.typeExtensibleCoding = function () {
        return PrecisionEstimateTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EffectEvidenceSynthesisEffectEstimatePrecisionEstimate.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["level"]) {
            (_b = outcome.issue).push.apply(_b, this.level.doModelValidation().issue);
        }
        if (this["from"]) {
            (_c = outcome.issue).push.apply(_c, this.from.doModelValidation().issue);
        }
        if (this["to"]) {
            (_d = outcome.issue).push.apply(_d, this.to.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EffectEvidenceSynthesisEffectEstimatePrecisionEstimate._fts_dataType = 'EffectEvidenceSynthesisEffectEstimatePrecisionEstimate';
    return EffectEvidenceSynthesisEffectEstimatePrecisionEstimate;
}(BackboneElement));
/**
 * The estimated effect of the exposure variant.
 */
var EffectEvidenceSynthesisEffectEstimate = /** @class */ (function (_super) {
    __extends(EffectEvidenceSynthesisEffectEstimate, _super);
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimate - initializes any required elements to null if a value is not provided.
     */
    function EffectEvidenceSynthesisEffectEstimate(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['variantState']) {
            _this.variantState = new CodeableConcept(source.variantState);
        }
        if (source['value']) {
            _this.value = new FhirDecimal({ value: source.value });
        }
        if (source['unitOfMeasure']) {
            _this.unitOfMeasure = new CodeableConcept(source.unitOfMeasure);
        }
        if (source['precisionEstimate']) {
            _this.precisionEstimate = source.precisionEstimate.map(function (x) { return new EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(x); });
        }
        else {
            _this.precisionEstimate = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.effectEstimate.type)
     */
    EffectEvidenceSynthesisEffectEstimate.typeExtensibleCoding = function () {
        return EffectEstimateTypeCodings;
    };
    /**
     * Extensible-bound Value Set for variantState (EffectEvidenceSynthesis.effectEstimate.variantState)
     */
    EffectEvidenceSynthesisEffectEstimate.variantStateExtensibleCoding = function () {
        return EvidenceVariantStateCodings;
    };
    /**
     * Required-bound Value Set for unitOfMeasure (EffectEvidenceSynthesis.effectEstimate.unitOfMeasure)
     */
    EffectEvidenceSynthesisEffectEstimate.unitOfMeasureRequiredCoding = function () {
        return UcumUnitsCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EffectEvidenceSynthesisEffectEstimate.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["variantState"]) {
            (_c = outcome.issue).push.apply(_c, this.variantState.doModelValidation().issue);
        }
        if (this["value"]) {
            (_d = outcome.issue).push.apply(_d, this.value.doModelValidation().issue);
        }
        if (this["unitOfMeasure"]) {
            (_e = outcome.issue).push.apply(_e, this.unitOfMeasure.doModelValidation().issue);
        }
        if (this["precisionEstimate"]) {
            this.precisionEstimate.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EffectEvidenceSynthesisEffectEstimate._fts_dataType = 'EffectEvidenceSynthesisEffectEstimate';
    return EffectEvidenceSynthesisEffectEstimate;
}(BackboneElement));
/**
 * A description of a component of the overall certainty.
 */
var EffectEvidenceSynthesisCertaintyCertaintySubcomponent = /** @class */ (function (_super) {
    __extends(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, _super);
    /**
     * Default constructor for EffectEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
     */
    function EffectEvidenceSynthesisCertaintyCertaintySubcomponent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['rating']) {
            _this.rating = source.rating.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.rating = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.certainty.certaintySubcomponent.type)
     */
    EffectEvidenceSynthesisCertaintyCertaintySubcomponent.typeExtensibleCoding = function () {
        return CertaintySubcomponentTypeCodings;
    };
    /**
     * Extensible-bound Value Set for rating (EffectEvidenceSynthesis.certainty.certaintySubcomponent.rating)
     */
    EffectEvidenceSynthesisCertaintyCertaintySubcomponent.ratingExtensibleCoding = function () {
        return CertaintySubcomponentRatingCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EffectEvidenceSynthesisCertaintyCertaintySubcomponent.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["rating"]) {
            this.rating.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EffectEvidenceSynthesisCertaintyCertaintySubcomponent._fts_dataType = 'EffectEvidenceSynthesisCertaintyCertaintySubcomponent';
    return EffectEvidenceSynthesisCertaintyCertaintySubcomponent;
}(BackboneElement));
/**
 * A description of the certainty of the effect estimate.
 */
var EffectEvidenceSynthesisCertainty = /** @class */ (function (_super) {
    __extends(EffectEvidenceSynthesisCertainty, _super);
    /**
     * Default constructor for EffectEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
     */
    function EffectEvidenceSynthesisCertainty(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['rating']) {
            _this.rating = source.rating.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.rating = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['certaintySubcomponent']) {
            _this.certaintySubcomponent = source.certaintySubcomponent.map(function (x) { return new EffectEvidenceSynthesisCertaintyCertaintySubcomponent(x); });
        }
        else {
            _this.certaintySubcomponent = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for rating (EffectEvidenceSynthesis.certainty.rating)
     */
    EffectEvidenceSynthesisCertainty.ratingExtensibleCoding = function () {
        return EvidenceQualityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EffectEvidenceSynthesisCertainty.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["rating"]) {
            this.rating.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["certaintySubcomponent"]) {
            this.certaintySubcomponent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EffectEvidenceSynthesisCertainty._fts_dataType = 'EffectEvidenceSynthesisCertainty';
    return EffectEvidenceSynthesisCertainty;
}(BackboneElement));
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
var EffectEvidenceSynthesis = /** @class */ (function (_super) {
    __extends(EffectEvidenceSynthesis, _super);
    /**
     * Default constructor for EffectEvidenceSynthesis - initializes any required elements to null if a value is not provided.
     */
    function EffectEvidenceSynthesis(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'EffectEvidenceSynthesis';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            _this.approvalDate = new FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            _this.lastReviewDate = new FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            _this.effectivePeriod = new Period(source.effectivePeriod);
        }
        if (source['topic']) {
            _this.topic = source.topic.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.topic = [];
        }
        if (source['author']) {
            _this.author = source.author.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.author = [];
        }
        if (source['editor']) {
            _this.editor = source.editor.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.editor = [];
        }
        if (source['reviewer']) {
            _this.reviewer = source.reviewer.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.reviewer = [];
        }
        if (source['endorser']) {
            _this.endorser = source.endorser.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.endorser = [];
        }
        if (source['relatedArtifact']) {
            _this.relatedArtifact = source.relatedArtifact.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.relatedArtifact = [];
        }
        if (source['synthesisType']) {
            _this.synthesisType = new CodeableConcept(source.synthesisType);
        }
        if (source['studyType']) {
            _this.studyType = new CodeableConcept(source.studyType);
        }
        if (source['population']) {
            _this.population = new Reference(source.population);
        }
        else {
            _this.population = null;
        }
        if (source['exposure']) {
            _this.exposure = new Reference(source.exposure);
        }
        else {
            _this.exposure = null;
        }
        if (source['exposureAlternative']) {
            _this.exposureAlternative = new Reference(source.exposureAlternative);
        }
        else {
            _this.exposureAlternative = null;
        }
        if (source['outcome']) {
            _this.outcome = new Reference(source.outcome);
        }
        else {
            _this.outcome = null;
        }
        if (source['sampleSize']) {
            _this.sampleSize = new EffectEvidenceSynthesisSampleSize(source.sampleSize);
        }
        if (source['resultsByExposure']) {
            _this.resultsByExposure = source.resultsByExposure.map(function (x) { return new EffectEvidenceSynthesisResultsByExposure(x); });
        }
        else {
            _this.resultsByExposure = [];
        }
        if (source['effectEstimate']) {
            _this.effectEstimate = source.effectEstimate.map(function (x) { return new EffectEvidenceSynthesisEffectEstimate(x); });
        }
        else {
            _this.effectEstimate = [];
        }
        if (source['certainty']) {
            _this.certainty = source.certainty.map(function (x) { return new EffectEvidenceSynthesisCertainty(x); });
        }
        else {
            _this.certainty = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (EffectEvidenceSynthesis.status)
     */
    EffectEvidenceSynthesis.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Extensible-bound Value Set for synthesisType (EffectEvidenceSynthesis.synthesisType)
     */
    EffectEvidenceSynthesis.synthesisTypeExtensibleCoding = function () {
        return SynthesisTypeCodings;
    };
    /**
     * Extensible-bound Value Set for studyType (EffectEvidenceSynthesis.studyType)
     */
    EffectEvidenceSynthesis.studyTypeExtensibleCoding = function () {
        return StudyTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    EffectEvidenceSynthesis.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"EffectEvidenceSynthesis" fhir: EffectEvidenceSynthesis.resourceType:"EffectEvidenceSynthesis"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: EffectEvidenceSynthesis.status:code', }));
        }
        if (this["date"]) {
            (_e = outcome.issue).push.apply(_e, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_f = outcome.issue).push.apply(_f, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_g = outcome.issue).push.apply(_g, this.description.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["copyright"]) {
            (_h = outcome.issue).push.apply(_h, this.copyright.doModelValidation().issue);
        }
        if (this["approvalDate"]) {
            (_j = outcome.issue).push.apply(_j, this.approvalDate.doModelValidation().issue);
        }
        if (this["lastReviewDate"]) {
            (_k = outcome.issue).push.apply(_k, this.lastReviewDate.doModelValidation().issue);
        }
        if (this["effectivePeriod"]) {
            (_l = outcome.issue).push.apply(_l, this.effectivePeriod.doModelValidation().issue);
        }
        if (this["topic"]) {
            this.topic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["author"]) {
            this.author.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["editor"]) {
            this.editor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["endorser"]) {
            this.endorser.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["synthesisType"]) {
            (_m = outcome.issue).push.apply(_m, this.synthesisType.doModelValidation().issue);
        }
        if (this["studyType"]) {
            (_o = outcome.issue).push.apply(_o, this.studyType.doModelValidation().issue);
        }
        if (!this['population']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property population:fhir.Reference fhir: EffectEvidenceSynthesis.population:Reference', }));
        }
        if (this["population"]) {
            (_p = outcome.issue).push.apply(_p, this.population.doModelValidation().issue);
        }
        if (!this['exposure']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property exposure:fhir.Reference fhir: EffectEvidenceSynthesis.exposure:Reference', }));
        }
        if (this["exposure"]) {
            (_q = outcome.issue).push.apply(_q, this.exposure.doModelValidation().issue);
        }
        if (!this['exposureAlternative']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property exposureAlternative:fhir.Reference fhir: EffectEvidenceSynthesis.exposureAlternative:Reference', }));
        }
        if (this["exposureAlternative"]) {
            (_r = outcome.issue).push.apply(_r, this.exposureAlternative.doModelValidation().issue);
        }
        if (!this['outcome']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property outcome:fhir.Reference fhir: EffectEvidenceSynthesis.outcome:Reference', }));
        }
        if (this["outcome"]) {
            (_s = outcome.issue).push.apply(_s, this.outcome.doModelValidation().issue);
        }
        if (this["sampleSize"]) {
            (_t = outcome.issue).push.apply(_t, this.sampleSize.doModelValidation().issue);
        }
        if (this["resultsByExposure"]) {
            this.resultsByExposure.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["effectEstimate"]) {
            this.effectEstimate.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["certainty"]) {
            this.certainty.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    EffectEvidenceSynthesis._fts_dataType = 'EffectEvidenceSynthesis';
    return EffectEvidenceSynthesis;
}(DomainResource));

export { EffectEvidenceSynthesis, EffectEvidenceSynthesisCertainty, EffectEvidenceSynthesisCertaintyCertaintySubcomponent, EffectEvidenceSynthesisEffectEstimate, EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, EffectEvidenceSynthesisResultsByExposure, EffectEvidenceSynthesisSampleSize };
//# sourceMappingURL=EffectEvidenceSynthesis.js.map
