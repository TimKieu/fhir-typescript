// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EffectEvidenceSynthesis
import * as fhir from '../fhir.js';
// @ts-ignore
import { ExposureStateCodes } from '../fhirValueSets/ExposureStateCodes.js';
// @ts-ignore
import { EvidenceVariantStateCodings, } from '../fhirValueSets/EvidenceVariantStateCodings.js';
// @ts-ignore
import { PrecisionEstimateTypeCodings, } from '../fhirValueSets/PrecisionEstimateTypeCodings.js';
// @ts-ignore
import { EffectEstimateTypeCodings, } from '../fhirValueSets/EffectEstimateTypeCodings.js';
// @ts-ignore
import { UcumUnitsCodes } from '../fhirValueSets/UcumUnitsCodes.js';
// @ts-ignore
import { CertaintySubcomponentTypeCodings, } from '../fhirValueSets/CertaintySubcomponentTypeCodings.js';
// @ts-ignore
import { CertaintySubcomponentRatingCodings, } from '../fhirValueSets/CertaintySubcomponentRatingCodings.js';
// @ts-ignore
import { EvidenceQualityCodings, } from '../fhirValueSets/EvidenceQualityCodings.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { SynthesisTypeCodings, } from '../fhirValueSets/SynthesisTypeCodings.js';
// @ts-ignore
import { StudyTypeCodings, } from '../fhirValueSets/StudyTypeCodings.js';
/**
 * A description of the size of the sample involved in the synthesis.
 */
export class EffectEvidenceSynthesisSampleSize extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['numberOfStudies']) {
            this.numberOfStudies = new fhir.FhirInteger({ value: source.numberOfStudies });
        }
        if (source['numberOfParticipants']) {
            this.numberOfParticipants = new fhir.FhirInteger({ value: source.numberOfParticipants });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["numberOfStudies"]) {
            issues.push(...this.numberOfStudies.doModelValidation());
        }
        if (this["numberOfParticipants"]) {
            issues.push(...this.numberOfParticipants.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisSampleSize._fts_dataType = 'EffectEvidenceSynthesisSampleSize';
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export class EffectEvidenceSynthesisResultsByExposure extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisResultsByExposure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['exposureState']) {
            this.exposureState = new fhir.FhirCode({ value: source.exposureState });
        }
        if (source['variantState']) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
        if (source['riskEvidenceSynthesis']) {
            this.riskEvidenceSynthesis = new fhir.Reference(source.riskEvidenceSynthesis);
        }
        else {
            this.riskEvidenceSynthesis = null;
        }
    }
    /**
     * Required-bound Value Set for exposureState (EffectEvidenceSynthesis.resultsByExposure.exposureState)
     */
    static get exposureStateRequiredCodes() {
        return ExposureStateCodes;
    }
    /**
     * Extensible-bound Value Set for variantState (EffectEvidenceSynthesis.resultsByExposure.variantState)
     */
    static get variantStateExtensibleCodings() {
        return EvidenceVariantStateCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this['exposureState'] && (!Object.values(ExposureStateCodes).includes(this.exposureState))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property exposureState?:fhir.FhirCode<ExposureStateCodeType> fhir: EffectEvidenceSynthesis.resultsByExposure.exposureState:code Required binding to: ExposureState' });
        }
        if (this["exposureState"]) {
            issues.push(...this.exposureState.doModelValidation());
        }
        if (this["variantState"]) {
            issues.push(...this.variantState.doModelValidation());
        }
        if (!this['riskEvidenceSynthesis']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property riskEvidenceSynthesis:fhir.Reference fhir: EffectEvidenceSynthesis.resultsByExposure.riskEvidenceSynthesis:Reference' });
        }
        if (this["riskEvidenceSynthesis"]) {
            issues.push(...this.riskEvidenceSynthesis.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisResultsByExposure._fts_dataType = 'EffectEvidenceSynthesisResultsByExposure';
/**
 * A description of the precision of the estimate for the effect.
 */
export class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['level']) {
            this.level = new fhir.FhirDecimal({ value: source.level });
        }
        if (source['from']) {
            this.from = new fhir.FhirDecimal({ value: source.from });
        }
        if (source['to']) {
            this.to = new fhir.FhirDecimal({ value: source.to });
        }
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.effectEstimate.precisionEstimate.type)
     */
    static get typeExtensibleCodings() {
        return PrecisionEstimateTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["level"]) {
            issues.push(...this.level.doModelValidation());
        }
        if (this["from"]) {
            issues.push(...this.from.doModelValidation());
        }
        if (this["to"]) {
            issues.push(...this.to.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisEffectEstimatePrecisionEstimate._fts_dataType = 'EffectEvidenceSynthesisEffectEstimatePrecisionEstimate';
/**
 * The estimated effect of the exposure variant.
 */
export class EffectEvidenceSynthesisEffectEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['variantState']) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['unitOfMeasure']) {
            this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure);
        }
        if (source['precisionEstimate']) {
            this.precisionEstimate = source.precisionEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(x));
        }
        else {
            this.precisionEstimate = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.effectEstimate.type)
     */
    static get typeExtensibleCodings() {
        return EffectEstimateTypeCodings;
    }
    /**
     * Extensible-bound Value Set for variantState (EffectEvidenceSynthesis.effectEstimate.variantState)
     */
    static get variantStateExtensibleCodings() {
        return EvidenceVariantStateCodings;
    }
    /**
     * Required-bound Value Set for unitOfMeasure (EffectEvidenceSynthesis.effectEstimate.unitOfMeasure)
     */
    static get unitOfMeasureRequiredCodes() {
        return UcumUnitsCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["variantState"]) {
            issues.push(...this.variantState.doModelValidation());
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (this['unitOfMeasure'] && (!Object.values(UcumUnitsCodes).includes(this.unitOfMeasure))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property unitOfMeasure?:fhir.CodeableConcept fhir: EffectEvidenceSynthesis.effectEstimate.unitOfMeasure:CodeableConcept Required binding to: UcumUnits' });
        }
        if (this["unitOfMeasure"]) {
            issues.push(...this.unitOfMeasure.doModelValidation());
        }
        if (this["precisionEstimate"]) {
            this.precisionEstimate.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisEffectEstimate._fts_dataType = 'EffectEvidenceSynthesisEffectEstimate';
/**
 * A description of a component of the overall certainty.
 */
export class EffectEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.rating = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.certainty.certaintySubcomponent.type)
     */
    static get typeExtensibleCodings() {
        return CertaintySubcomponentTypeCodings;
    }
    /**
     * Extensible-bound Value Set for rating (EffectEvidenceSynthesis.certainty.certaintySubcomponent.rating)
     */
    static get ratingExtensibleCodings() {
        return CertaintySubcomponentRatingCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["rating"]) {
            this.rating.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisCertaintyCertaintySubcomponent._fts_dataType = 'EffectEvidenceSynthesisCertaintyCertaintySubcomponent';
/**
 * A description of the certainty of the effect estimate.
 */
export class EffectEvidenceSynthesisCertainty extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.rating = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['certaintySubcomponent']) {
            this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent(x));
        }
        else {
            this.certaintySubcomponent = [];
        }
    }
    /**
     * Extensible-bound Value Set for rating (EffectEvidenceSynthesis.certainty.rating)
     */
    static get ratingExtensibleCodings() {
        return EvidenceQualityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["rating"]) {
            this.rating.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["certaintySubcomponent"]) {
            this.certaintySubcomponent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisCertainty._fts_dataType = 'EffectEvidenceSynthesisCertainty';
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export class EffectEvidenceSynthesis extends fhir.DomainResource {
    /**
     * Default constructor for EffectEvidenceSynthesis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'EffectEvidenceSynthesis';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['synthesisType']) {
            this.synthesisType = new fhir.CodeableConcept(source.synthesisType);
        }
        if (source['studyType']) {
            this.studyType = new fhir.CodeableConcept(source.studyType);
        }
        if (source['population']) {
            this.population = new fhir.Reference(source.population);
        }
        else {
            this.population = null;
        }
        if (source['exposure']) {
            this.exposure = new fhir.Reference(source.exposure);
        }
        else {
            this.exposure = null;
        }
        if (source['exposureAlternative']) {
            this.exposureAlternative = new fhir.Reference(source.exposureAlternative);
        }
        else {
            this.exposureAlternative = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.Reference(source.outcome);
        }
        else {
            this.outcome = null;
        }
        if (source['sampleSize']) {
            this.sampleSize = new fhir.EffectEvidenceSynthesisSampleSize(source.sampleSize);
        }
        if (source['resultsByExposure']) {
            this.resultsByExposure = source.resultsByExposure.map((x) => new fhir.EffectEvidenceSynthesisResultsByExposure(x));
        }
        else {
            this.resultsByExposure = [];
        }
        if (source['effectEstimate']) {
            this.effectEstimate = source.effectEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimate(x));
        }
        else {
            this.effectEstimate = [];
        }
        if (source['certainty']) {
            this.certainty = source.certainty.map((x) => new fhir.EffectEvidenceSynthesisCertainty(x));
        }
        else {
            this.certainty = [];
        }
    }
    /**
     * Required-bound Value Set for status (EffectEvidenceSynthesis.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Extensible-bound Value Set for synthesisType (EffectEvidenceSynthesis.synthesisType)
     */
    static get synthesisTypeExtensibleCodings() {
        return SynthesisTypeCodings;
    }
    /**
     * Extensible-bound Value Set for studyType (EffectEvidenceSynthesis.studyType)
     */
    static get studyTypeExtensibleCodings() {
        return StudyTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"EffectEvidenceSynthesis" fhir: EffectEvidenceSynthesis.resourceType:"EffectEvidenceSynthesis"' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: EffectEvidenceSynthesis.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: EffectEvidenceSynthesis.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["approvalDate"]) {
            issues.push(...this.approvalDate.doModelValidation());
        }
        if (this["lastReviewDate"]) {
            issues.push(...this.lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            issues.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["synthesisType"]) {
            issues.push(...this.synthesisType.doModelValidation());
        }
        if (this["studyType"]) {
            issues.push(...this.studyType.doModelValidation());
        }
        if (!this['population']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property population:fhir.Reference fhir: EffectEvidenceSynthesis.population:Reference' });
        }
        if (this["population"]) {
            issues.push(...this.population.doModelValidation());
        }
        if (!this['exposure']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property exposure:fhir.Reference fhir: EffectEvidenceSynthesis.exposure:Reference' });
        }
        if (this["exposure"]) {
            issues.push(...this.exposure.doModelValidation());
        }
        if (!this['exposureAlternative']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property exposureAlternative:fhir.Reference fhir: EffectEvidenceSynthesis.exposureAlternative:Reference' });
        }
        if (this["exposureAlternative"]) {
            issues.push(...this.exposureAlternative.doModelValidation());
        }
        if (!this['outcome']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property outcome:fhir.Reference fhir: EffectEvidenceSynthesis.outcome:Reference' });
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation());
        }
        if (this["sampleSize"]) {
            issues.push(...this.sampleSize.doModelValidation());
        }
        if (this["resultsByExposure"]) {
            this.resultsByExposure.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["effectEstimate"]) {
            this.effectEstimate.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["certainty"]) {
            this.certainty.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesis._fts_dataType = 'EffectEvidenceSynthesis';
//# sourceMappingURL=data:application/json;base64,