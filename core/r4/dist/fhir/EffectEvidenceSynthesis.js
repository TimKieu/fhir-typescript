// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: EffectEvidenceSynthesis
import * as fhir from '../fhir.js';
// @ts-ignore
import { ExposureStateCodes } from '../fhirValueSets/ExposureStateCodes.js';
// @ts-ignore
import { EvidenceVariantStateCodings, } from '../fhirValueSets/EvidenceVariantStateCodings.js';
// @ts-ignore
import { PrecisionEstimateTypeCodings, } from '../fhirValueSets/PrecisionEstimateTypeCodings.js';
// @ts-ignore
import { EffectEstimateTypeCodings, } from '../fhirValueSets/EffectEstimateTypeCodings.js';
// @ts-ignore
import { UcumUnitsCodings, } from '../fhirValueSets/UcumUnitsCodings.js';
// @ts-ignore
import { UcumUnitsCodes } from '../fhirValueSets/UcumUnitsCodes.js';
// @ts-ignore
import { CertaintySubcomponentTypeCodings, } from '../fhirValueSets/CertaintySubcomponentTypeCodings.js';
// @ts-ignore
import { CertaintySubcomponentRatingCodings, } from '../fhirValueSets/CertaintySubcomponentRatingCodings.js';
// @ts-ignore
import { EvidenceQualityCodings, } from '../fhirValueSets/EvidenceQualityCodings.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { SynthesisTypeCodings, } from '../fhirValueSets/SynthesisTypeCodings.js';
// @ts-ignore
import { StudyTypeCodings, } from '../fhirValueSets/StudyTypeCodings.js';
/**
 * A description of the size of the sample involved in the synthesis.
 */
export class EffectEvidenceSynthesisSampleSize extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['numberOfStudies']) {
            this.numberOfStudies = new fhir.FhirInteger({ value: source.numberOfStudies });
        }
        if (source['_numberOfStudies']) {
            if (this.numberOfStudies) {
                this.numberOfStudies.addExtendedProperties(source._numberOfStudies);
            }
            else {
                this.numberOfStudies = new fhir.FhirInteger(source._numberOfStudies);
            }
        }
        if (source['numberOfParticipants']) {
            this.numberOfParticipants = new fhir.FhirInteger({ value: source.numberOfParticipants });
        }
        if (source['_numberOfParticipants']) {
            if (this.numberOfParticipants) {
                this.numberOfParticipants.addExtendedProperties(source._numberOfParticipants);
            }
            else {
                this.numberOfParticipants = new fhir.FhirInteger(source._numberOfParticipants);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'EffectEvidenceSynthesis.sampleSize';
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["numberOfStudies"]) {
            issues.push(...this.numberOfStudies.doModelValidation(expression + '.numberOfStudies'));
        }
        if (this["numberOfParticipants"]) {
            issues.push(...this.numberOfParticipants.doModelValidation(expression + '.numberOfParticipants'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisSampleSize._fts_dataType = 'EffectEvidenceSynthesisSampleSize';
/**
 * A description of the results for each exposure considered in the effect estimate.
 */
export class EffectEvidenceSynthesisResultsByExposure extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisResultsByExposure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['exposureState']) {
            this.exposureState = new fhir.FhirCode({ value: source.exposureState });
        }
        if (source['_exposureState']) {
            if (this.exposureState) {
                this.exposureState.addExtendedProperties(source._exposureState);
            }
            else {
                this.exposureState = new fhir.FhirCode(source._exposureState);
            }
        }
        if (source['variantState']) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
        if (source['riskEvidenceSynthesis']) {
            this.riskEvidenceSynthesis = new fhir.Reference(source.riskEvidenceSynthesis);
        }
        else {
            this.riskEvidenceSynthesis = null;
        }
    }
    /**
     * Required-bound Value Set for exposureState (EffectEvidenceSynthesis.resultsByExposure.exposureState)
     */
    static get exposureStateRequiredCodes() {
        return ExposureStateCodes;
    }
    /**
     * Extensible-bound Value Set for variantState (EffectEvidenceSynthesis.resultsByExposure.variantState)
     */
    static get variantStateExtensibleCodings() {
        return EvidenceVariantStateCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'EffectEvidenceSynthesis.resultsByExposure';
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this['exposureState'] && (!Object.values(ExposureStateCodes).includes(this.exposureState.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'exposureState (EffectEvidenceSynthesis.resultsByExposure.exposureState) of type code is missing code for Required binding to: ExposureState', expression: [expression] });
        }
        if (this["exposureState"]) {
            issues.push(...this.exposureState.doModelValidation(expression + '.exposureState'));
        }
        if (this["variantState"]) {
            issues.push(...this.variantState.doModelValidation(expression + '.variantState'));
        }
        if (!this['riskEvidenceSynthesis']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property riskEvidenceSynthesis fhir: EffectEvidenceSynthesis.resultsByExposure.riskEvidenceSynthesis:Reference', expression: [expression] });
        }
        if (this["riskEvidenceSynthesis"]) {
            issues.push(...this.riskEvidenceSynthesis.doModelValidation(expression + '.riskEvidenceSynthesis'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisResultsByExposure._fts_dataType = 'EffectEvidenceSynthesisResultsByExposure';
/**
 * A description of the precision of the estimate for the effect.
 */
export class EffectEvidenceSynthesisEffectEstimatePrecisionEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['level']) {
            this.level = new fhir.FhirDecimal({ value: source.level });
        }
        if (source['_level']) {
            if (this.level) {
                this.level.addExtendedProperties(source._level);
            }
            else {
                this.level = new fhir.FhirDecimal(source._level);
            }
        }
        if (source['from']) {
            this.from = new fhir.FhirDecimal({ value: source.from });
        }
        if (source['_from']) {
            if (this.from) {
                this.from.addExtendedProperties(source._from);
            }
            else {
                this.from = new fhir.FhirDecimal(source._from);
            }
        }
        if (source['to']) {
            this.to = new fhir.FhirDecimal({ value: source.to });
        }
        if (source['_to']) {
            if (this.to) {
                this.to.addExtendedProperties(source._to);
            }
            else {
                this.to = new fhir.FhirDecimal(source._to);
            }
        }
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.effectEstimate.precisionEstimate.type)
     */
    static get typeExtensibleCodings() {
        return PrecisionEstimateTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'EffectEvidenceSynthesis.effectEstimate.precisionEstimate';
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["level"]) {
            issues.push(...this.level.doModelValidation(expression + '.level'));
        }
        if (this["from"]) {
            issues.push(...this.from.doModelValidation(expression + '.from'));
        }
        if (this["to"]) {
            issues.push(...this.to.doModelValidation(expression + '.to'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisEffectEstimatePrecisionEstimate._fts_dataType = 'EffectEvidenceSynthesisEffectEstimatePrecisionEstimate';
/**
 * The estimated effect of the exposure variant.
 */
export class EffectEvidenceSynthesisEffectEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisEffectEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['variantState']) {
            this.variantState = new fhir.CodeableConcept(source.variantState);
        }
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value);
            }
        }
        if (source['unitOfMeasure']) {
            this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure);
        }
        if (source['precisionEstimate']) {
            this.precisionEstimate = source.precisionEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(x));
        }
        else {
            this.precisionEstimate = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.effectEstimate.type)
     */
    static get typeExtensibleCodings() {
        return EffectEstimateTypeCodings;
    }
    /**
     * Extensible-bound Value Set for variantState (EffectEvidenceSynthesis.effectEstimate.variantState)
     */
    static get variantStateExtensibleCodings() {
        return EvidenceVariantStateCodings;
    }
    /**
     * Required-bound Value Set for unitOfMeasure (EffectEvidenceSynthesis.effectEstimate.unitOfMeasure)
     */
    static get unitOfMeasureRequiredCodes() {
        return UcumUnitsCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'EffectEvidenceSynthesis.effectEstimate';
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["variantState"]) {
            issues.push(...this.variantState.doModelValidation(expression + '.variantState'));
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        if (this['unitOfMeasure'] && (!this.unitOfMeasure.hasCodingFromObject(UcumUnitsCodings))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'unitOfMeasure (EffectEvidenceSynthesis.effectEstimate.unitOfMeasure) of type CodeableConcept is missing code for Required binding to: UcumUnits', expression: [expression] });
        }
        if (this["unitOfMeasure"]) {
            issues.push(...this.unitOfMeasure.doModelValidation(expression + '.unitOfMeasure'));
        }
        if (this["precisionEstimate"]) {
            this.precisionEstimate.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.precisionEstimate[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisEffectEstimate._fts_dataType = 'EffectEvidenceSynthesisEffectEstimate';
/**
 * A description of a component of the overall certainty.
 */
export class EffectEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.rating = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (EffectEvidenceSynthesis.certainty.certaintySubcomponent.type)
     */
    static get typeExtensibleCodings() {
        return CertaintySubcomponentTypeCodings;
    }
    /**
     * Extensible-bound Value Set for rating (EffectEvidenceSynthesis.certainty.certaintySubcomponent.rating)
     */
    static get ratingExtensibleCodings() {
        return CertaintySubcomponentRatingCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'EffectEvidenceSynthesis.certainty.certaintySubcomponent';
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["rating"]) {
            this.rating.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.rating[${i}]`)); });
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisCertaintyCertaintySubcomponent._fts_dataType = 'EffectEvidenceSynthesisCertaintyCertaintySubcomponent';
/**
 * A description of the certainty of the effect estimate.
 */
export class EffectEvidenceSynthesisCertainty extends fhir.BackboneElement {
    /**
     * Default constructor for EffectEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.rating = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['certaintySubcomponent']) {
            this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhir.EffectEvidenceSynthesisCertaintyCertaintySubcomponent(x));
        }
        else {
            this.certaintySubcomponent = [];
        }
    }
    /**
     * Extensible-bound Value Set for rating (EffectEvidenceSynthesis.certainty.rating)
     */
    static get ratingExtensibleCodings() {
        return EvidenceQualityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'EffectEvidenceSynthesis.certainty';
        }
        if (this["rating"]) {
            this.rating.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.rating[${i}]`)); });
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["certaintySubcomponent"]) {
            this.certaintySubcomponent.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.certaintySubcomponent[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesisCertainty._fts_dataType = 'EffectEvidenceSynthesisCertainty';
/**
 * The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.
 */
export class EffectEvidenceSynthesis extends fhir.DomainResource {
    /**
     * Default constructor for EffectEvidenceSynthesis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'EffectEvidenceSynthesis';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate);
            }
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['synthesisType']) {
            this.synthesisType = new fhir.CodeableConcept(source.synthesisType);
        }
        if (source['studyType']) {
            this.studyType = new fhir.CodeableConcept(source.studyType);
        }
        if (source['population']) {
            this.population = new fhir.Reference(source.population);
        }
        else {
            this.population = null;
        }
        if (source['exposure']) {
            this.exposure = new fhir.Reference(source.exposure);
        }
        else {
            this.exposure = null;
        }
        if (source['exposureAlternative']) {
            this.exposureAlternative = new fhir.Reference(source.exposureAlternative);
        }
        else {
            this.exposureAlternative = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.Reference(source.outcome);
        }
        else {
            this.outcome = null;
        }
        if (source['sampleSize']) {
            this.sampleSize = new fhir.EffectEvidenceSynthesisSampleSize(source.sampleSize);
        }
        if (source['resultsByExposure']) {
            this.resultsByExposure = source.resultsByExposure.map((x) => new fhir.EffectEvidenceSynthesisResultsByExposure(x));
        }
        else {
            this.resultsByExposure = [];
        }
        if (source['effectEstimate']) {
            this.effectEstimate = source.effectEstimate.map((x) => new fhir.EffectEvidenceSynthesisEffectEstimate(x));
        }
        else {
            this.effectEstimate = [];
        }
        if (source['certainty']) {
            this.certainty = source.certainty.map((x) => new fhir.EffectEvidenceSynthesisCertainty(x));
        }
        else {
            this.certainty = [];
        }
    }
    /**
     * Required-bound Value Set for status (EffectEvidenceSynthesis.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Extensible-bound Value Set for synthesisType (EffectEvidenceSynthesis.synthesisType)
     */
    static get synthesisTypeExtensibleCodings() {
        return SynthesisTypeCodings;
    }
    /**
     * Extensible-bound Value Set for studyType (EffectEvidenceSynthesis.studyType)
     */
    static get studyTypeExtensibleCodings() {
        return StudyTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'EffectEvidenceSynthesis';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: EffectEvidenceSynthesis.resourceType:"EffectEvidenceSynthesis"', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: EffectEvidenceSynthesis.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (EffectEvidenceSynthesis.status) of type code is missing code for Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (this["approvalDate"]) {
            issues.push(...this.approvalDate.doModelValidation(expression + '.approvalDate'));
        }
        if (this["lastReviewDate"]) {
            issues.push(...this.lastReviewDate.doModelValidation(expression + '.lastReviewDate'));
        }
        if (this["effectivePeriod"]) {
            issues.push(...this.effectivePeriod.doModelValidation(expression + '.effectivePeriod'));
        }
        if (this["topic"]) {
            this.topic.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.topic[${i}]`)); });
        }
        if (this["author"]) {
            this.author.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.author[${i}]`)); });
        }
        if (this["editor"]) {
            this.editor.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.editor[${i}]`)); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reviewer[${i}]`)); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.endorser[${i}]`)); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.relatedArtifact[${i}]`)); });
        }
        if (this["synthesisType"]) {
            issues.push(...this.synthesisType.doModelValidation(expression + '.synthesisType'));
        }
        if (this["studyType"]) {
            issues.push(...this.studyType.doModelValidation(expression + '.studyType'));
        }
        if (!this['population']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property population fhir: EffectEvidenceSynthesis.population:Reference', expression: [expression] });
        }
        if (this["population"]) {
            issues.push(...this.population.doModelValidation(expression + '.population'));
        }
        if (!this['exposure']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property exposure fhir: EffectEvidenceSynthesis.exposure:Reference', expression: [expression] });
        }
        if (this["exposure"]) {
            issues.push(...this.exposure.doModelValidation(expression + '.exposure'));
        }
        if (!this['exposureAlternative']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property exposureAlternative fhir: EffectEvidenceSynthesis.exposureAlternative:Reference', expression: [expression] });
        }
        if (this["exposureAlternative"]) {
            issues.push(...this.exposureAlternative.doModelValidation(expression + '.exposureAlternative'));
        }
        if (!this['outcome']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property outcome fhir: EffectEvidenceSynthesis.outcome:Reference', expression: [expression] });
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation(expression + '.outcome'));
        }
        if (this["sampleSize"]) {
            issues.push(...this.sampleSize.doModelValidation(expression + '.sampleSize'));
        }
        if (this["resultsByExposure"]) {
            this.resultsByExposure.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.resultsByExposure[${i}]`)); });
        }
        if (this["effectEstimate"]) {
            this.effectEstimate.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.effectEstimate[${i}]`)); });
        }
        if (this["certainty"]) {
            this.certainty.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.certainty[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
EffectEvidenceSynthesis._fts_dataType = 'EffectEvidenceSynthesis';
//# sourceMappingURL=data:application/json;base64,