/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { AddressUseCodings } from '../fhirValueSets/AddressUseCodings.js';
import { AddressTypeCodings } from '../fhirValueSets/AddressTypeCodings.js';
import { FhirElement } from './FhirElement.js';
import { FhirString } from './FhirString.js';
import { Period } from './Period.js';

// <auto-generated/>
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 */
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    /**
     * Default constructor for Address - initializes any required elements to null if a value is not provided.
     */
    function Address(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['use']) {
            _this.use = source.use;
        }
        if (source['type']) {
            _this.type = source.type;
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['line']) {
            _this.line = source.line.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.line = [];
        }
        if (source['city']) {
            _this.city = new FhirString({ value: source.city });
        }
        if (source['district']) {
            _this.district = new FhirString({ value: source.district });
        }
        if (source['state']) {
            _this.state = new FhirString({ value: source.state });
        }
        if (source['postalCode']) {
            _this.postalCode = new FhirString({ value: source.postalCode });
        }
        if (source['country']) {
            _this.country = new FhirString({ value: source.country });
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for use (Address.use)
     */
    Address.useRequiredCoding = function () {
        return AddressUseCodings;
    };
    /**
     * Required-bound Value Set for type (Address.type)
     */
    Address.typeRequiredCoding = function () {
        return AddressTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Address.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["text"]) {
            (_a = outcome.issue).push.apply(_a, this.text.doModelValidation().issue);
        }
        if (this["line"]) {
            this.line.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["city"]) {
            (_b = outcome.issue).push.apply(_b, this.city.doModelValidation().issue);
        }
        if (this["district"]) {
            (_c = outcome.issue).push.apply(_c, this.district.doModelValidation().issue);
        }
        if (this["state"]) {
            (_d = outcome.issue).push.apply(_d, this.state.doModelValidation().issue);
        }
        if (this["postalCode"]) {
            (_e = outcome.issue).push.apply(_e, this.postalCode.doModelValidation().issue);
        }
        if (this["country"]) {
            (_f = outcome.issue).push.apply(_f, this.country.doModelValidation().issue);
        }
        if (this["period"]) {
            (_g = outcome.issue).push.apply(_g, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Address._fts_dataType = 'Address';
    return Address;
}(FhirElement));

export { Address };
//# sourceMappingURL=Address.js.map
