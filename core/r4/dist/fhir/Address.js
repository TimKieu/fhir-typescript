// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Address
import * as fhir from '../fhir.js';
// @ts-ignore
import { AddressUseCodings, } from '../fhirValueSets/AddressUseCodings.js';
// @ts-ignore
import { AddressTypeCodings, } from '../fhirValueSets/AddressTypeCodings.js';
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
 */
export class Address extends fhir.FhirElement {
    /**
     * Default constructor for Address - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['use']) {
            this.use = source.use;
        }
        if (source['type']) {
            this.type = source.type;
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['line']) {
            this.line = source.line.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.line = [];
        }
        if (source['city']) {
            this.city = new fhir.FhirString({ value: source.city });
        }
        if (source['district']) {
            this.district = new fhir.FhirString({ value: source.district });
        }
        if (source['state']) {
            this.state = new fhir.FhirString({ value: source.state });
        }
        if (source['postalCode']) {
            this.postalCode = new fhir.FhirString({ value: source.postalCode });
        }
        if (source['country']) {
            this.country = new fhir.FhirString({ value: source.country });
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for use (Address.use)
     */
    static useRequiredCoding() {
        return AddressUseCodings;
    }
    /**
     * Required-bound Value Set for type (Address.type)
     */
    static typeRequiredCoding() {
        return AddressTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["line"]) {
            this.line.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["city"]) {
            issues.push(...this.city.doModelValidation());
        }
        if (this["district"]) {
            issues.push(...this.district.doModelValidation());
        }
        if (this["state"]) {
            issues.push(...this.state.doModelValidation());
        }
        if (this["postalCode"]) {
            issues.push(...this.postalCode.doModelValidation());
        }
        if (this["country"]) {
            issues.push(...this.country.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Address._fts_dataType = 'Address';
//# sourceMappingURL=data:application/json;base64,