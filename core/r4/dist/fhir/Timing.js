// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Timing
import * as fhir from '../fhir.js';
// @ts-ignore
import { UnitsOfTimeVsValidation } from '../fhirValueSets/UnitsOfTimeVsValidation.js';
// @ts-ignore
import { DaysOfWeekVsValidation } from '../fhirValueSets/DaysOfWeekVsValidation.js';
// @ts-ignore
import { EventTimingVsValidation } from '../fhirValueSets/EventTimingVsValidation.js';
/**
 * A set of rules that describe when the event is scheduled.
 */
export class TimingRepeat extends fhir.FhirElement {
    /**
     * Default constructor for TimingRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['bounds']) {
            this.bounds = source.bounds;
        }
        else if (source['boundsDuration']) {
            this.bounds = new fhir.Duration(source.boundsDuration);
        }
        else if (source['boundsRange']) {
            this.bounds = new fhir.Range(source.boundsRange);
        }
        else if (source['boundsPeriod']) {
            this.bounds = new fhir.Period(source.boundsPeriod);
        }
        if (source['count']) {
            this.count = new fhir.FhirPositiveInt({ value: source.count });
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirPositiveInt(source._count);
            }
        }
        if (source['countMax']) {
            this.countMax = new fhir.FhirPositiveInt({ value: source.countMax });
        }
        if (source['_countMax']) {
            if (this.countMax) {
                this.countMax.addExtendedProperties(source._countMax);
            }
            else {
                this.countMax = new fhir.FhirPositiveInt(source._countMax);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.FhirDecimal({ value: source.duration });
        }
        if (source['_duration']) {
            if (this.duration) {
                this.duration.addExtendedProperties(source._duration);
            }
            else {
                this.duration = new fhir.FhirDecimal(source._duration);
            }
        }
        if (source['durationMax']) {
            this.durationMax = new fhir.FhirDecimal({ value: source.durationMax });
        }
        if (source['_durationMax']) {
            if (this.durationMax) {
                this.durationMax.addExtendedProperties(source._durationMax);
            }
            else {
                this.durationMax = new fhir.FhirDecimal(source._durationMax);
            }
        }
        if (source['durationUnit']) {
            this.durationUnit = new fhir.FhirCode({ value: source.durationUnit });
        }
        if (source['_durationUnit']) {
            if (this.durationUnit) {
                this.durationUnit.addExtendedProperties(source._durationUnit);
            }
            else {
                this.durationUnit = new fhir.FhirCode(source._durationUnit);
            }
        }
        if (source['frequency']) {
            this.frequency = new fhir.FhirPositiveInt({ value: source.frequency });
        }
        if (source['_frequency']) {
            if (this.frequency) {
                this.frequency.addExtendedProperties(source._frequency);
            }
            else {
                this.frequency = new fhir.FhirPositiveInt(source._frequency);
            }
        }
        if (source['frequencyMax']) {
            this.frequencyMax = new fhir.FhirPositiveInt({ value: source.frequencyMax });
        }
        if (source['_frequencyMax']) {
            if (this.frequencyMax) {
                this.frequencyMax.addExtendedProperties(source._frequencyMax);
            }
            else {
                this.frequencyMax = new fhir.FhirPositiveInt(source._frequencyMax);
            }
        }
        if (source['period']) {
            this.period = new fhir.FhirDecimal({ value: source.period });
        }
        if (source['_period']) {
            if (this.period) {
                this.period.addExtendedProperties(source._period);
            }
            else {
                this.period = new fhir.FhirDecimal(source._period);
            }
        }
        if (source['periodMax']) {
            this.periodMax = new fhir.FhirDecimal({ value: source.periodMax });
        }
        if (source['_periodMax']) {
            if (this.periodMax) {
                this.periodMax.addExtendedProperties(source._periodMax);
            }
            else {
                this.periodMax = new fhir.FhirDecimal(source._periodMax);
            }
        }
        if (source['periodUnit']) {
            this.periodUnit = new fhir.FhirCode({ value: source.periodUnit });
        }
        if (source['_periodUnit']) {
            if (this.periodUnit) {
                this.periodUnit.addExtendedProperties(source._periodUnit);
            }
            else {
                this.periodUnit = new fhir.FhirCode(source._periodUnit);
            }
        }
        if (source['dayOfWeek']) {
            this.dayOfWeek = source.dayOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.dayOfWeek = [];
        }
        if (source['_dayOfWeek']) {
            source._dayOfWeek.forEach((x, i) => {
                if (this.dayOfWeek.length >= i) {
                    if (x) {
                        this.dayOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.dayOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['timeOfDay']) {
            this.timeOfDay = source.timeOfDay.map((x) => new fhir.FhirTime({ value: x }));
        }
        else {
            this.timeOfDay = [];
        }
        if (source['_timeOfDay']) {
            source._timeOfDay.forEach((x, i) => {
                if (this.timeOfDay.length >= i) {
                    if (x) {
                        this.timeOfDay[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.timeOfDay.push(new fhir.FhirTime(x));
                    }
                }
            });
        }
        if (source['when']) {
            this.when = source.when.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.when = [];
        }
        if (source['_when']) {
            source._when.forEach((x, i) => {
                if (this.when.length >= i) {
                    if (x) {
                        this.when[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.when.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['offset']) {
            this.offset = new fhir.FhirUnsignedInt({ value: source.offset });
        }
        if (source['_offset']) {
            if (this.offset) {
                this.offset.addExtendedProperties(source._offset);
            }
            else {
                this.offset = new fhir.FhirUnsignedInt(source._offset);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Timing.repeat';
        }
        iss.push(...this.vOS('bounds', exp));
        iss.push(...this.vOS('count', exp));
        iss.push(...this.vOS('countMax', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vOS('durationMax', exp));
        iss.push(...this.vOSV('durationUnit', exp, 'UnitsOfTime', UnitsOfTimeVsValidation, 'r'));
        iss.push(...this.vOS('frequency', exp));
        iss.push(...this.vOS('frequencyMax', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vOS('periodMax', exp));
        iss.push(...this.vOSV('periodUnit', exp, 'UnitsOfTime', UnitsOfTimeVsValidation, 'r'));
        iss.push(...this.vOAV('dayOfWeek', exp, 'DaysOfWeek', DaysOfWeekVsValidation, 'r'));
        iss.push(...this.vOA('timeOfDay', exp));
        iss.push(...this.vOAV('when', exp, 'EventTiming', EventTimingVsValidation, 'r'));
        iss.push(...this.vOS('offset', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TimingRepeat._fts_dataType = 'TimingRepeat';
/**
 * Internal flag to properly serialize choice-type element Timing.repeat.bounds[x]
 */
TimingRepeat._fts_boundsIsChoice = true;
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 */
export class Timing extends fhir.BackboneElement {
    /**
     * Default constructor for Timing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.FhirDateTime({ value: x }));
        }
        else {
            this.event = [];
        }
        if (source['_event']) {
            source._event.forEach((x, i) => {
                if (this.event.length >= i) {
                    if (x) {
                        this.event[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.event.push(new fhir.FhirDateTime(x));
                    }
                }
            });
        }
        if (source['repeat']) {
            this.repeat = new fhir.TimingRepeat(source.repeat);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Timing';
        }
        iss.push(...this.vOA('event', exp));
        iss.push(...this.vOS('repeat', exp));
        iss.push(...this.vOS('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Timing._fts_dataType = 'Timing';
//# sourceMappingURL=data:application/json;base64,