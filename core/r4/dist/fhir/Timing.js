// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Timing
import * as fhir from '../fhir.js';
// @ts-ignore
import { UnitsOfTimeCodes } from '../fhirValueSets/UnitsOfTimeCodes.js';
// @ts-ignore
import { DaysOfWeekCodes } from '../fhirValueSets/DaysOfWeekCodes.js';
// @ts-ignore
import { EventTimingCodes } from '../fhirValueSets/EventTimingCodes.js';
// @ts-ignore
import { TimingAbbreviationCodings, } from '../fhirValueSets/TimingAbbreviationCodings.js';
/**
 * A set of rules that describe when the event is scheduled.
 */
export class TimingRepeat extends fhir.FhirElement {
    /**
     * Default constructor for TimingRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['bounds']) {
            this.bounds = source.bounds;
        }
        else if (source['boundsDuration']) {
            this.bounds = new fhir.Duration(source.boundsDuration);
        }
        else if (source['boundsRange']) {
            this.bounds = new fhir.Range(source.boundsRange);
        }
        else if (source['boundsPeriod']) {
            this.bounds = new fhir.Period(source.boundsPeriod);
        }
        if (source['count']) {
            this.count = new fhir.FhirPositiveInt({ value: source.count });
        }
        if (source['countMax']) {
            this.countMax = new fhir.FhirPositiveInt({ value: source.countMax });
        }
        if (source['duration']) {
            this.duration = new fhir.FhirDecimal({ value: source.duration });
        }
        if (source['durationMax']) {
            this.durationMax = new fhir.FhirDecimal({ value: source.durationMax });
        }
        if (source['durationUnit']) {
            this.durationUnit = new fhir.FhirCode({ value: source.durationUnit });
        }
        if (source['frequency']) {
            this.frequency = new fhir.FhirPositiveInt({ value: source.frequency });
        }
        if (source['frequencyMax']) {
            this.frequencyMax = new fhir.FhirPositiveInt({ value: source.frequencyMax });
        }
        if (source['period']) {
            this.period = new fhir.FhirDecimal({ value: source.period });
        }
        if (source['periodMax']) {
            this.periodMax = new fhir.FhirDecimal({ value: source.periodMax });
        }
        if (source['periodUnit']) {
            this.periodUnit = new fhir.FhirCode({ value: source.periodUnit });
        }
        if (source['dayOfWeek']) {
            this.dayOfWeek = source.dayOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.dayOfWeek = [];
        }
        if (source['timeOfDay']) {
            this.timeOfDay = source.timeOfDay.map((x) => new fhir.FhirTime({ value: x }));
        }
        else {
            this.timeOfDay = [];
        }
        if (source['when']) {
            this.when = source.when.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.when = [];
        }
        if (source['offset']) {
            this.offset = new fhir.FhirUnsignedInt({ value: source.offset });
        }
    }
    /**
     * Required-bound Value Set for durationUnit (Timing.repeat.durationUnit)
     */
    static get durationUnitRequiredCodes() {
        return UnitsOfTimeCodes;
    }
    /**
     * Required-bound Value Set for periodUnit (Timing.repeat.periodUnit)
     */
    static get periodUnitRequiredCodes() {
        return UnitsOfTimeCodes;
    }
    /**
     * Required-bound Value Set for dayOfWeek (Timing.repeat.dayOfWeek)
     */
    static get dayOfWeekRequiredCodes() {
        return DaysOfWeekCodes;
    }
    /**
     * Required-bound Value Set for when (Timing.repeat.when)
     */
    static get whenRequiredCodes() {
        return EventTimingCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["count"]) {
            issues.push(...this.count.doModelValidation());
        }
        if (this["countMax"]) {
            issues.push(...this.countMax.doModelValidation());
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation());
        }
        if (this["durationMax"]) {
            issues.push(...this.durationMax.doModelValidation());
        }
        if (this['durationUnit'] && (!Object.values(UnitsOfTimeCodes).includes(this.durationUnit))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property durationUnit?:fhir.FhirCode<UnitsOfTimeCodeType> fhir: Timing.repeat.durationUnit:code Required binding to: UnitsOfTime' });
        }
        if (this["durationUnit"]) {
            issues.push(...this.durationUnit.doModelValidation());
        }
        if (this["frequency"]) {
            issues.push(...this.frequency.doModelValidation());
        }
        if (this["frequencyMax"]) {
            issues.push(...this.frequencyMax.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["periodMax"]) {
            issues.push(...this.periodMax.doModelValidation());
        }
        if (this['periodUnit'] && (!Object.values(UnitsOfTimeCodes).includes(this.periodUnit))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property periodUnit?:fhir.FhirCode<UnitsOfTimeCodeType> fhir: Timing.repeat.periodUnit:code Required binding to: UnitsOfTime' });
        }
        if (this["periodUnit"]) {
            issues.push(...this.periodUnit.doModelValidation());
        }
        if (this['dayOfWeek']) {
            this.dayOfWeek.forEach((v) => {
                if (!Object.values(DaysOfWeekCodes).includes(v)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property dayOfWeek?:fhir.FhirCode<DaysOfWeekCodeType>[] fhir: Timing.repeat.dayOfWeek:code Required binding to: DaysOfWeek' });
                }
            });
        }
        if (this["dayOfWeek"]) {
            this.dayOfWeek.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["timeOfDay"]) {
            this.timeOfDay.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['when']) {
            this.when.forEach((v) => {
                if (!Object.values(EventTimingCodes).includes(v)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property when?:fhir.FhirCode[] fhir: Timing.repeat.when:code Required binding to: EventTiming' });
                }
            });
        }
        if (this["when"]) {
            this.when.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["offset"]) {
            issues.push(...this.offset.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TimingRepeat._fts_dataType = 'TimingRepeat';
/**
 * Internal flag to properly serialize choice-type element Timing.repeat.bounds[x]
 */
TimingRepeat._fts_boundsIsChoice = true;
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 */
export class Timing extends fhir.BackboneElement {
    /**
     * Default constructor for Timing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.FhirDateTime({ value: x }));
        }
        else {
            this.event = [];
        }
        if (source['repeat']) {
            this.repeat = new fhir.TimingRepeat(source.repeat);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Preferred-bound Value Set for code (Timing.code)
     */
    static get codePreferredCodings() {
        return TimingAbbreviationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["event"]) {
            this.event.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["repeat"]) {
            issues.push(...this.repeat.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Timing._fts_dataType = 'Timing';
//# sourceMappingURL=data:application/json;base64,