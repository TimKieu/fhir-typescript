// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Timing
import * as fhir from '../fhir.js';
// @ts-ignore
import { UnitsOfTimeCodes } from '../fhirValueSets/UnitsOfTimeCodes.js';
// @ts-ignore
import { DaysOfWeekCodes } from '../fhirValueSets/DaysOfWeekCodes.js';
// @ts-ignore
import { EventTimingCodes } from '../fhirValueSets/EventTimingCodes.js';
// @ts-ignore
import { TimingAbbreviationCodings, } from '../fhirValueSets/TimingAbbreviationCodings.js';
/**
 * A set of rules that describe when the event is scheduled.
 */
export class TimingRepeat extends fhir.FhirElement {
    /**
     * Default constructor for TimingRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['bounds']) {
            this.bounds = source.bounds;
        }
        else if (source['boundsDuration']) {
            this.bounds = new fhir.Duration(source.boundsDuration);
        }
        else if (source['boundsRange']) {
            this.bounds = new fhir.Range(source.boundsRange);
        }
        else if (source['boundsPeriod']) {
            this.bounds = new fhir.Period(source.boundsPeriod);
        }
        if (source['count']) {
            this.count = new fhir.FhirPositiveInt({ value: source.count });
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirPositiveInt(source._count);
            }
        }
        if (source['countMax']) {
            this.countMax = new fhir.FhirPositiveInt({ value: source.countMax });
        }
        if (source['_countMax']) {
            if (this.countMax) {
                this.countMax.addExtendedProperties(source._countMax);
            }
            else {
                this.countMax = new fhir.FhirPositiveInt(source._countMax);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.FhirDecimal({ value: source.duration });
        }
        if (source['_duration']) {
            if (this.duration) {
                this.duration.addExtendedProperties(source._duration);
            }
            else {
                this.duration = new fhir.FhirDecimal(source._duration);
            }
        }
        if (source['durationMax']) {
            this.durationMax = new fhir.FhirDecimal({ value: source.durationMax });
        }
        if (source['_durationMax']) {
            if (this.durationMax) {
                this.durationMax.addExtendedProperties(source._durationMax);
            }
            else {
                this.durationMax = new fhir.FhirDecimal(source._durationMax);
            }
        }
        if (source['durationUnit']) {
            this.durationUnit = new fhir.FhirCode({ value: source.durationUnit });
        }
        if (source['_durationUnit']) {
            if (this.durationUnit) {
                this.durationUnit.addExtendedProperties(source._durationUnit);
            }
            else {
                this.durationUnit = new fhir.FhirCode(source._durationUnit);
            }
        }
        if (source['frequency']) {
            this.frequency = new fhir.FhirPositiveInt({ value: source.frequency });
        }
        if (source['_frequency']) {
            if (this.frequency) {
                this.frequency.addExtendedProperties(source._frequency);
            }
            else {
                this.frequency = new fhir.FhirPositiveInt(source._frequency);
            }
        }
        if (source['frequencyMax']) {
            this.frequencyMax = new fhir.FhirPositiveInt({ value: source.frequencyMax });
        }
        if (source['_frequencyMax']) {
            if (this.frequencyMax) {
                this.frequencyMax.addExtendedProperties(source._frequencyMax);
            }
            else {
                this.frequencyMax = new fhir.FhirPositiveInt(source._frequencyMax);
            }
        }
        if (source['period']) {
            this.period = new fhir.FhirDecimal({ value: source.period });
        }
        if (source['_period']) {
            if (this.period) {
                this.period.addExtendedProperties(source._period);
            }
            else {
                this.period = new fhir.FhirDecimal(source._period);
            }
        }
        if (source['periodMax']) {
            this.periodMax = new fhir.FhirDecimal({ value: source.periodMax });
        }
        if (source['_periodMax']) {
            if (this.periodMax) {
                this.periodMax.addExtendedProperties(source._periodMax);
            }
            else {
                this.periodMax = new fhir.FhirDecimal(source._periodMax);
            }
        }
        if (source['periodUnit']) {
            this.periodUnit = new fhir.FhirCode({ value: source.periodUnit });
        }
        if (source['_periodUnit']) {
            if (this.periodUnit) {
                this.periodUnit.addExtendedProperties(source._periodUnit);
            }
            else {
                this.periodUnit = new fhir.FhirCode(source._periodUnit);
            }
        }
        if (source['dayOfWeek']) {
            this.dayOfWeek = source.dayOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.dayOfWeek = [];
        }
        if (source['_dayOfWeek']) {
            source._dayOfWeek.forEach((x, i) => {
                if (this.dayOfWeek.length >= i) {
                    if (x) {
                        this.dayOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.dayOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['timeOfDay']) {
            this.timeOfDay = source.timeOfDay.map((x) => new fhir.FhirTime({ value: x }));
        }
        else {
            this.timeOfDay = [];
        }
        if (source['_timeOfDay']) {
            source._timeOfDay.forEach((x, i) => {
                if (this.timeOfDay.length >= i) {
                    if (x) {
                        this.timeOfDay[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.timeOfDay.push(new fhir.FhirTime(x));
                    }
                }
            });
        }
        if (source['when']) {
            this.when = source.when.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.when = [];
        }
        if (source['_when']) {
            source._when.forEach((x, i) => {
                if (this.when.length >= i) {
                    if (x) {
                        this.when[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.when.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['offset']) {
            this.offset = new fhir.FhirUnsignedInt({ value: source.offset });
        }
        if (source['_offset']) {
            if (this.offset) {
                this.offset.addExtendedProperties(source._offset);
            }
            else {
                this.offset = new fhir.FhirUnsignedInt(source._offset);
            }
        }
    }
    /**
     * Required-bound Value Set for durationUnit (Timing.repeat.durationUnit)
     */
    static get durationUnitRequiredCodes() {
        return UnitsOfTimeCodes;
    }
    /**
     * Required-bound Value Set for periodUnit (Timing.repeat.periodUnit)
     */
    static get periodUnitRequiredCodes() {
        return UnitsOfTimeCodes;
    }
    /**
     * Required-bound Value Set for dayOfWeek (Timing.repeat.dayOfWeek)
     */
    static get dayOfWeekRequiredCodes() {
        return DaysOfWeekCodes;
    }
    /**
     * Required-bound Value Set for when (Timing.repeat.when)
     */
    static get whenRequiredCodes() {
        return EventTimingCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Timing.repeat';
        }
        if (this["count"]) {
            issues.push(...this.count.doModelValidation(expression + '.count'));
        }
        if (this["countMax"]) {
            issues.push(...this.countMax.doModelValidation(expression + '.countMax'));
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation(expression + '.duration'));
        }
        if (this["durationMax"]) {
            issues.push(...this.durationMax.doModelValidation(expression + '.durationMax'));
        }
        if (this['durationUnit'] && (!Object.values(UnitsOfTimeCodes).includes(this.durationUnit.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'durationUnit (Timing.repeat.durationUnit) of type code is missing code for Required binding to: UnitsOfTime', expression: [expression] });
        }
        if (this["durationUnit"]) {
            issues.push(...this.durationUnit.doModelValidation(expression + '.durationUnit'));
        }
        if (this["frequency"]) {
            issues.push(...this.frequency.doModelValidation(expression + '.frequency'));
        }
        if (this["frequencyMax"]) {
            issues.push(...this.frequencyMax.doModelValidation(expression + '.frequencyMax'));
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        if (this["periodMax"]) {
            issues.push(...this.periodMax.doModelValidation(expression + '.periodMax'));
        }
        if (this['periodUnit'] && (!Object.values(UnitsOfTimeCodes).includes(this.periodUnit.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'periodUnit (Timing.repeat.periodUnit) of type code is missing code for Required binding to: UnitsOfTime', expression: [expression] });
        }
        if (this["periodUnit"]) {
            issues.push(...this.periodUnit.doModelValidation(expression + '.periodUnit'));
        }
        if (this['dayOfWeek']) {
            this.dayOfWeek.forEach((v) => {
                if (!Object.values(DaysOfWeekCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'dayOfWeek (Timing.repeat.dayOfWeek) of type code is missing code for Required binding to: DaysOfWeek', expression: [expression] });
                }
            });
        }
        if (this["dayOfWeek"]) {
            this.dayOfWeek.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.dayOfWeek[${i}]`)); });
        }
        if (this["timeOfDay"]) {
            this.timeOfDay.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.timeOfDay[${i}]`)); });
        }
        if (this['when']) {
            this.when.forEach((v) => {
                if (!Object.values(EventTimingCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'when (Timing.repeat.when) of type code is missing code for Required binding to: EventTiming', expression: [expression] });
                }
            });
        }
        if (this["when"]) {
            this.when.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.when[${i}]`)); });
        }
        if (this["offset"]) {
            issues.push(...this.offset.doModelValidation(expression + '.offset'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TimingRepeat._fts_dataType = 'TimingRepeat';
/**
 * Internal flag to properly serialize choice-type element Timing.repeat.bounds[x]
 */
TimingRepeat._fts_boundsIsChoice = true;
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 */
export class Timing extends fhir.BackboneElement {
    /**
     * Default constructor for Timing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.FhirDateTime({ value: x }));
        }
        else {
            this.event = [];
        }
        if (source['_event']) {
            source._event.forEach((x, i) => {
                if (this.event.length >= i) {
                    if (x) {
                        this.event[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.event.push(new fhir.FhirDateTime(x));
                    }
                }
            });
        }
        if (source['repeat']) {
            this.repeat = new fhir.TimingRepeat(source.repeat);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Preferred-bound Value Set for code (Timing.code)
     */
    static get codePreferredCodings() {
        return TimingAbbreviationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Timing';
        }
        if (this["event"]) {
            this.event.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.event[${i}]`)); });
        }
        if (this["repeat"]) {
            issues.push(...this.repeat.doModelValidation(expression + '.repeat'));
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Timing._fts_dataType = 'Timing';
//# sourceMappingURL=data:application/json;base64,