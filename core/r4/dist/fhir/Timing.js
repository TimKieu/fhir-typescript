// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Timing
import * as fhir from '../fhir.js';
// @ts-ignore
import { UnitsOfTimeCodings, } from '../fhirValueSets/UnitsOfTimeCodings.js';
// @ts-ignore
import { DaysOfWeekCodings, } from '../fhirValueSets/DaysOfWeekCodings.js';
// @ts-ignore
import { EventTimingCodings, } from '../fhirValueSets/EventTimingCodings.js';
// @ts-ignore
import { TimingAbbreviationCodings, } from '../fhirValueSets/TimingAbbreviationCodings.js';
/**
 * A set of rules that describe when the event is scheduled.
 */
export class TimingRepeat extends fhir.FhirElement {
    /**
     * Default constructor for TimingRepeat - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['bounds']) {
            this.bounds = source.bounds;
        }
        else if (source['boundsDuration']) {
            this.bounds = new fhir.Duration(source.boundsDuration);
        }
        else if (source['boundsRange']) {
            this.bounds = new fhir.Range(source.boundsRange);
        }
        else if (source['boundsPeriod']) {
            this.bounds = new fhir.Period(source.boundsPeriod);
        }
        if (source['count']) {
            this.count = new fhir.FhirPositiveInt({ value: source.count });
        }
        if (source['countMax']) {
            this.countMax = new fhir.FhirPositiveInt({ value: source.countMax });
        }
        if (source['duration']) {
            this.duration = new fhir.FhirDecimal({ value: source.duration });
        }
        if (source['durationMax']) {
            this.durationMax = new fhir.FhirDecimal({ value: source.durationMax });
        }
        if (source['durationUnit']) {
            this.durationUnit = source.durationUnit;
        }
        if (source['frequency']) {
            this.frequency = new fhir.FhirPositiveInt({ value: source.frequency });
        }
        if (source['frequencyMax']) {
            this.frequencyMax = new fhir.FhirPositiveInt({ value: source.frequencyMax });
        }
        if (source['period']) {
            this.period = new fhir.FhirDecimal({ value: source.period });
        }
        if (source['periodMax']) {
            this.periodMax = new fhir.FhirDecimal({ value: source.periodMax });
        }
        if (source['periodUnit']) {
            this.periodUnit = source.periodUnit;
        }
        if (source['dayOfWeek']) {
            this.dayOfWeek = source.dayOfWeek.map((x) => x);
        }
        else {
            this.dayOfWeek = [];
        }
        if (source['timeOfDay']) {
            this.timeOfDay = source.timeOfDay.map((x) => new fhir.FhirTime({ value: x }));
        }
        else {
            this.timeOfDay = [];
        }
        if (source['when']) {
            this.when = source.when.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.when = [];
        }
        if (source['offset']) {
            this.offset = new fhir.FhirUnsignedInt({ value: source.offset });
        }
    }
    /**
     * Required-bound Value Set for durationUnit (Timing.repeat.durationUnit)
     */
    static durationUnitRequiredCoding() {
        return UnitsOfTimeCodings;
    }
    /**
     * Required-bound Value Set for periodUnit (Timing.repeat.periodUnit)
     */
    static periodUnitRequiredCoding() {
        return UnitsOfTimeCodings;
    }
    /**
     * Required-bound Value Set for dayOfWeek (Timing.repeat.dayOfWeek)
     */
    static dayOfWeekRequiredCoding() {
        return DaysOfWeekCodings;
    }
    /**
     * Required-bound Value Set for when (Timing.repeat.when)
     */
    static whenRequiredCoding() {
        return EventTimingCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["count"]) {
            issues.push(...this.count.doModelValidation());
        }
        if (this["countMax"]) {
            issues.push(...this.countMax.doModelValidation());
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation());
        }
        if (this["durationMax"]) {
            issues.push(...this.durationMax.doModelValidation());
        }
        if (this["frequency"]) {
            issues.push(...this.frequency.doModelValidation());
        }
        if (this["frequencyMax"]) {
            issues.push(...this.frequencyMax.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["periodMax"]) {
            issues.push(...this.periodMax.doModelValidation());
        }
        if (this["timeOfDay"]) {
            this.timeOfDay.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["when"]) {
            this.when.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["offset"]) {
            issues.push(...this.offset.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TimingRepeat._fts_dataType = 'TimingRepeat';
/**
 * Internal flag to properly serialize choice-type element Timing.repeat.bounds[x]
 */
TimingRepeat._fts_boundsIsChoice = true;
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 */
export class Timing extends fhir.BackboneElement {
    /**
     * Default constructor for Timing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['event']) {
            this.event = source.event.map((x) => new fhir.FhirDateTime({ value: x }));
        }
        else {
            this.event = [];
        }
        if (source['repeat']) {
            this.repeat = new fhir.TimingRepeat(source.repeat);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
    }
    /**
     * Preferred-bound Value Set for code (Timing.code)
     */
    static codePreferredCoding() {
        return TimingAbbreviationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["event"]) {
            this.event.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["repeat"]) {
            issues.push(...this.repeat.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Timing._fts_dataType = 'Timing';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGltaW5nLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9UaW1pbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsMkJBQTJCO0FBRTNCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBRW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsa0JBQWtCLEdBQXlCLE1BQU0sd0NBQXdDLENBQUM7QUFHbkcsYUFBYTtBQUNiLE9BQU8sRUFBRSxpQkFBaUIsR0FBd0IsTUFBTSx1Q0FBdUMsQ0FBQztBQUdoRyxhQUFhO0FBQ2IsT0FBTyxFQUFFLGtCQUFrQixHQUF5QixNQUFNLHdDQUF3QyxDQUFDO0FBR25HLGFBQWE7QUFDYixPQUFPLEVBQUUseUJBQXlCLEdBQWdDLE1BQU0sK0NBQStDLENBQUM7QUFpRnhIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFlBQWEsU0FBUSxJQUFJLENBQUMsV0FBVztJQXFFaEQ7O09BRUc7SUFDSCxZQUFZLFNBQW1DLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ3pGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FBRTthQUNqRCxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQUU7YUFDekYsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FBRTthQUNoRixJQUFJLE1BQU0sQ0FB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QUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FBRTtJQUM1RSxDQUFDO0lBQ0Q7O09BRUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CO1FBQy9CLE9BQU8seUJBQXlCLENBQUM7SUFDbkMsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCO1FBQy9CLElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2RCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDNUYsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUN4RSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3BFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBekNEOztHQUVHO0FBQzZCLG9CQUFhLEdBQVUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIENvbXBsZXhUeXBlOiBUaW1pbmdcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFVuaXRzT2ZUaW1lQ29kaW5ncywgVW5pdHNPZlRpbWVDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Vbml0c09mVGltZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFVuaXRzT2ZUaW1lQ29kZXMsICBVbml0c09mVGltZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Vbml0c09mVGltZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEYXlzT2ZXZWVrQ29kaW5ncywgRGF5c09mV2Vla0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RheXNPZldlZWtDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBEYXlzT2ZXZWVrQ29kZXMsICBEYXlzT2ZXZWVrQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0RheXNPZldlZWtDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXZlbnRUaW1pbmdDb2RpbmdzLCBFdmVudFRpbWluZ0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V2ZW50VGltaW5nQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgRXZlbnRUaW1pbmdDb2RlcywgIEV2ZW50VGltaW5nQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0V2ZW50VGltaW5nQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFRpbWluZ0FiYnJldmlhdGlvbkNvZGluZ3MsIFRpbWluZ0FiYnJldmlhdGlvbkNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1RpbWluZ0FiYnJldmlhdGlvbkNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFRpbWluZ0FiYnJldmlhdGlvbkNvZGVzLCAgVGltaW5nQWJicmV2aWF0aW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1RpbWluZ0FiYnJldmlhdGlvbkNvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFRpbWluZ1JlcGVhdCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUaW1pbmdSZXBlYXRBcmdzIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEVpdGhlciBhIGR1cmF0aW9uIGZvciB0aGUgbGVuZ3RoIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUsIGEgcmFuZ2Ugb2YgcG9zc2libGUgbGVuZ3RoLCBvciBvdXRlciBib3VuZHMgZm9yIHN0YXJ0IGFuZC9vciBlbmQgbGltaXRzIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUuXHJcbiAgICovXHJcbiAgYm91bmRzPzogZmhpci5EdXJhdGlvbnxmaGlyLlJhbmdlfGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFaXRoZXIgYSBkdXJhdGlvbiBmb3IgdGhlIGxlbmd0aCBvZiB0aGUgdGltaW5nIHNjaGVkdWxlLCBhIHJhbmdlIG9mIHBvc3NpYmxlIGxlbmd0aCwgb3Igb3V0ZXIgYm91bmRzIGZvciBzdGFydCBhbmQvb3IgZW5kIGxpbWl0cyBvZiB0aGUgdGltaW5nIHNjaGVkdWxlLlxyXG4gICAqL1xyXG4gIGJvdW5kc0R1cmF0aW9uPzogZmhpci5EdXJhdGlvbkFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEVpdGhlciBhIGR1cmF0aW9uIGZvciB0aGUgbGVuZ3RoIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUsIGEgcmFuZ2Ugb2YgcG9zc2libGUgbGVuZ3RoLCBvciBvdXRlciBib3VuZHMgZm9yIHN0YXJ0IGFuZC9vciBlbmQgbGltaXRzIG9mIHRoZSB0aW1pbmcgc2NoZWR1bGUuXHJcbiAgICovXHJcbiAgYm91bmRzUmFuZ2U/OiBmaGlyLlJhbmdlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRWl0aGVyIGEgZHVyYXRpb24gZm9yIHRoZSBsZW5ndGggb2YgdGhlIHRpbWluZyBzY2hlZHVsZSwgYSByYW5nZSBvZiBwb3NzaWJsZSBsZW5ndGgsIG9yIG91dGVyIGJvdW5kcyBmb3Igc3RhcnQgYW5kL29yIGVuZCBsaW1pdHMgb2YgdGhlIHRpbWluZyBzY2hlZHVsZS5cclxuICAgKi9cclxuICBib3VuZHNQZXJpb2Q/OiBmaGlyLlBlcmlvZEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHlvdSBoYXZlIGJvdGggYm91bmRzIGFuZCBjb3VudCwgdGhlbiB0aGlzIHNob3VsZCBiZSB1bmRlcnN0b29kIGFzIHdpdGhpbiB0aGUgYm91bmRzIHBlcmlvZCwgdW50aWwgY291bnQgdGltZXMgaGFwcGVucy5cclxuICAgKi9cclxuICBjb3VudD86IGZoaXIuRmhpclBvc2l0aXZlSW50fG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoYXQgdGhlIGNvdW50IGlzIGEgcmFuZ2UgLSBzbyB0byBwZXJmb3JtIHRoZSBhY3Rpb24gYmV0d2VlbiBbY291bnRdIGFuZCBbY291bnRNYXhdIHRpbWVzLlxyXG4gICAqL1xyXG4gIGNvdW50TWF4PzogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3Igc29tZSBldmVudHMgdGhlIGR1cmF0aW9uIGlzIHBhcnQgb2YgdGhlIGRlZmluaXRpb24gb2YgdGhlIGV2ZW50IChlLmcuIElWIGluZnVzaW9ucywgd2hlcmUgdGhlIGR1cmF0aW9uIGlzIGltcGxpY2l0IGluIHRoZSBzcGVjaWZpZWQgcXVhbnRpdHkgYW5kIHJhdGUpLiBGb3Igb3RoZXJzLCBpdCdzIHBhcnQgb2YgdGhlIHRpbWluZyBzcGVjaWZpY2F0aW9uIChlLmcuIGV4ZXJjaXNlKS5cclxuICAgKi9cclxuICBkdXJhdGlvbj86IGZoaXIuRmhpckRlY2ltYWx8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3Igc29tZSBldmVudHMgdGhlIGR1cmF0aW9uIGlzIHBhcnQgb2YgdGhlIGRlZmluaXRpb24gb2YgdGhlIGV2ZW50IChlLmcuIElWIGluZnVzaW9ucywgd2hlcmUgdGhlIGR1cmF0aW9uIGlzIGltcGxpY2l0IGluIHRoZSBzcGVjaWZpZWQgcXVhbnRpdHkgYW5kIHJhdGUpLiBGb3Igb3RoZXJzLCBpdCdzIHBhcnQgb2YgdGhlIHRpbWluZyBzcGVjaWZpY2F0aW9uIChlLmcuIGV4ZXJjaXNlKS5cclxuICAgKi9cclxuICBkdXJhdGlvbk1heD86IGZoaXIuRmhpckRlY2ltYWx8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdW5pdHMgb2YgdGltZSBmb3IgdGhlIGR1cmF0aW9uLCBpbiBVQ1VNIHVuaXRzLlxyXG4gICAqL1xyXG4gIGR1cmF0aW9uVW5pdD86IFVuaXRzT2ZUaW1lQ29kZVR5cGV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBhY3Rpb24gd2l0aGluIHRoZSBzcGVjaWZpZWQgcGVyaW9kLiBJZiBmcmVxdWVuY3lNYXggaXMgcHJlc2VudCwgdGhpcyBlbGVtZW50IGluZGljYXRlcyB0aGUgbG93ZXIgYm91bmQgb2YgdGhlIGFsbG93ZWQgcmFuZ2Ugb2YgdGhlIGZyZXF1ZW5jeS5cclxuICAgKi9cclxuICBmcmVxdWVuY3k/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHByZXNlbnQsIGluZGljYXRlcyB0aGF0IHRoZSBmcmVxdWVuY3kgaXMgYSByYW5nZSAtIHNvIHRvIHJlcGVhdCBiZXR3ZWVuIFtmcmVxdWVuY3ldIGFuZCBbZnJlcXVlbmN5TWF4XSB0aW1lcyB3aXRoaW4gdGhlIHBlcmlvZCBvciBwZXJpb2QgcmFuZ2UuXHJcbiAgICovXHJcbiAgZnJlcXVlbmN5TWF4PzogZmhpci5GaGlyUG9zaXRpdmVJbnR8bnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIGR1cmF0aW9uIG9mIHRpbWUgb3ZlciB3aGljaCByZXBldGl0aW9ucyBhcmUgdG8gb2NjdXI7IGUuZy4gdG8gZXhwcmVzcyBcIjMgdGltZXMgcGVyIGRheVwiLCAzIHdvdWxkIGJlIHRoZSBmcmVxdWVuY3kgYW5kIFwiMSBkYXlcIiB3b3VsZCBiZSB0aGUgcGVyaW9kLiBJZiBwZXJpb2RNYXggaXMgcHJlc2VudCwgdGhpcyBlbGVtZW50IGluZGljYXRlcyB0aGUgbG93ZXIgYm91bmQgb2YgdGhlIGFsbG93ZWQgcmFuZ2Ugb2YgdGhlIHBlcmlvZCBsZW5ndGguXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5GaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHByZXNlbnQsIGluZGljYXRlcyB0aGF0IHRoZSBwZXJpb2QgaXMgYSByYW5nZSBmcm9tIFtwZXJpb2RdIHRvIFtwZXJpb2RNYXhdLCBhbGxvd2luZyBleHByZXNzaW5nIGNvbmNlcHRzIHN1Y2ggYXMgXCJkbyB0aGlzIG9uY2UgZXZlcnkgMy01IGRheXMuXHJcbiAgICovXHJcbiAgcGVyaW9kTWF4PzogZmhpci5GaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1bml0cyBvZiB0aW1lIGZvciB0aGUgcGVyaW9kIGluIFVDVU0gdW5pdHMuXHJcbiAgICovXHJcbiAgcGVyaW9kVW5pdD86IFVuaXRzT2ZUaW1lQ29kZVR5cGV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIG5vIGRheXMgYXJlIHNwZWNpZmllZCwgdGhlIGFjdGlvbiBpcyBhc3N1bWVkIHRvIGhhcHBlbiBldmVyeSBkYXkgYXMgb3RoZXJ3aXNlIHNwZWNpZmllZC4gVGhlIGVsZW1lbnRzIGZyZXF1ZW5jeSBhbmQgcGVyaW9kIGNhbm5vdCBiZSB1c2VkIGFzIHdlbGwgYXMgZGF5T2ZXZWVrLlxyXG4gICAqL1xyXG4gIGRheU9mV2Vlaz86IERheXNPZldlZWtDb2RlVHlwZVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIHRpbWUgb2YgZGF5IGlzIHNwZWNpZmllZCwgaXQgaXMgaW5mZXJyZWQgdGhhdCB0aGUgYWN0aW9uIGhhcHBlbnMgZXZlcnkgZGF5IChhcyBmaWx0ZXJlZCBieSBkYXlvZldlZWspIG9uIHRoZSBzcGVjaWZpZWQgdGltZXMuIFRoZSBlbGVtZW50cyB3aGVuLCBmcmVxdWVuY3kgYW5kIHBlcmlvZCBjYW5ub3QgYmUgdXNlZCBhcyB3ZWxsIGFzIHRpbWVPZkRheS5cclxuICAgKi9cclxuICB0aW1lT2ZEYXk/OiBmaGlyLkZoaXJUaW1lW118c3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gbW9yZSB0aGFuIG9uZSBldmVudCBpcyBsaXN0ZWQsIHRoZSBldmVudCBpcyB0aWVkIHRvIHRoZSB1bmlvbiBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50cy5cclxuICAgKi9cclxuICB3aGVuPzogZmhpci5GaGlyQ29kZVtdfHN0cmluZ1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbnV0ZXMgZnJvbSB0aGUgZXZlbnQuIElmIHRoZSBldmVudCBjb2RlIGRvZXMgbm90IGluZGljYXRlIHdoZXRoZXIgdGhlIG1pbnV0ZXMgaXMgYmVmb3JlIG9yIGFmdGVyIHRoZSBldmVudCwgdGhlbiB0aGUgb2Zmc2V0IGlzIGFzc3VtZWQgdG8gYmUgYWZ0ZXIgdGhlIGV2ZW50LlxyXG4gICAqL1xyXG4gIG9mZnNldD86IGZoaXIuRmhpclVuc2lnbmVkSW50fG51bWJlcnx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIHNldCBvZiBydWxlcyB0aGF0IGRlc2NyaWJlIHdoZW4gdGhlIGV2ZW50IGlzIHNjaGVkdWxlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUaW1pbmdSZXBlYXQgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1RpbWluZ1JlcGVhdCc7XHJcbiAgLyoqXHJcbiAgICogRWl0aGVyIGEgZHVyYXRpb24gZm9yIHRoZSBsZW5ndGggb2YgdGhlIHRpbWluZyBzY2hlZHVsZSwgYSByYW5nZSBvZiBwb3NzaWJsZSBsZW5ndGgsIG9yIG91dGVyIGJvdW5kcyBmb3Igc3RhcnQgYW5kL29yIGVuZCBsaW1pdHMgb2YgdGhlIHRpbWluZyBzY2hlZHVsZS5cclxuICAgKi9cclxuICBwdWJsaWMgYm91bmRzPzogKGZoaXIuRHVyYXRpb258Zmhpci5SYW5nZXxmaGlyLlBlcmlvZCl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgVGltaW5nLnJlcGVhdC5ib3VuZHNbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfYm91bmRzSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogSWYgeW91IGhhdmUgYm90aCBib3VuZHMgYW5kIGNvdW50LCB0aGVuIHRoaXMgc2hvdWxkIGJlIHVuZGVyc3Rvb2QgYXMgd2l0aGluIHRoZSBib3VuZHMgcGVyaW9kLCB1bnRpbCBjb3VudCB0aW1lcyBoYXBwZW5zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3VudD86IGZoaXIuRmhpclBvc2l0aXZlSW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBwcmVzZW50LCBpbmRpY2F0ZXMgdGhhdCB0aGUgY291bnQgaXMgYSByYW5nZSAtIHNvIHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBiZXR3ZWVuIFtjb3VudF0gYW5kIFtjb3VudE1heF0gdGltZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGNvdW50TWF4PzogZmhpci5GaGlyUG9zaXRpdmVJbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBzb21lIGV2ZW50cyB0aGUgZHVyYXRpb24gaXMgcGFydCBvZiB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgZXZlbnQgKGUuZy4gSVYgaW5mdXNpb25zLCB3aGVyZSB0aGUgZHVyYXRpb24gaXMgaW1wbGljaXQgaW4gdGhlIHNwZWNpZmllZCBxdWFudGl0eSBhbmQgcmF0ZSkuIEZvciBvdGhlcnMsIGl0J3MgcGFydCBvZiB0aGUgdGltaW5nIHNwZWNpZmljYXRpb24gKGUuZy4gZXhlcmNpc2UpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkdXJhdGlvbj86IGZoaXIuRmhpckRlY2ltYWx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBzb21lIGV2ZW50cyB0aGUgZHVyYXRpb24gaXMgcGFydCBvZiB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgZXZlbnQgKGUuZy4gSVYgaW5mdXNpb25zLCB3aGVyZSB0aGUgZHVyYXRpb24gaXMgaW1wbGljaXQgaW4gdGhlIHNwZWNpZmllZCBxdWFudGl0eSBhbmQgcmF0ZSkuIEZvciBvdGhlcnMsIGl0J3MgcGFydCBvZiB0aGUgdGltaW5nIHNwZWNpZmljYXRpb24gKGUuZy4gZXhlcmNpc2UpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkdXJhdGlvbk1heD86IGZoaXIuRmhpckRlY2ltYWx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1bml0cyBvZiB0aW1lIGZvciB0aGUgZHVyYXRpb24sIGluIFVDVU0gdW5pdHMuXHJcbiAgICovXHJcbiAgcHVibGljIGR1cmF0aW9uVW5pdD86IFVuaXRzT2ZUaW1lQ29kZVR5cGV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBhY3Rpb24gd2l0aGluIHRoZSBzcGVjaWZpZWQgcGVyaW9kLiBJZiBmcmVxdWVuY3lNYXggaXMgcHJlc2VudCwgdGhpcyBlbGVtZW50IGluZGljYXRlcyB0aGUgbG93ZXIgYm91bmQgb2YgdGhlIGFsbG93ZWQgcmFuZ2Ugb2YgdGhlIGZyZXF1ZW5jeS5cclxuICAgKi9cclxuICBwdWJsaWMgZnJlcXVlbmN5PzogZmhpci5GaGlyUG9zaXRpdmVJbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHByZXNlbnQsIGluZGljYXRlcyB0aGF0IHRoZSBmcmVxdWVuY3kgaXMgYSByYW5nZSAtIHNvIHRvIHJlcGVhdCBiZXR3ZWVuIFtmcmVxdWVuY3ldIGFuZCBbZnJlcXVlbmN5TWF4XSB0aW1lcyB3aXRoaW4gdGhlIHBlcmlvZCBvciBwZXJpb2QgcmFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIGZyZXF1ZW5jeU1heD86IGZoaXIuRmhpclBvc2l0aXZlSW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIGR1cmF0aW9uIG9mIHRpbWUgb3ZlciB3aGljaCByZXBldGl0aW9ucyBhcmUgdG8gb2NjdXI7IGUuZy4gdG8gZXhwcmVzcyBcIjMgdGltZXMgcGVyIGRheVwiLCAzIHdvdWxkIGJlIHRoZSBmcmVxdWVuY3kgYW5kIFwiMSBkYXlcIiB3b3VsZCBiZSB0aGUgcGVyaW9kLiBJZiBwZXJpb2RNYXggaXMgcHJlc2VudCwgdGhpcyBlbGVtZW50IGluZGljYXRlcyB0aGUgbG93ZXIgYm91bmQgb2YgdGhlIGFsbG93ZWQgcmFuZ2Ugb2YgdGhlIHBlcmlvZCBsZW5ndGguXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZD86IGZoaXIuRmhpckRlY2ltYWx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHByZXNlbnQsIGluZGljYXRlcyB0aGF0IHRoZSBwZXJpb2QgaXMgYSByYW5nZSBmcm9tIFtwZXJpb2RdIHRvIFtwZXJpb2RNYXhdLCBhbGxvd2luZyBleHByZXNzaW5nIGNvbmNlcHRzIHN1Y2ggYXMgXCJkbyB0aGlzIG9uY2UgZXZlcnkgMy01IGRheXMuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZE1heD86IGZoaXIuRmhpckRlY2ltYWx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1bml0cyBvZiB0aW1lIGZvciB0aGUgcGVyaW9kIGluIFVDVU0gdW5pdHMuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZFVuaXQ/OiBVbml0c09mVGltZUNvZGVUeXBlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBubyBkYXlzIGFyZSBzcGVjaWZpZWQsIHRoZSBhY3Rpb24gaXMgYXNzdW1lZCB0byBoYXBwZW4gZXZlcnkgZGF5IGFzIG90aGVyd2lzZSBzcGVjaWZpZWQuIFRoZSBlbGVtZW50cyBmcmVxdWVuY3kgYW5kIHBlcmlvZCBjYW5ub3QgYmUgdXNlZCBhcyB3ZWxsIGFzIGRheU9mV2Vlay5cclxuICAgKi9cclxuICBwdWJsaWMgZGF5T2ZXZWVrPzogRGF5c09mV2Vla0NvZGVUeXBlW107XHJcbiAgLyoqXHJcbiAgICogV2hlbiB0aW1lIG9mIGRheSBpcyBzcGVjaWZpZWQsIGl0IGlzIGluZmVycmVkIHRoYXQgdGhlIGFjdGlvbiBoYXBwZW5zIGV2ZXJ5IGRheSAoYXMgZmlsdGVyZWQgYnkgZGF5b2ZXZWVrKSBvbiB0aGUgc3BlY2lmaWVkIHRpbWVzLiBUaGUgZWxlbWVudHMgd2hlbiwgZnJlcXVlbmN5IGFuZCBwZXJpb2QgY2Fubm90IGJlIHVzZWQgYXMgd2VsbCBhcyB0aW1lT2ZEYXkuXHJcbiAgICovXHJcbiAgcHVibGljIHRpbWVPZkRheT86IGZoaXIuRmhpclRpbWVbXTtcclxuICAvKipcclxuICAgKiBXaGVuIG1vcmUgdGhhbiBvbmUgZXZlbnQgaXMgbGlzdGVkLCB0aGUgZXZlbnQgaXMgdGllZCB0byB0aGUgdW5pb24gb2YgdGhlIHNwZWNpZmllZCBldmVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIHdoZW4/OiBmaGlyLkZoaXJDb2RlW107XHJcbiAgLyoqXHJcbiAgICogVGhlIG51bWJlciBvZiBtaW51dGVzIGZyb20gdGhlIGV2ZW50LiBJZiB0aGUgZXZlbnQgY29kZSBkb2VzIG5vdCBpbmRpY2F0ZSB3aGV0aGVyIHRoZSBtaW51dGVzIGlzIGJlZm9yZSBvciBhZnRlciB0aGUgZXZlbnQsIHRoZW4gdGhlIG9mZnNldCBpcyBhc3N1bWVkIHRvIGJlIGFmdGVyIHRoZSBldmVudC5cclxuICAgKi9cclxuICBwdWJsaWMgb2Zmc2V0PzogZmhpci5GaGlyVW5zaWduZWRJbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFRpbWluZ1JlcGVhdCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRpbWluZ1JlcGVhdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydib3VuZHMnXSkgeyB0aGlzLmJvdW5kcyA9IHNvdXJjZS5ib3VuZHM7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnYm91bmRzRHVyYXRpb24nXSkgeyB0aGlzLmJvdW5kcyA9IG5ldyBmaGlyLkR1cmF0aW9uKHNvdXJjZS5ib3VuZHNEdXJhdGlvbik7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnYm91bmRzUmFuZ2UnXSkgeyB0aGlzLmJvdW5kcyA9IG5ldyBmaGlyLlJhbmdlKHNvdXJjZS5ib3VuZHNSYW5nZSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnYm91bmRzUGVyaW9kJ10pIHsgdGhpcy5ib3VuZHMgPSBuZXcgZmhpci5QZXJpb2Qoc291cmNlLmJvdW5kc1BlcmlvZCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvdW50J10pIHsgdGhpcy5jb3VudCA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh7dmFsdWU6IHNvdXJjZS5jb3VudH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydjb3VudE1heCddKSB7IHRoaXMuY291bnRNYXggPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiBzb3VyY2UuY291bnRNYXh9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZHVyYXRpb24nXSkgeyB0aGlzLmR1cmF0aW9uID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoe3ZhbHVlOiBzb3VyY2UuZHVyYXRpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZHVyYXRpb25NYXgnXSkgeyB0aGlzLmR1cmF0aW9uTWF4ID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoe3ZhbHVlOiBzb3VyY2UuZHVyYXRpb25NYXh9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZHVyYXRpb25Vbml0J10pIHsgdGhpcy5kdXJhdGlvblVuaXQgPSBzb3VyY2UuZHVyYXRpb25Vbml0OyB9XHJcbiAgICBpZiAoc291cmNlWydmcmVxdWVuY3knXSkgeyB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludCh7dmFsdWU6IHNvdXJjZS5mcmVxdWVuY3l9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZnJlcXVlbmN5TWF4J10pIHsgdGhpcy5mcmVxdWVuY3lNYXggPSBuZXcgZmhpci5GaGlyUG9zaXRpdmVJbnQoe3ZhbHVlOiBzb3VyY2UuZnJlcXVlbmN5TWF4fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZCddKSB7IHRoaXMucGVyaW9kID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoe3ZhbHVlOiBzb3VyY2UucGVyaW9kfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZE1heCddKSB7IHRoaXMucGVyaW9kTWF4ID0gbmV3IGZoaXIuRmhpckRlY2ltYWwoe3ZhbHVlOiBzb3VyY2UucGVyaW9kTWF4fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmlvZFVuaXQnXSkgeyB0aGlzLnBlcmlvZFVuaXQgPSBzb3VyY2UucGVyaW9kVW5pdDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGF5T2ZXZWVrJ10pIHsgdGhpcy5kYXlPZldlZWsgPSBzb3VyY2UuZGF5T2ZXZWVrLm1hcCgoeCkgPT4geCk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRheU9mV2VlayA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd0aW1lT2ZEYXknXSkgeyB0aGlzLnRpbWVPZkRheSA9IHNvdXJjZS50aW1lT2ZEYXkubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyVGltZSh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRpbWVPZkRheSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd3aGVuJ10pIHsgdGhpcy53aGVuID0gc291cmNlLndoZW4ubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyQ29kZSh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLndoZW4gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb2Zmc2V0J10pIHsgdGhpcy5vZmZzZXQgPSBuZXcgZmhpci5GaGlyVW5zaWduZWRJbnQoe3ZhbHVlOiBzb3VyY2Uub2Zmc2V0fSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBkdXJhdGlvblVuaXQgKFRpbWluZy5yZXBlYXQuZHVyYXRpb25Vbml0KVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZHVyYXRpb25Vbml0UmVxdWlyZWRDb2RpbmcoKTpVbml0c09mVGltZUNvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIFVuaXRzT2ZUaW1lQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBwZXJpb2RVbml0IChUaW1pbmcucmVwZWF0LnBlcmlvZFVuaXQpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBwZXJpb2RVbml0UmVxdWlyZWRDb2RpbmcoKTpVbml0c09mVGltZUNvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIFVuaXRzT2ZUaW1lQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBkYXlPZldlZWsgKFRpbWluZy5yZXBlYXQuZGF5T2ZXZWVrKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZGF5T2ZXZWVrUmVxdWlyZWRDb2RpbmcoKTpEYXlzT2ZXZWVrQ29kaW5nVHlwZSB7XHJcbiAgICByZXR1cm4gRGF5c09mV2Vla0NvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3Igd2hlbiAoVGltaW5nLnJlcGVhdC53aGVuKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgd2hlblJlcXVpcmVkQ29kaW5nKCk6RXZlbnRUaW1pbmdDb2RpbmdUeXBlIHtcclxuICAgIHJldHVybiBFdmVudFRpbWluZ0NvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcImNvdW50XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY291bnQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY291bnRNYXhcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jb3VudE1heC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkdXJhdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmR1cmF0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImR1cmF0aW9uTWF4XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZHVyYXRpb25NYXguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZnJlcXVlbmN5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZnJlcXVlbmN5LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImZyZXF1ZW5jeU1heFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmZyZXF1ZW5jeU1heC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwZXJpb2RcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wZXJpb2QuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicGVyaW9kTWF4XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucGVyaW9kTWF4LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInRpbWVPZkRheVwiXSkgeyB0aGlzLnRpbWVPZkRheS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wid2hlblwiXSkgeyB0aGlzLndoZW4uZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcIm9mZnNldFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm9mZnNldC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFRpbWluZyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUaW1pbmdBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHNwZWNpZmljIHRpbWVzIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cclxuICAgKi9cclxuICBldmVudD86IGZoaXIuRmhpckRhdGVUaW1lW118c3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc2V0IG9mIHJ1bGVzIHRoYXQgZGVzY3JpYmUgd2hlbiB0aGUgZXZlbnQgaXMgc2NoZWR1bGVkLlxyXG4gICAqL1xyXG4gIHJlcGVhdD86IGZoaXIuVGltaW5nUmVwZWF0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQklEIGV0Yy4gYXJlIGRlZmluZWQgYXMgJ2F0IGluc3RpdHV0aW9uYWxseSBzcGVjaWZpZWQgdGltZXMnLiBGb3IgZXhhbXBsZSwgYW4gaW5zdGl0dXRpb24gbWF5IGNob29zZSB0aGF0IEJJRCBpcyBcImFsd2F5cyBhdCA3YW0gYW5kIDZwbVwiLiAgSWYgaXQgaXMgaW5hcHByb3ByaWF0ZSBmb3IgdGhpcyBjaG9pY2UgdG8gYmUgbWFkZSwgdGhlIGNvZGUgQklEIHNob3VsZCBub3QgYmUgdXNlZC4gSW5zdGVhZCwgYSBkaXN0aW5jdCBvcmdhbml6YXRpb24tc3BlY2lmaWMgY29kZSBzaG91bGQgYmUgdXNlZCBpbiBwbGFjZSBvZiB0aGUgSEw3LWRlZmluZWQgQklEIGNvZGUgYW5kL29yIGEgc3RydWN0dXJlZCByZXByZXNlbnRhdGlvbiBzaG91bGQgYmUgdXNlZCAoaW4gdGhpcyBjYXNlLCBzcGVjaWZ5aW5nIHRoZSB0d28gZXZlbnQgdGltZXMpLlxyXG4gICAqL1xyXG4gIGNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogU3BlY2lmaWVzIGFuIGV2ZW50IHRoYXQgbWF5IG9jY3VyIG11bHRpcGxlIHRpbWVzLiBUaW1pbmcgc2NoZWR1bGVzIGFyZSB1c2VkIHRvIHJlY29yZCB3aGVuIHRoaW5ncyBhcmUgcGxhbm5lZCwgZXhwZWN0ZWQgb3IgcmVxdWVzdGVkIHRvIG9jY3VyLiBUaGUgbW9zdCBjb21tb24gdXNhZ2UgaXMgaW4gZG9zYWdlIGluc3RydWN0aW9ucyBmb3IgbWVkaWNhdGlvbnMuIFRoZXkgYXJlIGFsc28gdXNlZCB3aGVuIHBsYW5uaW5nIGNhcmUgb2YgdmFyaW91cyBraW5kcywgYW5kIG1heSBiZSB1c2VkIGZvciByZXBvcnRpbmcgdGhlIHNjaGVkdWxlIHRvIHdoaWNoIHBhc3QgcmVndWxhciBhY3Rpdml0aWVzIHdlcmUgY2FycmllZCBvdXQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGltaW5nIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnVGltaW5nJztcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHNwZWNpZmljIHRpbWVzIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cclxuICAgKi9cclxuICBwdWJsaWMgZXZlbnQ/OiBmaGlyLkZoaXJEYXRlVGltZVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgc2V0IG9mIHJ1bGVzIHRoYXQgZGVzY3JpYmUgd2hlbiB0aGUgZXZlbnQgaXMgc2NoZWR1bGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXBlYXQ/OiBmaGlyLlRpbWluZ1JlcGVhdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQklEIGV0Yy4gYXJlIGRlZmluZWQgYXMgJ2F0IGluc3RpdHV0aW9uYWxseSBzcGVjaWZpZWQgdGltZXMnLiBGb3IgZXhhbXBsZSwgYW4gaW5zdGl0dXRpb24gbWF5IGNob29zZSB0aGF0IEJJRCBpcyBcImFsd2F5cyBhdCA3YW0gYW5kIDZwbVwiLiAgSWYgaXQgaXMgaW5hcHByb3ByaWF0ZSBmb3IgdGhpcyBjaG9pY2UgdG8gYmUgbWFkZSwgdGhlIGNvZGUgQklEIHNob3VsZCBub3QgYmUgdXNlZC4gSW5zdGVhZCwgYSBkaXN0aW5jdCBvcmdhbml6YXRpb24tc3BlY2lmaWMgY29kZSBzaG91bGQgYmUgdXNlZCBpbiBwbGFjZSBvZiB0aGUgSEw3LWRlZmluZWQgQklEIGNvZGUgYW5kL29yIGEgc3RydWN0dXJlZCByZXByZXNlbnRhdGlvbiBzaG91bGQgYmUgdXNlZCAoaW4gdGhpcyBjYXNlLCBzcGVjaWZ5aW5nIHRoZSB0d28gZXZlbnQgdGltZXMpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2RlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFRpbWluZyAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFRpbWluZ0FyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydldmVudCddKSB7IHRoaXMuZXZlbnQgPSBzb3VyY2UuZXZlbnQubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5ldmVudCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXBlYXQnXSkgeyB0aGlzLnJlcGVhdCA9IG5ldyBmaGlyLlRpbWluZ1JlcGVhdChzb3VyY2UucmVwZWF0KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29kZSddKSB7IHRoaXMuY29kZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY29kZSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUHJlZmVycmVkLWJvdW5kIFZhbHVlIFNldCBmb3IgY29kZSAoVGltaW5nLmNvZGUpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjb2RlUHJlZmVycmVkQ29kaW5nKCk6VGltaW5nQWJicmV2aWF0aW9uQ29kaW5nVHlwZSB7XHJcbiAgICByZXR1cm4gVGltaW5nQWJicmV2aWF0aW9uQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1wiZXZlbnRcIl0pIHsgdGhpcy5ldmVudC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicmVwZWF0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucmVwZWF0LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvZGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jb2RlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=