/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MeasurePopulationCodings } from '../fhirValueSets/MeasurePopulationCodings.js';
import { MeasureReportStatusCodings } from '../fhirValueSets/MeasureReportStatusCodings.js';
import { MeasureReportTypeCodings } from '../fhirValueSets/MeasureReportTypeCodings.js';
import { MeasureImprovementNotationCodings } from '../fhirValueSets/MeasureImprovementNotationCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirInteger } from './FhirInteger.js';
import { Reference } from './Reference.js';
import { Quantity } from './Quantity.js';
import { Identifier } from './Identifier.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';

// <auto-generated/>
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
var MeasureReportGroupPopulation = /** @class */ (function (_super) {
    __extends(MeasureReportGroupPopulation, _super);
    /**
     * Default constructor for MeasureReportGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    function MeasureReportGroupPopulation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['count']) {
            _this.count = new FhirInteger({ value: source.count });
        }
        if (source['subjectResults']) {
            _this.subjectResults = new Reference(source.subjectResults);
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for code (MeasureReport.group.population.code)
     */
    MeasureReportGroupPopulation.codeExtensibleCoding = function () {
        return MeasurePopulationCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureReportGroupPopulation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["count"]) {
            (_b = outcome.issue).push.apply(_b, this.count.doModelValidation().issue);
        }
        if (this["subjectResults"]) {
            (_c = outcome.issue).push.apply(_c, this.subjectResults.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureReportGroupPopulation._fts_dataType = 'MeasureReportGroupPopulation';
    return MeasureReportGroupPopulation;
}(BackboneElement));
/**
 * A stratifier component value.
 */
var MeasureReportGroupStratifierStratumComponent = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifierStratumComponent, _super);
    /**
     * Default constructor for MeasureReportGroupStratifierStratumComponent - initializes any required elements to null if a value is not provided.
     */
    function MeasureReportGroupStratifierStratumComponent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['value']) {
            _this.value = new CodeableConcept(source.value);
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureReportGroupStratifierStratumComponent.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MeasureReport.group.stratifier.stratum.component.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.CodeableConcept fhir: MeasureReport.group.stratifier.stratum.component.value:CodeableConcept', }));
        }
        if (this["value"]) {
            (_b = outcome.issue).push.apply(_b, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureReportGroupStratifierStratumComponent._fts_dataType = 'MeasureReportGroupStratifierStratumComponent';
    return MeasureReportGroupStratifierStratumComponent;
}(BackboneElement));
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
var MeasureReportGroupStratifierStratumPopulation = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifierStratumPopulation, _super);
    /**
     * Default constructor for MeasureReportGroupStratifierStratumPopulation - initializes any required elements to null if a value is not provided.
     */
    function MeasureReportGroupStratifierStratumPopulation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['count']) {
            _this.count = new FhirInteger({ value: source.count });
        }
        if (source['subjectResults']) {
            _this.subjectResults = new Reference(source.subjectResults);
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for code (MeasureReport.group.stratifier.stratum.population.code)
     */
    MeasureReportGroupStratifierStratumPopulation.codeExtensibleCoding = function () {
        return MeasurePopulationCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureReportGroupStratifierStratumPopulation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["count"]) {
            (_b = outcome.issue).push.apply(_b, this.count.doModelValidation().issue);
        }
        if (this["subjectResults"]) {
            (_c = outcome.issue).push.apply(_c, this.subjectResults.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureReportGroupStratifierStratumPopulation._fts_dataType = 'MeasureReportGroupStratifierStratumPopulation';
    return MeasureReportGroupStratifierStratumPopulation;
}(BackboneElement));
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
var MeasureReportGroupStratifierStratum = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifierStratum, _super);
    /**
     * Default constructor for MeasureReportGroupStratifierStratum - initializes any required elements to null if a value is not provided.
     */
    function MeasureReportGroupStratifierStratum(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['value']) {
            _this.value = new CodeableConcept(source.value);
        }
        if (source['component']) {
            _this.component = source.component.map(function (x) { return new MeasureReportGroupStratifierStratumComponent(x); });
        }
        else {
            _this.component = [];
        }
        if (source['population']) {
            _this.population = source.population.map(function (x) { return new MeasureReportGroupStratifierStratumPopulation(x); });
        }
        else {
            _this.population = [];
        }
        if (source['measureScore']) {
            _this.measureScore = new Quantity(source.measureScore);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureReportGroupStratifierStratum.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["value"]) {
            (_a = outcome.issue).push.apply(_a, this.value.doModelValidation().issue);
        }
        if (this["component"]) {
            this.component.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["population"]) {
            this.population.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["measureScore"]) {
            (_b = outcome.issue).push.apply(_b, this.measureScore.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureReportGroupStratifierStratum._fts_dataType = 'MeasureReportGroupStratifierStratum';
    return MeasureReportGroupStratifierStratum;
}(BackboneElement));
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
var MeasureReportGroupStratifier = /** @class */ (function (_super) {
    __extends(MeasureReportGroupStratifier, _super);
    /**
     * Default constructor for MeasureReportGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    function MeasureReportGroupStratifier(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = source.code.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.code = [];
        }
        if (source['stratum']) {
            _this.stratum = source.stratum.map(function (x) { return new MeasureReportGroupStratifierStratum(x); });
        }
        else {
            _this.stratum = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureReportGroupStratifier.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            this.code.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["stratum"]) {
            this.stratum.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureReportGroupStratifier._fts_dataType = 'MeasureReportGroupStratifier';
    return MeasureReportGroupStratifier;
}(BackboneElement));
/**
 * The results of the calculation, one for each population group in the measure.
 */
var MeasureReportGroup = /** @class */ (function (_super) {
    __extends(MeasureReportGroup, _super);
    /**
     * Default constructor for MeasureReportGroup - initializes any required elements to null if a value is not provided.
     */
    function MeasureReportGroup(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['population']) {
            _this.population = source.population.map(function (x) { return new MeasureReportGroupPopulation(x); });
        }
        else {
            _this.population = [];
        }
        if (source['measureScore']) {
            _this.measureScore = new Quantity(source.measureScore);
        }
        if (source['stratifier']) {
            _this.stratifier = source.stratifier.map(function (x) { return new MeasureReportGroupStratifier(x); });
        }
        else {
            _this.stratifier = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureReportGroup.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["population"]) {
            this.population.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["measureScore"]) {
            (_b = outcome.issue).push.apply(_b, this.measureScore.doModelValidation().issue);
        }
        if (this["stratifier"]) {
            this.stratifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureReportGroup._fts_dataType = 'MeasureReportGroup';
    return MeasureReportGroup;
}(BackboneElement));
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
var MeasureReport = /** @class */ (function (_super) {
    __extends(MeasureReport, _super);
    /**
     * Default constructor for MeasureReport - initializes any required elements to null if a value is not provided.
     */
    function MeasureReport(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MeasureReport';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['measure']) {
            _this.measure = new FhirCanonical({ value: source.measure });
        }
        else {
            _this.measure = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['reporter']) {
            _this.reporter = new Reference(source.reporter);
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        else {
            _this.period = null;
        }
        if (source['improvementNotation']) {
            _this.improvementNotation = new CodeableConcept(source.improvementNotation);
        }
        if (source['group']) {
            _this.group = source.group.map(function (x) { return new MeasureReportGroup(x); });
        }
        else {
            _this.group = [];
        }
        if (source['evaluatedResource']) {
            _this.evaluatedResource = source.evaluatedResource.map(function (x) { return new Reference(x); });
        }
        else {
            _this.evaluatedResource = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (MeasureReport.status)
     */
    MeasureReport.statusRequiredCoding = function () {
        return MeasureReportStatusCodings;
    };
    /**
     * Required-bound Value Set for type (MeasureReport.type)
     */
    MeasureReport.typeRequiredCoding = function () {
        return MeasureReportTypeCodings;
    };
    /**
     * Required-bound Value Set for improvementNotation (MeasureReport.improvementNotation)
     */
    MeasureReport.improvementNotationRequiredCoding = function () {
        return MeasureImprovementNotationCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MeasureReport.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MeasureReport" fhir: MeasureReport.resourceType:"MeasureReport"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:MeasureReportStatusCodeType fhir: MeasureReport.status:code', }));
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:MeasureReportTypeCodeType fhir: MeasureReport.type:code', }));
        }
        if (!this['measure']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property measure:fhir.FhirCanonical fhir: MeasureReport.measure:canonical', }));
        }
        if (this["measure"]) {
            (_a = outcome.issue).push.apply(_a, this.measure.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["date"]) {
            (_c = outcome.issue).push.apply(_c, this.date.doModelValidation().issue);
        }
        if (this["reporter"]) {
            (_d = outcome.issue).push.apply(_d, this.reporter.doModelValidation().issue);
        }
        if (!this['period']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property period:fhir.Period fhir: MeasureReport.period:Period', }));
        }
        if (this["period"]) {
            (_e = outcome.issue).push.apply(_e, this.period.doModelValidation().issue);
        }
        if (this["improvementNotation"]) {
            (_f = outcome.issue).push.apply(_f, this.improvementNotation.doModelValidation().issue);
        }
        if (this["group"]) {
            this.group.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["evaluatedResource"]) {
            this.evaluatedResource.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MeasureReport._fts_dataType = 'MeasureReport';
    return MeasureReport;
}(DomainResource));

export { MeasureReport, MeasureReportGroup, MeasureReportGroupPopulation, MeasureReportGroupStratifier, MeasureReportGroupStratifierStratum, MeasureReportGroupStratifierStratumComponent, MeasureReportGroupStratifierStratumPopulation };
//# sourceMappingURL=MeasureReport.js.map
