// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MeasureReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { MeasureReportStatusVsValidation } from '../fhirValueSets/MeasureReportStatusVsValidation.js';
// @ts-ignore
import { MeasureReportTypeVsValidation } from '../fhirValueSets/MeasureReportTypeVsValidation.js';
// @ts-ignore
import { MeasureImprovementNotationVsValidation } from '../fhirValueSets/MeasureImprovementNotationVsValidation.js';
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export class MeasureReportGroupPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['count'] !== undefined) {
            this.count = new fhir.FhirInteger({ value: source.count }, options);
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirInteger(source._count, options);
            }
        }
        if (source['subjectResults']) {
            this.subjectResults = new fhir.Reference(source.subjectResults, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MeasureReport.group.population';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('count', exp));
        iss.push(...this.vOS('subjectResults', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupPopulation._fts_dataType = 'MeasureReportGroupPopulation';
/**
 * A stratifier component value.
 */
export class MeasureReportGroupStratifierStratumComponent extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = new fhir.CodeableConcept(source.value, options);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MeasureReport.group.stratifier.stratum.component';
        }
        iss.push(...this.vRS('code', exp));
        iss.push(...this.vRS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifierStratumComponent._fts_dataType = 'MeasureReportGroupStratifierStratumComponent';
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export class MeasureReportGroupStratifierStratumPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['count'] !== undefined) {
            this.count = new fhir.FhirInteger({ value: source.count }, options);
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirInteger(source._count, options);
            }
        }
        if (source['subjectResults']) {
            this.subjectResults = new fhir.Reference(source.subjectResults, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MeasureReport.group.stratifier.stratum.population';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOS('count', exp));
        iss.push(...this.vOS('subjectResults', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifierStratumPopulation._fts_dataType = 'MeasureReportGroupStratifierStratumPopulation';
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export class MeasureReportGroupStratifierStratum extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratum - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.CodeableConcept(source.value, options);
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.MeasureReportGroupStratifierStratumComponent(x, options));
        }
        else {
            this.component = [];
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureReportGroupStratifierStratumPopulation(x, options));
        }
        else {
            this.population = [];
        }
        if (source['measureScore']) {
            this.measureScore = new fhir.Quantity(source.measureScore, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MeasureReport.group.stratifier.stratum';
        }
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOA('component', exp));
        iss.push(...this.vOA('population', exp));
        iss.push(...this.vOS('measureScore', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifierStratum._fts_dataType = 'MeasureReportGroupStratifierStratum';
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export class MeasureReportGroupStratifier extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.code = [];
        }
        if (source['stratum']) {
            this.stratum = source.stratum.map((x) => new fhir.MeasureReportGroupStratifierStratum(x, options));
        }
        else {
            this.stratum = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MeasureReport.group.stratifier';
        }
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOA('stratum', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifier._fts_dataType = 'MeasureReportGroupStratifier';
/**
 * The results of the calculation, one for each population group in the measure.
 */
export class MeasureReportGroup extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureReportGroupPopulation(x, options));
        }
        else {
            this.population = [];
        }
        if (source['measureScore']) {
            this.measureScore = new fhir.Quantity(source.measureScore, options);
        }
        if (source['stratifier']) {
            this.stratifier = source.stratifier.map((x) => new fhir.MeasureReportGroupStratifier(x, options));
        }
        else {
            this.stratifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MeasureReport.group';
        }
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOA('population', exp));
        iss.push(...this.vOS('measureScore', exp));
        iss.push(...this.vOA('stratifier', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroup._fts_dataType = 'MeasureReportGroup';
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export class MeasureReport extends fhir.DomainResource {
    /**
     * Default constructor for MeasureReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MeasureReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['type'] !== undefined) {
            this.type = new fhir.FhirCode({ value: source.type }, options);
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type, options);
            }
        }
        if (source['measure'] !== undefined) {
            this.measure = new fhir.FhirCanonical({ value: source.measure }, options);
        }
        else {
            this.measure = null;
        }
        if (source['_measure']) {
            if (this.measure) {
                this.measure.addExtendedProperties(source._measure);
            }
            else {
                this.measure = new fhir.FhirCanonical(source._measure, options);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['reporter']) {
            this.reporter = new fhir.Reference(source.reporter, options);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        else {
            this.period = null;
        }
        if (source['improvementNotation']) {
            this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation, options);
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.MeasureReportGroup(x, options));
        }
        else {
            this.group = [];
        }
        if (source['evaluatedResource']) {
            this.evaluatedResource = source.evaluatedResource.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.evaluatedResource = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MeasureReport';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'MeasureReportStatus', MeasureReportStatusVsValidation, 'r'));
        iss.push(...this.vRSV('type', exp, 'MeasureReportType', MeasureReportTypeVsValidation, 'r'));
        iss.push(...this.vRS('measure', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('reporter', exp));
        iss.push(...this.vRS('period', exp));
        iss.push(...this.vOSV('improvementNotation', exp, 'MeasureImprovementNotation', MeasureImprovementNotationVsValidation, 'r'));
        iss.push(...this.vOA('group', exp));
        iss.push(...this.vOA('evaluatedResource', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReport._fts_dataType = 'MeasureReport';
//# sourceMappingURL=data:application/json;base64,