// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MeasureReport
import * as fhir from '../fhir.js';
// @ts-ignore
import { MeasurePopulationCodings, } from '../fhirValueSets/MeasurePopulationCodings.js';
// @ts-ignore
import { MeasureReportStatusCodes } from '../fhirValueSets/MeasureReportStatusCodes.js';
// @ts-ignore
import { MeasureReportTypeCodes } from '../fhirValueSets/MeasureReportTypeCodes.js';
// @ts-ignore
import { MeasureImprovementNotationCodings, } from '../fhirValueSets/MeasureImprovementNotationCodings.js';
// @ts-ignore
import { MeasureImprovementNotationCodes } from '../fhirValueSets/MeasureImprovementNotationCodes.js';
/**
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export class MeasureReportGroupPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['count']) {
            this.count = new fhir.FhirInteger({ value: source.count });
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirInteger(source._count);
            }
        }
        if (source['subjectResults']) {
            this.subjectResults = new fhir.Reference(source.subjectResults);
        }
    }
    /**
     * Extensible-bound Value Set for code (MeasureReport.group.population.code)
     */
    static get codeExtensibleCodings() {
        return MeasurePopulationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MeasureReport.group.population';
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["count"]) {
            issues.push(...this.count.doModelValidation(expression + '.count'));
        }
        if (this["subjectResults"]) {
            issues.push(...this.subjectResults.doModelValidation(expression + '.subjectResults'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupPopulation._fts_dataType = 'MeasureReportGroupPopulation';
/**
 * A stratifier component value.
 */
export class MeasureReportGroupStratifierStratumComponent extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = new fhir.CodeableConcept(source.value);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MeasureReport.group.stratifier.stratum.component';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: MeasureReport.group.stratifier.stratum.component.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: MeasureReport.group.stratifier.stratum.component.value:CodeableConcept', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifierStratumComponent._fts_dataType = 'MeasureReportGroupStratifierStratumComponent';
/**
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export class MeasureReportGroupStratifierStratumPopulation extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratumPopulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['count']) {
            this.count = new fhir.FhirInteger({ value: source.count });
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirInteger(source._count);
            }
        }
        if (source['subjectResults']) {
            this.subjectResults = new fhir.Reference(source.subjectResults);
        }
    }
    /**
     * Extensible-bound Value Set for code (MeasureReport.group.stratifier.stratum.population.code)
     */
    static get codeExtensibleCodings() {
        return MeasurePopulationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MeasureReport.group.stratifier.stratum.population';
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["count"]) {
            issues.push(...this.count.doModelValidation(expression + '.count'));
        }
        if (this["subjectResults"]) {
            issues.push(...this.subjectResults.doModelValidation(expression + '.subjectResults'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifierStratumPopulation._fts_dataType = 'MeasureReportGroupStratifierStratumPopulation';
/**
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export class MeasureReportGroupStratifierStratum extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifierStratum - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = new fhir.CodeableConcept(source.value);
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.MeasureReportGroupStratifierStratumComponent(x));
        }
        else {
            this.component = [];
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureReportGroupStratifierStratumPopulation(x));
        }
        else {
            this.population = [];
        }
        if (source['measureScore']) {
            this.measureScore = new fhir.Quantity(source.measureScore);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MeasureReport.group.stratifier.stratum';
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        if (this["component"]) {
            this.component.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.component[${i}]`)); });
        }
        if (this["population"]) {
            this.population.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.population[${i}]`)); });
        }
        if (this["measureScore"]) {
            issues.push(...this.measureScore.doModelValidation(expression + '.measureScore'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifierStratum._fts_dataType = 'MeasureReportGroupStratifierStratum';
/**
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export class MeasureReportGroupStratifier extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroupStratifier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['stratum']) {
            this.stratum = source.stratum.map((x) => new fhir.MeasureReportGroupStratifierStratum(x));
        }
        else {
            this.stratum = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MeasureReport.group.stratifier';
        }
        if (this["code"]) {
            this.code.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.code[${i}]`)); });
        }
        if (this["stratum"]) {
            this.stratum.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.stratum[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroupStratifier._fts_dataType = 'MeasureReportGroupStratifier';
/**
 * The results of the calculation, one for each population group in the measure.
 */
export class MeasureReportGroup extends fhir.BackboneElement {
    /**
     * Default constructor for MeasureReportGroup - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.MeasureReportGroupPopulation(x));
        }
        else {
            this.population = [];
        }
        if (source['measureScore']) {
            this.measureScore = new fhir.Quantity(source.measureScore);
        }
        if (source['stratifier']) {
            this.stratifier = source.stratifier.map((x) => new fhir.MeasureReportGroupStratifier(x));
        }
        else {
            this.stratifier = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MeasureReport.group';
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["population"]) {
            this.population.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.population[${i}]`)); });
        }
        if (this["measureScore"]) {
            issues.push(...this.measureScore.doModelValidation(expression + '.measureScore'));
        }
        if (this["stratifier"]) {
            this.stratifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.stratifier[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReportGroup._fts_dataType = 'MeasureReportGroup';
/**
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export class MeasureReport extends fhir.DomainResource {
    /**
     * Default constructor for MeasureReport - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MeasureReport';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['measure']) {
            this.measure = new fhir.FhirCanonical({ value: source.measure });
        }
        else {
            this.measure = null;
        }
        if (source['_measure']) {
            if (this.measure) {
                this.measure.addExtendedProperties(source._measure);
            }
            else {
                this.measure = new fhir.FhirCanonical(source._measure);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['reporter']) {
            this.reporter = new fhir.Reference(source.reporter);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        else {
            this.period = null;
        }
        if (source['improvementNotation']) {
            this.improvementNotation = new fhir.CodeableConcept(source.improvementNotation);
        }
        if (source['group']) {
            this.group = source.group.map((x) => new fhir.MeasureReportGroup(x));
        }
        else {
            this.group = [];
        }
        if (source['evaluatedResource']) {
            this.evaluatedResource = source.evaluatedResource.map((x) => new fhir.Reference(x));
        }
        else {
            this.evaluatedResource = [];
        }
    }
    /**
     * Required-bound Value Set for status (MeasureReport.status)
     */
    static get statusRequiredCodes() {
        return MeasureReportStatusCodes;
    }
    /**
     * Required-bound Value Set for type (MeasureReport.type)
     */
    static get typeRequiredCodes() {
        return MeasureReportTypeCodes;
    }
    /**
     * Required-bound Value Set for improvementNotation (MeasureReport.improvementNotation)
     */
    static get improvementNotationRequiredCodes() {
        return MeasureImprovementNotationCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MeasureReport';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: MeasureReport.resourceType:"MeasureReport"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: MeasureReport.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(MeasureReportStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (MeasureReport.status) of type code is missing code for Required binding to: MeasureReportStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: MeasureReport.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(MeasureReportTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'type (MeasureReport.type) of type code is missing code for Required binding to: MeasureReportType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['measure']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property measure fhir: MeasureReport.measure:canonical', expression: [expression] });
        }
        if (this["measure"]) {
            issues.push(...this.measure.doModelValidation(expression + '.measure'));
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation(expression + '.subject'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["reporter"]) {
            issues.push(...this.reporter.doModelValidation(expression + '.reporter'));
        }
        if (!this['period']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property period fhir: MeasureReport.period:Period', expression: [expression] });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        if (this['improvementNotation'] && (!this.improvementNotation.hasCodingFromObject(MeasureImprovementNotationCodings))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'improvementNotation (MeasureReport.improvementNotation) of type CodeableConcept is missing code for Required binding to: MeasureImprovementNotation', expression: [expression] });
        }
        if (this["improvementNotation"]) {
            issues.push(...this.improvementNotation.doModelValidation(expression + '.improvementNotation'));
        }
        if (this["group"]) {
            this.group.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.group[${i}]`)); });
        }
        if (this["evaluatedResource"]) {
            this.evaluatedResource.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.evaluatedResource[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MeasureReport._fts_dataType = 'MeasureReport';
//# sourceMappingURL=data:application/json;base64,