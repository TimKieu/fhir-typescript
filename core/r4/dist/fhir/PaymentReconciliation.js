/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { NoteTypeCodings } from '../fhirValueSets/NoteTypeCodings.js';
import { FmStatusCodings } from '../fhirValueSets/FmStatusCodings.js';
import { RemittanceOutcomeCodings } from '../fhirValueSets/RemittanceOutcomeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirDate } from './FhirDate.js';
import { Money } from './Money.js';
import { FhirString } from './FhirString.js';
import { Period } from './Period.js';
import { FhirDateTime } from './FhirDateTime.js';

// <auto-generated/>
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
var PaymentReconciliationDetail = /** @class */ (function (_super) {
    __extends(PaymentReconciliationDetail, _super);
    /**
     * Default constructor for PaymentReconciliationDetail - initializes any required elements to null if a value is not provided.
     */
    function PaymentReconciliationDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['predecessor']) {
            _this.predecessor = new Identifier(source.predecessor);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['request']) {
            _this.request = new Reference(source.request);
        }
        if (source['submitter']) {
            _this.submitter = new Reference(source.submitter);
        }
        if (source['response']) {
            _this.response = new Reference(source.response);
        }
        if (source['date']) {
            _this.date = new FhirDate({ value: source.date });
        }
        if (source['responsible']) {
            _this.responsible = new Reference(source.responsible);
        }
        if (source['payee']) {
            _this.payee = new Reference(source.payee);
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PaymentReconciliationDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["predecessor"]) {
            (_b = outcome.issue).push.apply(_b, this.predecessor.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: PaymentReconciliation.detail.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_c = outcome.issue).push.apply(_c, this.type.doModelValidation().issue);
        }
        if (this["request"]) {
            (_d = outcome.issue).push.apply(_d, this.request.doModelValidation().issue);
        }
        if (this["submitter"]) {
            (_e = outcome.issue).push.apply(_e, this.submitter.doModelValidation().issue);
        }
        if (this["response"]) {
            (_f = outcome.issue).push.apply(_f, this.response.doModelValidation().issue);
        }
        if (this["date"]) {
            (_g = outcome.issue).push.apply(_g, this.date.doModelValidation().issue);
        }
        if (this["responsible"]) {
            (_h = outcome.issue).push.apply(_h, this.responsible.doModelValidation().issue);
        }
        if (this["payee"]) {
            (_j = outcome.issue).push.apply(_j, this.payee.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_k = outcome.issue).push.apply(_k, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PaymentReconciliationDetail._fts_dataType = 'PaymentReconciliationDetail';
    return PaymentReconciliationDetail;
}(BackboneElement));
/**
 * A note that describes or explains the processing in a human readable form.
 */
var PaymentReconciliationProcessNote = /** @class */ (function (_super) {
    __extends(PaymentReconciliationProcessNote, _super);
    /**
     * Default constructor for PaymentReconciliationProcessNote - initializes any required elements to null if a value is not provided.
     */
    function PaymentReconciliationProcessNote(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (PaymentReconciliation.processNote.type)
     */
    PaymentReconciliationProcessNote.typeRequiredCoding = function () {
        return NoteTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PaymentReconciliationProcessNote.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["text"]) {
            (_a = outcome.issue).push.apply(_a, this.text.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PaymentReconciliationProcessNote._fts_dataType = 'PaymentReconciliationProcessNote';
    return PaymentReconciliationProcessNote;
}(BackboneElement));
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
var PaymentReconciliation = /** @class */ (function (_super) {
    __extends(PaymentReconciliation, _super);
    /**
     * Default constructor for PaymentReconciliation - initializes any required elements to null if a value is not provided.
     */
    function PaymentReconciliation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'PaymentReconciliation';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['created']) {
            _this.created = new FhirDateTime({ value: source.created });
        }
        else {
            _this.created = null;
        }
        if (source['paymentIssuer']) {
            _this.paymentIssuer = new Reference(source.paymentIssuer);
        }
        if (source['request']) {
            _this.request = new Reference(source.request);
        }
        if (source['requestor']) {
            _this.requestor = new Reference(source.requestor);
        }
        if (source['outcome']) {
            _this.outcome = source.outcome;
        }
        if (source['disposition']) {
            _this.disposition = new FhirString({ value: source.disposition });
        }
        if (source['paymentDate']) {
            _this.paymentDate = new FhirDate({ value: source.paymentDate });
        }
        else {
            _this.paymentDate = null;
        }
        if (source['paymentAmount']) {
            _this.paymentAmount = new Money(source.paymentAmount);
        }
        else {
            _this.paymentAmount = null;
        }
        if (source['paymentIdentifier']) {
            _this.paymentIdentifier = new Identifier(source.paymentIdentifier);
        }
        if (source['detail']) {
            _this.detail = source.detail.map(function (x) { return new PaymentReconciliationDetail(x); });
        }
        else {
            _this.detail = [];
        }
        if (source['formCode']) {
            _this.formCode = new CodeableConcept(source.formCode);
        }
        if (source['processNote']) {
            _this.processNote = source.processNote.map(function (x) { return new PaymentReconciliationProcessNote(x); });
        }
        else {
            _this.processNote = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (PaymentReconciliation.status)
     */
    PaymentReconciliation.statusRequiredCoding = function () {
        return FmStatusCodings;
    };
    /**
     * Required-bound Value Set for outcome (PaymentReconciliation.outcome)
     */
    PaymentReconciliation.outcomeRequiredCoding = function () {
        return RemittanceOutcomeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PaymentReconciliation.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"PaymentReconciliation" fhir: PaymentReconciliation.resourceType:"PaymentReconciliation"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:FmStatusCodeType fhir: PaymentReconciliation.status:code', }));
        }
        if (this["period"]) {
            (_a = outcome.issue).push.apply(_a, this.period.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: PaymentReconciliation.created:dateTime', }));
        }
        if (this["created"]) {
            (_b = outcome.issue).push.apply(_b, this.created.doModelValidation().issue);
        }
        if (this["paymentIssuer"]) {
            (_c = outcome.issue).push.apply(_c, this.paymentIssuer.doModelValidation().issue);
        }
        if (this["request"]) {
            (_d = outcome.issue).push.apply(_d, this.request.doModelValidation().issue);
        }
        if (this["requestor"]) {
            (_e = outcome.issue).push.apply(_e, this.requestor.doModelValidation().issue);
        }
        if (this["disposition"]) {
            (_f = outcome.issue).push.apply(_f, this.disposition.doModelValidation().issue);
        }
        if (!this['paymentDate']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property paymentDate:fhir.FhirDate fhir: PaymentReconciliation.paymentDate:date', }));
        }
        if (this["paymentDate"]) {
            (_g = outcome.issue).push.apply(_g, this.paymentDate.doModelValidation().issue);
        }
        if (!this['paymentAmount']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property paymentAmount:fhir.Money fhir: PaymentReconciliation.paymentAmount:Money', }));
        }
        if (this["paymentAmount"]) {
            (_h = outcome.issue).push.apply(_h, this.paymentAmount.doModelValidation().issue);
        }
        if (this["paymentIdentifier"]) {
            (_j = outcome.issue).push.apply(_j, this.paymentIdentifier.doModelValidation().issue);
        }
        if (this["detail"]) {
            this.detail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["formCode"]) {
            (_k = outcome.issue).push.apply(_k, this.formCode.doModelValidation().issue);
        }
        if (this["processNote"]) {
            this.processNote.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PaymentReconciliation._fts_dataType = 'PaymentReconciliation';
    return PaymentReconciliation;
}(DomainResource));

export { PaymentReconciliation, PaymentReconciliationDetail, PaymentReconciliationProcessNote };
//# sourceMappingURL=PaymentReconciliation.js.map
