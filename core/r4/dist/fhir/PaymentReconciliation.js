// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentReconciliation
import * as fhir from '../fhir.js';
// @ts-ignore
import { NoteTypeCodes } from '../fhirValueSets/NoteTypeCodes.js';
// @ts-ignore
import { FmStatusCodes } from '../fhirValueSets/FmStatusCodes.js';
// @ts-ignore
import { RemittanceOutcomeCodes } from '../fhirValueSets/RemittanceOutcomeCodes.js';
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
export class PaymentReconciliationDetail extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['predecessor']) {
            this.predecessor = new fhir.Identifier(source.predecessor);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['submitter']) {
            this.submitter = new fhir.Reference(source.submitter);
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['payee']) {
            this.payee = new fhir.Reference(source.payee);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["predecessor"]) {
            issues.push(...this.predecessor.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: PaymentReconciliation.detail.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["request"]) {
            issues.push(...this.request.doModelValidation());
        }
        if (this["submitter"]) {
            issues.push(...this.submitter.doModelValidation());
        }
        if (this["response"]) {
            issues.push(...this.response.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["responsible"]) {
            issues.push(...this.responsible.doModelValidation());
        }
        if (this["payee"]) {
            issues.push(...this.payee.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliationDetail._fts_dataType = 'PaymentReconciliationDetail';
/**
 * A note that describes or explains the processing in a human readable form.
 */
export class PaymentReconciliationProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
    }
    /**
     * Required-bound Value Set for type (PaymentReconciliation.processNote.type)
     */
    static get typeRequiredCodes() {
        return NoteTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['type'] && (!Object.values(NoteTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type?:fhir.FhirCode<NoteTypeCodeType> fhir: PaymentReconciliation.processNote.type:code Required binding to: NoteType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliationProcessNote._fts_dataType = 'PaymentReconciliationProcessNote';
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export class PaymentReconciliation extends fhir.DomainResource {
    /**
     * Default constructor for PaymentReconciliation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'PaymentReconciliation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['paymentIssuer']) {
            this.paymentIssuer = new fhir.Reference(source.paymentIssuer);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['requestor']) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        if (source['outcome']) {
            this.outcome = new fhir.FhirCode({ value: source.outcome });
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['paymentDate']) {
            this.paymentDate = new fhir.FhirDate({ value: source.paymentDate });
        }
        else {
            this.paymentDate = null;
        }
        if (source['paymentAmount']) {
            this.paymentAmount = new fhir.Money(source.paymentAmount);
        }
        else {
            this.paymentAmount = null;
        }
        if (source['paymentIdentifier']) {
            this.paymentIdentifier = new fhir.Identifier(source.paymentIdentifier);
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.PaymentReconciliationDetail(x));
        }
        else {
            this.detail = [];
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.PaymentReconciliationProcessNote(x));
        }
        else {
            this.processNote = [];
        }
    }
    /**
     * Required-bound Value Set for status (PaymentReconciliation.status)
     */
    static get statusRequiredCodes() {
        return FmStatusCodes;
    }
    /**
     * Required-bound Value Set for outcome (PaymentReconciliation.outcome)
     */
    static get outcomeRequiredCodes() {
        return RemittanceOutcomeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"PaymentReconciliation" fhir: PaymentReconciliation.resourceType:"PaymentReconciliation"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<FmStatusCodeType> fhir: PaymentReconciliation.status:code' });
        }
        if (this['status'] && (!Object.values(FmStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<FmStatusCodeType> fhir: PaymentReconciliation.status:code Required binding to: FmStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (!this['created']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: PaymentReconciliation.created:dateTime' });
        }
        if (this["created"]) {
            issues.push(...this.created.doModelValidation());
        }
        if (this["paymentIssuer"]) {
            issues.push(...this.paymentIssuer.doModelValidation());
        }
        if (this["request"]) {
            issues.push(...this.request.doModelValidation());
        }
        if (this["requestor"]) {
            issues.push(...this.requestor.doModelValidation());
        }
        if (this['outcome'] && (!Object.values(RemittanceOutcomeCodes).includes(this.outcome))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property outcome?:fhir.FhirCode<RemittanceOutcomeCodeType> fhir: PaymentReconciliation.outcome:code Required binding to: RemittanceOutcome' });
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation());
        }
        if (this["disposition"]) {
            issues.push(...this.disposition.doModelValidation());
        }
        if (!this['paymentDate']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property paymentDate:fhir.FhirDate fhir: PaymentReconciliation.paymentDate:date' });
        }
        if (this["paymentDate"]) {
            issues.push(...this.paymentDate.doModelValidation());
        }
        if (!this['paymentAmount']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property paymentAmount:fhir.Money fhir: PaymentReconciliation.paymentAmount:Money' });
        }
        if (this["paymentAmount"]) {
            issues.push(...this.paymentAmount.doModelValidation());
        }
        if (this["paymentIdentifier"]) {
            issues.push(...this.paymentIdentifier.doModelValidation());
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["formCode"]) {
            issues.push(...this.formCode.doModelValidation());
        }
        if (this["processNote"]) {
            this.processNote.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliation._fts_dataType = 'PaymentReconciliation';
//# sourceMappingURL=data:application/json;base64,