// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PaymentReconciliation
import * as fhir from '../fhir.js';
// @ts-ignore
import { NoteTypeVsValidation } from '../fhirValueSets/NoteTypeVsValidation.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { RemittanceOutcomeVsValidation } from '../fhirValueSets/RemittanceOutcomeVsValidation.js';
/**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
export class PaymentReconciliationDetail extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['predecessor']) {
            this.predecessor = new fhir.Identifier(source.predecessor);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['submitter']) {
            this.submitter = new fhir.Reference(source.submitter);
        }
        if (source['response']) {
            this.response = new fhir.Reference(source.response);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDate(source._date);
            }
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['payee']) {
            this.payee = new fhir.Reference(source.payee);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'PaymentReconciliation.detail';
        }
        this.vOptS('identifier', expression);
        this.vOptS('predecessor', expression);
        this.vReqS('type', expression);
        this.vOptS('request', expression);
        this.vOptS('submitter', expression);
        this.vOptS('response', expression);
        this.vOptS('date', expression);
        this.vOptS('responsible', expression);
        this.vOptS('payee', expression);
        this.vOptS('amount', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliationDetail._fts_dataType = 'PaymentReconciliationDetail';
/**
 * A note that describes or explains the processing in a human readable form.
 */
export class PaymentReconciliationProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for PaymentReconciliationProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'PaymentReconciliation.processNote';
        }
        this.vOptSV('type', expression, 'NoteType', NoteTypeVsValidation, 'r');
        this.vOptS('text', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliationProcessNote._fts_dataType = 'PaymentReconciliationProcessNote';
/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export class PaymentReconciliation extends fhir.DomainResource {
    /**
     * Default constructor for PaymentReconciliation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'PaymentReconciliation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created);
            }
        }
        if (source['paymentIssuer']) {
            this.paymentIssuer = new fhir.Reference(source.paymentIssuer);
        }
        if (source['request']) {
            this.request = new fhir.Reference(source.request);
        }
        if (source['requestor']) {
            this.requestor = new fhir.Reference(source.requestor);
        }
        if (source['outcome']) {
            this.outcome = new fhir.FhirCode({ value: source.outcome });
        }
        if (source['_outcome']) {
            if (this.outcome) {
                this.outcome.addExtendedProperties(source._outcome);
            }
            else {
                this.outcome = new fhir.FhirCode(source._outcome);
            }
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['_disposition']) {
            if (this.disposition) {
                this.disposition.addExtendedProperties(source._disposition);
            }
            else {
                this.disposition = new fhir.FhirString(source._disposition);
            }
        }
        if (source['paymentDate']) {
            this.paymentDate = new fhir.FhirDate({ value: source.paymentDate });
        }
        else {
            this.paymentDate = null;
        }
        if (source['_paymentDate']) {
            if (this.paymentDate) {
                this.paymentDate.addExtendedProperties(source._paymentDate);
            }
            else {
                this.paymentDate = new fhir.FhirDate(source._paymentDate);
            }
        }
        if (source['paymentAmount']) {
            this.paymentAmount = new fhir.Money(source.paymentAmount);
        }
        else {
            this.paymentAmount = null;
        }
        if (source['paymentIdentifier']) {
            this.paymentIdentifier = new fhir.Identifier(source.paymentIdentifier);
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.PaymentReconciliationDetail(x));
        }
        else {
            this.detail = [];
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.PaymentReconciliationProcessNote(x));
        }
        else {
            this.processNote = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'PaymentReconciliation';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vReqSV('status', expression, 'FmStatus', FmStatusVsValidation, 'r');
        this.vOptS('period', expression);
        this.vReqS('created', expression);
        this.vOptS('paymentIssuer', expression);
        this.vOptS('request', expression);
        this.vOptS('requestor', expression);
        this.vOptSV('outcome', expression, 'RemittanceOutcome', RemittanceOutcomeVsValidation, 'r');
        this.vOptS('disposition', expression);
        this.vReqS('paymentDate', expression);
        this.vReqS('paymentAmount', expression);
        this.vOptS('paymentIdentifier', expression);
        this.vOptA('detail', expression);
        this.vOptS('formCode', expression);
        this.vOptA('processNote', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PaymentReconciliation._fts_dataType = 'PaymentReconciliation';
//# sourceMappingURL=data:application/json;base64,