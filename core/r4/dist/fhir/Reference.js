// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Reference
import * as fhir from '../fhir.js';
/**
 * A reference from one resource to another.
 */
export class Reference extends fhir.FhirElement {
    /**
     * Default constructor for Reference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.FhirString({ value: source.reference });
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirString(source._reference);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirUri({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirUri(source._type);
            }
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Reference';
        }
        iss.push(...this.vOS('reference', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vOS('display', exp));
        return iss;
    }
    /**
     * Create a reference from an existing resource
     */
    static fromResource(source, baseUrl = '') {
        if (baseUrl.endsWith('/')) {
            return new Reference({
                type: source.resourceType ?? undefined,
                reference: baseUrl + source.resourceType + '/' + source.id,
            });
        }
        return new Reference({
            type: source.resourceType ?? undefined,
            reference: ((baseUrl.length > 0) ? (baseUrl + '/') : '') + source.resourceType + '/' + source.id,
        });
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Reference._fts_dataType = 'Reference';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9SZWZlcmVuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBMkNuQzs7R0FFRztBQUNILE1BQU0sT0FBTyxTQUFVLFNBQVEsSUFBSSxDQUFDLFdBQVc7SUF3QjdDOztPQUVHO0lBQ0gsWUFBWSxTQUFnQyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN0RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUM3RixJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN4QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsVUFBVyxDQUFDLENBQUM7YUFBRTtpQkFDNUU7Z0JBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQTBDLENBQUMsQ0FBQzthQUFFO1NBQ2xHO1FBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzNFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25CLElBQUksSUFBSSxDQUFD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IG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBDb21wbGV4VHlwZTogUmVmZXJlbmNlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZXNvdXJjZVR5cGVzQ29kZXMsICBSZXNvdXJjZVR5cGVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1Jlc291cmNlVHlwZXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUmVzb3VyY2VUeXBlc1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVzb3VyY2VUeXBlc1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBSZWZlcmVuY2UgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVmZXJlbmNlQXJncyBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBVc2luZyBhYnNvbHV0ZSBVUkxzIHByb3ZpZGVzIGEgc3RhYmxlIHNjYWxhYmxlIGFwcHJvYWNoIHN1aXRhYmxlIGZvciBhIGNsb3VkL3dlYiBjb250ZXh0LCB3aGlsZSB1c2luZyByZWxhdGl2ZS9sb2dpY2FsIHJlZmVyZW5jZXMgcHJvdmlkZXMgYSBmbGV4aWJsZSBhcHByb2FjaCBzdWl0YWJsZSBmb3IgdXNlIHdoZW4gdHJhZGluZyBhY3Jvc3MgY2xvc2VkIGVjby1zeXN0ZW0gYm91bmRhcmllcy4gICBBYnNvbHV0ZSBVUkxzIGRvIG5vdCBuZWVkIHRvIHBvaW50IHRvIGEgRkhJUiBSRVNUZnVsIHNlcnZlciwgdGhvdWdoIHRoaXMgaXMgdGhlIHByZWZlcnJlZCBhcHByb2FjaC4gSWYgdGhlIFVSTCBjb25mb3JtcyB0byB0aGUgc3RydWN0dXJlIFwiL1t0eXBlXS9baWRdXCIgdGhlbiBpdCBzaG91bGQgYmUgYXNzdW1lZCB0aGF0IHRoZSByZWZlcmVuY2UgaXMgdG8gYSBGSElSIFJFU1RmdWwgc2VydmVyLlxyXG4gICAqL1xyXG4gIHJlZmVyZW5jZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBSZWZlcmVuY2UucmVmZXJlbmNlXHJcbiAgICovXHJcbiAgX3JlZmVyZW5jZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgIHRoZSB0YXJnZXQgb2YgdGhlIHJlZmVyZW5jZS4gVGhpcyBtYXkgYmUgdXNlZCB3aGljaCBldmVyIG9mIHRoZSBvdGhlciBlbGVtZW50cyBhcmUgcG9wdWxhdGVkIChvciBub3QpLiBJbiBzb21lIGNhc2VzLCB0aGUgdHlwZSBvZiB0aGUgdGFyZ2V0IG1heSBiZSBkZXRlcm1pbmVkIGJ5IGluc3BlY3Rpb24gb2YgdGhlIHJlZmVyZW5jZSAoZS5nLiBhIFJFU1RmdWwgVVJMKSBvciBieSByZXNvbHZpbmcgdGhlIHRhcmdldCBvZiB0aGUgcmVmZXJlbmNlOyBpZiBib3RoIHRoZSB0eXBlIGFuZCBhIHJlZmVyZW5jZSBpcyBwcm92aWRlZCwgdGhlIHJlZmVyZW5jZSBTSEFMTCByZXNvbHZlIHRvIGEgcmVzb3VyY2Ugb2YgdGhlIHNhbWUgdHlwZSBhcyB0aGF0IHNwZWNpZmllZC5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlZmVyZW5jZS50eXBlXHJcbiAgICovXHJcbiAgX3R5cGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gYW4gaWRlbnRpZmllciBpcyBwcm92aWRlZCBpbiBwbGFjZSBvZiBhIHJlZmVyZW5jZSwgYW55IHN5c3RlbSBwcm9jZXNzaW5nIHRoZSByZWZlcmVuY2Ugd2lsbCBvbmx5IGJlIGFibGUgdG8gcmVzb2x2ZSB0aGUgaWRlbnRpZmllciB0byBhIHJlZmVyZW5jZSBpZiBpdCB1bmRlcnN0YW5kcyB0aGUgYnVzaW5lc3MgY29udGV4dCBpbiB3aGljaCB0aGUgaWRlbnRpZmllciBpcyB1c2VkLiBTb21ldGltZXMgdGhpcyBpcyBnbG9iYWwgKGUuZy4gYSBuYXRpb25hbCBpZGVudGlmaWVyKSBidXQgb2Z0ZW4gaXQgaXMgbm90LiBGb3IgdGhpcyByZWFzb24sIG5vbmUgb2YgdGhlIHVzZWZ1bCBtZWNoYW5pc21zIGRlc2NyaWJlZCBmb3Igd29ya2luZyB3aXRoIHJlZmVyZW5jZXMgKGUuZy4gY2hhaW5pbmcsIGluY2x1ZGVzKSBhcmUgcG9zc2libGUsIG5vciBzaG91bGQgc2VydmVycyBiZSBleHBlY3RlZCB0byBiZSBhYmxlIHJlc29sdmUgdGhlIHJlZmVyZW5jZS4gU2VydmVycyBtYXkgYWNjZXB0IGFuIGlkZW50aWZpZXIgYmFzZWQgcmVmZXJlbmNlIHVudG91Y2hlZCwgcmVzb2x2ZSBpdCwgYW5kL29yIHJlamVjdCBpdCAtIHNlZSBDYXBhYmlsaXR5U3RhdGVtZW50LnJlc3QucmVzb3VyY2UucmVmZXJlbmNlUG9saWN5LiBcclxuICAgKiBXaGVuIGJvdGggYW4gaWRlbnRpZmllciBhbmQgYSBsaXRlcmFsIHJlZmVyZW5jZSBhcmUgcHJvdmlkZWQsIHRoZSBsaXRlcmFsIHJlZmVyZW5jZSBpcyBwcmVmZXJyZWQuIEFwcGxpY2F0aW9ucyBwcm9jZXNzaW5nIHRoZSByZXNvdXJjZSBhcmUgYWxsb3dlZCAtIGJ1dCBub3QgcmVxdWlyZWQgLSB0byBjaGVjayB0aGF0IHRoZSBpZGVudGlmaWVyIG1hdGNoZXMgdGhlIGxpdGVyYWwgcmVmZXJlbmNlXHJcbiAgICogQXBwbGljYXRpb25zIGNvbnZlcnRpbmcgYSBsb2dpY2FsIHJlZmVyZW5jZSB0byBhIGxpdGVyYWwgcmVmZXJlbmNlIG1heSBjaG9vc2UgdG8gbGVhdmUgdGhlIGxvZ2ljYWwgcmVmZXJlbmNlIHByZXNlbnQsIG9yIHJlbW92ZSBpdC5cclxuICAgKiBSZWZlcmVuY2UgaXMgaW50ZW5kZWQgdG8gcG9pbnQgdG8gYSBzdHJ1Y3R1cmUgdGhhdCBjYW4gcG90ZW50aWFsbHkgYmUgZXhwcmVzc2VkIGFzIGEgRkhJUiByZXNvdXJjZSwgdGhvdWdoIHRoZXJlIGlzIG5vIG5lZWQgZm9yIGl0IHRvIGV4aXN0IGFzIGFuIGFjdHVhbCBGSElSIHJlc291cmNlIGluc3RhbmNlIC0gZXhjZXB0IGluIGFzIG11Y2ggYXMgYW4gYXBwbGljYXRpb24gd2lzaGVzIHRvIGFjdHVhbCBmaW5kIHRoZSB0YXJnZXQgb2YgdGhlIHJlZmVyZW5jZS4gVGhlIGNvbnRlbnQgcmVmZXJyZWQgdG8gYmUgdGhlIGlkZW50aWZpZXIgbXVzdCBtZWV0IHRoZSBsb2dpY2FsIGNvbnN0cmFpbnRzIGltcGxpZWQgYnkgYW55IGxpbWl0YXRpb25zIG9uIHdoYXQgcmVzb3VyY2UgdHlwZXMgYXJlIHBlcm1pdHRlZCBmb3IgdGhlIHJlZmVyZW5jZS4gIEZvciBleGFtcGxlLCBpdCB3b3VsZCBub3QgYmUgbGVnaXRpbWF0ZSB0byBzZW5kIHRoZSBpZGVudGlmaWVyIGZvciBhIGRydWcgcHJlc2NyaXB0aW9uIGlmIHRoZSB0eXBlIHdlcmUgUmVmZXJlbmNlKE9ic2VydmF0aW9ufERpYWdub3N0aWNSZXBvcnQpLiAgT25lIG9mIHRoZSB1c2UtY2FzZXMgZm9yIFJlZmVyZW5jZS5pZGVudGlmaWVyIGlzIHRoZSBzaXR1YXRpb24gd2hlcmUgbm8gRkhJUiByZXByZXNlbnRhdGlvbiBleGlzdHMgKHdoZXJlIHRoZSB0eXBlIGlzIFJlZmVyZW5jZSAoQW55KS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgbm90IHRoZSBzYW1lIGFzIHRoZSBSZXNvdXJjZS50ZXh0IG9mIHRoZSByZWZlcmVuY2VkIHJlc291cmNlLiAgVGhlIHB1cnBvc2UgaXMgdG8gaWRlbnRpZnkgd2hhdCdzIGJlaW5nIHJlZmVyZW5jZWQsIG5vdCB0byBmdWxseSBkZXNjcmliZSBpdC5cclxuICAgKi9cclxuICBkaXNwbGF5PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFJlZmVyZW5jZS5kaXNwbGF5XHJcbiAgICovXHJcbiAgX2Rpc3BsYXk/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogQSByZWZlcmVuY2UgZnJvbSBvbmUgcmVzb3VyY2UgdG8gYW5vdGhlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWZlcmVuY2UgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1JlZmVyZW5jZSc7XHJcbiAgLyoqXHJcbiAgICogVXNpbmcgYWJzb2x1dGUgVVJMcyBwcm92aWRlcyBhIHN0YWJsZSBzY2FsYWJsZSBhcHByb2FjaCBzdWl0YWJsZSBmb3IgYSBjbG91ZC93ZWIgY29udGV4dCwgd2hpbGUgdXNpbmcgcmVsYXRpdmUvbG9naWNhbCByZWZlcmVuY2VzIHByb3ZpZGVzIGEgZmxleGlibGUgYXBwcm9hY2ggc3VpdGFibGUgZm9yIHVzZSB3aGVuIHRyYWRpbmcgYWNyb3NzIGNsb3NlZCBlY28tc3lzdGVtIGJvdW5kYXJpZXMuICAgQWJzb2x1dGUgVVJMcyBkbyBub3QgbmVlZCB0byBwb2ludCB0byBhIEZISVIgUkVTVGZ1bCBzZXJ2ZXIsIHRob3VnaCB0aGlzIGlzIHRoZSBwcmVmZXJyZWQgYXBwcm9hY2guIElmIHRoZSBVUkwgY29uZm9ybXMgdG8gdGhlIHN0cnVjdHVyZSBcIi9bdHlwZV0vW2lkXVwiIHRoZW4gaXQgc2hvdWxkIGJlIGFzc3VtZWQgdGhhdCB0aGUgcmVmZXJlbmNlIGlzIHRvIGEgRkhJUiBSRVNUZnVsIHNlcnZlci5cclxuICAgKi9cclxuICBwdWJsaWMgcmVmZXJlbmNlPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiAgdGhlIHRhcmdldCBvZiB0aGUgcmVmZXJlbmNlLiBUaGlzIG1heSBiZSB1c2VkIHdoaWNoIGV2ZXIgb2YgdGhlIG90aGVyIGVsZW1lbnRzIGFyZSBwb3B1bGF0ZWQgKG9yIG5vdCkuIEluIHNvbWUgY2FzZXMsIHRoZSB0eXBlIG9mIHRoZSB0YXJnZXQgbWF5IGJlIGRldGVybWluZWQgYnkgaW5zcGVjdGlvbiBvZiB0aGUgcmVmZXJlbmNlIChlLmcuIGEgUkVTVGZ1bCBVUkwpIG9yIGJ5IHJlc29sdmluZyB0aGUgdGFyZ2V0IG9mIHRoZSByZWZlcmVuY2U7IGlmIGJvdGggdGhlIHR5cGUgYW5kIGEgcmVmZXJlbmNlIGlzIHByb3ZpZGVkLCB0aGUgcmVmZXJlbmNlIFNIQUxMIHJlc29sdmUgdG8gYSByZXNvdXJjZSBvZiB0aGUgc2FtZSB0eXBlIGFzIHRoYXQgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5GaGlyVXJpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIGFuIGlkZW50aWZpZXIgaXMgcHJvdmlkZWQgaW4gcGxhY2Ugb2YgYSByZWZlcmVuY2UsIGFueSBzeXN0ZW0gcHJvY2Vzc2luZyB0aGUgcmVmZXJlbmNlIHdpbGwgb25seSBiZSBhYmxlIHRvIHJlc29sdmUgdGhlIGlkZW50aWZpZXIgdG8gYSByZWZlcmVuY2UgaWYgaXQgdW5kZXJzdGFuZHMgdGhlIGJ1c2luZXNzIGNvbnRleHQgaW4gd2hpY2ggdGhlIGlkZW50aWZpZXIgaXMgdXNlZC4gU29tZXRpbWVzIHRoaXMgaXMgZ2xvYmFsIChlLmcuIGEgbmF0aW9uYWwgaWRlbnRpZmllcikgYnV0IG9mdGVuIGl0IGlzIG5vdC4gRm9yIHRoaXMgcmVhc29uLCBub25lIG9mIHRoZSB1c2VmdWwgbWVjaGFuaXNtcyBkZXNjcmliZWQgZm9yIHdvcmtpbmcgd2l0aCByZWZlcmVuY2VzIChlLmcuIGNoYWluaW5nLCBpbmNsdWRlcykgYXJlIHBvc3NpYmxlLCBub3Igc2hvdWxkIHNlcnZlcnMgYmUgZXhwZWN0ZWQgdG8gYmUgYWJsZSByZXNvbHZlIHRoZSByZWZlcmVuY2UuIFNlcnZlcnMgbWF5IGFjY2VwdCBhbiBpZGVudGlmaWVyIGJhc2VkIHJlZmVyZW5jZSB1bnRvdWNoZWQsIHJlc29sdmUgaXQsIGFuZC9vciByZWplY3QgaXQgLSBzZWUgQ2FwYWJpbGl0eVN0YXRlbWVudC5yZXN0LnJlc291cmNlLnJlZmVyZW5jZVBvbGljeS4gXHJcbiAgICogV2hlbiBib3RoIGFuIGlkZW50aWZpZXIgYW5kIGEgbGl0ZXJhbCByZWZlcmVuY2UgYXJlIHByb3ZpZGVkLCB0aGUgbGl0ZXJhbCByZWZlcmVuY2UgaXMgcHJlZmVycmVkLiBBcHBsaWNhdGlvbnMgcHJvY2Vzc2luZyB0aGUgcmVzb3VyY2UgYXJlIGFsbG93ZWQgLSBidXQgbm90IHJlcXVpcmVkIC0gdG8gY2hlY2sgdGhhdCB0aGUgaWRlbnRpZmllciBtYXRjaGVzIHRoZSBsaXRlcmFsIHJlZmVyZW5jZVxyXG4gICAqIEFwcGxpY2F0aW9ucyBjb252ZXJ0aW5nIGEgbG9naWNhbCByZWZlcmVuY2UgdG8gYSBsaXRlcmFsIHJlZmVyZW5jZSBtYXkgY2hvb3NlIHRvIGxlYXZlIHRoZSBsb2dpY2FsIHJlZmVyZW5jZSBwcmVzZW50LCBvciByZW1vdmUgaXQuXHJcbiAgICogUmVmZXJlbmNlIGlzIGludGVuZGVkIHRvIHBvaW50IHRvIGEgc3RydWN0dXJlIHRoYXQgY2FuIHBvdGVudGlhbGx5IGJlIGV4cHJlc3NlZCBhcyBhIEZISVIgcmVzb3VyY2UsIHRob3VnaCB0aGVyZSBpcyBubyBuZWVkIGZvciBpdCB0byBleGlzdCBhcyBhbiBhY3R1YWwgRkhJUiByZXNvdXJjZSBpbnN0YW5jZSAtIGV4Y2VwdCBpbiBhcyBtdWNoIGFzIGFuIGFwcGxpY2F0aW9uIHdpc2hlcyB0byBhY3R1YWwgZmluZCB0aGUgdGFyZ2V0IG9mIHRoZSByZWZlcmVuY2UuIFRoZSBjb250ZW50IHJlZmVycmVkIHRvIGJlIHRoZSBpZGVudGlmaWVyIG11c3QgbWVldCB0aGUgbG9naWNhbCBjb25zdHJhaW50cyBpbXBsaWVkIGJ5IGFueSBsaW1pdGF0aW9ucyBvbiB3aGF0IHJlc291cmNlIHR5cGVzIGFyZSBwZXJtaXR0ZWQgZm9yIHRoZSByZWZlcmVuY2UuICBGb3IgZXhhbXBsZSwgaXQgd291bGQgbm90IGJlIGxlZ2l0aW1hdGUgdG8gc2VuZCB0aGUgaWRlbnRpZmllciBmb3IgYSBkcnVnIHByZXNjcmlwdGlvbiBpZiB0aGUgdHlwZSB3ZXJlIFJlZmVyZW5jZShPYnNlcnZhdGlvbnxEaWFnbm9zdGljUmVwb3J0KS4gIE9uZSBvZiB0aGUgdXNlLWNhc2VzIGZvciBSZWZlcmVuY2UuaWRlbnRpZmllciBpcyB0aGUgc2l0dWF0aW9uIHdoZXJlIG5vIEZISVIgcmVwcmVzZW50YXRpb24gZXhpc3RzICh3aGVyZSB0aGUgdHlwZSBpcyBSZWZlcmVuY2UgKEFueSkuXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IG5vdCB0aGUgc2FtZSBhcyB0aGUgUmVzb3VyY2UudGV4dCBvZiB0aGUgcmVmZXJlbmNlZCByZXNvdXJjZS4gIFRoZSBwdXJwb3NlIGlzIHRvIGlkZW50aWZ5IHdoYXQncyBiZWluZyByZWZlcmVuY2VkLCBub3QgdG8gZnVsbHkgZGVzY3JpYmUgaXQuXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3BsYXk/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFJlZmVyZW5jZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFJlZmVyZW5jZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyZWZlcmVuY2UnXSkgeyB0aGlzLnJlZmVyZW5jZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucmVmZXJlbmNlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19yZWZlcmVuY2UnXSkge1xyXG4gICAgICBpZiAodGhpcy5yZWZlcmVuY2UpIHsgdGhpcy5yZWZlcmVuY2UuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcmVmZXJlbmNlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucmVmZXJlbmNlID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3JlZmVyZW5jZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudHlwZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdHlwZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnR5cGUpIHsgdGhpcy50eXBlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3R5cGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuRmhpclVyaShzb3VyY2UuX3R5cGUgYXMgUGFydGlhbDxmaGlyLkZoaXJVcmlBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBuZXcgZmhpci5JZGVudGlmaWVyKHNvdXJjZS5pZGVudGlmaWVyKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGlzcGxheSddKSB7IHRoaXMuZGlzcGxheSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGlzcGxheX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfZGlzcGxheSddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRpc3BsYXkpIHsgdGhpcy5kaXNwbGF5LmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2Rpc3BsYXkhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kaXNwbGF5ID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX2Rpc3BsYXkgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdSZWZlcmVuY2UnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdyZWZlcmVuY2UnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3R5cGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2lkZW50aWZpZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2Rpc3BsYXknLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIHJlZmVyZW5jZSBmcm9tIGFuIGV4aXN0aW5nIHJlc291cmNlXHJcbiAgICovXHJcbiAgIHN0YXRpYyBmcm9tUmVzb3VyY2Uoc291cmNlOmZoaXIuRmhpclJlc291cmNlLCBiYXNlVXJsOnN0cmluZz0nJyk6UmVmZXJlbmNlIHtcclxuICAgIGlmIChiYXNlVXJsLmVuZHNXaXRoKCcvJykpIHtcclxuICAgICAgcmV0dXJuIG5ldyBSZWZlcmVuY2Uoe1xyXG4gICAgICAgIHR5cGU6IHNvdXJjZS5yZXNvdXJjZVR5cGUgPz8gdW5kZWZpbmVkLFxyXG4gICAgICAgIHJlZmVyZW5jZTogYmFzZVVybCArIHNvdXJjZS5yZXNvdXJjZVR5cGUgKyAnLycgKyBzb3VyY2UuaWQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgUmVmZXJlbmNlKHtcclxuICAgICAgdHlwZTogc291cmNlLnJlc291cmNlVHlwZSA/PyB1bmRlZmluZWQsXHJcbiAgICAgIHJlZmVyZW5jZTogKChiYXNlVXJsLmxlbmd0aCA+IDApID8gKGJhc2VVcmwgKyAnLycpIDogJycpICsgc291cmNlLnJlc291cmNlVHlwZSArICcvJyArIHNvdXJjZS5pZCxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=