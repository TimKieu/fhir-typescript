/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { FhirElement } from './FhirElement.js';
import { FhirString } from './FhirString.js';
import { FhirUri } from './FhirUri.js';
import { Identifier } from './Identifier.js';

// <auto-generated/>
/**
 * A reference from one resource to another.
 */
var Reference = /** @class */ (function (_super) {
    __extends(Reference, _super);
    /**
     * Default constructor for Reference - initializes any required elements to null if a value is not provided.
     */
    function Reference(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['reference']) {
            _this.reference = new FhirString({ value: source.reference });
        }
        if (source['type']) {
            _this.type = new FhirUri({ value: source.type });
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['display']) {
            _this.display = new FhirString({ value: source.display });
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (Reference.type)
     */
    Reference.typeExtensibleCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Reference.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["reference"]) {
            (_a = outcome.issue).push.apply(_a, this.reference.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["identifier"]) {
            (_c = outcome.issue).push.apply(_c, this.identifier.doModelValidation().issue);
        }
        if (this["display"]) {
            (_d = outcome.issue).push.apply(_d, this.display.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Create a reference from an existing resource
     */
    Reference.fromResource = function (source, baseUrl) {
        var _a, _b;
        if (baseUrl === void 0) { baseUrl = ''; }
        if (baseUrl.endsWith('/')) {
            return new Reference({
                type: (_a = source.resourceType) !== null && _a !== void 0 ? _a : undefined,
                reference: baseUrl + source.resourceType + '/' + source.id,
            });
        }
        return new Reference({
            type: (_b = source.resourceType) !== null && _b !== void 0 ? _b : undefined,
            reference: ((baseUrl.length > 0) ? (baseUrl + '/') : '') + source.resourceType + '/' + source.id,
        });
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Reference._fts_dataType = 'Reference';
    return Reference;
}(FhirElement));

export { Reference };
//# sourceMappingURL=Reference.js.map
