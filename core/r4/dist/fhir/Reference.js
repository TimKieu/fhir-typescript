// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Reference
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResourceTypesCodings, } from '../fhirValueSets/ResourceTypesCodings.js';
/**
 * A reference from one resource to another.
 */
export class Reference extends fhir.FhirElement {
    /**
     * Default constructor for Reference - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['reference']) {
            this.reference = new fhir.FhirString({ value: source.reference });
        }
        if (source['type']) {
            this.type = new fhir.FhirUri({ value: source.type });
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
    }
    /**
     * Extensible-bound Value Set for type (Reference.type)
     */
    static typeExtensibleCoding() {
        return ResourceTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation());
        }
        return issues;
    }
    /**
     * Create a reference from an existing resource
     */
    static fromResource(source, baseUrl = '') {
        if (baseUrl.endsWith('/')) {
            return new Reference({
                type: source.resourceType ?? undefined,
                reference: baseUrl + source.resourceType + '/' + source.id,
            });
        }
        return new Reference({
            type: source.resourceType ?? undefined,
            reference: ((baseUrl.length > 0) ? (baseUrl + '/') : '') + source.resourceType + '/' + source.id,
        });
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Reference._fts_dataType = 'Reference';
//# sourceMappingURL=data:application/json;base64,