/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { VerificationresultValidationStatusCodings } from '../fhirValueSets/VerificationresultValidationStatusCodings.js';
import { VerificationresultCanPushUpdatesCodings } from '../fhirValueSets/VerificationresultCanPushUpdatesCodings.js';
import { VerificationresultPushTypeAvailableCodings } from '../fhirValueSets/VerificationresultPushTypeAvailableCodings.js';
import { VerificationresultNeedCodings } from '../fhirValueSets/VerificationresultNeedCodings.js';
import { VerificationresultStatusCodings } from '../fhirValueSets/VerificationresultStatusCodings.js';
import { VerificationresultValidationTypeCodings } from '../fhirValueSets/VerificationresultValidationTypeCodings.js';
import { VerificationresultFailureActionCodings } from '../fhirValueSets/VerificationresultFailureActionCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirDate } from './FhirDate.js';
import { FhirString } from './FhirString.js';
import { Signature } from './Signature.js';
import { Timing } from './Timing.js';

// <auto-generated/>
/**
 * Information about the primary source(s) involved in validation.
 */
var VerificationResultPrimarySource = /** @class */ (function (_super) {
    __extends(VerificationResultPrimarySource, _super);
    /**
     * Default constructor for VerificationResultPrimarySource - initializes any required elements to null if a value is not provided.
     */
    function VerificationResultPrimarySource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['who']) {
            _this.who = new Reference(source.who);
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['communicationMethod']) {
            _this.communicationMethod = source.communicationMethod.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.communicationMethod = [];
        }
        if (source['validationStatus']) {
            _this.validationStatus = new CodeableConcept(source.validationStatus);
        }
        if (source['validationDate']) {
            _this.validationDate = new FhirDateTime({ value: source.validationDate });
        }
        if (source['canPushUpdates']) {
            _this.canPushUpdates = new CodeableConcept(source.canPushUpdates);
        }
        if (source['pushTypeAvailable']) {
            _this.pushTypeAvailable = source.pushTypeAvailable.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.pushTypeAvailable = [];
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for validationStatus (VerificationResult.primarySource.validationStatus)
     */
    VerificationResultPrimarySource.validationStatusPreferredCoding = function () {
        return VerificationresultValidationStatusCodings;
    };
    /**
     * Preferred-bound Value Set for canPushUpdates (VerificationResult.primarySource.canPushUpdates)
     */
    VerificationResultPrimarySource.canPushUpdatesPreferredCoding = function () {
        return VerificationresultCanPushUpdatesCodings;
    };
    /**
     * Preferred-bound Value Set for pushTypeAvailable (VerificationResult.primarySource.pushTypeAvailable)
     */
    VerificationResultPrimarySource.pushTypeAvailablePreferredCoding = function () {
        return VerificationresultPushTypeAvailableCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    VerificationResultPrimarySource.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["who"]) {
            (_a = outcome.issue).push.apply(_a, this.who.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["communicationMethod"]) {
            this.communicationMethod.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["validationStatus"]) {
            (_b = outcome.issue).push.apply(_b, this.validationStatus.doModelValidation().issue);
        }
        if (this["validationDate"]) {
            (_c = outcome.issue).push.apply(_c, this.validationDate.doModelValidation().issue);
        }
        if (this["canPushUpdates"]) {
            (_d = outcome.issue).push.apply(_d, this.canPushUpdates.doModelValidation().issue);
        }
        if (this["pushTypeAvailable"]) {
            this.pushTypeAvailable.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    VerificationResultPrimarySource._fts_dataType = 'VerificationResultPrimarySource';
    return VerificationResultPrimarySource;
}(BackboneElement));
/**
 * Information about the entity attesting to information.
 */
var VerificationResultAttestation = /** @class */ (function (_super) {
    __extends(VerificationResultAttestation, _super);
    /**
     * Default constructor for VerificationResultAttestation - initializes any required elements to null if a value is not provided.
     */
    function VerificationResultAttestation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['who']) {
            _this.who = new Reference(source.who);
        }
        if (source['onBehalfOf']) {
            _this.onBehalfOf = new Reference(source.onBehalfOf);
        }
        if (source['communicationMethod']) {
            _this.communicationMethod = new CodeableConcept(source.communicationMethod);
        }
        if (source['date']) {
            _this.date = new FhirDate({ value: source.date });
        }
        if (source['sourceIdentityCertificate']) {
            _this.sourceIdentityCertificate = new FhirString({ value: source.sourceIdentityCertificate });
        }
        if (source['proxyIdentityCertificate']) {
            _this.proxyIdentityCertificate = new FhirString({ value: source.proxyIdentityCertificate });
        }
        if (source['proxySignature']) {
            _this.proxySignature = new Signature(source.proxySignature);
        }
        if (source['sourceSignature']) {
            _this.sourceSignature = new Signature(source.sourceSignature);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    VerificationResultAttestation.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["who"]) {
            (_a = outcome.issue).push.apply(_a, this.who.doModelValidation().issue);
        }
        if (this["onBehalfOf"]) {
            (_b = outcome.issue).push.apply(_b, this.onBehalfOf.doModelValidation().issue);
        }
        if (this["communicationMethod"]) {
            (_c = outcome.issue).push.apply(_c, this.communicationMethod.doModelValidation().issue);
        }
        if (this["date"]) {
            (_d = outcome.issue).push.apply(_d, this.date.doModelValidation().issue);
        }
        if (this["sourceIdentityCertificate"]) {
            (_e = outcome.issue).push.apply(_e, this.sourceIdentityCertificate.doModelValidation().issue);
        }
        if (this["proxyIdentityCertificate"]) {
            (_f = outcome.issue).push.apply(_f, this.proxyIdentityCertificate.doModelValidation().issue);
        }
        if (this["proxySignature"]) {
            (_g = outcome.issue).push.apply(_g, this.proxySignature.doModelValidation().issue);
        }
        if (this["sourceSignature"]) {
            (_h = outcome.issue).push.apply(_h, this.sourceSignature.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    VerificationResultAttestation._fts_dataType = 'VerificationResultAttestation';
    return VerificationResultAttestation;
}(BackboneElement));
/**
 * Information about the entity validating information.
 */
var VerificationResultValidator = /** @class */ (function (_super) {
    __extends(VerificationResultValidator, _super);
    /**
     * Default constructor for VerificationResultValidator - initializes any required elements to null if a value is not provided.
     */
    function VerificationResultValidator(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['organization']) {
            _this.organization = new Reference(source.organization);
        }
        else {
            _this.organization = null;
        }
        if (source['identityCertificate']) {
            _this.identityCertificate = new FhirString({ value: source.identityCertificate });
        }
        if (source['attestationSignature']) {
            _this.attestationSignature = new Signature(source.attestationSignature);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    VerificationResultValidator.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['organization']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property organization:fhir.Reference fhir: VerificationResult.validator.organization:Reference', }));
        }
        if (this["organization"]) {
            (_a = outcome.issue).push.apply(_a, this.organization.doModelValidation().issue);
        }
        if (this["identityCertificate"]) {
            (_b = outcome.issue).push.apply(_b, this.identityCertificate.doModelValidation().issue);
        }
        if (this["attestationSignature"]) {
            (_c = outcome.issue).push.apply(_c, this.attestationSignature.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    VerificationResultValidator._fts_dataType = 'VerificationResultValidator';
    return VerificationResultValidator;
}(BackboneElement));
/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
var VerificationResult = /** @class */ (function (_super) {
    __extends(VerificationResult, _super);
    /**
     * Default constructor for VerificationResult - initializes any required elements to null if a value is not provided.
     */
    function VerificationResult(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'VerificationResult';
        if (source['target']) {
            _this.target = source.target.map(function (x) { return new Reference(x); });
        }
        else {
            _this.target = [];
        }
        if (source['targetLocation']) {
            _this.targetLocation = source.targetLocation.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.targetLocation = [];
        }
        if (source['need']) {
            _this.need = new CodeableConcept(source.need);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusDate']) {
            _this.statusDate = new FhirDateTime({ value: source.statusDate });
        }
        if (source['validationType']) {
            _this.validationType = new CodeableConcept(source.validationType);
        }
        if (source['validationProcess']) {
            _this.validationProcess = source.validationProcess.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.validationProcess = [];
        }
        if (source['frequency']) {
            _this.frequency = new Timing(source.frequency);
        }
        if (source['lastPerformed']) {
            _this.lastPerformed = new FhirDateTime({ value: source.lastPerformed });
        }
        if (source['nextScheduled']) {
            _this.nextScheduled = new FhirDate({ value: source.nextScheduled });
        }
        if (source['failureAction']) {
            _this.failureAction = new CodeableConcept(source.failureAction);
        }
        if (source['primarySource']) {
            _this.primarySource = source.primarySource.map(function (x) { return new VerificationResultPrimarySource(x); });
        }
        else {
            _this.primarySource = [];
        }
        if (source['attestation']) {
            _this.attestation = new VerificationResultAttestation(source.attestation);
        }
        if (source['validator']) {
            _this.validator = source.validator.map(function (x) { return new VerificationResultValidator(x); });
        }
        else {
            _this.validator = [];
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for need (VerificationResult.need)
     */
    VerificationResult.needPreferredCoding = function () {
        return VerificationresultNeedCodings;
    };
    /**
     * Required-bound Value Set for status (VerificationResult.status)
     */
    VerificationResult.statusRequiredCoding = function () {
        return VerificationresultStatusCodings;
    };
    /**
     * Preferred-bound Value Set for validationType (VerificationResult.validationType)
     */
    VerificationResult.validationTypePreferredCoding = function () {
        return VerificationresultValidationTypeCodings;
    };
    /**
     * Preferred-bound Value Set for failureAction (VerificationResult.failureAction)
     */
    VerificationResult.failureActionPreferredCoding = function () {
        return VerificationresultFailureActionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    VerificationResult.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"VerificationResult" fhir: VerificationResult.resourceType:"VerificationResult"', }));
        }
        if (this["target"]) {
            this.target.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["targetLocation"]) {
            this.targetLocation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["need"]) {
            (_a = outcome.issue).push.apply(_a, this.need.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:VerificationresultStatusCodeType fhir: VerificationResult.status:code', }));
        }
        if (this["statusDate"]) {
            (_b = outcome.issue).push.apply(_b, this.statusDate.doModelValidation().issue);
        }
        if (this["validationType"]) {
            (_c = outcome.issue).push.apply(_c, this.validationType.doModelValidation().issue);
        }
        if (this["validationProcess"]) {
            this.validationProcess.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["frequency"]) {
            (_d = outcome.issue).push.apply(_d, this.frequency.doModelValidation().issue);
        }
        if (this["lastPerformed"]) {
            (_e = outcome.issue).push.apply(_e, this.lastPerformed.doModelValidation().issue);
        }
        if (this["nextScheduled"]) {
            (_f = outcome.issue).push.apply(_f, this.nextScheduled.doModelValidation().issue);
        }
        if (this["failureAction"]) {
            (_g = outcome.issue).push.apply(_g, this.failureAction.doModelValidation().issue);
        }
        if (this["primarySource"]) {
            this.primarySource.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["attestation"]) {
            (_h = outcome.issue).push.apply(_h, this.attestation.doModelValidation().issue);
        }
        if (this["validator"]) {
            this.validator.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    VerificationResult._fts_dataType = 'VerificationResult';
    return VerificationResult;
}(DomainResource));

export { VerificationResult, VerificationResultAttestation, VerificationResultPrimarySource, VerificationResultValidator };
//# sourceMappingURL=VerificationResult.js.map
