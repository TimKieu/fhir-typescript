// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: VerificationResult
import * as fhir from '../fhir.js';
// @ts-ignore
import { VerificationresultValidationStatusCodings, } from '../fhirValueSets/VerificationresultValidationStatusCodings.js';
// @ts-ignore
import { VerificationresultCanPushUpdatesCodings, } from '../fhirValueSets/VerificationresultCanPushUpdatesCodings.js';
// @ts-ignore
import { VerificationresultPushTypeAvailableCodings, } from '../fhirValueSets/VerificationresultPushTypeAvailableCodings.js';
// @ts-ignore
import { VerificationresultNeedCodings, } from '../fhirValueSets/VerificationresultNeedCodings.js';
// @ts-ignore
import { VerificationresultStatusCodings, } from '../fhirValueSets/VerificationresultStatusCodings.js';
// @ts-ignore
import { VerificationresultValidationTypeCodings, } from '../fhirValueSets/VerificationresultValidationTypeCodings.js';
// @ts-ignore
import { VerificationresultFailureActionCodings, } from '../fhirValueSets/VerificationresultFailureActionCodings.js';
/**
 * Information about the primary source(s) involved in validation.
 */
export class VerificationResultPrimarySource extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultPrimarySource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['communicationMethod']) {
            this.communicationMethod = source.communicationMethod.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.communicationMethod = [];
        }
        if (source['validationStatus']) {
            this.validationStatus = new fhir.CodeableConcept(source.validationStatus);
        }
        if (source['validationDate']) {
            this.validationDate = new fhir.FhirDateTime({ value: source.validationDate });
        }
        if (source['canPushUpdates']) {
            this.canPushUpdates = new fhir.CodeableConcept(source.canPushUpdates);
        }
        if (source['pushTypeAvailable']) {
            this.pushTypeAvailable = source.pushTypeAvailable.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.pushTypeAvailable = [];
        }
    }
    /**
     * Preferred-bound Value Set for validationStatus (VerificationResult.primarySource.validationStatus)
     */
    static validationStatusPreferredCoding() {
        return VerificationresultValidationStatusCodings;
    }
    /**
     * Preferred-bound Value Set for canPushUpdates (VerificationResult.primarySource.canPushUpdates)
     */
    static canPushUpdatesPreferredCoding() {
        return VerificationresultCanPushUpdatesCodings;
    }
    /**
     * Preferred-bound Value Set for pushTypeAvailable (VerificationResult.primarySource.pushTypeAvailable)
     */
    static pushTypeAvailablePreferredCoding() {
        return VerificationresultPushTypeAvailableCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["who"]) {
            issues.push(...this.who.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["communicationMethod"]) {
            this.communicationMethod.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["validationStatus"]) {
            issues.push(...this.validationStatus.doModelValidation());
        }
        if (this["validationDate"]) {
            issues.push(...this.validationDate.doModelValidation());
        }
        if (this["canPushUpdates"]) {
            issues.push(...this.canPushUpdates.doModelValidation());
        }
        if (this["pushTypeAvailable"]) {
            this.pushTypeAvailable.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResultPrimarySource._fts_dataType = 'VerificationResultPrimarySource';
/**
 * Information about the entity attesting to information.
 */
export class VerificationResultAttestation extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultAttestation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
        if (source['communicationMethod']) {
            this.communicationMethod = new fhir.CodeableConcept(source.communicationMethod);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['sourceIdentityCertificate']) {
            this.sourceIdentityCertificate = new fhir.FhirString({ value: source.sourceIdentityCertificate });
        }
        if (source['proxyIdentityCertificate']) {
            this.proxyIdentityCertificate = new fhir.FhirString({ value: source.proxyIdentityCertificate });
        }
        if (source['proxySignature']) {
            this.proxySignature = new fhir.Signature(source.proxySignature);
        }
        if (source['sourceSignature']) {
            this.sourceSignature = new fhir.Signature(source.sourceSignature);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["who"]) {
            issues.push(...this.who.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            issues.push(...this.onBehalfOf.doModelValidation());
        }
        if (this["communicationMethod"]) {
            issues.push(...this.communicationMethod.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["sourceIdentityCertificate"]) {
            issues.push(...this.sourceIdentityCertificate.doModelValidation());
        }
        if (this["proxyIdentityCertificate"]) {
            issues.push(...this.proxyIdentityCertificate.doModelValidation());
        }
        if (this["proxySignature"]) {
            issues.push(...this.proxySignature.doModelValidation());
        }
        if (this["sourceSignature"]) {
            issues.push(...this.sourceSignature.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResultAttestation._fts_dataType = 'VerificationResultAttestation';
/**
 * Information about the entity validating information.
 */
export class VerificationResultValidator extends fhir.BackboneElement {
    /**
     * Default constructor for VerificationResultValidator - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['organization']) {
            this.organization = new fhir.Reference(source.organization);
        }
        else {
            this.organization = null;
        }
        if (source['identityCertificate']) {
            this.identityCertificate = new fhir.FhirString({ value: source.identityCertificate });
        }
        if (source['attestationSignature']) {
            this.attestationSignature = new fhir.Signature(source.attestationSignature);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['organization']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property organization:fhir.Reference fhir: VerificationResult.validator.organization:Reference', });
        }
        if (this["organization"]) {
            issues.push(...this.organization.doModelValidation());
        }
        if (this["identityCertificate"]) {
            issues.push(...this.identityCertificate.doModelValidation());
        }
        if (this["attestationSignature"]) {
            issues.push(...this.attestationSignature.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResultValidator._fts_dataType = 'VerificationResultValidator';
/**
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export class VerificationResult extends fhir.DomainResource {
    /**
     * Default constructor for VerificationResult - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'VerificationResult';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = [];
        }
        if (source['targetLocation']) {
            this.targetLocation = source.targetLocation.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.targetLocation = [];
        }
        if (source['need']) {
            this.need = new fhir.CodeableConcept(source.need);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['validationType']) {
            this.validationType = new fhir.CodeableConcept(source.validationType);
        }
        if (source['validationProcess']) {
            this.validationProcess = source.validationProcess.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.validationProcess = [];
        }
        if (source['frequency']) {
            this.frequency = new fhir.Timing(source.frequency);
        }
        if (source['lastPerformed']) {
            this.lastPerformed = new fhir.FhirDateTime({ value: source.lastPerformed });
        }
        if (source['nextScheduled']) {
            this.nextScheduled = new fhir.FhirDate({ value: source.nextScheduled });
        }
        if (source['failureAction']) {
            this.failureAction = new fhir.CodeableConcept(source.failureAction);
        }
        if (source['primarySource']) {
            this.primarySource = source.primarySource.map((x) => new fhir.VerificationResultPrimarySource(x));
        }
        else {
            this.primarySource = [];
        }
        if (source['attestation']) {
            this.attestation = new fhir.VerificationResultAttestation(source.attestation);
        }
        if (source['validator']) {
            this.validator = source.validator.map((x) => new fhir.VerificationResultValidator(x));
        }
        else {
            this.validator = [];
        }
    }
    /**
     * Preferred-bound Value Set for need (VerificationResult.need)
     */
    static needPreferredCoding() {
        return VerificationresultNeedCodings;
    }
    /**
     * Required-bound Value Set for status (VerificationResult.status)
     */
    static statusRequiredCoding() {
        return VerificationresultStatusCodings;
    }
    /**
     * Preferred-bound Value Set for validationType (VerificationResult.validationType)
     */
    static validationTypePreferredCoding() {
        return VerificationresultValidationTypeCodings;
    }
    /**
     * Preferred-bound Value Set for failureAction (VerificationResult.failureAction)
     */
    static failureActionPreferredCoding() {
        return VerificationresultFailureActionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"VerificationResult" fhir: VerificationResult.resourceType:"VerificationResult"', });
        }
        if (this["target"]) {
            this.target.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["targetLocation"]) {
            this.targetLocation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["need"]) {
            issues.push(...this.need.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:VerificationresultStatusCodeType fhir: VerificationResult.status:code', });
        }
        if (this["statusDate"]) {
            issues.push(...this.statusDate.doModelValidation());
        }
        if (this["validationType"]) {
            issues.push(...this.validationType.doModelValidation());
        }
        if (this["validationProcess"]) {
            this.validationProcess.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["frequency"]) {
            issues.push(...this.frequency.doModelValidation());
        }
        if (this["lastPerformed"]) {
            issues.push(...this.lastPerformed.doModelValidation());
        }
        if (this["nextScheduled"]) {
            issues.push(...this.nextScheduled.doModelValidation());
        }
        if (this["failureAction"]) {
            issues.push(...this.failureAction.doModelValidation());
        }
        if (this["primarySource"]) {
            this.primarySource.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["attestation"]) {
            issues.push(...this.attestation.doModelValidation());
        }
        if (this["validator"]) {
            this.validator.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
VerificationResult._fts_dataType = 'VerificationResult';
//# sourceMappingURL=data:application/json;base64,