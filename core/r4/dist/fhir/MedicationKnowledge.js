// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationKnowledge
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationknowledgeStatusCodings, } from '../fhirValueSets/MedicationknowledgeStatusCodings.js';
/**
 * Associated or related knowledge about a medication.
 */
export class MedicationKnowledgeRelatedMedicationKnowledge extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.relatedMedicationKnowledge.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference', });
        }
        else if (!Array.isArray(this.reference)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference', });
        }
        else if (this.reference.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference', });
        }
        if (this["reference"]) {
            this.reference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRelatedMedicationKnowledge._fts_dataType = 'MedicationKnowledgeRelatedMedicationKnowledge';
/**
 * Associated documentation about the medication.
 */
export class MedicationKnowledgeMonograph extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonograph - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMonograph._fts_dataType = 'MedicationKnowledgeMonograph';
/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationKnowledgeIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else {
            this.item = null;
        }
        if (source['isActive']) {
            this.isActive = new fhir.FhirBoolean({ value: source.isActive });
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item: fhir: MedicationKnowledge.ingredient.item[x]:', });
        }
        if (this["isActive"]) {
            issues.push(...this.isActive.doModelValidation());
        }
        if (this["strength"]) {
            issues.push(...this.strength.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeIngredient._fts_dataType = 'MedicationKnowledgeIngredient';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.ingredient.item[x]
 */
MedicationKnowledgeIngredient._fts_itemIsChoice = true;
/**
 * The price of the medication.
 */
export class MedicationKnowledgeCost extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['source']) {
            this.source = new fhir.FhirString({ value: source.source });
        }
        if (source['cost']) {
            this.cost = new fhir.Money(source.cost);
        }
        else {
            this.cost = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.cost.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (!this['cost']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property cost:fhir.Money fhir: MedicationKnowledge.cost.cost:Money', });
        }
        if (this["cost"]) {
            issues.push(...this.cost.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeCost._fts_dataType = 'MedicationKnowledgeCost';
/**
 * The program under which the medication is reviewed.
 */
export class MedicationKnowledgeMonitoringProgram extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonitoringProgram - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMonitoringProgram._fts_dataType = 'MedicationKnowledgeMonitoringProgram';
/**
 * Dosage for the medication for the specific guidelines.
 */
export class MedicationKnowledgeAdministrationGuidelinesDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.administrationGuidelines.dosage.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['dosage']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage', });
        }
        else if (!Array.isArray(this.dosage)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage', });
        }
        else if (this.dosage.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage', });
        }
        if (this["dosage"]) {
            this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelinesDosage._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesDosage';
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['characteristic']) {
            this.characteristic = source.characteristic;
        }
        else if (source['characteristicCodeableConcept']) {
            this.characteristic = new fhir.CodeableConcept(source.characteristicCodeableConcept);
        }
        else if (source['characteristicQuantity']) {
            this.characteristic = new fhir.Quantity(source.characteristicQuantity);
        }
        else {
            this.characteristic = null;
        }
        if (source['value']) {
            this.value = source.value.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.value = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['characteristic']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property characteristic: fhir: MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]:', });
        }
        if (this["value"]) {
            this.value.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]
 */
MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_characteristicIsChoice = true;
/**
 * Guidelines for the administration of the medication.
 */
export class MedicationKnowledgeAdministrationGuidelines extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelines - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesDosage(x));
        }
        else {
            this.dosage = [];
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference);
        }
        if (source['patientCharacteristics']) {
            this.patientCharacteristics = source.patientCharacteristics.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x));
        }
        else {
            this.patientCharacteristics = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["dosage"]) {
            this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["patientCharacteristics"]) {
            this.patientCharacteristics.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelines._fts_dataType = 'MedicationKnowledgeAdministrationGuidelines';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.indication[x]
 */
MedicationKnowledgeAdministrationGuidelines._fts_indicationIsChoice = true;
/**
 * Categorization of the medication within a formulary or classification system.
 */
export class MedicationKnowledgeMedicineClassification extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMedicineClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classification = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.medicineClassification.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["classification"]) {
            this.classification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMedicineClassification._fts_dataType = 'MedicationKnowledgeMedicineClassification';
/**
 * Information that only applies to packages (not products).
 */
export class MedicationKnowledgePackaging extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgePackaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgePackaging._fts_dataType = 'MedicationKnowledgePackaging';
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export class MedicationKnowledgeDrugCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeDrugCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeDrugCharacteristic._fts_dataType = 'MedicationKnowledgeDrugCharacteristic';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.drugCharacteristic.value[x]
 */
MedicationKnowledgeDrugCharacteristic._fts_valueIsChoice = true;
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export class MedicationKnowledgeRegulatorySubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowed });
        }
        else {
            this.allowed = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.substitution.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['allowed']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property allowed:fhir.FhirBoolean fhir: MedicationKnowledge.regulatory.substitution.allowed:boolean', });
        }
        if (this["allowed"]) {
            issues.push(...this.allowed.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatorySubstitution._fts_dataType = 'MedicationKnowledgeRegulatorySubstitution';
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
export class MedicationKnowledgeRegulatorySchedule extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySchedule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['schedule']) {
            this.schedule = new fhir.CodeableConcept(source.schedule);
        }
        else {
            this.schedule = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['schedule']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property schedule:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.schedule.schedule:CodeableConcept', });
        }
        if (this["schedule"]) {
            issues.push(...this.schedule.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatorySchedule._fts_dataType = 'MedicationKnowledgeRegulatorySchedule';
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export class MedicationKnowledgeRegulatoryMaxDispense extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatoryMaxDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['period']) {
            this.period = new fhir.Duration(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['quantity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property quantity:fhir.Quantity fhir: MedicationKnowledge.regulatory.maxDispense.quantity:Quantity', });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatoryMaxDispense._fts_dataType = 'MedicationKnowledgeRegulatoryMaxDispense';
/**
 * Regulatory information about a medication.
 */
export class MedicationKnowledgeRegulatory extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['regulatoryAuthority']) {
            this.regulatoryAuthority = new fhir.Reference(source.regulatoryAuthority);
        }
        else {
            this.regulatoryAuthority = null;
        }
        if (source['substitution']) {
            this.substitution = source.substitution.map((x) => new fhir.MedicationKnowledgeRegulatorySubstitution(x));
        }
        else {
            this.substitution = [];
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.MedicationKnowledgeRegulatorySchedule(x));
        }
        else {
            this.schedule = [];
        }
        if (source['maxDispense']) {
            this.maxDispense = new fhir.MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['regulatoryAuthority']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property regulatoryAuthority:fhir.Reference fhir: MedicationKnowledge.regulatory.regulatoryAuthority:Reference', });
        }
        if (this["regulatoryAuthority"]) {
            issues.push(...this.regulatoryAuthority.doModelValidation());
        }
        if (this["substitution"]) {
            this.substitution.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["schedule"]) {
            this.schedule.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["maxDispense"]) {
            issues.push(...this.maxDispense.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatory._fts_dataType = 'MedicationKnowledgeRegulatory';
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
export class MedicationKnowledgeKinetics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeKinetics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['areaUnderCurve']) {
            this.areaUnderCurve = source.areaUnderCurve.map((x) => new fhir.Quantity(x));
        }
        else {
            this.areaUnderCurve = [];
        }
        if (source['lethalDose50']) {
            this.lethalDose50 = source.lethalDose50.map((x) => new fhir.Quantity(x));
        }
        else {
            this.lethalDose50 = [];
        }
        if (source['halfLifePeriod']) {
            this.halfLifePeriod = new fhir.Duration(source.halfLifePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["areaUnderCurve"]) {
            this.areaUnderCurve.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["lethalDose50"]) {
            this.lethalDose50.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["halfLifePeriod"]) {
            issues.push(...this.halfLifePeriod.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeKinetics._fts_dataType = 'MedicationKnowledgeKinetics';
/**
 * Information about a medication that is used to support knowledge.
 */
export class MedicationKnowledge extends fhir.DomainResource {
    /**
     * Default constructor for MedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationKnowledge';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['doseForm']) {
            this.doseForm = new fhir.CodeableConcept(source.doseForm);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.synonym = [];
        }
        if (source['relatedMedicationKnowledge']) {
            this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map((x) => new fhir.MedicationKnowledgeRelatedMedicationKnowledge(x));
        }
        else {
            this.relatedMedicationKnowledge = [];
        }
        if (source['associatedMedication']) {
            this.associatedMedication = source.associatedMedication.map((x) => new fhir.Reference(x));
        }
        else {
            this.associatedMedication = [];
        }
        if (source['productType']) {
            this.productType = source.productType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.productType = [];
        }
        if (source['monograph']) {
            this.monograph = source.monograph.map((x) => new fhir.MedicationKnowledgeMonograph(x));
        }
        else {
            this.monograph = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationKnowledgeIngredient(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['preparationInstruction']) {
            this.preparationInstruction = new fhir.FhirMarkdown({ value: source.preparationInstruction });
        }
        if (source['intendedRoute']) {
            this.intendedRoute = source.intendedRoute.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.intendedRoute = [];
        }
        if (source['cost']) {
            this.cost = source.cost.map((x) => new fhir.MedicationKnowledgeCost(x));
        }
        else {
            this.cost = [];
        }
        if (source['monitoringProgram']) {
            this.monitoringProgram = source.monitoringProgram.map((x) => new fhir.MedicationKnowledgeMonitoringProgram(x));
        }
        else {
            this.monitoringProgram = [];
        }
        if (source['administrationGuidelines']) {
            this.administrationGuidelines = source.administrationGuidelines.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelines(x));
        }
        else {
            this.administrationGuidelines = [];
        }
        if (source['medicineClassification']) {
            this.medicineClassification = source.medicineClassification.map((x) => new fhir.MedicationKnowledgeMedicineClassification(x));
        }
        else {
            this.medicineClassification = [];
        }
        if (source['packaging']) {
            this.packaging = new fhir.MedicationKnowledgePackaging(source.packaging);
        }
        if (source['drugCharacteristic']) {
            this.drugCharacteristic = source.drugCharacteristic.map((x) => new fhir.MedicationKnowledgeDrugCharacteristic(x));
        }
        else {
            this.drugCharacteristic = [];
        }
        if (source['contraindication']) {
            this.contraindication = source.contraindication.map((x) => new fhir.Reference(x));
        }
        else {
            this.contraindication = [];
        }
        if (source['regulatory']) {
            this.regulatory = source.regulatory.map((x) => new fhir.MedicationKnowledgeRegulatory(x));
        }
        else {
            this.regulatory = [];
        }
        if (source['kinetics']) {
            this.kinetics = source.kinetics.map((x) => new fhir.MedicationKnowledgeKinetics(x));
        }
        else {
            this.kinetics = [];
        }
    }
    /**
     * Required-bound Value Set for status (MedicationKnowledge.status)
     */
    static statusRequiredCoding() {
        return MedicationknowledgeStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicationKnowledge" fhir: MedicationKnowledge.resourceType:"MedicationKnowledge"', });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["manufacturer"]) {
            issues.push(...this.manufacturer.doModelValidation());
        }
        if (this["doseForm"]) {
            issues.push(...this.doseForm.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        if (this["synonym"]) {
            this.synonym.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedMedicationKnowledge"]) {
            this.relatedMedicationKnowledge.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["associatedMedication"]) {
            this.associatedMedication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["productType"]) {
            this.productType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["monograph"]) {
            this.monograph.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["preparationInstruction"]) {
            issues.push(...this.preparationInstruction.doModelValidation());
        }
        if (this["intendedRoute"]) {
            this.intendedRoute.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["cost"]) {
            this.cost.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["monitoringProgram"]) {
            this.monitoringProgram.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["administrationGuidelines"]) {
            this.administrationGuidelines.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["medicineClassification"]) {
            this.medicineClassification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["packaging"]) {
            issues.push(...this.packaging.doModelValidation());
        }
        if (this["drugCharacteristic"]) {
            this.drugCharacteristic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contraindication"]) {
            this.contraindication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["regulatory"]) {
            this.regulatory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["kinetics"]) {
            this.kinetics.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledge._fts_dataType = 'MedicationKnowledge';
//# sourceMappingURL=data:application/json;base64,