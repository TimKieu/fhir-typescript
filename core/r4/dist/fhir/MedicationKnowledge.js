// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationKnowledge
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationknowledgeStatusVsValidation } from '../fhirValueSets/MedicationknowledgeStatusVsValidation.js';
/**
 * Associated or related knowledge about a medication.
 */
export class MedicationKnowledgeRelatedMedicationKnowledge extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.relatedMedicationKnowledge';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRA('reference', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRelatedMedicationKnowledge._fts_dataType = 'MedicationKnowledgeRelatedMedicationKnowledge';
/**
 * Associated documentation about the medication.
 */
export class MedicationKnowledgeMonograph extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonograph - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.monograph';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMonograph._fts_dataType = 'MedicationKnowledgeMonograph';
/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationKnowledgeIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else {
            this.item = null;
        }
        if (source['isActive']) {
            this.isActive = new fhir.FhirBoolean({ value: source.isActive });
        }
        if (source['_isActive']) {
            if (this.isActive) {
                this.isActive.addExtendedProperties(source._isActive);
            }
            else {
                this.isActive = new fhir.FhirBoolean(source._isActive);
            }
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.ingredient';
        }
        iss.push(...this.vRS('item', exp));
        iss.push(...this.vOS('isActive', exp));
        iss.push(...this.vOS('strength', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeIngredient._fts_dataType = 'MedicationKnowledgeIngredient';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.ingredient.item[x]
 */
MedicationKnowledgeIngredient._fts_itemIsChoice = true;
/**
 * The price of the medication.
 */
export class MedicationKnowledgeCost extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['source']) {
            this.source = new fhir.FhirString({ value: source.source });
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirString(source._source);
            }
        }
        if (source['cost']) {
            this.cost = new fhir.Money(source.cost);
        }
        else {
            this.cost = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.cost';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vRS('cost', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeCost._fts_dataType = 'MedicationKnowledgeCost';
/**
 * The program under which the medication is reviewed.
 */
export class MedicationKnowledgeMonitoringProgram extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonitoringProgram - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.monitoringProgram';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('name', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMonitoringProgram._fts_dataType = 'MedicationKnowledgeMonitoringProgram';
/**
 * Dosage for the medication for the specific guidelines.
 */
export class MedicationKnowledgeAdministrationGuidelinesDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.administrationGuidelines.dosage';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRA('dosage', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelinesDosage._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesDosage';
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['characteristic']) {
            this.characteristic = source.characteristic;
        }
        else if (source['characteristicCodeableConcept']) {
            this.characteristic = new fhir.CodeableConcept(source.characteristicCodeableConcept);
        }
        else if (source['characteristicQuantity']) {
            this.characteristic = new fhir.Quantity(source.characteristicQuantity);
        }
        else {
            this.characteristic = null;
        }
        if (source['value']) {
            this.value = source.value.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.value = [];
        }
        if (source['_value']) {
            source._value.forEach((x, i) => {
                if (this.value.length >= i) {
                    if (x) {
                        this.value[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.value.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.administrationGuidelines.patientCharacteristics';
        }
        iss.push(...this.vRS('characteristic', exp));
        iss.push(...this.vOA('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]
 */
MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_characteristicIsChoice = true;
/**
 * Guidelines for the administration of the medication.
 */
export class MedicationKnowledgeAdministrationGuidelines extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelines - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesDosage(x));
        }
        else {
            this.dosage = [];
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference);
        }
        if (source['patientCharacteristics']) {
            this.patientCharacteristics = source.patientCharacteristics.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x));
        }
        else {
            this.patientCharacteristics = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.administrationGuidelines';
        }
        iss.push(...this.vOA('dosage', exp));
        iss.push(...this.vOS('indication', exp));
        iss.push(...this.vOA('patientCharacteristics', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelines._fts_dataType = 'MedicationKnowledgeAdministrationGuidelines';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.indication[x]
 */
MedicationKnowledgeAdministrationGuidelines._fts_indicationIsChoice = true;
/**
 * Categorization of the medication within a formulary or classification system.
 */
export class MedicationKnowledgeMedicineClassification extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMedicineClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classification = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.medicineClassification';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOA('classification', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMedicineClassification._fts_dataType = 'MedicationKnowledgeMedicineClassification';
/**
 * Information that only applies to packages (not products).
 */
export class MedicationKnowledgePackaging extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgePackaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.packaging';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('quantity', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgePackaging._fts_dataType = 'MedicationKnowledgePackaging';
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export class MedicationKnowledgeDrugCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeDrugCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.drugCharacteristic';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeDrugCharacteristic._fts_dataType = 'MedicationKnowledgeDrugCharacteristic';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.drugCharacteristic.value[x]
 */
MedicationKnowledgeDrugCharacteristic._fts_valueIsChoice = true;
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export class MedicationKnowledgeRegulatorySubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowed });
        }
        else {
            this.allowed = null;
        }
        if (source['_allowed']) {
            if (this.allowed) {
                this.allowed.addExtendedProperties(source._allowed);
            }
            else {
                this.allowed = new fhir.FhirBoolean(source._allowed);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.regulatory.substitution';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('allowed', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatorySubstitution._fts_dataType = 'MedicationKnowledgeRegulatorySubstitution';
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
export class MedicationKnowledgeRegulatorySchedule extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySchedule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['schedule']) {
            this.schedule = new fhir.CodeableConcept(source.schedule);
        }
        else {
            this.schedule = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.regulatory.schedule';
        }
        iss.push(...this.vRS('schedule', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatorySchedule._fts_dataType = 'MedicationKnowledgeRegulatorySchedule';
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export class MedicationKnowledgeRegulatoryMaxDispense extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatoryMaxDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['period']) {
            this.period = new fhir.Duration(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.regulatory.maxDispense';
        }
        iss.push(...this.vRS('quantity', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatoryMaxDispense._fts_dataType = 'MedicationKnowledgeRegulatoryMaxDispense';
/**
 * Regulatory information about a medication.
 */
export class MedicationKnowledgeRegulatory extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['regulatoryAuthority']) {
            this.regulatoryAuthority = new fhir.Reference(source.regulatoryAuthority);
        }
        else {
            this.regulatoryAuthority = null;
        }
        if (source['substitution']) {
            this.substitution = source.substitution.map((x) => new fhir.MedicationKnowledgeRegulatorySubstitution(x));
        }
        else {
            this.substitution = [];
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.MedicationKnowledgeRegulatorySchedule(x));
        }
        else {
            this.schedule = [];
        }
        if (source['maxDispense']) {
            this.maxDispense = new fhir.MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.regulatory';
        }
        iss.push(...this.vRS('regulatoryAuthority', exp));
        iss.push(...this.vOA('substitution', exp));
        iss.push(...this.vOA('schedule', exp));
        iss.push(...this.vOS('maxDispense', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatory._fts_dataType = 'MedicationKnowledgeRegulatory';
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
export class MedicationKnowledgeKinetics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeKinetics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['areaUnderCurve']) {
            this.areaUnderCurve = source.areaUnderCurve.map((x) => new fhir.Quantity(x));
        }
        else {
            this.areaUnderCurve = [];
        }
        if (source['lethalDose50']) {
            this.lethalDose50 = source.lethalDose50.map((x) => new fhir.Quantity(x));
        }
        else {
            this.lethalDose50 = [];
        }
        if (source['halfLifePeriod']) {
            this.halfLifePeriod = new fhir.Duration(source.halfLifePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge.kinetics';
        }
        iss.push(...this.vOA('areaUnderCurve', exp));
        iss.push(...this.vOA('lethalDose50', exp));
        iss.push(...this.vOS('halfLifePeriod', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeKinetics._fts_dataType = 'MedicationKnowledgeKinetics';
/**
 * Information about a medication that is used to support knowledge.
 */
export class MedicationKnowledge extends fhir.DomainResource {
    /**
     * Default constructor for MedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationKnowledge';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['doseForm']) {
            this.doseForm = new fhir.CodeableConcept(source.doseForm);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.synonym = [];
        }
        if (source['_synonym']) {
            source._synonym.forEach((x, i) => {
                if (this.synonym.length >= i) {
                    if (x) {
                        this.synonym[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.synonym.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['relatedMedicationKnowledge']) {
            this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map((x) => new fhir.MedicationKnowledgeRelatedMedicationKnowledge(x));
        }
        else {
            this.relatedMedicationKnowledge = [];
        }
        if (source['associatedMedication']) {
            this.associatedMedication = source.associatedMedication.map((x) => new fhir.Reference(x));
        }
        else {
            this.associatedMedication = [];
        }
        if (source['productType']) {
            this.productType = source.productType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.productType = [];
        }
        if (source['monograph']) {
            this.monograph = source.monograph.map((x) => new fhir.MedicationKnowledgeMonograph(x));
        }
        else {
            this.monograph = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationKnowledgeIngredient(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['preparationInstruction']) {
            this.preparationInstruction = new fhir.FhirMarkdown({ value: source.preparationInstruction });
        }
        if (source['_preparationInstruction']) {
            if (this.preparationInstruction) {
                this.preparationInstruction.addExtendedProperties(source._preparationInstruction);
            }
            else {
                this.preparationInstruction = new fhir.FhirMarkdown(source._preparationInstruction);
            }
        }
        if (source['intendedRoute']) {
            this.intendedRoute = source.intendedRoute.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.intendedRoute = [];
        }
        if (source['cost']) {
            this.cost = source.cost.map((x) => new fhir.MedicationKnowledgeCost(x));
        }
        else {
            this.cost = [];
        }
        if (source['monitoringProgram']) {
            this.monitoringProgram = source.monitoringProgram.map((x) => new fhir.MedicationKnowledgeMonitoringProgram(x));
        }
        else {
            this.monitoringProgram = [];
        }
        if (source['administrationGuidelines']) {
            this.administrationGuidelines = source.administrationGuidelines.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelines(x));
        }
        else {
            this.administrationGuidelines = [];
        }
        if (source['medicineClassification']) {
            this.medicineClassification = source.medicineClassification.map((x) => new fhir.MedicationKnowledgeMedicineClassification(x));
        }
        else {
            this.medicineClassification = [];
        }
        if (source['packaging']) {
            this.packaging = new fhir.MedicationKnowledgePackaging(source.packaging);
        }
        if (source['drugCharacteristic']) {
            this.drugCharacteristic = source.drugCharacteristic.map((x) => new fhir.MedicationKnowledgeDrugCharacteristic(x));
        }
        else {
            this.drugCharacteristic = [];
        }
        if (source['contraindication']) {
            this.contraindication = source.contraindication.map((x) => new fhir.Reference(x));
        }
        else {
            this.contraindication = [];
        }
        if (source['regulatory']) {
            this.regulatory = source.regulatory.map((x) => new fhir.MedicationKnowledgeRegulatory(x));
        }
        else {
            this.regulatory = [];
        }
        if (source['kinetics']) {
            this.kinetics = source.kinetics.map((x) => new fhir.MedicationKnowledgeKinetics(x));
        }
        else {
            this.kinetics = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationKnowledge';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOSV('status', exp, 'MedicationknowledgeStatus', MedicationknowledgeStatusVsValidation, 'r'));
        iss.push(...this.vOS('manufacturer', exp));
        iss.push(...this.vOS('doseForm', exp));
        iss.push(...this.vOS('amount', exp));
        iss.push(...this.vOA('synonym', exp));
        iss.push(...this.vOA('relatedMedicationKnowledge', exp));
        iss.push(...this.vOA('associatedMedication', exp));
        iss.push(...this.vOA('productType', exp));
        iss.push(...this.vOA('monograph', exp));
        iss.push(...this.vOA('ingredient', exp));
        iss.push(...this.vOS('preparationInstruction', exp));
        iss.push(...this.vOA('intendedRoute', exp));
        iss.push(...this.vOA('cost', exp));
        iss.push(...this.vOA('monitoringProgram', exp));
        iss.push(...this.vOA('administrationGuidelines', exp));
        iss.push(...this.vOA('medicineClassification', exp));
        iss.push(...this.vOS('packaging', exp));
        iss.push(...this.vOA('drugCharacteristic', exp));
        iss.push(...this.vOA('contraindication', exp));
        iss.push(...this.vOA('regulatory', exp));
        iss.push(...this.vOA('kinetics', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledge._fts_dataType = 'MedicationKnowledge';
//# sourceMappingURL=data:application/json;base64,