/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MedicationknowledgeStatusCodings } from '../fhirValueSets/MedicationknowledgeStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Ratio } from './Ratio.js';
import { FhirString } from './FhirString.js';
import { Money } from './Money.js';
import { Dosage } from './Dosage.js';
import { Quantity } from './Quantity.js';
import { FhirBase64Binary } from './FhirBase64Binary.js';
import { Duration } from './Duration.js';
import { FhirMarkdown } from './FhirMarkdown.js';

// <auto-generated/>
/**
 * Associated or related knowledge about a medication.
 */
var MedicationKnowledgeRelatedMedicationKnowledge = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeRelatedMedicationKnowledge, _super);
    /**
     * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeRelatedMedicationKnowledge(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['reference']) {
            _this.reference = source.reference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reference = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeRelatedMedicationKnowledge.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.relatedMedicationKnowledge.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['reference']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference', }));
        }
        else if (!Array.isArray(this.reference)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference', }));
        }
        else if (this.reference.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference', }));
        }
        if (this["reference"]) {
            this.reference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeRelatedMedicationKnowledge._fts_dataType = 'MedicationKnowledgeRelatedMedicationKnowledge';
    return MedicationKnowledgeRelatedMedicationKnowledge;
}(BackboneElement));
/**
 * Associated documentation about the medication.
 */
var MedicationKnowledgeMonograph = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeMonograph, _super);
    /**
     * Default constructor for MedicationKnowledgeMonograph - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeMonograph(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['source']) {
            _this.source = new Reference(source.source);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeMonograph.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["source"]) {
            (_b = outcome.issue).push.apply(_b, this.source.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeMonograph._fts_dataType = 'MedicationKnowledgeMonograph';
    return MedicationKnowledgeMonograph;
}(BackboneElement));
/**
 * Identifies a particular constituent of interest in the product.
 */
var MedicationKnowledgeIngredient = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeIngredient, _super);
    /**
     * Default constructor for MedicationKnowledgeIngredient - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeIngredient(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['item']) {
            _this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            _this.item = new CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            _this.item = new Reference(source.itemReference);
        }
        else {
            _this.item = null;
        }
        if (source['isActive']) {
            _this.isActive = new FhirBoolean({ value: source.isActive });
        }
        if (source['strength']) {
            _this.strength = new Ratio(source.strength);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeIngredient.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['item']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property item: fhir: MedicationKnowledge.ingredient.item[x]:', }));
        }
        if (this["isActive"]) {
            (_a = outcome.issue).push.apply(_a, this.isActive.doModelValidation().issue);
        }
        if (this["strength"]) {
            (_b = outcome.issue).push.apply(_b, this.strength.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeIngredient._fts_dataType = 'MedicationKnowledgeIngredient';
    /**
     * Internal flag to properly serialize choice-type element MedicationKnowledge.ingredient.item[x]
     */
    MedicationKnowledgeIngredient._fts_itemIsChoice = true;
    return MedicationKnowledgeIngredient;
}(BackboneElement));
/**
 * The price of the medication.
 */
var MedicationKnowledgeCost = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeCost, _super);
    /**
     * Default constructor for MedicationKnowledgeCost - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeCost(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['source']) {
            _this.source = new FhirString({ value: source.source });
        }
        if (source['cost']) {
            _this.cost = new Money(source.cost);
        }
        else {
            _this.cost = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeCost.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.cost.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["source"]) {
            (_b = outcome.issue).push.apply(_b, this.source.doModelValidation().issue);
        }
        if (!this['cost']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property cost:fhir.Money fhir: MedicationKnowledge.cost.cost:Money', }));
        }
        if (this["cost"]) {
            (_c = outcome.issue).push.apply(_c, this.cost.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeCost._fts_dataType = 'MedicationKnowledgeCost';
    return MedicationKnowledgeCost;
}(BackboneElement));
/**
 * The program under which the medication is reviewed.
 */
var MedicationKnowledgeMonitoringProgram = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeMonitoringProgram, _super);
    /**
     * Default constructor for MedicationKnowledgeMonitoringProgram - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeMonitoringProgram(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeMonitoringProgram.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeMonitoringProgram._fts_dataType = 'MedicationKnowledgeMonitoringProgram';
    return MedicationKnowledgeMonitoringProgram;
}(BackboneElement));
/**
 * Dosage for the medication for the specific guidelines.
 */
var MedicationKnowledgeAdministrationGuidelinesDosage = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeAdministrationGuidelinesDosage, _super);
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeAdministrationGuidelinesDosage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['dosage']) {
            _this.dosage = source.dosage.map(function (x) { return new Dosage(x); });
        }
        else {
            _this.dosage = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeAdministrationGuidelinesDosage.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.administrationGuidelines.dosage.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['dosage']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage', }));
        }
        else if (!Array.isArray(this.dosage)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage', }));
        }
        else if (this.dosage.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage', }));
        }
        if (this["dosage"]) {
            this.dosage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeAdministrationGuidelinesDosage._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesDosage';
    return MedicationKnowledgeAdministrationGuidelinesDosage;
}(BackboneElement));
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
var MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, _super);
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['characteristic']) {
            _this.characteristic = source.characteristic;
        }
        else if (source['characteristicCodeableConcept']) {
            _this.characteristic = new CodeableConcept(source.characteristicCodeableConcept);
        }
        else if (source['characteristicQuantity']) {
            _this.characteristic = new Quantity(source.characteristicQuantity);
        }
        else {
            _this.characteristic = null;
        }
        if (source['value']) {
            _this.value = source.value.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.value = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['characteristic']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property characteristic: fhir: MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]:', }));
        }
        if (this["value"]) {
            this.value.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics';
    /**
     * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]
     */
    MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_characteristicIsChoice = true;
    return MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics;
}(BackboneElement));
/**
 * Guidelines for the administration of the medication.
 */
var MedicationKnowledgeAdministrationGuidelines = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeAdministrationGuidelines, _super);
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelines - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeAdministrationGuidelines(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['dosage']) {
            _this.dosage = source.dosage.map(function (x) { return new MedicationKnowledgeAdministrationGuidelinesDosage(x); });
        }
        else {
            _this.dosage = [];
        }
        if (source['indication']) {
            _this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            _this.indication = new CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            _this.indication = new Reference(source.indicationReference);
        }
        if (source['patientCharacteristics']) {
            _this.patientCharacteristics = source.patientCharacteristics.map(function (x) { return new MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x); });
        }
        else {
            _this.patientCharacteristics = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeAdministrationGuidelines.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["dosage"]) {
            this.dosage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["patientCharacteristics"]) {
            this.patientCharacteristics.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeAdministrationGuidelines._fts_dataType = 'MedicationKnowledgeAdministrationGuidelines';
    /**
     * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.indication[x]
     */
    MedicationKnowledgeAdministrationGuidelines._fts_indicationIsChoice = true;
    return MedicationKnowledgeAdministrationGuidelines;
}(BackboneElement));
/**
 * Categorization of the medication within a formulary or classification system.
 */
var MedicationKnowledgeMedicineClassification = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeMedicineClassification, _super);
    /**
     * Default constructor for MedicationKnowledgeMedicineClassification - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeMedicineClassification(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['classification']) {
            _this.classification = source.classification.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.classification = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeMedicineClassification.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.medicineClassification.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["classification"]) {
            this.classification.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeMedicineClassification._fts_dataType = 'MedicationKnowledgeMedicineClassification';
    return MedicationKnowledgeMedicineClassification;
}(BackboneElement));
/**
 * Information that only applies to packages (not products).
 */
var MedicationKnowledgePackaging = /** @class */ (function (_super) {
    __extends(MedicationKnowledgePackaging, _super);
    /**
     * Default constructor for MedicationKnowledgePackaging - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgePackaging(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgePackaging.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgePackaging._fts_dataType = 'MedicationKnowledgePackaging';
    return MedicationKnowledgePackaging;
}(BackboneElement));
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
var MedicationKnowledgeDrugCharacteristic = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeDrugCharacteristic, _super);
    /**
     * Default constructor for MedicationKnowledgeDrugCharacteristic - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeDrugCharacteristic(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            _this.value = new CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueBase64Binary']) {
            _this.value = new FhirBase64Binary({ value: source.valueBase64Binary });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeDrugCharacteristic.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeDrugCharacteristic._fts_dataType = 'MedicationKnowledgeDrugCharacteristic';
    /**
     * Internal flag to properly serialize choice-type element MedicationKnowledge.drugCharacteristic.value[x]
     */
    MedicationKnowledgeDrugCharacteristic._fts_valueIsChoice = true;
    return MedicationKnowledgeDrugCharacteristic;
}(BackboneElement));
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
var MedicationKnowledgeRegulatorySubstitution = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeRegulatorySubstitution, _super);
    /**
     * Default constructor for MedicationKnowledgeRegulatorySubstitution - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeRegulatorySubstitution(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['allowed']) {
            _this.allowed = new FhirBoolean({ value: source.allowed });
        }
        else {
            _this.allowed = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeRegulatorySubstitution.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.substitution.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['allowed']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property allowed:fhir.FhirBoolean fhir: MedicationKnowledge.regulatory.substitution.allowed:boolean', }));
        }
        if (this["allowed"]) {
            (_b = outcome.issue).push.apply(_b, this.allowed.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeRegulatorySubstitution._fts_dataType = 'MedicationKnowledgeRegulatorySubstitution';
    return MedicationKnowledgeRegulatorySubstitution;
}(BackboneElement));
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
var MedicationKnowledgeRegulatorySchedule = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeRegulatorySchedule, _super);
    /**
     * Default constructor for MedicationKnowledgeRegulatorySchedule - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeRegulatorySchedule(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['schedule']) {
            _this.schedule = new CodeableConcept(source.schedule);
        }
        else {
            _this.schedule = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeRegulatorySchedule.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['schedule']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property schedule:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.schedule.schedule:CodeableConcept', }));
        }
        if (this["schedule"]) {
            (_a = outcome.issue).push.apply(_a, this.schedule.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeRegulatorySchedule._fts_dataType = 'MedicationKnowledgeRegulatorySchedule';
    return MedicationKnowledgeRegulatorySchedule;
}(BackboneElement));
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
var MedicationKnowledgeRegulatoryMaxDispense = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeRegulatoryMaxDispense, _super);
    /**
     * Default constructor for MedicationKnowledgeRegulatoryMaxDispense - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeRegulatoryMaxDispense(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        else {
            _this.quantity = null;
        }
        if (source['period']) {
            _this.period = new Duration(source.period);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeRegulatoryMaxDispense.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['quantity']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property quantity:fhir.Quantity fhir: MedicationKnowledge.regulatory.maxDispense.quantity:Quantity', }));
        }
        if (this["quantity"]) {
            (_a = outcome.issue).push.apply(_a, this.quantity.doModelValidation().issue);
        }
        if (this["period"]) {
            (_b = outcome.issue).push.apply(_b, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeRegulatoryMaxDispense._fts_dataType = 'MedicationKnowledgeRegulatoryMaxDispense';
    return MedicationKnowledgeRegulatoryMaxDispense;
}(BackboneElement));
/**
 * Regulatory information about a medication.
 */
var MedicationKnowledgeRegulatory = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeRegulatory, _super);
    /**
     * Default constructor for MedicationKnowledgeRegulatory - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeRegulatory(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['regulatoryAuthority']) {
            _this.regulatoryAuthority = new Reference(source.regulatoryAuthority);
        }
        else {
            _this.regulatoryAuthority = null;
        }
        if (source['substitution']) {
            _this.substitution = source.substitution.map(function (x) { return new MedicationKnowledgeRegulatorySubstitution(x); });
        }
        else {
            _this.substitution = [];
        }
        if (source['schedule']) {
            _this.schedule = source.schedule.map(function (x) { return new MedicationKnowledgeRegulatorySchedule(x); });
        }
        else {
            _this.schedule = [];
        }
        if (source['maxDispense']) {
            _this.maxDispense = new MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeRegulatory.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['regulatoryAuthority']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property regulatoryAuthority:fhir.Reference fhir: MedicationKnowledge.regulatory.regulatoryAuthority:Reference', }));
        }
        if (this["regulatoryAuthority"]) {
            (_a = outcome.issue).push.apply(_a, this.regulatoryAuthority.doModelValidation().issue);
        }
        if (this["substitution"]) {
            this.substitution.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["schedule"]) {
            this.schedule.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["maxDispense"]) {
            (_b = outcome.issue).push.apply(_b, this.maxDispense.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeRegulatory._fts_dataType = 'MedicationKnowledgeRegulatory';
    return MedicationKnowledgeRegulatory;
}(BackboneElement));
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
var MedicationKnowledgeKinetics = /** @class */ (function (_super) {
    __extends(MedicationKnowledgeKinetics, _super);
    /**
     * Default constructor for MedicationKnowledgeKinetics - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledgeKinetics(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['areaUnderCurve']) {
            _this.areaUnderCurve = source.areaUnderCurve.map(function (x) { return new Quantity(x); });
        }
        else {
            _this.areaUnderCurve = [];
        }
        if (source['lethalDose50']) {
            _this.lethalDose50 = source.lethalDose50.map(function (x) { return new Quantity(x); });
        }
        else {
            _this.lethalDose50 = [];
        }
        if (source['halfLifePeriod']) {
            _this.halfLifePeriod = new Duration(source.halfLifePeriod);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledgeKinetics.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["areaUnderCurve"]) {
            this.areaUnderCurve.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["lethalDose50"]) {
            this.lethalDose50.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["halfLifePeriod"]) {
            (_a = outcome.issue).push.apply(_a, this.halfLifePeriod.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledgeKinetics._fts_dataType = 'MedicationKnowledgeKinetics';
    return MedicationKnowledgeKinetics;
}(BackboneElement));
/**
 * Information about a medication that is used to support knowledge.
 */
var MedicationKnowledge = /** @class */ (function (_super) {
    __extends(MedicationKnowledge, _super);
    /**
     * Default constructor for MedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    function MedicationKnowledge(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicationKnowledge';
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['manufacturer']) {
            _this.manufacturer = new Reference(source.manufacturer);
        }
        if (source['doseForm']) {
            _this.doseForm = new CodeableConcept(source.doseForm);
        }
        if (source['amount']) {
            _this.amount = new Quantity(source.amount);
        }
        if (source['synonym']) {
            _this.synonym = source.synonym.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.synonym = [];
        }
        if (source['relatedMedicationKnowledge']) {
            _this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map(function (x) { return new MedicationKnowledgeRelatedMedicationKnowledge(x); });
        }
        else {
            _this.relatedMedicationKnowledge = [];
        }
        if (source['associatedMedication']) {
            _this.associatedMedication = source.associatedMedication.map(function (x) { return new Reference(x); });
        }
        else {
            _this.associatedMedication = [];
        }
        if (source['productType']) {
            _this.productType = source.productType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.productType = [];
        }
        if (source['monograph']) {
            _this.monograph = source.monograph.map(function (x) { return new MedicationKnowledgeMonograph(x); });
        }
        else {
            _this.monograph = [];
        }
        if (source['ingredient']) {
            _this.ingredient = source.ingredient.map(function (x) { return new MedicationKnowledgeIngredient(x); });
        }
        else {
            _this.ingredient = [];
        }
        if (source['preparationInstruction']) {
            _this.preparationInstruction = new FhirMarkdown({ value: source.preparationInstruction });
        }
        if (source['intendedRoute']) {
            _this.intendedRoute = source.intendedRoute.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.intendedRoute = [];
        }
        if (source['cost']) {
            _this.cost = source.cost.map(function (x) { return new MedicationKnowledgeCost(x); });
        }
        else {
            _this.cost = [];
        }
        if (source['monitoringProgram']) {
            _this.monitoringProgram = source.monitoringProgram.map(function (x) { return new MedicationKnowledgeMonitoringProgram(x); });
        }
        else {
            _this.monitoringProgram = [];
        }
        if (source['administrationGuidelines']) {
            _this.administrationGuidelines = source.administrationGuidelines.map(function (x) { return new MedicationKnowledgeAdministrationGuidelines(x); });
        }
        else {
            _this.administrationGuidelines = [];
        }
        if (source['medicineClassification']) {
            _this.medicineClassification = source.medicineClassification.map(function (x) { return new MedicationKnowledgeMedicineClassification(x); });
        }
        else {
            _this.medicineClassification = [];
        }
        if (source['packaging']) {
            _this.packaging = new MedicationKnowledgePackaging(source.packaging);
        }
        if (source['drugCharacteristic']) {
            _this.drugCharacteristic = source.drugCharacteristic.map(function (x) { return new MedicationKnowledgeDrugCharacteristic(x); });
        }
        else {
            _this.drugCharacteristic = [];
        }
        if (source['contraindication']) {
            _this.contraindication = source.contraindication.map(function (x) { return new Reference(x); });
        }
        else {
            _this.contraindication = [];
        }
        if (source['regulatory']) {
            _this.regulatory = source.regulatory.map(function (x) { return new MedicationKnowledgeRegulatory(x); });
        }
        else {
            _this.regulatory = [];
        }
        if (source['kinetics']) {
            _this.kinetics = source.kinetics.map(function (x) { return new MedicationKnowledgeKinetics(x); });
        }
        else {
            _this.kinetics = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (MedicationKnowledge.status)
     */
    MedicationKnowledge.statusRequiredCoding = function () {
        return MedicationknowledgeStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationKnowledge.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicationKnowledge" fhir: MedicationKnowledge.resourceType:"MedicationKnowledge"', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            (_b = outcome.issue).push.apply(_b, this.manufacturer.doModelValidation().issue);
        }
        if (this["doseForm"]) {
            (_c = outcome.issue).push.apply(_c, this.doseForm.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_d = outcome.issue).push.apply(_d, this.amount.doModelValidation().issue);
        }
        if (this["synonym"]) {
            this.synonym.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedMedicationKnowledge"]) {
            this.relatedMedicationKnowledge.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["associatedMedication"]) {
            this.associatedMedication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["productType"]) {
            this.productType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["monograph"]) {
            this.monograph.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["preparationInstruction"]) {
            (_e = outcome.issue).push.apply(_e, this.preparationInstruction.doModelValidation().issue);
        }
        if (this["intendedRoute"]) {
            this.intendedRoute.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["cost"]) {
            this.cost.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["monitoringProgram"]) {
            this.monitoringProgram.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["administrationGuidelines"]) {
            this.administrationGuidelines.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["medicineClassification"]) {
            this.medicineClassification.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["packaging"]) {
            (_f = outcome.issue).push.apply(_f, this.packaging.doModelValidation().issue);
        }
        if (this["drugCharacteristic"]) {
            this.drugCharacteristic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["contraindication"]) {
            this.contraindication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["regulatory"]) {
            this.regulatory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["kinetics"]) {
            this.kinetics.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationKnowledge._fts_dataType = 'MedicationKnowledge';
    return MedicationKnowledge;
}(DomainResource));

export { MedicationKnowledge, MedicationKnowledgeAdministrationGuidelines, MedicationKnowledgeAdministrationGuidelinesDosage, MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, MedicationKnowledgeCost, MedicationKnowledgeDrugCharacteristic, MedicationKnowledgeIngredient, MedicationKnowledgeKinetics, MedicationKnowledgeMedicineClassification, MedicationKnowledgeMonitoringProgram, MedicationKnowledgeMonograph, MedicationKnowledgePackaging, MedicationKnowledgeRegulatory, MedicationKnowledgeRegulatoryMaxDispense, MedicationKnowledgeRegulatorySchedule, MedicationKnowledgeRegulatorySubstitution, MedicationKnowledgeRelatedMedicationKnowledge };
//# sourceMappingURL=MedicationKnowledge.js.map
