// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationKnowledge
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationknowledgeStatusCodes } from '../fhirValueSets/MedicationknowledgeStatusCodes.js';
/**
 * Associated or related knowledge about a medication.
 */
export class MedicationKnowledgeRelatedMedicationKnowledge extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRelatedMedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['reference']) {
            this.reference = source.reference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reference = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.relatedMedicationKnowledge.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['reference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference' });
        }
        else if (!Array.isArray(this.reference)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference' });
        }
        else if (this.reference.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property reference:fhir.Reference[] fhir: MedicationKnowledge.relatedMedicationKnowledge.reference:Reference' });
        }
        if (this["reference"]) {
            this.reference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRelatedMedicationKnowledge._fts_dataType = 'MedicationKnowledgeRelatedMedicationKnowledge';
/**
 * Associated documentation about the medication.
 */
export class MedicationKnowledgeMonograph extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonograph - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMonograph._fts_dataType = 'MedicationKnowledgeMonograph';
/**
 * Identifies a particular constituent of interest in the product.
 */
export class MedicationKnowledgeIngredient extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeIngredient - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else {
            this.item = null;
        }
        if (source['isActive']) {
            this.isActive = new fhir.FhirBoolean({ value: source.isActive });
        }
        if (source['_isActive']) {
            if (this.isActive) {
                this.isActive.addExtendedProperties(source._isActive);
            }
            else {
                this.isActive = new fhir.FhirBoolean(source._isActive);
            }
        }
        if (source['strength']) {
            this.strength = new fhir.Ratio(source.strength);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item: fhir: MedicationKnowledge.ingredient.item[x]:' });
        }
        if (this["isActive"]) {
            issues.push(...this.isActive.doModelValidation());
        }
        if (this["strength"]) {
            issues.push(...this.strength.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeIngredient._fts_dataType = 'MedicationKnowledgeIngredient';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.ingredient.item[x]
 */
MedicationKnowledgeIngredient._fts_itemIsChoice = true;
/**
 * The price of the medication.
 */
export class MedicationKnowledgeCost extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeCost - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['source']) {
            this.source = new fhir.FhirString({ value: source.source });
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirString(source._source);
            }
        }
        if (source['cost']) {
            this.cost = new fhir.Money(source.cost);
        }
        else {
            this.cost = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.cost.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (!this['cost']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property cost:fhir.Money fhir: MedicationKnowledge.cost.cost:Money' });
        }
        if (this["cost"]) {
            issues.push(...this.cost.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeCost._fts_dataType = 'MedicationKnowledgeCost';
/**
 * The program under which the medication is reviewed.
 */
export class MedicationKnowledgeMonitoringProgram extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMonitoringProgram - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMonitoringProgram._fts_dataType = 'MedicationKnowledgeMonitoringProgram';
/**
 * Dosage for the medication for the specific guidelines.
 */
export class MedicationKnowledgeAdministrationGuidelinesDosage extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesDosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.administrationGuidelines.dosage.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['dosage']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage' });
        }
        else if (!Array.isArray(this.dosage)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage' });
        }
        else if (this.dosage.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property dosage:fhir.Dosage[] fhir: MedicationKnowledge.administrationGuidelines.dosage.dosage:Dosage' });
        }
        if (this["dosage"]) {
            this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelinesDosage._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesDosage';
/**
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['characteristic']) {
            this.characteristic = source.characteristic;
        }
        else if (source['characteristicCodeableConcept']) {
            this.characteristic = new fhir.CodeableConcept(source.characteristicCodeableConcept);
        }
        else if (source['characteristicQuantity']) {
            this.characteristic = new fhir.Quantity(source.characteristicQuantity);
        }
        else {
            this.characteristic = null;
        }
        if (source['value']) {
            this.value = source.value.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.value = [];
        }
        if (source['_value']) {
            source._value.forEach((x, i) => {
                if (this.value.length >= i) {
                    if (x) {
                        this.value[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.value.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['characteristic']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property characteristic: fhir: MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]:' });
        }
        if (this["value"]) {
            this.value.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_dataType = 'MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic[x]
 */
MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics._fts_characteristicIsChoice = true;
/**
 * Guidelines for the administration of the medication.
 */
export class MedicationKnowledgeAdministrationGuidelines extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeAdministrationGuidelines - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesDosage(x));
        }
        else {
            this.dosage = [];
        }
        if (source['indication']) {
            this.indication = source.indication;
        }
        else if (source['indicationCodeableConcept']) {
            this.indication = new fhir.CodeableConcept(source.indicationCodeableConcept);
        }
        else if (source['indicationReference']) {
            this.indication = new fhir.Reference(source.indicationReference);
        }
        if (source['patientCharacteristics']) {
            this.patientCharacteristics = source.patientCharacteristics.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(x));
        }
        else {
            this.patientCharacteristics = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["dosage"]) {
            this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["patientCharacteristics"]) {
            this.patientCharacteristics.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeAdministrationGuidelines._fts_dataType = 'MedicationKnowledgeAdministrationGuidelines';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.administrationGuidelines.indication[x]
 */
MedicationKnowledgeAdministrationGuidelines._fts_indicationIsChoice = true;
/**
 * Categorization of the medication within a formulary or classification system.
 */
export class MedicationKnowledgeMedicineClassification extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeMedicineClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classification = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.medicineClassification.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["classification"]) {
            this.classification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeMedicineClassification._fts_dataType = 'MedicationKnowledgeMedicineClassification';
/**
 * Information that only applies to packages (not products).
 */
export class MedicationKnowledgePackaging extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgePackaging - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgePackaging._fts_dataType = 'MedicationKnowledgePackaging';
/**
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export class MedicationKnowledgeDrugCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeDrugCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueBase64Binary']) {
            this.value = new fhir.FhirBase64Binary({ value: source.valueBase64Binary });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeDrugCharacteristic._fts_dataType = 'MedicationKnowledgeDrugCharacteristic';
/**
 * Internal flag to properly serialize choice-type element MedicationKnowledge.drugCharacteristic.value[x]
 */
MedicationKnowledgeDrugCharacteristic._fts_valueIsChoice = true;
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export class MedicationKnowledgeRegulatorySubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowed });
        }
        else {
            this.allowed = null;
        }
        if (source['_allowed']) {
            if (this.allowed) {
                this.allowed.addExtendedProperties(source._allowed);
            }
            else {
                this.allowed = new fhir.FhirBoolean(source._allowed);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.substitution.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['allowed']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property allowed:fhir.FhirBoolean fhir: MedicationKnowledge.regulatory.substitution.allowed:boolean' });
        }
        if (this["allowed"]) {
            issues.push(...this.allowed.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatorySubstitution._fts_dataType = 'MedicationKnowledgeRegulatorySubstitution';
/**
 * Specifies the schedule of a medication in jurisdiction.
 */
export class MedicationKnowledgeRegulatorySchedule extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatorySchedule - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['schedule']) {
            this.schedule = new fhir.CodeableConcept(source.schedule);
        }
        else {
            this.schedule = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['schedule']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property schedule:fhir.CodeableConcept fhir: MedicationKnowledge.regulatory.schedule.schedule:CodeableConcept' });
        }
        if (this["schedule"]) {
            issues.push(...this.schedule.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatorySchedule._fts_dataType = 'MedicationKnowledgeRegulatorySchedule';
/**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export class MedicationKnowledgeRegulatoryMaxDispense extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatoryMaxDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['period']) {
            this.period = new fhir.Duration(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['quantity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property quantity:fhir.Quantity fhir: MedicationKnowledge.regulatory.maxDispense.quantity:Quantity' });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatoryMaxDispense._fts_dataType = 'MedicationKnowledgeRegulatoryMaxDispense';
/**
 * Regulatory information about a medication.
 */
export class MedicationKnowledgeRegulatory extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeRegulatory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['regulatoryAuthority']) {
            this.regulatoryAuthority = new fhir.Reference(source.regulatoryAuthority);
        }
        else {
            this.regulatoryAuthority = null;
        }
        if (source['substitution']) {
            this.substitution = source.substitution.map((x) => new fhir.MedicationKnowledgeRegulatorySubstitution(x));
        }
        else {
            this.substitution = [];
        }
        if (source['schedule']) {
            this.schedule = source.schedule.map((x) => new fhir.MedicationKnowledgeRegulatorySchedule(x));
        }
        else {
            this.schedule = [];
        }
        if (source['maxDispense']) {
            this.maxDispense = new fhir.MedicationKnowledgeRegulatoryMaxDispense(source.maxDispense);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['regulatoryAuthority']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property regulatoryAuthority:fhir.Reference fhir: MedicationKnowledge.regulatory.regulatoryAuthority:Reference' });
        }
        if (this["regulatoryAuthority"]) {
            issues.push(...this.regulatoryAuthority.doModelValidation());
        }
        if (this["substitution"]) {
            this.substitution.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["schedule"]) {
            this.schedule.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["maxDispense"]) {
            issues.push(...this.maxDispense.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeRegulatory._fts_dataType = 'MedicationKnowledgeRegulatory';
/**
 * The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
 */
export class MedicationKnowledgeKinetics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationKnowledgeKinetics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['areaUnderCurve']) {
            this.areaUnderCurve = source.areaUnderCurve.map((x) => new fhir.Quantity(x));
        }
        else {
            this.areaUnderCurve = [];
        }
        if (source['lethalDose50']) {
            this.lethalDose50 = source.lethalDose50.map((x) => new fhir.Quantity(x));
        }
        else {
            this.lethalDose50 = [];
        }
        if (source['halfLifePeriod']) {
            this.halfLifePeriod = new fhir.Duration(source.halfLifePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["areaUnderCurve"]) {
            this.areaUnderCurve.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["lethalDose50"]) {
            this.lethalDose50.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["halfLifePeriod"]) {
            issues.push(...this.halfLifePeriod.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledgeKinetics._fts_dataType = 'MedicationKnowledgeKinetics';
/**
 * Information about a medication that is used to support knowledge.
 */
export class MedicationKnowledge extends fhir.DomainResource {
    /**
     * Default constructor for MedicationKnowledge - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationKnowledge';
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.Reference(source.manufacturer);
        }
        if (source['doseForm']) {
            this.doseForm = new fhir.CodeableConcept(source.doseForm);
        }
        if (source['amount']) {
            this.amount = new fhir.Quantity(source.amount);
        }
        if (source['synonym']) {
            this.synonym = source.synonym.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.synonym = [];
        }
        if (source['_synonym']) {
            source._synonym.forEach((x, i) => {
                if (this.synonym.length >= i) {
                    if (x) {
                        this.synonym[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.synonym.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['relatedMedicationKnowledge']) {
            this.relatedMedicationKnowledge = source.relatedMedicationKnowledge.map((x) => new fhir.MedicationKnowledgeRelatedMedicationKnowledge(x));
        }
        else {
            this.relatedMedicationKnowledge = [];
        }
        if (source['associatedMedication']) {
            this.associatedMedication = source.associatedMedication.map((x) => new fhir.Reference(x));
        }
        else {
            this.associatedMedication = [];
        }
        if (source['productType']) {
            this.productType = source.productType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.productType = [];
        }
        if (source['monograph']) {
            this.monograph = source.monograph.map((x) => new fhir.MedicationKnowledgeMonograph(x));
        }
        else {
            this.monograph = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.MedicationKnowledgeIngredient(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['preparationInstruction']) {
            this.preparationInstruction = new fhir.FhirMarkdown({ value: source.preparationInstruction });
        }
        if (source['_preparationInstruction']) {
            if (this.preparationInstruction) {
                this.preparationInstruction.addExtendedProperties(source._preparationInstruction);
            }
            else {
                this.preparationInstruction = new fhir.FhirMarkdown(source._preparationInstruction);
            }
        }
        if (source['intendedRoute']) {
            this.intendedRoute = source.intendedRoute.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.intendedRoute = [];
        }
        if (source['cost']) {
            this.cost = source.cost.map((x) => new fhir.MedicationKnowledgeCost(x));
        }
        else {
            this.cost = [];
        }
        if (source['monitoringProgram']) {
            this.monitoringProgram = source.monitoringProgram.map((x) => new fhir.MedicationKnowledgeMonitoringProgram(x));
        }
        else {
            this.monitoringProgram = [];
        }
        if (source['administrationGuidelines']) {
            this.administrationGuidelines = source.administrationGuidelines.map((x) => new fhir.MedicationKnowledgeAdministrationGuidelines(x));
        }
        else {
            this.administrationGuidelines = [];
        }
        if (source['medicineClassification']) {
            this.medicineClassification = source.medicineClassification.map((x) => new fhir.MedicationKnowledgeMedicineClassification(x));
        }
        else {
            this.medicineClassification = [];
        }
        if (source['packaging']) {
            this.packaging = new fhir.MedicationKnowledgePackaging(source.packaging);
        }
        if (source['drugCharacteristic']) {
            this.drugCharacteristic = source.drugCharacteristic.map((x) => new fhir.MedicationKnowledgeDrugCharacteristic(x));
        }
        else {
            this.drugCharacteristic = [];
        }
        if (source['contraindication']) {
            this.contraindication = source.contraindication.map((x) => new fhir.Reference(x));
        }
        else {
            this.contraindication = [];
        }
        if (source['regulatory']) {
            this.regulatory = source.regulatory.map((x) => new fhir.MedicationKnowledgeRegulatory(x));
        }
        else {
            this.regulatory = [];
        }
        if (source['kinetics']) {
            this.kinetics = source.kinetics.map((x) => new fhir.MedicationKnowledgeKinetics(x));
        }
        else {
            this.kinetics = [];
        }
    }
    /**
     * Required-bound Value Set for status (MedicationKnowledge.status)
     */
    static get statusRequiredCodes() {
        return MedicationknowledgeStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicationKnowledge" fhir: MedicationKnowledge.resourceType:"MedicationKnowledge"' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this['status'] && (!Object.values(MedicationknowledgeStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<MedicationknowledgeStatusCodeType> fhir: MedicationKnowledge.status:code Required binding to: MedicationknowledgeStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["manufacturer"]) {
            issues.push(...this.manufacturer.doModelValidation());
        }
        if (this["doseForm"]) {
            issues.push(...this.doseForm.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        if (this["synonym"]) {
            this.synonym.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedMedicationKnowledge"]) {
            this.relatedMedicationKnowledge.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["associatedMedication"]) {
            this.associatedMedication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["productType"]) {
            this.productType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["monograph"]) {
            this.monograph.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["preparationInstruction"]) {
            issues.push(...this.preparationInstruction.doModelValidation());
        }
        if (this["intendedRoute"]) {
            this.intendedRoute.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["cost"]) {
            this.cost.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["monitoringProgram"]) {
            this.monitoringProgram.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["administrationGuidelines"]) {
            this.administrationGuidelines.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["medicineClassification"]) {
            this.medicineClassification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["packaging"]) {
            issues.push(...this.packaging.doModelValidation());
        }
        if (this["drugCharacteristic"]) {
            this.drugCharacteristic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contraindication"]) {
            this.contraindication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["regulatory"]) {
            this.regulatory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["kinetics"]) {
            this.kinetics.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationKnowledge._fts_dataType = 'MedicationKnowledge';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbktub3dsZWRnZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvTWVkaWNhdGlvbktub3dsZWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFFckMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFnQm5DLGFBQWE7QUFDYixPQUFPLEVBQUUsOEJBQThCLEVBQXNDLE1BQU0sb0RBQW9ELENBQUM7QUF1QnhJOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDZDQUE4QyxTQUFRLElBQUksQ0FBQyxlQUFlO0lBYXJGOztPQUVHO0lBQ0gsWUFBWSxTQUFvRSxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUMxSCxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQUU7YUFDckU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzFCLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUM1RjtZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1NBQUU7SUFDL0IsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCO1FBQy9CLElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxD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LE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3RHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUNsRyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQWxNRDs7R0FFRztBQUM2QixpQ0FBYSxHQUFVLHFCQUFxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBNZWRpY2F0aW9uS25vd2xlZGdlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZWRpY2F0aW9ua25vd2xlZGdlUGFja2FnZVR5cGVDb2RpbmdzLCBNZWRpY2F0aW9ua25vd2xlZGdlUGFja2FnZVR5cGVDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9NZWRpY2F0aW9ua25vd2xlZGdlUGFja2FnZVR5cGVDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZWRpY2F0aW9ua25vd2xlZGdlUGFja2FnZVR5cGVDb2RlcywgIE1lZGljYXRpb25rbm93bGVkZ2VQYWNrYWdlVHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9NZWRpY2F0aW9ua25vd2xlZGdlUGFja2FnZVR5cGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kaW5ncywgTWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kZXMsICBNZWRpY2F0aW9ua25vd2xlZGdlQ2hhcmFjdGVyaXN0aWNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmtub3dsZWRnZUNoYXJhY3RlcmlzdGljQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE1lZGljYXRpb25Db2RpbmdzLCBNZWRpY2F0aW9uQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbkNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE1lZGljYXRpb25Db2RlcywgIE1lZGljYXRpb25Db2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZWRpY2F0aW9ua25vd2xlZGdlU3RhdHVzQ29kaW5ncywgTWVkaWNhdGlvbmtub3dsZWRnZVN0YXR1c0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL01lZGljYXRpb25rbm93bGVkZ2VTdGF0dXNDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZWRpY2F0aW9ua25vd2xlZGdlU3RhdHVzQ29kZXMsICBNZWRpY2F0aW9ua25vd2xlZGdlU3RhdHVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL01lZGljYXRpb25rbm93bGVkZ2VTdGF0dXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVkaWNhdGlvbkZvcm1Db2RpbmdzLCBNZWRpY2F0aW9uRm9ybUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL01lZGljYXRpb25Gb3JtQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVkaWNhdGlvbkZvcm1Db2RlcywgIE1lZGljYXRpb25Gb3JtQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL01lZGljYXRpb25Gb3JtQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFJvdXRlQ29kaW5ncywgUm91dGVDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Sb3V0ZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFJvdXRlQ29kZXMsICBSb3V0ZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Sb3V0ZUNvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25Lbm93bGVkZ2VSZWxhdGVkTWVkaWNhdGlvbktub3dsZWRnZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlUmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2VBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgY2F0ZWdvcnkgb2YgdGhlIGFzc29jaWF0ZWQgbWVkaWNhdGlvbiBrbm93bGVkZ2UgcmVmZXJlbmNlLlxyXG4gICAqL1xyXG4gIHR5cGU6IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBhYm91dCB0aGUgYXNzb2NpYXRlZCBtZWRpY2F0aW9uIGtub3dsZWRnZS5cclxuICAgKi9cclxuICByZWZlcmVuY2U6IGZoaXIuUmVmZXJlbmNlQXJnc1tdfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBc3NvY2lhdGVkIG9yIHJlbGF0ZWQga25vd2xlZGdlIGFib3V0IGEgbWVkaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlUmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2UgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdNZWRpY2F0aW9uS25vd2xlZGdlUmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2UnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXRlZ29yeSBvZiB0aGUgYXNzb2NpYXRlZCBtZWRpY2F0aW9uIGtub3dsZWRnZSByZWZlcmVuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogQXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGFib3V0IHRoZSBhc3NvY2lhdGVkIG1lZGljYXRpb24ga25vd2xlZGdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWZlcmVuY2U6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNhdGlvbktub3dsZWRnZVJlbGF0ZWRNZWRpY2F0aW9uS25vd2xlZGdlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNhdGlvbktub3dsZWRnZVJlbGF0ZWRNZWRpY2F0aW9uS25vd2xlZGdlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVmZXJlbmNlJ10pIHsgdGhpcy5yZWZlcmVuY2UgPSBzb3VyY2UucmVmZXJlbmNlLm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVmZXJlbmNlID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sndHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0eXBlOmZoaXIuQ29kZWFibGVDb25jZXB0IGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UucmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2UudHlwZTpDb2RlYWJsZUNvbmNlcHQnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydyZWZlcmVuY2UnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcmVmZXJlbmNlOmZoaXIuUmVmZXJlbmNlW10gZmhpcjogTWVkaWNhdGlvbktub3dsZWRnZS5yZWxhdGVkTWVkaWNhdGlvbktub3dsZWRnZS5yZWZlcmVuY2U6UmVmZXJlbmNlJyB9KTtcclxuICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5yZWZlcmVuY2UpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdzdHJ1Y3R1cmUnLCBkaWFnbm9zdGljczogJ0ZvdW5kIHNjYWxhciBpbiBhcnJheSBwcm9wZXJ0eSByZWZlcmVuY2U6Zmhpci5SZWZlcmVuY2VbXSBmaGlyOiBNZWRpY2F0aW9uS25vd2xlZGdlLnJlbGF0ZWRNZWRpY2F0aW9uS25vd2xlZGdlLnJlZmVyZW5jZTpSZWZlcmVuY2UnIH0pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnJlZmVyZW5jZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlZmVyZW5jZTpmaGlyLlJlZmVyZW5jZVtdIGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UucmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2UucmVmZXJlbmNlOlJlZmVyZW5jZScgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInJlZmVyZW5jZVwiXSkgeyB0aGlzLnJlZmVyZW5jZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2F0aW9uS25vd2xlZGdlTW9ub2dyYXBoIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljYXRpb25Lbm93bGVkZ2VNb25vZ3JhcGhBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgY2F0ZWdvcnkgb2YgZG9jdW1lbnRhdGlvbiBhYm91dCB0aGUgbWVkaWNhdGlvbi4gKGUuZy4gcHJvZmVzc2lvbmFsIG1vbm9ncmFwaCwgcGF0aWVudCBlZHVjYXRpb24gbW9ub2dyYXBoKS5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gYWJvdXQgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgc291cmNlPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBhYm91dCB0aGUgbWVkaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlTW9ub2dyYXBoIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZU1vbm9ncmFwaCc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhdGVnb3J5IG9mIGRvY3VtZW50YXRpb24gYWJvdXQgdGhlIG1lZGljYXRpb24uIChlLmcuIHByb2Zlc3Npb25hbCBtb25vZ3JhcGgsIHBhdGllbnQgZWR1Y2F0aW9uIG1vbm9ncmFwaCkuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGFib3V0IHRoZSBtZWRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzb3VyY2U/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNhdGlvbktub3dsZWRnZU1vbm9ncmFwaCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25Lbm93bGVkZ2VNb25vZ3JhcGhBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3NvdXJjZSddKSB7IHRoaXMuc291cmNlID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zb3VyY2UpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInNvdXJjZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnNvdXJjZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25Lbm93bGVkZ2VJbmdyZWRpZW50IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljYXRpb25Lbm93bGVkZ2VJbmdyZWRpZW50QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFjdHVhbCBpbmdyZWRpZW50IC0gZWl0aGVyIGEgc3Vic3RhbmNlIChzaW1wbGUgaW5ncmVkaWVudCkgb3IgYW5vdGhlciBtZWRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIGl0ZW0/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFjdHVhbCBpbmdyZWRpZW50IC0gZWl0aGVyIGEgc3Vic3RhbmNlIChzaW1wbGUgaW5ncmVkaWVudCkgb3IgYW5vdGhlciBtZWRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIGl0ZW1Db2RlYWJsZUNvbmNlcHQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhY3R1YWwgaW5ncmVkaWVudCAtIGVpdGhlciBhIHN1YnN0YW5jZSAoc2ltcGxlIGluZ3JlZGllbnQpIG9yIGFub3RoZXIgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBpdGVtUmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0aW9uIG9mIHdoZXRoZXIgdGhpcyBpbmdyZWRpZW50IGFmZmVjdHMgdGhlIHRoZXJhcGV1dGljIGFjdGlvbiBvZiB0aGUgZHJ1Zy5cclxuICAgKi9cclxuICBpc0FjdGl2ZT86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljYXRpb25Lbm93bGVkZ2UuaW5ncmVkaWVudC5pc0FjdGl2ZVxyXG4gICAqL1xyXG4gIF9pc0FjdGl2ZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIGhvdyBtYW55IChvciBob3cgbXVjaCkgb2YgdGhlIGl0ZW1zIHRoZXJlIGFyZSBpbiB0aGlzIE1lZGljYXRpb24uICBGb3IgZXhhbXBsZSwgMjUwIG1nIHBlciB0YWJsZXQuICBUaGlzIGlzIGV4cHJlc3NlZCBhcyBhIHJhdGlvIHdoZXJlIHRoZSBudW1lcmF0b3IgaXMgMjUwbWcgYW5kIHRoZSBkZW5vbWluYXRvciBpcyAxIHRhYmxldC5cclxuICAgKi9cclxuICBzdHJlbmd0aD86IGZoaXIuUmF0aW9BcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIElkZW50aWZpZXMgYSBwYXJ0aWN1bGFyIGNvbnN0aXR1ZW50IG9mIGludGVyZXN0IGluIHRoZSBwcm9kdWN0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljYXRpb25Lbm93bGVkZ2VJbmdyZWRpZW50IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZUluZ3JlZGllbnQnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhY3R1YWwgaW5ncmVkaWVudCAtIGVpdGhlciBhIHN1YnN0YW5jZSAoc2ltcGxlIGluZ3JlZGllbnQpIG9yIGFub3RoZXIgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgaXRlbTogKGZoaXIuQ29kZWFibGVDb25jZXB0fGZoaXIuUmVmZXJlbmNlKXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgTWVkaWNhdGlvbktub3dsZWRnZS5pbmdyZWRpZW50Lml0ZW1beF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfaXRlbUlzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRpb24gb2Ygd2hldGhlciB0aGlzIGluZ3JlZGllbnQgYWZmZWN0cyB0aGUgdGhlcmFwZXV0aWMgYWN0aW9uIG9mIHRoZSBkcnVnLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0FjdGl2ZT86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmllcyBob3cgbWFueSAob3IgaG93IG11Y2gpIG9mIHRoZSBpdGVtcyB0aGVyZSBhcmUgaW4gdGhpcyBNZWRpY2F0aW9uLiAgRm9yIGV4YW1wbGUsIDI1MCBtZyBwZXIgdGFibGV0LiAgVGhpcyBpcyBleHByZXNzZWQgYXMgYSByYXRpbyB3aGVyZSB0aGUgbnVtZXJhdG9yIGlzIDI1MG1nIGFuZCB0aGUgZGVub21pbmF0b3IgaXMgMSB0YWJsZXQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0cmVuZ3RoPzogZmhpci5SYXRpb3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNhdGlvbktub3dsZWRnZUluZ3JlZGllbnQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2F0aW9uS25vd2xlZGdlSW5ncmVkaWVudEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydpdGVtJ10pIHsgdGhpcy5pdGVtID0gc291cmNlLml0ZW07IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnaXRlbUNvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuaXRlbSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuaXRlbUNvZGVhYmxlQ29uY2VwdCk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnaXRlbVJlZmVyZW5jZSddKSB7IHRoaXMuaXRlbSA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuaXRlbVJlZmVyZW5jZSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLml0ZW0gPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydpc0FjdGl2ZSddKSB7IHRoaXMuaXNBY3RpdmUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5pc0FjdGl2ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfaXNBY3RpdmUnXSkge1xyXG4gICAgICBpZiAodGhpcy5pc0FjdGl2ZSkgeyB0aGlzLmlzQWN0aXZlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX2lzQWN0aXZlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuaXNBY3RpdmUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX2lzQWN0aXZlIGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RyZW5ndGgnXSkgeyB0aGlzLnN0cmVuZ3RoID0gbmV3IGZoaXIuUmF0aW8oc291cmNlLnN0cmVuZ3RoKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydpdGVtJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGl0ZW06IGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UuaW5ncmVkaWVudC5pdGVtW3hdOicgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImlzQWN0aXZlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuaXNBY3RpdmUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wic3RyZW5ndGhcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5zdHJlbmd0aC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25Lbm93bGVkZ2VDb3N0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljYXRpb25Lbm93bGVkZ2VDb3N0QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhdGVnb3J5IG9mIHRoZSBjb3N0IGluZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsIG1hbnVmYWN0dXJlcnMnIGNvc3QsIHBhdGllbnQgY29zdCwgY2xhaW0gcmVpbWJ1cnNlbWVudCBjb3N0LCBhY3R1YWwgYWNxdWlzaXRpb24gY29zdC5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgc291cmNlIG9yIG93bmVyIHRoYXQgYXNzaWducyB0aGUgcHJpY2UgdG8gdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgc291cmNlPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljYXRpb25Lbm93bGVkZ2UuY29zdC5zb3VyY2VcclxuICAgKi9cclxuICBfc291cmNlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgcHJpY2Ugb2YgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgY29zdDogZmhpci5Nb25leUFyZ3N8bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBwcmljZSBvZiB0aGUgbWVkaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlQ29zdCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25Lbm93bGVkZ2VDb3N0JztcclxuICAvKipcclxuICAgKiBUaGUgY2F0ZWdvcnkgb2YgdGhlIGNvc3QgaW5mb3JtYXRpb24uICBGb3IgZXhhbXBsZSwgbWFudWZhY3R1cmVycycgY29zdCwgcGF0aWVudCBjb3N0LCBjbGFpbSByZWltYnVyc2VtZW50IGNvc3QsIGFjdHVhbCBhY3F1aXNpdGlvbiBjb3N0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzb3VyY2Ugb3Igb3duZXIgdGhhdCBhc3NpZ25zIHRoZSBwcmljZSB0byB0aGUgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc291cmNlPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJpY2Ugb2YgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGNvc3Q6IGZoaXIuTW9uZXl8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2F0aW9uS25vd2xlZGdlQ29zdCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25Lbm93bGVkZ2VDb3N0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc291cmNlJ10pIHsgdGhpcy5zb3VyY2UgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnNvdXJjZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfc291cmNlJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc291cmNlKSB7IHRoaXMuc291cmNlLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3NvdXJjZSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnNvdXJjZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9zb3VyY2UgYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2Nvc3QnXSkgeyB0aGlzLmNvc3QgPSBuZXcgZmhpci5Nb25leShzb3VyY2UuY29zdCk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvc3QgPSBudWxsOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ3R5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdHlwZTpmaGlyLkNvZGVhYmxlQ29uY2VwdCBmaGlyOiBNZWRpY2F0aW9uS25vd2xlZGdlLmNvc3QudHlwZTpDb2RlYWJsZUNvbmNlcHQnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJzb3VyY2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5zb3VyY2UuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1snY29zdCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBjb3N0OmZoaXIuTW9uZXkgZmhpcjogTWVkaWNhdGlvbktub3dsZWRnZS5jb3N0LmNvc3Q6TW9uZXknIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJjb3N0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29zdC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25Lbm93bGVkZ2VNb25pdG9yaW5nUHJvZ3JhbSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlTW9uaXRvcmluZ1Byb2dyYW1BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUeXBlIG9mIHByb2dyYW0gdW5kZXIgd2hpY2ggdGhlIG1lZGljYXRpb24gaXMgbW9uaXRvcmVkLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5hbWUgb2YgdGhlIHJldmlld2luZyBwcm9ncmFtLlxyXG4gICAqL1xyXG4gIG5hbWU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNhdGlvbktub3dsZWRnZS5tb25pdG9yaW5nUHJvZ3JhbS5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHByb2dyYW0gdW5kZXIgd2hpY2ggdGhlIG1lZGljYXRpb24gaXMgcmV2aWV3ZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNhdGlvbktub3dsZWRnZU1vbml0b3JpbmdQcm9ncmFtIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZU1vbml0b3JpbmdQcm9ncmFtJztcclxuICAvKipcclxuICAgKiBUeXBlIG9mIHByb2dyYW0gdW5kZXIgd2hpY2ggdGhlIG1lZGljYXRpb24gaXMgbW9uaXRvcmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5hbWUgb2YgdGhlIHJldmlld2luZyBwcm9ncmFtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2F0aW9uS25vd2xlZGdlTW9uaXRvcmluZ1Byb2dyYW0gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2F0aW9uS25vd2xlZGdlTW9uaXRvcmluZ1Byb2dyYW1BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ25hbWUnXSkgeyB0aGlzLm5hbWUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLm5hbWV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX25hbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5uYW1lKSB7IHRoaXMubmFtZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9uYW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMubmFtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9uYW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcIm5hbWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5uYW1lLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lc0Rvc2FnZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzRG9zYWdlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgZG9zYWdlIChmb3IgZXhhbXBsZSwgcHJvcGh5bGF4aXMsIG1haW50ZW5hbmNlLCB0aGVyYXBldXRpYywgZXRjLikuXHJcbiAgICovXHJcbiAgdHlwZTogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRG9zYWdlIGZvciB0aGUgbWVkaWNhdGlvbiBmb3IgdGhlIHNwZWNpZmljIGd1aWRlbGluZXMuXHJcbiAgICovXHJcbiAgZG9zYWdlOiBmaGlyLkRvc2FnZUFyZ3NbXXxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogRG9zYWdlIGZvciB0aGUgbWVkaWNhdGlvbiBmb3IgdGhlIHNwZWNpZmljIGd1aWRlbGluZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lc0Rvc2FnZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNEb3NhZ2UnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIGRvc2FnZSAoZm9yIGV4YW1wbGUsIHByb3BoeWxheGlzLCBtYWludGVuYW5jZSwgdGhlcmFwZXV0aWMsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERvc2FnZSBmb3IgdGhlIG1lZGljYXRpb24gZm9yIHRoZSBzcGVjaWZpYyBndWlkZWxpbmVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb3NhZ2U6IGZoaXIuRG9zYWdlW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lc0Rvc2FnZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNEb3NhZ2VBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydkb3NhZ2UnXSkgeyB0aGlzLmRvc2FnZSA9IHNvdXJjZS5kb3NhZ2UubWFwKCh4KSA9PiBuZXcgZmhpci5Eb3NhZ2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kb3NhZ2UgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWyd0eXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHR5cGU6Zmhpci5Db2RlYWJsZUNvbmNlcHQgZmhpcjogTWVkaWNhdGlvbktub3dsZWRnZS5hZG1pbmlzdHJhdGlvbkd1aWRlbGluZXMuZG9zYWdlLnR5cGU6Q29kZWFibGVDb25jZXB0JyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widHlwZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnR5cGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1snZG9zYWdlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGRvc2FnZTpmaGlyLkRvc2FnZVtdIGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UuYWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzLmRvc2FnZS5kb3NhZ2U6RG9zYWdlJyB9KTtcclxuICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5kb3NhZ2UpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdzdHJ1Y3R1cmUnLCBkaWFnbm9zdGljczogJ0ZvdW5kIHNjYWxhciBpbiBhcnJheSBwcm9wZXJ0eSBkb3NhZ2U6Zmhpci5Eb3NhZ2VbXSBmaGlyOiBNZWRpY2F0aW9uS25vd2xlZGdlLmFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcy5kb3NhZ2UuZG9zYWdlOkRvc2FnZScgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZG9zYWdlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgZG9zYWdlOmZoaXIuRG9zYWdlW10gZmhpcjogTWVkaWNhdGlvbktub3dsZWRnZS5hZG1pbmlzdHJhdGlvbkd1aWRlbGluZXMuZG9zYWdlLmRvc2FnZTpEb3NhZ2UnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJkb3NhZ2VcIl0pIHsgdGhpcy5kb3NhZ2UuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lc1BhdGllbnRDaGFyYWN0ZXJpc3RpY3MgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lc1BhdGllbnRDaGFyYWN0ZXJpc3RpY3NBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBTcGVjaWZpYyBjaGFyYWN0ZXJpc3RpYyB0aGF0IGlzIHJlbGV2YW50IHRvIHRoZSBhZG1pbmlzdHJhdGlvbiBndWlkZWxpbmUgKGUuZy4gaGVpZ2h0LCB3ZWlnaHQsIGdlbmRlcikuXHJcbiAgICovXHJcbiAgY2hhcmFjdGVyaXN0aWM/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlF1YW50aXR5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTcGVjaWZpYyBjaGFyYWN0ZXJpc3RpYyB0aGF0IGlzIHJlbGV2YW50IHRvIHRoZSBhZG1pbmlzdHJhdGlvbiBndWlkZWxpbmUgKGUuZy4gaGVpZ2h0LCB3ZWlnaHQsIGdlbmRlcikuXHJcbiAgICovXHJcbiAgY2hhcmFjdGVyaXN0aWNDb2RlYWJsZUNvbmNlcHQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmljIGNoYXJhY3RlcmlzdGljIHRoYXQgaXMgcmVsZXZhbnQgdG8gdGhlIGFkbWluaXN0cmF0aW9uIGd1aWRlbGluZSAoZS5nLiBoZWlnaHQsIHdlaWdodCwgZ2VuZGVyKS5cclxuICAgKi9cclxuICBjaGFyYWN0ZXJpc3RpY1F1YW50aXR5PzogZmhpci5RdWFudGl0eUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWZpYyBjaGFyYWN0ZXJpc3RpYyAoZS5nLiBoZWlnaHQsIHdlaWdodCwgZ2VuZGVyLCBldGMuKS5cclxuICAgKi9cclxuICB2YWx1ZT86IGZoaXIuRmhpclN0cmluZ1tdfHN0cmluZ1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNhdGlvbktub3dsZWRnZS5hZG1pbmlzdHJhdGlvbkd1aWRlbGluZXMucGF0aWVudENoYXJhY3RlcmlzdGljcy52YWx1ZVxyXG4gICAqL1xyXG4gIF92YWx1ZT86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIHBhdGllbnQgdGhhdCBhcmUgcmVsZXZhbnQgdG8gdGhlIGFkbWluaXN0cmF0aW9uIGd1aWRlbGluZXMgKGZvciBleGFtcGxlLCBoZWlnaHQsIHdlaWdodCwgZ2VuZGVyLCBldGMuKS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzUGF0aWVudENoYXJhY3RlcmlzdGljcyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNQYXRpZW50Q2hhcmFjdGVyaXN0aWNzJztcclxuICAvKipcclxuICAgKiBTcGVjaWZpYyBjaGFyYWN0ZXJpc3RpYyB0aGF0IGlzIHJlbGV2YW50IHRvIHRoZSBhZG1pbmlzdHJhdGlvbiBndWlkZWxpbmUgKGUuZy4gaGVpZ2h0LCB3ZWlnaHQsIGdlbmRlcikuXHJcbiAgICovXHJcbiAgcHVibGljIGNoYXJhY3RlcmlzdGljOiAoZmhpci5Db2RlYWJsZUNvbmNlcHR8Zmhpci5RdWFudGl0eSl8bnVsbDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IE1lZGljYXRpb25Lbm93bGVkZ2UuYWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzLnBhdGllbnRDaGFyYWN0ZXJpc3RpY3MuY2hhcmFjdGVyaXN0aWNbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfY2hhcmFjdGVyaXN0aWNJc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWMgY2hhcmFjdGVyaXN0aWMgKGUuZy4gaGVpZ2h0LCB3ZWlnaHQsIGdlbmRlciwgZXRjLikuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlOiBmaGlyLkZoaXJTdHJpbmdbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzUGF0aWVudENoYXJhY3RlcmlzdGljcyAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNQYXRpZW50Q2hhcmFjdGVyaXN0aWNzQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2NoYXJhY3RlcmlzdGljJ10pIHsgdGhpcy5jaGFyYWN0ZXJpc3RpYyA9IHNvdXJjZS5jaGFyYWN0ZXJpc3RpYzsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydjaGFyYWN0ZXJpc3RpY0NvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuY2hhcmFjdGVyaXN0aWMgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmNoYXJhY3RlcmlzdGljQ29kZWFibGVDb25jZXB0KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydjaGFyYWN0ZXJpc3RpY1F1YW50aXR5J10pIHsgdGhpcy5jaGFyYWN0ZXJpc3RpYyA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5jaGFyYWN0ZXJpc3RpY1F1YW50aXR5KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY2hhcmFjdGVyaXN0aWMgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZSddKSB7IHRoaXMudmFsdWUgPSBzb3VyY2UudmFsdWUubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudmFsdWUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ZhbHVlJ10pIHtcclxuICAgICAgc291cmNlLl92YWx1ZS5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLnZhbHVlW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMudmFsdWUucHVzaChuZXcgZmhpci5GaGlyU3RyaW5nKHggYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ2NoYXJhY3RlcmlzdGljJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGNoYXJhY3RlcmlzdGljOiBmaGlyOiBNZWRpY2F0aW9uS25vd2xlZGdlLmFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcy5wYXRpZW50Q2hhcmFjdGVyaXN0aWNzLmNoYXJhY3RlcmlzdGljW3hdOicgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInZhbHVlXCJdKSB7IHRoaXMudmFsdWUuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogRG9zYWdlIGZvciB0aGUgbWVkaWNhdGlvbiBmb3IgdGhlIHNwZWNpZmljIGd1aWRlbGluZXMuXHJcbiAgICovXHJcbiAgZG9zYWdlPzogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzRG9zYWdlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0aW9uIGZvciB1c2UgdGhhdCBhcHBseSB0byB0aGUgc3BlY2lmaWMgYWRtaW5pc3RyYXRpb24gZ3VpZGVsaW5lcy5cclxuICAgKi9cclxuICBpbmRpY2F0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8Zmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRpb24gZm9yIHVzZSB0aGF0IGFwcGx5IHRvIHRoZSBzcGVjaWZpYyBhZG1pbmlzdHJhdGlvbiBndWlkZWxpbmVzLlxyXG4gICAqL1xyXG4gIGluZGljYXRpb25Db2RlYWJsZUNvbmNlcHQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRpb24gZm9yIHVzZSB0aGF0IGFwcGx5IHRvIHRoZSBzcGVjaWZpYyBhZG1pbmlzdHJhdGlvbiBndWlkZWxpbmVzLlxyXG4gICAqL1xyXG4gIGluZGljYXRpb25SZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENoYXJhY3RlcmlzdGljcyBvZiB0aGUgcGF0aWVudCB0aGF0IGFyZSByZWxldmFudCB0byB0aGUgYWRtaW5pc3RyYXRpb24gZ3VpZGVsaW5lcyAoZm9yIGV4YW1wbGUsIGhlaWdodCwgd2VpZ2h0LCBnZW5kZXIsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIHBhdGllbnRDaGFyYWN0ZXJpc3RpY3M/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNQYXRpZW50Q2hhcmFjdGVyaXN0aWNzQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEd1aWRlbGluZXMgZm9yIHRoZSBhZG1pbmlzdHJhdGlvbiBvZiB0aGUgbWVkaWNhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcyc7XHJcbiAgLyoqXHJcbiAgICogRG9zYWdlIGZvciB0aGUgbWVkaWNhdGlvbiBmb3IgdGhlIHNwZWNpZmljIGd1aWRlbGluZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGRvc2FnZTogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzRG9zYWdlW107XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGlvbiBmb3IgdXNlIHRoYXQgYXBwbHkgdG8gdGhlIHNwZWNpZmljIGFkbWluaXN0cmF0aW9uIGd1aWRlbGluZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGluZGljYXRpb24/OiAoZmhpci5Db2RlYWJsZUNvbmNlcHR8Zmhpci5SZWZlcmVuY2UpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IE1lZGljYXRpb25Lbm93bGVkZ2UuYWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzLmluZGljYXRpb25beF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfaW5kaWNhdGlvbklzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIENoYXJhY3RlcmlzdGljcyBvZiB0aGUgcGF0aWVudCB0aGF0IGFyZSByZWxldmFudCB0byB0aGUgYWRtaW5pc3RyYXRpb24gZ3VpZGVsaW5lcyAoZm9yIGV4YW1wbGUsIGhlaWdodCwgd2VpZ2h0LCBnZW5kZXIsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXRpZW50Q2hhcmFjdGVyaXN0aWNzOiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNQYXRpZW50Q2hhcmFjdGVyaXN0aWNzW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcyAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnZG9zYWdlJ10pIHsgdGhpcy5kb3NhZ2UgPSBzb3VyY2UuZG9zYWdlLm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lc0Rvc2FnZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRvc2FnZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydpbmRpY2F0aW9uJ10pIHsgdGhpcy5pbmRpY2F0aW9uID0gc291cmNlLmluZGljYXRpb247IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnaW5kaWNhdGlvbkNvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuaW5kaWNhdGlvbiA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuaW5kaWNhdGlvbkNvZGVhYmxlQ29uY2VwdCk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnaW5kaWNhdGlvblJlZmVyZW5jZSddKSB7IHRoaXMuaW5kaWNhdGlvbiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuaW5kaWNhdGlvblJlZmVyZW5jZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BhdGllbnRDaGFyYWN0ZXJpc3RpY3MnXSkgeyB0aGlzLnBhdGllbnRDaGFyYWN0ZXJpc3RpY3MgPSBzb3VyY2UucGF0aWVudENoYXJhY3RlcmlzdGljcy5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VBZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNQYXRpZW50Q2hhcmFjdGVyaXN0aWNzKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGF0aWVudENoYXJhY3RlcmlzdGljcyA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcImRvc2FnZVwiXSkgeyB0aGlzLmRvc2FnZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicGF0aWVudENoYXJhY3RlcmlzdGljc1wiXSkgeyB0aGlzLnBhdGllbnRDaGFyYWN0ZXJpc3RpY3MuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZU1lZGljaW5lQ2xhc3NpZmljYXRpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNhdGlvbktub3dsZWRnZU1lZGljaW5lQ2xhc3NpZmljYXRpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBjYXRlZ29yeSBmb3IgdGhlIG1lZGljYXRpb24gKGZvciBleGFtcGxlLCB0aGVyYXBldXRpYyBjbGFzc2lmaWNhdGlvbiwgdGhlcmFwZXV0aWMgc3ViLWNsYXNzaWZpY2F0aW9uKS5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBTcGVjaWZpYyBjYXRlZ29yeSBhc3NpZ25lZCB0byB0aGUgbWVkaWNhdGlvbiAoZS5nLiBhbnRpLWluZmVjdGl2ZSwgYW50aS1oeXBlcnRlbnNpdmUsIGFudGliaW90aWMsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIGNsYXNzaWZpY2F0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQ2F0ZWdvcml6YXRpb24gb2YgdGhlIG1lZGljYXRpb24gd2l0aGluIGEgZm9ybXVsYXJ5IG9yIGNsYXNzaWZpY2F0aW9uIHN5c3RlbS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlTWVkaWNpbmVDbGFzc2lmaWNhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25Lbm93bGVkZ2VNZWRpY2luZUNsYXNzaWZpY2F0aW9uJztcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBjYXRlZ29yeSBmb3IgdGhlIG1lZGljYXRpb24gKGZvciBleGFtcGxlLCB0aGVyYXBldXRpYyBjbGFzc2lmaWNhdGlvbiwgdGhlcmFwZXV0aWMgc3ViLWNsYXNzaWZpY2F0aW9uKS5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZTogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBTcGVjaWZpYyBjYXRlZ29yeSBhc3NpZ25lZCB0byB0aGUgbWVkaWNhdGlvbiAoZS5nLiBhbnRpLWluZmVjdGl2ZSwgYW50aS1oeXBlcnRlbnNpdmUsIGFudGliaW90aWMsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGFzc2lmaWNhdGlvbjogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2F0aW9uS25vd2xlZGdlTWVkaWNpbmVDbGFzc2lmaWNhdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25Lbm93bGVkZ2VNZWRpY2luZUNsYXNzaWZpY2F0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY2xhc3NpZmljYXRpb24nXSkgeyB0aGlzLmNsYXNzaWZpY2F0aW9uID0gc291cmNlLmNsYXNzaWZpY2F0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY2xhc3NpZmljYXRpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWyd0eXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHR5cGU6Zmhpci5Db2RlYWJsZUNvbmNlcHQgZmhpcjogTWVkaWNhdGlvbktub3dsZWRnZS5tZWRpY2luZUNsYXNzaWZpY2F0aW9uLnR5cGU6Q29kZWFibGVDb25jZXB0JyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widHlwZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnR5cGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY2xhc3NpZmljYXRpb25cIl0pIHsgdGhpcy5jbGFzc2lmaWNhdGlvbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2F0aW9uS25vd2xlZGdlUGFja2FnaW5nIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljYXRpb25Lbm93bGVkZ2VQYWNrYWdpbmdBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBBIGNvZGUgdGhhdCBkZWZpbmVzIHRoZSBzcGVjaWZpYyB0eXBlIG9mIHBhY2thZ2luZyB0aGF0IHRoZSBtZWRpY2F0aW9uIGNhbiBiZSBmb3VuZCBpbiAoZS5nLiBibGlzdGVyIHNsZWV2ZSwgdHViZSwgYm90dGxlKS5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIHByb2R1Y3QgdW5pdHMgdGhlIHBhY2thZ2Ugd291bGQgY29udGFpbiBpZiBmdWxseSBsb2FkZWQuXHJcbiAgICovXHJcbiAgcXVhbnRpdHk/OiBmaGlyLlF1YW50aXR5QXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmZvcm1hdGlvbiB0aGF0IG9ubHkgYXBwbGllcyB0byBwYWNrYWdlcyAobm90IHByb2R1Y3RzKS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlUGFja2FnaW5nIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZVBhY2thZ2luZyc7XHJcbiAgLyoqXHJcbiAgICogQSBjb2RlIHRoYXQgZGVmaW5lcyB0aGUgc3BlY2lmaWMgdHlwZSBvZiBwYWNrYWdpbmcgdGhhdCB0aGUgbWVkaWNhdGlvbiBjYW4gYmUgZm91bmQgaW4gKGUuZy4gYmxpc3RlciBzbGVldmUsIHR1YmUsIGJvdHRsZSkuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG51bWJlciBvZiBwcm9kdWN0IHVuaXRzIHRoZSBwYWNrYWdlIHdvdWxkIGNvbnRhaW4gaWYgZnVsbHkgbG9hZGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBxdWFudGl0eT86IGZoaXIuUXVhbnRpdHl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljYXRpb25Lbm93bGVkZ2VQYWNrYWdpbmcgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2F0aW9uS25vd2xlZGdlUGFja2FnaW5nQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydxdWFudGl0eSddKSB7IHRoaXMucXVhbnRpdHkgPSBuZXcgZmhpci5RdWFudGl0eShzb3VyY2UucXVhbnRpdHkpOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInF1YW50aXR5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucXVhbnRpdHkuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2F0aW9uS25vd2xlZGdlRHJ1Z0NoYXJhY3RlcmlzdGljIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljYXRpb25Lbm93bGVkZ2VEcnVnQ2hhcmFjdGVyaXN0aWNBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBBIGNvZGUgc3BlY2lmeWluZyB3aGljaCBjaGFyYWN0ZXJpc3RpYyBvZiB0aGUgbWVkaWNpbmUgaXMgYmVpbmcgZGVzY3JpYmVkIChmb3IgZXhhbXBsZSwgY29sb3VyLCBzaGFwZSwgaW1wcmludCkuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRlc2NyaXB0aW9uIHNob3VsZCBiZSBwcm92aWRlZCBhcyBhIENvZGVhYmxlQ29uY2VwdCwgU2ltcGxlUXVhbnRpdHkgb3IgYW4gaW1hZ2UuICBUaGUgZGVzY3JpcHRpb24gY2FuIGJlIGEgc3RyaW5nIG9ubHkgd2hlbiB0aGVzZSBvdGhlcnMgYXJlIG5vdCBhdmFpbGFibGUuXHJcbiAgICovXHJcbiAgdmFsdWU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLkZoaXJTdHJpbmd8Zmhpci5RdWFudGl0eXxmaGlyLkZoaXJCYXNlNjRCaW5hcnl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXNjcmlwdGlvbiBzaG91bGQgYmUgcHJvdmlkZWQgYXMgYSBDb2RlYWJsZUNvbmNlcHQsIFNpbXBsZVF1YW50aXR5IG9yIGFuIGltYWdlLiAgVGhlIGRlc2NyaXB0aW9uIGNhbiBiZSBhIHN0cmluZyBvbmx5IHdoZW4gdGhlc2Ugb3RoZXJzIGFyZSBub3QgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIHZhbHVlQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGVzY3JpcHRpb24gc2hvdWxkIGJlIHByb3ZpZGVkIGFzIGEgQ29kZWFibGVDb25jZXB0LCBTaW1wbGVRdWFudGl0eSBvciBhbiBpbWFnZS4gIFRoZSBkZXNjcmlwdGlvbiBjYW4gYmUgYSBzdHJpbmcgb25seSB3aGVuIHRoZXNlIG90aGVycyBhcmUgbm90IGF2YWlsYWJsZS5cclxuICAgKi9cclxuICB2YWx1ZVN0cmluZz86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXNjcmlwdGlvbiBzaG91bGQgYmUgcHJvdmlkZWQgYXMgYSBDb2RlYWJsZUNvbmNlcHQsIFNpbXBsZVF1YW50aXR5IG9yIGFuIGltYWdlLiAgVGhlIGRlc2NyaXB0aW9uIGNhbiBiZSBhIHN0cmluZyBvbmx5IHdoZW4gdGhlc2Ugb3RoZXJzIGFyZSBub3QgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIHZhbHVlUXVhbnRpdHk/OiBmaGlyLlF1YW50aXR5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRlc2NyaXB0aW9uIHNob3VsZCBiZSBwcm92aWRlZCBhcyBhIENvZGVhYmxlQ29uY2VwdCwgU2ltcGxlUXVhbnRpdHkgb3IgYW4gaW1hZ2UuICBUaGUgZGVzY3JpcHRpb24gY2FuIGJlIGEgc3RyaW5nIG9ubHkgd2hlbiB0aGVzZSBvdGhlcnMgYXJlIG5vdCBhdmFpbGFibGUuXHJcbiAgICovXHJcbiAgdmFsdWVCYXNlNjRCaW5hcnk/OiBmaGlyLkZoaXJCYXNlNjRCaW5hcnl8c3RyaW5nfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmllcyBkZXNjcmlwdGl2ZSBwcm9wZXJ0aWVzIG9mIHRoZSBtZWRpY2luZSwgc3VjaCBhcyBjb2xvciwgc2hhcGUsIGltcHJpbnRzLCBldGMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNhdGlvbktub3dsZWRnZURydWdDaGFyYWN0ZXJpc3RpYyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25Lbm93bGVkZ2VEcnVnQ2hhcmFjdGVyaXN0aWMnO1xyXG4gIC8qKlxyXG4gICAqIEEgY29kZSBzcGVjaWZ5aW5nIHdoaWNoIGNoYXJhY3RlcmlzdGljIG9mIHRoZSBtZWRpY2luZSBpcyBiZWluZyBkZXNjcmliZWQgKGZvciBleGFtcGxlLCBjb2xvdXIsIHNoYXBlLCBpbXByaW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGVzY3JpcHRpb24gc2hvdWxkIGJlIHByb3ZpZGVkIGFzIGEgQ29kZWFibGVDb25jZXB0LCBTaW1wbGVRdWFudGl0eSBvciBhbiBpbWFnZS4gIFRoZSBkZXNjcmlwdGlvbiBjYW4gYmUgYSBzdHJpbmcgb25seSB3aGVuIHRoZXNlIG90aGVycyBhcmUgbm90IGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWU/OiAoZmhpci5Db2RlYWJsZUNvbmNlcHR8Zmhpci5GaGlyU3RyaW5nfGZoaXIuUXVhbnRpdHl8Zmhpci5GaGlyQmFzZTY0QmluYXJ5KXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBNZWRpY2F0aW9uS25vd2xlZGdlLmRydWdDaGFyYWN0ZXJpc3RpYy52YWx1ZVt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c192YWx1ZUlzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljYXRpb25Lbm93bGVkZ2VEcnVnQ2hhcmFjdGVyaXN0aWMgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2F0aW9uS25vd2xlZGdlRHJ1Z0NoYXJhY3RlcmlzdGljQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZSddKSB7IHRoaXMudmFsdWUgPSBzb3VyY2UudmFsdWU7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVDb2RlYWJsZUNvbmNlcHQnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS52YWx1ZUNvZGVhYmxlQ29uY2VwdCk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVTdHJpbmcnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS52YWx1ZVN0cmluZ30pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlUXVhbnRpdHknXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuUXVhbnRpdHkoc291cmNlLnZhbHVlUXVhbnRpdHkpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlQmFzZTY0QmluYXJ5J10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJCYXNlNjRCaW5hcnkoe3ZhbHVlOiBzb3VyY2UudmFsdWVCYXNlNjRCaW5hcnl9KTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U3Vic3RpdHV0aW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U3Vic3RpdHV0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIHRoZSB0eXBlIG9mIHN1YnN0aXR1dGlvbiBhbGxvd2VkLlxyXG4gICAqL1xyXG4gIHR5cGU6IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmllcyBpZiByZWd1bGF0aW9uIGFsbG93cyBmb3IgY2hhbmdlcyBpbiB0aGUgbWVkaWNhdGlvbiB3aGVuIGRpc3BlbnNpbmcuXHJcbiAgICovXHJcbiAgYWxsb3dlZDogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNhdGlvbktub3dsZWRnZS5yZWd1bGF0b3J5LnN1YnN0aXR1dGlvbi5hbGxvd2VkXHJcbiAgICovXHJcbiAgX2FsbG93ZWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG59XHJcblxyXG4vKipcclxuICogU3BlY2lmaWVzIGlmIGNoYW5nZXMgYXJlIGFsbG93ZWQgd2hlbiBkaXNwZW5zaW5nIGEgbWVkaWNhdGlvbiBmcm9tIGEgcmVndWxhdG9yeSBwZXJzcGVjdGl2ZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeVN1YnN0aXR1dGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U3Vic3RpdHV0aW9uJztcclxuICAvKipcclxuICAgKiBTcGVjaWZpZXMgdGhlIHR5cGUgb2Ygc3Vic3RpdHV0aW9uIGFsbG93ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIGlmIHJlZ3VsYXRpb24gYWxsb3dzIGZvciBjaGFuZ2VzIGluIHRoZSBtZWRpY2F0aW9uIHdoZW4gZGlzcGVuc2luZy5cclxuICAgKi9cclxuICBwdWJsaWMgYWxsb3dlZDogZmhpci5GaGlyQm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U3Vic3RpdHV0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlTdWJzdGl0dXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnR5cGUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydhbGxvd2VkJ10pIHsgdGhpcy5hbGxvd2VkID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuYWxsb3dlZH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hbGxvd2VkID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2FsbG93ZWQnXSkge1xyXG4gICAgICBpZiAodGhpcy5hbGxvd2VkKSB7IHRoaXMuYWxsb3dlZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9hbGxvd2VkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuYWxsb3dlZCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHNvdXJjZS5fYWxsb3dlZCBhcyBQYXJ0aWFsPGZoaXIuRmhpckJvb2xlYW5BcmdzPik7IH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sndHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0eXBlOmZoaXIuQ29kZWFibGVDb25jZXB0IGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UucmVndWxhdG9yeS5zdWJzdGl0dXRpb24udHlwZTpDb2RlYWJsZUNvbmNlcHQnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWydhbGxvd2VkJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGFsbG93ZWQ6Zmhpci5GaGlyQm9vbGVhbiBmaGlyOiBNZWRpY2F0aW9uS25vd2xlZGdlLnJlZ3VsYXRvcnkuc3Vic3RpdHV0aW9uLmFsbG93ZWQ6Ym9vbGVhbicgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImFsbG93ZWRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5hbGxvd2VkLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlTY2hlZHVsZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeVNjaGVkdWxlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIHRoZSBzcGVjaWZpYyBkcnVnIHNjaGVkdWxlLlxyXG4gICAqL1xyXG4gIHNjaGVkdWxlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8bnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmllcyB0aGUgc2NoZWR1bGUgb2YgYSBtZWRpY2F0aW9uIGluIGp1cmlzZGljdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeVNjaGVkdWxlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlTY2hlZHVsZSc7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIHRoZSBzcGVjaWZpYyBkcnVnIHNjaGVkdWxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzY2hlZHVsZTogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeVNjaGVkdWxlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlTY2hlZHVsZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydzY2hlZHVsZSddKSB7IHRoaXMuc2NoZWR1bGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnNjaGVkdWxlKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc2NoZWR1bGUgPSBudWxsOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ3NjaGVkdWxlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHNjaGVkdWxlOmZoaXIuQ29kZWFibGVDb25jZXB0IGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UucmVndWxhdG9yeS5zY2hlZHVsZS5zY2hlZHVsZTpDb2RlYWJsZUNvbmNlcHQnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJzY2hlZHVsZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnNjaGVkdWxlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlNYXhEaXNwZW5zZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeU1heERpc3BlbnNlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHVuaXRzIG9mIHRoZSBtZWRpY2F0aW9uIHRoYXQgY2FuIGJlIGRpc3BlbnNlZC5cclxuICAgKi9cclxuICBxdWFudGl0eTogZmhpci5RdWFudGl0eUFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgcGVyaW9kIHRoYXQgYXBwbGllcyB0byB0aGUgbWF4aW11bSBudW1iZXIgb2YgdW5pdHMuXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5EdXJhdGlvbkFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHVuaXRzIG9mIHRoZSBtZWRpY2F0aW9uIHRoYXQgY2FuIGJlIGRpc3BlbnNlZCBpbiBhIHBlcmlvZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeU1heERpc3BlbnNlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlNYXhEaXNwZW5zZSc7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHVuaXRzIG9mIHRoZSBtZWRpY2F0aW9uIHRoYXQgY2FuIGJlIGRpc3BlbnNlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcXVhbnRpdHk6IGZoaXIuUXVhbnRpdHl8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgcGVyaW9kIHRoYXQgYXBwbGllcyB0byB0aGUgbWF4aW11bSBudW1iZXIgb2YgdW5pdHMuXHJcbiAgICovXHJcbiAgcHVibGljIHBlcmlvZD86IGZoaXIuRHVyYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5TWF4RGlzcGVuc2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeU1heERpc3BlbnNlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3F1YW50aXR5J10pIHsgdGhpcy5xdWFudGl0eSA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5xdWFudGl0eSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnF1YW50aXR5ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGVyaW9kJ10pIHsgdGhpcy5wZXJpb2QgPSBuZXcgZmhpci5EdXJhdGlvbihzb3VyY2UucGVyaW9kKTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydxdWFudGl0eSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBxdWFudGl0eTpmaGlyLlF1YW50aXR5IGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UucmVndWxhdG9yeS5tYXhEaXNwZW5zZS5xdWFudGl0eTpRdWFudGl0eScgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInF1YW50aXR5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucXVhbnRpdHkuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicGVyaW9kXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucGVyaW9kLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnkgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgYXV0aG9yaXR5IHRoYXQgaXMgc3BlY2lmeWluZyB0aGUgcmVndWxhdGlvbnMuXHJcbiAgICovXHJcbiAgcmVndWxhdG9yeUF1dGhvcml0eTogZmhpci5SZWZlcmVuY2VBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIGlmIGNoYW5nZXMgYXJlIGFsbG93ZWQgd2hlbiBkaXNwZW5zaW5nIGEgbWVkaWNhdGlvbiBmcm9tIGEgcmVndWxhdG9yeSBwZXJzcGVjdGl2ZS5cclxuICAgKi9cclxuICBzdWJzdGl0dXRpb24/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U3Vic3RpdHV0aW9uQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTcGVjaWZpZXMgdGhlIHNjaGVkdWxlIG9mIGEgbWVkaWNhdGlvbiBpbiBqdXJpc2RpY3Rpb24uXHJcbiAgICovXHJcbiAgc2NoZWR1bGU/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U2NoZWR1bGVBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB1bml0cyBvZiB0aGUgbWVkaWNhdGlvbiB0aGF0IGNhbiBiZSBkaXNwZW5zZWQgaW4gYSBwZXJpb2QuXHJcbiAgICovXHJcbiAgbWF4RGlzcGVuc2U/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5TWF4RGlzcGVuc2VBcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlZ3VsYXRvcnkgaW5mb3JtYXRpb24gYWJvdXQgYSBtZWRpY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnknO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhdXRob3JpdHkgdGhhdCBpcyBzcGVjaWZ5aW5nIHRoZSByZWd1bGF0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgcmVndWxhdG9yeUF1dGhvcml0eTogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBTcGVjaWZpZXMgaWYgY2hhbmdlcyBhcmUgYWxsb3dlZCB3aGVuIGRpc3BlbnNpbmcgYSBtZWRpY2F0aW9uIGZyb20gYSByZWd1bGF0b3J5IHBlcnNwZWN0aXZlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJzdGl0dXRpb246IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlTdWJzdGl0dXRpb25bXTtcclxuICAvKipcclxuICAgKiBTcGVjaWZpZXMgdGhlIHNjaGVkdWxlIG9mIGEgbWVkaWNhdGlvbiBpbiBqdXJpc2RpY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHNjaGVkdWxlOiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U2NoZWR1bGVbXTtcclxuICAvKipcclxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdW5pdHMgb2YgdGhlIG1lZGljYXRpb24gdGhhdCBjYW4gYmUgZGlzcGVuc2VkIGluIGEgcGVyaW9kLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYXhEaXNwZW5zZT86IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnlNYXhEaXNwZW5zZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnkgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyZWd1bGF0b3J5QXV0aG9yaXR5J10pIHsgdGhpcy5yZWd1bGF0b3J5QXV0aG9yaXR5ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5yZWd1bGF0b3J5QXV0aG9yaXR5KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVndWxhdG9yeUF1dGhvcml0eSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3N1YnN0aXR1dGlvbiddKSB7IHRoaXMuc3Vic3RpdHV0aW9uID0gc291cmNlLnN1YnN0aXR1dGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U3Vic3RpdHV0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3Vic3RpdHV0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3NjaGVkdWxlJ10pIHsgdGhpcy5zY2hlZHVsZSA9IHNvdXJjZS5zY2hlZHVsZS5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VSZWd1bGF0b3J5U2NoZWR1bGUoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zY2hlZHVsZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtYXhEaXNwZW5zZSddKSB7IHRoaXMubWF4RGlzcGVuc2UgPSBuZXcgZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeU1heERpc3BlbnNlKHNvdXJjZS5tYXhEaXNwZW5zZSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sncmVndWxhdG9yeUF1dGhvcml0eSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZWd1bGF0b3J5QXV0aG9yaXR5OmZoaXIuUmVmZXJlbmNlIGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UucmVndWxhdG9yeS5yZWd1bGF0b3J5QXV0aG9yaXR5OlJlZmVyZW5jZScgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInJlZ3VsYXRvcnlBdXRob3JpdHlcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5yZWd1bGF0b3J5QXV0aG9yaXR5LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInN1YnN0aXR1dGlvblwiXSkgeyB0aGlzLnN1YnN0aXR1dGlvbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wic2NoZWR1bGVcIl0pIHsgdGhpcy5zY2hlZHVsZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wibWF4RGlzcGVuc2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5tYXhEaXNwZW5zZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25Lbm93bGVkZ2VLaW5ldGljcyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlS2luZXRpY3NBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgZHJ1ZyBjb25jZW50cmF0aW9uIG1lYXN1cmVkIGF0IGNlcnRhaW4gZGlzY3JldGUgcG9pbnRzIGluIHRpbWUuXHJcbiAgICovXHJcbiAgYXJlYVVuZGVyQ3VydmU/OiBmaGlyLlF1YW50aXR5QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbWVkaWFuIGxldGhhbCBkb3NlIG9mIGEgZHJ1Zy5cclxuICAgKi9cclxuICBsZXRoYWxEb3NlNTA/OiBmaGlyLlF1YW50aXR5QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGltZSByZXF1aXJlZCBmb3IgYW55IHNwZWNpZmllZCBwcm9wZXJ0eSAoZS5nLiwgdGhlIGNvbmNlbnRyYXRpb24gb2YgYSBzdWJzdGFuY2UgaW4gdGhlIGJvZHkpIHRvIGRlY3JlYXNlIGJ5IGhhbGYuXHJcbiAgICovXHJcbiAgaGFsZkxpZmVQZXJpb2Q/OiBmaGlyLkR1cmF0aW9uQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgdGltZSBjb3Vyc2Ugb2YgZHJ1ZyBhYnNvcnB0aW9uLCBkaXN0cmlidXRpb24sIG1ldGFib2xpc20gYW5kIGV4Y3JldGlvbiBvZiBhIG1lZGljYXRpb24gZnJvbSB0aGUgYm9keS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uS25vd2xlZGdlS2luZXRpY3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdNZWRpY2F0aW9uS25vd2xlZGdlS2luZXRpY3MnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkcnVnIGNvbmNlbnRyYXRpb24gbWVhc3VyZWQgYXQgY2VydGFpbiBkaXNjcmV0ZSBwb2ludHMgaW4gdGltZS5cclxuICAgKi9cclxuICBwdWJsaWMgYXJlYVVuZGVyQ3VydmU6IGZoaXIuUXVhbnRpdHlbXTtcclxuICAvKipcclxuICAgKiBUaGUgbWVkaWFuIGxldGhhbCBkb3NlIG9mIGEgZHJ1Zy5cclxuICAgKi9cclxuICBwdWJsaWMgbGV0aGFsRG9zZTUwOiBmaGlyLlF1YW50aXR5W107XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgcmVxdWlyZWQgZm9yIGFueSBzcGVjaWZpZWQgcHJvcGVydHkgKGUuZy4sIHRoZSBjb25jZW50cmF0aW9uIG9mIGEgc3Vic3RhbmNlIGluIHRoZSBib2R5KSB0byBkZWNyZWFzZSBieSBoYWxmLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYWxmTGlmZVBlcmlvZD86IGZoaXIuRHVyYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljYXRpb25Lbm93bGVkZ2VLaW5ldGljcyAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25Lbm93bGVkZ2VLaW5ldGljc0FyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydhcmVhVW5kZXJDdXJ2ZSddKSB7IHRoaXMuYXJlYVVuZGVyQ3VydmUgPSBzb3VyY2UuYXJlYVVuZGVyQ3VydmUubWFwKCh4KSA9PiBuZXcgZmhpci5RdWFudGl0eSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFyZWFVbmRlckN1cnZlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2xldGhhbERvc2U1MCddKSB7IHRoaXMubGV0aGFsRG9zZTUwID0gc291cmNlLmxldGhhbERvc2U1MC5tYXAoKHgpID0+IG5ldyBmaGlyLlF1YW50aXR5KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubGV0aGFsRG9zZTUwID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2hhbGZMaWZlUGVyaW9kJ10pIHsgdGhpcy5oYWxmTGlmZVBlcmlvZCA9IG5ldyBmaGlyLkR1cmF0aW9uKHNvdXJjZS5oYWxmTGlmZVBlcmlvZCk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1wiYXJlYVVuZGVyQ3VydmVcIl0pIHsgdGhpcy5hcmVhVW5kZXJDdXJ2ZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wibGV0aGFsRG9zZTUwXCJdKSB7IHRoaXMubGV0aGFsRG9zZTUwLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJoYWxmTGlmZVBlcmlvZFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmhhbGZMaWZlUGVyaW9kLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbktub3dsZWRnZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uS25vd2xlZGdlQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiTWVkaWNhdGlvbktub3dsZWRnZVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXBlbmRpbmcgb24gdGhlIGNvbnRleHQgb2YgdXNlLCB0aGUgY29kZSB0aGF0IHdhcyBhY3R1YWxseSBzZWxlY3RlZCBieSB0aGUgdXNlciAocHJlc2NyaWJlciwgZGlzcGVuc2VyLCBldGMuKSB3aWxsIGhhdmUgdGhlIGNvZGluZy51c2VyU2VsZWN0ZWQgc2V0IHRvIHRydWUuICBBcyBkZXNjcmliZWQgaW4gdGhlIGNvZGluZyBkYXRhdHlwZTogXCJBIGNvZGluZyBtYXkgYmUgbWFya2VkIGFzIGEgXCJ1c2VyU2VsZWN0ZWRcIiBpZiBhIHVzZXIgc2VsZWN0ZWQgdGhlIHBhcnRpY3VsYXIgY29kZWQgdmFsdWUgaW4gYSB1c2VyIGludGVyZmFjZSAoZS5nLiB0aGUgdXNlciBzZWxlY3RzIGFuIGl0ZW0gaW4gYSBwaWNrLWxpc3QpLiBJZiBhIHVzZXIgc2VsZWN0ZWQgY29kaW5nIGV4aXN0cywgaXQgaXMgdGhlIHByZWZlcnJlZCBjaG9pY2UgZm9yIHBlcmZvcm1pbmcgdHJhbnNsYXRpb25zIGV0Yy4gT3RoZXIgY29kZXMgY2FuIG9ubHkgYmUgbGl0ZXJhbCB0cmFuc2xhdGlvbnMgdG8gYWx0ZXJuYXRpdmUgY29kZSBzeXN0ZW1zLCBvciBjb2RlcyBhdCBhIGxvd2VyIGxldmVsIG9mIGdyYW51bGFyaXR5IChlLmcuIGEgZ2VuZXJpYyBjb2RlIGZvciBhIHZlbmRvci1zcGVjaWZpYyBwcmltYXJ5IG9uZSkuXHJcbiAgICovXHJcbiAgY29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBzdGF0dXMgaXMgaW50ZW5kZWQgdG8gaWRlbnRpZnkgaWYgdGhlIG1lZGljYXRpb24gaW4gYSBsb2NhbCBzeXN0ZW0gaXMgaW4gYWN0aXZlIHVzZSB3aXRoaW4gYSBkcnVnIGRhdGFiYXNlIG9yIGludmVudG9yeS4gIEZvciBleGFtcGxlLCBhIHBoYXJtYWN5IHN5c3RlbSBtYXkgY3JlYXRlIGEgbmV3IGRydWcgZmlsZSByZWNvcmQgZm9yIGEgY29tcG91bmRlZCBwcm9kdWN0IFwiQUJDIEhvc3BpdGFsIFNwZWNpYWwgQ3JlYW1cIiB3aXRoIGFuIGFjdGl2ZSBzdGF0dXMuICBBdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUsIGl0IG1heSBiZSBkZXRlcm1pbmVkIHRoYXQgdGhlIGRydWcgcmVjb3JkIHdhcyBjcmVhdGVkIHdpdGggYW4gZXJyb3IgYW5kIHRoZSBzdGF0dXMgaXMgY2hhbmdlZCB0byBcImVudGVyZWQgaW4gZXJyb3JcIi4gICBUaGlzIHN0YXR1cyBpcyBub3QgaW50ZW5kZWQgdG8gc3BlY2lmeSBpZiBhIG1lZGljYXRpb24gaXMgcGFydCBvZiBhIHBhcnRpY3VsYXIgZm9ybXVsYXJ5LiAgSXQgaXMgcG9zc2libGUgdGhhdCB0aGUgZHJ1ZyByZWNvcmQgbWF5IGJlIHJlZmVyZW5jZWQgYnkgbXVsdGlwbGUgZm9ybXVsYXJpZXMgb3IgY2F0YWxvZ3VlcyBhbmQgZWFjaCBvZiB0aG9zZSBlbnRyaWVzIHdvdWxkIGhhdmUgYSBzZXBhcmF0ZSBzdGF0dXMuXHJcbiAgICovXHJcbiAgc3RhdHVzPzogZmhpci5GaGlyQ29kZTxNZWRpY2F0aW9ua25vd2xlZGdlU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljYXRpb25Lbm93bGVkZ2Uuc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogRGVzY3JpYmVzIHRoZSBkZXRhaWxzIG9mIHRoZSBtYW51ZmFjdHVyZXIgb2YgdGhlIG1lZGljYXRpb24gcHJvZHVjdC4gIFRoaXMgaXMgbm90IGludGVuZGVkIHRvIHJlcHJlc2VudCB0aGUgZGlzdHJpYnV0b3Igb2YgYSBtZWRpY2F0aW9uIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgbWFudWZhY3R1cmVyPzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIE1lZGljYXRpb24gaXMgcmVmZXJlbmNlZCBmcm9tIE1lZGljYXRpb25SZXF1ZXN0LCB0aGlzIGlzIHRoZSBvcmRlcmVkIGZvcm0uICBXaGVuIE1lZGljYXRpb24gaXMgcmVmZXJlbmNlZCB3aXRoaW4gTWVkaWNhdGlvbkRpc3BlbnNlLCB0aGlzIGlzIHRoZSBkaXNwZW5zZWQgZm9ybS4gIFdoZW4gTWVkaWNhdGlvbiBpcyByZWZlcmVuY2VkIHdpdGhpbiBNZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24sIHRoaXMgaXMgYWRtaW5pc3RlcmVkIGZvcm0uXHJcbiAgICovXHJcbiAgZG9zZUZvcm0/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgdGhlIHF1YW50aXR5IG9mIG1lZGljYXRpb24gaW4gYSBwYWNrYWdlLiAgVG8gc3BlY2lmeSB0aGUgc3RyZW5ndGggb2YgdGhlIG1lZGljYXRpb24sIHRoZSBJbmdyZWRpZW50LnN0cmVuZ3RoIGF0dHJpYnV0ZSBpcyB1c2VkLlxyXG4gICAqL1xyXG4gIGFtb3VudD86IGZoaXIuUXVhbnRpdHlBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBZGRpdGlvbmFsIG5hbWVzIGZvciBhIG1lZGljYXRpb24sIGZvciBleGFtcGxlLCB0aGUgbmFtZShzKSBnaXZlbiB0byBhIG1lZGljYXRpb24gaW4gZGlmZmVyZW50IGNvdW50cmllcy4gIEZvciBleGFtcGxlLCBhY2V0YW1pbm9waGVuIGFuZCBwYXJhY2V0YW1vbCBvciBzYWxidXRhbW9sIGFuZCBhbGJ1dGVyb2wuXHJcbiAgICovXHJcbiAgc3lub255bT86IGZoaXIuRmhpclN0cmluZ1tdfHN0cmluZ1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNhdGlvbktub3dsZWRnZS5zeW5vbnltXHJcbiAgICovXHJcbiAgX3N5bm9ueW0/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIEFzc29jaWF0ZWQgb3IgcmVsYXRlZCBrbm93bGVkZ2UgYWJvdXQgYSBtZWRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHJlbGF0ZWRNZWRpY2F0aW9uS25vd2xlZGdlPzogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlUmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFzc29jaWF0ZWQgb3IgcmVsYXRlZCBtZWRpY2F0aW9ucy4gIEZvciBleGFtcGxlLCBpZiB0aGUgbWVkaWNhdGlvbiBpcyBhIGJyYW5kZWQgcHJvZHVjdCAoZS5nLiBDcmVzdG9yKSwgdGhpcyBpcyB0aGUgVGhlcmFwZXV0aWMgTW9laXR5IChlLmcuIFJvc3V2YXN0YXRpbikgb3IgaWYgdGhpcyBpcyBhIGdlbmVyaWMgbWVkaWNhdGlvbiAoZS5nLiBSb3N1dmFzdGF0aW4pLCB0aGlzIHdvdWxkIGxpbmsgdG8gYSBicmFuZGVkIHByb2R1Y3QgKGUuZy4gQ3Jlc3RvcikuXHJcbiAgICovXHJcbiAgYXNzb2NpYXRlZE1lZGljYXRpb24/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2F0ZWdvcnkgb2YgdGhlIG1lZGljYXRpb24gb3IgcHJvZHVjdCAoZS5nLiBicmFuZGVkIHByb2R1Y3QsIHRoZXJhcGV1dGljIG1vZWl0eSwgZ2VuZXJpYyBwcm9kdWN0LCBpbm5vdmF0b3IgcHJvZHVjdCwgZXRjLikuXHJcbiAgICovXHJcbiAgcHJvZHVjdFR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGFib3V0IHRoZSBtZWRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIG1vbm9ncmFwaD86IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZU1vbm9ncmFwaEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyBhIHBhcnRpY3VsYXIgY29uc3RpdHVlbnQgb2YgaW50ZXJlc3QgaW4gdGhlIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgaW5ncmVkaWVudD86IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZUluZ3JlZGllbnRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbnN0cnVjdGlvbnMgZm9yIHByZXBhcmluZyB0aGUgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBwcmVwYXJhdGlvbkluc3RydWN0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWVkaWNhdGlvbktub3dsZWRnZS5wcmVwYXJhdGlvbkluc3RydWN0aW9uXHJcbiAgICovXHJcbiAgX3ByZXBhcmF0aW9uSW5zdHJ1Y3Rpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbnRlbmRlZCBvciBhcHByb3ZlZCByb3V0ZSBvZiBhZG1pbmlzdHJhdGlvbi5cclxuICAgKi9cclxuICBpbnRlbmRlZFJvdXRlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwcmljZSBvZiB0aGUgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBjb3N0PzogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlQ29zdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHByb2dyYW0gdW5kZXIgd2hpY2ggdGhlIG1lZGljYXRpb24gaXMgcmV2aWV3ZWQuXHJcbiAgICovXHJcbiAgbW9uaXRvcmluZ1Byb2dyYW0/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VNb25pdG9yaW5nUHJvZ3JhbUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogR3VpZGVsaW5lcyBmb3IgdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSBtZWRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIGFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcz86IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lc0FyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2F0ZWdvcml6YXRpb24gb2YgdGhlIG1lZGljYXRpb24gd2l0aGluIGEgZm9ybXVsYXJ5IG9yIGNsYXNzaWZpY2F0aW9uIHN5c3RlbS5cclxuICAgKi9cclxuICBtZWRpY2luZUNsYXNzaWZpY2F0aW9uPzogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlTWVkaWNpbmVDbGFzc2lmaWNhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5mb3JtYXRpb24gdGhhdCBvbmx5IGFwcGxpZXMgdG8gcGFja2FnZXMgKG5vdCBwcm9kdWN0cykuXHJcbiAgICovXHJcbiAgcGFja2FnaW5nPzogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlUGFja2FnaW5nQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIGRlc2NyaXB0aXZlIHByb3BlcnRpZXMgb2YgdGhlIG1lZGljaW5lLCBzdWNoIGFzIGNvbG9yLCBzaGFwZSwgaW1wcmludHMsIGV0Yy5cclxuICAgKi9cclxuICBkcnVnQ2hhcmFjdGVyaXN0aWM/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VEcnVnQ2hhcmFjdGVyaXN0aWNBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBvdGVudGlhbCBjbGluaWNhbCBpc3N1ZSB3aXRoIG9yIGJldHdlZW4gbWVkaWNhdGlvbihzKSAoZm9yIGV4YW1wbGUsIGRydWctZHJ1ZyBpbnRlcmFjdGlvbiwgZHJ1Zy1kaXNlYXNlIGNvbnRyYWluZGljYXRpb24sIGRydWctYWxsZXJneSBpbnRlcmFjdGlvbiwgZXRjLikuXHJcbiAgICovXHJcbiAgY29udHJhaW5kaWNhdGlvbj86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZWd1bGF0b3J5IGluZm9ybWF0aW9uIGFib3V0IGEgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICByZWd1bGF0b3J5PzogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgY291cnNlIG9mIGRydWcgYWJzb3JwdGlvbiwgZGlzdHJpYnV0aW9uLCBtZXRhYm9saXNtIGFuZCBleGNyZXRpb24gb2YgYSBtZWRpY2F0aW9uIGZyb20gdGhlIGJvZHkuXHJcbiAgICovXHJcbiAga2luZXRpY3M/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VLaW5ldGljc0FyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmZvcm1hdGlvbiBhYm91dCBhIG1lZGljYXRpb24gdGhhdCBpcyB1c2VkIHRvIHN1cHBvcnQga25vd2xlZGdlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljYXRpb25Lbm93bGVkZ2UgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25Lbm93bGVkZ2UnO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiTWVkaWNhdGlvbktub3dsZWRnZVwiO1xyXG4gIC8qKlxyXG4gICAqIERlcGVuZGluZyBvbiB0aGUgY29udGV4dCBvZiB1c2UsIHRoZSBjb2RlIHRoYXQgd2FzIGFjdHVhbGx5IHNlbGVjdGVkIGJ5IHRoZSB1c2VyIChwcmVzY3JpYmVyLCBkaXNwZW5zZXIsIGV0Yy4pIHdpbGwgaGF2ZSB0aGUgY29kaW5nLnVzZXJTZWxlY3RlZCBzZXQgdG8gdHJ1ZS4gIEFzIGRlc2NyaWJlZCBpbiB0aGUgY29kaW5nIGRhdGF0eXBlOiBcIkEgY29kaW5nIG1heSBiZSBtYXJrZWQgYXMgYSBcInVzZXJTZWxlY3RlZFwiIGlmIGEgdXNlciBzZWxlY3RlZCB0aGUgcGFydGljdWxhciBjb2RlZCB2YWx1ZSBpbiBhIHVzZXIgaW50ZXJmYWNlIChlLmcuIHRoZSB1c2VyIHNlbGVjdHMgYW4gaXRlbSBpbiBhIHBpY2stbGlzdCkuIElmIGEgdXNlciBzZWxlY3RlZCBjb2RpbmcgZXhpc3RzLCBpdCBpcyB0aGUgcHJlZmVycmVkIGNob2ljZSBmb3IgcGVyZm9ybWluZyB0cmFuc2xhdGlvbnMgZXRjLiBPdGhlciBjb2RlcyBjYW4gb25seSBiZSBsaXRlcmFsIHRyYW5zbGF0aW9ucyB0byBhbHRlcm5hdGl2ZSBjb2RlIHN5c3RlbXMsIG9yIGNvZGVzIGF0IGEgbG93ZXIgbGV2ZWwgb2YgZ3JhbnVsYXJpdHkgKGUuZy4gYSBnZW5lcmljIGNvZGUgZm9yIGEgdmVuZG9yLXNwZWNpZmljIHByaW1hcnkgb25lKS5cclxuICAgKi9cclxuICBwdWJsaWMgY29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIHN0YXR1cyBpcyBpbnRlbmRlZCB0byBpZGVudGlmeSBpZiB0aGUgbWVkaWNhdGlvbiBpbiBhIGxvY2FsIHN5c3RlbSBpcyBpbiBhY3RpdmUgdXNlIHdpdGhpbiBhIGRydWcgZGF0YWJhc2Ugb3IgaW52ZW50b3J5LiAgRm9yIGV4YW1wbGUsIGEgcGhhcm1hY3kgc3lzdGVtIG1heSBjcmVhdGUgYSBuZXcgZHJ1ZyBmaWxlIHJlY29yZCBmb3IgYSBjb21wb3VuZGVkIHByb2R1Y3QgXCJBQkMgSG9zcGl0YWwgU3BlY2lhbCBDcmVhbVwiIHdpdGggYW4gYWN0aXZlIHN0YXR1cy4gIEF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZSwgaXQgbWF5IGJlIGRldGVybWluZWQgdGhhdCB0aGUgZHJ1ZyByZWNvcmQgd2FzIGNyZWF0ZWQgd2l0aCBhbiBlcnJvciBhbmQgdGhlIHN0YXR1cyBpcyBjaGFuZ2VkIHRvIFwiZW50ZXJlZCBpbiBlcnJvclwiLiAgIFRoaXMgc3RhdHVzIGlzIG5vdCBpbnRlbmRlZCB0byBzcGVjaWZ5IGlmIGEgbWVkaWNhdGlvbiBpcyBwYXJ0IG9mIGEgcGFydGljdWxhciBmb3JtdWxhcnkuICBJdCBpcyBwb3NzaWJsZSB0aGF0IHRoZSBkcnVnIHJlY29yZCBtYXkgYmUgcmVmZXJlbmNlZCBieSBtdWx0aXBsZSBmb3JtdWxhcmllcyBvciBjYXRhbG9ndWVzIGFuZCBlYWNoIG9mIHRob3NlIGVudHJpZXMgd291bGQgaGF2ZSBhIHNlcGFyYXRlIHN0YXR1cy5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzPzogZmhpci5GaGlyQ29kZTxNZWRpY2F0aW9ua25vd2xlZGdlU3RhdHVzQ29kZVR5cGU+fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXNjcmliZXMgdGhlIGRldGFpbHMgb2YgdGhlIG1hbnVmYWN0dXJlciBvZiB0aGUgbWVkaWNhdGlvbiBwcm9kdWN0LiAgVGhpcyBpcyBub3QgaW50ZW5kZWQgdG8gcmVwcmVzZW50IHRoZSBkaXN0cmlidXRvciBvZiBhIG1lZGljYXRpb24gcHJvZHVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgbWFudWZhY3R1cmVyPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gTWVkaWNhdGlvbiBpcyByZWZlcmVuY2VkIGZyb20gTWVkaWNhdGlvblJlcXVlc3QsIHRoaXMgaXMgdGhlIG9yZGVyZWQgZm9ybS4gIFdoZW4gTWVkaWNhdGlvbiBpcyByZWZlcmVuY2VkIHdpdGhpbiBNZWRpY2F0aW9uRGlzcGVuc2UsIHRoaXMgaXMgdGhlIGRpc3BlbnNlZCBmb3JtLiAgV2hlbiBNZWRpY2F0aW9uIGlzIHJlZmVyZW5jZWQgd2l0aGluIE1lZGljYXRpb25BZG1pbmlzdHJhdGlvbiwgdGhpcyBpcyBhZG1pbmlzdGVyZWQgZm9ybS5cclxuICAgKi9cclxuICBwdWJsaWMgZG9zZUZvcm0/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyB0aGUgcXVhbnRpdHkgb2YgbWVkaWNhdGlvbiBpbiBhIHBhY2thZ2UuICBUbyBzcGVjaWZ5IHRoZSBzdHJlbmd0aCBvZiB0aGUgbWVkaWNhdGlvbiwgdGhlIEluZ3JlZGllbnQuc3RyZW5ndGggYXR0cmlidXRlIGlzIHVzZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGFtb3VudD86IGZoaXIuUXVhbnRpdHl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFkZGl0aW9uYWwgbmFtZXMgZm9yIGEgbWVkaWNhdGlvbiwgZm9yIGV4YW1wbGUsIHRoZSBuYW1lKHMpIGdpdmVuIHRvIGEgbWVkaWNhdGlvbiBpbiBkaWZmZXJlbnQgY291bnRyaWVzLiAgRm9yIGV4YW1wbGUsIGFjZXRhbWlub3BoZW4gYW5kIHBhcmFjZXRhbW9sIG9yIHNhbGJ1dGFtb2wgYW5kIGFsYnV0ZXJvbC5cclxuICAgKi9cclxuICBwdWJsaWMgc3lub255bTogZmhpci5GaGlyU3RyaW5nW107XHJcbiAgLyoqXHJcbiAgICogQXNzb2NpYXRlZCBvciByZWxhdGVkIGtub3dsZWRnZSBhYm91dCBhIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGF0ZWRNZWRpY2F0aW9uS25vd2xlZGdlOiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VSZWxhdGVkTWVkaWNhdGlvbktub3dsZWRnZVtdO1xyXG4gIC8qKlxyXG4gICAqIEFzc29jaWF0ZWQgb3IgcmVsYXRlZCBtZWRpY2F0aW9ucy4gIEZvciBleGFtcGxlLCBpZiB0aGUgbWVkaWNhdGlvbiBpcyBhIGJyYW5kZWQgcHJvZHVjdCAoZS5nLiBDcmVzdG9yKSwgdGhpcyBpcyB0aGUgVGhlcmFwZXV0aWMgTW9laXR5IChlLmcuIFJvc3V2YXN0YXRpbikgb3IgaWYgdGhpcyBpcyBhIGdlbmVyaWMgbWVkaWNhdGlvbiAoZS5nLiBSb3N1dmFzdGF0aW4pLCB0aGlzIHdvdWxkIGxpbmsgdG8gYSBicmFuZGVkIHByb2R1Y3QgKGUuZy4gQ3Jlc3RvcikuXHJcbiAgICovXHJcbiAgcHVibGljIGFzc29jaWF0ZWRNZWRpY2F0aW9uOiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIENhdGVnb3J5IG9mIHRoZSBtZWRpY2F0aW9uIG9yIHByb2R1Y3QgKGUuZy4gYnJhbmRlZCBwcm9kdWN0LCB0aGVyYXBldXRpYyBtb2VpdHksIGdlbmVyaWMgcHJvZHVjdCwgaW5ub3ZhdG9yIHByb2R1Y3QsIGV0Yy4pLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9kdWN0VHlwZTogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBBc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gYWJvdXQgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIG1vbm9ncmFwaDogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlTW9ub2dyYXBoW107XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyBhIHBhcnRpY3VsYXIgY29uc3RpdHVlbnQgb2YgaW50ZXJlc3QgaW4gdGhlIHByb2R1Y3QuXHJcbiAgICovXHJcbiAgcHVibGljIGluZ3JlZGllbnQ6IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZUluZ3JlZGllbnRbXTtcclxuICAvKipcclxuICAgKiBUaGUgaW5zdHJ1Y3Rpb25zIGZvciBwcmVwYXJpbmcgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHByZXBhcmF0aW9uSW5zdHJ1Y3Rpb24/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGludGVuZGVkIG9yIGFwcHJvdmVkIHJvdXRlIG9mIGFkbWluaXN0cmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbnRlbmRlZFJvdXRlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwcmljZSBvZiB0aGUgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgY29zdDogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlQ29zdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwcm9ncmFtIHVuZGVyIHdoaWNoIHRoZSBtZWRpY2F0aW9uIGlzIHJldmlld2VkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb25pdG9yaW5nUHJvZ3JhbTogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlTW9uaXRvcmluZ1Byb2dyYW1bXTtcclxuICAvKipcclxuICAgKiBHdWlkZWxpbmVzIGZvciB0aGUgYWRtaW5pc3RyYXRpb24gb2YgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGFkbWluaXN0cmF0aW9uR3VpZGVsaW5lczogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlQWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzW107XHJcbiAgLyoqXHJcbiAgICogQ2F0ZWdvcml6YXRpb24gb2YgdGhlIG1lZGljYXRpb24gd2l0aGluIGEgZm9ybXVsYXJ5IG9yIGNsYXNzaWZpY2F0aW9uIHN5c3RlbS5cclxuICAgKi9cclxuICBwdWJsaWMgbWVkaWNpbmVDbGFzc2lmaWNhdGlvbjogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlTWVkaWNpbmVDbGFzc2lmaWNhdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIEluZm9ybWF0aW9uIHRoYXQgb25seSBhcHBsaWVzIHRvIHBhY2thZ2VzIChub3QgcHJvZHVjdHMpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYWNrYWdpbmc/OiBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VQYWNrYWdpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmllcyBkZXNjcmlwdGl2ZSBwcm9wZXJ0aWVzIG9mIHRoZSBtZWRpY2luZSwgc3VjaCBhcyBjb2xvciwgc2hhcGUsIGltcHJpbnRzLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIGRydWdDaGFyYWN0ZXJpc3RpYzogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlRHJ1Z0NoYXJhY3RlcmlzdGljW107XHJcbiAgLyoqXHJcbiAgICogUG90ZW50aWFsIGNsaW5pY2FsIGlzc3VlIHdpdGggb3IgYmV0d2VlbiBtZWRpY2F0aW9uKHMpIChmb3IgZXhhbXBsZSwgZHJ1Zy1kcnVnIGludGVyYWN0aW9uLCBkcnVnLWRpc2Vhc2UgY29udHJhaW5kaWNhdGlvbiwgZHJ1Zy1hbGxlcmd5IGludGVyYWN0aW9uLCBldGMuKS5cclxuICAgKi9cclxuICBwdWJsaWMgY29udHJhaW5kaWNhdGlvbjogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBSZWd1bGF0b3J5IGluZm9ybWF0aW9uIGFib3V0IGEgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVndWxhdG9yeTogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlUmVndWxhdG9yeVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIGNvdXJzZSBvZiBkcnVnIGFic29ycHRpb24sIGRpc3RyaWJ1dGlvbiwgbWV0YWJvbGlzbSBhbmQgZXhjcmV0aW9uIG9mIGEgbWVkaWNhdGlvbiBmcm9tIHRoZSBib2R5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBraW5ldGljczogZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlS2luZXRpY3NbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2F0aW9uS25vd2xlZGdlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNhdGlvbktub3dsZWRnZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdNZWRpY2F0aW9uS25vd2xlZGdlJztcclxuICAgIGlmIChzb3VyY2VbJ2NvZGUnXSkgeyB0aGlzLmNvZGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmNvZGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSkgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPE1lZGljYXRpb25rbm93bGVkZ2VTdGF0dXNDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2Uuc3RhdHVzfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zdGF0dXMnXSkge1xyXG4gICAgICBpZiAodGhpcy5zdGF0dXMpIHsgdGhpcy5zdGF0dXMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc3RhdHVzISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8TWVkaWNhdGlvbmtub3dsZWRnZVN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWFudWZhY3R1cmVyJ10pIHsgdGhpcy5tYW51ZmFjdHVyZXIgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLm1hbnVmYWN0dXJlcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rvc2VGb3JtJ10pIHsgdGhpcy5kb3NlRm9ybSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuZG9zZUZvcm0pOyB9XHJcbiAgICBpZiAoc291cmNlWydhbW91bnQnXSkgeyB0aGlzLmFtb3VudCA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5hbW91bnQpOyB9XHJcbiAgICBpZiAoc291cmNlWydzeW5vbnltJ10pIHsgdGhpcy5zeW5vbnltID0gc291cmNlLnN5bm9ueW0ubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3lub255bSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydfc3lub255bSddKSB7XHJcbiAgICAgIHNvdXJjZS5fc3lub255bS5mb3JFYWNoKCh4LGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zeW5vbnltLmxlbmd0aCA+PSBpKSB7IGlmICh4KSB7IHRoaXMuc3lub255bVtpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLnN5bm9ueW0ucHVzaChuZXcgZmhpci5GaGlyU3RyaW5nKHggYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPikpOyB9IH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZWxhdGVkTWVkaWNhdGlvbktub3dsZWRnZSddKSB7IHRoaXMucmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2UgPSBzb3VyY2UucmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2UubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlUmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWxhdGVkTWVkaWNhdGlvbktub3dsZWRnZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydhc3NvY2lhdGVkTWVkaWNhdGlvbiddKSB7IHRoaXMuYXNzb2NpYXRlZE1lZGljYXRpb24gPSBzb3VyY2UuYXNzb2NpYXRlZE1lZGljYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hc3NvY2lhdGVkTWVkaWNhdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwcm9kdWN0VHlwZSddKSB7IHRoaXMucHJvZHVjdFR5cGUgPSBzb3VyY2UucHJvZHVjdFR5cGUubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm9kdWN0VHlwZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtb25vZ3JhcGgnXSkgeyB0aGlzLm1vbm9ncmFwaCA9IHNvdXJjZS5tb25vZ3JhcGgubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlTW9ub2dyYXBoKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubW9ub2dyYXBoID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2luZ3JlZGllbnQnXSkgeyB0aGlzLmluZ3JlZGllbnQgPSBzb3VyY2UuaW5ncmVkaWVudC5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VJbmdyZWRpZW50KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaW5ncmVkaWVudCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwcmVwYXJhdGlvbkluc3RydWN0aW9uJ10pIHsgdGhpcy5wcmVwYXJhdGlvbkluc3RydWN0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLnByZXBhcmF0aW9uSW5zdHJ1Y3Rpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ByZXBhcmF0aW9uSW5zdHJ1Y3Rpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5wcmVwYXJhdGlvbkluc3RydWN0aW9uKSB7IHRoaXMucHJlcGFyYXRpb25JbnN0cnVjdGlvbi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9wcmVwYXJhdGlvbkluc3RydWN0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucHJlcGFyYXRpb25JbnN0cnVjdGlvbiA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bihzb3VyY2UuX3ByZXBhcmF0aW9uSW5zdHJ1Y3Rpb24gYXMgUGFydGlhbDxmaGlyLkZoaXJNYXJrZG93bkFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnaW50ZW5kZWRSb3V0ZSddKSB7IHRoaXMuaW50ZW5kZWRSb3V0ZSA9IHNvdXJjZS5pbnRlbmRlZFJvdXRlLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaW50ZW5kZWRSb3V0ZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjb3N0J10pIHsgdGhpcy5jb3N0ID0gc291cmNlLmNvc3QubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlQ29zdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvc3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbW9uaXRvcmluZ1Byb2dyYW0nXSkgeyB0aGlzLm1vbml0b3JpbmdQcm9ncmFtID0gc291cmNlLm1vbml0b3JpbmdQcm9ncmFtLm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZU1vbml0b3JpbmdQcm9ncmFtKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubW9uaXRvcmluZ1Byb2dyYW0gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzJ10pIHsgdGhpcy5hZG1pbmlzdHJhdGlvbkd1aWRlbGluZXMgPSBzb3VyY2UuYWRtaW5pc3RyYXRpb25HdWlkZWxpbmVzLm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZUFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFkbWluaXN0cmF0aW9uR3VpZGVsaW5lcyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtZWRpY2luZUNsYXNzaWZpY2F0aW9uJ10pIHsgdGhpcy5tZWRpY2luZUNsYXNzaWZpY2F0aW9uID0gc291cmNlLm1lZGljaW5lQ2xhc3NpZmljYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlTWVkaWNpbmVDbGFzc2lmaWNhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm1lZGljaW5lQ2xhc3NpZmljYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGFja2FnaW5nJ10pIHsgdGhpcy5wYWNrYWdpbmcgPSBuZXcgZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlUGFja2FnaW5nKHNvdXJjZS5wYWNrYWdpbmcpOyB9XHJcbiAgICBpZiAoc291cmNlWydkcnVnQ2hhcmFjdGVyaXN0aWMnXSkgeyB0aGlzLmRydWdDaGFyYWN0ZXJpc3RpYyA9IHNvdXJjZS5kcnVnQ2hhcmFjdGVyaXN0aWMubWFwKCh4KSA9PiBuZXcgZmhpci5NZWRpY2F0aW9uS25vd2xlZGdlRHJ1Z0NoYXJhY3RlcmlzdGljKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZHJ1Z0NoYXJhY3RlcmlzdGljID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRyYWluZGljYXRpb24nXSkgeyB0aGlzLmNvbnRyYWluZGljYXRpb24gPSBzb3VyY2UuY29udHJhaW5kaWNhdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRyYWluZGljYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVndWxhdG9yeSddKSB7IHRoaXMucmVndWxhdG9yeSA9IHNvdXJjZS5yZWd1bGF0b3J5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNhdGlvbktub3dsZWRnZVJlZ3VsYXRvcnkoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWd1bGF0b3J5ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2tpbmV0aWNzJ10pIHsgdGhpcy5raW5ldGljcyA9IHNvdXJjZS5raW5ldGljcy5tYXAoKHgpID0+IG5ldyBmaGlyLk1lZGljYXRpb25Lbm93bGVkZ2VLaW5ldGljcyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmtpbmV0aWNzID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBzdGF0dXMgKE1lZGljYXRpb25Lbm93bGVkZ2Uuc3RhdHVzKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHN0YXR1c1JlcXVpcmVkQ29kZXMoKSB7XHJcbiAgICByZXR1cm4gTWVkaWNhdGlvbmtub3dsZWRnZVN0YXR1c0NvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydyZXNvdXJjZVR5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcmVzb3VyY2VUeXBlOlwiTWVkaWNhdGlvbktub3dsZWRnZVwiIGZoaXI6IE1lZGljYXRpb25Lbm93bGVkZ2UucmVzb3VyY2VUeXBlOlwiTWVkaWNhdGlvbktub3dsZWRnZVwiJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiY29kZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvZGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzWydzdGF0dXMnXSAmJiAoIU9iamVjdC52YWx1ZXMoTWVkaWNhdGlvbmtub3dsZWRnZVN0YXR1c0NvZGVzKS5pbmNsdWRlcyh0aGlzLnN0YXR1cyBhcyBhbnkpKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnY29kZS1pbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdJbnZhbGlkIGNvZGUgcHJvcGVydHkgc3RhdHVzPzpmaGlyLkZoaXJDb2RlPE1lZGljYXRpb25rbm93bGVkZ2VTdGF0dXNDb2RlVHlwZT4gZmhpcjogTWVkaWNhdGlvbktub3dsZWRnZS5zdGF0dXM6Y29kZSBSZXF1aXJlZCBiaW5kaW5nIHRvOiBNZWRpY2F0aW9ua25vd2xlZGdlU3RhdHVzJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wic3RhdHVzXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3RhdHVzLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcIm1hbnVmYWN0dXJlclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm1hbnVmYWN0dXJlci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkb3NlRm9ybVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmRvc2VGb3JtLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImFtb3VudFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmFtb3VudC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJzeW5vbnltXCJdKSB7IHRoaXMuc3lub255bS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicmVsYXRlZE1lZGljYXRpb25Lbm93bGVkZ2VcIl0pIHsgdGhpcy5yZWxhdGVkTWVkaWNhdGlvbktub3dsZWRnZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiYXNzb2NpYXRlZE1lZGljYXRpb25cIl0pIHsgdGhpcy5hc3NvY2lhdGVkTWVkaWNhdGlvbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicHJvZHVjdFR5cGVcIl0pIHsgdGhpcy5wcm9kdWN0VHlwZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wibW9ub2dyYXBoXCJdKSB7IHRoaXMubW9ub2dyYXBoLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJpbmdyZWRpZW50XCJdKSB7IHRoaXMuaW5ncmVkaWVudC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicHJlcGFyYXRpb25JbnN0cnVjdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnByZXBhcmF0aW9uSW5zdHJ1Y3Rpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiaW50ZW5kZWRSb3V0ZVwiXSkgeyB0aGlzLmludGVuZGVkUm91dGUuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImNvc3RcIl0pIHsgdGhpcy5jb3N0LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJtb25pdG9yaW5nUHJvZ3JhbVwiXSkgeyB0aGlzLm1vbml0b3JpbmdQcm9ncmFtLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJhZG1pbmlzdHJhdGlvbkd1aWRlbGluZXNcIl0pIHsgdGhpcy5hZG1pbmlzdHJhdGlvbkd1aWRlbGluZXMuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcIm1lZGljaW5lQ2xhc3NpZmljYXRpb25cIl0pIHsgdGhpcy5tZWRpY2luZUNsYXNzaWZpY2F0aW9uLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJwYWNrYWdpbmdcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wYWNrYWdpbmcuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZHJ1Z0NoYXJhY3RlcmlzdGljXCJdKSB7IHRoaXMuZHJ1Z0NoYXJhY3RlcmlzdGljLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJjb250cmFpbmRpY2F0aW9uXCJdKSB7IHRoaXMuY29udHJhaW5kaWNhdGlvbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicmVndWxhdG9yeVwiXSkgeyB0aGlzLnJlZ3VsYXRvcnkuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImtpbmV0aWNzXCJdKSB7IHRoaXMua2luZXRpY3MuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=