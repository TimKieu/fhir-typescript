/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { C80PracticeCodesCodings } from '../fhirValueSets/C80PracticeCodesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { FhirBoolean } from './FhirBoolean.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Period } from './Period.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * A container for slots of time that may be available for booking appointments.
 */
var Schedule = /** @class */ (function (_super) {
    __extends(Schedule, _super);
    /**
     * Default constructor for Schedule - initializes any required elements to null if a value is not provided.
     */
    function Schedule(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Schedule';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['serviceCategory']) {
            _this.serviceCategory = source.serviceCategory.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.serviceCategory = [];
        }
        if (source['serviceType']) {
            _this.serviceType = source.serviceType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.serviceType = [];
        }
        if (source['specialty']) {
            _this.specialty = source.specialty.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.specialty = [];
        }
        if (source['actor']) {
            _this.actor = source.actor.map(function (x) { return new Reference(x); });
        }
        else {
            _this.actor = [];
        }
        if (source['planningHorizon']) {
            _this.planningHorizon = new Period(source.planningHorizon);
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for specialty (Schedule.specialty)
     */
    Schedule.specialtyPreferredCoding = function () {
        return C80PracticeCodesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Schedule.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Schedule" fhir: Schedule.resourceType:"Schedule"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (this["serviceCategory"]) {
            this.serviceCategory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["serviceType"]) {
            this.serviceType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["specialty"]) {
            this.specialty.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['actor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actor:fhir.Reference[] fhir: Schedule.actor:Reference', }));
        }
        else if (!Array.isArray(this.actor)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property actor:fhir.Reference[] fhir: Schedule.actor:Reference', }));
        }
        else if (this.actor.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actor:fhir.Reference[] fhir: Schedule.actor:Reference', }));
        }
        if (this["actor"]) {
            this.actor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["planningHorizon"]) {
            (_b = outcome.issue).push.apply(_b, this.planningHorizon.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_c = outcome.issue).push.apply(_c, this.comment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Schedule._fts_dataType = 'Schedule';
    return Schedule;
}(DomainResource));

export { Schedule };
//# sourceMappingURL=Schedule.js.map
