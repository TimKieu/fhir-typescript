/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MetricCalibrationTypeCodings } from '../fhirValueSets/MetricCalibrationTypeCodings.js';
import { MetricCalibrationStateCodings } from '../fhirValueSets/MetricCalibrationStateCodings.js';
import { MetricOperationalStatusCodings } from '../fhirValueSets/MetricOperationalStatusCodings.js';
import { MetricColorCodings } from '../fhirValueSets/MetricColorCodings.js';
import { MetricCategoryCodings } from '../fhirValueSets/MetricCategoryCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirInstant } from './FhirInstant.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Timing } from './Timing.js';

// <auto-generated/>
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
var DeviceMetricCalibration = /** @class */ (function (_super) {
    __extends(DeviceMetricCalibration, _super);
    /**
     * Default constructor for DeviceMetricCalibration - initializes any required elements to null if a value is not provided.
     */
    function DeviceMetricCalibration(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        if (source['state']) {
            _this.state = source.state;
        }
        if (source['time']) {
            _this.time = new FhirInstant({ value: source.time });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (DeviceMetric.calibration.type)
     */
    DeviceMetricCalibration.typeRequiredCoding = function () {
        return MetricCalibrationTypeCodings;
    };
    /**
     * Required-bound Value Set for state (DeviceMetric.calibration.state)
     */
    DeviceMetricCalibration.stateRequiredCoding = function () {
        return MetricCalibrationStateCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DeviceMetricCalibration.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["time"]) {
            (_a = outcome.issue).push.apply(_a, this.time.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DeviceMetricCalibration._fts_dataType = 'DeviceMetricCalibration';
    return DeviceMetricCalibration;
}(BackboneElement));
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
var DeviceMetric = /** @class */ (function (_super) {
    __extends(DeviceMetric, _super);
    /**
     * Default constructor for DeviceMetric - initializes any required elements to null if a value is not provided.
     */
    function DeviceMetric(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'DeviceMetric';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['unit']) {
            _this.unit = new CodeableConcept(source.unit);
        }
        if (source['source']) {
            _this.source = new Reference(source.source);
        }
        if (source['parent']) {
            _this.parent = new Reference(source.parent);
        }
        if (source['operationalStatus']) {
            _this.operationalStatus = source.operationalStatus;
        }
        if (source['color']) {
            _this.color = source.color;
        }
        if (source['category']) {
            _this.category = source.category;
        }
        else {
            _this.category = null;
        }
        if (source['measurementPeriod']) {
            _this.measurementPeriod = new Timing(source.measurementPeriod);
        }
        if (source['calibration']) {
            _this.calibration = source.calibration.map(function (x) { return new DeviceMetricCalibration(x); });
        }
        else {
            _this.calibration = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for operationalStatus (DeviceMetric.operationalStatus)
     */
    DeviceMetric.operationalStatusRequiredCoding = function () {
        return MetricOperationalStatusCodings;
    };
    /**
     * Required-bound Value Set for color (DeviceMetric.color)
     */
    DeviceMetric.colorRequiredCoding = function () {
        return MetricColorCodings;
    };
    /**
     * Required-bound Value Set for category (DeviceMetric.category)
     */
    DeviceMetric.categoryRequiredCoding = function () {
        return MetricCategoryCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DeviceMetric.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"DeviceMetric" fhir: DeviceMetric.resourceType:"DeviceMetric"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: DeviceMetric.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["unit"]) {
            (_b = outcome.issue).push.apply(_b, this.unit.doModelValidation().issue);
        }
        if (this["source"]) {
            (_c = outcome.issue).push.apply(_c, this.source.doModelValidation().issue);
        }
        if (this["parent"]) {
            (_d = outcome.issue).push.apply(_d, this.parent.doModelValidation().issue);
        }
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:MetricCategoryCodeType fhir: DeviceMetric.category:code', }));
        }
        if (this["measurementPeriod"]) {
            (_e = outcome.issue).push.apply(_e, this.measurementPeriod.doModelValidation().issue);
        }
        if (this["calibration"]) {
            this.calibration.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DeviceMetric._fts_dataType = 'DeviceMetric';
    return DeviceMetric;
}(DomainResource));

export { DeviceMetric, DeviceMetricCalibration };
//# sourceMappingURL=DeviceMetric.js.map
