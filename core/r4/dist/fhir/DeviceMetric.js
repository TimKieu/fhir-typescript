// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceMetric
import * as fhir from '../fhir.js';
// @ts-ignore
import { MetricCalibrationTypeCodes } from '../fhirValueSets/MetricCalibrationTypeCodes.js';
// @ts-ignore
import { MetricCalibrationStateCodes } from '../fhirValueSets/MetricCalibrationStateCodes.js';
// @ts-ignore
import { MetricOperationalStatusCodes } from '../fhirValueSets/MetricOperationalStatusCodes.js';
// @ts-ignore
import { MetricColorCodes } from '../fhirValueSets/MetricColorCodes.js';
// @ts-ignore
import { MetricCategoryCodes } from '../fhirValueSets/MetricCategoryCodes.js';
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export class DeviceMetricCalibration extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceMetricCalibration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['state']) {
            this.state = new fhir.FhirCode({ value: source.state });
        }
        if (source['time']) {
            this.time = new fhir.FhirInstant({ value: source.time });
        }
    }
    /**
     * Required-bound Value Set for type (DeviceMetric.calibration.type)
     */
    static get typeRequiredCodes() {
        return MetricCalibrationTypeCodes;
    }
    /**
     * Required-bound Value Set for state (DeviceMetric.calibration.state)
     */
    static get stateRequiredCodes() {
        return MetricCalibrationStateCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['type'] && (!Object.values(MetricCalibrationTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type?:fhir.FhirCode<MetricCalibrationTypeCodeType> fhir: DeviceMetric.calibration.type:code Required binding to: MetricCalibrationType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this['state'] && (!Object.values(MetricCalibrationStateCodes).includes(this.state))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property state?:fhir.FhirCode<MetricCalibrationStateCodeType> fhir: DeviceMetric.calibration.state:code Required binding to: MetricCalibrationState' });
        }
        if (this["state"]) {
            issues.push(...this.state.doModelValidation());
        }
        if (this["time"]) {
            issues.push(...this.time.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetricCalibration._fts_dataType = 'DeviceMetricCalibration';
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
export class DeviceMetric extends fhir.DomainResource {
    /**
     * Default constructor for DeviceMetric - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceMetric';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.FhirCode({ value: source.operationalStatus });
        }
        if (source['color']) {
            this.color = new fhir.FhirCode({ value: source.color });
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        else {
            this.category = null;
        }
        if (source['measurementPeriod']) {
            this.measurementPeriod = new fhir.Timing(source.measurementPeriod);
        }
        if (source['calibration']) {
            this.calibration = source.calibration.map((x) => new fhir.DeviceMetricCalibration(x));
        }
        else {
            this.calibration = [];
        }
    }
    /**
     * Required-bound Value Set for operationalStatus (DeviceMetric.operationalStatus)
     */
    static get operationalStatusRequiredCodes() {
        return MetricOperationalStatusCodes;
    }
    /**
     * Required-bound Value Set for color (DeviceMetric.color)
     */
    static get colorRequiredCodes() {
        return MetricColorCodes;
    }
    /**
     * Required-bound Value Set for category (DeviceMetric.category)
     */
    static get categoryRequiredCodes() {
        return MetricCategoryCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DeviceMetric" fhir: DeviceMetric.resourceType:"DeviceMetric"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: DeviceMetric.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (this["parent"]) {
            issues.push(...this.parent.doModelValidation());
        }
        if (this['operationalStatus'] && (!Object.values(MetricOperationalStatusCodes).includes(this.operationalStatus))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property operationalStatus?:fhir.FhirCode<MetricOperationalStatusCodeType> fhir: DeviceMetric.operationalStatus:code Required binding to: MetricOperationalStatus' });
        }
        if (this["operationalStatus"]) {
            issues.push(...this.operationalStatus.doModelValidation());
        }
        if (this['color'] && (!Object.values(MetricColorCodes).includes(this.color))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property color?:fhir.FhirCode<MetricColorCodeType> fhir: DeviceMetric.color:code Required binding to: MetricColor' });
        }
        if (this["color"]) {
            issues.push(...this.color.doModelValidation());
        }
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.FhirCode<MetricCategoryCodeType> fhir: DeviceMetric.category:code' });
        }
        if (this['category'] && (!Object.values(MetricCategoryCodes).includes(this.category))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property category:fhir.FhirCode<MetricCategoryCodeType> fhir: DeviceMetric.category:code Required binding to: MetricCategory' });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (this["measurementPeriod"]) {
            issues.push(...this.measurementPeriod.doModelValidation());
        }
        if (this["calibration"]) {
            this.calibration.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetric._fts_dataType = 'DeviceMetric';
//# sourceMappingURL=data:application/json;base64,