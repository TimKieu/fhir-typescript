// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceMetric
import * as fhir from '../fhir.js';
// @ts-ignore
import { MetricCalibrationTypeCodes } from '../fhirValueSets/MetricCalibrationTypeCodes.js';
// @ts-ignore
import { MetricCalibrationStateCodes } from '../fhirValueSets/MetricCalibrationStateCodes.js';
// @ts-ignore
import { MetricOperationalStatusCodes } from '../fhirValueSets/MetricOperationalStatusCodes.js';
// @ts-ignore
import { MetricColorCodes } from '../fhirValueSets/MetricColorCodes.js';
// @ts-ignore
import { MetricCategoryCodes } from '../fhirValueSets/MetricCategoryCodes.js';
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export class DeviceMetricCalibration extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceMetricCalibration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['state']) {
            this.state = new fhir.FhirCode({ value: source.state });
        }
        if (source['_state']) {
            if (this.state) {
                this.state.addExtendedProperties(source._state);
            }
            else {
                this.state = new fhir.FhirCode(source._state);
            }
        }
        if (source['time']) {
            this.time = new fhir.FhirInstant({ value: source.time });
        }
        if (source['_time']) {
            if (this.time) {
                this.time.addExtendedProperties(source._time);
            }
            else {
                this.time = new fhir.FhirInstant(source._time);
            }
        }
    }
    /**
     * Required-bound Value Set for type (DeviceMetric.calibration.type)
     */
    static get typeRequiredCodes() {
        return MetricCalibrationTypeCodes;
    }
    /**
     * Required-bound Value Set for state (DeviceMetric.calibration.state)
     */
    static get stateRequiredCodes() {
        return MetricCalibrationStateCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceMetric.calibration';
        }
        if (this['type'] && (!Object.values(MetricCalibrationTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: DeviceMetric.calibration.type:code Required binding to: MetricCalibrationType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this['state'] && (!Object.values(MetricCalibrationStateCodes).includes(this.state.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property state fhir: DeviceMetric.calibration.state:code Required binding to: MetricCalibrationState', expression: [expression] });
        }
        if (this["state"]) {
            issues.push(...this.state.doModelValidation(expression + '.state'));
        }
        if (this["time"]) {
            issues.push(...this.time.doModelValidation(expression + '.time'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetricCalibration._fts_dataType = 'DeviceMetricCalibration';
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
export class DeviceMetric extends fhir.DomainResource {
    /**
     * Default constructor for DeviceMetric - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceMetric';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.FhirCode({ value: source.operationalStatus });
        }
        if (source['_operationalStatus']) {
            if (this.operationalStatus) {
                this.operationalStatus.addExtendedProperties(source._operationalStatus);
            }
            else {
                this.operationalStatus = new fhir.FhirCode(source._operationalStatus);
            }
        }
        if (source['color']) {
            this.color = new fhir.FhirCode({ value: source.color });
        }
        if (source['_color']) {
            if (this.color) {
                this.color.addExtendedProperties(source._color);
            }
            else {
                this.color = new fhir.FhirCode(source._color);
            }
        }
        if (source['category']) {
            this.category = new fhir.FhirCode({ value: source.category });
        }
        else {
            this.category = null;
        }
        if (source['_category']) {
            if (this.category) {
                this.category.addExtendedProperties(source._category);
            }
            else {
                this.category = new fhir.FhirCode(source._category);
            }
        }
        if (source['measurementPeriod']) {
            this.measurementPeriod = new fhir.Timing(source.measurementPeriod);
        }
        if (source['calibration']) {
            this.calibration = source.calibration.map((x) => new fhir.DeviceMetricCalibration(x));
        }
        else {
            this.calibration = [];
        }
    }
    /**
     * Required-bound Value Set for operationalStatus (DeviceMetric.operationalStatus)
     */
    static get operationalStatusRequiredCodes() {
        return MetricOperationalStatusCodes;
    }
    /**
     * Required-bound Value Set for color (DeviceMetric.color)
     */
    static get colorRequiredCodes() {
        return MetricColorCodes;
    }
    /**
     * Required-bound Value Set for category (DeviceMetric.category)
     */
    static get categoryRequiredCodes() {
        return MetricCategoryCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DeviceMetric';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: DeviceMetric.resourceType:"DeviceMetric"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: DeviceMetric.type:CodeableConcept', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation(expression + '.unit'));
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation(expression + '.source'));
        }
        if (this["parent"]) {
            issues.push(...this.parent.doModelValidation(expression + '.parent'));
        }
        if (this['operationalStatus'] && (!Object.values(MetricOperationalStatusCodes).includes(this.operationalStatus.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property operationalStatus fhir: DeviceMetric.operationalStatus:code Required binding to: MetricOperationalStatus', expression: [expression] });
        }
        if (this["operationalStatus"]) {
            issues.push(...this.operationalStatus.doModelValidation(expression + '.operationalStatus'));
        }
        if (this['color'] && (!Object.values(MetricColorCodes).includes(this.color.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property color fhir: DeviceMetric.color:code Required binding to: MetricColor', expression: [expression] });
        }
        if (this["color"]) {
            issues.push(...this.color.doModelValidation(expression + '.color'));
        }
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category fhir: DeviceMetric.category:code', expression: [expression] });
        }
        if (this['category'] && (!Object.values(MetricCategoryCodes).includes(this.category.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property category fhir: DeviceMetric.category:code Required binding to: MetricCategory', expression: [expression] });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation(expression + '.category'));
        }
        if (this["measurementPeriod"]) {
            issues.push(...this.measurementPeriod.doModelValidation(expression + '.measurementPeriod'));
        }
        if (this["calibration"]) {
            this.calibration.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.calibration[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetric._fts_dataType = 'DeviceMetric';
//# sourceMappingURL=data:application/json;base64,