// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceMetric
import * as fhir from '../fhir.js';
// @ts-ignore
import { MetricCalibrationTypeCodings, } from '../fhirValueSets/MetricCalibrationTypeCodings.js';
// @ts-ignore
import { MetricCalibrationStateCodings, } from '../fhirValueSets/MetricCalibrationStateCodings.js';
// @ts-ignore
import { MetricOperationalStatusCodings, } from '../fhirValueSets/MetricOperationalStatusCodings.js';
// @ts-ignore
import { MetricColorCodings, } from '../fhirValueSets/MetricColorCodings.js';
// @ts-ignore
import { MetricCategoryCodings, } from '../fhirValueSets/MetricCategoryCodings.js';
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export class DeviceMetricCalibration extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceMetricCalibration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type;
        }
        if (source['state']) {
            this.state = source.state;
        }
        if (source['time']) {
            this.time = new fhir.FhirInstant({ value: source.time });
        }
    }
    /**
     * Required-bound Value Set for type (DeviceMetric.calibration.type)
     */
    static typeRequiredCoding() {
        return MetricCalibrationTypeCodings;
    }
    /**
     * Required-bound Value Set for state (DeviceMetric.calibration.state)
     */
    static stateRequiredCoding() {
        return MetricCalibrationStateCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["time"]) {
            issues.push(...this.time.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetricCalibration._fts_dataType = 'DeviceMetricCalibration';
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
export class DeviceMetric extends fhir.DomainResource {
    /**
     * Default constructor for DeviceMetric - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DeviceMetric';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['operationalStatus']) {
            this.operationalStatus = source.operationalStatus;
        }
        if (source['color']) {
            this.color = source.color;
        }
        if (source['category']) {
            this.category = source.category;
        }
        else {
            this.category = null;
        }
        if (source['measurementPeriod']) {
            this.measurementPeriod = new fhir.Timing(source.measurementPeriod);
        }
        if (source['calibration']) {
            this.calibration = source.calibration.map((x) => new fhir.DeviceMetricCalibration(x));
        }
        else {
            this.calibration = [];
        }
    }
    /**
     * Required-bound Value Set for operationalStatus (DeviceMetric.operationalStatus)
     */
    static operationalStatusRequiredCoding() {
        return MetricOperationalStatusCodings;
    }
    /**
     * Required-bound Value Set for color (DeviceMetric.color)
     */
    static colorRequiredCoding() {
        return MetricColorCodings;
    }
    /**
     * Required-bound Value Set for category (DeviceMetric.category)
     */
    static categoryRequiredCoding() {
        return MetricCategoryCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DeviceMetric" fhir: DeviceMetric.resourceType:"DeviceMetric"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: DeviceMetric.type:CodeableConcept', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (this["parent"]) {
            issues.push(...this.parent.doModelValidation());
        }
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:MetricCategoryCodeType fhir: DeviceMetric.category:code', });
        }
        if (this["measurementPeriod"]) {
            issues.push(...this.measurementPeriod.doModelValidation());
        }
        if (this["calibration"]) {
            this.calibration.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceMetric._fts_dataType = 'DeviceMetric';
//# sourceMappingURL=data:application/json;base64,