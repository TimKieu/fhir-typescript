// Minimum TypeScript Version: 3.7
// FHIR Primitive: markdown
import * as fhir from '../fhir.js';
/**
 * Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
 */
export class FhirMarkdown extends fhir.FhirPrimitive {
    /**
       * Create a FhirMarkdown
       * @param value Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
       * @param id Unique id for inter-element referencing (uncommon on primitives)
       * @param extension Additional content defined by implementations
       * @param options Options to pass to extension constructors
    */
    constructor(source = {}, options = {}) {
        super(source, options);
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if ((this.value) && ((typeof this.value !== 'string') || (!FhirMarkdown._fts_regex.test(this.value)))) {
            issues.push({ severity: 'error', code: 'invalid', diagnostics: 'Invalid value in primitive type markdown', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FhirMarkdown._fts_dataType = 'Markdown';
/**
 * Mapping of this datatype to a JSON equivalent
 */
FhirMarkdown._fts_jsonType = 'string';
// published regex: [ \r\n\t\S]+
FhirMarkdown._fts_regex = /^[ \r\n\t\S]+$/;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmhpck1hcmtkb3duLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9GaGlyTWFya2Rvd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2xDLDJCQUEyQjtBQUUzQixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQVluQzs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFhLFNBQVEsSUFBSSxDQUFDLGFBQWE7SUFlbEQ7Ozs7OztNQU1FO0lBQ0YsWUFBWSxTQUFtQyxFQUFFLEVBQUUsVUFBc0MsRUFBRztRQUMxRixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQjtRQUMvQixJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3JHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLDBDQUEwQyxHQUFHLENBQUMsQ0FBQztTQUMvRztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBakNEOztHQUVHO0FBQzZCLDBCQUFhLEdBQVUsVUFBVSxDQUFDO0FBQ2xFOztHQUVHO0FBQzZCLDBCQUFhLEdBQVUsUUFBUSxDQUFDO0FBQ2hFLGdDQUFnQztBQUNBLHVCQUFVLEdBQVUsZ0JBQWdCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUHJpbWl0aXZlOiBtYXJrZG93blxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBTeXN0ZW1zIGFyZSBub3QgcmVxdWlyZWQgdG8gaGF2ZSBtYXJrZG93biBzdXBwb3J0LCBzbyB0aGUgdGV4dCBzaG91bGQgYmUgcmVhZGFibGUgd2l0aG91dCBtYXJrZG93biBwcm9jZXNzaW5nLiBUaGUgbWFya2Rvd24gc3ludGF4IGlzIEdGTSAtIHNlZSBodHRwczovL2dpdGh1Yi5naXRodWIuY29tL2dmbS9cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmhpck1hcmtkb3duQXJncyBleHRlbmRzIGZoaXIuRmhpclByaW1pdGl2ZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFN5c3RlbXMgYXJlIG5vdCByZXF1aXJlZCB0byBoYXZlIG1hcmtkb3duIHN1cHBvcnQsIHNvIHRoZSB0ZXh0IHNob3VsZCBiZSByZWFkYWJsZSB3aXRob3V0IG1hcmtkb3duIHByb2Nlc3NpbmcuIFRoZSBtYXJrZG93biBzeW50YXggaXMgR0ZNIC0gc2VlIGh0dHBzOi8vZ2l0aHViLmdpdGh1Yi5jb20vZ2ZtL1xyXG4gICAqL1xyXG4gIHZhbHVlPzpGaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZHxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogU3lzdGVtcyBhcmUgbm90IHJlcXVpcmVkIHRvIGhhdmUgbWFya2Rvd24gc3VwcG9ydCwgc28gdGhlIHRleHQgc2hvdWxkIGJlIHJlYWRhYmxlIHdpdGhvdXQgbWFya2Rvd24gcHJvY2Vzc2luZy4gVGhlIG1hcmtkb3duIHN5bnRheCBpcyBHRk0gLSBzZWUgaHR0cHM6Ly9naXRodWIuZ2l0aHViLmNvbS9nZm0vXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmhpck1hcmtkb3duIGV4dGVuZHMgZmhpci5GaGlyUHJpbWl0aXZlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01hcmtkb3duJztcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBKU09OIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfanNvblR5cGU6c3RyaW5nID0gJ3N0cmluZyc7XHJcbiAgLy8gcHVibGlzaGVkIHJlZ2V4OiBbIFxcclxcblxcdFxcU10rXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX3JlZ2V4OlJlZ0V4cCA9IC9eWyBcXHJcXG5cXHRcXFNdKyQvXHJcbiAgLyoqXHJcbiAgICogQSBtYXJrZG93biB2YWx1ZSwgcmVwcmVzZW50ZWQgYXMgYSBKUyBzdHJpbmdcclxuICAgKi9cclxuICBkZWNsYXJlIHZhbHVlPzpzdHJpbmd8bnVsbHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBGaGlyTWFya2Rvd25cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBTeXN0ZW1zIGFyZSBub3QgcmVxdWlyZWQgdG8gaGF2ZSBtYXJrZG93biBzdXBwb3J0LCBzbyB0aGUgdGV4dCBzaG91bGQgYmUgcmVhZGFibGUgd2l0aG91dCBtYXJrZG93biBwcm9jZXNzaW5nLiBUaGUgbWFya2Rvd24gc3ludGF4IGlzIEdGTSAtIHNlZSBodHRwczovL2dpdGh1Yi5naXRodWIuY29tL2dmbS9cclxuICAgICAqIEBwYXJhbSBpZCBVbmlxdWUgaWQgZm9yIGludGVyLWVsZW1lbnQgcmVmZXJlbmNpbmcgKHVuY29tbW9uIG9uIHByaW1pdGl2ZXMpXHJcbiAgICAgKiBAcGFyYW0gZXh0ZW5zaW9uIEFkZGl0aW9uYWwgY29udGVudCBkZWZpbmVkIGJ5IGltcGxlbWVudGF0aW9uc1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIGV4dGVuc2lvbiBjb25zdHJ1Y3RvcnNcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEZoaXJNYXJrZG93bkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0geyB9ICkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICgodGhpcy52YWx1ZSkgJiYgKCh0eXBlb2YgdGhpcy52YWx1ZSAhPT0gJ3N0cmluZycpIHx8ICghRmhpck1hcmtkb3duLl9mdHNfcmVnZXgudGVzdCh0aGlzLnZhbHVlKSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdpbnZhbGlkJywgZGlhZ25vc3RpY3M6ICdJbnZhbGlkIHZhbHVlIGluIHByaW1pdGl2ZSB0eXBlIG1hcmtkb3duJywgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=