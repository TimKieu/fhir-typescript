// Minimum TypeScript Version: 3.7
// FHIR Primitive: markdown
import * as fhir from '../fhir.js';
/**
 * Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
 */
export class FhirMarkdown extends fhir.FhirPrimitive {
    /**
       * Create a FhirMarkdown
       * @param value Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
       * @param id Unique id for inter-element referencing (uncommon on primitives)
       * @param extension Additional content defined by implementations
       * @param options Options to pass to extension constructors
    */
    constructor(source = {}, options = {}) {
        super(source, options);
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if ((this.value) && (!FhirMarkdown._fts_regex.test(this.value))) {
            issues.push({ severity: 'error', code: 'invalid', diagnostics: 'Invalid value in primitive type markdown', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FhirMarkdown._fts_dataType = 'Markdown';
/**
 * Mapping of this datatype to a JSON equivalent
 */
FhirMarkdown._fts_jsonType = 'string';
// published regex: [ \r\n\t\S]+
FhirMarkdown._fts_regex = /^[ \r\n\t\S]+$/;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmhpck1hcmtkb3duLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9GaGlyTWFya2Rvd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2xDLDJCQUEyQjtBQUUzQixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQVluQzs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFhLFNBQVEsSUFBSSxDQUFDLGFBQWE7SUFlbEQ7Ozs7OztNQU1FO0lBQ0YsWUFBWSxTQUFtQyxFQUFFLEVBQUUsVUFBc0MsRUFBRztRQUMxRixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQjtRQUMvQixJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRyxXQUFXLEVBQUUsMENBQTBDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hIO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUFqQ0Q7O0dBRUc7QUFDNkIsMEJBQWEsR0FBVSxVQUFVLENBQUM7QUFDbEU7O0dBRUc7QUFDNkIsMEJBQWEsR0FBVSxRQUFRLENBQUM7QUFDaEUsZ0NBQWdDO0FBQ0EsdUJBQVUsR0FBVSxnQkFBZ0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBQcmltaXRpdmU6IG1hcmtkb3duXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIFN5c3RlbXMgYXJlIG5vdCByZXF1aXJlZCB0byBoYXZlIG1hcmtkb3duIHN1cHBvcnQsIHNvIHRoZSB0ZXh0IHNob3VsZCBiZSByZWFkYWJsZSB3aXRob3V0IG1hcmtkb3duIHByb2Nlc3NpbmcuIFRoZSBtYXJrZG93biBzeW50YXggaXMgR0ZNIC0gc2VlIGh0dHBzOi8vZ2l0aHViLmdpdGh1Yi5jb20vZ2ZtL1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBGaGlyTWFya2Rvd25BcmdzIGV4dGVuZHMgZmhpci5GaGlyUHJpbWl0aXZlQXJncyB7XHJcbiAgLyoqXHJcbiAgICogU3lzdGVtcyBhcmUgbm90IHJlcXVpcmVkIHRvIGhhdmUgbWFya2Rvd24gc3VwcG9ydCwgc28gdGhlIHRleHQgc2hvdWxkIGJlIHJlYWRhYmxlIHdpdGhvdXQgbWFya2Rvd24gcHJvY2Vzc2luZy4gVGhlIG1hcmtkb3duIHN5bnRheCBpcyBHRk0gLSBzZWUgaHR0cHM6Ly9naXRodWIuZ2l0aHViLmNvbS9nZm0vXHJcbiAgICovXHJcbiAgdmFsdWU/OkZoaXJNYXJrZG93bnxzdHJpbmd8dW5kZWZpbmVkfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTeXN0ZW1zIGFyZSBub3QgcmVxdWlyZWQgdG8gaGF2ZSBtYXJrZG93biBzdXBwb3J0LCBzbyB0aGUgdGV4dCBzaG91bGQgYmUgcmVhZGFibGUgd2l0aG91dCBtYXJrZG93biBwcm9jZXNzaW5nLiBUaGUgbWFya2Rvd24gc3ludGF4IGlzIEdGTSAtIHNlZSBodHRwczovL2dpdGh1Yi5naXRodWIuY29tL2dmbS9cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaGlyTWFya2Rvd24gZXh0ZW5kcyBmaGlyLkZoaXJQcmltaXRpdmUge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWFya2Rvd24nO1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEpTT04gZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19qc29uVHlwZTpzdHJpbmcgPSAnc3RyaW5nJztcclxuICAvLyBwdWJsaXNoZWQgcmVnZXg6IFsgXFxyXFxuXFx0XFxTXStcclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfcmVnZXg6UmVnRXhwID0gL15bIFxcclxcblxcdFxcU10rJC9cclxuICAvKipcclxuICAgKiBBIG1hcmtkb3duIHZhbHVlLCByZXByZXNlbnRlZCBhcyBhIEpTIHN0cmluZ1xyXG4gICAqL1xyXG4gIGRlY2xhcmUgdmFsdWU/OnN0cmluZ3xudWxsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgICAqIENyZWF0ZSBhIEZoaXJNYXJrZG93blxyXG4gICAgICogQHBhcmFtIHZhbHVlIFN5c3RlbXMgYXJlIG5vdCByZXF1aXJlZCB0byBoYXZlIG1hcmtkb3duIHN1cHBvcnQsIHNvIHRoZSB0ZXh0IHNob3VsZCBiZSByZWFkYWJsZSB3aXRob3V0IG1hcmtkb3duIHByb2Nlc3NpbmcuIFRoZSBtYXJrZG93biBzeW50YXggaXMgR0ZNIC0gc2VlIGh0dHBzOi8vZ2l0aHViLmdpdGh1Yi5jb20vZ2ZtL1xyXG4gICAgICogQHBhcmFtIGlkIFVuaXF1ZSBpZCBmb3IgaW50ZXItZWxlbWVudCByZWZlcmVuY2luZyAodW5jb21tb24gb24gcHJpbWl0aXZlcylcclxuICAgICAqIEBwYXJhbSBleHRlbnNpb24gQWRkaXRpb25hbCBjb250ZW50IGRlZmluZWQgYnkgaW1wbGVtZW50YXRpb25zXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gZXh0ZW5zaW9uIGNvbnN0cnVjdG9yc1xyXG4gICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Rmhpck1hcmtkb3duQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7IH0gKSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCh0aGlzLnZhbHVlKSAmJiAoIUZoaXJNYXJrZG93bi5fZnRzX3JlZ2V4LnRlc3QodGhpcy52YWx1ZSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdpbnZhbGlkJywgIGRpYWdub3N0aWNzOiAnSW52YWxpZCB2YWx1ZSBpbiBwcmltaXRpdmUgdHlwZSBtYXJrZG93bicsIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19