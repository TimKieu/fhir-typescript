// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Meta
import * as fhir from '../fhir.js';
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 */
export class Meta extends fhir.FhirElement {
    /**
     * Default constructor for Meta - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['versionId']) {
            this.versionId = new fhir.FhirId({ value: source.versionId });
        }
        if (source['_versionId']) {
            if (this.versionId) {
                this.versionId.addExtendedProperties(source._versionId);
            }
            else {
                this.versionId = new fhir.FhirId(source._versionId);
            }
        }
        if (source['lastUpdated']) {
            this.lastUpdated = new fhir.FhirInstant({ value: source.lastUpdated });
        }
        if (source['_lastUpdated']) {
            if (this.lastUpdated) {
                this.lastUpdated.addExtendedProperties(source._lastUpdated);
            }
            else {
                this.lastUpdated = new fhir.FhirInstant(source._lastUpdated);
            }
        }
        if (source['source']) {
            this.source = new fhir.FhirUri({ value: source.source });
        }
        if (source['_source']) {
            if (this.source) {
                this.source.addExtendedProperties(source._source);
            }
            else {
                this.source = new fhir.FhirUri(source._source);
            }
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.profile = [];
        }
        if (source['_profile']) {
            source._profile.forEach((x, i) => {
                if (this.profile.length >= i) {
                    if (x) {
                        this.profile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.profile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['security']) {
            this.security = source.security.map((x) => new fhir.Coding(x));
        }
        else {
            this.security = [];
        }
        if (source['tag']) {
            this.tag = source.tag.map((x) => new fhir.Coding(x));
        }
        else {
            this.tag = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Meta';
        }
        this.vOptS('versionId', expression);
        this.vOptS('lastUpdated', expression);
        this.vOptS('source', expression);
        this.vOptA('profile', expression);
        this.vOptA('security', expression);
        this.vOptA('tag', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Meta._fts_dataType = 'Meta';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvTWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5QkFBeUI7QUFFekIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUF5RG5DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLElBQUssU0FBUSxJQUFJLENBQUMsV0FBVztJQThCeEM7O09BRUc7SUFDSCxZQUFZLFNBQTJCLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ2pGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3pGLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxVQUFXLENBQUMsQ0FBQzthQUFFO2lCQUM1RTtnQkFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBc0MsQ0FBQyxDQUFDO2FBQUU7U0FDMUY7UUFDRCxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDcEcsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFF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QyxDQUFBO1FBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzVCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBM0VEOztHQUVHO0FBQzZCLGtCQUFhLEdBQVUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIENvbXBsZXhUeXBlOiBNZXRhXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTZWN1cml0eUxhYmVsc0NvZGVzLCAgU2VjdXJpdHlMYWJlbHNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU2VjdXJpdHlMYWJlbHNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU2VjdXJpdHlMYWJlbHNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NlY3VyaXR5TGFiZWxzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb21tb25UYWdzQ29kZXMsICBDb21tb25UYWdzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NvbW1vblRhZ3NDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQ29tbW9uVGFnc1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ29tbW9uVGFnc1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZXRhIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFBcmdzIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZXJ2ZXIgYXNzaWducyB0aGlzIHZhbHVlLCBhbmQgaWdub3JlcyB3aGF0IHRoZSBjbGllbnQgc3BlY2lmaWVzLCBleGNlcHQgaW4gdGhlIGNhc2UgdGhhdCB0aGUgc2VydmVyIGlzIGltcG9zaW5nIHZlcnNpb24gaW50ZWdyaXR5IG9uIHVwZGF0ZXMvZGVsZXRlcy5cclxuICAgKi9cclxuICB2ZXJzaW9uSWQ/OiBmaGlyLkZoaXJJZHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZXRhLnZlcnNpb25JZFxyXG4gICAqL1xyXG4gIF92ZXJzaW9uSWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgdmFsdWUgaXMgYWx3YXlzIHBvcHVsYXRlZCBleGNlcHQgd2hlbiB0aGUgcmVzb3VyY2UgaXMgZmlyc3QgYmVpbmcgY3JlYXRlZC4gVGhlIHNlcnZlciAvIHJlc291cmNlIG1hbmFnZXIgc2V0cyB0aGlzIHZhbHVlOyB3aGF0IGEgY2xpZW50IHByb3ZpZGVzIGlzIGlycmVsZXZhbnQuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgSFRUUCBMYXN0LU1vZGlmaWVkIGFuZCBTSE9VTEQgaGF2ZSB0aGUgc2FtZSB2YWx1ZSBvbiBhIFtyZWFkXShodHRwLmh0bWwjcmVhZCkgaW50ZXJhY3Rpb24uXHJcbiAgICovXHJcbiAgbGFzdFVwZGF0ZWQ/OiBmaGlyLkZoaXJJbnN0YW50fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1ldGEubGFzdFVwZGF0ZWRcclxuICAgKi9cclxuICBfbGFzdFVwZGF0ZWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEluIHRoZSBwcm92ZW5hbmNlIHJlc291cmNlLCB0aGlzIGNvcnJlc3BvbmRzIHRvIFByb3ZlbmFuY2UuZW50aXR5LndoYXRbeF0uIFRoZSBleGFjdCB1c2Ugb2YgdGhlIHNvdXJjZSAoYW5kIHRoZSBpbXBsaWVkIFByb3ZlbmFuY2UuZW50aXR5LnJvbGUpIGlzIGxlZnQgdG8gaW1wbGVtZW50ZXIgZGlzY3JldGlvbi4gT25seSBvbmUgbm9taW5hdGVkIHNvdXJjZSBpcyBhbGxvd2VkOyBmb3IgYWRkaXRpb25hbCBwcm92ZW5hbmNlIGRldGFpbHMsIGEgZnVsbCBQcm92ZW5hbmNlIHJlc291cmNlIHNob3VsZCBiZSB1c2VkLiBcclxuICAgKiBUaGlzIGVsZW1lbnQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgd2hlcmUgdGhlIGN1cnJlbnQgbWFzdGVyIHNvdXJjZSBvZiBhIHJlc291cmNlIHRoYXQgaGFzIGEgY2Fub25pY2FsIFVSTCBpZiB0aGUgcmVzb3VyY2UgaXMgbm8gbG9uZ2VyIGhvc3RlZCBhdCB0aGUgY2Fub25pY2FsIFVSTC5cclxuICAgKi9cclxuICBzb3VyY2U/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTWV0YS5zb3VyY2VcclxuICAgKi9cclxuICBfc291cmNlPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBJdCBpcyB1cCB0byB0aGUgc2VydmVyIGFuZC9vciBvdGhlciBpbmZyYXN0cnVjdHVyZSBvZiBwb2xpY3kgdG8gZGV0ZXJtaW5lIHdoZXRoZXIvaG93IHRoZXNlIGNsYWltcyBhcmUgdmVyaWZpZWQgYW5kL29yIHVwZGF0ZWQgb3ZlciB0aW1lLiAgVGhlIGxpc3Qgb2YgcHJvZmlsZSBVUkxzIGlzIGEgc2V0LlxyXG4gICAqL1xyXG4gIHByb2ZpbGU/OiBmaGlyLkZoaXJDYW5vbmljYWxbXXwoc3RyaW5nfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZXRhLnByb2ZpbGVcclxuICAgKi9cclxuICBfcHJvZmlsZT86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHNlY3VyaXR5IGxhYmVscyBjYW4gYmUgdXBkYXRlZCB3aXRob3V0IGNoYW5naW5nIHRoZSBzdGF0ZWQgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UuIFRoZSBsaXN0IG9mIHNlY3VyaXR5IGxhYmVscyBpcyBhIHNldC4gVW5pcXVlbmVzcyBpcyBiYXNlZCB0aGUgc3lzdGVtL2NvZGUsIGFuZCB2ZXJzaW9uIGFuZCBkaXNwbGF5IGFyZSBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIHNlY3VyaXR5PzogZmhpci5Db2RpbmdBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0YWdzIGNhbiBiZSB1cGRhdGVkIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHN0YXRlZCB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS4gVGhlIGxpc3Qgb2YgdGFncyBpcyBhIHNldC4gVW5pcXVlbmVzcyBpcyBiYXNlZCB0aGUgc3lzdGVtL2NvZGUsIGFuZCB2ZXJzaW9uIGFuZCBkaXNwbGF5IGFyZSBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIHRhZz86IGZoaXIuQ29kaW5nQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBtZXRhZGF0YSBhYm91dCBhIHJlc291cmNlLiBUaGlzIGlzIGNvbnRlbnQgaW4gdGhlIHJlc291cmNlIHRoYXQgaXMgbWFpbnRhaW5lZCBieSB0aGUgaW5mcmFzdHJ1Y3R1cmUuIENoYW5nZXMgdG8gdGhlIGNvbnRlbnQgbWlnaHQgbm90IGFsd2F5cyBiZSBhc3NvY2lhdGVkIHdpdGggdmVyc2lvbiBjaGFuZ2VzIHRvIHRoZSByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXRhIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdNZXRhJztcclxuICAvKipcclxuICAgKiBUaGUgc2VydmVyIGFzc2lnbnMgdGhpcyB2YWx1ZSwgYW5kIGlnbm9yZXMgd2hhdCB0aGUgY2xpZW50IHNwZWNpZmllcywgZXhjZXB0IGluIHRoZSBjYXNlIHRoYXQgdGhlIHNlcnZlciBpcyBpbXBvc2luZyB2ZXJzaW9uIGludGVncml0eSBvbiB1cGRhdGVzL2RlbGV0ZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHZlcnNpb25JZD86IGZoaXIuRmhpcklkfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIHZhbHVlIGlzIGFsd2F5cyBwb3B1bGF0ZWQgZXhjZXB0IHdoZW4gdGhlIHJlc291cmNlIGlzIGZpcnN0IGJlaW5nIGNyZWF0ZWQuIFRoZSBzZXJ2ZXIgLyByZXNvdXJjZSBtYW5hZ2VyIHNldHMgdGhpcyB2YWx1ZTsgd2hhdCBhIGNsaWVudCBwcm92aWRlcyBpcyBpcnJlbGV2YW50LiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gdGhlIEhUVFAgTGFzdC1Nb2RpZmllZCBhbmQgU0hPVUxEIGhhdmUgdGhlIHNhbWUgdmFsdWUgb24gYSBbcmVhZF0oaHR0cC5odG1sI3JlYWQpIGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsYXN0VXBkYXRlZD86IGZoaXIuRmhpckluc3RhbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluIHRoZSBwcm92ZW5hbmNlIHJlc291cmNlLCB0aGlzIGNvcnJlc3BvbmRzIHRvIFByb3ZlbmFuY2UuZW50aXR5LndoYXRbeF0uIFRoZSBleGFjdCB1c2Ugb2YgdGhlIHNvdXJjZSAoYW5kIHRoZSBpbXBsaWVkIFByb3ZlbmFuY2UuZW50aXR5LnJvbGUpIGlzIGxlZnQgdG8gaW1wbGVtZW50ZXIgZGlzY3JldGlvbi4gT25seSBvbmUgbm9taW5hdGVkIHNvdXJjZSBpcyBhbGxvd2VkOyBmb3IgYWRkaXRpb25hbCBwcm92ZW5hbmNlIGRldGFpbHMsIGEgZnVsbCBQcm92ZW5hbmNlIHJlc291cmNlIHNob3VsZCBiZSB1c2VkLiBcclxuICAgKiBUaGlzIGVsZW1lbnQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgd2hlcmUgdGhlIGN1cnJlbnQgbWFzdGVyIHNvdXJjZSBvZiBhIHJlc291cmNlIHRoYXQgaGFzIGEgY2Fub25pY2FsIFVSTCBpZiB0aGUgcmVzb3VyY2UgaXMgbm8gbG9uZ2VyIGhvc3RlZCBhdCB0aGUgY2Fub25pY2FsIFVSTC5cclxuICAgKi9cclxuICBwdWJsaWMgc291cmNlPzogZmhpci5GaGlyVXJpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJdCBpcyB1cCB0byB0aGUgc2VydmVyIGFuZC9vciBvdGhlciBpbmZyYXN0cnVjdHVyZSBvZiBwb2xpY3kgdG8gZGV0ZXJtaW5lIHdoZXRoZXIvaG93IHRoZXNlIGNsYWltcyBhcmUgdmVyaWZpZWQgYW5kL29yIHVwZGF0ZWQgb3ZlciB0aW1lLiAgVGhlIGxpc3Qgb2YgcHJvZmlsZSBVUkxzIGlzIGEgc2V0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9maWxlOiBmaGlyLkZoaXJDYW5vbmljYWxbXTtcclxuICAvKipcclxuICAgKiBUaGUgc2VjdXJpdHkgbGFiZWxzIGNhbiBiZSB1cGRhdGVkIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHN0YXRlZCB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS4gVGhlIGxpc3Qgb2Ygc2VjdXJpdHkgbGFiZWxzIGlzIGEgc2V0LiBVbmlxdWVuZXNzIGlzIGJhc2VkIHRoZSBzeXN0ZW0vY29kZSwgYW5kIHZlcnNpb24gYW5kIGRpc3BsYXkgYXJlIGlnbm9yZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHNlY3VyaXR5OiBmaGlyLkNvZGluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0YWdzIGNhbiBiZSB1cGRhdGVkIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHN0YXRlZCB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS4gVGhlIGxpc3Qgb2YgdGFncyBpcyBhIHNldC4gVW5pcXVlbmVzcyBpcyBiYXNlZCB0aGUgc3lzdGVtL2NvZGUsIGFuZCB2ZXJzaW9uIGFuZCBkaXNwbGF5IGFyZSBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0YWc6IGZoaXIuQ29kaW5nW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWV0YSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1ldGFBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndmVyc2lvbklkJ10pIHsgdGhpcy52ZXJzaW9uSWQgPSBuZXcgZmhpci5GaGlySWQoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbklkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ192ZXJzaW9uSWQnXSkge1xyXG4gICAgICBpZiAodGhpcy52ZXJzaW9uSWQpIHsgdGhpcy52ZXJzaW9uSWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdmVyc2lvbklkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudmVyc2lvbklkID0gbmV3IGZoaXIuRmhpcklkKHNvdXJjZS5fdmVyc2lvbklkIGFzIFBhcnRpYWw8Zmhpci5GaGlySWRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2xhc3RVcGRhdGVkJ10pIHsgdGhpcy5sYXN0VXBkYXRlZCA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHt2YWx1ZTogc291cmNlLmxhc3RVcGRhdGVkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19sYXN0VXBkYXRlZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmxhc3RVcGRhdGVkKSB7IHRoaXMubGFzdFVwZGF0ZWQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbGFzdFVwZGF0ZWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5sYXN0VXBkYXRlZCA9IG5ldyBmaGlyLkZoaXJJbnN0YW50KHNvdXJjZS5fbGFzdFVwZGF0ZWQgYXMgUGFydGlhbDxmaGlyLkZoaXJJbnN0YW50QXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydzb3VyY2UnXSkgeyB0aGlzLnNvdXJjZSA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2Uuc291cmNlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zb3VyY2UnXSkge1xyXG4gICAgICBpZiAodGhpcy5zb3VyY2UpIHsgdGhpcy5zb3VyY2UuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc291cmNlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc291cmNlID0gbmV3IGZoaXIuRmhpclVyaShzb3VyY2UuX3NvdXJjZSBhcyBQYXJ0aWFsPGZoaXIuRmhpclVyaUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsncHJvZmlsZSddKSB7IHRoaXMucHJvZmlsZSA9IHNvdXJjZS5wcm9maWxlLm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpckNhbm9uaWNhbCh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnByb2ZpbGUgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3Byb2ZpbGUnXSkge1xyXG4gICAgICBzb3VyY2UuX3Byb2ZpbGUuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvZmlsZS5sZW5ndGggPj0gaSkgeyBpZiAoeCkgeyB0aGlzLnByb2ZpbGVbaV0uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHgpOyB9IH1cclxuICAgICAgICBlbHNlIHsgaWYgKHgpIHsgdGhpcy5wcm9maWxlLnB1c2gobmV3IGZoaXIuRmhpckNhbm9uaWNhbCh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyQ2Fub25pY2FsQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VjdXJpdHknXSkgeyB0aGlzLnNlY3VyaXR5ID0gc291cmNlLnNlY3VyaXR5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kaW5nKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc2VjdXJpdHkgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGFnJ10pIHsgdGhpcy50YWcgPSBzb3VyY2UudGFnLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kaW5nKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudGFnID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb246c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7IGV4cHJlc3Npb24gPSAnTWV0YScgfVxyXG4gICAgdGhpcy52T3B0UygndmVyc2lvbklkJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygnbGFzdFVwZGF0ZWQnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCdzb3VyY2UnLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdwcm9maWxlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnc2VjdXJpdHknLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCd0YWcnLGV4cHJlc3Npb24pXHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=