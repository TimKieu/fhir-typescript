/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SecurityLabelsCodings } from '../fhirValueSets/SecurityLabelsCodings.js';
import { FhirElement } from './FhirElement.js';
import { FhirId } from './FhirId.js';
import { FhirInstant } from './FhirInstant.js';
import { FhirUri } from './FhirUri.js';
import { FhirCanonical } from './FhirCanonical.js';
import { Coding } from './Coding.js';

// <auto-generated/>
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 */
var Meta = /** @class */ (function (_super) {
    __extends(Meta, _super);
    /**
     * Default constructor for Meta - initializes any required elements to null if a value is not provided.
     */
    function Meta(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['versionId']) {
            _this.versionId = new FhirId({ value: source.versionId });
        }
        if (source['lastUpdated']) {
            _this.lastUpdated = new FhirInstant({ value: source.lastUpdated });
        }
        if (source['source']) {
            _this.source = new FhirUri({ value: source.source });
        }
        if (source['profile']) {
            _this.profile = source.profile.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.profile = [];
        }
        if (source['security']) {
            _this.security = source.security.map(function (x) { return new Coding(x); });
        }
        else {
            _this.security = [];
        }
        if (source['tag']) {
            _this.tag = source.tag.map(function (x) { return new Coding(x); });
        }
        else {
            _this.tag = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for security (Meta.security)
     */
    Meta.securityExtensibleCoding = function () {
        return SecurityLabelsCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Meta.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["versionId"]) {
            (_a = outcome.issue).push.apply(_a, this.versionId.doModelValidation().issue);
        }
        if (this["lastUpdated"]) {
            (_b = outcome.issue).push.apply(_b, this.lastUpdated.doModelValidation().issue);
        }
        if (this["source"]) {
            (_c = outcome.issue).push.apply(_c, this.source.doModelValidation().issue);
        }
        if (this["profile"]) {
            this.profile.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["security"]) {
            this.security.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["tag"]) {
            this.tag.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Meta._fts_dataType = 'Meta';
    return Meta;
}(FhirElement));

export { Meta };
//# sourceMappingURL=Meta.js.map
