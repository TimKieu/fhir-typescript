/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { AccountStatusCodings } from '../fhirValueSets/AccountStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Period } from './Period.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * Typically. this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
var AccountCoverage = /** @class */ (function (_super) {
    __extends(AccountCoverage, _super);
    /**
     * Default constructor for AccountCoverage - initializes any required elements to null if a value is not provided.
     */
    function AccountCoverage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['coverage']) {
            _this.coverage = new Reference(source.coverage);
        }
        else {
            _this.coverage = null;
        }
        if (source['priority']) {
            _this.priority = new FhirPositiveInt({ value: source.priority });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AccountCoverage.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['coverage']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property coverage:fhir.Reference fhir: Account.coverage.coverage:Reference', }));
        }
        if (this["coverage"]) {
            (_a = outcome.issue).push.apply(_a, this.coverage.doModelValidation().issue);
        }
        if (this["priority"]) {
            (_b = outcome.issue).push.apply(_b, this.priority.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AccountCoverage._fts_dataType = 'AccountCoverage';
    return AccountCoverage;
}(BackboneElement));
/**
 * The parties responsible for balancing the account if other payment options fall short.
 */
var AccountGuarantor = /** @class */ (function (_super) {
    __extends(AccountGuarantor, _super);
    /**
     * Default constructor for AccountGuarantor - initializes any required elements to null if a value is not provided.
     */
    function AccountGuarantor(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['party']) {
            _this.party = new Reference(source.party);
        }
        else {
            _this.party = null;
        }
        if (source['onHold']) {
            _this.onHold = new FhirBoolean({ value: source.onHold });
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AccountGuarantor.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['party']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property party:fhir.Reference fhir: Account.guarantor.party:Reference', }));
        }
        if (this["party"]) {
            (_a = outcome.issue).push.apply(_a, this.party.doModelValidation().issue);
        }
        if (this["onHold"]) {
            (_b = outcome.issue).push.apply(_b, this.onHold.doModelValidation().issue);
        }
        if (this["period"]) {
            (_c = outcome.issue).push.apply(_c, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AccountGuarantor._fts_dataType = 'AccountGuarantor';
    return AccountGuarantor;
}(BackboneElement));
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    /**
     * Default constructor for Account - initializes any required elements to null if a value is not provided.
     */
    function Account(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Account';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['subject']) {
            _this.subject = source.subject.map(function (x) { return new Reference(x); });
        }
        else {
            _this.subject = [];
        }
        if (source['servicePeriod']) {
            _this.servicePeriod = new Period(source.servicePeriod);
        }
        if (source['coverage']) {
            _this.coverage = source.coverage.map(function (x) { return new AccountCoverage(x); });
        }
        else {
            _this.coverage = [];
        }
        if (source['owner']) {
            _this.owner = new Reference(source.owner);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['guarantor']) {
            _this.guarantor = source.guarantor.map(function (x) { return new AccountGuarantor(x); });
        }
        else {
            _this.guarantor = [];
        }
        if (source['partOf']) {
            _this.partOf = new Reference(source.partOf);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Account.status)
     */
    Account.statusRequiredCoding = function () {
        return AccountStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Account.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Account" fhir: Account.resourceType:"Account"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:AccountStatusCodeType fhir: Account.status:code', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        if (this["subject"]) {
            this.subject.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["servicePeriod"]) {
            (_c = outcome.issue).push.apply(_c, this.servicePeriod.doModelValidation().issue);
        }
        if (this["coverage"]) {
            this.coverage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["owner"]) {
            (_d = outcome.issue).push.apply(_d, this.owner.doModelValidation().issue);
        }
        if (this["description"]) {
            (_e = outcome.issue).push.apply(_e, this.description.doModelValidation().issue);
        }
        if (this["guarantor"]) {
            this.guarantor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            (_f = outcome.issue).push.apply(_f, this.partOf.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Account._fts_dataType = 'Account';
    return Account;
}(DomainResource));

export { Account, AccountCoverage, AccountGuarantor };
//# sourceMappingURL=Account.js.map
