// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Account
import * as fhir from '../fhir.js';
// @ts-ignore
import { AccountStatusCodes } from '../fhirValueSets/AccountStatusCodes.js';
/**
 * Typically. this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
export class AccountCoverage extends fhir.BackboneElement {
    /**
     * Default constructor for AccountCoverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['priority']) {
            this.priority = new fhir.FhirPositiveInt({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirPositiveInt(source._priority);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Account.coverage';
        }
        if (!this['coverage']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property coverage fhir: Account.coverage.coverage:Reference', expression: [expression] });
        }
        if (this["coverage"]) {
            issues.push(...this.coverage.doModelValidation(expression + '.coverage'));
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation(expression + '.priority'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AccountCoverage._fts_dataType = 'AccountCoverage';
/**
 * The parties responsible for balancing the account if other payment options fall short.
 */
export class AccountGuarantor extends fhir.BackboneElement {
    /**
     * Default constructor for AccountGuarantor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
        else {
            this.party = null;
        }
        if (source['onHold']) {
            this.onHold = new fhir.FhirBoolean({ value: source.onHold });
        }
        if (source['_onHold']) {
            if (this.onHold) {
                this.onHold.addExtendedProperties(source._onHold);
            }
            else {
                this.onHold = new fhir.FhirBoolean(source._onHold);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Account.guarantor';
        }
        if (!this['party']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property party fhir: Account.guarantor.party:Reference', expression: [expression] });
        }
        if (this["party"]) {
            issues.push(...this.party.doModelValidation(expression + '.party'));
        }
        if (this["onHold"]) {
            issues.push(...this.onHold.doModelValidation(expression + '.onHold'));
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AccountGuarantor._fts_dataType = 'AccountGuarantor';
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
export class Account extends fhir.DomainResource {
    /**
     * Default constructor for Account - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Account';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['servicePeriod']) {
            this.servicePeriod = new fhir.Period(source.servicePeriod);
        }
        if (source['coverage']) {
            this.coverage = source.coverage.map((x) => new fhir.AccountCoverage(x));
        }
        else {
            this.coverage = [];
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['guarantor']) {
            this.guarantor = source.guarantor.map((x) => new fhir.AccountGuarantor(x));
        }
        else {
            this.guarantor = [];
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
    }
    /**
     * Required-bound Value Set for status (Account.status)
     */
    static get statusRequiredCodes() {
        return AccountStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Account';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Account.resourceType:"Account"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: Account.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(AccountStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (Account.status) of type code is missing code for Required binding to: AccountStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["subject"]) {
            this.subject.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.subject[${i}]`)); });
        }
        if (this["servicePeriod"]) {
            issues.push(...this.servicePeriod.doModelValidation(expression + '.servicePeriod'));
        }
        if (this["coverage"]) {
            this.coverage.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.coverage[${i}]`)); });
        }
        if (this["owner"]) {
            issues.push(...this.owner.doModelValidation(expression + '.owner'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["guarantor"]) {
            this.guarantor.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.guarantor[${i}]`)); });
        }
        if (this["partOf"]) {
            issues.push(...this.partOf.doModelValidation(expression + '.partOf'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Account._fts_dataType = 'Account';
//# sourceMappingURL=data:application/json;base64,