// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: RiskAssessment
import * as fhir from '../fhir.js';
// @ts-ignore
import { ObservationStatusCodes } from '../fhirValueSets/ObservationStatusCodes.js';
/**
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
export class RiskAssessmentPrediction extends fhir.BackboneElement {
    /**
     * Default constructor for RiskAssessmentPrediction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['probability']) {
            this.probability = source.probability;
        }
        else if (source['probabilityDecimal']) {
            this.probability = new fhir.FhirDecimal({ value: source.probabilityDecimal });
        }
        else if (source['probabilityRange']) {
            this.probability = new fhir.Range(source.probabilityRange);
        }
        if (source['qualitativeRisk']) {
            this.qualitativeRisk = new fhir.CodeableConcept(source.qualitativeRisk);
        }
        if (source['relativeRisk']) {
            this.relativeRisk = new fhir.FhirDecimal({ value: source.relativeRisk });
        }
        if (source['_relativeRisk']) {
            if (this.relativeRisk) {
                this.relativeRisk.addExtendedProperties(source._relativeRisk);
            }
            else {
                this.relativeRisk = new fhir.FhirDecimal(source._relativeRisk);
            }
        }
        if (source['when']) {
            this.when = source.when;
        }
        else if (source['whenPeriod']) {
            this.when = new fhir.Period(source.whenPeriod);
        }
        else if (source['whenRange']) {
            this.when = new fhir.Range(source.whenRange);
        }
        if (source['rationale']) {
            this.rationale = new fhir.FhirString({ value: source.rationale });
        }
        if (source['_rationale']) {
            if (this.rationale) {
                this.rationale.addExtendedProperties(source._rationale);
            }
            else {
                this.rationale = new fhir.FhirString(source._rationale);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'RiskAssessment.prediction';
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation(expression + '.outcome'));
        }
        if (this["qualitativeRisk"]) {
            issues.push(...this.qualitativeRisk.doModelValidation(expression + '.qualitativeRisk'));
        }
        if (this["relativeRisk"]) {
            issues.push(...this.relativeRisk.doModelValidation(expression + '.relativeRisk'));
        }
        if (this["rationale"]) {
            issues.push(...this.rationale.doModelValidation(expression + '.rationale'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskAssessmentPrediction._fts_dataType = 'RiskAssessmentPrediction';
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.prediction.probability[x]
 */
RiskAssessmentPrediction._fts_probabilityIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.prediction.when[x]
 */
RiskAssessmentPrediction._fts_whenIsChoice = true;
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
export class RiskAssessment extends fhir.DomainResource {
    /**
     * Default constructor for RiskAssessment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'RiskAssessment';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = new fhir.Reference(source.basedOn);
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        if (source['condition']) {
            this.condition = new fhir.Reference(source.condition);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['basis']) {
            this.basis = source.basis.map((x) => new fhir.Reference(x));
        }
        else {
            this.basis = [];
        }
        if (source['prediction']) {
            this.prediction = source.prediction.map((x) => new fhir.RiskAssessmentPrediction(x));
        }
        else {
            this.prediction = [];
        }
        if (source['mitigation']) {
            this.mitigation = new fhir.FhirString({ value: source.mitigation });
        }
        if (source['_mitigation']) {
            if (this.mitigation) {
                this.mitigation.addExtendedProperties(source._mitigation);
            }
            else {
                this.mitigation = new fhir.FhirString(source._mitigation);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Required-bound Value Set for status (RiskAssessment.status)
     */
    static get statusRequiredCodes() {
        return ObservationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'RiskAssessment';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: RiskAssessment.resourceType:"RiskAssessment"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["basedOn"]) {
            issues.push(...this.basedOn.doModelValidation(expression + '.basedOn'));
        }
        if (this["parent"]) {
            issues.push(...this.parent.doModelValidation(expression + '.parent'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: RiskAssessment.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(ObservationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (RiskAssessment.status) of type code is missing code for Required binding to: ObservationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation(expression + '.method'));
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject fhir: RiskAssessment.subject:Reference', expression: [expression] });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation(expression + '.subject'));
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation(expression + '.encounter'));
        }
        if (this["condition"]) {
            issues.push(...this.condition.doModelValidation(expression + '.condition'));
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation(expression + '.performer'));
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonCode[${i}]`)); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonReference[${i}]`)); });
        }
        if (this["basis"]) {
            this.basis.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.basis[${i}]`)); });
        }
        if (this["prediction"]) {
            this.prediction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.prediction[${i}]`)); });
        }
        if (this["mitigation"]) {
            issues.push(...this.mitigation.doModelValidation(expression + '.mitigation'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskAssessment._fts_dataType = 'RiskAssessment';
/**
 * Internal flag to properly serialize choice-type element RiskAssessment.occurrence[x]
 */
RiskAssessment._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,