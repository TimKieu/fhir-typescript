/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ObservationStatusCodings } from '../fhirValueSets/ObservationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Range } from './Range.js';
import { Period } from './Period.js';
import { FhirString } from './FhirString.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
var RiskAssessmentPrediction = /** @class */ (function (_super) {
    __extends(RiskAssessmentPrediction, _super);
    /**
     * Default constructor for RiskAssessmentPrediction - initializes any required elements to null if a value is not provided.
     */
    function RiskAssessmentPrediction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['outcome']) {
            _this.outcome = new CodeableConcept(source.outcome);
        }
        if (source['probability']) {
            _this.probability = source.probability;
        }
        else if (source['probabilityDecimal']) {
            _this.probability = new FhirDecimal({ value: source.probabilityDecimal });
        }
        else if (source['probabilityRange']) {
            _this.probability = new Range(source.probabilityRange);
        }
        if (source['qualitativeRisk']) {
            _this.qualitativeRisk = new CodeableConcept(source.qualitativeRisk);
        }
        if (source['relativeRisk']) {
            _this.relativeRisk = new FhirDecimal({ value: source.relativeRisk });
        }
        if (source['when']) {
            _this.when = source.when;
        }
        else if (source['whenPeriod']) {
            _this.when = new Period(source.whenPeriod);
        }
        else if (source['whenRange']) {
            _this.when = new Range(source.whenRange);
        }
        if (source['rationale']) {
            _this.rationale = new FhirString({ value: source.rationale });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RiskAssessmentPrediction.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["outcome"]) {
            (_a = outcome.issue).push.apply(_a, this.outcome.doModelValidation().issue);
        }
        if (this["qualitativeRisk"]) {
            (_b = outcome.issue).push.apply(_b, this.qualitativeRisk.doModelValidation().issue);
        }
        if (this["relativeRisk"]) {
            (_c = outcome.issue).push.apply(_c, this.relativeRisk.doModelValidation().issue);
        }
        if (this["rationale"]) {
            (_d = outcome.issue).push.apply(_d, this.rationale.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RiskAssessmentPrediction._fts_dataType = 'RiskAssessmentPrediction';
    /**
     * Internal flag to properly serialize choice-type element RiskAssessment.prediction.probability[x]
     */
    RiskAssessmentPrediction._fts_probabilityIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element RiskAssessment.prediction.when[x]
     */
    RiskAssessmentPrediction._fts_whenIsChoice = true;
    return RiskAssessmentPrediction;
}(BackboneElement));
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
var RiskAssessment = /** @class */ (function (_super) {
    __extends(RiskAssessment, _super);
    /**
     * Default constructor for RiskAssessment - initializes any required elements to null if a value is not provided.
     */
    function RiskAssessment(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'RiskAssessment';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['basedOn']) {
            _this.basedOn = new Reference(source.basedOn);
        }
        if (source['parent']) {
            _this.parent = new Reference(source.parent);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['method']) {
            _this.method = new CodeableConcept(source.method);
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['occurrence']) {
            _this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            _this.occurrence = new FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            _this.occurrence = new Period(source.occurrencePeriod);
        }
        if (source['condition']) {
            _this.condition = new Reference(source.condition);
        }
        if (source['performer']) {
            _this.performer = new Reference(source.performer);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['basis']) {
            _this.basis = source.basis.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basis = [];
        }
        if (source['prediction']) {
            _this.prediction = source.prediction.map(function (x) { return new RiskAssessmentPrediction(x); });
        }
        else {
            _this.prediction = [];
        }
        if (source['mitigation']) {
            _this.mitigation = new FhirString({ value: source.mitigation });
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (RiskAssessment.status)
     */
    RiskAssessment.statusRequiredCoding = function () {
        return ObservationStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    RiskAssessment.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"RiskAssessment" fhir: RiskAssessment.resourceType:"RiskAssessment"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            (_a = outcome.issue).push.apply(_a, this.basedOn.doModelValidation().issue);
        }
        if (this["parent"]) {
            (_b = outcome.issue).push.apply(_b, this.parent.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ObservationStatusCodeType fhir: RiskAssessment.status:code', }));
        }
        if (this["method"]) {
            (_c = outcome.issue).push.apply(_c, this.method.doModelValidation().issue);
        }
        if (this["code"]) {
            (_d = outcome.issue).push.apply(_d, this.code.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: RiskAssessment.subject:Reference', }));
        }
        if (this["subject"]) {
            (_e = outcome.issue).push.apply(_e, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_f = outcome.issue).push.apply(_f, this.encounter.doModelValidation().issue);
        }
        if (this["condition"]) {
            (_g = outcome.issue).push.apply(_g, this.condition.doModelValidation().issue);
        }
        if (this["performer"]) {
            (_h = outcome.issue).push.apply(_h, this.performer.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basis"]) {
            this.basis.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["prediction"]) {
            this.prediction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["mitigation"]) {
            (_j = outcome.issue).push.apply(_j, this.mitigation.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    RiskAssessment._fts_dataType = 'RiskAssessment';
    /**
     * Internal flag to properly serialize choice-type element RiskAssessment.occurrence[x]
     */
    RiskAssessment._fts_occurrenceIsChoice = true;
    return RiskAssessment;
}(DomainResource));

export { RiskAssessment, RiskAssessmentPrediction };
//# sourceMappingURL=RiskAssessment.js.map
