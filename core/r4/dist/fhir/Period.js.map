{"version":3,"file":"Period.js","sources":["../../src/fhir/Period.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ComplexType: Period\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the Period type.\r\n */\r\nexport interface PeriodArgs extends fhir.FhirElementArgs {\r\n  /**\r\n   * If the low element is missing, the meaning is that the low boundary is not known.\r\n   */\r\n  start?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.\r\n   */\r\n  end?: fhir.FhirDateTime|string|undefined;\r\n}\r\n\r\n/**\r\n * A time period defined by a start and end date and optionally time.\r\n */\r\nexport class Period extends fhir.FhirElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Period';\r\n  /**\r\n   * If the low element is missing, the meaning is that the low boundary is not known.\r\n   */\r\n  public start?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.\r\n   */\r\n  public end?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * Default constructor for Period - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<PeriodArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['start']) { this.start = new fhir.FhirDateTime({value: source.start}); }\r\n    if (source['end']) { this.end = new fhir.FhirDateTime({value: source.end}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"start\"]) { outcome.issue!.push(...this.start.doModelValidation().issue!); }\r\n    if (this[\"end\"]) { outcome.issue!.push(...this.end.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirDateTime","fhir.FhirElement"],"mappings":";;;;;;AAAA;AAyBA;;AAEG;AACH,IAAA,MAAA,kBAAA,UAAA,MAAA,EAAA;IAA4B,SAAgB,CAAA,MAAA,EAAA,MAAA,CAAA,CAAA;AAa1C;;AAEG;IACH,SAAY,MAAA,CAAA,MAA+B,EAAE,OAAwC,EAAA;AAAzE,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA+B,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAArF,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAGvB,IAAA,CAAA;AAFC,QAAA,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,KAAK,GAAG,IAAIA,YAAiB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;AAAE,SAAA;AACnF,QAAA,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,GAAG,GAAG,IAAIA,YAAiB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,GAAG,EAAC,CAAC,CAAC;AAAE,SAAA;;KAC9E;AACD;;AAEG;AACa,IAAA,MAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACrF,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjF,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA5BD;;AAEG;IACoB,MAAa,CAAA,aAAA,GAAU,QAAQ,CAAC;IA0BzD,OAAC,MAAA,CAAA;AAAA,CA9BD,CAA4BC,WAAgB,CA8B3C;;;;"}