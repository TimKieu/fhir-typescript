// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CodeSystem
import * as fhir from '../fhir.js';
// @ts-ignore
import { FilterOperatorCodes } from '../fhirValueSets/FilterOperatorCodes.js';
// @ts-ignore
import { ConceptPropertyTypeCodes } from '../fhirValueSets/ConceptPropertyTypeCodes.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
// @ts-ignore
import { DesignationUseCodings, } from '../fhirValueSets/DesignationUseCodings.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { CodesystemHierarchyMeaningCodes } from '../fhirValueSets/CodesystemHierarchyMeaningCodes.js';
// @ts-ignore
import { CodesystemContentModeCodes } from '../fhirValueSets/CodesystemContentModeCodes.js';
/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export class CodeSystemFilter extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['operator']) {
            this.operator = source.operator.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.operator = [];
        }
        if (source['_operator']) {
            source._operator.forEach((x, i) => {
                if (this.operator.length >= i) {
                    if (x) {
                        this.operator[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.operator.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Required-bound Value Set for operator (CodeSystem.filter.operator)
     */
    static get operatorRequiredCodes() {
        return FilterOperatorCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CodeSystem.filter';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: CodeSystem.filter.code:code', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (!this['operator']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property operator fhir: CodeSystem.filter.operator:code', expression: [expression] });
        }
        else if (!Array.isArray(this.operator)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property operator fhir: CodeSystem.filter.operator:code', expression: [expression] });
        }
        else if (this.operator.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property operator fhir: CodeSystem.filter.operator:code', expression: [expression] });
        }
        if (this['operator']) {
            this.operator.forEach((v) => {
                if (!Object.values(FilterOperatorCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property operator fhir: CodeSystem.filter.operator:code Required binding to: FilterOperator', expression: [expression] });
                }
            });
        }
        if (this["operator"]) {
            this.operator.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.operator[${i}]`)); });
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: CodeSystem.filter.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeSystemFilter._fts_dataType = 'CodeSystemFilter';
/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export class CodeSystemProperty extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['uri']) {
            this.uri = new fhir.FhirUri({ value: source.uri });
        }
        if (source['_uri']) {
            if (this.uri) {
                this.uri.addExtendedProperties(source._uri);
            }
            else {
                this.uri = new fhir.FhirUri(source._uri);
            }
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
    }
    /**
     * Required-bound Value Set for type (CodeSystem.property.type)
     */
    static get typeRequiredCodes() {
        return ConceptPropertyTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CodeSystem.property';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: CodeSystem.property.code:code', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["uri"]) {
            issues.push(...this.uri.doModelValidation(expression + '.uri'));
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: CodeSystem.property.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(ConceptPropertyTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: CodeSystem.property.type:code Required binding to: ConceptPropertyType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeSystemProperty._fts_dataType = 'CodeSystemProperty';
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export class CodeSystemConceptDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['use']) {
            this.use = new fhir.Coding(source.use);
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Preferred-bound Value Set for language (CodeSystem.concept.designation.language)
     */
    static get languagePreferredCodings() {
        return LanguagesCodings;
    }
    /**
     * Extensible-bound Value Set for use (CodeSystem.concept.designation.use)
     */
    static get useExtensibleCodings() {
        return DesignationUseCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CodeSystem.concept.designation';
        }
        if (this["language"]) {
            issues.push(...this.language.doModelValidation(expression + '.language'));
        }
        if (this["use"]) {
            issues.push(...this.use.doModelValidation(expression + '.use'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: CodeSystem.concept.designation.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeSystemConceptDesignation._fts_dataType = 'CodeSystemConceptDesignation';
/**
 * A property value for this concept.
 */
export class CodeSystemConceptProperty extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConceptProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueCode']) {
            this.value = new fhir.FhirCode({ value: source.valueCode });
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CodeSystem.concept.property';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: CodeSystem.concept.property.code:code', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: CodeSystem.concept.property.value[x]:', expression: [expression] });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeSystemConceptProperty._fts_dataType = 'CodeSystemConceptProperty';
/**
 * Internal flag to properly serialize choice-type element CodeSystem.concept.property.value[x]
 */
CodeSystemConceptProperty._fts_valueIsChoice = true;
/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export class CodeSystemConcept extends fhir.BackboneElement {
    /**
     * Default constructor for CodeSystemConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['definition']) {
            this.definition = new fhir.FhirString({ value: source.definition });
        }
        if (source['_definition']) {
            if (this.definition) {
                this.definition.addExtendedProperties(source._definition);
            }
            else {
                this.definition = new fhir.FhirString(source._definition);
            }
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.CodeSystemConceptDesignation(x));
        }
        else {
            this.designation = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.CodeSystemConceptProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x));
        }
        else {
            this.concept = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CodeSystem.concept';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: CodeSystem.concept.code:code', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation(expression + '.display'));
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation(expression + '.definition'));
        }
        if (this["designation"]) {
            this.designation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.designation[${i}]`)); });
        }
        if (this["property"]) {
            this.property.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.property[${i}]`)); });
        }
        if (this["concept"]) {
            this.concept.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.concept[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeSystemConcept._fts_dataType = 'CodeSystemConcept';
/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export class CodeSystem extends fhir.DomainResource {
    /**
     * Default constructor for CodeSystem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CodeSystem';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['caseSensitive']) {
            this.caseSensitive = new fhir.FhirBoolean({ value: source.caseSensitive });
        }
        if (source['_caseSensitive']) {
            if (this.caseSensitive) {
                this.caseSensitive.addExtendedProperties(source._caseSensitive);
            }
            else {
                this.caseSensitive = new fhir.FhirBoolean(source._caseSensitive);
            }
        }
        if (source['valueSet']) {
            this.valueSet = new fhir.FhirCanonical({ value: source.valueSet });
        }
        if (source['_valueSet']) {
            if (this.valueSet) {
                this.valueSet.addExtendedProperties(source._valueSet);
            }
            else {
                this.valueSet = new fhir.FhirCanonical(source._valueSet);
            }
        }
        if (source['hierarchyMeaning']) {
            this.hierarchyMeaning = new fhir.FhirCode({ value: source.hierarchyMeaning });
        }
        if (source['_hierarchyMeaning']) {
            if (this.hierarchyMeaning) {
                this.hierarchyMeaning.addExtendedProperties(source._hierarchyMeaning);
            }
            else {
                this.hierarchyMeaning = new fhir.FhirCode(source._hierarchyMeaning);
            }
        }
        if (source['compositional']) {
            this.compositional = new fhir.FhirBoolean({ value: source.compositional });
        }
        if (source['_compositional']) {
            if (this.compositional) {
                this.compositional.addExtendedProperties(source._compositional);
            }
            else {
                this.compositional = new fhir.FhirBoolean(source._compositional);
            }
        }
        if (source['versionNeeded']) {
            this.versionNeeded = new fhir.FhirBoolean({ value: source.versionNeeded });
        }
        if (source['_versionNeeded']) {
            if (this.versionNeeded) {
                this.versionNeeded.addExtendedProperties(source._versionNeeded);
            }
            else {
                this.versionNeeded = new fhir.FhirBoolean(source._versionNeeded);
            }
        }
        if (source['content']) {
            this.content = new fhir.FhirCode({ value: source.content });
        }
        else {
            this.content = null;
        }
        if (source['_content']) {
            if (this.content) {
                this.content.addExtendedProperties(source._content);
            }
            else {
                this.content = new fhir.FhirCode(source._content);
            }
        }
        if (source['supplements']) {
            this.supplements = new fhir.FhirCanonical({ value: source.supplements });
        }
        if (source['_supplements']) {
            if (this.supplements) {
                this.supplements.addExtendedProperties(source._supplements);
            }
            else {
                this.supplements = new fhir.FhirCanonical(source._supplements);
            }
        }
        if (source['count']) {
            this.count = new fhir.FhirUnsignedInt({ value: source.count });
        }
        if (source['_count']) {
            if (this.count) {
                this.count.addExtendedProperties(source._count);
            }
            else {
                this.count = new fhir.FhirUnsignedInt(source._count);
            }
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.CodeSystemFilter(x));
        }
        else {
            this.filter = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.CodeSystemProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.CodeSystemConcept(x));
        }
        else {
            this.concept = [];
        }
    }
    /**
     * Required-bound Value Set for status (CodeSystem.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Required-bound Value Set for hierarchyMeaning (CodeSystem.hierarchyMeaning)
     */
    static get hierarchyMeaningRequiredCodes() {
        return CodesystemHierarchyMeaningCodes;
    }
    /**
     * Required-bound Value Set for content (CodeSystem.content)
     */
    static get contentRequiredCodes() {
        return CodesystemContentModeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CodeSystem';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: CodeSystem.resourceType:"CodeSystem"', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: CodeSystem.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: CodeSystem.status:code Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation(expression + '.experimental'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation(expression + '.purpose'));
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (this["caseSensitive"]) {
            issues.push(...this.caseSensitive.doModelValidation(expression + '.caseSensitive'));
        }
        if (this["valueSet"]) {
            issues.push(...this.valueSet.doModelValidation(expression + '.valueSet'));
        }
        if (this['hierarchyMeaning'] && (!Object.values(CodesystemHierarchyMeaningCodes).includes(this.hierarchyMeaning.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property hierarchyMeaning fhir: CodeSystem.hierarchyMeaning:code Required binding to: CodesystemHierarchyMeaning', expression: [expression] });
        }
        if (this["hierarchyMeaning"]) {
            issues.push(...this.hierarchyMeaning.doModelValidation(expression + '.hierarchyMeaning'));
        }
        if (this["compositional"]) {
            issues.push(...this.compositional.doModelValidation(expression + '.compositional'));
        }
        if (this["versionNeeded"]) {
            issues.push(...this.versionNeeded.doModelValidation(expression + '.versionNeeded'));
        }
        if (!this['content']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content fhir: CodeSystem.content:code', expression: [expression] });
        }
        if (this['content'] && (!Object.values(CodesystemContentModeCodes).includes(this.content.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property content fhir: CodeSystem.content:code Required binding to: CodesystemContentMode', expression: [expression] });
        }
        if (this["content"]) {
            issues.push(...this.content.doModelValidation(expression + '.content'));
        }
        if (this["supplements"]) {
            issues.push(...this.supplements.doModelValidation(expression + '.supplements'));
        }
        if (this["count"]) {
            issues.push(...this.count.doModelValidation(expression + '.count'));
        }
        if (this["filter"]) {
            this.filter.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.filter[${i}]`)); });
        }
        if (this["property"]) {
            this.property.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.property[${i}]`)); });
        }
        if (this["concept"]) {
            this.concept.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.concept[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeSystem._fts_dataType = 'CodeSystem';
//# sourceMappingURL=data:application/json;base64,