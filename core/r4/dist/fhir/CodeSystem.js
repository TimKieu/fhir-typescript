/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { FilterOperatorCodings } from '../fhirValueSets/FilterOperatorCodings.js';
import { ConceptPropertyTypeCodings } from '../fhirValueSets/ConceptPropertyTypeCodings.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { DesignationUseCodings } from '../fhirValueSets/DesignationUseCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { CodesystemHierarchyMeaningCodings } from '../fhirValueSets/CodesystemHierarchyMeaningCodings.js';
import { CodesystemContentModeCodings } from '../fhirValueSets/CodesystemContentModeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirCode } from './FhirCode.js';
import { FhirString } from './FhirString.js';
import { FhirUri } from './FhirUri.js';
import { Coding } from './Coding.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Identifier } from './Identifier.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';

// <auto-generated/>
/**
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
var CodeSystemFilter = /** @class */ (function (_super) {
    __extends(CodeSystemFilter, _super);
    /**
     * Default constructor for CodeSystemFilter - initializes any required elements to null if a value is not provided.
     */
    function CodeSystemFilter(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['operator']) {
            _this.operator = source.operator.map(function (x) { return x; });
        }
        else {
            _this.operator = [];
        }
        if (source['value']) {
            _this.value = new FhirString({ value: source.value });
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for operator (CodeSystem.filter.operator)
     */
    CodeSystemFilter.operatorRequiredCoding = function () {
        return FilterOperatorCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CodeSystemFilter.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: CodeSystem.filter.code:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (!this['operator']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property operator:FilterOperatorCodeType[] fhir: CodeSystem.filter.operator:code', }));
        }
        else if (!Array.isArray(this.operator)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property operator:FilterOperatorCodeType[] fhir: CodeSystem.filter.operator:code', }));
        }
        else if (this.operator.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property operator:FilterOperatorCodeType[] fhir: CodeSystem.filter.operator:code', }));
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.FhirString fhir: CodeSystem.filter.value:string', }));
        }
        if (this["value"]) {
            (_c = outcome.issue).push.apply(_c, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CodeSystemFilter._fts_dataType = 'CodeSystemFilter';
    return CodeSystemFilter;
}(BackboneElement));
/**
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
var CodeSystemProperty = /** @class */ (function (_super) {
    __extends(CodeSystemProperty, _super);
    /**
     * Default constructor for CodeSystemProperty - initializes any required elements to null if a value is not provided.
     */
    function CodeSystemProperty(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['uri']) {
            _this.uri = new FhirUri({ value: source.uri });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (CodeSystem.property.type)
     */
    CodeSystemProperty.typeRequiredCoding = function () {
        return ConceptPropertyTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CodeSystemProperty.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: CodeSystem.property.code:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["uri"]) {
            (_b = outcome.issue).push.apply(_b, this.uri.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:ConceptPropertyTypeCodeType fhir: CodeSystem.property.type:code', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CodeSystemProperty._fts_dataType = 'CodeSystemProperty';
    return CodeSystemProperty;
}(BackboneElement));
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
var CodeSystemConceptDesignation = /** @class */ (function (_super) {
    __extends(CodeSystemConceptDesignation, _super);
    /**
     * Default constructor for CodeSystemConceptDesignation - initializes any required elements to null if a value is not provided.
     */
    function CodeSystemConceptDesignation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['language']) {
            _this.language = new FhirCode({ value: source.language });
        }
        if (source['use']) {
            _this.use = new Coding(source.use);
        }
        if (source['value']) {
            _this.value = new FhirString({ value: source.value });
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for language (CodeSystem.concept.designation.language)
     */
    CodeSystemConceptDesignation.languagePreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Extensible-bound Value Set for use (CodeSystem.concept.designation.use)
     */
    CodeSystemConceptDesignation.useExtensibleCoding = function () {
        return DesignationUseCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CodeSystemConceptDesignation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["language"]) {
            (_a = outcome.issue).push.apply(_a, this.language.doModelValidation().issue);
        }
        if (this["use"]) {
            (_b = outcome.issue).push.apply(_b, this.use.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.FhirString fhir: CodeSystem.concept.designation.value:string', }));
        }
        if (this["value"]) {
            (_c = outcome.issue).push.apply(_c, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CodeSystemConceptDesignation._fts_dataType = 'CodeSystemConceptDesignation';
    return CodeSystemConceptDesignation;
}(BackboneElement));
/**
 * A property value for this concept.
 */
var CodeSystemConceptProperty = /** @class */ (function (_super) {
    __extends(CodeSystemConceptProperty, _super);
    /**
     * Default constructor for CodeSystemConceptProperty - initializes any required elements to null if a value is not provided.
     */
    function CodeSystemConceptProperty(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueCode']) {
            _this.value = new FhirCode({ value: source.valueCode });
        }
        else if (source['valueCoding']) {
            _this.value = new Coding(source.valueCoding);
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueInteger']) {
            _this.value = new FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDateTime']) {
            _this.value = new FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueDecimal']) {
            _this.value = new FhirDecimal({ value: source.valueDecimal });
        }
        else {
            _this.value = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CodeSystemConceptProperty.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: CodeSystem.concept.property.code:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: CodeSystem.concept.property.value[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CodeSystemConceptProperty._fts_dataType = 'CodeSystemConceptProperty';
    /**
     * Internal flag to properly serialize choice-type element CodeSystem.concept.property.value[x]
     */
    CodeSystemConceptProperty._fts_valueIsChoice = true;
    return CodeSystemConceptProperty;
}(BackboneElement));
/**
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
var CodeSystemConcept = /** @class */ (function (_super) {
    __extends(CodeSystemConcept$1, _super);
    /**
     * Default constructor for CodeSystemConcept - initializes any required elements to null if a value is not provided.
     */
    function CodeSystemConcept$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['display']) {
            _this.display = new FhirString({ value: source.display });
        }
        if (source['definition']) {
            _this.definition = new FhirString({ value: source.definition });
        }
        if (source['designation']) {
            _this.designation = source.designation.map(function (x) { return new CodeSystemConceptDesignation(x); });
        }
        else {
            _this.designation = [];
        }
        if (source['property']) {
            _this.property = source.property.map(function (x) { return new CodeSystemConceptProperty(x); });
        }
        else {
            _this.property = [];
        }
        if (source['concept']) {
            _this.concept = source.concept.map(function (x) { return new CodeSystemConcept(x); });
        }
        else {
            _this.concept = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CodeSystemConcept$1.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: CodeSystem.concept.code:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["display"]) {
            (_b = outcome.issue).push.apply(_b, this.display.doModelValidation().issue);
        }
        if (this["definition"]) {
            (_c = outcome.issue).push.apply(_c, this.definition.doModelValidation().issue);
        }
        if (this["designation"]) {
            this.designation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["property"]) {
            this.property.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["concept"]) {
            this.concept.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CodeSystemConcept$1._fts_dataType = 'CodeSystemConcept';
    return CodeSystemConcept$1;
}(BackboneElement));
/**
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
var CodeSystem = /** @class */ (function (_super) {
    __extends(CodeSystem, _super);
    /**
     * Default constructor for CodeSystem - initializes any required elements to null if a value is not provided.
     */
    function CodeSystem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'CodeSystem';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['caseSensitive']) {
            _this.caseSensitive = new FhirBoolean({ value: source.caseSensitive });
        }
        if (source['valueSet']) {
            _this.valueSet = new FhirCanonical({ value: source.valueSet });
        }
        if (source['hierarchyMeaning']) {
            _this.hierarchyMeaning = source.hierarchyMeaning;
        }
        if (source['compositional']) {
            _this.compositional = new FhirBoolean({ value: source.compositional });
        }
        if (source['versionNeeded']) {
            _this.versionNeeded = new FhirBoolean({ value: source.versionNeeded });
        }
        if (source['content']) {
            _this.content = source.content;
        }
        else {
            _this.content = null;
        }
        if (source['supplements']) {
            _this.supplements = new FhirCanonical({ value: source.supplements });
        }
        if (source['count']) {
            _this.count = new FhirUnsignedInt({ value: source.count });
        }
        if (source['filter']) {
            _this.filter = source.filter.map(function (x) { return new CodeSystemFilter(x); });
        }
        else {
            _this.filter = [];
        }
        if (source['property']) {
            _this.property = source.property.map(function (x) { return new CodeSystemProperty(x); });
        }
        else {
            _this.property = [];
        }
        if (source['concept']) {
            _this.concept = source.concept.map(function (x) { return new CodeSystemConcept(x); });
        }
        else {
            _this.concept = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (CodeSystem.status)
     */
    CodeSystem.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for hierarchyMeaning (CodeSystem.hierarchyMeaning)
     */
    CodeSystem.hierarchyMeaningRequiredCoding = function () {
        return CodesystemHierarchyMeaningCodings;
    };
    /**
     * Required-bound Value Set for content (CodeSystem.content)
     */
    CodeSystem.contentRequiredCoding = function () {
        return CodesystemContentModeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CodeSystem.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"CodeSystem" fhir: CodeSystem.resourceType:"CodeSystem"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: CodeSystem.status:code', }));
        }
        if (this["experimental"]) {
            (_e = outcome.issue).push.apply(_e, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_g = outcome.issue).push.apply(_g, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_h = outcome.issue).push.apply(_h, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_j = outcome.issue).push.apply(_j, this.purpose.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_k = outcome.issue).push.apply(_k, this.copyright.doModelValidation().issue);
        }
        if (this["caseSensitive"]) {
            (_l = outcome.issue).push.apply(_l, this.caseSensitive.doModelValidation().issue);
        }
        if (this["valueSet"]) {
            (_m = outcome.issue).push.apply(_m, this.valueSet.doModelValidation().issue);
        }
        if (this["compositional"]) {
            (_o = outcome.issue).push.apply(_o, this.compositional.doModelValidation().issue);
        }
        if (this["versionNeeded"]) {
            (_p = outcome.issue).push.apply(_p, this.versionNeeded.doModelValidation().issue);
        }
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content:CodesystemContentModeCodeType fhir: CodeSystem.content:code', }));
        }
        if (this["supplements"]) {
            (_q = outcome.issue).push.apply(_q, this.supplements.doModelValidation().issue);
        }
        if (this["count"]) {
            (_r = outcome.issue).push.apply(_r, this.count.doModelValidation().issue);
        }
        if (this["filter"]) {
            this.filter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["property"]) {
            this.property.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["concept"]) {
            this.concept.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CodeSystem._fts_dataType = 'CodeSystem';
    return CodeSystem;
}(DomainResource));

export { CodeSystem, CodeSystemConcept, CodeSystemConceptDesignation, CodeSystemConceptProperty, CodeSystemFilter, CodeSystemProperty };
//# sourceMappingURL=CodeSystem.js.map
