// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: TriggerDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { TriggerTypeCodes } from '../fhirValueSets/TriggerTypeCodes.js';
/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 */
export class TriggerDefinition extends fhir.FhirElement {
    /**
     * Default constructor for TriggerDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming);
        }
        else if (source['timingReference']) {
            this.timing = new fhir.Reference(source.timingReference);
        }
        else if (source['timingDate']) {
            this.timing = new fhir.FhirDate({ value: source.timingDate });
        }
        else if (source['timingDateTime']) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime });
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.data = [];
        }
        if (source['condition']) {
            this.condition = new fhir.Expression(source.condition);
        }
    }
    /**
     * Required-bound Value Set for type (TriggerDefinition.type)
     */
    static get typeRequiredCodes() {
        return TriggerTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'TriggerDefinition';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: TriggerDefinition.type:code', expression: [expression] });
        }
        if (this['type'] && (!Object.values(TriggerTypeCodes).includes(this.type.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: TriggerDefinition.type:code Required binding to: TriggerType', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["data"]) {
            this.data.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.data[${i}]`)); });
        }
        if (this["condition"]) {
            issues.push(...this.condition.doModelValidation(expression + '.condition'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TriggerDefinition._fts_dataType = 'TriggerDefinition';
/**
 * Internal flag to properly serialize choice-type element TriggerDefinition.timing[x]
 */
TriggerDefinition._fts_timingIsChoice = true;
//# sourceMappingURL=data:application/json;base64,