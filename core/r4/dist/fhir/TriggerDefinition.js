// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: TriggerDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { TriggerTypeVsValidation } from '../fhirValueSets/TriggerTypeVsValidation.js';
/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 */
export class TriggerDefinition extends fhir.FhirElement {
    /**
     * Default constructor for TriggerDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming);
        }
        else if (source['timingReference']) {
            this.timing = new fhir.Reference(source.timingReference);
        }
        else if (source['timingDate']) {
            this.timing = new fhir.FhirDate({ value: source.timingDate });
        }
        else if (source['timingDateTime']) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime });
        }
        if (source['data']) {
            this.data = source.data.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.data = [];
        }
        if (source['condition']) {
            this.condition = new fhir.Expression(source.condition);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'TriggerDefinition';
        }
        iss.push(...this.vRSV('type', exp, 'TriggerType', TriggerTypeVsValidation, 'r'));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('timing', exp));
        iss.push(...this.vOA('data', exp));
        iss.push(...this.vOS('condition', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
TriggerDefinition._fts_dataType = 'TriggerDefinition';
/**
 * Internal flag to properly serialize choice-type element TriggerDefinition.timing[x]
 */
TriggerDefinition._fts_timingIsChoice = true;
//# sourceMappingURL=data:application/json;base64,