/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { TriggerTypeCodings } from '../fhirValueSets/TriggerTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirElement } from './FhirElement.js';
import { FhirString } from './FhirString.js';
import { Timing } from './Timing.js';
import { Reference } from './Reference.js';
import { FhirDate } from './FhirDate.js';
import { FhirDateTime } from './FhirDateTime.js';
import { DataRequirement } from './DataRequirement.js';
import { Expression } from './Expression.js';

// <auto-generated/>
/**
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 */
var TriggerDefinition = /** @class */ (function (_super) {
    __extends(TriggerDefinition, _super);
    /**
     * Default constructor for TriggerDefinition - initializes any required elements to null if a value is not provided.
     */
    function TriggerDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['timing']) {
            _this.timing = source.timing;
        }
        else if (source['timingTiming']) {
            _this.timing = new Timing(source.timingTiming);
        }
        else if (source['timingReference']) {
            _this.timing = new Reference(source.timingReference);
        }
        else if (source['timingDate']) {
            _this.timing = new FhirDate({ value: source.timingDate });
        }
        else if (source['timingDateTime']) {
            _this.timing = new FhirDateTime({ value: source.timingDateTime });
        }
        if (source['data']) {
            _this.data = source.data.map(function (x) { return new DataRequirement(x); });
        }
        else {
            _this.data = [];
        }
        if (source['condition']) {
            _this.condition = new Expression(source.condition);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (TriggerDefinition.type)
     */
    TriggerDefinition.typeRequiredCoding = function () {
        return TriggerTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    TriggerDefinition.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:TriggerTypeCodeType fhir: TriggerDefinition.type:code', }));
        }
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["data"]) {
            this.data.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["condition"]) {
            (_b = outcome.issue).push.apply(_b, this.condition.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    TriggerDefinition._fts_dataType = 'TriggerDefinition';
    /**
     * Internal flag to properly serialize choice-type element TriggerDefinition.timing[x]
     */
    TriggerDefinition._fts_timingIsChoice = true;
    return TriggerDefinition;
}(FhirElement));

export { TriggerDefinition };
//# sourceMappingURL=TriggerDefinition.js.map
