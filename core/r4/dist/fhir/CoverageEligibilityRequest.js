// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CoverageEligibilityRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
// @ts-ignore
import { EligibilityrequestPurposeVsValidation } from '../fhirValueSets/EligibilityrequestPurposeVsValidation.js';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class CoverageEligibilityRequestSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence'] !== undefined) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence }, options);
        }
        else {
            this.sequence = null;
        }
        if (source['_sequence']) {
            if (this.sequence) {
                this.sequence.addExtendedProperties(source._sequence);
            }
            else {
                this.sequence = new fhir.FhirPositiveInt(source._sequence, options);
            }
        }
        if (source['information']) {
            this.information = new fhir.Reference(source.information, options);
        }
        else {
            this.information = null;
        }
        if (source['appliesToAll'] !== undefined) {
            this.appliesToAll = new fhir.FhirBoolean({ value: source.appliesToAll }, options);
        }
        if (source['_appliesToAll']) {
            if (this.appliesToAll) {
                this.appliesToAll.addExtendedProperties(source._appliesToAll);
            }
            else {
                this.appliesToAll = new fhir.FhirBoolean(source._appliesToAll, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.supportingInfo';
        }
        iss.push(...this.vRS('sequence', exp));
        iss.push(...this.vRS('information', exp));
        iss.push(...this.vOS('appliesToAll', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestSupportingInfo._fts_dataType = 'CoverageEligibilityRequestSupportingInfo';
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class CoverageEligibilityRequestInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['focal'] !== undefined) {
            this.focal = new fhir.FhirBoolean({ value: source.focal }, options);
        }
        if (source['_focal']) {
            if (this.focal) {
                this.focal.addExtendedProperties(source._focal);
            }
            else {
                this.focal = new fhir.FhirBoolean(source._focal, options);
            }
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage, options);
        }
        else {
            this.coverage = null;
        }
        if (source['businessArrangement'] !== undefined) {
            this.businessArrangement = new fhir.FhirString({ value: source.businessArrangement }, options);
        }
        if (source['_businessArrangement']) {
            if (this.businessArrangement) {
                this.businessArrangement.addExtendedProperties(source._businessArrangement);
            }
            else {
                this.businessArrangement = new fhir.FhirString(source._businessArrangement, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.insurance';
        }
        iss.push(...this.vOS('focal', exp));
        iss.push(...this.vRS('coverage', exp));
        iss.push(...this.vOS('businessArrangement', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestInsurance._fts_dataType = 'CoverageEligibilityRequestInsurance';
/**
 * Patient diagnosis for which care is sought.
 */
export class CoverageEligibilityRequestItemDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItemDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept, options);
        }
        else if (source['diagnosisReference']) {
            this.diagnosis = new fhir.Reference(source.diagnosisReference, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.item.diagnosis';
        }
        iss.push(...this.vOS('diagnosis', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestItemDiagnosis._fts_dataType = 'CoverageEligibilityRequestItemDiagnosis';
/**
 * Internal flag to properly serialize choice-type element CoverageEligibilityRequest.item.diagnosis.diagnosis[x]
 */
CoverageEligibilityRequestItemDiagnosis._fts_diagnosisIsChoice = true;
/**
 * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
 */
export class CoverageEligibilityRequestItem extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageEligibilityRequestItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['supportingInfoSequence'] !== undefined) {
            this.supportingInfoSequence = source.supportingInfoSequence.map((x) => new fhir.FhirPositiveInt({ value: x }, options));
        }
        else {
            this.supportingInfoSequence = [];
        }
        if (source['_supportingInfoSequence']) {
            source._supportingInfoSequence.forEach((x, i) => {
                if (this.supportingInfoSequence.length >= i) {
                    if (x) {
                        this.supportingInfoSequence[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.supportingInfoSequence.push(new fhir.FhirPositiveInt(x));
                    }
                }
            });
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService, options);
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.modifier = [];
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice, options);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility, options);
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.CoverageEligibilityRequestItemDiagnosis(x, options));
        }
        else {
            this.diagnosis = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest.item';
        }
        iss.push(...this.vOA('supportingInfoSequence', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vOS('productOrService', exp));
        iss.push(...this.vOA('modifier', exp));
        iss.push(...this.vOS('provider', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('unitPrice', exp));
        iss.push(...this.vOS('facility', exp));
        iss.push(...this.vOA('diagnosis', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequestItem._fts_dataType = 'CoverageEligibilityRequestItem';
/**
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
export class CoverageEligibilityRequest extends fhir.DomainResource {
    /**
     * Default constructor for CoverageEligibilityRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CoverageEligibilityRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority, options);
        }
        if (source['purpose'] !== undefined) {
            this.purpose = source.purpose.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.purpose = [];
        }
        if (source['_purpose']) {
            source._purpose.forEach((x, i) => {
                if (this.purpose.length >= i) {
                    if (x) {
                        this.purpose[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.purpose.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient, options);
        }
        else {
            this.patient = null;
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate'] !== undefined) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate }, options);
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod, options);
        }
        if (source['created'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.created }, options);
        }
        else {
            this.created = null;
        }
        if (source['_created']) {
            if (this.created) {
                this.created.addExtendedProperties(source._created);
            }
            else {
                this.created = new fhir.FhirDateTime(source._created, options);
            }
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer, options);
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider, options);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer, options);
        }
        else {
            this.insurer = null;
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility, options);
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.CoverageEligibilityRequestSupportingInfo(x, options));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.CoverageEligibilityRequestInsurance(x, options));
        }
        else {
            this.insurance = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.CoverageEligibilityRequestItem(x, options));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CoverageEligibilityRequest';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOS('priority', exp));
        iss.push(...this.vRAV('purpose', exp, 'EligibilityrequestPurpose', EligibilityrequestPurposeVsValidation, 'r'));
        iss.push(...this.vRS('patient', exp));
        iss.push(...this.vOS('serviced', exp));
        iss.push(...this.vRS('created', exp));
        iss.push(...this.vOS('enterer', exp));
        iss.push(...this.vOS('provider', exp));
        iss.push(...this.vRS('insurer', exp));
        iss.push(...this.vOS('facility', exp));
        iss.push(...this.vOA('supportingInfo', exp));
        iss.push(...this.vOA('insurance', exp));
        iss.push(...this.vOA('item', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageEligibilityRequest._fts_dataType = 'CoverageEligibilityRequest';
/**
 * Internal flag to properly serialize choice-type element CoverageEligibilityRequest.serviced[x]
 */
CoverageEligibilityRequest._fts_servicedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,