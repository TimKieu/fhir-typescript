// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductPharmaceutical
import * as fhir from '../fhir.js';
/**
 * Characteristics e.g. a products onset of action.
 */
export class MedicinalProductPharmaceuticalCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.characteristics';
        }
        this.vReqS('code', expression);
        this.vOptS('status', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalCharacteristics._fts_dataType = 'MedicinalProductPharmaceuticalCharacteristics';
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['tissue']) {
            this.tissue = new fhir.CodeableConcept(source.tissue);
        }
        else {
            this.tissue = null;
        }
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
        else {
            this.value = null;
        }
        if (source['supportingInformation']) {
            this.supportingInformation = new fhir.FhirString({ value: source.supportingInformation });
        }
        if (source['_supportingInformation']) {
            if (this.supportingInformation) {
                this.supportingInformation.addExtendedProperties(source._supportingInformation);
            }
            else {
                this.supportingInformation = new fhir.FhirString(source._supportingInformation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.withdrawalPeriod';
        }
        this.vReqS('tissue', expression);
        this.vReqS('value', expression);
        this.vOptS('supportingInformation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod';
/**
 * A species for which this route applies.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['withdrawalPeriod']) {
            this.withdrawalPeriod = source.withdrawalPeriod.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(x));
        }
        else {
            this.withdrawalPeriod = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies';
        }
        this.vReqS('code', expression);
        this.vOptA('withdrawalPeriod', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies';
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['firstDose']) {
            this.firstDose = new fhir.Quantity(source.firstDose);
        }
        if (source['maxSingleDose']) {
            this.maxSingleDose = new fhir.Quantity(source.maxSingleDose);
        }
        if (source['maxDosePerDay']) {
            this.maxDosePerDay = new fhir.Quantity(source.maxDosePerDay);
        }
        if (source['maxDosePerTreatmentPeriod']) {
            this.maxDosePerTreatmentPeriod = new fhir.Ratio(source.maxDosePerTreatmentPeriod);
        }
        if (source['maxTreatmentPeriod']) {
            this.maxTreatmentPeriod = new fhir.Duration(source.maxTreatmentPeriod);
        }
        if (source['targetSpecies']) {
            this.targetSpecies = source.targetSpecies.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(x));
        }
        else {
            this.targetSpecies = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.routeOfAdministration';
        }
        this.vReqS('code', expression);
        this.vOptS('firstDose', expression);
        this.vOptS('maxSingleDose', expression);
        this.vOptS('maxDosePerDay', expression);
        this.vOptS('maxDosePerTreatmentPeriod', expression);
        this.vOptS('maxTreatmentPeriod', expression);
        this.vOptA('targetSpecies', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalRouteOfAdministration._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministration';
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
export class MedicinalProductPharmaceutical extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductPharmaceutical - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductPharmaceutical';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['administrableDoseForm']) {
            this.administrableDoseForm = new fhir.CodeableConcept(source.administrableDoseForm);
        }
        else {
            this.administrableDoseForm = null;
        }
        if (source['unitOfPresentation']) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation);
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.Reference(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['device']) {
            this.device = source.device.map((x) => new fhir.Reference(x));
        }
        else {
            this.device = [];
        }
        if (source['characteristics']) {
            this.characteristics = source.characteristics.map((x) => new fhir.MedicinalProductPharmaceuticalCharacteristics(x));
        }
        else {
            this.characteristics = [];
        }
        if (source['routeOfAdministration']) {
            this.routeOfAdministration = source.routeOfAdministration.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministration(x));
        }
        else {
            this.routeOfAdministration = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vReqS('administrableDoseForm', expression);
        this.vOptS('unitOfPresentation', expression);
        this.vOptA('ingredient', expression);
        this.vOptA('device', expression);
        this.vOptA('characteristics', expression);
        this.vReqA('routeOfAdministration', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceutical._fts_dataType = 'MedicinalProductPharmaceutical';
//# sourceMappingURL=data:application/json;base64,