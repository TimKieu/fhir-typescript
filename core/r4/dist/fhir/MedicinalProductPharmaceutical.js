// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductPharmaceutical
import * as fhir from '../fhir.js';
/**
 * Characteristics e.g. a products onset of action.
 */
export class MedicinalProductPharmaceuticalCharacteristics extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalCharacteristics - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.characteristics';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: MedicinalProductPharmaceutical.characteristics.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalCharacteristics._fts_dataType = 'MedicinalProductPharmaceuticalCharacteristics';
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['tissue']) {
            this.tissue = new fhir.CodeableConcept(source.tissue);
        }
        else {
            this.tissue = null;
        }
        if (source['value']) {
            this.value = new fhir.Quantity(source.value);
        }
        else {
            this.value = null;
        }
        if (source['supportingInformation']) {
            this.supportingInformation = new fhir.FhirString({ value: source.supportingInformation });
        }
        if (source['_supportingInformation']) {
            if (this.supportingInformation) {
                this.supportingInformation.addExtendedProperties(source._supportingInformation);
            }
            else {
                this.supportingInformation = new fhir.FhirString(source._supportingInformation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.withdrawalPeriod';
        }
        if (!this['tissue']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property tissue fhir: MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.withdrawalPeriod.tissue:CodeableConcept', expression: [expression] });
        }
        if (this["tissue"]) {
            issues.push(...this.tissue.doModelValidation(expression + '.tissue'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.withdrawalPeriod.value:Quantity', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        if (this["supportingInformation"]) {
            issues.push(...this.supportingInformation.doModelValidation(expression + '.supportingInformation'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod';
/**
 * A species for which this route applies.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['withdrawalPeriod']) {
            this.withdrawalPeriod = source.withdrawalPeriod.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(x));
        }
        else {
            this.withdrawalPeriod = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["withdrawalPeriod"]) {
            this.withdrawalPeriod.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.withdrawalPeriod[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies';
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
export class MedicinalProductPharmaceuticalRouteOfAdministration extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministration - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['firstDose']) {
            this.firstDose = new fhir.Quantity(source.firstDose);
        }
        if (source['maxSingleDose']) {
            this.maxSingleDose = new fhir.Quantity(source.maxSingleDose);
        }
        if (source['maxDosePerDay']) {
            this.maxDosePerDay = new fhir.Quantity(source.maxDosePerDay);
        }
        if (source['maxDosePerTreatmentPeriod']) {
            this.maxDosePerTreatmentPeriod = new fhir.Ratio(source.maxDosePerTreatmentPeriod);
        }
        if (source['maxTreatmentPeriod']) {
            this.maxTreatmentPeriod = new fhir.Duration(source.maxTreatmentPeriod);
        }
        if (source['targetSpecies']) {
            this.targetSpecies = source.targetSpecies.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(x));
        }
        else {
            this.targetSpecies = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical.routeOfAdministration';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: MedicinalProductPharmaceutical.routeOfAdministration.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["firstDose"]) {
            issues.push(...this.firstDose.doModelValidation(expression + '.firstDose'));
        }
        if (this["maxSingleDose"]) {
            issues.push(...this.maxSingleDose.doModelValidation(expression + '.maxSingleDose'));
        }
        if (this["maxDosePerDay"]) {
            issues.push(...this.maxDosePerDay.doModelValidation(expression + '.maxDosePerDay'));
        }
        if (this["maxDosePerTreatmentPeriod"]) {
            issues.push(...this.maxDosePerTreatmentPeriod.doModelValidation(expression + '.maxDosePerTreatmentPeriod'));
        }
        if (this["maxTreatmentPeriod"]) {
            issues.push(...this.maxTreatmentPeriod.doModelValidation(expression + '.maxTreatmentPeriod'));
        }
        if (this["targetSpecies"]) {
            this.targetSpecies.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.targetSpecies[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceuticalRouteOfAdministration._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministration';
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
export class MedicinalProductPharmaceutical extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductPharmaceutical - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductPharmaceutical';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['administrableDoseForm']) {
            this.administrableDoseForm = new fhir.CodeableConcept(source.administrableDoseForm);
        }
        else {
            this.administrableDoseForm = null;
        }
        if (source['unitOfPresentation']) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation);
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.Reference(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['device']) {
            this.device = source.device.map((x) => new fhir.Reference(x));
        }
        else {
            this.device = [];
        }
        if (source['characteristics']) {
            this.characteristics = source.characteristics.map((x) => new fhir.MedicinalProductPharmaceuticalCharacteristics(x));
        }
        else {
            this.characteristics = [];
        }
        if (source['routeOfAdministration']) {
            this.routeOfAdministration = source.routeOfAdministration.map((x) => new fhir.MedicinalProductPharmaceuticalRouteOfAdministration(x));
        }
        else {
            this.routeOfAdministration = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductPharmaceutical';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: MedicinalProductPharmaceutical.resourceType:"MedicinalProductPharmaceutical"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['administrableDoseForm']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property administrableDoseForm fhir: MedicinalProductPharmaceutical.administrableDoseForm:CodeableConcept', expression: [expression] });
        }
        if (this["administrableDoseForm"]) {
            issues.push(...this.administrableDoseForm.doModelValidation(expression + '.administrableDoseForm'));
        }
        if (this["unitOfPresentation"]) {
            issues.push(...this.unitOfPresentation.doModelValidation(expression + '.unitOfPresentation'));
        }
        if (this["ingredient"]) {
            this.ingredient.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.ingredient[${i}]`)); });
        }
        if (this["device"]) {
            this.device.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.device[${i}]`)); });
        }
        if (this["characteristics"]) {
            this.characteristics.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.characteristics[${i}]`)); });
        }
        if (!this['routeOfAdministration']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property routeOfAdministration fhir: MedicinalProductPharmaceutical.routeOfAdministration:routeOfAdministration', expression: [expression] });
        }
        else if (!Array.isArray(this.routeOfAdministration)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property routeOfAdministration fhir: MedicinalProductPharmaceutical.routeOfAdministration:routeOfAdministration', expression: [expression] });
        }
        else if (this.routeOfAdministration.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property routeOfAdministration fhir: MedicinalProductPharmaceutical.routeOfAdministration:routeOfAdministration', expression: [expression] });
        }
        if (this["routeOfAdministration"]) {
            this.routeOfAdministration.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.routeOfAdministration[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductPharmaceutical._fts_dataType = 'MedicinalProductPharmaceutical';
//# sourceMappingURL=data:application/json;base64,