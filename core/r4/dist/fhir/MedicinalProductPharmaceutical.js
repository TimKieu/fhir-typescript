/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';
import { FhirString } from './FhirString.js';
import { Ratio } from './Ratio.js';
import { Duration } from './Duration.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';

// <auto-generated/>
/**
 * Characteristics e.g. a products onset of action.
 */
var MedicinalProductPharmaceuticalCharacteristics = /** @class */ (function (_super) {
    __extends(MedicinalProductPharmaceuticalCharacteristics, _super);
    /**
     * Default constructor for MedicinalProductPharmaceuticalCharacteristics - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPharmaceuticalCharacteristics(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['status']) {
            _this.status = new CodeableConcept(source.status);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPharmaceuticalCharacteristics.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductPharmaceutical.characteristics.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["status"]) {
            (_b = outcome.issue).push.apply(_b, this.status.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPharmaceuticalCharacteristics._fts_dataType = 'MedicinalProductPharmaceuticalCharacteristics';
    return MedicinalProductPharmaceuticalCharacteristics;
}(BackboneElement));
/**
 * A species specific time during which consumption of animal product is not appropriate.
 */
var MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod = /** @class */ (function (_super) {
    __extends(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, _super);
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['tissue']) {
            _this.tissue = new CodeableConcept(source.tissue);
        }
        else {
            _this.tissue = null;
        }
        if (source['value']) {
            _this.value = new Quantity(source.value);
        }
        else {
            _this.value = null;
        }
        if (source['supportingInformation']) {
            _this.supportingInformation = new FhirString({ value: source.supportingInformation });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['tissue']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property tissue:fhir.CodeableConcept fhir: MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.withdrawalPeriod.tissue:CodeableConcept', }));
        }
        if (this["tissue"]) {
            (_a = outcome.issue).push.apply(_a, this.tissue.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.Quantity fhir: MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.withdrawalPeriod.value:Quantity', }));
        }
        if (this["value"]) {
            (_b = outcome.issue).push.apply(_b, this.value.doModelValidation().issue);
        }
        if (this["supportingInformation"]) {
            (_c = outcome.issue).push.apply(_c, this.supportingInformation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod';
    return MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod;
}(BackboneElement));
/**
 * A species for which this route applies.
 */
var MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies = /** @class */ (function (_super) {
    __extends(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, _super);
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['withdrawalPeriod']) {
            _this.withdrawalPeriod = source.withdrawalPeriod.map(function (x) { return new MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(x); });
        }
        else {
            _this.withdrawalPeriod = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductPharmaceutical.routeOfAdministration.targetSpecies.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["withdrawalPeriod"]) {
            this.withdrawalPeriod.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies';
    return MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies;
}(BackboneElement));
/**
 * The path by which the pharmaceutical product is taken into or makes contact with the body.
 */
var MedicinalProductPharmaceuticalRouteOfAdministration = /** @class */ (function (_super) {
    __extends(MedicinalProductPharmaceuticalRouteOfAdministration, _super);
    /**
     * Default constructor for MedicinalProductPharmaceuticalRouteOfAdministration - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPharmaceuticalRouteOfAdministration(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['firstDose']) {
            _this.firstDose = new Quantity(source.firstDose);
        }
        if (source['maxSingleDose']) {
            _this.maxSingleDose = new Quantity(source.maxSingleDose);
        }
        if (source['maxDosePerDay']) {
            _this.maxDosePerDay = new Quantity(source.maxDosePerDay);
        }
        if (source['maxDosePerTreatmentPeriod']) {
            _this.maxDosePerTreatmentPeriod = new Ratio(source.maxDosePerTreatmentPeriod);
        }
        if (source['maxTreatmentPeriod']) {
            _this.maxTreatmentPeriod = new Duration(source.maxTreatmentPeriod);
        }
        if (source['targetSpecies']) {
            _this.targetSpecies = source.targetSpecies.map(function (x) { return new MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(x); });
        }
        else {
            _this.targetSpecies = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPharmaceuticalRouteOfAdministration.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: MedicinalProductPharmaceutical.routeOfAdministration.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["firstDose"]) {
            (_b = outcome.issue).push.apply(_b, this.firstDose.doModelValidation().issue);
        }
        if (this["maxSingleDose"]) {
            (_c = outcome.issue).push.apply(_c, this.maxSingleDose.doModelValidation().issue);
        }
        if (this["maxDosePerDay"]) {
            (_d = outcome.issue).push.apply(_d, this.maxDosePerDay.doModelValidation().issue);
        }
        if (this["maxDosePerTreatmentPeriod"]) {
            (_e = outcome.issue).push.apply(_e, this.maxDosePerTreatmentPeriod.doModelValidation().issue);
        }
        if (this["maxTreatmentPeriod"]) {
            (_f = outcome.issue).push.apply(_f, this.maxTreatmentPeriod.doModelValidation().issue);
        }
        if (this["targetSpecies"]) {
            this.targetSpecies.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPharmaceuticalRouteOfAdministration._fts_dataType = 'MedicinalProductPharmaceuticalRouteOfAdministration';
    return MedicinalProductPharmaceuticalRouteOfAdministration;
}(BackboneElement));
/**
 * A pharmaceutical product described in terms of its composition and dose form.
 */
var MedicinalProductPharmaceutical = /** @class */ (function (_super) {
    __extends(MedicinalProductPharmaceutical, _super);
    /**
     * Default constructor for MedicinalProductPharmaceutical - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductPharmaceutical(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicinalProductPharmaceutical';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['administrableDoseForm']) {
            _this.administrableDoseForm = new CodeableConcept(source.administrableDoseForm);
        }
        else {
            _this.administrableDoseForm = null;
        }
        if (source['unitOfPresentation']) {
            _this.unitOfPresentation = new CodeableConcept(source.unitOfPresentation);
        }
        if (source['ingredient']) {
            _this.ingredient = source.ingredient.map(function (x) { return new Reference(x); });
        }
        else {
            _this.ingredient = [];
        }
        if (source['device']) {
            _this.device = source.device.map(function (x) { return new Reference(x); });
        }
        else {
            _this.device = [];
        }
        if (source['characteristics']) {
            _this.characteristics = source.characteristics.map(function (x) { return new MedicinalProductPharmaceuticalCharacteristics(x); });
        }
        else {
            _this.characteristics = [];
        }
        if (source['routeOfAdministration']) {
            _this.routeOfAdministration = source.routeOfAdministration.map(function (x) { return new MedicinalProductPharmaceuticalRouteOfAdministration(x); });
        }
        else {
            _this.routeOfAdministration = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductPharmaceutical.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicinalProductPharmaceutical" fhir: MedicinalProductPharmaceutical.resourceType:"MedicinalProductPharmaceutical"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['administrableDoseForm']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property administrableDoseForm:fhir.CodeableConcept fhir: MedicinalProductPharmaceutical.administrableDoseForm:CodeableConcept', }));
        }
        if (this["administrableDoseForm"]) {
            (_a = outcome.issue).push.apply(_a, this.administrableDoseForm.doModelValidation().issue);
        }
        if (this["unitOfPresentation"]) {
            (_b = outcome.issue).push.apply(_b, this.unitOfPresentation.doModelValidation().issue);
        }
        if (this["ingredient"]) {
            this.ingredient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["device"]) {
            this.device.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["characteristics"]) {
            this.characteristics.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['routeOfAdministration']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property routeOfAdministration:fhir.MedicinalProductPharmaceuticalRouteOfAdministration[] fhir: MedicinalProductPharmaceutical.routeOfAdministration:routeOfAdministration', }));
        }
        else if (!Array.isArray(this.routeOfAdministration)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property routeOfAdministration:fhir.MedicinalProductPharmaceuticalRouteOfAdministration[] fhir: MedicinalProductPharmaceutical.routeOfAdministration:routeOfAdministration', }));
        }
        else if (this.routeOfAdministration.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property routeOfAdministration:fhir.MedicinalProductPharmaceuticalRouteOfAdministration[] fhir: MedicinalProductPharmaceutical.routeOfAdministration:routeOfAdministration', }));
        }
        if (this["routeOfAdministration"]) {
            this.routeOfAdministration.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductPharmaceutical._fts_dataType = 'MedicinalProductPharmaceutical';
    return MedicinalProductPharmaceutical;
}(DomainResource));

export { MedicinalProductPharmaceutical, MedicinalProductPharmaceuticalCharacteristics, MedicinalProductPharmaceuticalRouteOfAdministration, MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod };
//# sourceMappingURL=MedicinalProductPharmaceutical.js.map
