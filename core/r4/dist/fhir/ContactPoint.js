// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ContactPoint
import * as fhir from '../fhir.js';
// @ts-ignore
import { ContactPointSystemCodes } from '../fhirValueSets/ContactPointSystemCodes.js';
// @ts-ignore
import { ContactPointUseCodes } from '../fhirValueSets/ContactPointUseCodes.js';
/**
 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
 */
export class ContactPoint extends fhir.FhirElement {
    /**
     * Default constructor for ContactPoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirCode({ value: source.system });
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirCode(source._system);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        if (source['_use']) {
            if (this.use) {
                this.use.addExtendedProperties(source._use);
            }
            else {
                this.use = new fhir.FhirCode(source._use);
            }
        }
        if (source['rank']) {
            this.rank = new fhir.FhirPositiveInt({ value: source.rank });
        }
        if (source['_rank']) {
            if (this.rank) {
                this.rank.addExtendedProperties(source._rank);
            }
            else {
                this.rank = new fhir.FhirPositiveInt(source._rank);
            }
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Required-bound Value Set for system (ContactPoint.system)
     */
    static get systemRequiredCodes() {
        return ContactPointSystemCodes;
    }
    /**
     * Required-bound Value Set for use (ContactPoint.use)
     */
    static get useRequiredCodes() {
        return ContactPointUseCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this['system'] && (!Object.values(ContactPointSystemCodes).includes(this.system))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property system?:fhir.FhirCode<ContactPointSystemCodeType> fhir: ContactPoint.system:code Required binding to: ContactPointSystem' });
        }
        if (this["system"]) {
            issues.push(...this.system.doModelValidation());
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        if (this['use'] && (!Object.values(ContactPointUseCodes).includes(this.use))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property use?:fhir.FhirCode<ContactPointUseCodeType> fhir: ContactPoint.use:code Required binding to: ContactPointUse' });
        }
        if (this["use"]) {
            issues.push(...this.use.doModelValidation());
        }
        if (this["rank"]) {
            issues.push(...this.rank.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ContactPoint._fts_dataType = 'ContactPoint';
//# sourceMappingURL=data:application/json;base64,