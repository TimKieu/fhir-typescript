{"version":3,"file":"SubstanceReferenceInformation.js","sources":["../../src/fhir/SubstanceReferenceInformation.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: SubstanceReferenceInformation\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SubstanceReferenceInformationGene type.\r\n */\r\nexport interface SubstanceReferenceInformationGeneArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  geneSequenceOrigin?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  gene?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstanceReferenceInformationGene extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceReferenceInformationGene';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public geneSequenceOrigin?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public gene?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SubstanceReferenceInformationGene - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceReferenceInformationGeneArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['geneSequenceOrigin']) { this.geneSequenceOrigin = new fhir.CodeableConcept(source.geneSequenceOrigin); }\r\n    if (source['gene']) { this.gene = new fhir.CodeableConcept(source.gene); }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"geneSequenceOrigin\"]) { outcome.issue!.push(...this.geneSequenceOrigin.doModelValidation().issue!); }\r\n    if (this[\"gene\"]) { outcome.issue!.push(...this.gene.doModelValidation().issue!); }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceReferenceInformationGeneElement type.\r\n */\r\nexport interface SubstanceReferenceInformationGeneElementArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  element?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstanceReferenceInformationGeneElement extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceReferenceInformationGeneElement';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public element?: fhir.Identifier|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SubstanceReferenceInformationGeneElement - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceReferenceInformationGeneElementArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['element']) { this.element = new fhir.Identifier(source.element); }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"element\"]) { outcome.issue!.push(...this.element.doModelValidation().issue!); }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceReferenceInformationClassification type.\r\n */\r\nexport interface SubstanceReferenceInformationClassificationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  domain?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  classification?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  subtype?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstanceReferenceInformationClassification extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceReferenceInformationClassification';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public domain?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public classification?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public subtype?: fhir.CodeableConcept[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SubstanceReferenceInformationClassification - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceReferenceInformationClassificationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['domain']) { this.domain = new fhir.CodeableConcept(source.domain); }\r\n    if (source['classification']) { this.classification = new fhir.CodeableConcept(source.classification); }\r\n    if (source['subtype']) { this.subtype = source.subtype.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.subtype = []; }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"domain\"]) { outcome.issue!.push(...this.domain.doModelValidation().issue!); }\r\n    if (this[\"classification\"]) { outcome.issue!.push(...this.classification.doModelValidation().issue!); }\r\n    if (this[\"subtype\"]) { this.subtype.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceReferenceInformationTarget type.\r\n */\r\nexport interface SubstanceReferenceInformationTargetArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Todo.\r\n   */\r\n  target?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  interaction?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  organism?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  organismType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amount?: fhir.Quantity|fhir.Range|fhir.FhirString|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amountQuantity?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amountRange?: fhir.RangeArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amountString?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  amountType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  source?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstanceReferenceInformationTarget extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceReferenceInformationTarget';\r\n  /**\r\n   * Todo.\r\n   */\r\n  public target?: fhir.Identifier|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public interaction?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public organism?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public organismType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public amount?: (fhir.Quantity|fhir.Range|fhir.FhirString)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SubstanceReferenceInformation.target.amount[x]\r\n   */\r\n  protected static readonly _fts_amountIsChoice:true = true;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public amountType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public source?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SubstanceReferenceInformationTarget - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceReferenceInformationTargetArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['target']) { this.target = new fhir.Identifier(source.target); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['interaction']) { this.interaction = new fhir.CodeableConcept(source.interaction); }\r\n    if (source['organism']) { this.organism = new fhir.CodeableConcept(source.organism); }\r\n    if (source['organismType']) { this.organismType = new fhir.CodeableConcept(source.organismType); }\r\n    if (source['amount']) { this.amount = source.amount; }\r\n    else if (source['amountQuantity']) { this.amount = new fhir.Quantity(source.amountQuantity); }\r\n    else if (source['amountRange']) { this.amount = new fhir.Range(source.amountRange); }\r\n    else if (source['amountString']) { this.amount = new fhir.FhirString({value: source.amountString}); }\r\n    if (source['amountType']) { this.amountType = new fhir.CodeableConcept(source.amountType); }\r\n    if (source['source']) { this.source = source.source.map((x) => new fhir.Reference(x)); }\r\n    else { this.source = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"target\"]) { outcome.issue!.push(...this.target.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"interaction\"]) { outcome.issue!.push(...this.interaction.doModelValidation().issue!); }\r\n    if (this[\"organism\"]) { outcome.issue!.push(...this.organism.doModelValidation().issue!); }\r\n    if (this[\"organismType\"]) { outcome.issue!.push(...this.organismType.doModelValidation().issue!); }\r\n    if (this[\"amountType\"]) { outcome.issue!.push(...this.amountType.doModelValidation().issue!); }\r\n    if (this[\"source\"]) { this.source.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SubstanceReferenceInformation type.\r\n */\r\nexport interface SubstanceReferenceInformationArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"SubstanceReferenceInformation\"|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  comment?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  gene?: fhir.SubstanceReferenceInformationGeneArgs[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  geneElement?: fhir.SubstanceReferenceInformationGeneElementArgs[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  classification?: fhir.SubstanceReferenceInformationClassificationArgs[]|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  target?: fhir.SubstanceReferenceInformationTargetArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Todo.\r\n */\r\nexport class SubstanceReferenceInformation extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SubstanceReferenceInformation';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"SubstanceReferenceInformation\";\r\n  /**\r\n   * Todo.\r\n   */\r\n  public comment?: fhir.FhirString|undefined;\r\n  /**\r\n   * Todo.\r\n   */\r\n  public gene?: fhir.SubstanceReferenceInformationGene[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public geneElement?: fhir.SubstanceReferenceInformationGeneElement[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public classification?: fhir.SubstanceReferenceInformationClassification[];\r\n  /**\r\n   * Todo.\r\n   */\r\n  public target?: fhir.SubstanceReferenceInformationTarget[];\r\n  /**\r\n   * Default constructor for SubstanceReferenceInformation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SubstanceReferenceInformationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'SubstanceReferenceInformation';\r\n    if (source['comment']) { this.comment = new fhir.FhirString({value: source.comment}); }\r\n    if (source['gene']) { this.gene = source.gene.map((x) => new fhir.SubstanceReferenceInformationGene(x)); }\r\n    else { this.gene = []; }\r\n    if (source['geneElement']) { this.geneElement = source.geneElement.map((x) => new fhir.SubstanceReferenceInformationGeneElement(x)); }\r\n    else { this.geneElement = []; }\r\n    if (source['classification']) { this.classification = source.classification.map((x) => new fhir.SubstanceReferenceInformationClassification(x)); }\r\n    else { this.classification = []; }\r\n    if (source['target']) { this.target = source.target.map((x) => new fhir.SubstanceReferenceInformationTarget(x)); }\r\n    else { this.target = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"SubstanceReferenceInformation\" fhir: SubstanceReferenceInformation.resourceType:\"SubstanceReferenceInformation\"', }));\r\n    }\r\n    if (this[\"comment\"]) { outcome.issue!.push(...this.comment.doModelValidation().issue!); }\r\n    if (this[\"gene\"]) { this.gene.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"geneElement\"]) { this.geneElement.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"classification\"]) { this.classification.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"target\"]) { this.target.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.CodeableConcept","fhir.Reference","fhir.BackboneElement","fhir.Identifier","fhir.Quantity","fhir.Range","fhir.FhirString","fhir.SubstanceReferenceInformationGene","fhir.SubstanceReferenceInformationGeneElement","fhir.SubstanceReferenceInformationClassification","fhir.SubstanceReferenceInformationTarget","fhir.OperationOutcomeIssue","fhir.DomainResource"],"mappings":";;;;;;;;;;;;;;;AAAA;AA6BA;;AAEG;AACH,IAAA,iCAAA,kBAAA,UAAA,MAAA,EAAA;IAAuD,SAAoB,CAAA,iCAAA,EAAA,MAAA,CAAA,CAAA;AAiBzE;;AAEG;IACH,SAAY,iCAAA,CAAA,MAA0D,EAAE,OAAwC,EAAA;AAApG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA0D,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAhH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAKvB,IAAA,CAAA;AAJC,QAAA,IAAI,MAAM,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,kBAAkB,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAAE,SAAA;AACpH,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AAC1E,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACnF,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC3B;AACD;;AAEG;AACa,IAAA,iCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAnCD;;AAEG;IACoB,iCAAa,CAAA,aAAA,GAAU,mCAAmC,CAAC;IAiCpF,OAAC,iCAAA,CAAA;AAAA,CArCD,CAAuDC,eAAoB,CAqC1E,EAAA;AAmBD;;AAEG;AACH,IAAA,wCAAA,kBAAA,UAAA,MAAA,EAAA;IAA8D,SAAoB,CAAA,wCAAA,EAAA,MAAA,CAAA,CAAA;AAiBhF;;AAEG;IACH,SAAY,wCAAA,CAAA,MAAiE,EAAE,OAAwC,EAAA;AAA3G,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAiE,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAvH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAKvB,IAAA,CAAA;AAJC,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAIF,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AAC1E,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,IAAIG,UAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAAE,SAAA;AAC9E,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIF,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACnF,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC3B;AACD;;AAEG;AACa,IAAA,wCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACzF,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAnCD;;AAEG;IACoB,wCAAa,CAAA,aAAA,GAAU,0CAA0C,CAAC;IAiC3F,OAAC,wCAAA,CAAA;AAAA,CArCD,CAA8DC,eAAoB,CAqCjF,EAAA;AAuBD;;AAEG;AACH,IAAA,2CAAA,kBAAA,UAAA,MAAA,EAAA;IAAiE,SAAoB,CAAA,2CAAA,EAAA,MAAA,CAAA,CAAA;AAqBnF;;AAEG;IACH,SAAY,2CAAA,CAAA,MAAoE,EAAE,OAAwC,EAAA;AAA9G,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAoE,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA1H,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAOvB,IAAA,CAAA;AANC,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIF,eAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAAE,SAAA;AAChF,QAAA,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,cAAc,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAAE,SAAA;AACxG,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;YAAE,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIA,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC5F,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAAE,SAAA;AAC3B,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACnF,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC3B;AACD;;AAEG;AACa,IAAA,2CAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvG,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA1CD;;AAEG;IACoB,2CAAa,CAAA,aAAA,GAAU,6CAA6C,CAAC;IAwC9F,OAAC,2CAAA,CAAA;AAAA,CA5CD,CAAiEC,eAAoB,CA4CpF,EAAA;AAmDD;;AAEG;AACH,IAAA,mCAAA,kBAAA,UAAA,MAAA,EAAA;IAAyD,SAAoB,CAAA,mCAAA,EAAA,MAAA,CAAA,CAAA;AAyC3E;;AAEG;IACH,SAAY,mCAAA,CAAA,MAA4D,EAAE,OAAwC,EAAA;AAAtG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA4D,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAlH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAavB,IAAA,CAAA;AAZC,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIC,UAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAAE,SAAA;AAC3E,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAIH,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AAC1E,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAAE,SAAA;AAC/F,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAAE,SAAA;AACtF,QAAA,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,YAAY,GAAG,IAAIA,eAAoB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AAAE,SAAA;AAClG,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAAE,SAAA;AACjD,aAAA,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAII,QAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAAE,SAAA;AACzF,aAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIC,KAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAAE,SAAA;AAChF,aAAA,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIC,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,YAAY,EAAC,CAAC,CAAC;AAAE,SAAA;AACrG,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,IAAIN,eAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAAE,SAAA;AAC5F,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACnF,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC3B;AACD;;AAEG;AACa,IAAA,mCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3F,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnG,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/F,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAvED;;AAEG;IACoB,mCAAa,CAAA,aAAA,GAAU,qCAAqC,CAAC;AAyBpF;;AAEG;IACuB,mCAAmB,CAAA,mBAAA,GAAQ,IAAI,CAAC;IAyC5D,OAAC,mCAAA,CAAA;AAAA,CAzED,CAAyDC,eAAoB,CAyE5E,EAAA;AA+BD;;AAEG;AACH,IAAA,6BAAA,kBAAA,UAAA,MAAA,EAAA;IAAmD,SAAmB,CAAA,6BAAA,EAAA,MAAA,CAAA,CAAA;AA6BpE;;AAEG;IACH,SAAY,6BAAA,CAAA,MAAsD,EAAE,OAAwC,EAAA;AAAhG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAsD,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA5G,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAWvB,IAAA,CAAA;AAVC,QAAA,KAAI,CAAC,YAAY,GAAG,+BAA+B,CAAC;AACpD,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,IAAII,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,OAAO,EAAC,CAAC,CAAC;AAAE,SAAA;AACvF,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;YAAE,KAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,iCAAsC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACrG,aAAA;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AAAE,SAAA;AACxB,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;YAAE,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,wCAA6C,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACjI,aAAA;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AAAE,SAAA;AAC/B,QAAA,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAE;YAAE,KAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,2CAAgD,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC7I,aAAA;AAAE,YAAA,KAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AAAE,SAAA;AAClC,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,mCAAwC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC7G,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAAE,SAAA;;KAC3B;AACD;;AAEG;AACa,IAAA,6BAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;AACzB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIC,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,yJAAyJ,GAAG,CAAC,CAAC,CAAC;AACpT,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACzF,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACzG,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACvH,QAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7H,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA1DD;;AAEG;IACoB,6BAAa,CAAA,aAAA,GAAU,+BAA+B,CAAC;IAwDhF,OAAC,6BAAA,CAAA;AAAA,CA5DD,CAAmDC,cAAmB,CA4DrE;;;;"}