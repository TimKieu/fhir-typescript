// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Endpoint
import * as fhir from '../fhir.js';
// @ts-ignore
import { EndpointStatusCodings, } from '../fhirValueSets/EndpointStatusCodings.js';
// @ts-ignore
import { EndpointConnectionTypeCodings, } from '../fhirValueSets/EndpointConnectionTypeCodings.js';
/**
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
 */
export class Endpoint extends fhir.DomainResource {
    /**
     * Default constructor for Endpoint - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Endpoint';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['connectionType']) {
            this.connectionType = new fhir.Coding(source.connectionType);
        }
        else {
            this.connectionType = null;
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.contact = [];
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payloadType']) {
            this.payloadType = source.payloadType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.payloadType = [];
        }
        if (source['payloadMimeType']) {
            this.payloadMimeType = source.payloadMimeType.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.payloadMimeType = [];
        }
        if (source['address']) {
            this.address = new fhir.FhirUrl({ value: source.address });
        }
        else {
            this.address = null;
        }
        if (source['header']) {
            this.header = source.header.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.header = [];
        }
    }
    /**
     * Required-bound Value Set for status (Endpoint.status)
     */
    static statusRequiredCoding() {
        return EndpointStatusCodings;
    }
    /**
     * Extensible-bound Value Set for connectionType (Endpoint.connectionType)
     */
    static connectionTypeExtensibleCoding() {
        return EndpointConnectionTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Endpoint" fhir: Endpoint.resourceType:"Endpoint"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:EndpointStatusCodeType fhir: Endpoint.status:code', });
        }
        if (!this['connectionType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property connectionType:fhir.Coding fhir: Endpoint.connectionType:Coding', });
        }
        if (this["connectionType"]) {
            issues.push(...this.connectionType.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["managingOrganization"]) {
            issues.push(...this.managingOrganization.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (!this['payloadType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property payloadType:fhir.CodeableConcept[] fhir: Endpoint.payloadType:CodeableConcept', });
        }
        else if (!Array.isArray(this.payloadType)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property payloadType:fhir.CodeableConcept[] fhir: Endpoint.payloadType:CodeableConcept', });
        }
        else if (this.payloadType.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property payloadType:fhir.CodeableConcept[] fhir: Endpoint.payloadType:CodeableConcept', });
        }
        if (this["payloadType"]) {
            this.payloadType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["payloadMimeType"]) {
            this.payloadMimeType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['address']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property address:fhir.FhirUrl fhir: Endpoint.address:url', });
        }
        if (this["address"]) {
            issues.push(...this.address.doModelValidation());
        }
        if (this["header"]) {
            this.header.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Endpoint._fts_dataType = 'Endpoint';
//# sourceMappingURL=data:application/json;base64,