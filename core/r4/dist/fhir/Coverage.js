// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
export class CoverageClass extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageClass - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirString({ value: source.value }, options);
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage.class';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOS('name', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageClass._fts_dataType = 'CoverageClass';
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
export class CoverageCostToBeneficiaryException extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiaryException - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        else {
            this.type = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage.costToBeneficiary.exception';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageCostToBeneficiaryException._fts_dataType = 'CoverageCostToBeneficiaryException';
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
export class CoverageCostToBeneficiary extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity, options);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney, options);
        }
        else {
            this.value = null;
        }
        if (source['exception']) {
            this.exception = source.exception.map((x) => new fhir.CoverageCostToBeneficiaryException(x, options));
        }
        else {
            this.exception = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage.costToBeneficiary';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOA('exception', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageCostToBeneficiary._fts_dataType = 'CoverageCostToBeneficiary';
/**
 * Internal flag to properly serialize choice-type element Coverage.costToBeneficiary.value[x]
 */
CoverageCostToBeneficiary._fts_valueIsChoice = true;
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Coverage';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['policyHolder']) {
            this.policyHolder = new fhir.Reference(source.policyHolder, options);
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber, options);
        }
        if (source['subscriberId'] !== undefined) {
            this.subscriberId = new fhir.FhirString({ value: source.subscriberId }, options);
        }
        if (source['_subscriberId']) {
            if (this.subscriberId) {
                this.subscriberId.addExtendedProperties(source._subscriberId);
            }
            else {
                this.subscriberId = new fhir.FhirString(source._subscriberId, options);
            }
        }
        if (source['beneficiary']) {
            this.beneficiary = new fhir.Reference(source.beneficiary, options);
        }
        else {
            this.beneficiary = null;
        }
        if (source['dependent'] !== undefined) {
            this.dependent = new fhir.FhirString({ value: source.dependent }, options);
        }
        if (source['_dependent']) {
            if (this.dependent) {
                this.dependent.addExtendedProperties(source._dependent);
            }
            else {
                this.dependent = new fhir.FhirString(source._dependent, options);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship, options);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period, options);
        }
        if (source['payor']) {
            this.payor = source.payor.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.payor = [];
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.CoverageClass(x, options));
        }
        else {
            this.class = [];
        }
        if (source['order'] !== undefined) {
            this.order = new fhir.FhirPositiveInt({ value: source.order }, options);
        }
        if (source['_order']) {
            if (this.order) {
                this.order.addExtendedProperties(source._order);
            }
            else {
                this.order = new fhir.FhirPositiveInt(source._order, options);
            }
        }
        if (source['network'] !== undefined) {
            this.network = new fhir.FhirString({ value: source.network }, options);
        }
        if (source['_network']) {
            if (this.network) {
                this.network.addExtendedProperties(source._network);
            }
            else {
                this.network = new fhir.FhirString(source._network, options);
            }
        }
        if (source['costToBeneficiary']) {
            this.costToBeneficiary = source.costToBeneficiary.map((x) => new fhir.CoverageCostToBeneficiary(x, options));
        }
        else {
            this.costToBeneficiary = [];
        }
        if (source['subrogation'] !== undefined) {
            this.subrogation = new fhir.FhirBoolean({ value: source.subrogation }, options);
        }
        if (source['_subrogation']) {
            if (this.subrogation) {
                this.subrogation.addExtendedProperties(source._subrogation);
            }
            else {
                this.subrogation = new fhir.FhirBoolean(source._subrogation, options);
            }
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.contract = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('policyHolder', exp));
        iss.push(...this.vOS('subscriber', exp));
        iss.push(...this.vOS('subscriberId', exp));
        iss.push(...this.vRS('beneficiary', exp));
        iss.push(...this.vOS('dependent', exp));
        iss.push(...this.vOS('relationship', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRA('payor', exp));
        iss.push(...this.vOA('class', exp));
        iss.push(...this.vOS('order', exp));
        iss.push(...this.vOS('network', exp));
        iss.push(...this.vOA('costToBeneficiary', exp));
        iss.push(...this.vOS('subrogation', exp));
        iss.push(...this.vOA('contract', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Coverage._fts_dataType = 'Coverage';
//# sourceMappingURL=data:application/json;base64,