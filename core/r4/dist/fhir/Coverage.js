// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
// @ts-ignore
import { CoverageClassCodings, } from '../fhirValueSets/CoverageClassCodings.js';
// @ts-ignore
import { CoverageCopayTypeCodings, } from '../fhirValueSets/CoverageCopayTypeCodings.js';
// @ts-ignore
import { FmStatusCodes } from '../fhirValueSets/FmStatusCodes.js';
// @ts-ignore
import { CoverageTypeCodings, } from '../fhirValueSets/CoverageTypeCodings.js';
// @ts-ignore
import { SubscriberRelationshipCodings, } from '../fhirValueSets/SubscriberRelationshipCodings.js';
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
export class CoverageClass extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageClass - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
    }
    /**
     * Extensible-bound Value Set for type (Coverage.class.type)
     */
    static get typeExtensibleCodings() {
        return CoverageClassCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Coverage.class';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: Coverage.class.type:CodeableConcept', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: Coverage.class.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageClass._fts_dataType = 'CoverageClass';
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
export class CoverageCostToBeneficiaryException extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiaryException - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Coverage.costToBeneficiary.exception';
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: Coverage.costToBeneficiary.exception.type:CodeableConcept', expression: [expression] });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageCostToBeneficiaryException._fts_dataType = 'CoverageCostToBeneficiaryException';
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
export class CoverageCostToBeneficiary extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney);
        }
        else {
            this.value = null;
        }
        if (source['exception']) {
            this.exception = source.exception.map((x) => new fhir.CoverageCostToBeneficiaryException(x));
        }
        else {
            this.exception = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (Coverage.costToBeneficiary.type)
     */
    static get typeExtensibleCodings() {
        return CoverageCopayTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Coverage.costToBeneficiary';
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: Coverage.costToBeneficiary.value[x]:', expression: [expression] });
        }
        if (this["exception"]) {
            this.exception.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.exception[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageCostToBeneficiary._fts_dataType = 'CoverageCostToBeneficiary';
/**
 * Internal flag to properly serialize choice-type element Coverage.costToBeneficiary.value[x]
 */
CoverageCostToBeneficiary._fts_valueIsChoice = true;
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Coverage';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['policyHolder']) {
            this.policyHolder = new fhir.Reference(source.policyHolder);
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber);
        }
        if (source['subscriberId']) {
            this.subscriberId = new fhir.FhirString({ value: source.subscriberId });
        }
        if (source['_subscriberId']) {
            if (this.subscriberId) {
                this.subscriberId.addExtendedProperties(source._subscriberId);
            }
            else {
                this.subscriberId = new fhir.FhirString(source._subscriberId);
            }
        }
        if (source['beneficiary']) {
            this.beneficiary = new fhir.Reference(source.beneficiary);
        }
        else {
            this.beneficiary = null;
        }
        if (source['dependent']) {
            this.dependent = new fhir.FhirString({ value: source.dependent });
        }
        if (source['_dependent']) {
            if (this.dependent) {
                this.dependent.addExtendedProperties(source._dependent);
            }
            else {
                this.dependent = new fhir.FhirString(source._dependent);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payor']) {
            this.payor = source.payor.map((x) => new fhir.Reference(x));
        }
        else {
            this.payor = [];
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.CoverageClass(x));
        }
        else {
            this.class = [];
        }
        if (source['order']) {
            this.order = new fhir.FhirPositiveInt({ value: source.order });
        }
        if (source['_order']) {
            if (this.order) {
                this.order.addExtendedProperties(source._order);
            }
            else {
                this.order = new fhir.FhirPositiveInt(source._order);
            }
        }
        if (source['network']) {
            this.network = new fhir.FhirString({ value: source.network });
        }
        if (source['_network']) {
            if (this.network) {
                this.network.addExtendedProperties(source._network);
            }
            else {
                this.network = new fhir.FhirString(source._network);
            }
        }
        if (source['costToBeneficiary']) {
            this.costToBeneficiary = source.costToBeneficiary.map((x) => new fhir.CoverageCostToBeneficiary(x));
        }
        else {
            this.costToBeneficiary = [];
        }
        if (source['subrogation']) {
            this.subrogation = new fhir.FhirBoolean({ value: source.subrogation });
        }
        if (source['_subrogation']) {
            if (this.subrogation) {
                this.subrogation.addExtendedProperties(source._subrogation);
            }
            else {
                this.subrogation = new fhir.FhirBoolean(source._subrogation);
            }
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x));
        }
        else {
            this.contract = [];
        }
    }
    /**
     * Required-bound Value Set for status (Coverage.status)
     */
    static get statusRequiredCodes() {
        return FmStatusCodes;
    }
    /**
     * Preferred-bound Value Set for type (Coverage.type)
     */
    static get typePreferredCodings() {
        return CoverageTypeCodings;
    }
    /**
     * Extensible-bound Value Set for relationship (Coverage.relationship)
     */
    static get relationshipExtensibleCodings() {
        return SubscriberRelationshipCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Coverage';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Coverage.resourceType:"Coverage"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: Coverage.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(FmStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: Coverage.status:code Required binding to: FmStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["policyHolder"]) {
            issues.push(...this.policyHolder.doModelValidation(expression + '.policyHolder'));
        }
        if (this["subscriber"]) {
            issues.push(...this.subscriber.doModelValidation(expression + '.subscriber'));
        }
        if (this["subscriberId"]) {
            issues.push(...this.subscriberId.doModelValidation(expression + '.subscriberId'));
        }
        if (!this['beneficiary']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property beneficiary fhir: Coverage.beneficiary:Reference', expression: [expression] });
        }
        if (this["beneficiary"]) {
            issues.push(...this.beneficiary.doModelValidation(expression + '.beneficiary'));
        }
        if (this["dependent"]) {
            issues.push(...this.dependent.doModelValidation(expression + '.dependent'));
        }
        if (this["relationship"]) {
            issues.push(...this.relationship.doModelValidation(expression + '.relationship'));
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation(expression + '.period'));
        }
        if (!this['payor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property payor fhir: Coverage.payor:Reference', expression: [expression] });
        }
        else if (!Array.isArray(this.payor)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property payor fhir: Coverage.payor:Reference', expression: [expression] });
        }
        else if (this.payor.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property payor fhir: Coverage.payor:Reference', expression: [expression] });
        }
        if (this["payor"]) {
            this.payor.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.payor[${i}]`)); });
        }
        if (this["class"]) {
            this.class.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.class[${i}]`)); });
        }
        if (this["order"]) {
            issues.push(...this.order.doModelValidation(expression + '.order'));
        }
        if (this["network"]) {
            issues.push(...this.network.doModelValidation(expression + '.network'));
        }
        if (this["costToBeneficiary"]) {
            this.costToBeneficiary.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.costToBeneficiary[${i}]`)); });
        }
        if (this["subrogation"]) {
            issues.push(...this.subrogation.doModelValidation(expression + '.subrogation'));
        }
        if (this["contract"]) {
            this.contract.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contract[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Coverage._fts_dataType = 'Coverage';
//# sourceMappingURL=data:application/json;base64,