// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Coverage
import * as fhir from '../fhir.js';
// @ts-ignore
import { FmStatusVsValidation } from '../fhirValueSets/FmStatusVsValidation.js';
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
export class CoverageClass extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageClass - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage.class';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOS('name', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageClass._fts_dataType = 'CoverageClass';
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
export class CoverageCostToBeneficiaryException extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiaryException - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage.costToBeneficiary.exception';
        }
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('period', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageCostToBeneficiaryException._fts_dataType = 'CoverageCostToBeneficiaryException';
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
export class CoverageCostToBeneficiary extends fhir.BackboneElement {
    /**
     * Default constructor for CoverageCostToBeneficiary - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueMoney']) {
            this.value = new fhir.Money(source.valueMoney);
        }
        else {
            this.value = null;
        }
        if (source['exception']) {
            this.exception = source.exception.map((x) => new fhir.CoverageCostToBeneficiaryException(x));
        }
        else {
            this.exception = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage.costToBeneficiary';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vRS('value', exp));
        iss.push(...this.vOA('exception', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CoverageCostToBeneficiary._fts_dataType = 'CoverageCostToBeneficiary';
/**
 * Internal flag to properly serialize choice-type element Coverage.costToBeneficiary.value[x]
 */
CoverageCostToBeneficiary._fts_valueIsChoice = true;
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
export class Coverage extends fhir.DomainResource {
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Coverage';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['policyHolder']) {
            this.policyHolder = new fhir.Reference(source.policyHolder);
        }
        if (source['subscriber']) {
            this.subscriber = new fhir.Reference(source.subscriber);
        }
        if (source['subscriberId']) {
            this.subscriberId = new fhir.FhirString({ value: source.subscriberId });
        }
        if (source['_subscriberId']) {
            if (this.subscriberId) {
                this.subscriberId.addExtendedProperties(source._subscriberId);
            }
            else {
                this.subscriberId = new fhir.FhirString(source._subscriberId);
            }
        }
        if (source['beneficiary']) {
            this.beneficiary = new fhir.Reference(source.beneficiary);
        }
        else {
            this.beneficiary = null;
        }
        if (source['dependent']) {
            this.dependent = new fhir.FhirString({ value: source.dependent });
        }
        if (source['_dependent']) {
            if (this.dependent) {
                this.dependent.addExtendedProperties(source._dependent);
            }
            else {
                this.dependent = new fhir.FhirString(source._dependent);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['payor']) {
            this.payor = source.payor.map((x) => new fhir.Reference(x));
        }
        else {
            this.payor = [];
        }
        if (source['class']) {
            this.class = source.class.map((x) => new fhir.CoverageClass(x));
        }
        else {
            this.class = [];
        }
        if (source['order']) {
            this.order = new fhir.FhirPositiveInt({ value: source.order });
        }
        if (source['_order']) {
            if (this.order) {
                this.order.addExtendedProperties(source._order);
            }
            else {
                this.order = new fhir.FhirPositiveInt(source._order);
            }
        }
        if (source['network']) {
            this.network = new fhir.FhirString({ value: source.network });
        }
        if (source['_network']) {
            if (this.network) {
                this.network.addExtendedProperties(source._network);
            }
            else {
                this.network = new fhir.FhirString(source._network);
            }
        }
        if (source['costToBeneficiary']) {
            this.costToBeneficiary = source.costToBeneficiary.map((x) => new fhir.CoverageCostToBeneficiary(x));
        }
        else {
            this.costToBeneficiary = [];
        }
        if (source['subrogation']) {
            this.subrogation = new fhir.FhirBoolean({ value: source.subrogation });
        }
        if (source['_subrogation']) {
            if (this.subrogation) {
                this.subrogation.addExtendedProperties(source._subrogation);
            }
            else {
                this.subrogation = new fhir.FhirBoolean(source._subrogation);
            }
        }
        if (source['contract']) {
            this.contract = source.contract.map((x) => new fhir.Reference(x));
        }
        else {
            this.contract = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Coverage';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRSV('status', exp, 'FmStatus', FmStatusVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('policyHolder', exp));
        iss.push(...this.vOS('subscriber', exp));
        iss.push(...this.vOS('subscriberId', exp));
        iss.push(...this.vRS('beneficiary', exp));
        iss.push(...this.vOS('dependent', exp));
        iss.push(...this.vOS('relationship', exp));
        iss.push(...this.vOS('period', exp));
        iss.push(...this.vRA('payor', exp));
        iss.push(...this.vOA('class', exp));
        iss.push(...this.vOS('order', exp));
        iss.push(...this.vOS('network', exp));
        iss.push(...this.vOA('costToBeneficiary', exp));
        iss.push(...this.vOS('subrogation', exp));
        iss.push(...this.vOA('contract', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Coverage._fts_dataType = 'Coverage';
//# sourceMappingURL=data:application/json;base64,