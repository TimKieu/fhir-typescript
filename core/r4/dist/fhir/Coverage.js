/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { CoverageClassCodings } from '../fhirValueSets/CoverageClassCodings.js';
import { CoverageCopayTypeCodings } from '../fhirValueSets/CoverageCopayTypeCodings.js';
import { FmStatusCodings } from '../fhirValueSets/FmStatusCodings.js';
import { CoverageTypeCodings } from '../fhirValueSets/CoverageTypeCodings.js';
import { SubscriberRelationshipCodings } from '../fhirValueSets/SubscriberRelationshipCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';
import { Period } from './Period.js';
import { Quantity } from './Quantity.js';
import { Money } from './Money.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { FhirBoolean } from './FhirBoolean.js';

// <auto-generated/>
/**
 * For example may be used to identify a class of coverage or employer group, Policy, Plan.
 */
var CoverageClass = /** @class */ (function (_super) {
    __extends(CoverageClass, _super);
    /**
     * Default constructor for CoverageClass - initializes any required elements to null if a value is not provided.
     */
    function CoverageClass(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['value']) {
            _this.value = new FhirString({ value: source.value });
        }
        else {
            _this.value = null;
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (Coverage.class.type)
     */
    CoverageClass.typeExtensibleCoding = function () {
        return CoverageClassCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CoverageClass.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Coverage.class.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value:fhir.FhirString fhir: Coverage.class.value:string', }));
        }
        if (this["value"]) {
            (_b = outcome.issue).push.apply(_b, this.value.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CoverageClass._fts_dataType = 'CoverageClass';
    return CoverageClass;
}(BackboneElement));
/**
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
var CoverageCostToBeneficiaryException = /** @class */ (function (_super) {
    __extends(CoverageCostToBeneficiaryException, _super);
    /**
     * Default constructor for CoverageCostToBeneficiaryException - initializes any required elements to null if a value is not provided.
     */
    function CoverageCostToBeneficiaryException(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CoverageCostToBeneficiaryException.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Coverage.costToBeneficiary.exception.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["period"]) {
            (_b = outcome.issue).push.apply(_b, this.period.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CoverageCostToBeneficiaryException._fts_dataType = 'CoverageCostToBeneficiaryException';
    return CoverageCostToBeneficiaryException;
}(BackboneElement));
/**
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
var CoverageCostToBeneficiary = /** @class */ (function (_super) {
    __extends(CoverageCostToBeneficiary, _super);
    /**
     * Default constructor for CoverageCostToBeneficiary - initializes any required elements to null if a value is not provided.
     */
    function CoverageCostToBeneficiary(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueMoney']) {
            _this.value = new Money(source.valueMoney);
        }
        else {
            _this.value = null;
        }
        if (source['exception']) {
            _this.exception = source.exception.map(function (x) { return new CoverageCostToBeneficiaryException(x); });
        }
        else {
            _this.exception = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (Coverage.costToBeneficiary.type)
     */
    CoverageCostToBeneficiary.typeExtensibleCoding = function () {
        return CoverageCopayTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CoverageCostToBeneficiary.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['value']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property value: fhir: Coverage.costToBeneficiary.value[x]:', }));
        }
        if (this["exception"]) {
            this.exception.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CoverageCostToBeneficiary._fts_dataType = 'CoverageCostToBeneficiary';
    /**
     * Internal flag to properly serialize choice-type element Coverage.costToBeneficiary.value[x]
     */
    CoverageCostToBeneficiary._fts_valueIsChoice = true;
    return CoverageCostToBeneficiary;
}(BackboneElement));
/**
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 */
var Coverage = /** @class */ (function (_super) {
    __extends(Coverage, _super);
    /**
     * Default constructor for Coverage - initializes any required elements to null if a value is not provided.
     */
    function Coverage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Coverage';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['policyHolder']) {
            _this.policyHolder = new Reference(source.policyHolder);
        }
        if (source['subscriber']) {
            _this.subscriber = new Reference(source.subscriber);
        }
        if (source['subscriberId']) {
            _this.subscriberId = new FhirString({ value: source.subscriberId });
        }
        if (source['beneficiary']) {
            _this.beneficiary = new Reference(source.beneficiary);
        }
        else {
            _this.beneficiary = null;
        }
        if (source['dependent']) {
            _this.dependent = new FhirString({ value: source.dependent });
        }
        if (source['relationship']) {
            _this.relationship = new CodeableConcept(source.relationship);
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['payor']) {
            _this.payor = source.payor.map(function (x) { return new Reference(x); });
        }
        else {
            _this.payor = [];
        }
        if (source['class']) {
            _this.class = source.class.map(function (x) { return new CoverageClass(x); });
        }
        else {
            _this.class = [];
        }
        if (source['order']) {
            _this.order = new FhirPositiveInt({ value: source.order });
        }
        if (source['network']) {
            _this.network = new FhirString({ value: source.network });
        }
        if (source['costToBeneficiary']) {
            _this.costToBeneficiary = source.costToBeneficiary.map(function (x) { return new CoverageCostToBeneficiary(x); });
        }
        else {
            _this.costToBeneficiary = [];
        }
        if (source['subrogation']) {
            _this.subrogation = new FhirBoolean({ value: source.subrogation });
        }
        if (source['contract']) {
            _this.contract = source.contract.map(function (x) { return new Reference(x); });
        }
        else {
            _this.contract = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Coverage.status)
     */
    Coverage.statusRequiredCoding = function () {
        return FmStatusCodings;
    };
    /**
     * Preferred-bound Value Set for type (Coverage.type)
     */
    Coverage.typePreferredCoding = function () {
        return CoverageTypeCodings;
    };
    /**
     * Extensible-bound Value Set for relationship (Coverage.relationship)
     */
    Coverage.relationshipExtensibleCoding = function () {
        return SubscriberRelationshipCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Coverage.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Coverage" fhir: Coverage.resourceType:"Coverage"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:FmStatusCodeType fhir: Coverage.status:code', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["policyHolder"]) {
            (_b = outcome.issue).push.apply(_b, this.policyHolder.doModelValidation().issue);
        }
        if (this["subscriber"]) {
            (_c = outcome.issue).push.apply(_c, this.subscriber.doModelValidation().issue);
        }
        if (this["subscriberId"]) {
            (_d = outcome.issue).push.apply(_d, this.subscriberId.doModelValidation().issue);
        }
        if (!this['beneficiary']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property beneficiary:fhir.Reference fhir: Coverage.beneficiary:Reference', }));
        }
        if (this["beneficiary"]) {
            (_e = outcome.issue).push.apply(_e, this.beneficiary.doModelValidation().issue);
        }
        if (this["dependent"]) {
            (_f = outcome.issue).push.apply(_f, this.dependent.doModelValidation().issue);
        }
        if (this["relationship"]) {
            (_g = outcome.issue).push.apply(_g, this.relationship.doModelValidation().issue);
        }
        if (this["period"]) {
            (_h = outcome.issue).push.apply(_h, this.period.doModelValidation().issue);
        }
        if (!this['payor']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property payor:fhir.Reference[] fhir: Coverage.payor:Reference', }));
        }
        else if (!Array.isArray(this.payor)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property payor:fhir.Reference[] fhir: Coverage.payor:Reference', }));
        }
        else if (this.payor.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property payor:fhir.Reference[] fhir: Coverage.payor:Reference', }));
        }
        if (this["payor"]) {
            this.payor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["class"]) {
            this.class.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["order"]) {
            (_j = outcome.issue).push.apply(_j, this.order.doModelValidation().issue);
        }
        if (this["network"]) {
            (_k = outcome.issue).push.apply(_k, this.network.doModelValidation().issue);
        }
        if (this["costToBeneficiary"]) {
            this.costToBeneficiary.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subrogation"]) {
            (_l = outcome.issue).push.apply(_l, this.subrogation.doModelValidation().issue);
        }
        if (this["contract"]) {
            this.contract.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Coverage._fts_dataType = 'Coverage';
    return Coverage;
}(DomainResource));

export { Coverage, CoverageClass, CoverageCostToBeneficiary, CoverageCostToBeneficiaryException };
//# sourceMappingURL=Coverage.js.map
