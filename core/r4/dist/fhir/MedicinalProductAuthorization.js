// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductAuthorization
import * as fhir from '../fhir.js';
/**
 * Authorization in areas within a country.
 */
export class MedicinalProductAuthorizationJurisdictionalAuthorization extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductAuthorizationJurisdictionalAuthorization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country);
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductAuthorization.jurisdictionalAuthorization';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('country', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('legalStatusOfSupply', exp));
        iss.push(...this.vOS('validityPeriod', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductAuthorizationJurisdictionalAuthorization._fts_dataType = 'MedicinalProductAuthorizationJurisdictionalAuthorization';
/**
 * The regulatory procedure for granting or amending a marketing authorization.
 */
export class MedicinalProductAuthorizationProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductAuthorizationProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['date']) {
            this.date = source.date;
        }
        else if (source['datePeriod']) {
            this.date = new fhir.Period(source.datePeriod);
        }
        else if (source['dateDateTime']) {
            this.date = new fhir.FhirDateTime({ value: source.dateDateTime });
        }
        if (source['application']) {
            this.application = source.application.map((x) => new fhir.MedicinalProductAuthorizationProcedure(x));
        }
        else {
            this.application = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductAuthorization.procedure';
        }
        iss.push(...this.vOS('identifier', exp));
        iss.push(...this.vRS('type', exp));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOA('application', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductAuthorizationProcedure._fts_dataType = 'MedicinalProductAuthorizationProcedure';
/**
 * Internal flag to properly serialize choice-type element MedicinalProductAuthorization.procedure.date[x]
 */
MedicinalProductAuthorizationProcedure._fts_dateIsChoice = true;
/**
 * The regulatory authorization of a medicinal product.
 */
export class MedicinalProductAuthorization extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductAuthorization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductAuthorization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.country = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['_statusDate']) {
            if (this.statusDate) {
                this.statusDate.addExtendedProperties(source._statusDate);
            }
            else {
                this.statusDate = new fhir.FhirDateTime(source._statusDate);
            }
        }
        if (source['restoreDate']) {
            this.restoreDate = new fhir.FhirDateTime({ value: source.restoreDate });
        }
        if (source['_restoreDate']) {
            if (this.restoreDate) {
                this.restoreDate.addExtendedProperties(source._restoreDate);
            }
            else {
                this.restoreDate = new fhir.FhirDateTime(source._restoreDate);
            }
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['dataExclusivityPeriod']) {
            this.dataExclusivityPeriod = new fhir.Period(source.dataExclusivityPeriod);
        }
        if (source['dateOfFirstAuthorization']) {
            this.dateOfFirstAuthorization = new fhir.FhirDateTime({ value: source.dateOfFirstAuthorization });
        }
        if (source['_dateOfFirstAuthorization']) {
            if (this.dateOfFirstAuthorization) {
                this.dateOfFirstAuthorization.addExtendedProperties(source._dateOfFirstAuthorization);
            }
            else {
                this.dateOfFirstAuthorization = new fhir.FhirDateTime(source._dateOfFirstAuthorization);
            }
        }
        if (source['internationalBirthDate']) {
            this.internationalBirthDate = new fhir.FhirDateTime({ value: source.internationalBirthDate });
        }
        if (source['_internationalBirthDate']) {
            if (this.internationalBirthDate) {
                this.internationalBirthDate.addExtendedProperties(source._internationalBirthDate);
            }
            else {
                this.internationalBirthDate = new fhir.FhirDateTime(source._internationalBirthDate);
            }
        }
        if (source['legalBasis']) {
            this.legalBasis = new fhir.CodeableConcept(source.legalBasis);
        }
        if (source['jurisdictionalAuthorization']) {
            this.jurisdictionalAuthorization = source.jurisdictionalAuthorization.map((x) => new fhir.MedicinalProductAuthorizationJurisdictionalAuthorization(x));
        }
        else {
            this.jurisdictionalAuthorization = [];
        }
        if (source['holder']) {
            this.holder = new fhir.Reference(source.holder);
        }
        if (source['regulator']) {
            this.regulator = new fhir.Reference(source.regulator);
        }
        if (source['procedure']) {
            this.procedure = new fhir.MedicinalProductAuthorizationProcedure(source.procedure);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductAuthorization';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOA('country', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('status', exp));
        iss.push(...this.vOS('statusDate', exp));
        iss.push(...this.vOS('restoreDate', exp));
        iss.push(...this.vOS('validityPeriod', exp));
        iss.push(...this.vOS('dataExclusivityPeriod', exp));
        iss.push(...this.vOS('dateOfFirstAuthorization', exp));
        iss.push(...this.vOS('internationalBirthDate', exp));
        iss.push(...this.vOS('legalBasis', exp));
        iss.push(...this.vOA('jurisdictionalAuthorization', exp));
        iss.push(...this.vOS('holder', exp));
        iss.push(...this.vOS('regulator', exp));
        iss.push(...this.vOS('procedure', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductAuthorization._fts_dataType = 'MedicinalProductAuthorization';
//# sourceMappingURL=data:application/json;base64,