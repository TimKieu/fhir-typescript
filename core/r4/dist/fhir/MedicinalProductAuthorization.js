/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Period } from './Period.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Reference } from './Reference.js';

// <auto-generated/>
/**
 * Authorization in areas within a country.
 */
var MedicinalProductAuthorizationJurisdictionalAuthorization = /** @class */ (function (_super) {
    __extends(MedicinalProductAuthorizationJurisdictionalAuthorization, _super);
    /**
     * Default constructor for MedicinalProductAuthorizationJurisdictionalAuthorization - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductAuthorizationJurisdictionalAuthorization(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['country']) {
            _this.country = new CodeableConcept(source.country);
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['legalStatusOfSupply']) {
            _this.legalStatusOfSupply = new CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['validityPeriod']) {
            _this.validityPeriod = new Period(source.validityPeriod);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductAuthorizationJurisdictionalAuthorization.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["country"]) {
            (_a = outcome.issue).push.apply(_a, this.country.doModelValidation().issue);
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["legalStatusOfSupply"]) {
            (_b = outcome.issue).push.apply(_b, this.legalStatusOfSupply.doModelValidation().issue);
        }
        if (this["validityPeriod"]) {
            (_c = outcome.issue).push.apply(_c, this.validityPeriod.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductAuthorizationJurisdictionalAuthorization._fts_dataType = 'MedicinalProductAuthorizationJurisdictionalAuthorization';
    return MedicinalProductAuthorizationJurisdictionalAuthorization;
}(BackboneElement));
/**
 * The regulatory procedure for granting or amending a marketing authorization.
 */
var MedicinalProductAuthorizationProcedure = /** @class */ (function (_super) {
    __extends(MedicinalProductAuthorizationProcedure$1, _super);
    /**
     * Default constructor for MedicinalProductAuthorizationProcedure - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductAuthorizationProcedure$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['date']) {
            _this.date = source.date;
        }
        else if (source['datePeriod']) {
            _this.date = new Period(source.datePeriod);
        }
        else if (source['dateDateTime']) {
            _this.date = new FhirDateTime({ value: source.dateDateTime });
        }
        if (source['application']) {
            _this.application = source.application.map(function (x) { return new MedicinalProductAuthorizationProcedure(x); });
        }
        else {
            _this.application = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductAuthorizationProcedure$1.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicinalProductAuthorization.procedure.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["application"]) {
            this.application.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductAuthorizationProcedure$1._fts_dataType = 'MedicinalProductAuthorizationProcedure';
    /**
     * Internal flag to properly serialize choice-type element MedicinalProductAuthorization.procedure.date[x]
     */
    MedicinalProductAuthorizationProcedure$1._fts_dateIsChoice = true;
    return MedicinalProductAuthorizationProcedure$1;
}(BackboneElement));
/**
 * The regulatory authorization of a medicinal product.
 */
var MedicinalProductAuthorization = /** @class */ (function (_super) {
    __extends(MedicinalProductAuthorization, _super);
    /**
     * Default constructor for MedicinalProductAuthorization - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductAuthorization(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicinalProductAuthorization';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['country']) {
            _this.country = source.country.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.country = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['status']) {
            _this.status = new CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            _this.statusDate = new FhirDateTime({ value: source.statusDate });
        }
        if (source['restoreDate']) {
            _this.restoreDate = new FhirDateTime({ value: source.restoreDate });
        }
        if (source['validityPeriod']) {
            _this.validityPeriod = new Period(source.validityPeriod);
        }
        if (source['dataExclusivityPeriod']) {
            _this.dataExclusivityPeriod = new Period(source.dataExclusivityPeriod);
        }
        if (source['dateOfFirstAuthorization']) {
            _this.dateOfFirstAuthorization = new FhirDateTime({ value: source.dateOfFirstAuthorization });
        }
        if (source['internationalBirthDate']) {
            _this.internationalBirthDate = new FhirDateTime({ value: source.internationalBirthDate });
        }
        if (source['legalBasis']) {
            _this.legalBasis = new CodeableConcept(source.legalBasis);
        }
        if (source['jurisdictionalAuthorization']) {
            _this.jurisdictionalAuthorization = source.jurisdictionalAuthorization.map(function (x) { return new MedicinalProductAuthorizationJurisdictionalAuthorization(x); });
        }
        else {
            _this.jurisdictionalAuthorization = [];
        }
        if (source['holder']) {
            _this.holder = new Reference(source.holder);
        }
        if (source['regulator']) {
            _this.regulator = new Reference(source.regulator);
        }
        if (source['procedure']) {
            _this.procedure = new MedicinalProductAuthorizationProcedure(source.procedure);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductAuthorization.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicinalProductAuthorization" fhir: MedicinalProductAuthorization.resourceType:"MedicinalProductAuthorization"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subject"]) {
            (_a = outcome.issue).push.apply(_a, this.subject.doModelValidation().issue);
        }
        if (this["country"]) {
            this.country.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["status"]) {
            (_b = outcome.issue).push.apply(_b, this.status.doModelValidation().issue);
        }
        if (this["statusDate"]) {
            (_c = outcome.issue).push.apply(_c, this.statusDate.doModelValidation().issue);
        }
        if (this["restoreDate"]) {
            (_d = outcome.issue).push.apply(_d, this.restoreDate.doModelValidation().issue);
        }
        if (this["validityPeriod"]) {
            (_e = outcome.issue).push.apply(_e, this.validityPeriod.doModelValidation().issue);
        }
        if (this["dataExclusivityPeriod"]) {
            (_f = outcome.issue).push.apply(_f, this.dataExclusivityPeriod.doModelValidation().issue);
        }
        if (this["dateOfFirstAuthorization"]) {
            (_g = outcome.issue).push.apply(_g, this.dateOfFirstAuthorization.doModelValidation().issue);
        }
        if (this["internationalBirthDate"]) {
            (_h = outcome.issue).push.apply(_h, this.internationalBirthDate.doModelValidation().issue);
        }
        if (this["legalBasis"]) {
            (_j = outcome.issue).push.apply(_j, this.legalBasis.doModelValidation().issue);
        }
        if (this["jurisdictionalAuthorization"]) {
            this.jurisdictionalAuthorization.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["holder"]) {
            (_k = outcome.issue).push.apply(_k, this.holder.doModelValidation().issue);
        }
        if (this["regulator"]) {
            (_l = outcome.issue).push.apply(_l, this.regulator.doModelValidation().issue);
        }
        if (this["procedure"]) {
            (_m = outcome.issue).push.apply(_m, this.procedure.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductAuthorization._fts_dataType = 'MedicinalProductAuthorization';
    return MedicinalProductAuthorization;
}(DomainResource));

export { MedicinalProductAuthorization, MedicinalProductAuthorizationJurisdictionalAuthorization, MedicinalProductAuthorizationProcedure };
//# sourceMappingURL=MedicinalProductAuthorization.js.map
