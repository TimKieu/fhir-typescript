// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductAuthorization
import * as fhir from '../fhir.js';
/**
 * Authorization in areas within a country.
 */
export class MedicinalProductAuthorizationJurisdictionalAuthorization extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductAuthorizationJurisdictionalAuthorization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['country']) {
            this.country = new fhir.CodeableConcept(source.country);
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['legalStatusOfSupply']) {
            this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply);
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["country"]) {
            issues.push(...this.country.doModelValidation());
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["legalStatusOfSupply"]) {
            issues.push(...this.legalStatusOfSupply.doModelValidation());
        }
        if (this["validityPeriod"]) {
            issues.push(...this.validityPeriod.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductAuthorizationJurisdictionalAuthorization._fts_dataType = 'MedicinalProductAuthorizationJurisdictionalAuthorization';
/**
 * The regulatory procedure for granting or amending a marketing authorization.
 */
export class MedicinalProductAuthorizationProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductAuthorizationProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['date']) {
            this.date = source.date;
        }
        else if (source['datePeriod']) {
            this.date = new fhir.Period(source.datePeriod);
        }
        else if (source['dateDateTime']) {
            this.date = new fhir.FhirDateTime({ value: source.dateDateTime });
        }
        if (source['application']) {
            this.application = source.application.map((x) => new fhir.MedicinalProductAuthorizationProcedure(x));
        }
        else {
            this.application = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicinalProductAuthorization.procedure.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["application"]) {
            this.application.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductAuthorizationProcedure._fts_dataType = 'MedicinalProductAuthorizationProcedure';
/**
 * Internal flag to properly serialize choice-type element MedicinalProductAuthorization.procedure.date[x]
 */
MedicinalProductAuthorizationProcedure._fts_dateIsChoice = true;
/**
 * The regulatory authorization of a medicinal product.
 */
export class MedicinalProductAuthorization extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductAuthorization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductAuthorization';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['country']) {
            this.country = source.country.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.country = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['status']) {
            this.status = new fhir.CodeableConcept(source.status);
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDateTime({ value: source.statusDate });
        }
        if (source['restoreDate']) {
            this.restoreDate = new fhir.FhirDateTime({ value: source.restoreDate });
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['dataExclusivityPeriod']) {
            this.dataExclusivityPeriod = new fhir.Period(source.dataExclusivityPeriod);
        }
        if (source['dateOfFirstAuthorization']) {
            this.dateOfFirstAuthorization = new fhir.FhirDateTime({ value: source.dateOfFirstAuthorization });
        }
        if (source['internationalBirthDate']) {
            this.internationalBirthDate = new fhir.FhirDateTime({ value: source.internationalBirthDate });
        }
        if (source['legalBasis']) {
            this.legalBasis = new fhir.CodeableConcept(source.legalBasis);
        }
        if (source['jurisdictionalAuthorization']) {
            this.jurisdictionalAuthorization = source.jurisdictionalAuthorization.map((x) => new fhir.MedicinalProductAuthorizationJurisdictionalAuthorization(x));
        }
        else {
            this.jurisdictionalAuthorization = [];
        }
        if (source['holder']) {
            this.holder = new fhir.Reference(source.holder);
        }
        if (source['regulator']) {
            this.regulator = new fhir.Reference(source.regulator);
        }
        if (source['procedure']) {
            this.procedure = new fhir.MedicinalProductAuthorizationProcedure(source.procedure);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicinalProductAuthorization" fhir: MedicinalProductAuthorization.resourceType:"MedicinalProductAuthorization"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["country"]) {
            this.country.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusDate"]) {
            issues.push(...this.statusDate.doModelValidation());
        }
        if (this["restoreDate"]) {
            issues.push(...this.restoreDate.doModelValidation());
        }
        if (this["validityPeriod"]) {
            issues.push(...this.validityPeriod.doModelValidation());
        }
        if (this["dataExclusivityPeriod"]) {
            issues.push(...this.dataExclusivityPeriod.doModelValidation());
        }
        if (this["dateOfFirstAuthorization"]) {
            issues.push(...this.dateOfFirstAuthorization.doModelValidation());
        }
        if (this["internationalBirthDate"]) {
            issues.push(...this.internationalBirthDate.doModelValidation());
        }
        if (this["legalBasis"]) {
            issues.push(...this.legalBasis.doModelValidation());
        }
        if (this["jurisdictionalAuthorization"]) {
            this.jurisdictionalAuthorization.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["holder"]) {
            issues.push(...this.holder.doModelValidation());
        }
        if (this["regulator"]) {
            issues.push(...this.regulator.doModelValidation());
        }
        if (this["procedure"]) {
            issues.push(...this.procedure.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductAuthorization._fts_dataType = 'MedicinalProductAuthorization';
//# sourceMappingURL=data:application/json;base64,