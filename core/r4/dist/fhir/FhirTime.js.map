{"version":3,"file":"FhirTime.js","sources":["../../src/fhir/FhirTime.ts"],"sourcesContent":["// Minimum TypeScript Version: 3.7\r\n// FHIR Primitive: time\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n\r\n/**\r\n * A time during the day, with no date specified\r\n */\r\nexport interface FhirTimeArgs extends fhir.FhirStringArgs {\r\n  /**\r\n   * A time during the day, with no date specified\r\n   */\r\n  value?:FhirTime|string|undefined;\r\n}\r\n\r\n/**\r\n * A time during the day, with no date specified\r\n */\r\nexport class FhirTime extends fhir.FhirString {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Time';\r\n  /**\r\n   * Mapping of this datatype to a JSON equivalent\r\n   */\r\n  public static readonly _fts_jsonType:string = 'string';\r\n  // published regex: ([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?\r\n  public static readonly _fts_regex:RegExp = /^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$/\r\n  /**\r\n   * A time value, represented as a JS string\r\n   */\r\n  declare value?:string|null|undefined;\r\n  /**\r\n     * Create a FhirTime\r\n     * @param value A time during the day, with no date specified\r\n     * @param id Unique id for inter-element referencing (uncommon on primitives)\r\n     * @param extension Additional content defined by implementations\r\n     * @param options Options to pass to extension constructors\r\n  */\r\n  constructor(source:Partial<FhirTimeArgs> = {}, options:fhir.FhirConstructorOptions = { } ) {\r\n    super(source, options);\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if ((this.value) && (!FhirTime._fts_regex.test(this.value))) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.InvalidContent,  diagnostics: \"Invalid value in primitive type time\", }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.OperationOutcomeIssue","fhir.FhirString"],"mappings":";;;;;;;;AAAA;AAkBA;;AAEG;AACH,IAAA,QAAA,kBAAA,UAAA,MAAA,EAAA;IAA8B,SAAe,CAAA,QAAA,EAAA,MAAA,CAAA,CAAA;AAe3C;;;;;;AAME;IACF,SAAY,QAAA,CAAA,MAAiC,EAAE,OAAyC,EAAA;AAA5E,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAiC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAyC,GAAA,EAAA,CAAA,EAAA;eACtF,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAAA,IAAA,CAAA;KACvB;AACD;;AAEG;AACa,IAAA,QAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC3D,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,cAAc,EAAG,WAAW,EAAE,sCAAsC,GAAG,CAAC,CAAC,CAAC;AACzL,SAAA;AACD,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAjCD;;AAEG;IACoB,QAAa,CAAA,aAAA,GAAU,MAAM,CAAC;AACrD;;AAEG;IACoB,QAAa,CAAA,aAAA,GAAU,QAAQ,CAAC;;IAEhC,QAAU,CAAA,UAAA,GAAU,4DAA4D,CAAA;IAyBzG,OAAC,QAAA,CAAA;AAAA,CAnCD,CAA8BC,UAAe,CAmC5C;;;;"}