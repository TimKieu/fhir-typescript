// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Dosage
import * as fhir from '../fhir.js';
/**
 * The amount of medication administered.
 */
export class DosageDoseAndRate extends fhir.FhirElement {
    /**
     * Default constructor for DosageDoseAndRate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['dose']) {
            this.dose = source.dose;
        }
        else if (source['doseRange']) {
            this.dose = new fhir.Range(source.doseRange);
        }
        else if (source['doseQuantity']) {
            this.dose = new fhir.Quantity(source.doseQuantity);
        }
        if (source['rate']) {
            this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            this.rate = new fhir.Ratio(source.rateRatio);
        }
        else if (source['rateRange']) {
            this.rate = new fhir.Range(source.rateRange);
        }
        else if (source['rateQuantity']) {
            this.rate = new fhir.Quantity(source.rateQuantity);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DosageDoseAndRate._fts_dataType = 'DosageDoseAndRate';
/**
 * Internal flag to properly serialize choice-type element Dosage.doseAndRate.dose[x]
 */
DosageDoseAndRate._fts_doseIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Dosage.doseAndRate.rate[x]
 */
DosageDoseAndRate._fts_rateIsChoice = true;
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
export class Dosage extends fhir.BackboneElement {
    /**
     * Default constructor for Dosage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirInteger({ value: source.sequence });
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['additionalInstruction']) {
            this.additionalInstruction = source.additionalInstruction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.additionalInstruction = [];
        }
        if (source['patientInstruction']) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction });
        }
        if (source['timing']) {
            this.timing = new fhir.Timing(source.timing);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean']) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean });
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['site']) {
            this.site = new fhir.CodeableConcept(source.site);
        }
        if (source['route']) {
            this.route = new fhir.CodeableConcept(source.route);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['doseAndRate']) {
            this.doseAndRate = source.doseAndRate.map((x) => new fhir.DosageDoseAndRate(x));
        }
        else {
            this.doseAndRate = [];
        }
        if (source['maxDosePerPeriod']) {
            this.maxDosePerPeriod = new fhir.Ratio(source.maxDosePerPeriod);
        }
        if (source['maxDosePerAdministration']) {
            this.maxDosePerAdministration = new fhir.Quantity(source.maxDosePerAdministration);
        }
        if (source['maxDosePerLifetime']) {
            this.maxDosePerLifetime = new fhir.Quantity(source.maxDosePerLifetime);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["additionalInstruction"]) {
            this.additionalInstruction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["patientInstruction"]) {
            issues.push(...this.patientInstruction.doModelValidation());
        }
        if (this["timing"]) {
            issues.push(...this.timing.doModelValidation());
        }
        if (this["site"]) {
            issues.push(...this.site.doModelValidation());
        }
        if (this["route"]) {
            issues.push(...this.route.doModelValidation());
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation());
        }
        if (this["doseAndRate"]) {
            this.doseAndRate.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["maxDosePerPeriod"]) {
            issues.push(...this.maxDosePerPeriod.doModelValidation());
        }
        if (this["maxDosePerAdministration"]) {
            issues.push(...this.maxDosePerAdministration.doModelValidation());
        }
        if (this["maxDosePerLifetime"]) {
            issues.push(...this.maxDosePerLifetime.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Dosage._fts_dataType = 'Dosage';
/**
 * Internal flag to properly serialize choice-type element Dosage.asNeeded[x]
 */
Dosage._fts_asNeededIsChoice = true;
//# sourceMappingURL=data:application/json;base64,