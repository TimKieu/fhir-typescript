/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { FhirElement } from './FhirElement.js';
import { BackboneElement } from './BackboneElement.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Range } from './Range.js';
import { Quantity } from './Quantity.js';
import { Ratio } from './Ratio.js';
import { FhirInteger } from './FhirInteger.js';
import { FhirString } from './FhirString.js';
import { Timing } from './Timing.js';
import { FhirBoolean } from './FhirBoolean.js';

// <auto-generated/>
/**
 * The amount of medication administered.
 */
var DosageDoseAndRate = /** @class */ (function (_super) {
    __extends(DosageDoseAndRate, _super);
    /**
     * Default constructor for DosageDoseAndRate - initializes any required elements to null if a value is not provided.
     */
    function DosageDoseAndRate(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['dose']) {
            _this.dose = source.dose;
        }
        else if (source['doseRange']) {
            _this.dose = new Range(source.doseRange);
        }
        else if (source['doseQuantity']) {
            _this.dose = new Quantity(source.doseQuantity);
        }
        if (source['rate']) {
            _this.rate = source.rate;
        }
        else if (source['rateRatio']) {
            _this.rate = new Ratio(source.rateRatio);
        }
        else if (source['rateRange']) {
            _this.rate = new Range(source.rateRange);
        }
        else if (source['rateQuantity']) {
            _this.rate = new Quantity(source.rateQuantity);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DosageDoseAndRate.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DosageDoseAndRate._fts_dataType = 'DosageDoseAndRate';
    /**
     * Internal flag to properly serialize choice-type element Dosage.doseAndRate.dose[x]
     */
    DosageDoseAndRate._fts_doseIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element Dosage.doseAndRate.rate[x]
     */
    DosageDoseAndRate._fts_rateIsChoice = true;
    return DosageDoseAndRate;
}(FhirElement));
/**
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
var Dosage = /** @class */ (function (_super) {
    __extends(Dosage, _super);
    /**
     * Default constructor for Dosage - initializes any required elements to null if a value is not provided.
     */
    function Dosage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirInteger({ value: source.sequence });
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['additionalInstruction']) {
            _this.additionalInstruction = source.additionalInstruction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.additionalInstruction = [];
        }
        if (source['patientInstruction']) {
            _this.patientInstruction = new FhirString({ value: source.patientInstruction });
        }
        if (source['timing']) {
            _this.timing = new Timing(source.timing);
        }
        if (source['asNeeded']) {
            _this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean']) {
            _this.asNeeded = new FhirBoolean({ value: source.asNeededBoolean });
        }
        else if (source['asNeededCodeableConcept']) {
            _this.asNeeded = new CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['site']) {
            _this.site = new CodeableConcept(source.site);
        }
        if (source['route']) {
            _this.route = new CodeableConcept(source.route);
        }
        if (source['method']) {
            _this.method = new CodeableConcept(source.method);
        }
        if (source['doseAndRate']) {
            _this.doseAndRate = source.doseAndRate.map(function (x) { return new DosageDoseAndRate(x); });
        }
        else {
            _this.doseAndRate = [];
        }
        if (source['maxDosePerPeriod']) {
            _this.maxDosePerPeriod = new Ratio(source.maxDosePerPeriod);
        }
        if (source['maxDosePerAdministration']) {
            _this.maxDosePerAdministration = new Quantity(source.maxDosePerAdministration);
        }
        if (source['maxDosePerLifetime']) {
            _this.maxDosePerLifetime = new Quantity(source.maxDosePerLifetime);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Dosage.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["text"]) {
            (_b = outcome.issue).push.apply(_b, this.text.doModelValidation().issue);
        }
        if (this["additionalInstruction"]) {
            this.additionalInstruction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["patientInstruction"]) {
            (_c = outcome.issue).push.apply(_c, this.patientInstruction.doModelValidation().issue);
        }
        if (this["timing"]) {
            (_d = outcome.issue).push.apply(_d, this.timing.doModelValidation().issue);
        }
        if (this["site"]) {
            (_e = outcome.issue).push.apply(_e, this.site.doModelValidation().issue);
        }
        if (this["route"]) {
            (_f = outcome.issue).push.apply(_f, this.route.doModelValidation().issue);
        }
        if (this["method"]) {
            (_g = outcome.issue).push.apply(_g, this.method.doModelValidation().issue);
        }
        if (this["doseAndRate"]) {
            this.doseAndRate.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["maxDosePerPeriod"]) {
            (_h = outcome.issue).push.apply(_h, this.maxDosePerPeriod.doModelValidation().issue);
        }
        if (this["maxDosePerAdministration"]) {
            (_j = outcome.issue).push.apply(_j, this.maxDosePerAdministration.doModelValidation().issue);
        }
        if (this["maxDosePerLifetime"]) {
            (_k = outcome.issue).push.apply(_k, this.maxDosePerLifetime.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Dosage._fts_dataType = 'Dosage';
    /**
     * Internal flag to properly serialize choice-type element Dosage.asNeeded[x]
     */
    Dosage._fts_asNeededIsChoice = true;
    return Dosage;
}(BackboneElement));

export { Dosage, DosageDoseAndRate };
//# sourceMappingURL=Dosage.js.map
