// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DomainResource
import * as fhir from '../fhir.js';
/**
 * A resource that includes narrative, extensions, and contained resources.
 */
export class DomainResource extends fhir.Resource {
    /**
     * Default constructor for DomainResource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['text']) {
            this.text = new fhir.Narrative(source.text);
        }
        if (source['contained']) {
            this.contained = [];
            source.contained.forEach((x) => {
                var r = fhir.resourceFactory(x);
                if (r) {
                    this.contained.push(r);
                }
            });
        }
        else {
            this.contained = [];
        }
        if (source['extension']) {
            this.extension = source.extension.map((x) => new fhir.Extension(x));
        }
        else {
            this.extension = [];
        }
        if (source['modifierExtension']) {
            this.modifierExtension = source.modifierExtension.map((x) => new fhir.Extension(x));
        }
        else {
            this.modifierExtension = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["contained"]) {
            this.contained.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["extension"]) {
            this.extension.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["modifierExtension"]) {
            this.modifierExtension.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DomainResource._fts_dataType = 'DomainResource';
//# sourceMappingURL=data:application/json;base64,