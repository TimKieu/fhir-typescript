// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ServiceRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { RequestIntentVsValidation } from '../fhirValueSets/RequestIntentVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
/**
 * A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
 */
export class ServiceRequest extends fhir.DomainResource {
    /**
     * Default constructor for ServiceRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ServiceRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        else {
            this.replaces = [];
        }
        if (source['requisition']) {
            this.requisition = new fhir.Identifier(source.requisition);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['_intent']) {
            if (this.intent) {
                this.intent.addExtendedProperties(source._intent);
            }
            else {
                this.intent = new fhir.FhirCode(source._intent);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['_doNotPerform']) {
            if (this.doNotPerform) {
                this.doNotPerform.addExtendedProperties(source._doNotPerform);
            }
            else {
                this.doNotPerform = new fhir.FhirBoolean(source._doNotPerform);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['orderDetail']) {
            this.orderDetail = source.orderDetail.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.orderDetail = [];
        }
        if (source['quantity']) {
            this.quantity = source.quantity;
        }
        else if (source['quantityQuantity']) {
            this.quantity = new fhir.Quantity(source.quantityQuantity);
        }
        else if (source['quantityRatio']) {
            this.quantity = new fhir.Ratio(source.quantityRatio);
        }
        else if (source['quantityRange']) {
            this.quantity = new fhir.Range(source.quantityRange);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        else if (source['occurrenceTiming']) {
            this.occurrence = new fhir.Timing(source.occurrenceTiming);
        }
        if (source['asNeeded']) {
            this.asNeeded = source.asNeeded;
        }
        else if (source['asNeededBoolean']) {
            this.asNeeded = new fhir.FhirBoolean({ value: source.asNeededBoolean });
        }
        else if (source['asNeededCodeableConcept']) {
            this.asNeeded = new fhir.CodeableConcept(source.asNeededCodeableConcept);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['locationCode']) {
            this.locationCode = source.locationCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.locationCode = [];
        }
        if (source['locationReference']) {
            this.locationReference = source.locationReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.locationReference = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        else {
            this.insurance = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['specimen']) {
            this.specimen = source.specimen.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimen = [];
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodySite = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['patientInstruction']) {
            this.patientInstruction = new fhir.FhirString({ value: source.patientInstruction });
        }
        if (source['_patientInstruction']) {
            if (this.patientInstruction) {
                this.patientInstruction.addExtendedProperties(source._patientInstruction);
            }
            else {
                this.patientInstruction = new fhir.FhirString(source._patientInstruction);
            }
        }
        if (source['relevantHistory']) {
            this.relevantHistory = source.relevantHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.relevantHistory = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ServiceRequest';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vOptA('instantiatesCanonical', expression);
        this.vOptA('instantiatesUri', expression);
        this.vOptA('basedOn', expression);
        this.vOptA('replaces', expression);
        this.vOptS('requisition', expression);
        this.vReqSV('status', expression, 'RequestStatus', RequestStatusVsValidation, 'r');
        this.vReqSV('intent', expression, 'RequestIntent', RequestIntentVsValidation, 'r');
        this.vOptA('category', expression);
        this.vOptSV('priority', expression, 'RequestPriority', RequestPriorityVsValidation, 'r');
        this.vOptS('doNotPerform', expression);
        this.vOptS('code', expression);
        this.vOptA('orderDetail', expression);
        this.vOptS('quantity', expression);
        this.vReqS('subject', expression);
        this.vOptS('encounter', expression);
        this.vOptS('occurrence', expression);
        this.vOptS('asNeeded', expression);
        this.vOptS('authoredOn', expression);
        this.vOptS('requester', expression);
        this.vOptS('performerType', expression);
        this.vOptA('performer', expression);
        this.vOptA('locationCode', expression);
        this.vOptA('locationReference', expression);
        this.vOptA('reasonCode', expression);
        this.vOptA('reasonReference', expression);
        this.vOptA('insurance', expression);
        this.vOptA('supportingInfo', expression);
        this.vOptA('specimen', expression);
        this.vOptA('bodySite', expression);
        this.vOptA('note', expression);
        this.vOptS('patientInstruction', expression);
        this.vOptA('relevantHistory', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ServiceRequest._fts_dataType = 'ServiceRequest';
/**
 * Internal flag to properly serialize choice-type element ServiceRequest.quantity[x]
 */
ServiceRequest._fts_quantityIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ServiceRequest.occurrence[x]
 */
ServiceRequest._fts_occurrenceIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ServiceRequest.asNeeded[x]
 */
ServiceRequest._fts_asNeededIsChoice = true;
//# sourceMappingURL=data:application/json;base64,