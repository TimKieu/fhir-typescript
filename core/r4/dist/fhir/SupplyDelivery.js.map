{"version":3,"file":"SupplyDelivery.js","sources":["../../src/fhir/SupplyDelivery.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: SupplyDelivery\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { SupplydeliveryStatusCodings, SupplydeliveryStatusCodingType,} from '../fhirValueSets/SupplydeliveryStatusCodings.js';\r\n// @ts-ignore\r\nimport { SupplydeliveryStatusCodes,  SupplydeliveryStatusCodeType } from '../fhirValueSets/SupplydeliveryStatusCodes.js';\r\n// @ts-ignore\r\nimport { SupplydeliveryTypeCodings, SupplydeliveryTypeCodingType,} from '../fhirValueSets/SupplydeliveryTypeCodings.js';\r\n// @ts-ignore\r\nimport { SupplydeliveryTypeCodes,  SupplydeliveryTypeCodeType } from '../fhirValueSets/SupplydeliveryTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SupplyDeliverySuppliedItem type.\r\n */\r\nexport interface SupplyDeliverySuppliedItemArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The amount of supply that has been dispensed. Includes unit of measure.\r\n   */\r\n  quantity?: fhir.QuantityArgs|undefined;\r\n  /**\r\n   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.\r\n   */\r\n  item?: fhir.CodeableConcept|fhir.Reference|undefined;\r\n  /**\r\n   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.\r\n   */\r\n  itemCodeableConcept?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.\r\n   */\r\n  itemReference?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * The item that is being delivered or has been supplied.\r\n */\r\nexport class SupplyDeliverySuppliedItem extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SupplyDeliverySuppliedItem';\r\n  /**\r\n   * The amount of supply that has been dispensed. Includes unit of measure.\r\n   */\r\n  public quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.\r\n   */\r\n  public item?: (fhir.CodeableConcept|fhir.Reference)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SupplyDelivery.suppliedItem.item[x]\r\n   */\r\n  protected static readonly _fts_itemIsChoice:true = true;\r\n  /**\r\n   * Default constructor for SupplyDeliverySuppliedItem - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SupplyDeliverySuppliedItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }\r\n    if (source['item']) { this.item = source.item; }\r\n    else if (source['itemCodeableConcept']) { this.item = new fhir.CodeableConcept(source.itemCodeableConcept); }\r\n    else if (source['itemReference']) { this.item = new fhir.Reference(source.itemReference); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"quantity\"]) { outcome.issue!.push(...this.quantity.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the SupplyDelivery type.\r\n */\r\nexport interface SupplyDeliveryArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"SupplyDelivery\"|undefined;\r\n  /**\r\n   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * A plan, proposal or order that is fulfilled in whole or in part by this event.\r\n   */\r\n  basedOn?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Not to be used to link an event to an Encounter - use Event.context for that.\r\n   * [The allowed reference resources may be adjusted as appropriate for the event resource].\r\n   */\r\n  partOf?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  status?: SupplydeliveryStatusCodeType|undefined;\r\n  /**\r\n   * A link to a resource representing the person whom the delivered item is for.\r\n   */\r\n  patient?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The item that is being delivered or has been supplied.\r\n   */\r\n  suppliedItem?: fhir.SupplyDeliverySuppliedItemArgs|undefined;\r\n  /**\r\n   * [The list of types may be constrained as appropriate for the type of event].\r\n   */\r\n  occurrence?: fhir.FhirDateTime|fhir.Period|fhir.Timing|undefined;\r\n  /**\r\n   * [The list of types may be constrained as appropriate for the type of event].\r\n   */\r\n  occurrenceDateTime?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * [The list of types may be constrained as appropriate for the type of event].\r\n   */\r\n  occurrencePeriod?: fhir.PeriodArgs|undefined;\r\n  /**\r\n   * [The list of types may be constrained as appropriate for the type of event].\r\n   */\r\n  occurrenceTiming?: fhir.TimingArgs|undefined;\r\n  /**\r\n   * The individual responsible for dispensing the medication, supplier or device.\r\n   */\r\n  supplier?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.\r\n   */\r\n  destination?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Identifies the person who picked up the Supply.\r\n   */\r\n  receiver?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Record of delivery of what is supplied.\r\n */\r\nexport class SupplyDelivery extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SupplyDelivery';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"SupplyDelivery\";\r\n  /**\r\n   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * A plan, proposal or order that is fulfilled in whole or in part by this event.\r\n   */\r\n  public basedOn?: fhir.Reference[];\r\n  /**\r\n   * Not to be used to link an event to an Encounter - use Event.context for that.\r\n   * [The allowed reference resources may be adjusted as appropriate for the event resource].\r\n   */\r\n  public partOf?: fhir.Reference[];\r\n  /**\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  public status?: SupplydeliveryStatusCodeType|undefined;\r\n  /**\r\n   * A link to a resource representing the person whom the delivered item is for.\r\n   */\r\n  public patient?: fhir.Reference|undefined;\r\n  /**\r\n   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The item that is being delivered or has been supplied.\r\n   */\r\n  public suppliedItem?: fhir.SupplyDeliverySuppliedItem|undefined;\r\n  /**\r\n   * [The list of types may be constrained as appropriate for the type of event].\r\n   */\r\n  public occurrence?: (fhir.FhirDateTime|fhir.Period|fhir.Timing)|undefined;\r\n  /**\r\n   * Internal flag to properly serialize choice-type element SupplyDelivery.occurrence[x]\r\n   */\r\n  protected static readonly _fts_occurrenceIsChoice:true = true;\r\n  /**\r\n   * The individual responsible for dispensing the medication, supplier or device.\r\n   */\r\n  public supplier?: fhir.Reference|undefined;\r\n  /**\r\n   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.\r\n   */\r\n  public destination?: fhir.Reference|undefined;\r\n  /**\r\n   * Identifies the person who picked up the Supply.\r\n   */\r\n  public receiver?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for SupplyDelivery - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SupplyDeliveryArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'SupplyDelivery';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['basedOn']) { this.basedOn = source.basedOn.map((x) => new fhir.Reference(x)); }\r\n    else { this.basedOn = []; }\r\n    if (source['partOf']) { this.partOf = source.partOf.map((x) => new fhir.Reference(x)); }\r\n    else { this.partOf = []; }\r\n    if (source['status']) { this.status = source.status; }\r\n    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['suppliedItem']) { this.suppliedItem = new fhir.SupplyDeliverySuppliedItem(source.suppliedItem); }\r\n    if (source['occurrence']) { this.occurrence = source.occurrence; }\r\n    else if (source['occurrenceDateTime']) { this.occurrence = new fhir.FhirDateTime({value: source.occurrenceDateTime}); }\r\n    else if (source['occurrencePeriod']) { this.occurrence = new fhir.Period(source.occurrencePeriod); }\r\n    else if (source['occurrenceTiming']) { this.occurrence = new fhir.Timing(source.occurrenceTiming); }\r\n    if (source['supplier']) { this.supplier = new fhir.Reference(source.supplier); }\r\n    if (source['destination']) { this.destination = new fhir.Reference(source.destination); }\r\n    if (source['receiver']) { this.receiver = source.receiver.map((x) => new fhir.Reference(x)); }\r\n    else { this.receiver = []; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (SupplyDelivery.status)\r\n   */\r\n  public static statusRequiredCoding():SupplydeliveryStatusCodingType {\r\n    return SupplydeliveryStatusCodings;\r\n  }\r\n  /**\r\n   * Required-bound Value Set for type (SupplyDelivery.type)\r\n   */\r\n  public static typeRequiredCoding():SupplydeliveryTypeCodingType {\r\n    return SupplydeliveryTypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"SupplyDelivery\" fhir: SupplyDelivery.resourceType:\"SupplyDelivery\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"basedOn\"]) { this.basedOn.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"partOf\"]) { this.partOf.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"patient\"]) { outcome.issue!.push(...this.patient.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"suppliedItem\"]) { outcome.issue!.push(...this.suppliedItem.doModelValidation().issue!); }\r\n    if (this[\"supplier\"]) { outcome.issue!.push(...this.supplier.doModelValidation().issue!); }\r\n    if (this[\"destination\"]) { outcome.issue!.push(...this.destination.doModelValidation().issue!); }\r\n    if (this[\"receiver\"]) { this.receiver.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Quantity","fhir.CodeableConcept","fhir.Reference","fhir.BackboneElement","fhir.Identifier","fhir.SupplyDeliverySuppliedItem","fhir.FhirDateTime","fhir.Period","fhir.Timing","fhir.OperationOutcomeIssue","fhir.DomainResource"],"mappings":"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"}