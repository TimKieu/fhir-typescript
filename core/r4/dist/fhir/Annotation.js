/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirElement } from './FhirElement.js';
import { Reference } from './Reference.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirMarkdown } from './FhirMarkdown.js';

// <auto-generated/>
/**
 * A  text note which also  contains information about who made the statement and when.
 */
var Annotation = /** @class */ (function (_super) {
    __extends(Annotation, _super);
    /**
     * Default constructor for Annotation - initializes any required elements to null if a value is not provided.
     */
    function Annotation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['author']) {
            _this.author = source.author;
        }
        else if (source['authorReference']) {
            _this.author = new Reference(source.authorReference);
        }
        else if (source['authorString']) {
            _this.author = new FhirString({ value: source.authorString });
        }
        if (source['time']) {
            _this.time = new FhirDateTime({ value: source.time });
        }
        if (source['text']) {
            _this.text = new FhirMarkdown({ value: source.text });
        }
        else {
            _this.text = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Annotation.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["time"]) {
            (_a = outcome.issue).push.apply(_a, this.time.doModelValidation().issue);
        }
        if (!this['text']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property text:fhir.FhirMarkdown fhir: Annotation.text:markdown', }));
        }
        if (this["text"]) {
            (_b = outcome.issue).push.apply(_b, this.text.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Annotation._fts_dataType = 'Annotation';
    /**
     * Internal flag to properly serialize choice-type element Annotation.author[x]
     */
    Annotation._fts_authorIsChoice = true;
    return Annotation;
}(FhirElement));

export { Annotation };
//# sourceMappingURL=Annotation.js.map
