/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { FhirElement } from './FhirElement.js';
import { Coding } from './Coding.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
var CodeableConcept = /** @class */ (function (_super) {
    __extends(CodeableConcept, _super);
    /**
     * Default constructor for CodeableConcept - initializes any required elements to null if a value is not provided.
     */
    function CodeableConcept(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['coding']) {
            _this.coding = source.coding.map(function (x) { return new Coding(x); });
        }
        else {
            _this.coding = [];
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CodeableConcept.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["coding"]) {
            this.coding.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["text"]) {
            (_a = outcome.issue).push.apply(_a, this.text.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CodeableConcept._fts_dataType = 'CodeableConcept';
    return CodeableConcept;
}(FhirElement));

export { CodeableConcept };
//# sourceMappingURL=CodeableConcept.js.map
