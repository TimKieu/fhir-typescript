// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: CodeableConcept
import * as fhir from '../fhir.js';
/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
export class CodeableConcept extends fhir.FhirElement {
    /**
     * Default constructor for CodeableConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['coding']) {
            this.coding = source.coding.map((x) => new fhir.Coding(x));
        }
        else {
            this.coding = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CodeableConcept';
        }
        iss.push(...this.vOA('coding', exp));
        iss.push(...this.vOS('text', exp));
        return iss;
    }
    /**
     * Fluent-style function to add codings
     * @param coding
     * @returns this CodeableConcept, with the additional coding
     */
    addCoding(coding) {
        this.coding.push(new fhir.Coding(coding));
        return this;
    }
    /**
     * Fluent-style function to remove ALL instances of codings with a system and/or code
     * @param system
     * @param code
     * @returns this CodeableConcept, updated without the requesting coding
     */
    removeCoding(system, code) {
        if (this.coding.length === 0) {
            return this;
        }
        const s = (typeof system === 'string') ? system : system.value ?? '';
        const c = (typeof code === 'string') ? code : code.value ?? '';
        let clean = this.coding.filter((coding) => (((s === '') || (coding.system?.value === s)) && ((c === '') || (coding.code?.value === c)))) ?? [];
        this.coding = clean;
        return this;
    }
    /**
     * Find the first coding with a matching system and/or code
     * @param system
     * @param code
     * @returns A matching Coding or undefined.
     */
    findCoding(system, code) {
        if (this.coding.length === 0) {
            return undefined;
        }
        const s = (typeof system === 'string') ? system : system.value ?? '';
        const c = (typeof code === 'string') ? code : code.value ?? '';
        return this.coding.find((coding) => (((s === '') || (coding.system?.value === s)) && ((c === '') || (coding.code?.value === c))));
    }
    /**
     * Find all instances of an extension with a matching URL, optionally recurse into extension.extension.
     * @param url URL to search for
     * @param searchNested If the search should nest into extensions
     * @returns A new array of FHIR Extensions, with just the desired extensions
     */
    filterCodings(system, code) {
        if (this.coding.length === 0) {
            return [];
        }
        const s = (typeof system === 'string') ? system : system.value ?? '';
        const c = (typeof code === 'string') ? code : code.value ?? '';
        return this.coding.filter((coding) => (((s === '') || (coding.system?.value === s)) && ((c === '') || (coding.code?.value === c))));
    }
    /**
     * Test whether this CodeableConcept contains a specific coding.
     * @param system System to search for, empty string will match any system.
     * @param code Code to search for, empty string will match any code.
     * @returns True if this concept contains the specified coding, false if it does not.
     */
    hasCoding(system, code) {
        if (this.coding.length === 0) {
            return false;
        }
        const s = (typeof system === 'string') ? system : system.value ?? '';
        const c = (typeof code === 'string') ? code : code.value ?? '';
        if ((s) && (c)) {
            return (this.coding.find((coding) => (coding.system?.value === s) && (coding.code?.value === c)) !== undefined);
        }
        if (s) {
            return (this.coding.find((coding) => (coding.system?.value === s)) !== undefined);
        }
        if (c) {
            return (this.coding.find((coding) => coding.code?.value === c) !== undefined);
        }
        return false;
    }
    /**
     * Test whether this CodeableConcept contains a specific coding.
     * @param system System to search for, empty string will match any system.
     * @param code Code to search for, empty string will match any code.
     * @returns True if this concept contains the specified coding, false if it does not.
     */
    hasCodingFromObject(codings) {
        if (this.coding.length === 0) {
            return false;
        }
        for (const obj of Object.values(codings)) {
            if (!obj) {
                continue;
            }
            const system = obj['system'] ?? '';
            const code = obj['code'] ?? '';
            if (this.hasCoding(system, code)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Test whether this CodeableConcept contains a specific coding.
     * @param system System to search for, empty string will match any system.
     * @param code Code to search for, empty string will match any code.
     * @returns True if this concept contains the specified coding, false if it does not.
     */
    hasCodingFromValidationObj(vsValidation) {
        if (this.coding.length === 0) {
            return false;
        }
        for (const coding of this.coding) {
            const sc = (coding.system?.value ?? '') + '|' + (coding.code?.value ?? '');
            const c = coding.code?.value ?? '';
            if (vsValidation.find((v) => (v === sc) || (v === c))) {
                return true;
            }
        }
        return false;
    }
    /**
     * Test whether this CodeableConcept contains a specific coding.
     * @param system System to search for, empty string will match any system.
     * @param code Code to search for, empty string will match any code.
     * @returns True if this concept contains the specified coding, false if it does not.
     */
    hasCodingFromValidationHash(vsValidation) {
        if (this.coding.length === 0) {
            return false;
        }
        for (const coding of this.coding) {
            const sc = fhir.FhirBase._hash52_1a_fast((coding.system?.value ?? '') + '|' + (coding.code?.value ?? ''));
            const c = fhir.FhirBase._hash52_1a_fast(coding.code?.value ?? '');
            if (vsValidation.find((v) => (v === sc) || (v === c))) {
                return true;
            }
        }
        return false;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeableConcept._fts_dataType = 'CodeableConcept';
//# sourceMappingURL=data:application/json;base64,