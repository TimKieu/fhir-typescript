// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: CodeableConcept
import * as fhir from '../fhir.js';
/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
export class CodeableConcept extends fhir.FhirElement {
    /**
     * Default constructor for CodeableConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['coding']) {
            this.coding = source.coding.map((x) => new fhir.Coding(x));
        }
        else {
            this.coding = [];
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['_text']) {
            if (this.text) {
                this.text.addExtendedProperties(source._text);
            }
            else {
                this.text = new fhir.FhirString(source._text);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["coding"]) {
            this.coding.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        return issues;
    }
    /**
     * Fluent-style function to add codings
     * @param coding
     * @returns
     */
    addCoding(coding) {
        this.coding.push(new fhir.Coding(coding));
        return this;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CodeableConcept._fts_dataType = 'CodeableConcept';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZWFibGVDb25jZXB0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9Db2RlYWJsZUNvbmNlcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0NBQW9DO0FBRXBDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBb0JuQzs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFnQixTQUFRLElBQUksQ0FBQyxXQUFXO0lBYW5EOztPQUVHO0lBQ0gsWUFBWSxTQUFzQyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUM1RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNoRjtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzlFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25CLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxLQUFNLENBQUMsQ0FBQzthQUFFO2lCQUM3RDtnQkFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBcUMsQ0FBQyxDQUFDO2FBQUU7U0FDeEY7SUFDSCxDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUI7UUFDL0IsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUM5RixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3BFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDRDs7OztPQUlHO0lBQ0ssU0FBUyxDQUFDLE1BQXNCO1FBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7QUExQ0Q7O0dBRUc7QUFDNkIsNkJBQWEsR0FBVSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBDb21wbGV4VHlwZTogQ29kZWFibGVDb25jZXB0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENvZGVhYmxlQ29uY2VwdCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb2RlYWJsZUNvbmNlcHRBcmdzIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIENvZGVzIG1heSBiZSBkZWZpbmVkIHZlcnkgY2FzdWFsbHkgaW4gZW51bWVyYXRpb25zLCBvciBjb2RlIGxpc3RzLCB1cCB0byB2ZXJ5IGZvcm1hbCBkZWZpbml0aW9ucyBzdWNoIGFzIFNOT01FRCBDVCAtIHNlZSB0aGUgSEw3IHYzIENvcmUgUHJpbmNpcGxlcyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4gIE9yZGVyaW5nIG9mIGNvZGluZ3MgaXMgdW5kZWZpbmVkIGFuZCBTSEFMTCBOT1QgYmUgdXNlZCB0byBpbmZlciBtZWFuaW5nLiBHZW5lcmFsbHksIGF0IG1vc3Qgb25seSBvbmUgb2YgdGhlIGNvZGluZyB2YWx1ZXMgd2lsbCBiZSBsYWJlbGVkIGFzIFVzZXJTZWxlY3RlZCA9IHRydWUuXHJcbiAgICovXHJcbiAgY29kaW5nPzogZmhpci5Db2RpbmdBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFZlcnkgb2Z0ZW4gdGhlIHRleHQgaXMgdGhlIHNhbWUgYXMgYSBkaXNwbGF5TmFtZSBvZiBvbmUgb2YgdGhlIGNvZGluZ3MuXHJcbiAgICovXHJcbiAgdGV4dD86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb2RlYWJsZUNvbmNlcHQudGV4dFxyXG4gICAqL1xyXG4gIF90ZXh0PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY29uY2VwdCB0aGF0IG1heSBiZSBkZWZpbmVkIGJ5IGEgZm9ybWFsIHJlZmVyZW5jZSB0byBhIHRlcm1pbm9sb2d5IG9yIG9udG9sb2d5IG9yIG1heSBiZSBwcm92aWRlZCBieSB0ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvZGVhYmxlQ29uY2VwdCBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ29kZWFibGVDb25jZXB0JztcclxuICAvKipcclxuICAgKiBDb2RlcyBtYXkgYmUgZGVmaW5lZCB2ZXJ5IGNhc3VhbGx5IGluIGVudW1lcmF0aW9ucywgb3IgY29kZSBsaXN0cywgdXAgdG8gdmVyeSBmb3JtYWwgZGVmaW5pdGlvbnMgc3VjaCBhcyBTTk9NRUQgQ1QgLSBzZWUgdGhlIEhMNyB2MyBDb3JlIFByaW5jaXBsZXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uICBPcmRlcmluZyBvZiBjb2RpbmdzIGlzIHVuZGVmaW5lZCBhbmQgU0hBTEwgTk9UIGJlIHVzZWQgdG8gaW5mZXIgbWVhbmluZy4gR2VuZXJhbGx5LCBhdCBtb3N0IG9ubHkgb25lIG9mIHRoZSBjb2RpbmcgdmFsdWVzIHdpbGwgYmUgbGFiZWxlZCBhcyBVc2VyU2VsZWN0ZWQgPSB0cnVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2Rpbmc6IGZoaXIuQ29kaW5nW107XHJcbiAgLyoqXHJcbiAgICogVmVyeSBvZnRlbiB0aGUgdGV4dCBpcyB0aGUgc2FtZSBhcyBhIGRpc3BsYXlOYW1lIG9mIG9uZSBvZiB0aGUgY29kaW5ncy5cclxuICAgKi9cclxuICBwdWJsaWMgdGV4dD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgQ29kZWFibGVDb25jZXB0IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8Q29kZWFibGVDb25jZXB0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2NvZGluZyddKSB7IHRoaXMuY29kaW5nID0gc291cmNlLmNvZGluZy5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGluZyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvZGluZyA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd0ZXh0J10pIHsgdGhpcy50ZXh0ID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS50ZXh0fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ190ZXh0J10pIHtcclxuICAgICAgaWYgKHRoaXMudGV4dCkgeyB0aGlzLnRleHQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fdGV4dCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnRleHQgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fdGV4dCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKHRoaXNbXCJjb2RpbmdcIl0pIHsgdGhpcy5jb2RpbmcuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInRleHRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50ZXh0LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGbHVlbnQtc3R5bGUgZnVuY3Rpb24gdG8gYWRkIGNvZGluZ3NcclxuICAgKiBAcGFyYW0gY29kaW5nIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gICBwdWJsaWMgYWRkQ29kaW5nKGNvZGluZzpmaGlyLkNvZGluZ0FyZ3MpOkNvZGVhYmxlQ29uY2VwdCB7XHJcbiAgICB0aGlzLmNvZGluZy5wdXNoKG5ldyBmaGlyLkNvZGluZyhjb2RpbmcpKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxufVxyXG4iXX0=