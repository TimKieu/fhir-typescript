/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { DocumentReferenceStatusCodings } from '../fhirValueSets/DocumentReferenceStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirUri } from './FhirUri.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
var DocumentManifestRelated = /** @class */ (function (_super) {
    __extends(DocumentManifestRelated, _super);
    /**
     * Default constructor for DocumentManifestRelated - initializes any required elements to null if a value is not provided.
     */
    function DocumentManifestRelated(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['ref']) {
            _this.ref = new Reference(source.ref);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DocumentManifestRelated.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["ref"]) {
            (_b = outcome.issue).push.apply(_b, this.ref.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DocumentManifestRelated._fts_dataType = 'DocumentManifestRelated';
    return DocumentManifestRelated;
}(BackboneElement));
/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
var DocumentManifest = /** @class */ (function (_super) {
    __extends(DocumentManifest, _super);
    /**
     * Default constructor for DocumentManifest - initializes any required elements to null if a value is not provided.
     */
    function DocumentManifest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'DocumentManifest';
        if (source['masterIdentifier']) {
            _this.masterIdentifier = new Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['created']) {
            _this.created = new FhirDateTime({ value: source.created });
        }
        if (source['author']) {
            _this.author = source.author.map(function (x) { return new Reference(x); });
        }
        else {
            _this.author = [];
        }
        if (source['recipient']) {
            _this.recipient = source.recipient.map(function (x) { return new Reference(x); });
        }
        else {
            _this.recipient = [];
        }
        if (source['source']) {
            _this.source = new FhirUri({ value: source.source });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['content']) {
            _this.content = source.content.map(function (x) { return new Reference(x); });
        }
        else {
            _this.content = [];
        }
        if (source['related']) {
            _this.related = source.related.map(function (x) { return new DocumentManifestRelated(x); });
        }
        else {
            _this.related = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (DocumentManifest.status)
     */
    DocumentManifest.statusRequiredCoding = function () {
        return DocumentReferenceStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DocumentManifest.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"DocumentManifest" fhir: DocumentManifest.resourceType:"DocumentManifest"', }));
        }
        if (this["masterIdentifier"]) {
            (_a = outcome.issue).push.apply(_a, this.masterIdentifier.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:DocumentReferenceStatusCodeType fhir: DocumentManifest.status:code', }));
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["created"]) {
            (_d = outcome.issue).push.apply(_d, this.created.doModelValidation().issue);
        }
        if (this["author"]) {
            this.author.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["recipient"]) {
            this.recipient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["source"]) {
            (_e = outcome.issue).push.apply(_e, this.source.doModelValidation().issue);
        }
        if (this["description"]) {
            (_f = outcome.issue).push.apply(_f, this.description.doModelValidation().issue);
        }
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content:fhir.Reference[] fhir: DocumentManifest.content:Reference', }));
        }
        else if (!Array.isArray(this.content)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property content:fhir.Reference[] fhir: DocumentManifest.content:Reference', }));
        }
        else if (this.content.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content:fhir.Reference[] fhir: DocumentManifest.content:Reference', }));
        }
        if (this["content"]) {
            this.content.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["related"]) {
            this.related.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DocumentManifest._fts_dataType = 'DocumentManifest';
    return DocumentManifest;
}(DomainResource));

export { DocumentManifest, DocumentManifestRelated };
//# sourceMappingURL=DocumentManifest.js.map
