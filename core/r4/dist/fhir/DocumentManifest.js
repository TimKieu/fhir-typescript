// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DocumentManifest
import * as fhir from '../fhir.js';
// @ts-ignore
import { DocumentReferenceStatusCodings, } from '../fhirValueSets/DocumentReferenceStatusCodings.js';
/**
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
export class DocumentManifestRelated extends fhir.BackboneElement {
    /**
     * Default constructor for DocumentManifestRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['ref']) {
            this.ref = new fhir.Reference(source.ref);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["ref"]) {
            issues.push(...this.ref.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentManifestRelated._fts_dataType = 'DocumentManifestRelated';
/**
 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
 */
export class DocumentManifest extends fhir.DomainResource {
    /**
     * Default constructor for DocumentManifest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DocumentManifest';
        if (source['masterIdentifier']) {
            this.masterIdentifier = new fhir.Identifier(source.masterIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.Reference(x));
        }
        else {
            this.author = [];
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        else {
            this.recipient = [];
        }
        if (source['source']) {
            this.source = new fhir.FhirUri({ value: source.source });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['content']) {
            this.content = source.content.map((x) => new fhir.Reference(x));
        }
        else {
            this.content = [];
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.DocumentManifestRelated(x));
        }
        else {
            this.related = [];
        }
    }
    /**
     * Required-bound Value Set for status (DocumentManifest.status)
     */
    static statusRequiredCoding() {
        return DocumentReferenceStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DocumentManifest" fhir: DocumentManifest.resourceType:"DocumentManifest"', });
        }
        if (this["masterIdentifier"]) {
            issues.push(...this.masterIdentifier.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:DocumentReferenceStatusCodeType fhir: DocumentManifest.status:code', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["created"]) {
            issues.push(...this.created.doModelValidation());
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["recipient"]) {
            this.recipient.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (!this['content']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content:fhir.Reference[] fhir: DocumentManifest.content:Reference', });
        }
        else if (!Array.isArray(this.content)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property content:fhir.Reference[] fhir: DocumentManifest.content:Reference', });
        }
        else if (this.content.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content:fhir.Reference[] fhir: DocumentManifest.content:Reference', });
        }
        if (this["content"]) {
            this.content.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["related"]) {
            this.related.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DocumentManifest._fts_dataType = 'DocumentManifest';
//# sourceMappingURL=data:application/json;base64,