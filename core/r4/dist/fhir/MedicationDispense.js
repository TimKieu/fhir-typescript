// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationDispense
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationdispenseStatusCodes } from '../fhirValueSets/MedicationdispenseStatusCodes.js';
// @ts-ignore
import { MedicationdispenseCategoryCodings, } from '../fhirValueSets/MedicationdispenseCategoryCodings.js';
/**
 * Indicates who or what performed the event.
 */
export class MedicationDispensePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispensePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicationDispense.performer';
        }
        if (this["function"]) {
            issues.push(...this.function.doModelValidation(expression + '.function'));
        }
        if (!this['actor']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actor fhir: MedicationDispense.performer.actor:Reference', expression: [expression] });
        }
        if (this["actor"]) {
            issues.push(...this.actor.doModelValidation(expression + '.actor'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispensePerformer._fts_dataType = 'MedicationDispensePerformer';
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export class MedicationDispenseSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispenseSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['wasSubstituted']) {
            this.wasSubstituted = new fhir.FhirBoolean({ value: source.wasSubstituted });
        }
        else {
            this.wasSubstituted = null;
        }
        if (source['_wasSubstituted']) {
            if (this.wasSubstituted) {
                this.wasSubstituted.addExtendedProperties(source._wasSubstituted);
            }
            else {
                this.wasSubstituted = new fhir.FhirBoolean(source._wasSubstituted);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['responsibleParty']) {
            this.responsibleParty = source.responsibleParty.map((x) => new fhir.Reference(x));
        }
        else {
            this.responsibleParty = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicationDispense.substitution';
        }
        if (!this['wasSubstituted']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property wasSubstituted fhir: MedicationDispense.substitution.wasSubstituted:boolean', expression: [expression] });
        }
        if (this["wasSubstituted"]) {
            issues.push(...this.wasSubstituted.doModelValidation(expression + '.wasSubstituted'));
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["reason"]) {
            this.reason.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reason[${i}]`)); });
        }
        if (this["responsibleParty"]) {
            this.responsibleParty.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.responsibleParty[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispenseSubstitution._fts_dataType = 'MedicationDispenseSubstitution';
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export class MedicationDispense extends fhir.DomainResource {
    /**
     * Default constructor for MedicationDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationDispense';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason;
        }
        else if (source['statusReasonCodeableConcept']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReasonCodeableConcept);
        }
        else if (source['statusReasonReference']) {
            this.statusReason = new fhir.Reference(source.statusReasonReference);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.MedicationDispensePerformer(x));
        }
        else {
            this.performer = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['authorizingPrescription']) {
            this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhir.Reference(x));
        }
        else {
            this.authorizingPrescription = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['daysSupply']) {
            this.daysSupply = new fhir.Quantity(source.daysSupply);
        }
        if (source['whenPrepared']) {
            this.whenPrepared = new fhir.FhirDateTime({ value: source.whenPrepared });
        }
        if (source['_whenPrepared']) {
            if (this.whenPrepared) {
                this.whenPrepared.addExtendedProperties(source._whenPrepared);
            }
            else {
                this.whenPrepared = new fhir.FhirDateTime(source._whenPrepared);
            }
        }
        if (source['whenHandedOver']) {
            this.whenHandedOver = new fhir.FhirDateTime({ value: source.whenHandedOver });
        }
        if (source['_whenHandedOver']) {
            if (this.whenHandedOver) {
                this.whenHandedOver.addExtendedProperties(source._whenHandedOver);
            }
            else {
                this.whenHandedOver = new fhir.FhirDateTime(source._whenHandedOver);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x));
        }
        else {
            this.receiver = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosageInstruction = [];
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationDispenseSubstitution(source.substitution);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x));
        }
        else {
            this.detectedIssue = [];
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.eventHistory = [];
        }
    }
    /**
     * Required-bound Value Set for status (MedicationDispense.status)
     */
    static get statusRequiredCodes() {
        return MedicationdispenseStatusCodes;
    }
    /**
     * Preferred-bound Value Set for category (MedicationDispense.category)
     */
    static get categoryPreferredCodings() {
        return MedicationdispenseCategoryCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicationDispense';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: MedicationDispense.resourceType:"MedicationDispense"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.partOf[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: MedicationDispense.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(MedicationdispenseStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (MedicationDispense.status) of type code is missing code for Required binding to: MedicationdispenseStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation(expression + '.category'));
        }
        if (!this['medication']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property medication fhir: MedicationDispense.medication[x]:', expression: [expression] });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation(expression + '.subject'));
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation(expression + '.context'));
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.supportingInformation[${i}]`)); });
        }
        if (this["performer"]) {
            this.performer.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.performer[${i}]`)); });
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation(expression + '.location'));
        }
        if (this["authorizingPrescription"]) {
            this.authorizingPrescription.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.authorizingPrescription[${i}]`)); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation(expression + '.quantity'));
        }
        if (this["daysSupply"]) {
            issues.push(...this.daysSupply.doModelValidation(expression + '.daysSupply'));
        }
        if (this["whenPrepared"]) {
            issues.push(...this.whenPrepared.doModelValidation(expression + '.whenPrepared'));
        }
        if (this["whenHandedOver"]) {
            issues.push(...this.whenHandedOver.doModelValidation(expression + '.whenHandedOver'));
        }
        if (this["destination"]) {
            issues.push(...this.destination.doModelValidation(expression + '.destination'));
        }
        if (this["receiver"]) {
            this.receiver.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.receiver[${i}]`)); });
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["dosageInstruction"]) {
            this.dosageInstruction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.dosageInstruction[${i}]`)); });
        }
        if (this["substitution"]) {
            issues.push(...this.substitution.doModelValidation(expression + '.substitution'));
        }
        if (this["detectedIssue"]) {
            this.detectedIssue.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.detectedIssue[${i}]`)); });
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.eventHistory[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispense._fts_dataType = 'MedicationDispense';
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.statusReason[x]
 */
MedicationDispense._fts_statusReasonIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.medication[x]
 */
MedicationDispense._fts_medicationIsChoice = true;
//# sourceMappingURL=data:application/json;base64,