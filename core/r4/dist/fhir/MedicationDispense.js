// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationDispense
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationdispenseStatusVsValidation } from '../fhirValueSets/MedicationdispenseStatusVsValidation.js';
/**
 * Indicates who or what performed the event.
 */
export class MedicationDispensePerformer extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispensePerformer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['function']) {
            this.function = new fhir.CodeableConcept(source.function, options);
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor, options);
        }
        else {
            this.actor = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense.performer';
        }
        iss.push(...this.vOS('function', exp));
        iss.push(...this.vRS('actor', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispensePerformer._fts_dataType = 'MedicationDispensePerformer';
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export class MedicationDispenseSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationDispenseSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['wasSubstituted'] !== undefined) {
            this.wasSubstituted = new fhir.FhirBoolean({ value: source.wasSubstituted }, options);
        }
        else {
            this.wasSubstituted = null;
        }
        if (source['_wasSubstituted']) {
            if (this.wasSubstituted) {
                this.wasSubstituted.addExtendedProperties(source._wasSubstituted);
            }
            else {
                this.wasSubstituted = new fhir.FhirBoolean(source._wasSubstituted, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reason = [];
        }
        if (source['responsibleParty']) {
            this.responsibleParty = source.responsibleParty.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.responsibleParty = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense.substitution';
        }
        iss.push(...this.vRS('wasSubstituted', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('reason', exp));
        iss.push(...this.vOA('responsibleParty', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispenseSubstitution._fts_dataType = 'MedicationDispenseSubstitution';
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export class MedicationDispense extends fhir.DomainResource {
    /**
     * Default constructor for MedicationDispense - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationDispense';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason;
        }
        else if (source['statusReasonCodeableConcept']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReasonCodeableConcept, options);
        }
        else if (source['statusReasonReference']) {
            this.statusReason = new fhir.Reference(source.statusReasonReference, options);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category, options);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept, options);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference, options);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context, options);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.MedicationDispensePerformer(x, options));
        }
        else {
            this.performer = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location, options);
        }
        if (source['authorizingPrescription']) {
            this.authorizingPrescription = source.authorizingPrescription.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.authorizingPrescription = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        if (source['daysSupply']) {
            this.daysSupply = new fhir.Quantity(source.daysSupply, options);
        }
        if (source['whenPrepared'] !== undefined) {
            this.whenPrepared = new fhir.FhirDateTime({ value: source.whenPrepared }, options);
        }
        if (source['_whenPrepared']) {
            if (this.whenPrepared) {
                this.whenPrepared.addExtendedProperties(source._whenPrepared);
            }
            else {
                this.whenPrepared = new fhir.FhirDateTime(source._whenPrepared, options);
            }
        }
        if (source['whenHandedOver'] !== undefined) {
            this.whenHandedOver = new fhir.FhirDateTime({ value: source.whenHandedOver }, options);
        }
        if (source['_whenHandedOver']) {
            if (this.whenHandedOver) {
                this.whenHandedOver.addExtendedProperties(source._whenHandedOver);
            }
            else {
                this.whenHandedOver = new fhir.FhirDateTime(source._whenHandedOver, options);
            }
        }
        if (source['destination']) {
            this.destination = new fhir.Reference(source.destination, options);
        }
        if (source['receiver']) {
            this.receiver = source.receiver.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.receiver = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x, options));
        }
        else {
            this.dosageInstruction = [];
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationDispenseSubstitution(source.substitution, options);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.detectedIssue = [];
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.eventHistory = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicationDispense';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'MedicationdispenseStatus', MedicationdispenseStatusVsValidation, 'r'));
        iss.push(...this.vOS('statusReason', exp));
        iss.push(...this.vOS('category', exp));
        iss.push(...this.vRS('medication', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('context', exp));
        iss.push(...this.vOA('supportingInformation', exp));
        iss.push(...this.vOA('performer', exp));
        iss.push(...this.vOS('location', exp));
        iss.push(...this.vOA('authorizingPrescription', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOS('daysSupply', exp));
        iss.push(...this.vOS('whenPrepared', exp));
        iss.push(...this.vOS('whenHandedOver', exp));
        iss.push(...this.vOS('destination', exp));
        iss.push(...this.vOA('receiver', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('dosageInstruction', exp));
        iss.push(...this.vOS('substitution', exp));
        iss.push(...this.vOA('detectedIssue', exp));
        iss.push(...this.vOA('eventHistory', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationDispense._fts_dataType = 'MedicationDispense';
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.statusReason[x]
 */
MedicationDispense._fts_statusReasonIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationDispense.medication[x]
 */
MedicationDispense._fts_medicationIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNhdGlvbkRpc3BlbnNlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9NZWRpY2F0aW9uRGlzcGVuc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0NBQW9DO0FBRXBDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBZ0JuQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sMERBQTBELENBQUM7QUF1QmhIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUE0QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBYW5FOztPQUVHO0lBQ0gsWUFBWSxTQUFrRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN4RyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUFFO1FBQy9GLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztTQUFFO2FBQzNFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FBRTtJQUM3QixDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxNQUFhLEVBQUU7UUFDL0MsSUFBSSxHQUFHLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2RCxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQUU7WUFBRSxHQUFHLEdBQUcsOEJBQThCLENBQUE7U0FBRTtRQUN4RCxHQUFHLENB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LENBQUMsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkQsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0MsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOztBQTNNRDs7R0FFRztBQUM2QixnQ0FBYSxHQUFVLG9CQUFvQixDQUFDO0FBcUI1RTs7R0FFRztBQUN1Qiw0Q0FBeUIsR0FBUSxJQUFJLENBQUM7QUFTaEU7O0dBRUc7QUFDdUIsMENBQXVCLEdBQVEsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBNZWRpY2F0aW9uRGlzcGVuc2VcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE1lZGljYXRpb25kaXNwZW5zZVBlcmZvcm1lckZ1bmN0aW9uQ29kZXMsICBNZWRpY2F0aW9uZGlzcGVuc2VQZXJmb3JtZXJGdW5jdGlvbkNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9NZWRpY2F0aW9uZGlzcGVuc2VQZXJmb3JtZXJGdW5jdGlvbkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZWRpY2F0aW9uZGlzcGVuc2VQZXJmb3JtZXJGdW5jdGlvblZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmRpc3BlbnNlUGVyZm9ybWVyRnVuY3Rpb25Wc1ZhbGlkYXRpb24uanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFYzQWN0U3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25Db2RlcywgIFYzQWN0U3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25Db2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjNBY3RTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvbkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWM0FjdFN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9WM0FjdFN1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWM1N1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uUmVhc29uQ29kZXMsICBWM1N1YnN0YW5jZUFkbWluU3Vic3RpdHV0aW9uUmVhc29uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1YzU3Vic3RhbmNlQWRtaW5TdWJzdGl0dXRpb25SZWFzb25Db2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvblZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjNTdWJzdGFuY2VBZG1pblN1YnN0aXR1dGlvblJlYXNvblZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZXMsICBNZWRpY2F0aW9uZGlzcGVuc2VTdGF0dXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE1lZGljYXRpb25kaXNwZW5zZVN0YXR1c1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBNZWRpY2F0aW9uZGlzcGVuc2VDYXRlZ29yeUNvZGVzLCAgTWVkaWNhdGlvbmRpc3BlbnNlQ2F0ZWdvcnlDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTWVkaWNhdGlvbmRpc3BlbnNlQ2F0ZWdvcnlDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTWVkaWNhdGlvbmRpc3BlbnNlQ2F0ZWdvcnlWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL01lZGljYXRpb25kaXNwZW5zZUNhdGVnb3J5VnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBWM0FjdFBoYXJtYWN5U3VwcGx5VHlwZUNvZGVzLCAgVjNBY3RQaGFybWFjeVN1cHBseVR5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjNBY3RQaGFybWFjeVN1cHBseVR5cGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjNBY3RQaGFybWFjeVN1cHBseVR5cGVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1YzQWN0UGhhcm1hY3lTdXBwbHlUeXBlVnNWYWxpZGF0aW9uLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25EaXNwZW5zZVBlcmZvcm1lciB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uRGlzcGVuc2VQZXJmb3JtZXJBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBEaXN0aW5ndWlzaGVzIHRoZSB0eXBlIG9mIHBlcmZvcm1lciBpbiB0aGUgZGlzcGVuc2UuICBGb3IgZXhhbXBsZSwgZGF0ZSBlbnRlcmVyLCBwYWNrYWdlciwgZmluYWwgY2hlY2tlci5cclxuICAgKi9cclxuICBmdW5jdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRldmljZSwgcHJhY3RpdGlvbmVyLCBldGMuIHdobyBwZXJmb3JtZWQgdGhlIGFjdGlvbi4gIEl0IHNob3VsZCBiZSBhc3N1bWVkIHRoYXQgdGhlIGFjdG9yIGlzIHRoZSBkaXNwZW5zZXIgb2YgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgYWN0b3I6IGZoaXIuUmVmZXJlbmNlQXJnc3xudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHdobyBvciB3aGF0IHBlcmZvcm1lZCB0aGUgZXZlbnQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaWNhdGlvbkRpc3BlbnNlUGVyZm9ybWVyIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNhdGlvbkRpc3BlbnNlUGVyZm9ybWVyJztcclxuICAvKipcclxuICAgKiBEaXN0aW5ndWlzaGVzIHRoZSB0eXBlIG9mIHBlcmZvcm1lciBpbiB0aGUgZGlzcGVuc2UuICBGb3IgZXhhbXBsZSwgZGF0ZSBlbnRlcmVyLCBwYWNrYWdlciwgZmluYWwgY2hlY2tlci5cclxuICAgKi9cclxuICBwdWJsaWMgZnVuY3Rpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRldmljZSwgcHJhY3RpdGlvbmVyLCBldGMuIHdobyBwZXJmb3JtZWQgdGhlIGFjdGlvbi4gIEl0IHNob3VsZCBiZSBhc3N1bWVkIHRoYXQgdGhlIGFjdG9yIGlzIHRoZSBkaXNwZW5zZXIgb2YgdGhlIG1lZGljYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGFjdG9yOiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljYXRpb25EaXNwZW5zZVBlcmZvcm1lciAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljYXRpb25EaXNwZW5zZVBlcmZvcm1lckFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydmdW5jdGlvbiddKSB7IHRoaXMuZnVuY3Rpb24gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmZ1bmN0aW9uLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWN0b3InXSkgeyB0aGlzLmFjdG9yID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5hY3Rvciwgb3B0aW9ucyk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFjdG9yID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ01lZGljYXRpb25EaXNwZW5zZS5wZXJmb3JtZXInIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdmdW5jdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygnYWN0b3InLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE1lZGljYXRpb25EaXNwZW5zZVN1YnN0aXR1dGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpY2F0aW9uRGlzcGVuc2VTdWJzdGl0dXRpb25BcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUcnVlIGlmIHRoZSBkaXNwZW5zZXIgZGlzcGVuc2VkIGEgZGlmZmVyZW50IGRydWcgb3IgcHJvZHVjdCBmcm9tIHdoYXQgd2FzIHByZXNjcmliZWQuXHJcbiAgICovXHJcbiAgd2FzU3Vic3RpdHV0ZWQ6IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljYXRpb25EaXNwZW5zZS5zdWJzdGl0dXRpb24ud2FzU3Vic3RpdHV0ZWRcclxuICAgKi9cclxuICBfd2FzU3Vic3RpdHV0ZWQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgY29kZSBzaWduaWZ5aW5nIHdoZXRoZXIgYSBkaWZmZXJlbnQgZHJ1ZyB3YXMgZGlzcGVuc2VkIGZyb20gd2hhdCB3YXMgcHJlc2NyaWJlZC5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIHJlYXNvbiBmb3IgdGhlIHN1YnN0aXR1dGlvbiAob3IgbGFjayBvZiBzdWJzdGl0dXRpb24pIGZyb20gd2hhdCB3YXMgcHJlc2NyaWJlZC5cclxuICAgKi9cclxuICByZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcnNvbiBvciBvcmdhbml6YXRpb24gdGhhdCBoYXMgcHJpbWFyeSByZXNwb25zaWJpbGl0eSBmb3IgdGhlIHN1YnN0aXR1dGlvbi5cclxuICAgKi9cclxuICByZXNwb25zaWJsZVBhcnR5PzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHN1YnN0aXR1dGlvbiB3YXMgbWFkZSBhcyBwYXJ0IG9mIHRoZSBkaXNwZW5zZS4gIEluIHNvbWUgY2FzZXMsIHN1YnN0aXR1dGlvbiB3aWxsIGJlIGV4cGVjdGVkIGJ1dCBkb2VzIG5vdCBoYXBwZW4sIGluIG90aGVyIGNhc2VzIHN1YnN0aXR1dGlvbiBpcyBub3QgZXhwZWN0ZWQgYnV0IGRvZXMgaGFwcGVuLiAgVGhpcyBibG9jayBleHBsYWlucyB3aGF0IHN1YnN0aXR1dGlvbiBkaWQgb3IgZGlkIG5vdCBoYXBwZW4gYW5kIHdoeS4gIElmIG5vdGhpbmcgaXMgc3BlY2lmaWVkLCBzdWJzdGl0dXRpb24gd2FzIG5vdCBkb25lLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljYXRpb25EaXNwZW5zZVN1YnN0aXR1dGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25EaXNwZW5zZVN1YnN0aXR1dGlvbic7XHJcbiAgLyoqXHJcbiAgICogVHJ1ZSBpZiB0aGUgZGlzcGVuc2VyIGRpc3BlbnNlZCBhIGRpZmZlcmVudCBkcnVnIG9yIHByb2R1Y3QgZnJvbSB3aGF0IHdhcyBwcmVzY3JpYmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB3YXNTdWJzdGl0dXRlZDogZmhpci5GaGlyQm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEEgY29kZSBzaWduaWZ5aW5nIHdoZXRoZXIgYSBkaWZmZXJlbnQgZHJ1ZyB3YXMgZGlzcGVuc2VkIGZyb20gd2hhdCB3YXMgcHJlc2NyaWJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIHJlYXNvbiBmb3IgdGhlIHN1YnN0aXR1dGlvbiAob3IgbGFjayBvZiBzdWJzdGl0dXRpb24pIGZyb20gd2hhdCB3YXMgcHJlc2NyaWJlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwZXJzb24gb3Igb3JnYW5pemF0aW9uIHRoYXQgaGFzIHByaW1hcnkgcmVzcG9uc2liaWxpdHkgZm9yIHRoZSBzdWJzdGl0dXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHJlc3BvbnNpYmxlUGFydHk6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgTWVkaWNhdGlvbkRpc3BlbnNlU3Vic3RpdHV0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNhdGlvbkRpc3BlbnNlU3Vic3RpdHV0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3dhc1N1YnN0aXR1dGVkJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLndhc1N1YnN0aXR1dGVkID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2Uud2FzU3Vic3RpdHV0ZWR9LCBvcHRpb25zKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMud2FzU3Vic3RpdHV0ZWQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfd2FzU3Vic3RpdHV0ZWQnXSkge1xyXG4gICAgICBpZiAodGhpcy53YXNTdWJzdGl0dXRlZCkgeyB0aGlzLndhc1N1YnN0aXR1dGVkLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3dhc1N1YnN0aXR1dGVkISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMud2FzU3Vic3RpdHV0ZWQgPSBuZXcgZmhpci5GaGlyQm9vbGVhbihzb3VyY2UuX3dhc1N1YnN0aXR1dGVkIGFzIFBhcnRpYWw8Zmhpci5GaGlyQm9vbGVhbkFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlYXNvbiddKSB7IHRoaXMucmVhc29uID0gc291cmNlLnJlYXNvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlYXNvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydyZXNwb25zaWJsZVBhcnR5J10pIHsgdGhpcy5yZXNwb25zaWJsZVBhcnR5ID0gc291cmNlLnJlc3BvbnNpYmxlUGFydHkubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZXNwb25zaWJsZVBhcnR5ID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdNZWRpY2F0aW9uRGlzcGVuc2Uuc3Vic3RpdHV0aW9uJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygnd2FzU3Vic3RpdHV0ZWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3R5cGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3JlYXNvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncmVzcG9uc2libGVQYXJ0eScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNhdGlvbkRpc3BlbnNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGljYXRpb25EaXNwZW5zZUFyZ3MgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlQXJncyB7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIk1lZGljYXRpb25EaXNwZW5zZVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGlzIGEgYnVzaW5lc3MgaWRlbnRpZmllciwgbm90IGEgcmVzb3VyY2UgaWRlbnRpZmllci5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJvY2VkdXJlIHRoYXQgdHJpZ2dlciB0aGUgZGlzcGVuc2UuXHJcbiAgICovXHJcbiAgcGFydE9mPzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIGNvZGVzIHRoYXQgbWFyayB0aGUgcmVzb3VyY2UgYXMgbm90IGN1cnJlbnRseSB2YWxpZC5cclxuICAgKi9cclxuICBzdGF0dXM6IGZoaXIuRmhpckNvZGU8TWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljYXRpb25EaXNwZW5zZS5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIHJlYXNvbiB3aHkgYSBkaXNwZW5zZSB3YXMgbm90IHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBzdGF0dXNSZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSByZWFzb24gd2h5IGEgZGlzcGVuc2Ugd2FzIG5vdCBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgc3RhdHVzUmVhc29uQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIHJlYXNvbiB3aHkgYSBkaXNwZW5zZSB3YXMgbm90IHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBzdGF0dXNSZWFzb25SZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXRlZ29yeSBjYW4gYmUgdXNlZCB0byBpbmNsdWRlIHdoZXJlIHRoZSBtZWRpY2F0aW9uIGlzIGV4cGVjdGVkIHRvIGJlIGNvbnN1bWVkIG9yIG90aGVyIHR5cGVzIG9mIGRpc3BlbnNlcy4gIEludmFyaWFudHMgY2FuIGJlIHVzZWQgdG8gYmluZCB0byBkaWZmZXJlbnQgdmFsdWUgc2V0cyB3aGVuIHByb2ZpbGluZyB0byBiaW5kLlxyXG4gICAqL1xyXG4gIGNhdGVnb3J5PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBvbmx5IGEgY29kZSBpcyBzcGVjaWZpZWQsIHRoZW4gaXQgbmVlZHMgdG8gYmUgYSBjb2RlIGZvciBhIHNwZWNpZmljIHByb2R1Y3QuIElmIG1vcmUgaW5mb3JtYXRpb24gaXMgcmVxdWlyZWQsIHRoZW4gdGhlIHVzZSBvZiB0aGUgbWVkaWNhdGlvbiByZXNvdXJjZSBpcyByZWNvbW1lbmRlZC4gIEZvciBleGFtcGxlLCBpZiB5b3UgcmVxdWlyZSBmb3JtIG9yIGxvdCBudW1iZXIsIHRoZW4geW91IG11c3QgcmVmZXJlbmNlIHRoZSBNZWRpY2F0aW9uIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIG1lZGljYXRpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgb25seSBhIGNvZGUgaXMgc3BlY2lmaWVkLCB0aGVuIGl0IG5lZWRzIHRvIGJlIGEgY29kZSBmb3IgYSBzcGVjaWZpYyBwcm9kdWN0LiBJZiBtb3JlIGluZm9ybWF0aW9uIGlzIHJlcXVpcmVkLCB0aGVuIHRoZSB1c2Ugb2YgdGhlIG1lZGljYXRpb24gcmVzb3VyY2UgaXMgcmVjb21tZW5kZWQuICBGb3IgZXhhbXBsZSwgaWYgeW91IHJlcXVpcmUgZm9ybSBvciBsb3QgbnVtYmVyLCB0aGVuIHlvdSBtdXN0IHJlZmVyZW5jZSB0aGUgTWVkaWNhdGlvbiByZXNvdXJjZS5cclxuICAgKi9cclxuICBtZWRpY2F0aW9uQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBvbmx5IGEgY29kZSBpcyBzcGVjaWZpZWQsIHRoZW4gaXQgbmVlZHMgdG8gYmUgYSBjb2RlIGZvciBhIHNwZWNpZmljIHByb2R1Y3QuIElmIG1vcmUgaW5mb3JtYXRpb24gaXMgcmVxdWlyZWQsIHRoZW4gdGhlIHVzZSBvZiB0aGUgbWVkaWNhdGlvbiByZXNvdXJjZSBpcyByZWNvbW1lbmRlZC4gIEZvciBleGFtcGxlLCBpZiB5b3UgcmVxdWlyZSBmb3JtIG9yIGxvdCBudW1iZXIsIHRoZW4geW91IG11c3QgcmVmZXJlbmNlIHRoZSBNZWRpY2F0aW9uIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIG1lZGljYXRpb25SZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN1YnN0YW5jZUFkbWluaXN0cmF0aW9uLSZndDtzdWJqZWN0LSZndDtQYXRpZW50LlxyXG4gICAqL1xyXG4gIHN1YmplY3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbmNvdW50ZXIgb3IgZXBpc29kZSBvZiBjYXJlIHRoYXQgZXN0YWJsaXNoZXMgdGhlIGNvbnRleHQgZm9yIHRoaXMgZXZlbnQuXHJcbiAgICovXHJcbiAgY29udGV4dD86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0aGF0IHN1cHBvcnRzIHRoZSBtZWRpY2F0aW9uIGJlaW5nIGRpc3BlbnNlZC5cclxuICAgKi9cclxuICBzdXBwb3J0aW5nSW5mb3JtYXRpb24/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdobyBvciB3aGF0IHBlcmZvcm1lZCB0aGUgZXZlbnQuXHJcbiAgICovXHJcbiAgcGVyZm9ybWVyPzogZmhpci5NZWRpY2F0aW9uRGlzcGVuc2VQZXJmb3JtZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwcmluY2lwYWwgcGh5c2ljYWwgbG9jYXRpb24gd2hlcmUgdGhlIGRpc3BlbnNlIHdhcyBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgbG9jYXRpb24/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1hcHMgdG8gYmFzZWRPbiBpbiBFdmVudCBsb2dpY2FsIG1vZGVsLlxyXG4gICAqL1xyXG4gIGF1dGhvcml6aW5nUHJlc2NyaXB0aW9uPzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB0aGUgdHlwZSBvZiBkaXNwZW5zaW5nIGV2ZW50IHRoYXQgaXMgcGVyZm9ybWVkLiBGb3IgZXhhbXBsZSwgVHJpYWwgRmlsbCwgQ29tcGxldGlvbiBvZiBUcmlhbCwgUGFydGlhbCBGaWxsLCBFbWVyZ2VuY3kgRmlsbCwgU2FtcGxlcywgZXRjLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhbW91bnQgb2YgbWVkaWNhdGlvbiB0aGF0IGhhcyBiZWVuIGRpc3BlbnNlZC4gSW5jbHVkZXMgdW5pdCBvZiBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIHF1YW50aXR5PzogZmhpci5RdWFudGl0eUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhbW91bnQgb2YgbWVkaWNhdGlvbiBleHByZXNzZWQgYXMgYSB0aW1pbmcgYW1vdW50LlxyXG4gICAqL1xyXG4gIGRheXNTdXBwbHk/OiBmaGlyLlF1YW50aXR5QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgd2hlbiB0aGUgZGlzcGVuc2VkIHByb2R1Y3Qgd2FzIHBhY2thZ2VkIGFuZCByZXZpZXdlZC5cclxuICAgKi9cclxuICB3aGVuUHJlcGFyZWQ/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZWRpY2F0aW9uRGlzcGVuc2Uud2hlblByZXBhcmVkXHJcbiAgICovXHJcbiAgX3doZW5QcmVwYXJlZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgdGhlIGRpc3BlbnNlZCBwcm9kdWN0IHdhcyBwcm92aWRlZCB0byB0aGUgcGF0aWVudCBvciB0aGVpciByZXByZXNlbnRhdGl2ZS5cclxuICAgKi9cclxuICB3aGVuSGFuZGVkT3Zlcj86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IE1lZGljYXRpb25EaXNwZW5zZS53aGVuSGFuZGVkT3ZlclxyXG4gICAqL1xyXG4gIF93aGVuSGFuZGVkT3Zlcj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmljYXRpb24gb2YgdGhlIGZhY2lsaXR5L2xvY2F0aW9uIHdoZXJlIHRoZSBtZWRpY2F0aW9uIHdhcyBzaGlwcGVkIHRvLCBhcyBwYXJ0IG9mIHRoZSBkaXNwZW5zZSBldmVudC5cclxuICAgKi9cclxuICBkZXN0aW5hdGlvbj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyB0aGUgcGVyc29uIHdobyBwaWNrZWQgdXAgdGhlIG1lZGljYXRpb24uICBUaGlzIHdpbGwgdXN1YWxseSBiZSBhIHBhdGllbnQgb3IgdGhlaXIgY2FyZWdpdmVyLCBidXQgc29tZSBjYXNlcyBleGlzdCB3aGVyZSBpdCBjYW4gYmUgYSBoZWFsdGhjYXJlIHByb2Zlc3Npb25hbC5cclxuICAgKi9cclxuICByZWNlaXZlcj86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRyYSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZGlzcGVuc2UgdGhhdCBjb3VsZCBub3QgYmUgY29udmV5ZWQgaW4gdGhlIG90aGVyIGF0dHJpYnV0ZXMuXHJcbiAgICovXHJcbiAgbm90ZT86IGZoaXIuQW5ub3RhdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiB0aGUgZG9zZSBvciByYXRlIGlzIGludGVuZGVkIHRvIGNoYW5nZSBvdmVyIHRoZSBlbnRpcmUgYWRtaW5pc3RyYXRpb24gcGVyaW9kIChlLmcuIFRhcGVyaW5nIGRvc2UgcHJlc2NyaXB0aW9ucyksIG11bHRpcGxlIGluc3RhbmNlcyBvZiBkb3NhZ2UgaW5zdHJ1Y3Rpb25zIHdpbGwgbmVlZCB0byBiZSBzdXBwbGllZCB0byBjb252ZXkgdGhlIGRpZmZlcmVudCBkb3Nlcy9yYXRlcy5cclxuICAgKiBUaGUgcGhhcm1hY2lzdCByZXZpZXdzIHRoZSBtZWRpY2F0aW9uIG9yZGVyIHByaW9yIHRvIGRpc3BlbnNlIGFuZCB1cGRhdGVzIHRoZSBkb3NhZ2VJbnN0cnVjdGlvbiBiYXNlZCBvbiB0aGUgYWN0dWFsIHByb2R1Y3QgYmVpbmcgZGlzcGVuc2VkLlxyXG4gICAqL1xyXG4gIGRvc2FnZUluc3RydWN0aW9uPzogZmhpci5Eb3NhZ2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCBzdWJzdGl0dXRpb24gd2FzIG1hZGUgYXMgcGFydCBvZiB0aGUgZGlzcGVuc2UuICBJbiBzb21lIGNhc2VzLCBzdWJzdGl0dXRpb24gd2lsbCBiZSBleHBlY3RlZCBidXQgZG9lcyBub3QgaGFwcGVuLCBpbiBvdGhlciBjYXNlcyBzdWJzdGl0dXRpb24gaXMgbm90IGV4cGVjdGVkIGJ1dCBkb2VzIGhhcHBlbi4gIFRoaXMgYmxvY2sgZXhwbGFpbnMgd2hhdCBzdWJzdGl0dXRpb24gZGlkIG9yIGRpZCBub3QgaGFwcGVuIGFuZCB3aHkuICBJZiBub3RoaW5nIGlzIHNwZWNpZmllZCwgc3Vic3RpdHV0aW9uIHdhcyBub3QgZG9uZS5cclxuICAgKi9cclxuICBzdWJzdGl0dXRpb24/OiBmaGlyLk1lZGljYXRpb25EaXNwZW5zZVN1YnN0aXR1dGlvbkFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBjYW4gaW5jbHVkZSBhIGRldGVjdGVkIGlzc3VlIHRoYXQgaGFzIGJlZW4gaWRlbnRpZmllZCBlaXRoZXIgYnkgYSBkZWNpc2lvbiBzdXBwb3J0IHN5c3RlbSBvciBieSBhIGNsaW5pY2lhbiBhbmQgbWF5IGluY2x1ZGUgaW5mb3JtYXRpb24gb24gdGhlIHN0ZXBzIHRoYXQgd2VyZSB0YWtlbiB0byBhZGRyZXNzIHRoZSBpc3N1ZS5cclxuICAgKi9cclxuICBkZXRlY3RlZElzc3VlPzogZmhpci5SZWZlcmVuY2VBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWlnaHQgbm90IGluY2x1ZGUgcHJvdmVuYW5jZXMgZm9yIGFsbCB2ZXJzaW9ucyBvZiB0aGUgcmVxdWVzdCDigJMgb25seSB0aG9zZSBkZWVtZWQg4oCccmVsZXZhbnTigJ0gb3IgaW1wb3J0YW50LiBUaGlzIFNIQUxMIE5PVCBpbmNsdWRlIHRoZSBQcm92ZW5hbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgcmVzb3VyY2UuIChJZiB0aGF0IHByb3ZlbmFuY2UgaXMgZGVlbWVkIHRvIGJlIGEg4oCccmVsZXZhbnTigJ0gY2hhbmdlLCBpdCB3aWxsIG5lZWQgdG8gYmUgYWRkZWQgYXMgcGFydCBvZiBhIGxhdGVyIHVwZGF0ZS4gVW50aWwgdGhlbiwgaXQgY2FuIGJlIHF1ZXJpZWQgZGlyZWN0bHkgYXMgdGhlIFByb3ZlbmFuY2UgdGhhdCBwb2ludHMgdG8gdGhpcyB2ZXJzaW9uIHVzaW5nIF9yZXZpbmNsdWRlIEFsbCBQcm92ZW5hbmNlcyBzaG91bGQgaGF2ZSBzb21lIGhpc3RvcmljYWwgdmVyc2lvbiBvZiB0aGlzIFJlcXVlc3QgYXMgdGhlaXIgc3ViamVjdC4pLlxyXG4gICAqL1xyXG4gIGV2ZW50SGlzdG9yeT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyB0aGF0IGEgbWVkaWNhdGlvbiBwcm9kdWN0IGlzIHRvIGJlIG9yIGhhcyBiZWVuIGRpc3BlbnNlZCBmb3IgYSBuYW1lZCBwZXJzb24vcGF0aWVudC4gIFRoaXMgaW5jbHVkZXMgYSBkZXNjcmlwdGlvbiBvZiB0aGUgbWVkaWNhdGlvbiBwcm9kdWN0IChzdXBwbHkpIHByb3ZpZGVkIGFuZCB0aGUgaW5zdHJ1Y3Rpb25zIGZvciBhZG1pbmlzdGVyaW5nIHRoZSBtZWRpY2F0aW9uLiAgVGhlIG1lZGljYXRpb24gZGlzcGVuc2UgaXMgdGhlIHJlc3VsdCBvZiBhIHBoYXJtYWN5IHN5c3RlbSByZXNwb25kaW5nIHRvIGEgbWVkaWNhdGlvbiBvcmRlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2F0aW9uRGlzcGVuc2UgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljYXRpb25EaXNwZW5zZSc7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJNZWRpY2F0aW9uRGlzcGVuc2VcIjtcclxuICAvKipcclxuICAgKiBUaGlzIGlzIGEgYnVzaW5lc3MgaWRlbnRpZmllciwgbm90IGEgcmVzb3VyY2UgaWRlbnRpZmllci5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHByb2NlZHVyZSB0aGF0IHRyaWdnZXIgdGhlIGRpc3BlbnNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJ0T2Y6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIHRoZSBzdGF0dXMgY29udGFpbnMgY29kZXMgdGhhdCBtYXJrIHRoZSByZXNvdXJjZSBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM6IGZoaXIuRmhpckNvZGU8TWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSByZWFzb24gd2h5IGEgZGlzcGVuc2Ugd2FzIG5vdCBwZXJmb3JtZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXR1c1JlYXNvbj86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZSl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgTWVkaWNhdGlvbkRpc3BlbnNlLnN0YXR1c1JlYXNvblt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c19zdGF0dXNSZWFzb25Jc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBUaGUgY2F0ZWdvcnkgY2FuIGJlIHVzZWQgdG8gaW5jbHVkZSB3aGVyZSB0aGUgbWVkaWNhdGlvbiBpcyBleHBlY3RlZCB0byBiZSBjb25zdW1lZCBvciBvdGhlciB0eXBlcyBvZiBkaXNwZW5zZXMuICBJbnZhcmlhbnRzIGNhbiBiZSB1c2VkIHRvIGJpbmQgdG8gZGlmZmVyZW50IHZhbHVlIHNldHMgd2hlbiBwcm9maWxpbmcgdG8gYmluZC5cclxuICAgKi9cclxuICBwdWJsaWMgY2F0ZWdvcnk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgb25seSBhIGNvZGUgaXMgc3BlY2lmaWVkLCB0aGVuIGl0IG5lZWRzIHRvIGJlIGEgY29kZSBmb3IgYSBzcGVjaWZpYyBwcm9kdWN0LiBJZiBtb3JlIGluZm9ybWF0aW9uIGlzIHJlcXVpcmVkLCB0aGVuIHRoZSB1c2Ugb2YgdGhlIG1lZGljYXRpb24gcmVzb3VyY2UgaXMgcmVjb21tZW5kZWQuICBGb3IgZXhhbXBsZSwgaWYgeW91IHJlcXVpcmUgZm9ybSBvciBsb3QgbnVtYmVyLCB0aGVuIHlvdSBtdXN0IHJlZmVyZW5jZSB0aGUgTWVkaWNhdGlvbiByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgbWVkaWNhdGlvbjogKGZoaXIuQ29kZWFibGVDb25jZXB0fGZoaXIuUmVmZXJlbmNlKXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgTWVkaWNhdGlvbkRpc3BlbnNlLm1lZGljYXRpb25beF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfbWVkaWNhdGlvbklzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIFN1YnN0YW5jZUFkbWluaXN0cmF0aW9uLSZndDtzdWJqZWN0LSZndDtQYXRpZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJqZWN0PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbmNvdW50ZXIgb3IgZXBpc29kZSBvZiBjYXJlIHRoYXQgZXN0YWJsaXNoZXMgdGhlIGNvbnRleHQgZm9yIHRoaXMgZXZlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRleHQ/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0aGF0IHN1cHBvcnRzIHRoZSBtZWRpY2F0aW9uIGJlaW5nIGRpc3BlbnNlZC5cclxuICAgKi9cclxuICBwdWJsaWMgc3VwcG9ydGluZ0luZm9ybWF0aW9uOiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aG8gb3Igd2hhdCBwZXJmb3JtZWQgdGhlIGV2ZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwZXJmb3JtZXI6IGZoaXIuTWVkaWNhdGlvbkRpc3BlbnNlUGVyZm9ybWVyW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHByaW5jaXBhbCBwaHlzaWNhbCBsb2NhdGlvbiB3aGVyZSB0aGUgZGlzcGVuc2Ugd2FzIHBlcmZvcm1lZC5cclxuICAgKi9cclxuICBwdWJsaWMgbG9jYXRpb24/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTWFwcyB0byBiYXNlZE9uIGluIEV2ZW50IGxvZ2ljYWwgbW9kZWwuXHJcbiAgICovXHJcbiAgcHVibGljIGF1dGhvcml6aW5nUHJlc2NyaXB0aW9uOiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB0aGUgdHlwZSBvZiBkaXNwZW5zaW5nIGV2ZW50IHRoYXQgaXMgcGVyZm9ybWVkLiBGb3IgZXhhbXBsZSwgVHJpYWwgRmlsbCwgQ29tcGxldGlvbiBvZiBUcmlhbCwgUGFydGlhbCBGaWxsLCBFbWVyZ2VuY3kgRmlsbCwgU2FtcGxlcywgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhbW91bnQgb2YgbWVkaWNhdGlvbiB0aGF0IGhhcyBiZWVuIGRpc3BlbnNlZC4gSW5jbHVkZXMgdW5pdCBvZiBtZWFzdXJlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBxdWFudGl0eT86IGZoaXIuUXVhbnRpdHl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhbW91bnQgb2YgbWVkaWNhdGlvbiBleHByZXNzZWQgYXMgYSB0aW1pbmcgYW1vdW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkYXlzU3VwcGx5PzogZmhpci5RdWFudGl0eXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgd2hlbiB0aGUgZGlzcGVuc2VkIHByb2R1Y3Qgd2FzIHBhY2thZ2VkIGFuZCByZXZpZXdlZC5cclxuICAgKi9cclxuICBwdWJsaWMgd2hlblByZXBhcmVkPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHRoZSBkaXNwZW5zZWQgcHJvZHVjdCB3YXMgcHJvdmlkZWQgdG8gdGhlIHBhdGllbnQgb3IgdGhlaXIgcmVwcmVzZW50YXRpdmUuXHJcbiAgICovXHJcbiAgcHVibGljIHdoZW5IYW5kZWRPdmVyPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpY2F0aW9uIG9mIHRoZSBmYWNpbGl0eS9sb2NhdGlvbiB3aGVyZSB0aGUgbWVkaWNhdGlvbiB3YXMgc2hpcHBlZCB0bywgYXMgcGFydCBvZiB0aGUgZGlzcGVuc2UgZXZlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc3RpbmF0aW9uPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgdGhlIHBlcnNvbiB3aG8gcGlja2VkIHVwIHRoZSBtZWRpY2F0aW9uLiAgVGhpcyB3aWxsIHVzdWFsbHkgYmUgYSBwYXRpZW50IG9yIHRoZWlyIGNhcmVnaXZlciwgYnV0IHNvbWUgY2FzZXMgZXhpc3Qgd2hlcmUgaXQgY2FuIGJlIGEgaGVhbHRoY2FyZSBwcm9mZXNzaW9uYWwuXHJcbiAgICovXHJcbiAgcHVibGljIHJlY2VpdmVyOiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIEV4dHJhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkaXNwZW5zZSB0aGF0IGNvdWxkIG5vdCBiZSBjb252ZXllZCBpbiB0aGUgb3RoZXIgYXR0cmlidXRlcy5cclxuICAgKi9cclxuICBwdWJsaWMgbm90ZTogZmhpci5Bbm5vdGF0aW9uW107XHJcbiAgLyoqXHJcbiAgICogV2hlbiB0aGUgZG9zZSBvciByYXRlIGlzIGludGVuZGVkIHRvIGNoYW5nZSBvdmVyIHRoZSBlbnRpcmUgYWRtaW5pc3RyYXRpb24gcGVyaW9kIChlLmcuIFRhcGVyaW5nIGRvc2UgcHJlc2NyaXB0aW9ucyksIG11bHRpcGxlIGluc3RhbmNlcyBvZiBkb3NhZ2UgaW5zdHJ1Y3Rpb25zIHdpbGwgbmVlZCB0byBiZSBzdXBwbGllZCB0byBjb252ZXkgdGhlIGRpZmZlcmVudCBkb3Nlcy9yYXRlcy5cclxuICAgKiBUaGUgcGhhcm1hY2lzdCByZXZpZXdzIHRoZSBtZWRpY2F0aW9uIG9yZGVyIHByaW9yIHRvIGRpc3BlbnNlIGFuZCB1cGRhdGVzIHRoZSBkb3NhZ2VJbnN0cnVjdGlvbiBiYXNlZCBvbiB0aGUgYWN0dWFsIHByb2R1Y3QgYmVpbmcgZGlzcGVuc2VkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb3NhZ2VJbnN0cnVjdGlvbjogZmhpci5Eb3NhZ2VbXTtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3Qgc3Vic3RpdHV0aW9uIHdhcyBtYWRlIGFzIHBhcnQgb2YgdGhlIGRpc3BlbnNlLiAgSW4gc29tZSBjYXNlcywgc3Vic3RpdHV0aW9uIHdpbGwgYmUgZXhwZWN0ZWQgYnV0IGRvZXMgbm90IGhhcHBlbiwgaW4gb3RoZXIgY2FzZXMgc3Vic3RpdHV0aW9uIGlzIG5vdCBleHBlY3RlZCBidXQgZG9lcyBoYXBwZW4uICBUaGlzIGJsb2NrIGV4cGxhaW5zIHdoYXQgc3Vic3RpdHV0aW9uIGRpZCBvciBkaWQgbm90IGhhcHBlbiBhbmQgd2h5LiAgSWYgbm90aGluZyBpcyBzcGVjaWZpZWQsIHN1YnN0aXR1dGlvbiB3YXMgbm90IGRvbmUuXHJcbiAgICovXHJcbiAgcHVibGljIHN1YnN0aXR1dGlvbj86IGZoaXIuTWVkaWNhdGlvbkRpc3BlbnNlU3Vic3RpdHV0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgY2FuIGluY2x1ZGUgYSBkZXRlY3RlZCBpc3N1ZSB0aGF0IGhhcyBiZWVuIGlkZW50aWZpZWQgZWl0aGVyIGJ5IGEgZGVjaXNpb24gc3VwcG9ydCBzeXN0ZW0gb3IgYnkgYSBjbGluaWNpYW4gYW5kIG1heSBpbmNsdWRlIGluZm9ybWF0aW9uIG9uIHRoZSBzdGVwcyB0aGF0IHdlcmUgdGFrZW4gdG8gYWRkcmVzcyB0aGUgaXNzdWUuXHJcbiAgICovXHJcbiAgcHVibGljIGRldGVjdGVkSXNzdWU6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBtaWdodCBub3QgaW5jbHVkZSBwcm92ZW5hbmNlcyBmb3IgYWxsIHZlcnNpb25zIG9mIHRoZSByZXF1ZXN0IOKAkyBvbmx5IHRob3NlIGRlZW1lZCDigJxyZWxldmFudOKAnSBvciBpbXBvcnRhbnQuIFRoaXMgU0hBTEwgTk9UIGluY2x1ZGUgdGhlIFByb3ZlbmFuY2UgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS4gKElmIHRoYXQgcHJvdmVuYW5jZSBpcyBkZWVtZWQgdG8gYmUgYSDigJxyZWxldmFudOKAnSBjaGFuZ2UsIGl0IHdpbGwgbmVlZCB0byBiZSBhZGRlZCBhcyBwYXJ0IG9mIGEgbGF0ZXIgdXBkYXRlLiBVbnRpbCB0aGVuLCBpdCBjYW4gYmUgcXVlcmllZCBkaXJlY3RseSBhcyB0aGUgUHJvdmVuYW5jZSB0aGF0IHBvaW50cyB0byB0aGlzIHZlcnNpb24gdXNpbmcgX3JldmluY2x1ZGUgQWxsIFByb3ZlbmFuY2VzIHNob3VsZCBoYXZlIHNvbWUgaGlzdG9yaWNhbCB2ZXJzaW9uIG9mIHRoaXMgUmVxdWVzdCBhcyB0aGVpciBzdWJqZWN0LikuXHJcbiAgICovXHJcbiAgcHVibGljIGV2ZW50SGlzdG9yeTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2F0aW9uRGlzcGVuc2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2F0aW9uRGlzcGVuc2VBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnTWVkaWNhdGlvbkRpc3BlbnNlJztcclxuICAgIGlmIChzb3VyY2VbJ2lkZW50aWZpZXInXSkgeyB0aGlzLmlkZW50aWZpZXIgPSBzb3VyY2UuaWRlbnRpZmllci5tYXAoKHgpID0+IG5ldyBmaGlyLklkZW50aWZpZXIoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pZGVudGlmaWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3BhcnRPZiddKSB7IHRoaXMucGFydE9mID0gc291cmNlLnBhcnRPZi5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnBhcnRPZiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzdGF0dXMnXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8TWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnN0YXR1c30sIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfc3RhdHVzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc3RhdHVzKSB7IHRoaXMuc3RhdHVzLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3N0YXR1cyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPE1lZGljYXRpb25kaXNwZW5zZVN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzUmVhc29uJ10pIHsgdGhpcy5zdGF0dXNSZWFzb24gPSBzb3VyY2Uuc3RhdHVzUmVhc29uOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3N0YXR1c1JlYXNvbkNvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuc3RhdHVzUmVhc29uID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zdGF0dXNSZWFzb25Db2RlYWJsZUNvbmNlcHQsIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3N0YXR1c1JlYXNvblJlZmVyZW5jZSddKSB7IHRoaXMuc3RhdHVzUmVhc29uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdGF0dXNSZWFzb25SZWZlcmVuY2UsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydjYXRlZ29yeSddKSB7IHRoaXMuY2F0ZWdvcnkgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmNhdGVnb3J5LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbWVkaWNhdGlvbiddKSB7IHRoaXMubWVkaWNhdGlvbiA9IHNvdXJjZS5tZWRpY2F0aW9uOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ21lZGljYXRpb25Db2RlYWJsZUNvbmNlcHQnXSkgeyB0aGlzLm1lZGljYXRpb24gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLm1lZGljYXRpb25Db2RlYWJsZUNvbmNlcHQsIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ21lZGljYXRpb25SZWZlcmVuY2UnXSkgeyB0aGlzLm1lZGljYXRpb24gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLm1lZGljYXRpb25SZWZlcmVuY2UsIG9wdGlvbnMpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5tZWRpY2F0aW9uID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3ViamVjdCddKSB7IHRoaXMuc3ViamVjdCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uuc3ViamVjdCwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NvbnRleHQnXSkgeyB0aGlzLmNvbnRleHQgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmNvbnRleHQsIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydzdXBwb3J0aW5nSW5mb3JtYXRpb24nXSkgeyB0aGlzLnN1cHBvcnRpbmdJbmZvcm1hdGlvbiA9IHNvdXJjZS5zdXBwb3J0aW5nSW5mb3JtYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zdXBwb3J0aW5nSW5mb3JtYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncGVyZm9ybWVyJ10pIHsgdGhpcy5wZXJmb3JtZXIgPSBzb3VyY2UucGVyZm9ybWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNhdGlvbkRpc3BlbnNlUGVyZm9ybWVyKHgsIG9wdGlvbnMpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucGVyZm9ybWVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2xvY2F0aW9uJ10pIHsgdGhpcy5sb2NhdGlvbiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UubG9jYXRpb24sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydhdXRob3JpemluZ1ByZXNjcmlwdGlvbiddKSB7IHRoaXMuYXV0aG9yaXppbmdQcmVzY3JpcHRpb24gPSBzb3VyY2UuYXV0aG9yaXppbmdQcmVzY3JpcHRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hdXRob3JpemluZ1ByZXNjcmlwdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50eXBlLCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncXVhbnRpdHknXSkgeyB0aGlzLnF1YW50aXR5ID0gbmV3IGZoaXIuUXVhbnRpdHkoc291cmNlLnF1YW50aXR5LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGF5c1N1cHBseSddKSB7IHRoaXMuZGF5c1N1cHBseSA9IG5ldyBmaGlyLlF1YW50aXR5KHNvdXJjZS5kYXlzU3VwcGx5LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnd2hlblByZXBhcmVkJ10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLndoZW5QcmVwYXJlZCA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS53aGVuUHJlcGFyZWR9LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3doZW5QcmVwYXJlZCddKSB7XHJcbiAgICAgIGlmICh0aGlzLndoZW5QcmVwYXJlZCkgeyB0aGlzLndoZW5QcmVwYXJlZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl93aGVuUHJlcGFyZWQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy53aGVuUHJlcGFyZWQgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoc291cmNlLl93aGVuUHJlcGFyZWQgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnd2hlbkhhbmRlZE92ZXInXSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMud2hlbkhhbmRlZE92ZXIgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2Uud2hlbkhhbmRlZE92ZXJ9LCBvcHRpb25zKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3doZW5IYW5kZWRPdmVyJ10pIHtcclxuICAgICAgaWYgKHRoaXMud2hlbkhhbmRlZE92ZXIpIHsgdGhpcy53aGVuSGFuZGVkT3Zlci5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl93aGVuSGFuZGVkT3ZlciEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLndoZW5IYW5kZWRPdmVyID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fd2hlbkhhbmRlZE92ZXIgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+LCBvcHRpb25zKTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzdGluYXRpb24nXSkgeyB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5kZXN0aW5hdGlvbiwgb3B0aW9ucyk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlY2VpdmVyJ10pIHsgdGhpcy5yZWNlaXZlciA9IHNvdXJjZS5yZWNlaXZlci5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlY2VpdmVyID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ25vdGUnXSkgeyB0aGlzLm5vdGUgPSBzb3VyY2Uubm90ZS5tYXAoKHgpID0+IG5ldyBmaGlyLkFubm90YXRpb24oeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5ub3RlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2Rvc2FnZUluc3RydWN0aW9uJ10pIHsgdGhpcy5kb3NhZ2VJbnN0cnVjdGlvbiA9IHNvdXJjZS5kb3NhZ2VJbnN0cnVjdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkRvc2FnZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRvc2FnZUluc3RydWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3N1YnN0aXR1dGlvbiddKSB7IHRoaXMuc3Vic3RpdHV0aW9uID0gbmV3IGZoaXIuTWVkaWNhdGlvbkRpc3BlbnNlU3Vic3RpdHV0aW9uKHNvdXJjZS5zdWJzdGl0dXRpb24sIG9wdGlvbnMpOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXRlY3RlZElzc3VlJ10pIHsgdGhpcy5kZXRlY3RlZElzc3VlID0gc291cmNlLmRldGVjdGVkSXNzdWUubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCwgb3B0aW9ucykpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5kZXRlY3RlZElzc3VlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2V2ZW50SGlzdG9yeSddKSB7IHRoaXMuZXZlbnRIaXN0b3J5ID0gc291cmNlLmV2ZW50SGlzdG9yeS5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4LCBvcHRpb25zKSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmV2ZW50SGlzdG9yeSA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnTWVkaWNhdGlvbkRpc3BlbnNlJyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnaWRlbnRpZmllcicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncGFydE9mJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTVignc3RhdHVzJyxleHAsJ01lZGljYXRpb25kaXNwZW5zZVN0YXR1cycsTWVkaWNhdGlvbmRpc3BlbnNlU3RhdHVzVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3N0YXR1c1JlYXNvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnY2F0ZWdvcnknLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52UlMoJ21lZGljYXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3N1YmplY3QnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2NvbnRleHQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ3N1cHBvcnRpbmdJbmZvcm1hdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncGVyZm9ybWVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdsb2NhdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnYXV0aG9yaXppbmdQcmVzY3JpcHRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3R5cGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3F1YW50aXR5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkYXlzU3VwcGx5JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd3aGVuUHJlcGFyZWQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3doZW5IYW5kZWRPdmVyJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdkZXN0aW5hdGlvbicsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncmVjZWl2ZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ25vdGUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2Rvc2FnZUluc3RydWN0aW9uJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzdWJzdGl0dXRpb24nLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2RldGVjdGVkSXNzdWUnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2V2ZW50SGlzdG9yeScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4iXX0=