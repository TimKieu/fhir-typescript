// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: FamilyMemberHistory
import * as fhir from '../fhir.js';
// @ts-ignore
import { HistoryStatusCodes } from '../fhirValueSets/HistoryStatusCodes.js';
// @ts-ignore
import { AdministrativeGenderCodings, } from '../fhirValueSets/AdministrativeGenderCodings.js';
/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export class FamilyMemberHistoryCondition extends fhir.BackboneElement {
    /**
     * Default constructor for FamilyMemberHistoryCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['outcome']) {
            this.outcome = new fhir.CodeableConcept(source.outcome);
        }
        if (source['contributedToDeath']) {
            this.contributedToDeath = new fhir.FhirBoolean({ value: source.contributedToDeath });
        }
        if (source['_contributedToDeath']) {
            if (this.contributedToDeath) {
                this.contributedToDeath.addExtendedProperties(source._contributedToDeath);
            }
            else {
                this.contributedToDeath = new fhir.FhirBoolean(source._contributedToDeath);
            }
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetAge']) {
            this.onset = new fhir.Age(source.onsetAge);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod);
        }
        else if (source['onsetString']) {
            this.onset = new fhir.FhirString({ value: source.onsetString });
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'FamilyMemberHistory.condition';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: FamilyMemberHistory.condition.code:CodeableConcept', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation(expression + '.outcome'));
        }
        if (this["contributedToDeath"]) {
            issues.push(...this.contributedToDeath.doModelValidation(expression + '.contributedToDeath'));
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FamilyMemberHistoryCondition._fts_dataType = 'FamilyMemberHistoryCondition';
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.condition.onset[x]
 */
FamilyMemberHistoryCondition._fts_onsetIsChoice = true;
/**
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
export class FamilyMemberHistory extends fhir.DomainResource {
    /**
     * Default constructor for FamilyMemberHistory - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'FamilyMemberHistory';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['_instantiatesCanonical']) {
            source._instantiatesCanonical.forEach((x, i) => {
                if (this.instantiatesCanonical.length >= i) {
                    if (x) {
                        this.instantiatesCanonical[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesCanonical.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['_instantiatesUri']) {
            source._instantiatesUri.forEach((x, i) => {
                if (this.instantiatesUri.length >= i) {
                    if (x) {
                        this.instantiatesUri[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.instantiatesUri.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        else {
            this.relationship = null;
        }
        if (source['sex']) {
            this.sex = new fhir.CodeableConcept(source.sex);
        }
        if (source['born']) {
            this.born = source.born;
        }
        else if (source['bornPeriod']) {
            this.born = new fhir.Period(source.bornPeriod);
        }
        else if (source['bornDate']) {
            this.born = new fhir.FhirDate({ value: source.bornDate });
        }
        else if (source['bornString']) {
            this.born = new fhir.FhirString({ value: source.bornString });
        }
        if (source['age']) {
            this.age = source.age;
        }
        else if (source['ageAge']) {
            this.age = new fhir.Age(source.ageAge);
        }
        else if (source['ageRange']) {
            this.age = new fhir.Range(source.ageRange);
        }
        else if (source['ageString']) {
            this.age = new fhir.FhirString({ value: source.ageString });
        }
        if (source['estimatedAge']) {
            this.estimatedAge = new fhir.FhirBoolean({ value: source.estimatedAge });
        }
        if (source['_estimatedAge']) {
            if (this.estimatedAge) {
                this.estimatedAge.addExtendedProperties(source._estimatedAge);
            }
            else {
                this.estimatedAge = new fhir.FhirBoolean(source._estimatedAge);
            }
        }
        if (source['deceased']) {
            this.deceased = source.deceased;
        }
        else if (source['deceasedBoolean']) {
            this.deceased = new fhir.FhirBoolean({ value: source.deceasedBoolean });
        }
        else if (source['deceasedAge']) {
            this.deceased = new fhir.Age(source.deceasedAge);
        }
        else if (source['deceasedRange']) {
            this.deceased = new fhir.Range(source.deceasedRange);
        }
        else if (source['deceasedDate']) {
            this.deceased = new fhir.FhirDate({ value: source.deceasedDate });
        }
        else if (source['deceasedString']) {
            this.deceased = new fhir.FhirString({ value: source.deceasedString });
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.FamilyMemberHistoryCondition(x));
        }
        else {
            this.condition = [];
        }
    }
    /**
     * Required-bound Value Set for status (FamilyMemberHistory.status)
     */
    static get statusRequiredCodes() {
        return HistoryStatusCodes;
    }
    /**
     * Extensible-bound Value Set for sex (FamilyMemberHistory.sex)
     */
    static get sexExtensibleCodings() {
        return AdministrativeGenderCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'FamilyMemberHistory';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: FamilyMemberHistory.resourceType:"FamilyMemberHistory"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.instantiatesCanonical[${i}]`)); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.instantiatesUri[${i}]`)); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: FamilyMemberHistory.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(HistoryStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: FamilyMemberHistory.status:code Required binding to: HistoryStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["dataAbsentReason"]) {
            issues.push(...this.dataAbsentReason.doModelValidation(expression + '.dataAbsentReason'));
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient fhir: FamilyMemberHistory.patient:Reference', expression: [expression] });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation(expression + '.patient'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (!this['relationship']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property relationship fhir: FamilyMemberHistory.relationship:CodeableConcept', expression: [expression] });
        }
        if (this["relationship"]) {
            issues.push(...this.relationship.doModelValidation(expression + '.relationship'));
        }
        if (this["sex"]) {
            issues.push(...this.sex.doModelValidation(expression + '.sex'));
        }
        if (this["estimatedAge"]) {
            issues.push(...this.estimatedAge.doModelValidation(expression + '.estimatedAge'));
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonCode[${i}]`)); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonReference[${i}]`)); });
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["condition"]) {
            this.condition.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.condition[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FamilyMemberHistory._fts_dataType = 'FamilyMemberHistory';
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.born[x]
 */
FamilyMemberHistory._fts_bornIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.age[x]
 */
FamilyMemberHistory._fts_ageIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element FamilyMemberHistory.deceased[x]
 */
FamilyMemberHistory._fts_deceasedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,