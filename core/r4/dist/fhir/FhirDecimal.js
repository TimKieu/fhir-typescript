// Minimum TypeScript Version: 3.7
// FHIR Primitive: decimal
import * as fhir from '../fhir.js';
/**
 * Do not use an IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)
 */
export class FhirDecimal extends fhir.FhirPrimitive {
    /**
       * Create a FhirDecimal
       * @param value Do not use an IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)
       * @param id Unique id for inter-element referencing (uncommon on primitives)
       * @param extension Additional content defined by implementations
       * @param options Options to pass to extension constructors
    */
    constructor(source = {}, options = {}) {
        super(source, options);
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if ((this.value !== undefined) && (this.value !== null) && ((typeof this.value !== 'number') || (!FhirDecimal._fts_regex.test(this.value.toString())))) {
            issues.push({ severity: 'error', code: 'invalid', diagnostics: 'Invalid value in primitive type decimal', expression: [expression] });
        }
        return issues;
    }
    /**
     * Returns a string representation of an object.
     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.
     */
    toString(radix) { return (this.value ?? NaN).toString(radix); }
    /**
     * Returns a string representing a number in fixed-point notation.
     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
     */
    toFixed(fractionDigits) { return (this.value ?? NaN).toFixed(fractionDigits); }
    /**
     * Returns a string containing a number represented in exponential notation.
     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
     */
    toExponential(fractionDigits) { return (this.value ?? NaN).toExponential(fractionDigits); }
    /**
     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.
     */
    toPrecision(precision) { return (this.value ?? NaN).toPrecision(precision); }
    /**
     * Returns the primitive value of the specified object.
     */
    valueOf() { return (this.value ?? NaN); }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FhirDecimal._fts_dataType = 'Decimal';
/**
 * Mapping of this datatype to a JSON equivalent
 */
FhirDecimal._fts_jsonType = 'number';
// published regex: -?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?
FhirDecimal._fts_regex = /^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$/;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmhpckRlY2ltYWwuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL0ZoaXJEZWNpbWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQywwQkFBMEI7QUFFMUIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFZbkM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBWSxTQUFRLElBQUksQ0FBQyxhQUFhO0lBZWpEOzs7Ozs7TUFNRTtJQUNGLFlBQVksU0FBa0MsRUFBRSxFQUFFLFVBQXNDLEVBQUc7UUFDekYsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxhQUFvQixFQUFFO1FBQ3RELElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEosTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUseUNBQXlDLEVBQUUsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1NBQ3RJO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNEOzs7T0FHRztJQUNjLFFBQVEsQ0FBQyxLQUFhLElBQVcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5Rjs7O09BR0c7SUFDSSxPQUFPLENBQUMsY0FBc0IsSUFBVyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JHOzs7T0FHRztJQUNJLGFBQWEsQ0FBQyxjQUFzQixJQUFXLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakg7OztPQUdHO0lBQ0ksV0FBVyxDQUFDLFNBQWlCLElBQVcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRzs7T0FFRztJQUNhLE9BQU8sS0FBWSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBekRqRTs7R0FFRztBQUM2Qix5QkFBYSxHQUFVLFNBQVMsQ0FBQztBQUNqRTs7R0FFRztBQUM2Qix5QkFBYSxHQUFVLFFBQVEsQ0FBQztBQUNoRSxrRUFBa0U7QUFDbEMsc0JBQVUsR0FBVSxrREFBa0QsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBQcmltaXRpdmU6IGRlY2ltYWxcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vKipcclxuICogRG8gbm90IHVzZSBhbiBJRUVFIHR5cGUgZmxvYXRpbmcgcG9pbnQgdHlwZSwgaW5zdGVhZCB1c2Ugc29tZXRoaW5nIHRoYXQgd29ya3MgbGlrZSBhIHRydWUgZGVjaW1hbCwgd2l0aCBpbmJ1aWx0IHByZWNpc2lvbiAoZS5nLiBKYXZhIEJpZ0ludGVnZXIpXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEZoaXJEZWNpbWFsQXJncyBleHRlbmRzIGZoaXIuRmhpclByaW1pdGl2ZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIERvIG5vdCB1c2UgYW4gSUVFRSB0eXBlIGZsb2F0aW5nIHBvaW50IHR5cGUsIGluc3RlYWQgdXNlIHNvbWV0aGluZyB0aGF0IHdvcmtzIGxpa2UgYSB0cnVlIGRlY2ltYWwsIHdpdGggaW5idWlsdCBwcmVjaXNpb24gKGUuZy4gSmF2YSBCaWdJbnRlZ2VyKVxyXG4gICAqL1xyXG4gIHZhbHVlPzpGaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEbyBub3QgdXNlIGFuIElFRUUgdHlwZSBmbG9hdGluZyBwb2ludCB0eXBlLCBpbnN0ZWFkIHVzZSBzb21ldGhpbmcgdGhhdCB3b3JrcyBsaWtlIGEgdHJ1ZSBkZWNpbWFsLCB3aXRoIGluYnVpbHQgcHJlY2lzaW9uIChlLmcuIEphdmEgQmlnSW50ZWdlcilcclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaGlyRGVjaW1hbCBleHRlbmRzIGZoaXIuRmhpclByaW1pdGl2ZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdEZWNpbWFsJztcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBKU09OIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfanNvblR5cGU6c3RyaW5nID0gJ251bWJlcic7XHJcbiAgLy8gcHVibGlzaGVkIHJlZ2V4OiAtPygwfFsxLTldWzAtOV0qKShcXC5bMC05XSspPyhbZUVdWystXT9bMC05XSspP1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19yZWdleDpSZWdFeHAgPSAvXi0/KDB8WzEtOV1bMC05XSopKFxcLlswLTldKyk/KFtlRV1bKy1dP1swLTldKyk/JC9cclxuICAvKipcclxuICAgKiBBIGRlY2ltYWwgdmFsdWUsIHJlcHJlc2VudGVkIGFzIGEgSlMgbnVtYmVyXHJcbiAgICovXHJcbiAgZGVjbGFyZSB2YWx1ZT86bnVtYmVyfG51bGx8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgRmhpckRlY2ltYWxcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBEbyBub3QgdXNlIGFuIElFRUUgdHlwZSBmbG9hdGluZyBwb2ludCB0eXBlLCBpbnN0ZWFkIHVzZSBzb21ldGhpbmcgdGhhdCB3b3JrcyBsaWtlIGEgdHJ1ZSBkZWNpbWFsLCB3aXRoIGluYnVpbHQgcHJlY2lzaW9uIChlLmcuIEphdmEgQmlnSW50ZWdlcilcclxuICAgICAqIEBwYXJhbSBpZCBVbmlxdWUgaWQgZm9yIGludGVyLWVsZW1lbnQgcmVmZXJlbmNpbmcgKHVuY29tbW9uIG9uIHByaW1pdGl2ZXMpXHJcbiAgICAgKiBAcGFyYW0gZXh0ZW5zaW9uIEFkZGl0aW9uYWwgY29udGVudCBkZWZpbmVkIGJ5IGltcGxlbWVudGF0aW9uc1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIGV4dGVuc2lvbiBjb25zdHJ1Y3RvcnNcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEZoaXJEZWNpbWFsQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7IH0gKSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoKHRoaXMudmFsdWUgIT09IHVuZGVmaW5lZCkgJiYgKHRoaXMudmFsdWUgIT09IG51bGwpICYmICgodHlwZW9mIHRoaXMudmFsdWUgIT09ICdudW1iZXInKSB8fCAoIUZoaXJEZWNpbWFsLl9mdHNfcmVnZXgudGVzdCh0aGlzLnZhbHVlLnRvU3RyaW5nKCkpKSkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ2ludmFsaWQnLCBkaWFnbm9zdGljczogJ0ludmFsaWQgdmFsdWUgaW4gcHJpbWl0aXZlIHR5cGUgZGVjaW1hbCcsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXX0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXHJcbiAgICogQHBhcmFtIHJhZGl4IFNwZWNpZmllcyBhIHJhZGl4IGZvciBjb252ZXJ0aW5nIG51bWVyaWMgdmFsdWVzIHRvIHN0cmluZ3MuIFRoaXMgdmFsdWUgaXMgb25seSB1c2VkIGZvciBudW1iZXJzLlxyXG4gICAqL1xyXG4gICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcocmFkaXg/Om51bWJlcik6c3RyaW5nIHsgcmV0dXJuICh0aGlzLnZhbHVlID8/IE5hTikudG9TdHJpbmcocmFkaXgpOyB9XHJcbiAgIC8qKlxyXG4gICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhIG51bWJlciBpbiBmaXhlZC1wb2ludCBub3RhdGlvbi5cclxuICAgICogQHBhcmFtIGZyYWN0aW9uRGlnaXRzIE51bWJlciBvZiBkaWdpdHMgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnQuIE11c3QgYmUgaW4gdGhlIHJhbmdlIDAgLSAyMCwgaW5jbHVzaXZlLlxyXG4gICAgKi9cclxuICAgcHVibGljIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHM/Om51bWJlcik6c3RyaW5nIHsgcmV0dXJuICh0aGlzLnZhbHVlID8/IE5hTikudG9GaXhlZChmcmFjdGlvbkRpZ2l0cyk7IH1cclxuICAgLyoqXHJcbiAgICAqIFJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyBhIG51bWJlciByZXByZXNlbnRlZCBpbiBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICogQHBhcmFtIGZyYWN0aW9uRGlnaXRzIE51bWJlciBvZiBkaWdpdHMgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnQuIE11c3QgYmUgaW4gdGhlIHJhbmdlIDAgLSAyMCwgaW5jbHVzaXZlLlxyXG4gICAgKi9cclxuICAgcHVibGljIHRvRXhwb25lbnRpYWwoZnJhY3Rpb25EaWdpdHM/Om51bWJlcik6c3RyaW5nIHsgcmV0dXJuICh0aGlzLnZhbHVlID8/IE5hTikudG9FeHBvbmVudGlhbChmcmFjdGlvbkRpZ2l0cyk7IH1cclxuICAgLyoqXHJcbiAgICAqIFJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyBhIG51bWJlciByZXByZXNlbnRlZCBlaXRoZXIgaW4gZXhwb25lbnRpYWwgb3IgZml4ZWQtcG9pbnQgbm90YXRpb24gd2l0aCBhIHNwZWNpZmllZCBudW1iZXIgb2YgZGlnaXRzLlxyXG4gICAgKiBAcGFyYW0gcHJlY2lzaW9uIE51bWJlciBvZiBzaWduaWZpY2FudCBkaWdpdHMuIE11c3QgYmUgaW4gdGhlIHJhbmdlIDEgLSAyMSwgaW5jbHVzaXZlLlxyXG4gICAgKi9cclxuICAgcHVibGljIHRvUHJlY2lzaW9uKHByZWNpc2lvbj86bnVtYmVyKTpzdHJpbmcgeyByZXR1cm4gKHRoaXMudmFsdWUgPz8gTmFOKS50b1ByZWNpc2lvbihwcmVjaXNpb24pOyB9XHJcbiAgIC8qKlxyXG4gICAgKiBSZXR1cm5zIHRoZSBwcmltaXRpdmUgdmFsdWUgb2YgdGhlIHNwZWNpZmllZCBvYmplY3QuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgb3ZlcnJpZGUgdmFsdWVPZigpOm51bWJlciB7IHJldHVybiAodGhpcy52YWx1ZSA/PyBOYU4pOyB9XHJcbiAgfVxyXG4iXX0=