// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Goal
import * as fhir from '../fhir.js';
// @ts-ignore
import { GoalStatusCodes } from '../fhirValueSets/GoalStatusCodes.js';
// @ts-ignore
import { GoalAchievementCodings, } from '../fhirValueSets/GoalAchievementCodings.js';
// @ts-ignore
import { GoalPriorityCodings, } from '../fhirValueSets/GoalPriorityCodings.js';
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export class GoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for GoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['measure']) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
        if (source['detail']) {
            this.detail = source.detail;
        }
        else if (source['detailQuantity']) {
            this.detail = new fhir.Quantity(source.detailQuantity);
        }
        else if (source['detailRange']) {
            this.detail = new fhir.Range(source.detailRange);
        }
        else if (source['detailCodeableConcept']) {
            this.detail = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        else if (source['detailString']) {
            this.detail = new fhir.FhirString({ value: source.detailString });
        }
        else if (source['detailBoolean']) {
            this.detail = new fhir.FhirBoolean({ value: source.detailBoolean });
        }
        else if (source['detailInteger']) {
            this.detail = new fhir.FhirInteger({ value: source.detailInteger });
        }
        else if (source['detailRatio']) {
            this.detail = new fhir.Ratio(source.detailRatio);
        }
        if (source['due']) {
            this.due = source.due;
        }
        else if (source['dueDate']) {
            this.due = new fhir.FhirDate({ value: source.dueDate });
        }
        else if (source['dueDuration']) {
            this.due = new fhir.Duration(source.dueDuration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["measure"]) {
            issues.push(...this.measure.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GoalTarget._fts_dataType = 'GoalTarget';
/**
 * Internal flag to properly serialize choice-type element Goal.target.detail[x]
 */
GoalTarget._fts_detailIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Goal.target.due[x]
 */
GoalTarget._fts_dueIsChoice = true;
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class Goal extends fhir.DomainResource {
    /**
     * Default constructor for Goal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Goal';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['lifecycleStatus']) {
            this.lifecycleStatus = new fhir.FhirCode({ value: source.lifecycleStatus });
        }
        else {
            this.lifecycleStatus = null;
        }
        if (source['achievementStatus']) {
            this.achievementStatus = new fhir.CodeableConcept(source.achievementStatus);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['description']) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        else {
            this.description = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['start']) {
            this.start = source.start;
        }
        else if (source['startDate']) {
            this.start = new fhir.FhirDate({ value: source.startDate });
        }
        else if (source['startCodeableConcept']) {
            this.start = new fhir.CodeableConcept(source.startCodeableConcept);
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.GoalTarget(x));
        }
        else {
            this.target = [];
        }
        if (source['statusDate']) {
            this.statusDate = new fhir.FhirDate({ value: source.statusDate });
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.FhirString({ value: source.statusReason });
        }
        if (source['expressedBy']) {
            this.expressedBy = new fhir.Reference(source.expressedBy);
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.Reference(x));
        }
        else {
            this.addresses = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['outcomeCode']) {
            this.outcomeCode = source.outcomeCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.outcomeCode = [];
        }
        if (source['outcomeReference']) {
            this.outcomeReference = source.outcomeReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.outcomeReference = [];
        }
    }
    /**
     * Required-bound Value Set for lifecycleStatus (Goal.lifecycleStatus)
     */
    static get lifecycleStatusRequiredCodes() {
        return GoalStatusCodes;
    }
    /**
     * Preferred-bound Value Set for achievementStatus (Goal.achievementStatus)
     */
    static get achievementStatusPreferredCodings() {
        return GoalAchievementCodings;
    }
    /**
     * Preferred-bound Value Set for priority (Goal.priority)
     */
    static get priorityPreferredCodings() {
        return GoalPriorityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Goal" fhir: Goal.resourceType:"Goal"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['lifecycleStatus']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property lifecycleStatus:fhir.FhirCode<GoalStatusCodeType> fhir: Goal.lifecycleStatus:code' });
        }
        if (this['lifecycleStatus'] && (!Object.values(GoalStatusCodes).includes(this.lifecycleStatus))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property lifecycleStatus:fhir.FhirCode<GoalStatusCodeType> fhir: Goal.lifecycleStatus:code Required binding to: GoalStatus' });
        }
        if (this["lifecycleStatus"]) {
            issues.push(...this.lifecycleStatus.doModelValidation());
        }
        if (this["achievementStatus"]) {
            issues.push(...this.achievementStatus.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation());
        }
        if (!this['description']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description:fhir.CodeableConcept fhir: Goal.description:CodeableConcept' });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject:fhir.Reference fhir: Goal.subject:Reference' });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["target"]) {
            this.target.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["statusDate"]) {
            issues.push(...this.statusDate.doModelValidation());
        }
        if (this["statusReason"]) {
            issues.push(...this.statusReason.doModelValidation());
        }
        if (this["expressedBy"]) {
            issues.push(...this.expressedBy.doModelValidation());
        }
        if (this["addresses"]) {
            this.addresses.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["outcomeCode"]) {
            this.outcomeCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["outcomeReference"]) {
            this.outcomeReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Goal._fts_dataType = 'Goal';
/**
 * Internal flag to properly serialize choice-type element Goal.start[x]
 */
Goal._fts_startIsChoice = true;
//# sourceMappingURL=data:application/json;base64,