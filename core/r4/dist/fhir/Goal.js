/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { GoalStatusCodings } from '../fhirValueSets/GoalStatusCodings.js';
import { GoalAchievementCodings } from '../fhirValueSets/GoalAchievementCodings.js';
import { GoalPriorityCodings } from '../fhirValueSets/GoalPriorityCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { FhirString } from './FhirString.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirInteger } from './FhirInteger.js';
import { Ratio } from './Ratio.js';
import { FhirDate } from './FhirDate.js';
import { Duration } from './Duration.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
var GoalTarget = /** @class */ (function (_super) {
    __extends(GoalTarget, _super);
    /**
     * Default constructor for GoalTarget - initializes any required elements to null if a value is not provided.
     */
    function GoalTarget(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['measure']) {
            _this.measure = new CodeableConcept(source.measure);
        }
        if (source['detail']) {
            _this.detail = source.detail;
        }
        else if (source['detailQuantity']) {
            _this.detail = new Quantity(source.detailQuantity);
        }
        else if (source['detailRange']) {
            _this.detail = new Range(source.detailRange);
        }
        else if (source['detailCodeableConcept']) {
            _this.detail = new CodeableConcept(source.detailCodeableConcept);
        }
        else if (source['detailString']) {
            _this.detail = new FhirString({ value: source.detailString });
        }
        else if (source['detailBoolean']) {
            _this.detail = new FhirBoolean({ value: source.detailBoolean });
        }
        else if (source['detailInteger']) {
            _this.detail = new FhirInteger({ value: source.detailInteger });
        }
        else if (source['detailRatio']) {
            _this.detail = new Ratio(source.detailRatio);
        }
        if (source['due']) {
            _this.due = source.due;
        }
        else if (source['dueDate']) {
            _this.due = new FhirDate({ value: source.dueDate });
        }
        else if (source['dueDuration']) {
            _this.due = new Duration(source.dueDuration);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GoalTarget.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["measure"]) {
            (_a = outcome.issue).push.apply(_a, this.measure.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GoalTarget._fts_dataType = 'GoalTarget';
    /**
     * Internal flag to properly serialize choice-type element Goal.target.detail[x]
     */
    GoalTarget._fts_detailIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element Goal.target.due[x]
     */
    GoalTarget._fts_dueIsChoice = true;
    return GoalTarget;
}(BackboneElement));
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
var Goal = /** @class */ (function (_super) {
    __extends(Goal, _super);
    /**
     * Default constructor for Goal - initializes any required elements to null if a value is not provided.
     */
    function Goal(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Goal';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['lifecycleStatus']) {
            _this.lifecycleStatus = source.lifecycleStatus;
        }
        else {
            _this.lifecycleStatus = null;
        }
        if (source['achievementStatus']) {
            _this.achievementStatus = new CodeableConcept(source.achievementStatus);
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['priority']) {
            _this.priority = new CodeableConcept(source.priority);
        }
        if (source['description']) {
            _this.description = new CodeableConcept(source.description);
        }
        else {
            _this.description = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['start']) {
            _this.start = source.start;
        }
        else if (source['startDate']) {
            _this.start = new FhirDate({ value: source.startDate });
        }
        else if (source['startCodeableConcept']) {
            _this.start = new CodeableConcept(source.startCodeableConcept);
        }
        if (source['target']) {
            _this.target = source.target.map(function (x) { return new GoalTarget(x); });
        }
        else {
            _this.target = [];
        }
        if (source['statusDate']) {
            _this.statusDate = new FhirDate({ value: source.statusDate });
        }
        if (source['statusReason']) {
            _this.statusReason = new FhirString({ value: source.statusReason });
        }
        if (source['expressedBy']) {
            _this.expressedBy = new Reference(source.expressedBy);
        }
        if (source['addresses']) {
            _this.addresses = source.addresses.map(function (x) { return new Reference(x); });
        }
        else {
            _this.addresses = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['outcomeCode']) {
            _this.outcomeCode = source.outcomeCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.outcomeCode = [];
        }
        if (source['outcomeReference']) {
            _this.outcomeReference = source.outcomeReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.outcomeReference = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for lifecycleStatus (Goal.lifecycleStatus)
     */
    Goal.lifecycleStatusRequiredCoding = function () {
        return GoalStatusCodings;
    };
    /**
     * Preferred-bound Value Set for achievementStatus (Goal.achievementStatus)
     */
    Goal.achievementStatusPreferredCoding = function () {
        return GoalAchievementCodings;
    };
    /**
     * Preferred-bound Value Set for priority (Goal.priority)
     */
    Goal.priorityPreferredCoding = function () {
        return GoalPriorityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Goal.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Goal" fhir: Goal.resourceType:"Goal"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['lifecycleStatus']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property lifecycleStatus:GoalStatusCodeType fhir: Goal.lifecycleStatus:code', }));
        }
        if (this["achievementStatus"]) {
            (_a = outcome.issue).push.apply(_a, this.achievementStatus.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["priority"]) {
            (_b = outcome.issue).push.apply(_b, this.priority.doModelValidation().issue);
        }
        if (!this['description']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property description:fhir.CodeableConcept fhir: Goal.description:CodeableConcept', }));
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: Goal.subject:Reference', }));
        }
        if (this["subject"]) {
            (_d = outcome.issue).push.apply(_d, this.subject.doModelValidation().issue);
        }
        if (this["target"]) {
            this.target.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["statusDate"]) {
            (_e = outcome.issue).push.apply(_e, this.statusDate.doModelValidation().issue);
        }
        if (this["statusReason"]) {
            (_f = outcome.issue).push.apply(_f, this.statusReason.doModelValidation().issue);
        }
        if (this["expressedBy"]) {
            (_g = outcome.issue).push.apply(_g, this.expressedBy.doModelValidation().issue);
        }
        if (this["addresses"]) {
            this.addresses.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["outcomeCode"]) {
            this.outcomeCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["outcomeReference"]) {
            this.outcomeReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Goal._fts_dataType = 'Goal';
    /**
     * Internal flag to properly serialize choice-type element Goal.start[x]
     */
    Goal._fts_startIsChoice = true;
    return Goal;
}(DomainResource));

export { Goal, GoalTarget };
//# sourceMappingURL=Goal.js.map
