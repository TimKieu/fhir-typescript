{"version":3,"file":"SampledData.js","sources":["../../src/fhir/SampledData.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ComplexType: SampledData\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the SampledData type.\r\n */\r\nexport interface SampledDataArgs extends fhir.FhirElementArgs {\r\n  /**\r\n   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.\r\n   */\r\n  origin: fhir.QuantityArgs|null;\r\n  /**\r\n   * This is usually a whole number.\r\n   */\r\n  period: fhir.FhirDecimal|number|undefined;\r\n  /**\r\n   * A correction factor that is applied to the sampled data points before they are added to the origin.\r\n   */\r\n  factor?: fhir.FhirDecimal|number|undefined;\r\n  /**\r\n   * The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).\r\n   */\r\n  lowerLimit?: fhir.FhirDecimal|number|undefined;\r\n  /**\r\n   * The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).\r\n   */\r\n  upperLimit?: fhir.FhirDecimal|number|undefined;\r\n  /**\r\n   * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).\r\n   */\r\n  dimensions: fhir.FhirPositiveInt|number|undefined;\r\n  /**\r\n   * Data may be missing if it is omitted for summarization purposes. In general, data is required for any actual use of a SampledData.\r\n   */\r\n  data?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.\r\n */\r\nexport class SampledData extends fhir.FhirElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'SampledData';\r\n  /**\r\n   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.\r\n   */\r\n  public origin: fhir.Quantity|null;\r\n  /**\r\n   * This is usually a whole number.\r\n   */\r\n  public period: fhir.FhirDecimal|null;\r\n  /**\r\n   * A correction factor that is applied to the sampled data points before they are added to the origin.\r\n   */\r\n  public factor?: fhir.FhirDecimal|undefined;\r\n  /**\r\n   * The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).\r\n   */\r\n  public lowerLimit?: fhir.FhirDecimal|undefined;\r\n  /**\r\n   * The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).\r\n   */\r\n  public upperLimit?: fhir.FhirDecimal|undefined;\r\n  /**\r\n   * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).\r\n   */\r\n  public dimensions: fhir.FhirPositiveInt|null;\r\n  /**\r\n   * Data may be missing if it is omitted for summarization purposes. In general, data is required for any actual use of a SampledData.\r\n   */\r\n  public data?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for SampledData - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SampledDataArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['origin']) { this.origin = new fhir.Quantity(source.origin); }\r\n    else { this.origin = null; }\r\n    if (source['period']) { this.period = new fhir.FhirDecimal({value: source.period}); }\r\n    else { this.period = null; }\r\n    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }\r\n    if (source['lowerLimit']) { this.lowerLimit = new fhir.FhirDecimal({value: source.lowerLimit}); }\r\n    if (source['upperLimit']) { this.upperLimit = new fhir.FhirDecimal({value: source.upperLimit}); }\r\n    if (source['dimensions']) { this.dimensions = new fhir.FhirPositiveInt({value: source.dimensions}); }\r\n    else { this.dimensions = null; }\r\n    if (source['data']) { this.data = new fhir.FhirString({value: source.data}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['origin']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property origin:fhir.Quantity fhir: SampledData.origin:Quantity', }));\r\n    }\r\n    if (this[\"origin\"]) { outcome.issue!.push(...this.origin.doModelValidation().issue!); }\r\n    if (!this['period']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property period:fhir.FhirDecimal fhir: SampledData.period:decimal', }));\r\n    }\r\n    if (this[\"period\"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }\r\n    if (this[\"factor\"]) { outcome.issue!.push(...this.factor.doModelValidation().issue!); }\r\n    if (this[\"lowerLimit\"]) { outcome.issue!.push(...this.lowerLimit.doModelValidation().issue!); }\r\n    if (this[\"upperLimit\"]) { outcome.issue!.push(...this.upperLimit.doModelValidation().issue!); }\r\n    if (!this['dimensions']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property dimensions:fhir.FhirPositiveInt fhir: SampledData.dimensions:positiveInt', }));\r\n    }\r\n    if (this[\"dimensions\"]) { outcome.issue!.push(...this.dimensions.doModelValidation().issue!); }\r\n    if (this[\"data\"]) { outcome.issue!.push(...this.data.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Quantity","fhir.FhirDecimal","fhir.FhirPositiveInt","fhir.FhirString","fhir.OperationOutcomeIssue","fhir.FhirElement"],"mappings":"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"}