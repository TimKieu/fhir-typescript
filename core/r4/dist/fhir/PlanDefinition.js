// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PlanDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { GoalPriorityCodings, } from '../fhirValueSets/GoalPriorityCodings.js';
// @ts-ignore
import { ActionConditionKindCodings, } from '../fhirValueSets/ActionConditionKindCodings.js';
// @ts-ignore
import { ActionRelationshipTypeCodings, } from '../fhirValueSets/ActionRelationshipTypeCodings.js';
// @ts-ignore
import { ActionParticipantTypeCodings, } from '../fhirValueSets/ActionParticipantTypeCodings.js';
// @ts-ignore
import { RequestPriorityCodings, } from '../fhirValueSets/RequestPriorityCodings.js';
// @ts-ignore
import { ActionTypeCodings, } from '../fhirValueSets/ActionTypeCodings.js';
// @ts-ignore
import { ActionGroupingBehaviorCodings, } from '../fhirValueSets/ActionGroupingBehaviorCodings.js';
// @ts-ignore
import { ActionSelectionBehaviorCodings, } from '../fhirValueSets/ActionSelectionBehaviorCodings.js';
// @ts-ignore
import { ActionRequiredBehaviorCodings, } from '../fhirValueSets/ActionRequiredBehaviorCodings.js';
// @ts-ignore
import { ActionPrecheckBehaviorCodings, } from '../fhirValueSets/ActionPrecheckBehaviorCodings.js';
// @ts-ignore
import { ActionCardinalityBehaviorCodings, } from '../fhirValueSets/ActionCardinalityBehaviorCodings.js';
// @ts-ignore
import { PlanDefinitionTypeCodings, } from '../fhirValueSets/PlanDefinitionTypeCodings.js';
// @ts-ignore
import { PublicationStatusCodings, } from '../fhirValueSets/PublicationStatusCodings.js';
/**
 * Indicates what should be done and within what timeframe.
 */
export class PlanDefinitionGoalTarget extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoalTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['measure']) {
            this.measure = new fhir.CodeableConcept(source.measure);
        }
        if (source['detail']) {
            this.detail = source.detail;
        }
        else if (source['detailQuantity']) {
            this.detail = new fhir.Quantity(source.detailQuantity);
        }
        else if (source['detailRange']) {
            this.detail = new fhir.Range(source.detailRange);
        }
        else if (source['detailCodeableConcept']) {
            this.detail = new fhir.CodeableConcept(source.detailCodeableConcept);
        }
        if (source['due']) {
            this.due = new fhir.Duration(source.due);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["measure"]) {
            issues.push(...this.measure.doModelValidation());
        }
        if (this["due"]) {
            issues.push(...this.due.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionGoalTarget._fts_dataType = 'PlanDefinitionGoalTarget';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.goal.target.detail[x]
 */
PlanDefinitionGoalTarget._fts_detailIsChoice = true;
/**
 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export class PlanDefinitionGoal extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionGoal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['description']) {
            this.description = new fhir.CodeableConcept(source.description);
        }
        else {
            this.description = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['start']) {
            this.start = new fhir.CodeableConcept(source.start);
        }
        if (source['addresses']) {
            this.addresses = source.addresses.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.addresses = [];
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.documentation = [];
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.PlanDefinitionGoalTarget(x));
        }
        else {
            this.target = [];
        }
    }
    /**
     * Preferred-bound Value Set for priority (PlanDefinition.goal.priority)
     */
    static priorityPreferredCoding() {
        return GoalPriorityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (!this['description']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description:fhir.CodeableConcept fhir: PlanDefinition.goal.description:CodeableConcept', });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation());
        }
        if (this["start"]) {
            issues.push(...this.start.doModelValidation());
        }
        if (this["addresses"]) {
            this.addresses.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["documentation"]) {
            this.documentation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["target"]) {
            this.target.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionGoal._fts_dataType = 'PlanDefinitionGoal';
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
export class PlanDefinitionActionCondition extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionCondition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['kind']) {
            this.kind = source.kind;
        }
        else {
            this.kind = null;
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Required-bound Value Set for kind (PlanDefinition.action.condition.kind)
     */
    static kindRequiredCoding() {
        return ActionConditionKindCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['kind']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property kind:ActionConditionKindCodeType fhir: PlanDefinition.action.condition.kind:code', });
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionCondition._fts_dataType = 'PlanDefinitionActionCondition';
/**
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export class PlanDefinitionActionRelatedAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['actionId']) {
            this.actionId = new fhir.FhirId({ value: source.actionId });
        }
        else {
            this.actionId = null;
        }
        if (source['relationship']) {
            this.relationship = source.relationship;
        }
        else {
            this.relationship = null;
        }
        if (source['offset']) {
            this.offset = source.offset;
        }
        else if (source['offsetDuration']) {
            this.offset = new fhir.Duration(source.offsetDuration);
        }
        else if (source['offsetRange']) {
            this.offset = new fhir.Range(source.offsetRange);
        }
    }
    /**
     * Required-bound Value Set for relationship (PlanDefinition.action.relatedAction.relationship)
     */
    static relationshipRequiredCoding() {
        return ActionRelationshipTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['actionId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actionId:fhir.FhirId fhir: PlanDefinition.action.relatedAction.actionId:id', });
        }
        if (this["actionId"]) {
            issues.push(...this.actionId.doModelValidation());
        }
        if (!this['relationship']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property relationship:ActionRelationshipTypeCodeType fhir: PlanDefinition.action.relatedAction.relationship:code', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionRelatedAction._fts_dataType = 'PlanDefinitionActionRelatedAction';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.relatedAction.offset[x]
 */
PlanDefinitionActionRelatedAction._fts_offsetIsChoice = true;
/**
 * Indicates who should participate in performing the action described.
 */
export class PlanDefinitionActionParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Required-bound Value Set for type (PlanDefinition.action.participant.type)
     */
    static typeRequiredCoding() {
        return ActionParticipantTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:ActionParticipantTypeCodeType fhir: PlanDefinition.action.participant.type:code', });
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionParticipant._fts_dataType = 'PlanDefinitionActionParticipant';
/**
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export class PlanDefinitionActionDynamicValue extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionActionDynamicValue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["path"]) {
            issues.push(...this.path.doModelValidation());
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionActionDynamicValue._fts_dataType = 'PlanDefinitionActionDynamicValue';
/**
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
export class PlanDefinitionAction extends fhir.BackboneElement {
    /**
     * Default constructor for PlanDefinitionAction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['prefix']) {
            this.prefix = new fhir.FhirString({ value: source.prefix });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['textEquivalent']) {
            this.textEquivalent = new fhir.FhirString({ value: source.textEquivalent });
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['documentation']) {
            this.documentation = source.documentation.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.documentation = [];
        }
        if (source['goalId']) {
            this.goalId = source.goalId.map((x) => new fhir.FhirId({ value: x }));
        }
        else {
            this.goalId = [];
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        if (source['trigger']) {
            this.trigger = source.trigger.map((x) => new fhir.TriggerDefinition(x));
        }
        else {
            this.trigger = [];
        }
        if (source['condition']) {
            this.condition = source.condition.map((x) => new fhir.PlanDefinitionActionCondition(x));
        }
        else {
            this.condition = [];
        }
        if (source['input']) {
            this.input = source.input.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.input = [];
        }
        if (source['output']) {
            this.output = source.output.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.output = [];
        }
        if (source['relatedAction']) {
            this.relatedAction = source.relatedAction.map((x) => new fhir.PlanDefinitionActionRelatedAction(x));
        }
        else {
            this.relatedAction = [];
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDateTime']) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime });
        }
        else if (source['timingAge']) {
            this.timing = new fhir.Age(source.timingAge);
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        else if (source['timingDuration']) {
            this.timing = new fhir.Duration(source.timingDuration);
        }
        else if (source['timingRange']) {
            this.timing = new fhir.Range(source.timingRange);
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.PlanDefinitionActionParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['groupingBehavior']) {
            this.groupingBehavior = source.groupingBehavior;
        }
        if (source['selectionBehavior']) {
            this.selectionBehavior = source.selectionBehavior;
        }
        if (source['requiredBehavior']) {
            this.requiredBehavior = source.requiredBehavior;
        }
        if (source['precheckBehavior']) {
            this.precheckBehavior = source.precheckBehavior;
        }
        if (source['cardinalityBehavior']) {
            this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source['definition']) {
            this.definition = source.definition;
        }
        else if (source['definitionCanonical']) {
            this.definition = new fhir.FhirCanonical({ value: source.definitionCanonical });
        }
        else if (source['definitionUri']) {
            this.definition = new fhir.FhirUri({ value: source.definitionUri });
        }
        if (source['transform']) {
            this.transform = new fhir.FhirCanonical({ value: source.transform });
        }
        if (source['dynamicValue']) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhir.PlanDefinitionActionDynamicValue(x));
        }
        else {
            this.dynamicValue = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Required-bound Value Set for priority (PlanDefinition.action.priority)
     */
    static priorityRequiredCoding() {
        return RequestPriorityCodings;
    }
    /**
     * Extensible-bound Value Set for type (PlanDefinition.action.type)
     */
    static typeExtensibleCoding() {
        return ActionTypeCodings;
    }
    /**
     * Required-bound Value Set for groupingBehavior (PlanDefinition.action.groupingBehavior)
     */
    static groupingBehaviorRequiredCoding() {
        return ActionGroupingBehaviorCodings;
    }
    /**
     * Required-bound Value Set for selectionBehavior (PlanDefinition.action.selectionBehavior)
     */
    static selectionBehaviorRequiredCoding() {
        return ActionSelectionBehaviorCodings;
    }
    /**
     * Required-bound Value Set for requiredBehavior (PlanDefinition.action.requiredBehavior)
     */
    static requiredBehaviorRequiredCoding() {
        return ActionRequiredBehaviorCodings;
    }
    /**
     * Required-bound Value Set for precheckBehavior (PlanDefinition.action.precheckBehavior)
     */
    static precheckBehaviorRequiredCoding() {
        return ActionPrecheckBehaviorCodings;
    }
    /**
     * Required-bound Value Set for cardinalityBehavior (PlanDefinition.action.cardinalityBehavior)
     */
    static cardinalityBehaviorRequiredCoding() {
        return ActionCardinalityBehaviorCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["prefix"]) {
            issues.push(...this.prefix.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["textEquivalent"]) {
            issues.push(...this.textEquivalent.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["documentation"]) {
            this.documentation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["goalId"]) {
            this.goalId.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["trigger"]) {
            this.trigger.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["condition"]) {
            this.condition.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["input"]) {
            this.input.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["output"]) {
            this.output.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedAction"]) {
            this.relatedAction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["transform"]) {
            issues.push(...this.transform.doModelValidation());
        }
        if (this["dynamicValue"]) {
            this.dynamicValue.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinitionAction._fts_dataType = 'PlanDefinitionAction';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.subject[x]
 */
PlanDefinitionAction._fts_subjectIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.timing[x]
 */
PlanDefinitionAction._fts_timingIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.action.definition[x]
 */
PlanDefinitionAction._fts_definitionIsChoice = true;
/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
export class PlanDefinition extends fhir.DomainResource {
    /**
     * Default constructor for PlanDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'PlanDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['usage']) {
            this.usage = new fhir.FhirString({ value: source.usage });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['library']) {
            this.library = source.library.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.library = [];
        }
        if (source['goal']) {
            this.goal = source.goal.map((x) => new fhir.PlanDefinitionGoal(x));
        }
        else {
            this.goal = [];
        }
        if (source['action']) {
            this.action = source.action.map((x) => new fhir.PlanDefinitionAction(x));
        }
        else {
            this.action = [];
        }
    }
    /**
     * Extensible-bound Value Set for type (PlanDefinition.type)
     */
    static typeExtensibleCoding() {
        return PlanDefinitionTypeCodings;
    }
    /**
     * Required-bound Value Set for status (PlanDefinition.status)
     */
    static statusRequiredCoding() {
        return PublicationStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"PlanDefinition" fhir: PlanDefinition.resourceType:"PlanDefinition"', });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["subtitle"]) {
            issues.push(...this.subtitle.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: PlanDefinition.status:code', });
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["usage"]) {
            issues.push(...this.usage.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["approvalDate"]) {
            issues.push(...this.approvalDate.doModelValidation());
        }
        if (this["lastReviewDate"]) {
            issues.push(...this.lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            issues.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["library"]) {
            this.library.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["goal"]) {
            this.goal.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["action"]) {
            this.action.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PlanDefinition._fts_dataType = 'PlanDefinition';
/**
 * Internal flag to properly serialize choice-type element PlanDefinition.subject[x]
 */
PlanDefinition._fts_subjectIsChoice = true;
//# sourceMappingURL=data:application/json;base64,