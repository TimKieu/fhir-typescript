/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { GoalPriorityCodings } from '../fhirValueSets/GoalPriorityCodings.js';
import { ActionConditionKindCodings } from '../fhirValueSets/ActionConditionKindCodings.js';
import { ActionRelationshipTypeCodings } from '../fhirValueSets/ActionRelationshipTypeCodings.js';
import { ActionParticipantTypeCodings } from '../fhirValueSets/ActionParticipantTypeCodings.js';
import { RequestPriorityCodings } from '../fhirValueSets/RequestPriorityCodings.js';
import { ActionTypeCodings } from '../fhirValueSets/ActionTypeCodings.js';
import { ActionGroupingBehaviorCodings } from '../fhirValueSets/ActionGroupingBehaviorCodings.js';
import { ActionSelectionBehaviorCodings } from '../fhirValueSets/ActionSelectionBehaviorCodings.js';
import { ActionRequiredBehaviorCodings } from '../fhirValueSets/ActionRequiredBehaviorCodings.js';
import { ActionPrecheckBehaviorCodings } from '../fhirValueSets/ActionPrecheckBehaviorCodings.js';
import { ActionCardinalityBehaviorCodings } from '../fhirValueSets/ActionCardinalityBehaviorCodings.js';
import { PlanDefinitionTypeCodings } from '../fhirValueSets/PlanDefinitionTypeCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { Duration } from './Duration.js';
import { RelatedArtifact } from './RelatedArtifact.js';
import { Expression } from './Expression.js';
import { FhirId } from './FhirId.js';
import { FhirString } from './FhirString.js';
import { Reference } from './Reference.js';
import { TriggerDefinition } from './TriggerDefinition.js';
import { DataRequirement } from './DataRequirement.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Age } from './Age.js';
import { Period } from './Period.js';
import { Timing } from './Timing.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUri } from './FhirUri.js';
import { Identifier } from './Identifier.js';
import { FhirBoolean } from './FhirBoolean.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { FhirDate } from './FhirDate.js';

// <auto-generated/>
/**
 * Indicates what should be done and within what timeframe.
 */
var PlanDefinitionGoalTarget = /** @class */ (function (_super) {
    __extends(PlanDefinitionGoalTarget, _super);
    /**
     * Default constructor for PlanDefinitionGoalTarget - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinitionGoalTarget(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['measure']) {
            _this.measure = new CodeableConcept(source.measure);
        }
        if (source['detail']) {
            _this.detail = source.detail;
        }
        else if (source['detailQuantity']) {
            _this.detail = new Quantity(source.detailQuantity);
        }
        else if (source['detailRange']) {
            _this.detail = new Range(source.detailRange);
        }
        else if (source['detailCodeableConcept']) {
            _this.detail = new CodeableConcept(source.detailCodeableConcept);
        }
        if (source['due']) {
            _this.due = new Duration(source.due);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinitionGoalTarget.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["measure"]) {
            (_a = outcome.issue).push.apply(_a, this.measure.doModelValidation().issue);
        }
        if (this["due"]) {
            (_b = outcome.issue).push.apply(_b, this.due.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinitionGoalTarget._fts_dataType = 'PlanDefinitionGoalTarget';
    /**
     * Internal flag to properly serialize choice-type element PlanDefinition.goal.target.detail[x]
     */
    PlanDefinitionGoalTarget._fts_detailIsChoice = true;
    return PlanDefinitionGoalTarget;
}(BackboneElement));
/**
 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
var PlanDefinitionGoal = /** @class */ (function (_super) {
    __extends(PlanDefinitionGoal, _super);
    /**
     * Default constructor for PlanDefinitionGoal - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinitionGoal(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['description']) {
            _this.description = new CodeableConcept(source.description);
        }
        else {
            _this.description = null;
        }
        if (source['priority']) {
            _this.priority = new CodeableConcept(source.priority);
        }
        if (source['start']) {
            _this.start = new CodeableConcept(source.start);
        }
        if (source['addresses']) {
            _this.addresses = source.addresses.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.addresses = [];
        }
        if (source['documentation']) {
            _this.documentation = source.documentation.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.documentation = [];
        }
        if (source['target']) {
            _this.target = source.target.map(function (x) { return new PlanDefinitionGoalTarget(x); });
        }
        else {
            _this.target = [];
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for priority (PlanDefinition.goal.priority)
     */
    PlanDefinitionGoal.priorityPreferredCoding = function () {
        return GoalPriorityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinitionGoal.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (!this['description']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property description:fhir.CodeableConcept fhir: PlanDefinition.goal.description:CodeableConcept', }));
        }
        if (this["description"]) {
            (_b = outcome.issue).push.apply(_b, this.description.doModelValidation().issue);
        }
        if (this["priority"]) {
            (_c = outcome.issue).push.apply(_c, this.priority.doModelValidation().issue);
        }
        if (this["start"]) {
            (_d = outcome.issue).push.apply(_d, this.start.doModelValidation().issue);
        }
        if (this["addresses"]) {
            this.addresses.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["documentation"]) {
            this.documentation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["target"]) {
            this.target.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinitionGoal._fts_dataType = 'PlanDefinitionGoal';
    return PlanDefinitionGoal;
}(BackboneElement));
/**
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
var PlanDefinitionActionCondition = /** @class */ (function (_super) {
    __extends(PlanDefinitionActionCondition, _super);
    /**
     * Default constructor for PlanDefinitionActionCondition - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinitionActionCondition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['kind']) {
            _this.kind = source.kind;
        }
        else {
            _this.kind = null;
        }
        if (source['expression']) {
            _this.expression = new Expression(source.expression);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for kind (PlanDefinition.action.condition.kind)
     */
    PlanDefinitionActionCondition.kindRequiredCoding = function () {
        return ActionConditionKindCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinitionActionCondition.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['kind']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property kind:ActionConditionKindCodeType fhir: PlanDefinition.action.condition.kind:code', }));
        }
        if (this["expression"]) {
            (_a = outcome.issue).push.apply(_a, this.expression.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinitionActionCondition._fts_dataType = 'PlanDefinitionActionCondition';
    return PlanDefinitionActionCondition;
}(BackboneElement));
/**
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
var PlanDefinitionActionRelatedAction = /** @class */ (function (_super) {
    __extends(PlanDefinitionActionRelatedAction, _super);
    /**
     * Default constructor for PlanDefinitionActionRelatedAction - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinitionActionRelatedAction(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['actionId']) {
            _this.actionId = new FhirId({ value: source.actionId });
        }
        else {
            _this.actionId = null;
        }
        if (source['relationship']) {
            _this.relationship = source.relationship;
        }
        else {
            _this.relationship = null;
        }
        if (source['offset']) {
            _this.offset = source.offset;
        }
        else if (source['offsetDuration']) {
            _this.offset = new Duration(source.offsetDuration);
        }
        else if (source['offsetRange']) {
            _this.offset = new Range(source.offsetRange);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for relationship (PlanDefinition.action.relatedAction.relationship)
     */
    PlanDefinitionActionRelatedAction.relationshipRequiredCoding = function () {
        return ActionRelationshipTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinitionActionRelatedAction.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['actionId']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property actionId:fhir.FhirId fhir: PlanDefinition.action.relatedAction.actionId:id', }));
        }
        if (this["actionId"]) {
            (_a = outcome.issue).push.apply(_a, this.actionId.doModelValidation().issue);
        }
        if (!this['relationship']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property relationship:ActionRelationshipTypeCodeType fhir: PlanDefinition.action.relatedAction.relationship:code', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinitionActionRelatedAction._fts_dataType = 'PlanDefinitionActionRelatedAction';
    /**
     * Internal flag to properly serialize choice-type element PlanDefinition.action.relatedAction.offset[x]
     */
    PlanDefinitionActionRelatedAction._fts_offsetIsChoice = true;
    return PlanDefinitionActionRelatedAction;
}(BackboneElement));
/**
 * Indicates who should participate in performing the action described.
 */
var PlanDefinitionActionParticipant = /** @class */ (function (_super) {
    __extends(PlanDefinitionActionParticipant, _super);
    /**
     * Default constructor for PlanDefinitionActionParticipant - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinitionActionParticipant(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (PlanDefinition.action.participant.type)
     */
    PlanDefinitionActionParticipant.typeRequiredCoding = function () {
        return ActionParticipantTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinitionActionParticipant.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:ActionParticipantTypeCodeType fhir: PlanDefinition.action.participant.type:code', }));
        }
        if (this["role"]) {
            (_a = outcome.issue).push.apply(_a, this.role.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinitionActionParticipant._fts_dataType = 'PlanDefinitionActionParticipant';
    return PlanDefinitionActionParticipant;
}(BackboneElement));
/**
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
var PlanDefinitionActionDynamicValue = /** @class */ (function (_super) {
    __extends(PlanDefinitionActionDynamicValue, _super);
    /**
     * Default constructor for PlanDefinitionActionDynamicValue - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinitionActionDynamicValue(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['path']) {
            _this.path = new FhirString({ value: source.path });
        }
        if (source['expression']) {
            _this.expression = new Expression(source.expression);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinitionActionDynamicValue.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["path"]) {
            (_a = outcome.issue).push.apply(_a, this.path.doModelValidation().issue);
        }
        if (this["expression"]) {
            (_b = outcome.issue).push.apply(_b, this.expression.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinitionActionDynamicValue._fts_dataType = 'PlanDefinitionActionDynamicValue';
    return PlanDefinitionActionDynamicValue;
}(BackboneElement));
/**
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
var PlanDefinitionAction = /** @class */ (function (_super) {
    __extends(PlanDefinitionAction$1, _super);
    /**
     * Default constructor for PlanDefinitionAction - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinitionAction$1(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['prefix']) {
            _this.prefix = new FhirString({ value: source.prefix });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['textEquivalent']) {
            _this.textEquivalent = new FhirString({ value: source.textEquivalent });
        }
        if (source['priority']) {
            _this.priority = source.priority;
        }
        if (source['code']) {
            _this.code = source.code.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.code = [];
        }
        if (source['reason']) {
            _this.reason = source.reason.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reason = [];
        }
        if (source['documentation']) {
            _this.documentation = source.documentation.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.documentation = [];
        }
        if (source['goalId']) {
            _this.goalId = source.goalId.map(function (x) { return new FhirId({ value: x }); });
        }
        else {
            _this.goalId = [];
        }
        if (source['subject']) {
            _this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            _this.subject = new CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            _this.subject = new Reference(source.subjectReference);
        }
        if (source['trigger']) {
            _this.trigger = source.trigger.map(function (x) { return new TriggerDefinition(x); });
        }
        else {
            _this.trigger = [];
        }
        if (source['condition']) {
            _this.condition = source.condition.map(function (x) { return new PlanDefinitionActionCondition(x); });
        }
        else {
            _this.condition = [];
        }
        if (source['input']) {
            _this.input = source.input.map(function (x) { return new DataRequirement(x); });
        }
        else {
            _this.input = [];
        }
        if (source['output']) {
            _this.output = source.output.map(function (x) { return new DataRequirement(x); });
        }
        else {
            _this.output = [];
        }
        if (source['relatedAction']) {
            _this.relatedAction = source.relatedAction.map(function (x) { return new PlanDefinitionActionRelatedAction(x); });
        }
        else {
            _this.relatedAction = [];
        }
        if (source['timing']) {
            _this.timing = source.timing;
        }
        else if (source['timingDateTime']) {
            _this.timing = new FhirDateTime({ value: source.timingDateTime });
        }
        else if (source['timingAge']) {
            _this.timing = new Age(source.timingAge);
        }
        else if (source['timingPeriod']) {
            _this.timing = new Period(source.timingPeriod);
        }
        else if (source['timingDuration']) {
            _this.timing = new Duration(source.timingDuration);
        }
        else if (source['timingRange']) {
            _this.timing = new Range(source.timingRange);
        }
        else if (source['timingTiming']) {
            _this.timing = new Timing(source.timingTiming);
        }
        if (source['participant']) {
            _this.participant = source.participant.map(function (x) { return new PlanDefinitionActionParticipant(x); });
        }
        else {
            _this.participant = [];
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['groupingBehavior']) {
            _this.groupingBehavior = source.groupingBehavior;
        }
        if (source['selectionBehavior']) {
            _this.selectionBehavior = source.selectionBehavior;
        }
        if (source['requiredBehavior']) {
            _this.requiredBehavior = source.requiredBehavior;
        }
        if (source['precheckBehavior']) {
            _this.precheckBehavior = source.precheckBehavior;
        }
        if (source['cardinalityBehavior']) {
            _this.cardinalityBehavior = source.cardinalityBehavior;
        }
        if (source['definition']) {
            _this.definition = source.definition;
        }
        else if (source['definitionCanonical']) {
            _this.definition = new FhirCanonical({ value: source.definitionCanonical });
        }
        else if (source['definitionUri']) {
            _this.definition = new FhirUri({ value: source.definitionUri });
        }
        if (source['transform']) {
            _this.transform = new FhirCanonical({ value: source.transform });
        }
        if (source['dynamicValue']) {
            _this.dynamicValue = source.dynamicValue.map(function (x) { return new PlanDefinitionActionDynamicValue(x); });
        }
        else {
            _this.dynamicValue = [];
        }
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new PlanDefinitionAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for priority (PlanDefinition.action.priority)
     */
    PlanDefinitionAction$1.priorityRequiredCoding = function () {
        return RequestPriorityCodings;
    };
    /**
     * Extensible-bound Value Set for type (PlanDefinition.action.type)
     */
    PlanDefinitionAction$1.typeExtensibleCoding = function () {
        return ActionTypeCodings;
    };
    /**
     * Required-bound Value Set for groupingBehavior (PlanDefinition.action.groupingBehavior)
     */
    PlanDefinitionAction$1.groupingBehaviorRequiredCoding = function () {
        return ActionGroupingBehaviorCodings;
    };
    /**
     * Required-bound Value Set for selectionBehavior (PlanDefinition.action.selectionBehavior)
     */
    PlanDefinitionAction$1.selectionBehaviorRequiredCoding = function () {
        return ActionSelectionBehaviorCodings;
    };
    /**
     * Required-bound Value Set for requiredBehavior (PlanDefinition.action.requiredBehavior)
     */
    PlanDefinitionAction$1.requiredBehaviorRequiredCoding = function () {
        return ActionRequiredBehaviorCodings;
    };
    /**
     * Required-bound Value Set for precheckBehavior (PlanDefinition.action.precheckBehavior)
     */
    PlanDefinitionAction$1.precheckBehaviorRequiredCoding = function () {
        return ActionPrecheckBehaviorCodings;
    };
    /**
     * Required-bound Value Set for cardinalityBehavior (PlanDefinition.action.cardinalityBehavior)
     */
    PlanDefinitionAction$1.cardinalityBehaviorRequiredCoding = function () {
        return ActionCardinalityBehaviorCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinitionAction$1.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["prefix"]) {
            (_a = outcome.issue).push.apply(_a, this.prefix.doModelValidation().issue);
        }
        if (this["title"]) {
            (_b = outcome.issue).push.apply(_b, this.title.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (this["textEquivalent"]) {
            (_d = outcome.issue).push.apply(_d, this.textEquivalent.doModelValidation().issue);
        }
        if (this["code"]) {
            this.code.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reason"]) {
            this.reason.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["documentation"]) {
            this.documentation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["goalId"]) {
            this.goalId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["trigger"]) {
            this.trigger.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["condition"]) {
            this.condition.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["input"]) {
            this.input.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["output"]) {
            this.output.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedAction"]) {
            this.relatedAction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["participant"]) {
            this.participant.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["type"]) {
            (_e = outcome.issue).push.apply(_e, this.type.doModelValidation().issue);
        }
        if (this["transform"]) {
            (_f = outcome.issue).push.apply(_f, this.transform.doModelValidation().issue);
        }
        if (this["dynamicValue"]) {
            this.dynamicValue.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinitionAction$1._fts_dataType = 'PlanDefinitionAction';
    /**
     * Internal flag to properly serialize choice-type element PlanDefinition.action.subject[x]
     */
    PlanDefinitionAction$1._fts_subjectIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element PlanDefinition.action.timing[x]
     */
    PlanDefinitionAction$1._fts_timingIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element PlanDefinition.action.definition[x]
     */
    PlanDefinitionAction$1._fts_definitionIsChoice = true;
    return PlanDefinitionAction$1;
}(BackboneElement));
/**
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
 */
var PlanDefinition = /** @class */ (function (_super) {
    __extends(PlanDefinition, _super);
    /**
     * Default constructor for PlanDefinition - initializes any required elements to null if a value is not provided.
     */
    function PlanDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'PlanDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['subtitle']) {
            _this.subtitle = new FhirString({ value: source.subtitle });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['subject']) {
            _this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            _this.subject = new CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            _this.subject = new Reference(source.subjectReference);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['usage']) {
            _this.usage = new FhirString({ value: source.usage });
        }
        if (source['copyright']) {
            _this.copyright = new FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            _this.approvalDate = new FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            _this.lastReviewDate = new FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            _this.effectivePeriod = new Period(source.effectivePeriod);
        }
        if (source['topic']) {
            _this.topic = source.topic.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.topic = [];
        }
        if (source['author']) {
            _this.author = source.author.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.author = [];
        }
        if (source['editor']) {
            _this.editor = source.editor.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.editor = [];
        }
        if (source['reviewer']) {
            _this.reviewer = source.reviewer.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.reviewer = [];
        }
        if (source['endorser']) {
            _this.endorser = source.endorser.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.endorser = [];
        }
        if (source['relatedArtifact']) {
            _this.relatedArtifact = source.relatedArtifact.map(function (x) { return new RelatedArtifact(x); });
        }
        else {
            _this.relatedArtifact = [];
        }
        if (source['library']) {
            _this.library = source.library.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.library = [];
        }
        if (source['goal']) {
            _this.goal = source.goal.map(function (x) { return new PlanDefinitionGoal(x); });
        }
        else {
            _this.goal = [];
        }
        if (source['action']) {
            _this.action = source.action.map(function (x) { return new PlanDefinitionAction(x); });
        }
        else {
            _this.action = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (PlanDefinition.type)
     */
    PlanDefinition.typeExtensibleCoding = function () {
        return PlanDefinitionTypeCodings;
    };
    /**
     * Required-bound Value Set for status (PlanDefinition.status)
     */
    PlanDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PlanDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"PlanDefinition" fhir: PlanDefinition.resourceType:"PlanDefinition"', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["title"]) {
            (_d = outcome.issue).push.apply(_d, this.title.doModelValidation().issue);
        }
        if (this["subtitle"]) {
            (_e = outcome.issue).push.apply(_e, this.subtitle.doModelValidation().issue);
        }
        if (this["type"]) {
            (_f = outcome.issue).push.apply(_f, this.type.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: PlanDefinition.status:code', }));
        }
        if (this["experimental"]) {
            (_g = outcome.issue).push.apply(_g, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_h = outcome.issue).push.apply(_h, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_j = outcome.issue).push.apply(_j, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_k = outcome.issue).push.apply(_k, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_l = outcome.issue).push.apply(_l, this.purpose.doModelValidation().issue);
        }
        if (this["usage"]) {
            (_m = outcome.issue).push.apply(_m, this.usage.doModelValidation().issue);
        }
        if (this["copyright"]) {
            (_o = outcome.issue).push.apply(_o, this.copyright.doModelValidation().issue);
        }
        if (this["approvalDate"]) {
            (_p = outcome.issue).push.apply(_p, this.approvalDate.doModelValidation().issue);
        }
        if (this["lastReviewDate"]) {
            (_q = outcome.issue).push.apply(_q, this.lastReviewDate.doModelValidation().issue);
        }
        if (this["effectivePeriod"]) {
            (_r = outcome.issue).push.apply(_r, this.effectivePeriod.doModelValidation().issue);
        }
        if (this["topic"]) {
            this.topic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["author"]) {
            this.author.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["editor"]) {
            this.editor.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["endorser"]) {
            this.endorser.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["library"]) {
            this.library.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["goal"]) {
            this.goal.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["action"]) {
            this.action.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PlanDefinition._fts_dataType = 'PlanDefinition';
    /**
     * Internal flag to properly serialize choice-type element PlanDefinition.subject[x]
     */
    PlanDefinition._fts_subjectIsChoice = true;
    return PlanDefinition;
}(DomainResource));

export { PlanDefinition, PlanDefinitionAction, PlanDefinitionActionCondition, PlanDefinitionActionDynamicValue, PlanDefinitionActionParticipant, PlanDefinitionActionRelatedAction, PlanDefinitionGoal, PlanDefinitionGoalTarget };
//# sourceMappingURL=PlanDefinition.js.map
