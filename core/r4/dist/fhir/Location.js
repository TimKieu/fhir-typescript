/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { DaysOfWeekCodings } from '../fhirValueSets/DaysOfWeekCodings.js';
import { LocationStatusCodings } from '../fhirValueSets/LocationStatusCodings.js';
import { V20116Codings } from '../fhirValueSets/V20116Codings.js';
import { LocationModeCodings } from '../fhirValueSets/LocationModeCodings.js';
import { V3ServiceDeliveryLocationRoleTypeCodings } from '../fhirValueSets/V3ServiceDeliveryLocationRoleTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirTime } from './FhirTime.js';
import { Identifier } from './Identifier.js';
import { Coding } from './Coding.js';
import { FhirString } from './FhirString.js';
import { CodeableConcept } from './CodeableConcept.js';
import { ContactPoint } from './ContactPoint.js';
import { Address } from './Address.js';
import { Reference } from './Reference.js';

// <auto-generated/>
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
var LocationPosition = /** @class */ (function (_super) {
    __extends(LocationPosition, _super);
    /**
     * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
     */
    function LocationPosition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['longitude']) {
            _this.longitude = new FhirDecimal({ value: source.longitude });
        }
        else {
            _this.longitude = null;
        }
        if (source['latitude']) {
            _this.latitude = new FhirDecimal({ value: source.latitude });
        }
        else {
            _this.latitude = null;
        }
        if (source['altitude']) {
            _this.altitude = new FhirDecimal({ value: source.altitude });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    LocationPosition.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['longitude']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property longitude:fhir.FhirDecimal fhir: Location.position.longitude:decimal', }));
        }
        if (this["longitude"]) {
            (_a = outcome.issue).push.apply(_a, this.longitude.doModelValidation().issue);
        }
        if (!this['latitude']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property latitude:fhir.FhirDecimal fhir: Location.position.latitude:decimal', }));
        }
        if (this["latitude"]) {
            (_b = outcome.issue).push.apply(_b, this.latitude.doModelValidation().issue);
        }
        if (this["altitude"]) {
            (_c = outcome.issue).push.apply(_c, this.altitude.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    LocationPosition._fts_dataType = 'LocationPosition';
    return LocationPosition;
}(BackboneElement));
/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
var LocationHoursOfOperation = /** @class */ (function (_super) {
    __extends(LocationHoursOfOperation, _super);
    /**
     * Default constructor for LocationHoursOfOperation - initializes any required elements to null if a value is not provided.
     */
    function LocationHoursOfOperation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['daysOfWeek']) {
            _this.daysOfWeek = source.daysOfWeek.map(function (x) { return x; });
        }
        else {
            _this.daysOfWeek = [];
        }
        if (source['allDay']) {
            _this.allDay = new FhirBoolean({ value: source.allDay });
        }
        if (source['openingTime']) {
            _this.openingTime = new FhirTime({ value: source.openingTime });
        }
        if (source['closingTime']) {
            _this.closingTime = new FhirTime({ value: source.closingTime });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for daysOfWeek (Location.hoursOfOperation.daysOfWeek)
     */
    LocationHoursOfOperation.daysOfWeekRequiredCoding = function () {
        return DaysOfWeekCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    LocationHoursOfOperation.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["allDay"]) {
            (_a = outcome.issue).push.apply(_a, this.allDay.doModelValidation().issue);
        }
        if (this["openingTime"]) {
            (_b = outcome.issue).push.apply(_b, this.openingTime.doModelValidation().issue);
        }
        if (this["closingTime"]) {
            (_c = outcome.issue).push.apply(_c, this.closingTime.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    LocationHoursOfOperation._fts_dataType = 'LocationHoursOfOperation';
    return LocationHoursOfOperation;
}(BackboneElement));
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
var Location = /** @class */ (function (_super) {
    __extends(Location, _super);
    /**
     * Default constructor for Location - initializes any required elements to null if a value is not provided.
     */
    function Location(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Location';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['operationalStatus']) {
            _this.operationalStatus = new Coding(source.operationalStatus);
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['alias']) {
            _this.alias = source.alias.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.alias = [];
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['mode']) {
            _this.mode = source.mode;
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['address']) {
            _this.address = new Address(source.address);
        }
        if (source['physicalType']) {
            _this.physicalType = new CodeableConcept(source.physicalType);
        }
        if (source['position']) {
            _this.position = new LocationPosition(source.position);
        }
        if (source['managingOrganization']) {
            _this.managingOrganization = new Reference(source.managingOrganization);
        }
        if (source['partOf']) {
            _this.partOf = new Reference(source.partOf);
        }
        if (source['hoursOfOperation']) {
            _this.hoursOfOperation = source.hoursOfOperation.map(function (x) { return new LocationHoursOfOperation(x); });
        }
        else {
            _this.hoursOfOperation = [];
        }
        if (source['availabilityExceptions']) {
            _this.availabilityExceptions = new FhirString({ value: source.availabilityExceptions });
        }
        if (source['endpoint']) {
            _this.endpoint = source.endpoint.map(function (x) { return new Reference(x); });
        }
        else {
            _this.endpoint = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Location.status)
     */
    Location.statusRequiredCoding = function () {
        return LocationStatusCodings;
    };
    /**
     * Preferred-bound Value Set for operationalStatus (Location.operationalStatus)
     */
    Location.operationalStatusPreferredCoding = function () {
        return V20116Codings;
    };
    /**
     * Required-bound Value Set for mode (Location.mode)
     */
    Location.modeRequiredCoding = function () {
        return LocationModeCodings;
    };
    /**
     * Extensible-bound Value Set for type (Location.type)
     */
    Location.typeExtensibleCoding = function () {
        return V3ServiceDeliveryLocationRoleTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Location.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Location" fhir: Location.resourceType:"Location"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["operationalStatus"]) {
            (_a = outcome.issue).push.apply(_a, this.operationalStatus.doModelValidation().issue);
        }
        if (this["name"]) {
            (_b = outcome.issue).push.apply(_b, this.name.doModelValidation().issue);
        }
        if (this["alias"]) {
            this.alias.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["address"]) {
            (_d = outcome.issue).push.apply(_d, this.address.doModelValidation().issue);
        }
        if (this["physicalType"]) {
            (_e = outcome.issue).push.apply(_e, this.physicalType.doModelValidation().issue);
        }
        if (this["position"]) {
            (_f = outcome.issue).push.apply(_f, this.position.doModelValidation().issue);
        }
        if (this["managingOrganization"]) {
            (_g = outcome.issue).push.apply(_g, this.managingOrganization.doModelValidation().issue);
        }
        if (this["partOf"]) {
            (_h = outcome.issue).push.apply(_h, this.partOf.doModelValidation().issue);
        }
        if (this["hoursOfOperation"]) {
            this.hoursOfOperation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["availabilityExceptions"]) {
            (_j = outcome.issue).push.apply(_j, this.availabilityExceptions.doModelValidation().issue);
        }
        if (this["endpoint"]) {
            this.endpoint.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Location._fts_dataType = 'Location';
    return Location;
}(DomainResource));

export { Location, LocationHoursOfOperation, LocationPosition };
//# sourceMappingURL=Location.js.map
