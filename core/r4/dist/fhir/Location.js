// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Location
import * as fhir from '../fhir.js';
// @ts-ignore
import { DaysOfWeekCodes } from '../fhirValueSets/DaysOfWeekCodes.js';
// @ts-ignore
import { LocationStatusCodes } from '../fhirValueSets/LocationStatusCodes.js';
// @ts-ignore
import { V20116Codings, } from '../fhirValueSets/V20116Codings.js';
// @ts-ignore
import { LocationModeCodes } from '../fhirValueSets/LocationModeCodes.js';
// @ts-ignore
import { V3ServiceDeliveryLocationRoleTypeCodings, } from '../fhirValueSets/V3ServiceDeliveryLocationRoleTypeCodings.js';
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export class LocationPosition extends fhir.BackboneElement {
    /**
     * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['longitude']) {
            this.longitude = new fhir.FhirDecimal({ value: source.longitude });
        }
        else {
            this.longitude = null;
        }
        if (source['_longitude']) {
            if (this.longitude) {
                this.longitude.addExtendedProperties(source._longitude);
            }
            else {
                this.longitude = new fhir.FhirDecimal(source._longitude);
            }
        }
        if (source['latitude']) {
            this.latitude = new fhir.FhirDecimal({ value: source.latitude });
        }
        else {
            this.latitude = null;
        }
        if (source['_latitude']) {
            if (this.latitude) {
                this.latitude.addExtendedProperties(source._latitude);
            }
            else {
                this.latitude = new fhir.FhirDecimal(source._latitude);
            }
        }
        if (source['altitude']) {
            this.altitude = new fhir.FhirDecimal({ value: source.altitude });
        }
        if (source['_altitude']) {
            if (this.altitude) {
                this.altitude.addExtendedProperties(source._altitude);
            }
            else {
                this.altitude = new fhir.FhirDecimal(source._altitude);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Location.position';
        }
        if (!this['longitude']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property longitude fhir: Location.position.longitude:decimal', expression: [expression] });
        }
        if (this["longitude"]) {
            issues.push(...this.longitude.doModelValidation(expression + '.longitude'));
        }
        if (!this['latitude']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property latitude fhir: Location.position.latitude:decimal', expression: [expression] });
        }
        if (this["latitude"]) {
            issues.push(...this.latitude.doModelValidation(expression + '.latitude'));
        }
        if (this["altitude"]) {
            issues.push(...this.altitude.doModelValidation(expression + '.altitude'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LocationPosition._fts_dataType = 'LocationPosition';
/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
export class LocationHoursOfOperation extends fhir.BackboneElement {
    /**
     * Default constructor for LocationHoursOfOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['daysOfWeek']) {
            this.daysOfWeek = source.daysOfWeek.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.daysOfWeek = [];
        }
        if (source['_daysOfWeek']) {
            source._daysOfWeek.forEach((x, i) => {
                if (this.daysOfWeek.length >= i) {
                    if (x) {
                        this.daysOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.daysOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['allDay']) {
            this.allDay = new fhir.FhirBoolean({ value: source.allDay });
        }
        if (source['_allDay']) {
            if (this.allDay) {
                this.allDay.addExtendedProperties(source._allDay);
            }
            else {
                this.allDay = new fhir.FhirBoolean(source._allDay);
            }
        }
        if (source['openingTime']) {
            this.openingTime = new fhir.FhirTime({ value: source.openingTime });
        }
        if (source['_openingTime']) {
            if (this.openingTime) {
                this.openingTime.addExtendedProperties(source._openingTime);
            }
            else {
                this.openingTime = new fhir.FhirTime(source._openingTime);
            }
        }
        if (source['closingTime']) {
            this.closingTime = new fhir.FhirTime({ value: source.closingTime });
        }
        if (source['_closingTime']) {
            if (this.closingTime) {
                this.closingTime.addExtendedProperties(source._closingTime);
            }
            else {
                this.closingTime = new fhir.FhirTime(source._closingTime);
            }
        }
    }
    /**
     * Required-bound Value Set for daysOfWeek (Location.hoursOfOperation.daysOfWeek)
     */
    static get daysOfWeekRequiredCodes() {
        return DaysOfWeekCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Location.hoursOfOperation';
        }
        if (this['daysOfWeek']) {
            this.daysOfWeek.forEach((v) => {
                if (!Object.values(DaysOfWeekCodes).includes(v.value)) {
                    issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property daysOfWeek fhir: Location.hoursOfOperation.daysOfWeek:code Required binding to: DaysOfWeek', expression: [expression] });
                }
            });
        }
        if (this["daysOfWeek"]) {
            this.daysOfWeek.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.daysOfWeek[${i}]`)); });
        }
        if (this["allDay"]) {
            issues.push(...this.allDay.doModelValidation(expression + '.allDay'));
        }
        if (this["openingTime"]) {
            issues.push(...this.openingTime.doModelValidation(expression + '.openingTime'));
        }
        if (this["closingTime"]) {
            issues.push(...this.closingTime.doModelValidation(expression + '.closingTime'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LocationHoursOfOperation._fts_dataType = 'LocationHoursOfOperation';
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export class Location extends fhir.DomainResource {
    /**
     * Default constructor for Location - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Location';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.Coding(source.operationalStatus);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['mode']) {
            this.mode = new fhir.FhirCode({ value: source.mode });
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source['position']) {
            this.position = new fhir.LocationPosition(source.position);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
        if (source['hoursOfOperation']) {
            this.hoursOfOperation = source.hoursOfOperation.map((x) => new fhir.LocationHoursOfOperation(x));
        }
        else {
            this.hoursOfOperation = [];
        }
        if (source['availabilityExceptions']) {
            this.availabilityExceptions = new fhir.FhirString({ value: source.availabilityExceptions });
        }
        if (source['_availabilityExceptions']) {
            if (this.availabilityExceptions) {
                this.availabilityExceptions.addExtendedProperties(source._availabilityExceptions);
            }
            else {
                this.availabilityExceptions = new fhir.FhirString(source._availabilityExceptions);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Required-bound Value Set for status (Location.status)
     */
    static get statusRequiredCodes() {
        return LocationStatusCodes;
    }
    /**
     * Preferred-bound Value Set for operationalStatus (Location.operationalStatus)
     */
    static get operationalStatusPreferredCodings() {
        return V20116Codings;
    }
    /**
     * Required-bound Value Set for mode (Location.mode)
     */
    static get modeRequiredCodes() {
        return LocationModeCodes;
    }
    /**
     * Extensible-bound Value Set for type (Location.type)
     */
    static get typeExtensibleCodings() {
        return V3ServiceDeliveryLocationRoleTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Location';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Location.resourceType:"Location"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this['status'] && (!Object.values(LocationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: Location.status:code Required binding to: LocationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["operationalStatus"]) {
            issues.push(...this.operationalStatus.doModelValidation(expression + '.operationalStatus'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["alias"]) {
            this.alias.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.alias[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this['mode'] && (!Object.values(LocationModeCodes).includes(this.mode.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property mode fhir: Location.mode:code Required binding to: LocationMode', expression: [expression] });
        }
        if (this["mode"]) {
            issues.push(...this.mode.doModelValidation(expression + '.mode'));
        }
        if (this["type"]) {
            this.type.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.type[${i}]`)); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.telecom[${i}]`)); });
        }
        if (this["address"]) {
            issues.push(...this.address.doModelValidation(expression + '.address'));
        }
        if (this["physicalType"]) {
            issues.push(...this.physicalType.doModelValidation(expression + '.physicalType'));
        }
        if (this["position"]) {
            issues.push(...this.position.doModelValidation(expression + '.position'));
        }
        if (this["managingOrganization"]) {
            issues.push(...this.managingOrganization.doModelValidation(expression + '.managingOrganization'));
        }
        if (this["partOf"]) {
            issues.push(...this.partOf.doModelValidation(expression + '.partOf'));
        }
        if (this["hoursOfOperation"]) {
            this.hoursOfOperation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.hoursOfOperation[${i}]`)); });
        }
        if (this["availabilityExceptions"]) {
            issues.push(...this.availabilityExceptions.doModelValidation(expression + '.availabilityExceptions'));
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.endpoint[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Location._fts_dataType = 'Location';
//# sourceMappingURL=data:application/json;base64,