// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Location
import * as fhir from '../fhir.js';
// @ts-ignore
import { DaysOfWeekCodings, } from '../fhirValueSets/DaysOfWeekCodings.js';
// @ts-ignore
import { LocationStatusCodings, } from '../fhirValueSets/LocationStatusCodings.js';
// @ts-ignore
import { V20116Codings, } from '../fhirValueSets/V20116Codings.js';
// @ts-ignore
import { LocationModeCodings, } from '../fhirValueSets/LocationModeCodings.js';
// @ts-ignore
import { V3ServiceDeliveryLocationRoleTypeCodings, } from '../fhirValueSets/V3ServiceDeliveryLocationRoleTypeCodings.js';
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export class LocationPosition extends fhir.BackboneElement {
    /**
     * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['longitude']) {
            this.longitude = new fhir.FhirDecimal({ value: source.longitude });
        }
        else {
            this.longitude = null;
        }
        if (source['latitude']) {
            this.latitude = new fhir.FhirDecimal({ value: source.latitude });
        }
        else {
            this.latitude = null;
        }
        if (source['altitude']) {
            this.altitude = new fhir.FhirDecimal({ value: source.altitude });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['longitude']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property longitude:fhir.FhirDecimal fhir: Location.position.longitude:decimal', });
        }
        if (this["longitude"]) {
            issues.push(...this.longitude.doModelValidation());
        }
        if (!this['latitude']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property latitude:fhir.FhirDecimal fhir: Location.position.latitude:decimal', });
        }
        if (this["latitude"]) {
            issues.push(...this.latitude.doModelValidation());
        }
        if (this["altitude"]) {
            issues.push(...this.altitude.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LocationPosition._fts_dataType = 'LocationPosition';
/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
export class LocationHoursOfOperation extends fhir.BackboneElement {
    /**
     * Default constructor for LocationHoursOfOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['daysOfWeek']) {
            this.daysOfWeek = source.daysOfWeek.map((x) => x);
        }
        else {
            this.daysOfWeek = [];
        }
        if (source['allDay']) {
            this.allDay = new fhir.FhirBoolean({ value: source.allDay });
        }
        if (source['openingTime']) {
            this.openingTime = new fhir.FhirTime({ value: source.openingTime });
        }
        if (source['closingTime']) {
            this.closingTime = new fhir.FhirTime({ value: source.closingTime });
        }
    }
    /**
     * Required-bound Value Set for daysOfWeek (Location.hoursOfOperation.daysOfWeek)
     */
    static daysOfWeekRequiredCoding() {
        return DaysOfWeekCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["allDay"]) {
            issues.push(...this.allDay.doModelValidation());
        }
        if (this["openingTime"]) {
            issues.push(...this.openingTime.doModelValidation());
        }
        if (this["closingTime"]) {
            issues.push(...this.closingTime.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LocationHoursOfOperation._fts_dataType = 'LocationHoursOfOperation';
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export class Location extends fhir.DomainResource {
    /**
     * Default constructor for Location - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Location';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.Coding(source.operationalStatus);
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['alias']) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.alias = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['mode']) {
            this.mode = source.mode;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address);
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType);
        }
        if (source['position']) {
            this.position = new fhir.LocationPosition(source.position);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf);
        }
        if (source['hoursOfOperation']) {
            this.hoursOfOperation = source.hoursOfOperation.map((x) => new fhir.LocationHoursOfOperation(x));
        }
        else {
            this.hoursOfOperation = [];
        }
        if (source['availabilityExceptions']) {
            this.availabilityExceptions = new fhir.FhirString({ value: source.availabilityExceptions });
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Required-bound Value Set for status (Location.status)
     */
    static statusRequiredCoding() {
        return LocationStatusCodings;
    }
    /**
     * Preferred-bound Value Set for operationalStatus (Location.operationalStatus)
     */
    static operationalStatusPreferredCoding() {
        return V20116Codings;
    }
    /**
     * Required-bound Value Set for mode (Location.mode)
     */
    static modeRequiredCoding() {
        return LocationModeCodings;
    }
    /**
     * Extensible-bound Value Set for type (Location.type)
     */
    static typeExtensibleCoding() {
        return V3ServiceDeliveryLocationRoleTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Location" fhir: Location.resourceType:"Location"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["operationalStatus"]) {
            issues.push(...this.operationalStatus.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["alias"]) {
            this.alias.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            issues.push(...this.address.doModelValidation());
        }
        if (this["physicalType"]) {
            issues.push(...this.physicalType.doModelValidation());
        }
        if (this["position"]) {
            issues.push(...this.position.doModelValidation());
        }
        if (this["managingOrganization"]) {
            issues.push(...this.managingOrganization.doModelValidation());
        }
        if (this["partOf"]) {
            issues.push(...this.partOf.doModelValidation());
        }
        if (this["hoursOfOperation"]) {
            this.hoursOfOperation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["availabilityExceptions"]) {
            issues.push(...this.availabilityExceptions.doModelValidation());
        }
        if (this["endpoint"]) {
            this.endpoint.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Location._fts_dataType = 'Location';
//# sourceMappingURL=data:application/json;base64,