// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Location
import * as fhir from '../fhir.js';
// @ts-ignore
import { DaysOfWeekVsValidation } from '../fhirValueSets/DaysOfWeekVsValidation.js';
// @ts-ignore
import { LocationStatusVsValidation } from '../fhirValueSets/LocationStatusVsValidation.js';
// @ts-ignore
import { LocationModeVsValidation } from '../fhirValueSets/LocationModeVsValidation.js';
/**
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 */
export class LocationPosition extends fhir.BackboneElement {
    /**
     * Default constructor for LocationPosition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['longitude'] !== undefined) {
            this.longitude = new fhir.FhirDecimal({ value: source.longitude }, options);
        }
        else {
            this.longitude = null;
        }
        if (source['_longitude']) {
            if (this.longitude) {
                this.longitude.addExtendedProperties(source._longitude);
            }
            else {
                this.longitude = new fhir.FhirDecimal(source._longitude, options);
            }
        }
        if (source['latitude'] !== undefined) {
            this.latitude = new fhir.FhirDecimal({ value: source.latitude }, options);
        }
        else {
            this.latitude = null;
        }
        if (source['_latitude']) {
            if (this.latitude) {
                this.latitude.addExtendedProperties(source._latitude);
            }
            else {
                this.latitude = new fhir.FhirDecimal(source._latitude, options);
            }
        }
        if (source['altitude'] !== undefined) {
            this.altitude = new fhir.FhirDecimal({ value: source.altitude }, options);
        }
        if (source['_altitude']) {
            if (this.altitude) {
                this.altitude.addExtendedProperties(source._altitude);
            }
            else {
                this.altitude = new fhir.FhirDecimal(source._altitude, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Location.position';
        }
        iss.push(...this.vRS('longitude', exp));
        iss.push(...this.vRS('latitude', exp));
        iss.push(...this.vOS('altitude', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LocationPosition._fts_dataType = 'LocationPosition';
/**
 * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
 * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
 */
export class LocationHoursOfOperation extends fhir.BackboneElement {
    /**
     * Default constructor for LocationHoursOfOperation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['daysOfWeek'] !== undefined) {
            this.daysOfWeek = source.daysOfWeek.map((x) => new fhir.FhirCode({ value: x }, options));
        }
        else {
            this.daysOfWeek = [];
        }
        if (source['_daysOfWeek']) {
            source._daysOfWeek.forEach((x, i) => {
                if (this.daysOfWeek.length >= i) {
                    if (x) {
                        this.daysOfWeek[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.daysOfWeek.push(new fhir.FhirCode(x));
                    }
                }
            });
        }
        if (source['allDay'] !== undefined) {
            this.allDay = new fhir.FhirBoolean({ value: source.allDay }, options);
        }
        if (source['_allDay']) {
            if (this.allDay) {
                this.allDay.addExtendedProperties(source._allDay);
            }
            else {
                this.allDay = new fhir.FhirBoolean(source._allDay, options);
            }
        }
        if (source['openingTime'] !== undefined) {
            this.openingTime = new fhir.FhirTime({ value: source.openingTime }, options);
        }
        if (source['_openingTime']) {
            if (this.openingTime) {
                this.openingTime.addExtendedProperties(source._openingTime);
            }
            else {
                this.openingTime = new fhir.FhirTime(source._openingTime, options);
            }
        }
        if (source['closingTime'] !== undefined) {
            this.closingTime = new fhir.FhirTime({ value: source.closingTime }, options);
        }
        if (source['_closingTime']) {
            if (this.closingTime) {
                this.closingTime.addExtendedProperties(source._closingTime);
            }
            else {
                this.closingTime = new fhir.FhirTime(source._closingTime, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Location.hoursOfOperation';
        }
        iss.push(...this.vOAV('daysOfWeek', exp, 'DaysOfWeek', DaysOfWeekVsValidation, 'r'));
        iss.push(...this.vOS('allDay', exp));
        iss.push(...this.vOS('openingTime', exp));
        iss.push(...this.vOS('closingTime', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
LocationHoursOfOperation._fts_dataType = 'LocationHoursOfOperation';
/**
 * Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export class Location extends fhir.DomainResource {
    /**
     * Default constructor for Location - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Location';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['operationalStatus']) {
            this.operationalStatus = new fhir.Coding(source.operationalStatus, options);
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['alias'] !== undefined) {
            this.alias = source.alias.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.alias = [];
        }
        if (source['_alias']) {
            source._alias.forEach((x, i) => {
                if (this.alias.length >= i) {
                    if (x) {
                        this.alias[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.alias.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['mode'] !== undefined) {
            this.mode = new fhir.FhirCode({ value: source.mode }, options);
        }
        if (source['_mode']) {
            if (this.mode) {
                this.mode.addExtendedProperties(source._mode);
            }
            else {
                this.mode = new fhir.FhirCode(source._mode, options);
            }
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.type = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x, options));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = new fhir.Address(source.address, options);
        }
        if (source['physicalType']) {
            this.physicalType = new fhir.CodeableConcept(source.physicalType, options);
        }
        if (source['position']) {
            this.position = new fhir.LocationPosition(source.position, options);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization, options);
        }
        if (source['partOf']) {
            this.partOf = new fhir.Reference(source.partOf, options);
        }
        if (source['hoursOfOperation']) {
            this.hoursOfOperation = source.hoursOfOperation.map((x) => new fhir.LocationHoursOfOperation(x, options));
        }
        else {
            this.hoursOfOperation = [];
        }
        if (source['availabilityExceptions'] !== undefined) {
            this.availabilityExceptions = new fhir.FhirString({ value: source.availabilityExceptions }, options);
        }
        if (source['_availabilityExceptions']) {
            if (this.availabilityExceptions) {
                this.availabilityExceptions.addExtendedProperties(source._availabilityExceptions);
            }
            else {
                this.availabilityExceptions = new fhir.FhirString(source._availabilityExceptions, options);
            }
        }
        if (source['endpoint']) {
            this.endpoint = source.endpoint.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.endpoint = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Location';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('status', exp, 'LocationStatus', LocationStatusVsValidation, 'r'));
        iss.push(...this.vOS('operationalStatus', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOA('alias', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOSV('mode', exp, 'LocationMode', LocationModeVsValidation, 'r'));
        iss.push(...this.vOA('type', exp));
        iss.push(...this.vOA('telecom', exp));
        iss.push(...this.vOS('address', exp));
        iss.push(...this.vOS('physicalType', exp));
        iss.push(...this.vOS('position', exp));
        iss.push(...this.vOS('managingOrganization', exp));
        iss.push(...this.vOS('partOf', exp));
        iss.push(...this.vOA('hoursOfOperation', exp));
        iss.push(...this.vOS('availabilityExceptions', exp));
        iss.push(...this.vOA('endpoint', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Location._fts_dataType = 'Location';
//# sourceMappingURL=data:application/json;base64,