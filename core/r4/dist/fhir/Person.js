// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Person
import * as fhir from '../fhir.js';
// @ts-ignore
import { IdentityAssuranceLevelCodes } from '../fhirValueSets/IdentityAssuranceLevelCodes.js';
// @ts-ignore
import { AdministrativeGenderCodes } from '../fhirValueSets/AdministrativeGenderCodes.js';
/**
 * Link to a resource that concerns the same actual person.
 */
export class PersonLink extends fhir.BackboneElement {
    /**
     * Default constructor for PersonLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
        if (source['assurance']) {
            this.assurance = new fhir.FhirCode({ value: source.assurance });
        }
        if (source['_assurance']) {
            if (this.assurance) {
                this.assurance.addExtendedProperties(source._assurance);
            }
            else {
                this.assurance = new fhir.FhirCode(source._assurance);
            }
        }
    }
    /**
     * Required-bound Value Set for assurance (Person.link.assurance)
     */
    static get assuranceRequiredCodes() {
        return IdentityAssuranceLevelCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Person.link';
        }
        if (!this['target']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target fhir: Person.link.target:Reference', expression: [expression] });
        }
        if (this["target"]) {
            issues.push(...this.target.doModelValidation(expression + '.target'));
        }
        if (this['assurance'] && (!Object.values(IdentityAssuranceLevelCodes).includes(this.assurance.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property assurance fhir: Person.link.assurance:code Required binding to: IdentityAssuranceLevel', expression: [expression] });
        }
        if (this["assurance"]) {
            issues.push(...this.assurance.doModelValidation(expression + '.assurance'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PersonLink._fts_dataType = 'PersonLink';
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export class Person extends fhir.DomainResource {
    /**
     * Default constructor for Person - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Person';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        else {
            this.name = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['_gender']) {
            if (this.gender) {
                this.gender.addExtendedProperties(source._gender);
            }
            else {
                this.gender = new fhir.FhirCode(source._gender);
            }
        }
        if (source['birthDate']) {
            this.birthDate = new fhir.FhirDate({ value: source.birthDate });
        }
        if (source['_birthDate']) {
            if (this.birthDate) {
                this.birthDate.addExtendedProperties(source._birthDate);
            }
            else {
                this.birthDate = new fhir.FhirDate(source._birthDate);
            }
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['_active']) {
            if (this.active) {
                this.active.addExtendedProperties(source._active);
            }
            else {
                this.active = new fhir.FhirBoolean(source._active);
            }
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.PersonLink(x));
        }
        else {
            this.link = [];
        }
    }
    /**
     * Required-bound Value Set for gender (Person.gender)
     */
    static get genderRequiredCodes() {
        return AdministrativeGenderCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Person';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Person.resourceType:"Person"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["name"]) {
            this.name.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.name[${i}]`)); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.telecom[${i}]`)); });
        }
        if (this['gender'] && (!Object.values(AdministrativeGenderCodes).includes(this.gender.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property gender fhir: Person.gender:code Required binding to: AdministrativeGender', expression: [expression] });
        }
        if (this["gender"]) {
            issues.push(...this.gender.doModelValidation(expression + '.gender'));
        }
        if (this["birthDate"]) {
            issues.push(...this.birthDate.doModelValidation(expression + '.birthDate'));
        }
        if (this["address"]) {
            this.address.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.address[${i}]`)); });
        }
        if (this["photo"]) {
            issues.push(...this.photo.doModelValidation(expression + '.photo'));
        }
        if (this["managingOrganization"]) {
            issues.push(...this.managingOrganization.doModelValidation(expression + '.managingOrganization'));
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation(expression + '.active'));
        }
        if (this["link"]) {
            this.link.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.link[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Person._fts_dataType = 'Person';
//# sourceMappingURL=data:application/json;base64,