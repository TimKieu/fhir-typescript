// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Person
import * as fhir from '../fhir.js';
// @ts-ignore
import { IdentityAssuranceLevelCodings, } from '../fhirValueSets/IdentityAssuranceLevelCodings.js';
// @ts-ignore
import { AdministrativeGenderCodings, } from '../fhirValueSets/AdministrativeGenderCodings.js';
/**
 * Link to a resource that concerns the same actual person.
 */
export class PersonLink extends fhir.BackboneElement {
    /**
     * Default constructor for PersonLink - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        else {
            this.target = null;
        }
        if (source['assurance']) {
            this.assurance = source.assurance;
        }
    }
    /**
     * Required-bound Value Set for assurance (Person.link.assurance)
     */
    static assuranceRequiredCoding() {
        return IdentityAssuranceLevelCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['target']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target:fhir.Reference fhir: Person.link.target:Reference', });
        }
        if (this["target"]) {
            issues.push(...this.target.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PersonLink._fts_dataType = 'PersonLink';
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export class Person extends fhir.DomainResource {
    /**
     * Default constructor for Person - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Person';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        else {
            this.name = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['gender']) {
            this.gender = source.gender;
        }
        if (source['birthDate']) {
            this.birthDate = new fhir.FhirDate({ value: source.birthDate });
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['photo']) {
            this.photo = new fhir.Attachment(source.photo);
        }
        if (source['managingOrganization']) {
            this.managingOrganization = new fhir.Reference(source.managingOrganization);
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['link']) {
            this.link = source.link.map((x) => new fhir.PersonLink(x));
        }
        else {
            this.link = [];
        }
    }
    /**
     * Required-bound Value Set for gender (Person.gender)
     */
    static genderRequiredCoding() {
        return AdministrativeGenderCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Person" fhir: Person.resourceType:"Person"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["name"]) {
            this.name.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["birthDate"]) {
            issues.push(...this.birthDate.doModelValidation());
        }
        if (this["address"]) {
            this.address.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["photo"]) {
            issues.push(...this.photo.doModelValidation());
        }
        if (this["managingOrganization"]) {
            issues.push(...this.managingOrganization.doModelValidation());
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation());
        }
        if (this["link"]) {
            this.link.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Person._fts_dataType = 'Person';
//# sourceMappingURL=data:application/json;base64,