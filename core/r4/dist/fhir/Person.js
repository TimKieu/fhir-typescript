/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IdentityAssuranceLevelCodings } from '../fhirValueSets/IdentityAssuranceLevelCodings.js';
import { AdministrativeGenderCodings } from '../fhirValueSets/AdministrativeGenderCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { HumanName } from './HumanName.js';
import { ContactPoint } from './ContactPoint.js';
import { FhirDate } from './FhirDate.js';
import { Address } from './Address.js';
import { Attachment } from './Attachment.js';
import { FhirBoolean } from './FhirBoolean.js';

// <auto-generated/>
/**
 * Link to a resource that concerns the same actual person.
 */
var PersonLink = /** @class */ (function (_super) {
    __extends(PersonLink, _super);
    /**
     * Default constructor for PersonLink - initializes any required elements to null if a value is not provided.
     */
    function PersonLink(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['target']) {
            _this.target = new Reference(source.target);
        }
        else {
            _this.target = null;
        }
        if (source['assurance']) {
            _this.assurance = source.assurance;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for assurance (Person.link.assurance)
     */
    PersonLink.assuranceRequiredCoding = function () {
        return IdentityAssuranceLevelCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PersonLink.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['target']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property target:fhir.Reference fhir: Person.link.target:Reference', }));
        }
        if (this["target"]) {
            (_a = outcome.issue).push.apply(_a, this.target.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PersonLink._fts_dataType = 'PersonLink';
    return PersonLink;
}(BackboneElement));
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
var Person = /** @class */ (function (_super) {
    __extends(Person, _super);
    /**
     * Default constructor for Person - initializes any required elements to null if a value is not provided.
     */
    function Person(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Person';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['name']) {
            _this.name = source.name.map(function (x) { return new HumanName(x); });
        }
        else {
            _this.name = [];
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['gender']) {
            _this.gender = source.gender;
        }
        if (source['birthDate']) {
            _this.birthDate = new FhirDate({ value: source.birthDate });
        }
        if (source['address']) {
            _this.address = source.address.map(function (x) { return new Address(x); });
        }
        else {
            _this.address = [];
        }
        if (source['photo']) {
            _this.photo = new Attachment(source.photo);
        }
        if (source['managingOrganization']) {
            _this.managingOrganization = new Reference(source.managingOrganization);
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['link']) {
            _this.link = source.link.map(function (x) { return new PersonLink(x); });
        }
        else {
            _this.link = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for gender (Person.gender)
     */
    Person.genderRequiredCoding = function () {
        return AdministrativeGenderCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Person.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Person" fhir: Person.resourceType:"Person"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["name"]) {
            this.name.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["birthDate"]) {
            (_a = outcome.issue).push.apply(_a, this.birthDate.doModelValidation().issue);
        }
        if (this["address"]) {
            this.address.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["photo"]) {
            (_b = outcome.issue).push.apply(_b, this.photo.doModelValidation().issue);
        }
        if (this["managingOrganization"]) {
            (_c = outcome.issue).push.apply(_c, this.managingOrganization.doModelValidation().issue);
        }
        if (this["active"]) {
            (_d = outcome.issue).push.apply(_d, this.active.doModelValidation().issue);
        }
        if (this["link"]) {
            this.link.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Person._fts_dataType = 'Person';
    return Person;
}(DomainResource));

export { Person, PersonLink };
//# sourceMappingURL=Person.js.map
