{"version":3,"file":"Account.js","sources":["../../src/fhir/Account.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Account\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { AccountStatusCodings, AccountStatusCodingType,} from '../fhirValueSets/AccountStatusCodings.js';\r\n// @ts-ignore\r\nimport { AccountStatusCodes,  AccountStatusCodeType } from '../fhirValueSets/AccountStatusCodes.js';\r\n// @ts-ignore\r\nimport { AccountTypeCodings, AccountTypeCodingType,} from '../fhirValueSets/AccountTypeCodings.js';\r\n// @ts-ignore\r\nimport { AccountTypeCodes,  AccountTypeCodeType } from '../fhirValueSets/AccountTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the AccountCoverage type.\r\n */\r\nexport interface AccountCoverageArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).\r\n   * A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.\r\n   */\r\n  coverage: fhir.ReferenceArgs|null;\r\n  /**\r\n   * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).\r\n   */\r\n  priority?: fhir.FhirPositiveInt|number|undefined;\r\n}\r\n\r\n/**\r\n * Typically. this may be some form of insurance, internal charges, or self-pay.\r\n * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.\r\n * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.\r\n */\r\nexport class AccountCoverage extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'AccountCoverage';\r\n  /**\r\n   * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).\r\n   * A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.\r\n   */\r\n  public coverage: fhir.Reference|null;\r\n  /**\r\n   * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).\r\n   */\r\n  public priority?: fhir.FhirPositiveInt|undefined;\r\n  /**\r\n   * Default constructor for AccountCoverage - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<AccountCoverageArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['coverage']) { this.coverage = new fhir.Reference(source.coverage); }\r\n    else { this.coverage = null; }\r\n    if (source['priority']) { this.priority = new fhir.FhirPositiveInt({value: source.priority}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['coverage']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property coverage:fhir.Reference fhir: Account.coverage.coverage:Reference', }));\r\n    }\r\n    if (this[\"coverage\"]) { outcome.issue!.push(...this.coverage.doModelValidation().issue!); }\r\n    if (this[\"priority\"]) { outcome.issue!.push(...this.priority.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the AccountGuarantor type.\r\n */\r\nexport interface AccountGuarantorArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The entity who is responsible.\r\n   */\r\n  party: fhir.ReferenceArgs|null;\r\n  /**\r\n   * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.\r\n   */\r\n  onHold?: fhir.FhirBoolean|boolean|undefined;\r\n  /**\r\n   * The timeframe during which the guarantor accepts responsibility for the account.\r\n   */\r\n  period?: fhir.PeriodArgs|undefined;\r\n}\r\n\r\n/**\r\n * The parties responsible for balancing the account if other payment options fall short.\r\n */\r\nexport class AccountGuarantor extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'AccountGuarantor';\r\n  /**\r\n   * The entity who is responsible.\r\n   */\r\n  public party: fhir.Reference|null;\r\n  /**\r\n   * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.\r\n   */\r\n  public onHold?: fhir.FhirBoolean|undefined;\r\n  /**\r\n   * The timeframe during which the guarantor accepts responsibility for the account.\r\n   */\r\n  public period?: fhir.Period|undefined;\r\n  /**\r\n   * Default constructor for AccountGuarantor - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<AccountGuarantorArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['party']) { this.party = new fhir.Reference(source.party); }\r\n    else { this.party = null; }\r\n    if (source['onHold']) { this.onHold = new fhir.FhirBoolean({value: source.onHold}); }\r\n    if (source['period']) { this.period = new fhir.Period(source.period); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['party']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property party:fhir.Reference fhir: Account.guarantor.party:Reference', }));\r\n    }\r\n    if (this[\"party\"]) { outcome.issue!.push(...this.party.doModelValidation().issue!); }\r\n    if (this[\"onHold\"]) { outcome.issue!.push(...this.onHold.doModelValidation().issue!); }\r\n    if (this[\"period\"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the Account type.\r\n */\r\nexport interface AccountArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Account\"|undefined;\r\n  /**\r\n   * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.\r\n   */\r\n  status: AccountStatusCodeType|null;\r\n  /**\r\n   * Categorizes the account for reporting and searching purposes.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Name used for the account when displaying it to humans in reports, etc.\r\n   */\r\n  name?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Accounts can be applied to non-patients for tracking other non-patient related activities, such as group services (patients not tracked, and costs charged to another body), or might not be allocated.\r\n   */\r\n  subject?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * It is possible for transactions to be posted outside the service period, as long as the service was provided within the defined service period.\r\n   */\r\n  servicePeriod?: fhir.PeriodArgs|undefined;\r\n  /**\r\n   * Typically. this may be some form of insurance, internal charges, or self-pay.\r\n   * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.\r\n   * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.\r\n   */\r\n  coverage?: fhir.AccountCoverageArgs[]|undefined;\r\n  /**\r\n   * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.\r\n   */\r\n  owner?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Provides additional information about what the account tracks and how it is used.\r\n   */\r\n  description?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The parties responsible for balancing the account if other payment options fall short.\r\n   */\r\n  guarantor?: fhir.AccountGuarantorArgs[]|undefined;\r\n  /**\r\n   * Reference to a parent Account.\r\n   */\r\n  partOf?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.\r\n */\r\nexport class Account extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Account';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"Account\";\r\n  /**\r\n   * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.\r\n   */\r\n  public status: AccountStatusCodeType|null;\r\n  /**\r\n   * Categorizes the account for reporting and searching purposes.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Name used for the account when displaying it to humans in reports, etc.\r\n   */\r\n  public name?: fhir.FhirString|undefined;\r\n  /**\r\n   * Accounts can be applied to non-patients for tracking other non-patient related activities, such as group services (patients not tracked, and costs charged to another body), or might not be allocated.\r\n   */\r\n  public subject?: fhir.Reference[];\r\n  /**\r\n   * It is possible for transactions to be posted outside the service period, as long as the service was provided within the defined service period.\r\n   */\r\n  public servicePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Typically. this may be some form of insurance, internal charges, or self-pay.\r\n   * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.\r\n   * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.\r\n   */\r\n  public coverage?: fhir.AccountCoverage[];\r\n  /**\r\n   * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.\r\n   */\r\n  public owner?: fhir.Reference|undefined;\r\n  /**\r\n   * Provides additional information about what the account tracks and how it is used.\r\n   */\r\n  public description?: fhir.FhirString|undefined;\r\n  /**\r\n   * The parties responsible for balancing the account if other payment options fall short.\r\n   */\r\n  public guarantor?: fhir.AccountGuarantor[];\r\n  /**\r\n   * Reference to a parent Account.\r\n   */\r\n  public partOf?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for Account - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<AccountArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'Account';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['status']) { this.status = source.status; }\r\n    else { this.status = null; }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    if (source['subject']) { this.subject = source.subject.map((x) => new fhir.Reference(x)); }\r\n    else { this.subject = []; }\r\n    if (source['servicePeriod']) { this.servicePeriod = new fhir.Period(source.servicePeriod); }\r\n    if (source['coverage']) { this.coverage = source.coverage.map((x) => new fhir.AccountCoverage(x)); }\r\n    else { this.coverage = []; }\r\n    if (source['owner']) { this.owner = new fhir.Reference(source.owner); }\r\n    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }\r\n    if (source['guarantor']) { this.guarantor = source.guarantor.map((x) => new fhir.AccountGuarantor(x)); }\r\n    else { this.guarantor = []; }\r\n    if (source['partOf']) { this.partOf = new fhir.Reference(source.partOf); }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (Account.status)\r\n   */\r\n  public static statusRequiredCoding():AccountStatusCodingType {\r\n    return AccountStatusCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"Account\" fhir: Account.resourceType:\"Account\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['status']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property status:AccountStatusCodeType fhir: Account.status:code', }));\r\n    }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (this[\"subject\"]) { this.subject.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"servicePeriod\"]) { outcome.issue!.push(...this.servicePeriod.doModelValidation().issue!); }\r\n    if (this[\"coverage\"]) { this.coverage.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"owner\"]) { outcome.issue!.push(...this.owner.doModelValidation().issue!); }\r\n    if (this[\"description\"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }\r\n    if (this[\"guarantor\"]) { this.guarantor.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"partOf\"]) { outcome.issue!.push(...this.partOf.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Reference","fhir.FhirPositiveInt","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.FhirBoolean","fhir.Period","fhir.Identifier","fhir.CodeableConcept","fhir.FhirString","fhir.AccountCoverage","fhir.AccountGuarantor","fhir.DomainResource"],"mappings":"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"}