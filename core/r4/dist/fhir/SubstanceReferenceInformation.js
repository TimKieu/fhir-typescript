// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceReferenceInformation
import * as fhir from '../fhir.js';
/**
 * Todo.
 */
export class SubstanceReferenceInformationGene extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationGene - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['geneSequenceOrigin']) {
            this.geneSequenceOrigin = new fhir.CodeableConcept(source.geneSequenceOrigin);
        }
        if (source['gene']) {
            this.gene = new fhir.CodeableConcept(source.gene);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceReferenceInformation.gene';
        }
        iss.push(...this.vOS('geneSequenceOrigin', exp));
        iss.push(...this.vOS('gene', exp));
        iss.push(...this.vOA('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceReferenceInformationGene._fts_dataType = 'SubstanceReferenceInformationGene';
/**
 * Todo.
 */
export class SubstanceReferenceInformationGeneElement extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationGeneElement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['element']) {
            this.element = new fhir.Identifier(source.element);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceReferenceInformation.geneElement';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('element', exp));
        iss.push(...this.vOA('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceReferenceInformationGeneElement._fts_dataType = 'SubstanceReferenceInformationGeneElement';
/**
 * Todo.
 */
export class SubstanceReferenceInformationClassification extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationClassification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['domain']) {
            this.domain = new fhir.CodeableConcept(source.domain);
        }
        if (source['classification']) {
            this.classification = new fhir.CodeableConcept(source.classification);
        }
        if (source['subtype']) {
            this.subtype = source.subtype.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subtype = [];
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceReferenceInformation.classification';
        }
        iss.push(...this.vOS('domain', exp));
        iss.push(...this.vOS('classification', exp));
        iss.push(...this.vOA('subtype', exp));
        iss.push(...this.vOA('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceReferenceInformationClassification._fts_dataType = 'SubstanceReferenceInformationClassification';
/**
 * Todo.
 */
export class SubstanceReferenceInformationTarget extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceReferenceInformationTarget - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['target']) {
            this.target = new fhir.Identifier(source.target);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['interaction']) {
            this.interaction = new fhir.CodeableConcept(source.interaction);
        }
        if (source['organism']) {
            this.organism = new fhir.CodeableConcept(source.organism);
        }
        if (source['organismType']) {
            this.organismType = new fhir.CodeableConcept(source.organismType);
        }
        if (source['amount']) {
            this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            this.amount = new fhir.Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            this.amount = new fhir.Range(source.amountRange);
        }
        else if (source['amountString']) {
            this.amount = new fhir.FhirString({ value: source.amountString });
        }
        if (source['amountType']) {
            this.amountType = new fhir.CodeableConcept(source.amountType);
        }
        if (source['source']) {
            this.source = source.source.map((x) => new fhir.Reference(x));
        }
        else {
            this.source = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceReferenceInformation.target';
        }
        iss.push(...this.vOS('target', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('interaction', exp));
        iss.push(...this.vOS('organism', exp));
        iss.push(...this.vOS('organismType', exp));
        iss.push(...this.vOS('amount', exp));
        iss.push(...this.vOS('amountType', exp));
        iss.push(...this.vOA('source', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceReferenceInformationTarget._fts_dataType = 'SubstanceReferenceInformationTarget';
/**
 * Internal flag to properly serialize choice-type element SubstanceReferenceInformation.target.amount[x]
 */
SubstanceReferenceInformationTarget._fts_amountIsChoice = true;
/**
 * Todo.
 */
export class SubstanceReferenceInformation extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceReferenceInformation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceReferenceInformation';
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
        if (source['gene']) {
            this.gene = source.gene.map((x) => new fhir.SubstanceReferenceInformationGene(x));
        }
        else {
            this.gene = [];
        }
        if (source['geneElement']) {
            this.geneElement = source.geneElement.map((x) => new fhir.SubstanceReferenceInformationGeneElement(x));
        }
        else {
            this.geneElement = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.SubstanceReferenceInformationClassification(x));
        }
        else {
            this.classification = [];
        }
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.SubstanceReferenceInformationTarget(x));
        }
        else {
            this.target = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceReferenceInformation';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('comment', exp));
        iss.push(...this.vOA('gene', exp));
        iss.push(...this.vOA('geneElement', exp));
        iss.push(...this.vOA('classification', exp));
        iss.push(...this.vOA('target', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceReferenceInformation._fts_dataType = 'SubstanceReferenceInformation';
//# sourceMappingURL=data:application/json;base64,