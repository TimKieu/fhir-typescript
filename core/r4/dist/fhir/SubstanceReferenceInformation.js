/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * Todo.
 */
var SubstanceReferenceInformationGene = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationGene, _super);
    /**
     * Default constructor for SubstanceReferenceInformationGene - initializes any required elements to null if a value is not provided.
     */
    function SubstanceReferenceInformationGene(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['geneSequenceOrigin']) {
            _this.geneSequenceOrigin = new CodeableConcept(source.geneSequenceOrigin);
        }
        if (source['gene']) {
            _this.gene = new CodeableConcept(source.gene);
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceReferenceInformationGene.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["geneSequenceOrigin"]) {
            (_a = outcome.issue).push.apply(_a, this.geneSequenceOrigin.doModelValidation().issue);
        }
        if (this["gene"]) {
            (_b = outcome.issue).push.apply(_b, this.gene.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceReferenceInformationGene._fts_dataType = 'SubstanceReferenceInformationGene';
    return SubstanceReferenceInformationGene;
}(BackboneElement));
/**
 * Todo.
 */
var SubstanceReferenceInformationGeneElement = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationGeneElement, _super);
    /**
     * Default constructor for SubstanceReferenceInformationGeneElement - initializes any required elements to null if a value is not provided.
     */
    function SubstanceReferenceInformationGeneElement(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['element']) {
            _this.element = new Identifier(source.element);
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceReferenceInformationGeneElement.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["element"]) {
            (_b = outcome.issue).push.apply(_b, this.element.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceReferenceInformationGeneElement._fts_dataType = 'SubstanceReferenceInformationGeneElement';
    return SubstanceReferenceInformationGeneElement;
}(BackboneElement));
/**
 * Todo.
 */
var SubstanceReferenceInformationClassification = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationClassification, _super);
    /**
     * Default constructor for SubstanceReferenceInformationClassification - initializes any required elements to null if a value is not provided.
     */
    function SubstanceReferenceInformationClassification(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['domain']) {
            _this.domain = new CodeableConcept(source.domain);
        }
        if (source['classification']) {
            _this.classification = new CodeableConcept(source.classification);
        }
        if (source['subtype']) {
            _this.subtype = source.subtype.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.subtype = [];
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceReferenceInformationClassification.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["domain"]) {
            (_a = outcome.issue).push.apply(_a, this.domain.doModelValidation().issue);
        }
        if (this["classification"]) {
            (_b = outcome.issue).push.apply(_b, this.classification.doModelValidation().issue);
        }
        if (this["subtype"]) {
            this.subtype.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceReferenceInformationClassification._fts_dataType = 'SubstanceReferenceInformationClassification';
    return SubstanceReferenceInformationClassification;
}(BackboneElement));
/**
 * Todo.
 */
var SubstanceReferenceInformationTarget = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformationTarget, _super);
    /**
     * Default constructor for SubstanceReferenceInformationTarget - initializes any required elements to null if a value is not provided.
     */
    function SubstanceReferenceInformationTarget(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['target']) {
            _this.target = new Identifier(source.target);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['interaction']) {
            _this.interaction = new CodeableConcept(source.interaction);
        }
        if (source['organism']) {
            _this.organism = new CodeableConcept(source.organism);
        }
        if (source['organismType']) {
            _this.organismType = new CodeableConcept(source.organismType);
        }
        if (source['amount']) {
            _this.amount = source.amount;
        }
        else if (source['amountQuantity']) {
            _this.amount = new Quantity(source.amountQuantity);
        }
        else if (source['amountRange']) {
            _this.amount = new Range(source.amountRange);
        }
        else if (source['amountString']) {
            _this.amount = new FhirString({ value: source.amountString });
        }
        if (source['amountType']) {
            _this.amountType = new CodeableConcept(source.amountType);
        }
        if (source['source']) {
            _this.source = source.source.map(function (x) { return new Reference(x); });
        }
        else {
            _this.source = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceReferenceInformationTarget.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["target"]) {
            (_a = outcome.issue).push.apply(_a, this.target.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["interaction"]) {
            (_c = outcome.issue).push.apply(_c, this.interaction.doModelValidation().issue);
        }
        if (this["organism"]) {
            (_d = outcome.issue).push.apply(_d, this.organism.doModelValidation().issue);
        }
        if (this["organismType"]) {
            (_e = outcome.issue).push.apply(_e, this.organismType.doModelValidation().issue);
        }
        if (this["amountType"]) {
            (_f = outcome.issue).push.apply(_f, this.amountType.doModelValidation().issue);
        }
        if (this["source"]) {
            this.source.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceReferenceInformationTarget._fts_dataType = 'SubstanceReferenceInformationTarget';
    /**
     * Internal flag to properly serialize choice-type element SubstanceReferenceInformation.target.amount[x]
     */
    SubstanceReferenceInformationTarget._fts_amountIsChoice = true;
    return SubstanceReferenceInformationTarget;
}(BackboneElement));
/**
 * Todo.
 */
var SubstanceReferenceInformation = /** @class */ (function (_super) {
    __extends(SubstanceReferenceInformation, _super);
    /**
     * Default constructor for SubstanceReferenceInformation - initializes any required elements to null if a value is not provided.
     */
    function SubstanceReferenceInformation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SubstanceReferenceInformation';
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        if (source['gene']) {
            _this.gene = source.gene.map(function (x) { return new SubstanceReferenceInformationGene(x); });
        }
        else {
            _this.gene = [];
        }
        if (source['geneElement']) {
            _this.geneElement = source.geneElement.map(function (x) { return new SubstanceReferenceInformationGeneElement(x); });
        }
        else {
            _this.geneElement = [];
        }
        if (source['classification']) {
            _this.classification = source.classification.map(function (x) { return new SubstanceReferenceInformationClassification(x); });
        }
        else {
            _this.classification = [];
        }
        if (source['target']) {
            _this.target = source.target.map(function (x) { return new SubstanceReferenceInformationTarget(x); });
        }
        else {
            _this.target = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceReferenceInformation.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SubstanceReferenceInformation" fhir: SubstanceReferenceInformation.resourceType:"SubstanceReferenceInformation"', }));
        }
        if (this["comment"]) {
            (_a = outcome.issue).push.apply(_a, this.comment.doModelValidation().issue);
        }
        if (this["gene"]) {
            this.gene.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["geneElement"]) {
            this.geneElement.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["classification"]) {
            this.classification.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["target"]) {
            this.target.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceReferenceInformation._fts_dataType = 'SubstanceReferenceInformation';
    return SubstanceReferenceInformation;
}(DomainResource));

export { SubstanceReferenceInformation, SubstanceReferenceInformationClassification, SubstanceReferenceInformationGene, SubstanceReferenceInformationGeneElement, SubstanceReferenceInformationTarget };
//# sourceMappingURL=SubstanceReferenceInformation.js.map
