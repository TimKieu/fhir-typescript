/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { RequestStatusCodings } from '../fhirValueSets/RequestStatusCodings.js';
import { RequestPriorityCodings } from '../fhirValueSets/RequestPriorityCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { Attachment } from './Attachment.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
var CommunicationRequestPayload = /** @class */ (function (_super) {
    __extends(CommunicationRequestPayload, _super);
    /**
     * Default constructor for CommunicationRequestPayload - initializes any required elements to null if a value is not provided.
     */
    function CommunicationRequestPayload(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['content']) {
            _this.content = source.content;
        }
        else if (source['contentString']) {
            _this.content = new FhirString({ value: source.contentString });
        }
        else if (source['contentAttachment']) {
            _this.content = new Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            _this.content = new Reference(source.contentReference);
        }
        else {
            _this.content = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CommunicationRequestPayload.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content: fhir: CommunicationRequest.payload.content[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CommunicationRequestPayload._fts_dataType = 'CommunicationRequestPayload';
    /**
     * Internal flag to properly serialize choice-type element CommunicationRequest.payload.content[x]
     */
    CommunicationRequestPayload._fts_contentIsChoice = true;
    return CommunicationRequestPayload;
}(BackboneElement));
/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
var CommunicationRequest = /** @class */ (function (_super) {
    __extends(CommunicationRequest, _super);
    /**
     * Default constructor for CommunicationRequest - initializes any required elements to null if a value is not provided.
     */
    function CommunicationRequest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'CommunicationRequest';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['replaces']) {
            _this.replaces = source.replaces.map(function (x) { return new Reference(x); });
        }
        else {
            _this.replaces = [];
        }
        if (source['groupIdentifier']) {
            _this.groupIdentifier = new Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = new CodeableConcept(source.statusReason);
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['priority']) {
            _this.priority = source.priority;
        }
        if (source['doNotPerform']) {
            _this.doNotPerform = new FhirBoolean({ value: source.doNotPerform });
        }
        if (source['medium']) {
            _this.medium = source.medium.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.medium = [];
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['about']) {
            _this.about = source.about.map(function (x) { return new Reference(x); });
        }
        else {
            _this.about = [];
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['payload']) {
            _this.payload = source.payload.map(function (x) { return new CommunicationRequestPayload(x); });
        }
        else {
            _this.payload = [];
        }
        if (source['occurrence']) {
            _this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            _this.occurrence = new FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            _this.occurrence = new Period(source.occurrencePeriod);
        }
        if (source['authoredOn']) {
            _this.authoredOn = new FhirDateTime({ value: source.authoredOn });
        }
        if (source['requester']) {
            _this.requester = new Reference(source.requester);
        }
        if (source['recipient']) {
            _this.recipient = source.recipient.map(function (x) { return new Reference(x); });
        }
        else {
            _this.recipient = [];
        }
        if (source['sender']) {
            _this.sender = new Reference(source.sender);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (CommunicationRequest.status)
     */
    CommunicationRequest.statusRequiredCoding = function () {
        return RequestStatusCodings;
    };
    /**
     * Required-bound Value Set for priority (CommunicationRequest.priority)
     */
    CommunicationRequest.priorityRequiredCoding = function () {
        return RequestPriorityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CommunicationRequest.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"CommunicationRequest" fhir: CommunicationRequest.resourceType:"CommunicationRequest"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["replaces"]) {
            this.replaces.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["groupIdentifier"]) {
            (_a = outcome.issue).push.apply(_a, this.groupIdentifier.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:RequestStatusCodeType fhir: CommunicationRequest.status:code', }));
        }
        if (this["statusReason"]) {
            (_b = outcome.issue).push.apply(_b, this.statusReason.doModelValidation().issue);
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["doNotPerform"]) {
            (_c = outcome.issue).push.apply(_c, this.doNotPerform.doModelValidation().issue);
        }
        if (this["medium"]) {
            this.medium.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subject"]) {
            (_d = outcome.issue).push.apply(_d, this.subject.doModelValidation().issue);
        }
        if (this["about"]) {
            this.about.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["encounter"]) {
            (_e = outcome.issue).push.apply(_e, this.encounter.doModelValidation().issue);
        }
        if (this["payload"]) {
            this.payload.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["authoredOn"]) {
            (_f = outcome.issue).push.apply(_f, this.authoredOn.doModelValidation().issue);
        }
        if (this["requester"]) {
            (_g = outcome.issue).push.apply(_g, this.requester.doModelValidation().issue);
        }
        if (this["recipient"]) {
            this.recipient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["sender"]) {
            (_h = outcome.issue).push.apply(_h, this.sender.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CommunicationRequest._fts_dataType = 'CommunicationRequest';
    /**
     * Internal flag to properly serialize choice-type element CommunicationRequest.occurrence[x]
     */
    CommunicationRequest._fts_occurrenceIsChoice = true;
    return CommunicationRequest;
}(DomainResource));

export { CommunicationRequest, CommunicationRequestPayload };
//# sourceMappingURL=CommunicationRequest.js.map
