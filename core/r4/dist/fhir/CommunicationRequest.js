// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CommunicationRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { RequestStatusVsValidation } from '../fhirValueSets/RequestStatusVsValidation.js';
// @ts-ignore
import { RequestPriorityVsValidation } from '../fhirValueSets/RequestPriorityVsValidation.js';
/**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
export class CommunicationRequestPayload extends fhir.BackboneElement {
    /**
     * Default constructor for CommunicationRequestPayload - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['content']) {
            this.content = source.content;
        }
        else if (source['contentString']) {
            this.content = new fhir.FhirString({ value: source.contentString });
        }
        else if (source['contentAttachment']) {
            this.content = new fhir.Attachment(source.contentAttachment);
        }
        else if (source['contentReference']) {
            this.content = new fhir.Reference(source.contentReference);
        }
        else {
            this.content = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CommunicationRequest.payload';
        }
        this.vRS('content', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CommunicationRequestPayload._fts_dataType = 'CommunicationRequestPayload';
/**
 * Internal flag to properly serialize choice-type element CommunicationRequest.payload.content[x]
 */
CommunicationRequestPayload._fts_contentIsChoice = true;
/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
export class CommunicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for CommunicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CommunicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['replaces']) {
            this.replaces = source.replaces.map((x) => new fhir.Reference(x));
        }
        else {
            this.replaces = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['_priority']) {
            if (this.priority) {
                this.priority.addExtendedProperties(source._priority);
            }
            else {
                this.priority = new fhir.FhirCode(source._priority);
            }
        }
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['_doNotPerform']) {
            if (this.doNotPerform) {
                this.doNotPerform.addExtendedProperties(source._doNotPerform);
            }
            else {
                this.doNotPerform = new fhir.FhirBoolean(source._doNotPerform);
            }
        }
        if (source['medium']) {
            this.medium = source.medium.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.medium = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['about']) {
            this.about = source.about.map((x) => new fhir.Reference(x));
        }
        else {
            this.about = [];
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['payload']) {
            this.payload = source.payload.map((x) => new fhir.CommunicationRequestPayload(x));
        }
        else {
            this.payload = [];
        }
        if (source['occurrence']) {
            this.occurrence = source.occurrence;
        }
        else if (source['occurrenceDateTime']) {
            this.occurrence = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        else if (source['occurrencePeriod']) {
            this.occurrence = new fhir.Period(source.occurrencePeriod);
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['_authoredOn']) {
            if (this.authoredOn) {
                this.authoredOn.addExtendedProperties(source._authoredOn);
            }
            else {
                this.authoredOn = new fhir.FhirDateTime(source._authoredOn);
            }
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['recipient']) {
            this.recipient = source.recipient.map((x) => new fhir.Reference(x));
        }
        else {
            this.recipient = [];
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'CommunicationRequest';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOA('basedOn', exp);
        this.vOA('replaces', exp);
        this.vOS('groupIdentifier', exp);
        this.vRSV('status', exp, 'RequestStatus', RequestStatusVsValidation, 'r');
        this.vOS('statusReason', exp);
        this.vOA('category', exp);
        this.vOSV('priority', exp, 'RequestPriority', RequestPriorityVsValidation, 'r');
        this.vOS('doNotPerform', exp);
        this.vOA('medium', exp);
        this.vOS('subject', exp);
        this.vOA('about', exp);
        this.vOS('encounter', exp);
        this.vOA('payload', exp);
        this.vOS('occurrence', exp);
        this.vOS('authoredOn', exp);
        this.vOS('requester', exp);
        this.vOA('recipient', exp);
        this.vOS('sender', exp);
        this.vOA('reasonCode', exp);
        this.vOA('reasonReference', exp);
        this.vOA('note', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CommunicationRequest._fts_dataType = 'CommunicationRequest';
/**
 * Internal flag to properly serialize choice-type element CommunicationRequest.occurrence[x]
 */
CommunicationRequest._fts_occurrenceIsChoice = true;
//# sourceMappingURL=data:application/json;base64,