/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { SearchParamTypeCodings } from '../fhirValueSets/SearchParamTypeCodings.js';
import { SearchXpathUsageCodings } from '../fhirValueSets/SearchXpathUsageCodings.js';
import { SearchComparatorCodings } from '../fhirValueSets/SearchComparatorCodings.js';
import { SearchModifierCodeCodings } from '../fhirValueSets/SearchModifierCodeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirString } from './FhirString.js';
import { FhirUri } from './FhirUri.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirCode } from './FhirCode.js';

// <auto-generated/>
/**
 * Used to define the parts of a composite search parameter.
 */
var SearchParameterComponent = /** @class */ (function (_super) {
    __extends(SearchParameterComponent, _super);
    /**
     * Default constructor for SearchParameterComponent - initializes any required elements to null if a value is not provided.
     */
    function SearchParameterComponent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['definition']) {
            _this.definition = new FhirCanonical({ value: source.definition });
        }
        else {
            _this.definition = null;
        }
        if (source['expression']) {
            _this.expression = new FhirString({ value: source.expression });
        }
        else {
            _this.expression = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SearchParameterComponent.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['definition']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property definition:fhir.FhirCanonical fhir: SearchParameter.component.definition:canonical', }));
        }
        if (this["definition"]) {
            (_a = outcome.issue).push.apply(_a, this.definition.doModelValidation().issue);
        }
        if (!this['expression']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property expression:fhir.FhirString fhir: SearchParameter.component.expression:string', }));
        }
        if (this["expression"]) {
            (_b = outcome.issue).push.apply(_b, this.expression.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SearchParameterComponent._fts_dataType = 'SearchParameterComponent';
    return SearchParameterComponent;
}(BackboneElement));
/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 */
var SearchParameter = /** @class */ (function (_super) {
    __extends(SearchParameter, _super);
    /**
     * Default constructor for SearchParameter - initializes any required elements to null if a value is not provided.
     */
    function SearchParameter(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SearchParameter';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['derivedFrom']) {
            _this.derivedFrom = new FhirCanonical({ value: source.derivedFrom });
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        else {
            _this.description = null;
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['jurisdiction']) {
            _this.jurisdiction = source.jurisdiction.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.jurisdiction = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['base']) {
            _this.base = source.base.map(function (x) { return new FhirCode({ value: x }); });
        }
        else {
            _this.base = [];
        }
        if (source['type']) {
            _this.type = source.type;
        }
        else {
            _this.type = null;
        }
        if (source['expression']) {
            _this.expression = new FhirString({ value: source.expression });
        }
        if (source['xpath']) {
            _this.xpath = new FhirString({ value: source.xpath });
        }
        if (source['xpathUsage']) {
            _this.xpathUsage = source.xpathUsage;
        }
        if (source['target']) {
            _this.target = source.target.map(function (x) { return new FhirCode({ value: x }); });
        }
        else {
            _this.target = [];
        }
        if (source['multipleOr']) {
            _this.multipleOr = new FhirBoolean({ value: source.multipleOr });
        }
        if (source['multipleAnd']) {
            _this.multipleAnd = new FhirBoolean({ value: source.multipleAnd });
        }
        if (source['comparator']) {
            _this.comparator = source.comparator.map(function (x) { return x; });
        }
        else {
            _this.comparator = [];
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return x; });
        }
        else {
            _this.modifier = [];
        }
        if (source['chain']) {
            _this.chain = source.chain.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.chain = [];
        }
        if (source['component']) {
            _this.component = source.component.map(function (x) { return new SearchParameterComponent(x); });
        }
        else {
            _this.component = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (SearchParameter.status)
     */
    SearchParameter.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for base (SearchParameter.base)
     */
    SearchParameter.baseRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Required-bound Value Set for type (SearchParameter.type)
     */
    SearchParameter.typeRequiredCoding = function () {
        return SearchParamTypeCodings;
    };
    /**
     * Required-bound Value Set for xpathUsage (SearchParameter.xpathUsage)
     */
    SearchParameter.xpathUsageRequiredCoding = function () {
        return SearchXpathUsageCodings;
    };
    /**
     * Required-bound Value Set for target (SearchParameter.target)
     */
    SearchParameter.targetRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Required-bound Value Set for comparator (SearchParameter.comparator)
     */
    SearchParameter.comparatorRequiredCoding = function () {
        return SearchComparatorCodings;
    };
    /**
     * Required-bound Value Set for modifier (SearchParameter.modifier)
     */
    SearchParameter.modifierRequiredCoding = function () {
        return SearchModifierCodeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SearchParameter.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SearchParameter" fhir: SearchParameter.resourceType:"SearchParameter"', }));
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: SearchParameter.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: SearchParameter.name:string', }));
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["derivedFrom"]) {
            (_d = outcome.issue).push.apply(_d, this.derivedFrom.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: SearchParameter.status:code', }));
        }
        if (this["experimental"]) {
            (_e = outcome.issue).push.apply(_e, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_g = outcome.issue).push.apply(_g, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['description']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property description:fhir.FhirMarkdown fhir: SearchParameter.description:markdown', }));
        }
        if (this["description"]) {
            (_h = outcome.issue).push.apply(_h, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_j = outcome.issue).push.apply(_j, this.purpose.doModelValidation().issue);
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: SearchParameter.code:code', }));
        }
        if (this["code"]) {
            (_k = outcome.issue).push.apply(_k, this.code.doModelValidation().issue);
        }
        if (!this['base']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property base:fhir.FhirCode[] fhir: SearchParameter.base:code', }));
        }
        else if (!Array.isArray(this.base)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property base:fhir.FhirCode[] fhir: SearchParameter.base:code', }));
        }
        else if (this.base.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property base:fhir.FhirCode[] fhir: SearchParameter.base:code', }));
        }
        if (this["base"]) {
            this.base.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:SearchParamTypeCodeType fhir: SearchParameter.type:code', }));
        }
        if (this["expression"]) {
            (_l = outcome.issue).push.apply(_l, this.expression.doModelValidation().issue);
        }
        if (this["xpath"]) {
            (_m = outcome.issue).push.apply(_m, this.xpath.doModelValidation().issue);
        }
        if (this["target"]) {
            this.target.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["multipleOr"]) {
            (_o = outcome.issue).push.apply(_o, this.multipleOr.doModelValidation().issue);
        }
        if (this["multipleAnd"]) {
            (_p = outcome.issue).push.apply(_p, this.multipleAnd.doModelValidation().issue);
        }
        if (this["chain"]) {
            this.chain.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["component"]) {
            this.component.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SearchParameter._fts_dataType = 'SearchParameter';
    return SearchParameter;
}(DomainResource));

export { SearchParameter, SearchParameterComponent };
//# sourceMappingURL=SearchParameter.js.map
