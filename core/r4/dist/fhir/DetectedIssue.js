// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DetectedIssue
import * as fhir from '../fhir.js';
// @ts-ignore
import { DetectedissueMitigationActionCodings, } from '../fhirValueSets/DetectedissueMitigationActionCodings.js';
// @ts-ignore
import { ObservationStatusCodes } from '../fhirValueSets/ObservationStatusCodes.js';
// @ts-ignore
import { DetectedissueCategoryCodings, } from '../fhirValueSets/DetectedissueCategoryCodings.js';
// @ts-ignore
import { DetectedissueSeverityCodes } from '../fhirValueSets/DetectedissueSeverityCodes.js';
/**
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
export class DetectedIssueEvidence extends fhir.BackboneElement {
    /**
     * Default constructor for DetectedIssueEvidence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssueEvidence._fts_dataType = 'DetectedIssueEvidence';
/**
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export class DetectedIssueMitigation extends fhir.BackboneElement {
    /**
     * Default constructor for DetectedIssueMitigation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        else {
            this.action = null;
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
    }
    /**
     * Preferred-bound Value Set for action (DetectedIssue.mitigation.action)
     */
    static get actionPreferredCodings() {
        return DetectedissueMitigationActionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['action']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.CodeableConcept fhir: DetectedIssue.mitigation.action:CodeableConcept' });
        }
        if (this["action"]) {
            issues.push(...this.action.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssueMitigation._fts_dataType = 'DetectedIssueMitigation';
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
export class DetectedIssue extends fhir.DomainResource {
    /**
     * Default constructor for DetectedIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DetectedIssue';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['identified']) {
            this.identified = source.identified;
        }
        else if (source['identifiedDateTime']) {
            this.identified = new fhir.FhirDateTime({ value: source.identifiedDateTime });
        }
        else if (source['identifiedPeriod']) {
            this.identified = new fhir.Period(source.identifiedPeriod);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['implicated']) {
            this.implicated = source.implicated.map((x) => new fhir.Reference(x));
        }
        else {
            this.implicated = [];
        }
        if (source['evidence']) {
            this.evidence = source.evidence.map((x) => new fhir.DetectedIssueEvidence(x));
        }
        else {
            this.evidence = [];
        }
        if (source['detail']) {
            this.detail = new fhir.FhirString({ value: source.detail });
        }
        if (source['reference']) {
            this.reference = new fhir.FhirUri({ value: source.reference });
        }
        if (source['mitigation']) {
            this.mitigation = source.mitigation.map((x) => new fhir.DetectedIssueMitigation(x));
        }
        else {
            this.mitigation = [];
        }
    }
    /**
     * Required-bound Value Set for status (DetectedIssue.status)
     */
    static get statusRequiredCodes() {
        return ObservationStatusCodes;
    }
    /**
     * Preferred-bound Value Set for code (DetectedIssue.code)
     */
    static get codePreferredCodings() {
        return DetectedissueCategoryCodings;
    }
    /**
     * Required-bound Value Set for severity (DetectedIssue.severity)
     */
    static get severityRequiredCodes() {
        return DetectedissueSeverityCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DetectedIssue" fhir: DetectedIssue.resourceType:"DetectedIssue"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ObservationStatusCodeType> fhir: DetectedIssue.status:code' });
        }
        if (this['status'] && (!Object.values(ObservationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ObservationStatusCodeType> fhir: DetectedIssue.status:code Required binding to: ObservationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this['severity'] && (!Object.values(DetectedissueSeverityCodes).includes(this.severity))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property severity?:fhir.FhirCode<DetectedissueSeverityCodeType> fhir: DetectedIssue.severity:code Required binding to: DetectedissueSeverity' });
        }
        if (this["severity"]) {
            issues.push(...this.severity.doModelValidation());
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation());
        }
        if (this["implicated"]) {
            this.implicated.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["evidence"]) {
            this.evidence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            issues.push(...this.detail.doModelValidation());
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation());
        }
        if (this["mitigation"]) {
            this.mitigation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssue._fts_dataType = 'DetectedIssue';
/**
 * Internal flag to properly serialize choice-type element DetectedIssue.identified[x]
 */
DetectedIssue._fts_identifiedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,