// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DetectedIssue
import * as fhir from '../fhir.js';
// @ts-ignore
import { ObservationStatusVsValidation } from '../fhirValueSets/ObservationStatusVsValidation.js';
// @ts-ignore
import { DetectedissueSeverityVsValidation } from '../fhirValueSets/DetectedissueSeverityVsValidation.js';
/**
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
export class DetectedIssueEvidence extends fhir.BackboneElement {
    /**
     * Default constructor for DetectedIssueEvidence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.code = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DetectedIssue.evidence';
        }
        this.vOptA('code', expression);
        this.vOptA('detail', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssueEvidence._fts_dataType = 'DetectedIssueEvidence';
/**
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export class DetectedIssueMitigation extends fhir.BackboneElement {
    /**
     * Default constructor for DetectedIssueMitigation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['action']) {
            this.action = new fhir.CodeableConcept(source.action);
        }
        else {
            this.action = null;
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DetectedIssue.mitigation';
        }
        this.vReqS('action', expression);
        this.vOptS('date', expression);
        this.vOptS('author', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssueMitigation._fts_dataType = 'DetectedIssueMitigation';
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
export class DetectedIssue extends fhir.DomainResource {
    /**
     * Default constructor for DetectedIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'DetectedIssue';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity);
            }
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['identified']) {
            this.identified = source.identified;
        }
        else if (source['identifiedDateTime']) {
            this.identified = new fhir.FhirDateTime({ value: source.identifiedDateTime });
        }
        else if (source['identifiedPeriod']) {
            this.identified = new fhir.Period(source.identifiedPeriod);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['implicated']) {
            this.implicated = source.implicated.map((x) => new fhir.Reference(x));
        }
        else {
            this.implicated = [];
        }
        if (source['evidence']) {
            this.evidence = source.evidence.map((x) => new fhir.DetectedIssueEvidence(x));
        }
        else {
            this.evidence = [];
        }
        if (source['detail']) {
            this.detail = new fhir.FhirString({ value: source.detail });
        }
        if (source['_detail']) {
            if (this.detail) {
                this.detail.addExtendedProperties(source._detail);
            }
            else {
                this.detail = new fhir.FhirString(source._detail);
            }
        }
        if (source['reference']) {
            this.reference = new fhir.FhirUri({ value: source.reference });
        }
        if (source['_reference']) {
            if (this.reference) {
                this.reference.addExtendedProperties(source._reference);
            }
            else {
                this.reference = new fhir.FhirUri(source._reference);
            }
        }
        if (source['mitigation']) {
            this.mitigation = source.mitigation.map((x) => new fhir.DetectedIssueMitigation(x));
        }
        else {
            this.mitigation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'DetectedIssue';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vReqSV('status', expression, 'ObservationStatus', ObservationStatusVsValidation, 'r');
        this.vOptS('code', expression);
        this.vOptSV('severity', expression, 'DetectedissueSeverity', DetectedissueSeverityVsValidation, 'r');
        this.vOptS('patient', expression);
        this.vOptS('identified', expression);
        this.vOptS('author', expression);
        this.vOptA('implicated', expression);
        this.vOptA('evidence', expression);
        this.vOptS('detail', expression);
        this.vOptS('reference', expression);
        this.vOptA('mitigation', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DetectedIssue._fts_dataType = 'DetectedIssue';
/**
 * Internal flag to properly serialize choice-type element DetectedIssue.identified[x]
 */
DetectedIssue._fts_identifiedIsChoice = true;
//# sourceMappingURL=data:application/json;base64,