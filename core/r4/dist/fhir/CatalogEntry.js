/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { RelationTypeCodings } from '../fhirValueSets/RelationTypeCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Period } from './Period.js';
import { FhirDateTime } from './FhirDateTime.js';

// <auto-generated/>
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
var CatalogEntryRelatedEntry = /** @class */ (function (_super) {
    __extends(CatalogEntryRelatedEntry, _super);
    /**
     * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
     */
    function CatalogEntryRelatedEntry(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['relationtype']) {
            _this.relationtype = source.relationtype;
        }
        else {
            _this.relationtype = null;
        }
        if (source['item']) {
            _this.item = new Reference(source.item);
        }
        else {
            _this.item = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for relationtype (CatalogEntry.relatedEntry.relationtype)
     */
    CatalogEntryRelatedEntry.relationtypeRequiredCoding = function () {
        return RelationTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CatalogEntryRelatedEntry.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['relationtype']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property relationtype:RelationTypeCodeType fhir: CatalogEntry.relatedEntry.relationtype:code', }));
        }
        if (!this['item']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property item:fhir.Reference fhir: CatalogEntry.relatedEntry.item:Reference', }));
        }
        if (this["item"]) {
            (_a = outcome.issue).push.apply(_a, this.item.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CatalogEntryRelatedEntry._fts_dataType = 'CatalogEntryRelatedEntry';
    return CatalogEntryRelatedEntry;
}(BackboneElement));
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
var CatalogEntry = /** @class */ (function (_super) {
    __extends(CatalogEntry, _super);
    /**
     * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
     */
    function CatalogEntry(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'CatalogEntry';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['orderable']) {
            _this.orderable = new FhirBoolean({ value: source.orderable });
        }
        else {
            _this.orderable = null;
        }
        if (source['referencedItem']) {
            _this.referencedItem = new Reference(source.referencedItem);
        }
        else {
            _this.referencedItem = null;
        }
        if (source['additionalIdentifier']) {
            _this.additionalIdentifier = source.additionalIdentifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.additionalIdentifier = [];
        }
        if (source['classification']) {
            _this.classification = source.classification.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.classification = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['validityPeriod']) {
            _this.validityPeriod = new Period(source.validityPeriod);
        }
        if (source['validTo']) {
            _this.validTo = new FhirDateTime({ value: source.validTo });
        }
        if (source['lastUpdated']) {
            _this.lastUpdated = new FhirDateTime({ value: source.lastUpdated });
        }
        if (source['additionalCharacteristic']) {
            _this.additionalCharacteristic = source.additionalCharacteristic.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.additionalCharacteristic = [];
        }
        if (source['additionalClassification']) {
            _this.additionalClassification = source.additionalClassification.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.additionalClassification = [];
        }
        if (source['relatedEntry']) {
            _this.relatedEntry = source.relatedEntry.map(function (x) { return new CatalogEntryRelatedEntry(x); });
        }
        else {
            _this.relatedEntry = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (CatalogEntry.status)
     */
    CatalogEntry.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CatalogEntry.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"CatalogEntry" fhir: CatalogEntry.resourceType:"CatalogEntry"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (!this['orderable']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property orderable:fhir.FhirBoolean fhir: CatalogEntry.orderable:boolean', }));
        }
        if (this["orderable"]) {
            (_b = outcome.issue).push.apply(_b, this.orderable.doModelValidation().issue);
        }
        if (!this['referencedItem']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property referencedItem:fhir.Reference fhir: CatalogEntry.referencedItem:Reference', }));
        }
        if (this["referencedItem"]) {
            (_c = outcome.issue).push.apply(_c, this.referencedItem.doModelValidation().issue);
        }
        if (this["additionalIdentifier"]) {
            this.additionalIdentifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["classification"]) {
            this.classification.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["validityPeriod"]) {
            (_d = outcome.issue).push.apply(_d, this.validityPeriod.doModelValidation().issue);
        }
        if (this["validTo"]) {
            (_e = outcome.issue).push.apply(_e, this.validTo.doModelValidation().issue);
        }
        if (this["lastUpdated"]) {
            (_f = outcome.issue).push.apply(_f, this.lastUpdated.doModelValidation().issue);
        }
        if (this["additionalCharacteristic"]) {
            this.additionalCharacteristic.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["additionalClassification"]) {
            this.additionalClassification.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["relatedEntry"]) {
            this.relatedEntry.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CatalogEntry._fts_dataType = 'CatalogEntry';
    return CatalogEntry;
}(DomainResource));

export { CatalogEntry, CatalogEntryRelatedEntry };
//# sourceMappingURL=CatalogEntry.js.map
