// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CatalogEntry
import * as fhir from '../fhir.js';
// @ts-ignore
import { RelationTypeCodes } from '../fhirValueSets/RelationTypeCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhir.BackboneElement {
    /**
     * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationtype']) {
            this.relationtype = new fhir.FhirCode({ value: source.relationtype });
        }
        else {
            this.relationtype = null;
        }
        if (source['_relationtype']) {
            if (this.relationtype) {
                this.relationtype.addExtendedProperties(source._relationtype);
            }
            else {
                this.relationtype = new fhir.FhirCode(source._relationtype);
            }
        }
        if (source['item']) {
            this.item = new fhir.Reference(source.item);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Required-bound Value Set for relationtype (CatalogEntry.relatedEntry.relationtype)
     */
    static get relationtypeRequiredCodes() {
        return RelationTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['relationtype']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property relationtype:fhir.FhirCode<RelationTypeCodeType> fhir: CatalogEntry.relatedEntry.relationtype:code' });
        }
        if (this['relationtype'] && (!Object.values(RelationTypeCodes).includes(this.relationtype))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property relationtype:fhir.FhirCode<RelationTypeCodeType> fhir: CatalogEntry.relatedEntry.relationtype:code Required binding to: RelationType' });
        }
        if (this["relationtype"]) {
            issues.push(...this.relationtype.doModelValidation());
        }
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item:fhir.Reference fhir: CatalogEntry.relatedEntry.item:Reference' });
        }
        if (this["item"]) {
            issues.push(...this.item.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CatalogEntryRelatedEntry._fts_dataType = 'CatalogEntryRelatedEntry';
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhir.DomainResource {
    /**
     * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CatalogEntry';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['orderable']) {
            this.orderable = new fhir.FhirBoolean({ value: source.orderable });
        }
        else {
            this.orderable = null;
        }
        if (source['_orderable']) {
            if (this.orderable) {
                this.orderable.addExtendedProperties(source._orderable);
            }
            else {
                this.orderable = new fhir.FhirBoolean(source._orderable);
            }
        }
        if (source['referencedItem']) {
            this.referencedItem = new fhir.Reference(source.referencedItem);
        }
        else {
            this.referencedItem = null;
        }
        if (source['additionalIdentifier']) {
            this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.additionalIdentifier = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classification = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['validTo']) {
            this.validTo = new fhir.FhirDateTime({ value: source.validTo });
        }
        if (source['_validTo']) {
            if (this.validTo) {
                this.validTo.addExtendedProperties(source._validTo);
            }
            else {
                this.validTo = new fhir.FhirDateTime(source._validTo);
            }
        }
        if (source['lastUpdated']) {
            this.lastUpdated = new fhir.FhirDateTime({ value: source.lastUpdated });
        }
        if (source['_lastUpdated']) {
            if (this.lastUpdated) {
                this.lastUpdated.addExtendedProperties(source._lastUpdated);
            }
            else {
                this.lastUpdated = new fhir.FhirDateTime(source._lastUpdated);
            }
        }
        if (source['additionalCharacteristic']) {
            this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.additionalCharacteristic = [];
        }
        if (source['additionalClassification']) {
            this.additionalClassification = source.additionalClassification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.additionalClassification = [];
        }
        if (source['relatedEntry']) {
            this.relatedEntry = source.relatedEntry.map((x) => new fhir.CatalogEntryRelatedEntry(x));
        }
        else {
            this.relatedEntry = [];
        }
    }
    /**
     * Required-bound Value Set for status (CatalogEntry.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"CatalogEntry" fhir: CatalogEntry.resourceType:"CatalogEntry"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['orderable']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property orderable:fhir.FhirBoolean fhir: CatalogEntry.orderable:boolean' });
        }
        if (this["orderable"]) {
            issues.push(...this.orderable.doModelValidation());
        }
        if (!this['referencedItem']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property referencedItem:fhir.Reference fhir: CatalogEntry.referencedItem:Reference' });
        }
        if (this["referencedItem"]) {
            issues.push(...this.referencedItem.doModelValidation());
        }
        if (this["additionalIdentifier"]) {
            this.additionalIdentifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["classification"]) {
            this.classification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<PublicationStatusCodeType> fhir: CatalogEntry.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["validityPeriod"]) {
            issues.push(...this.validityPeriod.doModelValidation());
        }
        if (this["validTo"]) {
            issues.push(...this.validTo.doModelValidation());
        }
        if (this["lastUpdated"]) {
            issues.push(...this.lastUpdated.doModelValidation());
        }
        if (this["additionalCharacteristic"]) {
            this.additionalCharacteristic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["additionalClassification"]) {
            this.additionalClassification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedEntry"]) {
            this.relatedEntry.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CatalogEntry._fts_dataType = 'CatalogEntry';
//# sourceMappingURL=data:application/json;base64,