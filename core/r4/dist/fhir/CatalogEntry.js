// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CatalogEntry
import * as fhir from '../fhir.js';
// @ts-ignore
import { RelationTypeVsValidation } from '../fhirValueSets/RelationTypeVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * Used for example, to point to a substance, or to a device used to administer a medication.
 */
export class CatalogEntryRelatedEntry extends fhir.BackboneElement {
    /**
     * Default constructor for CatalogEntryRelatedEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['relationtype']) {
            this.relationtype = new fhir.FhirCode({ value: source.relationtype });
        }
        else {
            this.relationtype = null;
        }
        if (source['_relationtype']) {
            if (this.relationtype) {
                this.relationtype.addExtendedProperties(source._relationtype);
            }
            else {
                this.relationtype = new fhir.FhirCode(source._relationtype);
            }
        }
        if (source['item']) {
            this.item = new fhir.Reference(source.item);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CatalogEntry.relatedEntry';
        }
        this.vReqSV('relationtype', expression, 'RelationType', RelationTypeVsValidation, 'r');
        this.vReqS('item', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CatalogEntryRelatedEntry._fts_dataType = 'CatalogEntryRelatedEntry';
/**
 * Catalog entries are wrappers that contextualize items included in a catalog.
 */
export class CatalogEntry extends fhir.DomainResource {
    /**
     * Default constructor for CatalogEntry - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'CatalogEntry';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['orderable']) {
            this.orderable = new fhir.FhirBoolean({ value: source.orderable });
        }
        else {
            this.orderable = null;
        }
        if (source['_orderable']) {
            if (this.orderable) {
                this.orderable.addExtendedProperties(source._orderable);
            }
            else {
                this.orderable = new fhir.FhirBoolean(source._orderable);
            }
        }
        if (source['referencedItem']) {
            this.referencedItem = new fhir.Reference(source.referencedItem);
        }
        else {
            this.referencedItem = null;
        }
        if (source['additionalIdentifier']) {
            this.additionalIdentifier = source.additionalIdentifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.additionalIdentifier = [];
        }
        if (source['classification']) {
            this.classification = source.classification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.classification = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['validTo']) {
            this.validTo = new fhir.FhirDateTime({ value: source.validTo });
        }
        if (source['_validTo']) {
            if (this.validTo) {
                this.validTo.addExtendedProperties(source._validTo);
            }
            else {
                this.validTo = new fhir.FhirDateTime(source._validTo);
            }
        }
        if (source['lastUpdated']) {
            this.lastUpdated = new fhir.FhirDateTime({ value: source.lastUpdated });
        }
        if (source['_lastUpdated']) {
            if (this.lastUpdated) {
                this.lastUpdated.addExtendedProperties(source._lastUpdated);
            }
            else {
                this.lastUpdated = new fhir.FhirDateTime(source._lastUpdated);
            }
        }
        if (source['additionalCharacteristic']) {
            this.additionalCharacteristic = source.additionalCharacteristic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.additionalCharacteristic = [];
        }
        if (source['additionalClassification']) {
            this.additionalClassification = source.additionalClassification.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.additionalClassification = [];
        }
        if (source['relatedEntry']) {
            this.relatedEntry = source.relatedEntry.map((x) => new fhir.CatalogEntryRelatedEntry(x));
        }
        else {
            this.relatedEntry = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'CatalogEntry';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vOptS('type', expression);
        this.vReqS('orderable', expression);
        this.vReqS('referencedItem', expression);
        this.vOptA('additionalIdentifier', expression);
        this.vOptA('classification', expression);
        this.vOptSV('status', expression, 'PublicationStatus', PublicationStatusVsValidation, 'r');
        this.vOptS('validityPeriod', expression);
        this.vOptS('validTo', expression);
        this.vOptS('lastUpdated', expression);
        this.vOptA('additionalCharacteristic', expression);
        this.vOptA('additionalClassification', expression);
        this.vOptA('relatedEntry', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
CatalogEntry._fts_dataType = 'CatalogEntry';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2F0YWxvZ0VudHJ5LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9DYXRhbG9nRW50cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUd4RixhQUFhO0FBQ2IsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFtQmxHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHdCQUF5QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBYWhFOztPQUVHO0lBQ0gsWUFBWSxTQUErQyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUNyRyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQXVCLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDckg7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQ2xDLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQzNCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxhQUFjLENBQUMsQ0FBQzthQUFFO2lCQUNyRjtnQkFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBdUIsTUFBTSxDQUFDLGFBQXVDLENBQUMsQ0FBQzthQUFFO1NBQ3RIO1FBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxD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QUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3RGLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsRUFBQyxVQUFVLENBQUMsQ0FBQTtRQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLDBCQUEwQixFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2pELElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3JDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBN0hEOztHQUVHO0FBQzZCLDBCQUFhLEdBQVUsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBDYXRhbG9nRW50cnlcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZUNvZGVzLCAgUmVsYXRpb25UeXBlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1JlbGF0aW9uVHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGVWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1JlbGF0aW9uVHlwZVZzVmFsaWRhdGlvbi5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHVibGljYXRpb25TdGF0dXNDb2RlcywgIFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1B1YmxpY2F0aW9uU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFB1YmxpY2F0aW9uU3RhdHVzVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QdWJsaWNhdGlvblN0YXR1c1ZzVmFsaWRhdGlvbi5qcyc7XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBDYXRhbG9nRW50cnlSZWxhdGVkRW50cnkgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2F0YWxvZ0VudHJ5UmVsYXRlZEVudHJ5QXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgcmVsYXRpb24gdG8gdGhlIHJlbGF0ZWQgaXRlbTogY2hpbGQsIHBhcmVudCwgcGFja2FnZUNvbnRlbnQsIGNvbnRhaW5lclBhY2thZ2UsIHVzZWRJbiwgdXNlcywgcmVxdWlyZXMsIGV0Yy5cclxuICAgKi9cclxuICByZWxhdGlvbnR5cGU6IGZoaXIuRmhpckNvZGU8UmVsYXRpb25UeXBlQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhdGFsb2dFbnRyeS5yZWxhdGVkRW50cnkucmVsYXRpb250eXBlXHJcbiAgICovXHJcbiAgX3JlbGF0aW9udHlwZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlZmVyZW5jZSB0byB0aGUgcmVsYXRlZCBpdGVtLlxyXG4gICAqL1xyXG4gIGl0ZW06IGZoaXIuUmVmZXJlbmNlQXJnc3xudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogVXNlZCBmb3IgZXhhbXBsZSwgdG8gcG9pbnQgdG8gYSBzdWJzdGFuY2UsIG9yIHRvIGEgZGV2aWNlIHVzZWQgdG8gYWRtaW5pc3RlciBhIG1lZGljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2F0YWxvZ0VudHJ5UmVsYXRlZEVudHJ5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnQ2F0YWxvZ0VudHJ5UmVsYXRlZEVudHJ5JztcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiByZWxhdGlvbiB0byB0aGUgcmVsYXRlZCBpdGVtOiBjaGlsZCwgcGFyZW50LCBwYWNrYWdlQ29udGVudCwgY29udGFpbmVyUGFja2FnZSwgdXNlZEluLCB1c2VzLCByZXF1aXJlcywgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxhdGlvbnR5cGU6IGZoaXIuRmhpckNvZGU8UmVsYXRpb25UeXBlQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlZmVyZW5jZSB0byB0aGUgcmVsYXRlZCBpdGVtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpdGVtOiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENhdGFsb2dFbnRyeVJlbGF0ZWRFbnRyeSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENhdGFsb2dFbnRyeVJlbGF0ZWRFbnRyeUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyZWxhdGlvbnR5cGUnXSkgeyB0aGlzLnJlbGF0aW9udHlwZSA9IG5ldyBmaGlyLkZoaXJDb2RlPFJlbGF0aW9uVHlwZUNvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5yZWxhdGlvbnR5cGV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVsYXRpb250eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3JlbGF0aW9udHlwZSddKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlbGF0aW9udHlwZSkgeyB0aGlzLnJlbGF0aW9udHlwZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9yZWxhdGlvbnR5cGUhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5yZWxhdGlvbnR5cGUgPSBuZXcgZmhpci5GaGlyQ29kZTxSZWxhdGlvblR5cGVDb2RlVHlwZT4oc291cmNlLl9yZWxhdGlvbnR5cGUgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ2l0ZW0nXSkgeyB0aGlzLml0ZW0gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLml0ZW0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pdGVtID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXRhbG9nRW50cnkucmVsYXRlZEVudHJ5JyB9XHJcbiAgICB0aGlzLnZSZXFTVigncmVsYXRpb250eXBlJyxleHByZXNzaW9uLCdSZWxhdGlvblR5cGUnLFJlbGF0aW9uVHlwZVZzVmFsaWRhdGlvbiwncicpXHJcbiAgICB0aGlzLnZSZXFTKCdpdGVtJyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIENhdGFsb2dFbnRyeSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDYXRhbG9nRW50cnlBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJDYXRhbG9nRW50cnlcInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVXNlZCBpbiBzdXBwb3J0aW5nIGRpZmZlcmVudCBpZGVudGlmaWVycyBmb3IgdGhlIHNhbWUgcHJvZHVjdCwgZS5nLiBtYW51ZmFjdHVyZXIgY29kZSBhbmQgcmV0YWlsZXIgY29kZS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiBpdGVtIC0gbWVkaWNhdGlvbiwgZGV2aWNlLCBzZXJ2aWNlLCBwcm90b2NvbCBvciBvdGhlci5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBlbnRyeSByZXByZXNlbnRzIGFuIG9yZGVyYWJsZSBpdGVtLlxyXG4gICAqL1xyXG4gIG9yZGVyYWJsZTogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2F0YWxvZ0VudHJ5Lm9yZGVyYWJsZVxyXG4gICAqL1xyXG4gIF9vcmRlcmFibGU/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpdGVtIGluIGEgY2F0YWxvZyBvciBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIHJlZmVyZW5jZWRJdGVtOiBmaGlyLlJlZmVyZW5jZUFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBVc2VkIGluIHN1cHBvcnRpbmcgcmVsYXRlZCBjb25jZXB0cywgZS5nLiBOREMgdG8gUnhOb3JtLlxyXG4gICAqL1xyXG4gIGFkZGl0aW9uYWxJZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDbGFzc2VzIG9mIGRldmljZXMsIG9yIEFUQyBmb3IgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBjbGFzc2lmaWNhdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc2VkIHRvIHN1cHBvcnQgY2F0YWxvZyBleGNoYW5nZSBldmVuIGZvciB1bnN1cHBvcnRlZCBwcm9kdWN0cywgZS5nLiBnZXR0aW5nIGxpc3Qgb2YgbWVkaWNhdGlvbnMgZXZlbiBpZiBub3QgcHJlc2NyaWJhYmxlLlxyXG4gICAqL1xyXG4gIHN0YXR1cz86IGZoaXIuRmhpckNvZGU8UHVibGljYXRpb25TdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ2F0YWxvZ0VudHJ5LnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIHBlcmlvZCBpbiB3aGljaCB0aGlzIGNhdGFsb2cgZW50cnkgaXMgZXhwZWN0ZWQgdG8gYmUgYWN0aXZlLlxyXG4gICAqL1xyXG4gIHZhbGlkaXR5UGVyaW9kPzogZmhpci5QZXJpb2RBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGF0ZSB1bnRpbCB3aGljaCB0aGlzIGNhdGFsb2cgZW50cnkgaXMgZXhwZWN0ZWQgdG8gYmUgYWN0aXZlLlxyXG4gICAqL1xyXG4gIHZhbGlkVG8/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDYXRhbG9nRW50cnkudmFsaWRUb1xyXG4gICAqL1xyXG4gIF92YWxpZFRvPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBQZXJoYXBzIG5vdCBuZWVkZWQgLSBpZiB3ZSB1c2UgZmhpciByZXNvdXJjZSBtZXRhZGF0YS5cclxuICAgKi9cclxuICBsYXN0VXBkYXRlZD86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENhdGFsb2dFbnRyeS5sYXN0VXBkYXRlZFxyXG4gICAqL1xyXG4gIF9sYXN0VXBkYXRlZD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVXNlZCBmb3IgZXhhbXBsZWZvciBPdXQgb2YgRm9ybXVsYXJ5LCBvciBhbnkgc3BlY2lmaWNzLlxyXG4gICAqL1xyXG4gIGFkZGl0aW9uYWxDaGFyYWN0ZXJpc3RpYz86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc2VyIGZvciBleGFtcGxlIGZvciBBVEMgY2xhc3NpZmljYXRpb24sIG9yLlxyXG4gICAqL1xyXG4gIGFkZGl0aW9uYWxDbGFzc2lmaWNhdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc2VkIGZvciBleGFtcGxlLCB0byBwb2ludCB0byBhIHN1YnN0YW5jZSwgb3IgdG8gYSBkZXZpY2UgdXNlZCB0byBhZG1pbmlzdGVyIGEgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICByZWxhdGVkRW50cnk/OiBmaGlyLkNhdGFsb2dFbnRyeVJlbGF0ZWRFbnRyeUFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYXRhbG9nIGVudHJpZXMgYXJlIHdyYXBwZXJzIHRoYXQgY29udGV4dHVhbGl6ZSBpdGVtcyBpbmNsdWRlZCBpbiBhIGNhdGFsb2cuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2F0YWxvZ0VudHJ5IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdDYXRhbG9nRW50cnknO1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNvdXJjZVR5cGU6IFwiQ2F0YWxvZ0VudHJ5XCI7XHJcbiAgLyoqXHJcbiAgICogVXNlZCBpbiBzdXBwb3J0aW5nIGRpZmZlcmVudCBpZGVudGlmaWVycyBmb3IgdGhlIHNhbWUgcHJvZHVjdCwgZS5nLiBtYW51ZmFjdHVyZXIgY29kZSBhbmQgcmV0YWlsZXIgY29kZS5cclxuICAgKi9cclxuICBwdWJsaWMgaWRlbnRpZmllcjogZmhpci5JZGVudGlmaWVyW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgaXRlbSAtIG1lZGljYXRpb24sIGRldmljZSwgc2VydmljZSwgcHJvdG9jb2wgb3Igb3RoZXIuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgZW50cnkgcmVwcmVzZW50cyBhbiBvcmRlcmFibGUgaXRlbS5cclxuICAgKi9cclxuICBwdWJsaWMgb3JkZXJhYmxlOiBmaGlyLkZoaXJCb29sZWFufG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIGl0ZW0gaW4gYSBjYXRhbG9nIG9yIGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHJlZmVyZW5jZWRJdGVtOiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFVzZWQgaW4gc3VwcG9ydGluZyByZWxhdGVkIGNvbmNlcHRzLCBlLmcuIE5EQyB0byBSeE5vcm0uXHJcbiAgICovXHJcbiAgcHVibGljIGFkZGl0aW9uYWxJZGVudGlmaWVyOiBmaGlyLklkZW50aWZpZXJbXTtcclxuICAvKipcclxuICAgKiBDbGFzc2VzIG9mIGRldmljZXMsIG9yIEFUQyBmb3IgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgY2xhc3NpZmljYXRpb246IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVXNlZCB0byBzdXBwb3J0IGNhdGFsb2cgZXhjaGFuZ2UgZXZlbiBmb3IgdW5zdXBwb3J0ZWQgcHJvZHVjdHMsIGUuZy4gZ2V0dGluZyBsaXN0IG9mIG1lZGljYXRpb25zIGV2ZW4gaWYgbm90IHByZXNjcmliYWJsZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzPzogZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpbWUgcGVyaW9kIGluIHdoaWNoIHRoaXMgY2F0YWxvZyBlbnRyeSBpcyBleHBlY3RlZCB0byBiZSBhY3RpdmUuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbGlkaXR5UGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRlIHVudGlsIHdoaWNoIHRoaXMgY2F0YWxvZyBlbnRyeSBpcyBleHBlY3RlZCB0byBiZSBhY3RpdmUuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbGlkVG8/OiBmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUGVyaGFwcyBub3QgbmVlZGVkIC0gaWYgd2UgdXNlIGZoaXIgcmVzb3VyY2UgbWV0YWRhdGEuXHJcbiAgICovXHJcbiAgcHVibGljIGxhc3RVcGRhdGVkPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFVzZWQgZm9yIGV4YW1wbGVmb3IgT3V0IG9mIEZvcm11bGFyeSwgb3IgYW55IHNwZWNpZmljcy5cclxuICAgKi9cclxuICBwdWJsaWMgYWRkaXRpb25hbENoYXJhY3RlcmlzdGljOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFVzZXIgZm9yIGV4YW1wbGUgZm9yIEFUQyBjbGFzc2lmaWNhdGlvbiwgb3IuXHJcbiAgICovXHJcbiAgcHVibGljIGFkZGl0aW9uYWxDbGFzc2lmaWNhdGlvbjogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBVc2VkIGZvciBleGFtcGxlLCB0byBwb2ludCB0byBhIHN1YnN0YW5jZSwgb3IgdG8gYSBkZXZpY2UgdXNlZCB0byBhZG1pbmlzdGVyIGEgbWVkaWNhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVsYXRlZEVudHJ5OiBmaGlyLkNhdGFsb2dFbnRyeVJlbGF0ZWRFbnRyeVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIENhdGFsb2dFbnRyeSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPENhdGFsb2dFbnRyeUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdDYXRhbG9nRW50cnknO1xyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IHNvdXJjZS5pZGVudGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuSWRlbnRpZmllcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndHlwZSddKSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UudHlwZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ29yZGVyYWJsZSddKSB7IHRoaXMub3JkZXJhYmxlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2Uub3JkZXJhYmxlfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm9yZGVyYWJsZSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19vcmRlcmFibGUnXSkge1xyXG4gICAgICBpZiAodGhpcy5vcmRlcmFibGUpIHsgdGhpcy5vcmRlcmFibGUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fb3JkZXJhYmxlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMub3JkZXJhYmxlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oc291cmNlLl9vcmRlcmFibGUgYXMgUGFydGlhbDxmaGlyLkZoaXJCb29sZWFuQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydyZWZlcmVuY2VkSXRlbSddKSB7IHRoaXMucmVmZXJlbmNlZEl0ZW0gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnJlZmVyZW5jZWRJdGVtKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVmZXJlbmNlZEl0ZW0gPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydhZGRpdGlvbmFsSWRlbnRpZmllciddKSB7IHRoaXMuYWRkaXRpb25hbElkZW50aWZpZXIgPSBzb3VyY2UuYWRkaXRpb25hbElkZW50aWZpZXIubWFwKCh4KSA9PiBuZXcgZmhpci5JZGVudGlmaWVyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWRkaXRpb25hbElkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY2xhc3NpZmljYXRpb24nXSkgeyB0aGlzLmNsYXNzaWZpY2F0aW9uID0gc291cmNlLmNsYXNzaWZpY2F0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY2xhc3NpZmljYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3N0YXR1cyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXR1cykgeyB0aGlzLnN0YXR1cy5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zdGF0dXMhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPihzb3VyY2UuX3N0YXR1cyBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsndmFsaWRpdHlQZXJpb2QnXSkgeyB0aGlzLnZhbGlkaXR5UGVyaW9kID0gbmV3IGZoaXIuUGVyaW9kKHNvdXJjZS52YWxpZGl0eVBlcmlvZCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhbGlkVG8nXSkgeyB0aGlzLnZhbGlkVG8gPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UudmFsaWRUb30pOyB9XHJcbiAgICBpZiAoc291cmNlWydfdmFsaWRUbyddKSB7XHJcbiAgICAgIGlmICh0aGlzLnZhbGlkVG8pIHsgdGhpcy52YWxpZFRvLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3ZhbGlkVG8hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy52YWxpZFRvID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fdmFsaWRUbyBhcyBQYXJ0aWFsPGZoaXIuRmhpckRhdGVUaW1lQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydsYXN0VXBkYXRlZCddKSB7IHRoaXMubGFzdFVwZGF0ZWQgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UubGFzdFVwZGF0ZWR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2xhc3RVcGRhdGVkJ10pIHtcclxuICAgICAgaWYgKHRoaXMubGFzdFVwZGF0ZWQpIHsgdGhpcy5sYXN0VXBkYXRlZC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9sYXN0VXBkYXRlZCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLmxhc3RVcGRhdGVkID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fbGFzdFVwZGF0ZWQgYXMgUGFydGlhbDxmaGlyLkZoaXJEYXRlVGltZUFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWRkaXRpb25hbENoYXJhY3RlcmlzdGljJ10pIHsgdGhpcy5hZGRpdGlvbmFsQ2hhcmFjdGVyaXN0aWMgPSBzb3VyY2UuYWRkaXRpb25hbENoYXJhY3RlcmlzdGljLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWRkaXRpb25hbENoYXJhY3RlcmlzdGljID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2FkZGl0aW9uYWxDbGFzc2lmaWNhdGlvbiddKSB7IHRoaXMuYWRkaXRpb25hbENsYXNzaWZpY2F0aW9uID0gc291cmNlLmFkZGl0aW9uYWxDbGFzc2lmaWNhdGlvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmFkZGl0aW9uYWxDbGFzc2lmaWNhdGlvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWxhdGVkRW50cnknXSkgeyB0aGlzLnJlbGF0ZWRFbnRyeSA9IHNvdXJjZS5yZWxhdGVkRW50cnkubWFwKCh4KSA9PiBuZXcgZmhpci5DYXRhbG9nRW50cnlSZWxhdGVkRW50cnkoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWxhdGVkRW50cnkgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdDYXRhbG9nRW50cnknIH1cclxuICAgIHRoaXMudlJlcVMoJ3Jlc291cmNlVHlwZScsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2lkZW50aWZpZXInLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRTKCd0eXBlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52UmVxUygnb3JkZXJhYmxlJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52UmVxUygncmVmZXJlbmNlZEl0ZW0nLGV4cHJlc3Npb24pXHJcbiAgICB0aGlzLnZPcHRBKCdhZGRpdGlvbmFsSWRlbnRpZmllcicsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdEEoJ2NsYXNzaWZpY2F0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0U1YoJ3N0YXR1cycsZXhwcmVzc2lvbiwnUHVibGljYXRpb25TdGF0dXMnLFB1YmxpY2F0aW9uU3RhdHVzVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudk9wdFMoJ3ZhbGlkaXR5UGVyaW9kJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0UygndmFsaWRUbycsZXhwcmVzc2lvbilcclxuICAgIHRoaXMudk9wdFMoJ2xhc3RVcGRhdGVkJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnYWRkaXRpb25hbENoYXJhY3RlcmlzdGljJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgnYWRkaXRpb25hbENsYXNzaWZpY2F0aW9uJyxleHByZXNzaW9uKVxyXG4gICAgdGhpcy52T3B0QSgncmVsYXRlZEVudHJ5JyxleHByZXNzaW9uKVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19