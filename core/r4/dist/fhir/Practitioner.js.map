{"version":3,"file":"Practitioner.js","sources":["../../src/fhir/Practitioner.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Practitioner\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { V2270360Codings, V2270360CodingType,} from '../fhirValueSets/V2270360Codings.js';\r\n// @ts-ignore\r\nimport { V2270360Codes,  V2270360CodeType } from '../fhirValueSets/V2270360Codes.js';\r\n// @ts-ignore\r\nimport { AdministrativeGenderCodings, AdministrativeGenderCodingType,} from '../fhirValueSets/AdministrativeGenderCodings.js';\r\n// @ts-ignore\r\nimport { AdministrativeGenderCodes,  AdministrativeGenderCodeType } from '../fhirValueSets/AdministrativeGenderCodes.js';\r\n// @ts-ignore\r\nimport { LanguagesCodings, LanguagesCodingType,} from '../fhirValueSets/LanguagesCodings.js';\r\n// @ts-ignore\r\nimport { LanguagesCodes,  LanguagesCodeType } from '../fhirValueSets/LanguagesCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the PractitionerQualification type.\r\n */\r\nexport interface PractitionerQualificationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * An identifier that applies to this person's qualification in this role.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * Coded representation of the qualification.\r\n   */\r\n  code: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * Period during which the qualification is valid.\r\n   */\r\n  period?: fhir.PeriodArgs|undefined;\r\n  /**\r\n   * Organization that regulates and issues the qualification.\r\n   */\r\n  issuer?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.\r\n */\r\nexport class PractitionerQualification extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'PractitionerQualification';\r\n  /**\r\n   * An identifier that applies to this person's qualification in this role.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * Coded representation of the qualification.\r\n   */\r\n  public code: fhir.CodeableConcept|null;\r\n  /**\r\n   * Period during which the qualification is valid.\r\n   */\r\n  public period?: fhir.Period|undefined;\r\n  /**\r\n   * Organization that regulates and issues the qualification.\r\n   */\r\n  public issuer?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for PractitionerQualification - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<PractitionerQualificationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }\r\n    else { this.code = null; }\r\n    if (source['period']) { this.period = new fhir.Period(source.period); }\r\n    if (source['issuer']) { this.issuer = new fhir.Reference(source.issuer); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['code']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Practitioner.qualification.code:CodeableConcept', }));\r\n    }\r\n    if (this[\"code\"]) { outcome.issue!.push(...this.code.doModelValidation().issue!); }\r\n    if (this[\"period\"]) { outcome.issue!.push(...this.period.doModelValidation().issue!); }\r\n    if (this[\"issuer\"]) { outcome.issue!.push(...this.issuer.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the Practitioner type.\r\n */\r\nexport interface PractitionerArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Practitioner\"|undefined;\r\n  /**\r\n   * An identifier that applies to this person in this role.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.\r\n   */\r\n  active?: fhir.FhirBoolean|boolean|undefined;\r\n  /**\r\n   * The selection of the use property should ensure that there is a single usual name specified, and others use the nickname (alias), old, or other values as appropriate.  \r\n   * In general, select the value to be used in the ResourceReference.display based on this:\r\n   * 1. There is more than 1 name\r\n   * 2. Use = usual\r\n   * 3. Period is current to the date of the usage\r\n   * 4. Use = official\r\n   * 5. Other order as decided by internal business rules.\r\n   */\r\n  name?: fhir.HumanNameArgs[]|undefined;\r\n  /**\r\n   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and to help with identification.  These typically will have home numbers, or mobile numbers that are not role specific.\r\n   */\r\n  telecom?: fhir.ContactPointArgs[]|undefined;\r\n  /**\r\n   * The PractitionerRole does not have an address value on it, as it is expected that the location property be used for this purpose (which has an address).\r\n   */\r\n  address?: fhir.AddressArgs[]|undefined;\r\n  /**\r\n   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.\r\n   */\r\n  gender?: AdministrativeGenderCodeType|undefined;\r\n  /**\r\n   * The date of birth for the practitioner.\r\n   */\r\n  birthDate?: fhir.FhirDate|string|undefined;\r\n  /**\r\n   * Image of the person.\r\n   */\r\n  photo?: fhir.AttachmentArgs[]|undefined;\r\n  /**\r\n   * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.\r\n   */\r\n  qualification?: fhir.PractitionerQualificationArgs[]|undefined;\r\n  /**\r\n   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.\r\n   */\r\n  communication?: fhir.CodeableConceptArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * A person who is directly or indirectly involved in the provisioning of healthcare.\r\n */\r\nexport class Practitioner extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Practitioner';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"Practitioner\";\r\n  /**\r\n   * An identifier that applies to this person in this role.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.\r\n   */\r\n  public active?: fhir.FhirBoolean|undefined;\r\n  /**\r\n   * The selection of the use property should ensure that there is a single usual name specified, and others use the nickname (alias), old, or other values as appropriate.  \r\n   * In general, select the value to be used in the ResourceReference.display based on this:\r\n   * 1. There is more than 1 name\r\n   * 2. Use = usual\r\n   * 3. Period is current to the date of the usage\r\n   * 4. Use = official\r\n   * 5. Other order as decided by internal business rules.\r\n   */\r\n  public name?: fhir.HumanName[];\r\n  /**\r\n   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and to help with identification.  These typically will have home numbers, or mobile numbers that are not role specific.\r\n   */\r\n  public telecom?: fhir.ContactPoint[];\r\n  /**\r\n   * The PractitionerRole does not have an address value on it, as it is expected that the location property be used for this purpose (which has an address).\r\n   */\r\n  public address?: fhir.Address[];\r\n  /**\r\n   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.\r\n   */\r\n  public gender?: AdministrativeGenderCodeType|undefined;\r\n  /**\r\n   * The date of birth for the practitioner.\r\n   */\r\n  public birthDate?: fhir.FhirDate|undefined;\r\n  /**\r\n   * Image of the person.\r\n   */\r\n  public photo?: fhir.Attachment[];\r\n  /**\r\n   * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.\r\n   */\r\n  public qualification?: fhir.PractitionerQualification[];\r\n  /**\r\n   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.\r\n   */\r\n  public communication?: fhir.CodeableConcept[];\r\n  /**\r\n   * Default constructor for Practitioner - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<PractitionerArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'Practitioner';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['active']) { this.active = new fhir.FhirBoolean({value: source.active}); }\r\n    if (source['name']) { this.name = source.name.map((x) => new fhir.HumanName(x)); }\r\n    else { this.name = []; }\r\n    if (source['telecom']) { this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x)); }\r\n    else { this.telecom = []; }\r\n    if (source['address']) { this.address = source.address.map((x) => new fhir.Address(x)); }\r\n    else { this.address = []; }\r\n    if (source['gender']) { this.gender = source.gender; }\r\n    if (source['birthDate']) { this.birthDate = new fhir.FhirDate({value: source.birthDate}); }\r\n    if (source['photo']) { this.photo = source.photo.map((x) => new fhir.Attachment(x)); }\r\n    else { this.photo = []; }\r\n    if (source['qualification']) { this.qualification = source.qualification.map((x) => new fhir.PractitionerQualification(x)); }\r\n    else { this.qualification = []; }\r\n    if (source['communication']) { this.communication = source.communication.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.communication = []; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for gender (Practitioner.gender)\r\n   */\r\n  public static genderRequiredCoding():AdministrativeGenderCodingType {\r\n    return AdministrativeGenderCodings;\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for communication (Practitioner.communication)\r\n   */\r\n  public static communicationPreferredCoding():LanguagesCodingType {\r\n    return LanguagesCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"Practitioner\" fhir: Practitioner.resourceType:\"Practitioner\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"active\"]) { outcome.issue!.push(...this.active.doModelValidation().issue!); }\r\n    if (this[\"name\"]) { this.name.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"telecom\"]) { this.telecom.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"address\"]) { this.address.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"birthDate\"]) { outcome.issue!.push(...this.birthDate.doModelValidation().issue!); }\r\n    if (this[\"photo\"]) { this.photo.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"qualification\"]) { this.qualification.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"communication\"]) { this.communication.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Identifier","fhir.CodeableConcept","fhir.Period","fhir.Reference","fhir.OperationOutcomeIssue","fhir.BackboneElement","fhir.FhirBoolean","fhir.HumanName","fhir.ContactPoint","fhir.Address","fhir.FhirDate","fhir.Attachment","fhir.PractitionerQualification","fhir.DomainResource"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AA6CA;;AAEG;AACH,IAAA,yBAAA,kBAAA,UAAA,MAAA,EAAA;IAA+C,SAAoB,CAAA,yBAAA,EAAA,MAAA,CAAA,CAAA;AAqBjE;;AAEG;IACH,SAAY,yBAAA,CAAA,MAAkD,EAAE,OAAwC,EAAA;AAA5F,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAkD,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAxG,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAOvB,IAAA,CAAA;AANC,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;YAAE,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIA,UAAe,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAChG,aAAA;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAAE,SAAA;AAC9B,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAIC,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AACrE,aAAA;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAAE,SAAA;AAC1B,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIC,MAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAAE,SAAA;AACvE,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIC,SAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAAE,SAAA;;KAC3E;AACD;;AAEG;AACa,IAAA,yBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrH,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACjB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIC,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,2GAA2G,GAAG,CAAC,CAAC,CAAC;AACtQ,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA7CD;;AAEG;IACoB,yBAAa,CAAA,aAAA,GAAU,2BAA2B,CAAC;IA2C5E,OAAC,yBAAA,CAAA;AAAA,CA/CD,CAA+CC,eAAoB,CA+ClE,EAAA;AAyDD;;AAEG;AACH,IAAA,YAAA,kBAAA,UAAA,MAAA,EAAA;IAAkC,SAAmB,CAAA,YAAA,EAAA,MAAA,CAAA,CAAA;AAuDnD;;AAEG;IACH,SAAY,YAAA,CAAA,MAAqC,EAAE,OAAwC,EAAA;AAA/E,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAqC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAA3F,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAmBvB,IAAA,CAAA;AAlBC,QAAA,KAAI,CAAC,YAAY,GAAG,cAAc,CAAC;AACnC,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;YAAE,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIL,UAAe,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAChG,aAAA;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAAE,SAAA;AAC9B,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,IAAIM,WAAgB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAC,CAAC,CAAC;AAAE,SAAA;AACrF,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;YAAE,KAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC7E,aAAA;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AAAE,SAAA;AACxB,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;YAAE,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,YAAiB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACzF,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAAE,SAAA;AAC3B,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;YAAE,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,OAAY,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACpF,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAAE,SAAA;AAC3B,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAAE,SAAA;AACtD,QAAA,IAAI,MAAM,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,SAAS,GAAG,IAAIC,QAAa,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,SAAS,EAAC,CAAC,CAAC;AAAE,SAAA;AAC3F,QAAA,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;YAAE,KAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,UAAe,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACjF,aAAA;AAAE,YAAA,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAAE,SAAA;AACzB,QAAA,IAAI,MAAM,CAAC,eAAe,CAAC,EAAE;YAAE,KAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,yBAA8B,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACxH,aAAA;AAAE,YAAA,KAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAAE,SAAA;AACjC,QAAA,IAAI,MAAM,CAAC,eAAe,CAAC,EAAE;YAAE,KAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIX,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC9G,aAAA;AAAE,YAAA,KAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAAE,SAAA;;KAClC;AACD;;AAEG;AACW,IAAA,YAAA,CAAA,oBAAoB,GAAlC,YAAA;AACE,QAAA,OAAO,2BAA2B,CAAC;KACpC,CAAA;AACD;;AAEG;AACW,IAAA,YAAA,CAAA,4BAA4B,GAA1C,YAAA;AACE,QAAA,OAAO,gBAAgB,CAAC;KACzB,CAAA;AACD;;AAEG;AACa,IAAA,YAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;AACzB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIG,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,sGAAsG,GAAG,CAAC,CAAC,CAAC;AACjQ,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrH,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvF,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACzG,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC7F,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC3G,QAAA,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC3H,QAAA,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC3H,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA5GD;;AAEG;IACoB,YAAa,CAAA,aAAA,GAAU,cAAc,CAAC;IA0G/D,OAAC,YAAA,CAAA;AAAA,CA9GD,CAAkCS,cAAmB,CA8GpD;;;;"}