// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Questionnaire
import * as fhir from '../fhir.js';
// @ts-ignore
import { QuestionnaireEnableOperatorCodings, } from '../fhirValueSets/QuestionnaireEnableOperatorCodings.js';
// @ts-ignore
import { ItemTypeCodings, } from '../fhirValueSets/ItemTypeCodings.js';
// @ts-ignore
import { QuestionnaireEnableBehaviorCodings, } from '../fhirValueSets/QuestionnaireEnableBehaviorCodings.js';
// @ts-ignore
import { PublicationStatusCodings, } from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { ResourceTypesCodings, } from '../fhirValueSets/ResourceTypesCodings.js';
/**
 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
 */
export class QuestionnaireItemEnableWhen extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemEnableWhen - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['question']) {
            this.question = new fhir.FhirString({ value: source.question });
        }
        else {
            this.question = null;
        }
        if (source['operator']) {
            this.operator = source.operator;
        }
        else {
            this.operator = null;
        }
        if (source['answer']) {
            this.answer = source.answer;
        }
        else if (source['answerBoolean']) {
            this.answer = new fhir.FhirBoolean({ value: source.answerBoolean });
        }
        else if (source['answerDecimal']) {
            this.answer = new fhir.FhirDecimal({ value: source.answerDecimal });
        }
        else if (source['answerInteger']) {
            this.answer = new fhir.FhirInteger({ value: source.answerInteger });
        }
        else if (source['answerDate']) {
            this.answer = new fhir.FhirDate({ value: source.answerDate });
        }
        else if (source['answerDateTime']) {
            this.answer = new fhir.FhirDateTime({ value: source.answerDateTime });
        }
        else if (source['answerTime']) {
            this.answer = new fhir.FhirTime({ value: source.answerTime });
        }
        else if (source['answerString']) {
            this.answer = new fhir.FhirString({ value: source.answerString });
        }
        else if (source['answerCoding']) {
            this.answer = new fhir.Coding(source.answerCoding);
        }
        else if (source['answerQuantity']) {
            this.answer = new fhir.Quantity(source.answerQuantity);
        }
        else if (source['answerReference']) {
            this.answer = new fhir.Reference(source.answerReference);
        }
        else {
            this.answer = null;
        }
    }
    /**
     * Required-bound Value Set for operator (Questionnaire.item.enableWhen.operator)
     */
    static operatorRequiredCoding() {
        return QuestionnaireEnableOperatorCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['question']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property question:fhir.FhirString fhir: Questionnaire.item.enableWhen.question:string', });
        }
        if (this["question"]) {
            issues.push(...this.question.doModelValidation());
        }
        if (!this['operator']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property operator:QuestionnaireEnableOperatorCodeType fhir: Questionnaire.item.enableWhen.operator:code', });
        }
        if (!this['answer']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property answer: fhir: Questionnaire.item.enableWhen.answer[x]:', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemEnableWhen._fts_dataType = 'QuestionnaireItemEnableWhen';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.enableWhen.answer[x]
 */
QuestionnaireItemEnableWhen._fts_answerIsChoice = true;
/**
 * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
 */
export class QuestionnaireItemAnswerOption extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemAnswerOption - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else {
            this.value = null;
        }
        if (source['initialSelected']) {
            this.initialSelected = new fhir.FhirBoolean({ value: source.initialSelected });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value: fhir: Questionnaire.item.answerOption.value[x]:', });
        }
        if (this["initialSelected"]) {
            issues.push(...this.initialSelected.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemAnswerOption._fts_dataType = 'QuestionnaireItemAnswerOption';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.answerOption.value[x]
 */
QuestionnaireItemAnswerOption._fts_valueIsChoice = true;
/**
 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
 */
export class QuestionnaireItemInitial extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItemInitial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDate']) {
            this.value = new fhir.FhirDate({ value: source.valueDate });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueCoding']) {
            this.value = new fhir.Coding(source.valueCoding);
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        else {
            this.value = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value: fhir: Questionnaire.item.initial.value[x]:', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItemInitial._fts_dataType = 'QuestionnaireItemInitial';
/**
 * Internal flag to properly serialize choice-type element Questionnaire.item.initial.value[x]
 */
QuestionnaireItemInitial._fts_valueIsChoice = true;
/**
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
export class QuestionnaireItem extends fhir.BackboneElement {
    /**
     * Default constructor for QuestionnaireItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['linkId']) {
            this.linkId = new fhir.FhirString({ value: source.linkId });
        }
        else {
            this.linkId = null;
        }
        if (source['definition']) {
            this.definition = new fhir.FhirUri({ value: source.definition });
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['prefix']) {
            this.prefix = new fhir.FhirString({ value: source.prefix });
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['enableWhen']) {
            this.enableWhen = source.enableWhen.map((x) => new fhir.QuestionnaireItemEnableWhen(x));
        }
        else {
            this.enableWhen = [];
        }
        if (source['enableBehavior']) {
            this.enableBehavior = source.enableBehavior;
        }
        if (source['required']) {
            this.required = new fhir.FhirBoolean({ value: source.required });
        }
        if (source['repeats']) {
            this.repeats = new fhir.FhirBoolean({ value: source.repeats });
        }
        if (source['readOnly']) {
            this.readOnly = new fhir.FhirBoolean({ value: source.readOnly });
        }
        if (source['maxLength']) {
            this.maxLength = new fhir.FhirInteger({ value: source.maxLength });
        }
        if (source['answerValueSet']) {
            this.answerValueSet = new fhir.FhirCanonical({ value: source.answerValueSet });
        }
        if (source['answerOption']) {
            this.answerOption = source.answerOption.map((x) => new fhir.QuestionnaireItemAnswerOption(x));
        }
        else {
            this.answerOption = [];
        }
        if (source['initial']) {
            this.initial = source.initial.map((x) => new fhir.QuestionnaireItemInitial(x));
        }
        else {
            this.initial = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Required-bound Value Set for type (Questionnaire.item.type)
     */
    static typeRequiredCoding() {
        return ItemTypeCodings;
    }
    /**
     * Required-bound Value Set for enableBehavior (Questionnaire.item.enableBehavior)
     */
    static enableBehaviorRequiredCoding() {
        return QuestionnaireEnableBehaviorCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['linkId']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property linkId:fhir.FhirString fhir: Questionnaire.item.linkId:string', });
        }
        if (this["linkId"]) {
            issues.push(...this.linkId.doModelValidation());
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["prefix"]) {
            issues.push(...this.prefix.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:ItemTypeCodeType fhir: Questionnaire.item.type:code', });
        }
        if (this["enableWhen"]) {
            this.enableWhen.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["required"]) {
            issues.push(...this.required.doModelValidation());
        }
        if (this["repeats"]) {
            issues.push(...this.repeats.doModelValidation());
        }
        if (this["readOnly"]) {
            issues.push(...this.readOnly.doModelValidation());
        }
        if (this["maxLength"]) {
            issues.push(...this.maxLength.doModelValidation());
        }
        if (this["answerValueSet"]) {
            issues.push(...this.answerValueSet.doModelValidation());
        }
        if (this["answerOption"]) {
            this.answerOption.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["initial"]) {
            this.initial.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["item"]) {
            this.item.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
QuestionnaireItem._fts_dataType = 'QuestionnaireItem';
/**
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
export class Questionnaire extends fhir.DomainResource {
    /**
     * Default constructor for Questionnaire - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Questionnaire';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.derivedFrom = [];
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['subjectType']) {
            this.subjectType = source.subjectType.map((x) => new fhir.FhirCode({ value: x }));
        }
        else {
            this.subjectType = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.QuestionnaireItem(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Required-bound Value Set for status (Questionnaire.status)
     */
    static statusRequiredCoding() {
        return PublicationStatusCodings;
    }
    /**
     * Required-bound Value Set for subjectType (Questionnaire.subjectType)
     */
    static subjectTypeRequiredCoding() {
        return ResourceTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Questionnaire" fhir: Questionnaire.resourceType:"Questionnaire"', });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["derivedFrom"]) {
            this.derivedFrom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: Questionnaire.status:code', });
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["subjectType"]) {
            this.subjectType.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["approvalDate"]) {
            issues.push(...this.approvalDate.doModelValidation());
        }
        if (this["lastReviewDate"]) {
            issues.push(...this.lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            issues.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["item"]) {
            this.item.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Questionnaire._fts_dataType = 'Questionnaire';
//# sourceMappingURL=data:application/json;base64,