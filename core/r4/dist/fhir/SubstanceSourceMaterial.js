/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Identifier } from './Identifier.js';

// <auto-generated/>
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
 */
var SubstanceSourceMaterialFractionDescription = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialFractionDescription, _super);
    /**
     * Default constructor for SubstanceSourceMaterialFractionDescription - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSourceMaterialFractionDescription(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['fraction']) {
            _this.fraction = new FhirString({ value: source.fraction });
        }
        if (source['materialType']) {
            _this.materialType = new CodeableConcept(source.materialType);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSourceMaterialFractionDescription.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["fraction"]) {
            (_a = outcome.issue).push.apply(_a, this.fraction.doModelValidation().issue);
        }
        if (this["materialType"]) {
            (_b = outcome.issue).push.apply(_b, this.materialType.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSourceMaterialFractionDescription._fts_dataType = 'SubstanceSourceMaterialFractionDescription';
    return SubstanceSourceMaterialFractionDescription;
}(BackboneElement));
/**
 * 4.9.13.6.1 Author type (Conditional).
 */
var SubstanceSourceMaterialOrganismAuthor = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganismAuthor, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganismAuthor - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSourceMaterialOrganismAuthor(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['authorType']) {
            _this.authorType = new CodeableConcept(source.authorType);
        }
        if (source['authorDescription']) {
            _this.authorDescription = new FhirString({ value: source.authorDescription });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSourceMaterialOrganismAuthor.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["authorType"]) {
            (_a = outcome.issue).push.apply(_a, this.authorType.doModelValidation().issue);
        }
        if (this["authorDescription"]) {
            (_b = outcome.issue).push.apply(_b, this.authorDescription.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSourceMaterialOrganismAuthor._fts_dataType = 'SubstanceSourceMaterialOrganismAuthor';
    return SubstanceSourceMaterialOrganismAuthor;
}(BackboneElement));
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
 */
var SubstanceSourceMaterialOrganismHybrid = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganismHybrid, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganismHybrid - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSourceMaterialOrganismHybrid(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['maternalOrganismId']) {
            _this.maternalOrganismId = new FhirString({ value: source.maternalOrganismId });
        }
        if (source['maternalOrganismName']) {
            _this.maternalOrganismName = new FhirString({ value: source.maternalOrganismName });
        }
        if (source['paternalOrganismId']) {
            _this.paternalOrganismId = new FhirString({ value: source.paternalOrganismId });
        }
        if (source['paternalOrganismName']) {
            _this.paternalOrganismName = new FhirString({ value: source.paternalOrganismName });
        }
        if (source['hybridType']) {
            _this.hybridType = new CodeableConcept(source.hybridType);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSourceMaterialOrganismHybrid.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["maternalOrganismId"]) {
            (_a = outcome.issue).push.apply(_a, this.maternalOrganismId.doModelValidation().issue);
        }
        if (this["maternalOrganismName"]) {
            (_b = outcome.issue).push.apply(_b, this.maternalOrganismName.doModelValidation().issue);
        }
        if (this["paternalOrganismId"]) {
            (_c = outcome.issue).push.apply(_c, this.paternalOrganismId.doModelValidation().issue);
        }
        if (this["paternalOrganismName"]) {
            (_d = outcome.issue).push.apply(_d, this.paternalOrganismName.doModelValidation().issue);
        }
        if (this["hybridType"]) {
            (_e = outcome.issue).push.apply(_e, this.hybridType.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSourceMaterialOrganismHybrid._fts_dataType = 'SubstanceSourceMaterialOrganismHybrid';
    return SubstanceSourceMaterialOrganismHybrid;
}(BackboneElement));
/**
 * 4.9.13.7.1 Kingdom (Conditional).
 */
var SubstanceSourceMaterialOrganismOrganismGeneral = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganismOrganismGeneral, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganismOrganismGeneral - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSourceMaterialOrganismOrganismGeneral(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['kingdom']) {
            _this.kingdom = new CodeableConcept(source.kingdom);
        }
        if (source['phylum']) {
            _this.phylum = new CodeableConcept(source.phylum);
        }
        if (source['class']) {
            _this.class = new CodeableConcept(source.class);
        }
        if (source['order']) {
            _this.order = new CodeableConcept(source.order);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSourceMaterialOrganismOrganismGeneral.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["kingdom"]) {
            (_a = outcome.issue).push.apply(_a, this.kingdom.doModelValidation().issue);
        }
        if (this["phylum"]) {
            (_b = outcome.issue).push.apply(_b, this.phylum.doModelValidation().issue);
        }
        if (this["class"]) {
            (_c = outcome.issue).push.apply(_c, this.class.doModelValidation().issue);
        }
        if (this["order"]) {
            (_d = outcome.issue).push.apply(_d, this.order.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSourceMaterialOrganismOrganismGeneral._fts_dataType = 'SubstanceSourceMaterialOrganismOrganismGeneral';
    return SubstanceSourceMaterialOrganismOrganismGeneral;
}(BackboneElement));
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
 */
var SubstanceSourceMaterialOrganism = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialOrganism, _super);
    /**
     * Default constructor for SubstanceSourceMaterialOrganism - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSourceMaterialOrganism(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['family']) {
            _this.family = new CodeableConcept(source.family);
        }
        if (source['genus']) {
            _this.genus = new CodeableConcept(source.genus);
        }
        if (source['species']) {
            _this.species = new CodeableConcept(source.species);
        }
        if (source['intraspecificType']) {
            _this.intraspecificType = new CodeableConcept(source.intraspecificType);
        }
        if (source['intraspecificDescription']) {
            _this.intraspecificDescription = new FhirString({ value: source.intraspecificDescription });
        }
        if (source['author']) {
            _this.author = source.author.map(function (x) { return new SubstanceSourceMaterialOrganismAuthor(x); });
        }
        else {
            _this.author = [];
        }
        if (source['hybrid']) {
            _this.hybrid = new SubstanceSourceMaterialOrganismHybrid(source.hybrid);
        }
        if (source['organismGeneral']) {
            _this.organismGeneral = new SubstanceSourceMaterialOrganismOrganismGeneral(source.organismGeneral);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSourceMaterialOrganism.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["family"]) {
            (_a = outcome.issue).push.apply(_a, this.family.doModelValidation().issue);
        }
        if (this["genus"]) {
            (_b = outcome.issue).push.apply(_b, this.genus.doModelValidation().issue);
        }
        if (this["species"]) {
            (_c = outcome.issue).push.apply(_c, this.species.doModelValidation().issue);
        }
        if (this["intraspecificType"]) {
            (_d = outcome.issue).push.apply(_d, this.intraspecificType.doModelValidation().issue);
        }
        if (this["intraspecificDescription"]) {
            (_e = outcome.issue).push.apply(_e, this.intraspecificDescription.doModelValidation().issue);
        }
        if (this["author"]) {
            this.author.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["hybrid"]) {
            (_f = outcome.issue).push.apply(_f, this.hybrid.doModelValidation().issue);
        }
        if (this["organismGeneral"]) {
            (_g = outcome.issue).push.apply(_g, this.organismGeneral.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSourceMaterialOrganism._fts_dataType = 'SubstanceSourceMaterialOrganism';
    return SubstanceSourceMaterialOrganism;
}(BackboneElement));
/**
 * To do.
 */
var SubstanceSourceMaterialPartDescription = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterialPartDescription, _super);
    /**
     * Default constructor for SubstanceSourceMaterialPartDescription - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSourceMaterialPartDescription(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['part']) {
            _this.part = new CodeableConcept(source.part);
        }
        if (source['partLocation']) {
            _this.partLocation = new CodeableConcept(source.partLocation);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSourceMaterialPartDescription.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["part"]) {
            (_a = outcome.issue).push.apply(_a, this.part.doModelValidation().issue);
        }
        if (this["partLocation"]) {
            (_b = outcome.issue).push.apply(_b, this.partLocation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSourceMaterialPartDescription._fts_dataType = 'SubstanceSourceMaterialPartDescription';
    return SubstanceSourceMaterialPartDescription;
}(BackboneElement));
/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
var SubstanceSourceMaterial = /** @class */ (function (_super) {
    __extends(SubstanceSourceMaterial, _super);
    /**
     * Default constructor for SubstanceSourceMaterial - initializes any required elements to null if a value is not provided.
     */
    function SubstanceSourceMaterial(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SubstanceSourceMaterial';
        if (source['sourceMaterialClass']) {
            _this.sourceMaterialClass = new CodeableConcept(source.sourceMaterialClass);
        }
        if (source['sourceMaterialType']) {
            _this.sourceMaterialType = new CodeableConcept(source.sourceMaterialType);
        }
        if (source['sourceMaterialState']) {
            _this.sourceMaterialState = new CodeableConcept(source.sourceMaterialState);
        }
        if (source['organismId']) {
            _this.organismId = new Identifier(source.organismId);
        }
        if (source['organismName']) {
            _this.organismName = new FhirString({ value: source.organismName });
        }
        if (source['parentSubstanceId']) {
            _this.parentSubstanceId = source.parentSubstanceId.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.parentSubstanceId = [];
        }
        if (source['parentSubstanceName']) {
            _this.parentSubstanceName = source.parentSubstanceName.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.parentSubstanceName = [];
        }
        if (source['countryOfOrigin']) {
            _this.countryOfOrigin = source.countryOfOrigin.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.countryOfOrigin = [];
        }
        if (source['geographicalLocation']) {
            _this.geographicalLocation = source.geographicalLocation.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.geographicalLocation = [];
        }
        if (source['developmentStage']) {
            _this.developmentStage = new CodeableConcept(source.developmentStage);
        }
        if (source['fractionDescription']) {
            _this.fractionDescription = source.fractionDescription.map(function (x) { return new SubstanceSourceMaterialFractionDescription(x); });
        }
        else {
            _this.fractionDescription = [];
        }
        if (source['organism']) {
            _this.organism = new SubstanceSourceMaterialOrganism(source.organism);
        }
        if (source['partDescription']) {
            _this.partDescription = source.partDescription.map(function (x) { return new SubstanceSourceMaterialPartDescription(x); });
        }
        else {
            _this.partDescription = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SubstanceSourceMaterial.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SubstanceSourceMaterial" fhir: SubstanceSourceMaterial.resourceType:"SubstanceSourceMaterial"', }));
        }
        if (this["sourceMaterialClass"]) {
            (_a = outcome.issue).push.apply(_a, this.sourceMaterialClass.doModelValidation().issue);
        }
        if (this["sourceMaterialType"]) {
            (_b = outcome.issue).push.apply(_b, this.sourceMaterialType.doModelValidation().issue);
        }
        if (this["sourceMaterialState"]) {
            (_c = outcome.issue).push.apply(_c, this.sourceMaterialState.doModelValidation().issue);
        }
        if (this["organismId"]) {
            (_d = outcome.issue).push.apply(_d, this.organismId.doModelValidation().issue);
        }
        if (this["organismName"]) {
            (_e = outcome.issue).push.apply(_e, this.organismName.doModelValidation().issue);
        }
        if (this["parentSubstanceId"]) {
            this.parentSubstanceId.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["parentSubstanceName"]) {
            this.parentSubstanceName.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["countryOfOrigin"]) {
            this.countryOfOrigin.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["geographicalLocation"]) {
            this.geographicalLocation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["developmentStage"]) {
            (_f = outcome.issue).push.apply(_f, this.developmentStage.doModelValidation().issue);
        }
        if (this["fractionDescription"]) {
            this.fractionDescription.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["organism"]) {
            (_g = outcome.issue).push.apply(_g, this.organism.doModelValidation().issue);
        }
        if (this["partDescription"]) {
            this.partDescription.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SubstanceSourceMaterial._fts_dataType = 'SubstanceSourceMaterial';
    return SubstanceSourceMaterial;
}(DomainResource));

export { SubstanceSourceMaterial, SubstanceSourceMaterialFractionDescription, SubstanceSourceMaterialOrganism, SubstanceSourceMaterialOrganismAuthor, SubstanceSourceMaterialOrganismHybrid, SubstanceSourceMaterialOrganismOrganismGeneral, SubstanceSourceMaterialPartDescription };
//# sourceMappingURL=SubstanceSourceMaterial.js.map
