// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSourceMaterial
import * as fhir from '../fhir.js';
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
 */
export class SubstanceSourceMaterialFractionDescription extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialFractionDescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['fraction'] !== undefined) {
            this.fraction = new fhir.FhirString({ value: source.fraction }, options);
        }
        if (source['_fraction']) {
            if (this.fraction) {
                this.fraction.addExtendedProperties(source._fraction);
            }
            else {
                this.fraction = new fhir.FhirString(source._fraction, options);
            }
        }
        if (source['materialType']) {
            this.materialType = new fhir.CodeableConcept(source.materialType, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSourceMaterial.fractionDescription';
        }
        iss.push(...this.vOS('fraction', exp));
        iss.push(...this.vOS('materialType', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialFractionDescription._fts_dataType = 'SubstanceSourceMaterialFractionDescription';
/**
 * 4.9.13.6.1 Author type (Conditional).
 */
export class SubstanceSourceMaterialOrganismAuthor extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismAuthor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authorType']) {
            this.authorType = new fhir.CodeableConcept(source.authorType, options);
        }
        if (source['authorDescription'] !== undefined) {
            this.authorDescription = new fhir.FhirString({ value: source.authorDescription }, options);
        }
        if (source['_authorDescription']) {
            if (this.authorDescription) {
                this.authorDescription.addExtendedProperties(source._authorDescription);
            }
            else {
                this.authorDescription = new fhir.FhirString(source._authorDescription, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSourceMaterial.organism.author';
        }
        iss.push(...this.vOS('authorType', exp));
        iss.push(...this.vOS('authorDescription', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganismAuthor._fts_dataType = 'SubstanceSourceMaterialOrganismAuthor';
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
 */
export class SubstanceSourceMaterialOrganismHybrid extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismHybrid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['maternalOrganismId'] !== undefined) {
            this.maternalOrganismId = new fhir.FhirString({ value: source.maternalOrganismId }, options);
        }
        if (source['_maternalOrganismId']) {
            if (this.maternalOrganismId) {
                this.maternalOrganismId.addExtendedProperties(source._maternalOrganismId);
            }
            else {
                this.maternalOrganismId = new fhir.FhirString(source._maternalOrganismId, options);
            }
        }
        if (source['maternalOrganismName'] !== undefined) {
            this.maternalOrganismName = new fhir.FhirString({ value: source.maternalOrganismName }, options);
        }
        if (source['_maternalOrganismName']) {
            if (this.maternalOrganismName) {
                this.maternalOrganismName.addExtendedProperties(source._maternalOrganismName);
            }
            else {
                this.maternalOrganismName = new fhir.FhirString(source._maternalOrganismName, options);
            }
        }
        if (source['paternalOrganismId'] !== undefined) {
            this.paternalOrganismId = new fhir.FhirString({ value: source.paternalOrganismId }, options);
        }
        if (source['_paternalOrganismId']) {
            if (this.paternalOrganismId) {
                this.paternalOrganismId.addExtendedProperties(source._paternalOrganismId);
            }
            else {
                this.paternalOrganismId = new fhir.FhirString(source._paternalOrganismId, options);
            }
        }
        if (source['paternalOrganismName'] !== undefined) {
            this.paternalOrganismName = new fhir.FhirString({ value: source.paternalOrganismName }, options);
        }
        if (source['_paternalOrganismName']) {
            if (this.paternalOrganismName) {
                this.paternalOrganismName.addExtendedProperties(source._paternalOrganismName);
            }
            else {
                this.paternalOrganismName = new fhir.FhirString(source._paternalOrganismName, options);
            }
        }
        if (source['hybridType']) {
            this.hybridType = new fhir.CodeableConcept(source.hybridType, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSourceMaterial.organism.hybrid';
        }
        iss.push(...this.vOS('maternalOrganismId', exp));
        iss.push(...this.vOS('maternalOrganismName', exp));
        iss.push(...this.vOS('paternalOrganismId', exp));
        iss.push(...this.vOS('paternalOrganismName', exp));
        iss.push(...this.vOS('hybridType', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganismHybrid._fts_dataType = 'SubstanceSourceMaterialOrganismHybrid';
/**
 * 4.9.13.7.1 Kingdom (Conditional).
 */
export class SubstanceSourceMaterialOrganismOrganismGeneral extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismOrganismGeneral - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['kingdom']) {
            this.kingdom = new fhir.CodeableConcept(source.kingdom, options);
        }
        if (source['phylum']) {
            this.phylum = new fhir.CodeableConcept(source.phylum, options);
        }
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class, options);
        }
        if (source['order']) {
            this.order = new fhir.CodeableConcept(source.order, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSourceMaterial.organism.organismGeneral';
        }
        iss.push(...this.vOS('kingdom', exp));
        iss.push(...this.vOS('phylum', exp));
        iss.push(...this.vOS('class', exp));
        iss.push(...this.vOS('order', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganismOrganismGeneral._fts_dataType = 'SubstanceSourceMaterialOrganismOrganismGeneral';
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
 */
export class SubstanceSourceMaterialOrganism extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['family']) {
            this.family = new fhir.CodeableConcept(source.family, options);
        }
        if (source['genus']) {
            this.genus = new fhir.CodeableConcept(source.genus, options);
        }
        if (source['species']) {
            this.species = new fhir.CodeableConcept(source.species, options);
        }
        if (source['intraspecificType']) {
            this.intraspecificType = new fhir.CodeableConcept(source.intraspecificType, options);
        }
        if (source['intraspecificDescription'] !== undefined) {
            this.intraspecificDescription = new fhir.FhirString({ value: source.intraspecificDescription }, options);
        }
        if (source['_intraspecificDescription']) {
            if (this.intraspecificDescription) {
                this.intraspecificDescription.addExtendedProperties(source._intraspecificDescription);
            }
            else {
                this.intraspecificDescription = new fhir.FhirString(source._intraspecificDescription, options);
            }
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.SubstanceSourceMaterialOrganismAuthor(x, options));
        }
        else {
            this.author = [];
        }
        if (source['hybrid']) {
            this.hybrid = new fhir.SubstanceSourceMaterialOrganismHybrid(source.hybrid, options);
        }
        if (source['organismGeneral']) {
            this.organismGeneral = new fhir.SubstanceSourceMaterialOrganismOrganismGeneral(source.organismGeneral, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSourceMaterial.organism';
        }
        iss.push(...this.vOS('family', exp));
        iss.push(...this.vOS('genus', exp));
        iss.push(...this.vOS('species', exp));
        iss.push(...this.vOS('intraspecificType', exp));
        iss.push(...this.vOS('intraspecificDescription', exp));
        iss.push(...this.vOA('author', exp));
        iss.push(...this.vOS('hybrid', exp));
        iss.push(...this.vOS('organismGeneral', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganism._fts_dataType = 'SubstanceSourceMaterialOrganism';
/**
 * To do.
 */
export class SubstanceSourceMaterialPartDescription extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialPartDescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['part']) {
            this.part = new fhir.CodeableConcept(source.part, options);
        }
        if (source['partLocation']) {
            this.partLocation = new fhir.CodeableConcept(source.partLocation, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSourceMaterial.partDescription';
        }
        iss.push(...this.vOS('part', exp));
        iss.push(...this.vOS('partLocation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialPartDescription._fts_dataType = 'SubstanceSourceMaterialPartDescription';
/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
export class SubstanceSourceMaterial extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSourceMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceSourceMaterial';
        if (source['sourceMaterialClass']) {
            this.sourceMaterialClass = new fhir.CodeableConcept(source.sourceMaterialClass, options);
        }
        if (source['sourceMaterialType']) {
            this.sourceMaterialType = new fhir.CodeableConcept(source.sourceMaterialType, options);
        }
        if (source['sourceMaterialState']) {
            this.sourceMaterialState = new fhir.CodeableConcept(source.sourceMaterialState, options);
        }
        if (source['organismId']) {
            this.organismId = new fhir.Identifier(source.organismId, options);
        }
        if (source['organismName'] !== undefined) {
            this.organismName = new fhir.FhirString({ value: source.organismName }, options);
        }
        if (source['_organismName']) {
            if (this.organismName) {
                this.organismName.addExtendedProperties(source._organismName);
            }
            else {
                this.organismName = new fhir.FhirString(source._organismName, options);
            }
        }
        if (source['parentSubstanceId']) {
            this.parentSubstanceId = source.parentSubstanceId.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.parentSubstanceId = [];
        }
        if (source['parentSubstanceName'] !== undefined) {
            this.parentSubstanceName = source.parentSubstanceName.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.parentSubstanceName = [];
        }
        if (source['_parentSubstanceName']) {
            source._parentSubstanceName.forEach((x, i) => {
                if (this.parentSubstanceName.length >= i) {
                    if (x) {
                        this.parentSubstanceName[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.parentSubstanceName.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['countryOfOrigin']) {
            this.countryOfOrigin = source.countryOfOrigin.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.countryOfOrigin = [];
        }
        if (source['geographicalLocation'] !== undefined) {
            this.geographicalLocation = source.geographicalLocation.map((x) => new fhir.FhirString({ value: x }, options));
        }
        else {
            this.geographicalLocation = [];
        }
        if (source['_geographicalLocation']) {
            source._geographicalLocation.forEach((x, i) => {
                if (this.geographicalLocation.length >= i) {
                    if (x) {
                        this.geographicalLocation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.geographicalLocation.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['developmentStage']) {
            this.developmentStage = new fhir.CodeableConcept(source.developmentStage, options);
        }
        if (source['fractionDescription']) {
            this.fractionDescription = source.fractionDescription.map((x) => new fhir.SubstanceSourceMaterialFractionDescription(x, options));
        }
        else {
            this.fractionDescription = [];
        }
        if (source['organism']) {
            this.organism = new fhir.SubstanceSourceMaterialOrganism(source.organism, options);
        }
        if (source['partDescription']) {
            this.partDescription = source.partDescription.map((x) => new fhir.SubstanceSourceMaterialPartDescription(x, options));
        }
        else {
            this.partDescription = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SubstanceSourceMaterial';
        }
        iss.push(...this.vOS('sourceMaterialClass', exp));
        iss.push(...this.vOS('sourceMaterialType', exp));
        iss.push(...this.vOS('sourceMaterialState', exp));
        iss.push(...this.vOS('organismId', exp));
        iss.push(...this.vOS('organismName', exp));
        iss.push(...this.vOA('parentSubstanceId', exp));
        iss.push(...this.vOA('parentSubstanceName', exp));
        iss.push(...this.vOA('countryOfOrigin', exp));
        iss.push(...this.vOA('geographicalLocation', exp));
        iss.push(...this.vOS('developmentStage', exp));
        iss.push(...this.vOA('fractionDescription', exp));
        iss.push(...this.vOS('organism', exp));
        iss.push(...this.vOA('partDescription', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterial._fts_dataType = 'SubstanceSourceMaterial';
//# sourceMappingURL=data:application/json;base64,