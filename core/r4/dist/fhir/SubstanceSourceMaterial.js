// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SubstanceSourceMaterial
import * as fhir from '../fhir.js';
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
 */
export class SubstanceSourceMaterialFractionDescription extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialFractionDescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['fraction']) {
            this.fraction = new fhir.FhirString({ value: source.fraction });
        }
        if (source['_fraction']) {
            if (this.fraction) {
                this.fraction.addExtendedProperties(source._fraction);
            }
            else {
                this.fraction = new fhir.FhirString(source._fraction);
            }
        }
        if (source['materialType']) {
            this.materialType = new fhir.CodeableConcept(source.materialType);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstanceSourceMaterial.fractionDescription';
        }
        if (this["fraction"]) {
            issues.push(...this.fraction.doModelValidation(expression + '.fraction'));
        }
        if (this["materialType"]) {
            issues.push(...this.materialType.doModelValidation(expression + '.materialType'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialFractionDescription._fts_dataType = 'SubstanceSourceMaterialFractionDescription';
/**
 * 4.9.13.6.1 Author type (Conditional).
 */
export class SubstanceSourceMaterialOrganismAuthor extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismAuthor - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['authorType']) {
            this.authorType = new fhir.CodeableConcept(source.authorType);
        }
        if (source['authorDescription']) {
            this.authorDescription = new fhir.FhirString({ value: source.authorDescription });
        }
        if (source['_authorDescription']) {
            if (this.authorDescription) {
                this.authorDescription.addExtendedProperties(source._authorDescription);
            }
            else {
                this.authorDescription = new fhir.FhirString(source._authorDescription);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstanceSourceMaterial.organism.author';
        }
        if (this["authorType"]) {
            issues.push(...this.authorType.doModelValidation(expression + '.authorType'));
        }
        if (this["authorDescription"]) {
            issues.push(...this.authorDescription.doModelValidation(expression + '.authorDescription'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganismAuthor._fts_dataType = 'SubstanceSourceMaterialOrganismAuthor';
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
 */
export class SubstanceSourceMaterialOrganismHybrid extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismHybrid - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['maternalOrganismId']) {
            this.maternalOrganismId = new fhir.FhirString({ value: source.maternalOrganismId });
        }
        if (source['_maternalOrganismId']) {
            if (this.maternalOrganismId) {
                this.maternalOrganismId.addExtendedProperties(source._maternalOrganismId);
            }
            else {
                this.maternalOrganismId = new fhir.FhirString(source._maternalOrganismId);
            }
        }
        if (source['maternalOrganismName']) {
            this.maternalOrganismName = new fhir.FhirString({ value: source.maternalOrganismName });
        }
        if (source['_maternalOrganismName']) {
            if (this.maternalOrganismName) {
                this.maternalOrganismName.addExtendedProperties(source._maternalOrganismName);
            }
            else {
                this.maternalOrganismName = new fhir.FhirString(source._maternalOrganismName);
            }
        }
        if (source['paternalOrganismId']) {
            this.paternalOrganismId = new fhir.FhirString({ value: source.paternalOrganismId });
        }
        if (source['_paternalOrganismId']) {
            if (this.paternalOrganismId) {
                this.paternalOrganismId.addExtendedProperties(source._paternalOrganismId);
            }
            else {
                this.paternalOrganismId = new fhir.FhirString(source._paternalOrganismId);
            }
        }
        if (source['paternalOrganismName']) {
            this.paternalOrganismName = new fhir.FhirString({ value: source.paternalOrganismName });
        }
        if (source['_paternalOrganismName']) {
            if (this.paternalOrganismName) {
                this.paternalOrganismName.addExtendedProperties(source._paternalOrganismName);
            }
            else {
                this.paternalOrganismName = new fhir.FhirString(source._paternalOrganismName);
            }
        }
        if (source['hybridType']) {
            this.hybridType = new fhir.CodeableConcept(source.hybridType);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstanceSourceMaterial.organism.hybrid';
        }
        if (this["maternalOrganismId"]) {
            issues.push(...this.maternalOrganismId.doModelValidation(expression + '.maternalOrganismId'));
        }
        if (this["maternalOrganismName"]) {
            issues.push(...this.maternalOrganismName.doModelValidation(expression + '.maternalOrganismName'));
        }
        if (this["paternalOrganismId"]) {
            issues.push(...this.paternalOrganismId.doModelValidation(expression + '.paternalOrganismId'));
        }
        if (this["paternalOrganismName"]) {
            issues.push(...this.paternalOrganismName.doModelValidation(expression + '.paternalOrganismName'));
        }
        if (this["hybridType"]) {
            issues.push(...this.hybridType.doModelValidation(expression + '.hybridType'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganismHybrid._fts_dataType = 'SubstanceSourceMaterialOrganismHybrid';
/**
 * 4.9.13.7.1 Kingdom (Conditional).
 */
export class SubstanceSourceMaterialOrganismOrganismGeneral extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganismOrganismGeneral - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['kingdom']) {
            this.kingdom = new fhir.CodeableConcept(source.kingdom);
        }
        if (source['phylum']) {
            this.phylum = new fhir.CodeableConcept(source.phylum);
        }
        if (source['class']) {
            this.class = new fhir.CodeableConcept(source.class);
        }
        if (source['order']) {
            this.order = new fhir.CodeableConcept(source.order);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstanceSourceMaterial.organism.organismGeneral';
        }
        if (this["kingdom"]) {
            issues.push(...this.kingdom.doModelValidation(expression + '.kingdom'));
        }
        if (this["phylum"]) {
            issues.push(...this.phylum.doModelValidation(expression + '.phylum'));
        }
        if (this["class"]) {
            issues.push(...this.class.doModelValidation(expression + '.class'));
        }
        if (this["order"]) {
            issues.push(...this.order.doModelValidation(expression + '.order'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganismOrganismGeneral._fts_dataType = 'SubstanceSourceMaterialOrganismOrganismGeneral';
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
 */
export class SubstanceSourceMaterialOrganism extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialOrganism - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['family']) {
            this.family = new fhir.CodeableConcept(source.family);
        }
        if (source['genus']) {
            this.genus = new fhir.CodeableConcept(source.genus);
        }
        if (source['species']) {
            this.species = new fhir.CodeableConcept(source.species);
        }
        if (source['intraspecificType']) {
            this.intraspecificType = new fhir.CodeableConcept(source.intraspecificType);
        }
        if (source['intraspecificDescription']) {
            this.intraspecificDescription = new fhir.FhirString({ value: source.intraspecificDescription });
        }
        if (source['_intraspecificDescription']) {
            if (this.intraspecificDescription) {
                this.intraspecificDescription.addExtendedProperties(source._intraspecificDescription);
            }
            else {
                this.intraspecificDescription = new fhir.FhirString(source._intraspecificDescription);
            }
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.SubstanceSourceMaterialOrganismAuthor(x));
        }
        else {
            this.author = [];
        }
        if (source['hybrid']) {
            this.hybrid = new fhir.SubstanceSourceMaterialOrganismHybrid(source.hybrid);
        }
        if (source['organismGeneral']) {
            this.organismGeneral = new fhir.SubstanceSourceMaterialOrganismOrganismGeneral(source.organismGeneral);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstanceSourceMaterial.organism';
        }
        if (this["family"]) {
            issues.push(...this.family.doModelValidation(expression + '.family'));
        }
        if (this["genus"]) {
            issues.push(...this.genus.doModelValidation(expression + '.genus'));
        }
        if (this["species"]) {
            issues.push(...this.species.doModelValidation(expression + '.species'));
        }
        if (this["intraspecificType"]) {
            issues.push(...this.intraspecificType.doModelValidation(expression + '.intraspecificType'));
        }
        if (this["intraspecificDescription"]) {
            issues.push(...this.intraspecificDescription.doModelValidation(expression + '.intraspecificDescription'));
        }
        if (this["author"]) {
            this.author.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.author[${i}]`)); });
        }
        if (this["hybrid"]) {
            issues.push(...this.hybrid.doModelValidation(expression + '.hybrid'));
        }
        if (this["organismGeneral"]) {
            issues.push(...this.organismGeneral.doModelValidation(expression + '.organismGeneral'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialOrganism._fts_dataType = 'SubstanceSourceMaterialOrganism';
/**
 * To do.
 */
export class SubstanceSourceMaterialPartDescription extends fhir.BackboneElement {
    /**
     * Default constructor for SubstanceSourceMaterialPartDescription - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['part']) {
            this.part = new fhir.CodeableConcept(source.part);
        }
        if (source['partLocation']) {
            this.partLocation = new fhir.CodeableConcept(source.partLocation);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstanceSourceMaterial.partDescription';
        }
        if (this["part"]) {
            issues.push(...this.part.doModelValidation(expression + '.part'));
        }
        if (this["partLocation"]) {
            issues.push(...this.partLocation.doModelValidation(expression + '.partLocation'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterialPartDescription._fts_dataType = 'SubstanceSourceMaterialPartDescription';
/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
export class SubstanceSourceMaterial extends fhir.DomainResource {
    /**
     * Default constructor for SubstanceSourceMaterial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SubstanceSourceMaterial';
        if (source['sourceMaterialClass']) {
            this.sourceMaterialClass = new fhir.CodeableConcept(source.sourceMaterialClass);
        }
        if (source['sourceMaterialType']) {
            this.sourceMaterialType = new fhir.CodeableConcept(source.sourceMaterialType);
        }
        if (source['sourceMaterialState']) {
            this.sourceMaterialState = new fhir.CodeableConcept(source.sourceMaterialState);
        }
        if (source['organismId']) {
            this.organismId = new fhir.Identifier(source.organismId);
        }
        if (source['organismName']) {
            this.organismName = new fhir.FhirString({ value: source.organismName });
        }
        if (source['_organismName']) {
            if (this.organismName) {
                this.organismName.addExtendedProperties(source._organismName);
            }
            else {
                this.organismName = new fhir.FhirString(source._organismName);
            }
        }
        if (source['parentSubstanceId']) {
            this.parentSubstanceId = source.parentSubstanceId.map((x) => new fhir.Identifier(x));
        }
        else {
            this.parentSubstanceId = [];
        }
        if (source['parentSubstanceName']) {
            this.parentSubstanceName = source.parentSubstanceName.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.parentSubstanceName = [];
        }
        if (source['_parentSubstanceName']) {
            source._parentSubstanceName.forEach((x, i) => {
                if (this.parentSubstanceName.length >= i) {
                    if (x) {
                        this.parentSubstanceName[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.parentSubstanceName.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['countryOfOrigin']) {
            this.countryOfOrigin = source.countryOfOrigin.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.countryOfOrigin = [];
        }
        if (source['geographicalLocation']) {
            this.geographicalLocation = source.geographicalLocation.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.geographicalLocation = [];
        }
        if (source['_geographicalLocation']) {
            source._geographicalLocation.forEach((x, i) => {
                if (this.geographicalLocation.length >= i) {
                    if (x) {
                        this.geographicalLocation[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.geographicalLocation.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['developmentStage']) {
            this.developmentStage = new fhir.CodeableConcept(source.developmentStage);
        }
        if (source['fractionDescription']) {
            this.fractionDescription = source.fractionDescription.map((x) => new fhir.SubstanceSourceMaterialFractionDescription(x));
        }
        else {
            this.fractionDescription = [];
        }
        if (source['organism']) {
            this.organism = new fhir.SubstanceSourceMaterialOrganism(source.organism);
        }
        if (source['partDescription']) {
            this.partDescription = source.partDescription.map((x) => new fhir.SubstanceSourceMaterialPartDescription(x));
        }
        else {
            this.partDescription = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'SubstanceSourceMaterial';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: SubstanceSourceMaterial.resourceType:"SubstanceSourceMaterial"', expression: [expression] });
        }
        if (this["sourceMaterialClass"]) {
            issues.push(...this.sourceMaterialClass.doModelValidation(expression + '.sourceMaterialClass'));
        }
        if (this["sourceMaterialType"]) {
            issues.push(...this.sourceMaterialType.doModelValidation(expression + '.sourceMaterialType'));
        }
        if (this["sourceMaterialState"]) {
            issues.push(...this.sourceMaterialState.doModelValidation(expression + '.sourceMaterialState'));
        }
        if (this["organismId"]) {
            issues.push(...this.organismId.doModelValidation(expression + '.organismId'));
        }
        if (this["organismName"]) {
            issues.push(...this.organismName.doModelValidation(expression + '.organismName'));
        }
        if (this["parentSubstanceId"]) {
            this.parentSubstanceId.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.parentSubstanceId[${i}]`)); });
        }
        if (this["parentSubstanceName"]) {
            this.parentSubstanceName.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.parentSubstanceName[${i}]`)); });
        }
        if (this["countryOfOrigin"]) {
            this.countryOfOrigin.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.countryOfOrigin[${i}]`)); });
        }
        if (this["geographicalLocation"]) {
            this.geographicalLocation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.geographicalLocation[${i}]`)); });
        }
        if (this["developmentStage"]) {
            issues.push(...this.developmentStage.doModelValidation(expression + '.developmentStage'));
        }
        if (this["fractionDescription"]) {
            this.fractionDescription.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.fractionDescription[${i}]`)); });
        }
        if (this["organism"]) {
            issues.push(...this.organism.doModelValidation(expression + '.organism'));
        }
        if (this["partDescription"]) {
            this.partDescription.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.partDescription[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SubstanceSourceMaterial._fts_dataType = 'SubstanceSourceMaterial';
//# sourceMappingURL=data:application/json;base64,