// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ActivityDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ActionParticipantTypeCodings, } from '../fhirValueSets/ActionParticipantTypeCodings.js';
// @ts-ignore
import { PublicationStatusCodings, } from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { RequestResourceTypesCodings, } from '../fhirValueSets/RequestResourceTypesCodings.js';
// @ts-ignore
import { RequestIntentCodings, } from '../fhirValueSets/RequestIntentCodings.js';
// @ts-ignore
import { RequestPriorityCodings, } from '../fhirValueSets/RequestPriorityCodings.js';
/**
 * Indicates who should participate in performing the action described.
 */
export class ActivityDefinitionParticipant extends fhir.BackboneElement {
    /**
     * Default constructor for ActivityDefinitionParticipant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = source.type;
        }
        else {
            this.type = null;
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
    }
    /**
     * Required-bound Value Set for type (ActivityDefinition.participant.type)
     */
    static typeRequiredCoding() {
        return ActionParticipantTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:ActionParticipantTypeCodeType fhir: ActivityDefinition.participant.type:code', });
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ActivityDefinitionParticipant._fts_dataType = 'ActivityDefinitionParticipant';
/**
 * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
 */
export class ActivityDefinitionDynamicValue extends fhir.BackboneElement {
    /**
     * Default constructor for ActivityDefinitionDynamicValue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['expression']) {
            this.expression = new fhir.Expression(source.expression);
        }
        else {
            this.expression = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['path']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property path:fhir.FhirString fhir: ActivityDefinition.dynamicValue.path:string', });
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation());
        }
        if (!this['expression']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property expression:fhir.Expression fhir: ActivityDefinition.dynamicValue.expression:Expression', });
        }
        if (this["expression"]) {
            issues.push(...this.expression.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ActivityDefinitionDynamicValue._fts_dataType = 'ActivityDefinitionDynamicValue';
/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
export class ActivityDefinition extends fhir.DomainResource {
    /**
     * Default constructor for ActivityDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ActivityDefinition';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['subtitle']) {
            this.subtitle = new fhir.FhirString({ value: source.subtitle });
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['usage']) {
            this.usage = new fhir.FhirString({ value: source.usage });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['approvalDate']) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate });
        }
        if (source['lastReviewDate']) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate });
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['library']) {
            this.library = source.library.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.library = [];
        }
        if (source['kind']) {
            this.kind = new fhir.FhirCode({ value: source.kind });
        }
        if (source['profile']) {
            this.profile = new fhir.FhirCanonical({ value: source.profile });
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['intent']) {
            this.intent = source.intent;
        }
        if (source['priority']) {
            this.priority = source.priority;
        }
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingTiming']) {
            this.timing = new fhir.Timing(source.timingTiming);
        }
        else if (source['timingDateTime']) {
            this.timing = new fhir.FhirDateTime({ value: source.timingDateTime });
        }
        else if (source['timingAge']) {
            this.timing = new fhir.Age(source.timingAge);
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        else if (source['timingRange']) {
            this.timing = new fhir.Range(source.timingRange);
        }
        else if (source['timingDuration']) {
            this.timing = new fhir.Duration(source.timingDuration);
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['participant']) {
            this.participant = source.participant.map((x) => new fhir.ActivityDefinitionParticipant(x));
        }
        else {
            this.participant = [];
        }
        if (source['product']) {
            this.product = source.product;
        }
        else if (source['productReference']) {
            this.product = new fhir.Reference(source.productReference);
        }
        else if (source['productCodeableConcept']) {
            this.product = new fhir.CodeableConcept(source.productCodeableConcept);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosage = [];
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.bodySite = [];
        }
        if (source['specimenRequirement']) {
            this.specimenRequirement = source.specimenRequirement.map((x) => new fhir.Reference(x));
        }
        else {
            this.specimenRequirement = [];
        }
        if (source['observationRequirement']) {
            this.observationRequirement = source.observationRequirement.map((x) => new fhir.Reference(x));
        }
        else {
            this.observationRequirement = [];
        }
        if (source['observationResultRequirement']) {
            this.observationResultRequirement = source.observationResultRequirement.map((x) => new fhir.Reference(x));
        }
        else {
            this.observationResultRequirement = [];
        }
        if (source['transform']) {
            this.transform = new fhir.FhirCanonical({ value: source.transform });
        }
        if (source['dynamicValue']) {
            this.dynamicValue = source.dynamicValue.map((x) => new fhir.ActivityDefinitionDynamicValue(x));
        }
        else {
            this.dynamicValue = [];
        }
    }
    /**
     * Required-bound Value Set for status (ActivityDefinition.status)
     */
    static statusRequiredCoding() {
        return PublicationStatusCodings;
    }
    /**
     * Required-bound Value Set for kind (ActivityDefinition.kind)
     */
    static kindRequiredCoding() {
        return RequestResourceTypesCodings;
    }
    /**
     * Required-bound Value Set for intent (ActivityDefinition.intent)
     */
    static intentRequiredCoding() {
        return RequestIntentCodings;
    }
    /**
     * Required-bound Value Set for priority (ActivityDefinition.priority)
     */
    static priorityRequiredCoding() {
        return RequestPriorityCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ActivityDefinition" fhir: ActivityDefinition.resourceType:"ActivityDefinition"', });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["subtitle"]) {
            issues.push(...this.subtitle.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: ActivityDefinition.status:code', });
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["usage"]) {
            issues.push(...this.usage.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["approvalDate"]) {
            issues.push(...this.approvalDate.doModelValidation());
        }
        if (this["lastReviewDate"]) {
            issues.push(...this.lastReviewDate.doModelValidation());
        }
        if (this["effectivePeriod"]) {
            issues.push(...this.effectivePeriod.doModelValidation());
        }
        if (this["topic"]) {
            this.topic.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["author"]) {
            this.author.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["editor"]) {
            this.editor.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reviewer"]) {
            this.reviewer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["endorser"]) {
            this.endorser.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["relatedArtifact"]) {
            this.relatedArtifact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["library"]) {
            this.library.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["kind"]) {
            issues.push(...this.kind.doModelValidation());
        }
        if (this["profile"]) {
            issues.push(...this.profile.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["doNotPerform"]) {
            issues.push(...this.doNotPerform.doModelValidation());
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["participant"]) {
            this.participant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["dosage"]) {
            this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            this.bodySite.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["specimenRequirement"]) {
            this.specimenRequirement.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["observationRequirement"]) {
            this.observationRequirement.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["observationResultRequirement"]) {
            this.observationResultRequirement.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["transform"]) {
            issues.push(...this.transform.doModelValidation());
        }
        if (this["dynamicValue"]) {
            this.dynamicValue.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ActivityDefinition._fts_dataType = 'ActivityDefinition';
/**
 * Internal flag to properly serialize choice-type element ActivityDefinition.subject[x]
 */
ActivityDefinition._fts_subjectIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ActivityDefinition.timing[x]
 */
ActivityDefinition._fts_timingIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ActivityDefinition.product[x]
 */
ActivityDefinition._fts_productIsChoice = true;
//# sourceMappingURL=data:application/json;base64,