{"version":3,"file":"VerificationResult.js","sources":["../../src/fhir/VerificationResult.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: VerificationResult\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { VerificationresultPrimarySourceTypeCodings, VerificationresultPrimarySourceTypeCodingType,} from '../fhirValueSets/VerificationresultPrimarySourceTypeCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultPrimarySourceTypeCodes,  VerificationresultPrimarySourceTypeCodeType } from '../fhirValueSets/VerificationresultPrimarySourceTypeCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultCommunicationMethodCodings, VerificationresultCommunicationMethodCodingType,} from '../fhirValueSets/VerificationresultCommunicationMethodCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultCommunicationMethodCodes,  VerificationresultCommunicationMethodCodeType } from '../fhirValueSets/VerificationresultCommunicationMethodCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultValidationStatusCodings, VerificationresultValidationStatusCodingType,} from '../fhirValueSets/VerificationresultValidationStatusCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultValidationStatusCodes,  VerificationresultValidationStatusCodeType } from '../fhirValueSets/VerificationresultValidationStatusCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultCanPushUpdatesCodings, VerificationresultCanPushUpdatesCodingType,} from '../fhirValueSets/VerificationresultCanPushUpdatesCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultCanPushUpdatesCodes,  VerificationresultCanPushUpdatesCodeType } from '../fhirValueSets/VerificationresultCanPushUpdatesCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultPushTypeAvailableCodings, VerificationresultPushTypeAvailableCodingType,} from '../fhirValueSets/VerificationresultPushTypeAvailableCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultPushTypeAvailableCodes,  VerificationresultPushTypeAvailableCodeType } from '../fhirValueSets/VerificationresultPushTypeAvailableCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultNeedCodings, VerificationresultNeedCodingType,} from '../fhirValueSets/VerificationresultNeedCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultNeedCodes,  VerificationresultNeedCodeType } from '../fhirValueSets/VerificationresultNeedCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultStatusCodings, VerificationresultStatusCodingType,} from '../fhirValueSets/VerificationresultStatusCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultStatusCodes,  VerificationresultStatusCodeType } from '../fhirValueSets/VerificationresultStatusCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultValidationTypeCodings, VerificationresultValidationTypeCodingType,} from '../fhirValueSets/VerificationresultValidationTypeCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultValidationTypeCodes,  VerificationresultValidationTypeCodeType } from '../fhirValueSets/VerificationresultValidationTypeCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultValidationProcessCodings, VerificationresultValidationProcessCodingType,} from '../fhirValueSets/VerificationresultValidationProcessCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultValidationProcessCodes,  VerificationresultValidationProcessCodeType } from '../fhirValueSets/VerificationresultValidationProcessCodes.js';\r\n// @ts-ignore\r\nimport { VerificationresultFailureActionCodings, VerificationresultFailureActionCodingType,} from '../fhirValueSets/VerificationresultFailureActionCodings.js';\r\n// @ts-ignore\r\nimport { VerificationresultFailureActionCodes,  VerificationresultFailureActionCodeType } from '../fhirValueSets/VerificationresultFailureActionCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the VerificationResultPrimarySource type.\r\n */\r\nexport interface VerificationResultPrimarySourceArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Reference to the primary source.\r\n   */\r\n  who?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).\r\n   */\r\n  type?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Method for communicating with the primary source (manual; API; Push).\r\n   */\r\n  communicationMethod?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Status of the validation of the target against the primary source (successful; failed; unknown).\r\n   */\r\n  validationStatus?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * When the target was validated against the primary source.\r\n   */\r\n  validationDate?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * Ability of the primary source to push updates/alerts (yes; no; undetermined).\r\n   */\r\n  canPushUpdates?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).\r\n   */\r\n  pushTypeAvailable?: fhir.CodeableConceptArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Information about the primary source(s) involved in validation.\r\n */\r\nexport class VerificationResultPrimarySource extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'VerificationResultPrimarySource';\r\n  /**\r\n   * Reference to the primary source.\r\n   */\r\n  public who?: fhir.Reference|undefined;\r\n  /**\r\n   * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).\r\n   */\r\n  public type?: fhir.CodeableConcept[];\r\n  /**\r\n   * Method for communicating with the primary source (manual; API; Push).\r\n   */\r\n  public communicationMethod?: fhir.CodeableConcept[];\r\n  /**\r\n   * Status of the validation of the target against the primary source (successful; failed; unknown).\r\n   */\r\n  public validationStatus?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * When the target was validated against the primary source.\r\n   */\r\n  public validationDate?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * Ability of the primary source to push updates/alerts (yes; no; undetermined).\r\n   */\r\n  public canPushUpdates?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).\r\n   */\r\n  public pushTypeAvailable?: fhir.CodeableConcept[];\r\n  /**\r\n   * Default constructor for VerificationResultPrimarySource - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<VerificationResultPrimarySourceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['who']) { this.who = new fhir.Reference(source.who); }\r\n    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.type = []; }\r\n    if (source['communicationMethod']) { this.communicationMethod = source.communicationMethod.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.communicationMethod = []; }\r\n    if (source['validationStatus']) { this.validationStatus = new fhir.CodeableConcept(source.validationStatus); }\r\n    if (source['validationDate']) { this.validationDate = new fhir.FhirDateTime({value: source.validationDate}); }\r\n    if (source['canPushUpdates']) { this.canPushUpdates = new fhir.CodeableConcept(source.canPushUpdates); }\r\n    if (source['pushTypeAvailable']) { this.pushTypeAvailable = source.pushTypeAvailable.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.pushTypeAvailable = []; }\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for validationStatus (VerificationResult.primarySource.validationStatus)\r\n   */\r\n  public static validationStatusPreferredCoding():VerificationresultValidationStatusCodingType {\r\n    return VerificationresultValidationStatusCodings;\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for canPushUpdates (VerificationResult.primarySource.canPushUpdates)\r\n   */\r\n  public static canPushUpdatesPreferredCoding():VerificationresultCanPushUpdatesCodingType {\r\n    return VerificationresultCanPushUpdatesCodings;\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for pushTypeAvailable (VerificationResult.primarySource.pushTypeAvailable)\r\n   */\r\n  public static pushTypeAvailablePreferredCoding():VerificationresultPushTypeAvailableCodingType {\r\n    return VerificationresultPushTypeAvailableCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"who\"]) { outcome.issue!.push(...this.who.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { this.type.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"communicationMethod\"]) { this.communicationMethod.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"validationStatus\"]) { outcome.issue!.push(...this.validationStatus.doModelValidation().issue!); }\r\n    if (this[\"validationDate\"]) { outcome.issue!.push(...this.validationDate.doModelValidation().issue!); }\r\n    if (this[\"canPushUpdates\"]) { outcome.issue!.push(...this.canPushUpdates.doModelValidation().issue!); }\r\n    if (this[\"pushTypeAvailable\"]) { this.pushTypeAvailable.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the VerificationResultAttestation type.\r\n */\r\nexport interface VerificationResultAttestationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The individual or organization attesting to information.\r\n   */\r\n  who?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * When the who is asserting on behalf of another (organization or individual).\r\n   */\r\n  onBehalfOf?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * The method by which attested information was submitted/retrieved (manual; API; Push).\r\n   */\r\n  communicationMethod?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The date the information was attested to.\r\n   */\r\n  date?: fhir.FhirDate|string|undefined;\r\n  /**\r\n   * A digital identity certificate associated with the attestation source.\r\n   */\r\n  sourceIdentityCertificate?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.\r\n   */\r\n  proxyIdentityCertificate?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.\r\n   */\r\n  proxySignature?: fhir.SignatureArgs|undefined;\r\n  /**\r\n   * Signed assertion by the attestation source that they have attested to the information.\r\n   */\r\n  sourceSignature?: fhir.SignatureArgs|undefined;\r\n}\r\n\r\n/**\r\n * Information about the entity attesting to information.\r\n */\r\nexport class VerificationResultAttestation extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'VerificationResultAttestation';\r\n  /**\r\n   * The individual or organization attesting to information.\r\n   */\r\n  public who?: fhir.Reference|undefined;\r\n  /**\r\n   * When the who is asserting on behalf of another (organization or individual).\r\n   */\r\n  public onBehalfOf?: fhir.Reference|undefined;\r\n  /**\r\n   * The method by which attested information was submitted/retrieved (manual; API; Push).\r\n   */\r\n  public communicationMethod?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The date the information was attested to.\r\n   */\r\n  public date?: fhir.FhirDate|undefined;\r\n  /**\r\n   * A digital identity certificate associated with the attestation source.\r\n   */\r\n  public sourceIdentityCertificate?: fhir.FhirString|undefined;\r\n  /**\r\n   * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.\r\n   */\r\n  public proxyIdentityCertificate?: fhir.FhirString|undefined;\r\n  /**\r\n   * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.\r\n   */\r\n  public proxySignature?: fhir.Signature|undefined;\r\n  /**\r\n   * Signed assertion by the attestation source that they have attested to the information.\r\n   */\r\n  public sourceSignature?: fhir.Signature|undefined;\r\n  /**\r\n   * Default constructor for VerificationResultAttestation - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<VerificationResultAttestationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['who']) { this.who = new fhir.Reference(source.who); }\r\n    if (source['onBehalfOf']) { this.onBehalfOf = new fhir.Reference(source.onBehalfOf); }\r\n    if (source['communicationMethod']) { this.communicationMethod = new fhir.CodeableConcept(source.communicationMethod); }\r\n    if (source['date']) { this.date = new fhir.FhirDate({value: source.date}); }\r\n    if (source['sourceIdentityCertificate']) { this.sourceIdentityCertificate = new fhir.FhirString({value: source.sourceIdentityCertificate}); }\r\n    if (source['proxyIdentityCertificate']) { this.proxyIdentityCertificate = new fhir.FhirString({value: source.proxyIdentityCertificate}); }\r\n    if (source['proxySignature']) { this.proxySignature = new fhir.Signature(source.proxySignature); }\r\n    if (source['sourceSignature']) { this.sourceSignature = new fhir.Signature(source.sourceSignature); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"who\"]) { outcome.issue!.push(...this.who.doModelValidation().issue!); }\r\n    if (this[\"onBehalfOf\"]) { outcome.issue!.push(...this.onBehalfOf.doModelValidation().issue!); }\r\n    if (this[\"communicationMethod\"]) { outcome.issue!.push(...this.communicationMethod.doModelValidation().issue!); }\r\n    if (this[\"date\"]) { outcome.issue!.push(...this.date.doModelValidation().issue!); }\r\n    if (this[\"sourceIdentityCertificate\"]) { outcome.issue!.push(...this.sourceIdentityCertificate.doModelValidation().issue!); }\r\n    if (this[\"proxyIdentityCertificate\"]) { outcome.issue!.push(...this.proxyIdentityCertificate.doModelValidation().issue!); }\r\n    if (this[\"proxySignature\"]) { outcome.issue!.push(...this.proxySignature.doModelValidation().issue!); }\r\n    if (this[\"sourceSignature\"]) { outcome.issue!.push(...this.sourceSignature.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the VerificationResultValidator type.\r\n */\r\nexport interface VerificationResultValidatorArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Reference to the organization validating information.\r\n   */\r\n  organization: fhir.ReferenceArgs|null;\r\n  /**\r\n   * A digital identity certificate associated with the validator.\r\n   */\r\n  identityCertificate?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Signed assertion by the validator that they have validated the information.\r\n   */\r\n  attestationSignature?: fhir.SignatureArgs|undefined;\r\n}\r\n\r\n/**\r\n * Information about the entity validating information.\r\n */\r\nexport class VerificationResultValidator extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'VerificationResultValidator';\r\n  /**\r\n   * Reference to the organization validating information.\r\n   */\r\n  public organization: fhir.Reference|null;\r\n  /**\r\n   * A digital identity certificate associated with the validator.\r\n   */\r\n  public identityCertificate?: fhir.FhirString|undefined;\r\n  /**\r\n   * Signed assertion by the validator that they have validated the information.\r\n   */\r\n  public attestationSignature?: fhir.Signature|undefined;\r\n  /**\r\n   * Default constructor for VerificationResultValidator - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<VerificationResultValidatorArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['organization']) { this.organization = new fhir.Reference(source.organization); }\r\n    else { this.organization = null; }\r\n    if (source['identityCertificate']) { this.identityCertificate = new fhir.FhirString({value: source.identityCertificate}); }\r\n    if (source['attestationSignature']) { this.attestationSignature = new fhir.Signature(source.attestationSignature); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['organization']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property organization:fhir.Reference fhir: VerificationResult.validator.organization:Reference', }));\r\n    }\r\n    if (this[\"organization\"]) { outcome.issue!.push(...this.organization.doModelValidation().issue!); }\r\n    if (this[\"identityCertificate\"]) { outcome.issue!.push(...this.identityCertificate.doModelValidation().issue!); }\r\n    if (this[\"attestationSignature\"]) { outcome.issue!.push(...this.attestationSignature.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the VerificationResult type.\r\n */\r\nexport interface VerificationResultArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"VerificationResult\"|undefined;\r\n  /**\r\n   * A resource that was validated.\r\n   */\r\n  target?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * The fhirpath location(s) within the resource that was validated.\r\n   */\r\n  targetLocation?: fhir.FhirString[]|string[]|undefined;\r\n  /**\r\n   * The frequency with which the target must be validated (none; initial; periodic).\r\n   */\r\n  need?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).\r\n   */\r\n  status: VerificationresultStatusCodeType|null;\r\n  /**\r\n   * When the validation status was updated.\r\n   */\r\n  statusDate?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * What the target is validated against (nothing; primary source; multiple sources).\r\n   */\r\n  validationType?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).\r\n   */\r\n  validationProcess?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Frequency of revalidation.\r\n   */\r\n  frequency?: fhir.TimingArgs|undefined;\r\n  /**\r\n   * The date/time validation was last completed (including failed validations).\r\n   */\r\n  lastPerformed?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * The date when target is next validated, if appropriate.\r\n   */\r\n  nextScheduled?: fhir.FhirDate|string|undefined;\r\n  /**\r\n   * The result if validation fails (fatal; warning; record only; none).\r\n   */\r\n  failureAction?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Information about the primary source(s) involved in validation.\r\n   */\r\n  primarySource?: fhir.VerificationResultPrimarySourceArgs[]|undefined;\r\n  /**\r\n   * Information about the entity attesting to information.\r\n   */\r\n  attestation?: fhir.VerificationResultAttestationArgs|undefined;\r\n  /**\r\n   * Information about the entity validating information.\r\n   */\r\n  validator?: fhir.VerificationResultValidatorArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * Describes validation requirements, source(s), status and dates for one or more elements.\r\n */\r\nexport class VerificationResult extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'VerificationResult';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"VerificationResult\";\r\n  /**\r\n   * A resource that was validated.\r\n   */\r\n  public target?: fhir.Reference[];\r\n  /**\r\n   * The fhirpath location(s) within the resource that was validated.\r\n   */\r\n  public targetLocation?: fhir.FhirString[];\r\n  /**\r\n   * The frequency with which the target must be validated (none; initial; periodic).\r\n   */\r\n  public need?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).\r\n   */\r\n  public status: VerificationresultStatusCodeType|null;\r\n  /**\r\n   * When the validation status was updated.\r\n   */\r\n  public statusDate?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * What the target is validated against (nothing; primary source; multiple sources).\r\n   */\r\n  public validationType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).\r\n   */\r\n  public validationProcess?: fhir.CodeableConcept[];\r\n  /**\r\n   * Frequency of revalidation.\r\n   */\r\n  public frequency?: fhir.Timing|undefined;\r\n  /**\r\n   * The date/time validation was last completed (including failed validations).\r\n   */\r\n  public lastPerformed?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * The date when target is next validated, if appropriate.\r\n   */\r\n  public nextScheduled?: fhir.FhirDate|undefined;\r\n  /**\r\n   * The result if validation fails (fatal; warning; record only; none).\r\n   */\r\n  public failureAction?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Information about the primary source(s) involved in validation.\r\n   */\r\n  public primarySource?: fhir.VerificationResultPrimarySource[];\r\n  /**\r\n   * Information about the entity attesting to information.\r\n   */\r\n  public attestation?: fhir.VerificationResultAttestation|undefined;\r\n  /**\r\n   * Information about the entity validating information.\r\n   */\r\n  public validator?: fhir.VerificationResultValidator[];\r\n  /**\r\n   * Default constructor for VerificationResult - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<VerificationResultArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'VerificationResult';\r\n    if (source['target']) { this.target = source.target.map((x) => new fhir.Reference(x)); }\r\n    else { this.target = []; }\r\n    if (source['targetLocation']) { this.targetLocation = source.targetLocation.map((x) => new fhir.FhirString({value: x})); }\r\n    else { this.targetLocation = []; }\r\n    if (source['need']) { this.need = new fhir.CodeableConcept(source.need); }\r\n    if (source['status']) { this.status = source.status; }\r\n    else { this.status = null; }\r\n    if (source['statusDate']) { this.statusDate = new fhir.FhirDateTime({value: source.statusDate}); }\r\n    if (source['validationType']) { this.validationType = new fhir.CodeableConcept(source.validationType); }\r\n    if (source['validationProcess']) { this.validationProcess = source.validationProcess.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.validationProcess = []; }\r\n    if (source['frequency']) { this.frequency = new fhir.Timing(source.frequency); }\r\n    if (source['lastPerformed']) { this.lastPerformed = new fhir.FhirDateTime({value: source.lastPerformed}); }\r\n    if (source['nextScheduled']) { this.nextScheduled = new fhir.FhirDate({value: source.nextScheduled}); }\r\n    if (source['failureAction']) { this.failureAction = new fhir.CodeableConcept(source.failureAction); }\r\n    if (source['primarySource']) { this.primarySource = source.primarySource.map((x) => new fhir.VerificationResultPrimarySource(x)); }\r\n    else { this.primarySource = []; }\r\n    if (source['attestation']) { this.attestation = new fhir.VerificationResultAttestation(source.attestation); }\r\n    if (source['validator']) { this.validator = source.validator.map((x) => new fhir.VerificationResultValidator(x)); }\r\n    else { this.validator = []; }\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for need (VerificationResult.need)\r\n   */\r\n  public static needPreferredCoding():VerificationresultNeedCodingType {\r\n    return VerificationresultNeedCodings;\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (VerificationResult.status)\r\n   */\r\n  public static statusRequiredCoding():VerificationresultStatusCodingType {\r\n    return VerificationresultStatusCodings;\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for validationType (VerificationResult.validationType)\r\n   */\r\n  public static validationTypePreferredCoding():VerificationresultValidationTypeCodingType {\r\n    return VerificationresultValidationTypeCodings;\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for failureAction (VerificationResult.failureAction)\r\n   */\r\n  public static failureActionPreferredCoding():VerificationresultFailureActionCodingType {\r\n    return VerificationresultFailureActionCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"VerificationResult\" fhir: VerificationResult.resourceType:\"VerificationResult\"', }));\r\n    }\r\n    if (this[\"target\"]) { this.target.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"targetLocation\"]) { this.targetLocation.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"need\"]) { outcome.issue!.push(...this.need.doModelValidation().issue!); }\r\n    if (!this['status']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property status:VerificationresultStatusCodeType fhir: VerificationResult.status:code', }));\r\n    }\r\n    if (this[\"statusDate\"]) { outcome.issue!.push(...this.statusDate.doModelValidation().issue!); }\r\n    if (this[\"validationType\"]) { outcome.issue!.push(...this.validationType.doModelValidation().issue!); }\r\n    if (this[\"validationProcess\"]) { this.validationProcess.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"frequency\"]) { outcome.issue!.push(...this.frequency.doModelValidation().issue!); }\r\n    if (this[\"lastPerformed\"]) { outcome.issue!.push(...this.lastPerformed.doModelValidation().issue!); }\r\n    if (this[\"nextScheduled\"]) { outcome.issue!.push(...this.nextScheduled.doModelValidation().issue!); }\r\n    if (this[\"failureAction\"]) { outcome.issue!.push(...this.failureAction.doModelValidation().issue!); }\r\n    if (this[\"primarySource\"]) { this.primarySource.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"attestation\"]) { outcome.issue!.push(...this.attestation.doModelValidation().issue!); }\r\n    if (this[\"validator\"]) { this.validator.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Reference","fhir.CodeableConcept","fhir.FhirDateTime","fhir.BackboneElement","fhir.FhirDate","fhir.FhirString","fhir.Signature","fhir.OperationOutcomeIssue","fhir.Timing","fhir.VerificationResultPrimarySource","fhir.VerificationResultAttestation","fhir.VerificationResultValidator","fhir.DomainResource"],"mappings":"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"}