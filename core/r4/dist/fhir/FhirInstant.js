// Minimum TypeScript Version: 3.7
// FHIR Primitive: instant
import * as fhir from '../fhir.js';
/**
 * Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required
 */
export class FhirInstant extends fhir.FhirPrimitive {
    /**
       * Create a FhirInstant
       * @param value Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required
       * @param id Unique id for inter-element referencing (uncommon on primitives)
       * @param extension Additional content defined by implementations
       * @param options Options to pass to extension constructors
    */
    constructor(source = {}, options = {}) {
        super(source, options);
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if ((this.value !== undefined) && (this.value !== null) && ((this.value === '') || (typeof this.value !== 'string') || (!FhirInstant._fts_regex.test(this.value)))) {
            issues.push({ severity: 'error', code: 'invalid', details: { text: 'Invalid value in primitive type instant' }, expression: [expression] });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
FhirInstant._fts_dataType = 'Instant';
/**
 * Mapping of this datatype to a JSON equivalent
 */
FhirInstant._fts_jsonType = 'string';
// published regex: ([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))
FhirInstant._fts_regex = /^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$/;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmhpckluc3RhbnQuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL0ZoaXJJbnN0YW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQywwQkFBMEI7QUFFMUIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFZbkM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBWSxTQUFRLElBQUksQ0FBQyxhQUFhO0lBZWpEOzs7Ozs7TUFNRTtJQUNGLFlBQVksU0FBa0MsRUFBRSxFQUFFLFVBQXNDLEVBQUc7UUFDekYsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxhQUFvQixFQUFFO1FBQ3RELElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xLLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLHlDQUF5QyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1NBQzVJO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUFqQ0Q7O0dBRUc7QUFDNkIseUJBQWEsR0FBVSxTQUFTLENBQUM7QUFDakU7O0dBRUc7QUFDNkIseUJBQWEsR0FBVSxRQUFRLENBQUM7QUFDaEUsc05BQXNOO0FBQ3RMLHNCQUFVLEdBQVUsc01BQXNNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUHJpbWl0aXZlOiBpbnN0YW50XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIE5vdGU6IFRoaXMgaXMgaW50ZW5kZWQgZm9yIHdoZXJlIHByZWNpc2VseSBvYnNlcnZlZCB0aW1lcyBhcmUgcmVxdWlyZWQsIHR5cGljYWxseSBzeXN0ZW0gbG9ncyBldGMuLCBhbmQgbm90IGh1bWFuLXJlcG9ydGVkIHRpbWVzIC0gZm9yIHRoZW0sIHNlZSBkYXRlIGFuZCBkYXRlVGltZSAod2hpY2ggY2FuIGJlIGFzIHByZWNpc2UgYXMgaW5zdGFudCwgYnV0IGlzIG5vdCByZXF1aXJlZCB0byBiZSkgYmVsb3cuIFRpbWUgem9uZSBpcyBhbHdheXMgcmVxdWlyZWRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmhpckluc3RhbnRBcmdzIGV4dGVuZHMgZmhpci5GaGlyUHJpbWl0aXZlQXJncyB7XHJcbiAgLyoqXHJcbiAgICogTm90ZTogVGhpcyBpcyBpbnRlbmRlZCBmb3Igd2hlcmUgcHJlY2lzZWx5IG9ic2VydmVkIHRpbWVzIGFyZSByZXF1aXJlZCwgdHlwaWNhbGx5IHN5c3RlbSBsb2dzIGV0Yy4sIGFuZCBub3QgaHVtYW4tcmVwb3J0ZWQgdGltZXMgLSBmb3IgdGhlbSwgc2VlIGRhdGUgYW5kIGRhdGVUaW1lICh3aGljaCBjYW4gYmUgYXMgcHJlY2lzZSBhcyBpbnN0YW50LCBidXQgaXMgbm90IHJlcXVpcmVkIHRvIGJlKSBiZWxvdy4gVGltZSB6b25lIGlzIGFsd2F5cyByZXF1aXJlZFxyXG4gICAqL1xyXG4gIHZhbHVlPzpGaGlySW5zdGFudHxzdHJpbmd8dW5kZWZpbmVkfG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBOb3RlOiBUaGlzIGlzIGludGVuZGVkIGZvciB3aGVyZSBwcmVjaXNlbHkgb2JzZXJ2ZWQgdGltZXMgYXJlIHJlcXVpcmVkLCB0eXBpY2FsbHkgc3lzdGVtIGxvZ3MgZXRjLiwgYW5kIG5vdCBodW1hbi1yZXBvcnRlZCB0aW1lcyAtIGZvciB0aGVtLCBzZWUgZGF0ZSBhbmQgZGF0ZVRpbWUgKHdoaWNoIGNhbiBiZSBhcyBwcmVjaXNlIGFzIGluc3RhbnQsIGJ1dCBpcyBub3QgcmVxdWlyZWQgdG8gYmUpIGJlbG93LiBUaW1lIHpvbmUgaXMgYWx3YXlzIHJlcXVpcmVkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmhpckluc3RhbnQgZXh0ZW5kcyBmaGlyLkZoaXJQcmltaXRpdmUge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnSW5zdGFudCc7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgSlNPTiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2pzb25UeXBlOnN0cmluZyA9ICdzdHJpbmcnO1xyXG4gIC8vIHB1Ymxpc2hlZCByZWdleDogKFswLTldKFswLTldKFswLTldWzEtOV18WzEtOV0wKXxbMS05XTAwKXxbMS05XTAwMCktKDBbMS05XXwxWzAtMl0pLSgwWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pVChbMDFdWzAtOV18MlswLTNdKTpbMC01XVswLTldOihbMC01XVswLTldfDYwKShcXC5bMC05XSspPyhafChcXCt8LSkoKDBbMC05XXwxWzAtM10pOlswLTVdWzAtOV18MTQ6MDApKVxyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19yZWdleDpSZWdFeHAgPSAvXihbMC05XShbMC05XShbMC05XVsxLTldfFsxLTldMCl8WzEtOV0wMCl8WzEtOV0wMDApLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxLTJdWzAtOV18M1swLTFdKVQoWzAxXVswLTldfDJbMC0zXSk6WzAtNV1bMC05XTooWzAtNV1bMC05XXw2MCkoXFwuWzAtOV0rKT8oWnwoXFwrfC0pKCgwWzAtOV18MVswLTNdKTpbMC01XVswLTldfDE0OjAwKSkkL1xyXG4gIC8qKlxyXG4gICAqIEEgaW5zdGFudCB2YWx1ZSwgcmVwcmVzZW50ZWQgYXMgYSBKUyBzdHJpbmdcclxuICAgKi9cclxuICBkZWNsYXJlIHZhbHVlPzpzdHJpbmd8bnVsbHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBGaGlySW5zdGFudFxyXG4gICAgICogQHBhcmFtIHZhbHVlIE5vdGU6IFRoaXMgaXMgaW50ZW5kZWQgZm9yIHdoZXJlIHByZWNpc2VseSBvYnNlcnZlZCB0aW1lcyBhcmUgcmVxdWlyZWQsIHR5cGljYWxseSBzeXN0ZW0gbG9ncyBldGMuLCBhbmQgbm90IGh1bWFuLXJlcG9ydGVkIHRpbWVzIC0gZm9yIHRoZW0sIHNlZSBkYXRlIGFuZCBkYXRlVGltZSAod2hpY2ggY2FuIGJlIGFzIHByZWNpc2UgYXMgaW5zdGFudCwgYnV0IGlzIG5vdCByZXF1aXJlZCB0byBiZSkgYmVsb3cuIFRpbWUgem9uZSBpcyBhbHdheXMgcmVxdWlyZWRcclxuICAgICAqIEBwYXJhbSBpZCBVbmlxdWUgaWQgZm9yIGludGVyLWVsZW1lbnQgcmVmZXJlbmNpbmcgKHVuY29tbW9uIG9uIHByaW1pdGl2ZXMpXHJcbiAgICAgKiBAcGFyYW0gZXh0ZW5zaW9uIEFkZGl0aW9uYWwgY29udGVudCBkZWZpbmVkIGJ5IGltcGxlbWVudGF0aW9uc1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIGV4dGVuc2lvbiBjb25zdHJ1Y3RvcnNcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPEZoaXJJbnN0YW50QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7IH0gKSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoKHRoaXMudmFsdWUgIT09IHVuZGVmaW5lZCkgJiYgKHRoaXMudmFsdWUgIT09IG51bGwpICYmICgodGhpcy52YWx1ZSA9PT0gJycpIHx8ICh0eXBlb2YgdGhpcy52YWx1ZSAhPT0gJ3N0cmluZycpIHx8ICghRmhpckluc3RhbnQuX2Z0c19yZWdleC50ZXN0KHRoaXMudmFsdWUpKSkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ2ludmFsaWQnLCBkZXRhaWxzOiB7IHRleHQ6ICdJbnZhbGlkIHZhbHVlIGluIHByaW1pdGl2ZSB0eXBlIGluc3RhbnQnIH0sIGV4cHJlc3Npb246IFtleHByZXNzaW9uXX0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuIl19