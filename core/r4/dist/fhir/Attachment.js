// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Attachment
import * as fhir from '../fhir.js';
/**
 * For referring to data content defined in other formats.
 */
export class Attachment extends fhir.FhirElement {
    /**
     * Default constructor for Attachment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['_contentType']) {
            if (this.contentType) {
                this.contentType.addExtendedProperties(source._contentType);
            }
            else {
                this.contentType = new fhir.FhirCode(source._contentType);
            }
        }
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['data']) {
            this.data = new fhir.FhirBase64Binary({ value: source.data });
        }
        if (source['_data']) {
            if (this.data) {
                this.data.addExtendedProperties(source._data);
            }
            else {
                this.data = new fhir.FhirBase64Binary(source._data);
            }
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUrl(source._url);
            }
        }
        if (source['size']) {
            this.size = new fhir.FhirUnsignedInt({ value: source.size });
        }
        if (source['_size']) {
            if (this.size) {
                this.size.addExtendedProperties(source._size);
            }
            else {
                this.size = new fhir.FhirUnsignedInt(source._size);
            }
        }
        if (source['hash']) {
            this.hash = new fhir.FhirBase64Binary({ value: source.hash });
        }
        if (source['_hash']) {
            if (this.hash) {
                this.hash.addExtendedProperties(source._hash);
            }
            else {
                this.hash = new fhir.FhirBase64Binary(source._hash);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['creation']) {
            this.creation = new fhir.FhirDateTime({ value: source.creation });
        }
        if (source['_creation']) {
            if (this.creation) {
                this.creation.addExtendedProperties(source._creation);
            }
            else {
                this.creation = new fhir.FhirDateTime(source._creation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Attachment';
        }
        iss.push(...this.vOS('contentType', exp));
        iss.push(...this.vOS('language', exp));
        iss.push(...this.vOS('data', exp));
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOS('size', exp));
        iss.push(...this.vOS('hash', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vOS('creation', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Attachment._fts_dataType = 'Attachment';
//# sourceMappingURL=data:application/json;base64,