// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Attachment
import * as fhir from '../fhir.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
/**
 * For referring to data content defined in other formats.
 */
export class Attachment extends fhir.FhirElement {
    /**
     * Default constructor for Attachment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['contentType']) {
            this.contentType = new fhir.FhirCode({ value: source.contentType });
        }
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['data']) {
            this.data = new fhir.FhirBase64Binary({ value: source.data });
        }
        if (source['url']) {
            this.url = new fhir.FhirUrl({ value: source.url });
        }
        if (source['size']) {
            this.size = new fhir.FhirUnsignedInt({ value: source.size });
        }
        if (source['hash']) {
            this.hash = new fhir.FhirBase64Binary({ value: source.hash });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['creation']) {
            this.creation = new fhir.FhirDateTime({ value: source.creation });
        }
    }
    /**
     * Preferred-bound Value Set for language (Attachment.language)
     */
    static get languagePreferredCodings() {
        return LanguagesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["contentType"]) {
            issues.push(...this.contentType.doModelValidation());
        }
        if (this["language"]) {
            issues.push(...this.language.doModelValidation());
        }
        if (this["data"]) {
            issues.push(...this.data.doModelValidation());
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["size"]) {
            issues.push(...this.size.doModelValidation());
        }
        if (this["hash"]) {
            issues.push(...this.hash.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (this["creation"]) {
            issues.push(...this.creation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Attachment._fts_dataType = 'Attachment';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXR0YWNobWVudC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvQXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywrQkFBK0I7QUFFL0IsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFFbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSxnQkFBZ0IsR0FBdUIsTUFBTSxzQ0FBc0MsQ0FBQztBQXlDN0Y7O0dBRUc7QUFDSCxNQUFNLE9BQU8sVUFBVyxTQUFRLElBQUksQ0FBQyxXQUFXO0lBcUM5Qzs7T0FFRztJQUNILFlBQVksU0FBaUMsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDdkYsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDakcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3hGLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3BGLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUN4RSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDbkYsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDcEYsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ2pGLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7U0FBRTtJQUM5RixDQUFDO0lBQ0Q7O09BRUc7SUFDSSxNQUFNLEtBQUssd0JBQXdCO1FBQ3hDLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCO1FBQy9CLElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2RCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ2xGLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDNUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUNwRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ2xFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDcEUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUNwRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3RFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDNUUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUF0RUQ7O0dBRUc7QUFDNkIsd0JBQWEsR0FBVSxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgQ29tcGxleFR5cGU6IEF0dGFjaG1lbnRcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IExhbmd1YWdlc0NvZGluZ3MsIExhbmd1YWdlc0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0xhbmd1YWdlc0NvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IExhbmd1YWdlc0NvZGVzLCAgTGFuZ3VhZ2VzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0xhbmd1YWdlc0NvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIEF0dGFjaG1lbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXR0YWNobWVudEFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyB0aGUgdHlwZSBvZiB0aGUgZGF0YSBpbiB0aGUgYXR0YWNobWVudCBhbmQgYWxsb3dzIGEgbWV0aG9kIHRvIGJlIGNob3NlbiB0byBpbnRlcnByZXQgb3IgcmVuZGVyIHRoZSBkYXRhLiBJbmNsdWRlcyBtaW1lIHR5cGUgcGFyYW1ldGVycyBzdWNoIGFzIGNoYXJzZXQgd2hlcmUgYXBwcm9wcmlhdGUuXHJcbiAgICovXHJcbiAgY29udGVudFR5cGU/OiBmaGlyLkZoaXJDb2RlfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGh1bWFuIGxhbmd1YWdlIG9mIHRoZSBjb250ZW50LiBUaGUgdmFsdWUgY2FuIGJlIGFueSB2YWxpZCB2YWx1ZSBhY2NvcmRpbmcgdG8gQkNQIDQ3LlxyXG4gICAqL1xyXG4gIGxhbmd1YWdlPzogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBiYXNlNjQtZW5jb2RlZCBkYXRhIFNIQUxMIGJlIGV4cHJlc3NlZCBpbiB0aGUgc2FtZSBjaGFyYWN0ZXIgc2V0IGFzIHRoZSBiYXNlIHJlc291cmNlIFhNTCBvciBKU09OLlxyXG4gICAqL1xyXG4gIGRhdGE/OiBmaGlyLkZoaXJCYXNlNjRCaW5hcnl8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBib3RoIGRhdGEgYW5kIHVybCBhcmUgcHJvdmlkZWQsIHRoZSB1cmwgU0hBTEwgcG9pbnQgdG8gdGhlIHNhbWUgY29udGVudCBhcyB0aGUgZGF0YSBjb250YWlucy4gVXJscyBtYXkgYmUgcmVsYXRpdmUgcmVmZXJlbmNlcyBvciBtYXkgcmVmZXJlbmNlIHRyYW5zaWVudCBsb2NhdGlvbnMgc3VjaCBhcyBhIHdyYXBwaW5nIGVudmVsb3BlIHVzaW5nIGNpZDogdGhvdWdoIHRoaXMgaGFzIHJhbWlmaWNhdGlvbnMgZm9yIHVzaW5nIHNpZ25hdHVyZXMuIFJlbGF0aXZlIFVSTHMgYXJlIGludGVycHJldGVkIHJlbGF0aXZlIHRvIHRoZSBzZXJ2aWNlIHVybCwgbGlrZSBhIHJlc291cmNlIHJlZmVyZW5jZSwgcmF0aGVyIHRoYW4gcmVsYXRpdmUgdG8gdGhlIHJlc291cmNlIGl0c2VsZi4gSWYgYSBVUkwgaXMgcHJvdmlkZWQsIGl0IFNIQUxMIHJlc29sdmUgdG8gYWN0dWFsIGRhdGEuXHJcbiAgICovXHJcbiAgdXJsPzogZmhpci5GaGlyVXJsfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG51bWJlciBvZiBieXRlcyBpcyByZWR1bmRhbnQgaWYgdGhlIGRhdGEgaXMgcHJvdmlkZWQgYXMgYSBiYXNlNjRiaW5hcnksIGJ1dCBpcyB1c2VmdWwgaWYgdGhlIGRhdGEgaXMgcHJvdmlkZWQgYXMgYSB1cmwgcmVmZXJlbmNlLlxyXG4gICAqL1xyXG4gIHNpemU/OiBmaGlyLkZoaXJVbnNpZ25lZEludHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBoYXNoIGlzIGNhbGN1bGF0ZWQgb24gdGhlIGRhdGEgcHJpb3IgdG8gYmFzZTY0IGVuY29kaW5nLCBpZiB0aGUgZGF0YSBpcyBiYXNlZDY0IGVuY29kZWQuIFRoZSBoYXNoIGlzIG5vdCBpbnRlbmRlZCB0byBzdXBwb3J0IGRpZ2l0YWwgc2lnbmF0dXJlcy4gV2hlcmUgcHJvdGVjdGlvbiBhZ2FpbnN0IG1hbGljaW91cyB0aHJlYXRzIGEgZGlnaXRhbCBzaWduYXR1cmUgc2hvdWxkIGJlIGNvbnNpZGVyZWQsIHNlZSBbUHJvdmVuYW5jZS5zaWduYXR1cmVdKHByb3ZlbmFuY2UtZGVmaW5pdGlvbnMuaHRtbCNQcm92ZW5hbmNlLnNpZ25hdHVyZSkgZm9yIG1lY2hhbmlzbSB0byBwcm90ZWN0IGEgcmVzb3VyY2Ugd2l0aCBhIGRpZ2l0YWwgc2lnbmF0dXJlLlxyXG4gICAqL1xyXG4gIGhhc2g/OiBmaGlyLkZoaXJCYXNlNjRCaW5hcnl8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIGxhYmVsIG9yIHNldCBvZiB0ZXh0IHRvIGRpc3BsYXkgaW4gcGxhY2Ugb2YgdGhlIGRhdGEuXHJcbiAgICovXHJcbiAgdGl0bGU/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGF0ZSB0aGF0IHRoZSBhdHRhY2htZW50IHdhcyBmaXJzdCBjcmVhdGVkLlxyXG4gICAqL1xyXG4gIGNyZWF0aW9uPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZvciByZWZlcnJpbmcgdG8gZGF0YSBjb250ZW50IGRlZmluZWQgaW4gb3RoZXIgZm9ybWF0cy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdHRhY2htZW50IGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdBdHRhY2htZW50JztcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIHRoZSB0eXBlIG9mIHRoZSBkYXRhIGluIHRoZSBhdHRhY2htZW50IGFuZCBhbGxvd3MgYSBtZXRob2QgdG8gYmUgY2hvc2VuIHRvIGludGVycHJldCBvciByZW5kZXIgdGhlIGRhdGEuIEluY2x1ZGVzIG1pbWUgdHlwZSBwYXJhbWV0ZXJzIHN1Y2ggYXMgY2hhcnNldCB3aGVyZSBhcHByb3ByaWF0ZS5cclxuICAgKi9cclxuICBwdWJsaWMgY29udGVudFR5cGU/OiBmaGlyLkZoaXJDb2RlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgaHVtYW4gbGFuZ3VhZ2Ugb2YgdGhlIGNvbnRlbnQuIFRoZSB2YWx1ZSBjYW4gYmUgYW55IHZhbGlkIHZhbHVlIGFjY29yZGluZyB0byBCQ1AgNDcuXHJcbiAgICovXHJcbiAgcHVibGljIGxhbmd1YWdlPzogZmhpci5GaGlyQ29kZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGJhc2U2NC1lbmNvZGVkIGRhdGEgU0hBTEwgYmUgZXhwcmVzc2VkIGluIHRoZSBzYW1lIGNoYXJhY3RlciBzZXQgYXMgdGhlIGJhc2UgcmVzb3VyY2UgWE1MIG9yIEpTT04uXHJcbiAgICovXHJcbiAgcHVibGljIGRhdGE/OiBmaGlyLkZoaXJCYXNlNjRCaW5hcnl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIGJvdGggZGF0YSBhbmQgdXJsIGFyZSBwcm92aWRlZCwgdGhlIHVybCBTSEFMTCBwb2ludCB0byB0aGUgc2FtZSBjb250ZW50IGFzIHRoZSBkYXRhIGNvbnRhaW5zLiBVcmxzIG1heSBiZSByZWxhdGl2ZSByZWZlcmVuY2VzIG9yIG1heSByZWZlcmVuY2UgdHJhbnNpZW50IGxvY2F0aW9ucyBzdWNoIGFzIGEgd3JhcHBpbmcgZW52ZWxvcGUgdXNpbmcgY2lkOiB0aG91Z2ggdGhpcyBoYXMgcmFtaWZpY2F0aW9ucyBmb3IgdXNpbmcgc2lnbmF0dXJlcy4gUmVsYXRpdmUgVVJMcyBhcmUgaW50ZXJwcmV0ZWQgcmVsYXRpdmUgdG8gdGhlIHNlcnZpY2UgdXJsLCBsaWtlIGEgcmVzb3VyY2UgcmVmZXJlbmNlLCByYXRoZXIgdGhhbiByZWxhdGl2ZSB0byB0aGUgcmVzb3VyY2UgaXRzZWxmLiBJZiBhIFVSTCBpcyBwcm92aWRlZCwgaXQgU0hBTEwgcmVzb2x2ZSB0byBhY3R1YWwgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgdXJsPzogZmhpci5GaGlyVXJsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIGJ5dGVzIGlzIHJlZHVuZGFudCBpZiB0aGUgZGF0YSBpcyBwcm92aWRlZCBhcyBhIGJhc2U2NGJpbmFyeSwgYnV0IGlzIHVzZWZ1bCBpZiB0aGUgZGF0YSBpcyBwcm92aWRlZCBhcyBhIHVybCByZWZlcmVuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHNpemU/OiBmaGlyLkZoaXJVbnNpZ25lZEludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGhhc2ggaXMgY2FsY3VsYXRlZCBvbiB0aGUgZGF0YSBwcmlvciB0byBiYXNlNjQgZW5jb2RpbmcsIGlmIHRoZSBkYXRhIGlzIGJhc2VkNjQgZW5jb2RlZC4gVGhlIGhhc2ggaXMgbm90IGludGVuZGVkIHRvIHN1cHBvcnQgZGlnaXRhbCBzaWduYXR1cmVzLiBXaGVyZSBwcm90ZWN0aW9uIGFnYWluc3QgbWFsaWNpb3VzIHRocmVhdHMgYSBkaWdpdGFsIHNpZ25hdHVyZSBzaG91bGQgYmUgY29uc2lkZXJlZCwgc2VlIFtQcm92ZW5hbmNlLnNpZ25hdHVyZV0ocHJvdmVuYW5jZS1kZWZpbml0aW9ucy5odG1sI1Byb3ZlbmFuY2Uuc2lnbmF0dXJlKSBmb3IgbWVjaGFuaXNtIHRvIHByb3RlY3QgYSByZXNvdXJjZSB3aXRoIGEgZGlnaXRhbCBzaWduYXR1cmUuXHJcbiAgICovXHJcbiAgcHVibGljIGhhc2g/OiBmaGlyLkZoaXJCYXNlNjRCaW5hcnl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbGFiZWwgb3Igc2V0IG9mIHRleHQgdG8gZGlzcGxheSBpbiBwbGFjZSBvZiB0aGUgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgdGl0bGU/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRlIHRoYXQgdGhlIGF0dGFjaG1lbnQgd2FzIGZpcnN0IGNyZWF0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0aW9uPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEF0dGFjaG1lbnQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxBdHRhY2htZW50QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2NvbnRlbnRUeXBlJ10pIHsgdGhpcy5jb250ZW50VHlwZSA9IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogc291cmNlLmNvbnRlbnRUeXBlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2xhbmd1YWdlJ10pIHsgdGhpcy5sYW5ndWFnZSA9IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogc291cmNlLmxhbmd1YWdlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGEnXSkgeyB0aGlzLmRhdGEgPSBuZXcgZmhpci5GaGlyQmFzZTY0QmluYXJ5KHt2YWx1ZTogc291cmNlLmRhdGF9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndXJsJ10pIHsgdGhpcy51cmwgPSBuZXcgZmhpci5GaGlyVXJsKHt2YWx1ZTogc291cmNlLnVybH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydzaXplJ10pIHsgdGhpcy5zaXplID0gbmV3IGZoaXIuRmhpclVuc2lnbmVkSW50KHt2YWx1ZTogc291cmNlLnNpemV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaGFzaCddKSB7IHRoaXMuaGFzaCA9IG5ldyBmaGlyLkZoaXJCYXNlNjRCaW5hcnkoe3ZhbHVlOiBzb3VyY2UuaGFzaH0pOyB9XHJcbiAgICBpZiAoc291cmNlWyd0aXRsZSddKSB7IHRoaXMudGl0bGUgPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnRpdGxlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NyZWF0aW9uJ10pIHsgdGhpcy5jcmVhdGlvbiA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5jcmVhdGlvbn0pOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFByZWZlcnJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIGxhbmd1YWdlIChBdHRhY2htZW50Lmxhbmd1YWdlKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IGxhbmd1YWdlUHJlZmVycmVkQ29kaW5ncygpOkxhbmd1YWdlc0NvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIExhbmd1YWdlc0NvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcImNvbnRlbnRUeXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29udGVudFR5cGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wibGFuZ3VhZ2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5sYW5ndWFnZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkYXRhXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGF0YS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ1cmxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy51cmwuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wic2l6ZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnNpemUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiaGFzaFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmhhc2guZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1widGl0bGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50aXRsZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjcmVhdGlvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNyZWF0aW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=