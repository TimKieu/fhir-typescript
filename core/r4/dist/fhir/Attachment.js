/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { FhirElement } from './FhirElement.js';
import { FhirCode } from './FhirCode.js';
import { FhirBase64Binary } from './FhirBase64Binary.js';
import { FhirUrl } from './FhirUrl.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { FhirString } from './FhirString.js';
import { FhirDateTime } from './FhirDateTime.js';

// <auto-generated/>
/**
 * For referring to data content defined in other formats.
 */
var Attachment = /** @class */ (function (_super) {
    __extends(Attachment, _super);
    /**
     * Default constructor for Attachment - initializes any required elements to null if a value is not provided.
     */
    function Attachment(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['contentType']) {
            _this.contentType = new FhirCode({ value: source.contentType });
        }
        if (source['language']) {
            _this.language = new FhirCode({ value: source.language });
        }
        if (source['data']) {
            _this.data = new FhirBase64Binary({ value: source.data });
        }
        if (source['url']) {
            _this.url = new FhirUrl({ value: source.url });
        }
        if (source['size']) {
            _this.size = new FhirUnsignedInt({ value: source.size });
        }
        if (source['hash']) {
            _this.hash = new FhirBase64Binary({ value: source.hash });
        }
        if (source['title']) {
            _this.title = new FhirString({ value: source.title });
        }
        if (source['creation']) {
            _this.creation = new FhirDateTime({ value: source.creation });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for language (Attachment.language)
     */
    Attachment.languagePreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Attachment.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["contentType"]) {
            (_a = outcome.issue).push.apply(_a, this.contentType.doModelValidation().issue);
        }
        if (this["language"]) {
            (_b = outcome.issue).push.apply(_b, this.language.doModelValidation().issue);
        }
        if (this["data"]) {
            (_c = outcome.issue).push.apply(_c, this.data.doModelValidation().issue);
        }
        if (this["url"]) {
            (_d = outcome.issue).push.apply(_d, this.url.doModelValidation().issue);
        }
        if (this["size"]) {
            (_e = outcome.issue).push.apply(_e, this.size.doModelValidation().issue);
        }
        if (this["hash"]) {
            (_f = outcome.issue).push.apply(_f, this.hash.doModelValidation().issue);
        }
        if (this["title"]) {
            (_g = outcome.issue).push.apply(_g, this.title.doModelValidation().issue);
        }
        if (this["creation"]) {
            (_h = outcome.issue).push.apply(_h, this.creation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Attachment._fts_dataType = 'Attachment';
    return Attachment;
}(FhirElement));

export { Attachment };
//# sourceMappingURL=Attachment.js.map
