// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ValueSet
import * as fhir from '../fhir.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
// @ts-ignore
import { DesignationUseCodings, } from '../fhirValueSets/DesignationUseCodings.js';
// @ts-ignore
import { FilterOperatorCodes } from '../fhirValueSets/FilterOperatorCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export class ValueSetComposeIncludeConceptDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeConceptDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['use']) {
            this.use = new fhir.Coding(source.use);
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Preferred-bound Value Set for language (ValueSet.compose.include.concept.designation.language)
     */
    static get languagePreferredCodings() {
        return LanguagesCodings;
    }
    /**
     * Extensible-bound Value Set for use (ValueSet.compose.include.concept.designation.use)
     */
    static get useExtensibleCodings() {
        return DesignationUseCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["language"]) {
            issues.push(...this.language.doModelValidation());
        }
        if (this["use"]) {
            issues.push(...this.use.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value:fhir.FhirString fhir: ValueSet.compose.include.concept.designation.value:string' });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeConceptDesignation._fts_dataType = 'ValueSetComposeIncludeConceptDesignation';
/**
 * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
 */
export class ValueSetComposeIncludeConcept extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ValueSetComposeIncludeConceptDesignation(x));
        }
        else {
            this.designation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.FhirCode fhir: ValueSet.compose.include.concept.code:code' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation());
        }
        if (this["designation"]) {
            this.designation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeConcept._fts_dataType = 'ValueSetComposeIncludeConcept';
/**
 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
 */
export class ValueSetComposeIncludeFilter extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['property']) {
            this.property = new fhir.FhirCode({ value: source.property });
        }
        else {
            this.property = null;
        }
        if (source['op']) {
            this.op = new fhir.FhirCode({ value: source.op });
        }
        else {
            this.op = null;
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
    }
    /**
     * Required-bound Value Set for op (ValueSet.compose.include.filter.op)
     */
    static get opRequiredCodes() {
        return FilterOperatorCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['property']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property property:fhir.FhirCode fhir: ValueSet.compose.include.filter.property:code' });
        }
        if (this["property"]) {
            issues.push(...this.property.doModelValidation());
        }
        if (!this['op']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property op:fhir.FhirCode<FilterOperatorCodeType> fhir: ValueSet.compose.include.filter.op:code' });
        }
        if (this['op'] && (!Object.values(FilterOperatorCodes).includes(this.op))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property op:fhir.FhirCode<FilterOperatorCodeType> fhir: ValueSet.compose.include.filter.op:code Required binding to: FilterOperator' });
        }
        if (this["op"]) {
            issues.push(...this.op.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value:fhir.FhirString fhir: ValueSet.compose.include.filter.value:string' });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeFilter._fts_dataType = 'ValueSetComposeIncludeFilter';
/**
 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
 */
export class ValueSetComposeInclude extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeInclude - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.ValueSetComposeIncludeConcept(x));
        }
        else {
            this.concept = [];
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.ValueSetComposeIncludeFilter(x));
        }
        else {
            this.filter = [];
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.valueSet = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["system"]) {
            issues.push(...this.system.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["concept"]) {
            this.concept.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["filter"]) {
            this.filter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["valueSet"]) {
            this.valueSet.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeInclude._fts_dataType = 'ValueSetComposeInclude';
/**
 * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
 */
export class ValueSetCompose extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetCompose - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['lockedDate']) {
            this.lockedDate = new fhir.FhirDate({ value: source.lockedDate });
        }
        if (source['inactive']) {
            this.inactive = new fhir.FhirBoolean({ value: source.inactive });
        }
        if (source['include']) {
            this.include = source.include.map((x) => new fhir.ValueSetComposeInclude(x));
        }
        else {
            this.include = [];
        }
        if (source['exclude']) {
            this.exclude = source.exclude.map((x) => new fhir.ValueSetComposeInclude(x));
        }
        else {
            this.exclude = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["lockedDate"]) {
            issues.push(...this.lockedDate.doModelValidation());
        }
        if (this["inactive"]) {
            issues.push(...this.inactive.doModelValidation());
        }
        if (!this['include']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property include:fhir.ValueSetComposeInclude[] fhir: ValueSet.compose.include:include' });
        }
        else if (!Array.isArray(this.include)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property include:fhir.ValueSetComposeInclude[] fhir: ValueSet.compose.include:include' });
        }
        else if (this.include.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property include:fhir.ValueSetComposeInclude[] fhir: ValueSet.compose.include:include' });
        }
        if (this["include"]) {
            this.include.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["exclude"]) {
            this.exclude.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetCompose._fts_dataType = 'ValueSetCompose';
/**
 * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
 */
export class ValueSetExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueCode']) {
            this.value = new fhir.FhirCode({ value: source.valueCode });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: ValueSet.expansion.parameter.name:string' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansionParameter._fts_dataType = 'ValueSetExpansionParameter';
/**
 * Internal flag to properly serialize choice-type element ValueSet.expansion.parameter.value[x]
 */
ValueSetExpansionParameter._fts_valueIsChoice = true;
/**
 * The codes that are contained in the value set expansion.
 */
export class ValueSetExpansionContains extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansionContains - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        if (source['inactive']) {
            this.inactive = new fhir.FhirBoolean({ value: source.inactive });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ValueSetComposeIncludeConceptDesignation(x));
        }
        else {
            this.designation = [];
        }
        if (source['contains']) {
            this.contains = source.contains.map((x) => new fhir.ValueSetExpansionContains(x));
        }
        else {
            this.contains = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["system"]) {
            issues.push(...this.system.doModelValidation());
        }
        if (this["abstract"]) {
            issues.push(...this.abstract.doModelValidation());
        }
        if (this["inactive"]) {
            issues.push(...this.inactive.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation());
        }
        if (this["designation"]) {
            this.designation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contains"]) {
            this.contains.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansionContains._fts_dataType = 'ValueSetExpansionContains';
/**
 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.
 * Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
 */
export class ValueSetExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.FhirUri({ value: source.identifier });
        }
        if (source['timestamp']) {
            this.timestamp = new fhir.FhirDateTime({ value: source.timestamp });
        }
        else {
            this.timestamp = null;
        }
        if (source['total']) {
            this.total = new fhir.FhirInteger({ value: source.total });
        }
        if (source['offset']) {
            this.offset = new fhir.FhirInteger({ value: source.offset });
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.ValueSetExpansionParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['contains']) {
            this.contains = source.contains.map((x) => new fhir.ValueSetExpansionContains(x));
        }
        else {
            this.contains = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (!this['timestamp']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property timestamp:fhir.FhirDateTime fhir: ValueSet.expansion.timestamp:dateTime' });
        }
        if (this["timestamp"]) {
            issues.push(...this.timestamp.doModelValidation());
        }
        if (this["total"]) {
            issues.push(...this.total.doModelValidation());
        }
        if (this["offset"]) {
            issues.push(...this.offset.doModelValidation());
        }
        if (this["parameter"]) {
            this.parameter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["contains"]) {
            this.contains.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansion._fts_dataType = 'ValueSetExpansion';
/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).
 */
export class ValueSet extends fhir.DomainResource {
    /**
     * Default constructor for ValueSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ValueSet';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['immutable']) {
            this.immutable = new fhir.FhirBoolean({ value: source.immutable });
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['compose']) {
            this.compose = new fhir.ValueSetCompose(source.compose);
        }
        if (source['expansion']) {
            this.expansion = new fhir.ValueSetExpansion(source.expansion);
        }
    }
    /**
     * Required-bound Value Set for status (ValueSet.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ValueSet" fhir: ValueSet.resourceType:"ValueSet"' });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation());
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ValueSet.status:code' });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ValueSet.status:code Required binding to: PublicationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["useContext"]) {
            this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["immutable"]) {
            issues.push(...this.immutable.doModelValidation());
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation());
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation());
        }
        if (this["compose"]) {
            issues.push(...this.compose.doModelValidation());
        }
        if (this["expansion"]) {
            issues.push(...this.expansion.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSet._fts_dataType = 'ValueSet';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWVTZXQuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlyL1ZhbHVlU2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDBCQUEwQjtBQUUxQixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQztBQUVuQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLGdCQUFnQixHQUF1QixNQUFNLHNDQUFzQyxDQUFDO0FBRzdGLGFBQWE7QUFDYixPQUFPLEVBQUUscUJBQXFCLEdBQTRCLE1BQU0sMkNBQTJDLENBQUM7QUFLNUcsYUFBYTtBQUNiLE9BQU8sRUFBRSxtQkFBbUIsRUFBMkIsTUFBTSx5Q0FBeUMsQ0FBQztBQUd2RyxhQUFhO0FBQ2IsT0FBTyxFQUFFLHNCQUFzQixFQUE4QixNQUFNLDRDQUE0QyxDQUFDO0FBbUJoSDs7R0FFRztBQUNILE1BQU0sT0FBTyx3Q0FBeUMsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWlCaEY7O09BRUc7SUFDSCxZQUFZLFNBQStELEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ3JILEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3hGLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQUU7UUFDOUQsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQzVFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FBRTtJQUM3QixDQUFDO0lBQ0Q7O09BRUc7SUFDSSxNQUFNLEtBQUssd0JBQXdCO1FBQ3hDLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUNEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLG9CQUFvQjtRQUNwQyxPQUFPLHFCQUFxQixDQUFDO0lBQy9CLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQjtRQUMvQixJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUM1RSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsaUhBQWlILEVBQUUsQ0FBQyxDQUFDO1NBQ3RMO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUN0RSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQWxERDs7R0FFRztBQUM2QixzREFBYSxHQUFVLDBDQUEwQyxDQUFDO0FBbUVwRzs7R0FFRztBQUNILE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWlCckU7O09BRUc7SUFDSCxZQUFZLFNBQW9ELEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQzFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3ZFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDdkYsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDakk7WUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztTQUFFO0lBQ2pDLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQjtRQUMvQixJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSwrRkFBK0YsRUFBRSxDQUFDLENBQUM7U0FDcEs7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3BFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDMUUsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3hHLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBdkNEOztHQUVHO0FBQzZCLDJDQUFhLEdBQVUsK0JBQStCLENBQUM7QUF3RHpGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE2QixTQUFRLElBQUksQ0FBQyxlQUFlO0lBaUJwRTs7T0FFRztJQUNILFlBQVksU0FBbUQsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDekcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDbkY7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzlCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQXlCLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDekY7WUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQ3hCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7U0FBRTthQUM1RTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQUU7SUFDN0IsQ0FBQztJQUNEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLGVBQWU7UUFDL0IsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUI7UUFDL0IsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsc0dBQXNHLEVBQUUsQ0FBQyxDQUFDO1NBQzNLO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUM1RSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsa0hBQWtILEVBQUUsQ0FBQyxDQUFDO1NBQ3ZMO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQVMsQ0FBQyxDQUFDLEVBQUU7WUFDaEYsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsa0pBQWtKLEVBQUUsQ0FBQyxDQUFDO1NBQzNOO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLG9HQUFvRyxFQUFFLENBQUMsQ0FBQztTQUN6SztRQUNELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDdEUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUF2REQ7O0dBRUc7QUFDNkIsMENBQWEsR0FBVSw4QkFBOEIsQ0FBQztBQWdGeEY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUF5QjlEOztPQUVHO0lBQ0gsWUFBWSxTQUE2QyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUNuRyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7U0FBRTtRQUNqRixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDdkYsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDMUc7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQzNCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3RHO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FBRTtRQUMxQixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUN0RztZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1NBQUU7SUFDOUIsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCO1FBQy9CLElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2RCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3hFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDMUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ2hHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUM5RixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDbEcsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUFqREQ7O0dBRUc7QUFDNkIsb0NBQWEsR0FBVSx3QkFBd0IsQ0FBQztBQXVFbEY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxJQUFJLENBQUMsZUFBZTtJQXNCdkQ7O09BRUc7SUFDSCxZQUFZLFNBQXNDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQzVGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzlGLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUMzRixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNuRztZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDM0IsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDbkc7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztTQUFFO0lBQzdCLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQjtRQUMvQixJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUNoRixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQzVFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsd0dBQXdHLEVBQUUsQ0FBQyxDQUFDO1NBQzdLO2FBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLDZHQUE2RyxFQUFFLENBQUMsQ0FBQztTQUNuTDthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLHdHQUF3RyxFQUFFLENBQUMsQ0FBQztTQUM3SztRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUNoRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDaEcsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUFsREQ7O0dBRUc7QUFDNkIsNkJBQWEsR0FBVSxpQkFBaUIsQ0FBQztBQTJGM0U7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUFpQmxFOztPQUVHO0lBQ0gsWUFBWSxTQUFpRCxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN2RyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7U0FBRTthQUN6RTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FBRTthQUM5QyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDN0YsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ2hHLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBQyxDQUFDLENBQUM7U0FBRTthQUNoRyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDaEcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3BGLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7U0FBRTthQUN2RixJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUMsQ0FBQyxDQUFDO1NBQUU7SUFDMUcsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCO1FBQy9CLElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLCtGQUErRixFQUFFLENBQUMsQ0FBQztTQUNwSztRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDcEUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUExQ0Q7O0dBRUc7QUFDNkIsd0NBQWEsR0FBVSw0QkFBNEIsQ0FBQztBQVNwRjs7R0FFRztBQUN1Qiw2Q0FBa0IsR0FBUSxJQUFJLENBQUM7QUFtRTNEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHlCQUEwQixTQUFRLElBQUksQ0FBQyxlQUFlO0lBcUNqRTs7T0FFRztJQUNILFlBQVksU0FBZ0QsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDdEcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDakYsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzNGLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUMzRixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDdkYsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQzVFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7U0FBRTtRQUN2RixJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNqSTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDL0IsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDekc7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUFFO0lBQzlCLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQjtRQUMvQixJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUN4RSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQzVFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDNUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUMxRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3BFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDMUUsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3hHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUNsRyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQWxFRDs7R0FFRztBQUM2Qix1Q0FBYSxHQUFVLDJCQUEyQixDQUFDO0FBK0ZyRjs7O0dBR0c7QUFDSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsSUFBSSxDQUFDLGVBQWU7SUE2QnpEOztPQUVHO0lBQ0gsWUFBWSxTQUF3QyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUM5RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUM3RixJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDMUY7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUFFO1FBQy9CLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7U0FBRTtRQUNsRixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDckYsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDN0c7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQzdCLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3pHO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7U0FBRTtJQUM5QixDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUI7UUFDL0IsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDaEYsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxtR0FBbUcsRUFBRSxDQUFDLENBQUM7U0FDeEs7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQzlFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDdEUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUN4RSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDcEcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ2xHLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBMUREOztHQUVHO0FBQzZCLCtCQUFhLEdBQVUsbUJBQW1CLENBQUM7QUE4STdFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFFBQVMsU0FBUSxJQUFJLENBQUMsY0FBYztJQW9GL0M7O09BRUc7SUFDSCxZQUFZLFNBQStCLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ3JGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7UUFDL0IsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3hFLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTthQUNoRztZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1NBQUU7UUFDOUIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3ZGLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7U0FBRTtRQUM5RSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDakYsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBNEIsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7U0FBRTthQUN4RztZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQUU7UUFDNUIsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3ZHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7U0FBRTtRQUNoRixJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDN0YsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQzFGO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FBRTtRQUMzQixJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDckcsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ2xHO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7U0FBRTtRQUM5QixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDM0c7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQ2hDLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUM5RixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDekYsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztTQUFFO1FBQy9GLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQUU7UUFDbkYsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUFFO0lBQzdGLENBQUM7SUFDRDs7T0FFRztJQUNJLE1BQU0sS0FBSyxtQkFBbUI7UUFDbkMsT0FBTyxzQkFBc0IsQ0FBQztJQUNoQyxDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUI7UUFDL0IsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsMEZBQTBGLEVBQUUsQ0FBQyxDQUFDO1NBQy9KO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUNsRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDdEcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUMxRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3BFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDdEUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxzR0FBc0csRUFBRSxDQUFDLENBQUM7U0FDM0s7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBYSxDQUFDLENBQUMsRUFBRTtZQUMzRixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSx5SUFBeUksRUFBRSxDQUFDLENBQUM7U0FDbE47UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3hFLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDcEYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUNwRSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQzlFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUNoRyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ2xGLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUN0RyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUU7UUFDMUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUM5RSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQzFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQUU7UUFDOUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FBRTtRQUMxRSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQzlFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBeEpEOztHQUVHO0FBQzZCLHNCQUFhLEdBQVUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBWYWx1ZVNldFxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTGFuZ3VhZ2VzQ29kaW5ncywgTGFuZ3VhZ2VzQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTGFuZ3VhZ2VzQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTGFuZ3VhZ2VzQ29kZXMsICBMYW5ndWFnZXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTGFuZ3VhZ2VzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERlc2lnbmF0aW9uVXNlQ29kaW5ncywgRGVzaWduYXRpb25Vc2VDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZXNpZ25hdGlvblVzZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IERlc2lnbmF0aW9uVXNlQ29kZXMsICBEZXNpZ25hdGlvblVzZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9EZXNpZ25hdGlvblVzZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBGaWx0ZXJPcGVyYXRvckNvZGluZ3MsIEZpbHRlck9wZXJhdG9yQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRmlsdGVyT3BlcmF0b3JDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBGaWx0ZXJPcGVyYXRvckNvZGVzLCAgRmlsdGVyT3BlcmF0b3JDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvRmlsdGVyT3BlcmF0b3JDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHVibGljYXRpb25TdGF0dXNDb2RpbmdzLCBQdWJsaWNhdGlvblN0YXR1c0NvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1B1YmxpY2F0aW9uU3RhdHVzQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHVibGljYXRpb25TdGF0dXNDb2RlcywgIFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1B1YmxpY2F0aW9uU3RhdHVzQ29kZXMuanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVmFsdWVTZXRDb21wb3NlSW5jbHVkZUNvbmNlcHREZXNpZ25hdGlvbiB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBWYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdERlc2lnbmF0aW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogSW4gdGhlIGFic2VuY2Ugb2YgYSBsYW5ndWFnZSwgdGhlIHJlc291cmNlIGxhbmd1YWdlIGFwcGxpZXMuXHJcbiAgICovXHJcbiAgbGFuZ3VhZ2U/OiBmaGlyLkZoaXJDb2RlfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWYgbm8gdXNlIGlzIHByb3ZpZGVkLCB0aGUgZGVzaWduYXRpb24gY2FuIGJlIGFzc3VtZWQgdG8gYmUgc3VpdGFibGUgZm9yIGdlbmVyYWwgZGlzcGxheSB0byBhIGh1bWFuIHVzZXIuXHJcbiAgICovXHJcbiAgdXNlPzogZmhpci5Db2RpbmdBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGV4dCB2YWx1ZSBmb3IgdGhpcyBkZXNpZ25hdGlvbi5cclxuICAgKi9cclxuICB2YWx1ZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25jZXB0cyBoYXZlIGJvdGggYSBgYGBkaXNwbGF5YGBgIGFuZCBhbiBhcnJheSBvZiBgYGBkZXNpZ25hdGlvbmBgYC4gVGhlIGRpc3BsYXkgaXMgZXF1aXZhbGVudCB0byBhIHNwZWNpYWwgZGVzaWduYXRpb24gd2l0aCBhbiBpbXBsaWVkIGBgYGRlc2lnbmF0aW9uLnVzZWBgYCBvZiBcInByaW1hcnkgY29kZVwiIGFuZCBhIGxhbmd1YWdlIGVxdWFsIHRvIHRoZSBbUmVzb3VyY2UgTGFuZ3VhZ2VdKHJlc291cmNlLmh0bWwjbGFuZ3VhZ2UpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbHVlU2V0Q29tcG9zZUluY2x1ZGVDb25jZXB0RGVzaWduYXRpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdWYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdERlc2lnbmF0aW9uJztcclxuICAvKipcclxuICAgKiBJbiB0aGUgYWJzZW5jZSBvZiBhIGxhbmd1YWdlLCB0aGUgcmVzb3VyY2UgbGFuZ3VhZ2UgYXBwbGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgbGFuZ3VhZ2U/OiBmaGlyLkZoaXJDb2RlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZiBubyB1c2UgaXMgcHJvdmlkZWQsIHRoZSBkZXNpZ25hdGlvbiBjYW4gYmUgYXNzdW1lZCB0byBiZSBzdWl0YWJsZSBmb3IgZ2VuZXJhbCBkaXNwbGF5IHRvIGEgaHVtYW4gdXNlci5cclxuICAgKi9cclxuICBwdWJsaWMgdXNlPzogZmhpci5Db2Rpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0ZXh0IHZhbHVlIGZvciB0aGlzIGRlc2lnbmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB2YWx1ZTogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVmFsdWVTZXRDb21wb3NlSW5jbHVkZUNvbmNlcHREZXNpZ25hdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFZhbHVlU2V0Q29tcG9zZUluY2x1ZGVDb25jZXB0RGVzaWduYXRpb25BcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnbGFuZ3VhZ2UnXSkgeyB0aGlzLmxhbmd1YWdlID0gbmV3IGZoaXIuRmhpckNvZGUoe3ZhbHVlOiBzb3VyY2UubGFuZ3VhZ2V9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndXNlJ10pIHsgdGhpcy51c2UgPSBuZXcgZmhpci5Db2Rpbmcoc291cmNlLnVzZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhbHVlJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmFsdWV9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudmFsdWUgPSBudWxsOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFByZWZlcnJlZC1ib3VuZCBWYWx1ZSBTZXQgZm9yIGxhbmd1YWdlIChWYWx1ZVNldC5jb21wb3NlLmluY2x1ZGUuY29uY2VwdC5kZXNpZ25hdGlvbi5sYW5ndWFnZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBsYW5ndWFnZVByZWZlcnJlZENvZGluZ3MoKTpMYW5ndWFnZXNDb2RpbmdUeXBlIHtcclxuICAgIHJldHVybiBMYW5ndWFnZXNDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBFeHRlbnNpYmxlLWJvdW5kIFZhbHVlIFNldCBmb3IgdXNlIChWYWx1ZVNldC5jb21wb3NlLmluY2x1ZGUuY29uY2VwdC5kZXNpZ25hdGlvbi51c2UpXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXQgdXNlRXh0ZW5zaWJsZUNvZGluZ3MoKTpEZXNpZ25hdGlvblVzZUNvZGluZ1R5cGUge1xyXG4gICAgcmV0dXJuIERlc2lnbmF0aW9uVXNlQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1wibGFuZ3VhZ2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5sYW5ndWFnZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ1c2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy51c2UuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1sndmFsdWUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdmFsdWU6Zmhpci5GaGlyU3RyaW5nIGZoaXI6IFZhbHVlU2V0LmNvbXBvc2UuaW5jbHVkZS5jb25jZXB0LmRlc2lnbmF0aW9uLnZhbHVlOnN0cmluZycgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInZhbHVlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudmFsdWUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBWYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBWYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEV4cHJlc3Npb25zIGFyZSBhbGxvd2VkIGlmIGRlZmluZWQgYnkgdGhlIHVuZGVybHlpbmcgY29kZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgY29kZTogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBzZXQgcmVzb3VyY2UgYWxsb3dzIGZvciBhbiBhbHRlcm5hdGl2ZSBkaXNwbGF5IHRvIGJlIHNwZWNpZmllZCBmb3Igd2hlbiB0aGlzIGNvbmNlcHQgaXMgdXNlZCBpbiB0aGlzIHBhcnRpY3VsYXIgdmFsdWUgc2V0LiBTZWUgbm90ZXMgaW4gdGhlIHZhbHVlIHNldCBuYXJyYXRpdmUgYWJvdXQgdGhlIGNvcnJlY3QgdXNlIG9mIHRoaXMgZWxlbWVudC5cclxuICAgKi9cclxuICBkaXNwbGF5PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29uY2VwdHMgaGF2ZSBib3RoIGEgYGBgZGlzcGxheWBgYCBhbmQgYW4gYXJyYXkgb2YgYGBgZGVzaWduYXRpb25gYGAuIFRoZSBkaXNwbGF5IGlzIGVxdWl2YWxlbnQgdG8gYSBzcGVjaWFsIGRlc2lnbmF0aW9uIHdpdGggYW4gaW1wbGllZCBgYGBkZXNpZ25hdGlvbi51c2VgYGAgb2YgXCJwcmltYXJ5IGNvZGVcIiBhbmQgYSBsYW5ndWFnZSBlcXVhbCB0byB0aGUgW1Jlc291cmNlIExhbmd1YWdlXShyZXNvdXJjZS5odG1sI2xhbmd1YWdlKS5cclxuICAgKi9cclxuICBkZXNpZ25hdGlvbj86IGZoaXIuVmFsdWVTZXRDb21wb3NlSW5jbHVkZUNvbmNlcHREZXNpZ25hdGlvbkFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbGlzdCBvZiBjb25jZXB0cyBpcyBjb25zaWRlcmVkIG9yZGVyZWQsIHRob3VnaCB0aGUgb3JkZXIgbWlnaHQgbm90IGhhdmUgYW55IHBhcnRpY3VsYXIgc2lnbmlmaWNhbmNlLiBUeXBpY2FsbHksIHRoZSBvcmRlciBvZiBhbiBleHBhbnNpb24gZm9sbG93cyB0aGF0IGRlZmluZWQgaW4gdGhlIGNvbXBvc2UgZWxlbWVudC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1ZhbHVlU2V0Q29tcG9zZUluY2x1ZGVDb25jZXB0JztcclxuICAvKipcclxuICAgKiBFeHByZXNzaW9ucyBhcmUgYWxsb3dlZCBpZiBkZWZpbmVkIGJ5IHRoZSB1bmRlcmx5aW5nIGNvZGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2RlOiBmaGlyLkZoaXJDb2RlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIHNldCByZXNvdXJjZSBhbGxvd3MgZm9yIGFuIGFsdGVybmF0aXZlIGRpc3BsYXkgdG8gYmUgc3BlY2lmaWVkIGZvciB3aGVuIHRoaXMgY29uY2VwdCBpcyB1c2VkIGluIHRoaXMgcGFydGljdWxhciB2YWx1ZSBzZXQuIFNlZSBub3RlcyBpbiB0aGUgdmFsdWUgc2V0IG5hcnJhdGl2ZSBhYm91dCB0aGUgY29ycmVjdCB1c2Ugb2YgdGhpcyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwbGF5PzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb25jZXB0cyBoYXZlIGJvdGggYSBgYGBkaXNwbGF5YGBgIGFuZCBhbiBhcnJheSBvZiBgYGBkZXNpZ25hdGlvbmBgYC4gVGhlIGRpc3BsYXkgaXMgZXF1aXZhbGVudCB0byBhIHNwZWNpYWwgZGVzaWduYXRpb24gd2l0aCBhbiBpbXBsaWVkIGBgYGRlc2lnbmF0aW9uLnVzZWBgYCBvZiBcInByaW1hcnkgY29kZVwiIGFuZCBhIGxhbmd1YWdlIGVxdWFsIHRvIHRoZSBbUmVzb3VyY2UgTGFuZ3VhZ2VdKHJlc291cmNlLmh0bWwjbGFuZ3VhZ2UpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNpZ25hdGlvbjogZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdERlc2lnbmF0aW9uW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVmFsdWVTZXRDb21wb3NlSW5jbHVkZUNvbmNlcHQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxWYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydjb2RlJ10pIHsgdGhpcy5jb2RlID0gbmV3IGZoaXIuRmhpckNvZGUoe3ZhbHVlOiBzb3VyY2UuY29kZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb2RlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGlzcGxheSddKSB7IHRoaXMuZGlzcGxheSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGlzcGxheX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXNpZ25hdGlvbiddKSB7IHRoaXMuZGVzaWduYXRpb24gPSBzb3VyY2UuZGVzaWduYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdERlc2lnbmF0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZGVzaWduYXRpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydjb2RlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGNvZGU6Zmhpci5GaGlyQ29kZSBmaGlyOiBWYWx1ZVNldC5jb21wb3NlLmluY2x1ZGUuY29uY2VwdC5jb2RlOmNvZGUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJjb2RlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29kZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkaXNwbGF5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGlzcGxheS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNpZ25hdGlvblwiXSkgeyB0aGlzLmRlc2lnbmF0aW9uLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFZhbHVlU2V0Q29tcG9zZUluY2x1ZGVGaWx0ZXIgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWVTZXRDb21wb3NlSW5jbHVkZUZpbHRlckFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEEgY29kZSB0aGF0IGlkZW50aWZpZXMgYSBwcm9wZXJ0eSBvciBhIGZpbHRlciBkZWZpbmVkIGluIHRoZSBjb2RlIHN5c3RlbS5cclxuICAgKi9cclxuICBwcm9wZXJ0eTogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluIGNhc2UgZmlsdGVyLnByb3BlcnR5IHJlcHJlc2VudHMgYSBwcm9wZXJ0eSBvZiB0aGUgc3lzdGVtLCB0aGUgb3BlcmF0aW9uIGFwcGxpZXMgdG8gdGhlIHNlbGVjdGVkIHByb3BlcnR5LiBJbiBjYXNlIGZpbHRlci5wcm9wZXJ0eSByZXByZXNlbnRzIGEgZmlsdGVyIG9mIHRoZSBzeXN0ZW0sIHRoZSBvcGVyYXRpb24gU0hBTEwgbWF0Y2ggb25lIG9mIHRoZSBDb2RlU3lzdGVtLmZpbHRlci5vcGVyYXRvciB2YWx1ZXMuXHJcbiAgICovXHJcbiAgb3A6IGZoaXIuRmhpckNvZGU8RmlsdGVyT3BlcmF0b3JDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc2UgcmVnZXggbWF0Y2hpbmcgd2l0aCBjYXJlIC0gZnVsbCByZWdleCBtYXRjaGluZyBvbiBldmVyeSBTTk9NRUQgQ1QgdGVybSBpcyBwcm9oaWJpdGl2ZSwgZm9yIGV4YW1wbGUuXHJcbiAgICovXHJcbiAgdmFsdWU6IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogU2VsZWN0aW5nIGNvZGVzIGJ5IHNwZWNpZnlpbmcgZmlsdGVycyBiYXNlZCBvbiBwcm9wZXJ0aWVzIGlzIG9ubHkgcG9zc2libGUgd2hlcmUgdGhlIHVuZGVybHlpbmcgY29kZSBzeXN0ZW0gZGVmaW5lcyBhcHByb3ByaWF0ZSBwcm9wZXJ0aWVzLiBOb3RlIHRoYXQgaW4gc29tZSBjYXNlcywgdGhlIHVuZGVybHlpbmcgY29kZSBzeXN0ZW0gZGVmaW5lcyB0aGUgbG9naWNhbCBjb25jZXB0cyBidXQgbm90IHRoZSBsaXRlcmFsIGNvZGVzIGZvciB0aGUgY29uY2VwdHMuIEluIHN1Y2ggY2FzZXMsIHRoZSBsaXRlcmFsIGRlZmluaXRpb25zIG1heSBiZSBwcm92aWRlZCBieSBhIHRoaXJkIHBhcnR5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbHVlU2V0Q29tcG9zZUluY2x1ZGVGaWx0ZXIgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdWYWx1ZVNldENvbXBvc2VJbmNsdWRlRmlsdGVyJztcclxuICAvKipcclxuICAgKiBBIGNvZGUgdGhhdCBpZGVudGlmaWVzIGEgcHJvcGVydHkgb3IgYSBmaWx0ZXIgZGVmaW5lZCBpbiB0aGUgY29kZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgcHVibGljIHByb3BlcnR5OiBmaGlyLkZoaXJDb2RlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogSW4gY2FzZSBmaWx0ZXIucHJvcGVydHkgcmVwcmVzZW50cyBhIHByb3BlcnR5IG9mIHRoZSBzeXN0ZW0sIHRoZSBvcGVyYXRpb24gYXBwbGllcyB0byB0aGUgc2VsZWN0ZWQgcHJvcGVydHkuIEluIGNhc2UgZmlsdGVyLnByb3BlcnR5IHJlcHJlc2VudHMgYSBmaWx0ZXIgb2YgdGhlIHN5c3RlbSwgdGhlIG9wZXJhdGlvbiBTSEFMTCBtYXRjaCBvbmUgb2YgdGhlIENvZGVTeXN0ZW0uZmlsdGVyLm9wZXJhdG9yIHZhbHVlcy5cclxuICAgKi9cclxuICBwdWJsaWMgb3A6IGZoaXIuRmhpckNvZGU8RmlsdGVyT3BlcmF0b3JDb2RlVHlwZT58bnVsbDtcclxuICAvKipcclxuICAgKiBVc2UgcmVnZXggbWF0Y2hpbmcgd2l0aCBjYXJlIC0gZnVsbCByZWdleCBtYXRjaGluZyBvbiBldmVyeSBTTk9NRUQgQ1QgdGVybSBpcyBwcm9oaWJpdGl2ZSwgZm9yIGV4YW1wbGUuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBWYWx1ZVNldENvbXBvc2VJbmNsdWRlRmlsdGVyIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VmFsdWVTZXRDb21wb3NlSW5jbHVkZUZpbHRlckFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydwcm9wZXJ0eSddKSB7IHRoaXMucHJvcGVydHkgPSBuZXcgZmhpci5GaGlyQ29kZSh7dmFsdWU6IHNvdXJjZS5wcm9wZXJ0eX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm9wZXJ0eSA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ29wJ10pIHsgdGhpcy5vcCA9IG5ldyBmaGlyLkZoaXJDb2RlPEZpbHRlck9wZXJhdG9yQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLm9wfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm9wID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsndmFsdWUnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS52YWx1ZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy52YWx1ZSA9IG51bGw7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBvcCAoVmFsdWVTZXQuY29tcG9zZS5pbmNsdWRlLmZpbHRlci5vcClcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBvcFJlcXVpcmVkQ29kZXMoKSB7XHJcbiAgICByZXR1cm4gRmlsdGVyT3BlcmF0b3JDb2RlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sncHJvcGVydHknXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcHJvcGVydHk6Zmhpci5GaGlyQ29kZSBmaGlyOiBWYWx1ZVNldC5jb21wb3NlLmluY2x1ZGUuZmlsdGVyLnByb3BlcnR5OmNvZGUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJwcm9wZXJ0eVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnByb3BlcnR5LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ29wJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IG9wOmZoaXIuRmhpckNvZGU8RmlsdGVyT3BlcmF0b3JDb2RlVHlwZT4gZmhpcjogVmFsdWVTZXQuY29tcG9zZS5pbmNsdWRlLmZpbHRlci5vcDpjb2RlJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzWydvcCddICYmICghT2JqZWN0LnZhbHVlcyhGaWx0ZXJPcGVyYXRvckNvZGVzKS5pbmNsdWRlcyh0aGlzLm9wIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ0ludmFsaWQgY29kZSBwcm9wZXJ0eSBvcDpmaGlyLkZoaXJDb2RlPEZpbHRlck9wZXJhdG9yQ29kZVR5cGU+IGZoaXI6IFZhbHVlU2V0LmNvbXBvc2UuaW5jbHVkZS5maWx0ZXIub3A6Y29kZSBSZXF1aXJlZCBiaW5kaW5nIHRvOiBGaWx0ZXJPcGVyYXRvcicgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcIm9wXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMub3AuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1sndmFsdWUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdmFsdWU6Zmhpci5GaGlyU3RyaW5nIGZoaXI6IFZhbHVlU2V0LmNvbXBvc2UuaW5jbHVkZS5maWx0ZXIudmFsdWU6c3RyaW5nJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1widmFsdWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy52YWx1ZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFZhbHVlU2V0Q29tcG9zZUluY2x1ZGUgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWVTZXRDb21wb3NlSW5jbHVkZUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZXJlIGFyZSBubyBjb2RlcyBvciBmaWx0ZXJzLCB0aGUgZW50aXJlIGNvZGUgc3lzdGVtIGlzIGluY2x1ZGVkLiBOb3RlIHRoYXQgdGhlIHNldCBvZiBjb2RlcyB0aGF0IGFyZSBpbmNsdWRlZCBtYXkgY29udGFpbiBhYnN0cmFjdCBjb2Rlcy4gU2VlICcnQ29kaW5nLnN5c3RlbScnIGZvciBmdXJ0aGVyIGRvY3VtZW50YXRpb24gYWJvdXQgdGhlIGNvcnJlY3QgdmFsdWUgZm9yIHRoZSBzeXN0ZW0gZWxlbWVudC5cclxuICAgKi9cclxuICBzeXN0ZW0/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGlzIHVzZWQgd2hlbiBzZWxlY3RpbmcgdGhlIGRlc2NlbmRhbnRzIG9mIGEgY29uY2VwdCAtIHRoZXkgbWF5IGNoYW5nZSBiZXR3ZWVuIHZlcnNpb25zLiBJZiBubyB2ZXJzaW9uIGlzIHNwZWNpZmllZCwgdGhlbiB0aGUgZXhhY3QgY29udGVudHMgb2YgdGhlIHZhbHVlIHNldCBtaWdodCBub3QgYmUga25vd24gdW50aWwgYSBjb250ZXh0IG9mIHVzZSBiaW5kcyBpdCB0byBhIHBhcnRpY3VsYXIgdmVyc2lvbi4gVGhlIHNwZWNpYWwgdmFsdWUgJyonIG1lYW5zIGFsbCB2ZXJzaW9uczsgSXQgaXMgYXQgc2VydmVyIGRpc2NyZXRpb24gcmVnYXJkaW5nIGV4cGFuc2lvbnMgYW5kIHdoaWNoIHZlcnNpb25zIG11c3QgYmUgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIHZlcnNpb24/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiBjb25jZXB0cyBpcyBjb25zaWRlcmVkIG9yZGVyZWQsIHRob3VnaCB0aGUgb3JkZXIgbWlnaHQgbm90IGhhdmUgYW55IHBhcnRpY3VsYXIgc2lnbmlmaWNhbmNlLiBUeXBpY2FsbHksIHRoZSBvcmRlciBvZiBhbiBleHBhbnNpb24gZm9sbG93cyB0aGF0IGRlZmluZWQgaW4gdGhlIGNvbXBvc2UgZWxlbWVudC5cclxuICAgKi9cclxuICBjb25jZXB0PzogZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VsZWN0aW5nIGNvZGVzIGJ5IHNwZWNpZnlpbmcgZmlsdGVycyBiYXNlZCBvbiBwcm9wZXJ0aWVzIGlzIG9ubHkgcG9zc2libGUgd2hlcmUgdGhlIHVuZGVybHlpbmcgY29kZSBzeXN0ZW0gZGVmaW5lcyBhcHByb3ByaWF0ZSBwcm9wZXJ0aWVzLiBOb3RlIHRoYXQgaW4gc29tZSBjYXNlcywgdGhlIHVuZGVybHlpbmcgY29kZSBzeXN0ZW0gZGVmaW5lcyB0aGUgbG9naWNhbCBjb25jZXB0cyBidXQgbm90IHRoZSBsaXRlcmFsIGNvZGVzIGZvciB0aGUgY29uY2VwdHMuIEluIHN1Y2ggY2FzZXMsIHRoZSBsaXRlcmFsIGRlZmluaXRpb25zIG1heSBiZSBwcm92aWRlZCBieSBhIHRoaXJkIHBhcnR5LlxyXG4gICAqL1xyXG4gIGZpbHRlcj86IGZoaXIuVmFsdWVTZXRDb21wb3NlSW5jbHVkZUZpbHRlckFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIHNldCBVUkkgaXMgZWl0aGVyIGEgbG9naWNhbCByZWZlcmVuY2UgdG8gYSBkZWZpbmVkIHZhbHVlIHNldCBzdWNoIGFzIGEgW1NOT01FRCBDVCByZWZlcmVuY2Ugc2V0XShzbm9tZWRjdC5odG1sI2ltcGxpY2l0KSwgb3IgYSBkaXJlY3QgcmVmZXJlbmNlIHRvIGEgdmFsdWUgc2V0IGRlZmluaXRpb24gdXNpbmcgVmFsdWVTZXQudXJsLiBUaGUgcmVmZXJlbmNlIG1pZ2h0IG5vdCByZWZlciB0byBhbiBhY3R1YWwgRkhJUiBWYWx1ZVNldCByZXNvdXJjZTsgaW4gdGhpcyBjYXNlLCB3aGF0ZXZlciBpcyByZWZlcnJlZCB0byBpcyBhbiBpbXBsaWNpdCBkZWZpbml0aW9uIG9mIGEgdmFsdWUgc2V0IHRoYXQgbmVlZHMgdG8gYmUgY2xlYXIgYWJvdXQgaG93IHZlcnNpb25zIGFyZSByZXNvbHZlZC5cclxuICAgKi9cclxuICB2YWx1ZVNldD86IGZoaXIuRmhpckNhbm9uaWNhbFtdfHN0cmluZ1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFsbCB0aGUgY29uZGl0aW9ucyBpbiBhbiBpbmNsdWRlIG11c3QgYmUgdHJ1ZS4gSWYgYSBzeXN0ZW0gaXMgbGlzdGVkLCBhbGwgdGhlIGNvZGVzIGZyb20gdGhlIHN5c3RlbSBhcmUgbGlzdGVkLiBJZiBvbmUgb3IgbW9yZSBmaWx0ZXJzIGFyZSBsaXN0ZWQsIGFsbCBvZiB0aGUgZmlsdGVycyBtdXN0IGFwcGx5LiBJZiBvbmUgb3IgbW9yZSB2YWx1ZSBzZXRzIGFyZSBsaXN0ZWQsIHRoZSBjb2RlcyBtdXN0IGJlIGluIGFsbCB0aGUgdmFsdWUgc2V0cy4gRS5nLiBlYWNoIGluY2x1ZGUgaXMgJ2luY2x1ZGUgYWxsIHRoZSBjb2RlcyB0aGF0IG1lZXQgYWxsIHRoZXNlIGNvbmRpdGlvbnMnLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbHVlU2V0Q29tcG9zZUluY2x1ZGUgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdWYWx1ZVNldENvbXBvc2VJbmNsdWRlJztcclxuICAvKipcclxuICAgKiBJZiB0aGVyZSBhcmUgbm8gY29kZXMgb3IgZmlsdGVycywgdGhlIGVudGlyZSBjb2RlIHN5c3RlbSBpcyBpbmNsdWRlZC4gTm90ZSB0aGF0IHRoZSBzZXQgb2YgY29kZXMgdGhhdCBhcmUgaW5jbHVkZWQgbWF5IGNvbnRhaW4gYWJzdHJhY3QgY29kZXMuIFNlZSAnJ0NvZGluZy5zeXN0ZW0nJyBmb3IgZnVydGhlciBkb2N1bWVudGF0aW9uIGFib3V0IHRoZSBjb3JyZWN0IHZhbHVlIGZvciB0aGUgc3lzdGVtIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN5c3RlbT86IGZoaXIuRmhpclVyaXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyB1c2VkIHdoZW4gc2VsZWN0aW5nIHRoZSBkZXNjZW5kYW50cyBvZiBhIGNvbmNlcHQgLSB0aGV5IG1heSBjaGFuZ2UgYmV0d2VlbiB2ZXJzaW9ucy4gSWYgbm8gdmVyc2lvbiBpcyBzcGVjaWZpZWQsIHRoZW4gdGhlIGV4YWN0IGNvbnRlbnRzIG9mIHRoZSB2YWx1ZSBzZXQgbWlnaHQgbm90IGJlIGtub3duIHVudGlsIGEgY29udGV4dCBvZiB1c2UgYmluZHMgaXQgdG8gYSBwYXJ0aWN1bGFyIHZlcnNpb24uIFRoZSBzcGVjaWFsIHZhbHVlICcqJyBtZWFucyBhbGwgdmVyc2lvbnM7IEl0IGlzIGF0IHNlcnZlciBkaXNjcmV0aW9uIHJlZ2FyZGluZyBleHBhbnNpb25zIGFuZCB3aGljaCB2ZXJzaW9ucyBtdXN0IGJlIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpc3Qgb2YgY29uY2VwdHMgaXMgY29uc2lkZXJlZCBvcmRlcmVkLCB0aG91Z2ggdGhlIG9yZGVyIG1pZ2h0IG5vdCBoYXZlIGFueSBwYXJ0aWN1bGFyIHNpZ25pZmljYW5jZS4gVHlwaWNhbGx5LCB0aGUgb3JkZXIgb2YgYW4gZXhwYW5zaW9uIGZvbGxvd3MgdGhhdCBkZWZpbmVkIGluIHRoZSBjb21wb3NlIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbmNlcHQ6IGZoaXIuVmFsdWVTZXRDb21wb3NlSW5jbHVkZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBTZWxlY3RpbmcgY29kZXMgYnkgc3BlY2lmeWluZyBmaWx0ZXJzIGJhc2VkIG9uIHByb3BlcnRpZXMgaXMgb25seSBwb3NzaWJsZSB3aGVyZSB0aGUgdW5kZXJseWluZyBjb2RlIHN5c3RlbSBkZWZpbmVzIGFwcHJvcHJpYXRlIHByb3BlcnRpZXMuIE5vdGUgdGhhdCBpbiBzb21lIGNhc2VzLCB0aGUgdW5kZXJseWluZyBjb2RlIHN5c3RlbSBkZWZpbmVzIHRoZSBsb2dpY2FsIGNvbmNlcHRzIGJ1dCBub3QgdGhlIGxpdGVyYWwgY29kZXMgZm9yIHRoZSBjb25jZXB0cy4gSW4gc3VjaCBjYXNlcywgdGhlIGxpdGVyYWwgZGVmaW5pdGlvbnMgbWF5IGJlIHByb3ZpZGVkIGJ5IGEgdGhpcmQgcGFydHkuXHJcbiAgICovXHJcbiAgcHVibGljIGZpbHRlcjogZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlRmlsdGVyW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIHNldCBVUkkgaXMgZWl0aGVyIGEgbG9naWNhbCByZWZlcmVuY2UgdG8gYSBkZWZpbmVkIHZhbHVlIHNldCBzdWNoIGFzIGEgW1NOT01FRCBDVCByZWZlcmVuY2Ugc2V0XShzbm9tZWRjdC5odG1sI2ltcGxpY2l0KSwgb3IgYSBkaXJlY3QgcmVmZXJlbmNlIHRvIGEgdmFsdWUgc2V0IGRlZmluaXRpb24gdXNpbmcgVmFsdWVTZXQudXJsLiBUaGUgcmVmZXJlbmNlIG1pZ2h0IG5vdCByZWZlciB0byBhbiBhY3R1YWwgRkhJUiBWYWx1ZVNldCByZXNvdXJjZTsgaW4gdGhpcyBjYXNlLCB3aGF0ZXZlciBpcyByZWZlcnJlZCB0byBpcyBhbiBpbXBsaWNpdCBkZWZpbml0aW9uIG9mIGEgdmFsdWUgc2V0IHRoYXQgbmVlZHMgdG8gYmUgY2xlYXIgYWJvdXQgaG93IHZlcnNpb25zIGFyZSByZXNvbHZlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWVTZXQ6IGZoaXIuRmhpckNhbm9uaWNhbFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFZhbHVlU2V0Q29tcG9zZUluY2x1ZGUgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxWYWx1ZVNldENvbXBvc2VJbmNsdWRlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ3N5c3RlbSddKSB7IHRoaXMuc3lzdGVtID0gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHNvdXJjZS5zeXN0ZW19KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndmVyc2lvbiddKSB7IHRoaXMudmVyc2lvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydjb25jZXB0J10pIHsgdGhpcy5jb25jZXB0ID0gc291cmNlLmNvbmNlcHQubWFwKCh4KSA9PiBuZXcgZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbmNlcHQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZmlsdGVyJ10pIHsgdGhpcy5maWx0ZXIgPSBzb3VyY2UuZmlsdGVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuVmFsdWVTZXRDb21wb3NlSW5jbHVkZUZpbHRlcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmZpbHRlciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZVNldCddKSB7IHRoaXMudmFsdWVTZXQgPSBzb3VyY2UudmFsdWVTZXQubWFwKCh4KSA9PiBuZXcgZmhpci5GaGlyQ2Fub25pY2FsKHt2YWx1ZTogeH0pKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMudmFsdWVTZXQgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKHRoaXNbXCJzeXN0ZW1cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5zeXN0ZW0uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1widmVyc2lvblwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnZlcnNpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY29uY2VwdFwiXSkgeyB0aGlzLmNvbmNlcHQuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImZpbHRlclwiXSkgeyB0aGlzLmZpbHRlci5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1widmFsdWVTZXRcIl0pIHsgdGhpcy52YWx1ZVNldC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBWYWx1ZVNldENvbXBvc2UgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWVTZXRDb21wb3NlQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogV2l0aCBhIGRlZmluZWQgbG9ja2VkRGF0ZSB0aGUgdmFsdWUgc2V0IGlzIGNvbnNpZGVyZWQgXCJMb2NrZWRcIi4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgc2V0IG1heSBoYXZlIGRpZmZlcmVudCBleHBhbnNpb25zIGFzIHVuZGVybHlpbmcgY29kZSBzeXN0ZW1zIGFuZC9vciB2YWx1ZSBzZXRzIGV2b2x2ZS4gIFRoZSBpbnRlcnByZXRhdGlvbiBvZiBsb2NrZWREYXRlIGlzIG9mdGVuIGRlcGVuZGVudCBvbiB0aGUgY29udGV4dCAtIGUuZy4gYSBTTk9NRUQgQ1QgZGVyaXZlZCB2YWx1ZSBzZXQgd2l0aCBhIGxvY2tlZERhdGUgd2lsbCBoYXZlIGEgZGlmZmVyZW50IGV4cGFuc2lvbiBpbiBVU0EgdGhhbiBpbiBVSy4gIElmIGEgdmFsdWUgc2V0IHNwZWNpZmllcyBhIHZlcnNpb24gZm9yIGluY2x1ZGUgYW5kIGV4Y2x1ZGUgc3RhdGVtZW50cywgYW5kIGFsc28gc3BlY2lmaWVzIGEgbG9ja2VkIGRhdGUsIHRoZSBzcGVjaWZpZWQgdmVyc2lvbnMgbmVlZCB0byBiZSBhdmFpbGFibGUgdGhhdCBkYXRlLCBvciB0aGUgdmFsdWUgc2V0IHdpbGwgbm90IGJlIHVzYWJsZS5cclxuICAgKi9cclxuICBsb2NrZWREYXRlPzogZmhpci5GaGlyRGF0ZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCBpbiB0aGUgRkhJUiB0ZXJtaW5vbG9neSBmcmFtZXdvcmssIFwiZGVwcmVjYXRlZFwiIGRvZXMgbm90IG1lYW4gaW5hY3RpdmUsIGJ1dCBpbiBzb21lIGNvZGUgc3lzdGVtcywgZS5nLiBMT0lOQywgXCJkZXByZWNhdGVkXCIgZG9lcyBtZWFuIGluYWN0aXZlLiBDb2RlIHN5c3RlbXMgc2hvdWxkIGRlZmluZSB3aGF0IGNvZGVzIGFyZSBjb25zaWRlcmVkIHRvIGJlIGluYWN0aXZlLiBJZiB0aGlzIGlzIG5vdCBjbGVhcmx5IGRlZmluZWQgKGluY2x1ZGluZyBpbiB0aGUgRkhJUiBjb2RlIHN5c3RlbSByZXNvdXJjZSksIHRoZW4gYWxsIGNvZGVzIGFyZSBhc3N1bWVkIHRvIGJlIGFjdGl2ZS5cclxuICAgKiBUaGUgVmFsdWUgU2V0IERlZmluaXRpb24gc3BlY2lmaWNhdGlvbiBkZWZpbmVzIGFuIEFjdGl2ZU9ubHkgZWxlbWVudCwgd2hpY2ggaXMgdGhlIHJldmVyc2Ugb2YgdGhpcyBlbGVtZW50IGUuZy4gKFZhbHVlU2V0LmNvbXBvc2UuaW5hY3RpdmU9RkFMU0UpIGlzIHRoZSBzYW1lIGFzIChWU0QuQWN0aXZlT25seT1UUlVFKS5cclxuICAgKi9cclxuICBpbmFjdGl2ZT86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWxsIHRoZSBjb25kaXRpb25zIGluIGFuIGluY2x1ZGUgbXVzdCBiZSB0cnVlLiBJZiBhIHN5c3RlbSBpcyBsaXN0ZWQsIGFsbCB0aGUgY29kZXMgZnJvbSB0aGUgc3lzdGVtIGFyZSBsaXN0ZWQuIElmIG9uZSBvciBtb3JlIGZpbHRlcnMgYXJlIGxpc3RlZCwgYWxsIG9mIHRoZSBmaWx0ZXJzIG11c3QgYXBwbHkuIElmIG9uZSBvciBtb3JlIHZhbHVlIHNldHMgYXJlIGxpc3RlZCwgdGhlIGNvZGVzIG11c3QgYmUgaW4gYWxsIHRoZSB2YWx1ZSBzZXRzLiBFLmcuIGVhY2ggaW5jbHVkZSBpcyAnaW5jbHVkZSBhbGwgdGhlIGNvZGVzIHRoYXQgbWVldCBhbGwgdGhlc2UgY29uZGl0aW9ucycuXHJcbiAgICovXHJcbiAgaW5jbHVkZTogZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlQXJnc1tdfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVXN1YWxseSB0aGlzIGlzIHVzZWQgdG8gc2VsZWN0aXZlbHkgZXhjbHVkZSBjb2RlcyB0aGF0IHdlcmUgaW5jbHVkZWQgYnkgc3Vic3VtcHRpb24gaW4gdGhlIGluY2x1c2lvbnMuIEFueSBkaXNwbGF5IG5hbWVzIHNwZWNpZmllZCBmb3IgdGhlIGNvZGVzIGFyZSBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIGV4Y2x1ZGU/OiBmaGlyLlZhbHVlU2V0Q29tcG9zZUluY2x1ZGVBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgY3JpdGVyaWEgdGhhdCBkZWZpbmUgdGhlIGNvbnRlbnRzIG9mIHRoZSB2YWx1ZSBzZXQgYnkgaW5jbHVkaW5nIG9yIGV4Y2x1ZGluZyBjb2RlcyBzZWxlY3RlZCBmcm9tIHRoZSBzcGVjaWZpZWQgY29kZSBzeXN0ZW0ocykgdGhhdCB0aGUgdmFsdWUgc2V0IGRyYXdzIGZyb20uIFRoaXMgaXMgYWxzbyBrbm93biBhcyB0aGUgQ29udGVudCBMb2dpY2FsIERlZmluaXRpb24gKENMRCkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmFsdWVTZXRDb21wb3NlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnVmFsdWVTZXRDb21wb3NlJztcclxuICAvKipcclxuICAgKiBXaXRoIGEgZGVmaW5lZCBsb2NrZWREYXRlIHRoZSB2YWx1ZSBzZXQgaXMgY29uc2lkZXJlZCBcIkxvY2tlZFwiLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBzZXQgbWF5IGhhdmUgZGlmZmVyZW50IGV4cGFuc2lvbnMgYXMgdW5kZXJseWluZyBjb2RlIHN5c3RlbXMgYW5kL29yIHZhbHVlIHNldHMgZXZvbHZlLiAgVGhlIGludGVycHJldGF0aW9uIG9mIGxvY2tlZERhdGUgaXMgb2Z0ZW4gZGVwZW5kZW50IG9uIHRoZSBjb250ZXh0IC0gZS5nLiBhIFNOT01FRCBDVCBkZXJpdmVkIHZhbHVlIHNldCB3aXRoIGEgbG9ja2VkRGF0ZSB3aWxsIGhhdmUgYSBkaWZmZXJlbnQgZXhwYW5zaW9uIGluIFVTQSB0aGFuIGluIFVLLiAgSWYgYSB2YWx1ZSBzZXQgc3BlY2lmaWVzIGEgdmVyc2lvbiBmb3IgaW5jbHVkZSBhbmQgZXhjbHVkZSBzdGF0ZW1lbnRzLCBhbmQgYWxzbyBzcGVjaWZpZXMgYSBsb2NrZWQgZGF0ZSwgdGhlIHNwZWNpZmllZCB2ZXJzaW9ucyBuZWVkIHRvIGJlIGF2YWlsYWJsZSB0aGF0IGRhdGUsIG9yIHRoZSB2YWx1ZSBzZXQgd2lsbCBub3QgYmUgdXNhYmxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2NrZWREYXRlPzogZmhpci5GaGlyRGF0ZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IGluIHRoZSBGSElSIHRlcm1pbm9sb2d5IGZyYW1ld29yaywgXCJkZXByZWNhdGVkXCIgZG9lcyBub3QgbWVhbiBpbmFjdGl2ZSwgYnV0IGluIHNvbWUgY29kZSBzeXN0ZW1zLCBlLmcuIExPSU5DLCBcImRlcHJlY2F0ZWRcIiBkb2VzIG1lYW4gaW5hY3RpdmUuIENvZGUgc3lzdGVtcyBzaG91bGQgZGVmaW5lIHdoYXQgY29kZXMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgaW5hY3RpdmUuIElmIHRoaXMgaXMgbm90IGNsZWFybHkgZGVmaW5lZCAoaW5jbHVkaW5nIGluIHRoZSBGSElSIGNvZGUgc3lzdGVtIHJlc291cmNlKSwgdGhlbiBhbGwgY29kZXMgYXJlIGFzc3VtZWQgdG8gYmUgYWN0aXZlLlxyXG4gICAqIFRoZSBWYWx1ZSBTZXQgRGVmaW5pdGlvbiBzcGVjaWZpY2F0aW9uIGRlZmluZXMgYW4gQWN0aXZlT25seSBlbGVtZW50LCB3aGljaCBpcyB0aGUgcmV2ZXJzZSBvZiB0aGlzIGVsZW1lbnQgZS5nLiAoVmFsdWVTZXQuY29tcG9zZS5pbmFjdGl2ZT1GQUxTRSkgaXMgdGhlIHNhbWUgYXMgKFZTRC5BY3RpdmVPbmx5PVRSVUUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmFjdGl2ZT86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbCB0aGUgY29uZGl0aW9ucyBpbiBhbiBpbmNsdWRlIG11c3QgYmUgdHJ1ZS4gSWYgYSBzeXN0ZW0gaXMgbGlzdGVkLCBhbGwgdGhlIGNvZGVzIGZyb20gdGhlIHN5c3RlbSBhcmUgbGlzdGVkLiBJZiBvbmUgb3IgbW9yZSBmaWx0ZXJzIGFyZSBsaXN0ZWQsIGFsbCBvZiB0aGUgZmlsdGVycyBtdXN0IGFwcGx5LiBJZiBvbmUgb3IgbW9yZSB2YWx1ZSBzZXRzIGFyZSBsaXN0ZWQsIHRoZSBjb2RlcyBtdXN0IGJlIGluIGFsbCB0aGUgdmFsdWUgc2V0cy4gRS5nLiBlYWNoIGluY2x1ZGUgaXMgJ2luY2x1ZGUgYWxsIHRoZSBjb2RlcyB0aGF0IG1lZXQgYWxsIHRoZXNlIGNvbmRpdGlvbnMnLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmNsdWRlOiBmaGlyLlZhbHVlU2V0Q29tcG9zZUluY2x1ZGVbXTtcclxuICAvKipcclxuICAgKiBVc3VhbGx5IHRoaXMgaXMgdXNlZCB0byBzZWxlY3RpdmVseSBleGNsdWRlIGNvZGVzIHRoYXQgd2VyZSBpbmNsdWRlZCBieSBzdWJzdW1wdGlvbiBpbiB0aGUgaW5jbHVzaW9ucy4gQW55IGRpc3BsYXkgbmFtZXMgc3BlY2lmaWVkIGZvciB0aGUgY29kZXMgYXJlIGlnbm9yZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGV4Y2x1ZGU6IGZoaXIuVmFsdWVTZXRDb21wb3NlSW5jbHVkZVtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFZhbHVlU2V0Q29tcG9zZSAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFZhbHVlU2V0Q29tcG9zZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydsb2NrZWREYXRlJ10pIHsgdGhpcy5sb2NrZWREYXRlID0gbmV3IGZoaXIuRmhpckRhdGUoe3ZhbHVlOiBzb3VyY2UubG9ja2VkRGF0ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydpbmFjdGl2ZSddKSB7IHRoaXMuaW5hY3RpdmUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5pbmFjdGl2ZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydpbmNsdWRlJ10pIHsgdGhpcy5pbmNsdWRlID0gc291cmNlLmluY2x1ZGUubWFwKCh4KSA9PiBuZXcgZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaW5jbHVkZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydleGNsdWRlJ10pIHsgdGhpcy5leGNsdWRlID0gc291cmNlLmV4Y2x1ZGUubWFwKCh4KSA9PiBuZXcgZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZXhjbHVkZSA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcImxvY2tlZERhdGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5sb2NrZWREYXRlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImluYWN0aXZlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuaW5hY3RpdmUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1snaW5jbHVkZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBpbmNsdWRlOmZoaXIuVmFsdWVTZXRDb21wb3NlSW5jbHVkZVtdIGZoaXI6IFZhbHVlU2V0LmNvbXBvc2UuaW5jbHVkZTppbmNsdWRlJyB9KTtcclxuICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5pbmNsdWRlKSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnc3RydWN0dXJlJywgZGlhZ25vc3RpY3M6ICdGb3VuZCBzY2FsYXIgaW4gYXJyYXkgcHJvcGVydHkgaW5jbHVkZTpmaGlyLlZhbHVlU2V0Q29tcG9zZUluY2x1ZGVbXSBmaGlyOiBWYWx1ZVNldC5jb21wb3NlLmluY2x1ZGU6aW5jbHVkZScgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaW5jbHVkZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGluY2x1ZGU6Zmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlW10gZmhpcjogVmFsdWVTZXQuY29tcG9zZS5pbmNsdWRlOmluY2x1ZGUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJpbmNsdWRlXCJdKSB7IHRoaXMuaW5jbHVkZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiZXhjbHVkZVwiXSkgeyB0aGlzLmV4Y2x1ZGUuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVmFsdWVTZXRFeHBhbnNpb25QYXJhbWV0ZXIgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWVTZXRFeHBhbnNpb25QYXJhbWV0ZXJBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZXMgYXJlIGFzc2lnbmVkIGF0IHRoZSBkaXNjcmV0aW9uIG9mIHRoZSBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgbmFtZTogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXHJcbiAgICovXHJcbiAgdmFsdWU/OiBmaGlyLkZoaXJTdHJpbmd8Zmhpci5GaGlyQm9vbGVhbnxmaGlyLkZoaXJJbnRlZ2VyfGZoaXIuRmhpckRlY2ltYWx8Zmhpci5GaGlyVXJpfGZoaXIuRmhpckNvZGV8Zmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxyXG4gICAqL1xyXG4gIHZhbHVlU3RyaW5nPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXHJcbiAgICovXHJcbiAgdmFsdWVCb29sZWFuPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlci5cclxuICAgKi9cclxuICB2YWx1ZUludGVnZXI/OiBmaGlyLkZoaXJJbnRlZ2VyfG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXHJcbiAgICovXHJcbiAgdmFsdWVEZWNpbWFsPzogZmhpci5GaGlyRGVjaW1hbHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxyXG4gICAqL1xyXG4gIHZhbHVlVXJpPzogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXHJcbiAgICovXHJcbiAgdmFsdWVDb2RlPzogZmhpci5GaGlyQ29kZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxyXG4gICAqL1xyXG4gIHZhbHVlRGF0ZVRpbWU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHNlcnZlciBkZWNpZGVzIHdoaWNoIHBhcmFtZXRlcnMgdG8gaW5jbHVkZSBoZXJlLCBidXQgYXQgYSBtaW5pbXVtLCB0aGUgbGlzdCBTSE9VTEQgaW5jbHVkZSBhbGwgb2YgdGhlIHBhcmFtZXRlcnMgdGhhdCBhZmZlY3QgdGhlICRleHBhbmQgb3BlcmF0aW9uLiBJZiB0aGUgZXhwYW5zaW9uIHdpbGwgYmUgcGVyc2lzdGVkIGFsbCBvZiB0aGVzZSBwYXJhbWV0ZXJzIFNIQUxMIGJlIGluY2x1ZGVkLiBJZiB0aGUgY29kZVN5c3RlbSBvbiB0aGUgc2VydmVyIGhhcyBhIHNwZWNpZmllZCB2ZXJzaW9uIHRoZW4gdGhpcyB2ZXJzaW9uIFNIQUxMIGJlIHByb3ZpZGVkIGFzIGEgcGFyYW1ldGVyIGluIHRoZSBleHBhbnNpb24gKG5vdGUgdGhhdCBub3QgYWxsIGNvZGUgc3lzdGVtcyBoYXZlIGEgdmVyc2lvbikuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmFsdWVTZXRFeHBhbnNpb25QYXJhbWV0ZXIgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdWYWx1ZVNldEV4cGFuc2lvblBhcmFtZXRlcic7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWVzIGFyZSBhc3NpZ25lZCBhdCB0aGUgZGlzY3JldGlvbiBvZiB0aGUgc2VydmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lOiBmaGlyLkZoaXJTdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBwdWJsaWMgdmFsdWU/OiAoZmhpci5GaGlyU3RyaW5nfGZoaXIuRmhpckJvb2xlYW58Zmhpci5GaGlySW50ZWdlcnxmaGlyLkZoaXJEZWNpbWFsfGZoaXIuRmhpclVyaXxmaGlyLkZoaXJDb2RlfGZoaXIuRmhpckRhdGVUaW1lKXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBWYWx1ZVNldC5leHBhbnNpb24ucGFyYW1ldGVyLnZhbHVlW3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX3ZhbHVlSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVmFsdWVTZXRFeHBhbnNpb25QYXJhbWV0ZXIgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxWYWx1ZVNldEV4cGFuc2lvblBhcmFtZXRlckFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5uYW1lfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm5hbWUgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZSddKSB7IHRoaXMudmFsdWUgPSBzb3VyY2UudmFsdWU7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVTdHJpbmcnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS52YWx1ZVN0cmluZ30pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlQm9vbGVhbiddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS52YWx1ZUJvb2xlYW59KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWyd2YWx1ZUludGVnZXInXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpckludGVnZXIoe3ZhbHVlOiBzb3VyY2UudmFsdWVJbnRlZ2VyfSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVEZWNpbWFsJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJEZWNpbWFsKHt2YWx1ZTogc291cmNlLnZhbHVlRGVjaW1hbH0pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlVXJpJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2UudmFsdWVVcml9KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWyd2YWx1ZUNvZGUnXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRmhpckNvZGUoe3ZhbHVlOiBzb3VyY2UudmFsdWVDb2RlfSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVEYXRlVGltZSddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UudmFsdWVEYXRlVGltZX0pOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ25hbWUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgbmFtZTpmaGlyLkZoaXJTdHJpbmcgZmhpcjogVmFsdWVTZXQuZXhwYW5zaW9uLnBhcmFtZXRlci5uYW1lOnN0cmluZycgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcIm5hbWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5uYW1lLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgVmFsdWVTZXRFeHBhbnNpb25Db250YWlucyB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBWYWx1ZVNldEV4cGFuc2lvbkNvbnRhaW5zQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogQW4gYWJzb2x1dGUgVVJJIHdoaWNoIGlzIHRoZSBjb2RlIHN5c3RlbSBpbiB3aGljaCB0aGUgY29kZSBmb3IgdGhpcyBpdGVtIGluIHRoZSBleHBhbnNpb24gaXMgZGVmaW5lZC5cclxuICAgKi9cclxuICBzeXN0ZW0/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIHNob3VsZCBub3QgYmUgdW5kZXJzdG9vZCB0byBleGNsdWRlIGl0cyB1c2UgZm9yIHNlYXJjaGluZyAoZS5nLiBieSBzdWJzdW1wdGlvbiB0ZXN0aW5nKS4gVGhlIGNsaWVudCBzaG91bGQga25vdyB3aGV0aGVyIGl0IGlzIGFwcHJvcHJpYXRlIGZvciB0aGUgdXNlciB0byBzZWxlY3QgYW4gYWJzdHJhY3QgY29kZSBvciBub3QuXHJcbiAgICovXHJcbiAgYWJzdHJhY3Q/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgc2hvdWxkIG9ubHkgaGF2ZSBhIHZhbHVlIGlmIHRoZSBjb25jZXB0IGlzIGluYWN0aXZlLlxyXG4gICAqL1xyXG4gIGluYWN0aXZlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZXhhY3QgdmFsdWUgb2YgdGhlIHZlcnNpb24gc3RyaW5nIGlzIHNwZWNpZmllZCBieSB0aGUgc3lzdGVtIGZyb20gd2hpY2ggdGhlIGNvZGUgaXMgZGVyaXZlZC5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvZGUgZm9yIHRoaXMgaXRlbSBpbiB0aGUgZXhwYW5zaW9uIGhpZXJhcmNoeS4gSWYgdGhpcyBjb2RlIGlzIG1pc3NpbmcgdGhlIGVudHJ5IGluIHRoZSBoaWVyYXJjaHkgaXMgYSBwbGFjZSBob2xkZXIgKGFic3RyYWN0KSBhbmQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsaWQgY29kZSBpbiB0aGUgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIGNvZGU/OiBmaGlyLkZoaXJDb2RlfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlY29tbWVuZGVkIGRpc3BsYXkgZm9yIHRoaXMgaXRlbSBpbiB0aGUgZXhwYW5zaW9uLlxyXG4gICAqL1xyXG4gIGRpc3BsYXk/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGVzaWduYXRpb25zIHByb3ZpZGVkIG11c3QgYmUgYmFzZWQgb24gdGhlIHZhbHVlIHNldCBhbmQgY29kZSBzeXN0ZW0gZGVmaW5pdGlvbnMuXHJcbiAgICovXHJcbiAgZGVzaWduYXRpb24/OiBmaGlyLlZhbHVlU2V0Q29tcG9zZUluY2x1ZGVDb25jZXB0RGVzaWduYXRpb25BcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBleHBhbnNpb24gdXNlcyB0aGlzIGVsZW1lbnQsIHRoZXJlIGlzICBubyBpbXBsaWNhdGlvbiBhYm91dCB0aGUgbG9naWNhbCByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGVtLCBhbmQgdGhlICBzdHJ1Y3R1cmUgY2Fubm90IGJlIHVzZWQgZm9yIGxvZ2ljYWwgaW5mZXJlbmNpbmcuIFRoZSBzdHJ1Y3R1cmUgIGV4aXN0cyB0byBwcm92aWRlIG5hdmlnYXRpb25hbCBhc3Npc3RhbmNlIGZvciBoZWxwaW5nIGh1bWFuIHVzZXJzIHRvICBsb2NhdGUgY29kZXMgaW4gdGhlIGV4cGFuc2lvbi5cclxuICAgKi9cclxuICBjb250YWlucz86IGZoaXIuVmFsdWVTZXRFeHBhbnNpb25Db250YWluc0FyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgY29kZXMgdGhhdCBhcmUgY29udGFpbmVkIGluIHRoZSB2YWx1ZSBzZXQgZXhwYW5zaW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbHVlU2V0RXhwYW5zaW9uQ29udGFpbnMgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdWYWx1ZVNldEV4cGFuc2lvbkNvbnRhaW5zJztcclxuICAvKipcclxuICAgKiBBbiBhYnNvbHV0ZSBVUkkgd2hpY2ggaXMgdGhlIGNvZGUgc3lzdGVtIGluIHdoaWNoIHRoZSBjb2RlIGZvciB0aGlzIGl0ZW0gaW4gdGhlIGV4cGFuc2lvbiBpcyBkZWZpbmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzeXN0ZW0/OiBmaGlyLkZoaXJVcml8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgc2hvdWxkIG5vdCBiZSB1bmRlcnN0b29kIHRvIGV4Y2x1ZGUgaXRzIHVzZSBmb3Igc2VhcmNoaW5nIChlLmcuIGJ5IHN1YnN1bXB0aW9uIHRlc3RpbmcpLiBUaGUgY2xpZW50IHNob3VsZCBrbm93IHdoZXRoZXIgaXQgaXMgYXBwcm9wcmlhdGUgZm9yIHRoZSB1c2VyIHRvIHNlbGVjdCBhbiBhYnN0cmFjdCBjb2RlIG9yIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3Q/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIHNob3VsZCBvbmx5IGhhdmUgYSB2YWx1ZSBpZiB0aGUgY29uY2VwdCBpcyBpbmFjdGl2ZS5cclxuICAgKi9cclxuICBwdWJsaWMgaW5hY3RpdmU/OiBmaGlyLkZoaXJCb29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZXhhY3QgdmFsdWUgb2YgdGhlIHZlcnNpb24gc3RyaW5nIGlzIHNwZWNpZmllZCBieSB0aGUgc3lzdGVtIGZyb20gd2hpY2ggdGhlIGNvZGUgaXMgZGVyaXZlZC5cclxuICAgKi9cclxuICBwdWJsaWMgdmVyc2lvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvZGUgZm9yIHRoaXMgaXRlbSBpbiB0aGUgZXhwYW5zaW9uIGhpZXJhcmNoeS4gSWYgdGhpcyBjb2RlIGlzIG1pc3NpbmcgdGhlIGVudHJ5IGluIHRoZSBoaWVyYXJjaHkgaXMgYSBwbGFjZSBob2xkZXIgKGFic3RyYWN0KSBhbmQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsaWQgY29kZSBpbiB0aGUgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2RlPzogZmhpci5GaGlyQ29kZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlY29tbWVuZGVkIGRpc3BsYXkgZm9yIHRoaXMgaXRlbSBpbiB0aGUgZXhwYW5zaW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwbGF5PzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGVzaWduYXRpb25zIHByb3ZpZGVkIG11c3QgYmUgYmFzZWQgb24gdGhlIHZhbHVlIHNldCBhbmQgY29kZSBzeXN0ZW0gZGVmaW5pdGlvbnMuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2lnbmF0aW9uOiBmaGlyLlZhbHVlU2V0Q29tcG9zZUluY2x1ZGVDb25jZXB0RGVzaWduYXRpb25bXTtcclxuICAvKipcclxuICAgKiBJZiB0aGUgZXhwYW5zaW9uIHVzZXMgdGhpcyBlbGVtZW50LCB0aGVyZSBpcyAgbm8gaW1wbGljYXRpb24gYWJvdXQgdGhlIGxvZ2ljYWwgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlbSwgYW5kIHRoZSAgc3RydWN0dXJlIGNhbm5vdCBiZSB1c2VkIGZvciBsb2dpY2FsIGluZmVyZW5jaW5nLiBUaGUgc3RydWN0dXJlICBleGlzdHMgdG8gcHJvdmlkZSBuYXZpZ2F0aW9uYWwgYXNzaXN0YW5jZSBmb3IgaGVscGluZyBodW1hbiB1c2VycyB0byAgbG9jYXRlIGNvZGVzIGluIHRoZSBleHBhbnNpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhaW5zOiBmaGlyLlZhbHVlU2V0RXhwYW5zaW9uQ29udGFpbnNbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBWYWx1ZVNldEV4cGFuc2lvbkNvbnRhaW5zIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8VmFsdWVTZXRFeHBhbnNpb25Db250YWluc0FyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydzeXN0ZW0nXSkgeyB0aGlzLnN5c3RlbSA9IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiBzb3VyY2Uuc3lzdGVtfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2Fic3RyYWN0J10pIHsgdGhpcy5hYnN0cmFjdCA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmFic3RyYWN0fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2luYWN0aXZlJ10pIHsgdGhpcy5pbmFjdGl2ZSA9IG5ldyBmaGlyLkZoaXJCb29sZWFuKHt2YWx1ZTogc291cmNlLmluYWN0aXZlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3ZlcnNpb24nXSkgeyB0aGlzLnZlcnNpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnZlcnNpb259KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29kZSddKSB7IHRoaXMuY29kZSA9IG5ldyBmaGlyLkZoaXJDb2RlKHt2YWx1ZTogc291cmNlLmNvZGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGlzcGxheSddKSB7IHRoaXMuZGlzcGxheSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuZGlzcGxheX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXNpZ25hdGlvbiddKSB7IHRoaXMuZGVzaWduYXRpb24gPSBzb3VyY2UuZGVzaWduYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5WYWx1ZVNldENvbXBvc2VJbmNsdWRlQ29uY2VwdERlc2lnbmF0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZGVzaWduYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGFpbnMnXSkgeyB0aGlzLmNvbnRhaW5zID0gc291cmNlLmNvbnRhaW5zLm1hcCgoeCkgPT4gbmV3IGZoaXIuVmFsdWVTZXRFeHBhbnNpb25Db250YWlucyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRhaW5zID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1wic3lzdGVtXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3lzdGVtLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImFic3RyYWN0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuYWJzdHJhY3QuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiaW5hY3RpdmVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5pbmFjdGl2ZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ2ZXJzaW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudmVyc2lvbi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb2RlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29kZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkaXNwbGF5XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGlzcGxheS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkZXNpZ25hdGlvblwiXSkgeyB0aGlzLmRlc2lnbmF0aW9uLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJjb250YWluc1wiXSkgeyB0aGlzLmNvbnRhaW5zLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFZhbHVlU2V0RXhwYW5zaW9uIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFZhbHVlU2V0RXhwYW5zaW9uQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVHlwaWNhbGx5LCB0aGlzIHVyaSBpcyBhIFVVSUQgKGUuZy4gdXJuOnV1aWQ6ODIzMGZmMjAtYzk3YS00MTY3LWE1OWQtZGMyY2I5ZGYxNmRkKS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBTSE9VTEQgYmUgYSBmdWxseSBwb3B1bGF0ZWQgaW5zdGFudCwgYnV0IGluIHNvbWUgY2lyY3Vtc3RhbmNlcywgdmFsdWUgc2V0cyBhcmUgZXhwYW5kZWQgYnkgaGFuZCwgYW5kIHRoZSBleHBhbnNpb24gaXMgcHVibGlzaGVkIHdpdGhvdXQgdGhhdCBwcmVjaXNpb24uXHJcbiAgICovXHJcbiAgdGltZXN0YW1wOiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBhZ2luZyBvbmx5IGFwcGxpZXMgdG8gZmxhdCBleHBhbnNpb25zLlxyXG4gICAqL1xyXG4gIHRvdGFsPzogZmhpci5GaGlySW50ZWdlcnxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBhZ2luZyBvbmx5IGFwcGxpZXMgdG8gZmxhdCBleHBhbnNpb25zLiBJZiBhIGZpbHRlciBpcyBhcHBsaWVkLCB0aGUgY291bnQgaXMgdGhlIG51bWJlciBvZiBjb25jZXB0cyB0aGF0IG1hdGNoZWQgdGhlIGZpbHRlciwgbm90IHRoZSBudW1iZXIgb2YgY29uY2VwdHMgaW4gYW4gdW5maWx0ZXJlZCB2aWV3IG9mIHRoZSBleHBhbnNpb24uXHJcbiAgICovXHJcbiAgb2Zmc2V0PzogZmhpci5GaGlySW50ZWdlcnxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZXJ2ZXIgZGVjaWRlcyB3aGljaCBwYXJhbWV0ZXJzIHRvIGluY2x1ZGUgaGVyZSwgYnV0IGF0IGEgbWluaW11bSwgdGhlIGxpc3QgU0hPVUxEIGluY2x1ZGUgYWxsIG9mIHRoZSBwYXJhbWV0ZXJzIHRoYXQgYWZmZWN0IHRoZSAkZXhwYW5kIG9wZXJhdGlvbi4gSWYgdGhlIGV4cGFuc2lvbiB3aWxsIGJlIHBlcnNpc3RlZCBhbGwgb2YgdGhlc2UgcGFyYW1ldGVycyBTSEFMTCBiZSBpbmNsdWRlZC4gSWYgdGhlIGNvZGVTeXN0ZW0gb24gdGhlIHNlcnZlciBoYXMgYSBzcGVjaWZpZWQgdmVyc2lvbiB0aGVuIHRoaXMgdmVyc2lvbiBTSEFMTCBiZSBwcm92aWRlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGUgZXhwYW5zaW9uIChub3RlIHRoYXQgbm90IGFsbCBjb2RlIHN5c3RlbXMgaGF2ZSBhIHZlcnNpb24pLlxyXG4gICAqL1xyXG4gIHBhcmFtZXRlcj86IGZoaXIuVmFsdWVTZXRFeHBhbnNpb25QYXJhbWV0ZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb2RlcyB0aGF0IGFyZSBjb250YWluZWQgaW4gdGhlIHZhbHVlIHNldCBleHBhbnNpb24uXHJcbiAgICovXHJcbiAgY29udGFpbnM/OiBmaGlyLlZhbHVlU2V0RXhwYW5zaW9uQ29udGFpbnNBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogRXhwYW5zaW9uIGlzIHBlcmZvcm1lZCB0byBwcm9kdWNlIGEgY29sbGVjdGlvbiBvZiBjb2RlcyB0aGF0IGFyZSByZWFkeSB0byB1c2UgZm9yIGRhdGEgZW50cnkgb3IgdmFsaWRhdGlvbi4gVmFsdWUgc2V0IGV4cGFuc2lvbnMgYXJlIGFsd2F5cyBjb25zaWRlcmVkIHRvIGJlIHN0YXRlbGVzcyAtIHRoZXkgYXJlIGEgcmVjb3JkIG9mIHRoZSBzZXQgb2YgY29kZXMgaW4gdGhlIHZhbHVlIHNldCBhdCBhIHBvaW50IGluIHRpbWUgdW5kZXIgYSBnaXZlbiBzZXQgb2YgY29uZGl0aW9ucywgYW5kIGFyZSBub3Qgc3ViamVjdCB0byBvbmdvaW5nIG1haW50ZW5hbmNlLlxyXG4gKiBFeHBhbnNpb24ucGFyYW1ldGVyIGlzICBhIHNpbXBsaWZpZWQgbGlzdCBvZiBwYXJhbWV0ZXJzIC0gYSBzdWJzZXQgb2YgdGhlIGZlYXR1cmVzIG9mIHRoZSBbUGFyYW1ldGVyc10ocGFyYW1ldGVycy5odG1sKSByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZVNldEV4cGFuc2lvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1ZhbHVlU2V0RXhwYW5zaW9uJztcclxuICAvKipcclxuICAgKiBUeXBpY2FsbHksIHRoaXMgdXJpIGlzIGEgVVVJRCAoZS5nLiB1cm46dXVpZDo4MjMwZmYyMC1jOTdhLTQxNjctYTU5ZC1kYzJjYjlkZjE2ZGQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyPzogZmhpci5GaGlyVXJpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIFNIT1VMRCBiZSBhIGZ1bGx5IHBvcHVsYXRlZCBpbnN0YW50LCBidXQgaW4gc29tZSBjaXJjdW1zdGFuY2VzLCB2YWx1ZSBzZXRzIGFyZSBleHBhbmRlZCBieSBoYW5kLCBhbmQgdGhlIGV4cGFuc2lvbiBpcyBwdWJsaXNoZWQgd2l0aG91dCB0aGF0IHByZWNpc2lvbi5cclxuICAgKi9cclxuICBwdWJsaWMgdGltZXN0YW1wOiBmaGlyLkZoaXJEYXRlVGltZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFBhZ2luZyBvbmx5IGFwcGxpZXMgdG8gZmxhdCBleHBhbnNpb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b3RhbD86IGZoaXIuRmhpckludGVnZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFBhZ2luZyBvbmx5IGFwcGxpZXMgdG8gZmxhdCBleHBhbnNpb25zLiBJZiBhIGZpbHRlciBpcyBhcHBsaWVkLCB0aGUgY291bnQgaXMgdGhlIG51bWJlciBvZiBjb25jZXB0cyB0aGF0IG1hdGNoZWQgdGhlIGZpbHRlciwgbm90IHRoZSBudW1iZXIgb2YgY29uY2VwdHMgaW4gYW4gdW5maWx0ZXJlZCB2aWV3IG9mIHRoZSBleHBhbnNpb24uXHJcbiAgICovXHJcbiAgcHVibGljIG9mZnNldD86IGZoaXIuRmhpckludGVnZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzZXJ2ZXIgZGVjaWRlcyB3aGljaCBwYXJhbWV0ZXJzIHRvIGluY2x1ZGUgaGVyZSwgYnV0IGF0IGEgbWluaW11bSwgdGhlIGxpc3QgU0hPVUxEIGluY2x1ZGUgYWxsIG9mIHRoZSBwYXJhbWV0ZXJzIHRoYXQgYWZmZWN0IHRoZSAkZXhwYW5kIG9wZXJhdGlvbi4gSWYgdGhlIGV4cGFuc2lvbiB3aWxsIGJlIHBlcnNpc3RlZCBhbGwgb2YgdGhlc2UgcGFyYW1ldGVycyBTSEFMTCBiZSBpbmNsdWRlZC4gSWYgdGhlIGNvZGVTeXN0ZW0gb24gdGhlIHNlcnZlciBoYXMgYSBzcGVjaWZpZWQgdmVyc2lvbiB0aGVuIHRoaXMgdmVyc2lvbiBTSEFMTCBiZSBwcm92aWRlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGUgZXhwYW5zaW9uIChub3RlIHRoYXQgbm90IGFsbCBjb2RlIHN5c3RlbXMgaGF2ZSBhIHZlcnNpb24pLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJhbWV0ZXI6IGZoaXIuVmFsdWVTZXRFeHBhbnNpb25QYXJhbWV0ZXJbXTtcclxuICAvKipcclxuICAgKiBUaGUgY29kZXMgdGhhdCBhcmUgY29udGFpbmVkIGluIHRoZSB2YWx1ZSBzZXQgZXhwYW5zaW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb250YWluczogZmhpci5WYWx1ZVNldEV4cGFuc2lvbkNvbnRhaW5zW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgVmFsdWVTZXRFeHBhbnNpb24gLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxWYWx1ZVNldEV4cGFuc2lvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHNvdXJjZS5pZGVudGlmaWVyfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3RpbWVzdGFtcCddKSB7IHRoaXMudGltZXN0YW1wID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHt2YWx1ZTogc291cmNlLnRpbWVzdGFtcH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50aW1lc3RhbXAgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWyd0b3RhbCddKSB7IHRoaXMudG90YWwgPSBuZXcgZmhpci5GaGlySW50ZWdlcih7dmFsdWU6IHNvdXJjZS50b3RhbH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydvZmZzZXQnXSkgeyB0aGlzLm9mZnNldCA9IG5ldyBmaGlyLkZoaXJJbnRlZ2VyKHt2YWx1ZTogc291cmNlLm9mZnNldH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydwYXJhbWV0ZXInXSkgeyB0aGlzLnBhcmFtZXRlciA9IHNvdXJjZS5wYXJhbWV0ZXIubWFwKCh4KSA9PiBuZXcgZmhpci5WYWx1ZVNldEV4cGFuc2lvblBhcmFtZXRlcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnBhcmFtZXRlciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydjb250YWlucyddKSB7IHRoaXMuY29udGFpbnMgPSBzb3VyY2UuY29udGFpbnMubWFwKCh4KSA9PiBuZXcgZmhpci5WYWx1ZVNldEV4cGFuc2lvbkNvbnRhaW5zKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuY29udGFpbnMgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKHRoaXNbXCJpZGVudGlmaWVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuaWRlbnRpZmllci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKCF0aGlzWyd0aW1lc3RhbXAnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgdGltZXN0YW1wOmZoaXIuRmhpckRhdGVUaW1lIGZoaXI6IFZhbHVlU2V0LmV4cGFuc2lvbi50aW1lc3RhbXA6ZGF0ZVRpbWUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ0aW1lc3RhbXBcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50aW1lc3RhbXAuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1widG90YWxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50b3RhbC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJvZmZzZXRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5vZmZzZXQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicGFyYW1ldGVyXCJdKSB7IHRoaXMucGFyYW1ldGVyLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJjb250YWluc1wiXSkgeyB0aGlzLmNvbnRhaW5zLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFZhbHVlU2V0IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFZhbHVlU2V0QXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiVmFsdWVTZXRcInx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ2FuIGJlIGEgdXJuOnV1aWQ6IG9yIGEgdXJuOm9pZDogYnV0IHJlYWwgaHR0cDogYWRkcmVzc2VzIGFyZSBwcmVmZXJyZWQuICBNdWx0aXBsZSBpbnN0YW5jZXMgbWF5IHNoYXJlIHRoZSBzYW1lIFVSTCBpZiB0aGV5IGhhdmUgYSBkaXN0aW5jdCB2ZXJzaW9uLlxyXG4gICAqIFRoZSBkZXRlcm1pbmF0aW9uIG9mIHdoZW4gdG8gY3JlYXRlIGEgbmV3IHZlcnNpb24gb2YgYSByZXNvdXJjZSAoc2FtZSB1cmwsIG5ldyB2ZXJzaW9uKSB2cy4gZGVmaW5pbmcgYSBuZXcgYXJ0aWZhY3QgaXMgdXAgdG8gdGhlIGF1dGhvci4gIENvbnNpZGVyYXRpb25zIGZvciBtYWtpbmcgdGhpcyBkZWNpc2lvbiBhcmUgZm91bmQgaW4gW1RlY2huaWNhbCBhbmQgQnVzaW5lc3MgVmVyc2lvbnNdKHJlc291cmNlLmh0bWwjdmVyc2lvbnMpLiBcclxuICAgKiBJbiBzb21lIGNhc2VzLCB0aGUgcmVzb3VyY2UgY2FuIG5vIGxvbmdlciBiZSBmb3VuZCBhdCB0aGUgc3RhdGVkIHVybCwgYnV0IHRoZSB1cmwgaXRzZWxmIGNhbm5vdCBjaGFuZ2UuIEltcGxlbWVudGF0aW9ucyBjYW4gdXNlIHRoZSBbbWV0YS5zb3VyY2VdKHJlc291cmNlLmh0bWwjbWV0YSkgZWxlbWVudCB0byBpbmRpY2F0ZSB3aGVyZSB0aGUgY3VycmVudCBtYXN0ZXIgc291cmNlIG9mIHRoZSByZXNvdXJjZSBjYW4gYmUgZm91bmQuXHJcbiAgICovXHJcbiAgdXJsPzogZmhpci5GaGlyVXJpfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVHlwaWNhbGx5LCB0aGlzIGlzIHVzZWQgZm9yIGlkZW50aWZpZXJzIHRoYXQgY2FuIGdvIGluIGFuIEhMNyBWMyBJSSAoaW5zdGFuY2UgaWRlbnRpZmllcikgZGF0YSB0eXBlLCBhbmQgY2FuIHRoZW4gaWRlbnRpZnkgdGhpcyB2YWx1ZSBzZXQgb3V0c2lkZSBvZiBGSElSLCB3aGVyZSBpdCBpcyBub3QgcG9zc2libGUgdG8gdXNlIHRoZSBsb2dpY2FsIFVSSS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGVyZSBtYXkgYmUgZGlmZmVyZW50IHZhbHVlIHNldCBpbnN0YW5jZXMgdGhhdCBoYXZlIHRoZSBzYW1lIGlkZW50aWZpZXIgYnV0IGRpZmZlcmVudCB2ZXJzaW9ucy4gIFRoZSB2ZXJzaW9uIGNhbiBiZSBhcHBlbmRlZCB0byB0aGUgdXJsIGluIGEgcmVmZXJlbmNlIHRvIGFsbG93IGEgcmVmZXJlbmNlIHRvIGEgcGFydGljdWxhciBidXNpbmVzcyB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSBzZXQgd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LkEgbmFtZSBzaG91bGQgYmUgcHJvdmlkZWQgdW5sZXNzIHRoZSB2YWx1ZSBzZXQgaXMgYSBjb250YWluZWQgcmVzb3VyY2UgKGUuZy4gYW4gYW5vbnltb3VzIHZhbHVlIHNldCBpbiBhIHByb2ZpbGUpLiBNb3N0IHJlZ2lzdHJpZXMgd2lsbCByZXF1aXJlIGEgbmFtZS5cclxuICAgKi9cclxuICBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBuYW1lIGRvZXMgbm90IG5lZWQgdG8gYmUgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5IGFuZCBtYXkgY29udGFpbiBwdW5jdHVhdGlvbiwgd2hpdGUtc3BhY2UsIGV0Yy5cclxuICAgKi9cclxuICB0aXRsZT86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2YgdmFsdWUgc2V0cyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuU2VlIGFsc28gdGhlIFt2YWx1ZXNldC13b3JrZmxvd1N0YXR1c10oZXh0ZW5zaW9uLXZhbHVlc2V0LXdvcmtmbG93c3RhdHVzLmh0bWwpIGV4dGVuc2lvbiBmb3IgYWRkaXRpb25hbCBzdGF0dXMgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgZWRpdG9yaWFsIHByb2Nlc3MuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGU+fHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiB2YWx1ZSBzZXRzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBleHBlcmltZW50YWw/OiBmaGlyLkZoaXJCb29sZWFufGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5vdGUgdGhhdCB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgcmVzb3VyY2UgbGFzdC1tb2RpZmllZC1kYXRlLCBzaW5jZSB0aGUgcmVzb3VyY2UgbWF5IGJlIGEgc2Vjb25kYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2YWx1ZSBzZXQuIEFkZGl0aW9uYWwgc3BlY2lmaWMgZGF0ZXMgbWF5IGJlIGFkZGVkIGFzIGV4dGVuc2lvbnMgb3IgYmUgZm91bmQgYnkgY29uc3VsdGluZyBQcm92ZW5hbmNlcyBhc3NvY2lhdGVkIHdpdGggcGFzdCB2ZXJzaW9ucyBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVXN1YWxseSBhbiBvcmdhbml6YXRpb24gYnV0IG1heSBiZSBhbiBpbmRpdmlkdWFsLiBUaGUgcHVibGlzaGVyIChvciBzdGV3YXJkKSBvZiB0aGUgdmFsdWUgc2V0IGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSB2YWx1ZSBzZXQuIFRoaXMgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIGluZGl2aWR1YWwgb3Igb3JnYW5pemF0aW9uIHRoYXQgZGV2ZWxvcGVkIGFuZCBpbml0aWFsbHkgYXV0aG9yZWQgdGhlIGNvbnRlbnQuIFRoZSBwdWJsaXNoZXIgaXMgdGhlIHByaW1hcnkgcG9pbnQgb2YgY29udGFjdCBmb3IgcXVlc3Rpb25zIG9yIGlzc3VlcyB3aXRoIHRoZSB2YWx1ZSBzZXQuIFRoaXMgaXRlbSBTSE9VTEQgYmUgcG9wdWxhdGVkIHVubGVzcyB0aGUgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIGZyb20gY29udGV4dC5cclxuICAgKi9cclxuICBwdWJsaXNoZXI/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXkgYmUgYSB3ZWIgc2l0ZSwgYW4gZW1haWwgYWRkcmVzcywgYSB0ZWxlcGhvbmUgbnVtYmVyLCBldGMuXHJcbiAgICovXHJcbiAgY29udGFjdD86IGZoaXIuQ29udGFjdERldGFpbEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBkZXNjcmlwdGlvbiBjYW4gYmUgdXNlZCB0byBjYXB0dXJlIGRldGFpbHMgc3VjaCBhcyB3aHkgdGhlIHZhbHVlIHNldCB3YXMgYnVpbHQsIGNvbW1lbnRzIGFib3V0IG1pc3VzZSwgaW5zdHJ1Y3Rpb25zIGZvciBjbGluaWNhbCB1c2UgYW5kIGludGVycHJldGF0aW9uLCBsaXRlcmF0dXJlIHJlZmVyZW5jZXMsIGV4YW1wbGVzIGZyb20gdGhlIHBhcGVyIHdvcmxkLCBldGMuIEl0IGlzIG5vdCBhIHJlbmRlcmluZyBvZiB0aGUgdmFsdWUgc2V0IGFzIGNvbnZleWVkIGluIHRoZSAndGV4dCcgZmllbGQgb2YgdGhlIHJlc291cmNlIGl0c2VsZi4gVGhpcyBpdGVtIFNIT1VMRCBiZSBwb3B1bGF0ZWQgdW5sZXNzIHRoZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgZnJvbSBjb250ZXh0IChlLmcuIHRoZSBsYW5ndWFnZSBvZiB0aGUgdmFsdWUgc2V0IGlzIHByZXN1bWVkIHRvIGJlIHRoZSBwcmVkb21pbmFudCBsYW5ndWFnZSBpbiB0aGUgcGxhY2UgdGhlIHZhbHVlIHNldCB3YXMgY3JlYXRlZCkuVGhlIGRlc2NyaXB0aW9uIGlzIG5vdCBpbnRlbmRlZCB0byBkZXNjcmliZSB0aGUgc2VtYW50aWNzIG9mIHRoZSBWYWx1ZSBTZXQgLSB0aGVyZSBhcmUgbm8gaW50cmluc2ljIHNlbWFudGljcyBzZXBhcmF0ZSBmcm9tIHRoZSBjb2RlcyBjb250YWluZWQgaW4gaXRzIGV4cGFuc2lvbi4gVGhlIGRlc2NyaXB0aW9uIHNob3VsZCBjYXB0dXJlIGl0cyBpbnRlbmRlZCB1c2UsIHdoaWNoIGlzIG5lZWRlZCBmb3IgZW5zdXJpbmcgaW50ZWdyaXR5IGZvciBpdHMgdXNlIGluIG1vZGVscyBhY3Jvc3MgZnV0dXJlIGNoYW5nZXMuIEEgZGVzY3JpcHRpb24gc2hvdWxkIGJlIHByb3ZpZGVkIHVubGVzcyB0aGUgdmFsdWUgc2V0IGlzIGEgY29udGFpbmVkIHJlc291cmNlIChlLmcuIGFuIGFub255bW91cyB2YWx1ZSBzZXQgaW4gYSBwcm9maWxlKS4gTW9zdCByZWdpc3RyaWVzIHdpbGwgcmVxdWlyZSBhIGRlc2NyaXB0aW9uLlxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIG11bHRpcGxlIHVzZUNvbnRleHRzIGFyZSBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIGV4cGVjdGF0aW9uIHRoYXQgYWxsIG9yIGFueSBvZiB0aGUgY29udGV4dHMgYXBwbHkuXHJcbiAgICovXHJcbiAgdXNlQ29udGV4dD86IGZoaXIuVXNhZ2VDb250ZXh0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJdCBtYXkgYmUgcG9zc2libGUgZm9yIHRoZSB2YWx1ZSBzZXQgdG8gYmUgdXNlZCBpbiBqdXJpc2RpY3Rpb25zIG90aGVyIHRoYW4gdGhvc2UgZm9yIHdoaWNoIGl0IHdhcyBvcmlnaW5hbGx5IGRlc2lnbmVkIG9yIGludGVuZGVkLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOb3JtYWxseSBpbW11dGFiaWxpdHkgaXMgc2V0IHRvICdmYWxzZScsIHdoaWNoIGlzIHRoZSBkZWZhdWx0IGFzc3VtcHRpb24gaWYgaXQgaXMgbm90IHBvcHVsYXRlZC4gIE5vdGUgdGhhdCB0aGUgaW1wbGljYXRpb24gaXMgdGhhdCBpZiB0aGlzIGlzIHNldCB0byAndHJ1ZScsIHRoZXJlIG1heSBiZSBvbmx5IG9uZSBWYWx1ZVNldCB2ZXJzaW9uIGZvciB0aGlzIGRlZmluaXRpb24uIEltbXV0YWJpbGl0eSB0ZW5kcyB0byBiZSBzZXQgdG8gJ3RydWUnIGluIG9uZSBvZiB0d28gY2FzZXM6IC0gV2hlcmUgdGhlIHZhbHVlIHNldCwgYnkgdGhlIG5hdHVyZSBvZiBpdHMgdXNhZ2UsIGNhbm5vdCBjaGFuZ2UuICBGb3IgZXhhbXBsZSBcIkFsbCBzcGVjaWFsaXphdGlvbnMgb2YgQUNUIGluIEFjdENsYXNzQ29kZVwiIC0gV2hlcmUgdGhlcmUncyBubyBzYWZlIHdheSB0byBleHByZXNzIHRoZSBcIlB1cnBvc2VcIiBzdWNoIHRoYXQgc29tZW9uZSBlbHNlIGNvdWxkIHNhZmVseSBtYWtlIGNoYW5nZXMgdG8gdGhlIHZhbHVlIHNldCBkZWZpbml0aW9uLiBTb3VyY2Ugd29ya2Zsb3cgY29udHJvbCBtdXN0IGd1YXJhbnRlZSB0aGF0IHRoZSBzYW1lIFVSSSBhbHdheXMgeWllbGRzIHRoZSBzYW1lIGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgaW1tdXRhYmxlPzogZmhpci5GaGlyQm9vbGVhbnxib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIHVzYWdlIG9mIHRoZSB2YWx1ZSBzZXQuIEluc3RlYWQsIGl0IHByb3ZpZGVzIHRyYWNlYWJpbGl0eSBvZiAnJ3doeScnIHRoZSByZXNvdXJjZSBpcyBlaXRoZXIgbmVlZGVkIG9yICcnd2h5JycgaXQgaXMgZGVmaW5lZCBhcyBpdCBpcy4gIFRoaXMgbWF5IGJlIHVzZWQgdG8gcG9pbnQgdG8gc291cmNlIG1hdGVyaWFscyBvciBzcGVjaWZpY2F0aW9ucyB0aGF0IGRyb3ZlIHRoZSBzdHJ1Y3R1cmUgb2YgdGhpcyB2YWx1ZSBzZXQuXHJcbiAgICovXHJcbiAgcHVycG9zZT86IGZoaXIuRmhpck1hcmtkb3dufHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogbnVsbEZyZXF1ZW50bHksIHRoZSBjb3B5cmlnaHQgZGlmZmVycyBiZXR3ZWVuIHRoZSB2YWx1ZSBzZXQgYW5kIHRoZSBjb2RlcyB0aGF0IGFyZSBpbmNsdWRlZC4gVGhlIGNvcHlyaWdodCBzdGF0ZW1lbnQgc2hvdWxkIGNsZWFybHkgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHRoZXNlIHdoZW4gcmVxdWlyZWQuXHJcbiAgICovXHJcbiAgY29weXJpZ2h0PzogZmhpci5GaGlyTWFya2Rvd258c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHNldCBvZiBjcml0ZXJpYSB0aGF0IGRlZmluZSB0aGUgY29udGVudHMgb2YgdGhlIHZhbHVlIHNldCBieSBpbmNsdWRpbmcgb3IgZXhjbHVkaW5nIGNvZGVzIHNlbGVjdGVkIGZyb20gdGhlIHNwZWNpZmllZCBjb2RlIHN5c3RlbShzKSB0aGF0IHRoZSB2YWx1ZSBzZXQgZHJhd3MgZnJvbS4gVGhpcyBpcyBhbHNvIGtub3duIGFzIHRoZSBDb250ZW50IExvZ2ljYWwgRGVmaW5pdGlvbiAoQ0xEKS5cclxuICAgKi9cclxuICBjb21wb3NlPzogZmhpci5WYWx1ZVNldENvbXBvc2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHBhbnNpb24gaXMgcGVyZm9ybWVkIHRvIHByb2R1Y2UgYSBjb2xsZWN0aW9uIG9mIGNvZGVzIHRoYXQgYXJlIHJlYWR5IHRvIHVzZSBmb3IgZGF0YSBlbnRyeSBvciB2YWxpZGF0aW9uLiBWYWx1ZSBzZXQgZXhwYW5zaW9ucyBhcmUgYWx3YXlzIGNvbnNpZGVyZWQgdG8gYmUgc3RhdGVsZXNzIC0gdGhleSBhcmUgYSByZWNvcmQgb2YgdGhlIHNldCBvZiBjb2RlcyBpbiB0aGUgdmFsdWUgc2V0IGF0IGEgcG9pbnQgaW4gdGltZSB1bmRlciBhIGdpdmVuIHNldCBvZiBjb25kaXRpb25zLCBhbmQgYXJlIG5vdCBzdWJqZWN0IHRvIG9uZ29pbmcgbWFpbnRlbmFuY2UuXHJcbiAgICogRXhwYW5zaW9uLnBhcmFtZXRlciBpcyAgYSBzaW1wbGlmaWVkIGxpc3Qgb2YgcGFyYW1ldGVycyAtIGEgc3Vic2V0IG9mIHRoZSBmZWF0dXJlcyBvZiB0aGUgW1BhcmFtZXRlcnNdKHBhcmFtZXRlcnMuaHRtbCkgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgZXhwYW5zaW9uPzogZmhpci5WYWx1ZVNldEV4cGFuc2lvbkFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQSBWYWx1ZVNldCByZXNvdXJjZSBpbnN0YW5jZSBzcGVjaWZpZXMgYSBzZXQgb2YgY29kZXMgZHJhd24gZnJvbSBvbmUgb3IgbW9yZSBjb2RlIHN5c3RlbXMsIGludGVuZGVkIGZvciB1c2UgaW4gYSBwYXJ0aWN1bGFyIGNvbnRleHQuIFZhbHVlIHNldHMgbGluayBiZXR3ZWVuIFtDb2RlU3lzdGVtXShjb2Rlc3lzdGVtLmh0bWwpIGRlZmluaXRpb25zIGFuZCB0aGVpciB1c2UgaW4gW2NvZGVkIGVsZW1lbnRzXSh0ZXJtaW5vbG9naWVzLmh0bWwpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbHVlU2V0IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdWYWx1ZVNldCc7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJWYWx1ZVNldFwiO1xyXG4gIC8qKlxyXG4gICAqIENhbiBiZSBhIHVybjp1dWlkOiBvciBhIHVybjpvaWQ6IGJ1dCByZWFsIGh0dHA6IGFkZHJlc3NlcyBhcmUgcHJlZmVycmVkLiAgTXVsdGlwbGUgaW5zdGFuY2VzIG1heSBzaGFyZSB0aGUgc2FtZSBVUkwgaWYgdGhleSBoYXZlIGEgZGlzdGluY3QgdmVyc2lvbi5cclxuICAgKiBUaGUgZGV0ZXJtaW5hdGlvbiBvZiB3aGVuIHRvIGNyZWF0ZSBhIG5ldyB2ZXJzaW9uIG9mIGEgcmVzb3VyY2UgKHNhbWUgdXJsLCBuZXcgdmVyc2lvbikgdnMuIGRlZmluaW5nIGEgbmV3IGFydGlmYWN0IGlzIHVwIHRvIHRoZSBhdXRob3IuICBDb25zaWRlcmF0aW9ucyBmb3IgbWFraW5nIHRoaXMgZGVjaXNpb24gYXJlIGZvdW5kIGluIFtUZWNobmljYWwgYW5kIEJ1c2luZXNzIFZlcnNpb25zXShyZXNvdXJjZS5odG1sI3ZlcnNpb25zKS4gXHJcbiAgICogSW4gc29tZSBjYXNlcywgdGhlIHJlc291cmNlIGNhbiBubyBsb25nZXIgYmUgZm91bmQgYXQgdGhlIHN0YXRlZCB1cmwsIGJ1dCB0aGUgdXJsIGl0c2VsZiBjYW5ub3QgY2hhbmdlLiBJbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSB0aGUgW21ldGEuc291cmNlXShyZXNvdXJjZS5odG1sI21ldGEpIGVsZW1lbnQgdG8gaW5kaWNhdGUgd2hlcmUgdGhlIGN1cnJlbnQgbWFzdGVyIHNvdXJjZSBvZiB0aGUgcmVzb3VyY2UgY2FuIGJlIGZvdW5kLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cmw/OiBmaGlyLkZoaXJVcml8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFR5cGljYWxseSwgdGhpcyBpcyB1c2VkIGZvciBpZGVudGlmaWVycyB0aGF0IGNhbiBnbyBpbiBhbiBITDcgVjMgSUkgKGluc3RhbmNlIGlkZW50aWZpZXIpIGRhdGEgdHlwZSwgYW5kIGNhbiB0aGVuIGlkZW50aWZ5IHRoaXMgdmFsdWUgc2V0IG91dHNpZGUgb2YgRkhJUiwgd2hlcmUgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHVzZSB0aGUgbG9naWNhbCBVUkkuXHJcbiAgICovXHJcbiAgcHVibGljIGlkZW50aWZpZXI6IGZoaXIuSWRlbnRpZmllcltdO1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIG1heSBiZSBkaWZmZXJlbnQgdmFsdWUgc2V0IGluc3RhbmNlcyB0aGF0IGhhdmUgdGhlIHNhbWUgaWRlbnRpZmllciBidXQgZGlmZmVyZW50IHZlcnNpb25zLiAgVGhlIHZlcnNpb24gY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSB1cmwgaW4gYSByZWZlcmVuY2UgdG8gYWxsb3cgYSByZWZlcmVuY2UgdG8gYSBwYXJ0aWN1bGFyIGJ1c2luZXNzIHZlcnNpb24gb2YgdGhlIHZhbHVlIHNldCB3aXRoIHRoZSBmb3JtYXQgW3VybF18W3ZlcnNpb25dLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB2ZXJzaW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBpcyBub3QgZXhwZWN0ZWQgdG8gYmUgZ2xvYmFsbHkgdW5pcXVlLiBUaGUgbmFtZSBzaG91bGQgYmUgYSBzaW1wbGUgYWxwaGFudW1lcmljIHR5cGUgbmFtZSB0byBlbnN1cmUgdGhhdCBpdCBpcyBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkuQSBuYW1lIHNob3VsZCBiZSBwcm92aWRlZCB1bmxlc3MgdGhlIHZhbHVlIHNldCBpcyBhIGNvbnRhaW5lZCByZXNvdXJjZSAoZS5nLiBhbiBhbm9ueW1vdXMgdmFsdWUgc2V0IGluIGEgcHJvZmlsZSkuIE1vc3QgcmVnaXN0cmllcyB3aWxsIHJlcXVpcmUgYSBuYW1lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIG5hbWUgZG9lcyBub3QgbmVlZCB0byBiZSBtYWNoaW5lLXByb2Nlc3NpbmcgZnJpZW5kbHkgYW5kIG1heSBjb250YWluIHB1bmN0dWF0aW9uLCB3aGl0ZS1zcGFjZSwgZXRjLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0aXRsZT86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiB2YWx1ZSBzZXRzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5TZWUgYWxzbyB0aGUgW3ZhbHVlc2V0LXdvcmtmbG93U3RhdHVzXShleHRlbnNpb24tdmFsdWVzZXQtd29ya2Zsb3dzdGF0dXMuaHRtbCkgZXh0ZW5zaW9uIGZvciBhZGRpdGlvbmFsIHN0YXR1cyBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBlZGl0b3JpYWwgcHJvY2Vzcy5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiB2YWx1ZSBzZXRzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgZXhwZXJpbWVudGFsPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSByZXNvdXJjZSBsYXN0LW1vZGlmaWVkLWRhdGUsIHNpbmNlIHRoZSByZXNvdXJjZSBtYXkgYmUgYSBzZWNvbmRhcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlIHNldC4gQWRkaXRpb25hbCBzcGVjaWZpYyBkYXRlcyBtYXkgYmUgYWRkZWQgYXMgZXh0ZW5zaW9ucyBvciBiZSBmb3VuZCBieSBjb25zdWx0aW5nIFByb3ZlbmFuY2VzIGFzc29jaWF0ZWQgd2l0aCBwYXN0IHZlcnNpb25zIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGF0ZT86IGZoaXIuRmhpckRhdGVUaW1lfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc3VhbGx5IGFuIG9yZ2FuaXphdGlvbiBidXQgbWF5IGJlIGFuIGluZGl2aWR1YWwuIFRoZSBwdWJsaXNoZXIgKG9yIHN0ZXdhcmQpIG9mIHRoZSB2YWx1ZSBzZXQgaXMgdGhlIG9yZ2FuaXphdGlvbiBvciBpbmRpdmlkdWFsIHByaW1hcmlseSByZXNwb25zaWJsZSBmb3IgdGhlIG1haW50ZW5hbmNlIGFuZCB1cGtlZXAgb2YgdGhlIHZhbHVlIHNldC4gVGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgaW5kaXZpZHVhbCBvciBvcmdhbml6YXRpb24gdGhhdCBkZXZlbG9wZWQgYW5kIGluaXRpYWxseSBhdXRob3JlZCB0aGUgY29udGVudC4gVGhlIHB1Ymxpc2hlciBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBjb250YWN0IGZvciBxdWVzdGlvbnMgb3IgaXNzdWVzIHdpdGggdGhlIHZhbHVlIHNldC4gVGhpcyBpdGVtIFNIT1VMRCBiZSBwb3B1bGF0ZWQgdW5sZXNzIHRoZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgZnJvbSBjb250ZXh0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdWJsaXNoZXI/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE1heSBiZSBhIHdlYiBzaXRlLCBhbiBlbWFpbCBhZGRyZXNzLCBhIHRlbGVwaG9uZSBudW1iZXIsIGV0Yy5cclxuICAgKi9cclxuICBwdWJsaWMgY29udGFjdDogZmhpci5Db250YWN0RGV0YWlsW107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBkZXNjcmlwdGlvbiBjYW4gYmUgdXNlZCB0byBjYXB0dXJlIGRldGFpbHMgc3VjaCBhcyB3aHkgdGhlIHZhbHVlIHNldCB3YXMgYnVpbHQsIGNvbW1lbnRzIGFib3V0IG1pc3VzZSwgaW5zdHJ1Y3Rpb25zIGZvciBjbGluaWNhbCB1c2UgYW5kIGludGVycHJldGF0aW9uLCBsaXRlcmF0dXJlIHJlZmVyZW5jZXMsIGV4YW1wbGVzIGZyb20gdGhlIHBhcGVyIHdvcmxkLCBldGMuIEl0IGlzIG5vdCBhIHJlbmRlcmluZyBvZiB0aGUgdmFsdWUgc2V0IGFzIGNvbnZleWVkIGluIHRoZSAndGV4dCcgZmllbGQgb2YgdGhlIHJlc291cmNlIGl0c2VsZi4gVGhpcyBpdGVtIFNIT1VMRCBiZSBwb3B1bGF0ZWQgdW5sZXNzIHRoZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgZnJvbSBjb250ZXh0IChlLmcuIHRoZSBsYW5ndWFnZSBvZiB0aGUgdmFsdWUgc2V0IGlzIHByZXN1bWVkIHRvIGJlIHRoZSBwcmVkb21pbmFudCBsYW5ndWFnZSBpbiB0aGUgcGxhY2UgdGhlIHZhbHVlIHNldCB3YXMgY3JlYXRlZCkuVGhlIGRlc2NyaXB0aW9uIGlzIG5vdCBpbnRlbmRlZCB0byBkZXNjcmliZSB0aGUgc2VtYW50aWNzIG9mIHRoZSBWYWx1ZSBTZXQgLSB0aGVyZSBhcmUgbm8gaW50cmluc2ljIHNlbWFudGljcyBzZXBhcmF0ZSBmcm9tIHRoZSBjb2RlcyBjb250YWluZWQgaW4gaXRzIGV4cGFuc2lvbi4gVGhlIGRlc2NyaXB0aW9uIHNob3VsZCBjYXB0dXJlIGl0cyBpbnRlbmRlZCB1c2UsIHdoaWNoIGlzIG5lZWRlZCBmb3IgZW5zdXJpbmcgaW50ZWdyaXR5IGZvciBpdHMgdXNlIGluIG1vZGVscyBhY3Jvc3MgZnV0dXJlIGNoYW5nZXMuIEEgZGVzY3JpcHRpb24gc2hvdWxkIGJlIHByb3ZpZGVkIHVubGVzcyB0aGUgdmFsdWUgc2V0IGlzIGEgY29udGFpbmVkIHJlc291cmNlIChlLmcuIGFuIGFub255bW91cyB2YWx1ZSBzZXQgaW4gYSBwcm9maWxlKS4gTW9zdCByZWdpc3RyaWVzIHdpbGwgcmVxdWlyZSBhIGRlc2NyaXB0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpck1hcmtkb3dufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIG11bHRpcGxlIHVzZUNvbnRleHRzIGFyZSBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIGV4cGVjdGF0aW9uIHRoYXQgYWxsIG9yIGFueSBvZiB0aGUgY29udGV4dHMgYXBwbHkuXHJcbiAgICovXHJcbiAgcHVibGljIHVzZUNvbnRleHQ6IGZoaXIuVXNhZ2VDb250ZXh0W107XHJcbiAgLyoqXHJcbiAgICogSXQgbWF5IGJlIHBvc3NpYmxlIGZvciB0aGUgdmFsdWUgc2V0IHRvIGJlIHVzZWQgaW4ganVyaXNkaWN0aW9ucyBvdGhlciB0aGFuIHRob3NlIGZvciB3aGljaCBpdCB3YXMgb3JpZ2luYWxseSBkZXNpZ25lZCBvciBpbnRlbmRlZC5cclxuICAgKi9cclxuICBwdWJsaWMganVyaXNkaWN0aW9uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIE5vcm1hbGx5IGltbXV0YWJpbGl0eSBpcyBzZXQgdG8gJ2ZhbHNlJywgd2hpY2ggaXMgdGhlIGRlZmF1bHQgYXNzdW1wdGlvbiBpZiBpdCBpcyBub3QgcG9wdWxhdGVkLiAgTm90ZSB0aGF0IHRoZSBpbXBsaWNhdGlvbiBpcyB0aGF0IGlmIHRoaXMgaXMgc2V0IHRvICd0cnVlJywgdGhlcmUgbWF5IGJlIG9ubHkgb25lIFZhbHVlU2V0IHZlcnNpb24gZm9yIHRoaXMgZGVmaW5pdGlvbi4gSW1tdXRhYmlsaXR5IHRlbmRzIHRvIGJlIHNldCB0byAndHJ1ZScgaW4gb25lIG9mIHR3byBjYXNlczogLSBXaGVyZSB0aGUgdmFsdWUgc2V0LCBieSB0aGUgbmF0dXJlIG9mIGl0cyB1c2FnZSwgY2Fubm90IGNoYW5nZS4gIEZvciBleGFtcGxlIFwiQWxsIHNwZWNpYWxpemF0aW9ucyBvZiBBQ1QgaW4gQWN0Q2xhc3NDb2RlXCIgLSBXaGVyZSB0aGVyZSdzIG5vIHNhZmUgd2F5IHRvIGV4cHJlc3MgdGhlIFwiUHVycG9zZVwiIHN1Y2ggdGhhdCBzb21lb25lIGVsc2UgY291bGQgc2FmZWx5IG1ha2UgY2hhbmdlcyB0byB0aGUgdmFsdWUgc2V0IGRlZmluaXRpb24uIFNvdXJjZSB3b3JrZmxvdyBjb250cm9sIG11c3QgZ3VhcmFudGVlIHRoYXQgdGhlIHNhbWUgVVJJIGFsd2F5cyB5aWVsZHMgdGhlIHNhbWUgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgaW1tdXRhYmxlPzogZmhpci5GaGlyQm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGRvZXMgbm90IGRlc2NyaWJlIHRoZSB1c2FnZSBvZiB0aGUgdmFsdWUgc2V0LiBJbnN0ZWFkLCBpdCBwcm92aWRlcyB0cmFjZWFiaWxpdHkgb2YgJyd3aHknJyB0aGUgcmVzb3VyY2UgaXMgZWl0aGVyIG5lZWRlZCBvciAnJ3doeScnIGl0IGlzIGRlZmluZWQgYXMgaXQgaXMuICBUaGlzIG1heSBiZSB1c2VkIHRvIHBvaW50IHRvIHNvdXJjZSBtYXRlcmlhbHMgb3Igc3BlY2lmaWNhdGlvbnMgdGhhdCBkcm92ZSB0aGUgc3RydWN0dXJlIG9mIHRoaXMgdmFsdWUgc2V0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXJwb3NlPzogZmhpci5GaGlyTWFya2Rvd258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIG51bGxGcmVxdWVudGx5LCB0aGUgY29weXJpZ2h0IGRpZmZlcnMgYmV0d2VlbiB0aGUgdmFsdWUgc2V0IGFuZCB0aGUgY29kZXMgdGhhdCBhcmUgaW5jbHVkZWQuIFRoZSBjb3B5cmlnaHQgc3RhdGVtZW50IHNob3VsZCBjbGVhcmx5IGRpZmZlcmVudGlhdGUgYmV0d2VlbiB0aGVzZSB3aGVuIHJlcXVpcmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3B5cmlnaHQ/OiBmaGlyLkZoaXJNYXJrZG93bnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBzZXQgb2YgY3JpdGVyaWEgdGhhdCBkZWZpbmUgdGhlIGNvbnRlbnRzIG9mIHRoZSB2YWx1ZSBzZXQgYnkgaW5jbHVkaW5nIG9yIGV4Y2x1ZGluZyBjb2RlcyBzZWxlY3RlZCBmcm9tIHRoZSBzcGVjaWZpZWQgY29kZSBzeXN0ZW0ocykgdGhhdCB0aGUgdmFsdWUgc2V0IGRyYXdzIGZyb20uIFRoaXMgaXMgYWxzbyBrbm93biBhcyB0aGUgQ29udGVudCBMb2dpY2FsIERlZmluaXRpb24gKENMRCkuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbXBvc2U/OiBmaGlyLlZhbHVlU2V0Q29tcG9zZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXhwYW5zaW9uIGlzIHBlcmZvcm1lZCB0byBwcm9kdWNlIGEgY29sbGVjdGlvbiBvZiBjb2RlcyB0aGF0IGFyZSByZWFkeSB0byB1c2UgZm9yIGRhdGEgZW50cnkgb3IgdmFsaWRhdGlvbi4gVmFsdWUgc2V0IGV4cGFuc2lvbnMgYXJlIGFsd2F5cyBjb25zaWRlcmVkIHRvIGJlIHN0YXRlbGVzcyAtIHRoZXkgYXJlIGEgcmVjb3JkIG9mIHRoZSBzZXQgb2YgY29kZXMgaW4gdGhlIHZhbHVlIHNldCBhdCBhIHBvaW50IGluIHRpbWUgdW5kZXIgYSBnaXZlbiBzZXQgb2YgY29uZGl0aW9ucywgYW5kIGFyZSBub3Qgc3ViamVjdCB0byBvbmdvaW5nIG1haW50ZW5hbmNlLlxyXG4gICAqIEV4cGFuc2lvbi5wYXJhbWV0ZXIgaXMgIGEgc2ltcGxpZmllZCBsaXN0IG9mIHBhcmFtZXRlcnMgLSBhIHN1YnNldCBvZiB0aGUgZmVhdHVyZXMgb2YgdGhlIFtQYXJhbWV0ZXJzXShwYXJhbWV0ZXJzLmh0bWwpIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleHBhbnNpb24/OiBmaGlyLlZhbHVlU2V0RXhwYW5zaW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBWYWx1ZVNldCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFZhbHVlU2V0QXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ1ZhbHVlU2V0JztcclxuICAgIGlmIChzb3VyY2VbJ3VybCddKSB7IHRoaXMudXJsID0gbmV3IGZoaXIuRmhpclVyaSh7dmFsdWU6IHNvdXJjZS51cmx9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnaWRlbnRpZmllciddKSB7IHRoaXMuaWRlbnRpZmllciA9IHNvdXJjZS5pZGVudGlmaWVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuSWRlbnRpZmllcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmlkZW50aWZpZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndmVyc2lvbiddKSB7IHRoaXMudmVyc2lvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudmVyc2lvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWyduYW1lJ10pIHsgdGhpcy5uYW1lID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5uYW1lfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3RpdGxlJ10pIHsgdGhpcy50aXRsZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudGl0bGV9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxQdWJsaWNhdGlvblN0YXR1c0NvZGVUeXBlPih7dmFsdWU6IHNvdXJjZS5zdGF0dXN9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZXhwZXJpbWVudGFsJ10pIHsgdGhpcy5leHBlcmltZW50YWwgPSBuZXcgZmhpci5GaGlyQm9vbGVhbih7dmFsdWU6IHNvdXJjZS5leHBlcmltZW50YWx9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGF0ZSddKSB7IHRoaXMuZGF0ZSA9IG5ldyBmaGlyLkZoaXJEYXRlVGltZSh7dmFsdWU6IHNvdXJjZS5kYXRlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3B1Ymxpc2hlciddKSB7IHRoaXMucHVibGlzaGVyID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5wdWJsaXNoZXJ9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29udGFjdCddKSB7IHRoaXMuY29udGFjdCA9IHNvdXJjZS5jb250YWN0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29udGFjdERldGFpbCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvbnRhY3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpck1hcmtkb3duKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3VzZUNvbnRleHQnXSkgeyB0aGlzLnVzZUNvbnRleHQgPSBzb3VyY2UudXNlQ29udGV4dC5tYXAoKHgpID0+IG5ldyBmaGlyLlVzYWdlQ29udGV4dCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnVzZUNvbnRleHQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnanVyaXNkaWN0aW9uJ10pIHsgdGhpcy5qdXJpc2RpY3Rpb24gPSBzb3VyY2UuanVyaXNkaWN0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuanVyaXNkaWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2ltbXV0YWJsZSddKSB7IHRoaXMuaW1tdXRhYmxlID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuaW1tdXRhYmxlfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3B1cnBvc2UnXSkgeyB0aGlzLnB1cnBvc2UgPSBuZXcgZmhpci5GaGlyTWFya2Rvd24oe3ZhbHVlOiBzb3VyY2UucHVycG9zZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydjb3B5cmlnaHQnXSkgeyB0aGlzLmNvcHlyaWdodCA9IG5ldyBmaGlyLkZoaXJNYXJrZG93bih7dmFsdWU6IHNvdXJjZS5jb3B5cmlnaHR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29tcG9zZSddKSB7IHRoaXMuY29tcG9zZSA9IG5ldyBmaGlyLlZhbHVlU2V0Q29tcG9zZShzb3VyY2UuY29tcG9zZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2V4cGFuc2lvbiddKSB7IHRoaXMuZXhwYW5zaW9uID0gbmV3IGZoaXIuVmFsdWVTZXRFeHBhbnNpb24oc291cmNlLmV4cGFuc2lvbik7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBzdGF0dXMgKFZhbHVlU2V0LnN0YXR1cylcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBzdGF0dXNSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIFB1YmxpY2F0aW9uU3RhdHVzQ29kZXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ3Jlc291cmNlVHlwZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZVR5cGU6XCJWYWx1ZVNldFwiIGZoaXI6IFZhbHVlU2V0LnJlc291cmNlVHlwZTpcIlZhbHVlU2V0XCInIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ1cmxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy51cmwuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiaWRlbnRpZmllclwiXSkgeyB0aGlzLmlkZW50aWZpZXIuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInZlcnNpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy52ZXJzaW9uLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcIm5hbWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5uYW1lLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInRpdGxlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudGl0bGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1snc3RhdHVzJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHN0YXR1czpmaGlyLkZoaXJDb2RlPFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGU+IGZoaXI6IFZhbHVlU2V0LnN0YXR1czpjb2RlJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzWydzdGF0dXMnXSAmJiAoIU9iamVjdC52YWx1ZXMoUHVibGljYXRpb25TdGF0dXNDb2RlcykuaW5jbHVkZXModGhpcy5zdGF0dXMgYXMgYW55KSkpIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ2NvZGUtaW52YWxpZCcsIGRpYWdub3N0aWNzOiAnSW52YWxpZCBjb2RlIHByb3BlcnR5IHN0YXR1czpmaGlyLkZoaXJDb2RlPFB1YmxpY2F0aW9uU3RhdHVzQ29kZVR5cGU+IGZoaXI6IFZhbHVlU2V0LnN0YXR1czpjb2RlIFJlcXVpcmVkIGJpbmRpbmcgdG86IFB1YmxpY2F0aW9uU3RhdHVzJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wic3RhdHVzXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3RhdHVzLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImV4cGVyaW1lbnRhbFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmV4cGVyaW1lbnRhbC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJkYXRlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGF0ZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwdWJsaXNoZXJcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wdWJsaXNoZXIuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiY29udGFjdFwiXSkgeyB0aGlzLmNvbnRhY3QuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImRlc2NyaXB0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGVzY3JpcHRpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1widXNlQ29udGV4dFwiXSkgeyB0aGlzLnVzZUNvbnRleHQuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImp1cmlzZGljdGlvblwiXSkgeyB0aGlzLmp1cmlzZGljdGlvbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiaW1tdXRhYmxlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuaW1tdXRhYmxlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInB1cnBvc2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5wdXJwb3NlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImNvcHlyaWdodFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvcHlyaWdodC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb21wb3NlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY29tcG9zZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJleHBhbnNpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5leHBhbnNpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==