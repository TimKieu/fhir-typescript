// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ValueSet
import * as fhir from '../fhir.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
// @ts-ignore
import { DesignationUseCodings, } from '../fhirValueSets/DesignationUseCodings.js';
// @ts-ignore
import { FilterOperatorCodes } from '../fhirValueSets/FilterOperatorCodes.js';
// @ts-ignore
import { PublicationStatusCodes } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export class ValueSetComposeIncludeConceptDesignation extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeConceptDesignation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['language']) {
            this.language = new fhir.FhirCode({ value: source.language });
        }
        if (source['_language']) {
            if (this.language) {
                this.language.addExtendedProperties(source._language);
            }
            else {
                this.language = new fhir.FhirCode(source._language);
            }
        }
        if (source['use']) {
            this.use = new fhir.Coding(source.use);
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Preferred-bound Value Set for language (ValueSet.compose.include.concept.designation.language)
     */
    static get languagePreferredCodings() {
        return LanguagesCodings;
    }
    /**
     * Extensible-bound Value Set for use (ValueSet.compose.include.concept.designation.use)
     */
    static get useExtensibleCodings() {
        return DesignationUseCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.compose.include.concept.designation';
        }
        if (this["language"]) {
            issues.push(...this.language.doModelValidation(expression + '.language'));
        }
        if (this["use"]) {
            issues.push(...this.use.doModelValidation(expression + '.use'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: ValueSet.compose.include.concept.designation.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeConceptDesignation._fts_dataType = 'ValueSetComposeIncludeConceptDesignation';
/**
 * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
 */
export class ValueSetComposeIncludeConcept extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeConcept - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ValueSetComposeIncludeConceptDesignation(x));
        }
        else {
            this.designation = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.compose.include.concept';
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: ValueSet.compose.include.concept.code:code', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation(expression + '.display'));
        }
        if (this["designation"]) {
            this.designation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.designation[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeConcept._fts_dataType = 'ValueSetComposeIncludeConcept';
/**
 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
 */
export class ValueSetComposeIncludeFilter extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeIncludeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['property']) {
            this.property = new fhir.FhirCode({ value: source.property });
        }
        else {
            this.property = null;
        }
        if (source['_property']) {
            if (this.property) {
                this.property.addExtendedProperties(source._property);
            }
            else {
                this.property = new fhir.FhirCode(source._property);
            }
        }
        if (source['op']) {
            this.op = new fhir.FhirCode({ value: source.op });
        }
        else {
            this.op = null;
        }
        if (source['_op']) {
            if (this.op) {
                this.op.addExtendedProperties(source._op);
            }
            else {
                this.op = new fhir.FhirCode(source._op);
            }
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Required-bound Value Set for op (ValueSet.compose.include.filter.op)
     */
    static get opRequiredCodes() {
        return FilterOperatorCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.compose.include.filter';
        }
        if (!this['property']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property property fhir: ValueSet.compose.include.filter.property:code', expression: [expression] });
        }
        if (this["property"]) {
            issues.push(...this.property.doModelValidation(expression + '.property'));
        }
        if (!this['op']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property op fhir: ValueSet.compose.include.filter.op:code', expression: [expression] });
        }
        if (this['op'] && (!Object.values(FilterOperatorCodes).includes(this.op.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'op (ValueSet.compose.include.filter.op) of type code is missing code for Required binding to: FilterOperator', expression: [expression] });
        }
        if (this["op"]) {
            issues.push(...this.op.doModelValidation(expression + '.op'));
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value fhir: ValueSet.compose.include.filter.value:string', expression: [expression] });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation(expression + '.value'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeIncludeFilter._fts_dataType = 'ValueSetComposeIncludeFilter';
/**
 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
 */
export class ValueSetComposeInclude extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetComposeInclude - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['concept']) {
            this.concept = source.concept.map((x) => new fhir.ValueSetComposeIncludeConcept(x));
        }
        else {
            this.concept = [];
        }
        if (source['filter']) {
            this.filter = source.filter.map((x) => new fhir.ValueSetComposeIncludeFilter(x));
        }
        else {
            this.filter = [];
        }
        if (source['valueSet']) {
            this.valueSet = source.valueSet.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.valueSet = [];
        }
        if (source['_valueSet']) {
            source._valueSet.forEach((x, i) => {
                if (this.valueSet.length >= i) {
                    if (x) {
                        this.valueSet[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.valueSet.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.compose.include';
        }
        if (this["system"]) {
            issues.push(...this.system.doModelValidation(expression + '.system'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["concept"]) {
            this.concept.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.concept[${i}]`)); });
        }
        if (this["filter"]) {
            this.filter.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.filter[${i}]`)); });
        }
        if (this["valueSet"]) {
            this.valueSet.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.valueSet[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetComposeInclude._fts_dataType = 'ValueSetComposeInclude';
/**
 * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
 */
export class ValueSetCompose extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetCompose - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['lockedDate']) {
            this.lockedDate = new fhir.FhirDate({ value: source.lockedDate });
        }
        if (source['_lockedDate']) {
            if (this.lockedDate) {
                this.lockedDate.addExtendedProperties(source._lockedDate);
            }
            else {
                this.lockedDate = new fhir.FhirDate(source._lockedDate);
            }
        }
        if (source['inactive']) {
            this.inactive = new fhir.FhirBoolean({ value: source.inactive });
        }
        if (source['_inactive']) {
            if (this.inactive) {
                this.inactive.addExtendedProperties(source._inactive);
            }
            else {
                this.inactive = new fhir.FhirBoolean(source._inactive);
            }
        }
        if (source['include']) {
            this.include = source.include.map((x) => new fhir.ValueSetComposeInclude(x));
        }
        else {
            this.include = [];
        }
        if (source['exclude']) {
            this.exclude = source.exclude.map((x) => new fhir.ValueSetComposeInclude(x));
        }
        else {
            this.exclude = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.compose';
        }
        if (this["lockedDate"]) {
            issues.push(...this.lockedDate.doModelValidation(expression + '.lockedDate'));
        }
        if (this["inactive"]) {
            issues.push(...this.inactive.doModelValidation(expression + '.inactive'));
        }
        if (!this['include']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property include fhir: ValueSet.compose.include:include', expression: [expression] });
        }
        else if (!Array.isArray(this.include)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property include fhir: ValueSet.compose.include:include', expression: [expression] });
        }
        else if (this.include.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property include fhir: ValueSet.compose.include:include', expression: [expression] });
        }
        if (this["include"]) {
            this.include.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.include[${i}]`)); });
        }
        if (this["exclude"]) {
            this.exclude.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.exclude[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetCompose._fts_dataType = 'ValueSetCompose';
/**
 * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
 */
export class ValueSetExpansionParameter extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansionParameter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueDecimal']) {
            this.value = new fhir.FhirDecimal({ value: source.valueDecimal });
        }
        else if (source['valueUri']) {
            this.value = new fhir.FhirUri({ value: source.valueUri });
        }
        else if (source['valueCode']) {
            this.value = new fhir.FhirCode({ value: source.valueCode });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.expansion.parameter';
        }
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name fhir: ValueSet.expansion.parameter.name:string', expression: [expression] });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansionParameter._fts_dataType = 'ValueSetExpansionParameter';
/**
 * Internal flag to properly serialize choice-type element ValueSet.expansion.parameter.value[x]
 */
ValueSetExpansionParameter._fts_valueIsChoice = true;
/**
 * The codes that are contained in the value set expansion.
 */
export class ValueSetExpansionContains extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansionContains - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['system']) {
            this.system = new fhir.FhirUri({ value: source.system });
        }
        if (source['_system']) {
            if (this.system) {
                this.system.addExtendedProperties(source._system);
            }
            else {
                this.system = new fhir.FhirUri(source._system);
            }
        }
        if (source['abstract']) {
            this.abstract = new fhir.FhirBoolean({ value: source.abstract });
        }
        if (source['_abstract']) {
            if (this.abstract) {
                this.abstract.addExtendedProperties(source._abstract);
            }
            else {
                this.abstract = new fhir.FhirBoolean(source._abstract);
            }
        }
        if (source['inactive']) {
            this.inactive = new fhir.FhirBoolean({ value: source.inactive });
        }
        if (source['_inactive']) {
            if (this.inactive) {
                this.inactive.addExtendedProperties(source._inactive);
            }
            else {
                this.inactive = new fhir.FhirBoolean(source._inactive);
            }
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['display']) {
            this.display = new fhir.FhirString({ value: source.display });
        }
        if (source['_display']) {
            if (this.display) {
                this.display.addExtendedProperties(source._display);
            }
            else {
                this.display = new fhir.FhirString(source._display);
            }
        }
        if (source['designation']) {
            this.designation = source.designation.map((x) => new fhir.ValueSetComposeIncludeConceptDesignation(x));
        }
        else {
            this.designation = [];
        }
        if (source['contains']) {
            this.contains = source.contains.map((x) => new fhir.ValueSetExpansionContains(x));
        }
        else {
            this.contains = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.expansion.contains';
        }
        if (this["system"]) {
            issues.push(...this.system.doModelValidation(expression + '.system'));
        }
        if (this["abstract"]) {
            issues.push(...this.abstract.doModelValidation(expression + '.abstract'));
        }
        if (this["inactive"]) {
            issues.push(...this.inactive.doModelValidation(expression + '.inactive'));
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["display"]) {
            issues.push(...this.display.doModelValidation(expression + '.display'));
        }
        if (this["designation"]) {
            this.designation.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.designation[${i}]`)); });
        }
        if (this["contains"]) {
            this.contains.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contains[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansionContains._fts_dataType = 'ValueSetExpansionContains';
/**
 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.
 * Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
 */
export class ValueSetExpansion extends fhir.BackboneElement {
    /**
     * Default constructor for ValueSetExpansion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.FhirUri({ value: source.identifier });
        }
        if (source['_identifier']) {
            if (this.identifier) {
                this.identifier.addExtendedProperties(source._identifier);
            }
            else {
                this.identifier = new fhir.FhirUri(source._identifier);
            }
        }
        if (source['timestamp']) {
            this.timestamp = new fhir.FhirDateTime({ value: source.timestamp });
        }
        else {
            this.timestamp = null;
        }
        if (source['_timestamp']) {
            if (this.timestamp) {
                this.timestamp.addExtendedProperties(source._timestamp);
            }
            else {
                this.timestamp = new fhir.FhirDateTime(source._timestamp);
            }
        }
        if (source['total']) {
            this.total = new fhir.FhirInteger({ value: source.total });
        }
        if (source['_total']) {
            if (this.total) {
                this.total.addExtendedProperties(source._total);
            }
            else {
                this.total = new fhir.FhirInteger(source._total);
            }
        }
        if (source['offset']) {
            this.offset = new fhir.FhirInteger({ value: source.offset });
        }
        if (source['_offset']) {
            if (this.offset) {
                this.offset.addExtendedProperties(source._offset);
            }
            else {
                this.offset = new fhir.FhirInteger(source._offset);
            }
        }
        if (source['parameter']) {
            this.parameter = source.parameter.map((x) => new fhir.ValueSetExpansionParameter(x));
        }
        else {
            this.parameter = [];
        }
        if (source['contains']) {
            this.contains = source.contains.map((x) => new fhir.ValueSetExpansionContains(x));
        }
        else {
            this.contains = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet.expansion';
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation(expression + '.identifier'));
        }
        if (!this['timestamp']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property timestamp fhir: ValueSet.expansion.timestamp:dateTime', expression: [expression] });
        }
        if (this["timestamp"]) {
            issues.push(...this.timestamp.doModelValidation(expression + '.timestamp'));
        }
        if (this["total"]) {
            issues.push(...this.total.doModelValidation(expression + '.total'));
        }
        if (this["offset"]) {
            issues.push(...this.offset.doModelValidation(expression + '.offset'));
        }
        if (this["parameter"]) {
            this.parameter.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.parameter[${i}]`)); });
        }
        if (this["contains"]) {
            this.contains.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contains[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSetExpansion._fts_dataType = 'ValueSetExpansion';
/**
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).
 */
export class ValueSet extends fhir.DomainResource {
    /**
     * Default constructor for ValueSet - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ValueSet';
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['title']) {
            this.title = new fhir.FhirString({ value: source.title });
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title);
            }
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['experimental']) {
            this.experimental = new fhir.FhirBoolean({ value: source.experimental });
        }
        if (source['_experimental']) {
            if (this.experimental) {
                this.experimental.addExtendedProperties(source._experimental);
            }
            else {
                this.experimental = new fhir.FhirBoolean(source._experimental);
            }
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['publisher']) {
            this.publisher = new fhir.FhirString({ value: source.publisher });
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x));
        }
        else {
            this.contact = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirMarkdown({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description);
            }
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['immutable']) {
            this.immutable = new fhir.FhirBoolean({ value: source.immutable });
        }
        if (source['_immutable']) {
            if (this.immutable) {
                this.immutable.addExtendedProperties(source._immutable);
            }
            else {
                this.immutable = new fhir.FhirBoolean(source._immutable);
            }
        }
        if (source['purpose']) {
            this.purpose = new fhir.FhirMarkdown({ value: source.purpose });
        }
        if (source['_purpose']) {
            if (this.purpose) {
                this.purpose.addExtendedProperties(source._purpose);
            }
            else {
                this.purpose = new fhir.FhirMarkdown(source._purpose);
            }
        }
        if (source['copyright']) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright });
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright);
            }
        }
        if (source['compose']) {
            this.compose = new fhir.ValueSetCompose(source.compose);
        }
        if (source['expansion']) {
            this.expansion = new fhir.ValueSetExpansion(source.expansion);
        }
    }
    /**
     * Required-bound Value Set for status (ValueSet.status)
     */
    static get statusRequiredCodes() {
        return PublicationStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ValueSet';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: ValueSet.resourceType:"ValueSet"', expression: [expression] });
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation(expression + '.url'));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation(expression + '.version'));
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation(expression + '.name'));
        }
        if (this["title"]) {
            issues.push(...this.title.doModelValidation(expression + '.title'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: ValueSet.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (ValueSet.status) of type code is missing code for Required binding to: PublicationStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["experimental"]) {
            issues.push(...this.experimental.doModelValidation(expression + '.experimental'));
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation(expression + '.date'));
        }
        if (this["publisher"]) {
            issues.push(...this.publisher.doModelValidation(expression + '.publisher'));
        }
        if (this["contact"]) {
            this.contact.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.contact[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["useContext"]) {
            this.useContext.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.useContext[${i}]`)); });
        }
        if (this["jurisdiction"]) {
            this.jurisdiction.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.jurisdiction[${i}]`)); });
        }
        if (this["immutable"]) {
            issues.push(...this.immutable.doModelValidation(expression + '.immutable'));
        }
        if (this["purpose"]) {
            issues.push(...this.purpose.doModelValidation(expression + '.purpose'));
        }
        if (this["copyright"]) {
            issues.push(...this.copyright.doModelValidation(expression + '.copyright'));
        }
        if (this["compose"]) {
            issues.push(...this.compose.doModelValidation(expression + '.compose'));
        }
        if (this["expansion"]) {
            issues.push(...this.expansion.doModelValidation(expression + '.expansion'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ValueSet._fts_dataType = 'ValueSet';
//# sourceMappingURL=data:application/json;base64,