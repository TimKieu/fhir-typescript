// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductIndication
import * as fhir from '../fhir.js';
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
export class MedicinalProductIndicationOtherTherapy extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductIndicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['therapyRelationshipType']) {
            this.therapyRelationshipType = new fhir.CodeableConcept(source.therapyRelationshipType);
        }
        else {
            this.therapyRelationshipType = null;
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductIndication.otherTherapy';
        }
        iss.push(...this.vRS('therapyRelationshipType', exp));
        iss.push(...this.vRS('medication', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIndicationOtherTherapy._fts_dataType = 'MedicinalProductIndicationOtherTherapy';
/**
 * Internal flag to properly serialize choice-type element MedicinalProductIndication.otherTherapy.medication[x]
 */
MedicinalProductIndicationOtherTherapy._fts_medicationIsChoice = true;
/**
 * Indication for the Medicinal Product.
 */
export class MedicinalProductIndication extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductIndication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductIndication';
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['diseaseSymptomProcedure']) {
            this.diseaseSymptomProcedure = new fhir.CodeableConcept(source.diseaseSymptomProcedure);
        }
        if (source['diseaseStatus']) {
            this.diseaseStatus = new fhir.CodeableConcept(source.diseaseStatus);
        }
        if (source['comorbidity']) {
            this.comorbidity = source.comorbidity.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.comorbidity = [];
        }
        if (source['intendedEffect']) {
            this.intendedEffect = new fhir.CodeableConcept(source.intendedEffect);
        }
        if (source['duration']) {
            this.duration = new fhir.Quantity(source.duration);
        }
        if (source['otherTherapy']) {
            this.otherTherapy = source.otherTherapy.map((x) => new fhir.MedicinalProductIndicationOtherTherapy(x));
        }
        else {
            this.otherTherapy = [];
        }
        if (source['undesirableEffect']) {
            this.undesirableEffect = source.undesirableEffect.map((x) => new fhir.Reference(x));
        }
        else {
            this.undesirableEffect = [];
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.Population(x));
        }
        else {
            this.population = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductIndication';
        }
        iss.push(...this.vOA('subject', exp));
        iss.push(...this.vOS('diseaseSymptomProcedure', exp));
        iss.push(...this.vOS('diseaseStatus', exp));
        iss.push(...this.vOA('comorbidity', exp));
        iss.push(...this.vOS('intendedEffect', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vOA('otherTherapy', exp));
        iss.push(...this.vOA('undesirableEffect', exp));
        iss.push(...this.vOA('population', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductIndication._fts_dataType = 'MedicinalProductIndication';
//# sourceMappingURL=data:application/json;base64,