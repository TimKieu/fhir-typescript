/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Quantity } from './Quantity.js';
import { Population } from './Population.js';

// <auto-generated/>
/**
 * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
 */
var MedicinalProductIndicationOtherTherapy = /** @class */ (function (_super) {
    __extends(MedicinalProductIndicationOtherTherapy, _super);
    /**
     * Default constructor for MedicinalProductIndicationOtherTherapy - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductIndicationOtherTherapy(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['therapyRelationshipType']) {
            _this.therapyRelationshipType = new CodeableConcept(source.therapyRelationshipType);
        }
        else {
            _this.therapyRelationshipType = null;
        }
        if (source['medication']) {
            _this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            _this.medication = new CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            _this.medication = new Reference(source.medicationReference);
        }
        else {
            _this.medication = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductIndicationOtherTherapy.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['therapyRelationshipType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property therapyRelationshipType:fhir.CodeableConcept fhir: MedicinalProductIndication.otherTherapy.therapyRelationshipType:CodeableConcept', }));
        }
        if (this["therapyRelationshipType"]) {
            (_a = outcome.issue).push.apply(_a, this.therapyRelationshipType.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property medication: fhir: MedicinalProductIndication.otherTherapy.medication[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductIndicationOtherTherapy._fts_dataType = 'MedicinalProductIndicationOtherTherapy';
    /**
     * Internal flag to properly serialize choice-type element MedicinalProductIndication.otherTherapy.medication[x]
     */
    MedicinalProductIndicationOtherTherapy._fts_medicationIsChoice = true;
    return MedicinalProductIndicationOtherTherapy;
}(BackboneElement));
/**
 * Indication for the Medicinal Product.
 */
var MedicinalProductIndication = /** @class */ (function (_super) {
    __extends(MedicinalProductIndication, _super);
    /**
     * Default constructor for MedicinalProductIndication - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductIndication(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicinalProductIndication';
        if (source['subject']) {
            _this.subject = source.subject.map(function (x) { return new Reference(x); });
        }
        else {
            _this.subject = [];
        }
        if (source['diseaseSymptomProcedure']) {
            _this.diseaseSymptomProcedure = new CodeableConcept(source.diseaseSymptomProcedure);
        }
        if (source['diseaseStatus']) {
            _this.diseaseStatus = new CodeableConcept(source.diseaseStatus);
        }
        if (source['comorbidity']) {
            _this.comorbidity = source.comorbidity.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.comorbidity = [];
        }
        if (source['intendedEffect']) {
            _this.intendedEffect = new CodeableConcept(source.intendedEffect);
        }
        if (source['duration']) {
            _this.duration = new Quantity(source.duration);
        }
        if (source['otherTherapy']) {
            _this.otherTherapy = source.otherTherapy.map(function (x) { return new MedicinalProductIndicationOtherTherapy(x); });
        }
        else {
            _this.otherTherapy = [];
        }
        if (source['undesirableEffect']) {
            _this.undesirableEffect = source.undesirableEffect.map(function (x) { return new Reference(x); });
        }
        else {
            _this.undesirableEffect = [];
        }
        if (source['population']) {
            _this.population = source.population.map(function (x) { return new Population(x); });
        }
        else {
            _this.population = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductIndication.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicinalProductIndication" fhir: MedicinalProductIndication.resourceType:"MedicinalProductIndication"', }));
        }
        if (this["subject"]) {
            this.subject.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["diseaseSymptomProcedure"]) {
            (_a = outcome.issue).push.apply(_a, this.diseaseSymptomProcedure.doModelValidation().issue);
        }
        if (this["diseaseStatus"]) {
            (_b = outcome.issue).push.apply(_b, this.diseaseStatus.doModelValidation().issue);
        }
        if (this["comorbidity"]) {
            this.comorbidity.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["intendedEffect"]) {
            (_c = outcome.issue).push.apply(_c, this.intendedEffect.doModelValidation().issue);
        }
        if (this["duration"]) {
            (_d = outcome.issue).push.apply(_d, this.duration.doModelValidation().issue);
        }
        if (this["otherTherapy"]) {
            this.otherTherapy.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["undesirableEffect"]) {
            this.undesirableEffect.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["population"]) {
            this.population.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductIndication._fts_dataType = 'MedicinalProductIndication';
    return MedicinalProductIndication;
}(DomainResource));

export { MedicinalProductIndication, MedicinalProductIndicationOtherTherapy };
//# sourceMappingURL=MedicinalProductIndication.js.map
