// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Observation
import * as fhir from '../fhir.js';
// @ts-ignore
import { ReferencerangeMeaningCodings, } from '../fhirValueSets/ReferencerangeMeaningCodings.js';
// @ts-ignore
import { DataAbsentReasonCodings, } from '../fhirValueSets/DataAbsentReasonCodings.js';
// @ts-ignore
import { ObservationInterpretationCodings, } from '../fhirValueSets/ObservationInterpretationCodings.js';
// @ts-ignore
import { ObservationStatusCodes } from '../fhirValueSets/ObservationStatusCodes.js';
// @ts-ignore
import { ObservationCategoryCodings, } from '../fhirValueSets/ObservationCategoryCodings.js';
/**
 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
 */
export class ObservationReferenceRange extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationReferenceRange - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['low']) {
            this.low = new fhir.Quantity(source.low);
        }
        if (source['high']) {
            this.high = new fhir.Quantity(source.high);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['appliesTo']) {
            this.appliesTo = source.appliesTo.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.appliesTo = [];
        }
        if (source['age']) {
            this.age = new fhir.Range(source.age);
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
    }
    /**
     * Preferred-bound Value Set for type (Observation.referenceRange.type)
     */
    static get typePreferredCodings() {
        return ReferencerangeMeaningCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["low"]) {
            issues.push(...this.low.doModelValidation());
        }
        if (this["high"]) {
            issues.push(...this.high.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["appliesTo"]) {
            this.appliesTo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["age"]) {
            issues.push(...this.age.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationReferenceRange._fts_dataType = 'ObservationReferenceRange';
/**
 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
 */
export class ObservationComponent extends fhir.BackboneElement {
    /**
     * Default constructor for ObservationComponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData);
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source['interpretation']) {
            this.interpretation = source.interpretation.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.interpretation = [];
        }
        if (source['referenceRange']) {
            this.referenceRange = source.referenceRange.map((x) => new fhir.ObservationReferenceRange(x));
        }
        else {
            this.referenceRange = [];
        }
    }
    /**
     * Extensible-bound Value Set for dataAbsentReason (Observation.component.dataAbsentReason)
     */
    static get dataAbsentReasonExtensibleCodings() {
        return DataAbsentReasonCodings;
    }
    /**
     * Extensible-bound Value Set for interpretation (Observation.component.interpretation)
     */
    static get interpretationExtensibleCodings() {
        return ObservationInterpretationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Observation.component.code:CodeableConcept' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["dataAbsentReason"]) {
            issues.push(...this.dataAbsentReason.doModelValidation());
        }
        if (this["interpretation"]) {
            this.interpretation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["referenceRange"]) {
            this.referenceRange.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ObservationComponent._fts_dataType = 'ObservationComponent';
/**
 * Internal flag to properly serialize choice-type element Observation.component.value[x]
 */
ObservationComponent._fts_valueIsChoice = true;
/**
 * Measurements and simple assertions made about a patient, device or other subject.
 */
export class Observation extends fhir.DomainResource {
    /**
     * Default constructor for Observation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Observation';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.Reference(x));
        }
        else {
            this.focus = [];
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        else if (source['effectiveTiming']) {
            this.effective = new fhir.Timing(source.effectiveTiming);
        }
        else if (source['effectiveInstant']) {
            this.effective = new fhir.FhirInstant({ value: source.effectiveInstant });
        }
        if (source['issued']) {
            this.issued = new fhir.FhirInstant({ value: source.issued });
        }
        if (source['performer']) {
            this.performer = source.performer.map((x) => new fhir.Reference(x));
        }
        else {
            this.performer = [];
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueCodeableConcept']) {
            this.value = new fhir.CodeableConcept(source.valueCodeableConcept);
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueInteger']) {
            this.value = new fhir.FhirInteger({ value: source.valueInteger });
        }
        else if (source['valueRange']) {
            this.value = new fhir.Range(source.valueRange);
        }
        else if (source['valueRatio']) {
            this.value = new fhir.Ratio(source.valueRatio);
        }
        else if (source['valueSampledData']) {
            this.value = new fhir.SampledData(source.valueSampledData);
        }
        else if (source['valueTime']) {
            this.value = new fhir.FhirTime({ value: source.valueTime });
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        if (source['dataAbsentReason']) {
            this.dataAbsentReason = new fhir.CodeableConcept(source.dataAbsentReason);
        }
        if (source['interpretation']) {
            this.interpretation = source.interpretation.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.interpretation = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['method']) {
            this.method = new fhir.CodeableConcept(source.method);
        }
        if (source['specimen']) {
            this.specimen = new fhir.Reference(source.specimen);
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['referenceRange']) {
            this.referenceRange = source.referenceRange.map((x) => new fhir.ObservationReferenceRange(x));
        }
        else {
            this.referenceRange = [];
        }
        if (source['hasMember']) {
            this.hasMember = source.hasMember.map((x) => new fhir.Reference(x));
        }
        else {
            this.hasMember = [];
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.Reference(x));
        }
        else {
            this.derivedFrom = [];
        }
        if (source['component']) {
            this.component = source.component.map((x) => new fhir.ObservationComponent(x));
        }
        else {
            this.component = [];
        }
    }
    /**
     * Required-bound Value Set for status (Observation.status)
     */
    static get statusRequiredCodes() {
        return ObservationStatusCodes;
    }
    /**
     * Preferred-bound Value Set for category (Observation.category)
     */
    static get categoryPreferredCodings() {
        return ObservationCategoryCodings;
    }
    /**
     * Extensible-bound Value Set for dataAbsentReason (Observation.dataAbsentReason)
     */
    static get dataAbsentReasonExtensibleCodings() {
        return DataAbsentReasonCodings;
    }
    /**
     * Extensible-bound Value Set for interpretation (Observation.interpretation)
     */
    static get interpretationExtensibleCodings() {
        return ObservationInterpretationCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Observation" fhir: Observation.resourceType:"Observation"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ObservationStatusCodeType> fhir: Observation.status:code' });
        }
        if (this['status'] && (!Object.values(ObservationStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ObservationStatusCodeType> fhir: Observation.status:code Required binding to: ObservationStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Observation.code:CodeableConcept' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["focus"]) {
            this.focus.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["issued"]) {
            issues.push(...this.issued.doModelValidation());
        }
        if (this["performer"]) {
            this.performer.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["dataAbsentReason"]) {
            issues.push(...this.dataAbsentReason.doModelValidation());
        }
        if (this["interpretation"]) {
            this.interpretation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            issues.push(...this.bodySite.doModelValidation());
        }
        if (this["method"]) {
            issues.push(...this.method.doModelValidation());
        }
        if (this["specimen"]) {
            issues.push(...this.specimen.doModelValidation());
        }
        if (this["device"]) {
            issues.push(...this.device.doModelValidation());
        }
        if (this["referenceRange"]) {
            this.referenceRange.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["hasMember"]) {
            this.hasMember.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["derivedFrom"]) {
            this.derivedFrom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["component"]) {
            this.component.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Observation._fts_dataType = 'Observation';
/**
 * Internal flag to properly serialize choice-type element Observation.effective[x]
 */
Observation._fts_effectiveIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Observation.value[x]
 */
Observation._fts_valueIsChoice = true;
//# sourceMappingURL=data:application/json;base64,