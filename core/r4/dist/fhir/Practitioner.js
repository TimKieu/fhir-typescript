/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { AdministrativeGenderCodings } from '../fhirValueSets/AdministrativeGenderCodings.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Period } from './Period.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { HumanName } from './HumanName.js';
import { ContactPoint } from './ContactPoint.js';
import { Address } from './Address.js';
import { FhirDate } from './FhirDate.js';
import { Attachment } from './Attachment.js';

// <auto-generated/>
/**
 * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
 */
var PractitionerQualification = /** @class */ (function (_super) {
    __extends(PractitionerQualification, _super);
    /**
     * Default constructor for PractitionerQualification - initializes any required elements to null if a value is not provided.
     */
    function PractitionerQualification(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['period']) {
            _this.period = new Period(source.period);
        }
        if (source['issuer']) {
            _this.issuer = new Reference(source.issuer);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    PractitionerQualification.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Practitioner.qualification.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["period"]) {
            (_b = outcome.issue).push.apply(_b, this.period.doModelValidation().issue);
        }
        if (this["issuer"]) {
            (_c = outcome.issue).push.apply(_c, this.issuer.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    PractitionerQualification._fts_dataType = 'PractitionerQualification';
    return PractitionerQualification;
}(BackboneElement));
/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
var Practitioner = /** @class */ (function (_super) {
    __extends(Practitioner, _super);
    /**
     * Default constructor for Practitioner - initializes any required elements to null if a value is not provided.
     */
    function Practitioner(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Practitioner';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['active']) {
            _this.active = new FhirBoolean({ value: source.active });
        }
        if (source['name']) {
            _this.name = source.name.map(function (x) { return new HumanName(x); });
        }
        else {
            _this.name = [];
        }
        if (source['telecom']) {
            _this.telecom = source.telecom.map(function (x) { return new ContactPoint(x); });
        }
        else {
            _this.telecom = [];
        }
        if (source['address']) {
            _this.address = source.address.map(function (x) { return new Address(x); });
        }
        else {
            _this.address = [];
        }
        if (source['gender']) {
            _this.gender = source.gender;
        }
        if (source['birthDate']) {
            _this.birthDate = new FhirDate({ value: source.birthDate });
        }
        if (source['photo']) {
            _this.photo = source.photo.map(function (x) { return new Attachment(x); });
        }
        else {
            _this.photo = [];
        }
        if (source['qualification']) {
            _this.qualification = source.qualification.map(function (x) { return new PractitionerQualification(x); });
        }
        else {
            _this.qualification = [];
        }
        if (source['communication']) {
            _this.communication = source.communication.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.communication = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for gender (Practitioner.gender)
     */
    Practitioner.genderRequiredCoding = function () {
        return AdministrativeGenderCodings;
    };
    /**
     * Preferred-bound Value Set for communication (Practitioner.communication)
     */
    Practitioner.communicationPreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Practitioner.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Practitioner" fhir: Practitioner.resourceType:"Practitioner"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["active"]) {
            (_a = outcome.issue).push.apply(_a, this.active.doModelValidation().issue);
        }
        if (this["name"]) {
            this.name.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["telecom"]) {
            this.telecom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["address"]) {
            this.address.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["birthDate"]) {
            (_b = outcome.issue).push.apply(_b, this.birthDate.doModelValidation().issue);
        }
        if (this["photo"]) {
            this.photo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["qualification"]) {
            this.qualification.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["communication"]) {
            this.communication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Practitioner._fts_dataType = 'Practitioner';
    return Practitioner;
}(DomainResource));

export { Practitioner, PractitionerQualification };
//# sourceMappingURL=Practitioner.js.map
