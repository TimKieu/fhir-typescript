// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Practitioner
import * as fhir from '../fhir.js';
// @ts-ignore
import { AdministrativeGenderCodes } from '../fhirValueSets/AdministrativeGenderCodes.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
/**
 * The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
 */
export class PractitionerQualification extends fhir.BackboneElement {
    /**
     * Default constructor for PractitionerQualification - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['issuer']) {
            this.issuer = new fhir.Reference(source.issuer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Practitioner.qualification.code:CodeableConcept' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["issuer"]) {
            issues.push(...this.issuer.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
PractitionerQualification._fts_dataType = 'PractitionerQualification';
/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
export class Practitioner extends fhir.DomainResource {
    /**
     * Default constructor for Practitioner - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Practitioner';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['active']) {
            this.active = new fhir.FhirBoolean({ value: source.active });
        }
        if (source['name']) {
            this.name = source.name.map((x) => new fhir.HumanName(x));
        }
        else {
            this.name = [];
        }
        if (source['telecom']) {
            this.telecom = source.telecom.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.telecom = [];
        }
        if (source['address']) {
            this.address = source.address.map((x) => new fhir.Address(x));
        }
        else {
            this.address = [];
        }
        if (source['gender']) {
            this.gender = new fhir.FhirCode({ value: source.gender });
        }
        if (source['birthDate']) {
            this.birthDate = new fhir.FhirDate({ value: source.birthDate });
        }
        if (source['photo']) {
            this.photo = source.photo.map((x) => new fhir.Attachment(x));
        }
        else {
            this.photo = [];
        }
        if (source['qualification']) {
            this.qualification = source.qualification.map((x) => new fhir.PractitionerQualification(x));
        }
        else {
            this.qualification = [];
        }
        if (source['communication']) {
            this.communication = source.communication.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.communication = [];
        }
    }
    /**
     * Required-bound Value Set for gender (Practitioner.gender)
     */
    static get genderRequiredCodes() {
        return AdministrativeGenderCodes;
    }
    /**
     * Preferred-bound Value Set for communication (Practitioner.communication)
     */
    static get communicationPreferredCodings() {
        return LanguagesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Practitioner" fhir: Practitioner.resourceType:"Practitioner"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["active"]) {
            issues.push(...this.active.doModelValidation());
        }
        if (this["name"]) {
            this.name.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["telecom"]) {
            this.telecom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["address"]) {
            this.address.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['gender'] && (!Object.values(AdministrativeGenderCodes).includes(this.gender))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property gender?:fhir.FhirCode<AdministrativeGenderCodeType> fhir: Practitioner.gender:code Required binding to: AdministrativeGender' });
        }
        if (this["gender"]) {
            issues.push(...this.gender.doModelValidation());
        }
        if (this["birthDate"]) {
            issues.push(...this.birthDate.doModelValidation());
        }
        if (this["photo"]) {
            this.photo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["qualification"]) {
            this.qualification.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["communication"]) {
            this.communication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Practitioner._fts_dataType = 'Practitioner';
//# sourceMappingURL=data:application/json;base64,