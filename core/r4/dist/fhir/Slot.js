// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Slot
import * as fhir from '../fhir.js';
// @ts-ignore
import { C80PracticeCodings, } from '../fhirValueSets/C80PracticeCodings.js';
// @ts-ignore
import { V20276Codings, } from '../fhirValueSets/V20276Codings.js';
// @ts-ignore
import { SlotstatusCodes } from '../fhirValueSets/SlotstatusCodes.js';
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export class Slot extends fhir.DomainResource {
    /**
     * Default constructor for Slot - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Slot';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['serviceCategory']) {
            this.serviceCategory = source.serviceCategory.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceCategory = [];
        }
        if (source['serviceType']) {
            this.serviceType = source.serviceType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.serviceType = [];
        }
        if (source['specialty']) {
            this.specialty = source.specialty.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.specialty = [];
        }
        if (source['appointmentType']) {
            this.appointmentType = new fhir.CodeableConcept(source.appointmentType);
        }
        if (source['schedule']) {
            this.schedule = new fhir.Reference(source.schedule);
        }
        else {
            this.schedule = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['start']) {
            this.start = new fhir.FhirInstant({ value: source.start });
        }
        else {
            this.start = null;
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInstant(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInstant({ value: source.end });
        }
        else {
            this.end = null;
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInstant(source._end);
            }
        }
        if (source['overbooked']) {
            this.overbooked = new fhir.FhirBoolean({ value: source.overbooked });
        }
        if (source['_overbooked']) {
            if (this.overbooked) {
                this.overbooked.addExtendedProperties(source._overbooked);
            }
            else {
                this.overbooked = new fhir.FhirBoolean(source._overbooked);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Preferred-bound Value Set for specialty (Slot.specialty)
     */
    static get specialtyPreferredCodings() {
        return C80PracticeCodings;
    }
    /**
     * Preferred-bound Value Set for appointmentType (Slot.appointmentType)
     */
    static get appointmentTypePreferredCodings() {
        return V20276Codings;
    }
    /**
     * Required-bound Value Set for status (Slot.status)
     */
    static get statusRequiredCodes() {
        return SlotstatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Slot';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Slot.resourceType:"Slot"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (this["serviceCategory"]) {
            this.serviceCategory.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.serviceCategory[${i}]`)); });
        }
        if (this["serviceType"]) {
            this.serviceType.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.serviceType[${i}]`)); });
        }
        if (this["specialty"]) {
            this.specialty.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.specialty[${i}]`)); });
        }
        if (this["appointmentType"]) {
            issues.push(...this.appointmentType.doModelValidation(expression + '.appointmentType'));
        }
        if (!this['schedule']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property schedule fhir: Slot.schedule:Reference', expression: [expression] });
        }
        if (this["schedule"]) {
            issues.push(...this.schedule.doModelValidation(expression + '.schedule'));
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: Slot.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(SlotstatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: Slot.status:code Required binding to: Slotstatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (!this['start']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property start fhir: Slot.start:instant', expression: [expression] });
        }
        if (this["start"]) {
            issues.push(...this.start.doModelValidation(expression + '.start'));
        }
        if (!this['end']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property end fhir: Slot.end:instant', expression: [expression] });
        }
        if (this["end"]) {
            issues.push(...this.end.doModelValidation(expression + '.end'));
        }
        if (this["overbooked"]) {
            issues.push(...this.overbooked.doModelValidation(expression + '.overbooked'));
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation(expression + '.comment'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Slot._fts_dataType = 'Slot';
//# sourceMappingURL=data:application/json;base64,