/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { C80PracticeCodesCodings } from '../fhirValueSets/C80PracticeCodesCodings.js';
import { V20276Codings } from '../fhirValueSets/V20276Codings.js';
import { SlotstatusCodings } from '../fhirValueSets/SlotstatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirInstant } from './FhirInstant.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
var Slot = /** @class */ (function (_super) {
    __extends(Slot, _super);
    /**
     * Default constructor for Slot - initializes any required elements to null if a value is not provided.
     */
    function Slot(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Slot';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['serviceCategory']) {
            _this.serviceCategory = source.serviceCategory.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.serviceCategory = [];
        }
        if (source['serviceType']) {
            _this.serviceType = source.serviceType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.serviceType = [];
        }
        if (source['specialty']) {
            _this.specialty = source.specialty.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.specialty = [];
        }
        if (source['appointmentType']) {
            _this.appointmentType = new CodeableConcept(source.appointmentType);
        }
        if (source['schedule']) {
            _this.schedule = new Reference(source.schedule);
        }
        else {
            _this.schedule = null;
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['start']) {
            _this.start = new FhirInstant({ value: source.start });
        }
        else {
            _this.start = null;
        }
        if (source['end']) {
            _this.end = new FhirInstant({ value: source.end });
        }
        else {
            _this.end = null;
        }
        if (source['overbooked']) {
            _this.overbooked = new FhirBoolean({ value: source.overbooked });
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        return _this;
    }
    /**
     * Preferred-bound Value Set for specialty (Slot.specialty)
     */
    Slot.specialtyPreferredCoding = function () {
        return C80PracticeCodesCodings;
    };
    /**
     * Preferred-bound Value Set for appointmentType (Slot.appointmentType)
     */
    Slot.appointmentTypePreferredCoding = function () {
        return V20276Codings;
    };
    /**
     * Required-bound Value Set for status (Slot.status)
     */
    Slot.statusRequiredCoding = function () {
        return SlotstatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Slot.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Slot" fhir: Slot.resourceType:"Slot"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["serviceCategory"]) {
            this.serviceCategory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["serviceType"]) {
            this.serviceType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["specialty"]) {
            this.specialty.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["appointmentType"]) {
            (_a = outcome.issue).push.apply(_a, this.appointmentType.doModelValidation().issue);
        }
        if (!this['schedule']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property schedule:fhir.Reference fhir: Slot.schedule:Reference', }));
        }
        if (this["schedule"]) {
            (_b = outcome.issue).push.apply(_b, this.schedule.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:SlotstatusCodeType fhir: Slot.status:code', }));
        }
        if (!this['start']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property start:fhir.FhirInstant fhir: Slot.start:instant', }));
        }
        if (this["start"]) {
            (_c = outcome.issue).push.apply(_c, this.start.doModelValidation().issue);
        }
        if (!this['end']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property end:fhir.FhirInstant fhir: Slot.end:instant', }));
        }
        if (this["end"]) {
            (_d = outcome.issue).push.apply(_d, this.end.doModelValidation().issue);
        }
        if (this["overbooked"]) {
            (_e = outcome.issue).push.apply(_e, this.overbooked.doModelValidation().issue);
        }
        if (this["comment"]) {
            (_f = outcome.issue).push.apply(_f, this.comment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Slot._fts_dataType = 'Slot';
    return Slot;
}(DomainResource));

export { Slot };
//# sourceMappingURL=Slot.js.map
