// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BiologicallyDerivedProduct
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProductStorageScaleVsValidation } from '../fhirValueSets/ProductStorageScaleVsValidation.js';
// @ts-ignore
import { ProductCategoryVsValidation } from '../fhirValueSets/ProductCategoryVsValidation.js';
// @ts-ignore
import { ProductStatusVsValidation } from '../fhirValueSets/ProductStatusVsValidation.js';
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['collector']) {
            this.collector = new fhir.Reference(source.collector, options);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source, options);
        }
        if (source['collected']) {
            this.collected = source.collected;
        }
        else if (source['collectedDateTime'] !== undefined) {
            this.collected = new fhir.FhirDateTime({ value: source.collectedDateTime }, options);
        }
        else if (source['collectedPeriod']) {
            this.collected = new fhir.Period(source.collectedPeriod, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.collection';
        }
        iss.push(...this.vOS('collector', exp));
        iss.push(...this.vOS('source', exp));
        iss.push(...this.vOS('collected', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductCollection._fts_dataType = 'BiologicallyDerivedProductCollection';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.collection.collected[x]
 */
BiologicallyDerivedProductCollection._fts_collectedIsChoice = true;
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['procedure']) {
            this.procedure = new fhir.CodeableConcept(source.procedure, options);
        }
        if (source['additive']) {
            this.additive = new fhir.Reference(source.additive, options);
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime'] !== undefined) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime }, options);
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.processing';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('procedure', exp));
        iss.push(...this.vOS('additive', exp));
        iss.push(...this.vOS('time', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductProcessing._fts_dataType = 'BiologicallyDerivedProductProcessing';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.processing.time[x]
 */
BiologicallyDerivedProductProcessing._fts_timeIsChoice = true;
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime'] !== undefined) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime }, options);
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.manipulation';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('time', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductManipulation._fts_dataType = 'BiologicallyDerivedProductManipulation';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.manipulation.time[x]
 */
BiologicallyDerivedProductManipulation._fts_timeIsChoice = true;
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['temperature'] !== undefined) {
            this.temperature = new fhir.FhirDecimal({ value: source.temperature }, options);
        }
        if (source['_temperature']) {
            if (this.temperature) {
                this.temperature.addExtendedProperties(source._temperature);
            }
            else {
                this.temperature = new fhir.FhirDecimal(source._temperature, options);
            }
        }
        if (source['scale'] !== undefined) {
            this.scale = new fhir.FhirCode({ value: source.scale }, options);
        }
        if (source['_scale']) {
            if (this.scale) {
                this.scale.addExtendedProperties(source._scale);
            }
            else {
                this.scale = new fhir.FhirCode(source._scale, options);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.Period(source.duration, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.storage';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('temperature', exp));
        iss.push(...this.vOSV('scale', exp, 'ProductStorageScale', ProductStorageScaleVsValidation, 'r'));
        iss.push(...this.vOS('duration', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductStorage._fts_dataType = 'BiologicallyDerivedProductStorage';
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhir.DomainResource {
    /**
     * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'BiologicallyDerivedProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['productCategory'] !== undefined) {
            this.productCategory = new fhir.FhirCode({ value: source.productCategory }, options);
        }
        if (source['_productCategory']) {
            if (this.productCategory) {
                this.productCategory.addExtendedProperties(source._productCategory);
            }
            else {
                this.productCategory = new fhir.FhirCode(source._productCategory, options);
            }
        }
        if (source['productCode']) {
            this.productCode = new fhir.CodeableConcept(source.productCode, options);
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.request = [];
        }
        if (source['quantity'] !== undefined) {
            this.quantity = new fhir.FhirInteger({ value: source.quantity }, options);
        }
        if (source['_quantity']) {
            if (this.quantity) {
                this.quantity.addExtendedProperties(source._quantity);
            }
            else {
                this.quantity = new fhir.FhirInteger(source._quantity, options);
            }
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.parent = [];
        }
        if (source['collection']) {
            this.collection = new fhir.BiologicallyDerivedProductCollection(source.collection, options);
        }
        if (source['processing']) {
            this.processing = source.processing.map((x) => new fhir.BiologicallyDerivedProductProcessing(x, options));
        }
        else {
            this.processing = [];
        }
        if (source['manipulation']) {
            this.manipulation = new fhir.BiologicallyDerivedProductManipulation(source.manipulation, options);
        }
        if (source['storage']) {
            this.storage = source.storage.map((x) => new fhir.BiologicallyDerivedProductStorage(x, options));
        }
        else {
            this.storage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('productCategory', exp, 'ProductCategory', ProductCategoryVsValidation, 'r'));
        iss.push(...this.vOS('productCode', exp));
        iss.push(...this.vOSV('status', exp, 'ProductStatus', ProductStatusVsValidation, 'r'));
        iss.push(...this.vOA('request', exp));
        iss.push(...this.vOS('quantity', exp));
        iss.push(...this.vOA('parent', exp));
        iss.push(...this.vOS('collection', exp));
        iss.push(...this.vOA('processing', exp));
        iss.push(...this.vOS('manipulation', exp));
        iss.push(...this.vOA('storage', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProduct._fts_dataType = 'BiologicallyDerivedProduct';
//# sourceMappingURL=data:application/json;base64,