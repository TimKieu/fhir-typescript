/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ProductStorageScaleCodings } from '../fhirValueSets/ProductStorageScaleCodings.js';
import { ProductCategoryCodings } from '../fhirValueSets/ProductCategoryCodings.js';
import { ProductStatusCodings } from '../fhirValueSets/ProductStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { FhirString } from './FhirString.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Identifier } from './Identifier.js';
import { FhirInteger } from './FhirInteger.js';

// <auto-generated/>
/**
 * How this product was collected.
 */
var BiologicallyDerivedProductCollection = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductCollection, _super);
    /**
     * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
     */
    function BiologicallyDerivedProductCollection(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['collector']) {
            _this.collector = new Reference(source.collector);
        }
        if (source['source']) {
            _this.source = new Reference(source.source);
        }
        if (source['collected']) {
            _this.collected = source.collected;
        }
        else if (source['collectedDateTime']) {
            _this.collected = new FhirDateTime({ value: source.collectedDateTime });
        }
        else if (source['collectedPeriod']) {
            _this.collected = new Period(source.collectedPeriod);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BiologicallyDerivedProductCollection.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["collector"]) {
            (_a = outcome.issue).push.apply(_a, this.collector.doModelValidation().issue);
        }
        if (this["source"]) {
            (_b = outcome.issue).push.apply(_b, this.source.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BiologicallyDerivedProductCollection._fts_dataType = 'BiologicallyDerivedProductCollection';
    /**
     * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.collection.collected[x]
     */
    BiologicallyDerivedProductCollection._fts_collectedIsChoice = true;
    return BiologicallyDerivedProductCollection;
}(BackboneElement));
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
var BiologicallyDerivedProductProcessing = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductProcessing, _super);
    /**
     * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
     */
    function BiologicallyDerivedProductProcessing(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['procedure']) {
            _this.procedure = new CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            _this.additive = new Reference(source.additive);
        }
        if (source['time']) {
            _this.time = source.time;
        }
        else if (source['timeDateTime']) {
            _this.time = new FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            _this.time = new Period(source.timePeriod);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BiologicallyDerivedProductProcessing.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["procedure"]) {
            (_b = outcome.issue).push.apply(_b, this.procedure.doModelValidation().issue);
        }
        if (this["additive"]) {
            (_c = outcome.issue).push.apply(_c, this.additive.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BiologicallyDerivedProductProcessing._fts_dataType = 'BiologicallyDerivedProductProcessing';
    /**
     * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.processing.time[x]
     */
    BiologicallyDerivedProductProcessing._fts_timeIsChoice = true;
    return BiologicallyDerivedProductProcessing;
}(BackboneElement));
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
var BiologicallyDerivedProductManipulation = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductManipulation, _super);
    /**
     * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
     */
    function BiologicallyDerivedProductManipulation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['time']) {
            _this.time = source.time;
        }
        else if (source['timeDateTime']) {
            _this.time = new FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            _this.time = new Period(source.timePeriod);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BiologicallyDerivedProductManipulation.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BiologicallyDerivedProductManipulation._fts_dataType = 'BiologicallyDerivedProductManipulation';
    /**
     * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.manipulation.time[x]
     */
    BiologicallyDerivedProductManipulation._fts_timeIsChoice = true;
    return BiologicallyDerivedProductManipulation;
}(BackboneElement));
/**
 * Product storage.
 */
var BiologicallyDerivedProductStorage = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProductStorage, _super);
    /**
     * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
     */
    function BiologicallyDerivedProductStorage(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['temperature']) {
            _this.temperature = new FhirDecimal({ value: source.temperature });
        }
        if (source['scale']) {
            _this.scale = source.scale;
        }
        if (source['duration']) {
            _this.duration = new Period(source.duration);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for scale (BiologicallyDerivedProduct.storage.scale)
     */
    BiologicallyDerivedProductStorage.scaleRequiredCoding = function () {
        return ProductStorageScaleCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BiologicallyDerivedProductStorage.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["description"]) {
            (_a = outcome.issue).push.apply(_a, this.description.doModelValidation().issue);
        }
        if (this["temperature"]) {
            (_b = outcome.issue).push.apply(_b, this.temperature.doModelValidation().issue);
        }
        if (this["duration"]) {
            (_c = outcome.issue).push.apply(_c, this.duration.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BiologicallyDerivedProductStorage._fts_dataType = 'BiologicallyDerivedProductStorage';
    return BiologicallyDerivedProductStorage;
}(BackboneElement));
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
var BiologicallyDerivedProduct = /** @class */ (function (_super) {
    __extends(BiologicallyDerivedProduct, _super);
    /**
     * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
     */
    function BiologicallyDerivedProduct(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'BiologicallyDerivedProduct';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['productCategory']) {
            _this.productCategory = source.productCategory;
        }
        if (source['productCode']) {
            _this.productCode = new CodeableConcept(source.productCode);
        }
        if (source['status']) {
            _this.status = source.status;
        }
        if (source['request']) {
            _this.request = source.request.map(function (x) { return new Reference(x); });
        }
        else {
            _this.request = [];
        }
        if (source['quantity']) {
            _this.quantity = new FhirInteger({ value: source.quantity });
        }
        if (source['parent']) {
            _this.parent = source.parent.map(function (x) { return new Reference(x); });
        }
        else {
            _this.parent = [];
        }
        if (source['collection']) {
            _this.collection = new BiologicallyDerivedProductCollection(source.collection);
        }
        if (source['processing']) {
            _this.processing = source.processing.map(function (x) { return new BiologicallyDerivedProductProcessing(x); });
        }
        else {
            _this.processing = [];
        }
        if (source['manipulation']) {
            _this.manipulation = new BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source['storage']) {
            _this.storage = source.storage.map(function (x) { return new BiologicallyDerivedProductStorage(x); });
        }
        else {
            _this.storage = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for productCategory (BiologicallyDerivedProduct.productCategory)
     */
    BiologicallyDerivedProduct.productCategoryRequiredCoding = function () {
        return ProductCategoryCodings;
    };
    /**
     * Required-bound Value Set for status (BiologicallyDerivedProduct.status)
     */
    BiologicallyDerivedProduct.statusRequiredCoding = function () {
        return ProductStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    BiologicallyDerivedProduct.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"BiologicallyDerivedProduct" fhir: BiologicallyDerivedProduct.resourceType:"BiologicallyDerivedProduct"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["productCode"]) {
            (_a = outcome.issue).push.apply(_a, this.productCode.doModelValidation().issue);
        }
        if (this["request"]) {
            this.request.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["parent"]) {
            this.parent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["collection"]) {
            (_c = outcome.issue).push.apply(_c, this.collection.doModelValidation().issue);
        }
        if (this["processing"]) {
            this.processing.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["manipulation"]) {
            (_d = outcome.issue).push.apply(_d, this.manipulation.doModelValidation().issue);
        }
        if (this["storage"]) {
            this.storage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    BiologicallyDerivedProduct._fts_dataType = 'BiologicallyDerivedProduct';
    return BiologicallyDerivedProduct;
}(DomainResource));

export { BiologicallyDerivedProduct, BiologicallyDerivedProductCollection, BiologicallyDerivedProductManipulation, BiologicallyDerivedProductProcessing, BiologicallyDerivedProductStorage };
//# sourceMappingURL=BiologicallyDerivedProduct.js.map
