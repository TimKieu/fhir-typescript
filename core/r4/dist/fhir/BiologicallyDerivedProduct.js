// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BiologicallyDerivedProduct
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProductStorageScaleVsValidation } from '../fhirValueSets/ProductStorageScaleVsValidation.js';
// @ts-ignore
import { ProductCategoryVsValidation } from '../fhirValueSets/ProductCategoryVsValidation.js';
// @ts-ignore
import { ProductStatusVsValidation } from '../fhirValueSets/ProductStatusVsValidation.js';
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['collector']) {
            this.collector = new fhir.Reference(source.collector);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['collected']) {
            this.collected = source.collected;
        }
        else if (source['collectedDateTime']) {
            this.collected = new fhir.FhirDateTime({ value: source.collectedDateTime });
        }
        else if (source['collectedPeriod']) {
            this.collected = new fhir.Period(source.collectedPeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.collection';
        }
        this.vOS('collector', exp);
        this.vOS('source', exp);
        this.vOS('collected', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductCollection._fts_dataType = 'BiologicallyDerivedProductCollection';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.collection.collected[x]
 */
BiologicallyDerivedProductCollection._fts_collectedIsChoice = true;
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['procedure']) {
            this.procedure = new fhir.CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            this.additive = new fhir.Reference(source.additive);
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime']) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.processing';
        }
        this.vOS('description', exp);
        this.vOS('procedure', exp);
        this.vOS('additive', exp);
        this.vOS('time', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductProcessing._fts_dataType = 'BiologicallyDerivedProductProcessing';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.processing.time[x]
 */
BiologicallyDerivedProductProcessing._fts_timeIsChoice = true;
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime']) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.manipulation';
        }
        this.vOS('description', exp);
        this.vOS('time', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductManipulation._fts_dataType = 'BiologicallyDerivedProductManipulation';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.manipulation.time[x]
 */
BiologicallyDerivedProductManipulation._fts_timeIsChoice = true;
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['temperature']) {
            this.temperature = new fhir.FhirDecimal({ value: source.temperature });
        }
        if (source['_temperature']) {
            if (this.temperature) {
                this.temperature.addExtendedProperties(source._temperature);
            }
            else {
                this.temperature = new fhir.FhirDecimal(source._temperature);
            }
        }
        if (source['scale']) {
            this.scale = new fhir.FhirCode({ value: source.scale });
        }
        if (source['_scale']) {
            if (this.scale) {
                this.scale.addExtendedProperties(source._scale);
            }
            else {
                this.scale = new fhir.FhirCode(source._scale);
            }
        }
        if (source['duration']) {
            this.duration = new fhir.Period(source.duration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct.storage';
        }
        this.vOS('description', exp);
        this.vOS('temperature', exp);
        this.vOSV('scale', exp, 'ProductStorageScale', ProductStorageScaleVsValidation, 'r');
        this.vOS('duration', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductStorage._fts_dataType = 'BiologicallyDerivedProductStorage';
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhir.DomainResource {
    /**
     * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'BiologicallyDerivedProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['productCategory']) {
            this.productCategory = new fhir.FhirCode({ value: source.productCategory });
        }
        if (source['_productCategory']) {
            if (this.productCategory) {
                this.productCategory.addExtendedProperties(source._productCategory);
            }
            else {
                this.productCategory = new fhir.FhirCode(source._productCategory);
            }
        }
        if (source['productCode']) {
            this.productCode = new fhir.CodeableConcept(source.productCode);
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        else {
            this.request = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.FhirInteger({ value: source.quantity });
        }
        if (source['_quantity']) {
            if (this.quantity) {
                this.quantity.addExtendedProperties(source._quantity);
            }
            else {
                this.quantity = new fhir.FhirInteger(source._quantity);
            }
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.Reference(x));
        }
        else {
            this.parent = [];
        }
        if (source['collection']) {
            this.collection = new fhir.BiologicallyDerivedProductCollection(source.collection);
        }
        if (source['processing']) {
            this.processing = source.processing.map((x) => new fhir.BiologicallyDerivedProductProcessing(x));
        }
        else {
            this.processing = [];
        }
        if (source['manipulation']) {
            this.manipulation = new fhir.BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source['storage']) {
            this.storage = source.storage.map((x) => new fhir.BiologicallyDerivedProductStorage(x));
        }
        else {
            this.storage = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'BiologicallyDerivedProduct';
        }
        this.vRS('resourceType', exp);
        this.vOA('identifier', exp);
        this.vOSV('productCategory', exp, 'ProductCategory', ProductCategoryVsValidation, 'r');
        this.vOS('productCode', exp);
        this.vOSV('status', exp, 'ProductStatus', ProductStatusVsValidation, 'r');
        this.vOA('request', exp);
        this.vOS('quantity', exp);
        this.vOA('parent', exp);
        this.vOS('collection', exp);
        this.vOA('processing', exp);
        this.vOS('manipulation', exp);
        this.vOA('storage', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProduct._fts_dataType = 'BiologicallyDerivedProduct';
//# sourceMappingURL=data:application/json;base64,