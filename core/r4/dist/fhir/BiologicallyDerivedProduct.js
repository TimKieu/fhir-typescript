// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: BiologicallyDerivedProduct
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProductStorageScaleCodings, } from '../fhirValueSets/ProductStorageScaleCodings.js';
// @ts-ignore
import { ProductCategoryCodings, } from '../fhirValueSets/ProductCategoryCodings.js';
// @ts-ignore
import { ProductStatusCodings, } from '../fhirValueSets/ProductStatusCodings.js';
/**
 * How this product was collected.
 */
export class BiologicallyDerivedProductCollection extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductCollection - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['collector']) {
            this.collector = new fhir.Reference(source.collector);
        }
        if (source['source']) {
            this.source = new fhir.Reference(source.source);
        }
        if (source['collected']) {
            this.collected = source.collected;
        }
        else if (source['collectedDateTime']) {
            this.collected = new fhir.FhirDateTime({ value: source.collectedDateTime });
        }
        else if (source['collectedPeriod']) {
            this.collected = new fhir.Period(source.collectedPeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["collector"]) {
            issues.push(...this.collector.doModelValidation());
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductCollection._fts_dataType = 'BiologicallyDerivedProductCollection';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.collection.collected[x]
 */
BiologicallyDerivedProductCollection._fts_collectedIsChoice = true;
/**
 * Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
 */
export class BiologicallyDerivedProductProcessing extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductProcessing - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['procedure']) {
            this.procedure = new fhir.CodeableConcept(source.procedure);
        }
        if (source['additive']) {
            this.additive = new fhir.Reference(source.additive);
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime']) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["procedure"]) {
            issues.push(...this.procedure.doModelValidation());
        }
        if (this["additive"]) {
            issues.push(...this.additive.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductProcessing._fts_dataType = 'BiologicallyDerivedProductProcessing';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.processing.time[x]
 */
BiologicallyDerivedProductProcessing._fts_timeIsChoice = true;
/**
 * Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
 */
export class BiologicallyDerivedProductManipulation extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductManipulation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['time']) {
            this.time = source.time;
        }
        else if (source['timeDateTime']) {
            this.time = new fhir.FhirDateTime({ value: source.timeDateTime });
        }
        else if (source['timePeriod']) {
            this.time = new fhir.Period(source.timePeriod);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductManipulation._fts_dataType = 'BiologicallyDerivedProductManipulation';
/**
 * Internal flag to properly serialize choice-type element BiologicallyDerivedProduct.manipulation.time[x]
 */
BiologicallyDerivedProductManipulation._fts_timeIsChoice = true;
/**
 * Product storage.
 */
export class BiologicallyDerivedProductStorage extends fhir.BackboneElement {
    /**
     * Default constructor for BiologicallyDerivedProductStorage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['temperature']) {
            this.temperature = new fhir.FhirDecimal({ value: source.temperature });
        }
        if (source['scale']) {
            this.scale = source.scale;
        }
        if (source['duration']) {
            this.duration = new fhir.Period(source.duration);
        }
    }
    /**
     * Required-bound Value Set for scale (BiologicallyDerivedProduct.storage.scale)
     */
    static scaleRequiredCoding() {
        return ProductStorageScaleCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["temperature"]) {
            issues.push(...this.temperature.doModelValidation());
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProductStorage._fts_dataType = 'BiologicallyDerivedProductStorage';
/**
 * A material substance originating from a biological entity intended to be transplanted or infused
 * into another (possibly the same) biological entity.
 */
export class BiologicallyDerivedProduct extends fhir.DomainResource {
    /**
     * Default constructor for BiologicallyDerivedProduct - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'BiologicallyDerivedProduct';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['productCategory']) {
            this.productCategory = source.productCategory;
        }
        if (source['productCode']) {
            this.productCode = new fhir.CodeableConcept(source.productCode);
        }
        if (source['status']) {
            this.status = source.status;
        }
        if (source['request']) {
            this.request = source.request.map((x) => new fhir.Reference(x));
        }
        else {
            this.request = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.FhirInteger({ value: source.quantity });
        }
        if (source['parent']) {
            this.parent = source.parent.map((x) => new fhir.Reference(x));
        }
        else {
            this.parent = [];
        }
        if (source['collection']) {
            this.collection = new fhir.BiologicallyDerivedProductCollection(source.collection);
        }
        if (source['processing']) {
            this.processing = source.processing.map((x) => new fhir.BiologicallyDerivedProductProcessing(x));
        }
        else {
            this.processing = [];
        }
        if (source['manipulation']) {
            this.manipulation = new fhir.BiologicallyDerivedProductManipulation(source.manipulation);
        }
        if (source['storage']) {
            this.storage = source.storage.map((x) => new fhir.BiologicallyDerivedProductStorage(x));
        }
        else {
            this.storage = [];
        }
    }
    /**
     * Required-bound Value Set for productCategory (BiologicallyDerivedProduct.productCategory)
     */
    static productCategoryRequiredCoding() {
        return ProductCategoryCodings;
    }
    /**
     * Required-bound Value Set for status (BiologicallyDerivedProduct.status)
     */
    static statusRequiredCoding() {
        return ProductStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"BiologicallyDerivedProduct" fhir: BiologicallyDerivedProduct.resourceType:"BiologicallyDerivedProduct"', });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["productCode"]) {
            issues.push(...this.productCode.doModelValidation());
        }
        if (this["request"]) {
            this.request.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["parent"]) {
            this.parent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["collection"]) {
            issues.push(...this.collection.doModelValidation());
        }
        if (this["processing"]) {
            this.processing.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["manipulation"]) {
            issues.push(...this.manipulation.doModelValidation());
        }
        if (this["storage"]) {
            this.storage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
BiologicallyDerivedProduct._fts_dataType = 'BiologicallyDerivedProduct';
//# sourceMappingURL=data:application/json;base64,