{"version":3,"file":"Device.js","sources":["../../src/fhir/Device.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Device\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { UdiEntryTypeCodings, UdiEntryTypeCodingType,} from '../fhirValueSets/UdiEntryTypeCodings.js';\r\n// @ts-ignore\r\nimport { UdiEntryTypeCodes,  UdiEntryTypeCodeType } from '../fhirValueSets/UdiEntryTypeCodes.js';\r\n// @ts-ignore\r\nimport { DeviceNametypeCodings, DeviceNametypeCodingType,} from '../fhirValueSets/DeviceNametypeCodings.js';\r\n// @ts-ignore\r\nimport { DeviceNametypeCodes,  DeviceNametypeCodeType } from '../fhirValueSets/DeviceNametypeCodes.js';\r\n// @ts-ignore\r\nimport { DeviceStatusCodings, DeviceStatusCodingType,} from '../fhirValueSets/DeviceStatusCodings.js';\r\n// @ts-ignore\r\nimport { DeviceStatusCodes,  DeviceStatusCodeType } from '../fhirValueSets/DeviceStatusCodes.js';\r\n// @ts-ignore\r\nimport { DeviceStatusReasonCodings, DeviceStatusReasonCodingType,} from '../fhirValueSets/DeviceStatusReasonCodings.js';\r\n// @ts-ignore\r\nimport { DeviceStatusReasonCodes,  DeviceStatusReasonCodeType } from '../fhirValueSets/DeviceStatusReasonCodes.js';\r\n// @ts-ignore\r\nimport { DeviceTypeCodings, DeviceTypeCodingType,} from '../fhirValueSets/DeviceTypeCodings.js';\r\n// @ts-ignore\r\nimport { DeviceTypeCodes,  DeviceTypeCodeType } from '../fhirValueSets/DeviceTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the DeviceUdiCarrier type.\r\n */\r\nexport interface DeviceUdiCarrierArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.\r\n   */\r\n  deviceIdentifier?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :\r\n   * 1) GS1: \r\n   * http://hl7.org/fhir/NamingSystem/gs1-di, \r\n   * 2) HIBCC:\r\n   * http://hl7.org/fhir/NamingSystem/hibcc-dI, \r\n   * 3) ICCBBA for blood containers:\r\n   * http://hl7.org/fhir/NamingSystem/iccbba-blood-di, \r\n   * 4) ICCBA for other devices:\r\n   * http://hl7.org/fhir/NamingSystem/iccbba-other-di.\r\n   */\r\n  issuer?: fhir.FhirUri|string|undefined;\r\n  /**\r\n   * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.\r\n   */\r\n  jurisdiction?: fhir.FhirUri|string|undefined;\r\n  /**\r\n   * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.\r\n   */\r\n  carrierAIDC?: fhir.FhirBase64Binary|string|undefined;\r\n  /**\r\n   * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.\r\n   */\r\n  carrierHRF?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * A coded entry to indicate how the data was entered.\r\n   */\r\n  entryType?: UdiEntryTypeCodeType|undefined;\r\n}\r\n\r\n/**\r\n * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.\r\n */\r\nexport class DeviceUdiCarrier extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'DeviceUdiCarrier';\r\n  /**\r\n   * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.\r\n   */\r\n  public deviceIdentifier?: fhir.FhirString|undefined;\r\n  /**\r\n   * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :\r\n   * 1) GS1: \r\n   * http://hl7.org/fhir/NamingSystem/gs1-di, \r\n   * 2) HIBCC:\r\n   * http://hl7.org/fhir/NamingSystem/hibcc-dI, \r\n   * 3) ICCBBA for blood containers:\r\n   * http://hl7.org/fhir/NamingSystem/iccbba-blood-di, \r\n   * 4) ICCBA for other devices:\r\n   * http://hl7.org/fhir/NamingSystem/iccbba-other-di.\r\n   */\r\n  public issuer?: fhir.FhirUri|undefined;\r\n  /**\r\n   * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.\r\n   */\r\n  public jurisdiction?: fhir.FhirUri|undefined;\r\n  /**\r\n   * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.\r\n   */\r\n  public carrierAIDC?: fhir.FhirBase64Binary|undefined;\r\n  /**\r\n   * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.\r\n   */\r\n  public carrierHRF?: fhir.FhirString|undefined;\r\n  /**\r\n   * A coded entry to indicate how the data was entered.\r\n   */\r\n  public entryType?: UdiEntryTypeCodeType|undefined;\r\n  /**\r\n   * Default constructor for DeviceUdiCarrier - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<DeviceUdiCarrierArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['deviceIdentifier']) { this.deviceIdentifier = new fhir.FhirString({value: source.deviceIdentifier}); }\r\n    if (source['issuer']) { this.issuer = new fhir.FhirUri({value: source.issuer}); }\r\n    if (source['jurisdiction']) { this.jurisdiction = new fhir.FhirUri({value: source.jurisdiction}); }\r\n    if (source['carrierAIDC']) { this.carrierAIDC = new fhir.FhirBase64Binary({value: source.carrierAIDC}); }\r\n    if (source['carrierHRF']) { this.carrierHRF = new fhir.FhirString({value: source.carrierHRF}); }\r\n    if (source['entryType']) { this.entryType = source.entryType; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for entryType (Device.udiCarrier.entryType)\r\n   */\r\n  public static entryTypeRequiredCoding():UdiEntryTypeCodingType {\r\n    return UdiEntryTypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"deviceIdentifier\"]) { outcome.issue!.push(...this.deviceIdentifier.doModelValidation().issue!); }\r\n    if (this[\"issuer\"]) { outcome.issue!.push(...this.issuer.doModelValidation().issue!); }\r\n    if (this[\"jurisdiction\"]) { outcome.issue!.push(...this.jurisdiction.doModelValidation().issue!); }\r\n    if (this[\"carrierAIDC\"]) { outcome.issue!.push(...this.carrierAIDC.doModelValidation().issue!); }\r\n    if (this[\"carrierHRF\"]) { outcome.issue!.push(...this.carrierHRF.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the DeviceDeviceName type.\r\n */\r\nexport interface DeviceDeviceNameArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The name of the device.\r\n   */\r\n  name: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The type of deviceName.\r\n   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.\r\n   */\r\n  type: DeviceNametypeCodeType|null;\r\n}\r\n\r\n/**\r\n * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.\r\n */\r\nexport class DeviceDeviceName extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'DeviceDeviceName';\r\n  /**\r\n   * The name of the device.\r\n   */\r\n  public name: fhir.FhirString|null;\r\n  /**\r\n   * The type of deviceName.\r\n   * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.\r\n   */\r\n  public type: DeviceNametypeCodeType|null;\r\n  /**\r\n   * Default constructor for DeviceDeviceName - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<DeviceDeviceNameArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }\r\n    else { this.name = null; }\r\n    if (source['type']) { this.type = source.type; }\r\n    else { this.type = null; }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for type (Device.deviceName.type)\r\n   */\r\n  public static typeRequiredCoding():DeviceNametypeCodingType {\r\n    return DeviceNametypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['name']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property name:fhir.FhirString fhir: Device.deviceName.name:string', }));\r\n    }\r\n    if (this[\"name\"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:DeviceNametypeCodeType fhir: Device.deviceName.type:code', }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the DeviceSpecialization type.\r\n */\r\nexport interface DeviceSpecializationArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The standard that is used to operate and communicate.\r\n   */\r\n  systemType: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * The version of the standard that is used to operate and communicate.\r\n   */\r\n  version?: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.\r\n */\r\nexport class DeviceSpecialization extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'DeviceSpecialization';\r\n  /**\r\n   * The standard that is used to operate and communicate.\r\n   */\r\n  public systemType: fhir.CodeableConcept|null;\r\n  /**\r\n   * The version of the standard that is used to operate and communicate.\r\n   */\r\n  public version?: fhir.FhirString|undefined;\r\n  /**\r\n   * Default constructor for DeviceSpecialization - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<DeviceSpecializationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['systemType']) { this.systemType = new fhir.CodeableConcept(source.systemType); }\r\n    else { this.systemType = null; }\r\n    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['systemType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property systemType:fhir.CodeableConcept fhir: Device.specialization.systemType:CodeableConcept', }));\r\n    }\r\n    if (this[\"systemType\"]) { outcome.issue!.push(...this.systemType.doModelValidation().issue!); }\r\n    if (this[\"version\"]) { outcome.issue!.push(...this.version.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the DeviceVersion type.\r\n */\r\nexport interface DeviceVersionArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * The type of the device version.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * A single component of the device version.\r\n   */\r\n  component?: fhir.IdentifierArgs|undefined;\r\n  /**\r\n   * The version text.\r\n   */\r\n  value: fhir.FhirString|string|undefined;\r\n}\r\n\r\n/**\r\n * The actual design of the device or software version running on the device.\r\n */\r\nexport class DeviceVersion extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'DeviceVersion';\r\n  /**\r\n   * The type of the device version.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A single component of the device version.\r\n   */\r\n  public component?: fhir.Identifier|undefined;\r\n  /**\r\n   * The version text.\r\n   */\r\n  public value: fhir.FhirString|null;\r\n  /**\r\n   * Default constructor for DeviceVersion - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<DeviceVersionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['component']) { this.component = new fhir.Identifier(source.component); }\r\n    if (source['value']) { this.value = new fhir.FhirString({value: source.value}); }\r\n    else { this.value = null; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"component\"]) { outcome.issue!.push(...this.component.doModelValidation().issue!); }\r\n    if (!this['value']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property value:fhir.FhirString fhir: Device.version.value:string', }));\r\n    }\r\n    if (this[\"value\"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the DeviceProperty type.\r\n */\r\nexport interface DevicePropertyArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).\r\n   */\r\n  type: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * Property value as a quantity.\r\n   */\r\n  valueQuantity?: fhir.QuantityArgs[]|undefined;\r\n  /**\r\n   * Property value as a code, e.g., NTP4 (synced to NTP).\r\n   */\r\n  valueCode?: fhir.CodeableConceptArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.\r\n */\r\nexport class DeviceProperty extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'DeviceProperty';\r\n  /**\r\n   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).\r\n   */\r\n  public type: fhir.CodeableConcept|null;\r\n  /**\r\n   * Property value as a quantity.\r\n   */\r\n  public valueQuantity?: fhir.Quantity[];\r\n  /**\r\n   * Property value as a code, e.g., NTP4 (synced to NTP).\r\n   */\r\n  public valueCode?: fhir.CodeableConcept[];\r\n  /**\r\n   * Default constructor for DeviceProperty - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<DevicePropertyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    else { this.type = null; }\r\n    if (source['valueQuantity']) { this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x)); }\r\n    else { this.valueQuantity = []; }\r\n    if (source['valueCode']) { this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.valueCode = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Device.property.type:CodeableConcept', }));\r\n    }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"valueQuantity\"]) { this.valueQuantity.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"valueCode\"]) { this.valueCode.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the Device type.\r\n */\r\nexport interface DeviceArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Device\"|undefined;\r\n  /**\r\n   * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * The reference to the definition for the device.\r\n   */\r\n  definition?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.\r\n   */\r\n  udiCarrier?: fhir.DeviceUdiCarrierArgs[]|undefined;\r\n  /**\r\n   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.\r\n   */\r\n  status?: DeviceStatusCodeType|undefined;\r\n  /**\r\n   * Reason for the dtatus of the Device availability.\r\n   */\r\n  statusReason?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * For example, this applies to devices in the United States regulated under *Code of Federal Regulation 21CFR§1271.290(c)*.\r\n   */\r\n  distinctIdentifier?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * A name of the manufacturer.\r\n   */\r\n  manufacturer?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The date and time when the device was manufactured.\r\n   */\r\n  manufactureDate?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * The date and time beyond which this device is no longer valid or should not be used (if applicable).\r\n   */\r\n  expirationDate?: fhir.FhirDateTime|string|undefined;\r\n  /**\r\n   * Lot number assigned by the manufacturer.\r\n   */\r\n  lotNumber?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Alphanumeric Maximum 20.\r\n   */\r\n  serialNumber?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.\r\n   */\r\n  deviceName?: fhir.DeviceDeviceNameArgs[]|undefined;\r\n  /**\r\n   * The model number for the device.\r\n   */\r\n  modelNumber?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * Alphanumeric Maximum 20.\r\n   */\r\n  partNumber?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The kind or type of device.\r\n   */\r\n  type?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.\r\n   */\r\n  specialization?: fhir.DeviceSpecializationArgs[]|undefined;\r\n  /**\r\n   * The actual design of the device or software version running on the device.\r\n   */\r\n  version?: fhir.DeviceVersionArgs[]|undefined;\r\n  /**\r\n   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.\r\n   */\r\n  property?: fhir.DevicePropertyArgs[]|undefined;\r\n  /**\r\n   * Patient information, If the device is affixed to a person.\r\n   */\r\n  patient?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * An organization that is responsible for the provision and ongoing maintenance of the device.\r\n   */\r\n  owner?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * used for troubleshooting etc.\r\n   */\r\n  contact?: fhir.ContactPointArgs[]|undefined;\r\n  /**\r\n   * The place where the device can be found.\r\n   */\r\n  location?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.\r\n   */\r\n  url?: fhir.FhirUri|string|undefined;\r\n  /**\r\n   * Descriptive information, usage information or implantation information that is not captured in an existing element.\r\n   */\r\n  note?: fhir.AnnotationArgs[]|undefined;\r\n  /**\r\n   * Provides additional safety characteristics about a medical device.  For example devices containing latex.\r\n   */\r\n  safety?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * The parent device.\r\n   */\r\n  parent?: fhir.ReferenceArgs|undefined;\r\n}\r\n\r\n/**\r\n * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.\r\n */\r\nexport class Device extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Device';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"Device\";\r\n  /**\r\n   * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * The reference to the definition for the device.\r\n   */\r\n  public definition?: fhir.Reference|undefined;\r\n  /**\r\n   * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.\r\n   */\r\n  public udiCarrier?: fhir.DeviceUdiCarrier[];\r\n  /**\r\n   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.\r\n   */\r\n  public status?: DeviceStatusCodeType|undefined;\r\n  /**\r\n   * Reason for the dtatus of the Device availability.\r\n   */\r\n  public statusReason?: fhir.CodeableConcept[];\r\n  /**\r\n   * For example, this applies to devices in the United States regulated under *Code of Federal Regulation 21CFR§1271.290(c)*.\r\n   */\r\n  public distinctIdentifier?: fhir.FhirString|undefined;\r\n  /**\r\n   * A name of the manufacturer.\r\n   */\r\n  public manufacturer?: fhir.FhirString|undefined;\r\n  /**\r\n   * The date and time when the device was manufactured.\r\n   */\r\n  public manufactureDate?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * The date and time beyond which this device is no longer valid or should not be used (if applicable).\r\n   */\r\n  public expirationDate?: fhir.FhirDateTime|undefined;\r\n  /**\r\n   * Lot number assigned by the manufacturer.\r\n   */\r\n  public lotNumber?: fhir.FhirString|undefined;\r\n  /**\r\n   * Alphanumeric Maximum 20.\r\n   */\r\n  public serialNumber?: fhir.FhirString|undefined;\r\n  /**\r\n   * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.\r\n   */\r\n  public deviceName?: fhir.DeviceDeviceName[];\r\n  /**\r\n   * The model number for the device.\r\n   */\r\n  public modelNumber?: fhir.FhirString|undefined;\r\n  /**\r\n   * Alphanumeric Maximum 20.\r\n   */\r\n  public partNumber?: fhir.FhirString|undefined;\r\n  /**\r\n   * The kind or type of device.\r\n   */\r\n  public type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.\r\n   */\r\n  public specialization?: fhir.DeviceSpecialization[];\r\n  /**\r\n   * The actual design of the device or software version running on the device.\r\n   */\r\n  public version?: fhir.DeviceVersion[];\r\n  /**\r\n   * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.\r\n   */\r\n  public property?: fhir.DeviceProperty[];\r\n  /**\r\n   * Patient information, If the device is affixed to a person.\r\n   */\r\n  public patient?: fhir.Reference|undefined;\r\n  /**\r\n   * An organization that is responsible for the provision and ongoing maintenance of the device.\r\n   */\r\n  public owner?: fhir.Reference|undefined;\r\n  /**\r\n   * used for troubleshooting etc.\r\n   */\r\n  public contact?: fhir.ContactPoint[];\r\n  /**\r\n   * The place where the device can be found.\r\n   */\r\n  public location?: fhir.Reference|undefined;\r\n  /**\r\n   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.\r\n   */\r\n  public url?: fhir.FhirUri|undefined;\r\n  /**\r\n   * Descriptive information, usage information or implantation information that is not captured in an existing element.\r\n   */\r\n  public note?: fhir.Annotation[];\r\n  /**\r\n   * Provides additional safety characteristics about a medical device.  For example devices containing latex.\r\n   */\r\n  public safety?: fhir.CodeableConcept[];\r\n  /**\r\n   * The parent device.\r\n   */\r\n  public parent?: fhir.Reference|undefined;\r\n  /**\r\n   * Default constructor for Device - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<DeviceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'Device';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['definition']) { this.definition = new fhir.Reference(source.definition); }\r\n    if (source['udiCarrier']) { this.udiCarrier = source.udiCarrier.map((x) => new fhir.DeviceUdiCarrier(x)); }\r\n    else { this.udiCarrier = []; }\r\n    if (source['status']) { this.status = source.status; }\r\n    if (source['statusReason']) { this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.statusReason = []; }\r\n    if (source['distinctIdentifier']) { this.distinctIdentifier = new fhir.FhirString({value: source.distinctIdentifier}); }\r\n    if (source['manufacturer']) { this.manufacturer = new fhir.FhirString({value: source.manufacturer}); }\r\n    if (source['manufactureDate']) { this.manufactureDate = new fhir.FhirDateTime({value: source.manufactureDate}); }\r\n    if (source['expirationDate']) { this.expirationDate = new fhir.FhirDateTime({value: source.expirationDate}); }\r\n    if (source['lotNumber']) { this.lotNumber = new fhir.FhirString({value: source.lotNumber}); }\r\n    if (source['serialNumber']) { this.serialNumber = new fhir.FhirString({value: source.serialNumber}); }\r\n    if (source['deviceName']) { this.deviceName = source.deviceName.map((x) => new fhir.DeviceDeviceName(x)); }\r\n    else { this.deviceName = []; }\r\n    if (source['modelNumber']) { this.modelNumber = new fhir.FhirString({value: source.modelNumber}); }\r\n    if (source['partNumber']) { this.partNumber = new fhir.FhirString({value: source.partNumber}); }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    if (source['specialization']) { this.specialization = source.specialization.map((x) => new fhir.DeviceSpecialization(x)); }\r\n    else { this.specialization = []; }\r\n    if (source['version']) { this.version = source.version.map((x) => new fhir.DeviceVersion(x)); }\r\n    else { this.version = []; }\r\n    if (source['property']) { this.property = source.property.map((x) => new fhir.DeviceProperty(x)); }\r\n    else { this.property = []; }\r\n    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }\r\n    if (source['owner']) { this.owner = new fhir.Reference(source.owner); }\r\n    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactPoint(x)); }\r\n    else { this.contact = []; }\r\n    if (source['location']) { this.location = new fhir.Reference(source.location); }\r\n    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }\r\n    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }\r\n    else { this.note = []; }\r\n    if (source['safety']) { this.safety = source.safety.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.safety = []; }\r\n    if (source['parent']) { this.parent = new fhir.Reference(source.parent); }\r\n  }\r\n  /**\r\n   * Required-bound Value Set for status (Device.status)\r\n   */\r\n  public static statusRequiredCoding():DeviceStatusCodingType {\r\n    return DeviceStatusCodings;\r\n  }\r\n  /**\r\n   * Extensible-bound Value Set for statusReason (Device.statusReason)\r\n   */\r\n  public static statusReasonExtensibleCoding():DeviceStatusReasonCodingType {\r\n    return DeviceStatusReasonCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"Device\" fhir: Device.resourceType:\"Device\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"definition\"]) { outcome.issue!.push(...this.definition.doModelValidation().issue!); }\r\n    if (this[\"udiCarrier\"]) { this.udiCarrier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"statusReason\"]) { this.statusReason.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"distinctIdentifier\"]) { outcome.issue!.push(...this.distinctIdentifier.doModelValidation().issue!); }\r\n    if (this[\"manufacturer\"]) { outcome.issue!.push(...this.manufacturer.doModelValidation().issue!); }\r\n    if (this[\"manufactureDate\"]) { outcome.issue!.push(...this.manufactureDate.doModelValidation().issue!); }\r\n    if (this[\"expirationDate\"]) { outcome.issue!.push(...this.expirationDate.doModelValidation().issue!); }\r\n    if (this[\"lotNumber\"]) { outcome.issue!.push(...this.lotNumber.doModelValidation().issue!); }\r\n    if (this[\"serialNumber\"]) { outcome.issue!.push(...this.serialNumber.doModelValidation().issue!); }\r\n    if (this[\"deviceName\"]) { this.deviceName.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"modelNumber\"]) { outcome.issue!.push(...this.modelNumber.doModelValidation().issue!); }\r\n    if (this[\"partNumber\"]) { outcome.issue!.push(...this.partNumber.doModelValidation().issue!); }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (this[\"specialization\"]) { this.specialization.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"version\"]) { this.version.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"property\"]) { this.property.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"patient\"]) { outcome.issue!.push(...this.patient.doModelValidation().issue!); }\r\n    if (this[\"owner\"]) { outcome.issue!.push(...this.owner.doModelValidation().issue!); }\r\n    if (this[\"contact\"]) { this.contact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"location\"]) { outcome.issue!.push(...this.location.doModelValidation().issue!); }\r\n    if (this[\"url\"]) { outcome.issue!.push(...this.url.doModelValidation().issue!); }\r\n    if (this[\"note\"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"safety\"]) { this.safety.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"parent\"]) { outcome.issue!.push(...this.parent.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.FhirString","fhir.FhirUri","fhir.FhirBase64Binary","fhir.BackboneElement","fhir.OperationOutcomeIssue","fhir.CodeableConcept","fhir.Identifier","fhir.Quantity","fhir.Reference","fhir.DeviceUdiCarrier","fhir.FhirDateTime","fhir.DeviceDeviceName","fhir.DeviceSpecialization","fhir.DeviceVersion","fhir.DeviceProperty","fhir.ContactPoint","fhir.Annotation","fhir.DomainResource"],"mappings":"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"}