// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Condition
import * as fhir from '../fhir.js';
// @ts-ignore
import { ConditionClinicalVsValidation } from '../fhirValueSets/ConditionClinicalVsValidation.js';
// @ts-ignore
import { ConditionVerStatusVsValidation } from '../fhirValueSets/ConditionVerStatusVsValidation.js';
/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
export class ConditionStage extends fhir.BackboneElement {
    /**
     * Default constructor for ConditionStage - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['summary']) {
            this.summary = new fhir.CodeableConcept(source.summary, options);
        }
        if (source['assessment']) {
            this.assessment = source.assessment.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.assessment = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Condition.stage';
        }
        iss.push(...this.vOS('summary', exp));
        iss.push(...this.vOA('assessment', exp));
        iss.push(...this.vOS('type', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConditionStage._fts_dataType = 'ConditionStage';
/**
 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
 */
export class ConditionEvidence extends fhir.BackboneElement {
    /**
     * Default constructor for ConditionEvidence - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.code = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Condition.evidence';
        }
        iss.push(...this.vOA('code', exp));
        iss.push(...this.vOA('detail', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ConditionEvidence._fts_dataType = 'ConditionEvidence';
/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
export class Condition extends fhir.DomainResource {
    /**
     * Default constructor for Condition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Condition';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['clinicalStatus']) {
            this.clinicalStatus = new fhir.CodeableConcept(source.clinicalStatus, options);
        }
        if (source['verificationStatus']) {
            this.verificationStatus = new fhir.CodeableConcept(source.verificationStatus, options);
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.category = [];
        }
        if (source['severity']) {
            this.severity = new fhir.CodeableConcept(source.severity, options);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code, options);
        }
        if (source['bodySite']) {
            this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.bodySite = [];
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['onset']) {
            this.onset = source.onset;
        }
        else if (source['onsetDateTime'] !== undefined) {
            this.onset = new fhir.FhirDateTime({ value: source.onsetDateTime }, options);
        }
        else if (source['onsetAge']) {
            this.onset = new fhir.Age(source.onsetAge, options);
        }
        else if (source['onsetPeriod']) {
            this.onset = new fhir.Period(source.onsetPeriod, options);
        }
        else if (source['onsetRange']) {
            this.onset = new fhir.Range(source.onsetRange, options);
        }
        else if (source['onsetString'] !== undefined) {
            this.onset = new fhir.FhirString({ value: source.onsetString }, options);
        }
        if (source['abatement']) {
            this.abatement = source.abatement;
        }
        else if (source['abatementDateTime'] !== undefined) {
            this.abatement = new fhir.FhirDateTime({ value: source.abatementDateTime }, options);
        }
        else if (source['abatementAge']) {
            this.abatement = new fhir.Age(source.abatementAge, options);
        }
        else if (source['abatementPeriod']) {
            this.abatement = new fhir.Period(source.abatementPeriod, options);
        }
        else if (source['abatementRange']) {
            this.abatement = new fhir.Range(source.abatementRange, options);
        }
        else if (source['abatementString'] !== undefined) {
            this.abatement = new fhir.FhirString({ value: source.abatementString }, options);
        }
        if (source['recordedDate'] !== undefined) {
            this.recordedDate = new fhir.FhirDateTime({ value: source.recordedDate }, options);
        }
        if (source['_recordedDate']) {
            if (this.recordedDate) {
                this.recordedDate.addExtendedProperties(source._recordedDate);
            }
            else {
                this.recordedDate = new fhir.FhirDateTime(source._recordedDate, options);
            }
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder, options);
        }
        if (source['asserter']) {
            this.asserter = new fhir.Reference(source.asserter, options);
        }
        if (source['stage']) {
            this.stage = source.stage.map((x) => new fhir.ConditionStage(x, options));
        }
        else {
            this.stage = [];
        }
        if (source['evidence']) {
            this.evidence = source.evidence.map((x) => new fhir.ConditionEvidence(x, options));
        }
        else {
            this.evidence = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Condition';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOSV('clinicalStatus', exp, 'ConditionClinical', ConditionClinicalVsValidation, 'r'));
        iss.push(...this.vOSV('verificationStatus', exp, 'ConditionVerStatus', ConditionVerStatusVsValidation, 'r'));
        iss.push(...this.vOA('category', exp));
        iss.push(...this.vOS('severity', exp));
        iss.push(...this.vOS('code', exp));
        iss.push(...this.vOA('bodySite', exp));
        iss.push(...this.vRS('subject', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('onset', exp));
        iss.push(...this.vOS('abatement', exp));
        iss.push(...this.vOS('recordedDate', exp));
        iss.push(...this.vOS('recorder', exp));
        iss.push(...this.vOS('asserter', exp));
        iss.push(...this.vOA('stage', exp));
        iss.push(...this.vOA('evidence', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Condition._fts_dataType = 'Condition';
/**
 * Internal flag to properly serialize choice-type element Condition.onset[x]
 */
Condition._fts_onsetIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element Condition.abatement[x]
 */
Condition._fts_abatementIsChoice = true;
//# sourceMappingURL=data:application/json;base64,