// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Device
import * as fhir from '../fhir.js';
// @ts-ignore
import { UdiEntryTypeCodes } from '../fhirValueSets/UdiEntryTypeCodes.js';
// @ts-ignore
import { DeviceNametypeCodes } from '../fhirValueSets/DeviceNametypeCodes.js';
// @ts-ignore
import { DeviceStatusCodes } from '../fhirValueSets/DeviceStatusCodes.js';
// @ts-ignore
import { DeviceStatusReasonCodings, } from '../fhirValueSets/DeviceStatusReasonCodings.js';
/**
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export class DeviceUdiCarrier extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceUdiCarrier - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['deviceIdentifier']) {
            this.deviceIdentifier = new fhir.FhirString({ value: source.deviceIdentifier });
        }
        if (source['_deviceIdentifier']) {
            if (this.deviceIdentifier) {
                this.deviceIdentifier.addExtendedProperties(source._deviceIdentifier);
            }
            else {
                this.deviceIdentifier = new fhir.FhirString(source._deviceIdentifier);
            }
        }
        if (source['issuer']) {
            this.issuer = new fhir.FhirUri({ value: source.issuer });
        }
        if (source['_issuer']) {
            if (this.issuer) {
                this.issuer.addExtendedProperties(source._issuer);
            }
            else {
                this.issuer = new fhir.FhirUri(source._issuer);
            }
        }
        if (source['jurisdiction']) {
            this.jurisdiction = new fhir.FhirUri({ value: source.jurisdiction });
        }
        if (source['_jurisdiction']) {
            if (this.jurisdiction) {
                this.jurisdiction.addExtendedProperties(source._jurisdiction);
            }
            else {
                this.jurisdiction = new fhir.FhirUri(source._jurisdiction);
            }
        }
        if (source['carrierAIDC']) {
            this.carrierAIDC = new fhir.FhirBase64Binary({ value: source.carrierAIDC });
        }
        if (source['_carrierAIDC']) {
            if (this.carrierAIDC) {
                this.carrierAIDC.addExtendedProperties(source._carrierAIDC);
            }
            else {
                this.carrierAIDC = new fhir.FhirBase64Binary(source._carrierAIDC);
            }
        }
        if (source['carrierHRF']) {
            this.carrierHRF = new fhir.FhirString({ value: source.carrierHRF });
        }
        if (source['_carrierHRF']) {
            if (this.carrierHRF) {
                this.carrierHRF.addExtendedProperties(source._carrierHRF);
            }
            else {
                this.carrierHRF = new fhir.FhirString(source._carrierHRF);
            }
        }
        if (source['entryType']) {
            this.entryType = new fhir.FhirCode({ value: source.entryType });
        }
        if (source['_entryType']) {
            if (this.entryType) {
                this.entryType.addExtendedProperties(source._entryType);
            }
            else {
                this.entryType = new fhir.FhirCode(source._entryType);
            }
        }
    }
    /**
     * Required-bound Value Set for entryType (Device.udiCarrier.entryType)
     */
    static get entryTypeRequiredCodes() {
        return UdiEntryTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["deviceIdentifier"]) {
            issues.push(...this.deviceIdentifier.doModelValidation());
        }
        if (this["issuer"]) {
            issues.push(...this.issuer.doModelValidation());
        }
        if (this["jurisdiction"]) {
            issues.push(...this.jurisdiction.doModelValidation());
        }
        if (this["carrierAIDC"]) {
            issues.push(...this.carrierAIDC.doModelValidation());
        }
        if (this["carrierHRF"]) {
            issues.push(...this.carrierHRF.doModelValidation());
        }
        if (this['entryType'] && (!Object.values(UdiEntryTypeCodes).includes(this.entryType))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property entryType?:fhir.FhirCode<UdiEntryTypeCodeType> fhir: Device.udiCarrier.entryType:code Required binding to: UdiEntryType' });
        }
        if (this["entryType"]) {
            issues.push(...this.entryType.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceUdiCarrier._fts_dataType = 'DeviceUdiCarrier';
/**
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
export class DeviceDeviceName extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceDeviceName - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        else {
            this.name = null;
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name);
            }
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
    }
    /**
     * Required-bound Value Set for type (Device.deviceName.type)
     */
    static get typeRequiredCodes() {
        return DeviceNametypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['name']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: Device.deviceName.name:string' });
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<DeviceNametypeCodeType> fhir: Device.deviceName.type:code' });
        }
        if (this['type'] && (!Object.values(DeviceNametypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<DeviceNametypeCodeType> fhir: Device.deviceName.type:code Required binding to: DeviceNametype' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceDeviceName._fts_dataType = 'DeviceDeviceName';
/**
 * The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
 */
export class DeviceSpecialization extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceSpecialization - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['systemType']) {
            this.systemType = new fhir.CodeableConcept(source.systemType);
        }
        else {
            this.systemType = null;
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['systemType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property systemType:fhir.CodeableConcept fhir: Device.specialization.systemType:CodeableConcept' });
        }
        if (this["systemType"]) {
            issues.push(...this.systemType.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceSpecialization._fts_dataType = 'DeviceSpecialization';
/**
 * The actual design of the device or software version running on the device.
 */
export class DeviceVersion extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceVersion - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['component']) {
            this.component = new fhir.Identifier(source.component);
        }
        if (source['value']) {
            this.value = new fhir.FhirString({ value: source.value });
        }
        else {
            this.value = null;
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirString(source._value);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["component"]) {
            issues.push(...this.component.doModelValidation());
        }
        if (!this['value']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property value:fhir.FhirString fhir: Device.version.value:string' });
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceVersion._fts_dataType = 'DeviceVersion';
/**
 * The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
 */
export class DeviceProperty extends fhir.BackboneElement {
    /**
     * Default constructor for DeviceProperty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['valueQuantity']) {
            this.valueQuantity = source.valueQuantity.map((x) => new fhir.Quantity(x));
        }
        else {
            this.valueQuantity = [];
        }
        if (source['valueCode']) {
            this.valueCode = source.valueCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.valueCode = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Device.property.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["valueQuantity"]) {
            this.valueQuantity.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["valueCode"]) {
            this.valueCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DeviceProperty._fts_dataType = 'DeviceProperty';
/**
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
export class Device extends fhir.DomainResource {
    /**
     * Default constructor for Device - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Device';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['definition']) {
            this.definition = new fhir.Reference(source.definition);
        }
        if (source['udiCarrier']) {
            this.udiCarrier = source.udiCarrier.map((x) => new fhir.DeviceUdiCarrier(x));
        }
        else {
            this.udiCarrier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.statusReason = [];
        }
        if (source['distinctIdentifier']) {
            this.distinctIdentifier = new fhir.FhirString({ value: source.distinctIdentifier });
        }
        if (source['_distinctIdentifier']) {
            if (this.distinctIdentifier) {
                this.distinctIdentifier.addExtendedProperties(source._distinctIdentifier);
            }
            else {
                this.distinctIdentifier = new fhir.FhirString(source._distinctIdentifier);
            }
        }
        if (source['manufacturer']) {
            this.manufacturer = new fhir.FhirString({ value: source.manufacturer });
        }
        if (source['_manufacturer']) {
            if (this.manufacturer) {
                this.manufacturer.addExtendedProperties(source._manufacturer);
            }
            else {
                this.manufacturer = new fhir.FhirString(source._manufacturer);
            }
        }
        if (source['manufactureDate']) {
            this.manufactureDate = new fhir.FhirDateTime({ value: source.manufactureDate });
        }
        if (source['_manufactureDate']) {
            if (this.manufactureDate) {
                this.manufactureDate.addExtendedProperties(source._manufactureDate);
            }
            else {
                this.manufactureDate = new fhir.FhirDateTime(source._manufactureDate);
            }
        }
        if (source['expirationDate']) {
            this.expirationDate = new fhir.FhirDateTime({ value: source.expirationDate });
        }
        if (source['_expirationDate']) {
            if (this.expirationDate) {
                this.expirationDate.addExtendedProperties(source._expirationDate);
            }
            else {
                this.expirationDate = new fhir.FhirDateTime(source._expirationDate);
            }
        }
        if (source['lotNumber']) {
            this.lotNumber = new fhir.FhirString({ value: source.lotNumber });
        }
        if (source['_lotNumber']) {
            if (this.lotNumber) {
                this.lotNumber.addExtendedProperties(source._lotNumber);
            }
            else {
                this.lotNumber = new fhir.FhirString(source._lotNumber);
            }
        }
        if (source['serialNumber']) {
            this.serialNumber = new fhir.FhirString({ value: source.serialNumber });
        }
        if (source['_serialNumber']) {
            if (this.serialNumber) {
                this.serialNumber.addExtendedProperties(source._serialNumber);
            }
            else {
                this.serialNumber = new fhir.FhirString(source._serialNumber);
            }
        }
        if (source['deviceName']) {
            this.deviceName = source.deviceName.map((x) => new fhir.DeviceDeviceName(x));
        }
        else {
            this.deviceName = [];
        }
        if (source['modelNumber']) {
            this.modelNumber = new fhir.FhirString({ value: source.modelNumber });
        }
        if (source['_modelNumber']) {
            if (this.modelNumber) {
                this.modelNumber.addExtendedProperties(source._modelNumber);
            }
            else {
                this.modelNumber = new fhir.FhirString(source._modelNumber);
            }
        }
        if (source['partNumber']) {
            this.partNumber = new fhir.FhirString({ value: source.partNumber });
        }
        if (source['_partNumber']) {
            if (this.partNumber) {
                this.partNumber.addExtendedProperties(source._partNumber);
            }
            else {
                this.partNumber = new fhir.FhirString(source._partNumber);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['specialization']) {
            this.specialization = source.specialization.map((x) => new fhir.DeviceSpecialization(x));
        }
        else {
            this.specialization = [];
        }
        if (source['version']) {
            this.version = source.version.map((x) => new fhir.DeviceVersion(x));
        }
        else {
            this.version = [];
        }
        if (source['property']) {
            this.property = source.property.map((x) => new fhir.DeviceProperty(x));
        }
        else {
            this.property = [];
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        if (source['owner']) {
            this.owner = new fhir.Reference(source.owner);
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactPoint(x));
        }
        else {
            this.contact = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['url']) {
            this.url = new fhir.FhirUri({ value: source.url });
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['safety']) {
            this.safety = source.safety.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.safety = [];
        }
        if (source['parent']) {
            this.parent = new fhir.Reference(source.parent);
        }
    }
    /**
     * Required-bound Value Set for status (Device.status)
     */
    static get statusRequiredCodes() {
        return DeviceStatusCodes;
    }
    /**
     * Extensible-bound Value Set for statusReason (Device.statusReason)
     */
    static get statusReasonExtensibleCodings() {
        return DeviceStatusReasonCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Device" fhir: Device.resourceType:"Device"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation());
        }
        if (this["udiCarrier"]) {
            this.udiCarrier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['status'] && (!Object.values(DeviceStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status?:fhir.FhirCode<DeviceStatusCodeType> fhir: Device.status:code Required binding to: DeviceStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusReason"]) {
            this.statusReason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["distinctIdentifier"]) {
            issues.push(...this.distinctIdentifier.doModelValidation());
        }
        if (this["manufacturer"]) {
            issues.push(...this.manufacturer.doModelValidation());
        }
        if (this["manufactureDate"]) {
            issues.push(...this.manufactureDate.doModelValidation());
        }
        if (this["expirationDate"]) {
            issues.push(...this.expirationDate.doModelValidation());
        }
        if (this["lotNumber"]) {
            issues.push(...this.lotNumber.doModelValidation());
        }
        if (this["serialNumber"]) {
            issues.push(...this.serialNumber.doModelValidation());
        }
        if (this["deviceName"]) {
            this.deviceName.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["modelNumber"]) {
            issues.push(...this.modelNumber.doModelValidation());
        }
        if (this["partNumber"]) {
            issues.push(...this.partNumber.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["specialization"]) {
            this.specialization.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["version"]) {
            this.version.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["property"]) {
            this.property.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["owner"]) {
            issues.push(...this.owner.doModelValidation());
        }
        if (this["contact"]) {
            this.contact.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["url"]) {
            issues.push(...this.url.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["safety"]) {
            this.safety.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["parent"]) {
            issues.push(...this.parent.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Device._fts_dataType = 'Device';
//# sourceMappingURL=data:application/json;base64,