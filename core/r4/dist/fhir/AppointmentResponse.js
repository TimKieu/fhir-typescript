/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { EncounterParticipantTypeCodings } from '../fhirValueSets/EncounterParticipantTypeCodings.js';
import { ParticipationstatusCodings } from '../fhirValueSets/ParticipationstatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { FhirInstant } from './FhirInstant.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirString } from './FhirString.js';

// <auto-generated/>
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
var AppointmentResponse = /** @class */ (function (_super) {
    __extends(AppointmentResponse, _super);
    /**
     * Default constructor for AppointmentResponse - initializes any required elements to null if a value is not provided.
     */
    function AppointmentResponse(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'AppointmentResponse';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['appointment']) {
            _this.appointment = new Reference(source.appointment);
        }
        else {
            _this.appointment = null;
        }
        if (source['start']) {
            _this.start = new FhirInstant({ value: source.start });
        }
        if (source['end']) {
            _this.end = new FhirInstant({ value: source.end });
        }
        if (source['participantType']) {
            _this.participantType = source.participantType.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.participantType = [];
        }
        if (source['actor']) {
            _this.actor = new Reference(source.actor);
        }
        if (source['participantStatus']) {
            _this.participantStatus = source.participantStatus;
        }
        else {
            _this.participantStatus = null;
        }
        if (source['comment']) {
            _this.comment = new FhirString({ value: source.comment });
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for participantType (AppointmentResponse.participantType)
     */
    AppointmentResponse.participantTypeExtensibleCoding = function () {
        return EncounterParticipantTypeCodings;
    };
    /**
     * Required-bound Value Set for participantStatus (AppointmentResponse.participantStatus)
     */
    AppointmentResponse.participantStatusRequiredCoding = function () {
        return ParticipationstatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    AppointmentResponse.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"AppointmentResponse" fhir: AppointmentResponse.resourceType:"AppointmentResponse"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['appointment']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property appointment:fhir.Reference fhir: AppointmentResponse.appointment:Reference', }));
        }
        if (this["appointment"]) {
            (_a = outcome.issue).push.apply(_a, this.appointment.doModelValidation().issue);
        }
        if (this["start"]) {
            (_b = outcome.issue).push.apply(_b, this.start.doModelValidation().issue);
        }
        if (this["end"]) {
            (_c = outcome.issue).push.apply(_c, this.end.doModelValidation().issue);
        }
        if (this["participantType"]) {
            this.participantType.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["actor"]) {
            (_d = outcome.issue).push.apply(_d, this.actor.doModelValidation().issue);
        }
        if (!this['participantStatus']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property participantStatus:ParticipationstatusCodeType fhir: AppointmentResponse.participantStatus:code', }));
        }
        if (this["comment"]) {
            (_e = outcome.issue).push.apply(_e, this.comment.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    AppointmentResponse._fts_dataType = 'AppointmentResponse';
    return AppointmentResponse;
}(DomainResource));

export { AppointmentResponse };
//# sourceMappingURL=AppointmentResponse.js.map
