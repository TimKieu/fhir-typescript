// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: AppointmentResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { EncounterParticipantTypeCodings, } from '../fhirValueSets/EncounterParticipantTypeCodings.js';
// @ts-ignore
import { ParticipationstatusCodes } from '../fhirValueSets/ParticipationstatusCodes.js';
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export class AppointmentResponse extends fhir.DomainResource {
    /**
     * Default constructor for AppointmentResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'AppointmentResponse';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['appointment']) {
            this.appointment = new fhir.Reference(source.appointment);
        }
        else {
            this.appointment = null;
        }
        if (source['start']) {
            this.start = new fhir.FhirInstant({ value: source.start });
        }
        if (source['_start']) {
            if (this.start) {
                this.start.addExtendedProperties(source._start);
            }
            else {
                this.start = new fhir.FhirInstant(source._start);
            }
        }
        if (source['end']) {
            this.end = new fhir.FhirInstant({ value: source.end });
        }
        if (source['_end']) {
            if (this.end) {
                this.end.addExtendedProperties(source._end);
            }
            else {
                this.end = new fhir.FhirInstant(source._end);
            }
        }
        if (source['participantType']) {
            this.participantType = source.participantType.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.participantType = [];
        }
        if (source['actor']) {
            this.actor = new fhir.Reference(source.actor);
        }
        if (source['participantStatus']) {
            this.participantStatus = new fhir.FhirCode({ value: source.participantStatus });
        }
        else {
            this.participantStatus = null;
        }
        if (source['_participantStatus']) {
            if (this.participantStatus) {
                this.participantStatus.addExtendedProperties(source._participantStatus);
            }
            else {
                this.participantStatus = new fhir.FhirCode(source._participantStatus);
            }
        }
        if (source['comment']) {
            this.comment = new fhir.FhirString({ value: source.comment });
        }
        if (source['_comment']) {
            if (this.comment) {
                this.comment.addExtendedProperties(source._comment);
            }
            else {
                this.comment = new fhir.FhirString(source._comment);
            }
        }
    }
    /**
     * Extensible-bound Value Set for participantType (AppointmentResponse.participantType)
     */
    static get participantTypeExtensibleCodings() {
        return EncounterParticipantTypeCodings;
    }
    /**
     * Required-bound Value Set for participantStatus (AppointmentResponse.participantStatus)
     */
    static get participantStatusRequiredCodes() {
        return ParticipationstatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'AppointmentResponse';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: AppointmentResponse.resourceType:"AppointmentResponse"', expression: [expression] });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['appointment']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property appointment fhir: AppointmentResponse.appointment:Reference', expression: [expression] });
        }
        if (this["appointment"]) {
            issues.push(...this.appointment.doModelValidation(expression + '.appointment'));
        }
        if (this["start"]) {
            issues.push(...this.start.doModelValidation(expression + '.start'));
        }
        if (this["end"]) {
            issues.push(...this.end.doModelValidation(expression + '.end'));
        }
        if (this["participantType"]) {
            this.participantType.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.participantType[${i}]`)); });
        }
        if (this["actor"]) {
            issues.push(...this.actor.doModelValidation(expression + '.actor'));
        }
        if (!this['participantStatus']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property participantStatus fhir: AppointmentResponse.participantStatus:code', expression: [expression] });
        }
        if (this['participantStatus'] && (!Object.values(ParticipationstatusCodes).includes(this.participantStatus.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property participantStatus fhir: AppointmentResponse.participantStatus:code Required binding to: Participationstatus', expression: [expression] });
        }
        if (this["participantStatus"]) {
            issues.push(...this.participantStatus.doModelValidation(expression + '.participantStatus'));
        }
        if (this["comment"]) {
            issues.push(...this.comment.doModelValidation(expression + '.comment'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
AppointmentResponse._fts_dataType = 'AppointmentResponse';
//# sourceMappingURL=data:application/json;base64,