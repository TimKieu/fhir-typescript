// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Flag
import * as fhir from '../fhir.js';
// @ts-ignore
import { FlagStatusCodes } from '../fhirValueSets/FlagStatusCodes.js';
/**
 * Prospective warnings of potential issues when providing care to the patient.
 */
export class Flag extends fhir.DomainResource {
    /**
     * Default constructor for Flag - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Flag';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['period']) {
            this.period = new fhir.Period(source.period);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
    }
    /**
     * Required-bound Value Set for status (Flag.status)
     */
    static get statusRequiredCodes() {
        return FlagStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Flag" fhir: Flag.resourceType:"Flag"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<FlagStatusCodeType> fhir: Flag.status:code' });
        }
        if (this['status'] && (!Object.values(FlagStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<FlagStatusCodeType> fhir: Flag.status:code Required binding to: FlagStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: Flag.code:CodeableConcept' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject:fhir.Reference fhir: Flag.subject:Reference' });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["period"]) {
            issues.push(...this.period.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Flag._fts_dataType = 'Flag';
//# sourceMappingURL=data:application/json;base64,