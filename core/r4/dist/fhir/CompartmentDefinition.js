/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ResourceTypesCodings } from '../fhirValueSets/ResourceTypesCodings.js';
import { PublicationStatusCodings } from '../fhirValueSets/PublicationStatusCodings.js';
import { CompartmentTypeCodings } from '../fhirValueSets/CompartmentTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirCode } from './FhirCode.js';
import { FhirString } from './FhirString.js';
import { FhirUri } from './FhirUri.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDateTime } from './FhirDateTime.js';
import { ContactDetail } from './ContactDetail.js';
import { FhirMarkdown } from './FhirMarkdown.js';
import { UsageContext } from './UsageContext.js';

// <auto-generated/>
/**
 * Information about how a resource is related to the compartment.
 */
var CompartmentDefinitionResource = /** @class */ (function (_super) {
    __extends(CompartmentDefinitionResource, _super);
    /**
     * Default constructor for CompartmentDefinitionResource - initializes any required elements to null if a value is not provided.
     */
    function CompartmentDefinitionResource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new FhirCode({ value: source.code });
        }
        else {
            _this.code = null;
        }
        if (source['param']) {
            _this.param = source.param.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.param = [];
        }
        if (source['documentation']) {
            _this.documentation = new FhirString({ value: source.documentation });
        }
        return _this;
    }
    /**
     * Required-bound Value Set for code (CompartmentDefinition.resource.code)
     */
    CompartmentDefinitionResource.codeRequiredCoding = function () {
        return ResourceTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CompartmentDefinitionResource.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.FhirCode fhir: CompartmentDefinition.resource.code:code', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["param"]) {
            this.param.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["documentation"]) {
            (_b = outcome.issue).push.apply(_b, this.documentation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CompartmentDefinitionResource._fts_dataType = 'CompartmentDefinitionResource';
    return CompartmentDefinitionResource;
}(BackboneElement));
/**
 * A compartment definition that defines how resources are accessed on a server.
 */
var CompartmentDefinition = /** @class */ (function (_super) {
    __extends(CompartmentDefinition, _super);
    /**
     * Default constructor for CompartmentDefinition - initializes any required elements to null if a value is not provided.
     */
    function CompartmentDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'CompartmentDefinition';
        if (source['url']) {
            _this.url = new FhirUri({ value: source.url });
        }
        else {
            _this.url = null;
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        else {
            _this.name = null;
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['experimental']) {
            _this.experimental = new FhirBoolean({ value: source.experimental });
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['publisher']) {
            _this.publisher = new FhirString({ value: source.publisher });
        }
        if (source['contact']) {
            _this.contact = source.contact.map(function (x) { return new ContactDetail(x); });
        }
        else {
            _this.contact = [];
        }
        if (source['description']) {
            _this.description = new FhirMarkdown({ value: source.description });
        }
        if (source['useContext']) {
            _this.useContext = source.useContext.map(function (x) { return new UsageContext(x); });
        }
        else {
            _this.useContext = [];
        }
        if (source['purpose']) {
            _this.purpose = new FhirMarkdown({ value: source.purpose });
        }
        if (source['code']) {
            _this.code = source.code;
        }
        else {
            _this.code = null;
        }
        if (source['search']) {
            _this.search = new FhirBoolean({ value: source.search });
        }
        else {
            _this.search = null;
        }
        if (source['resource']) {
            _this.resource = source.resource.map(function (x) { return new CompartmentDefinitionResource(x); });
        }
        else {
            _this.resource = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (CompartmentDefinition.status)
     */
    CompartmentDefinition.statusRequiredCoding = function () {
        return PublicationStatusCodings;
    };
    /**
     * Required-bound Value Set for code (CompartmentDefinition.code)
     */
    CompartmentDefinition.codeRequiredCoding = function () {
        return CompartmentTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    CompartmentDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"CompartmentDefinition" fhir: CompartmentDefinition.resourceType:"CompartmentDefinition"', }));
        }
        if (!this['url']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property url:fhir.FhirUri fhir: CompartmentDefinition.url:uri', }));
        }
        if (this["url"]) {
            (_a = outcome.issue).push.apply(_a, this.url.doModelValidation().issue);
        }
        if (this["version"]) {
            (_b = outcome.issue).push.apply(_b, this.version.doModelValidation().issue);
        }
        if (!this['name']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property name:fhir.FhirString fhir: CompartmentDefinition.name:string', }));
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: CompartmentDefinition.status:code', }));
        }
        if (this["experimental"]) {
            (_d = outcome.issue).push.apply(_d, this.experimental.doModelValidation().issue);
        }
        if (this["date"]) {
            (_e = outcome.issue).push.apply(_e, this.date.doModelValidation().issue);
        }
        if (this["publisher"]) {
            (_f = outcome.issue).push.apply(_f, this.publisher.doModelValidation().issue);
        }
        if (this["contact"]) {
            this.contact.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["description"]) {
            (_g = outcome.issue).push.apply(_g, this.description.doModelValidation().issue);
        }
        if (this["useContext"]) {
            this.useContext.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["purpose"]) {
            (_h = outcome.issue).push.apply(_h, this.purpose.doModelValidation().issue);
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:CompartmentTypeCodeType fhir: CompartmentDefinition.code:code', }));
        }
        if (!this['search']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property search:fhir.FhirBoolean fhir: CompartmentDefinition.search:boolean', }));
        }
        if (this["search"]) {
            (_j = outcome.issue).push.apply(_j, this.search.doModelValidation().issue);
        }
        if (this["resource"]) {
            this.resource.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    CompartmentDefinition._fts_dataType = 'CompartmentDefinition';
    return CompartmentDefinition;
}(DomainResource));

export { CompartmentDefinition, CompartmentDefinitionResource };
//# sourceMappingURL=CompartmentDefinition.js.map
