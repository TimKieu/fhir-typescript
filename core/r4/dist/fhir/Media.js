/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { EventStatusCodings } from '../fhirValueSets/EventStatusCodings.js';
import { MediaTypeCodings } from '../fhirValueSets/MediaTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { FhirInstant } from './FhirInstant.js';
import { FhirString } from './FhirString.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { FhirDecimal } from './FhirDecimal.js';
import { Attachment } from './Attachment.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
var Media = /** @class */ (function (_super) {
    __extends(Media, _super);
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    function Media(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Media';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['modality']) {
            _this.modality = new CodeableConcept(source.modality);
        }
        if (source['view']) {
            _this.view = new CodeableConcept(source.view);
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['created']) {
            _this.created = source.created;
        }
        else if (source['createdDateTime']) {
            _this.created = new FhirDateTime({ value: source.createdDateTime });
        }
        else if (source['createdPeriod']) {
            _this.created = new Period(source.createdPeriod);
        }
        if (source['issued']) {
            _this.issued = new FhirInstant({ value: source.issued });
        }
        if (source['operator']) {
            _this.operator = new Reference(source.operator);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['bodySite']) {
            _this.bodySite = new CodeableConcept(source.bodySite);
        }
        if (source['deviceName']) {
            _this.deviceName = new FhirString({ value: source.deviceName });
        }
        if (source['device']) {
            _this.device = new Reference(source.device);
        }
        if (source['height']) {
            _this.height = new FhirPositiveInt({ value: source.height });
        }
        if (source['width']) {
            _this.width = new FhirPositiveInt({ value: source.width });
        }
        if (source['frames']) {
            _this.frames = new FhirPositiveInt({ value: source.frames });
        }
        if (source['duration']) {
            _this.duration = new FhirDecimal({ value: source.duration });
        }
        if (source['content']) {
            _this.content = new Attachment(source.content);
        }
        else {
            _this.content = null;
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Media.status)
     */
    Media.statusRequiredCoding = function () {
        return EventStatusCodings;
    };
    /**
     * Extensible-bound Value Set for type (Media.type)
     */
    Media.typeExtensibleCoding = function () {
        return MediaTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Media.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Media" fhir: Media.resourceType:"Media"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:EventStatusCodeType fhir: Media.status:code', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["modality"]) {
            (_b = outcome.issue).push.apply(_b, this.modality.doModelValidation().issue);
        }
        if (this["view"]) {
            (_c = outcome.issue).push.apply(_c, this.view.doModelValidation().issue);
        }
        if (this["subject"]) {
            (_d = outcome.issue).push.apply(_d, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_e = outcome.issue).push.apply(_e, this.encounter.doModelValidation().issue);
        }
        if (this["issued"]) {
            (_f = outcome.issue).push.apply(_f, this.issued.doModelValidation().issue);
        }
        if (this["operator"]) {
            (_g = outcome.issue).push.apply(_g, this.operator.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["bodySite"]) {
            (_h = outcome.issue).push.apply(_h, this.bodySite.doModelValidation().issue);
        }
        if (this["deviceName"]) {
            (_j = outcome.issue).push.apply(_j, this.deviceName.doModelValidation().issue);
        }
        if (this["device"]) {
            (_k = outcome.issue).push.apply(_k, this.device.doModelValidation().issue);
        }
        if (this["height"]) {
            (_l = outcome.issue).push.apply(_l, this.height.doModelValidation().issue);
        }
        if (this["width"]) {
            (_m = outcome.issue).push.apply(_m, this.width.doModelValidation().issue);
        }
        if (this["frames"]) {
            (_o = outcome.issue).push.apply(_o, this.frames.doModelValidation().issue);
        }
        if (this["duration"]) {
            (_p = outcome.issue).push.apply(_p, this.duration.doModelValidation().issue);
        }
        if (!this['content']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property content:fhir.Attachment fhir: Media.content:Attachment', }));
        }
        if (this["content"]) {
            (_q = outcome.issue).push.apply(_q, this.content.doModelValidation().issue);
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Media._fts_dataType = 'Media';
    /**
     * Internal flag to properly serialize choice-type element Media.created[x]
     */
    Media._fts_createdIsChoice = true;
    return Media;
}(DomainResource));

export { Media };
//# sourceMappingURL=Media.js.map
