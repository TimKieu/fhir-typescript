// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Media
import * as fhir from '../fhir.js';
// @ts-ignore
import { EventStatusCodes } from '../fhirValueSets/EventStatusCodes.js';
// @ts-ignore
import { MediaTypeCodings, } from '../fhirValueSets/MediaTypeCodings.js';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource {
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Media';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['modality']) {
            this.modality = new fhir.CodeableConcept(source.modality);
        }
        if (source['view']) {
            this.view = new fhir.CodeableConcept(source.view);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else if (source['createdDateTime']) {
            this.created = new fhir.FhirDateTime({ value: source.createdDateTime });
        }
        else if (source['createdPeriod']) {
            this.created = new fhir.Period(source.createdPeriod);
        }
        if (source['issued']) {
            this.issued = new fhir.FhirInstant({ value: source.issued });
        }
        if (source['operator']) {
            this.operator = new fhir.Reference(source.operator);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['deviceName']) {
            this.deviceName = new fhir.FhirString({ value: source.deviceName });
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device);
        }
        if (source['height']) {
            this.height = new fhir.FhirPositiveInt({ value: source.height });
        }
        if (source['width']) {
            this.width = new fhir.FhirPositiveInt({ value: source.width });
        }
        if (source['frames']) {
            this.frames = new fhir.FhirPositiveInt({ value: source.frames });
        }
        if (source['duration']) {
            this.duration = new fhir.FhirDecimal({ value: source.duration });
        }
        if (source['content']) {
            this.content = new fhir.Attachment(source.content);
        }
        else {
            this.content = null;
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Required-bound Value Set for status (Media.status)
     */
    static get statusRequiredCodes() {
        return EventStatusCodes;
    }
    /**
     * Extensible-bound Value Set for type (Media.type)
     */
    static get typeExtensibleCodings() {
        return MediaTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Media" fhir: Media.resourceType:"Media"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<EventStatusCodeType> fhir: Media.status:code' });
        }
        if (this['status'] && (!Object.values(EventStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<EventStatusCodeType> fhir: Media.status:code Required binding to: EventStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["modality"]) {
            issues.push(...this.modality.doModelValidation());
        }
        if (this["view"]) {
            issues.push(...this.view.doModelValidation());
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["issued"]) {
            issues.push(...this.issued.doModelValidation());
        }
        if (this["operator"]) {
            issues.push(...this.operator.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            issues.push(...this.bodySite.doModelValidation());
        }
        if (this["deviceName"]) {
            issues.push(...this.deviceName.doModelValidation());
        }
        if (this["device"]) {
            issues.push(...this.device.doModelValidation());
        }
        if (this["height"]) {
            issues.push(...this.height.doModelValidation());
        }
        if (this["width"]) {
            issues.push(...this.width.doModelValidation());
        }
        if (this["frames"]) {
            issues.push(...this.frames.doModelValidation());
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation());
        }
        if (!this['content']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property content:fhir.Attachment fhir: Media.content:Attachment' });
        }
        if (this["content"]) {
            issues.push(...this.content.doModelValidation());
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Media._fts_dataType = 'Media';
/**
 * Internal flag to properly serialize choice-type element Media.created[x]
 */
Media._fts_createdIsChoice = true;
//# sourceMappingURL=data:application/json;base64,