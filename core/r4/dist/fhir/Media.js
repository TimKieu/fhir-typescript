// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Media
import * as fhir from '../fhir.js';
// @ts-ignore
import { EventStatusVsValidation } from '../fhirValueSets/EventStatusVsValidation.js';
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export class Media extends fhir.DomainResource {
    /**
     * Default constructor for Media - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Media';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.partOf = [];
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['modality']) {
            this.modality = new fhir.CodeableConcept(source.modality, options);
        }
        if (source['view']) {
            this.view = new fhir.CodeableConcept(source.view, options);
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject, options);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter, options);
        }
        if (source['created']) {
            this.created = source.created;
        }
        else if (source['createdDateTime'] !== undefined) {
            this.created = new fhir.FhirDateTime({ value: source.createdDateTime }, options);
        }
        else if (source['createdPeriod']) {
            this.created = new fhir.Period(source.createdPeriod, options);
        }
        if (source['issued'] !== undefined) {
            this.issued = new fhir.FhirInstant({ value: source.issued }, options);
        }
        if (source['_issued']) {
            if (this.issued) {
                this.issued.addExtendedProperties(source._issued);
            }
            else {
                this.issued = new fhir.FhirInstant(source._issued, options);
            }
        }
        if (source['operator']) {
            this.operator = new fhir.Reference(source.operator, options);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.reasonCode = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite, options);
        }
        if (source['deviceName'] !== undefined) {
            this.deviceName = new fhir.FhirString({ value: source.deviceName }, options);
        }
        if (source['_deviceName']) {
            if (this.deviceName) {
                this.deviceName.addExtendedProperties(source._deviceName);
            }
            else {
                this.deviceName = new fhir.FhirString(source._deviceName, options);
            }
        }
        if (source['device']) {
            this.device = new fhir.Reference(source.device, options);
        }
        if (source['height'] !== undefined) {
            this.height = new fhir.FhirPositiveInt({ value: source.height }, options);
        }
        if (source['_height']) {
            if (this.height) {
                this.height.addExtendedProperties(source._height);
            }
            else {
                this.height = new fhir.FhirPositiveInt(source._height, options);
            }
        }
        if (source['width'] !== undefined) {
            this.width = new fhir.FhirPositiveInt({ value: source.width }, options);
        }
        if (source['_width']) {
            if (this.width) {
                this.width.addExtendedProperties(source._width);
            }
            else {
                this.width = new fhir.FhirPositiveInt(source._width, options);
            }
        }
        if (source['frames'] !== undefined) {
            this.frames = new fhir.FhirPositiveInt({ value: source.frames }, options);
        }
        if (source['_frames']) {
            if (this.frames) {
                this.frames.addExtendedProperties(source._frames);
            }
            else {
                this.frames = new fhir.FhirPositiveInt(source._frames, options);
            }
        }
        if (source['duration'] !== undefined) {
            this.duration = new fhir.FhirDecimal({ value: source.duration }, options);
        }
        if (source['_duration']) {
            if (this.duration) {
                this.duration.addExtendedProperties(source._duration);
            }
            else {
                this.duration = new fhir.FhirDecimal(source._duration, options);
            }
        }
        if (source['content']) {
            this.content = new fhir.Attachment(source.content, options);
        }
        else {
            this.content = null;
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'Media';
        }
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOA('basedOn', exp));
        iss.push(...this.vOA('partOf', exp));
        iss.push(...this.vRSV('status', exp, 'EventStatus', EventStatusVsValidation, 'r'));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('modality', exp));
        iss.push(...this.vOS('view', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('created', exp));
        iss.push(...this.vOS('issued', exp));
        iss.push(...this.vOS('operator', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOS('bodySite', exp));
        iss.push(...this.vOS('deviceName', exp));
        iss.push(...this.vOS('device', exp));
        iss.push(...this.vOS('height', exp));
        iss.push(...this.vOS('width', exp));
        iss.push(...this.vOS('frames', exp));
        iss.push(...this.vOS('duration', exp));
        iss.push(...this.vRS('content', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Media._fts_dataType = 'Media';
/**
 * Internal flag to properly serialize choice-type element Media.created[x]
 */
Media._fts_createdIsChoice = true;
//# sourceMappingURL=data:application/json;base64,