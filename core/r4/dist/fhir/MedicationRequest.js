// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationRequest
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationrequestStatusCodes } from '../fhirValueSets/MedicationrequestStatusCodes.js';
// @ts-ignore
import { MedicationrequestIntentCodes } from '../fhirValueSets/MedicationrequestIntentCodes.js';
// @ts-ignore
import { RequestPriorityCodes } from '../fhirValueSets/RequestPriorityCodes.js';
/**
 * If populating this element, either the quantity or the duration must be included.
 */
export class MedicationRequestDispenseRequestInitialFill extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequestInitialFill - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['duration']) {
            this.duration = new fhir.Duration(source.duration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["duration"]) {
            issues.push(...this.duration.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestDispenseRequestInitialFill._fts_dataType = 'MedicationRequestDispenseRequestInitialFill';
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export class MedicationRequestDispenseRequest extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestDispenseRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['initialFill']) {
            this.initialFill = new fhir.MedicationRequestDispenseRequestInitialFill(source.initialFill);
        }
        if (source['dispenseInterval']) {
            this.dispenseInterval = new fhir.Duration(source.dispenseInterval);
        }
        if (source['validityPeriod']) {
            this.validityPeriod = new fhir.Period(source.validityPeriod);
        }
        if (source['numberOfRepeatsAllowed']) {
            this.numberOfRepeatsAllowed = new fhir.FhirUnsignedInt({ value: source.numberOfRepeatsAllowed });
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['expectedSupplyDuration']) {
            this.expectedSupplyDuration = new fhir.Duration(source.expectedSupplyDuration);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["initialFill"]) {
            issues.push(...this.initialFill.doModelValidation());
        }
        if (this["dispenseInterval"]) {
            issues.push(...this.dispenseInterval.doModelValidation());
        }
        if (this["validityPeriod"]) {
            issues.push(...this.validityPeriod.doModelValidation());
        }
        if (this["numberOfRepeatsAllowed"]) {
            issues.push(...this.numberOfRepeatsAllowed.doModelValidation());
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["expectedSupplyDuration"]) {
            issues.push(...this.expectedSupplyDuration.doModelValidation());
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestDispenseRequest._fts_dataType = 'MedicationRequestDispenseRequest';
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export class MedicationRequestSubstitution extends fhir.BackboneElement {
    /**
     * Default constructor for MedicationRequestSubstitution - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedBoolean']) {
            this.allowed = new fhir.FhirBoolean({ value: source.allowedBoolean });
        }
        else if (source['allowedCodeableConcept']) {
            this.allowed = new fhir.CodeableConcept(source.allowedCodeableConcept);
        }
        else {
            this.allowed = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['allowed']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property allowed: fhir: MedicationRequest.substitution.allowed[x]:' });
        }
        if (this["reason"]) {
            issues.push(...this.reason.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequestSubstitution._fts_dataType = 'MedicationRequestSubstitution';
/**
 * Internal flag to properly serialize choice-type element MedicationRequest.substitution.allowed[x]
 */
MedicationRequestSubstitution._fts_allowedIsChoice = true;
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
export class MedicationRequest extends fhir.DomainResource {
    /**
     * Default constructor for MedicationRequest - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationRequest';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['intent']) {
            this.intent = new fhir.FhirCode({ value: source.intent });
        }
        else {
            this.intent = null;
        }
        if (source['category']) {
            this.category = source.category.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.category = [];
        }
        if (source['priority']) {
            this.priority = new fhir.FhirCode({ value: source.priority });
        }
        if (source['doNotPerform']) {
            this.doNotPerform = new fhir.FhirBoolean({ value: source.doNotPerform });
        }
        if (source['reported']) {
            this.reported = source.reported;
        }
        else if (source['reportedBoolean']) {
            this.reported = new fhir.FhirBoolean({ value: source.reportedBoolean });
        }
        else if (source['reportedReference']) {
            this.reported = new fhir.Reference(source.reportedReference);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['supportingInformation']) {
            this.supportingInformation = source.supportingInformation.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInformation = [];
        }
        if (source['authoredOn']) {
            this.authoredOn = new fhir.FhirDateTime({ value: source.authoredOn });
        }
        if (source['requester']) {
            this.requester = new fhir.Reference(source.requester);
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['performerType']) {
            this.performerType = new fhir.CodeableConcept(source.performerType);
        }
        if (source['recorder']) {
            this.recorder = new fhir.Reference(source.recorder);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['instantiatesCanonical']) {
            this.instantiatesCanonical = source.instantiatesCanonical.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            this.instantiatesUri = source.instantiatesUri.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.instantiatesUri = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['groupIdentifier']) {
            this.groupIdentifier = new fhir.Identifier(source.groupIdentifier);
        }
        if (source['courseOfTherapyType']) {
            this.courseOfTherapyType = new fhir.CodeableConcept(source.courseOfTherapyType);
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.Reference(x));
        }
        else {
            this.insurance = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['dosageInstruction']) {
            this.dosageInstruction = source.dosageInstruction.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosageInstruction = [];
        }
        if (source['dispenseRequest']) {
            this.dispenseRequest = new fhir.MedicationRequestDispenseRequest(source.dispenseRequest);
        }
        if (source['substitution']) {
            this.substitution = new fhir.MedicationRequestSubstitution(source.substitution);
        }
        if (source['priorPrescription']) {
            this.priorPrescription = new fhir.Reference(source.priorPrescription);
        }
        if (source['detectedIssue']) {
            this.detectedIssue = source.detectedIssue.map((x) => new fhir.Reference(x));
        }
        else {
            this.detectedIssue = [];
        }
        if (source['eventHistory']) {
            this.eventHistory = source.eventHistory.map((x) => new fhir.Reference(x));
        }
        else {
            this.eventHistory = [];
        }
    }
    /**
     * Required-bound Value Set for status (MedicationRequest.status)
     */
    static get statusRequiredCodes() {
        return MedicationrequestStatusCodes;
    }
    /**
     * Required-bound Value Set for intent (MedicationRequest.intent)
     */
    static get intentRequiredCodes() {
        return MedicationrequestIntentCodes;
    }
    /**
     * Required-bound Value Set for priority (MedicationRequest.priority)
     */
    static get priorityRequiredCodes() {
        return RequestPriorityCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicationRequest" fhir: MedicationRequest.resourceType:"MedicationRequest"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<MedicationrequestStatusCodeType> fhir: MedicationRequest.status:code' });
        }
        if (this['status'] && (!Object.values(MedicationrequestStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<MedicationrequestStatusCodeType> fhir: MedicationRequest.status:code Required binding to: MedicationrequestStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusReason"]) {
            issues.push(...this.statusReason.doModelValidation());
        }
        if (!this['intent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property intent:fhir.FhirCode<MedicationrequestIntentCodeType> fhir: MedicationRequest.intent:code' });
        }
        if (this['intent'] && (!Object.values(MedicationrequestIntentCodes).includes(this.intent))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property intent:fhir.FhirCode<MedicationrequestIntentCodeType> fhir: MedicationRequest.intent:code Required binding to: MedicationrequestIntent' });
        }
        if (this["intent"]) {
            issues.push(...this.intent.doModelValidation());
        }
        if (this["category"]) {
            this.category.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this['priority'] && (!Object.values(RequestPriorityCodes).includes(this.priority))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property priority?:fhir.FhirCode<RequestPriorityCodeType> fhir: MedicationRequest.priority:code Required binding to: RequestPriority' });
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation());
        }
        if (this["doNotPerform"]) {
            issues.push(...this.doNotPerform.doModelValidation());
        }
        if (!this['medication']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property medication: fhir: MedicationRequest.medication[x]:' });
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject:fhir.Reference fhir: MedicationRequest.subject:Reference' });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["authoredOn"]) {
            issues.push(...this.authoredOn.doModelValidation());
        }
        if (this["requester"]) {
            issues.push(...this.requester.doModelValidation());
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation());
        }
        if (this["performerType"]) {
            issues.push(...this.performerType.doModelValidation());
        }
        if (this["recorder"]) {
            issues.push(...this.recorder.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["groupIdentifier"]) {
            issues.push(...this.groupIdentifier.doModelValidation());
        }
        if (this["courseOfTherapyType"]) {
            issues.push(...this.courseOfTherapyType.doModelValidation());
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["dosageInstruction"]) {
            this.dosageInstruction.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["dispenseRequest"]) {
            issues.push(...this.dispenseRequest.doModelValidation());
        }
        if (this["substitution"]) {
            issues.push(...this.substitution.doModelValidation());
        }
        if (this["priorPrescription"]) {
            issues.push(...this.priorPrescription.doModelValidation());
        }
        if (this["detectedIssue"]) {
            this.detectedIssue.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationRequest._fts_dataType = 'MedicationRequest';
/**
 * Internal flag to properly serialize choice-type element MedicationRequest.reported[x]
 */
MedicationRequest._fts_reportedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationRequest.medication[x]
 */
MedicationRequest._fts_medicationIsChoice = true;
//# sourceMappingURL=data:application/json;base64,