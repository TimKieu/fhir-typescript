/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MedicationrequestStatusCodings } from '../fhirValueSets/MedicationrequestStatusCodings.js';
import { MedicationrequestIntentCodings } from '../fhirValueSets/MedicationrequestIntentCodings.js';
import { RequestPriorityCodings } from '../fhirValueSets/RequestPriorityCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Quantity } from './Quantity.js';
import { Duration } from './Duration.js';
import { Period } from './Period.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';
import { Reference } from './Reference.js';
import { FhirBoolean } from './FhirBoolean.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirCanonical } from './FhirCanonical.js';
import { FhirUri } from './FhirUri.js';
import { Annotation } from './Annotation.js';
import { Dosage } from './Dosage.js';

// <auto-generated/>
/**
 * If populating this element, either the quantity or the duration must be included.
 */
var MedicationRequestDispenseRequestInitialFill = /** @class */ (function (_super) {
    __extends(MedicationRequestDispenseRequestInitialFill, _super);
    /**
     * Default constructor for MedicationRequestDispenseRequestInitialFill - initializes any required elements to null if a value is not provided.
     */
    function MedicationRequestDispenseRequestInitialFill(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['duration']) {
            _this.duration = new Duration(source.duration);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationRequestDispenseRequestInitialFill.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["quantity"]) {
            (_a = outcome.issue).push.apply(_a, this.quantity.doModelValidation().issue);
        }
        if (this["duration"]) {
            (_b = outcome.issue).push.apply(_b, this.duration.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationRequestDispenseRequestInitialFill._fts_dataType = 'MedicationRequestDispenseRequestInitialFill';
    return MedicationRequestDispenseRequestInitialFill;
}(BackboneElement));
/**
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
var MedicationRequestDispenseRequest = /** @class */ (function (_super) {
    __extends(MedicationRequestDispenseRequest, _super);
    /**
     * Default constructor for MedicationRequestDispenseRequest - initializes any required elements to null if a value is not provided.
     */
    function MedicationRequestDispenseRequest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['initialFill']) {
            _this.initialFill = new MedicationRequestDispenseRequestInitialFill(source.initialFill);
        }
        if (source['dispenseInterval']) {
            _this.dispenseInterval = new Duration(source.dispenseInterval);
        }
        if (source['validityPeriod']) {
            _this.validityPeriod = new Period(source.validityPeriod);
        }
        if (source['numberOfRepeatsAllowed']) {
            _this.numberOfRepeatsAllowed = new FhirUnsignedInt({ value: source.numberOfRepeatsAllowed });
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['expectedSupplyDuration']) {
            _this.expectedSupplyDuration = new Duration(source.expectedSupplyDuration);
        }
        if (source['performer']) {
            _this.performer = new Reference(source.performer);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationRequestDispenseRequest.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["initialFill"]) {
            (_a = outcome.issue).push.apply(_a, this.initialFill.doModelValidation().issue);
        }
        if (this["dispenseInterval"]) {
            (_b = outcome.issue).push.apply(_b, this.dispenseInterval.doModelValidation().issue);
        }
        if (this["validityPeriod"]) {
            (_c = outcome.issue).push.apply(_c, this.validityPeriod.doModelValidation().issue);
        }
        if (this["numberOfRepeatsAllowed"]) {
            (_d = outcome.issue).push.apply(_d, this.numberOfRepeatsAllowed.doModelValidation().issue);
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["expectedSupplyDuration"]) {
            (_f = outcome.issue).push.apply(_f, this.expectedSupplyDuration.doModelValidation().issue);
        }
        if (this["performer"]) {
            (_g = outcome.issue).push.apply(_g, this.performer.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationRequestDispenseRequest._fts_dataType = 'MedicationRequestDispenseRequest';
    return MedicationRequestDispenseRequest;
}(BackboneElement));
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
var MedicationRequestSubstitution = /** @class */ (function (_super) {
    __extends(MedicationRequestSubstitution, _super);
    /**
     * Default constructor for MedicationRequestSubstitution - initializes any required elements to null if a value is not provided.
     */
    function MedicationRequestSubstitution(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['allowed']) {
            _this.allowed = source.allowed;
        }
        else if (source['allowedBoolean']) {
            _this.allowed = new FhirBoolean({ value: source.allowedBoolean });
        }
        else if (source['allowedCodeableConcept']) {
            _this.allowed = new CodeableConcept(source.allowedCodeableConcept);
        }
        else {
            _this.allowed = null;
        }
        if (source['reason']) {
            _this.reason = new CodeableConcept(source.reason);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationRequestSubstitution.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['allowed']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property allowed: fhir: MedicationRequest.substitution.allowed[x]:', }));
        }
        if (this["reason"]) {
            (_a = outcome.issue).push.apply(_a, this.reason.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationRequestSubstitution._fts_dataType = 'MedicationRequestSubstitution';
    /**
     * Internal flag to properly serialize choice-type element MedicationRequest.substitution.allowed[x]
     */
    MedicationRequestSubstitution._fts_allowedIsChoice = true;
    return MedicationRequestSubstitution;
}(BackboneElement));
/**
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
var MedicationRequest = /** @class */ (function (_super) {
    __extends(MedicationRequest, _super);
    /**
     * Default constructor for MedicationRequest - initializes any required elements to null if a value is not provided.
     */
    function MedicationRequest(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicationRequest';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = new CodeableConcept(source.statusReason);
        }
        if (source['intent']) {
            _this.intent = source.intent;
        }
        else {
            _this.intent = null;
        }
        if (source['category']) {
            _this.category = source.category.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.category = [];
        }
        if (source['priority']) {
            _this.priority = source.priority;
        }
        if (source['doNotPerform']) {
            _this.doNotPerform = new FhirBoolean({ value: source.doNotPerform });
        }
        if (source['reported']) {
            _this.reported = source.reported;
        }
        else if (source['reportedBoolean']) {
            _this.reported = new FhirBoolean({ value: source.reportedBoolean });
        }
        else if (source['reportedReference']) {
            _this.reported = new Reference(source.reportedReference);
        }
        if (source['medication']) {
            _this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            _this.medication = new CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            _this.medication = new Reference(source.medicationReference);
        }
        else {
            _this.medication = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['supportingInformation']) {
            _this.supportingInformation = source.supportingInformation.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingInformation = [];
        }
        if (source['authoredOn']) {
            _this.authoredOn = new FhirDateTime({ value: source.authoredOn });
        }
        if (source['requester']) {
            _this.requester = new Reference(source.requester);
        }
        if (source['performer']) {
            _this.performer = new Reference(source.performer);
        }
        if (source['performerType']) {
            _this.performerType = new CodeableConcept(source.performerType);
        }
        if (source['recorder']) {
            _this.recorder = new Reference(source.recorder);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['instantiatesCanonical']) {
            _this.instantiatesCanonical = source.instantiatesCanonical.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.instantiatesCanonical = [];
        }
        if (source['instantiatesUri']) {
            _this.instantiatesUri = source.instantiatesUri.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.instantiatesUri = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['groupIdentifier']) {
            _this.groupIdentifier = new Identifier(source.groupIdentifier);
        }
        if (source['courseOfTherapyType']) {
            _this.courseOfTherapyType = new CodeableConcept(source.courseOfTherapyType);
        }
        if (source['insurance']) {
            _this.insurance = source.insurance.map(function (x) { return new Reference(x); });
        }
        else {
            _this.insurance = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['dosageInstruction']) {
            _this.dosageInstruction = source.dosageInstruction.map(function (x) { return new Dosage(x); });
        }
        else {
            _this.dosageInstruction = [];
        }
        if (source['dispenseRequest']) {
            _this.dispenseRequest = new MedicationRequestDispenseRequest(source.dispenseRequest);
        }
        if (source['substitution']) {
            _this.substitution = new MedicationRequestSubstitution(source.substitution);
        }
        if (source['priorPrescription']) {
            _this.priorPrescription = new Reference(source.priorPrescription);
        }
        if (source['detectedIssue']) {
            _this.detectedIssue = source.detectedIssue.map(function (x) { return new Reference(x); });
        }
        else {
            _this.detectedIssue = [];
        }
        if (source['eventHistory']) {
            _this.eventHistory = source.eventHistory.map(function (x) { return new Reference(x); });
        }
        else {
            _this.eventHistory = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (MedicationRequest.status)
     */
    MedicationRequest.statusRequiredCoding = function () {
        return MedicationrequestStatusCodings;
    };
    /**
     * Required-bound Value Set for intent (MedicationRequest.intent)
     */
    MedicationRequest.intentRequiredCoding = function () {
        return MedicationrequestIntentCodings;
    };
    /**
     * Required-bound Value Set for priority (MedicationRequest.priority)
     */
    MedicationRequest.priorityRequiredCoding = function () {
        return RequestPriorityCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationRequest.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicationRequest" fhir: MedicationRequest.resourceType:"MedicationRequest"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:MedicationrequestStatusCodeType fhir: MedicationRequest.status:code', }));
        }
        if (this["statusReason"]) {
            (_a = outcome.issue).push.apply(_a, this.statusReason.doModelValidation().issue);
        }
        if (!this['intent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property intent:MedicationrequestIntentCodeType fhir: MedicationRequest.intent:code', }));
        }
        if (this["category"]) {
            this.category.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["doNotPerform"]) {
            (_b = outcome.issue).push.apply(_b, this.doNotPerform.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property medication: fhir: MedicationRequest.medication[x]:', }));
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: MedicationRequest.subject:Reference', }));
        }
        if (this["subject"]) {
            (_c = outcome.issue).push.apply(_c, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_d = outcome.issue).push.apply(_d, this.encounter.doModelValidation().issue);
        }
        if (this["supportingInformation"]) {
            this.supportingInformation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["authoredOn"]) {
            (_e = outcome.issue).push.apply(_e, this.authoredOn.doModelValidation().issue);
        }
        if (this["requester"]) {
            (_f = outcome.issue).push.apply(_f, this.requester.doModelValidation().issue);
        }
        if (this["performer"]) {
            (_g = outcome.issue).push.apply(_g, this.performer.doModelValidation().issue);
        }
        if (this["performerType"]) {
            (_h = outcome.issue).push.apply(_h, this.performerType.doModelValidation().issue);
        }
        if (this["recorder"]) {
            (_j = outcome.issue).push.apply(_j, this.recorder.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesCanonical"]) {
            this.instantiatesCanonical.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["instantiatesUri"]) {
            this.instantiatesUri.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["groupIdentifier"]) {
            (_k = outcome.issue).push.apply(_k, this.groupIdentifier.doModelValidation().issue);
        }
        if (this["courseOfTherapyType"]) {
            (_l = outcome.issue).push.apply(_l, this.courseOfTherapyType.doModelValidation().issue);
        }
        if (this["insurance"]) {
            this.insurance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dosageInstruction"]) {
            this.dosageInstruction.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dispenseRequest"]) {
            (_m = outcome.issue).push.apply(_m, this.dispenseRequest.doModelValidation().issue);
        }
        if (this["substitution"]) {
            (_o = outcome.issue).push.apply(_o, this.substitution.doModelValidation().issue);
        }
        if (this["priorPrescription"]) {
            (_p = outcome.issue).push.apply(_p, this.priorPrescription.doModelValidation().issue);
        }
        if (this["detectedIssue"]) {
            this.detectedIssue.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["eventHistory"]) {
            this.eventHistory.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationRequest._fts_dataType = 'MedicationRequest';
    /**
     * Internal flag to properly serialize choice-type element MedicationRequest.reported[x]
     */
    MedicationRequest._fts_reportedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element MedicationRequest.medication[x]
     */
    MedicationRequest._fts_medicationIsChoice = true;
    return MedicationRequest;
}(DomainResource));

export { MedicationRequest, MedicationRequestDispenseRequest, MedicationRequestDispenseRequestInitialFill, MedicationRequestSubstitution };
//# sourceMappingURL=MedicationRequest.js.map
