{"version":3,"file":"Signature.js","sources":["../../src/fhir/Signature.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR ComplexType: Signature\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { SignatureTypeCodings, SignatureTypeCodingType,} from '../fhirValueSets/SignatureTypeCodings.js';\r\n// @ts-ignore\r\nimport { SignatureTypeCodes,  SignatureTypeCodeType } from '../fhirValueSets/SignatureTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the Signature type.\r\n */\r\nexport interface SignatureArgs extends fhir.FhirElementArgs {\r\n  /**\r\n   * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &amp;quot;Commitment Type Indication&amp;quot;.\r\n   */\r\n  type: fhir.CodingArgs[]|null;\r\n  /**\r\n   * This should agree with the information in the signature.\r\n   */\r\n  when: fhir.FhirInstant|string|undefined;\r\n  /**\r\n   * This should agree with the information in the signature.\r\n   */\r\n  who: fhir.ReferenceArgs|null;\r\n  /**\r\n   * The party that can't sign. For example a child.\r\n   */\r\n  onBehalfOf?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * \"xml\", \"json\" and \"ttl\" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.\r\n   */\r\n  targetFormat?: fhir.FhirCode|string|undefined;\r\n  /**\r\n   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.\r\n   */\r\n  sigFormat?: fhir.FhirCode|string|undefined;\r\n  /**\r\n   * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) \"Detached Signature\" form.\r\n   */\r\n  data?: fhir.FhirBase64Binary|string|undefined;\r\n}\r\n\r\n/**\r\n * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.\r\n */\r\nexport class Signature extends fhir.FhirElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Signature';\r\n  /**\r\n   * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &amp;quot;Commitment Type Indication&amp;quot;.\r\n   */\r\n  public type: fhir.Coding[];\r\n  /**\r\n   * This should agree with the information in the signature.\r\n   */\r\n  public when: fhir.FhirInstant|null;\r\n  /**\r\n   * This should agree with the information in the signature.\r\n   */\r\n  public who: fhir.Reference|null;\r\n  /**\r\n   * The party that can't sign. For example a child.\r\n   */\r\n  public onBehalfOf?: fhir.Reference|undefined;\r\n  /**\r\n   * \"xml\", \"json\" and \"ttl\" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.\r\n   */\r\n  public targetFormat?: fhir.FhirCode|undefined;\r\n  /**\r\n   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.\r\n   */\r\n  public sigFormat?: fhir.FhirCode|undefined;\r\n  /**\r\n   * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) \"Detached Signature\" form.\r\n   */\r\n  public data?: fhir.FhirBase64Binary|undefined;\r\n  /**\r\n   * Default constructor for Signature - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<SignatureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['type']) { this.type = source.type.map((x) => new fhir.Coding(x)); }\r\n    else { this.type = []; }\r\n    if (source['when']) { this.when = new fhir.FhirInstant({value: source.when}); }\r\n    else { this.when = null; }\r\n    if (source['who']) { this.who = new fhir.Reference(source.who); }\r\n    else { this.who = null; }\r\n    if (source['onBehalfOf']) { this.onBehalfOf = new fhir.Reference(source.onBehalfOf); }\r\n    if (source['targetFormat']) { this.targetFormat = new fhir.FhirCode({value: source.targetFormat}); }\r\n    if (source['sigFormat']) { this.sigFormat = new fhir.FhirCode({value: source.sigFormat}); }\r\n    if (source['data']) { this.data = new fhir.FhirBase64Binary({value: source.data}); }\r\n  }\r\n  /**\r\n   * Preferred-bound Value Set for type (Signature.type)\r\n   */\r\n  public static typePreferredCoding():SignatureTypeCodingType {\r\n    return SignatureTypeCodings;\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding', }));\r\n    } else if (!Array.isArray(this.type)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property type:fhir.Coding[] fhir: Signature.type:Coding', }));\r\n    } else if (this.type.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:fhir.Coding[] fhir: Signature.type:Coding', }));\r\n    }\r\n    if (this[\"type\"]) { this.type.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['when']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property when:fhir.FhirInstant fhir: Signature.when:instant', }));\r\n    }\r\n    if (this[\"when\"]) { outcome.issue!.push(...this.when.doModelValidation().issue!); }\r\n    if (!this['who']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property who:fhir.Reference fhir: Signature.who:Reference', }));\r\n    }\r\n    if (this[\"who\"]) { outcome.issue!.push(...this.who.doModelValidation().issue!); }\r\n    if (this[\"onBehalfOf\"]) { outcome.issue!.push(...this.onBehalfOf.doModelValidation().issue!); }\r\n    if (this[\"targetFormat\"]) { outcome.issue!.push(...this.targetFormat.doModelValidation().issue!); }\r\n    if (this[\"sigFormat\"]) { outcome.issue!.push(...this.sigFormat.doModelValidation().issue!); }\r\n    if (this[\"data\"]) { outcome.issue!.push(...this.data.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Coding","fhir.FhirInstant","fhir.Reference","fhir.FhirCode","fhir.FhirBase64Binary","fhir.OperationOutcomeIssue","fhir.FhirElement"],"mappings":"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"}