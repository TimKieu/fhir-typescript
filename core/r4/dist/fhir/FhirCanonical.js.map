{"version":3,"file":"FhirCanonical.js","sources":["../../src/fhir/FhirCanonical.ts"],"sourcesContent":["// Minimum TypeScript Version: 3.7\r\n// FHIR Primitive: canonical\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n\r\n/**\r\n * see [Canonical References](references.html#canonical)\r\n */\r\nexport interface FhirCanonicalArgs extends fhir.FhirUriArgs {\r\n  /**\r\n   * see [Canonical References](references.html#canonical)\r\n   */\r\n  value?:FhirCanonical|string|undefined;\r\n}\r\n\r\n/**\r\n * see [Canonical References](references.html#canonical)\r\n */\r\nexport class FhirCanonical extends fhir.FhirUri {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'Canonical';\r\n  /**\r\n   * Mapping of this datatype to a JSON equivalent\r\n   */\r\n  public static readonly _fts_jsonType:string = 'string';\r\n  // published regex: \\S*\r\n  public static readonly _fts_regex:RegExp = /^\\S*$/\r\n  /**\r\n   * A canonical value, represented as a JS string\r\n   */\r\n  declare value?:string|null|undefined;\r\n  /**\r\n     * Create a FhirCanonical\r\n     * @param value see [Canonical References](references.html#canonical)\r\n     * @param id Unique id for inter-element referencing (uncommon on primitives)\r\n     * @param extension Additional content defined by implementations\r\n     * @param options Options to pass to extension constructors\r\n  */\r\n  constructor(source:Partial<FhirCanonicalArgs> = {}, options:fhir.FhirConstructorOptions = { } ) {\r\n    super(source, options);\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if ((this.value) && (!FhirCanonical._fts_regex.test(this.value))) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.InvalidContent,  diagnostics: \"Invalid value in primitive type canonical\", }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.OperationOutcomeIssue","fhir.FhirUri"],"mappings":";;;;;;;;AAAA;AAkBA;;AAEG;AACH,IAAA,aAAA,kBAAA,UAAA,MAAA,EAAA;IAAmC,SAAY,CAAA,aAAA,EAAA,MAAA,CAAA,CAAA;AAe7C;;;;;;AAME;IACF,SAAY,aAAA,CAAA,MAAsC,EAAE,OAAyC,EAAA;AAAjF,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAsC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAyC,GAAA,EAAA,CAAA,EAAA;eAC3F,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAAA,IAAA,CAAA;KACvB;AACD;;AAEG;AACa,IAAA,aAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAChE,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,cAAc,EAAG,WAAW,EAAE,2CAA2C,GAAG,CAAC,CAAC,CAAC;AAC9L,SAAA;AACD,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAjCD;;AAEG;IACoB,aAAa,CAAA,aAAA,GAAU,WAAW,CAAC;AAC1D;;AAEG;IACoB,aAAa,CAAA,aAAA,GAAU,QAAQ,CAAC;;IAEhC,aAAU,CAAA,UAAA,GAAU,OAAO,CAAA;IAyBpD,OAAC,aAAA,CAAA;AAAA,CAnCD,CAAmCC,OAAY,CAmC9C;;;;"}