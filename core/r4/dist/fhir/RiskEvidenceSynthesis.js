// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: RiskEvidenceSynthesis
import * as fhir from '../fhir.js';
// @ts-ignore
import { UcumUnitsVsValidation } from '../fhirValueSets/UcumUnitsVsValidation.js';
// @ts-ignore
import { PublicationStatusVsValidation } from '../fhirValueSets/PublicationStatusVsValidation.js';
/**
 * A description of the size of the sample involved in the synthesis.
 */
export class RiskEvidenceSynthesisSampleSize extends fhir.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['numberOfStudies'] !== undefined) {
            this.numberOfStudies = new fhir.FhirInteger({ value: source.numberOfStudies }, options);
        }
        if (source['_numberOfStudies']) {
            if (this.numberOfStudies) {
                this.numberOfStudies.addExtendedProperties(source._numberOfStudies);
            }
            else {
                this.numberOfStudies = new fhir.FhirInteger(source._numberOfStudies, options);
            }
        }
        if (source['numberOfParticipants'] !== undefined) {
            this.numberOfParticipants = new fhir.FhirInteger({ value: source.numberOfParticipants }, options);
        }
        if (source['_numberOfParticipants']) {
            if (this.numberOfParticipants) {
                this.numberOfParticipants.addExtendedProperties(source._numberOfParticipants);
            }
            else {
                this.numberOfParticipants = new fhir.FhirInteger(source._numberOfParticipants, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskEvidenceSynthesis.sampleSize';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('numberOfStudies', exp));
        iss.push(...this.vOS('numberOfParticipants', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskEvidenceSynthesisSampleSize._fts_dataType = 'RiskEvidenceSynthesisSampleSize';
/**
 * A description of the precision of the estimate for the effect.
 */
export class RiskEvidenceSynthesisRiskEstimatePrecisionEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisRiskEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['level'] !== undefined) {
            this.level = new fhir.FhirDecimal({ value: source.level }, options);
        }
        if (source['_level']) {
            if (this.level) {
                this.level.addExtendedProperties(source._level);
            }
            else {
                this.level = new fhir.FhirDecimal(source._level, options);
            }
        }
        if (source['from'] !== undefined) {
            this.from = new fhir.FhirDecimal({ value: source.from }, options);
        }
        if (source['_from']) {
            if (this.from) {
                this.from.addExtendedProperties(source._from);
            }
            else {
                this.from = new fhir.FhirDecimal(source._from, options);
            }
        }
        if (source['to'] !== undefined) {
            this.to = new fhir.FhirDecimal({ value: source.to }, options);
        }
        if (source['_to']) {
            if (this.to) {
                this.to.addExtendedProperties(source._to);
            }
            else {
                this.to = new fhir.FhirDecimal(source._to, options);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskEvidenceSynthesis.riskEstimate.precisionEstimate';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('level', exp));
        iss.push(...this.vOS('from', exp));
        iss.push(...this.vOS('to', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskEvidenceSynthesisRiskEstimatePrecisionEstimate._fts_dataType = 'RiskEvidenceSynthesisRiskEstimatePrecisionEstimate';
/**
 * The estimated risk of the outcome.
 */
export class RiskEvidenceSynthesisRiskEstimate extends fhir.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisRiskEstimate - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirString({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description, options);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['value'] !== undefined) {
            this.value = new fhir.FhirDecimal({ value: source.value }, options);
        }
        if (source['_value']) {
            if (this.value) {
                this.value.addExtendedProperties(source._value);
            }
            else {
                this.value = new fhir.FhirDecimal(source._value, options);
            }
        }
        if (source['unitOfMeasure']) {
            this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure, options);
        }
        if (source['denominatorCount'] !== undefined) {
            this.denominatorCount = new fhir.FhirInteger({ value: source.denominatorCount }, options);
        }
        if (source['_denominatorCount']) {
            if (this.denominatorCount) {
                this.denominatorCount.addExtendedProperties(source._denominatorCount);
            }
            else {
                this.denominatorCount = new fhir.FhirInteger(source._denominatorCount, options);
            }
        }
        if (source['numeratorCount'] !== undefined) {
            this.numeratorCount = new fhir.FhirInteger({ value: source.numeratorCount }, options);
        }
        if (source['_numeratorCount']) {
            if (this.numeratorCount) {
                this.numeratorCount.addExtendedProperties(source._numeratorCount);
            }
            else {
                this.numeratorCount = new fhir.FhirInteger(source._numeratorCount, options);
            }
        }
        if (source['precisionEstimate']) {
            this.precisionEstimate = source.precisionEstimate.map((x) => new fhir.RiskEvidenceSynthesisRiskEstimatePrecisionEstimate(x, options));
        }
        else {
            this.precisionEstimate = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskEvidenceSynthesis.riskEstimate';
        }
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOS('value', exp));
        iss.push(...this.vOSV('unitOfMeasure', exp, 'UcumUnits', UcumUnitsVsValidation, 'r'));
        iss.push(...this.vOS('denominatorCount', exp));
        iss.push(...this.vOS('numeratorCount', exp));
        iss.push(...this.vOA('precisionEstimate', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskEvidenceSynthesisRiskEstimate._fts_dataType = 'RiskEvidenceSynthesisRiskEstimate';
/**
 * A description of a component of the overall certainty.
 */
export class RiskEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type, options);
        }
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.rating = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskEvidenceSynthesis.certainty.certaintySubcomponent';
        }
        iss.push(...this.vOS('type', exp));
        iss.push(...this.vOA('rating', exp));
        iss.push(...this.vOA('note', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskEvidenceSynthesisCertaintyCertaintySubcomponent._fts_dataType = 'RiskEvidenceSynthesisCertaintyCertaintySubcomponent';
/**
 * A description of the certainty of the risk estimate.
 */
export class RiskEvidenceSynthesisCertainty extends fhir.BackboneElement {
    /**
     * Default constructor for RiskEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['rating']) {
            this.rating = source.rating.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.rating = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['certaintySubcomponent']) {
            this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhir.RiskEvidenceSynthesisCertaintyCertaintySubcomponent(x, options));
        }
        else {
            this.certaintySubcomponent = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskEvidenceSynthesis.certainty';
        }
        iss.push(...this.vOA('rating', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('certaintySubcomponent', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskEvidenceSynthesisCertainty._fts_dataType = 'RiskEvidenceSynthesisCertainty';
/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
export class RiskEvidenceSynthesis extends fhir.DomainResource {
    /**
     * Default constructor for RiskEvidenceSynthesis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'RiskEvidenceSynthesis';
        if (source['url'] !== undefined) {
            this.url = new fhir.FhirUri({ value: source.url }, options);
        }
        if (source['_url']) {
            if (this.url) {
                this.url.addExtendedProperties(source._url);
            }
            else {
                this.url = new fhir.FhirUri(source._url, options);
            }
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x, options));
        }
        else {
            this.identifier = [];
        }
        if (source['version'] !== undefined) {
            this.version = new fhir.FhirString({ value: source.version }, options);
        }
        if (source['_version']) {
            if (this.version) {
                this.version.addExtendedProperties(source._version);
            }
            else {
                this.version = new fhir.FhirString(source._version, options);
            }
        }
        if (source['name'] !== undefined) {
            this.name = new fhir.FhirString({ value: source.name }, options);
        }
        if (source['_name']) {
            if (this.name) {
                this.name.addExtendedProperties(source._name);
            }
            else {
                this.name = new fhir.FhirString(source._name, options);
            }
        }
        if (source['title'] !== undefined) {
            this.title = new fhir.FhirString({ value: source.title }, options);
        }
        if (source['_title']) {
            if (this.title) {
                this.title.addExtendedProperties(source._title);
            }
            else {
                this.title = new fhir.FhirString(source._title, options);
            }
        }
        if (source['status'] !== undefined) {
            this.status = new fhir.FhirCode({ value: source.status }, options);
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status, options);
            }
        }
        if (source['date'] !== undefined) {
            this.date = new fhir.FhirDateTime({ value: source.date }, options);
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date, options);
            }
        }
        if (source['publisher'] !== undefined) {
            this.publisher = new fhir.FhirString({ value: source.publisher }, options);
        }
        if (source['_publisher']) {
            if (this.publisher) {
                this.publisher.addExtendedProperties(source._publisher);
            }
            else {
                this.publisher = new fhir.FhirString(source._publisher, options);
            }
        }
        if (source['contact']) {
            this.contact = source.contact.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.contact = [];
        }
        if (source['description'] !== undefined) {
            this.description = new fhir.FhirMarkdown({ value: source.description }, options);
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirMarkdown(source._description, options);
            }
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x, options));
        }
        else {
            this.note = [];
        }
        if (source['useContext']) {
            this.useContext = source.useContext.map((x) => new fhir.UsageContext(x, options));
        }
        else {
            this.useContext = [];
        }
        if (source['jurisdiction']) {
            this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.jurisdiction = [];
        }
        if (source['copyright'] !== undefined) {
            this.copyright = new fhir.FhirMarkdown({ value: source.copyright }, options);
        }
        if (source['_copyright']) {
            if (this.copyright) {
                this.copyright.addExtendedProperties(source._copyright);
            }
            else {
                this.copyright = new fhir.FhirMarkdown(source._copyright, options);
            }
        }
        if (source['approvalDate'] !== undefined) {
            this.approvalDate = new fhir.FhirDate({ value: source.approvalDate }, options);
        }
        if (source['_approvalDate']) {
            if (this.approvalDate) {
                this.approvalDate.addExtendedProperties(source._approvalDate);
            }
            else {
                this.approvalDate = new fhir.FhirDate(source._approvalDate, options);
            }
        }
        if (source['lastReviewDate'] !== undefined) {
            this.lastReviewDate = new fhir.FhirDate({ value: source.lastReviewDate }, options);
        }
        if (source['_lastReviewDate']) {
            if (this.lastReviewDate) {
                this.lastReviewDate.addExtendedProperties(source._lastReviewDate);
            }
            else {
                this.lastReviewDate = new fhir.FhirDate(source._lastReviewDate, options);
            }
        }
        if (source['effectivePeriod']) {
            this.effectivePeriod = new fhir.Period(source.effectivePeriod, options);
        }
        if (source['topic']) {
            this.topic = source.topic.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.topic = [];
        }
        if (source['author']) {
            this.author = source.author.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.author = [];
        }
        if (source['editor']) {
            this.editor = source.editor.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.editor = [];
        }
        if (source['reviewer']) {
            this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.reviewer = [];
        }
        if (source['endorser']) {
            this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x, options));
        }
        else {
            this.endorser = [];
        }
        if (source['relatedArtifact']) {
            this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x, options));
        }
        else {
            this.relatedArtifact = [];
        }
        if (source['synthesisType']) {
            this.synthesisType = new fhir.CodeableConcept(source.synthesisType, options);
        }
        if (source['studyType']) {
            this.studyType = new fhir.CodeableConcept(source.studyType, options);
        }
        if (source['population']) {
            this.population = new fhir.Reference(source.population, options);
        }
        else {
            this.population = null;
        }
        if (source['exposure']) {
            this.exposure = new fhir.Reference(source.exposure, options);
        }
        if (source['outcome']) {
            this.outcome = new fhir.Reference(source.outcome, options);
        }
        else {
            this.outcome = null;
        }
        if (source['sampleSize']) {
            this.sampleSize = new fhir.RiskEvidenceSynthesisSampleSize(source.sampleSize, options);
        }
        if (source['riskEstimate']) {
            this.riskEstimate = new fhir.RiskEvidenceSynthesisRiskEstimate(source.riskEstimate, options);
        }
        if (source['certainty']) {
            this.certainty = source.certainty.map((x) => new fhir.RiskEvidenceSynthesisCertainty(x, options));
        }
        else {
            this.certainty = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'RiskEvidenceSynthesis';
        }
        iss.push(...this.vOS('url', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vOS('version', exp));
        iss.push(...this.vOS('name', exp));
        iss.push(...this.vOS('title', exp));
        iss.push(...this.vRSV('status', exp, 'PublicationStatus', PublicationStatusVsValidation, 'r'));
        iss.push(...this.vOS('date', exp));
        iss.push(...this.vOS('publisher', exp));
        iss.push(...this.vOA('contact', exp));
        iss.push(...this.vOS('description', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('useContext', exp));
        iss.push(...this.vOA('jurisdiction', exp));
        iss.push(...this.vOS('copyright', exp));
        iss.push(...this.vOS('approvalDate', exp));
        iss.push(...this.vOS('lastReviewDate', exp));
        iss.push(...this.vOS('effectivePeriod', exp));
        iss.push(...this.vOA('topic', exp));
        iss.push(...this.vOA('author', exp));
        iss.push(...this.vOA('editor', exp));
        iss.push(...this.vOA('reviewer', exp));
        iss.push(...this.vOA('endorser', exp));
        iss.push(...this.vOA('relatedArtifact', exp));
        iss.push(...this.vOS('synthesisType', exp));
        iss.push(...this.vOS('studyType', exp));
        iss.push(...this.vRS('population', exp));
        iss.push(...this.vOS('exposure', exp));
        iss.push(...this.vRS('outcome', exp));
        iss.push(...this.vOS('sampleSize', exp));
        iss.push(...this.vOS('riskEstimate', exp));
        iss.push(...this.vOA('certainty', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
RiskEvidenceSynthesis._fts_dataType = 'RiskEvidenceSynthesis';
//# sourceMappingURL=data:application/json;base64,