/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { V3ActIncidentCodeCodings } from '../fhirValueSets/V3ActIncidentCodeCodings.js';
import { FmStatusCodings } from '../fhirValueSets/FmStatusCodings.js';
import { ClaimTypeCodings } from '../fhirValueSets/ClaimTypeCodings.js';
import { ClaimUseCodings } from '../fhirValueSets/ClaimUseCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Identifier } from './Identifier.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDate } from './FhirDate.js';
import { Period } from './Period.js';
import { FhirString } from './FhirString.js';
import { Quantity } from './Quantity.js';
import { Attachment } from './Attachment.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Address } from './Address.js';
import { Money } from './Money.js';
import { FhirDecimal } from './FhirDecimal.js';

// <auto-generated/>
/**
 * For example,  for the original treatment and follow-up exams.
 */
var ClaimRelated = /** @class */ (function (_super) {
    __extends(ClaimRelated, _super);
    /**
     * Default constructor for ClaimRelated - initializes any required elements to null if a value is not provided.
     */
    function ClaimRelated(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['claim']) {
            _this.claim = new Reference(source.claim);
        }
        if (source['relationship']) {
            _this.relationship = new CodeableConcept(source.relationship);
        }
        if (source['reference']) {
            _this.reference = new Identifier(source.reference);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimRelated.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["claim"]) {
            (_a = outcome.issue).push.apply(_a, this.claim.doModelValidation().issue);
        }
        if (this["relationship"]) {
            (_b = outcome.issue).push.apply(_b, this.relationship.doModelValidation().issue);
        }
        if (this["reference"]) {
            (_c = outcome.issue).push.apply(_c, this.reference.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimRelated._fts_dataType = 'ClaimRelated';
    return ClaimRelated;
}(BackboneElement));
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
var ClaimPayee = /** @class */ (function (_super) {
    __extends(ClaimPayee, _super);
    /**
     * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
     */
    function ClaimPayee(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['party']) {
            _this.party = new Reference(source.party);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimPayee.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Claim.payee.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["party"]) {
            (_b = outcome.issue).push.apply(_b, this.party.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimPayee._fts_dataType = 'ClaimPayee';
    return ClaimPayee;
}(BackboneElement));
/**
 * The members of the team who provided the products and services.
 */
var ClaimCareTeam = /** @class */ (function (_super) {
    __extends(ClaimCareTeam, _super);
    /**
     * Default constructor for ClaimCareTeam - initializes any required elements to null if a value is not provided.
     */
    function ClaimCareTeam(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['provider']) {
            _this.provider = new Reference(source.provider);
        }
        else {
            _this.provider = null;
        }
        if (source['responsible']) {
            _this.responsible = new FhirBoolean({ value: source.responsible });
        }
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        if (source['qualification']) {
            _this.qualification = new CodeableConcept(source.qualification);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimCareTeam.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.careTeam.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['provider']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property provider:fhir.Reference fhir: Claim.careTeam.provider:Reference', }));
        }
        if (this["provider"]) {
            (_b = outcome.issue).push.apply(_b, this.provider.doModelValidation().issue);
        }
        if (this["responsible"]) {
            (_c = outcome.issue).push.apply(_c, this.responsible.doModelValidation().issue);
        }
        if (this["role"]) {
            (_d = outcome.issue).push.apply(_d, this.role.doModelValidation().issue);
        }
        if (this["qualification"]) {
            (_e = outcome.issue).push.apply(_e, this.qualification.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimCareTeam._fts_dataType = 'ClaimCareTeam';
    return ClaimCareTeam;
}(BackboneElement));
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
var ClaimSupportingInfo = /** @class */ (function (_super) {
    __extends(ClaimSupportingInfo, _super);
    /**
     * Default constructor for ClaimSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    function ClaimSupportingInfo(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['timing']) {
            _this.timing = source.timing;
        }
        else if (source['timingDate']) {
            _this.timing = new FhirDate({ value: source.timingDate });
        }
        else if (source['timingPeriod']) {
            _this.timing = new Period(source.timingPeriod);
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueAttachment']) {
            _this.value = new Attachment(source.valueAttachment);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        if (source['reason']) {
            _this.reason = new CodeableConcept(source.reason);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimSupportingInfo.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.supportingInfo.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: Claim.supportingInfo.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_b = outcome.issue).push.apply(_b, this.category.doModelValidation().issue);
        }
        if (this["code"]) {
            (_c = outcome.issue).push.apply(_c, this.code.doModelValidation().issue);
        }
        if (this["reason"]) {
            (_d = outcome.issue).push.apply(_d, this.reason.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimSupportingInfo._fts_dataType = 'ClaimSupportingInfo';
    /**
     * Internal flag to properly serialize choice-type element Claim.supportingInfo.timing[x]
     */
    ClaimSupportingInfo._fts_timingIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element Claim.supportingInfo.value[x]
     */
    ClaimSupportingInfo._fts_valueIsChoice = true;
    return ClaimSupportingInfo;
}(BackboneElement));
/**
 * Information about diagnoses relevant to the claim items.
 */
var ClaimDiagnosis = /** @class */ (function (_super) {
    __extends(ClaimDiagnosis, _super);
    /**
     * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
     */
    function ClaimDiagnosis(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['diagnosis']) {
            _this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            _this.diagnosis = new CodeableConcept(source.diagnosisCodeableConcept);
        }
        else if (source['diagnosisReference']) {
            _this.diagnosis = new Reference(source.diagnosisReference);
        }
        else {
            _this.diagnosis = null;
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['onAdmission']) {
            _this.onAdmission = new CodeableConcept(source.onAdmission);
        }
        if (source['packageCode']) {
            _this.packageCode = new CodeableConcept(source.packageCode);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimDiagnosis.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.diagnosis.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['diagnosis']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property diagnosis: fhir: Claim.diagnosis.diagnosis[x]:', }));
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["onAdmission"]) {
            (_b = outcome.issue).push.apply(_b, this.onAdmission.doModelValidation().issue);
        }
        if (this["packageCode"]) {
            (_c = outcome.issue).push.apply(_c, this.packageCode.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimDiagnosis._fts_dataType = 'ClaimDiagnosis';
    /**
     * Internal flag to properly serialize choice-type element Claim.diagnosis.diagnosis[x]
     */
    ClaimDiagnosis._fts_diagnosisIsChoice = true;
    return ClaimDiagnosis;
}(BackboneElement));
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
var ClaimProcedure = /** @class */ (function (_super) {
    __extends(ClaimProcedure, _super);
    /**
     * Default constructor for ClaimProcedure - initializes any required elements to null if a value is not provided.
     */
    function ClaimProcedure(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['procedure']) {
            _this.procedure = source.procedure;
        }
        else if (source['procedureCodeableConcept']) {
            _this.procedure = new CodeableConcept(source.procedureCodeableConcept);
        }
        else if (source['procedureReference']) {
            _this.procedure = new Reference(source.procedureReference);
        }
        else {
            _this.procedure = null;
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimProcedure.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.procedure.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["date"]) {
            (_b = outcome.issue).push.apply(_b, this.date.doModelValidation().issue);
        }
        if (!this['procedure']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property procedure: fhir: Claim.procedure.procedure[x]:', }));
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimProcedure._fts_dataType = 'ClaimProcedure';
    /**
     * Internal flag to properly serialize choice-type element Claim.procedure.procedure[x]
     */
    ClaimProcedure._fts_procedureIsChoice = true;
    return ClaimProcedure;
}(BackboneElement));
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
var ClaimInsurance = /** @class */ (function (_super) {
    __extends(ClaimInsurance, _super);
    /**
     * Default constructor for ClaimInsurance - initializes any required elements to null if a value is not provided.
     */
    function ClaimInsurance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['focal']) {
            _this.focal = new FhirBoolean({ value: source.focal });
        }
        else {
            _this.focal = null;
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['coverage']) {
            _this.coverage = new Reference(source.coverage);
        }
        else {
            _this.coverage = null;
        }
        if (source['businessArrangement']) {
            _this.businessArrangement = new FhirString({ value: source.businessArrangement });
        }
        if (source['preAuthRef']) {
            _this.preAuthRef = source.preAuthRef.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.preAuthRef = [];
        }
        if (source['claimResponse']) {
            _this.claimResponse = new Reference(source.claimResponse);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimInsurance.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.insurance.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['focal']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property focal:fhir.FhirBoolean fhir: Claim.insurance.focal:boolean', }));
        }
        if (this["focal"]) {
            (_b = outcome.issue).push.apply(_b, this.focal.doModelValidation().issue);
        }
        if (this["identifier"]) {
            (_c = outcome.issue).push.apply(_c, this.identifier.doModelValidation().issue);
        }
        if (!this['coverage']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property coverage:fhir.Reference fhir: Claim.insurance.coverage:Reference', }));
        }
        if (this["coverage"]) {
            (_d = outcome.issue).push.apply(_d, this.coverage.doModelValidation().issue);
        }
        if (this["businessArrangement"]) {
            (_e = outcome.issue).push.apply(_e, this.businessArrangement.doModelValidation().issue);
        }
        if (this["preAuthRef"]) {
            this.preAuthRef.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["claimResponse"]) {
            (_f = outcome.issue).push.apply(_f, this.claimResponse.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimInsurance._fts_dataType = 'ClaimInsurance';
    return ClaimInsurance;
}(BackboneElement));
/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
var ClaimAccident = /** @class */ (function (_super) {
    __extends(ClaimAccident, _super);
    /**
     * Default constructor for ClaimAccident - initializes any required elements to null if a value is not provided.
     */
    function ClaimAccident(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['date']) {
            _this.date = new FhirDate({ value: source.date });
        }
        else {
            _this.date = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['location']) {
            _this.location = source.location;
        }
        else if (source['locationAddress']) {
            _this.location = new Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            _this.location = new Reference(source.locationReference);
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (Claim.accident.type)
     */
    ClaimAccident.typeExtensibleCoding = function () {
        return V3ActIncidentCodeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimAccident.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['date']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property date:fhir.FhirDate fhir: Claim.accident.date:date', }));
        }
        if (this["date"]) {
            (_a = outcome.issue).push.apply(_a, this.date.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimAccident._fts_dataType = 'ClaimAccident';
    /**
     * Internal flag to properly serialize choice-type element Claim.accident.location[x]
     */
    ClaimAccident._fts_locationIsChoice = true;
    return ClaimAccident;
}(BackboneElement));
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
var ClaimItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ClaimItemDetailSubDetail, _super);
    /**
     * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    function ClaimItemDetailSubDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['revenue']) {
            _this.revenue = new CodeableConcept(source.revenue);
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimItemDetailSubDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.item.detail.subDetail.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["revenue"]) {
            (_b = outcome.issue).push.apply(_b, this.revenue.doModelValidation().issue);
        }
        if (this["category"]) {
            (_c = outcome.issue).push.apply(_c, this.category.doModelValidation().issue);
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: Claim.item.detail.subDetail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_d = outcome.issue).push.apply(_d, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_f = outcome.issue).push.apply(_f, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_g = outcome.issue).push.apply(_g, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_h = outcome.issue).push.apply(_h, this.net.doModelValidation().issue);
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimItemDetailSubDetail._fts_dataType = 'ClaimItemDetailSubDetail';
    return ClaimItemDetailSubDetail;
}(BackboneElement));
/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
var ClaimItemDetail = /** @class */ (function (_super) {
    __extends(ClaimItemDetail, _super);
    /**
     * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
     */
    function ClaimItemDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['revenue']) {
            _this.revenue = new CodeableConcept(source.revenue);
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        if (source['subDetail']) {
            _this.subDetail = source.subDetail.map(function (x) { return new ClaimItemDetailSubDetail(x); });
        }
        else {
            _this.subDetail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimItemDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.item.detail.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["revenue"]) {
            (_b = outcome.issue).push.apply(_b, this.revenue.doModelValidation().issue);
        }
        if (this["category"]) {
            (_c = outcome.issue).push.apply(_c, this.category.doModelValidation().issue);
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: Claim.item.detail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_d = outcome.issue).push.apply(_d, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_f = outcome.issue).push.apply(_f, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_g = outcome.issue).push.apply(_g, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_h = outcome.issue).push.apply(_h, this.net.doModelValidation().issue);
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimItemDetail._fts_dataType = 'ClaimItemDetail';
    return ClaimItemDetail;
}(BackboneElement));
/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
var ClaimItem = /** @class */ (function (_super) {
    __extends(ClaimItem, _super);
    /**
     * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
     */
    function ClaimItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['careTeamSequence']) {
            _this.careTeamSequence = source.careTeamSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.careTeamSequence = [];
        }
        if (source['diagnosisSequence']) {
            _this.diagnosisSequence = source.diagnosisSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.diagnosisSequence = [];
        }
        if (source['procedureSequence']) {
            _this.procedureSequence = source.procedureSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.procedureSequence = [];
        }
        if (source['informationSequence']) {
            _this.informationSequence = source.informationSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.informationSequence = [];
        }
        if (source['revenue']) {
            _this.revenue = new CodeableConcept(source.revenue);
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['serviced']) {
            _this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            _this.serviced = new FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            _this.serviced = new Period(source.servicedPeriod);
        }
        if (source['location']) {
            _this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            _this.location = new CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            _this.location = new Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            _this.location = new Reference(source.locationReference);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        if (source['bodySite']) {
            _this.bodySite = new CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            _this.subSite = source.subSite.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.subSite = [];
        }
        if (source['encounter']) {
            _this.encounter = source.encounter.map(function (x) { return new Reference(x); });
        }
        else {
            _this.encounter = [];
        }
        if (source['detail']) {
            _this.detail = source.detail.map(function (x) { return new ClaimItemDetail(x); });
        }
        else {
            _this.detail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClaimItem.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: Claim.item.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["careTeamSequence"]) {
            this.careTeamSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["diagnosisSequence"]) {
            this.diagnosisSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["procedureSequence"]) {
            this.procedureSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["informationSequence"]) {
            this.informationSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["revenue"]) {
            (_b = outcome.issue).push.apply(_b, this.revenue.doModelValidation().issue);
        }
        if (this["category"]) {
            (_c = outcome.issue).push.apply(_c, this.category.doModelValidation().issue);
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: Claim.item.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_d = outcome.issue).push.apply(_d, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_f = outcome.issue).push.apply(_f, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_g = outcome.issue).push.apply(_g, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_h = outcome.issue).push.apply(_h, this.net.doModelValidation().issue);
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["bodySite"]) {
            (_j = outcome.issue).push.apply(_j, this.bodySite.doModelValidation().issue);
        }
        if (this["subSite"]) {
            this.subSite.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["encounter"]) {
            this.encounter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["detail"]) {
            this.detail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClaimItem._fts_dataType = 'ClaimItem';
    /**
     * Internal flag to properly serialize choice-type element Claim.item.serviced[x]
     */
    ClaimItem._fts_servicedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element Claim.item.location[x]
     */
    ClaimItem._fts_locationIsChoice = true;
    return ClaimItem;
}(BackboneElement));
/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
var Claim = /** @class */ (function (_super) {
    __extends(Claim, _super);
    /**
     * Default constructor for Claim - initializes any required elements to null if a value is not provided.
     */
    function Claim(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Claim';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['subType']) {
            _this.subType = new CodeableConcept(source.subType);
        }
        if (source['use']) {
            _this.use = source.use;
        }
        else {
            _this.use = null;
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        if (source['billablePeriod']) {
            _this.billablePeriod = new Period(source.billablePeriod);
        }
        if (source['created']) {
            _this.created = new FhirDateTime({ value: source.created });
        }
        else {
            _this.created = null;
        }
        if (source['enterer']) {
            _this.enterer = new Reference(source.enterer);
        }
        if (source['insurer']) {
            _this.insurer = new Reference(source.insurer);
        }
        if (source['provider']) {
            _this.provider = new Reference(source.provider);
        }
        else {
            _this.provider = null;
        }
        if (source['priority']) {
            _this.priority = new CodeableConcept(source.priority);
        }
        else {
            _this.priority = null;
        }
        if (source['fundsReserve']) {
            _this.fundsReserve = new CodeableConcept(source.fundsReserve);
        }
        if (source['related']) {
            _this.related = source.related.map(function (x) { return new ClaimRelated(x); });
        }
        else {
            _this.related = [];
        }
        if (source['prescription']) {
            _this.prescription = new Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            _this.originalPrescription = new Reference(source.originalPrescription);
        }
        if (source['payee']) {
            _this.payee = new ClaimPayee(source.payee);
        }
        if (source['referral']) {
            _this.referral = new Reference(source.referral);
        }
        if (source['facility']) {
            _this.facility = new Reference(source.facility);
        }
        if (source['careTeam']) {
            _this.careTeam = source.careTeam.map(function (x) { return new ClaimCareTeam(x); });
        }
        else {
            _this.careTeam = [];
        }
        if (source['supportingInfo']) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new ClaimSupportingInfo(x); });
        }
        else {
            _this.supportingInfo = [];
        }
        if (source['diagnosis']) {
            _this.diagnosis = source.diagnosis.map(function (x) { return new ClaimDiagnosis(x); });
        }
        else {
            _this.diagnosis = [];
        }
        if (source['procedure']) {
            _this.procedure = source.procedure.map(function (x) { return new ClaimProcedure(x); });
        }
        else {
            _this.procedure = [];
        }
        if (source['insurance']) {
            _this.insurance = source.insurance.map(function (x) { return new ClaimInsurance(x); });
        }
        else {
            _this.insurance = [];
        }
        if (source['accident']) {
            _this.accident = new ClaimAccident(source.accident);
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new ClaimItem(x); });
        }
        else {
            _this.item = [];
        }
        if (source['total']) {
            _this.total = new Money(source.total);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (Claim.status)
     */
    Claim.statusRequiredCoding = function () {
        return FmStatusCodings;
    };
    /**
     * Extensible-bound Value Set for type (Claim.type)
     */
    Claim.typeExtensibleCoding = function () {
        return ClaimTypeCodings;
    };
    /**
     * Required-bound Value Set for use (Claim.use)
     */
    Claim.useRequiredCoding = function () {
        return ClaimUseCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Claim.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Claim" fhir: Claim.resourceType:"Claim"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:FmStatusCodeType fhir: Claim.status:code', }));
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: Claim.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            (_b = outcome.issue).push.apply(_b, this.subType.doModelValidation().issue);
        }
        if (!this['use']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property use:ClaimUseCodeType fhir: Claim.use:code', }));
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: Claim.patient:Reference', }));
        }
        if (this["patient"]) {
            (_c = outcome.issue).push.apply(_c, this.patient.doModelValidation().issue);
        }
        if (this["billablePeriod"]) {
            (_d = outcome.issue).push.apply(_d, this.billablePeriod.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: Claim.created:dateTime', }));
        }
        if (this["created"]) {
            (_e = outcome.issue).push.apply(_e, this.created.doModelValidation().issue);
        }
        if (this["enterer"]) {
            (_f = outcome.issue).push.apply(_f, this.enterer.doModelValidation().issue);
        }
        if (this["insurer"]) {
            (_g = outcome.issue).push.apply(_g, this.insurer.doModelValidation().issue);
        }
        if (!this['provider']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property provider:fhir.Reference fhir: Claim.provider:Reference', }));
        }
        if (this["provider"]) {
            (_h = outcome.issue).push.apply(_h, this.provider.doModelValidation().issue);
        }
        if (!this['priority']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property priority:fhir.CodeableConcept fhir: Claim.priority:CodeableConcept', }));
        }
        if (this["priority"]) {
            (_j = outcome.issue).push.apply(_j, this.priority.doModelValidation().issue);
        }
        if (this["fundsReserve"]) {
            (_k = outcome.issue).push.apply(_k, this.fundsReserve.doModelValidation().issue);
        }
        if (this["related"]) {
            this.related.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["prescription"]) {
            (_l = outcome.issue).push.apply(_l, this.prescription.doModelValidation().issue);
        }
        if (this["originalPrescription"]) {
            (_m = outcome.issue).push.apply(_m, this.originalPrescription.doModelValidation().issue);
        }
        if (this["payee"]) {
            (_o = outcome.issue).push.apply(_o, this.payee.doModelValidation().issue);
        }
        if (this["referral"]) {
            (_p = outcome.issue).push.apply(_p, this.referral.doModelValidation().issue);
        }
        if (this["facility"]) {
            (_q = outcome.issue).push.apply(_q, this.facility.doModelValidation().issue);
        }
        if (this["careTeam"]) {
            this.careTeam.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["procedure"]) {
            this.procedure.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['insurance']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property insurance:fhir.ClaimInsurance[] fhir: Claim.insurance:insurance', }));
        }
        else if (!Array.isArray(this.insurance)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property insurance:fhir.ClaimInsurance[] fhir: Claim.insurance:insurance', }));
        }
        else if (this.insurance.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property insurance:fhir.ClaimInsurance[] fhir: Claim.insurance:insurance', }));
        }
        if (this["insurance"]) {
            this.insurance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["accident"]) {
            (_r = outcome.issue).push.apply(_r, this.accident.doModelValidation().issue);
        }
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["total"]) {
            (_s = outcome.issue).push.apply(_s, this.total.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Claim._fts_dataType = 'Claim';
    return Claim;
}(DomainResource));

export { Claim, ClaimAccident, ClaimCareTeam, ClaimDiagnosis, ClaimInsurance, ClaimItem, ClaimItemDetail, ClaimItemDetailSubDetail, ClaimPayee, ClaimProcedure, ClaimRelated, ClaimSupportingInfo };
//# sourceMappingURL=Claim.js.map
