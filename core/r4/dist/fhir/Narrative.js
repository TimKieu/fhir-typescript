// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Narrative
import * as fhir from '../fhir.js';
// @ts-ignore
import { NarrativeStatusCodes } from '../fhirValueSets/NarrativeStatusCodes.js';
/**
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 */
export class Narrative extends fhir.FhirElement {
    /**
     * Default constructor for Narrative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['div']) {
            this.div = new fhir.FhirXhtml({ value: source.div });
        }
        else {
            this.div = null;
        }
    }
    /**
     * Required-bound Value Set for status (Narrative.status)
     */
    static get statusRequiredCodes() {
        return NarrativeStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<NarrativeStatusCodeType> fhir: Narrative.status:code' });
        }
        if (this['status'] && (!Object.values(NarrativeStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<NarrativeStatusCodeType> fhir: Narrative.status:code Required binding to: NarrativeStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['div']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property div:fhir.FhirXhtml fhir: Narrative.div:xhtml' });
        }
        if (this["div"]) {
            issues.push(...this.div.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Narrative._fts_dataType = 'Narrative';
//# sourceMappingURL=data:application/json;base64,