// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Narrative
import * as fhir from '../fhir.js';
// @ts-ignore
import { NarrativeStatusCodes } from '../fhirValueSets/NarrativeStatusCodes.js';
/**
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 */
export class Narrative extends fhir.FhirElement {
    /**
     * Default constructor for Narrative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['div']) {
            this.div = new fhir.FhirXhtml({ value: source.div });
        }
        else {
            this.div = null;
        }
        if (source['_div']) {
            if (this.div) {
                this.div.addExtendedProperties(source._div);
            }
            else {
                this.div = new fhir.FhirXhtml(source._div);
            }
        }
    }
    /**
     * Required-bound Value Set for status (Narrative.status)
     */
    static get statusRequiredCodes() {
        return NarrativeStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Narrative';
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: Narrative.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(NarrativeStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status fhir: Narrative.status:code Required binding to: NarrativeStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (!this['div']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property div fhir: Narrative.div:xhtml', expression: [expression] });
        }
        if (this["div"]) {
            issues.push(...this.div.doModelValidation(expression + '.div'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Narrative._fts_dataType = 'Narrative';
//# sourceMappingURL=data:application/json;base64,