// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Narrative
import * as fhir from '../fhir.js';
// @ts-ignore
import { NarrativeStatusVsValidation } from '../fhirValueSets/NarrativeStatusVsValidation.js';
/**
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 */
export class Narrative extends fhir.FhirElement {
    /**
     * Default constructor for Narrative - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['div']) {
            this.div = new fhir.FhirXhtml({ value: source.div });
        }
        else {
            this.div = null;
        }
        if (source['_div']) {
            if (this.div) {
                this.div.addExtendedProperties(source._div);
            }
            else {
                this.div = new fhir.FhirXhtml(source._div);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Narrative';
        }
        this.vReqSV('status', expression, 'NarrativeStatus', NarrativeStatusVsValidation, 'r');
        this.vReqS('div', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Narrative._fts_dataType = 'Narrative';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmFycmF0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9OYXJyYXRpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsOEJBQThCO0FBRTlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQXVCOUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sU0FBVSxTQUFRLElBQUksQ0FBQyxXQUFXO0lBYTdDOztPQUVHO0lBQ0gsWUFBWSxTQUFnQyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUN0RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQTBCLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDdEc7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUFFO1FBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxPQUFRLENBQUMsQ0FBQzthQUFFO2lCQUNuRTtnQkFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBMEIsTUFBTSxDQUFDLE9BQWlDLENBQUMsQ0FBQzthQUFFO1NBQzdHO1FBQ0QsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3JFO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FBRTtRQUN6QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNsQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsSUFBSyxDQUFDLENBQUM7YUFBRTtpQkFDMUQ7Z0JBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQW1DLENBQUMsQ0FBQzthQUFFO1NBQ3BGO0lBQ0gsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsYUFBb0IsRUFBRTtRQUN0RCxJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksVUFBVSxLQUFLLEVBQUUsRUFBRTtZQUFFLFVBQVUsR0FBRyxXQUFXLENBQUE7U0FBRTtRQUNuRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsaUJBQWlCLEVBQUMsMkJBQTJCLEVBQUMsR0FBRyxDQUFDLENBQUE7UUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDNUIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUF2Q0Q7O0dBRUc7QUFDNkIsdUJBQWEsR0FBVSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgQ29tcGxleFR5cGU6IE5hcnJhdGl2ZVxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgTmFycmF0aXZlU3RhdHVzQ29kZXMsICBOYXJyYXRpdmVTdGF0dXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTmFycmF0aXZlU3RhdHVzQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE5hcnJhdGl2ZVN0YXR1c1ZzVmFsaWRhdGlvbiB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvTmFycmF0aXZlU3RhdHVzVnNWYWxpZGF0aW9uLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIE5hcnJhdGl2ZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOYXJyYXRpdmVBcmdzIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIG5hcnJhdGl2ZSAtIHdoZXRoZXIgaXQncyBlbnRpcmVseSBnZW5lcmF0ZWQgKGZyb20ganVzdCB0aGUgZGVmaW5lZCBkYXRhIG9yIHRoZSBleHRlbnNpb25zIHRvbyksIG9yIHdoZXRoZXIgYSBodW1hbiBhdXRob3JlZCBpdCBhbmQgaXQgbWF5IGNvbnRhaW4gYWRkaXRpb25hbCBkYXRhLlxyXG4gICAqL1xyXG4gIHN0YXR1czogZmhpci5GaGlyQ29kZTxOYXJyYXRpdmVTdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogTmFycmF0aXZlLnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgaHRtbCBlbGVtZW50IGFyZSBhbiBYSFRNTCBmcmFnbWVudCBjb250YWluaW5nIG9ubHkgdGhlIGJhc2ljIGh0bWwgZm9ybWF0dGluZyBlbGVtZW50cyBkZXNjcmliZWQgaW4gY2hhcHRlcnMgNy0xMSBhbmQgMTUgb2YgdGhlIEhUTUwgNC4wIHN0YW5kYXJkLCAmbHQ7YSZndDsgZWxlbWVudHMgKGVpdGhlciBuYW1lIG9yIGhyZWYpLCBpbWFnZXMgYW5kIGludGVybmFsbHkgY29udGFpbmVkIHN0eWxlc2hlZXRzLiBUaGUgWEhUTUwgY29udGVudCBTSEFMTCBOT1QgY29udGFpbiBhIGhlYWQsIGEgYm9keSwgZXh0ZXJuYWwgc3R5bGVzaGVldCByZWZlcmVuY2VzLCBzY3JpcHRzLCBmb3JtcywgYmFzZS9saW5rL3hsaW5rLCBmcmFtZXMsIGlmcmFtZXMgYW5kIG9iamVjdHMuXHJcbiAgICovXHJcbiAgZGl2OiBmaGlyLkZoaXJYaHRtbHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBOYXJyYXRpdmUuZGl2XHJcbiAgICovXHJcbiAgX2Rpdj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGh1bWFuLXJlYWRhYmxlIHN1bW1hcnkgb2YgdGhlIHJlc291cmNlIGNvbnZleWluZyB0aGUgZXNzZW50aWFsIGNsaW5pY2FsIGFuZCBidXNpbmVzcyBpbmZvcm1hdGlvbiBmb3IgdGhlIHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE5hcnJhdGl2ZSBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTmFycmF0aXZlJztcclxuICAvKipcclxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBuYXJyYXRpdmUgLSB3aGV0aGVyIGl0J3MgZW50aXJlbHkgZ2VuZXJhdGVkIChmcm9tIGp1c3QgdGhlIGRlZmluZWQgZGF0YSBvciB0aGUgZXh0ZW5zaW9ucyB0b28pLCBvciB3aGV0aGVyIGEgaHVtYW4gYXV0aG9yZWQgaXQgYW5kIGl0IG1heSBjb250YWluIGFkZGl0aW9uYWwgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPE5hcnJhdGl2ZVN0YXR1c0NvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgaHRtbCBlbGVtZW50IGFyZSBhbiBYSFRNTCBmcmFnbWVudCBjb250YWluaW5nIG9ubHkgdGhlIGJhc2ljIGh0bWwgZm9ybWF0dGluZyBlbGVtZW50cyBkZXNjcmliZWQgaW4gY2hhcHRlcnMgNy0xMSBhbmQgMTUgb2YgdGhlIEhUTUwgNC4wIHN0YW5kYXJkLCAmbHQ7YSZndDsgZWxlbWVudHMgKGVpdGhlciBuYW1lIG9yIGhyZWYpLCBpbWFnZXMgYW5kIGludGVybmFsbHkgY29udGFpbmVkIHN0eWxlc2hlZXRzLiBUaGUgWEhUTUwgY29udGVudCBTSEFMTCBOT1QgY29udGFpbiBhIGhlYWQsIGEgYm9keSwgZXh0ZXJuYWwgc3R5bGVzaGVldCByZWZlcmVuY2VzLCBzY3JpcHRzLCBmb3JtcywgYmFzZS9saW5rL3hsaW5rLCBmcmFtZXMsIGlmcmFtZXMgYW5kIG9iamVjdHMuXHJcbiAgICovXHJcbiAgcHVibGljIGRpdjogZmhpci5GaGlyWGh0bWx8bnVsbDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBOYXJyYXRpdmUgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxOYXJyYXRpdmVBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxOYXJyYXRpdmVTdGF0dXNDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2Uuc3RhdHVzfSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19zdGF0dXMnXSkge1xyXG4gICAgICBpZiAodGhpcy5zdGF0dXMpIHsgdGhpcy5zdGF0dXMuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fc3RhdHVzISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc3RhdHVzID0gbmV3IGZoaXIuRmhpckNvZGU8TmFycmF0aXZlU3RhdHVzQ29kZVR5cGU+KHNvdXJjZS5fc3RhdHVzIGFzIFBhcnRpYWw8Zmhpci5GaGlyQ29kZT4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkaXYnXSkgeyB0aGlzLmRpdiA9IG5ldyBmaGlyLkZoaXJYaHRtbCh7dmFsdWU6IHNvdXJjZS5kaXZ9KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuZGl2ID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX2RpdiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRpdikgeyB0aGlzLmRpdi5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9kaXYhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kaXYgPSBuZXcgZmhpci5GaGlyWGh0bWwoc291cmNlLl9kaXYgYXMgUGFydGlhbDxmaGlyLkZoaXJYaHRtbEFyZ3M+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdOYXJyYXRpdmUnIH1cclxuICAgIHRoaXMudlJlcVNWKCdzdGF0dXMnLGV4cHJlc3Npb24sJ05hcnJhdGl2ZVN0YXR1cycsTmFycmF0aXZlU3RhdHVzVnNWYWxpZGF0aW9uLCdyJylcclxuICAgIHRoaXMudlJlcVMoJ2RpdicsZXhwcmVzc2lvbilcclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==