// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductInteraction
import * as fhir from '../fhir.js';
/**
 * The specific medication, food or laboratory test that interacts.
 */
export class MedicinalProductInteractionInteractant extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductInteractionInteractant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductInteraction.interactant';
        }
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item fhir: MedicinalProductInteraction.interactant.item[x]:', expression: [expression] });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductInteractionInteractant._fts_dataType = 'MedicinalProductInteractionInteractant';
/**
 * Internal flag to properly serialize choice-type element MedicinalProductInteraction.interactant.item[x]
 */
MedicinalProductInteractionInteractant._fts_itemIsChoice = true;
/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
export class MedicinalProductInteraction extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductInteraction';
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['interactant']) {
            this.interactant = source.interactant.map((x) => new fhir.MedicinalProductInteractionInteractant(x));
        }
        else {
            this.interactant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['effect']) {
            this.effect = new fhir.CodeableConcept(source.effect);
        }
        if (source['incidence']) {
            this.incidence = new fhir.CodeableConcept(source.incidence);
        }
        if (source['management']) {
            this.management = new fhir.CodeableConcept(source.management);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductInteraction';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: MedicinalProductInteraction.resourceType:"MedicinalProductInteraction"', expression: [expression] });
        }
        if (this["subject"]) {
            this.subject.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.subject[${i}]`)); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation(expression + '.description'));
        }
        if (this["interactant"]) {
            this.interactant.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.interactant[${i}]`)); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation(expression + '.type'));
        }
        if (this["effect"]) {
            issues.push(...this.effect.doModelValidation(expression + '.effect'));
        }
        if (this["incidence"]) {
            issues.push(...this.incidence.doModelValidation(expression + '.incidence'));
        }
        if (this["management"]) {
            issues.push(...this.management.doModelValidation(expression + '.management'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductInteraction._fts_dataType = 'MedicinalProductInteraction';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9NZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsNkNBQTZDO0FBRTdDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBb0JuQzs7R0FFRztBQUNILE1BQU0sT0FBTyxzQ0FBdUMsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWE5RTs7T0FFRztJQUNILFlBQVksU0FBNkQsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDbkgsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztTQUFFO2FBQzNDLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQUU7YUFDdEYsSUFBSSxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQUU7YUFDeEc7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUFFO0lBQzVCLENBQUM7SUFDRDs7T0FFRztJQUNhLGlCQUFpQixDQUFDLGFBQW9CLEVBQUU7UUFDdEQsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqRSxJQUFJLFVBQVUsS0FBSyxFQUFFLEVBQUU7WUFBRSxVQUFVLEdBQUcseUNBQXlDLENBQUE7U0FBRTtRQUNqRixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLHVGQUF1RixFQUFFLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN0TDtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBaENEOztHQUVHO0FBQzZCLG9EQUFhLEdBQVUsd0NBQXdDLENBQUM7QUFLaEc7O0dBRUc7QUFDdUIsd0RBQWlCLEdBQVEsSUFBSSxDQUFDO0FBaUUxRDs7R0FFRztBQUNILE1BQU0sT0FBTywyQkFBNEIsU0FBUSxJQUFJLENBQUMsY0FBYztJQXFDbEU7O09BRUc7SUFDSCxZQUFZLFNBQWtELEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQ3hHLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyw2QkFBNkIsQ0FBQztRQUNsRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDdEY7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQzNCLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7U0FBRTtRQUNuRyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUMxQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsWUFBYSxDQUFDLENBQUM7YUFBRTtpQkFDbEY7Z0JBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFlBQTRDLENBQUMsQ0FBQzthQUFFO1NBQ3RHO1FBQ0QsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDL0g7WUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQy9CLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQUU7UUFDMUUsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FBRTtRQUNoRixJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUFFO1FBQ3pGLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQUU7SUFDOUYsQ0FBQztJQUNEOztPQUVHO0lBQ2EsaUJBQWlCLENBQUMsYUFBb0IsRUFBRTtRQUN0RCxJQUFJLE1BQU0sR0FBbUIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksVUFBVSxLQUFLLEVBQUUsRUFBRTtZQUFFLFVBQVUsR0FBRyw2QkFBNkIsQ0FBQTtTQUFFO1FBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUscUhBQXFILEVBQUUsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BOO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBRTtRQUM3SCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDM0csSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3pJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUN0RixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDNUYsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3JHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUN4RyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQXpFRDs7R0FFRztBQUM2Qix5Q0FBYSxHQUFVLDZCQUE2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb25cclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uSW50ZXJhY3RhbnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uSW50ZXJhY3RhbnRBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWMgbWVkaWNhdGlvbiwgZm9vZCBvciBsYWJvcmF0b3J5IHRlc3QgdGhhdCBpbnRlcmFjdHMuXHJcbiAgICovXHJcbiAgaXRlbT86IGZoaXIuUmVmZXJlbmNlfGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWMgbWVkaWNhdGlvbiwgZm9vZCBvciBsYWJvcmF0b3J5IHRlc3QgdGhhdCBpbnRlcmFjdHMuXHJcbiAgICovXHJcbiAgaXRlbVJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNwZWNpZmljIG1lZGljYXRpb24sIGZvb2Qgb3IgbGFib3JhdG9yeSB0ZXN0IHRoYXQgaW50ZXJhY3RzLlxyXG4gICAqL1xyXG4gIGl0ZW1Db2RlYWJsZUNvbmNlcHQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHNwZWNpZmljIG1lZGljYXRpb24sIGZvb2Qgb3IgbGFib3JhdG9yeSB0ZXN0IHRoYXQgaW50ZXJhY3RzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lZGljaW5hbFByb2R1Y3RJbnRlcmFjdGlvbkludGVyYWN0YW50IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uSW50ZXJhY3RhbnQnO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWZpYyBtZWRpY2F0aW9uLCBmb29kIG9yIGxhYm9yYXRvcnkgdGVzdCB0aGF0IGludGVyYWN0cy5cclxuICAgKi9cclxuICBwdWJsaWMgaXRlbTogKGZoaXIuUmVmZXJlbmNlfGZoaXIuQ29kZWFibGVDb25jZXB0KXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uLmludGVyYWN0YW50Lml0ZW1beF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfaXRlbUlzQ2hvaWNlOnRydWUgPSB0cnVlO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljaW5hbFByb2R1Y3RJbnRlcmFjdGlvbkludGVyYWN0YW50IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8TWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uSW50ZXJhY3RhbnRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnaXRlbSddKSB7IHRoaXMuaXRlbSA9IHNvdXJjZS5pdGVtOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ2l0ZW1SZWZlcmVuY2UnXSkgeyB0aGlzLml0ZW0gPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLml0ZW1SZWZlcmVuY2UpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ2l0ZW1Db2RlYWJsZUNvbmNlcHQnXSkgeyB0aGlzLml0ZW0gPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLml0ZW1Db2RlYWJsZUNvbmNlcHQpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pdGVtID0gbnVsbDsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24uaW50ZXJhY3RhbnQnIH1cclxuICAgIGlmICghdGhpc1snaXRlbSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBpdGVtIGZoaXI6IE1lZGljaW5hbFByb2R1Y3RJbnRlcmFjdGlvbi5pbnRlcmFjdGFudC5pdGVtW3hdOicsIGV4cHJlc3Npb246IFtleHByZXNzaW9uXSB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uXCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtZWRpY2F0aW9uIGZvciB3aGljaCB0aGlzIGlzIGEgZGVzY3JpYmVkIGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIHN1YmplY3Q/OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGludGVyYWN0aW9uIGRlc2NyaWJlZC5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24uZGVzY3JpcHRpb25cclxuICAgKi9cclxuICBfZGVzY3JpcHRpb24/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaWZpYyBtZWRpY2F0aW9uLCBmb29kIG9yIGxhYm9yYXRvcnkgdGVzdCB0aGF0IGludGVyYWN0cy5cclxuICAgKi9cclxuICBpbnRlcmFjdGFudD86IGZoaXIuTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uSW50ZXJhY3RhbnRBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBpbnRlcmFjdGlvbiBlLmcuIGRydWctZHJ1ZyBpbnRlcmFjdGlvbiwgZHJ1Zy1mb29kIGludGVyYWN0aW9uLCBkcnVnLWxhYiB0ZXN0IGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlZmZlY3Qgb2YgdGhlIGludGVyYWN0aW9uLCBmb3IgZXhhbXBsZSBcInJlZHVjZWQgZ2FzdHJpYyBhYnNvcnB0aW9uIG9mIHByaW1hcnkgbWVkaWNhdGlvblwiLlxyXG4gICAqL1xyXG4gIGVmZmVjdD86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGluY2lkZW5jZSBvZiB0aGUgaW50ZXJhY3Rpb24sIGUuZy4gdGhlb3JldGljYWwsIG9ic2VydmVkLlxyXG4gICAqL1xyXG4gIGluY2lkZW5jZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWN0aW9ucyBmb3IgbWFuYWdpbmcgdGhlIGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIG1hbmFnZW1lbnQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGludGVyYWN0aW9ucyBvZiB0aGUgbWVkaWNpbmFsIHByb2R1Y3Qgd2l0aCBvdGhlciBtZWRpY2luYWwgcHJvZHVjdHMsIG9yIG90aGVyIGZvcm1zIG9mIGludGVyYWN0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3RJbnRlcmFjdGlvbic7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb25cIjtcclxuICAvKipcclxuICAgKiBUaGUgbWVkaWNhdGlvbiBmb3Igd2hpY2ggdGhpcyBpcyBhIGRlc2NyaWJlZCBpbnRlcmFjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc3ViamVjdDogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBUaGUgaW50ZXJhY3Rpb24gZGVzY3JpYmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHNwZWNpZmljIG1lZGljYXRpb24sIGZvb2Qgb3IgbGFib3JhdG9yeSB0ZXN0IHRoYXQgaW50ZXJhY3RzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbnRlcmFjdGFudDogZmhpci5NZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb25JbnRlcmFjdGFudFtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBpbnRlcmFjdGlvbiBlLmcuIGRydWctZHJ1ZyBpbnRlcmFjdGlvbiwgZHJ1Zy1mb29kIGludGVyYWN0aW9uLCBkcnVnLWxhYiB0ZXN0IGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlZmZlY3Qgb2YgdGhlIGludGVyYWN0aW9uLCBmb3IgZXhhbXBsZSBcInJlZHVjZWQgZ2FzdHJpYyBhYnNvcnB0aW9uIG9mIHByaW1hcnkgbWVkaWNhdGlvblwiLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlZmZlY3Q/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGluY2lkZW5jZSBvZiB0aGUgaW50ZXJhY3Rpb24sIGUuZy4gdGhlb3JldGljYWwsIG9ic2VydmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmNpZGVuY2U/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWN0aW9ucyBmb3IgbWFuYWdpbmcgdGhlIGludGVyYWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYW5hZ2VtZW50PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIE1lZGljaW5hbFByb2R1Y3RJbnRlcmFjdGlvbiAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPE1lZGljaW5hbFByb2R1Y3RJbnRlcmFjdGlvbkFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24nO1xyXG4gICAgaWYgKHNvdXJjZVsnc3ViamVjdCddKSB7IHRoaXMuc3ViamVjdCA9IHNvdXJjZS5zdWJqZWN0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUmVmZXJlbmNlKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuc3ViamVjdCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydkZXNjcmlwdGlvbiddKSB7IHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLmRlc2NyaXB0aW9ufSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kZXNjcmlwdGlvbiddKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uKSB7IHRoaXMuZGVzY3JpcHRpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGVzY3JpcHRpb24hKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9kZXNjcmlwdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnaW50ZXJhY3RhbnQnXSkgeyB0aGlzLmludGVyYWN0YW50ID0gc291cmNlLmludGVyYWN0YW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uSW50ZXJhY3RhbnQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5pbnRlcmFjdGFudCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50eXBlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZWZmZWN0J10pIHsgdGhpcy5lZmZlY3QgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmVmZmVjdCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2luY2lkZW5jZSddKSB7IHRoaXMuaW5jaWRlbmNlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5pbmNpZGVuY2UpOyB9XHJcbiAgICBpZiAoc291cmNlWydtYW5hZ2VtZW50J10pIHsgdGhpcy5tYW5hZ2VtZW50ID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5tYW5hZ2VtZW50KTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24nIH1cclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VUeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlc291cmNlVHlwZSBmaGlyOiBNZWRpY2luYWxQcm9kdWN0SW50ZXJhY3Rpb24ucmVzb3VyY2VUeXBlOlwiTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uXCInLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInN1YmplY3RcIl0pIHsgdGhpcy5zdWJqZWN0LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5zdWJqZWN0WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImRlc2NyaXB0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuZGVzY3JpcHRpb24uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmRlc2NyaXB0aW9uJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImludGVyYWN0YW50XCJdKSB7IHRoaXMuaW50ZXJhY3RhbnQuZm9yRWFjaCgoeCxpKSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbitgLmludGVyYWN0YW50WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy50eXBlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImVmZmVjdFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmVmZmVjdC5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuZWZmZWN0JykpOyB9XHJcbiAgICBpZiAodGhpc1tcImluY2lkZW5jZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmluY2lkZW5jZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuaW5jaWRlbmNlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcIm1hbmFnZW1lbnRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5tYW5hZ2VtZW50LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5tYW5hZ2VtZW50JykpOyB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=