// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductInteraction
import * as fhir from '../fhir.js';
/**
 * The specific medication, food or laboratory test that interacts.
 */
export class MedicinalProductInteractionInteractant extends fhir.BackboneElement {
    /**
     * Default constructor for MedicinalProductInteractionInteractant - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['item']) {
            this.item = source.item;
        }
        else if (source['itemReference']) {
            this.item = new fhir.Reference(source.itemReference);
        }
        else if (source['itemCodeableConcept']) {
            this.item = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        else {
            this.item = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['item']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property item: fhir: MedicinalProductInteraction.interactant.item[x]:', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductInteractionInteractant._fts_dataType = 'MedicinalProductInteractionInteractant';
/**
 * Internal flag to properly serialize choice-type element MedicinalProductInteraction.interactant.item[x]
 */
MedicinalProductInteractionInteractant._fts_itemIsChoice = true;
/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
export class MedicinalProductInteraction extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductInteraction - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductInteraction';
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['interactant']) {
            this.interactant = source.interactant.map((x) => new fhir.MedicinalProductInteractionInteractant(x));
        }
        else {
            this.interactant = [];
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['effect']) {
            this.effect = new fhir.CodeableConcept(source.effect);
        }
        if (source['incidence']) {
            this.incidence = new fhir.CodeableConcept(source.incidence);
        }
        if (source['management']) {
            this.management = new fhir.CodeableConcept(source.management);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicinalProductInteraction" fhir: MedicinalProductInteraction.resourceType:"MedicinalProductInteraction"', });
        }
        if (this["subject"]) {
            this.subject.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["interactant"]) {
            this.interactant.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["effect"]) {
            issues.push(...this.effect.doModelValidation());
        }
        if (this["incidence"]) {
            issues.push(...this.incidence.doModelValidation());
        }
        if (this["management"]) {
            issues.push(...this.management.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductInteraction._fts_dataType = 'MedicinalProductInteraction';
//# sourceMappingURL=data:application/json;base64,