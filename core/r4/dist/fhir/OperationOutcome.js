// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationOutcome
import * as fhir from '../fhir.js';
// @ts-ignore
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
// @ts-ignore
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
/**
 * An error, warning, or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        else {
            this.severity = null;
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['details']) {
            this.details = new fhir.CodeableConcept(source.details);
        }
        if (source['diagnostics']) {
            this.diagnostics = new fhir.FhirString({ value: source.diagnostics });
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.location = [];
        }
        if (source['expression']) {
            this.expression = source.expression.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.expression = [];
        }
    }
    /**
     * Required-bound Value Set for severity (OperationOutcome.issue.severity)
     */
    static get severityRequiredCodes() {
        return IssueSeverityCodes;
    }
    /**
     * Required-bound Value Set for code (OperationOutcome.issue.code)
     */
    static get codeRequiredCodes() {
        return IssueTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['severity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property severity:fhir.FhirCode<IssueSeverityCodeType> fhir: OperationOutcome.issue.severity:code' });
        }
        if (this['severity'] && (!Object.values(IssueSeverityCodes).includes(this.severity))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property severity:fhir.FhirCode<IssueSeverityCodeType> fhir: OperationOutcome.issue.severity:code Required binding to: IssueSeverity' });
        }
        if (this["severity"]) {
            issues.push(...this.severity.doModelValidation());
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.FhirCode fhir: OperationOutcome.issue.code:code' });
        }
        if (this['code'] && (!Object.values(IssueTypeCodes).includes(this.code))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property code:fhir.FhirCode fhir: OperationOutcome.issue.code:code Required binding to: IssueType' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["details"]) {
            issues.push(...this.details.doModelValidation());
        }
        if (this["diagnostics"]) {
            issues.push(...this.diagnostics.doModelValidation());
        }
        if (this["location"]) {
            this.location.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["expression"]) {
            this.expression.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcomeIssue._fts_dataType = 'OperationOutcomeIssue';
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource {
    /**
     * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OperationOutcome';
        if (source['issue']) {
            this.issue = source.issue.map((x) => new fhir.OperationOutcomeIssue(x));
        }
        else {
            this.issue = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"OperationOutcome" fhir: OperationOutcome.resourceType:"OperationOutcome"' });
        }
        if (!this['issue']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property issue:fhir.OperationOutcomeIssue[] fhir: OperationOutcome.issue:issue' });
        }
        else if (!Array.isArray(this.issue)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property issue:fhir.OperationOutcomeIssue[] fhir: OperationOutcome.issue:issue' });
        }
        else if (this.issue.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property issue:fhir.OperationOutcomeIssue[] fhir: OperationOutcome.issue:issue' });
        }
        if (this["issue"]) {
            this.issue.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcome._fts_dataType = 'OperationOutcome';
//# sourceMappingURL=data:application/json;base64,