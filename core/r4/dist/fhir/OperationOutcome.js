// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: OperationOutcome
import * as fhir from '../fhir.js';
// @ts-ignore
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
// @ts-ignore
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
/**
 * An error, warning, or information message that results from a system action.
 */
export class OperationOutcomeIssue extends fhir.BackboneElement {
    /**
     * Default constructor for OperationOutcomeIssue - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['severity']) {
            this.severity = new fhir.FhirCode({ value: source.severity });
        }
        else {
            this.severity = null;
        }
        if (source['_severity']) {
            if (this.severity) {
                this.severity.addExtendedProperties(source._severity);
            }
            else {
                this.severity = new fhir.FhirCode(source._severity);
            }
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['_code']) {
            if (this.code) {
                this.code.addExtendedProperties(source._code);
            }
            else {
                this.code = new fhir.FhirCode(source._code);
            }
        }
        if (source['details']) {
            this.details = new fhir.CodeableConcept(source.details);
        }
        if (source['diagnostics']) {
            this.diagnostics = new fhir.FhirString({ value: source.diagnostics });
        }
        if (source['_diagnostics']) {
            if (this.diagnostics) {
                this.diagnostics.addExtendedProperties(source._diagnostics);
            }
            else {
                this.diagnostics = new fhir.FhirString(source._diagnostics);
            }
        }
        if (source['location']) {
            this.location = source.location.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.location = [];
        }
        if (source['_location']) {
            source._location.forEach((x, i) => {
                if (this.location.length >= i) {
                    if (x) {
                        this.location[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.location.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['expression']) {
            this.expression = source.expression.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.expression = [];
        }
        if (source['_expression']) {
            source._expression.forEach((x, i) => {
                if (this.expression.length >= i) {
                    if (x) {
                        this.expression[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.expression.push(new fhir.FhirString(x));
                    }
                }
            });
        }
    }
    /**
     * Required-bound Value Set for severity (OperationOutcome.issue.severity)
     */
    static get severityRequiredCodes() {
        return IssueSeverityCodes;
    }
    /**
     * Required-bound Value Set for code (OperationOutcome.issue.code)
     */
    static get codeRequiredCodes() {
        return IssueTypeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'OperationOutcome.issue';
        }
        if (!this['severity']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property severity fhir: OperationOutcome.issue.severity:code', expression: [expression] });
        }
        if (this['severity'] && (!Object.values(IssueSeverityCodes).includes(this.severity.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'severity (OperationOutcome.issue.severity) of type code is missing code for Required binding to: IssueSeverity', expression: [expression] });
        }
        if (this["severity"]) {
            issues.push(...this.severity.doModelValidation(expression + '.severity'));
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code fhir: OperationOutcome.issue.code:code', expression: [expression] });
        }
        if (this['code'] && (!Object.values(IssueTypeCodes).includes(this.code.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'code (OperationOutcome.issue.code) of type code is missing code for Required binding to: IssueType', expression: [expression] });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation(expression + '.code'));
        }
        if (this["details"]) {
            issues.push(...this.details.doModelValidation(expression + '.details'));
        }
        if (this["diagnostics"]) {
            issues.push(...this.diagnostics.doModelValidation(expression + '.diagnostics'));
        }
        if (this["location"]) {
            this.location.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.location[${i}]`)); });
        }
        if (this["expression"]) {
            this.expression.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.expression[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcomeIssue._fts_dataType = 'OperationOutcomeIssue';
/**
 * A collection of error, warning, or information messages that result from a system action.
 */
export class OperationOutcome extends fhir.DomainResource {
    /**
     * Default constructor for OperationOutcome - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'OperationOutcome';
        if (source['issue']) {
            this.issue = source.issue.map((x) => new fhir.OperationOutcomeIssue(x));
        }
        else {
            this.issue = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'OperationOutcome';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: OperationOutcome.resourceType:"OperationOutcome"', expression: [expression] });
        }
        if (!this['issue']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property issue fhir: OperationOutcome.issue:issue', expression: [expression] });
        }
        else if (!Array.isArray(this.issue)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property issue fhir: OperationOutcome.issue:issue', expression: [expression] });
        }
        else if (this.issue.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property issue fhir: OperationOutcome.issue:issue', expression: [expression] });
        }
        if (this["issue"]) {
            this.issue.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.issue[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
OperationOutcome._fts_dataType = 'OperationOutcome';
//# sourceMappingURL=data:application/json;base64,