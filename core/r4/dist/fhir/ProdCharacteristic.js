/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { BackboneElement } from './BackboneElement.js';
import { Quantity } from './Quantity.js';
import { FhirString } from './FhirString.js';
import { Attachment } from './Attachment.js';
import { CodeableConcept } from './CodeableConcept.js';

// <auto-generated/>
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
var ProdCharacteristic = /** @class */ (function (_super) {
    __extends(ProdCharacteristic, _super);
    /**
     * Default constructor for ProdCharacteristic - initializes any required elements to null if a value is not provided.
     */
    function ProdCharacteristic(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['height']) {
            _this.height = new Quantity(source.height);
        }
        if (source['width']) {
            _this.width = new Quantity(source.width);
        }
        if (source['depth']) {
            _this.depth = new Quantity(source.depth);
        }
        if (source['weight']) {
            _this.weight = new Quantity(source.weight);
        }
        if (source['nominalVolume']) {
            _this.nominalVolume = new Quantity(source.nominalVolume);
        }
        if (source['externalDiameter']) {
            _this.externalDiameter = new Quantity(source.externalDiameter);
        }
        if (source['shape']) {
            _this.shape = new FhirString({ value: source.shape });
        }
        if (source['color']) {
            _this.color = source.color.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.color = [];
        }
        if (source['imprint']) {
            _this.imprint = source.imprint.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.imprint = [];
        }
        if (source['image']) {
            _this.image = source.image.map(function (x) { return new Attachment(x); });
        }
        else {
            _this.image = [];
        }
        if (source['scoring']) {
            _this.scoring = new CodeableConcept(source.scoring);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ProdCharacteristic.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["height"]) {
            (_a = outcome.issue).push.apply(_a, this.height.doModelValidation().issue);
        }
        if (this["width"]) {
            (_b = outcome.issue).push.apply(_b, this.width.doModelValidation().issue);
        }
        if (this["depth"]) {
            (_c = outcome.issue).push.apply(_c, this.depth.doModelValidation().issue);
        }
        if (this["weight"]) {
            (_d = outcome.issue).push.apply(_d, this.weight.doModelValidation().issue);
        }
        if (this["nominalVolume"]) {
            (_e = outcome.issue).push.apply(_e, this.nominalVolume.doModelValidation().issue);
        }
        if (this["externalDiameter"]) {
            (_f = outcome.issue).push.apply(_f, this.externalDiameter.doModelValidation().issue);
        }
        if (this["shape"]) {
            (_g = outcome.issue).push.apply(_g, this.shape.doModelValidation().issue);
        }
        if (this["color"]) {
            this.color.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["imprint"]) {
            this.imprint.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["image"]) {
            this.image.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["scoring"]) {
            (_h = outcome.issue).push.apply(_h, this.scoring.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ProdCharacteristic._fts_dataType = 'ProdCharacteristic';
    return ProdCharacteristic;
}(BackboneElement));

export { ProdCharacteristic };
//# sourceMappingURL=ProdCharacteristic.js.map
