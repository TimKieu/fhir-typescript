// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ProdCharacteristic
import * as fhir from '../fhir.js';
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export class ProdCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for ProdCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['height']) {
            this.height = new fhir.Quantity(source.height);
        }
        if (source['width']) {
            this.width = new fhir.Quantity(source.width);
        }
        if (source['depth']) {
            this.depth = new fhir.Quantity(source.depth);
        }
        if (source['weight']) {
            this.weight = new fhir.Quantity(source.weight);
        }
        if (source['nominalVolume']) {
            this.nominalVolume = new fhir.Quantity(source.nominalVolume);
        }
        if (source['externalDiameter']) {
            this.externalDiameter = new fhir.Quantity(source.externalDiameter);
        }
        if (source['shape']) {
            this.shape = new fhir.FhirString({ value: source.shape });
        }
        if (source['_shape']) {
            if (this.shape) {
                this.shape.addExtendedProperties(source._shape);
            }
            else {
                this.shape = new fhir.FhirString(source._shape);
            }
        }
        if (source['color']) {
            this.color = source.color.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.color = [];
        }
        if (source['_color']) {
            source._color.forEach((x, i) => {
                if (this.color.length >= i) {
                    if (x) {
                        this.color[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.color.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['imprint']) {
            this.imprint = source.imprint.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.imprint = [];
        }
        if (source['_imprint']) {
            source._imprint.forEach((x, i) => {
                if (this.imprint.length >= i) {
                    if (x) {
                        this.imprint[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.imprint.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.Attachment(x));
        }
        else {
            this.image = [];
        }
        if (source['scoring']) {
            this.scoring = new fhir.CodeableConcept(source.scoring);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["height"]) {
            issues.push(...this.height.doModelValidation());
        }
        if (this["width"]) {
            issues.push(...this.width.doModelValidation());
        }
        if (this["depth"]) {
            issues.push(...this.depth.doModelValidation());
        }
        if (this["weight"]) {
            issues.push(...this.weight.doModelValidation());
        }
        if (this["nominalVolume"]) {
            issues.push(...this.nominalVolume.doModelValidation());
        }
        if (this["externalDiameter"]) {
            issues.push(...this.externalDiameter.doModelValidation());
        }
        if (this["shape"]) {
            issues.push(...this.shape.doModelValidation());
        }
        if (this["color"]) {
            this.color.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["imprint"]) {
            this.imprint.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["image"]) {
            this.image.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["scoring"]) {
            issues.push(...this.scoring.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProdCharacteristic._fts_dataType = 'ProdCharacteristic';
//# sourceMappingURL=data:application/json;base64,