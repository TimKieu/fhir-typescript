// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ProdCharacteristic
import * as fhir from '../fhir.js';
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export class ProdCharacteristic extends fhir.BackboneElement {
    /**
     * Default constructor for ProdCharacteristic - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['height']) {
            this.height = new fhir.Quantity(source.height);
        }
        if (source['width']) {
            this.width = new fhir.Quantity(source.width);
        }
        if (source['depth']) {
            this.depth = new fhir.Quantity(source.depth);
        }
        if (source['weight']) {
            this.weight = new fhir.Quantity(source.weight);
        }
        if (source['nominalVolume']) {
            this.nominalVolume = new fhir.Quantity(source.nominalVolume);
        }
        if (source['externalDiameter']) {
            this.externalDiameter = new fhir.Quantity(source.externalDiameter);
        }
        if (source['shape']) {
            this.shape = new fhir.FhirString({ value: source.shape });
        }
        if (source['_shape']) {
            if (this.shape) {
                this.shape.addExtendedProperties(source._shape);
            }
            else {
                this.shape = new fhir.FhirString(source._shape);
            }
        }
        if (source['color']) {
            this.color = source.color.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.color = [];
        }
        if (source['_color']) {
            source._color.forEach((x, i) => {
                if (this.color.length >= i) {
                    if (x) {
                        this.color[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.color.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['imprint']) {
            this.imprint = source.imprint.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.imprint = [];
        }
        if (source['_imprint']) {
            source._imprint.forEach((x, i) => {
                if (this.imprint.length >= i) {
                    if (x) {
                        this.imprint[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.imprint.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['image']) {
            this.image = source.image.map((x) => new fhir.Attachment(x));
        }
        else {
            this.image = [];
        }
        if (source['scoring']) {
            this.scoring = new fhir.CodeableConcept(source.scoring);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ProdCharacteristic';
        }
        if (this["height"]) {
            issues.push(...this.height.doModelValidation(expression + '.height'));
        }
        if (this["width"]) {
            issues.push(...this.width.doModelValidation(expression + '.width'));
        }
        if (this["depth"]) {
            issues.push(...this.depth.doModelValidation(expression + '.depth'));
        }
        if (this["weight"]) {
            issues.push(...this.weight.doModelValidation(expression + '.weight'));
        }
        if (this["nominalVolume"]) {
            issues.push(...this.nominalVolume.doModelValidation(expression + '.nominalVolume'));
        }
        if (this["externalDiameter"]) {
            issues.push(...this.externalDiameter.doModelValidation(expression + '.externalDiameter'));
        }
        if (this["shape"]) {
            issues.push(...this.shape.doModelValidation(expression + '.shape'));
        }
        if (this["color"]) {
            this.color.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.color[${i}]`)); });
        }
        if (this["imprint"]) {
            this.imprint.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.imprint[${i}]`)); });
        }
        if (this["image"]) {
            this.image.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.image[${i}]`)); });
        }
        if (this["scoring"]) {
            issues.push(...this.scoring.doModelValidation(expression + '.scoring'));
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProdCharacteristic._fts_dataType = 'ProdCharacteristic';
//# sourceMappingURL=data:application/json;base64,