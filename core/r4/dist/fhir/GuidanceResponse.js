// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: GuidanceResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { GuidanceResponseStatusCodings, } from '../fhirValueSets/GuidanceResponseStatusCodings.js';
/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
export class GuidanceResponse extends fhir.DomainResource {
    /**
     * Default constructor for GuidanceResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'GuidanceResponse';
        if (source['requestIdentifier']) {
            this.requestIdentifier = new fhir.Identifier(source.requestIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['module']) {
            this.module = source.module;
        }
        else if (source['moduleUri']) {
            this.module = new fhir.FhirUri({ value: source.moduleUri });
        }
        else if (source['moduleCanonical']) {
            this.module = new fhir.FhirCanonical({ value: source.moduleCanonical });
        }
        else if (source['moduleCodeableConcept']) {
            this.module = new fhir.CodeableConcept(source.moduleCodeableConcept);
        }
        else {
            this.module = null;
        }
        if (source['status']) {
            this.status = source.status;
        }
        else {
            this.status = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['evaluationMessage']) {
            this.evaluationMessage = source.evaluationMessage.map((x) => new fhir.Reference(x));
        }
        else {
            this.evaluationMessage = [];
        }
        if (source['outputParameters']) {
            this.outputParameters = new fhir.Reference(source.outputParameters);
        }
        if (source['result']) {
            this.result = new fhir.Reference(source.result);
        }
        if (source['dataRequirement']) {
            this.dataRequirement = source.dataRequirement.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.dataRequirement = [];
        }
    }
    /**
     * Required-bound Value Set for status (GuidanceResponse.status)
     */
    static statusRequiredCoding() {
        return GuidanceResponseStatusCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"GuidanceResponse" fhir: GuidanceResponse.resourceType:"GuidanceResponse"', });
        }
        if (this["requestIdentifier"]) {
            issues.push(...this.requestIdentifier.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['module']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property module: fhir: GuidanceResponse.module[x]:', });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:GuidanceResponseStatusCodeType fhir: GuidanceResponse.status:code', });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["occurrenceDateTime"]) {
            issues.push(...this.occurrenceDateTime.doModelValidation());
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["evaluationMessage"]) {
            this.evaluationMessage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["outputParameters"]) {
            issues.push(...this.outputParameters.doModelValidation());
        }
        if (this["result"]) {
            issues.push(...this.result.doModelValidation());
        }
        if (this["dataRequirement"]) {
            this.dataRequirement.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GuidanceResponse._fts_dataType = 'GuidanceResponse';
/**
 * Internal flag to properly serialize choice-type element GuidanceResponse.module[x]
 */
GuidanceResponse._fts_moduleIsChoice = true;
//# sourceMappingURL=data:application/json;base64,