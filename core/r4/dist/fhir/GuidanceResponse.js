// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: GuidanceResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { GuidanceResponseStatusVsValidation } from '../fhirValueSets/GuidanceResponseStatusVsValidation.js';
/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
export class GuidanceResponse extends fhir.DomainResource {
    /**
     * Default constructor for GuidanceResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'GuidanceResponse';
        if (source['requestIdentifier']) {
            this.requestIdentifier = new fhir.Identifier(source.requestIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['module']) {
            this.module = source.module;
        }
        else if (source['moduleUri']) {
            this.module = new fhir.FhirUri({ value: source.moduleUri });
        }
        else if (source['moduleCanonical']) {
            this.module = new fhir.FhirCanonical({ value: source.moduleCanonical });
        }
        else if (source['moduleCodeableConcept']) {
            this.module = new fhir.CodeableConcept(source.moduleCodeableConcept);
        }
        else {
            this.module = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        if (source['_occurrenceDateTime']) {
            if (this.occurrenceDateTime) {
                this.occurrenceDateTime.addExtendedProperties(source._occurrenceDateTime);
            }
            else {
                this.occurrenceDateTime = new fhir.FhirDateTime(source._occurrenceDateTime);
            }
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['evaluationMessage']) {
            this.evaluationMessage = source.evaluationMessage.map((x) => new fhir.Reference(x));
        }
        else {
            this.evaluationMessage = [];
        }
        if (source['outputParameters']) {
            this.outputParameters = new fhir.Reference(source.outputParameters);
        }
        if (source['result']) {
            this.result = new fhir.Reference(source.result);
        }
        if (source['dataRequirement']) {
            this.dataRequirement = source.dataRequirement.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.dataRequirement = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'GuidanceResponse';
        }
        iss.push(...this.vRPS('resourceType', exp));
        iss.push(...this.vOS('requestIdentifier', exp));
        iss.push(...this.vOA('identifier', exp));
        iss.push(...this.vRS('module', exp));
        iss.push(...this.vRSV('status', exp, 'GuidanceResponseStatus', GuidanceResponseStatusVsValidation, 'r'));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOS('encounter', exp));
        iss.push(...this.vOS('occurrenceDateTime', exp));
        iss.push(...this.vOS('performer', exp));
        iss.push(...this.vOA('reasonCode', exp));
        iss.push(...this.vOA('reasonReference', exp));
        iss.push(...this.vOA('note', exp));
        iss.push(...this.vOA('evaluationMessage', exp));
        iss.push(...this.vOS('outputParameters', exp));
        iss.push(...this.vOS('result', exp));
        iss.push(...this.vOA('dataRequirement', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GuidanceResponse._fts_dataType = 'GuidanceResponse';
/**
 * Internal flag to properly serialize choice-type element GuidanceResponse.module[x]
 */
GuidanceResponse._fts_moduleIsChoice = true;
//# sourceMappingURL=data:application/json;base64,