/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { GuidanceResponseStatusCodings } from '../fhirValueSets/GuidanceResponseStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { FhirUri } from './FhirUri.js';
import { FhirCanonical } from './FhirCanonical.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Annotation } from './Annotation.js';
import { DataRequirement } from './DataRequirement.js';

// <auto-generated/>
/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
var GuidanceResponse = /** @class */ (function (_super) {
    __extends(GuidanceResponse, _super);
    /**
     * Default constructor for GuidanceResponse - initializes any required elements to null if a value is not provided.
     */
    function GuidanceResponse(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'GuidanceResponse';
        if (source['requestIdentifier']) {
            _this.requestIdentifier = new Identifier(source.requestIdentifier);
        }
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['module']) {
            _this.module = source.module;
        }
        else if (source['moduleUri']) {
            _this.module = new FhirUri({ value: source.moduleUri });
        }
        else if (source['moduleCanonical']) {
            _this.module = new FhirCanonical({ value: source.moduleCanonical });
        }
        else if (source['moduleCodeableConcept']) {
            _this.module = new CodeableConcept(source.moduleCodeableConcept);
        }
        else {
            _this.module = null;
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            _this.occurrenceDateTime = new FhirDateTime({ value: source.occurrenceDateTime });
        }
        if (source['performer']) {
            _this.performer = new Reference(source.performer);
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['evaluationMessage']) {
            _this.evaluationMessage = source.evaluationMessage.map(function (x) { return new Reference(x); });
        }
        else {
            _this.evaluationMessage = [];
        }
        if (source['outputParameters']) {
            _this.outputParameters = new Reference(source.outputParameters);
        }
        if (source['result']) {
            _this.result = new Reference(source.result);
        }
        if (source['dataRequirement']) {
            _this.dataRequirement = source.dataRequirement.map(function (x) { return new DataRequirement(x); });
        }
        else {
            _this.dataRequirement = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (GuidanceResponse.status)
     */
    GuidanceResponse.statusRequiredCoding = function () {
        return GuidanceResponseStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    GuidanceResponse.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"GuidanceResponse" fhir: GuidanceResponse.resourceType:"GuidanceResponse"', }));
        }
        if (this["requestIdentifier"]) {
            (_a = outcome.issue).push.apply(_a, this.requestIdentifier.doModelValidation().issue);
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['module']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property module: fhir: GuidanceResponse.module[x]:', }));
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:GuidanceResponseStatusCodeType fhir: GuidanceResponse.status:code', }));
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_c = outcome.issue).push.apply(_c, this.encounter.doModelValidation().issue);
        }
        if (this["occurrenceDateTime"]) {
            (_d = outcome.issue).push.apply(_d, this.occurrenceDateTime.doModelValidation().issue);
        }
        if (this["performer"]) {
            (_e = outcome.issue).push.apply(_e, this.performer.doModelValidation().issue);
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["evaluationMessage"]) {
            this.evaluationMessage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["outputParameters"]) {
            (_f = outcome.issue).push.apply(_f, this.outputParameters.doModelValidation().issue);
        }
        if (this["result"]) {
            (_g = outcome.issue).push.apply(_g, this.result.doModelValidation().issue);
        }
        if (this["dataRequirement"]) {
            this.dataRequirement.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    GuidanceResponse._fts_dataType = 'GuidanceResponse';
    /**
     * Internal flag to properly serialize choice-type element GuidanceResponse.module[x]
     */
    GuidanceResponse._fts_moduleIsChoice = true;
    return GuidanceResponse;
}(DomainResource));

export { GuidanceResponse };
//# sourceMappingURL=GuidanceResponse.js.map
