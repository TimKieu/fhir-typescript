// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: GuidanceResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { GuidanceResponseStatusCodes } from '../fhirValueSets/GuidanceResponseStatusCodes.js';
/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
export class GuidanceResponse extends fhir.DomainResource {
    /**
     * Default constructor for GuidanceResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'GuidanceResponse';
        if (source['requestIdentifier']) {
            this.requestIdentifier = new fhir.Identifier(source.requestIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['module']) {
            this.module = source.module;
        }
        else if (source['moduleUri']) {
            this.module = new fhir.FhirUri({ value: source.moduleUri });
        }
        else if (source['moduleCanonical']) {
            this.module = new fhir.FhirCanonical({ value: source.moduleCanonical });
        }
        else if (source['moduleCodeableConcept']) {
            this.module = new fhir.CodeableConcept(source.moduleCodeableConcept);
        }
        else {
            this.module = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        if (source['_occurrenceDateTime']) {
            if (this.occurrenceDateTime) {
                this.occurrenceDateTime.addExtendedProperties(source._occurrenceDateTime);
            }
            else {
                this.occurrenceDateTime = new fhir.FhirDateTime(source._occurrenceDateTime);
            }
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['evaluationMessage']) {
            this.evaluationMessage = source.evaluationMessage.map((x) => new fhir.Reference(x));
        }
        else {
            this.evaluationMessage = [];
        }
        if (source['outputParameters']) {
            this.outputParameters = new fhir.Reference(source.outputParameters);
        }
        if (source['result']) {
            this.result = new fhir.Reference(source.result);
        }
        if (source['dataRequirement']) {
            this.dataRequirement = source.dataRequirement.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.dataRequirement = [];
        }
    }
    /**
     * Required-bound Value Set for status (GuidanceResponse.status)
     */
    static get statusRequiredCodes() {
        return GuidanceResponseStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"GuidanceResponse" fhir: GuidanceResponse.resourceType:"GuidanceResponse"' });
        }
        if (this["requestIdentifier"]) {
            issues.push(...this.requestIdentifier.doModelValidation());
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['module']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property module: fhir: GuidanceResponse.module[x]:' });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<GuidanceResponseStatusCodeType> fhir: GuidanceResponse.status:code' });
        }
        if (this['status'] && (!Object.values(GuidanceResponseStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<GuidanceResponseStatusCodeType> fhir: GuidanceResponse.status:code Required binding to: GuidanceResponseStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation());
        }
        if (this["occurrenceDateTime"]) {
            issues.push(...this.occurrenceDateTime.doModelValidation());
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation());
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["evaluationMessage"]) {
            this.evaluationMessage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["outputParameters"]) {
            issues.push(...this.outputParameters.doModelValidation());
        }
        if (this["result"]) {
            issues.push(...this.result.doModelValidation());
        }
        if (this["dataRequirement"]) {
            this.dataRequirement.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GuidanceResponse._fts_dataType = 'GuidanceResponse';
/**
 * Internal flag to properly serialize choice-type element GuidanceResponse.module[x]
 */
GuidanceResponse._fts_moduleIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VpZGFuY2VSZXNwb25zZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvR3VpZGFuY2VSZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFFbEMsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFJbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSwyQkFBMkIsRUFBbUMsTUFBTSxpREFBaUQsQ0FBQztBQTJGL0g7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsSUFBSSxDQUFDLGNBQWM7SUF5RXZEOztPQUVHO0lBQ0gsWUFBWSxTQUF1QyxFQUFFLEVBQUUsVUFBc0MsRUFBRTtRQUM3RixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsa0JBQWtCLENBQUM7UUFDdkMsSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FBRTtRQUM1RyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDaEc7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQzlCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQUU7YUFDakQsSUFBSSxNQUFNLENBQUMsV0FBVyxD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QUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztTQUFFO1FBQ3hFLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ2hILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBdkpEOztHQUVHO0FBQzZCLDhCQUFhLEdBQVUsa0JBQWtCLENBQUM7QUFpQjFFOztHQUVHO0FBQ3VCLG9DQUFtQixHQUFRLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogR3VpZGFuY2VSZXNwb25zZVxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgR3VpZGFuY2VSZXNwb25zZVN0YXR1c0NvZGluZ3MsIEd1aWRhbmNlUmVzcG9uc2VTdGF0dXNDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9HdWlkYW5jZVJlc3BvbnNlU3RhdHVzQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgR3VpZGFuY2VSZXNwb25zZVN0YXR1c0NvZGVzLCAgR3VpZGFuY2VSZXNwb25zZVN0YXR1c0NvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9HdWlkYW5jZVJlc3BvbnNlU3RhdHVzQ29kZXMuanMnO1xyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgR3VpZGFuY2VSZXNwb25zZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBHdWlkYW5jZVJlc3BvbnNlQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiR3VpZGFuY2VSZXNwb25zZVwifHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgcmVxdWVzdCBhc3NvY2lhdGVkIHdpdGggdGhpcyByZXNwb25zZS4gSWYgYW4gaWRlbnRpZmllciB3YXMgZ2l2ZW4gYXMgcGFydCBvZiB0aGUgcmVxdWVzdCwgaXQgd2lsbCBiZSByZXByb2R1Y2VkIGhlcmUgdG8gZW5hYmxlIHRoZSByZXF1ZXN0ZXIgdG8gbW9yZSBlYXNpbHkgaWRlbnRpZnkgdGhlIHJlc3BvbnNlIGluIGEgbXVsdGktcmVxdWVzdCBzY2VuYXJpby5cclxuICAgKi9cclxuICByZXF1ZXN0SWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllckFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBhIHNlcnZpY2UgdG8gcHJvdmlkZSAgdW5pcXVlLCBidXNpbmVzcyBpZGVudGlmaWVycyBmb3IgdGhlIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIGlkZW50aWZpZXIsIENvZGVhYmxlQ29uY2VwdCBvciBjYW5vbmljYWwgcmVmZXJlbmNlIHRvIHRoZSBndWlkYW5jZSB0aGF0IHdhcyByZXF1ZXN0ZWQuXHJcbiAgICovXHJcbiAgbW9kdWxlPzogZmhpci5GaGlyVXJpfGZoaXIuRmhpckNhbm9uaWNhbHxmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQW4gaWRlbnRpZmllciwgQ29kZWFibGVDb25jZXB0IG9yIGNhbm9uaWNhbCByZWZlcmVuY2UgdG8gdGhlIGd1aWRhbmNlIHRoYXQgd2FzIHJlcXVlc3RlZC5cclxuICAgKi9cclxuICBtb2R1bGVVcmk/OiBmaGlyLkZoaXJVcml8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBpZGVudGlmaWVyLCBDb2RlYWJsZUNvbmNlcHQgb3IgY2Fub25pY2FsIHJlZmVyZW5jZSB0byB0aGUgZ3VpZGFuY2UgdGhhdCB3YXMgcmVxdWVzdGVkLlxyXG4gICAqL1xyXG4gIG1vZHVsZUNhbm9uaWNhbD86IGZoaXIuRmhpckNhbm9uaWNhbHxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFuIGlkZW50aWZpZXIsIENvZGVhYmxlQ29uY2VwdCBvciBjYW5vbmljYWwgcmVmZXJlbmNlIHRvIHRoZSBndWlkYW5jZSB0aGF0IHdhcyByZXF1ZXN0ZWQuXHJcbiAgICovXHJcbiAgbW9kdWxlQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgdGhlIHN0YXR1cyBjb250YWlucyBjb2RlcyB0aGF0IG1hcmsgdGhlIHJlc291cmNlIGFzIG5vdCBjdXJyZW50bHkgdmFsaWQuXHJcbiAgICovXHJcbiAgc3RhdHVzOiBmaGlyLkZoaXJDb2RlPEd1aWRhbmNlUmVzcG9uc2VTdGF0dXNDb2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogR3VpZGFuY2VSZXNwb25zZS5zdGF0dXNcclxuICAgKi9cclxuICBfc3RhdHVzPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgcGF0aWVudCBmb3Igd2hpY2ggdGhlIHJlcXVlc3Qgd2FzIHByb2Nlc3NlZC5cclxuICAgKi9cclxuICBzdWJqZWN0PzogZmhpci5SZWZlcmVuY2VBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIHdpbGwgdHlwaWNhbGx5IGJlIHRoZSBlbmNvdW50ZXIgdGhlIGV2ZW50IG9jY3VycmVkIHdpdGhpbiwgYnV0IHNvbWUgYWN0aXZpdGllcyBtYXkgYmUgaW5pdGlhdGVkIHByaW9yIHRvIG9yIGFmdGVyIHRoZSBvZmZpY2lhbCBjb3BtbGV0aW9uIG9mIGFuIGVuY291bnRlciBidXQgc3RpbGwgYmUgdGllZCB0byB0aGUgY29udGV4dCBvZiB0aGUgZW5jb3VudGVyLlxyXG4gICAqL1xyXG4gIGVuY291bnRlcj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZW4gdGhlIGd1aWRhbmNlIHJlc3BvbnNlIHdhcyBwcm9jZXNzZWQuXHJcbiAgICovXHJcbiAgb2NjdXJyZW5jZURhdGVUaW1lPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogR3VpZGFuY2VSZXNwb25zZS5vY2N1cnJlbmNlRGF0ZVRpbWVcclxuICAgKi9cclxuICBfb2NjdXJyZW5jZURhdGVUaW1lPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBQcm92aWRlcyBhIHJlZmVyZW5jZSB0byB0aGUgZGV2aWNlIHRoYXQgcGVyZm9ybWVkIHRoZSBndWlkYW5jZS5cclxuICAgKi9cclxuICBwZXJmb3JtZXI/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlc2NyaWJlcyB0aGUgcmVhc29uIGZvciB0aGUgZ3VpZGFuY2UgcmVzcG9uc2UgaW4gY29kZWQgb3IgdGV4dHVhbCBmb3JtLlxyXG4gICAqL1xyXG4gIHJlYXNvbkNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSByZWFzb24gdGhlIHJlcXVlc3Qgd2FzIGluaXRpYXRlZC4gVGhpcyBpcyB0eXBpY2FsbHkgcHJvdmlkZWQgYXMgYSBwYXJhbWV0ZXIgdG8gdGhlIGV2YWx1YXRpb24gYW5kIGVjaG9lZCBieSB0aGUgc2VydmljZSwgYWx0aG91Z2ggZm9yIHNvbWUgdXNlIGNhc2VzLCBzdWNoIGFzIHN1YnNjcmlwdGlvbi0gb3IgZXZlbnQtYmFzZWQgc2NlbmFyaW9zLCBpdCBtYXkgcHJvdmlkZSBhbiBpbmRpY2F0aW9uIG9mIHRoZSBjYXVzZSBmb3IgdGhlIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIHJlYXNvblJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQcm92aWRlcyBhIG1lY2hhbmlzbSB0byBjb21tdW5pY2F0ZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXNwb25zZS5cclxuICAgKi9cclxuICBub3RlPzogZmhpci5Bbm5vdGF0aW9uQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNZXNzYWdlcyByZXN1bHRpbmcgZnJvbSB0aGUgZXZhbHVhdGlvbiBvZiB0aGUgYXJ0aWZhY3Qgb3IgYXJ0aWZhY3RzLiBBcyBwYXJ0IG9mIGV2YWx1YXRpbmcgdGhlIHJlcXVlc3QsIHRoZSBlbmdpbmUgbWF5IHByb2R1Y2UgaW5mb3JtYXRpb25hbCBvciB3YXJuaW5nIG1lc3NhZ2VzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHByb3ZpZGVkIGJ5IHRoaXMgZWxlbWVudC5cclxuICAgKi9cclxuICBldmFsdWF0aW9uTWVzc2FnZT86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgb3V0cHV0IHBhcmFtZXRlcnMgb2YgdGhlIGV2YWx1YXRpb24sIGlmIGFueS4gTWFueSBtb2R1bGVzIHdpbGwgcmVzdWx0IGluIHRoZSByZXR1cm4gb2Ygc3BlY2lmaWMgcmVzb3VyY2VzIHN1Y2ggYXMgcHJvY2VkdXJlIG9yIGNvbW11bmljYXRpb24gcmVxdWVzdHMgdGhhdCBhcmUgcmV0dXJuZWQgYXMgcGFydCBvZiB0aGUgb3BlcmF0aW9uIHJlc3VsdC4gSG93ZXZlciwgbW9kdWxlcyBtYXkgZGVmaW5lIHNwZWNpZmljIG91dHB1dHMgdGhhdCB3b3VsZCBiZSByZXR1cm5lZCBhcyB0aGUgcmVzdWx0IG9mIHRoZSBldmFsdWF0aW9uLCBhbmQgdGhlc2Ugd291bGQgYmUgcmV0dXJuZWQgaW4gdGhpcyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIG91dHB1dFBhcmFtZXRlcnM/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhY3Rpb25zLCBpZiBhbnksIHByb2R1Y2VkIGJ5IHRoZSBldmFsdWF0aW9uIG9mIHRoZSBhcnRpZmFjdC5cclxuICAgKi9cclxuICByZXN1bHQ/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBldmFsdWF0aW9uIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQgZHVlIHRvIGxhY2sgb2YgaW5mb3JtYXRpb24sIG9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gd291bGQgcG90ZW50aWFsbHkgcmVzdWx0IGluIGEgbW9yZSBhY2N1cmF0ZSByZXNwb25zZSwgdGhpcyBlbGVtZW50IHdpbGwgYSBkZXNjcmlwdGlvbiBvZiB0aGUgZGF0YSByZXF1aXJlZCBpbiBvcmRlciB0byBwcm9jZWVkIHdpdGggdGhlIGV2YWx1YXRpb24uIEEgc3Vic2VxdWVudCByZXF1ZXN0IHRvIHRoZSBzZXJ2aWNlIHNob3VsZCBpbmNsdWRlIHRoaXMgZGF0YS5cclxuICAgKi9cclxuICBkYXRhUmVxdWlyZW1lbnQ/OiBmaGlyLkRhdGFSZXF1aXJlbWVudEFyZ3NbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGd1aWRhbmNlIHJlc3BvbnNlIGlzIHRoZSBmb3JtYWwgcmVzcG9uc2UgdG8gYSBndWlkYW5jZSByZXF1ZXN0LCBpbmNsdWRpbmcgYW55IG91dHB1dCBwYXJhbWV0ZXJzIHJldHVybmVkIGJ5IHRoZSBldmFsdWF0aW9uLCBhcyB3ZWxsIGFzIHRoZSBkZXNjcmlwdGlvbiBvZiBhbnkgcHJvcG9zZWQgYWN0aW9ucyB0byBiZSB0YWtlbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBHdWlkYW5jZVJlc3BvbnNlIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdHdWlkYW5jZVJlc3BvbnNlJztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIkd1aWRhbmNlUmVzcG9uc2VcIjtcclxuICAvKipcclxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgcmVxdWVzdCBhc3NvY2lhdGVkIHdpdGggdGhpcyByZXNwb25zZS4gSWYgYW4gaWRlbnRpZmllciB3YXMgZ2l2ZW4gYXMgcGFydCBvZiB0aGUgcmVxdWVzdCwgaXQgd2lsbCBiZSByZXByb2R1Y2VkIGhlcmUgdG8gZW5hYmxlIHRoZSByZXF1ZXN0ZXIgdG8gbW9yZSBlYXNpbHkgaWRlbnRpZnkgdGhlIHJlc3BvbnNlIGluIGEgbXVsdGktcmVxdWVzdCBzY2VuYXJpby5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWVzdElkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBhIHNlcnZpY2UgdG8gcHJvdmlkZSAgdW5pcXVlLCBidXNpbmVzcyBpZGVudGlmaWVycyBmb3IgdGhlIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyOiBmaGlyLklkZW50aWZpZXJbXTtcclxuICAvKipcclxuICAgKiBBbiBpZGVudGlmaWVyLCBDb2RlYWJsZUNvbmNlcHQgb3IgY2Fub25pY2FsIHJlZmVyZW5jZSB0byB0aGUgZ3VpZGFuY2UgdGhhdCB3YXMgcmVxdWVzdGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb2R1bGU6IChmaGlyLkZoaXJVcml8Zmhpci5GaGlyQ2Fub25pY2FsfGZoaXIuQ29kZWFibGVDb25jZXB0KXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgR3VpZGFuY2VSZXNwb25zZS5tb2R1bGVbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfbW9kdWxlSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIHRoZSBzdGF0dXMgY29udGFpbnMgY29kZXMgdGhhdCBtYXJrIHRoZSByZXNvdXJjZSBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0dXM6IGZoaXIuRmhpckNvZGU8R3VpZGFuY2VSZXNwb25zZVN0YXR1c0NvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwYXRpZW50IGZvciB3aGljaCB0aGUgcmVxdWVzdCB3YXMgcHJvY2Vzc2VkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJqZWN0PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgd2lsbCB0eXBpY2FsbHkgYmUgdGhlIGVuY291bnRlciB0aGUgZXZlbnQgb2NjdXJyZWQgd2l0aGluLCBidXQgc29tZSBhY3Rpdml0aWVzIG1heSBiZSBpbml0aWF0ZWQgcHJpb3IgdG8gb3IgYWZ0ZXIgdGhlIG9mZmljaWFsIGNvcG1sZXRpb24gb2YgYW4gZW5jb3VudGVyIGJ1dCBzdGlsbCBiZSB0aWVkIHRvIHRoZSBjb250ZXh0IG9mIHRoZSBlbmNvdW50ZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGVuY291bnRlcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgd2hlbiB0aGUgZ3VpZGFuY2UgcmVzcG9uc2Ugd2FzIHByb2Nlc3NlZC5cclxuICAgKi9cclxuICBwdWJsaWMgb2NjdXJyZW5jZURhdGVUaW1lPzogZmhpci5GaGlyRGF0ZVRpbWV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFByb3ZpZGVzIGEgcmVmZXJlbmNlIHRvIHRoZSBkZXZpY2UgdGhhdCBwZXJmb3JtZWQgdGhlIGd1aWRhbmNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwZXJmb3JtZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVzY3JpYmVzIHRoZSByZWFzb24gZm9yIHRoZSBndWlkYW5jZSByZXNwb25zZSBpbiBjb2RlZCBvciB0ZXh0dWFsIGZvcm0uXHJcbiAgICovXHJcbiAgcHVibGljIHJlYXNvbkNvZGU6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSByZWFzb24gdGhlIHJlcXVlc3Qgd2FzIGluaXRpYXRlZC4gVGhpcyBpcyB0eXBpY2FsbHkgcHJvdmlkZWQgYXMgYSBwYXJhbWV0ZXIgdG8gdGhlIGV2YWx1YXRpb24gYW5kIGVjaG9lZCBieSB0aGUgc2VydmljZSwgYWx0aG91Z2ggZm9yIHNvbWUgdXNlIGNhc2VzLCBzdWNoIGFzIHN1YnNjcmlwdGlvbi0gb3IgZXZlbnQtYmFzZWQgc2NlbmFyaW9zLCBpdCBtYXkgcHJvdmlkZSBhbiBpbmRpY2F0aW9uIG9mIHRoZSBjYXVzZSBmb3IgdGhlIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWFzb25SZWZlcmVuY2U6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgYSBtZWNoYW5pc20gdG8gY29tbXVuaWNhdGUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVzcG9uc2UuXHJcbiAgICovXHJcbiAgcHVibGljIG5vdGU6IGZoaXIuQW5ub3RhdGlvbltdO1xyXG4gIC8qKlxyXG4gICAqIE1lc3NhZ2VzIHJlc3VsdGluZyBmcm9tIHRoZSBldmFsdWF0aW9uIG9mIHRoZSBhcnRpZmFjdCBvciBhcnRpZmFjdHMuIEFzIHBhcnQgb2YgZXZhbHVhdGluZyB0aGUgcmVxdWVzdCwgdGhlIGVuZ2luZSBtYXkgcHJvZHVjZSBpbmZvcm1hdGlvbmFsIG9yIHdhcm5pbmcgbWVzc2FnZXMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcHJvdmlkZWQgYnkgdGhpcyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBldmFsdWF0aW9uTWVzc2FnZTogZmhpci5SZWZlcmVuY2VbXTtcclxuICAvKipcclxuICAgKiBUaGUgb3V0cHV0IHBhcmFtZXRlcnMgb2YgdGhlIGV2YWx1YXRpb24sIGlmIGFueS4gTWFueSBtb2R1bGVzIHdpbGwgcmVzdWx0IGluIHRoZSByZXR1cm4gb2Ygc3BlY2lmaWMgcmVzb3VyY2VzIHN1Y2ggYXMgcHJvY2VkdXJlIG9yIGNvbW11bmljYXRpb24gcmVxdWVzdHMgdGhhdCBhcmUgcmV0dXJuZWQgYXMgcGFydCBvZiB0aGUgb3BlcmF0aW9uIHJlc3VsdC4gSG93ZXZlciwgbW9kdWxlcyBtYXkgZGVmaW5lIHNwZWNpZmljIG91dHB1dHMgdGhhdCB3b3VsZCBiZSByZXR1cm5lZCBhcyB0aGUgcmVzdWx0IG9mIHRoZSBldmFsdWF0aW9uLCBhbmQgdGhlc2Ugd291bGQgYmUgcmV0dXJuZWQgaW4gdGhpcyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdXRwdXRQYXJhbWV0ZXJzPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhY3Rpb25zLCBpZiBhbnksIHByb2R1Y2VkIGJ5IHRoZSBldmFsdWF0aW9uIG9mIHRoZSBhcnRpZmFjdC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzdWx0PzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBldmFsdWF0aW9uIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQgZHVlIHRvIGxhY2sgb2YgaW5mb3JtYXRpb24sIG9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gd291bGQgcG90ZW50aWFsbHkgcmVzdWx0IGluIGEgbW9yZSBhY2N1cmF0ZSByZXNwb25zZSwgdGhpcyBlbGVtZW50IHdpbGwgYSBkZXNjcmlwdGlvbiBvZiB0aGUgZGF0YSByZXF1aXJlZCBpbiBvcmRlciB0byBwcm9jZWVkIHdpdGggdGhlIGV2YWx1YXRpb24uIEEgc3Vic2VxdWVudCByZXF1ZXN0IHRvIHRoZSBzZXJ2aWNlIHNob3VsZCBpbmNsdWRlIHRoaXMgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgZGF0YVJlcXVpcmVtZW50OiBmaGlyLkRhdGFSZXF1aXJlbWVudFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIEd1aWRhbmNlUmVzcG9uc2UgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxHdWlkYW5jZVJlc3BvbnNlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ0d1aWRhbmNlUmVzcG9uc2UnO1xyXG4gICAgaWYgKHNvdXJjZVsncmVxdWVzdElkZW50aWZpZXInXSkgeyB0aGlzLnJlcXVlc3RJZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UucmVxdWVzdElkZW50aWZpZXIpOyB9XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gc291cmNlLmlkZW50aWZpZXIubWFwKCh4KSA9PiBuZXcgZmhpci5JZGVudGlmaWVyKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuaWRlbnRpZmllciA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydtb2R1bGUnXSkgeyB0aGlzLm1vZHVsZSA9IHNvdXJjZS5tb2R1bGU7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnbW9kdWxlVXJpJ10pIHsgdGhpcy5tb2R1bGUgPSBuZXcgZmhpci5GaGlyVXJpKHt2YWx1ZTogc291cmNlLm1vZHVsZVVyaX0pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ21vZHVsZUNhbm9uaWNhbCddKSB7IHRoaXMubW9kdWxlID0gbmV3IGZoaXIuRmhpckNhbm9uaWNhbCh7dmFsdWU6IHNvdXJjZS5tb2R1bGVDYW5vbmljYWx9KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydtb2R1bGVDb2RlYWJsZUNvbmNlcHQnXSkgeyB0aGlzLm1vZHVsZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UubW9kdWxlQ29kZWFibGVDb25jZXB0KTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubW9kdWxlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3RhdHVzJ10pIHsgdGhpcy5zdGF0dXMgPSBuZXcgZmhpci5GaGlyQ29kZTxHdWlkYW5jZVJlc3BvbnNlU3RhdHVzQ29kZVR5cGU+KHt2YWx1ZTogc291cmNlLnN0YXR1c30pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zdGF0dXMgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydfc3RhdHVzJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc3RhdHVzKSB7IHRoaXMuc3RhdHVzLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3N0YXR1cyEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnN0YXR1cyA9IG5ldyBmaGlyLkZoaXJDb2RlPEd1aWRhbmNlUmVzcG9uc2VTdGF0dXNDb2RlVHlwZT4oc291cmNlLl9zdGF0dXMgYXMgUGFydGlhbDxmaGlyLkZoaXJDb2RlPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3N1YmplY3QnXSkgeyB0aGlzLnN1YmplY3QgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnN1YmplY3QpOyB9XHJcbiAgICBpZiAoc291cmNlWydlbmNvdW50ZXInXSkgeyB0aGlzLmVuY291bnRlciA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2UuZW5jb3VudGVyKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb2NjdXJyZW5jZURhdGVUaW1lJ10pIHsgdGhpcy5vY2N1cnJlbmNlRGF0ZVRpbWUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2Uub2NjdXJyZW5jZURhdGVUaW1lfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19vY2N1cnJlbmNlRGF0ZVRpbWUnXSkge1xyXG4gICAgICBpZiAodGhpcy5vY2N1cnJlbmNlRGF0ZVRpbWUpIHsgdGhpcy5vY2N1cnJlbmNlRGF0ZVRpbWUuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fb2NjdXJyZW5jZURhdGVUaW1lISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMub2NjdXJyZW5jZURhdGVUaW1lID0gbmV3IGZoaXIuRmhpckRhdGVUaW1lKHNvdXJjZS5fb2NjdXJyZW5jZURhdGVUaW1lIGFzIFBhcnRpYWw8Zmhpci5GaGlyRGF0ZVRpbWVBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3BlcmZvcm1lciddKSB7IHRoaXMucGVyZm9ybWVyID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5wZXJmb3JtZXIpOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWFzb25Db2RlJ10pIHsgdGhpcy5yZWFzb25Db2RlID0gc291cmNlLnJlYXNvbkNvZGUubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWFzb25Db2RlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlYXNvblJlZmVyZW5jZSddKSB7IHRoaXMucmVhc29uUmVmZXJlbmNlID0gc291cmNlLnJlYXNvblJlZmVyZW5jZS5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlYXNvblJlZmVyZW5jZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydub3RlJ10pIHsgdGhpcy5ub3RlID0gc291cmNlLm5vdGUubWFwKCh4KSA9PiBuZXcgZmhpci5Bbm5vdGF0aW9uKHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMubm90ZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydldmFsdWF0aW9uTWVzc2FnZSddKSB7IHRoaXMuZXZhbHVhdGlvbk1lc3NhZ2UgPSBzb3VyY2UuZXZhbHVhdGlvbk1lc3NhZ2UubWFwKCh4KSA9PiBuZXcgZmhpci5SZWZlcmVuY2UoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5ldmFsdWF0aW9uTWVzc2FnZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydvdXRwdXRQYXJhbWV0ZXJzJ10pIHsgdGhpcy5vdXRwdXRQYXJhbWV0ZXJzID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5vdXRwdXRQYXJhbWV0ZXJzKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVzdWx0J10pIHsgdGhpcy5yZXN1bHQgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLnJlc3VsdCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2RhdGFSZXF1aXJlbWVudCddKSB7IHRoaXMuZGF0YVJlcXVpcmVtZW50ID0gc291cmNlLmRhdGFSZXF1aXJlbWVudC5tYXAoKHgpID0+IG5ldyBmaGlyLkRhdGFSZXF1aXJlbWVudCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRhdGFSZXF1aXJlbWVudCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3Igc3RhdHVzIChHdWlkYW5jZVJlc3BvbnNlLnN0YXR1cylcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBzdGF0dXNSZXF1aXJlZENvZGVzKCkge1xyXG4gICAgcmV0dXJuIEd1aWRhbmNlUmVzcG9uc2VTdGF0dXNDb2RlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VUeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlc291cmNlVHlwZTpcIkd1aWRhbmNlUmVzcG9uc2VcIiBmaGlyOiBHdWlkYW5jZVJlc3BvbnNlLnJlc291cmNlVHlwZTpcIkd1aWRhbmNlUmVzcG9uc2VcIicgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInJlcXVlc3RJZGVudGlmaWVyXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucmVxdWVzdElkZW50aWZpZXIuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiaWRlbnRpZmllclwiXSkgeyB0aGlzLmlkZW50aWZpZXIuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAoIXRoaXNbJ21vZHVsZSddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBtb2R1bGU6IGZoaXI6IEd1aWRhbmNlUmVzcG9uc2UubW9kdWxlW3hdOicgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXNbJ3N0YXR1cyddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBzdGF0dXM6Zmhpci5GaGlyQ29kZTxHdWlkYW5jZVJlc3BvbnNlU3RhdHVzQ29kZVR5cGU+IGZoaXI6IEd1aWRhbmNlUmVzcG9uc2Uuc3RhdHVzOmNvZGUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ3N0YXR1cyddICYmICghT2JqZWN0LnZhbHVlcyhHdWlkYW5jZVJlc3BvbnNlU3RhdHVzQ29kZXMpLmluY2x1ZGVzKHRoaXMuc3RhdHVzIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ0ludmFsaWQgY29kZSBwcm9wZXJ0eSBzdGF0dXM6Zmhpci5GaGlyQ29kZTxHdWlkYW5jZVJlc3BvbnNlU3RhdHVzQ29kZVR5cGU+IGZoaXI6IEd1aWRhbmNlUmVzcG9uc2Uuc3RhdHVzOmNvZGUgUmVxdWlyZWQgYmluZGluZyB0bzogR3VpZGFuY2VSZXNwb25zZVN0YXR1cycgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInN0YXR1c1wiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnN0YXR1cy5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJzdWJqZWN0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuc3ViamVjdC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJlbmNvdW50ZXJcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5lbmNvdW50ZXIuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wib2NjdXJyZW5jZURhdGVUaW1lXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMub2NjdXJyZW5jZURhdGVUaW1lLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInBlcmZvcm1lclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnBlcmZvcm1lci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJyZWFzb25Db2RlXCJdKSB7IHRoaXMucmVhc29uQ29kZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wicmVhc29uUmVmZXJlbmNlXCJdKSB7IHRoaXMucmVhc29uUmVmZXJlbmNlLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJub3RlXCJdKSB7IHRoaXMubm90ZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiZXZhbHVhdGlvbk1lc3NhZ2VcIl0pIHsgdGhpcy5ldmFsdWF0aW9uTWVzc2FnZS5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wib3V0cHV0UGFyYW1ldGVyc1wiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLm91dHB1dFBhcmFtZXRlcnMuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicmVzdWx0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucmVzdWx0LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImRhdGFSZXF1aXJlbWVudFwiXSkgeyB0aGlzLmRhdGFSZXF1aXJlbWVudC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==