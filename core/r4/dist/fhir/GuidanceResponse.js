// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: GuidanceResponse
import * as fhir from '../fhir.js';
// @ts-ignore
import { GuidanceResponseStatusCodes } from '../fhirValueSets/GuidanceResponseStatusCodes.js';
/**
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
export class GuidanceResponse extends fhir.DomainResource {
    /**
     * Default constructor for GuidanceResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'GuidanceResponse';
        if (source['requestIdentifier']) {
            this.requestIdentifier = new fhir.Identifier(source.requestIdentifier);
        }
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['module']) {
            this.module = source.module;
        }
        else if (source['moduleUri']) {
            this.module = new fhir.FhirUri({ value: source.moduleUri });
        }
        else if (source['moduleCanonical']) {
            this.module = new fhir.FhirCanonical({ value: source.moduleCanonical });
        }
        else if (source['moduleCodeableConcept']) {
            this.module = new fhir.CodeableConcept(source.moduleCodeableConcept);
        }
        else {
            this.module = null;
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['occurrenceDateTime']) {
            this.occurrenceDateTime = new fhir.FhirDateTime({ value: source.occurrenceDateTime });
        }
        if (source['_occurrenceDateTime']) {
            if (this.occurrenceDateTime) {
                this.occurrenceDateTime.addExtendedProperties(source._occurrenceDateTime);
            }
            else {
                this.occurrenceDateTime = new fhir.FhirDateTime(source._occurrenceDateTime);
            }
        }
        if (source['performer']) {
            this.performer = new fhir.Reference(source.performer);
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['evaluationMessage']) {
            this.evaluationMessage = source.evaluationMessage.map((x) => new fhir.Reference(x));
        }
        else {
            this.evaluationMessage = [];
        }
        if (source['outputParameters']) {
            this.outputParameters = new fhir.Reference(source.outputParameters);
        }
        if (source['result']) {
            this.result = new fhir.Reference(source.result);
        }
        if (source['dataRequirement']) {
            this.dataRequirement = source.dataRequirement.map((x) => new fhir.DataRequirement(x));
        }
        else {
            this.dataRequirement = [];
        }
    }
    /**
     * Required-bound Value Set for status (GuidanceResponse.status)
     */
    static get statusRequiredCodes() {
        return GuidanceResponseStatusCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'GuidanceResponse';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: GuidanceResponse.resourceType:"GuidanceResponse"', expression: [expression] });
        }
        if (this["requestIdentifier"]) {
            issues.push(...this.requestIdentifier.doModelValidation(expression + '.requestIdentifier'));
        }
        if (this["identifier"]) {
            this.identifier.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.identifier[${i}]`)); });
        }
        if (!this['module']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property module fhir: GuidanceResponse.module[x]:', expression: [expression] });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: GuidanceResponse.status:code', expression: [expression] });
        }
        if (this['status'] && (!Object.values(GuidanceResponseStatusCodes).includes(this.status.value))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (GuidanceResponse.status) of type code is missing code for Required binding to: GuidanceResponseStatus', expression: [expression] });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation(expression + '.status'));
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation(expression + '.subject'));
        }
        if (this["encounter"]) {
            issues.push(...this.encounter.doModelValidation(expression + '.encounter'));
        }
        if (this["occurrenceDateTime"]) {
            issues.push(...this.occurrenceDateTime.doModelValidation(expression + '.occurrenceDateTime'));
        }
        if (this["performer"]) {
            issues.push(...this.performer.doModelValidation(expression + '.performer'));
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonCode[${i}]`)); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.reasonReference[${i}]`)); });
        }
        if (this["note"]) {
            this.note.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.note[${i}]`)); });
        }
        if (this["evaluationMessage"]) {
            this.evaluationMessage.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.evaluationMessage[${i}]`)); });
        }
        if (this["outputParameters"]) {
            issues.push(...this.outputParameters.doModelValidation(expression + '.outputParameters'));
        }
        if (this["result"]) {
            issues.push(...this.result.doModelValidation(expression + '.result'));
        }
        if (this["dataRequirement"]) {
            this.dataRequirement.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.dataRequirement[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
GuidanceResponse._fts_dataType = 'GuidanceResponse';
/**
 * Internal flag to properly serialize choice-type element GuidanceResponse.module[x]
 */
GuidanceResponse._fts_moduleIsChoice = true;
//# sourceMappingURL=data:application/json;base64,