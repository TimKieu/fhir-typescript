// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductUndesirableEffect
import * as fhir from '../fhir.js';
/**
 * Describe the undesirable effects of the medicinal product.
 */
export class MedicinalProductUndesirableEffect extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductUndesirableEffect - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductUndesirableEffect';
        if (source['subject']) {
            this.subject = source.subject.map((x) => new fhir.Reference(x));
        }
        else {
            this.subject = [];
        }
        if (source['symptomConditionEffect']) {
            this.symptomConditionEffect = new fhir.CodeableConcept(source.symptomConditionEffect);
        }
        if (source['classification']) {
            this.classification = new fhir.CodeableConcept(source.classification);
        }
        if (source['frequencyOfOccurrence']) {
            this.frequencyOfOccurrence = new fhir.CodeableConcept(source.frequencyOfOccurrence);
        }
        if (source['population']) {
            this.population = source.population.map((x) => new fhir.Population(x));
        }
        else {
            this.population = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductUndesirableEffect';
        }
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: MedicinalProductUndesirableEffect.resourceType:"MedicinalProductUndesirableEffect"', expression: [expression] });
        }
        if (this["subject"]) {
            this.subject.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.subject[${i}]`)); });
        }
        if (this["symptomConditionEffect"]) {
            issues.push(...this.symptomConditionEffect.doModelValidation(expression + '.symptomConditionEffect'));
        }
        if (this["classification"]) {
            issues.push(...this.classification.doModelValidation(expression + '.classification'));
        }
        if (this["frequencyOfOccurrence"]) {
            issues.push(...this.frequencyOfOccurrence.doModelValidation(expression + '.frequencyOfOccurrence'));
        }
        if (this["population"]) {
            this.population.forEach((x, i) => { issues.push(...x.doModelValidation(expression + `.population[${i}]`)); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductUndesirableEffect._fts_dataType = 'MedicinalProductUndesirableEffect';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVkaWNpbmFsUHJvZHVjdFVuZGVzaXJhYmxlRWZmZWN0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9NZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsbURBQW1EO0FBRW5ELE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBZ0NuQzs7R0FFRztBQUNILE1BQU0sT0FBTyxpQ0FBa0MsU0FBUSxJQUFJLENBQUMsY0FBYztJQTZCeEU7O09BRUc7SUFDSCxZQUFZLFNBQXdELEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQzlHLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxtQ0FBbUMsQ0FBQztRQUN4RCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDdEY7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztTQUFFO1FBQzNCLElBQUksTUFBTSxDQUFDLHdCQUF3QixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQUU7UUFDaEksSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUFFO1FBQ3hHLElBQUksTUFBTSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQUU7UUFDN0gsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ2hHO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7U0FBRTtJQUNoQyxDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUIsQ0FBQyxhQUFvQixFQUFFO1FBQ3RELElBQUksTUFBTSxHQUFtQixLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakUsSUFBSSxVQUFVLEtBQUssRUFBRSxFQUFFO1lBQUUsVUFBVSxHQUFHLG1DQUFtQyxDQUFBO1NBQUU7UUFDM0UsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxpSUFBaUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDaE87UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQzdILElBQUksSUFBSSxDQUFDLHdCQUF3QixDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUM1SSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3BILElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUN6SSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3RJLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBekREOztHQUVHO0FBQzZCLCtDQUFhLEdBQVUsbUNBQW1DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IE1lZGljaW5hbFByb2R1Y3RVbmRlc2lyYWJsZUVmZmVjdFxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3QgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWNpbmFsUHJvZHVjdFVuZGVzaXJhYmxlRWZmZWN0QXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiTWVkaWNpbmFsUHJvZHVjdFVuZGVzaXJhYmxlRWZmZWN0XCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtZWRpY2F0aW9uIGZvciB3aGljaCB0aGlzIGlzIGFuIGluZGljYXRpb24uXHJcbiAgICovXHJcbiAgc3ViamVjdD86IGZoaXIuUmVmZXJlbmNlQXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc3ltcHRvbSwgY29uZGl0aW9uIG9yIHVuZGVzaXJhYmxlIGVmZmVjdC5cclxuICAgKi9cclxuICBzeW1wdG9tQ29uZGl0aW9uRWZmZWN0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDbGFzc2lmaWNhdGlvbiBvZiB0aGUgZWZmZWN0LlxyXG4gICAqL1xyXG4gIGNsYXNzaWZpY2F0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZnJlcXVlbmN5IG9mIG9jY3VycmVuY2Ugb2YgdGhlIGVmZmVjdC5cclxuICAgKi9cclxuICBmcmVxdWVuY3lPZk9jY3VycmVuY2U/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwb3B1bGF0aW9uIGdyb3VwIHRvIHdoaWNoIHRoaXMgYXBwbGllcy5cclxuICAgKi9cclxuICBwb3B1bGF0aW9uPzogZmhpci5Qb3B1bGF0aW9uQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERlc2NyaWJlIHRoZSB1bmRlc2lyYWJsZSBlZmZlY3RzIG9mIHRoZSBtZWRpY2luYWwgcHJvZHVjdC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3QgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ01lZGljaW5hbFByb2R1Y3RVbmRlc2lyYWJsZUVmZmVjdCc7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3RcIjtcclxuICAvKipcclxuICAgKiBUaGUgbWVkaWNhdGlvbiBmb3Igd2hpY2ggdGhpcyBpcyBhbiBpbmRpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJqZWN0OiBmaGlyLlJlZmVyZW5jZVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzeW1wdG9tLCBjb25kaXRpb24gb3IgdW5kZXNpcmFibGUgZWZmZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzeW1wdG9tQ29uZGl0aW9uRWZmZWN0PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENsYXNzaWZpY2F0aW9uIG9mIHRoZSBlZmZlY3QuXHJcbiAgICovXHJcbiAgcHVibGljIGNsYXNzaWZpY2F0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBmcmVxdWVuY3kgb2Ygb2NjdXJyZW5jZSBvZiB0aGUgZWZmZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmcmVxdWVuY3lPZk9jY3VycmVuY2U/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBvcHVsYXRpb24gZ3JvdXAgdG8gd2hpY2ggdGhpcyBhcHBsaWVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwb3B1bGF0aW9uOiBmaGlyLlBvcHVsYXRpb25bXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3QgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3RBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZVR5cGUgPSAnTWVkaWNpbmFsUHJvZHVjdFVuZGVzaXJhYmxlRWZmZWN0JztcclxuICAgIGlmIChzb3VyY2VbJ3N1YmplY3QnXSkgeyB0aGlzLnN1YmplY3QgPSBzb3VyY2Uuc3ViamVjdC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnN1YmplY3QgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnc3ltcHRvbUNvbmRpdGlvbkVmZmVjdCddKSB7IHRoaXMuc3ltcHRvbUNvbmRpdGlvbkVmZmVjdCA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2Uuc3ltcHRvbUNvbmRpdGlvbkVmZmVjdCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ2NsYXNzaWZpY2F0aW9uJ10pIHsgdGhpcy5jbGFzc2lmaWNhdGlvbiA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY2xhc3NpZmljYXRpb24pOyB9XHJcbiAgICBpZiAoc291cmNlWydmcmVxdWVuY3lPZk9jY3VycmVuY2UnXSkgeyB0aGlzLmZyZXF1ZW5jeU9mT2NjdXJyZW5jZSA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuZnJlcXVlbmN5T2ZPY2N1cnJlbmNlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncG9wdWxhdGlvbiddKSB7IHRoaXMucG9wdWxhdGlvbiA9IHNvdXJjZS5wb3B1bGF0aW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuUG9wdWxhdGlvbih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnBvcHVsYXRpb24gPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbjpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbik7XHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHsgZXhwcmVzc2lvbiA9ICdNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3QnIH1cclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VUeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlc291cmNlVHlwZSBmaGlyOiBNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3QucmVzb3VyY2VUeXBlOlwiTWVkaWNpbmFsUHJvZHVjdFVuZGVzaXJhYmxlRWZmZWN0XCInLCBleHByZXNzaW9uOiBbZXhwcmVzc2lvbl0gfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcInN1YmplY3RcIl0pIHsgdGhpcy5zdWJqZWN0LmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5zdWJqZWN0WyR7aX1dYCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInN5bXB0b21Db25kaXRpb25FZmZlY3RcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5zeW1wdG9tQ29uZGl0aW9uRWZmZWN0LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rJy5zeW1wdG9tQ29uZGl0aW9uRWZmZWN0JykpOyB9XHJcbiAgICBpZiAodGhpc1tcImNsYXNzaWZpY2F0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuY2xhc3NpZmljYXRpb24uZG9Nb2RlbFZhbGlkYXRpb24oZXhwcmVzc2lvbisnLmNsYXNzaWZpY2F0aW9uJykpOyB9XHJcbiAgICBpZiAodGhpc1tcImZyZXF1ZW5jeU9mT2NjdXJyZW5jZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmZyZXF1ZW5jeU9mT2NjdXJyZW5jZS5kb01vZGVsVmFsaWRhdGlvbihleHByZXNzaW9uKycuZnJlcXVlbmN5T2ZPY2N1cnJlbmNlJykpOyB9XHJcbiAgICBpZiAodGhpc1tcInBvcHVsYXRpb25cIl0pIHsgdGhpcy5wb3B1bGF0aW9uLmZvckVhY2goKHgsaSkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKGV4cHJlc3Npb24rYC5wb3B1bGF0aW9uWyR7aX1dYCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=