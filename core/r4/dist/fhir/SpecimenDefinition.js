// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SpecimenDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { SpecimenContainedPreferenceVsValidation } from '../fhirValueSets/SpecimenContainedPreferenceVsValidation.js';
/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
export class SpecimenDefinitionTypeTestedContainerAdditive extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainerAdditive - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['additive']) {
            this.additive = source.additive;
        }
        else if (source['additiveCodeableConcept']) {
            this.additive = new fhir.CodeableConcept(source.additiveCodeableConcept);
        }
        else if (source['additiveReference']) {
            this.additive = new fhir.Reference(source.additiveReference);
        }
        else {
            this.additive = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SpecimenDefinition.typeTested.container.additive';
        }
        this.vRS('additive', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTestedContainerAdditive._fts_dataType = 'SpecimenDefinitionTypeTestedContainerAdditive';
/**
 * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.additive.additive[x]
 */
SpecimenDefinitionTypeTestedContainerAdditive._fts_additiveIsChoice = true;
/**
 * The specimen's container.
 */
export class SpecimenDefinitionTypeTestedContainer extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['material']) {
            this.material = new fhir.CodeableConcept(source.material);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['cap']) {
            this.cap = new fhir.CodeableConcept(source.cap);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['capacity']) {
            this.capacity = new fhir.Quantity(source.capacity);
        }
        if (source['minimumVolume']) {
            this.minimumVolume = source.minimumVolume;
        }
        else if (source['minimumVolumeQuantity']) {
            this.minimumVolume = new fhir.Quantity(source.minimumVolumeQuantity);
        }
        else if (source['minimumVolumeString']) {
            this.minimumVolume = new fhir.FhirString({ value: source.minimumVolumeString });
        }
        if (source['additive']) {
            this.additive = source.additive.map((x) => new fhir.SpecimenDefinitionTypeTestedContainerAdditive(x));
        }
        else {
            this.additive = [];
        }
        if (source['preparation']) {
            this.preparation = new fhir.FhirString({ value: source.preparation });
        }
        if (source['_preparation']) {
            if (this.preparation) {
                this.preparation.addExtendedProperties(source._preparation);
            }
            else {
                this.preparation = new fhir.FhirString(source._preparation);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SpecimenDefinition.typeTested.container';
        }
        this.vOS('material', exp);
        this.vOS('type', exp);
        this.vOS('cap', exp);
        this.vOS('description', exp);
        this.vOS('capacity', exp);
        this.vOS('minimumVolume', exp);
        this.vOA('additive', exp);
        this.vOS('preparation', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTestedContainer._fts_dataType = 'SpecimenDefinitionTypeTestedContainer';
/**
 * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.minimumVolume[x]
 */
SpecimenDefinitionTypeTestedContainer._fts_minimumVolumeIsChoice = true;
/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
export class SpecimenDefinitionTypeTestedHandling extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedHandling - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['temperatureQualifier']) {
            this.temperatureQualifier = new fhir.CodeableConcept(source.temperatureQualifier);
        }
        if (source['temperatureRange']) {
            this.temperatureRange = new fhir.Range(source.temperatureRange);
        }
        if (source['maxDuration']) {
            this.maxDuration = new fhir.Duration(source.maxDuration);
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
        if (source['_instruction']) {
            if (this.instruction) {
                this.instruction.addExtendedProperties(source._instruction);
            }
            else {
                this.instruction = new fhir.FhirString(source._instruction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SpecimenDefinition.typeTested.handling';
        }
        this.vOS('temperatureQualifier', exp);
        this.vOS('temperatureRange', exp);
        this.vOS('maxDuration', exp);
        this.vOS('instruction', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTestedHandling._fts_dataType = 'SpecimenDefinitionTypeTestedHandling';
/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
export class SpecimenDefinitionTypeTested extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTested - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['isDerived']) {
            this.isDerived = new fhir.FhirBoolean({ value: source.isDerived });
        }
        if (source['_isDerived']) {
            if (this.isDerived) {
                this.isDerived.addExtendedProperties(source._isDerived);
            }
            else {
                this.isDerived = new fhir.FhirBoolean(source._isDerived);
            }
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['preference']) {
            this.preference = new fhir.FhirCode({ value: source.preference });
        }
        else {
            this.preference = null;
        }
        if (source['_preference']) {
            if (this.preference) {
                this.preference.addExtendedProperties(source._preference);
            }
            else {
                this.preference = new fhir.FhirCode(source._preference);
            }
        }
        if (source['container']) {
            this.container = new fhir.SpecimenDefinitionTypeTestedContainer(source.container);
        }
        if (source['requirement']) {
            this.requirement = new fhir.FhirString({ value: source.requirement });
        }
        if (source['_requirement']) {
            if (this.requirement) {
                this.requirement.addExtendedProperties(source._requirement);
            }
            else {
                this.requirement = new fhir.FhirString(source._requirement);
            }
        }
        if (source['retentionTime']) {
            this.retentionTime = new fhir.Duration(source.retentionTime);
        }
        if (source['rejectionCriterion']) {
            this.rejectionCriterion = source.rejectionCriterion.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.rejectionCriterion = [];
        }
        if (source['handling']) {
            this.handling = source.handling.map((x) => new fhir.SpecimenDefinitionTypeTestedHandling(x));
        }
        else {
            this.handling = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SpecimenDefinition.typeTested';
        }
        this.vOS('isDerived', exp);
        this.vOS('type', exp);
        this.vRSV('preference', exp, 'SpecimenContainedPreference', SpecimenContainedPreferenceVsValidation, 'r');
        this.vOS('container', exp);
        this.vOS('requirement', exp);
        this.vOS('retentionTime', exp);
        this.vOA('rejectionCriterion', exp);
        this.vOA('handling', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTested._fts_dataType = 'SpecimenDefinitionTypeTested';
/**
 * A kind of specimen with associated set of requirements.
 */
export class SpecimenDefinition extends fhir.DomainResource {
    /**
     * Default constructor for SpecimenDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SpecimenDefinition';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['typeCollected']) {
            this.typeCollected = new fhir.CodeableConcept(source.typeCollected);
        }
        if (source['patientPreparation']) {
            this.patientPreparation = source.patientPreparation.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.patientPreparation = [];
        }
        if (source['timeAspect']) {
            this.timeAspect = new fhir.FhirString({ value: source.timeAspect });
        }
        if (source['_timeAspect']) {
            if (this.timeAspect) {
                this.timeAspect.addExtendedProperties(source._timeAspect);
            }
            else {
                this.timeAspect = new fhir.FhirString(source._timeAspect);
            }
        }
        if (source['collection']) {
            this.collection = source.collection.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.collection = [];
        }
        if (source['typeTested']) {
            this.typeTested = source.typeTested.map((x) => new fhir.SpecimenDefinitionTypeTested(x));
        }
        else {
            this.typeTested = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let issues = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'SpecimenDefinition';
        }
        this.vRS('resourceType', exp);
        this.vOS('identifier', exp);
        this.vOS('typeCollected', exp);
        this.vOA('patientPreparation', exp);
        this.vOS('timeAspect', exp);
        this.vOA('collection', exp);
        this.vOA('typeTested', exp);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinition._fts_dataType = 'SpecimenDefinition';
//# sourceMappingURL=data:application/json;base64,