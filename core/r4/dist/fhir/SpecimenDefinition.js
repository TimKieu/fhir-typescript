/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SpecimenContainedPreferenceCodings } from '../fhirValueSets/SpecimenContainedPreferenceCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirString } from './FhirString.js';
import { Quantity } from './Quantity.js';
import { Range } from './Range.js';
import { Duration } from './Duration.js';
import { FhirBoolean } from './FhirBoolean.js';
import { Identifier } from './Identifier.js';

// <auto-generated/>
/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
var SpecimenDefinitionTypeTestedContainerAdditive = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTestedContainerAdditive, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainerAdditive - initializes any required elements to null if a value is not provided.
     */
    function SpecimenDefinitionTypeTestedContainerAdditive(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['additive']) {
            _this.additive = source.additive;
        }
        else if (source['additiveCodeableConcept']) {
            _this.additive = new CodeableConcept(source.additiveCodeableConcept);
        }
        else if (source['additiveReference']) {
            _this.additive = new Reference(source.additiveReference);
        }
        else {
            _this.additive = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenDefinitionTypeTestedContainerAdditive.prototype.doModelValidation = function () {
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['additive']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property additive: fhir: SpecimenDefinition.typeTested.container.additive.additive[x]:', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenDefinitionTypeTestedContainerAdditive._fts_dataType = 'SpecimenDefinitionTypeTestedContainerAdditive';
    /**
     * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.additive.additive[x]
     */
    SpecimenDefinitionTypeTestedContainerAdditive._fts_additiveIsChoice = true;
    return SpecimenDefinitionTypeTestedContainerAdditive;
}(BackboneElement));
/**
 * The specimen's container.
 */
var SpecimenDefinitionTypeTestedContainer = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTestedContainer, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainer - initializes any required elements to null if a value is not provided.
     */
    function SpecimenDefinitionTypeTestedContainer(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['material']) {
            _this.material = new CodeableConcept(source.material);
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['cap']) {
            _this.cap = new CodeableConcept(source.cap);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['capacity']) {
            _this.capacity = new Quantity(source.capacity);
        }
        if (source['minimumVolume']) {
            _this.minimumVolume = source.minimumVolume;
        }
        else if (source['minimumVolumeQuantity']) {
            _this.minimumVolume = new Quantity(source.minimumVolumeQuantity);
        }
        else if (source['minimumVolumeString']) {
            _this.minimumVolume = new FhirString({ value: source.minimumVolumeString });
        }
        if (source['additive']) {
            _this.additive = source.additive.map(function (x) { return new SpecimenDefinitionTypeTestedContainerAdditive(x); });
        }
        else {
            _this.additive = [];
        }
        if (source['preparation']) {
            _this.preparation = new FhirString({ value: source.preparation });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenDefinitionTypeTestedContainer.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["material"]) {
            (_a = outcome.issue).push.apply(_a, this.material.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (this["cap"]) {
            (_c = outcome.issue).push.apply(_c, this.cap.doModelValidation().issue);
        }
        if (this["description"]) {
            (_d = outcome.issue).push.apply(_d, this.description.doModelValidation().issue);
        }
        if (this["capacity"]) {
            (_e = outcome.issue).push.apply(_e, this.capacity.doModelValidation().issue);
        }
        if (this["additive"]) {
            this.additive.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["preparation"]) {
            (_f = outcome.issue).push.apply(_f, this.preparation.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenDefinitionTypeTestedContainer._fts_dataType = 'SpecimenDefinitionTypeTestedContainer';
    /**
     * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.minimumVolume[x]
     */
    SpecimenDefinitionTypeTestedContainer._fts_minimumVolumeIsChoice = true;
    return SpecimenDefinitionTypeTestedContainer;
}(BackboneElement));
/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
var SpecimenDefinitionTypeTestedHandling = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTestedHandling, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTestedHandling - initializes any required elements to null if a value is not provided.
     */
    function SpecimenDefinitionTypeTestedHandling(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['temperatureQualifier']) {
            _this.temperatureQualifier = new CodeableConcept(source.temperatureQualifier);
        }
        if (source['temperatureRange']) {
            _this.temperatureRange = new Range(source.temperatureRange);
        }
        if (source['maxDuration']) {
            _this.maxDuration = new Duration(source.maxDuration);
        }
        if (source['instruction']) {
            _this.instruction = new FhirString({ value: source.instruction });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenDefinitionTypeTestedHandling.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["temperatureQualifier"]) {
            (_a = outcome.issue).push.apply(_a, this.temperatureQualifier.doModelValidation().issue);
        }
        if (this["temperatureRange"]) {
            (_b = outcome.issue).push.apply(_b, this.temperatureRange.doModelValidation().issue);
        }
        if (this["maxDuration"]) {
            (_c = outcome.issue).push.apply(_c, this.maxDuration.doModelValidation().issue);
        }
        if (this["instruction"]) {
            (_d = outcome.issue).push.apply(_d, this.instruction.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenDefinitionTypeTestedHandling._fts_dataType = 'SpecimenDefinitionTypeTestedHandling';
    return SpecimenDefinitionTypeTestedHandling;
}(BackboneElement));
/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
var SpecimenDefinitionTypeTested = /** @class */ (function (_super) {
    __extends(SpecimenDefinitionTypeTested, _super);
    /**
     * Default constructor for SpecimenDefinitionTypeTested - initializes any required elements to null if a value is not provided.
     */
    function SpecimenDefinitionTypeTested(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['isDerived']) {
            _this.isDerived = new FhirBoolean({ value: source.isDerived });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['preference']) {
            _this.preference = source.preference;
        }
        else {
            _this.preference = null;
        }
        if (source['container']) {
            _this.container = new SpecimenDefinitionTypeTestedContainer(source.container);
        }
        if (source['requirement']) {
            _this.requirement = new FhirString({ value: source.requirement });
        }
        if (source['retentionTime']) {
            _this.retentionTime = new Duration(source.retentionTime);
        }
        if (source['rejectionCriterion']) {
            _this.rejectionCriterion = source.rejectionCriterion.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.rejectionCriterion = [];
        }
        if (source['handling']) {
            _this.handling = source.handling.map(function (x) { return new SpecimenDefinitionTypeTestedHandling(x); });
        }
        else {
            _this.handling = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for preference (SpecimenDefinition.typeTested.preference)
     */
    SpecimenDefinitionTypeTested.preferenceRequiredCoding = function () {
        return SpecimenContainedPreferenceCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenDefinitionTypeTested.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["isDerived"]) {
            (_a = outcome.issue).push.apply(_a, this.isDerived.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        if (!this['preference']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property preference:SpecimenContainedPreferenceCodeType fhir: SpecimenDefinition.typeTested.preference:code', }));
        }
        if (this["container"]) {
            (_c = outcome.issue).push.apply(_c, this.container.doModelValidation().issue);
        }
        if (this["requirement"]) {
            (_d = outcome.issue).push.apply(_d, this.requirement.doModelValidation().issue);
        }
        if (this["retentionTime"]) {
            (_e = outcome.issue).push.apply(_e, this.retentionTime.doModelValidation().issue);
        }
        if (this["rejectionCriterion"]) {
            this.rejectionCriterion.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["handling"]) {
            this.handling.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenDefinitionTypeTested._fts_dataType = 'SpecimenDefinitionTypeTested';
    return SpecimenDefinitionTypeTested;
}(BackboneElement));
/**
 * A kind of specimen with associated set of requirements.
 */
var SpecimenDefinition = /** @class */ (function (_super) {
    __extends(SpecimenDefinition, _super);
    /**
     * Default constructor for SpecimenDefinition - initializes any required elements to null if a value is not provided.
     */
    function SpecimenDefinition(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'SpecimenDefinition';
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        if (source['typeCollected']) {
            _this.typeCollected = new CodeableConcept(source.typeCollected);
        }
        if (source['patientPreparation']) {
            _this.patientPreparation = source.patientPreparation.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.patientPreparation = [];
        }
        if (source['timeAspect']) {
            _this.timeAspect = new FhirString({ value: source.timeAspect });
        }
        if (source['collection']) {
            _this.collection = source.collection.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.collection = [];
        }
        if (source['typeTested']) {
            _this.typeTested = source.typeTested.map(function (x) { return new SpecimenDefinitionTypeTested(x); });
        }
        else {
            _this.typeTested = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    SpecimenDefinition.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"SpecimenDefinition" fhir: SpecimenDefinition.resourceType:"SpecimenDefinition"', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (this["typeCollected"]) {
            (_b = outcome.issue).push.apply(_b, this.typeCollected.doModelValidation().issue);
        }
        if (this["patientPreparation"]) {
            this.patientPreparation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["timeAspect"]) {
            (_c = outcome.issue).push.apply(_c, this.timeAspect.doModelValidation().issue);
        }
        if (this["collection"]) {
            this.collection.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["typeTested"]) {
            this.typeTested.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    SpecimenDefinition._fts_dataType = 'SpecimenDefinition';
    return SpecimenDefinition;
}(DomainResource));

export { SpecimenDefinition, SpecimenDefinitionTypeTested, SpecimenDefinitionTypeTestedContainer, SpecimenDefinitionTypeTestedContainerAdditive, SpecimenDefinitionTypeTestedHandling };
//# sourceMappingURL=SpecimenDefinition.js.map
