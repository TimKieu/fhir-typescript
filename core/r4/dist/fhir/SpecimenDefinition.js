// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: SpecimenDefinition
import * as fhir from '../fhir.js';
// @ts-ignore
import { SpecimenContainedPreferenceCodings, } from '../fhirValueSets/SpecimenContainedPreferenceCodings.js';
/**
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
export class SpecimenDefinitionTypeTestedContainerAdditive extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainerAdditive - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['additive']) {
            this.additive = source.additive;
        }
        else if (source['additiveCodeableConcept']) {
            this.additive = new fhir.CodeableConcept(source.additiveCodeableConcept);
        }
        else if (source['additiveReference']) {
            this.additive = new fhir.Reference(source.additiveReference);
        }
        else {
            this.additive = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['additive']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property additive: fhir: SpecimenDefinition.typeTested.container.additive.additive[x]:', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTestedContainerAdditive._fts_dataType = 'SpecimenDefinitionTypeTestedContainerAdditive';
/**
 * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.additive.additive[x]
 */
SpecimenDefinitionTypeTestedContainerAdditive._fts_additiveIsChoice = true;
/**
 * The specimen's container.
 */
export class SpecimenDefinitionTypeTestedContainer extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedContainer - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['material']) {
            this.material = new fhir.CodeableConcept(source.material);
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['cap']) {
            this.cap = new fhir.CodeableConcept(source.cap);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['capacity']) {
            this.capacity = new fhir.Quantity(source.capacity);
        }
        if (source['minimumVolume']) {
            this.minimumVolume = source.minimumVolume;
        }
        else if (source['minimumVolumeQuantity']) {
            this.minimumVolume = new fhir.Quantity(source.minimumVolumeQuantity);
        }
        else if (source['minimumVolumeString']) {
            this.minimumVolume = new fhir.FhirString({ value: source.minimumVolumeString });
        }
        if (source['additive']) {
            this.additive = source.additive.map((x) => new fhir.SpecimenDefinitionTypeTestedContainerAdditive(x));
        }
        else {
            this.additive = [];
        }
        if (source['preparation']) {
            this.preparation = new fhir.FhirString({ value: source.preparation });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["material"]) {
            issues.push(...this.material.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["cap"]) {
            issues.push(...this.cap.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["capacity"]) {
            issues.push(...this.capacity.doModelValidation());
        }
        if (this["additive"]) {
            this.additive.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["preparation"]) {
            issues.push(...this.preparation.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTestedContainer._fts_dataType = 'SpecimenDefinitionTypeTestedContainer';
/**
 * Internal flag to properly serialize choice-type element SpecimenDefinition.typeTested.container.minimumVolume[x]
 */
SpecimenDefinitionTypeTestedContainer._fts_minimumVolumeIsChoice = true;
/**
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
export class SpecimenDefinitionTypeTestedHandling extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTestedHandling - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['temperatureQualifier']) {
            this.temperatureQualifier = new fhir.CodeableConcept(source.temperatureQualifier);
        }
        if (source['temperatureRange']) {
            this.temperatureRange = new fhir.Range(source.temperatureRange);
        }
        if (source['maxDuration']) {
            this.maxDuration = new fhir.Duration(source.maxDuration);
        }
        if (source['instruction']) {
            this.instruction = new fhir.FhirString({ value: source.instruction });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["temperatureQualifier"]) {
            issues.push(...this.temperatureQualifier.doModelValidation());
        }
        if (this["temperatureRange"]) {
            issues.push(...this.temperatureRange.doModelValidation());
        }
        if (this["maxDuration"]) {
            issues.push(...this.maxDuration.doModelValidation());
        }
        if (this["instruction"]) {
            issues.push(...this.instruction.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTestedHandling._fts_dataType = 'SpecimenDefinitionTypeTestedHandling';
/**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
export class SpecimenDefinitionTypeTested extends fhir.BackboneElement {
    /**
     * Default constructor for SpecimenDefinitionTypeTested - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['isDerived']) {
            this.isDerived = new fhir.FhirBoolean({ value: source.isDerived });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['preference']) {
            this.preference = source.preference;
        }
        else {
            this.preference = null;
        }
        if (source['container']) {
            this.container = new fhir.SpecimenDefinitionTypeTestedContainer(source.container);
        }
        if (source['requirement']) {
            this.requirement = new fhir.FhirString({ value: source.requirement });
        }
        if (source['retentionTime']) {
            this.retentionTime = new fhir.Duration(source.retentionTime);
        }
        if (source['rejectionCriterion']) {
            this.rejectionCriterion = source.rejectionCriterion.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.rejectionCriterion = [];
        }
        if (source['handling']) {
            this.handling = source.handling.map((x) => new fhir.SpecimenDefinitionTypeTestedHandling(x));
        }
        else {
            this.handling = [];
        }
    }
    /**
     * Required-bound Value Set for preference (SpecimenDefinition.typeTested.preference)
     */
    static preferenceRequiredCoding() {
        return SpecimenContainedPreferenceCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["isDerived"]) {
            issues.push(...this.isDerived.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (!this['preference']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property preference:SpecimenContainedPreferenceCodeType fhir: SpecimenDefinition.typeTested.preference:code', });
        }
        if (this["container"]) {
            issues.push(...this.container.doModelValidation());
        }
        if (this["requirement"]) {
            issues.push(...this.requirement.doModelValidation());
        }
        if (this["retentionTime"]) {
            issues.push(...this.retentionTime.doModelValidation());
        }
        if (this["rejectionCriterion"]) {
            this.rejectionCriterion.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["handling"]) {
            this.handling.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinitionTypeTested._fts_dataType = 'SpecimenDefinitionTypeTested';
/**
 * A kind of specimen with associated set of requirements.
 */
export class SpecimenDefinition extends fhir.DomainResource {
    /**
     * Default constructor for SpecimenDefinition - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'SpecimenDefinition';
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
        if (source['typeCollected']) {
            this.typeCollected = new fhir.CodeableConcept(source.typeCollected);
        }
        if (source['patientPreparation']) {
            this.patientPreparation = source.patientPreparation.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.patientPreparation = [];
        }
        if (source['timeAspect']) {
            this.timeAspect = new fhir.FhirString({ value: source.timeAspect });
        }
        if (source['collection']) {
            this.collection = source.collection.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.collection = [];
        }
        if (source['typeTested']) {
            this.typeTested = source.typeTested.map((x) => new fhir.SpecimenDefinitionTypeTested(x));
        }
        else {
            this.typeTested = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"SpecimenDefinition" fhir: SpecimenDefinition.resourceType:"SpecimenDefinition"', });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (this["typeCollected"]) {
            issues.push(...this.typeCollected.doModelValidation());
        }
        if (this["patientPreparation"]) {
            this.patientPreparation.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["timeAspect"]) {
            issues.push(...this.timeAspect.doModelValidation());
        }
        if (this["collection"]) {
            this.collection.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["typeTested"]) {
            this.typeTested.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
SpecimenDefinition._fts_dataType = 'SpecimenDefinition';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BlY2ltZW5EZWZpbml0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9TcGVjaW1lbkRlZmluaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0NBQW9DO0FBRXBDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBc0JuQyxhQUFhO0FBQ2IsT0FBTyxFQUFFLGtDQUFrQyxHQUF5QyxNQUFNLHdEQUF3RCxDQUFDO0FBaUNuSjs7R0FFRztBQUNILE1BQU0sT0FBTyw2Q0FBOEMsU0FBUSxJQUFJLENBQUMsZUFBZTtJQWFyRjs7T0FFRztJQUNILFlBQVksU0FBb0UsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDMUgsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUFFO2FBQ3ZELElBQUksTUFBTSxDQUFDLHlCQUF5QixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUFFO2FBQ3BILElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUFFO2FBQ2xHO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FBRTtJQUNoQyxDQUFDO0lBQ0Q7O09BRUc7SUFDYSxpQkFBaUI7UUFDL0IsSUFBSSxNQUFNLEdBQW1CLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMs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Q0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogU3BlY2ltZW5EZWZpbml0aW9uXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXIuanMnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb250YWluZXJNYXRlcmlhbENvZGluZ3MsIENvbnRhaW5lck1hdGVyaWFsQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ29udGFpbmVyTWF0ZXJpYWxDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBDb250YWluZXJNYXRlcmlhbENvZGVzLCAgQ29udGFpbmVyTWF0ZXJpYWxDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQ29udGFpbmVyTWF0ZXJpYWxDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU3BlY2ltZW5Db250YWluZXJUeXBlQ29kaW5ncywgU3BlY2ltZW5Db250YWluZXJUeXBlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU3BlY2ltZW5Db250YWluZXJUeXBlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgU3BlY2ltZW5Db250YWluZXJUeXBlQ29kZXMsICBTcGVjaW1lbkNvbnRhaW5lclR5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU3BlY2ltZW5Db250YWluZXJUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENvbnRhaW5lckNhcENvZGluZ3MsIENvbnRhaW5lckNhcENvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NvbnRhaW5lckNhcENvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IENvbnRhaW5lckNhcENvZGVzLCAgQ29udGFpbmVyQ2FwQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0NvbnRhaW5lckNhcENvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBIYW5kbGluZ0NvbmRpdGlvbkNvZGluZ3MsIEhhbmRsaW5nQ29uZGl0aW9uQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvSGFuZGxpbmdDb25kaXRpb25Db2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBIYW5kbGluZ0NvbmRpdGlvbkNvZGVzLCAgSGFuZGxpbmdDb25kaXRpb25Db2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvSGFuZGxpbmdDb25kaXRpb25Db2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjIwNDg3Q29kaW5ncywgVjIwNDg3Q29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjIwNDg3Q29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjIwNDg3Q29kZXMsICBWMjA0ODdDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvVjIwNDg3Q29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNwZWNpbWVuQ29udGFpbmVkUHJlZmVyZW5jZUNvZGluZ3MsIFNwZWNpbWVuQ29udGFpbmVkUHJlZmVyZW5jZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NwZWNpbWVuQ29udGFpbmVkUHJlZmVyZW5jZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNwZWNpbWVuQ29udGFpbmVkUHJlZmVyZW5jZUNvZGVzLCAgU3BlY2ltZW5Db250YWluZWRQcmVmZXJlbmNlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NwZWNpbWVuQ29udGFpbmVkUHJlZmVyZW5jZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZWplY3Rpb25Dcml0ZXJpYUNvZGluZ3MsIFJlamVjdGlvbkNyaXRlcmlhQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVqZWN0aW9uQ3JpdGVyaWFDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBSZWplY3Rpb25Dcml0ZXJpYUNvZGVzLCAgUmVqZWN0aW9uQ3JpdGVyaWFDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUmVqZWN0aW9uQ3JpdGVyaWFDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHJlcGFyZVBhdGllbnRQcmlvclNwZWNpbWVuQ29sbGVjdGlvbkNvZGluZ3MsIFByZXBhcmVQYXRpZW50UHJpb3JTcGVjaW1lbkNvbGxlY3Rpb25Db2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QcmVwYXJlUGF0aWVudFByaW9yU3BlY2ltZW5Db2xsZWN0aW9uQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHJlcGFyZVBhdGllbnRQcmlvclNwZWNpbWVuQ29sbGVjdGlvbkNvZGVzLCAgUHJlcGFyZVBhdGllbnRQcmlvclNwZWNpbWVuQ29sbGVjdGlvbkNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9QcmVwYXJlUGF0aWVudFByaW9yU3BlY2ltZW5Db2xsZWN0aW9uQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNwZWNpbWVuQ29sbGVjdGlvbkNvZGluZ3MsIFNwZWNpbWVuQ29sbGVjdGlvbkNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NwZWNpbWVuQ29sbGVjdGlvbkNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNwZWNpbWVuQ29sbGVjdGlvbkNvZGVzLCAgU3BlY2ltZW5Db2xsZWN0aW9uQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1NwZWNpbWVuQ29sbGVjdGlvbkNvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXJBZGRpdGl2ZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkQ29udGFpbmVyQWRkaXRpdmVBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBTdWJzdGFuY2UgaW50cm9kdWNlZCBpbiB0aGUga2luZCBvZiBjb250YWluZXIgdG8gcHJlc2VydmUsIG1haW50YWluIG9yIGVuaGFuY2UgdGhlIHNwZWNpbWVuLiBFeGFtcGxlczogRm9ybWFsaW4sIENpdHJhdGUsIEVEVEEuXHJcbiAgICovXHJcbiAgYWRkaXRpdmU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3Vic3RhbmNlIGludHJvZHVjZWQgaW4gdGhlIGtpbmQgb2YgY29udGFpbmVyIHRvIHByZXNlcnZlLCBtYWludGFpbiBvciBlbmhhbmNlIHRoZSBzcGVjaW1lbi4gRXhhbXBsZXM6IEZvcm1hbGluLCBDaXRyYXRlLCBFRFRBLlxyXG4gICAqL1xyXG4gIGFkZGl0aXZlQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdWJzdGFuY2UgaW50cm9kdWNlZCBpbiB0aGUga2luZCBvZiBjb250YWluZXIgdG8gcHJlc2VydmUsIG1haW50YWluIG9yIGVuaGFuY2UgdGhlIHNwZWNpbWVuLiBFeGFtcGxlczogRm9ybWFsaW4sIENpdHJhdGUsIEVEVEEuXHJcbiAgICovXHJcbiAgYWRkaXRpdmVSZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogU3Vic3RhbmNlIGludHJvZHVjZWQgaW4gdGhlIGtpbmQgb2YgY29udGFpbmVyIHRvIHByZXNlcnZlLCBtYWludGFpbiBvciBlbmhhbmNlIHRoZSBzcGVjaW1lbi4gRXhhbXBsZXM6IEZvcm1hbGluLCBDaXRyYXRlLCBFRFRBLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXJBZGRpdGl2ZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1NwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXJBZGRpdGl2ZSc7XHJcbiAgLyoqXHJcbiAgICogU3Vic3RhbmNlIGludHJvZHVjZWQgaW4gdGhlIGtpbmQgb2YgY29udGFpbmVyIHRvIHByZXNlcnZlLCBtYWludGFpbiBvciBlbmhhbmNlIHRoZSBzcGVjaW1lbi4gRXhhbXBsZXM6IEZvcm1hbGluLCBDaXRyYXRlLCBFRFRBLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGRpdGl2ZTogKGZoaXIuQ29kZWFibGVDb25jZXB0fGZoaXIuUmVmZXJlbmNlKXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEludGVybmFsIGZsYWcgdG8gcHJvcGVybHkgc2VyaWFsaXplIGNob2ljZS10eXBlIGVsZW1lbnQgU3BlY2ltZW5EZWZpbml0aW9uLnR5cGVUZXN0ZWQuY29udGFpbmVyLmFkZGl0aXZlLmFkZGl0aXZlW3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX2FkZGl0aXZlSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZENvbnRhaW5lckFkZGl0aXZlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8U3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZENvbnRhaW5lckFkZGl0aXZlQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2FkZGl0aXZlJ10pIHsgdGhpcy5hZGRpdGl2ZSA9IHNvdXJjZS5hZGRpdGl2ZTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydhZGRpdGl2ZUNvZGVhYmxlQ29uY2VwdCddKSB7IHRoaXMuYWRkaXRpdmUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmFkZGl0aXZlQ29kZWFibGVDb25jZXB0KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydhZGRpdGl2ZVJlZmVyZW5jZSddKSB7IHRoaXMuYWRkaXRpdmUgPSBuZXcgZmhpci5SZWZlcmVuY2Uoc291cmNlLmFkZGl0aXZlUmVmZXJlbmNlKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWRkaXRpdmUgPSBudWxsOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAoIXRoaXNbJ2FkZGl0aXZlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBhZGRpdGl2ZTogZmhpcjogU3BlY2ltZW5EZWZpbml0aW9uLnR5cGVUZXN0ZWQuY29udGFpbmVyLmFkZGl0aXZlLmFkZGl0aXZlW3hdOicsIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXIgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZENvbnRhaW5lckFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIG1hdGVyaWFsIG9mIHRoZSBjb250YWluZXIuXHJcbiAgICovXHJcbiAgbWF0ZXJpYWw/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIGNvbnRhaW5lciB1c2VkIHRvIGNvbnRhaW4gdGhpcyBraW5kIG9mIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbG9yIG9mIGNvbnRhaW5lciBjYXAuXHJcbiAgICovXHJcbiAgY2FwPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGV4dHVhbCBkZXNjcmlwdGlvbiBvZiB0aGUga2luZCBvZiBjb250YWluZXIuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY2FwYWNpdHkgKHZvbHVtZSBvciBvdGhlciBtZWFzdXJlKSBvZiB0aGlzIGtpbmQgb2YgY29udGFpbmVyLlxyXG4gICAqL1xyXG4gIGNhcGFjaXR5PzogZmhpci5RdWFudGl0eUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtaW5pbXVtIHZvbHVtZSB0byBiZSBjb25kaXRpb25lZCBpbiB0aGUgY29udGFpbmVyLlxyXG4gICAqL1xyXG4gIG1pbmltdW1Wb2x1bWU/OiBmaGlyLlF1YW50aXR5fGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1pbmltdW0gdm9sdW1lIHRvIGJlIGNvbmRpdGlvbmVkIGluIHRoZSBjb250YWluZXIuXHJcbiAgICovXHJcbiAgbWluaW11bVZvbHVtZVF1YW50aXR5PzogZmhpci5RdWFudGl0eUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtaW5pbXVtIHZvbHVtZSB0byBiZSBjb25kaXRpb25lZCBpbiB0aGUgY29udGFpbmVyLlxyXG4gICAqL1xyXG4gIG1pbmltdW1Wb2x1bWVTdHJpbmc/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTdWJzdGFuY2UgaW50cm9kdWNlZCBpbiB0aGUga2luZCBvZiBjb250YWluZXIgdG8gcHJlc2VydmUsIG1haW50YWluIG9yIGVuaGFuY2UgdGhlIHNwZWNpbWVuLiBFeGFtcGxlczogRm9ybWFsaW4sIENpdHJhdGUsIEVEVEEuXHJcbiAgICovXHJcbiAgYWRkaXRpdmU/OiBmaGlyLlNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXJBZGRpdGl2ZUFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lhbCBwcm9jZXNzaW5nIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBmb3IgdGhpcyBraW5kIG9mIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIHByZXBhcmF0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgc3BlY2ltZW4ncyBjb250YWluZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZENvbnRhaW5lciBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1NwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXInO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIG1hdGVyaWFsIG9mIHRoZSBjb250YWluZXIuXHJcbiAgICovXHJcbiAgcHVibGljIG1hdGVyaWFsPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIGNvbnRhaW5lciB1c2VkIHRvIGNvbnRhaW4gdGhpcyBraW5kIG9mIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbG9yIG9mIGNvbnRhaW5lciBjYXAuXHJcbiAgICovXHJcbiAgcHVibGljIGNhcD86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGV4dHVhbCBkZXNjcmlwdGlvbiBvZiB0aGUga2luZCBvZiBjb250YWluZXIuXHJcbiAgICovXHJcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY2FwYWNpdHkgKHZvbHVtZSBvciBvdGhlciBtZWFzdXJlKSBvZiB0aGlzIGtpbmQgb2YgY29udGFpbmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjYXBhY2l0eT86IGZoaXIuUXVhbnRpdHl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtaW5pbXVtIHZvbHVtZSB0byBiZSBjb25kaXRpb25lZCBpbiB0aGUgY29udGFpbmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtaW5pbXVtVm9sdW1lPzogKGZoaXIuUXVhbnRpdHl8Zmhpci5GaGlyU3RyaW5nKXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJuYWwgZmxhZyB0byBwcm9wZXJseSBzZXJpYWxpemUgY2hvaWNlLXR5cGUgZWxlbWVudCBTcGVjaW1lbkRlZmluaXRpb24udHlwZVRlc3RlZC5jb250YWluZXIubWluaW11bVZvbHVtZVt4XVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2Z0c19taW5pbXVtVm9sdW1lSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogU3Vic3RhbmNlIGludHJvZHVjZWQgaW4gdGhlIGtpbmQgb2YgY29udGFpbmVyIHRvIHByZXNlcnZlLCBtYWludGFpbiBvciBlbmhhbmNlIHRoZSBzcGVjaW1lbi4gRXhhbXBsZXM6IEZvcm1hbGluLCBDaXRyYXRlLCBFRFRBLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGRpdGl2ZT86IGZoaXIuU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZENvbnRhaW5lckFkZGl0aXZlW107XHJcbiAgLyoqXHJcbiAgICogU3BlY2lhbCBwcm9jZXNzaW5nIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBmb3IgdGhpcyBraW5kIG9mIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVwYXJhdGlvbj86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZENvbnRhaW5lciAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXJBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsnbWF0ZXJpYWwnXSkgeyB0aGlzLm1hdGVyaWFsID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5tYXRlcmlhbCk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydjYXAnXSkgeyB0aGlzLmNhcCA9IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdChzb3VyY2UuY2FwKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGVzY3JpcHRpb24nXSkgeyB0aGlzLmRlc2NyaXB0aW9uID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5kZXNjcmlwdGlvbn0pOyB9XHJcbiAgICBpZiAoc291cmNlWydjYXBhY2l0eSddKSB7IHRoaXMuY2FwYWNpdHkgPSBuZXcgZmhpci5RdWFudGl0eShzb3VyY2UuY2FwYWNpdHkpOyB9XHJcbiAgICBpZiAoc291cmNlWydtaW5pbXVtVm9sdW1lJ10pIHsgdGhpcy5taW5pbXVtVm9sdW1lID0gc291cmNlLm1pbmltdW1Wb2x1bWU7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnbWluaW11bVZvbHVtZVF1YW50aXR5J10pIHsgdGhpcy5taW5pbXVtVm9sdW1lID0gbmV3IGZoaXIuUXVhbnRpdHkoc291cmNlLm1pbmltdW1Wb2x1bWVRdWFudGl0eSk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnbWluaW11bVZvbHVtZVN0cmluZyddKSB7IHRoaXMubWluaW11bVZvbHVtZSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UubWluaW11bVZvbHVtZVN0cmluZ30pOyB9XHJcbiAgICBpZiAoc291cmNlWydhZGRpdGl2ZSddKSB7IHRoaXMuYWRkaXRpdmUgPSBzb3VyY2UuYWRkaXRpdmUubWFwKCh4KSA9PiBuZXcgZmhpci5TcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkQ29udGFpbmVyQWRkaXRpdmUoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hZGRpdGl2ZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydwcmVwYXJhdGlvbiddKSB7IHRoaXMucHJlcGFyYXRpb24gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHt2YWx1ZTogc291cmNlLnByZXBhcmF0aW9ufSk7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1wibWF0ZXJpYWxcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5tYXRlcmlhbC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJ0eXBlXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudHlwZS5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjYXBcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5jYXAuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiZGVzY3JpcHRpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5kZXNjcmlwdGlvbi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjYXBhY2l0eVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNhcGFjaXR5LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcImFkZGl0aXZlXCJdKSB7IHRoaXMuYWRkaXRpdmUuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcInByZXBhcmF0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMucHJlcGFyYXRpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkSGFuZGxpbmcgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZEhhbmRsaW5nQXJncyBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogSXQgcXVhbGlmaWVzIHRoZSBpbnRlcnZhbCBvZiB0ZW1wZXJhdHVyZSwgd2hpY2ggY2hhcmFjdGVyaXplcyBhbiBvY2N1cnJlbmNlIG9mIGhhbmRsaW5nLiBDb25kaXRpb25zIHRoYXQgYXJlIG5vdCByZWxhdGVkIHRvIHRlbXBlcmF0dXJlIG1heSBiZSBoYW5kbGVkIGluIHRoZSBpbnN0cnVjdGlvbiBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHRlbXBlcmF0dXJlUXVhbGlmaWVyPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdGVtcGVyYXR1cmUgaW50ZXJ2YWwgZm9yIHRoaXMgc2V0IG9mIGhhbmRsaW5nIGluc3RydWN0aW9ucy5cclxuICAgKi9cclxuICB0ZW1wZXJhdHVyZVJhbmdlPzogZmhpci5SYW5nZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtYXhpbXVtIHRpbWUgaW50ZXJ2YWwgb2YgcHJlc2VydmF0aW9uIG9mIHRoZSBzcGVjaW1lbiB3aXRoIHRoZXNlIGNvbmRpdGlvbnMuXHJcbiAgICovXHJcbiAgbWF4RHVyYXRpb24/OiBmaGlyLkR1cmF0aW9uQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQWRkaXRpb25hbCB0ZXh0dWFsIGluc3RydWN0aW9ucyBmb3IgdGhlIHByZXNlcnZhdGlvbiBvciB0cmFuc3BvcnQgb2YgdGhlIHNwZWNpbWVuLiBGb3IgaW5zdGFuY2UsICdQcm90ZWN0IGZyb20gbGlnaHQgZXhwb3N1cmUnLlxyXG4gICAqL1xyXG4gIGluc3RydWN0aW9uPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgb2YgaW5zdHJ1Y3Rpb25zIGZvciBwcmVzZXJ2YXRpb24vdHJhbnNwb3J0IG9mIHRoZSBzcGVjaW1lbiBhdCBhIGRlZmluZWQgdGVtcGVyYXR1cmUgaW50ZXJ2YWwsIHByaW9yIHRoZSB0ZXN0aW5nIHByb2Nlc3MuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZEhhbmRsaW5nIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZEhhbmRsaW5nJztcclxuICAvKipcclxuICAgKiBJdCBxdWFsaWZpZXMgdGhlIGludGVydmFsIG9mIHRlbXBlcmF0dXJlLCB3aGljaCBjaGFyYWN0ZXJpemVzIGFuIG9jY3VycmVuY2Ugb2YgaGFuZGxpbmcuIENvbmRpdGlvbnMgdGhhdCBhcmUgbm90IHJlbGF0ZWQgdG8gdGVtcGVyYXR1cmUgbWF5IGJlIGhhbmRsZWQgaW4gdGhlIGluc3RydWN0aW9uIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHRlbXBlcmF0dXJlUXVhbGlmaWVyPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0ZW1wZXJhdHVyZSBpbnRlcnZhbCBmb3IgdGhpcyBzZXQgb2YgaGFuZGxpbmcgaW5zdHJ1Y3Rpb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0ZW1wZXJhdHVyZVJhbmdlPzogZmhpci5SYW5nZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1heGltdW0gdGltZSBpbnRlcnZhbCBvZiBwcmVzZXJ2YXRpb24gb2YgdGhlIHNwZWNpbWVuIHdpdGggdGhlc2UgY29uZGl0aW9ucy5cclxuICAgKi9cclxuICBwdWJsaWMgbWF4RHVyYXRpb24/OiBmaGlyLkR1cmF0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBZGRpdGlvbmFsIHRleHR1YWwgaW5zdHJ1Y3Rpb25zIGZvciB0aGUgcHJlc2VydmF0aW9uIG9yIHRyYW5zcG9ydCBvZiB0aGUgc3BlY2ltZW4uIEZvciBpbnN0YW5jZSwgJ1Byb3RlY3QgZnJvbSBsaWdodCBleHBvc3VyZScuXHJcbiAgICovXHJcbiAgcHVibGljIGluc3RydWN0aW9uPzogZmhpci5GaGlyU3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBTcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkSGFuZGxpbmcgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkSGFuZGxpbmdBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsndGVtcGVyYXR1cmVRdWFsaWZpZXInXSkgeyB0aGlzLnRlbXBlcmF0dXJlUXVhbGlmaWVyID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50ZW1wZXJhdHVyZVF1YWxpZmllcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3RlbXBlcmF0dXJlUmFuZ2UnXSkgeyB0aGlzLnRlbXBlcmF0dXJlUmFuZ2UgPSBuZXcgZmhpci5SYW5nZShzb3VyY2UudGVtcGVyYXR1cmVSYW5nZSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ21heER1cmF0aW9uJ10pIHsgdGhpcy5tYXhEdXJhdGlvbiA9IG5ldyBmaGlyLkR1cmF0aW9uKHNvdXJjZS5tYXhEdXJhdGlvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ2luc3RydWN0aW9uJ10pIHsgdGhpcy5pbnN0cnVjdGlvbiA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UuaW5zdHJ1Y3Rpb259KTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKHRoaXNbXCJ0ZW1wZXJhdHVyZVF1YWxpZmllclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnRlbXBlcmF0dXJlUXVhbGlmaWVyLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInRlbXBlcmF0dXJlUmFuZ2VcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50ZW1wZXJhdHVyZVJhbmdlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcIm1heER1cmF0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubWF4RHVyYXRpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiaW5zdHJ1Y3Rpb25cIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5pbnN0cnVjdGlvbi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZEFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFByaW1hcnkgb2Ygc2Vjb25kYXJ5IHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIGlzRGVyaXZlZD86IGZoaXIuRmhpckJvb2xlYW58Ym9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGtpbmQgb2Ygc3BlY2ltZW4gY29uZGl0aW9uZWQgZm9yIHRlc3RpbmcgZXhwZWN0ZWQgYnkgbGFiLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwcmVmZXJlbmNlIGZvciB0aGlzIHR5cGUgb2YgY29uZGl0aW9uZWQgc3BlY2ltZW4uXHJcbiAgICovXHJcbiAgcHJlZmVyZW5jZTogU3BlY2ltZW5Db250YWluZWRQcmVmZXJlbmNlQ29kZVR5cGV8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2ltZW4ncyBjb250YWluZXIuXHJcbiAgICovXHJcbiAgY29udGFpbmVyPzogZmhpci5TcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkQ29udGFpbmVyQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZW1lbnRzIGZvciBkZWxpdmVyeSBhbmQgc3BlY2lhbCBoYW5kbGluZyBvZiB0aGlzIGtpbmQgb2YgY29uZGl0aW9uZWQgc3BlY2ltZW4uXHJcbiAgICovXHJcbiAgcmVxdWlyZW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdXN1YWwgdGltZSB0aGF0IGEgc3BlY2ltZW4gb2YgdGhpcyBraW5kIGlzIHJldGFpbmVkIGFmdGVyIHRoZSBvcmRlcmVkIHRlc3RzIGFyZSBjb21wbGV0ZWQsIGZvciB0aGUgcHVycG9zZSBvZiBhZGRpdGlvbmFsIHRlc3RpbmcuXHJcbiAgICovXHJcbiAgcmV0ZW50aW9uVGltZT86IGZoaXIuRHVyYXRpb25BcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDcml0ZXJpb24gZm9yIHJlamVjdGlvbiBvZiB0aGUgc3BlY2ltZW4gaW4gaXRzIGNvbnRhaW5lciBieSB0aGUgbGFib3JhdG9yeS5cclxuICAgKi9cclxuICByZWplY3Rpb25Dcml0ZXJpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2V0IG9mIGluc3RydWN0aW9ucyBmb3IgcHJlc2VydmF0aW9uL3RyYW5zcG9ydCBvZiB0aGUgc3BlY2ltZW4gYXQgYSBkZWZpbmVkIHRlbXBlcmF0dXJlIGludGVydmFsLCBwcmlvciB0aGUgdGVzdGluZyBwcm9jZXNzLlxyXG4gICAqL1xyXG4gIGhhbmRsaW5nPzogZmhpci5TcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkSGFuZGxpbmdBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogU3BlY2ltZW4gY29uZGl0aW9uZWQgaW4gYSBjb250YWluZXIgYXMgZXhwZWN0ZWQgYnkgdGhlIHRlc3RpbmcgbGFib3JhdG9yeS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnU3BlY2ltZW5EZWZpbml0aW9uVHlwZVRlc3RlZCc7XHJcbiAgLyoqXHJcbiAgICogUHJpbWFyeSBvZiBzZWNvbmRhcnkgc3BlY2ltZW4uXHJcbiAgICovXHJcbiAgcHVibGljIGlzRGVyaXZlZD86IGZoaXIuRmhpckJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBraW5kIG9mIHNwZWNpbWVuIGNvbmRpdGlvbmVkIGZvciB0ZXN0aW5nIGV4cGVjdGVkIGJ5IGxhYi5cclxuICAgKi9cclxuICBwdWJsaWMgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgcHJlZmVyZW5jZSBmb3IgdGhpcyB0eXBlIG9mIGNvbmRpdGlvbmVkIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVmZXJlbmNlOiBTcGVjaW1lbkNvbnRhaW5lZFByZWZlcmVuY2VDb2RlVHlwZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzcGVjaW1lbidzIGNvbnRhaW5lci5cclxuICAgKi9cclxuICBwdWJsaWMgY29udGFpbmVyPzogZmhpci5TcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkQ29udGFpbmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZXF1aXJlbWVudHMgZm9yIGRlbGl2ZXJ5IGFuZCBzcGVjaWFsIGhhbmRsaW5nIG9mIHRoaXMga2luZCBvZiBjb25kaXRpb25lZCBzcGVjaW1lbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVxdWlyZW1lbnQ/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1c3VhbCB0aW1lIHRoYXQgYSBzcGVjaW1lbiBvZiB0aGlzIGtpbmQgaXMgcmV0YWluZWQgYWZ0ZXIgdGhlIG9yZGVyZWQgdGVzdHMgYXJlIGNvbXBsZXRlZCwgZm9yIHRoZSBwdXJwb3NlIG9mIGFkZGl0aW9uYWwgdGVzdGluZy5cclxuICAgKi9cclxuICBwdWJsaWMgcmV0ZW50aW9uVGltZT86IGZoaXIuRHVyYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENyaXRlcmlvbiBmb3IgcmVqZWN0aW9uIG9mIHRoZSBzcGVjaW1lbiBpbiBpdHMgY29udGFpbmVyIGJ5IHRoZSBsYWJvcmF0b3J5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWplY3Rpb25Dcml0ZXJpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIFNldCBvZiBpbnN0cnVjdGlvbnMgZm9yIHByZXNlcnZhdGlvbi90cmFuc3BvcnQgb2YgdGhlIHNwZWNpbWVuIGF0IGEgZGVmaW5lZCB0ZW1wZXJhdHVyZSBpbnRlcnZhbCwgcHJpb3IgdGhlIHRlc3RpbmcgcHJvY2Vzcy5cclxuICAgKi9cclxuICBwdWJsaWMgaGFuZGxpbmc/OiBmaGlyLlNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRIYW5kbGluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWQgLSBpbml0aWFsaXplcyBhbnkgcmVxdWlyZWQgZWxlbWVudHMgdG8gbnVsbCBpZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6UGFydGlhbDxTcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIGlmIChzb3VyY2VbJ2lzRGVyaXZlZCddKSB7IHRoaXMuaXNEZXJpdmVkID0gbmV3IGZoaXIuRmhpckJvb2xlYW4oe3ZhbHVlOiBzb3VyY2UuaXNEZXJpdmVkfSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGUnXSkgeyB0aGlzLnR5cGUgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGUpOyB9XHJcbiAgICBpZiAoc291cmNlWydwcmVmZXJlbmNlJ10pIHsgdGhpcy5wcmVmZXJlbmNlID0gc291cmNlLnByZWZlcmVuY2U7IH1cclxuICAgIGVsc2UgeyB0aGlzLnByZWZlcmVuY2UgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydjb250YWluZXInXSkgeyB0aGlzLmNvbnRhaW5lciA9IG5ldyBmaGlyLlNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRDb250YWluZXIoc291cmNlLmNvbnRhaW5lcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlcXVpcmVtZW50J10pIHsgdGhpcy5yZXF1aXJlbWVudCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucmVxdWlyZW1lbnR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmV0ZW50aW9uVGltZSddKSB7IHRoaXMucmV0ZW50aW9uVGltZSA9IG5ldyBmaGlyLkR1cmF0aW9uKHNvdXJjZS5yZXRlbnRpb25UaW1lKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncmVqZWN0aW9uQ3JpdGVyaW9uJ10pIHsgdGhpcy5yZWplY3Rpb25Dcml0ZXJpb24gPSBzb3VyY2UucmVqZWN0aW9uQ3JpdGVyaW9uLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucmVqZWN0aW9uQ3JpdGVyaW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ2hhbmRsaW5nJ10pIHsgdGhpcy5oYW5kbGluZyA9IHNvdXJjZS5oYW5kbGluZy5tYXAoKHgpID0+IG5ldyBmaGlyLlNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWRIYW5kbGluZyh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmhhbmRsaW5nID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmVxdWlyZWQtYm91bmQgVmFsdWUgU2V0IGZvciBwcmVmZXJlbmNlIChTcGVjaW1lbkRlZmluaXRpb24udHlwZVRlc3RlZC5wcmVmZXJlbmNlKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgcHJlZmVyZW5jZVJlcXVpcmVkQ29kaW5nKCk6U3BlY2ltZW5Db250YWluZWRQcmVmZXJlbmNlQ29kaW5nVHlwZSB7XHJcbiAgICByZXR1cm4gU3BlY2ltZW5Db250YWluZWRQcmVmZXJlbmNlQ29kaW5ncztcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICh0aGlzW1wiaXNEZXJpdmVkXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMuaXNEZXJpdmVkLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ3ByZWZlcmVuY2UnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCAgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHByZWZlcmVuY2U6U3BlY2ltZW5Db250YWluZWRQcmVmZXJlbmNlQ29kZVR5cGUgZmhpcjogU3BlY2ltZW5EZWZpbml0aW9uLnR5cGVUZXN0ZWQucHJlZmVyZW5jZTpjb2RlJywgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcImNvbnRhaW5lclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmNvbnRhaW5lci5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJyZXF1aXJlbWVudFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnJlcXVpcmVtZW50LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInJldGVudGlvblRpbWVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5yZXRlbnRpb25UaW1lLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInJlamVjdGlvbkNyaXRlcmlvblwiXSkgeyB0aGlzLnJlamVjdGlvbkNyaXRlcmlvbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiaGFuZGxpbmdcIl0pIHsgdGhpcy5oYW5kbGluZy5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBTcGVjaW1lbkRlZmluaXRpb24gdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2ltZW5EZWZpbml0aW9uQXJncyBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2VBcmdzIHtcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiU3BlY2ltZW5EZWZpbml0aW9uXCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgYnVzaW5lc3MgaWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIGtpbmQgb2Ygc3BlY2ltZW4uXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllckFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBraW5kIG9mIG1hdGVyaWFsIHRvIGJlIGNvbGxlY3RlZC5cclxuICAgKi9cclxuICB0eXBlQ29sbGVjdGVkPzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQcmVwYXJhdGlvbiBvZiB0aGUgcGF0aWVudCBmb3Igc3BlY2ltZW4gY29sbGVjdGlvbi5cclxuICAgKi9cclxuICBwYXRpZW50UHJlcGFyYXRpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGltZSBhc3BlY3Qgb2Ygc3BlY2ltZW4gY29sbGVjdGlvbiAoZHVyYXRpb24gb3Igb2Zmc2V0KS5cclxuICAgKi9cclxuICB0aW1lQXNwZWN0PzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFjdGlvbiB0byBiZSBwZXJmb3JtZWQgZm9yIGNvbGxlY3RpbmcgdGhlIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIGNvbGxlY3Rpb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3BlY2ltZW4gY29uZGl0aW9uZWQgaW4gYSBjb250YWluZXIgYXMgZXhwZWN0ZWQgYnkgdGhlIHRlc3RpbmcgbGFib3JhdG9yeS5cclxuICAgKi9cclxuICB0eXBlVGVzdGVkPzogZmhpci5TcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkQXJnc1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEga2luZCBvZiBzcGVjaW1lbiB3aXRoIGFzc29jaWF0ZWQgc2V0IG9mIHJlcXVpcmVtZW50cy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTcGVjaW1lbkRlZmluaXRpb24gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ1NwZWNpbWVuRGVmaW5pdGlvbic7XHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc291cmNlVHlwZTogXCJTcGVjaW1lbkRlZmluaXRpb25cIjtcclxuICAvKipcclxuICAgKiBBIGJ1c2luZXNzIGlkZW50aWZpZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBraW5kIG9mIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUga2luZCBvZiBtYXRlcmlhbCB0byBiZSBjb2xsZWN0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGVDb2xsZWN0ZWQ/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUHJlcGFyYXRpb24gb2YgdGhlIHBhdGllbnQgZm9yIHNwZWNpbWVuIGNvbGxlY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHBhdGllbnRQcmVwYXJhdGlvbj86IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogVGltZSBhc3BlY3Qgb2Ygc3BlY2ltZW4gY29sbGVjdGlvbiAoZHVyYXRpb24gb3Igb2Zmc2V0KS5cclxuICAgKi9cclxuICBwdWJsaWMgdGltZUFzcGVjdD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFjdGlvbiB0byBiZSBwZXJmb3JtZWQgZm9yIGNvbGxlY3RpbmcgdGhlIHNwZWNpbWVuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2xsZWN0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRbXTtcclxuICAvKipcclxuICAgKiBTcGVjaW1lbiBjb25kaXRpb25lZCBpbiBhIGNvbnRhaW5lciBhcyBleHBlY3RlZCBieSB0aGUgdGVzdGluZyBsYWJvcmF0b3J5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0eXBlVGVzdGVkPzogZmhpci5TcGVjaW1lbkRlZmluaXRpb25UeXBlVGVzdGVkW107XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgU3BlY2ltZW5EZWZpbml0aW9uIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8U3BlY2ltZW5EZWZpbml0aW9uQXJncz4gPSB7fSwgb3B0aW9uczpmaGlyLkZoaXJDb25zdHJ1Y3Rvck9wdGlvbnMgPSB7fSkge1xyXG4gICAgc3VwZXIoc291cmNlLCBvcHRpb25zKTtcclxuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gJ1NwZWNpbWVuRGVmaW5pdGlvbic7XHJcbiAgICBpZiAoc291cmNlWydpZGVudGlmaWVyJ10pIHsgdGhpcy5pZGVudGlmaWVyID0gbmV3IGZoaXIuSWRlbnRpZmllcihzb3VyY2UuaWRlbnRpZmllcik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGVDb2xsZWN0ZWQnXSkgeyB0aGlzLnR5cGVDb2xsZWN0ZWQgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLnR5cGVDb2xsZWN0ZWQpOyB9XHJcbiAgICBpZiAoc291cmNlWydwYXRpZW50UHJlcGFyYXRpb24nXSkgeyB0aGlzLnBhdGllbnRQcmVwYXJhdGlvbiA9IHNvdXJjZS5wYXRpZW50UHJlcGFyYXRpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wYXRpZW50UHJlcGFyYXRpb24gPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsndGltZUFzcGVjdCddKSB7IHRoaXMudGltZUFzcGVjdCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UudGltZUFzcGVjdH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydjb2xsZWN0aW9uJ10pIHsgdGhpcy5jb2xsZWN0aW9uID0gc291cmNlLmNvbGxlY3Rpb24ubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb2xsZWN0aW9uID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ3R5cGVUZXN0ZWQnXSkgeyB0aGlzLnR5cGVUZXN0ZWQgPSBzb3VyY2UudHlwZVRlc3RlZC5tYXAoKHgpID0+IG5ldyBmaGlyLlNwZWNpbWVuRGVmaW5pdGlvblR5cGVUZXN0ZWQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlVGVzdGVkID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKCk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3N1ZXM6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oKTtcclxuICAgIGlmICghdGhpc1sncmVzb3VyY2VUeXBlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSByZXNvdXJjZVR5cGU6XCJTcGVjaW1lbkRlZmluaXRpb25cIiBmaGlyOiBTcGVjaW1lbkRlZmluaXRpb24ucmVzb3VyY2VUeXBlOlwiU3BlY2ltZW5EZWZpbml0aW9uXCInLCB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiaWRlbnRpZmllclwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmlkZW50aWZpZXIuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1widHlwZUNvbGxlY3RlZFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnR5cGVDb2xsZWN0ZWQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicGF0aWVudFByZXBhcmF0aW9uXCJdKSB7IHRoaXMucGF0aWVudFByZXBhcmF0aW9uLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJ0aW1lQXNwZWN0XCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMudGltZUFzcGVjdC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJjb2xsZWN0aW9uXCJdKSB7IHRoaXMuY29sbGVjdGlvbi5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1widHlwZVRlc3RlZFwiXSkgeyB0aGlzLnR5cGVUZXN0ZWQuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=