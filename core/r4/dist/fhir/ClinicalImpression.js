// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ClinicalImpression
import * as fhir from '../fhir.js';
// @ts-ignore
import { ClinicalimpressionStatusVsValidation } from '../fhirValueSets/ClinicalimpressionStatusVsValidation.js';
/**
 * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
export class ClinicalImpressionInvestigation extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionInvestigation - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        else {
            this.code = null;
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.Reference(x));
        }
        else {
            this.item = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ClinicalImpression.investigation';
        }
        this.vReqS('code', expression);
        this.vOptA('item', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalImpressionInvestigation._fts_dataType = 'ClinicalImpressionInvestigation';
/**
 * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
 */
export class ClinicalImpressionFinding extends fhir.BackboneElement {
    /**
     * Default constructor for ClinicalImpressionFinding - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['itemCodeableConcept']) {
            this.itemCodeableConcept = new fhir.CodeableConcept(source.itemCodeableConcept);
        }
        if (source['itemReference']) {
            this.itemReference = new fhir.Reference(source.itemReference);
        }
        if (source['basis']) {
            this.basis = new fhir.FhirString({ value: source.basis });
        }
        if (source['_basis']) {
            if (this.basis) {
                this.basis.addExtendedProperties(source._basis);
            }
            else {
                this.basis = new fhir.FhirString(source._basis);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ClinicalImpression.finding';
        }
        this.vOptS('itemCodeableConcept', expression);
        this.vOptS('itemReference', expression);
        this.vOptS('basis', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalImpressionFinding._fts_dataType = 'ClinicalImpressionFinding';
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
export class ClinicalImpression extends fhir.DomainResource {
    /**
     * Default constructor for ClinicalImpression - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ClinicalImpression';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = new fhir.CodeableConcept(source.statusReason);
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['_description']) {
            if (this.description) {
                this.description.addExtendedProperties(source._description);
            }
            else {
                this.description = new fhir.FhirString(source._description);
            }
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['encounter']) {
            this.encounter = new fhir.Reference(source.encounter);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['_date']) {
            if (this.date) {
                this.date.addExtendedProperties(source._date);
            }
            else {
                this.date = new fhir.FhirDateTime(source._date);
            }
        }
        if (source['assessor']) {
            this.assessor = new fhir.Reference(source.assessor);
        }
        if (source['previous']) {
            this.previous = new fhir.Reference(source.previous);
        }
        if (source['problem']) {
            this.problem = source.problem.map((x) => new fhir.Reference(x));
        }
        else {
            this.problem = [];
        }
        if (source['investigation']) {
            this.investigation = source.investigation.map((x) => new fhir.ClinicalImpressionInvestigation(x));
        }
        else {
            this.investigation = [];
        }
        if (source['protocol']) {
            this.protocol = source.protocol.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.protocol = [];
        }
        if (source['_protocol']) {
            source._protocol.forEach((x, i) => {
                if (this.protocol.length >= i) {
                    if (x) {
                        this.protocol[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.protocol.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['summary']) {
            this.summary = new fhir.FhirString({ value: source.summary });
        }
        if (source['_summary']) {
            if (this.summary) {
                this.summary.addExtendedProperties(source._summary);
            }
            else {
                this.summary = new fhir.FhirString(source._summary);
            }
        }
        if (source['finding']) {
            this.finding = source.finding.map((x) => new fhir.ClinicalImpressionFinding(x));
        }
        else {
            this.finding = [];
        }
        if (source['prognosisCodeableConcept']) {
            this.prognosisCodeableConcept = source.prognosisCodeableConcept.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.prognosisCodeableConcept = [];
        }
        if (source['prognosisReference']) {
            this.prognosisReference = source.prognosisReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.prognosisReference = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.Reference(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'ClinicalImpression';
        }
        this.vReqS('resourceType', expression);
        this.vOptA('identifier', expression);
        this.vReqSV('status', expression, 'ClinicalimpressionStatus', ClinicalimpressionStatusVsValidation, 'r');
        this.vOptS('statusReason', expression);
        this.vOptS('code', expression);
        this.vOptS('description', expression);
        this.vReqS('subject', expression);
        this.vOptS('encounter', expression);
        this.vOptS('effective', expression);
        this.vOptS('date', expression);
        this.vOptS('assessor', expression);
        this.vOptS('previous', expression);
        this.vOptA('problem', expression);
        this.vOptA('investigation', expression);
        this.vOptA('protocol', expression);
        this.vOptS('summary', expression);
        this.vOptA('finding', expression);
        this.vOptA('prognosisCodeableConcept', expression);
        this.vOptA('prognosisReference', expression);
        this.vOptA('supportingInfo', expression);
        this.vOptA('note', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ClinicalImpression._fts_dataType = 'ClinicalImpression';
/**
 * Internal flag to properly serialize choice-type element ClinicalImpression.effective[x]
 */
ClinicalImpression._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,