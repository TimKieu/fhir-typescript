/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ClinicalimpressionStatusCodings } from '../fhirValueSets/ClinicalimpressionStatusCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirString } from './FhirString.js';
import { Identifier } from './Identifier.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { FhirUri } from './FhirUri.js';
import { Annotation } from './Annotation.js';

// <auto-generated/>
/**
 * One or more sets of investigations (signs, symptoms, etc.). The actual grouping of investigations varies greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
var ClinicalImpressionInvestigation = /** @class */ (function (_super) {
    __extends(ClinicalImpressionInvestigation, _super);
    /**
     * Default constructor for ClinicalImpressionInvestigation - initializes any required elements to null if a value is not provided.
     */
    function ClinicalImpressionInvestigation(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        else {
            _this.code = null;
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new Reference(x); });
        }
        else {
            _this.item = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClinicalImpressionInvestigation.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:fhir.CodeableConcept fhir: ClinicalImpression.investigation.code:CodeableConcept', }));
        }
        if (this["code"]) {
            (_a = outcome.issue).push.apply(_a, this.code.doModelValidation().issue);
        }
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClinicalImpressionInvestigation._fts_dataType = 'ClinicalImpressionInvestigation';
    return ClinicalImpressionInvestigation;
}(BackboneElement));
/**
 * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
 */
var ClinicalImpressionFinding = /** @class */ (function (_super) {
    __extends(ClinicalImpressionFinding, _super);
    /**
     * Default constructor for ClinicalImpressionFinding - initializes any required elements to null if a value is not provided.
     */
    function ClinicalImpressionFinding(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['itemCodeableConcept']) {
            _this.itemCodeableConcept = new CodeableConcept(source.itemCodeableConcept);
        }
        if (source['itemReference']) {
            _this.itemReference = new Reference(source.itemReference);
        }
        if (source['basis']) {
            _this.basis = new FhirString({ value: source.basis });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClinicalImpressionFinding.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["itemCodeableConcept"]) {
            (_a = outcome.issue).push.apply(_a, this.itemCodeableConcept.doModelValidation().issue);
        }
        if (this["itemReference"]) {
            (_b = outcome.issue).push.apply(_b, this.itemReference.doModelValidation().issue);
        }
        if (this["basis"]) {
            (_c = outcome.issue).push.apply(_c, this.basis.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClinicalImpressionFinding._fts_dataType = 'ClinicalImpressionFinding';
    return ClinicalImpressionFinding;
}(BackboneElement));
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
var ClinicalImpression = /** @class */ (function (_super) {
    __extends(ClinicalImpression, _super);
    /**
     * Default constructor for ClinicalImpression - initializes any required elements to null if a value is not provided.
     */
    function ClinicalImpression(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ClinicalImpression';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = new CodeableConcept(source.statusReason);
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['encounter']) {
            _this.encounter = new Reference(source.encounter);
        }
        if (source['effective']) {
            _this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            _this.effective = new FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            _this.effective = new Period(source.effectivePeriod);
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['assessor']) {
            _this.assessor = new Reference(source.assessor);
        }
        if (source['previous']) {
            _this.previous = new Reference(source.previous);
        }
        if (source['problem']) {
            _this.problem = source.problem.map(function (x) { return new Reference(x); });
        }
        else {
            _this.problem = [];
        }
        if (source['investigation']) {
            _this.investigation = source.investigation.map(function (x) { return new ClinicalImpressionInvestigation(x); });
        }
        else {
            _this.investigation = [];
        }
        if (source['protocol']) {
            _this.protocol = source.protocol.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.protocol = [];
        }
        if (source['summary']) {
            _this.summary = new FhirString({ value: source.summary });
        }
        if (source['finding']) {
            _this.finding = source.finding.map(function (x) { return new ClinicalImpressionFinding(x); });
        }
        else {
            _this.finding = [];
        }
        if (source['prognosisCodeableConcept']) {
            _this.prognosisCodeableConcept = source.prognosisCodeableConcept.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.prognosisCodeableConcept = [];
        }
        if (source['prognosisReference']) {
            _this.prognosisReference = source.prognosisReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.prognosisReference = [];
        }
        if (source['supportingInfo']) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new Reference(x); });
        }
        else {
            _this.supportingInfo = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ClinicalImpression.status)
     */
    ClinicalImpression.statusRequiredCoding = function () {
        return ClinicalimpressionStatusCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ClinicalImpression.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ClinicalImpression" fhir: ClinicalImpression.resourceType:"ClinicalImpression"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ClinicalimpressionStatusCodeType fhir: ClinicalImpression.status:code', }));
        }
        if (this["statusReason"]) {
            (_a = outcome.issue).push.apply(_a, this.statusReason.doModelValidation().issue);
        }
        if (this["code"]) {
            (_b = outcome.issue).push.apply(_b, this.code.doModelValidation().issue);
        }
        if (this["description"]) {
            (_c = outcome.issue).push.apply(_c, this.description.doModelValidation().issue);
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: ClinicalImpression.subject:Reference', }));
        }
        if (this["subject"]) {
            (_d = outcome.issue).push.apply(_d, this.subject.doModelValidation().issue);
        }
        if (this["encounter"]) {
            (_e = outcome.issue).push.apply(_e, this.encounter.doModelValidation().issue);
        }
        if (this["date"]) {
            (_f = outcome.issue).push.apply(_f, this.date.doModelValidation().issue);
        }
        if (this["assessor"]) {
            (_g = outcome.issue).push.apply(_g, this.assessor.doModelValidation().issue);
        }
        if (this["previous"]) {
            (_h = outcome.issue).push.apply(_h, this.previous.doModelValidation().issue);
        }
        if (this["problem"]) {
            this.problem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["investigation"]) {
            this.investigation.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["protocol"]) {
            this.protocol.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["summary"]) {
            (_j = outcome.issue).push.apply(_j, this.summary.doModelValidation().issue);
        }
        if (this["finding"]) {
            this.finding.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["prognosisCodeableConcept"]) {
            this.prognosisCodeableConcept.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["prognosisReference"]) {
            this.prognosisReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ClinicalImpression._fts_dataType = 'ClinicalImpression';
    /**
     * Internal flag to properly serialize choice-type element ClinicalImpression.effective[x]
     */
    ClinicalImpression._fts_effectiveIsChoice = true;
    return ClinicalImpression;
}(DomainResource));

export { ClinicalImpression, ClinicalImpressionFinding, ClinicalImpressionInvestigation };
//# sourceMappingURL=ClinicalImpression.js.map
