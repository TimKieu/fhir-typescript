{"version":3,"file":"MedicinalProductPackaged.js","sources":["../../src/fhir/MedicinalProductPackaged.ts"],"sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: MedicinalProductPackaged\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\n// @ts-ignore\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\n// @ts-ignore\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n/**\r\n * Valid arguments for the MedicinalProductPackagedBatchIdentifier type.\r\n */\r\nexport interface MedicinalProductPackagedBatchIdentifierArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * A number appearing on the outer packaging of a specific batch.\r\n   */\r\n  outerPackaging: fhir.IdentifierArgs|null;\r\n  /**\r\n   * A number appearing on the immediate packaging (and not the outer packaging).\r\n   */\r\n  immediatePackaging?: fhir.IdentifierArgs|undefined;\r\n}\r\n\r\n/**\r\n * Batch numbering.\r\n */\r\nexport class MedicinalProductPackagedBatchIdentifier extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductPackagedBatchIdentifier';\r\n  /**\r\n   * A number appearing on the outer packaging of a specific batch.\r\n   */\r\n  public outerPackaging: fhir.Identifier|null;\r\n  /**\r\n   * A number appearing on the immediate packaging (and not the outer packaging).\r\n   */\r\n  public immediatePackaging?: fhir.Identifier|undefined;\r\n  /**\r\n   * Default constructor for MedicinalProductPackagedBatchIdentifier - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductPackagedBatchIdentifierArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['outerPackaging']) { this.outerPackaging = new fhir.Identifier(source.outerPackaging); }\r\n    else { this.outerPackaging = null; }\r\n    if (source['immediatePackaging']) { this.immediatePackaging = new fhir.Identifier(source.immediatePackaging); }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['outerPackaging']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property outerPackaging:fhir.Identifier fhir: MedicinalProductPackaged.batchIdentifier.outerPackaging:Identifier', }));\r\n    }\r\n    if (this[\"outerPackaging\"]) { outcome.issue!.push(...this.outerPackaging.doModelValidation().issue!); }\r\n    if (this[\"immediatePackaging\"]) { outcome.issue!.push(...this.immediatePackaging.doModelValidation().issue!); }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductPackagedPackageItem type.\r\n */\r\nexport interface MedicinalProductPackagedPackageItemArgs extends fhir.BackboneElementArgs {\r\n  /**\r\n   * Including possibly Data Carrier Identifier.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * The physical type of the container of the medicine.\r\n   */\r\n  type: fhir.CodeableConceptArgs|null;\r\n  /**\r\n   * The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.\r\n   */\r\n  quantity: fhir.QuantityArgs|null;\r\n  /**\r\n   * Material type of the package item.\r\n   */\r\n  material?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * A possible alternate material for the packaging.\r\n   */\r\n  alternateMaterial?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * A device accompanying a medicinal product.\r\n   */\r\n  device?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * The manufactured item as contained in the packaged medicinal product.\r\n   */\r\n  manufacturedItem?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Allows containers within containers.\r\n   */\r\n  packageItem?: fhir.MedicinalProductPackagedPackageItemArgs[]|undefined;\r\n  /**\r\n   * Dimensions, color etc.\r\n   */\r\n  physicalCharacteristics?: fhir.ProdCharacteristicArgs|undefined;\r\n  /**\r\n   * Other codeable characteristics.\r\n   */\r\n  otherCharacteristics?: fhir.CodeableConceptArgs[]|undefined;\r\n  /**\r\n   * Shelf Life and storage information.\r\n   */\r\n  shelfLifeStorage?: fhir.ProductShelfLifeArgs[]|undefined;\r\n  /**\r\n   * Manufacturer of this Package Item.\r\n   */\r\n  manufacturer?: fhir.ReferenceArgs[]|undefined;\r\n}\r\n\r\n/**\r\n * A packaging item, as a contained for medicine, possibly with other packaging items within.\r\n */\r\nexport class MedicinalProductPackagedPackageItem extends fhir.BackboneElement {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductPackagedPackageItem';\r\n  /**\r\n   * Including possibly Data Carrier Identifier.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * The physical type of the container of the medicine.\r\n   */\r\n  public type: fhir.CodeableConcept|null;\r\n  /**\r\n   * The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.\r\n   */\r\n  public quantity: fhir.Quantity|null;\r\n  /**\r\n   * Material type of the package item.\r\n   */\r\n  public material?: fhir.CodeableConcept[];\r\n  /**\r\n   * A possible alternate material for the packaging.\r\n   */\r\n  public alternateMaterial?: fhir.CodeableConcept[];\r\n  /**\r\n   * A device accompanying a medicinal product.\r\n   */\r\n  public device?: fhir.Reference[];\r\n  /**\r\n   * The manufactured item as contained in the packaged medicinal product.\r\n   */\r\n  public manufacturedItem?: fhir.Reference[];\r\n  /**\r\n   * Allows containers within containers.\r\n   */\r\n  public packageItem?: fhir.MedicinalProductPackagedPackageItem[];\r\n  /**\r\n   * Dimensions, color etc.\r\n   */\r\n  public physicalCharacteristics?: fhir.ProdCharacteristic|undefined;\r\n  /**\r\n   * Other codeable characteristics.\r\n   */\r\n  public otherCharacteristics?: fhir.CodeableConcept[];\r\n  /**\r\n   * Shelf Life and storage information.\r\n   */\r\n  public shelfLifeStorage?: fhir.ProductShelfLife[];\r\n  /**\r\n   * Manufacturer of this Package Item.\r\n   */\r\n  public manufacturer?: fhir.Reference[];\r\n  /**\r\n   * Default constructor for MedicinalProductPackagedPackageItem - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductPackagedPackageItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }\r\n    else { this.type = null; }\r\n    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }\r\n    else { this.quantity = null; }\r\n    if (source['material']) { this.material = source.material.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.material = []; }\r\n    if (source['alternateMaterial']) { this.alternateMaterial = source.alternateMaterial.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.alternateMaterial = []; }\r\n    if (source['device']) { this.device = source.device.map((x) => new fhir.Reference(x)); }\r\n    else { this.device = []; }\r\n    if (source['manufacturedItem']) { this.manufacturedItem = source.manufacturedItem.map((x) => new fhir.Reference(x)); }\r\n    else { this.manufacturedItem = []; }\r\n    if (source['packageItem']) { this.packageItem = source.packageItem.map((x) => new fhir.MedicinalProductPackagedPackageItem(x)); }\r\n    else { this.packageItem = []; }\r\n    if (source['physicalCharacteristics']) { this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics); }\r\n    if (source['otherCharacteristics']) { this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x)); }\r\n    else { this.otherCharacteristics = []; }\r\n    if (source['shelfLifeStorage']) { this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x)); }\r\n    else { this.shelfLifeStorage = []; }\r\n    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }\r\n    else { this.manufacturer = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['type']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: MedicinalProductPackaged.packageItem.type:CodeableConcept', }));\r\n    }\r\n    if (this[\"type\"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }\r\n    if (!this['quantity']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property quantity:fhir.Quantity fhir: MedicinalProductPackaged.packageItem.quantity:Quantity', }));\r\n    }\r\n    if (this[\"quantity\"]) { outcome.issue!.push(...this.quantity.doModelValidation().issue!); }\r\n    if (this[\"material\"]) { this.material.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"alternateMaterial\"]) { this.alternateMaterial.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"device\"]) { this.device.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"manufacturedItem\"]) { this.manufacturedItem.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"packageItem\"]) { this.packageItem.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"physicalCharacteristics\"]) { outcome.issue!.push(...this.physicalCharacteristics.doModelValidation().issue!); }\r\n    if (this[\"otherCharacteristics\"]) { this.otherCharacteristics.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"shelfLifeStorage\"]) { this.shelfLifeStorage.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"manufacturer\"]) { this.manufacturer.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n/**\r\n * Valid arguments for the MedicinalProductPackaged type.\r\n */\r\nexport interface MedicinalProductPackagedArgs extends fhir.DomainResourceArgs {\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"MedicinalProductPackaged\"|undefined;\r\n  /**\r\n   * Unique identifier.\r\n   */\r\n  identifier?: fhir.IdentifierArgs[]|undefined;\r\n  /**\r\n   * The product with this is a pack for.\r\n   */\r\n  subject?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Textual description.\r\n   */\r\n  description?: fhir.FhirString|string|undefined;\r\n  /**\r\n   * The legal status of supply of the medicinal product as classified by the regulator.\r\n   */\r\n  legalStatusOfSupply?: fhir.CodeableConceptArgs|undefined;\r\n  /**\r\n   * Marketing information.\r\n   */\r\n  marketingStatus?: fhir.MarketingStatusArgs[]|undefined;\r\n  /**\r\n   * Manufacturer of this Package Item.\r\n   */\r\n  marketingAuthorization?: fhir.ReferenceArgs|undefined;\r\n  /**\r\n   * Manufacturer of this Package Item.\r\n   */\r\n  manufacturer?: fhir.ReferenceArgs[]|undefined;\r\n  /**\r\n   * Batch numbering.\r\n   */\r\n  batchIdentifier?: fhir.MedicinalProductPackagedBatchIdentifierArgs[]|undefined;\r\n  /**\r\n   * A packaging item, as a contained for medicine, possibly with other packaging items within.\r\n   */\r\n  packageItem: fhir.MedicinalProductPackagedPackageItemArgs[]|null;\r\n}\r\n\r\n/**\r\n * A medicinal product in a container or package.\r\n */\r\nexport class MedicinalProductPackaged extends fhir.DomainResource {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'MedicinalProductPackaged';\r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  public resourceType: \"MedicinalProductPackaged\";\r\n  /**\r\n   * Unique identifier.\r\n   */\r\n  public identifier?: fhir.Identifier[];\r\n  /**\r\n   * The product with this is a pack for.\r\n   */\r\n  public subject?: fhir.Reference[];\r\n  /**\r\n   * Textual description.\r\n   */\r\n  public description?: fhir.FhirString|undefined;\r\n  /**\r\n   * The legal status of supply of the medicinal product as classified by the regulator.\r\n   */\r\n  public legalStatusOfSupply?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Marketing information.\r\n   */\r\n  public marketingStatus?: fhir.MarketingStatus[];\r\n  /**\r\n   * Manufacturer of this Package Item.\r\n   */\r\n  public marketingAuthorization?: fhir.Reference|undefined;\r\n  /**\r\n   * Manufacturer of this Package Item.\r\n   */\r\n  public manufacturer?: fhir.Reference[];\r\n  /**\r\n   * Batch numbering.\r\n   */\r\n  public batchIdentifier?: fhir.MedicinalProductPackagedBatchIdentifier[];\r\n  /**\r\n   * A packaging item, as a contained for medicine, possibly with other packaging items within.\r\n   */\r\n  public packageItem: fhir.MedicinalProductPackagedPackageItem[];\r\n  /**\r\n   * Default constructor for MedicinalProductPackaged - initializes any required elements to null if a value is not provided.\r\n   */\r\n  constructor(source:Partial<MedicinalProductPackagedArgs> = {}, options:fhir.FhirConstructorOptions = {}) {\r\n    super(source, options);\r\n    this.resourceType = 'MedicinalProductPackaged';\r\n    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }\r\n    else { this.identifier = []; }\r\n    if (source['subject']) { this.subject = source.subject.map((x) => new fhir.Reference(x)); }\r\n    else { this.subject = []; }\r\n    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }\r\n    if (source['legalStatusOfSupply']) { this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply); }\r\n    if (source['marketingStatus']) { this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x)); }\r\n    else { this.marketingStatus = []; }\r\n    if (source['marketingAuthorization']) { this.marketingAuthorization = new fhir.Reference(source.marketingAuthorization); }\r\n    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }\r\n    else { this.manufacturer = []; }\r\n    if (source['batchIdentifier']) { this.batchIdentifier = source.batchIdentifier.map((x) => new fhir.MedicinalProductPackagedBatchIdentifier(x)); }\r\n    else { this.batchIdentifier = []; }\r\n    if (source['packageItem']) { this.packageItem = source.packageItem.map((x) => new fhir.MedicinalProductPackagedPackageItem(x)); }\r\n    else { this.packageItem = []; }\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if (!this['resourceType']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:\"MedicinalProductPackaged\" fhir: MedicinalProductPackaged.resourceType:\"MedicinalProductPackaged\"', }));\r\n    }\r\n    if (this[\"identifier\"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"subject\"]) { this.subject.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"description\"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }\r\n    if (this[\"legalStatusOfSupply\"]) { outcome.issue!.push(...this.legalStatusOfSupply.doModelValidation().issue!); }\r\n    if (this[\"marketingStatus\"]) { this.marketingStatus.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"marketingAuthorization\"]) { outcome.issue!.push(...this.marketingAuthorization.doModelValidation().issue!); }\r\n    if (this[\"manufacturer\"]) { this.manufacturer.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (this[\"batchIdentifier\"]) { this.batchIdentifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    if (!this['packageItem']) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property packageItem:fhir.MedicinalProductPackagedPackageItem[] fhir: MedicinalProductPackaged.packageItem:packageItem', }));\r\n    } else if (!Array.isArray(this.packageItem)) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue,  diagnostics: 'Found scalar in array property packageItem:fhir.MedicinalProductPackagedPackageItem[] fhir: MedicinalProductPackaged.packageItem:packageItem', }));\r\n    } else if (this.packageItem.length === 0) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property packageItem:fhir.MedicinalProductPackagedPackageItem[] fhir: MedicinalProductPackaged.packageItem:packageItem', }));\r\n    }\r\n    if (this[\"packageItem\"]) { this.packageItem.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.Identifier","fhir.OperationOutcomeIssue","fhir.BackboneElement","MedicinalProductPackagedPackageItem","fhir.CodeableConcept","fhir.Quantity","fhir.Reference","fhir.MedicinalProductPackagedPackageItem","fhir.ProdCharacteristic","fhir.ProductShelfLife","fhir.FhirString","fhir.MarketingStatus","fhir.MedicinalProductPackagedBatchIdentifier","fhir.DomainResource"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAyBA;;AAEG;AACH,IAAA,uCAAA,kBAAA,UAAA,MAAA,EAAA;IAA6D,SAAoB,CAAA,uCAAA,EAAA,MAAA,CAAA,CAAA;AAa/E;;AAEG;IACH,SAAY,uCAAA,CAAA,MAAgE,EAAE,OAAwC,EAAA;AAA1G,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAgE,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAtH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAIvB,IAAA,CAAA;AAHC,QAAA,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,cAAc,GAAG,IAAIA,UAAe,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAAE,SAAA;AAC9F,aAAA;AAAE,YAAA,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AAAE,SAAA;AACpC,QAAA,IAAI,MAAM,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,kBAAkB,GAAG,IAAIA,UAAe,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAAE,SAAA;;KAChH;AACD;;AAEG;AACa,IAAA,uCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;AAC3B,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIC,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,mIAAmI,GAAG,CAAC,CAAC,CAAC;AAC9R,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvG,QAAA,IAAI,IAAI,CAAC,oBAAoB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC/G,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAhCD;;AAEG;IACoB,uCAAa,CAAA,aAAA,GAAU,yCAAyC,CAAC;IA8B1F,OAAC,uCAAA,CAAA;AAAA,CAlCD,CAA6DC,eAAoB,CAkChF,EAAA;AAuDD;;AAEG;AACH,IAAA,mCAAA,kBAAA,UAAA,MAAA,EAAA;IAAyD,SAAoB,CAAAC,qCAAA,EAAA,MAAA,CAAA,CAAA;AAqD3E;;AAEG;IACH,SAAYA,qCAAA,CAAA,MAA4D,EAAE,OAAwC,EAAA;AAAtG,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAA4D,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAlH,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAwBvB,IAAA,CAAA;AAvBC,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;YAAE,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIH,UAAe,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAChG,aAAA;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAAE,SAAA;AAC9B,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAII,eAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAAE,SAAA;AACrE,aAAA;AAAE,YAAA,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAAE,SAAA;AAC1B,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAIC,QAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAAE,SAAA;AAC1E,aAAA;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAAE,SAAA;AAC9B,QAAA,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;YAAE,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAID,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC/F,aAAA;AAAE,YAAA,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AAAE,SAAA;AAC5B,QAAA,IAAI,MAAM,CAAC,mBAAmB,CAAC,EAAE;YAAE,KAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIA,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC1H,aAAA;AAAE,YAAA,KAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;AAAE,SAAA;AACrC,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIE,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACnF,aAAA;AAAE,YAAA,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAAE,SAAA;AAC1B,QAAA,IAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;YAAE,KAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIA,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACjH,aAAA;AAAE,YAAA,KAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAAE,SAAA;AACpC,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;YAAE,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIC,mCAAwC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC5H,aAAA;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AAAE,SAAA;AAC/B,QAAA,IAAI,MAAM,CAAC,yBAAyB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,uBAAuB,GAAG,IAAIC,kBAAuB,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;AAAE,SAAA;AACtI,QAAA,IAAI,MAAM,CAAC,sBAAsB,CAAC,EAAE;YAAE,KAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIJ,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACnI,aAAA;AAAE,YAAA,KAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;AAAE,SAAA;AACxC,QAAA,IAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;YAAE,KAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIK,gBAAqB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACxH,aAAA;AAAE,YAAA,KAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAAE,SAAA;AACpC,QAAA,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;YAAE,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIH,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACrG,aAAA;AAAE,YAAA,KAAI,CAAC,YAAY,GAAG,EAAE,CAAC;AAAE,SAAA;;KACjC;AACD;;AAEG;AACa,IAAAH,qCAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrH,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACjB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIF,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,qHAAqH,GAAG,CAAC,CAAC,CAAC;AAChR,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACnF,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACrB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,+GAA+G,GAAG,CAAC,CAAC,CAAC;AAC1Q,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AAC3F,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACjH,QAAA,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACnI,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC7G,QAAA,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACjI,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACvH,QAAA,IAAI,IAAI,CAAC,yBAAyB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACzH,QAAA,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACzI,QAAA,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACjI,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACzH,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAzGD;;AAEG;IACoBE,qCAAa,CAAA,aAAA,GAAU,qCAAqC,CAAC;IAuGtF,OAACA,qCAAA,CAAA;AAAA,CA3GD,CAAyDD,eAAoB,CA2G5E,EAAA;AA+CD;;AAEG;AACH,IAAA,wBAAA,kBAAA,UAAA,MAAA,EAAA;IAA8C,SAAmB,CAAA,wBAAA,EAAA,MAAA,CAAA,CAAA;AA6C/D;;AAEG;IACH,SAAY,wBAAA,CAAA,MAAiD,EAAE,OAAwC,EAAA;AAA3F,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAiD,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAwC,GAAA,EAAA,CAAA,EAAA;AAAvG,QAAA,IAAA,KAAA,GACE,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAiBvB,IAAA,CAAA;AAhBC,QAAA,KAAI,CAAC,YAAY,GAAG,0BAA0B,CAAC;AAC/C,QAAA,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;YAAE,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIF,UAAe,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAChG,aAAA;AAAE,YAAA,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAAE,SAAA;AAC9B,QAAA,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;YAAE,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIM,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACtF,aAAA;AAAE,YAAA,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAAE,SAAA;AAC3B,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,IAAII,UAAe,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,CAAC,CAAC;AAAE,SAAA;AACnG,QAAA,IAAI,MAAM,CAAC,qBAAqB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,mBAAmB,GAAG,IAAIN,eAAoB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAAE,SAAA;AACvH,QAAA,IAAI,MAAM,CAAC,iBAAiB,CAAC,EAAE;YAAE,KAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIO,eAAoB,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACpH,aAAA;AAAE,YAAA,KAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAAE,SAAA;AACnC,QAAA,IAAI,MAAM,CAAC,wBAAwB,CAAC,EAAE;AAAE,YAAA,KAAI,CAAC,sBAAsB,GAAG,IAAIL,SAAc,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAAE,SAAA;AAC1H,QAAA,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;YAAE,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIA,SAAc,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AACrG,aAAA;AAAE,YAAA,KAAI,CAAC,YAAY,GAAG,EAAE,CAAC;AAAE,SAAA;AAChC,QAAA,IAAI,MAAM,CAAC,iBAAiB,CAAC,EAAE;YAAE,KAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIM,uCAA4C,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC5I,aAAA;AAAE,YAAA,KAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAAE,SAAA;AACnC,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;YAAE,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,IAAIL,mCAAwC,CAAC,CAAC,CAAC,CAAA,EAAA,CAAC,CAAC;AAAE,SAAA;AAC5H,aAAA;AAAE,YAAA,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AAAE,SAAA;;KAChC;AACD;;AAEG;AACa,IAAA,wBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;AACzB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIN,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,0IAA0I,GAAG,CAAC,CAAC,CAAC;AACrS,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACrH,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/G,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjG,QAAA,IAAI,IAAI,CAAC,qBAAqB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACjH,QAAA,IAAI,IAAI,CAAC,iBAAiB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/H,QAAA,IAAI,IAAI,CAAC,wBAAwB,CAAC,EAAE;AAAE,YAAA,CAAA,KAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAA,KAAA,CAAA,EAAA,EAAI,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAE,SAAA;AACvH,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACzH,QAAA,IAAI,IAAI,CAAC,iBAAiB,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AAC/H,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;AACxB,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,yIAAyI,GAAG,CAAC,CAAC,CAAC;AACpS,SAAA;aAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;AAC3C,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,eAAe,EAAG,WAAW,EAAE,8IAA8I,GAAG,CAAC,CAAC,CAAC;AAClS,SAAA;AAAM,aAAA,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;AACxC,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,sBAAsB,EAAG,WAAW,EAAE,yIAAyI,GAAG,CAAC,CAAC,CAAC;AACpS,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE,YAAA,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;;AAAO,gBAAA,CAAA,EAAA,GAAA,OAAO,CAAC,KAAM,EAAC,IAAI,CAAI,KAAA,CAAA,EAAA,EAAA,CAAC,CAAC,iBAAiB,EAAE,CAAC,KAAM,CAAE,CAAA;AAAC,aAAC,CAAC,CAAA;AAAE,SAAA;AACvH,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AA3FD;;AAEG;IACoB,wBAAa,CAAA,aAAA,GAAU,0BAA0B,CAAC;IAyF3E,OAAC,wBAAA,CAAA;AAAA,CA7FD,CAA8CY,cAAmB,CA6FhE;;;;"}