/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { SortDirectionCodings } from '../fhirValueSets/SortDirectionCodings.js';
import { AllTypesCodings } from '../fhirValueSets/AllTypesCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { FhirElement } from './FhirElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { FhirString } from './FhirString.js';
import { FhirCanonical } from './FhirCanonical.js';
import { Coding } from './Coding.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Duration } from './Duration.js';
import { FhirCode } from './FhirCode.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';

// <auto-generated/>
/**
 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
 */
var DataRequirementCodeFilter = /** @class */ (function (_super) {
    __extends(DataRequirementCodeFilter, _super);
    /**
     * Default constructor for DataRequirementCodeFilter - initializes any required elements to null if a value is not provided.
     */
    function DataRequirementCodeFilter(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['path']) {
            _this.path = new FhirString({ value: source.path });
        }
        if (source['searchParam']) {
            _this.searchParam = new FhirString({ value: source.searchParam });
        }
        if (source['valueSet']) {
            _this.valueSet = new FhirCanonical({ value: source.valueSet });
        }
        if (source['code']) {
            _this.code = source.code.map(function (x) { return new Coding(x); });
        }
        else {
            _this.code = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DataRequirementCodeFilter.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["path"]) {
            (_a = outcome.issue).push.apply(_a, this.path.doModelValidation().issue);
        }
        if (this["searchParam"]) {
            (_b = outcome.issue).push.apply(_b, this.searchParam.doModelValidation().issue);
        }
        if (this["valueSet"]) {
            (_c = outcome.issue).push.apply(_c, this.valueSet.doModelValidation().issue);
        }
        if (this["code"]) {
            this.code.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DataRequirementCodeFilter._fts_dataType = 'DataRequirementCodeFilter';
    return DataRequirementCodeFilter;
}(FhirElement));
/**
 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
 */
var DataRequirementDateFilter = /** @class */ (function (_super) {
    __extends(DataRequirementDateFilter, _super);
    /**
     * Default constructor for DataRequirementDateFilter - initializes any required elements to null if a value is not provided.
     */
    function DataRequirementDateFilter(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['path']) {
            _this.path = new FhirString({ value: source.path });
        }
        if (source['searchParam']) {
            _this.searchParam = new FhirString({ value: source.searchParam });
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueDateTime']) {
            _this.value = new FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valuePeriod']) {
            _this.value = new Period(source.valuePeriod);
        }
        else if (source['valueDuration']) {
            _this.value = new Duration(source.valueDuration);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DataRequirementDateFilter.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["path"]) {
            (_a = outcome.issue).push.apply(_a, this.path.doModelValidation().issue);
        }
        if (this["searchParam"]) {
            (_b = outcome.issue).push.apply(_b, this.searchParam.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DataRequirementDateFilter._fts_dataType = 'DataRequirementDateFilter';
    /**
     * Internal flag to properly serialize choice-type element DataRequirement.dateFilter.value[x]
     */
    DataRequirementDateFilter._fts_valueIsChoice = true;
    return DataRequirementDateFilter;
}(FhirElement));
/**
 * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
 */
var DataRequirementSort = /** @class */ (function (_super) {
    __extends(DataRequirementSort, _super);
    /**
     * Default constructor for DataRequirementSort - initializes any required elements to null if a value is not provided.
     */
    function DataRequirementSort(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['path']) {
            _this.path = new FhirString({ value: source.path });
        }
        else {
            _this.path = null;
        }
        if (source['direction']) {
            _this.direction = source.direction;
        }
        else {
            _this.direction = null;
        }
        return _this;
    }
    /**
     * Required-bound Value Set for direction (DataRequirement.sort.direction)
     */
    DataRequirementSort.directionRequiredCoding = function () {
        return SortDirectionCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DataRequirementSort.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['path']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property path:fhir.FhirString fhir: DataRequirement.sort.path:string', }));
        }
        if (this["path"]) {
            (_a = outcome.issue).push.apply(_a, this.path.doModelValidation().issue);
        }
        if (!this['direction']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property direction:SortDirectionCodeType fhir: DataRequirement.sort.direction:code', }));
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DataRequirementSort._fts_dataType = 'DataRequirementSort';
    return DataRequirementSort;
}(FhirElement));
/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
var DataRequirement = /** @class */ (function (_super) {
    __extends(DataRequirement, _super);
    /**
     * Default constructor for DataRequirement - initializes any required elements to null if a value is not provided.
     */
    function DataRequirement(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new FhirCode({ value: source.type });
        }
        else {
            _this.type = null;
        }
        if (source['profile']) {
            _this.profile = source.profile.map(function (x) { return new FhirCanonical({ value: x }); });
        }
        else {
            _this.profile = [];
        }
        if (source['subject']) {
            _this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            _this.subject = new CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            _this.subject = new Reference(source.subjectReference);
        }
        if (source['mustSupport']) {
            _this.mustSupport = source.mustSupport.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.mustSupport = [];
        }
        if (source['codeFilter']) {
            _this.codeFilter = source.codeFilter.map(function (x) { return new DataRequirementCodeFilter(x); });
        }
        else {
            _this.codeFilter = [];
        }
        if (source['dateFilter']) {
            _this.dateFilter = source.dateFilter.map(function (x) { return new DataRequirementDateFilter(x); });
        }
        else {
            _this.dateFilter = [];
        }
        if (source['limit']) {
            _this.limit = new FhirPositiveInt({ value: source.limit });
        }
        if (source['sort']) {
            _this.sort = source.sort.map(function (x) { return new DataRequirementSort(x); });
        }
        else {
            _this.sort = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (DataRequirement.type)
     */
    DataRequirement.typeRequiredCoding = function () {
        return AllTypesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    DataRequirement.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.FhirCode fhir: DataRequirement.type:code', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["profile"]) {
            this.profile.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["mustSupport"]) {
            this.mustSupport.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["codeFilter"]) {
            this.codeFilter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dateFilter"]) {
            this.dateFilter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["limit"]) {
            (_b = outcome.issue).push.apply(_b, this.limit.doModelValidation().issue);
        }
        if (this["sort"]) {
            this.sort.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    DataRequirement._fts_dataType = 'DataRequirement';
    /**
     * Internal flag to properly serialize choice-type element DataRequirement.subject[x]
     */
    DataRequirement._fts_subjectIsChoice = true;
    return DataRequirement;
}(FhirElement));

export { DataRequirement, DataRequirementCodeFilter, DataRequirementDateFilter, DataRequirementSort };
//# sourceMappingURL=DataRequirement.js.map
