// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: DataRequirement
import * as fhir from '../fhir.js';
// @ts-ignore
import { SortDirectionCodings, } from '../fhirValueSets/SortDirectionCodings.js';
// @ts-ignore
import { AllTypesCodings, } from '../fhirValueSets/AllTypesCodings.js';
/**
 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
 */
export class DataRequirementCodeFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementCodeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['searchParam']) {
            this.searchParam = new fhir.FhirString({ value: source.searchParam });
        }
        if (source['valueSet']) {
            this.valueSet = new fhir.FhirCanonical({ value: source.valueSet });
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["path"]) {
            issues.push(...this.path.doModelValidation());
        }
        if (this["searchParam"]) {
            issues.push(...this.searchParam.doModelValidation());
        }
        if (this["valueSet"]) {
            issues.push(...this.valueSet.doModelValidation());
        }
        if (this["code"]) {
            this.code.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementCodeFilter._fts_dataType = 'DataRequirementCodeFilter';
/**
 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
 */
export class DataRequirementDateFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementDateFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['searchParam']) {
            this.searchParam = new fhir.FhirString({ value: source.searchParam });
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["path"]) {
            issues.push(...this.path.doModelValidation());
        }
        if (this["searchParam"]) {
            issues.push(...this.searchParam.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementDateFilter._fts_dataType = 'DataRequirementDateFilter';
/**
 * Internal flag to properly serialize choice-type element DataRequirement.dateFilter.value[x]
 */
DataRequirementDateFilter._fts_valueIsChoice = true;
/**
 * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
 */
export class DataRequirementSort extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementSort - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['direction']) {
            this.direction = source.direction;
        }
        else {
            this.direction = null;
        }
    }
    /**
     * Required-bound Value Set for direction (DataRequirement.sort.direction)
     */
    static directionRequiredCoding() {
        return SortDirectionCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['path']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property path:fhir.FhirString fhir: DataRequirement.sort.path:string', });
        }
        if (this["path"]) {
            issues.push(...this.path.doModelValidation());
        }
        if (!this['direction']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property direction:SortDirectionCodeType fhir: DataRequirement.sort.direction:code', });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementSort._fts_dataType = 'DataRequirementSort';
/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export class DataRequirement extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.profile = [];
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        if (source['mustSupport']) {
            this.mustSupport = source.mustSupport.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.mustSupport = [];
        }
        if (source['codeFilter']) {
            this.codeFilter = source.codeFilter.map((x) => new fhir.DataRequirementCodeFilter(x));
        }
        else {
            this.codeFilter = [];
        }
        if (source['dateFilter']) {
            this.dateFilter = source.dateFilter.map((x) => new fhir.DataRequirementDateFilter(x));
        }
        else {
            this.dateFilter = [];
        }
        if (source['limit']) {
            this.limit = new fhir.FhirPositiveInt({ value: source.limit });
        }
        if (source['sort']) {
            this.sort = source.sort.map((x) => new fhir.DataRequirementSort(x));
        }
        else {
            this.sort = [];
        }
    }
    /**
     * Required-bound Value Set for type (DataRequirement.type)
     */
    static typeRequiredCoding() {
        return AllTypesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode fhir: DataRequirement.type:code', });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["profile"]) {
            this.profile.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["mustSupport"]) {
            this.mustSupport.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["codeFilter"]) {
            this.codeFilter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["dateFilter"]) {
            this.dateFilter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["limit"]) {
            issues.push(...this.limit.doModelValidation());
        }
        if (this["sort"]) {
            this.sort.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirement._fts_dataType = 'DataRequirement';
/**
 * Internal flag to properly serialize choice-type element DataRequirement.subject[x]
 */
DataRequirement._fts_subjectIsChoice = true;
//# sourceMappingURL=data:application/json;base64,