// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: DataRequirement
import * as fhir from '../fhir.js';
// @ts-ignore
import { SortDirectionVsValidation } from '../fhirValueSets/SortDirectionVsValidation.js';
// @ts-ignore
import { AllTypesVsValidation } from '../fhirValueSets/AllTypesVsValidation.js';
/**
 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
 */
export class DataRequirementCodeFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementCodeFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['searchParam']) {
            this.searchParam = new fhir.FhirString({ value: source.searchParam });
        }
        if (source['_searchParam']) {
            if (this.searchParam) {
                this.searchParam.addExtendedProperties(source._searchParam);
            }
            else {
                this.searchParam = new fhir.FhirString(source._searchParam);
            }
        }
        if (source['valueSet']) {
            this.valueSet = new fhir.FhirCanonical({ value: source.valueSet });
        }
        if (source['_valueSet']) {
            if (this.valueSet) {
                this.valueSet.addExtendedProperties(source._valueSet);
            }
            else {
                this.valueSet = new fhir.FhirCanonical(source._valueSet);
            }
        }
        if (source['code']) {
            this.code = source.code.map((x) => new fhir.Coding(x));
        }
        else {
            this.code = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataRequirement.codeFilter';
        }
        iss.push(...this.vOS('path', exp));
        iss.push(...this.vOS('searchParam', exp));
        iss.push(...this.vOS('valueSet', exp));
        iss.push(...this.vOA('code', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementCodeFilter._fts_dataType = 'DataRequirementCodeFilter';
/**
 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
 */
export class DataRequirementDateFilter extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementDateFilter - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['searchParam']) {
            this.searchParam = new fhir.FhirString({ value: source.searchParam });
        }
        if (source['_searchParam']) {
            if (this.searchParam) {
                this.searchParam.addExtendedProperties(source._searchParam);
            }
            else {
                this.searchParam = new fhir.FhirString(source._searchParam);
            }
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueDateTime']) {
            this.value = new fhir.FhirDateTime({ value: source.valueDateTime });
        }
        else if (source['valuePeriod']) {
            this.value = new fhir.Period(source.valuePeriod);
        }
        else if (source['valueDuration']) {
            this.value = new fhir.Duration(source.valueDuration);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataRequirement.dateFilter';
        }
        iss.push(...this.vOS('path', exp));
        iss.push(...this.vOS('searchParam', exp));
        iss.push(...this.vOS('value', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementDateFilter._fts_dataType = 'DataRequirementDateFilter';
/**
 * Internal flag to properly serialize choice-type element DataRequirement.dateFilter.value[x]
 */
DataRequirementDateFilter._fts_valueIsChoice = true;
/**
 * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
 */
export class DataRequirementSort extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirementSort - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['path']) {
            this.path = new fhir.FhirString({ value: source.path });
        }
        else {
            this.path = null;
        }
        if (source['_path']) {
            if (this.path) {
                this.path.addExtendedProperties(source._path);
            }
            else {
                this.path = new fhir.FhirString(source._path);
            }
        }
        if (source['direction']) {
            this.direction = new fhir.FhirCode({ value: source.direction });
        }
        else {
            this.direction = null;
        }
        if (source['_direction']) {
            if (this.direction) {
                this.direction.addExtendedProperties(source._direction);
            }
            else {
                this.direction = new fhir.FhirCode(source._direction);
            }
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataRequirement.sort';
        }
        iss.push(...this.vRS('path', exp));
        iss.push(...this.vRSV('direction', exp, 'SortDirection', SortDirectionVsValidation, 'r'));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirementSort._fts_dataType = 'DataRequirementSort';
/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export class DataRequirement extends fhir.FhirElement {
    /**
     * Default constructor for DataRequirement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        else {
            this.type = null;
        }
        if (source['_type']) {
            if (this.type) {
                this.type.addExtendedProperties(source._type);
            }
            else {
                this.type = new fhir.FhirCode(source._type);
            }
        }
        if (source['profile']) {
            this.profile = source.profile.map((x) => new fhir.FhirCanonical({ value: x }));
        }
        else {
            this.profile = [];
        }
        if (source['_profile']) {
            source._profile.forEach((x, i) => {
                if (this.profile.length >= i) {
                    if (x) {
                        this.profile[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.profile.push(new fhir.FhirCanonical(x));
                    }
                }
            });
        }
        if (source['subject']) {
            this.subject = source.subject;
        }
        else if (source['subjectCodeableConcept']) {
            this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept);
        }
        else if (source['subjectReference']) {
            this.subject = new fhir.Reference(source.subjectReference);
        }
        if (source['mustSupport']) {
            this.mustSupport = source.mustSupport.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.mustSupport = [];
        }
        if (source['_mustSupport']) {
            source._mustSupport.forEach((x, i) => {
                if (this.mustSupport.length >= i) {
                    if (x) {
                        this.mustSupport[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.mustSupport.push(new fhir.FhirString(x));
                    }
                }
            });
        }
        if (source['codeFilter']) {
            this.codeFilter = source.codeFilter.map((x) => new fhir.DataRequirementCodeFilter(x));
        }
        else {
            this.codeFilter = [];
        }
        if (source['dateFilter']) {
            this.dateFilter = source.dateFilter.map((x) => new fhir.DataRequirementDateFilter(x));
        }
        else {
            this.dateFilter = [];
        }
        if (source['limit']) {
            this.limit = new fhir.FhirPositiveInt({ value: source.limit });
        }
        if (source['_limit']) {
            if (this.limit) {
                this.limit.addExtendedProperties(source._limit);
            }
            else {
                this.limit = new fhir.FhirPositiveInt(source._limit);
            }
        }
        if (source['sort']) {
            this.sort = source.sort.map((x) => new fhir.DataRequirementSort(x));
        }
        else {
            this.sort = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'DataRequirement';
        }
        iss.push(...this.vRSV('type', exp, 'AllTypes', AllTypesVsValidation, 'r'));
        iss.push(...this.vOA('profile', exp));
        iss.push(...this.vOS('subject', exp));
        iss.push(...this.vOA('mustSupport', exp));
        iss.push(...this.vOA('codeFilter', exp));
        iss.push(...this.vOA('dateFilter', exp));
        iss.push(...this.vOS('limit', exp));
        iss.push(...this.vOA('sort', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
DataRequirement._fts_dataType = 'DataRequirement';
/**
 * Internal flag to properly serialize choice-type element DataRequirement.subject[x]
 */
DataRequirement._fts_subjectIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YVJlcXVpcmVtZW50LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpci9EYXRhUmVxdWlyZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsb0NBQW9DO0FBRXBDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBSW5DLGFBQWE7QUFDYixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUcxRixhQUFhO0FBQ2IsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFtQ2hGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHlCQUEwQixTQUFRLElBQUksQ0FBQyxXQUFXO0lBcUI3RDs7T0FFRztJQUNILFlBQVksU0FBZ0QsRUFBRSxFQUFFLFVBQXNDLEVBQUU7UUFDdEcsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDOUUsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbkIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLEtBQU0sQ0FBQyxDQUFDO2FBQUU7aUJBQzdEO2dCQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFxQyxDQUFDLENBQUM7YUFBRTtTQUN4RjtRQUNELElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLElB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RUFBQyxVQUFVLEVBQUMsb0JBQW9CLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O0FBbEdEOztHQUVHO0FBQzZCLDZCQUFhLEdBQVUsaUJBQWlCLENBQUM7QUFhekU7O0dBRUc7QUFDdUIsb0NBQW9CLEdBQVEsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIENvbXBsZXhUeXBlOiBEYXRhUmVxdWlyZW1lbnRcclxuXHJcbmltcG9ydCAqIGFzIGZoaXIgZnJvbSAnLi4vZmhpci5qcyc7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNvcnREaXJlY3Rpb25Db2RlcywgIFNvcnREaXJlY3Rpb25Db2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU29ydERpcmVjdGlvbkNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTb3J0RGlyZWN0aW9uVnNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Tb3J0RGlyZWN0aW9uVnNWYWxpZGF0aW9uLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBBbGxUeXBlc0NvZGVzLCAgQWxsVHlwZXNDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvQWxsVHlwZXNDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgQWxsVHlwZXNWc1ZhbGlkYXRpb24gfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL0FsbFR5cGVzVnNWYWxpZGF0aW9uLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIERhdGFSZXF1aXJlbWVudENvZGVGaWx0ZXIgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVJlcXVpcmVtZW50Q29kZUZpbHRlckFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBhdGggYXR0cmlidXRlIGNvbnRhaW5zIGEgW1NpbXBsZSBGSElSUGF0aCBTdWJzZXRdKGZoaXJwYXRoLmh0bWwjc2ltcGxlKSB0aGF0IGFsbG93cyBwYXRoIHRyYXZlcnNhbCwgYnV0IG5vdCBjYWxjdWxhdGlvbi5cclxuICAgKi9cclxuICBwYXRoPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERhdGFSZXF1aXJlbWVudC5jb2RlRmlsdGVyLnBhdGhcclxuICAgKi9cclxuICBfcGF0aD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogQSB0b2tlbiBwYXJhbWV0ZXIgdGhhdCByZWZlcnMgdG8gYSBzZWFyY2ggcGFyYW1ldGVyIGRlZmluZWQgb24gdGhlIHNwZWNpZmllZCB0eXBlIG9mIHRoZSBEYXRhUmVxdWlyZW1lbnQsIGFuZCB3aGljaCBzZWFyY2hlcyBvbiBlbGVtZW50cyBvZiB0eXBlIGNvZGUsIENvZGluZywgb3IgQ29kZWFibGVDb25jZXB0LlxyXG4gICAqL1xyXG4gIHNlYXJjaFBhcmFtPzogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERhdGFSZXF1aXJlbWVudC5jb2RlRmlsdGVyLnNlYXJjaFBhcmFtXHJcbiAgICovXHJcbiAgX3NlYXJjaFBhcmFtPzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWVzZXQgZm9yIHRoZSBjb2RlIGZpbHRlci4gVGhlIHZhbHVlU2V0IGFuZCBjb2RlIGVsZW1lbnRzIGFyZSBhZGRpdGl2ZS4gSWYgdmFsdWVTZXQgaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyBmb3Igd2hpY2ggdGhlIHZhbHVlIG9mIHRoZSBjb2RlLXZhbHVlZCBlbGVtZW50IHNwZWNpZmllZCBpbiB0aGUgcGF0aCBpcyBhIG1lbWJlciBvZiB0aGUgc3BlY2lmaWVkIHZhbHVlc2V0LlxyXG4gICAqL1xyXG4gIHZhbHVlU2V0PzogZmhpci5GaGlyQ2Fub25pY2FsfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERhdGFSZXF1aXJlbWVudC5jb2RlRmlsdGVyLnZhbHVlU2V0XHJcbiAgICovXHJcbiAgX3ZhbHVlU2V0PzpmaGlyLkZoaXJFbGVtZW50QXJncztcclxuICAvKipcclxuICAgKiBUaGUgY29kZXMgZm9yIHRoZSBjb2RlIGZpbHRlci4gSWYgdmFsdWVzIGFyZSBnaXZlbiwgdGhlIGZpbHRlciB3aWxsIHJldHVybiBvbmx5IHRob3NlIGRhdGEgaXRlbXMgZm9yIHdoaWNoIHRoZSBjb2RlLXZhbHVlZCBhdHRyaWJ1dGUgc3BlY2lmaWVkIGJ5IHRoZSBwYXRoIGhhcyBhIHZhbHVlIHRoYXQgaXMgb25lIG9mIHRoZSBzcGVjaWZpZWQgY29kZXMuIElmIGNvZGVzIGFyZSBzcGVjaWZpZWQgaW4gYWRkaXRpb24gdG8gYSB2YWx1ZSBzZXQsIHRoZSBmaWx0ZXIgcmV0dXJucyBpdGVtcyBtYXRjaGluZyBhIGNvZGUgaW4gdGhlIHZhbHVlIHNldCBvciBvbmUgb2YgdGhlIHNwZWNpZmllZCBjb2Rlcy5cclxuICAgKi9cclxuICBjb2RlPzogZmhpci5Db2RpbmdBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQ29kZSBmaWx0ZXJzIHNwZWNpZnkgYWRkaXRpb25hbCBjb25zdHJhaW50cyBvbiB0aGUgZGF0YSwgc3BlY2lmeWluZyB0aGUgdmFsdWUgc2V0IG9mIGludGVyZXN0IGZvciBhIHBhcnRpY3VsYXIgZWxlbWVudCBvZiB0aGUgZGF0YS4gRWFjaCBjb2RlIGZpbHRlciBkZWZpbmVzIGFuIGFkZGl0aW9uYWwgY29uc3RyYWludCBvbiB0aGUgZGF0YSwgaS5lLiBjb2RlIGZpbHRlcnMgYXJlIEFORCdlZCwgbm90IE9SJ2VkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERhdGFSZXF1aXJlbWVudENvZGVGaWx0ZXIgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0RhdGFSZXF1aXJlbWVudENvZGVGaWx0ZXInO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwYXRoIGF0dHJpYnV0ZSBjb250YWlucyBhIFtTaW1wbGUgRkhJUlBhdGggU3Vic2V0XShmaGlycGF0aC5odG1sI3NpbXBsZSkgdGhhdCBhbGxvd3MgcGF0aCB0cmF2ZXJzYWwsIGJ1dCBub3QgY2FsY3VsYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHBhdGg/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgdG9rZW4gcGFyYW1ldGVyIHRoYXQgcmVmZXJzIHRvIGEgc2VhcmNoIHBhcmFtZXRlciBkZWZpbmVkIG9uIHRoZSBzcGVjaWZpZWQgdHlwZSBvZiB0aGUgRGF0YVJlcXVpcmVtZW50LCBhbmQgd2hpY2ggc2VhcmNoZXMgb24gZWxlbWVudHMgb2YgdHlwZSBjb2RlLCBDb2RpbmcsIG9yIENvZGVhYmxlQ29uY2VwdC5cclxuICAgKi9cclxuICBwdWJsaWMgc2VhcmNoUGFyYW0/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZXNldCBmb3IgdGhlIGNvZGUgZmlsdGVyLiBUaGUgdmFsdWVTZXQgYW5kIGNvZGUgZWxlbWVudHMgYXJlIGFkZGl0aXZlLiBJZiB2YWx1ZVNldCBpcyBzcGVjaWZpZWQsIHRoZSBmaWx0ZXIgd2lsbCByZXR1cm4gb25seSB0aG9zZSBkYXRhIGl0ZW1zIGZvciB3aGljaCB0aGUgdmFsdWUgb2YgdGhlIGNvZGUtdmFsdWVkIGVsZW1lbnQgc3BlY2lmaWVkIGluIHRoZSBwYXRoIGlzIGEgbWVtYmVyIG9mIHRoZSBzcGVjaWZpZWQgdmFsdWVzZXQuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlU2V0PzogZmhpci5GaGlyQ2Fub25pY2FsfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgY29kZXMgZm9yIHRoZSBjb2RlIGZpbHRlci4gSWYgdmFsdWVzIGFyZSBnaXZlbiwgdGhlIGZpbHRlciB3aWxsIHJldHVybiBvbmx5IHRob3NlIGRhdGEgaXRlbXMgZm9yIHdoaWNoIHRoZSBjb2RlLXZhbHVlZCBhdHRyaWJ1dGUgc3BlY2lmaWVkIGJ5IHRoZSBwYXRoIGhhcyBhIHZhbHVlIHRoYXQgaXMgb25lIG9mIHRoZSBzcGVjaWZpZWQgY29kZXMuIElmIGNvZGVzIGFyZSBzcGVjaWZpZWQgaW4gYWRkaXRpb24gdG8gYSB2YWx1ZSBzZXQsIHRoZSBmaWx0ZXIgcmV0dXJucyBpdGVtcyBtYXRjaGluZyBhIGNvZGUgaW4gdGhlIHZhbHVlIHNldCBvciBvbmUgb2YgdGhlIHNwZWNpZmllZCBjb2Rlcy5cclxuICAgKi9cclxuICBwdWJsaWMgY29kZTogZmhpci5Db2RpbmdbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBEYXRhUmVxdWlyZW1lbnRDb2RlRmlsdGVyIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8RGF0YVJlcXVpcmVtZW50Q29kZUZpbHRlckFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydwYXRoJ10pIHsgdGhpcy5wYXRoID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5wYXRofSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19wYXRoJ10pIHtcclxuICAgICAgaWYgKHRoaXMucGF0aCkgeyB0aGlzLnBhdGguYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fcGF0aCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnBhdGggPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fcGF0aCBhcyBQYXJ0aWFsPGZoaXIuRmhpclN0cmluZ0FyZ3M+KTsgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnc2VhcmNoUGFyYW0nXSkgeyB0aGlzLnNlYXJjaFBhcmFtID0gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHNvdXJjZS5zZWFyY2hQYXJhbX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfc2VhcmNoUGFyYW0nXSkge1xyXG4gICAgICBpZiAodGhpcy5zZWFyY2hQYXJhbSkgeyB0aGlzLnNlYXJjaFBhcmFtLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3NlYXJjaFBhcmFtISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuc2VhcmNoUGFyYW0gPSBuZXcgZmhpci5GaGlyU3RyaW5nKHNvdXJjZS5fc2VhcmNoUGFyYW0gYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3ZhbHVlU2V0J10pIHsgdGhpcy52YWx1ZVNldCA9IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoe3ZhbHVlOiBzb3VyY2UudmFsdWVTZXR9KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3ZhbHVlU2V0J10pIHtcclxuICAgICAgaWYgKHRoaXMudmFsdWVTZXQpIHsgdGhpcy52YWx1ZVNldC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl92YWx1ZVNldCEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnZhbHVlU2V0ID0gbmV3IGZoaXIuRmhpckNhbm9uaWNhbChzb3VyY2UuX3ZhbHVlU2V0IGFzIFBhcnRpYWw8Zmhpci5GaGlyQ2Fub25pY2FsQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydjb2RlJ10pIHsgdGhpcy5jb2RlID0gc291cmNlLmNvZGUubWFwKCh4KSA9PiBuZXcgZmhpci5Db2RpbmcoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5jb2RlID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdEYXRhUmVxdWlyZW1lbnQuY29kZUZpbHRlcicgfVxyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3BhdGgnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ3NlYXJjaFBhcmFtJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCd2YWx1ZVNldCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnY29kZScsZXhwKSk7XHJcbiAgICByZXR1cm4gaXNzO1xyXG4gIH1cclxufVxyXG4vKipcclxuICogVmFsaWQgYXJndW1lbnRzIGZvciB0aGUgRGF0YVJlcXVpcmVtZW50RGF0ZUZpbHRlciB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEYXRhUmVxdWlyZW1lbnREYXRlRmlsdGVyQXJncyBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBUaGUgcGF0aCBhdHRyaWJ1dGUgY29udGFpbnMgYSBbU2ltcGxlIEZISVIgU3Vic2V0XShmaGlycGF0aC5odG1sI3NpbXBsZSkgdGhhdCBhbGxvd3MgcGF0aCB0cmF2ZXJzYWwsIGJ1dCBub3QgY2FsY3VsYXRpb24uXHJcbiAgICovXHJcbiAgcGF0aD86IGZoaXIuRmhpclN0cmluZ3xzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEYXRhUmVxdWlyZW1lbnQuZGF0ZUZpbHRlci5wYXRoXHJcbiAgICovXHJcbiAgX3BhdGg/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIEEgZGF0ZSBwYXJhbWV0ZXIgdGhhdCByZWZlcnMgdG8gYSBzZWFyY2ggcGFyYW1ldGVyIGRlZmluZWQgb24gdGhlIHNwZWNpZmllZCB0eXBlIG9mIHRoZSBEYXRhUmVxdWlyZW1lbnQsIGFuZCB3aGljaCBzZWFyY2hlcyBvbiBlbGVtZW50cyBvZiB0eXBlIGRhdGUsIGRhdGVUaW1lLCBQZXJpb2QsIFNjaGVkdWxlLCBvciBUaW1pbmcuXHJcbiAgICovXHJcbiAgc2VhcmNoUGFyYW0/OiBmaGlyLkZoaXJTdHJpbmd8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGF0YVJlcXVpcmVtZW50LmRhdGVGaWx0ZXIuc2VhcmNoUGFyYW1cclxuICAgKi9cclxuICBfc2VhcmNoUGFyYW0/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgZmlsdGVyLiBJZiBwZXJpb2QgaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIHRoZSBib3VuZHMgZGV0ZXJtaW5lZCBieSB0aGUgUGVyaW9kLCBpbmNsdXNpdmUgb2YgdGhlIHBlcmlvZCBib3VuZGFyaWVzLiBJZiBkYXRlVGltZSBpcyBzcGVjaWZpZWQsIHRoZSBmaWx0ZXIgd2lsbCByZXR1cm4gb25seSB0aG9zZSBkYXRhIGl0ZW1zIHRoYXQgYXJlIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZVRpbWUuIElmIGEgRHVyYXRpb24gaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIER1cmF0aW9uIGJlZm9yZSBub3cuXHJcbiAgICovXHJcbiAgdmFsdWU/OiBmaGlyLkZoaXJEYXRlVGltZXxmaGlyLlBlcmlvZHxmaGlyLkR1cmF0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGZpbHRlci4gSWYgcGVyaW9kIGlzIHNwZWNpZmllZCwgdGhlIGZpbHRlciB3aWxsIHJldHVybiBvbmx5IHRob3NlIGRhdGEgaXRlbXMgdGhhdCBmYWxsIHdpdGhpbiB0aGUgYm91bmRzIGRldGVybWluZWQgYnkgdGhlIFBlcmlvZCwgaW5jbHVzaXZlIG9mIHRoZSBwZXJpb2QgYm91bmRhcmllcy4gSWYgZGF0ZVRpbWUgaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGFyZSBlcXVhbCB0byB0aGUgc3BlY2lmaWVkIGRhdGVUaW1lLiBJZiBhIER1cmF0aW9uIGlzIHNwZWNpZmllZCwgdGhlIGZpbHRlciB3aWxsIHJldHVybiBvbmx5IHRob3NlIGRhdGEgaXRlbXMgdGhhdCBmYWxsIHdpdGhpbiBEdXJhdGlvbiBiZWZvcmUgbm93LlxyXG4gICAqL1xyXG4gIHZhbHVlRGF0ZVRpbWU/OiBmaGlyLkZoaXJEYXRlVGltZXxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgZmlsdGVyLiBJZiBwZXJpb2QgaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIHRoZSBib3VuZHMgZGV0ZXJtaW5lZCBieSB0aGUgUGVyaW9kLCBpbmNsdXNpdmUgb2YgdGhlIHBlcmlvZCBib3VuZGFyaWVzLiBJZiBkYXRlVGltZSBpcyBzcGVjaWZpZWQsIHRoZSBmaWx0ZXIgd2lsbCByZXR1cm4gb25seSB0aG9zZSBkYXRhIGl0ZW1zIHRoYXQgYXJlIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZVRpbWUuIElmIGEgRHVyYXRpb24gaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIER1cmF0aW9uIGJlZm9yZSBub3cuXHJcbiAgICovXHJcbiAgdmFsdWVQZXJpb2Q/OiBmaGlyLlBlcmlvZEFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgZmlsdGVyLiBJZiBwZXJpb2QgaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIHRoZSBib3VuZHMgZGV0ZXJtaW5lZCBieSB0aGUgUGVyaW9kLCBpbmNsdXNpdmUgb2YgdGhlIHBlcmlvZCBib3VuZGFyaWVzLiBJZiBkYXRlVGltZSBpcyBzcGVjaWZpZWQsIHRoZSBmaWx0ZXIgd2lsbCByZXR1cm4gb25seSB0aG9zZSBkYXRhIGl0ZW1zIHRoYXQgYXJlIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZVRpbWUuIElmIGEgRHVyYXRpb24gaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIER1cmF0aW9uIGJlZm9yZSBub3cuXHJcbiAgICovXHJcbiAgdmFsdWVEdXJhdGlvbj86IGZoaXIuRHVyYXRpb25BcmdzfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERhdGUgZmlsdGVycyBzcGVjaWZ5IGFkZGl0aW9uYWwgY29uc3RyYWludHMgb24gdGhlIGRhdGEgaW4gdGVybXMgb2YgdGhlIGFwcGxpY2FibGUgZGF0ZSByYW5nZSBmb3Igc3BlY2lmaWMgZWxlbWVudHMuIEVhY2ggZGF0ZSBmaWx0ZXIgc3BlY2lmaWVzIGFuIGFkZGl0aW9uYWwgY29uc3RyYWludCBvbiB0aGUgZGF0YSwgaS5lLiBkYXRlIGZpbHRlcnMgYXJlIEFORCdlZCwgbm90IE9SJ2VkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERhdGFSZXF1aXJlbWVudERhdGVGaWx0ZXIgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0RhdGFSZXF1aXJlbWVudERhdGVGaWx0ZXInO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwYXRoIGF0dHJpYnV0ZSBjb250YWlucyBhIFtTaW1wbGUgRkhJUiBTdWJzZXRdKGZoaXJwYXRoLmh0bWwjc2ltcGxlKSB0aGF0IGFsbG93cyBwYXRoIHRyYXZlcnNhbCwgYnV0IG5vdCBjYWxjdWxhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcGF0aD86IGZoaXIuRmhpclN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBkYXRlIHBhcmFtZXRlciB0aGF0IHJlZmVycyB0byBhIHNlYXJjaCBwYXJhbWV0ZXIgZGVmaW5lZCBvbiB0aGUgc3BlY2lmaWVkIHR5cGUgb2YgdGhlIERhdGFSZXF1aXJlbWVudCwgYW5kIHdoaWNoIHNlYXJjaGVzIG9uIGVsZW1lbnRzIG9mIHR5cGUgZGF0ZSwgZGF0ZVRpbWUsIFBlcmlvZCwgU2NoZWR1bGUsIG9yIFRpbWluZy5cclxuICAgKi9cclxuICBwdWJsaWMgc2VhcmNoUGFyYW0/OiBmaGlyLkZoaXJTdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgZmlsdGVyLiBJZiBwZXJpb2QgaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIHRoZSBib3VuZHMgZGV0ZXJtaW5lZCBieSB0aGUgUGVyaW9kLCBpbmNsdXNpdmUgb2YgdGhlIHBlcmlvZCBib3VuZGFyaWVzLiBJZiBkYXRlVGltZSBpcyBzcGVjaWZpZWQsIHRoZSBmaWx0ZXIgd2lsbCByZXR1cm4gb25seSB0aG9zZSBkYXRhIGl0ZW1zIHRoYXQgYXJlIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZVRpbWUuIElmIGEgRHVyYXRpb24gaXMgc3BlY2lmaWVkLCB0aGUgZmlsdGVyIHdpbGwgcmV0dXJuIG9ubHkgdGhvc2UgZGF0YSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIER1cmF0aW9uIGJlZm9yZSBub3cuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlPzogKGZoaXIuRmhpckRhdGVUaW1lfGZoaXIuUGVyaW9kfGZoaXIuRHVyYXRpb24pfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IERhdGFSZXF1aXJlbWVudC5kYXRlRmlsdGVyLnZhbHVlW3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX3ZhbHVlSXNDaG9pY2U6dHJ1ZSA9IHRydWU7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRGF0YVJlcXVpcmVtZW50RGF0ZUZpbHRlciAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPERhdGFSZXF1aXJlbWVudERhdGVGaWx0ZXJBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncGF0aCddKSB7IHRoaXMucGF0aCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGF0aH0pOyB9XHJcbiAgICBpZiAoc291cmNlWydfcGF0aCddKSB7XHJcbiAgICAgIGlmICh0aGlzLnBhdGgpIHsgdGhpcy5wYXRoLmFkZEV4dGVuZGVkUHJvcGVydGllcyhzb3VyY2UuX3BhdGghKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5wYXRoID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3BhdGggYXMgUGFydGlhbDxmaGlyLkZoaXJTdHJpbmdBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NlYXJjaFBhcmFtJ10pIHsgdGhpcy5zZWFyY2hQYXJhbSA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2Uuc2VhcmNoUGFyYW19KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3NlYXJjaFBhcmFtJ10pIHtcclxuICAgICAgaWYgKHRoaXMuc2VhcmNoUGFyYW0pIHsgdGhpcy5zZWFyY2hQYXJhbS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9zZWFyY2hQYXJhbSEpOyB9XHJcbiAgICAgIGVsc2UgeyB0aGlzLnNlYXJjaFBhcmFtID0gbmV3IGZoaXIuRmhpclN0cmluZyhzb3VyY2UuX3NlYXJjaFBhcmFtIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWyd2YWx1ZSddKSB7IHRoaXMudmFsdWUgPSBzb3VyY2UudmFsdWU7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsndmFsdWVEYXRlVGltZSddKSB7IHRoaXMudmFsdWUgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2UudmFsdWVEYXRlVGltZX0pOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlUGVyaW9kJ10pIHsgdGhpcy52YWx1ZSA9IG5ldyBmaGlyLlBlcmlvZChzb3VyY2UudmFsdWVQZXJpb2QpOyB9XHJcbiAgICBlbHNlIGlmIChzb3VyY2VbJ3ZhbHVlRHVyYXRpb24nXSkgeyB0aGlzLnZhbHVlID0gbmV3IGZoaXIuRHVyYXRpb24oc291cmNlLnZhbHVlRHVyYXRpb24pOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbihleHA6c3RyaW5nID0gJycpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKGV4cCk7XHJcbiAgICBpZiAoZXhwID09PSAnJykgeyBleHAgPSAnRGF0YVJlcXVpcmVtZW50LmRhdGVGaWx0ZXInIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdwYXRoJyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9TKCdzZWFyY2hQYXJhbScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygndmFsdWUnLGV4cCkpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIERhdGFSZXF1aXJlbWVudFNvcnQgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVJlcXVpcmVtZW50U29ydEFyZ3MgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50QXJncyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGF0dHJpYnV0ZSBvZiB0aGUgc29ydC4gVGhlIHNwZWNpZmllZCBwYXRoIG11c3QgYmUgcmVzb2x2YWJsZSBmcm9tIHRoZSB0eXBlIG9mIHRoZSByZXF1aXJlZCBkYXRhLiBUaGUgcGF0aCBpcyBhbGxvd2VkIHRvIGNvbnRhaW4gcXVhbGlmaWVycyAoLikgdG8gdHJhdmVyc2Ugc3ViLWVsZW1lbnRzLCBhcyB3ZWxsIGFzIGluZGV4ZXJzIChbeF0pIHRvIHRyYXZlcnNlIG11bHRpcGxlLWNhcmRpbmFsaXR5IHN1Yi1lbGVtZW50cy4gTm90ZSB0aGF0IHRoZSBpbmRleCBtdXN0IGJlIGFuIGludGVnZXIgY29uc3RhbnQuXHJcbiAgICovXHJcbiAgcGF0aDogZmhpci5GaGlyU3RyaW5nfHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERhdGFSZXF1aXJlbWVudC5zb3J0LnBhdGhcclxuICAgKi9cclxuICBfcGF0aD86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRpcmVjdGlvbiBvZiB0aGUgc29ydCwgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcuXHJcbiAgICovXHJcbiAgZGlyZWN0aW9uOiBmaGlyLkZoaXJDb2RlPFNvcnREaXJlY3Rpb25Db2RlVHlwZT58c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGF0YVJlcXVpcmVtZW50LnNvcnQuZGlyZWN0aW9uXHJcbiAgICovXHJcbiAgX2RpcmVjdGlvbj86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGVsZW1lbnQgY2FuIGJlIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCB0aGUgc29ydCBlbGVtZW50IHRvIHNwZWNpZnkgcXVvdGEgcmVxdWlyZW1lbnRzIHN1Y2ggYXMgXCJ0aGUgbW9zdCByZWNlbnQgNVwiIG9yIFwidGhlIGhpZ2hlc3QgNVwiLiBXaGVuIG11bHRpcGxlIHNvcnRzIGFyZSBzcGVjaWZpZWQsIHRoZXkgYXJlIGFwcGxpZWQgaW4gdGhlIG9yZGVyIHRoZXkgYXBwZWFyIGluIHRoZSByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRhUmVxdWlyZW1lbnRTb3J0IGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudCB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdEYXRhUmVxdWlyZW1lbnRTb3J0JztcclxuICAvKipcclxuICAgKiBUaGUgYXR0cmlidXRlIG9mIHRoZSBzb3J0LiBUaGUgc3BlY2lmaWVkIHBhdGggbXVzdCBiZSByZXNvbHZhYmxlIGZyb20gdGhlIHR5cGUgb2YgdGhlIHJlcXVpcmVkIGRhdGEuIFRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gY29udGFpbiBxdWFsaWZpZXJzICguKSB0byB0cmF2ZXJzZSBzdWItZWxlbWVudHMsIGFzIHdlbGwgYXMgaW5kZXhlcnMgKFt4XSkgdG8gdHJhdmVyc2UgbXVsdGlwbGUtY2FyZGluYWxpdHkgc3ViLWVsZW1lbnRzLiBOb3RlIHRoYXQgdGhlIGluZGV4IG11c3QgYmUgYW4gaW50ZWdlciBjb25zdGFudC5cclxuICAgKi9cclxuICBwdWJsaWMgcGF0aDogZmhpci5GaGlyU3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRpcmVjdGlvbiBvZiB0aGUgc29ydCwgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIGRpcmVjdGlvbjogZmhpci5GaGlyQ29kZTxTb3J0RGlyZWN0aW9uQ29kZVR5cGU+fG51bGw7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciBmb3IgRGF0YVJlcXVpcmVtZW50U29ydCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPERhdGFSZXF1aXJlbWVudFNvcnRBcmdzPiA9IHt9LCBvcHRpb25zOmZoaXIuRmhpckNvbnN0cnVjdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBzdXBlcihzb3VyY2UsIG9wdGlvbnMpO1xyXG4gICAgaWYgKHNvdXJjZVsncGF0aCddKSB7IHRoaXMucGF0aCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoe3ZhbHVlOiBzb3VyY2UucGF0aH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wYXRoID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3BhdGgnXSkge1xyXG4gICAgICBpZiAodGhpcy5wYXRoKSB7IHRoaXMucGF0aC5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl9wYXRoISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMucGF0aCA9IG5ldyBmaGlyLkZoaXJTdHJpbmcoc291cmNlLl9wYXRoIGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pOyB9XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlWydkaXJlY3Rpb24nXSkgeyB0aGlzLmRpcmVjdGlvbiA9IG5ldyBmaGlyLkZoaXJDb2RlPFNvcnREaXJlY3Rpb25Db2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2UuZGlyZWN0aW9ufSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRpcmVjdGlvbiA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ19kaXJlY3Rpb24nXSkge1xyXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24pIHsgdGhpcy5kaXJlY3Rpb24uYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fZGlyZWN0aW9uISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMuZGlyZWN0aW9uID0gbmV3IGZoaXIuRmhpckNvZGU8U29ydERpcmVjdGlvbkNvZGVUeXBlPihzb3VyY2UuX2RpcmVjdGlvbiBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGU+KTsgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oZXhwOnN0cmluZyA9ICcnKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbihleHApO1xyXG4gICAgaWYgKGV4cCA9PT0gJycpIHsgZXhwID0gJ0RhdGFSZXF1aXJlbWVudC5zb3J0JyB9XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSUygncGF0aCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZSU1YoJ2RpcmVjdGlvbicsZXhwLCdTb3J0RGlyZWN0aW9uJyxTb3J0RGlyZWN0aW9uVnNWYWxpZGF0aW9uLCdyJykpO1xyXG4gICAgcmV0dXJuIGlzcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIERhdGFSZXF1aXJlbWVudCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEYXRhUmVxdWlyZW1lbnRBcmdzIGV4dGVuZHMgZmhpci5GaGlyRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHRoZSByZXF1aXJlZCBkYXRhLCBzcGVjaWZpZWQgYXMgdGhlIHR5cGUgbmFtZSBvZiBhIHJlc291cmNlLiBGb3IgcHJvZmlsZXMsIHRoaXMgdmFsdWUgaXMgc2V0IHRvIHRoZSB0eXBlIG9mIHRoZSBiYXNlIHJlc291cmNlIG9mIHRoZSBwcm9maWxlLlxyXG4gICAqL1xyXG4gIHR5cGU6IGZoaXIuRmhpckNvZGV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGF0YVJlcXVpcmVtZW50LnR5cGVcclxuICAgKi9cclxuICBfdHlwZT86Zmhpci5GaGlyRWxlbWVudEFyZ3M7XHJcbiAgLyoqXHJcbiAgICogVGhlIHByb2ZpbGUgb2YgdGhlIHJlcXVpcmVkIGRhdGEsIHNwZWNpZmllZCBhcyB0aGUgdXJpIG9mIHRoZSBwcm9maWxlIGRlZmluaXRpb24uXHJcbiAgICovXHJcbiAgcHJvZmlsZT86IGZoaXIuRmhpckNhbm9uaWNhbFtdfChzdHJpbmd8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERhdGFSZXF1aXJlbWVudC5wcm9maWxlXHJcbiAgICovXHJcbiAgX3Byb2ZpbGU/OihmaGlyLkZoaXJFbGVtZW50QXJnc3xudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdWJqZWN0IG9mIGEgZGF0YSByZXF1aXJlbWVudCBpcyBjcml0aWNhbCwgYXMgdGhlIGRhdGEgYmVpbmcgc3BlY2lmaWVkIGlzIGRldGVybWluZWQgd2l0aCByZXNwZWN0IHRvIGEgcGFydGljdWxhciBzdWJqZWN0LiBUaGlzIGNvcnJlc3BvbmRzIHJvdWdobHkgdG8gdGhlIG5vdGlvbiBvZiBhIENvbXBhcnRtZW50IGluIHRoYXQgaXQgbGltaXRzIHdoYXQgZGF0YSBpcyBhdmFpbGFibGUgYmFzZWQgb24gaXRzIHJlbGF0aW9uc2hpcCB0byB0aGUgc3ViamVjdC4gSW4gQ1FMLCB0aGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBjb250ZXh0IGRlY2xhcmF0aW9uLlxyXG4gICAqL1xyXG4gIHN1YmplY3Q/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN1YmplY3Qgb2YgYSBkYXRhIHJlcXVpcmVtZW50IGlzIGNyaXRpY2FsLCBhcyB0aGUgZGF0YSBiZWluZyBzcGVjaWZpZWQgaXMgZGV0ZXJtaW5lZCB3aXRoIHJlc3BlY3QgdG8gYSBwYXJ0aWN1bGFyIHN1YmplY3QuIFRoaXMgY29ycmVzcG9uZHMgcm91Z2hseSB0byB0aGUgbm90aW9uIG9mIGEgQ29tcGFydG1lbnQgaW4gdGhhdCBpdCBsaW1pdHMgd2hhdCBkYXRhIGlzIGF2YWlsYWJsZSBiYXNlZCBvbiBpdHMgcmVsYXRpb25zaGlwIHRvIHRoZSBzdWJqZWN0LiBJbiBDUUwsIHRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGNvbnRleHQgZGVjbGFyYXRpb24uXHJcbiAgICovXHJcbiAgc3ViamVjdENvZGVhYmxlQ29uY2VwdD86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN1YmplY3Qgb2YgYSBkYXRhIHJlcXVpcmVtZW50IGlzIGNyaXRpY2FsLCBhcyB0aGUgZGF0YSBiZWluZyBzcGVjaWZpZWQgaXMgZGV0ZXJtaW5lZCB3aXRoIHJlc3BlY3QgdG8gYSBwYXJ0aWN1bGFyIHN1YmplY3QuIFRoaXMgY29ycmVzcG9uZHMgcm91Z2hseSB0byB0aGUgbm90aW9uIG9mIGEgQ29tcGFydG1lbnQgaW4gdGhhdCBpdCBsaW1pdHMgd2hhdCBkYXRhIGlzIGF2YWlsYWJsZSBiYXNlZCBvbiBpdHMgcmVsYXRpb25zaGlwIHRvIHRoZSBzdWJqZWN0LiBJbiBDUUwsIHRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGNvbnRleHQgZGVjbGFyYXRpb24uXHJcbiAgICovXHJcbiAgc3ViamVjdFJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoYXQgc3BlY2lmaWMgZWxlbWVudHMgb2YgdGhlIHR5cGUgYXJlIHJlZmVyZW5jZWQgYnkgdGhlIGtub3dsZWRnZSBtb2R1bGUgYW5kIG11c3QgYmUgc3VwcG9ydGVkIGJ5IHRoZSBjb25zdW1lciBpbiBvcmRlciB0byBvYnRhaW4gYW4gZWZmZWN0aXZlIGV2YWx1YXRpb24uIFRoaXMgZG9lcyBub3QgbWVhbiB0aGF0IGEgdmFsdWUgaXMgcmVxdWlyZWQgZm9yIHRoaXMgZWxlbWVudCwgb25seSB0aGF0IHRoZSBjb25zdW1pbmcgc3lzdGVtIG11c3QgdW5kZXJzdGFuZCB0aGUgZWxlbWVudCBhbmQgYmUgYWJsZSB0byBwcm92aWRlIHZhbHVlcyBmb3IgaXQgaWYgdGhleSBhcmUgYXZhaWxhYmxlLiBcclxuICAgKiBUaGUgdmFsdWUgb2YgbXVzdFN1cHBvcnQgU0hBTEwgYmUgYSBGSElSUGF0aCByZXNvbHZlYWJsZSBvbiB0aGUgdHlwZSBvZiB0aGUgRGF0YVJlcXVpcmVtZW50LiBUaGUgcGF0aCBTSEFMTCBjb25zaXN0IG9ubHkgb2YgaWRlbnRpZmllcnMsIGNvbnN0YW50IGluZGV4ZXJzLCBhbmQgLnJlc29sdmUoKSAoc2VlIHRoZSBbU2ltcGxlIEZISVJQYXRoIFByb2ZpbGVdKGZoaXJwYXRoLmh0bWwjc2ltcGxlKSBmb3IgZnVsbCBkZXRhaWxzKS5cclxuICAgKi9cclxuICBtdXN0U3VwcG9ydD86IGZoaXIuRmhpclN0cmluZ1tdfChzdHJpbmd8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERhdGFSZXF1aXJlbWVudC5tdXN0U3VwcG9ydFxyXG4gICAqL1xyXG4gIF9tdXN0U3VwcG9ydD86KGZoaXIuRmhpckVsZW1lbnRBcmdzfG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogQ29kZSBmaWx0ZXJzIHNwZWNpZnkgYWRkaXRpb25hbCBjb25zdHJhaW50cyBvbiB0aGUgZGF0YSwgc3BlY2lmeWluZyB0aGUgdmFsdWUgc2V0IG9mIGludGVyZXN0IGZvciBhIHBhcnRpY3VsYXIgZWxlbWVudCBvZiB0aGUgZGF0YS4gRWFjaCBjb2RlIGZpbHRlciBkZWZpbmVzIGFuIGFkZGl0aW9uYWwgY29uc3RyYWludCBvbiB0aGUgZGF0YSwgaS5lLiBjb2RlIGZpbHRlcnMgYXJlIEFORCdlZCwgbm90IE9SJ2VkLlxyXG4gICAqL1xyXG4gIGNvZGVGaWx0ZXI/OiBmaGlyLkRhdGFSZXF1aXJlbWVudENvZGVGaWx0ZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERhdGUgZmlsdGVycyBzcGVjaWZ5IGFkZGl0aW9uYWwgY29uc3RyYWludHMgb24gdGhlIGRhdGEgaW4gdGVybXMgb2YgdGhlIGFwcGxpY2FibGUgZGF0ZSByYW5nZSBmb3Igc3BlY2lmaWMgZWxlbWVudHMuIEVhY2ggZGF0ZSBmaWx0ZXIgc3BlY2lmaWVzIGFuIGFkZGl0aW9uYWwgY29uc3RyYWludCBvbiB0aGUgZGF0YSwgaS5lLiBkYXRlIGZpbHRlcnMgYXJlIEFORCdlZCwgbm90IE9SJ2VkLlxyXG4gICAqL1xyXG4gIGRhdGVGaWx0ZXI/OiBmaGlyLkRhdGFSZXF1aXJlbWVudERhdGVGaWx0ZXJBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBjYW4gYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSBzb3J0IGVsZW1lbnQgdG8gc3BlY2lmeSBxdW90YSByZXF1aXJlbWVudHMgc3VjaCBhcyBcInRoZSBtb3N0IHJlY2VudCA1XCIgb3IgXCJ0aGUgaGlnaGVzdCA1XCIuXHJcbiAgICovXHJcbiAgbGltaXQ/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHxudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEYXRhUmVxdWlyZW1lbnQubGltaXRcclxuICAgKi9cclxuICBfbGltaXQ/OmZoaXIuRmhpckVsZW1lbnRBcmdzO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBjYW4gYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSBzb3J0IGVsZW1lbnQgdG8gc3BlY2lmeSBxdW90YSByZXF1aXJlbWVudHMgc3VjaCBhcyBcInRoZSBtb3N0IHJlY2VudCA1XCIgb3IgXCJ0aGUgaGlnaGVzdCA1XCIuIFdoZW4gbXVsdGlwbGUgc29ydHMgYXJlIHNwZWNpZmllZCwgdGhleSBhcmUgYXBwbGllZCBpbiB0aGUgb3JkZXIgdGhleSBhcHBlYXIgaW4gdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIHNvcnQ/OiBmaGlyLkRhdGFSZXF1aXJlbWVudFNvcnRBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIGEgcmVxdWlyZWQgZGF0YSBpdGVtIGZvciBldmFsdWF0aW9uIGluIHRlcm1zIG9mIHRoZSB0eXBlIG9mIGRhdGEsIGFuZCBvcHRpb25hbCBjb2RlIG9yIGRhdGUtYmFzZWQgZmlsdGVycyBvZiB0aGUgZGF0YS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRhUmVxdWlyZW1lbnQgZXh0ZW5kcyBmaGlyLkZoaXJFbGVtZW50IHtcclxuICAvKipcclxuICAgKiBNYXBwaW5nIG9mIHRoaXMgZGF0YXR5cGUgdG8gYSBGSElSIGVxdWl2YWxlbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IF9mdHNfZGF0YVR5cGU6c3RyaW5nID0gJ0RhdGFSZXF1aXJlbWVudCc7XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgdGhlIHJlcXVpcmVkIGRhdGEsIHNwZWNpZmllZCBhcyB0aGUgdHlwZSBuYW1lIG9mIGEgcmVzb3VyY2UuIEZvciBwcm9maWxlcywgdGhpcyB2YWx1ZSBpcyBzZXQgdG8gdGhlIHR5cGUgb2YgdGhlIGJhc2UgcmVzb3VyY2Ugb2YgdGhlIHByb2ZpbGUuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IGZoaXIuRmhpckNvZGV8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgcHJvZmlsZSBvZiB0aGUgcmVxdWlyZWQgZGF0YSwgc3BlY2lmaWVkIGFzIHRoZSB1cmkgb2YgdGhlIHByb2ZpbGUgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcHJvZmlsZTogZmhpci5GaGlyQ2Fub25pY2FsW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHN1YmplY3Qgb2YgYSBkYXRhIHJlcXVpcmVtZW50IGlzIGNyaXRpY2FsLCBhcyB0aGUgZGF0YSBiZWluZyBzcGVjaWZpZWQgaXMgZGV0ZXJtaW5lZCB3aXRoIHJlc3BlY3QgdG8gYSBwYXJ0aWN1bGFyIHN1YmplY3QuIFRoaXMgY29ycmVzcG9uZHMgcm91Z2hseSB0byB0aGUgbm90aW9uIG9mIGEgQ29tcGFydG1lbnQgaW4gdGhhdCBpdCBsaW1pdHMgd2hhdCBkYXRhIGlzIGF2YWlsYWJsZSBiYXNlZCBvbiBpdHMgcmVsYXRpb25zaGlwIHRvIHRoZSBzdWJqZWN0LiBJbiBDUUwsIHRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGNvbnRleHQgZGVjbGFyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN1YmplY3Q/OiAoZmhpci5Db2RlYWJsZUNvbmNlcHR8Zmhpci5SZWZlcmVuY2UpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IERhdGFSZXF1aXJlbWVudC5zdWJqZWN0W3hdXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfZnRzX3N1YmplY3RJc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhhdCBzcGVjaWZpYyBlbGVtZW50cyBvZiB0aGUgdHlwZSBhcmUgcmVmZXJlbmNlZCBieSB0aGUga25vd2xlZGdlIG1vZHVsZSBhbmQgbXVzdCBiZSBzdXBwb3J0ZWQgYnkgdGhlIGNvbnN1bWVyIGluIG9yZGVyIHRvIG9idGFpbiBhbiBlZmZlY3RpdmUgZXZhbHVhdGlvbi4gVGhpcyBkb2VzIG5vdCBtZWFuIHRoYXQgYSB2YWx1ZSBpcyByZXF1aXJlZCBmb3IgdGhpcyBlbGVtZW50LCBvbmx5IHRoYXQgdGhlIGNvbnN1bWluZyBzeXN0ZW0gbXVzdCB1bmRlcnN0YW5kIHRoZSBlbGVtZW50IGFuZCBiZSBhYmxlIHRvIHByb3ZpZGUgdmFsdWVzIGZvciBpdCBpZiB0aGV5IGFyZSBhdmFpbGFibGUuIFxyXG4gICAqIFRoZSB2YWx1ZSBvZiBtdXN0U3VwcG9ydCBTSEFMTCBiZSBhIEZISVJQYXRoIHJlc29sdmVhYmxlIG9uIHRoZSB0eXBlIG9mIHRoZSBEYXRhUmVxdWlyZW1lbnQuIFRoZSBwYXRoIFNIQUxMIGNvbnNpc3Qgb25seSBvZiBpZGVudGlmaWVycywgY29uc3RhbnQgaW5kZXhlcnMsIGFuZCAucmVzb2x2ZSgpIChzZWUgdGhlIFtTaW1wbGUgRkhJUlBhdGggUHJvZmlsZV0oZmhpcnBhdGguaHRtbCNzaW1wbGUpIGZvciBmdWxsIGRldGFpbHMpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtdXN0U3VwcG9ydDogZmhpci5GaGlyU3RyaW5nW107XHJcbiAgLyoqXHJcbiAgICogQ29kZSBmaWx0ZXJzIHNwZWNpZnkgYWRkaXRpb25hbCBjb25zdHJhaW50cyBvbiB0aGUgZGF0YSwgc3BlY2lmeWluZyB0aGUgdmFsdWUgc2V0IG9mIGludGVyZXN0IGZvciBhIHBhcnRpY3VsYXIgZWxlbWVudCBvZiB0aGUgZGF0YS4gRWFjaCBjb2RlIGZpbHRlciBkZWZpbmVzIGFuIGFkZGl0aW9uYWwgY29uc3RyYWludCBvbiB0aGUgZGF0YSwgaS5lLiBjb2RlIGZpbHRlcnMgYXJlIEFORCdlZCwgbm90IE9SJ2VkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb2RlRmlsdGVyOiBmaGlyLkRhdGFSZXF1aXJlbWVudENvZGVGaWx0ZXJbXTtcclxuICAvKipcclxuICAgKiBEYXRlIGZpbHRlcnMgc3BlY2lmeSBhZGRpdGlvbmFsIGNvbnN0cmFpbnRzIG9uIHRoZSBkYXRhIGluIHRlcm1zIG9mIHRoZSBhcHBsaWNhYmxlIGRhdGUgcmFuZ2UgZm9yIHNwZWNpZmljIGVsZW1lbnRzLiBFYWNoIGRhdGUgZmlsdGVyIHNwZWNpZmllcyBhbiBhZGRpdGlvbmFsIGNvbnN0cmFpbnQgb24gdGhlIGRhdGEsIGkuZS4gZGF0ZSBmaWx0ZXJzIGFyZSBBTkQnZWQsIG5vdCBPUidlZC5cclxuICAgKi9cclxuICBwdWJsaWMgZGF0ZUZpbHRlcjogZmhpci5EYXRhUmVxdWlyZW1lbnREYXRlRmlsdGVyW107XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGNhbiBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIHNvcnQgZWxlbWVudCB0byBzcGVjaWZ5IHF1b3RhIHJlcXVpcmVtZW50cyBzdWNoIGFzIFwidGhlIG1vc3QgcmVjZW50IDVcIiBvciBcInRoZSBoaWdoZXN0IDVcIi5cclxuICAgKi9cclxuICBwdWJsaWMgbGltaXQ/OiBmaGlyLkZoaXJQb3NpdGl2ZUludHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGNhbiBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIHNvcnQgZWxlbWVudCB0byBzcGVjaWZ5IHF1b3RhIHJlcXVpcmVtZW50cyBzdWNoIGFzIFwidGhlIG1vc3QgcmVjZW50IDVcIiBvciBcInRoZSBoaWdoZXN0IDVcIi4gV2hlbiBtdWx0aXBsZSBzb3J0cyBhcmUgc3BlY2lmaWVkLCB0aGV5IGFyZSBhcHBsaWVkIGluIHRoZSBvcmRlciB0aGV5IGFwcGVhciBpbiB0aGUgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHNvcnQ6IGZoaXIuRGF0YVJlcXVpcmVtZW50U29ydFtdO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIERhdGFSZXF1aXJlbWVudCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPERhdGFSZXF1aXJlbWVudEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuRmhpckNvZGUoe3ZhbHVlOiBzb3VyY2UudHlwZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy50eXBlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnX3R5cGUnXSkge1xyXG4gICAgICBpZiAodGhpcy50eXBlKSB7IHRoaXMudHlwZS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoc291cmNlLl90eXBlISk7IH1cclxuICAgICAgZWxzZSB7IHRoaXMudHlwZSA9IG5ldyBmaGlyLkZoaXJDb2RlKHNvdXJjZS5fdHlwZSBhcyBQYXJ0aWFsPGZoaXIuRmhpckNvZGVBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3Byb2ZpbGUnXSkgeyB0aGlzLnByb2ZpbGUgPSBzb3VyY2UucHJvZmlsZS5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wcm9maWxlID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19wcm9maWxlJ10pIHtcclxuICAgICAgc291cmNlLl9wcm9maWxlLmZvckVhY2goKHgsaSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb2ZpbGUubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5wcm9maWxlW2ldLmFkZEV4dGVuZGVkUHJvcGVydGllcyh4KTsgfSB9XHJcbiAgICAgICAgZWxzZSB7IGlmICh4KSB7IHRoaXMucHJvZmlsZS5wdXNoKG5ldyBmaGlyLkZoaXJDYW5vbmljYWwoeCBhcyBQYXJ0aWFsPGZoaXIuRmhpckNhbm9uaWNhbEFyZ3M+KSk7IH0gfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3N1YmplY3QnXSkgeyB0aGlzLnN1YmplY3QgPSBzb3VyY2Uuc3ViamVjdDsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydzdWJqZWN0Q29kZWFibGVDb25jZXB0J10pIHsgdGhpcy5zdWJqZWN0ID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS5zdWJqZWN0Q29kZWFibGVDb25jZXB0KTsgfVxyXG4gICAgZWxzZSBpZiAoc291cmNlWydzdWJqZWN0UmVmZXJlbmNlJ10pIHsgdGhpcy5zdWJqZWN0ID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5zdWJqZWN0UmVmZXJlbmNlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbXVzdFN1cHBvcnQnXSkgeyB0aGlzLm11c3RTdXBwb3J0ID0gc291cmNlLm11c3RTdXBwb3J0Lm1hcCgoeCkgPT4gbmV3IGZoaXIuRmhpclN0cmluZyh7dmFsdWU6IHh9KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLm11c3RTdXBwb3J0ID0gW107IH1cclxuICAgIGlmIChzb3VyY2VbJ19tdXN0U3VwcG9ydCddKSB7XHJcbiAgICAgIHNvdXJjZS5fbXVzdFN1cHBvcnQuZm9yRWFjaCgoeCxpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMubXVzdFN1cHBvcnQubGVuZ3RoID49IGkpIHsgaWYgKHgpIHsgdGhpcy5tdXN0U3VwcG9ydFtpXS5hZGRFeHRlbmRlZFByb3BlcnRpZXMoeCk7IH0gfVxyXG4gICAgICAgIGVsc2UgeyBpZiAoeCkgeyB0aGlzLm11c3RTdXBwb3J0LnB1c2gobmV3IGZoaXIuRmhpclN0cmluZyh4IGFzIFBhcnRpYWw8Zmhpci5GaGlyU3RyaW5nQXJncz4pKTsgfSB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZVsnY29kZUZpbHRlciddKSB7IHRoaXMuY29kZUZpbHRlciA9IHNvdXJjZS5jb2RlRmlsdGVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuRGF0YVJlcXVpcmVtZW50Q29kZUZpbHRlcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmNvZGVGaWx0ZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZGF0ZUZpbHRlciddKSB7IHRoaXMuZGF0ZUZpbHRlciA9IHNvdXJjZS5kYXRlRmlsdGVyLm1hcCgoeCkgPT4gbmV3IGZoaXIuRGF0YVJlcXVpcmVtZW50RGF0ZUZpbHRlcih4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmRhdGVGaWx0ZXIgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbGltaXQnXSkgeyB0aGlzLmxpbWl0ID0gbmV3IGZoaXIuRmhpclBvc2l0aXZlSW50KHt2YWx1ZTogc291cmNlLmxpbWl0fSk7IH1cclxuICAgIGlmIChzb3VyY2VbJ19saW1pdCddKSB7XHJcbiAgICAgIGlmICh0aGlzLmxpbWl0KSB7IHRoaXMubGltaXQuYWRkRXh0ZW5kZWRQcm9wZXJ0aWVzKHNvdXJjZS5fbGltaXQhKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy5saW1pdCA9IG5ldyBmaGlyLkZoaXJQb3NpdGl2ZUludChzb3VyY2UuX2xpbWl0IGFzIFBhcnRpYWw8Zmhpci5GaGlyUG9zaXRpdmVJbnRBcmdzPik7IH1cclxuICAgIH1cclxuICAgIGlmIChzb3VyY2VbJ3NvcnQnXSkgeyB0aGlzLnNvcnQgPSBzb3VyY2Uuc29ydC5tYXAoKHgpID0+IG5ldyBmaGlyLkRhdGFSZXF1aXJlbWVudFNvcnQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zb3J0ID0gW107IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdG8gcGVyZm9ybSBiYXNpYyBtb2RlbCB2YWxpZGF0aW9uIChlLmcuLCBjaGVjayBpZiByZXF1aXJlZCBlbGVtZW50cyBhcmUgcHJlc2VudCkuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRvTW9kZWxWYWxpZGF0aW9uKGV4cDpzdHJpbmcgPSAnJyk6Zmhpci5GdHNJc3N1ZVtdIHtcclxuICAgIGxldCBpc3M6Zmhpci5GdHNJc3N1ZVtdID0gc3VwZXIuZG9Nb2RlbFZhbGlkYXRpb24oZXhwKTtcclxuICAgIGlmIChleHAgPT09ICcnKSB7IGV4cCA9ICdEYXRhUmVxdWlyZW1lbnQnIH1cclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudlJTVigndHlwZScsZXhwLCdBbGxUeXBlcycsQWxsVHlwZXNWc1ZhbGlkYXRpb24sJ3InKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgncHJvZmlsZScsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPUygnc3ViamVjdCcsZXhwKSk7XHJcbiAgICBpc3MucHVzaCguLi50aGlzLnZPQSgnbXVzdFN1cHBvcnQnLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2NvZGVGaWx0ZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T0EoJ2RhdGVGaWx0ZXInLGV4cCkpO1xyXG4gICAgaXNzLnB1c2goLi4udGhpcy52T1MoJ2xpbWl0JyxleHApKTtcclxuICAgIGlzcy5wdXNoKC4uLnRoaXMudk9BKCdzb3J0JyxleHApKTtcclxuICAgIHJldHVybiBpc3M7XHJcbiAgfVxyXG59XHJcbiJdfQ==