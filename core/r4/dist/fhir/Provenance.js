// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProvenanceAgentTypeCodings, } from '../fhirValueSets/ProvenanceAgentTypeCodings.js';
// @ts-ignore
import { ProvenanceEntityRoleCodings, } from '../fhirValueSets/ProvenanceEntityRoleCodings.js';
// @ts-ignore
import { V3PurposeOfUseCodings, } from '../fhirValueSets/V3PurposeOfUseCodings.js';
// @ts-ignore
import { ProvenanceActivityTypeCodings, } from '../fhirValueSets/ProvenanceActivityTypeCodings.js';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.role = [];
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Extensible-bound Value Set for type (Provenance.agent.type)
     */
    static typeExtensibleCoding() {
        return ProvenanceAgentTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["role"]) {
            this.role.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['who']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property who:fhir.Reference fhir: Provenance.agent.who:Reference', });
        }
        if (this["who"]) {
            issues.push(...this.who.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            issues.push(...this.onBehalfOf.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgent._fts_dataType = 'ProvenanceAgent';
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = source.role;
        }
        else {
            this.role = null;
        }
        if (source['what']) {
            this.what = new fhir.Reference(source.what);
        }
        else {
            this.what = null;
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = [];
        }
    }
    /**
     * Required-bound Value Set for role (Provenance.entity.role)
     */
    static roleRequiredCoding() {
        return ProvenanceEntityRoleCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['role']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property role:ProvenanceEntityRoleCodeType fhir: Provenance.entity.role:code', });
        }
        if (!this['what']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property what:fhir.Reference fhir: Provenance.entity.what:Reference', });
        }
        if (this["what"]) {
            issues.push(...this.what.doModelValidation());
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceEntity._fts_dataType = 'ProvenanceEntity';
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = [];
        }
        if (source['occurred']) {
            this.occurred = source.occurred;
        }
        else if (source['occurredPeriod']) {
            this.occurred = new fhir.Period(source.occurredPeriod);
        }
        else if (source['occurredDateTime']) {
            this.occurred = new fhir.FhirDateTime({ value: source.occurredDateTime });
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded });
        }
        else {
            this.recorded = null;
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.policy = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = [];
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x));
        }
        else {
            this.entity = [];
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Extensible-bound Value Set for reason (Provenance.reason)
     */
    static reasonExtensibleCoding() {
        return V3PurposeOfUseCodings;
    }
    /**
     * Extensible-bound Value Set for activity (Provenance.activity)
     */
    static activityExtensibleCoding() {
        return ProvenanceActivityTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Provenance" fhir: Provenance.resourceType:"Provenance"', });
        }
        if (!this['target']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference', });
        }
        else if (!Array.isArray(this.target)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property target:fhir.Reference[] fhir: Provenance.target:Reference', });
        }
        else if (this.target.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference', });
        }
        if (this["target"]) {
            this.target.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['recorded']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property recorded:fhir.FhirInstant fhir: Provenance.recorded:instant', });
        }
        if (this["recorded"]) {
            issues.push(...this.recorded.doModelValidation());
        }
        if (this["policy"]) {
            this.policy.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["activity"]) {
            issues.push(...this.activity.doModelValidation());
        }
        if (!this['agent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', });
        }
        else if (!Array.isArray(this.agent)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', });
        }
        else if (this.agent.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', });
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["entity"]) {
            this.entity.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["signature"]) {
            this.signature.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Provenance._fts_dataType = 'Provenance';
/**
 * Internal flag to properly serialize choice-type element Provenance.occurred[x]
 */
Provenance._fts_occurredIsChoice = true;
//# sourceMappingURL=data:application/json;base64,