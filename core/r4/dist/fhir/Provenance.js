// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProvenanceAgentTypeCodings, } from '../fhirValueSets/ProvenanceAgentTypeCodings.js';
// @ts-ignore
import { ProvenanceEntityRoleCodes } from '../fhirValueSets/ProvenanceEntityRoleCodes.js';
// @ts-ignore
import { V3PurposeOfUseCodings, } from '../fhirValueSets/V3PurposeOfUseCodings.js';
// @ts-ignore
import { ProvenanceActivityTypeCodings, } from '../fhirValueSets/ProvenanceActivityTypeCodings.js';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.role = [];
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Extensible-bound Value Set for type (Provenance.agent.type)
     */
    static get typeExtensibleCodings() {
        return ProvenanceAgentTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["role"]) {
            this.role.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['who']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property who:fhir.Reference fhir: Provenance.agent.who:Reference' });
        }
        if (this["who"]) {
            issues.push(...this.who.doModelValidation());
        }
        if (this["onBehalfOf"]) {
            issues.push(...this.onBehalfOf.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgent._fts_dataType = 'ProvenanceAgent';
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.FhirCode({ value: source.role });
        }
        else {
            this.role = null;
        }
        if (source['what']) {
            this.what = new fhir.Reference(source.what);
        }
        else {
            this.what = null;
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = [];
        }
    }
    /**
     * Required-bound Value Set for role (Provenance.entity.role)
     */
    static get roleRequiredCodes() {
        return ProvenanceEntityRoleCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['role']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property role:fhir.FhirCode<ProvenanceEntityRoleCodeType> fhir: Provenance.entity.role:code' });
        }
        if (this['role'] && (!Object.values(ProvenanceEntityRoleCodes).includes(this.role))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property role:fhir.FhirCode<ProvenanceEntityRoleCodeType> fhir: Provenance.entity.role:code Required binding to: ProvenanceEntityRole' });
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        if (!this['what']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property what:fhir.Reference fhir: Provenance.entity.what:Reference' });
        }
        if (this["what"]) {
            issues.push(...this.what.doModelValidation());
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceEntity._fts_dataType = 'ProvenanceEntity';
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = [];
        }
        if (source['occurred']) {
            this.occurred = source.occurred;
        }
        else if (source['occurredPeriod']) {
            this.occurred = new fhir.Period(source.occurredPeriod);
        }
        else if (source['occurredDateTime']) {
            this.occurred = new fhir.FhirDateTime({ value: source.occurredDateTime });
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded });
        }
        else {
            this.recorded = null;
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.policy = [];
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = [];
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x));
        }
        else {
            this.entity = [];
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Extensible-bound Value Set for reason (Provenance.reason)
     */
    static get reasonExtensibleCodings() {
        return V3PurposeOfUseCodings;
    }
    /**
     * Extensible-bound Value Set for activity (Provenance.activity)
     */
    static get activityExtensibleCodings() {
        return ProvenanceActivityTypeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"Provenance" fhir: Provenance.resourceType:"Provenance"' });
        }
        if (!this['target']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference' });
        }
        else if (!Array.isArray(this.target)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property target:fhir.Reference[] fhir: Provenance.target:Reference' });
        }
        else if (this.target.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference' });
        }
        if (this["target"]) {
            this.target.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['recorded']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property recorded:fhir.FhirInstant fhir: Provenance.recorded:instant' });
        }
        if (this["recorded"]) {
            issues.push(...this.recorded.doModelValidation());
        }
        if (this["policy"]) {
            this.policy.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["location"]) {
            issues.push(...this.location.doModelValidation());
        }
        if (this["reason"]) {
            this.reason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["activity"]) {
            issues.push(...this.activity.doModelValidation());
        }
        if (!this['agent']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent' });
        }
        else if (!Array.isArray(this.agent)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent' });
        }
        else if (this.agent.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent' });
        }
        if (this["agent"]) {
            this.agent.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["entity"]) {
            this.entity.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["signature"]) {
            this.signature.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Provenance._fts_dataType = 'Provenance';
/**
 * Internal flag to properly serialize choice-type element Provenance.occurred[x]
 */
Provenance._fts_occurredIsChoice = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmVuYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXIvUHJvdmVuYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyw0QkFBNEI7QUFFNUIsT0FBTyxLQUFLLElBQUksTUFBTSxZQUFZLENBQUM7QUFFbkMsYUFBYTtBQUNiLE9BQU8sRUFBRSwwQkFBMEIsR0FBaUMsTUFBTSxnREFBZ0QsQ0FBQztBQVMzSCxhQUFhO0FBQ2IsT0FBTyxFQUFFLHlCQUF5QixFQUFpQyxNQUFNLCtDQUErQyxDQUFDO0FBQ3pILGFBQWE7QUFDYixPQUFPLEVBQUUscUJBQXFCLEdBQTRCLE1BQU0sMkNBQTJDLENBQUM7QUFHNUcsYUFBYTtBQUNiLE9BQU8sRUFBRSw2QkFBNkIsR0FBb0MsTUFBTSxtREFBbUQsQ0FBQztBQXlCcEk7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxJQUFJLENBQUMsZUFBZTtJQXFCdkQ7O09BRUc7SUFDSCxZQUFZLFNBQXNDLEVBQUUsRUFBRSxVQUFzQyxFQUFFO1FBQzVGLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FBRTtRQUMxRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDbkY7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUFFO1FB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QUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQ3BHLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBN0hEOztHQUVHO0FBQzZCLHdCQUFhLEdBQVUsWUFBWSxDQUFDO0FBYXBFOztHQUVHO0FBQ3VCLGdDQUFxQixHQUFRLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogUHJvdmVuYW5jZVxyXG5cclxuaW1wb3J0ICogYXMgZmhpciBmcm9tICcuLi9maGlyLmpzJztcclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHJvdmVuYW5jZUFnZW50VHlwZUNvZGluZ3MsIFByb3ZlbmFuY2VBZ2VudFR5cGVDb2RpbmdUeXBlLH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Qcm92ZW5hbmNlQWdlbnRUeXBlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgUHJvdmVuYW5jZUFnZW50VHlwZUNvZGVzLCAgUHJvdmVuYW5jZUFnZW50VHlwZUNvZGVUeXBlIH0gZnJvbSAnLi4vZmhpclZhbHVlU2V0cy9Qcm92ZW5hbmNlQWdlbnRUeXBlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNlY3VyaXR5Um9sZVR5cGVDb2RpbmdzLCBTZWN1cml0eVJvbGVUeXBlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU2VjdXJpdHlSb2xlVHlwZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFNlY3VyaXR5Um9sZVR5cGVDb2RlcywgIFNlY3VyaXR5Um9sZVR5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvU2VjdXJpdHlSb2xlVHlwZUNvZGVzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGluZ3MsIFByb3ZlbmFuY2VFbnRpdHlSb2xlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUHJvdmVuYW5jZUVudGl0eVJvbGVDb2RpbmdzLmpzJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGVzLCAgUHJvdmVuYW5jZUVudGl0eVJvbGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUHJvdmVuYW5jZUVudGl0eVJvbGVDb2Rlcy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjNQdXJwb3NlT2ZVc2VDb2RpbmdzLCBWM1B1cnBvc2VPZlVzZUNvZGluZ1R5cGUsfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1YzUHVycG9zZU9mVXNlQ29kaW5ncy5qcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0IHsgVjNQdXJwb3NlT2ZVc2VDb2RlcywgIFYzUHVycG9zZU9mVXNlQ29kZVR5cGUgfSBmcm9tICcuLi9maGlyVmFsdWVTZXRzL1YzUHVycG9zZU9mVXNlQ29kZXMuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFByb3ZlbmFuY2VBY3Rpdml0eVR5cGVDb2RpbmdzLCBQcm92ZW5hbmNlQWN0aXZpdHlUeXBlQ29kaW5nVHlwZSx9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUHJvdmVuYW5jZUFjdGl2aXR5VHlwZUNvZGluZ3MuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IFByb3ZlbmFuY2VBY3Rpdml0eVR5cGVDb2RlcywgIFByb3ZlbmFuY2VBY3Rpdml0eVR5cGVDb2RlVHlwZSB9IGZyb20gJy4uL2ZoaXJWYWx1ZVNldHMvUHJvdmVuYW5jZUFjdGl2aXR5VHlwZUNvZGVzLmpzJztcclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFByb3ZlbmFuY2VBZ2VudCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQcm92ZW5hbmNlQWdlbnRBcmdzIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnRBcmdzIHtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZTogYXV0aG9yLCBwZXJmb3JtZXIsIGVudGVyZXIsIGF0dGVzdGVyLCBldGMuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIGV4YW1wbGU6IGRvY3RvciwgbnVyc2UsIGNsZXJrLCBldGMuXHJcbiAgICovXHJcbiAgcm9sZT86IGZoaXIuQ29kZWFibGVDb25jZXB0QXJnc1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiB3aG9JZGVudGl0eSBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBhZ2VudCBpcyBub3QgYSBSZXNvdXJjZSB0eXBlLlxyXG4gICAqL1xyXG4gIHdobzogZmhpci5SZWZlcmVuY2VBcmdzfG51bGw7XHJcbiAgLyoqXHJcbiAgICogb25CZWhhbGZPZklkZW50aXR5IHNob3VsZCBiZSB1c2VkIHdoZW4gdGhlIGFnZW50IGlzIG5vdCBhIFJlc291cmNlIHR5cGUuXHJcbiAgICovXHJcbiAgb25CZWhhbGZPZj86IGZoaXIuUmVmZXJlbmNlQXJnc3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXZlcmFsIGFnZW50cyBtYXkgYmUgYXNzb2NpYXRlZCAoaS5lLiBoYXMgc29tZSByZXNwb25zaWJpbGl0eSBmb3IgYW4gYWN0aXZpdHkpIHdpdGggYW4gYWN0aXZpdHkgYW5kIHZpY2UtdmVyc2EuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUHJvdmVuYW5jZUFnZW50IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnUHJvdmVuYW5jZUFnZW50JztcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZTogYXV0aG9yLCBwZXJmb3JtZXIsIGVudGVyZXIsIGF0dGVzdGVyLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRm9yIGV4YW1wbGU6IGRvY3RvciwgbnVyc2UsIGNsZXJrLCBldGMuXHJcbiAgICovXHJcbiAgcHVibGljIHJvbGU6IGZoaXIuQ29kZWFibGVDb25jZXB0W107XHJcbiAgLyoqXHJcbiAgICogd2hvSWRlbnRpdHkgc2hvdWxkIGJlIHVzZWQgd2hlbiB0aGUgYWdlbnQgaXMgbm90IGEgUmVzb3VyY2UgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgd2hvOiBmaGlyLlJlZmVyZW5jZXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIG9uQmVoYWxmT2ZJZGVudGl0eSBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBhZ2VudCBpcyBub3QgYSBSZXNvdXJjZSB0eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvbkJlaGFsZk9mPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFByb3ZlbmFuY2VBZ2VudCAtIGluaXRpYWxpemVzIGFueSByZXF1aXJlZCBlbGVtZW50cyB0byBudWxsIGlmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTpQYXJ0aWFsPFByb3ZlbmFuY2VBZ2VudEFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWyd0eXBlJ10pIHsgdGhpcy50eXBlID0gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHNvdXJjZS50eXBlKTsgfVxyXG4gICAgaWYgKHNvdXJjZVsncm9sZSddKSB7IHRoaXMucm9sZSA9IHNvdXJjZS5yb2xlLm1hcCgoeCkgPT4gbmV3IGZoaXIuQ29kZWFibGVDb25jZXB0KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMucm9sZSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWyd3aG8nXSkgeyB0aGlzLndobyA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uud2hvKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMud2hvID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnb25CZWhhbGZPZiddKSB7IHRoaXMub25CZWhhbGZPZiA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uub25CZWhhbGZPZik7IH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5zaWJsZS1ib3VuZCBWYWx1ZSBTZXQgZm9yIHR5cGUgKFByb3ZlbmFuY2UuYWdlbnQudHlwZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCB0eXBlRXh0ZW5zaWJsZUNvZGluZ3MoKSB7XHJcbiAgICByZXR1cm4gUHJvdmVuYW5jZUFnZW50VHlwZUNvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIHBlcmZvcm0gYmFzaWMgbW9kZWwgdmFsaWRhdGlvbiAoZS5nLiwgY2hlY2sgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlIHByZXNlbnQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkb01vZGVsVmFsaWRhdGlvbigpOmZoaXIuRnRzSXNzdWVbXSB7XHJcbiAgICBsZXQgaXNzdWVzOmZoaXIuRnRzSXNzdWVbXSA9IHN1cGVyLmRvTW9kZWxWYWxpZGF0aW9uKCk7XHJcbiAgICBpZiAodGhpc1tcInR5cGVcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy50eXBlLmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAodGhpc1tcInJvbGVcIl0pIHsgdGhpcy5yb2xlLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKCF0aGlzWyd3aG8nXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgd2hvOmZoaXIuUmVmZXJlbmNlIGZoaXI6IFByb3ZlbmFuY2UuYWdlbnQud2hvOlJlZmVyZW5jZScgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpc1tcIndob1wiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLndoby5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJvbkJlaGFsZk9mXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMub25CZWhhbGZPZi5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgcmV0dXJuIGlzc3VlcztcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFZhbGlkIGFyZ3VtZW50cyBmb3IgdGhlIFByb3ZlbmFuY2VFbnRpdHkgdHlwZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmVuYW5jZUVudGl0eUFyZ3MgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudEFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIEhvdyB0aGUgZW50aXR5IHdhcyB1c2VkIGR1cmluZyB0aGUgYWN0aXZpdHkuXHJcbiAgICovXHJcbiAgcm9sZTogZmhpci5GaGlyQ29kZTxQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGVUeXBlPnxzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIHdoYXRJZGVudGl0eSBzaG91bGQgYmUgdXNlZCBmb3IgZW50aXRpZXMgdGhhdCBhcmUgbm90IGEgUmVzb3VyY2UgdHlwZS5cclxuICAgKi9cclxuICB3aGF0OiBmaGlyLlJlZmVyZW5jZUFyZ3N8bnVsbDtcclxuICAvKipcclxuICAgKiBBIHVzZWNhc2Ugd2hlcmUgb25lIFByb3ZlbmFuY2UuZW50aXR5LmFnZW50IGlzIHVzZWQgd2hlcmUgdGhlIEVudGl0eSB0aGF0IHdhcyB1c2VkIGluIHRoZSBjcmVhdGlvbi91cGRhdGluZyBvZiB0aGUgVGFyZ2V0LCBpcyBub3QgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHNhbWUgY3VzdG9kaWFuc2hpcCBhcyB0aGUgVGFyZ2V0LCBhbmQgdGh1cyB0aGUgbWVhbmluZyBvZiBQcm92ZW5hbmNlLmVudGl0eS5hZ2VudCBpcyB0byBzYXkgdGhhdCB0aGUgZW50aXR5IHJlZmVyZW5jZWQgaXMgbWFuYWdlZCBlbHNld2hlcmUgYW5kIHRoYXQgdGhpcyBBZ2VudCBwcm92aWRlZCBhY2Nlc3MgdG8gaXQuICBUaGlzIHdvdWxkIGJlIHNpbWlsYXIgdG8gd2hlcmUgdGhlIEVudGl0eSBiZWluZyByZWZlcmVuY2VkIGlzIG1hbmFnZWQgb3V0c2lkZSBGSElSLCBzdWNoIGFzIHRocm91Z2ggSEw3IHYyLCB2Mywgb3IgWERTLiBUaGlzIG1pZ2h0IGJlIHdoZXJlIHRoZSBFbnRpdHkgYmVpbmcgcmVmZXJlbmNlZCBpcyBtYW5hZ2VkIGluIGFub3RoZXIgRkhJUiByZXNvdXJjZSBzZXJ2ZXIuIFRodXMgaXQgZXhwbGFpbnMgdGhlIFByb3ZlbmFuY2Ugb2YgdGhhdCBFbnRpdHkncyB1c2UgaW4gdGhlIGNvbnRleHQgb2YgdGhpcyBQcm92ZW5hbmNlIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIGFnZW50PzogZmhpci5Qcm92ZW5hbmNlQWdlbnRBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gZW50aXR5IHVzZWQgaW4gdGhpcyBhY3Rpdml0eS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcm92ZW5hbmNlRW50aXR5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQge1xyXG4gIC8qKlxyXG4gICAqIE1hcHBpbmcgb2YgdGhpcyBkYXRhdHlwZSB0byBhIEZISVIgZXF1aXZhbGVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgX2Z0c19kYXRhVHlwZTpzdHJpbmcgPSAnUHJvdmVuYW5jZUVudGl0eSc7XHJcbiAgLyoqXHJcbiAgICogSG93IHRoZSBlbnRpdHkgd2FzIHVzZWQgZHVyaW5nIHRoZSBhY3Rpdml0eS5cclxuICAgKi9cclxuICBwdWJsaWMgcm9sZTogZmhpci5GaGlyQ29kZTxQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGVUeXBlPnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIHdoYXRJZGVudGl0eSBzaG91bGQgYmUgdXNlZCBmb3IgZW50aXRpZXMgdGhhdCBhcmUgbm90IGEgUmVzb3VyY2UgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgd2hhdDogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBBIHVzZWNhc2Ugd2hlcmUgb25lIFByb3ZlbmFuY2UuZW50aXR5LmFnZW50IGlzIHVzZWQgd2hlcmUgdGhlIEVudGl0eSB0aGF0IHdhcyB1c2VkIGluIHRoZSBjcmVhdGlvbi91cGRhdGluZyBvZiB0aGUgVGFyZ2V0LCBpcyBub3QgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHNhbWUgY3VzdG9kaWFuc2hpcCBhcyB0aGUgVGFyZ2V0LCBhbmQgdGh1cyB0aGUgbWVhbmluZyBvZiBQcm92ZW5hbmNlLmVudGl0eS5hZ2VudCBpcyB0byBzYXkgdGhhdCB0aGUgZW50aXR5IHJlZmVyZW5jZWQgaXMgbWFuYWdlZCBlbHNld2hlcmUgYW5kIHRoYXQgdGhpcyBBZ2VudCBwcm92aWRlZCBhY2Nlc3MgdG8gaXQuICBUaGlzIHdvdWxkIGJlIHNpbWlsYXIgdG8gd2hlcmUgdGhlIEVudGl0eSBiZWluZyByZWZlcmVuY2VkIGlzIG1hbmFnZWQgb3V0c2lkZSBGSElSLCBzdWNoIGFzIHRocm91Z2ggSEw3IHYyLCB2Mywgb3IgWERTLiBUaGlzIG1pZ2h0IGJlIHdoZXJlIHRoZSBFbnRpdHkgYmVpbmcgcmVmZXJlbmNlZCBpcyBtYW5hZ2VkIGluIGFub3RoZXIgRkhJUiByZXNvdXJjZSBzZXJ2ZXIuIFRodXMgaXQgZXhwbGFpbnMgdGhlIFByb3ZlbmFuY2Ugb2YgdGhhdCBFbnRpdHkncyB1c2UgaW4gdGhlIGNvbnRleHQgb2YgdGhpcyBQcm92ZW5hbmNlIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZ2VudDogZmhpci5Qcm92ZW5hbmNlQWdlbnRbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBQcm92ZW5hbmNlRW50aXR5IC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UHJvdmVuYW5jZUVudGl0eUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICBpZiAoc291cmNlWydyb2xlJ10pIHsgdGhpcy5yb2xlID0gbmV3IGZoaXIuRmhpckNvZGU8UHJvdmVuYW5jZUVudGl0eVJvbGVDb2RlVHlwZT4oe3ZhbHVlOiBzb3VyY2Uucm9sZX0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yb2xlID0gbnVsbDsgfVxyXG4gICAgaWYgKHNvdXJjZVsnd2hhdCddKSB7IHRoaXMud2hhdCA9IG5ldyBmaGlyLlJlZmVyZW5jZShzb3VyY2Uud2hhdCk7IH1cclxuICAgIGVsc2UgeyB0aGlzLndoYXQgPSBudWxsOyB9XHJcbiAgICBpZiAoc291cmNlWydhZ2VudCddKSB7IHRoaXMuYWdlbnQgPSBzb3VyY2UuYWdlbnQubWFwKCh4KSA9PiBuZXcgZmhpci5Qcm92ZW5hbmNlQWdlbnQoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5hZ2VudCA9IFtdOyB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJlcXVpcmVkLWJvdW5kIFZhbHVlIFNldCBmb3Igcm9sZSAoUHJvdmVuYW5jZS5lbnRpdHkucm9sZSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCByb2xlUmVxdWlyZWRDb2RlcygpIHtcclxuICAgIHJldHVybiBQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGVzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydyb2xlJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJvbGU6Zmhpci5GaGlyQ29kZTxQcm92ZW5hbmNlRW50aXR5Um9sZUNvZGVUeXBlPiBmaGlyOiBQcm92ZW5hbmNlLmVudGl0eS5yb2xlOmNvZGUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbJ3JvbGUnXSAmJiAoIU9iamVjdC52YWx1ZXMoUHJvdmVuYW5jZUVudGl0eVJvbGVDb2RlcykuaW5jbHVkZXModGhpcy5yb2xlIGFzIGFueSkpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdjb2RlLWludmFsaWQnLCBkaWFnbm9zdGljczogJ0ludmFsaWQgY29kZSBwcm9wZXJ0eSByb2xlOmZoaXIuRmhpckNvZGU8UHJvdmVuYW5jZUVudGl0eVJvbGVDb2RlVHlwZT4gZmhpcjogUHJvdmVuYW5jZS5lbnRpdHkucm9sZTpjb2RlIFJlcXVpcmVkIGJpbmRpbmcgdG86IFByb3ZlbmFuY2VFbnRpdHlSb2xlJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wicm9sZVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLnJvbGUuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICghdGhpc1snd2hhdCddKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB3aGF0OmZoaXIuUmVmZXJlbmNlIGZoaXI6IFByb3ZlbmFuY2UuZW50aXR5LndoYXQ6UmVmZXJlbmNlJyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wid2hhdFwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLndoYXQuZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wiYWdlbnRcIl0pIHsgdGhpcy5hZ2VudC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIHJldHVybiBpc3N1ZXM7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBWYWxpZCBhcmd1bWVudHMgZm9yIHRoZSBQcm92ZW5hbmNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFByb3ZlbmFuY2VBcmdzIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZUFyZ3Mge1xyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJQcm92ZW5hbmNlXCJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRhcmdldCByZWZlcmVuY2VzIGFyZSB1c3VhbGx5IHZlcnNpb24gc3BlY2lmaWMsIGJ1dCBtaWdodCBub3QgYmUsIGlmIGEgdmVyc2lvbiBoYXMgbm90IGJlZW4gYXNzaWduZWQgb3IgaWYgdGhlIHByb3ZlbmFuY2UgaW5mb3JtYXRpb24gaXMgcGFydCBvZiB0aGUgc2V0IG9mIHJlc291cmNlcyBiZWluZyBtYWludGFpbmVkIChpLmUuIGEgZG9jdW1lbnQpLiBXaGVuIHVzaW5nIHRoZSBSRVNUZnVsIEFQSSwgdGhlIGlkZW50aXR5IG9mIHRoZSByZXNvdXJjZSBtaWdodCBub3QgYmUga25vd24gKGVzcGVjaWFsbHkgbm90IHRoZSB2ZXJzaW9uIHNwZWNpZmljIG9uZSk7IHRoZSBjbGllbnQgbWF5IGVpdGhlciBzdWJtaXQgdGhlIHJlc291cmNlIGZpcnN0LCBhbmQgdGhlbiB0aGUgcHJvdmVuYW5jZSwgb3IgaXQgbWF5IHN1Ym1pdCBib3RoIHVzaW5nIGEgc2luZ2xlIHRyYW5zYWN0aW9uLiBTZWUgdGhlIG5vdGVzIG9uIHRyYW5zYWN0aW9uIGZvciBmdXJ0aGVyIGRpc2N1c3Npb24uXHJcbiAgICovXHJcbiAgdGFyZ2V0OiBmaGlyLlJlZmVyZW5jZUFyZ3NbXXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwZXJpb2QgY2FuIGJlIGEgbGl0dGxlIGFyYml0cmFyeTsgd2hlcmUgcG9zc2libGUsIHRoZSB0aW1lIHNob3VsZCBjb3JyZXNwb25kIHRvIGh1bWFuIGFzc2Vzc21lbnQgb2YgdGhlIGFjdGl2aXR5IHRpbWUuXHJcbiAgICovXHJcbiAgb2NjdXJyZWQ/OiBmaGlyLlBlcmlvZHxmaGlyLkZoaXJEYXRlVGltZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcmlvZCBjYW4gYmUgYSBsaXR0bGUgYXJiaXRyYXJ5OyB3aGVyZSBwb3NzaWJsZSwgdGhlIHRpbWUgc2hvdWxkIGNvcnJlc3BvbmQgdG8gaHVtYW4gYXNzZXNzbWVudCBvZiB0aGUgYWN0aXZpdHkgdGltZS5cclxuICAgKi9cclxuICBvY2N1cnJlZFBlcmlvZD86IGZoaXIuUGVyaW9kQXJnc3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcmlvZCBjYW4gYmUgYSBsaXR0bGUgYXJiaXRyYXJ5OyB3aGVyZSBwb3NzaWJsZSwgdGhlIHRpbWUgc2hvdWxkIGNvcnJlc3BvbmQgdG8gaHVtYW4gYXNzZXNzbWVudCBvZiB0aGUgYWN0aXZpdHkgdGltZS5cclxuICAgKi9cclxuICBvY2N1cnJlZERhdGVUaW1lPzogZmhpci5GaGlyRGF0ZVRpbWV8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGNhbiBiZSBhIGxpdHRsZSBkaWZmZXJlbnQgZnJvbSB0aGUgdGltZSBzdGFtcCBvbiB0aGUgcmVzb3VyY2UgaWYgdGhlcmUgaXMgYSBkZWxheSBiZXR3ZWVuIHJlY29yZGluZyB0aGUgZXZlbnQgYW5kIHVwZGF0aW5nIHRoZSBwcm92ZW5hbmNlIGFuZCB0YXJnZXQgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgcmVjb3JkZWQ6IGZoaXIuRmhpckluc3RhbnR8c3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBGb3IgZXhhbXBsZTogV2hlcmUgYW4gT0F1dGggdG9rZW4gYXV0aG9yaXplcywgdGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZyb20gdGhlIE9BdXRoIHRva2VuIGlzIHBsYWNlZCBpbnRvIHRoZSBwb2xpY3kgZWxlbWVudCBXaGVyZSBhIHBvbGljeSBlbmdpbmUgKGUuZy4gWEFDTUwpIGhvbGRzIHBvbGljeSBsb2dpYywgdGhlIHVuaXF1ZSBwb2xpY3kgaWRlbnRpZmllciBpcyBwbGFjZWQgaW50byB0aGUgcG9saWN5IGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcG9saWN5PzogZmhpci5GaGlyVXJpW118c3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXJlIHRoZSBhY3Rpdml0eSBvY2N1cnJlZCwgaWYgcmVsZXZhbnQuXHJcbiAgICovXHJcbiAgbG9jYXRpb24/OiBmaGlyLlJlZmVyZW5jZUFyZ3N8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZWFzb24gdGhhdCB0aGUgYWN0aXZpdHkgd2FzIHRha2luZyBwbGFjZS5cclxuICAgKi9cclxuICByZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdEFyZ3NbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQW4gYWN0aXZpdHkgaXMgc29tZXRoaW5nIHRoYXQgb2NjdXJzIG92ZXIgYSBwZXJpb2Qgb2YgdGltZSBhbmQgYWN0cyB1cG9uIG9yIHdpdGggZW50aXRpZXM7IGl0IG1heSBpbmNsdWRlIGNvbnN1bWluZywgcHJvY2Vzc2luZywgdHJhbnNmb3JtaW5nLCBtb2RpZnlpbmcsIHJlbG9jYXRpbmcsIHVzaW5nLCBvciBnZW5lcmF0aW5nIGVudGl0aWVzLlxyXG4gICAqL1xyXG4gIGFjdGl2aXR5PzogZmhpci5Db2RlYWJsZUNvbmNlcHRBcmdzfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTZXZlcmFsIGFnZW50cyBtYXkgYmUgYXNzb2NpYXRlZCAoaS5lLiBoYXMgc29tZSByZXNwb25zaWJpbGl0eSBmb3IgYW4gYWN0aXZpdHkpIHdpdGggYW4gYWN0aXZpdHkgYW5kIHZpY2UtdmVyc2EuXHJcbiAgICovXHJcbiAgYWdlbnQ6IGZoaXIuUHJvdmVuYW5jZUFnZW50QXJnc1tdfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQW4gZW50aXR5IHVzZWQgaW4gdGhpcyBhY3Rpdml0eS5cclxuICAgKi9cclxuICBlbnRpdHk/OiBmaGlyLlByb3ZlbmFuY2VFbnRpdHlBcmdzW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgZGlnaXRhbCBzaWduYXR1cmUgb24gdGhlIHRhcmdldCBSZWZlcmVuY2UocykuIFRoZSBzaWduZXIgc2hvdWxkIG1hdGNoIGEgUHJvdmVuYW5jZS5hZ2VudC4gVGhlIHB1cnBvc2Ugb2YgdGhlIHNpZ25hdHVyZSBpcyBpbmRpY2F0ZWQuXHJcbiAgICovXHJcbiAgc2lnbmF0dXJlPzogZmhpci5TaWduYXR1cmVBcmdzW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogUHJvdmVuYW5jZSBvZiBhIHJlc291cmNlIGlzIGEgcmVjb3JkIHRoYXQgZGVzY3JpYmVzIGVudGl0aWVzIGFuZCBwcm9jZXNzZXMgaW52b2x2ZWQgaW4gcHJvZHVjaW5nIGFuZCBkZWxpdmVyaW5nIG9yIG90aGVyd2lzZSBpbmZsdWVuY2luZyB0aGF0IHJlc291cmNlLiBQcm92ZW5hbmNlIHByb3ZpZGVzIGEgY3JpdGljYWwgZm91bmRhdGlvbiBmb3IgYXNzZXNzaW5nIGF1dGhlbnRpY2l0eSwgZW5hYmxpbmcgdHJ1c3QsIGFuZCBhbGxvd2luZyByZXByb2R1Y2liaWxpdHkuIFByb3ZlbmFuY2UgYXNzZXJ0aW9ucyBhcmUgYSBmb3JtIG9mIGNvbnRleHR1YWwgbWV0YWRhdGEgYW5kIGNhbiB0aGVtc2VsdmVzIGJlY29tZSBpbXBvcnRhbnQgcmVjb3JkcyB3aXRoIHRoZWlyIG93biBwcm92ZW5hbmNlLiBQcm92ZW5hbmNlIHN0YXRlbWVudCBpbmRpY2F0ZXMgY2xpbmljYWwgc2lnbmlmaWNhbmNlIGluIHRlcm1zIG9mIGNvbmZpZGVuY2UgaW4gYXV0aGVudGljaXR5LCByZWxpYWJpbGl0eSwgYW5kIHRydXN0d29ydGhpbmVzcywgaW50ZWdyaXR5LCBhbmQgc3RhZ2UgaW4gbGlmZWN5Y2xlIChlLmcuIERvY3VtZW50IENvbXBsZXRpb24gLSBoYXMgdGhlIGFydGlmYWN0IGJlZW4gbGVnYWxseSBhdXRoZW50aWNhdGVkKSwgYWxsIG9mIHdoaWNoIG1heSBpbXBhY3Qgc2VjdXJpdHksIHByaXZhY3ksIGFuZCB0cnVzdCBwb2xpY2llcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcm92ZW5hbmNlIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7XHJcbiAgLyoqXHJcbiAgICogTWFwcGluZyBvZiB0aGlzIGRhdGF0eXBlIHRvIGEgRkhJUiBlcXVpdmFsZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSByZWFkb25seSBfZnRzX2RhdGFUeXBlOnN0cmluZyA9ICdQcm92ZW5hbmNlJztcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzb3VyY2VUeXBlOiBcIlByb3ZlbmFuY2VcIjtcclxuICAvKipcclxuICAgKiBUYXJnZXQgcmVmZXJlbmNlcyBhcmUgdXN1YWxseSB2ZXJzaW9uIHNwZWNpZmljLCBidXQgbWlnaHQgbm90IGJlLCBpZiBhIHZlcnNpb24gaGFzIG5vdCBiZWVuIGFzc2lnbmVkIG9yIGlmIHRoZSBwcm92ZW5hbmNlIGluZm9ybWF0aW9uIGlzIHBhcnQgb2YgdGhlIHNldCBvZiByZXNvdXJjZXMgYmVpbmcgbWFpbnRhaW5lZCAoaS5lLiBhIGRvY3VtZW50KS4gV2hlbiB1c2luZyB0aGUgUkVTVGZ1bCBBUEksIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVzb3VyY2UgbWlnaHQgbm90IGJlIGtub3duIChlc3BlY2lhbGx5IG5vdCB0aGUgdmVyc2lvbiBzcGVjaWZpYyBvbmUpOyB0aGUgY2xpZW50IG1heSBlaXRoZXIgc3VibWl0IHRoZSByZXNvdXJjZSBmaXJzdCwgYW5kIHRoZW4gdGhlIHByb3ZlbmFuY2UsIG9yIGl0IG1heSBzdWJtaXQgYm90aCB1c2luZyBhIHNpbmdsZSB0cmFuc2FjdGlvbi4gU2VlIHRoZSBub3RlcyBvbiB0cmFuc2FjdGlvbiBmb3IgZnVydGhlciBkaXNjdXNzaW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0YXJnZXQ6IGZoaXIuUmVmZXJlbmNlW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHBlcmlvZCBjYW4gYmUgYSBsaXR0bGUgYXJiaXRyYXJ5OyB3aGVyZSBwb3NzaWJsZSwgdGhlIHRpbWUgc2hvdWxkIGNvcnJlc3BvbmQgdG8gaHVtYW4gYXNzZXNzbWVudCBvZiB0aGUgYWN0aXZpdHkgdGltZS5cclxuICAgKi9cclxuICBwdWJsaWMgb2NjdXJyZWQ/OiAoZmhpci5QZXJpb2R8Zmhpci5GaGlyRGF0ZVRpbWUpfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbnRlcm5hbCBmbGFnIHRvIHByb3Blcmx5IHNlcmlhbGl6ZSBjaG9pY2UtdHlwZSBlbGVtZW50IFByb3ZlbmFuY2Uub2NjdXJyZWRbeF1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9mdHNfb2NjdXJyZWRJc0Nob2ljZTp0cnVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBUaGlzIGNhbiBiZSBhIGxpdHRsZSBkaWZmZXJlbnQgZnJvbSB0aGUgdGltZSBzdGFtcCBvbiB0aGUgcmVzb3VyY2UgaWYgdGhlcmUgaXMgYSBkZWxheSBiZXR3ZWVuIHJlY29yZGluZyB0aGUgZXZlbnQgYW5kIHVwZGF0aW5nIHRoZSBwcm92ZW5hbmNlIGFuZCB0YXJnZXQgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHJlY29yZGVkOiBmaGlyLkZoaXJJbnN0YW50fG51bGw7XHJcbiAgLyoqXHJcbiAgICogRm9yIGV4YW1wbGU6IFdoZXJlIGFuIE9BdXRoIHRva2VuIGF1dGhvcml6ZXMsIHRoZSB1bmlxdWUgaWRlbnRpZmllciBmcm9tIHRoZSBPQXV0aCB0b2tlbiBpcyBwbGFjZWQgaW50byB0aGUgcG9saWN5IGVsZW1lbnQgV2hlcmUgYSBwb2xpY3kgZW5naW5lIChlLmcuIFhBQ01MKSBob2xkcyBwb2xpY3kgbG9naWMsIHRoZSB1bmlxdWUgcG9saWN5IGlkZW50aWZpZXIgaXMgcGxhY2VkIGludG8gdGhlIHBvbGljeSBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwb2xpY3k6IGZoaXIuRmhpclVyaVtdO1xyXG4gIC8qKlxyXG4gICAqIFdoZXJlIHRoZSBhY3Rpdml0eSBvY2N1cnJlZCwgaWYgcmVsZXZhbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGxvY2F0aW9uPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZWFzb24gdGhhdCB0aGUgYWN0aXZpdHkgd2FzIHRha2luZyBwbGFjZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVhc29uOiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdO1xyXG4gIC8qKlxyXG4gICAqIEFuIGFjdGl2aXR5IGlzIHNvbWV0aGluZyB0aGF0IG9jY3VycyBvdmVyIGEgcGVyaW9kIG9mIHRpbWUgYW5kIGFjdHMgdXBvbiBvciB3aXRoIGVudGl0aWVzOyBpdCBtYXkgaW5jbHVkZSBjb25zdW1pbmcsIHByb2Nlc3NpbmcsIHRyYW5zZm9ybWluZywgbW9kaWZ5aW5nLCByZWxvY2F0aW5nLCB1c2luZywgb3IgZ2VuZXJhdGluZyBlbnRpdGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgYWN0aXZpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2V2ZXJhbCBhZ2VudHMgbWF5IGJlIGFzc29jaWF0ZWQgKGkuZS4gaGFzIHNvbWUgcmVzcG9uc2liaWxpdHkgZm9yIGFuIGFjdGl2aXR5KSB3aXRoIGFuIGFjdGl2aXR5IGFuZCB2aWNlLXZlcnNhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZ2VudDogZmhpci5Qcm92ZW5hbmNlQWdlbnRbXTtcclxuICAvKipcclxuICAgKiBBbiBlbnRpdHkgdXNlZCBpbiB0aGlzIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbnRpdHk6IGZoaXIuUHJvdmVuYW5jZUVudGl0eVtdO1xyXG4gIC8qKlxyXG4gICAqIEEgZGlnaXRhbCBzaWduYXR1cmUgb24gdGhlIHRhcmdldCBSZWZlcmVuY2UocykuIFRoZSBzaWduZXIgc2hvdWxkIG1hdGNoIGEgUHJvdmVuYW5jZS5hZ2VudC4gVGhlIHB1cnBvc2Ugb2YgdGhlIHNpZ25hdHVyZSBpcyBpbmRpY2F0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHNpZ25hdHVyZTogZmhpci5TaWduYXR1cmVbXTtcclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBQcm92ZW5hbmNlIC0gaW5pdGlhbGl6ZXMgYW55IHJlcXVpcmVkIGVsZW1lbnRzIHRvIG51bGwgaWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc291cmNlOlBhcnRpYWw8UHJvdmVuYW5jZUFyZ3M+ID0ge30sIG9wdGlvbnM6Zmhpci5GaGlyQ29uc3RydWN0b3JPcHRpb25zID0ge30pIHtcclxuICAgIHN1cGVyKHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnJlc291cmNlVHlwZSA9ICdQcm92ZW5hbmNlJztcclxuICAgIGlmIChzb3VyY2VbJ3RhcmdldCddKSB7IHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5tYXAoKHgpID0+IG5ldyBmaGlyLlJlZmVyZW5jZSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnRhcmdldCA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydvY2N1cnJlZCddKSB7IHRoaXMub2NjdXJyZWQgPSBzb3VyY2Uub2NjdXJyZWQ7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnb2NjdXJyZWRQZXJpb2QnXSkgeyB0aGlzLm9jY3VycmVkID0gbmV3IGZoaXIuUGVyaW9kKHNvdXJjZS5vY2N1cnJlZFBlcmlvZCk7IH1cclxuICAgIGVsc2UgaWYgKHNvdXJjZVsnb2NjdXJyZWREYXRlVGltZSddKSB7IHRoaXMub2NjdXJyZWQgPSBuZXcgZmhpci5GaGlyRGF0ZVRpbWUoe3ZhbHVlOiBzb3VyY2Uub2NjdXJyZWREYXRlVGltZX0pOyB9XHJcbiAgICBpZiAoc291cmNlWydyZWNvcmRlZCddKSB7IHRoaXMucmVjb3JkZWQgPSBuZXcgZmhpci5GaGlySW5zdGFudCh7dmFsdWU6IHNvdXJjZS5yZWNvcmRlZH0pOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5yZWNvcmRlZCA9IG51bGw7IH1cclxuICAgIGlmIChzb3VyY2VbJ3BvbGljeSddKSB7IHRoaXMucG9saWN5ID0gc291cmNlLnBvbGljeS5tYXAoKHgpID0+IG5ldyBmaGlyLkZoaXJVcmkoe3ZhbHVlOiB4fSkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5wb2xpY3kgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnbG9jYXRpb24nXSkgeyB0aGlzLmxvY2F0aW9uID0gbmV3IGZoaXIuUmVmZXJlbmNlKHNvdXJjZS5sb2NhdGlvbik7IH1cclxuICAgIGlmIChzb3VyY2VbJ3JlYXNvbiddKSB7IHRoaXMucmVhc29uID0gc291cmNlLnJlYXNvbi5tYXAoKHgpID0+IG5ldyBmaGlyLkNvZGVhYmxlQ29uY2VwdCh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLnJlYXNvbiA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydhY3Rpdml0eSddKSB7IHRoaXMuYWN0aXZpdHkgPSBuZXcgZmhpci5Db2RlYWJsZUNvbmNlcHQoc291cmNlLmFjdGl2aXR5KTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnYWdlbnQnXSkgeyB0aGlzLmFnZW50ID0gc291cmNlLmFnZW50Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUHJvdmVuYW5jZUFnZW50KHgpKTsgfVxyXG4gICAgZWxzZSB7IHRoaXMuYWdlbnQgPSBbXTsgfVxyXG4gICAgaWYgKHNvdXJjZVsnZW50aXR5J10pIHsgdGhpcy5lbnRpdHkgPSBzb3VyY2UuZW50aXR5Lm1hcCgoeCkgPT4gbmV3IGZoaXIuUHJvdmVuYW5jZUVudGl0eSh4KSk7IH1cclxuICAgIGVsc2UgeyB0aGlzLmVudGl0eSA9IFtdOyB9XHJcbiAgICBpZiAoc291cmNlWydzaWduYXR1cmUnXSkgeyB0aGlzLnNpZ25hdHVyZSA9IHNvdXJjZS5zaWduYXR1cmUubWFwKCh4KSA9PiBuZXcgZmhpci5TaWduYXR1cmUoeCkpOyB9XHJcbiAgICBlbHNlIHsgdGhpcy5zaWduYXR1cmUgPSBbXTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiBFeHRlbnNpYmxlLWJvdW5kIFZhbHVlIFNldCBmb3IgcmVhc29uIChQcm92ZW5hbmNlLnJlYXNvbilcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCByZWFzb25FeHRlbnNpYmxlQ29kaW5ncygpIHtcclxuICAgIHJldHVybiBWM1B1cnBvc2VPZlVzZUNvZGluZ3M7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEV4dGVuc2libGUtYm91bmQgVmFsdWUgU2V0IGZvciBhY3Rpdml0eSAoUHJvdmVuYW5jZS5hY3Rpdml0eSlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldCBhY3Rpdml0eUV4dGVuc2libGVDb2RpbmdzKCkge1xyXG4gICAgcmV0dXJuIFByb3ZlbmFuY2VBY3Rpdml0eVR5cGVDb2RpbmdzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0byBwZXJmb3JtIGJhc2ljIG1vZGVsIHZhbGlkYXRpb24gKGUuZy4sIGNoZWNrIGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZSBwcmVzZW50KS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZG9Nb2RlbFZhbGlkYXRpb24oKTpmaGlyLkZ0c0lzc3VlW10ge1xyXG4gICAgbGV0IGlzc3VlczpmaGlyLkZ0c0lzc3VlW10gPSBzdXBlci5kb01vZGVsVmFsaWRhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzWydyZXNvdXJjZVR5cGUnXSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgcmVzb3VyY2VUeXBlOlwiUHJvdmVuYW5jZVwiIGZoaXI6IFByb3ZlbmFuY2UucmVzb3VyY2VUeXBlOlwiUHJvdmVuYW5jZVwiJyB9KTtcclxuICAgIH1cclxuICAgIGlmICghdGhpc1sndGFyZ2V0J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHRhcmdldDpmaGlyLlJlZmVyZW5jZVtdIGZoaXI6IFByb3ZlbmFuY2UudGFyZ2V0OlJlZmVyZW5jZScgfSk7XHJcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudGFyZ2V0KSkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAnc3RydWN0dXJlJywgZGlhZ25vc3RpY3M6ICdGb3VuZCBzY2FsYXIgaW4gYXJyYXkgcHJvcGVydHkgdGFyZ2V0OmZoaXIuUmVmZXJlbmNlW10gZmhpcjogUHJvdmVuYW5jZS50YXJnZXQ6UmVmZXJlbmNlJyB9KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdyZXF1aXJlZCcsIGRpYWdub3N0aWNzOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSB0YXJnZXQ6Zmhpci5SZWZlcmVuY2VbXSBmaGlyOiBQcm92ZW5hbmNlLnRhcmdldDpSZWZlcmVuY2UnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXNbXCJ0YXJnZXRcIl0pIHsgdGhpcy50YXJnZXQuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAoIXRoaXNbJ3JlY29yZGVkJ10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IHJlY29yZGVkOmZoaXIuRmhpckluc3RhbnQgZmhpcjogUHJvdmVuYW5jZS5yZWNvcmRlZDppbnN0YW50JyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wicmVjb3JkZWRcIl0pIHsgaXNzdWVzLnB1c2goLi4udGhpcy5yZWNvcmRlZC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfVxyXG4gICAgaWYgKHRoaXNbXCJwb2xpY3lcIl0pIHsgdGhpcy5wb2xpY3kuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICBpZiAodGhpc1tcImxvY2F0aW9uXCJdKSB7IGlzc3Vlcy5wdXNoKC4uLnRoaXMubG9jYXRpb24uZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH1cclxuICAgIGlmICh0aGlzW1wicmVhc29uXCJdKSB7IHRoaXMucmVhc29uLmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJhY3Rpdml0eVwiXSkgeyBpc3N1ZXMucHVzaCguLi50aGlzLmFjdGl2aXR5LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9XHJcbiAgICBpZiAoIXRoaXNbJ2FnZW50J10pIHtcclxuICAgICAgaXNzdWVzLnB1c2goeyBzZXZlcml0eTogJ2Vycm9yJywgY29kZTogJ3JlcXVpcmVkJywgZGlhZ25vc3RpY3M6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5IGFnZW50OmZoaXIuUHJvdmVuYW5jZUFnZW50W10gZmhpcjogUHJvdmVuYW5jZS5hZ2VudDphZ2VudCcgfSk7XHJcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuYWdlbnQpKSB7XHJcbiAgICAgIGlzc3Vlcy5wdXNoKHsgc2V2ZXJpdHk6ICdlcnJvcicsIGNvZGU6ICdzdHJ1Y3R1cmUnLCBkaWFnbm9zdGljczogJ0ZvdW5kIHNjYWxhciBpbiBhcnJheSBwcm9wZXJ0eSBhZ2VudDpmaGlyLlByb3ZlbmFuY2VBZ2VudFtdIGZoaXI6IFByb3ZlbmFuY2UuYWdlbnQ6YWdlbnQnIH0pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmFnZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBpc3N1ZXMucHVzaCh7IHNldmVyaXR5OiAnZXJyb3InLCBjb2RlOiAncmVxdWlyZWQnLCBkaWFnbm9zdGljczogJ01pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgYWdlbnQ6Zmhpci5Qcm92ZW5hbmNlQWdlbnRbXSBmaGlyOiBQcm92ZW5hbmNlLmFnZW50OmFnZW50JyB9KTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzW1wiYWdlbnRcIl0pIHsgdGhpcy5hZ2VudC5mb3JFYWNoKCh4KSA9PiB7IGlzc3Vlcy5wdXNoKC4uLnguZG9Nb2RlbFZhbGlkYXRpb24oKSk7IH0pIH1cclxuICAgIGlmICh0aGlzW1wiZW50aXR5XCJdKSB7IHRoaXMuZW50aXR5LmZvckVhY2goKHgpID0+IHsgaXNzdWVzLnB1c2goLi4ueC5kb01vZGVsVmFsaWRhdGlvbigpKTsgfSkgfVxyXG4gICAgaWYgKHRoaXNbXCJzaWduYXR1cmVcIl0pIHsgdGhpcy5zaWduYXR1cmUuZm9yRWFjaCgoeCkgPT4geyBpc3N1ZXMucHVzaCguLi54LmRvTW9kZWxWYWxpZGF0aW9uKCkpOyB9KSB9XHJcbiAgICByZXR1cm4gaXNzdWVzO1xyXG4gIH1cclxufVxyXG4iXX0=