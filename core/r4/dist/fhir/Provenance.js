// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
import * as fhir from '../fhir.js';
// @ts-ignore
import { ProvenanceEntityRoleVsValidation } from '../fhirValueSets/ProvenanceEntityRoleVsValidation.js';
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export class ProvenanceAgent extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['role']) {
            this.role = source.role.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.role = [];
        }
        if (source['who']) {
            this.who = new fhir.Reference(source.who);
        }
        else {
            this.who = null;
        }
        if (source['onBehalfOf']) {
            this.onBehalfOf = new fhir.Reference(source.onBehalfOf);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Provenance.agent';
        }
        this.vOptS('type', expression);
        this.vOptA('role', expression);
        this.vReqS('who', expression);
        this.vOptS('onBehalfOf', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceAgent._fts_dataType = 'ProvenanceAgent';
/**
 * An entity used in this activity.
 */
export class ProvenanceEntity extends fhir.BackboneElement {
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['role']) {
            this.role = new fhir.FhirCode({ value: source.role });
        }
        else {
            this.role = null;
        }
        if (source['_role']) {
            if (this.role) {
                this.role.addExtendedProperties(source._role);
            }
            else {
                this.role = new fhir.FhirCode(source._role);
            }
        }
        if (source['what']) {
            this.what = new fhir.Reference(source.what);
        }
        else {
            this.what = null;
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Provenance.entity';
        }
        this.vReqSV('role', expression, 'ProvenanceEntityRole', ProvenanceEntityRoleVsValidation, 'r');
        this.vReqS('what', expression);
        this.vOptA('agent', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ProvenanceEntity._fts_dataType = 'ProvenanceEntity';
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export class Provenance extends fhir.DomainResource {
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'Provenance';
        if (source['target']) {
            this.target = source.target.map((x) => new fhir.Reference(x));
        }
        else {
            this.target = [];
        }
        if (source['occurred']) {
            this.occurred = source.occurred;
        }
        else if (source['occurredPeriod']) {
            this.occurred = new fhir.Period(source.occurredPeriod);
        }
        else if (source['occurredDateTime']) {
            this.occurred = new fhir.FhirDateTime({ value: source.occurredDateTime });
        }
        if (source['recorded']) {
            this.recorded = new fhir.FhirInstant({ value: source.recorded });
        }
        else {
            this.recorded = null;
        }
        if (source['_recorded']) {
            if (this.recorded) {
                this.recorded.addExtendedProperties(source._recorded);
            }
            else {
                this.recorded = new fhir.FhirInstant(source._recorded);
            }
        }
        if (source['policy']) {
            this.policy = source.policy.map((x) => new fhir.FhirUri({ value: x }));
        }
        else {
            this.policy = [];
        }
        if (source['_policy']) {
            source._policy.forEach((x, i) => {
                if (this.policy.length >= i) {
                    if (x) {
                        this.policy[i].addExtendedProperties(x);
                    }
                }
                else {
                    if (x) {
                        this.policy.push(new fhir.FhirUri(x));
                    }
                }
            });
        }
        if (source['location']) {
            this.location = new fhir.Reference(source.location);
        }
        if (source['reason']) {
            this.reason = source.reason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reason = [];
        }
        if (source['activity']) {
            this.activity = new fhir.CodeableConcept(source.activity);
        }
        if (source['agent']) {
            this.agent = source.agent.map((x) => new fhir.ProvenanceAgent(x));
        }
        else {
            this.agent = [];
        }
        if (source['entity']) {
            this.entity = source.entity.map((x) => new fhir.ProvenanceEntity(x));
        }
        else {
            this.entity = [];
        }
        if (source['signature']) {
            this.signature = source.signature.map((x) => new fhir.Signature(x));
        }
        else {
            this.signature = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'Provenance';
        }
        this.vReqS('resourceType', expression);
        this.vReqA('target', expression);
        this.vOptS('occurred', expression);
        this.vReqS('recorded', expression);
        this.vOptA('policy', expression);
        this.vOptS('location', expression);
        this.vOptA('reason', expression);
        this.vOptS('activity', expression);
        this.vReqA('agent', expression);
        this.vOptA('entity', expression);
        this.vOptA('signature', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
Provenance._fts_dataType = 'Provenance';
/**
 * Internal flag to properly serialize choice-type element Provenance.occurred[x]
 */
Provenance._fts_occurredIsChoice = true;
//# sourceMappingURL=data:application/json;base64,