/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ProvenanceAgentTypeCodings } from '../fhirValueSets/ProvenanceAgentTypeCodings.js';
import { ProvenanceEntityRoleCodings } from '../fhirValueSets/ProvenanceEntityRoleCodings.js';
import { V3PurposeOfUseCodings } from '../fhirValueSets/V3PurposeOfUseCodings.js';
import { ProvenanceActivityTypeCodings } from '../fhirValueSets/ProvenanceActivityTypeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Reference } from './Reference.js';
import { Period } from './Period.js';
import { FhirDateTime } from './FhirDateTime.js';
import { FhirInstant } from './FhirInstant.js';
import { FhirUri } from './FhirUri.js';
import { Signature } from './Signature.js';

// <auto-generated/>
/**
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
var ProvenanceAgent = /** @class */ (function (_super) {
    __extends(ProvenanceAgent, _super);
    /**
     * Default constructor for ProvenanceAgent - initializes any required elements to null if a value is not provided.
     */
    function ProvenanceAgent(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['role']) {
            _this.role = source.role.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.role = [];
        }
        if (source['who']) {
            _this.who = new Reference(source.who);
        }
        else {
            _this.who = null;
        }
        if (source['onBehalfOf']) {
            _this.onBehalfOf = new Reference(source.onBehalfOf);
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (Provenance.agent.type)
     */
    ProvenanceAgent.typeExtensibleCoding = function () {
        return ProvenanceAgentTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ProvenanceAgent.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["role"]) {
            this.role.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['who']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property who:fhir.Reference fhir: Provenance.agent.who:Reference', }));
        }
        if (this["who"]) {
            (_b = outcome.issue).push.apply(_b, this.who.doModelValidation().issue);
        }
        if (this["onBehalfOf"]) {
            (_c = outcome.issue).push.apply(_c, this.onBehalfOf.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ProvenanceAgent._fts_dataType = 'ProvenanceAgent';
    return ProvenanceAgent;
}(BackboneElement));
/**
 * An entity used in this activity.
 */
var ProvenanceEntity = /** @class */ (function (_super) {
    __extends(ProvenanceEntity, _super);
    /**
     * Default constructor for ProvenanceEntity - initializes any required elements to null if a value is not provided.
     */
    function ProvenanceEntity(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['role']) {
            _this.role = source.role;
        }
        else {
            _this.role = null;
        }
        if (source['what']) {
            _this.what = new Reference(source.what);
        }
        else {
            _this.what = null;
        }
        if (source['agent']) {
            _this.agent = source.agent.map(function (x) { return new ProvenanceAgent(x); });
        }
        else {
            _this.agent = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for role (Provenance.entity.role)
     */
    ProvenanceEntity.roleRequiredCoding = function () {
        return ProvenanceEntityRoleCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ProvenanceEntity.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['role']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property role:ProvenanceEntityRoleCodeType fhir: Provenance.entity.role:code', }));
        }
        if (!this['what']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property what:fhir.Reference fhir: Provenance.entity.what:Reference', }));
        }
        if (this["what"]) {
            (_a = outcome.issue).push.apply(_a, this.what.doModelValidation().issue);
        }
        if (this["agent"]) {
            this.agent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ProvenanceEntity._fts_dataType = 'ProvenanceEntity';
    return ProvenanceEntity;
}(BackboneElement));
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
var Provenance = /** @class */ (function (_super) {
    __extends(Provenance, _super);
    /**
     * Default constructor for Provenance - initializes any required elements to null if a value is not provided.
     */
    function Provenance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'Provenance';
        if (source['target']) {
            _this.target = source.target.map(function (x) { return new Reference(x); });
        }
        else {
            _this.target = [];
        }
        if (source['occurred']) {
            _this.occurred = source.occurred;
        }
        else if (source['occurredPeriod']) {
            _this.occurred = new Period(source.occurredPeriod);
        }
        else if (source['occurredDateTime']) {
            _this.occurred = new FhirDateTime({ value: source.occurredDateTime });
        }
        if (source['recorded']) {
            _this.recorded = new FhirInstant({ value: source.recorded });
        }
        else {
            _this.recorded = null;
        }
        if (source['policy']) {
            _this.policy = source.policy.map(function (x) { return new FhirUri({ value: x }); });
        }
        else {
            _this.policy = [];
        }
        if (source['location']) {
            _this.location = new Reference(source.location);
        }
        if (source['reason']) {
            _this.reason = source.reason.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reason = [];
        }
        if (source['activity']) {
            _this.activity = new CodeableConcept(source.activity);
        }
        if (source['agent']) {
            _this.agent = source.agent.map(function (x) { return new ProvenanceAgent(x); });
        }
        else {
            _this.agent = [];
        }
        if (source['entity']) {
            _this.entity = source.entity.map(function (x) { return new ProvenanceEntity(x); });
        }
        else {
            _this.entity = [];
        }
        if (source['signature']) {
            _this.signature = source.signature.map(function (x) { return new Signature(x); });
        }
        else {
            _this.signature = [];
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for reason (Provenance.reason)
     */
    Provenance.reasonExtensibleCoding = function () {
        return V3PurposeOfUseCodings;
    };
    /**
     * Extensible-bound Value Set for activity (Provenance.activity)
     */
    Provenance.activityExtensibleCoding = function () {
        return ProvenanceActivityTypeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    Provenance.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"Provenance" fhir: Provenance.resourceType:"Provenance"', }));
        }
        if (!this['target']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference', }));
        }
        else if (!Array.isArray(this.target)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property target:fhir.Reference[] fhir: Provenance.target:Reference', }));
        }
        else if (this.target.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property target:fhir.Reference[] fhir: Provenance.target:Reference', }));
        }
        if (this["target"]) {
            this.target.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['recorded']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property recorded:fhir.FhirInstant fhir: Provenance.recorded:instant', }));
        }
        if (this["recorded"]) {
            (_a = outcome.issue).push.apply(_a, this.recorded.doModelValidation().issue);
        }
        if (this["policy"]) {
            this.policy.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["location"]) {
            (_b = outcome.issue).push.apply(_b, this.location.doModelValidation().issue);
        }
        if (this["reason"]) {
            this.reason.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["activity"]) {
            (_c = outcome.issue).push.apply(_c, this.activity.doModelValidation().issue);
        }
        if (!this['agent']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', }));
        }
        else if (!Array.isArray(this.agent)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', }));
        }
        else if (this.agent.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property agent:fhir.ProvenanceAgent[] fhir: Provenance.agent:agent', }));
        }
        if (this["agent"]) {
            this.agent.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["entity"]) {
            this.entity.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["signature"]) {
            this.signature.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    Provenance._fts_dataType = 'Provenance';
    /**
     * Internal flag to properly serialize choice-type element Provenance.occurred[x]
     */
    Provenance._fts_occurredIsChoice = true;
    return Provenance;
}(DomainResource));

export { Provenance, ProvenanceAgent, ProvenanceEntity };
//# sourceMappingURL=Provenance.js.map
