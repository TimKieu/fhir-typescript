/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { MedicationStatementStatusCodings } from '../fhirValueSets/MedicationStatementStatusCodings.js';
import { MedicationStatementCategoryCodings } from '../fhirValueSets/MedicationStatementCategoryCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Identifier } from './Identifier.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Period } from './Period.js';
import { Annotation } from './Annotation.js';
import { Dosage } from './Dosage.js';

// <auto-generated/>
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.
 * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
var MedicationStatement = /** @class */ (function (_super) {
    __extends(MedicationStatement, _super);
    /**
     * Default constructor for MedicationStatement - initializes any required elements to null if a value is not provided.
     */
    function MedicationStatement(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicationStatement';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['basedOn']) {
            _this.basedOn = source.basedOn.map(function (x) { return new Reference(x); });
        }
        else {
            _this.basedOn = [];
        }
        if (source['partOf']) {
            _this.partOf = source.partOf.map(function (x) { return new Reference(x); });
        }
        else {
            _this.partOf = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['statusReason']) {
            _this.statusReason = source.statusReason.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.statusReason = [];
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['medication']) {
            _this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            _this.medication = new CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            _this.medication = new Reference(source.medicationReference);
        }
        else {
            _this.medication = null;
        }
        if (source['subject']) {
            _this.subject = new Reference(source.subject);
        }
        else {
            _this.subject = null;
        }
        if (source['context']) {
            _this.context = new Reference(source.context);
        }
        if (source['effective']) {
            _this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            _this.effective = new FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            _this.effective = new Period(source.effectivePeriod);
        }
        if (source['dateAsserted']) {
            _this.dateAsserted = new FhirDateTime({ value: source.dateAsserted });
        }
        if (source['informationSource']) {
            _this.informationSource = new Reference(source.informationSource);
        }
        if (source['derivedFrom']) {
            _this.derivedFrom = source.derivedFrom.map(function (x) { return new Reference(x); });
        }
        else {
            _this.derivedFrom = [];
        }
        if (source['reasonCode']) {
            _this.reasonCode = source.reasonCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.reasonCode = [];
        }
        if (source['reasonReference']) {
            _this.reasonReference = source.reasonReference.map(function (x) { return new Reference(x); });
        }
        else {
            _this.reasonReference = [];
        }
        if (source['note']) {
            _this.note = source.note.map(function (x) { return new Annotation(x); });
        }
        else {
            _this.note = [];
        }
        if (source['dosage']) {
            _this.dosage = source.dosage.map(function (x) { return new Dosage(x); });
        }
        else {
            _this.dosage = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (MedicationStatement.status)
     */
    MedicationStatement.statusRequiredCoding = function () {
        return MedicationStatementStatusCodings;
    };
    /**
     * Preferred-bound Value Set for category (MedicationStatement.category)
     */
    MedicationStatement.categoryPreferredCoding = function () {
        return MedicationStatementCategoryCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicationStatement.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicationStatement" fhir: MedicationStatement.resourceType:"MedicationStatement"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["partOf"]) {
            this.partOf.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:MedicationStatementStatusCodeType fhir: MedicationStatement.status:code', }));
        }
        if (this["statusReason"]) {
            this.statusReason.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (!this['medication']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property medication: fhir: MedicationStatement.medication[x]:', }));
        }
        if (!this['subject']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property subject:fhir.Reference fhir: MedicationStatement.subject:Reference', }));
        }
        if (this["subject"]) {
            (_b = outcome.issue).push.apply(_b, this.subject.doModelValidation().issue);
        }
        if (this["context"]) {
            (_c = outcome.issue).push.apply(_c, this.context.doModelValidation().issue);
        }
        if (this["dateAsserted"]) {
            (_d = outcome.issue).push.apply(_d, this.dateAsserted.doModelValidation().issue);
        }
        if (this["informationSource"]) {
            (_e = outcome.issue).push.apply(_e, this.informationSource.doModelValidation().issue);
        }
        if (this["derivedFrom"]) {
            this.derivedFrom.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["note"]) {
            this.note.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["dosage"]) {
            this.dosage.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicationStatement._fts_dataType = 'MedicationStatement';
    /**
     * Internal flag to properly serialize choice-type element MedicationStatement.medication[x]
     */
    MedicationStatement._fts_medicationIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element MedicationStatement.effective[x]
     */
    MedicationStatement._fts_effectiveIsChoice = true;
    return MedicationStatement;
}(DomainResource));

export { MedicationStatement };
//# sourceMappingURL=MedicationStatement.js.map
