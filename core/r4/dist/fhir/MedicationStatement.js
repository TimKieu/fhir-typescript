// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicationStatement
import * as fhir from '../fhir.js';
// @ts-ignore
import { MedicationStatementStatusCodes } from '../fhirValueSets/MedicationStatementStatusCodes.js';
// @ts-ignore
import { MedicationStatementCategoryCodings, } from '../fhirValueSets/MedicationStatementCategoryCodings.js';
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.
 * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
export class MedicationStatement extends fhir.DomainResource {
    /**
     * Default constructor for MedicationStatement - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicationStatement';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['basedOn']) {
            this.basedOn = source.basedOn.map((x) => new fhir.Reference(x));
        }
        else {
            this.basedOn = [];
        }
        if (source['partOf']) {
            this.partOf = source.partOf.map((x) => new fhir.Reference(x));
        }
        else {
            this.partOf = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['_status']) {
            if (this.status) {
                this.status.addExtendedProperties(source._status);
            }
            else {
                this.status = new fhir.FhirCode(source._status);
            }
        }
        if (source['statusReason']) {
            this.statusReason = source.statusReason.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.statusReason = [];
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['medication']) {
            this.medication = source.medication;
        }
        else if (source['medicationCodeableConcept']) {
            this.medication = new fhir.CodeableConcept(source.medicationCodeableConcept);
        }
        else if (source['medicationReference']) {
            this.medication = new fhir.Reference(source.medicationReference);
        }
        else {
            this.medication = null;
        }
        if (source['subject']) {
            this.subject = new fhir.Reference(source.subject);
        }
        else {
            this.subject = null;
        }
        if (source['context']) {
            this.context = new fhir.Reference(source.context);
        }
        if (source['effective']) {
            this.effective = source.effective;
        }
        else if (source['effectiveDateTime']) {
            this.effective = new fhir.FhirDateTime({ value: source.effectiveDateTime });
        }
        else if (source['effectivePeriod']) {
            this.effective = new fhir.Period(source.effectivePeriod);
        }
        if (source['dateAsserted']) {
            this.dateAsserted = new fhir.FhirDateTime({ value: source.dateAsserted });
        }
        if (source['_dateAsserted']) {
            if (this.dateAsserted) {
                this.dateAsserted.addExtendedProperties(source._dateAsserted);
            }
            else {
                this.dateAsserted = new fhir.FhirDateTime(source._dateAsserted);
            }
        }
        if (source['informationSource']) {
            this.informationSource = new fhir.Reference(source.informationSource);
        }
        if (source['derivedFrom']) {
            this.derivedFrom = source.derivedFrom.map((x) => new fhir.Reference(x));
        }
        else {
            this.derivedFrom = [];
        }
        if (source['reasonCode']) {
            this.reasonCode = source.reasonCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.reasonCode = [];
        }
        if (source['reasonReference']) {
            this.reasonReference = source.reasonReference.map((x) => new fhir.Reference(x));
        }
        else {
            this.reasonReference = [];
        }
        if (source['note']) {
            this.note = source.note.map((x) => new fhir.Annotation(x));
        }
        else {
            this.note = [];
        }
        if (source['dosage']) {
            this.dosage = source.dosage.map((x) => new fhir.Dosage(x));
        }
        else {
            this.dosage = [];
        }
    }
    /**
     * Required-bound Value Set for status (MedicationStatement.status)
     */
    static get statusRequiredCodes() {
        return MedicationStatementStatusCodes;
    }
    /**
     * Preferred-bound Value Set for category (MedicationStatement.category)
     */
    static get categoryPreferredCodings() {
        return MedicationStatementCategoryCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MedicationStatement" fhir: MedicationStatement.resourceType:"MedicationStatement"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["basedOn"]) {
            this.basedOn.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["partOf"]) {
            this.partOf.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<MedicationStatementStatusCodeType> fhir: MedicationStatement.status:code' });
        }
        if (this['status'] && (!Object.values(MedicationStatementStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<MedicationStatementStatusCodeType> fhir: MedicationStatement.status:code Required binding to: MedicationStatementStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (this["statusReason"]) {
            this.statusReason.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (!this['medication']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property medication: fhir: MedicationStatement.medication[x]:' });
        }
        if (!this['subject']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property subject:fhir.Reference fhir: MedicationStatement.subject:Reference' });
        }
        if (this["subject"]) {
            issues.push(...this.subject.doModelValidation());
        }
        if (this["context"]) {
            issues.push(...this.context.doModelValidation());
        }
        if (this["dateAsserted"]) {
            issues.push(...this.dateAsserted.doModelValidation());
        }
        if (this["informationSource"]) {
            issues.push(...this.informationSource.doModelValidation());
        }
        if (this["derivedFrom"]) {
            this.derivedFrom.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonCode"]) {
            this.reasonCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["reasonReference"]) {
            this.reasonReference.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["note"]) {
            this.note.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["dosage"]) {
            this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicationStatement._fts_dataType = 'MedicationStatement';
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.medication[x]
 */
MedicationStatement._fts_medicationIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element MedicationStatement.effective[x]
 */
MedicationStatement._fts_effectiveIsChoice = true;
//# sourceMappingURL=data:application/json;base64,