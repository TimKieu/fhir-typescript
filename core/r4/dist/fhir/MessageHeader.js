/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { ResponseCodeCodings } from '../fhirValueSets/ResponseCodeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { BackboneElement } from './BackboneElement.js';
import { DomainResource } from './DomainResource.js';
import { FhirString } from './FhirString.js';
import { Reference } from './Reference.js';
import { FhirUrl } from './FhirUrl.js';
import { ContactPoint } from './ContactPoint.js';
import { FhirId } from './FhirId.js';
import { Coding } from './Coding.js';
import { FhirUri } from './FhirUri.js';
import { CodeableConcept } from './CodeableConcept.js';
import { FhirCanonical } from './FhirCanonical.js';

// <auto-generated/>
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
var MessageHeaderDestination = /** @class */ (function (_super) {
    __extends(MessageHeaderDestination, _super);
    /**
     * Default constructor for MessageHeaderDestination - initializes any required elements to null if a value is not provided.
     */
    function MessageHeaderDestination(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['target']) {
            _this.target = new Reference(source.target);
        }
        if (source['endpoint']) {
            _this.endpoint = new FhirUrl({ value: source.endpoint });
        }
        else {
            _this.endpoint = null;
        }
        if (source['receiver']) {
            _this.receiver = new Reference(source.receiver);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MessageHeaderDestination.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["target"]) {
            (_b = outcome.issue).push.apply(_b, this.target.doModelValidation().issue);
        }
        if (!this['endpoint']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property endpoint:fhir.FhirUrl fhir: MessageHeader.destination.endpoint:url', }));
        }
        if (this["endpoint"]) {
            (_c = outcome.issue).push.apply(_c, this.endpoint.doModelValidation().issue);
        }
        if (this["receiver"]) {
            (_d = outcome.issue).push.apply(_d, this.receiver.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MessageHeaderDestination._fts_dataType = 'MessageHeaderDestination';
    return MessageHeaderDestination;
}(BackboneElement));
/**
 * The source application from which this message originated.
 */
var MessageHeaderSource = /** @class */ (function (_super) {
    __extends(MessageHeaderSource, _super);
    /**
     * Default constructor for MessageHeaderSource - initializes any required elements to null if a value is not provided.
     */
    function MessageHeaderSource(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['software']) {
            _this.software = new FhirString({ value: source.software });
        }
        if (source['version']) {
            _this.version = new FhirString({ value: source.version });
        }
        if (source['contact']) {
            _this.contact = new ContactPoint(source.contact);
        }
        if (source['endpoint']) {
            _this.endpoint = new FhirUrl({ value: source.endpoint });
        }
        else {
            _this.endpoint = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MessageHeaderSource.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["name"]) {
            (_a = outcome.issue).push.apply(_a, this.name.doModelValidation().issue);
        }
        if (this["software"]) {
            (_b = outcome.issue).push.apply(_b, this.software.doModelValidation().issue);
        }
        if (this["version"]) {
            (_c = outcome.issue).push.apply(_c, this.version.doModelValidation().issue);
        }
        if (this["contact"]) {
            (_d = outcome.issue).push.apply(_d, this.contact.doModelValidation().issue);
        }
        if (!this['endpoint']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property endpoint:fhir.FhirUrl fhir: MessageHeader.source.endpoint:url', }));
        }
        if (this["endpoint"]) {
            (_e = outcome.issue).push.apply(_e, this.endpoint.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MessageHeaderSource._fts_dataType = 'MessageHeaderSource';
    return MessageHeaderSource;
}(BackboneElement));
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
var MessageHeaderResponse = /** @class */ (function (_super) {
    __extends(MessageHeaderResponse, _super);
    /**
     * Default constructor for MessageHeaderResponse - initializes any required elements to null if a value is not provided.
     */
    function MessageHeaderResponse(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['identifier']) {
            _this.identifier = new FhirId({ value: source.identifier });
        }
        else {
            _this.identifier = null;
        }
        if (source['code']) {
            _this.code = source.code;
        }
        else {
            _this.code = null;
        }
        if (source['details']) {
            _this.details = new Reference(source.details);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for code (MessageHeader.response.code)
     */
    MessageHeaderResponse.codeRequiredCoding = function () {
        return ResponseCodeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MessageHeaderResponse.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['identifier']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property identifier:fhir.FhirId fhir: MessageHeader.response.identifier:id', }));
        }
        if (this["identifier"]) {
            (_a = outcome.issue).push.apply(_a, this.identifier.doModelValidation().issue);
        }
        if (!this['code']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property code:ResponseCodeCodeType fhir: MessageHeader.response.code:code', }));
        }
        if (this["details"]) {
            (_b = outcome.issue).push.apply(_b, this.details.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MessageHeaderResponse._fts_dataType = 'MessageHeaderResponse';
    return MessageHeaderResponse;
}(BackboneElement));
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
var MessageHeader = /** @class */ (function (_super) {
    __extends(MessageHeader, _super);
    /**
     * Default constructor for MessageHeader - initializes any required elements to null if a value is not provided.
     */
    function MessageHeader(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MessageHeader';
        if (source['event']) {
            _this.event = source.event;
        }
        else if (source['eventCoding']) {
            _this.event = new Coding(source.eventCoding);
        }
        else if (source['eventUri']) {
            _this.event = new FhirUri({ value: source.eventUri });
        }
        else {
            _this.event = null;
        }
        if (source['destination']) {
            _this.destination = source.destination.map(function (x) { return new MessageHeaderDestination(x); });
        }
        else {
            _this.destination = [];
        }
        if (source['sender']) {
            _this.sender = new Reference(source.sender);
        }
        if (source['enterer']) {
            _this.enterer = new Reference(source.enterer);
        }
        if (source['author']) {
            _this.author = new Reference(source.author);
        }
        if (source['source']) {
            _this.source = new MessageHeaderSource(source.source);
        }
        else {
            _this.source = null;
        }
        if (source['responsible']) {
            _this.responsible = new Reference(source.responsible);
        }
        if (source['reason']) {
            _this.reason = new CodeableConcept(source.reason);
        }
        if (source['response']) {
            _this.response = new MessageHeaderResponse(source.response);
        }
        if (source['focus']) {
            _this.focus = source.focus.map(function (x) { return new Reference(x); });
        }
        else {
            _this.focus = [];
        }
        if (source['definition']) {
            _this.definition = new FhirCanonical({ value: source.definition });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MessageHeader.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MessageHeader" fhir: MessageHeader.resourceType:"MessageHeader"', }));
        }
        if (!this['event']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property event: fhir: MessageHeader.event[x]:', }));
        }
        if (this["destination"]) {
            this.destination.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["sender"]) {
            (_a = outcome.issue).push.apply(_a, this.sender.doModelValidation().issue);
        }
        if (this["enterer"]) {
            (_b = outcome.issue).push.apply(_b, this.enterer.doModelValidation().issue);
        }
        if (this["author"]) {
            (_c = outcome.issue).push.apply(_c, this.author.doModelValidation().issue);
        }
        if (!this['source']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property source:fhir.MessageHeaderSource fhir: MessageHeader.source:source', }));
        }
        if (this["source"]) {
            (_d = outcome.issue).push.apply(_d, this.source.doModelValidation().issue);
        }
        if (this["responsible"]) {
            (_e = outcome.issue).push.apply(_e, this.responsible.doModelValidation().issue);
        }
        if (this["reason"]) {
            (_f = outcome.issue).push.apply(_f, this.reason.doModelValidation().issue);
        }
        if (this["response"]) {
            (_g = outcome.issue).push.apply(_g, this.response.doModelValidation().issue);
        }
        if (this["focus"]) {
            this.focus.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["definition"]) {
            (_h = outcome.issue).push.apply(_h, this.definition.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MessageHeader._fts_dataType = 'MessageHeader';
    /**
     * Internal flag to properly serialize choice-type element MessageHeader.event[x]
     */
    MessageHeader._fts_eventIsChoice = true;
    return MessageHeader;
}(DomainResource));

export { MessageHeader, MessageHeaderDestination, MessageHeaderResponse, MessageHeaderSource };
//# sourceMappingURL=MessageHeader.js.map
