// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageHeader
import * as fhir from '../fhir.js';
// @ts-ignore
import { ResponseCodeCodes } from '../fhirValueSets/ResponseCodeCodes.js';
/**
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export class MessageHeaderDestination extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderDestination - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['target']) {
            this.target = new fhir.Reference(source.target);
        }
        if (source['endpoint']) {
            this.endpoint = new fhir.FhirUrl({ value: source.endpoint });
        }
        else {
            this.endpoint = null;
        }
        if (source['receiver']) {
            this.receiver = new fhir.Reference(source.receiver);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["target"]) {
            issues.push(...this.target.doModelValidation());
        }
        if (!this['endpoint']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property endpoint:fhir.FhirUrl fhir: MessageHeader.destination.endpoint:url' });
        }
        if (this["endpoint"]) {
            issues.push(...this.endpoint.doModelValidation());
        }
        if (this["receiver"]) {
            issues.push(...this.receiver.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderDestination._fts_dataType = 'MessageHeaderDestination';
/**
 * The source application from which this message originated.
 */
export class MessageHeaderSource extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderSource - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['software']) {
            this.software = new fhir.FhirString({ value: source.software });
        }
        if (source['version']) {
            this.version = new fhir.FhirString({ value: source.version });
        }
        if (source['contact']) {
            this.contact = new fhir.ContactPoint(source.contact);
        }
        if (source['endpoint']) {
            this.endpoint = new fhir.FhirUrl({ value: source.endpoint });
        }
        else {
            this.endpoint = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["software"]) {
            issues.push(...this.software.doModelValidation());
        }
        if (this["version"]) {
            issues.push(...this.version.doModelValidation());
        }
        if (this["contact"]) {
            issues.push(...this.contact.doModelValidation());
        }
        if (!this['endpoint']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property endpoint:fhir.FhirUrl fhir: MessageHeader.source.endpoint:url' });
        }
        if (this["endpoint"]) {
            issues.push(...this.endpoint.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderSource._fts_dataType = 'MessageHeaderSource';
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export class MessageHeaderResponse extends fhir.BackboneElement {
    /**
     * Default constructor for MessageHeaderResponse - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['identifier']) {
            this.identifier = new fhir.FhirId({ value: source.identifier });
        }
        else {
            this.identifier = null;
        }
        if (source['code']) {
            this.code = new fhir.FhirCode({ value: source.code });
        }
        else {
            this.code = null;
        }
        if (source['details']) {
            this.details = new fhir.Reference(source.details);
        }
    }
    /**
     * Required-bound Value Set for code (MessageHeader.response.code)
     */
    static get codeRequiredCodes() {
        return ResponseCodeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['identifier']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property identifier:fhir.FhirId fhir: MessageHeader.response.identifier:id' });
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        if (!this['code']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.FhirCode<ResponseCodeCodeType> fhir: MessageHeader.response.code:code' });
        }
        if (this['code'] && (!Object.values(ResponseCodeCodes).includes(this.code))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property code:fhir.FhirCode<ResponseCodeCodeType> fhir: MessageHeader.response.code:code Required binding to: ResponseCode' });
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["details"]) {
            issues.push(...this.details.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeaderResponse._fts_dataType = 'MessageHeaderResponse';
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export class MessageHeader extends fhir.DomainResource {
    /**
     * Default constructor for MessageHeader - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MessageHeader';
        if (source['event']) {
            this.event = source.event;
        }
        else if (source['eventCoding']) {
            this.event = new fhir.Coding(source.eventCoding);
        }
        else if (source['eventUri']) {
            this.event = new fhir.FhirUri({ value: source.eventUri });
        }
        else {
            this.event = null;
        }
        if (source['destination']) {
            this.destination = source.destination.map((x) => new fhir.MessageHeaderDestination(x));
        }
        else {
            this.destination = [];
        }
        if (source['sender']) {
            this.sender = new fhir.Reference(source.sender);
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['author']) {
            this.author = new fhir.Reference(source.author);
        }
        if (source['source']) {
            this.source = new fhir.MessageHeaderSource(source.source);
        }
        else {
            this.source = null;
        }
        if (source['responsible']) {
            this.responsible = new fhir.Reference(source.responsible);
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['response']) {
            this.response = new fhir.MessageHeaderResponse(source.response);
        }
        if (source['focus']) {
            this.focus = source.focus.map((x) => new fhir.Reference(x));
        }
        else {
            this.focus = [];
        }
        if (source['definition']) {
            this.definition = new fhir.FhirCanonical({ value: source.definition });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"MessageHeader" fhir: MessageHeader.resourceType:"MessageHeader"' });
        }
        if (!this['event']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property event: fhir: MessageHeader.event[x]:' });
        }
        if (this["destination"]) {
            this.destination.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["sender"]) {
            issues.push(...this.sender.doModelValidation());
        }
        if (this["enterer"]) {
            issues.push(...this.enterer.doModelValidation());
        }
        if (this["author"]) {
            issues.push(...this.author.doModelValidation());
        }
        if (!this['source']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property source:fhir.MessageHeaderSource fhir: MessageHeader.source:source' });
        }
        if (this["source"]) {
            issues.push(...this.source.doModelValidation());
        }
        if (this["responsible"]) {
            issues.push(...this.responsible.doModelValidation());
        }
        if (this["reason"]) {
            issues.push(...this.reason.doModelValidation());
        }
        if (this["response"]) {
            issues.push(...this.response.doModelValidation());
        }
        if (this["focus"]) {
            this.focus.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["definition"]) {
            issues.push(...this.definition.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MessageHeader._fts_dataType = 'MessageHeader';
/**
 * Internal flag to properly serialize choice-type element MessageHeader.event[x]
 */
MessageHeader._fts_eventIsChoice = true;
//# sourceMappingURL=data:application/json;base64,