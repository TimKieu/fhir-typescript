// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExplanationOfBenefit
import * as fhir from '../fhir.js';
// @ts-ignore
import { V3ActIncidentCodeCodings, } from '../fhirValueSets/V3ActIncidentCodeCodings.js';
// @ts-ignore
import { NoteTypeCodes } from '../fhirValueSets/NoteTypeCodes.js';
// @ts-ignore
import { LanguagesCodings, } from '../fhirValueSets/LanguagesCodings.js';
// @ts-ignore
import { ExplanationofbenefitStatusCodes } from '../fhirValueSets/ExplanationofbenefitStatusCodes.js';
// @ts-ignore
import { ClaimTypeCodings, } from '../fhirValueSets/ClaimTypeCodings.js';
// @ts-ignore
import { ClaimUseCodes } from '../fhirValueSets/ClaimUseCodes.js';
// @ts-ignore
import { RemittanceOutcomeCodes } from '../fhirValueSets/RemittanceOutcomeCodes.js';
/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ExplanationOfBenefitRelated extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['relationship']) {
            this.relationship = new fhir.CodeableConcept(source.relationship);
        }
        if (source['reference']) {
            this.reference = new fhir.Identifier(source.reference);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["claim"]) {
            issues.push(...this.claim.doModelValidation());
        }
        if (this["relationship"]) {
            issues.push(...this.relationship.doModelValidation());
        }
        if (this["reference"]) {
            issues.push(...this.reference.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitRelated._fts_dataType = 'ExplanationOfBenefitRelated';
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export class ExplanationOfBenefitPayee extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['party']) {
            this.party = new fhir.Reference(source.party);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["party"]) {
            issues.push(...this.party.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitPayee._fts_dataType = 'ExplanationOfBenefitPayee';
/**
 * The members of the team who provided the products and services.
 */
export class ExplanationOfBenefitCareTeam extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['responsible']) {
            this.responsible = new fhir.FhirBoolean({ value: source.responsible });
        }
        if (source['role']) {
            this.role = new fhir.CodeableConcept(source.role);
        }
        if (source['qualification']) {
            this.qualification = new fhir.CodeableConcept(source.qualification);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['sequence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.careTeam.sequence:positiveInt' });
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (!this['provider']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property provider:fhir.Reference fhir: ExplanationOfBenefit.careTeam.provider:Reference' });
        }
        if (this["provider"]) {
            issues.push(...this.provider.doModelValidation());
        }
        if (this["responsible"]) {
            issues.push(...this.responsible.doModelValidation());
        }
        if (this["role"]) {
            issues.push(...this.role.doModelValidation());
        }
        if (this["qualification"]) {
            issues.push(...this.qualification.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitCareTeam._fts_dataType = 'ExplanationOfBenefitCareTeam';
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['code']) {
            this.code = new fhir.CodeableConcept(source.code);
        }
        if (source['timing']) {
            this.timing = source.timing;
        }
        else if (source['timingDate']) {
            this.timing = new fhir.FhirDate({ value: source.timingDate });
        }
        else if (source['timingPeriod']) {
            this.timing = new fhir.Period(source.timingPeriod);
        }
        if (source['value']) {
            this.value = source.value;
        }
        else if (source['valueBoolean']) {
            this.value = new fhir.FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueString']) {
            this.value = new fhir.FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            this.value = new fhir.Quantity(source.valueQuantity);
        }
        else if (source['valueAttachment']) {
            this.value = new fhir.Attachment(source.valueAttachment);
        }
        else if (source['valueReference']) {
            this.value = new fhir.Reference(source.valueReference);
        }
        if (source['reason']) {
            this.reason = new fhir.Coding(source.reason);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['sequence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.supportingInfo.sequence:positiveInt' });
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.supportingInfo.category:CodeableConcept' });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (this["code"]) {
            issues.push(...this.code.doModelValidation());
        }
        if (this["reason"]) {
            issues.push(...this.reason.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitSupportingInfo._fts_dataType = 'ExplanationOfBenefitSupportingInfo';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.timing[x]
 */
ExplanationOfBenefitSupportingInfo._fts_timingIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.value[x]
 */
ExplanationOfBenefitSupportingInfo._fts_valueIsChoice = true;
/**
 * Information about diagnoses relevant to the claim items.
 */
export class ExplanationOfBenefitDiagnosis extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept);
        }
        else if (source['diagnosisReference']) {
            this.diagnosis = new fhir.Reference(source.diagnosisReference);
        }
        else {
            this.diagnosis = null;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['onAdmission']) {
            this.onAdmission = new fhir.CodeableConcept(source.onAdmission);
        }
        if (source['packageCode']) {
            this.packageCode = new fhir.CodeableConcept(source.packageCode);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['sequence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.diagnosis.sequence:positiveInt' });
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (!this['diagnosis']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property diagnosis: fhir: ExplanationOfBenefit.diagnosis.diagnosis[x]:' });
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["onAdmission"]) {
            issues.push(...this.onAdmission.doModelValidation());
        }
        if (this["packageCode"]) {
            issues.push(...this.packageCode.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitDiagnosis._fts_dataType = 'ExplanationOfBenefitDiagnosis';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.diagnosis.diagnosis[x]
 */
ExplanationOfBenefitDiagnosis._fts_diagnosisIsChoice = true;
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ExplanationOfBenefitProcedure extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['type']) {
            this.type = source.type.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.type = [];
        }
        if (source['date']) {
            this.date = new fhir.FhirDateTime({ value: source.date });
        }
        if (source['procedure']) {
            this.procedure = source.procedure;
        }
        else if (source['procedureCodeableConcept']) {
            this.procedure = new fhir.CodeableConcept(source.procedureCodeableConcept);
        }
        else if (source['procedureReference']) {
            this.procedure = new fhir.Reference(source.procedureReference);
        }
        else {
            this.procedure = null;
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['sequence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.procedure.sequence:positiveInt' });
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (this["type"]) {
            this.type.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (!this['procedure']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property procedure: fhir: ExplanationOfBenefit.procedure.procedure[x]:' });
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitProcedure._fts_dataType = 'ExplanationOfBenefitProcedure';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.procedure.procedure[x]
 */
ExplanationOfBenefitProcedure._fts_procedureIsChoice = true;
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ExplanationOfBenefitInsurance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['focal']) {
            this.focal = new fhir.FhirBoolean({ value: source.focal });
        }
        else {
            this.focal = null;
        }
        if (source['coverage']) {
            this.coverage = new fhir.Reference(source.coverage);
        }
        else {
            this.coverage = null;
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.preAuthRef = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['focal']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property focal:fhir.FhirBoolean fhir: ExplanationOfBenefit.insurance.focal:boolean' });
        }
        if (this["focal"]) {
            issues.push(...this.focal.doModelValidation());
        }
        if (!this['coverage']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property coverage:fhir.Reference fhir: ExplanationOfBenefit.insurance.coverage:Reference' });
        }
        if (this["coverage"]) {
            issues.push(...this.coverage.doModelValidation());
        }
        if (this["preAuthRef"]) {
            this.preAuthRef.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitInsurance._fts_dataType = 'ExplanationOfBenefitInsurance';
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ExplanationOfBenefitAccident extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
    }
    /**
     * Extensible-bound Value Set for type (ExplanationOfBenefit.accident.type)
     */
    static get typeExtensibleCodings() {
        return V3ActIncidentCodeCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAccident._fts_dataType = 'ExplanationOfBenefitAccident';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.accident.location[x]
 */
ExplanationOfBenefitAccident._fts_locationIsChoice = true;
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export class ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['reason']) {
            this.reason = new fhir.CodeableConcept(source.reason);
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['value']) {
            this.value = new fhir.FhirDecimal({ value: source.value });
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.adjudication.category:CodeableConcept' });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (this["reason"]) {
            issues.push(...this.reason.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        if (this["value"]) {
            issues.push(...this.value.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemAdjudication._fts_dataType = 'ExplanationOfBenefitItemAdjudication';
/**
 * Third-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['sequence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.item.detail.subDetail.sequence:positiveInt' });
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (this["revenue"]) {
            issues.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (!this['productOrService']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.detail.subDetail.productOrService:CodeableConcept' });
        }
        if (this["productOrService"]) {
            issues.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            issues.push(...this.unitPrice.doModelValidation());
        }
        if (this["factor"]) {
            issues.push(...this.factor.doModelValidation());
        }
        if (this["net"]) {
            issues.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitItemDetailSubDetail';
/**
 * Second-tier of goods and services.
 */
export class ExplanationOfBenefitItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitItemDetailSubDetail(x));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['sequence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.item.detail.sequence:positiveInt' });
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (this["revenue"]) {
            issues.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (!this['productOrService']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.detail.productOrService:CodeableConcept' });
        }
        if (this["productOrService"]) {
            issues.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            issues.push(...this.unitPrice.doModelValidation());
        }
        if (this["factor"]) {
            issues.push(...this.factor.doModelValidation());
        }
        if (this["net"]) {
            issues.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItemDetail._fts_dataType = 'ExplanationOfBenefitItemDetail';
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export class ExplanationOfBenefitItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['sequence']) {
            this.sequence = new fhir.FhirPositiveInt({ value: source.sequence });
        }
        else {
            this.sequence = null;
        }
        if (source['careTeamSequence']) {
            this.careTeamSequence = source.careTeamSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.careTeamSequence = [];
        }
        if (source['diagnosisSequence']) {
            this.diagnosisSequence = source.diagnosisSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.diagnosisSequence = [];
        }
        if (source['procedureSequence']) {
            this.procedureSequence = source.procedureSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.procedureSequence = [];
        }
        if (source['informationSequence']) {
            this.informationSequence = source.informationSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.informationSequence = [];
        }
        if (source['revenue']) {
            this.revenue = new fhir.CodeableConcept(source.revenue);
        }
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['udi']) {
            this.udi = source.udi.map((x) => new fhir.Reference(x));
        }
        else {
            this.udi = [];
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subSite = [];
        }
        if (source['encounter']) {
            this.encounter = source.encounter.map((x) => new fhir.Reference(x));
        }
        else {
            this.encounter = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitItemDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['sequence']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.item.sequence:positiveInt' });
        }
        if (this["sequence"]) {
            issues.push(...this.sequence.doModelValidation());
        }
        if (this["careTeamSequence"]) {
            this.careTeamSequence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["diagnosisSequence"]) {
            this.diagnosisSequence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["procedureSequence"]) {
            this.procedureSequence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["informationSequence"]) {
            this.informationSequence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["revenue"]) {
            issues.push(...this.revenue.doModelValidation());
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (!this['productOrService']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.productOrService:CodeableConcept' });
        }
        if (this["productOrService"]) {
            issues.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            issues.push(...this.unitPrice.doModelValidation());
        }
        if (this["factor"]) {
            issues.push(...this.factor.doModelValidation());
        }
        if (this["net"]) {
            issues.push(...this.net.doModelValidation());
        }
        if (this["udi"]) {
            this.udi.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["bodySite"]) {
            issues.push(...this.bodySite.doModelValidation());
        }
        if (this["subSite"]) {
            this.subSite.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["encounter"]) {
            this.encounter.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitItem._fts_dataType = 'ExplanationOfBenefitItem';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.serviced[x]
 */
ExplanationOfBenefitItem._fts_servicedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.location[x]
 */
ExplanationOfBenefitItem._fts_locationIsChoice = true;
/**
 * The third-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['productOrService']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.addItem.detail.subDetail.productOrService:CodeableConcept' });
        }
        if (this["productOrService"]) {
            issues.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            issues.push(...this.unitPrice.doModelValidation());
        }
        if (this["factor"]) {
            issues.push(...this.factor.doModelValidation());
        }
        if (this["net"]) {
            issues.push(...this.net.doModelValidation());
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetailSubDetail';
/**
 * The second-tier service adjudications for payor added services.
 */
export class ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['subDetail']) {
            this.subDetail = source.subDetail.map((x) => new fhir.ExplanationOfBenefitAddItemDetailSubDetail(x));
        }
        else {
            this.subDetail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['productOrService']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.addItem.detail.productOrService:CodeableConcept' });
        }
        if (this["productOrService"]) {
            issues.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            issues.push(...this.unitPrice.doModelValidation());
        }
        if (this["factor"]) {
            issues.push(...this.factor.doModelValidation());
        }
        if (this["net"]) {
            issues.push(...this.net.doModelValidation());
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItemDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetail';
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
export class ExplanationOfBenefitAddItem extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['itemSequence']) {
            this.itemSequence = source.itemSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.itemSequence = [];
        }
        if (source['detailSequence']) {
            this.detailSequence = source.detailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.detailSequence = [];
        }
        if (source['subDetailSequence']) {
            this.subDetailSequence = source.subDetailSequence.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.subDetailSequence = [];
        }
        if (source['provider']) {
            this.provider = source.provider.map((x) => new fhir.Reference(x));
        }
        else {
            this.provider = [];
        }
        if (source['productOrService']) {
            this.productOrService = new fhir.CodeableConcept(source.productOrService);
        }
        else {
            this.productOrService = null;
        }
        if (source['modifier']) {
            this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.modifier = [];
        }
        if (source['programCode']) {
            this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.programCode = [];
        }
        if (source['serviced']) {
            this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            this.serviced = new fhir.FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            this.serviced = new fhir.Period(source.servicedPeriod);
        }
        if (source['location']) {
            this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            this.location = new fhir.CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            this.location = new fhir.Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            this.location = new fhir.Reference(source.locationReference);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            this.unitPrice = new fhir.Money(source.unitPrice);
        }
        if (source['factor']) {
            this.factor = new fhir.FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            this.net = new fhir.Money(source.net);
        }
        if (source['bodySite']) {
            this.bodySite = new fhir.CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.subSite = [];
        }
        if (source['noteNumber']) {
            this.noteNumber = source.noteNumber.map((x) => new fhir.FhirPositiveInt({ value: x }));
        }
        else {
            this.noteNumber = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['detail']) {
            this.detail = source.detail.map((x) => new fhir.ExplanationOfBenefitAddItemDetail(x));
        }
        else {
            this.detail = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["itemSequence"]) {
            this.itemSequence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["detailSequence"]) {
            this.detailSequence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["subDetailSequence"]) {
            this.subDetailSequence.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["provider"]) {
            this.provider.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['productOrService']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.addItem.productOrService:CodeableConcept' });
        }
        if (this["productOrService"]) {
            issues.push(...this.productOrService.doModelValidation());
        }
        if (this["modifier"]) {
            this.modifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["programCode"]) {
            this.programCode.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["quantity"]) {
            issues.push(...this.quantity.doModelValidation());
        }
        if (this["unitPrice"]) {
            issues.push(...this.unitPrice.doModelValidation());
        }
        if (this["factor"]) {
            issues.push(...this.factor.doModelValidation());
        }
        if (this["net"]) {
            issues.push(...this.net.doModelValidation());
        }
        if (this["bodySite"]) {
            issues.push(...this.bodySite.doModelValidation());
        }
        if (this["subSite"]) {
            this.subSite.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["detail"]) {
            this.detail.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitAddItem._fts_dataType = 'ExplanationOfBenefitAddItem';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.serviced[x]
 */
ExplanationOfBenefitAddItem._fts_servicedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.location[x]
 */
ExplanationOfBenefitAddItem._fts_locationIsChoice = true;
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export class ExplanationOfBenefitTotal extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        else {
            this.amount = null;
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.total.category:CodeableConcept' });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (!this['amount']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property amount:fhir.Money fhir: ExplanationOfBenefit.total.amount:Money' });
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitTotal._fts_dataType = 'ExplanationOfBenefitTotal';
/**
 * Payment details for the adjudication of the claim.
 */
export class ExplanationOfBenefitPayment extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        if (source['adjustment']) {
            this.adjustment = new fhir.Money(source.adjustment);
        }
        if (source['adjustmentReason']) {
            this.adjustmentReason = new fhir.CodeableConcept(source.adjustmentReason);
        }
        if (source['date']) {
            this.date = new fhir.FhirDate({ value: source.date });
        }
        if (source['amount']) {
            this.amount = new fhir.Money(source.amount);
        }
        if (source['identifier']) {
            this.identifier = new fhir.Identifier(source.identifier);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["adjustment"]) {
            issues.push(...this.adjustment.doModelValidation());
        }
        if (this["adjustmentReason"]) {
            issues.push(...this.adjustmentReason.doModelValidation());
        }
        if (this["date"]) {
            issues.push(...this.date.doModelValidation());
        }
        if (this["amount"]) {
            issues.push(...this.amount.doModelValidation());
        }
        if (this["identifier"]) {
            issues.push(...this.identifier.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitPayment._fts_dataType = 'ExplanationOfBenefitPayment';
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
export class ExplanationOfBenefitProcessNote extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['number']) {
            this.number = new fhir.FhirPositiveInt({ value: source.number });
        }
        if (source['type']) {
            this.type = new fhir.FhirCode({ value: source.type });
        }
        if (source['text']) {
            this.text = new fhir.FhirString({ value: source.text });
        }
        if (source['language']) {
            this.language = new fhir.CodeableConcept(source.language);
        }
    }
    /**
     * Required-bound Value Set for type (ExplanationOfBenefit.processNote.type)
     */
    static get typeRequiredCodes() {
        return NoteTypeCodes;
    }
    /**
     * Preferred-bound Value Set for language (ExplanationOfBenefit.processNote.language)
     */
    static get languagePreferredCodings() {
        return LanguagesCodings;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (this["number"]) {
            issues.push(...this.number.doModelValidation());
        }
        if (this['type'] && (!Object.values(NoteTypeCodes).includes(this.type))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type?:fhir.FhirCode<NoteTypeCodeType> fhir: ExplanationOfBenefit.processNote.type:code Required binding to: NoteType' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["text"]) {
            issues.push(...this.text.doModelValidation());
        }
        if (this["language"]) {
            issues.push(...this.language.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitProcessNote._fts_dataType = 'ExplanationOfBenefitProcessNote';
/**
 * Benefits Used to date.
 */
export class ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['allowed']) {
            this.allowed = source.allowed;
        }
        else if (source['allowedUnsignedInt']) {
            this.allowed = new fhir.FhirUnsignedInt({ value: source.allowedUnsignedInt });
        }
        else if (source['allowedString']) {
            this.allowed = new fhir.FhirString({ value: source.allowedString });
        }
        else if (source['allowedMoney']) {
            this.allowed = new fhir.Money(source.allowedMoney);
        }
        if (source['used']) {
            this.used = source.used;
        }
        else if (source['usedUnsignedInt']) {
            this.used = new fhir.FhirUnsignedInt({ value: source.usedUnsignedInt });
        }
        else if (source['usedMoney']) {
            this.used = new fhir.Money(source.usedMoney);
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ExplanationOfBenefit.benefitBalance.financial.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_dataType = 'ExplanationOfBenefitBenefitBalanceFinancial';
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.allowed[x]
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_allowedIsChoice = true;
/**
 * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.used[x]
 */
ExplanationOfBenefitBenefitBalanceFinancial._fts_usedIsChoice = true;
/**
 * Balance by Benefit Category.
 */
export class ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement {
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        if (source['category']) {
            this.category = new fhir.CodeableConcept(source.category);
        }
        else {
            this.category = null;
        }
        if (source['excluded']) {
            this.excluded = new fhir.FhirBoolean({ value: source.excluded });
        }
        if (source['name']) {
            this.name = new fhir.FhirString({ value: source.name });
        }
        if (source['description']) {
            this.description = new fhir.FhirString({ value: source.description });
        }
        if (source['network']) {
            this.network = new fhir.CodeableConcept(source.network);
        }
        if (source['unit']) {
            this.unit = new fhir.CodeableConcept(source.unit);
        }
        if (source['term']) {
            this.term = new fhir.CodeableConcept(source.term);
        }
        if (source['financial']) {
            this.financial = source.financial.map((x) => new fhir.ExplanationOfBenefitBenefitBalanceFinancial(x));
        }
        else {
            this.financial = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['category']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.benefitBalance.category:CodeableConcept' });
        }
        if (this["category"]) {
            issues.push(...this.category.doModelValidation());
        }
        if (this["excluded"]) {
            issues.push(...this.excluded.doModelValidation());
        }
        if (this["name"]) {
            issues.push(...this.name.doModelValidation());
        }
        if (this["description"]) {
            issues.push(...this.description.doModelValidation());
        }
        if (this["network"]) {
            issues.push(...this.network.doModelValidation());
        }
        if (this["unit"]) {
            issues.push(...this.unit.doModelValidation());
        }
        if (this["term"]) {
            issues.push(...this.term.doModelValidation());
        }
        if (this["financial"]) {
            this.financial.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefitBenefitBalance._fts_dataType = 'ExplanationOfBenefitBenefitBalance';
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export class ExplanationOfBenefit extends fhir.DomainResource {
    /**
     * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'ExplanationOfBenefit';
        if (source['identifier']) {
            this.identifier = source.identifier.map((x) => new fhir.Identifier(x));
        }
        else {
            this.identifier = [];
        }
        if (source['status']) {
            this.status = new fhir.FhirCode({ value: source.status });
        }
        else {
            this.status = null;
        }
        if (source['type']) {
            this.type = new fhir.CodeableConcept(source.type);
        }
        else {
            this.type = null;
        }
        if (source['subType']) {
            this.subType = new fhir.CodeableConcept(source.subType);
        }
        if (source['use']) {
            this.use = new fhir.FhirCode({ value: source.use });
        }
        else {
            this.use = null;
        }
        if (source['patient']) {
            this.patient = new fhir.Reference(source.patient);
        }
        else {
            this.patient = null;
        }
        if (source['billablePeriod']) {
            this.billablePeriod = new fhir.Period(source.billablePeriod);
        }
        if (source['created']) {
            this.created = new fhir.FhirDateTime({ value: source.created });
        }
        else {
            this.created = null;
        }
        if (source['enterer']) {
            this.enterer = new fhir.Reference(source.enterer);
        }
        if (source['insurer']) {
            this.insurer = new fhir.Reference(source.insurer);
        }
        else {
            this.insurer = null;
        }
        if (source['provider']) {
            this.provider = new fhir.Reference(source.provider);
        }
        else {
            this.provider = null;
        }
        if (source['priority']) {
            this.priority = new fhir.CodeableConcept(source.priority);
        }
        if (source['fundsReserveRequested']) {
            this.fundsReserveRequested = new fhir.CodeableConcept(source.fundsReserveRequested);
        }
        if (source['fundsReserve']) {
            this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve);
        }
        if (source['related']) {
            this.related = source.related.map((x) => new fhir.ExplanationOfBenefitRelated(x));
        }
        else {
            this.related = [];
        }
        if (source['prescription']) {
            this.prescription = new fhir.Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            this.originalPrescription = new fhir.Reference(source.originalPrescription);
        }
        if (source['payee']) {
            this.payee = new fhir.ExplanationOfBenefitPayee(source.payee);
        }
        if (source['referral']) {
            this.referral = new fhir.Reference(source.referral);
        }
        if (source['facility']) {
            this.facility = new fhir.Reference(source.facility);
        }
        if (source['claim']) {
            this.claim = new fhir.Reference(source.claim);
        }
        if (source['claimResponse']) {
            this.claimResponse = new fhir.Reference(source.claimResponse);
        }
        if (source['outcome']) {
            this.outcome = new fhir.FhirCode({ value: source.outcome });
        }
        else {
            this.outcome = null;
        }
        if (source['disposition']) {
            this.disposition = new fhir.FhirString({ value: source.disposition });
        }
        if (source['preAuthRef']) {
            this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({ value: x }));
        }
        else {
            this.preAuthRef = [];
        }
        if (source['preAuthRefPeriod']) {
            this.preAuthRefPeriod = source.preAuthRefPeriod.map((x) => new fhir.Period(x));
        }
        else {
            this.preAuthRefPeriod = [];
        }
        if (source['careTeam']) {
            this.careTeam = source.careTeam.map((x) => new fhir.ExplanationOfBenefitCareTeam(x));
        }
        else {
            this.careTeam = [];
        }
        if (source['supportingInfo']) {
            this.supportingInfo = source.supportingInfo.map((x) => new fhir.ExplanationOfBenefitSupportingInfo(x));
        }
        else {
            this.supportingInfo = [];
        }
        if (source['diagnosis']) {
            this.diagnosis = source.diagnosis.map((x) => new fhir.ExplanationOfBenefitDiagnosis(x));
        }
        else {
            this.diagnosis = [];
        }
        if (source['procedure']) {
            this.procedure = source.procedure.map((x) => new fhir.ExplanationOfBenefitProcedure(x));
        }
        else {
            this.procedure = [];
        }
        if (source['precedence']) {
            this.precedence = new fhir.FhirPositiveInt({ value: source.precedence });
        }
        if (source['insurance']) {
            this.insurance = source.insurance.map((x) => new fhir.ExplanationOfBenefitInsurance(x));
        }
        else {
            this.insurance = [];
        }
        if (source['accident']) {
            this.accident = new fhir.ExplanationOfBenefitAccident(source.accident);
        }
        if (source['item']) {
            this.item = source.item.map((x) => new fhir.ExplanationOfBenefitItem(x));
        }
        else {
            this.item = [];
        }
        if (source['addItem']) {
            this.addItem = source.addItem.map((x) => new fhir.ExplanationOfBenefitAddItem(x));
        }
        else {
            this.addItem = [];
        }
        if (source['adjudication']) {
            this.adjudication = source.adjudication.map((x) => new fhir.ExplanationOfBenefitItemAdjudication(x));
        }
        else {
            this.adjudication = [];
        }
        if (source['total']) {
            this.total = source.total.map((x) => new fhir.ExplanationOfBenefitTotal(x));
        }
        else {
            this.total = [];
        }
        if (source['payment']) {
            this.payment = new fhir.ExplanationOfBenefitPayment(source.payment);
        }
        if (source['formCode']) {
            this.formCode = new fhir.CodeableConcept(source.formCode);
        }
        if (source['form']) {
            this.form = new fhir.Attachment(source.form);
        }
        if (source['processNote']) {
            this.processNote = source.processNote.map((x) => new fhir.ExplanationOfBenefitProcessNote(x));
        }
        else {
            this.processNote = [];
        }
        if (source['benefitPeriod']) {
            this.benefitPeriod = new fhir.Period(source.benefitPeriod);
        }
        if (source['benefitBalance']) {
            this.benefitBalance = source.benefitBalance.map((x) => new fhir.ExplanationOfBenefitBenefitBalance(x));
        }
        else {
            this.benefitBalance = [];
        }
    }
    /**
     * Required-bound Value Set for status (ExplanationOfBenefit.status)
     */
    static get statusRequiredCodes() {
        return ExplanationofbenefitStatusCodes;
    }
    /**
     * Extensible-bound Value Set for type (ExplanationOfBenefit.type)
     */
    static get typeExtensibleCodings() {
        return ClaimTypeCodings;
    }
    /**
     * Required-bound Value Set for use (ExplanationOfBenefit.use)
     */
    static get useRequiredCodes() {
        return ClaimUseCodes;
    }
    /**
     * Required-bound Value Set for outcome (ExplanationOfBenefit.outcome)
     */
    static get outcomeRequiredCodes() {
        return RemittanceOutcomeCodes;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation() {
        let issues = super.doModelValidation();
        if (!this['resourceType']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ExplanationOfBenefit" fhir: ExplanationOfBenefit.resourceType:"ExplanationOfBenefit"' });
        }
        if (this["identifier"]) {
            this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (!this['status']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ExplanationofbenefitStatusCodeType> fhir: ExplanationOfBenefit.status:code' });
        }
        if (this['status'] && (!Object.values(ExplanationofbenefitStatusCodes).includes(this.status))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ExplanationofbenefitStatusCodeType> fhir: ExplanationOfBenefit.status:code Required binding to: ExplanationofbenefitStatus' });
        }
        if (this["status"]) {
            issues.push(...this.status.doModelValidation());
        }
        if (!this['type']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ExplanationOfBenefit.type:CodeableConcept' });
        }
        if (this["type"]) {
            issues.push(...this.type.doModelValidation());
        }
        if (this["subType"]) {
            issues.push(...this.subType.doModelValidation());
        }
        if (!this['use']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property use:fhir.FhirCode<ClaimUseCodeType> fhir: ExplanationOfBenefit.use:code' });
        }
        if (this['use'] && (!Object.values(ClaimUseCodes).includes(this.use))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property use:fhir.FhirCode<ClaimUseCodeType> fhir: ExplanationOfBenefit.use:code Required binding to: ClaimUse' });
        }
        if (this["use"]) {
            issues.push(...this.use.doModelValidation());
        }
        if (!this['patient']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient:fhir.Reference fhir: ExplanationOfBenefit.patient:Reference' });
        }
        if (this["patient"]) {
            issues.push(...this.patient.doModelValidation());
        }
        if (this["billablePeriod"]) {
            issues.push(...this.billablePeriod.doModelValidation());
        }
        if (!this['created']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: ExplanationOfBenefit.created:dateTime' });
        }
        if (this["created"]) {
            issues.push(...this.created.doModelValidation());
        }
        if (this["enterer"]) {
            issues.push(...this.enterer.doModelValidation());
        }
        if (!this['insurer']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurer:fhir.Reference fhir: ExplanationOfBenefit.insurer:Reference' });
        }
        if (this["insurer"]) {
            issues.push(...this.insurer.doModelValidation());
        }
        if (!this['provider']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property provider:fhir.Reference fhir: ExplanationOfBenefit.provider:Reference' });
        }
        if (this["provider"]) {
            issues.push(...this.provider.doModelValidation());
        }
        if (this["priority"]) {
            issues.push(...this.priority.doModelValidation());
        }
        if (this["fundsReserveRequested"]) {
            issues.push(...this.fundsReserveRequested.doModelValidation());
        }
        if (this["fundsReserve"]) {
            issues.push(...this.fundsReserve.doModelValidation());
        }
        if (this["related"]) {
            this.related.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["prescription"]) {
            issues.push(...this.prescription.doModelValidation());
        }
        if (this["originalPrescription"]) {
            issues.push(...this.originalPrescription.doModelValidation());
        }
        if (this["payee"]) {
            issues.push(...this.payee.doModelValidation());
        }
        if (this["referral"]) {
            issues.push(...this.referral.doModelValidation());
        }
        if (this["facility"]) {
            issues.push(...this.facility.doModelValidation());
        }
        if (this["claim"]) {
            issues.push(...this.claim.doModelValidation());
        }
        if (this["claimResponse"]) {
            issues.push(...this.claimResponse.doModelValidation());
        }
        if (!this['outcome']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property outcome:fhir.FhirCode<RemittanceOutcomeCodeType> fhir: ExplanationOfBenefit.outcome:code' });
        }
        if (this['outcome'] && (!Object.values(RemittanceOutcomeCodes).includes(this.outcome))) {
            issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property outcome:fhir.FhirCode<RemittanceOutcomeCodeType> fhir: ExplanationOfBenefit.outcome:code Required binding to: RemittanceOutcome' });
        }
        if (this["outcome"]) {
            issues.push(...this.outcome.doModelValidation());
        }
        if (this["disposition"]) {
            issues.push(...this.disposition.doModelValidation());
        }
        if (this["preAuthRef"]) {
            this.preAuthRef.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["preAuthRefPeriod"]) {
            this.preAuthRefPeriod.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["careTeam"]) {
            this.careTeam.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["procedure"]) {
            this.procedure.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["precedence"]) {
            issues.push(...this.precedence.doModelValidation());
        }
        if (!this['insurance']) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurance:fhir.ExplanationOfBenefitInsurance[] fhir: ExplanationOfBenefit.insurance:insurance' });
        }
        else if (!Array.isArray(this.insurance)) {
            issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property insurance:fhir.ExplanationOfBenefitInsurance[] fhir: ExplanationOfBenefit.insurance:insurance' });
        }
        else if (this.insurance.length === 0) {
            issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurance:fhir.ExplanationOfBenefitInsurance[] fhir: ExplanationOfBenefit.insurance:insurance' });
        }
        if (this["insurance"]) {
            this.insurance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["accident"]) {
            issues.push(...this.accident.doModelValidation());
        }
        if (this["item"]) {
            this.item.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["addItem"]) {
            this.addItem.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["total"]) {
            this.total.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["payment"]) {
            issues.push(...this.payment.doModelValidation());
        }
        if (this["formCode"]) {
            issues.push(...this.formCode.doModelValidation());
        }
        if (this["form"]) {
            issues.push(...this.form.doModelValidation());
        }
        if (this["processNote"]) {
            this.processNote.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        if (this["benefitPeriod"]) {
            issues.push(...this.benefitPeriod.doModelValidation());
        }
        if (this["benefitBalance"]) {
            this.benefitBalance.forEach((x) => { issues.push(...x.doModelValidation()); });
        }
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
ExplanationOfBenefit._fts_dataType = 'ExplanationOfBenefit';
//# sourceMappingURL=data:application/json;base64,