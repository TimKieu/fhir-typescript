/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { V3ActIncidentCodeCodings } from '../fhirValueSets/V3ActIncidentCodeCodings.js';
import { NoteTypeCodings } from '../fhirValueSets/NoteTypeCodings.js';
import { LanguagesCodings } from '../fhirValueSets/LanguagesCodings.js';
import { ExplanationofbenefitStatusCodings } from '../fhirValueSets/ExplanationofbenefitStatusCodings.js';
import { ClaimTypeCodings } from '../fhirValueSets/ClaimTypeCodings.js';
import { ClaimUseCodings } from '../fhirValueSets/ClaimUseCodings.js';
import { RemittanceOutcomeCodings } from '../fhirValueSets/RemittanceOutcomeCodings.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { BackboneElement } from './BackboneElement.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { Reference } from './Reference.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Identifier } from './Identifier.js';
import { FhirPositiveInt } from './FhirPositiveInt.js';
import { FhirBoolean } from './FhirBoolean.js';
import { FhirDate } from './FhirDate.js';
import { Period } from './Period.js';
import { FhirString } from './FhirString.js';
import { Quantity } from './Quantity.js';
import { Attachment } from './Attachment.js';
import { Coding } from './Coding.js';
import { FhirDateTime } from './FhirDateTime.js';
import { Address } from './Address.js';
import { Money } from './Money.js';
import { FhirDecimal } from './FhirDecimal.js';
import { FhirUnsignedInt } from './FhirUnsignedInt.js';

// <auto-generated/>
/**
 * For example,  for the original treatment and follow-up exams.
 */
var ExplanationOfBenefitRelated = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitRelated, _super);
    /**
     * Default constructor for ExplanationOfBenefitRelated - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitRelated(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['claim']) {
            _this.claim = new Reference(source.claim);
        }
        if (source['relationship']) {
            _this.relationship = new CodeableConcept(source.relationship);
        }
        if (source['reference']) {
            _this.reference = new Identifier(source.reference);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitRelated.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["claim"]) {
            (_a = outcome.issue).push.apply(_a, this.claim.doModelValidation().issue);
        }
        if (this["relationship"]) {
            (_b = outcome.issue).push.apply(_b, this.relationship.doModelValidation().issue);
        }
        if (this["reference"]) {
            (_c = outcome.issue).push.apply(_c, this.reference.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitRelated._fts_dataType = 'ExplanationOfBenefitRelated';
    return ExplanationOfBenefitRelated;
}(BackboneElement));
/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
var ExplanationOfBenefitPayee = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitPayee, _super);
    /**
     * Default constructor for ExplanationOfBenefitPayee - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitPayee(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['party']) {
            _this.party = new Reference(source.party);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitPayee.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["party"]) {
            (_b = outcome.issue).push.apply(_b, this.party.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitPayee._fts_dataType = 'ExplanationOfBenefitPayee';
    return ExplanationOfBenefitPayee;
}(BackboneElement));
/**
 * The members of the team who provided the products and services.
 */
var ExplanationOfBenefitCareTeam = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitCareTeam, _super);
    /**
     * Default constructor for ExplanationOfBenefitCareTeam - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitCareTeam(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['provider']) {
            _this.provider = new Reference(source.provider);
        }
        else {
            _this.provider = null;
        }
        if (source['responsible']) {
            _this.responsible = new FhirBoolean({ value: source.responsible });
        }
        if (source['role']) {
            _this.role = new CodeableConcept(source.role);
        }
        if (source['qualification']) {
            _this.qualification = new CodeableConcept(source.qualification);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitCareTeam.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.careTeam.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['provider']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property provider:fhir.Reference fhir: ExplanationOfBenefit.careTeam.provider:Reference', }));
        }
        if (this["provider"]) {
            (_b = outcome.issue).push.apply(_b, this.provider.doModelValidation().issue);
        }
        if (this["responsible"]) {
            (_c = outcome.issue).push.apply(_c, this.responsible.doModelValidation().issue);
        }
        if (this["role"]) {
            (_d = outcome.issue).push.apply(_d, this.role.doModelValidation().issue);
        }
        if (this["qualification"]) {
            (_e = outcome.issue).push.apply(_e, this.qualification.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitCareTeam._fts_dataType = 'ExplanationOfBenefitCareTeam';
    return ExplanationOfBenefitCareTeam;
}(BackboneElement));
/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
var ExplanationOfBenefitSupportingInfo = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitSupportingInfo, _super);
    /**
     * Default constructor for ExplanationOfBenefitSupportingInfo - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitSupportingInfo(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['code']) {
            _this.code = new CodeableConcept(source.code);
        }
        if (source['timing']) {
            _this.timing = source.timing;
        }
        else if (source['timingDate']) {
            _this.timing = new FhirDate({ value: source.timingDate });
        }
        else if (source['timingPeriod']) {
            _this.timing = new Period(source.timingPeriod);
        }
        if (source['value']) {
            _this.value = source.value;
        }
        else if (source['valueBoolean']) {
            _this.value = new FhirBoolean({ value: source.valueBoolean });
        }
        else if (source['valueString']) {
            _this.value = new FhirString({ value: source.valueString });
        }
        else if (source['valueQuantity']) {
            _this.value = new Quantity(source.valueQuantity);
        }
        else if (source['valueAttachment']) {
            _this.value = new Attachment(source.valueAttachment);
        }
        else if (source['valueReference']) {
            _this.value = new Reference(source.valueReference);
        }
        if (source['reason']) {
            _this.reason = new Coding(source.reason);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitSupportingInfo.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.supportingInfo.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.supportingInfo.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_b = outcome.issue).push.apply(_b, this.category.doModelValidation().issue);
        }
        if (this["code"]) {
            (_c = outcome.issue).push.apply(_c, this.code.doModelValidation().issue);
        }
        if (this["reason"]) {
            (_d = outcome.issue).push.apply(_d, this.reason.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitSupportingInfo._fts_dataType = 'ExplanationOfBenefitSupportingInfo';
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.timing[x]
     */
    ExplanationOfBenefitSupportingInfo._fts_timingIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.supportingInfo.value[x]
     */
    ExplanationOfBenefitSupportingInfo._fts_valueIsChoice = true;
    return ExplanationOfBenefitSupportingInfo;
}(BackboneElement));
/**
 * Information about diagnoses relevant to the claim items.
 */
var ExplanationOfBenefitDiagnosis = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitDiagnosis, _super);
    /**
     * Default constructor for ExplanationOfBenefitDiagnosis - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitDiagnosis(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['diagnosis']) {
            _this.diagnosis = source.diagnosis;
        }
        else if (source['diagnosisCodeableConcept']) {
            _this.diagnosis = new CodeableConcept(source.diagnosisCodeableConcept);
        }
        else if (source['diagnosisReference']) {
            _this.diagnosis = new Reference(source.diagnosisReference);
        }
        else {
            _this.diagnosis = null;
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['onAdmission']) {
            _this.onAdmission = new CodeableConcept(source.onAdmission);
        }
        if (source['packageCode']) {
            _this.packageCode = new CodeableConcept(source.packageCode);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitDiagnosis.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.diagnosis.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (!this['diagnosis']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property diagnosis: fhir: ExplanationOfBenefit.diagnosis.diagnosis[x]:', }));
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["onAdmission"]) {
            (_b = outcome.issue).push.apply(_b, this.onAdmission.doModelValidation().issue);
        }
        if (this["packageCode"]) {
            (_c = outcome.issue).push.apply(_c, this.packageCode.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitDiagnosis._fts_dataType = 'ExplanationOfBenefitDiagnosis';
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.diagnosis.diagnosis[x]
     */
    ExplanationOfBenefitDiagnosis._fts_diagnosisIsChoice = true;
    return ExplanationOfBenefitDiagnosis;
}(BackboneElement));
/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
var ExplanationOfBenefitProcedure = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitProcedure, _super);
    /**
     * Default constructor for ExplanationOfBenefitProcedure - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitProcedure(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['type']) {
            _this.type = source.type.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.type = [];
        }
        if (source['date']) {
            _this.date = new FhirDateTime({ value: source.date });
        }
        if (source['procedure']) {
            _this.procedure = source.procedure;
        }
        else if (source['procedureCodeableConcept']) {
            _this.procedure = new CodeableConcept(source.procedureCodeableConcept);
        }
        else if (source['procedureReference']) {
            _this.procedure = new Reference(source.procedureReference);
        }
        else {
            _this.procedure = null;
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitProcedure.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.procedure.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["type"]) {
            this.type.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["date"]) {
            (_b = outcome.issue).push.apply(_b, this.date.doModelValidation().issue);
        }
        if (!this['procedure']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property procedure: fhir: ExplanationOfBenefit.procedure.procedure[x]:', }));
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitProcedure._fts_dataType = 'ExplanationOfBenefitProcedure';
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.procedure.procedure[x]
     */
    ExplanationOfBenefitProcedure._fts_procedureIsChoice = true;
    return ExplanationOfBenefitProcedure;
}(BackboneElement));
/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
var ExplanationOfBenefitInsurance = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitInsurance, _super);
    /**
     * Default constructor for ExplanationOfBenefitInsurance - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitInsurance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['focal']) {
            _this.focal = new FhirBoolean({ value: source.focal });
        }
        else {
            _this.focal = null;
        }
        if (source['coverage']) {
            _this.coverage = new Reference(source.coverage);
        }
        else {
            _this.coverage = null;
        }
        if (source['preAuthRef']) {
            _this.preAuthRef = source.preAuthRef.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.preAuthRef = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitInsurance.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['focal']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property focal:fhir.FhirBoolean fhir: ExplanationOfBenefit.insurance.focal:boolean', }));
        }
        if (this["focal"]) {
            (_a = outcome.issue).push.apply(_a, this.focal.doModelValidation().issue);
        }
        if (!this['coverage']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property coverage:fhir.Reference fhir: ExplanationOfBenefit.insurance.coverage:Reference', }));
        }
        if (this["coverage"]) {
            (_b = outcome.issue).push.apply(_b, this.coverage.doModelValidation().issue);
        }
        if (this["preAuthRef"]) {
            this.preAuthRef.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitInsurance._fts_dataType = 'ExplanationOfBenefitInsurance';
    return ExplanationOfBenefitInsurance;
}(BackboneElement));
/**
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
var ExplanationOfBenefitAccident = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAccident, _super);
    /**
     * Default constructor for ExplanationOfBenefitAccident - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitAccident(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['date']) {
            _this.date = new FhirDate({ value: source.date });
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['location']) {
            _this.location = source.location;
        }
        else if (source['locationAddress']) {
            _this.location = new Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            _this.location = new Reference(source.locationReference);
        }
        return _this;
    }
    /**
     * Extensible-bound Value Set for type (ExplanationOfBenefit.accident.type)
     */
    ExplanationOfBenefitAccident.typeExtensibleCoding = function () {
        return V3ActIncidentCodeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitAccident.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["date"]) {
            (_a = outcome.issue).push.apply(_a, this.date.doModelValidation().issue);
        }
        if (this["type"]) {
            (_b = outcome.issue).push.apply(_b, this.type.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitAccident._fts_dataType = 'ExplanationOfBenefitAccident';
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.accident.location[x]
     */
    ExplanationOfBenefitAccident._fts_locationIsChoice = true;
    return ExplanationOfBenefitAccident;
}(BackboneElement));
/**
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
var ExplanationOfBenefitItemAdjudication = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItemAdjudication, _super);
    /**
     * Default constructor for ExplanationOfBenefitItemAdjudication - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitItemAdjudication(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['reason']) {
            _this.reason = new CodeableConcept(source.reason);
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        if (source['value']) {
            _this.value = new FhirDecimal({ value: source.value });
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitItemAdjudication.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.adjudication.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (this["reason"]) {
            (_b = outcome.issue).push.apply(_b, this.reason.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_c = outcome.issue).push.apply(_c, this.amount.doModelValidation().issue);
        }
        if (this["value"]) {
            (_d = outcome.issue).push.apply(_d, this.value.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitItemAdjudication._fts_dataType = 'ExplanationOfBenefitItemAdjudication';
    return ExplanationOfBenefitItemAdjudication;
}(BackboneElement));
/**
 * Third-tier of goods and services.
 */
var ExplanationOfBenefitItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItemDetailSubDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitItemDetailSubDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['revenue']) {
            _this.revenue = new CodeableConcept(source.revenue);
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ExplanationOfBenefitItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitItemDetailSubDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.item.detail.subDetail.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["revenue"]) {
            (_b = outcome.issue).push.apply(_b, this.revenue.doModelValidation().issue);
        }
        if (this["category"]) {
            (_c = outcome.issue).push.apply(_c, this.category.doModelValidation().issue);
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.detail.subDetail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_d = outcome.issue).push.apply(_d, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_f = outcome.issue).push.apply(_f, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_g = outcome.issue).push.apply(_g, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_h = outcome.issue).push.apply(_h, this.net.doModelValidation().issue);
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitItemDetailSubDetail';
    return ExplanationOfBenefitItemDetailSubDetail;
}(BackboneElement));
/**
 * Second-tier of goods and services.
 */
var ExplanationOfBenefitItemDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItemDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitItemDetail - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitItemDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['revenue']) {
            _this.revenue = new CodeableConcept(source.revenue);
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ExplanationOfBenefitItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['subDetail']) {
            _this.subDetail = source.subDetail.map(function (x) { return new ExplanationOfBenefitItemDetailSubDetail(x); });
        }
        else {
            _this.subDetail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitItemDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.item.detail.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["revenue"]) {
            (_b = outcome.issue).push.apply(_b, this.revenue.doModelValidation().issue);
        }
        if (this["category"]) {
            (_c = outcome.issue).push.apply(_c, this.category.doModelValidation().issue);
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.detail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_d = outcome.issue).push.apply(_d, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_f = outcome.issue).push.apply(_f, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_g = outcome.issue).push.apply(_g, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_h = outcome.issue).push.apply(_h, this.net.doModelValidation().issue);
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitItemDetail._fts_dataType = 'ExplanationOfBenefitItemDetail';
    return ExplanationOfBenefitItemDetail;
}(BackboneElement));
/**
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
var ExplanationOfBenefitItem = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitItem, _super);
    /**
     * Default constructor for ExplanationOfBenefitItem - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['sequence']) {
            _this.sequence = new FhirPositiveInt({ value: source.sequence });
        }
        else {
            _this.sequence = null;
        }
        if (source['careTeamSequence']) {
            _this.careTeamSequence = source.careTeamSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.careTeamSequence = [];
        }
        if (source['diagnosisSequence']) {
            _this.diagnosisSequence = source.diagnosisSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.diagnosisSequence = [];
        }
        if (source['procedureSequence']) {
            _this.procedureSequence = source.procedureSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.procedureSequence = [];
        }
        if (source['informationSequence']) {
            _this.informationSequence = source.informationSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.informationSequence = [];
        }
        if (source['revenue']) {
            _this.revenue = new CodeableConcept(source.revenue);
        }
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['serviced']) {
            _this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            _this.serviced = new FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            _this.serviced = new Period(source.servicedPeriod);
        }
        if (source['location']) {
            _this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            _this.location = new CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            _this.location = new Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            _this.location = new Reference(source.locationReference);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['udi']) {
            _this.udi = source.udi.map(function (x) { return new Reference(x); });
        }
        else {
            _this.udi = [];
        }
        if (source['bodySite']) {
            _this.bodySite = new CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            _this.subSite = source.subSite.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.subSite = [];
        }
        if (source['encounter']) {
            _this.encounter = source.encounter.map(function (x) { return new Reference(x); });
        }
        else {
            _this.encounter = [];
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ExplanationOfBenefitItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['detail']) {
            _this.detail = source.detail.map(function (x) { return new ExplanationOfBenefitItemDetail(x); });
        }
        else {
            _this.detail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitItem.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['sequence']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property sequence:fhir.FhirPositiveInt fhir: ExplanationOfBenefit.item.sequence:positiveInt', }));
        }
        if (this["sequence"]) {
            (_a = outcome.issue).push.apply(_a, this.sequence.doModelValidation().issue);
        }
        if (this["careTeamSequence"]) {
            this.careTeamSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["diagnosisSequence"]) {
            this.diagnosisSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["procedureSequence"]) {
            this.procedureSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["informationSequence"]) {
            this.informationSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["revenue"]) {
            (_b = outcome.issue).push.apply(_b, this.revenue.doModelValidation().issue);
        }
        if (this["category"]) {
            (_c = outcome.issue).push.apply(_c, this.category.doModelValidation().issue);
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.item.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_d = outcome.issue).push.apply(_d, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_e = outcome.issue).push.apply(_e, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_f = outcome.issue).push.apply(_f, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_g = outcome.issue).push.apply(_g, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_h = outcome.issue).push.apply(_h, this.net.doModelValidation().issue);
        }
        if (this["udi"]) {
            this.udi.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["bodySite"]) {
            (_j = outcome.issue).push.apply(_j, this.bodySite.doModelValidation().issue);
        }
        if (this["subSite"]) {
            this.subSite.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["encounter"]) {
            this.encounter.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["detail"]) {
            this.detail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitItem._fts_dataType = 'ExplanationOfBenefitItem';
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.serviced[x]
     */
    ExplanationOfBenefitItem._fts_servicedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.item.location[x]
     */
    ExplanationOfBenefitItem._fts_locationIsChoice = true;
    return ExplanationOfBenefitItem;
}(BackboneElement));
/**
 * The third-tier service adjudications for payor added services.
 */
var ExplanationOfBenefitAddItemDetailSubDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAddItemDetailSubDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetailSubDetail - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitAddItemDetailSubDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ExplanationOfBenefitItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitAddItemDetailSubDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.addItem.detail.subDetail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_a = outcome.issue).push.apply(_a, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_c = outcome.issue).push.apply(_c, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_d = outcome.issue).push.apply(_d, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_e = outcome.issue).push.apply(_e, this.net.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitAddItemDetailSubDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetailSubDetail';
    return ExplanationOfBenefitAddItemDetailSubDetail;
}(BackboneElement));
/**
 * The second-tier service adjudications for payor added services.
 */
var ExplanationOfBenefitAddItemDetail = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAddItemDetail, _super);
    /**
     * Default constructor for ExplanationOfBenefitAddItemDetail - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitAddItemDetail(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ExplanationOfBenefitItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['subDetail']) {
            _this.subDetail = source.subDetail.map(function (x) { return new ExplanationOfBenefitAddItemDetailSubDetail(x); });
        }
        else {
            _this.subDetail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitAddItemDetail.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.addItem.detail.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_a = outcome.issue).push.apply(_a, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_c = outcome.issue).push.apply(_c, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_d = outcome.issue).push.apply(_d, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_e = outcome.issue).push.apply(_e, this.net.doModelValidation().issue);
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subDetail"]) {
            this.subDetail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitAddItemDetail._fts_dataType = 'ExplanationOfBenefitAddItemDetail';
    return ExplanationOfBenefitAddItemDetail;
}(BackboneElement));
/**
 * The first-tier service adjudications for payor added product or service lines.
 */
var ExplanationOfBenefitAddItem = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitAddItem, _super);
    /**
     * Default constructor for ExplanationOfBenefitAddItem - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitAddItem(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['itemSequence']) {
            _this.itemSequence = source.itemSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.itemSequence = [];
        }
        if (source['detailSequence']) {
            _this.detailSequence = source.detailSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.detailSequence = [];
        }
        if (source['subDetailSequence']) {
            _this.subDetailSequence = source.subDetailSequence.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.subDetailSequence = [];
        }
        if (source['provider']) {
            _this.provider = source.provider.map(function (x) { return new Reference(x); });
        }
        else {
            _this.provider = [];
        }
        if (source['productOrService']) {
            _this.productOrService = new CodeableConcept(source.productOrService);
        }
        else {
            _this.productOrService = null;
        }
        if (source['modifier']) {
            _this.modifier = source.modifier.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.modifier = [];
        }
        if (source['programCode']) {
            _this.programCode = source.programCode.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.programCode = [];
        }
        if (source['serviced']) {
            _this.serviced = source.serviced;
        }
        else if (source['servicedDate']) {
            _this.serviced = new FhirDate({ value: source.servicedDate });
        }
        else if (source['servicedPeriod']) {
            _this.serviced = new Period(source.servicedPeriod);
        }
        if (source['location']) {
            _this.location = source.location;
        }
        else if (source['locationCodeableConcept']) {
            _this.location = new CodeableConcept(source.locationCodeableConcept);
        }
        else if (source['locationAddress']) {
            _this.location = new Address(source.locationAddress);
        }
        else if (source['locationReference']) {
            _this.location = new Reference(source.locationReference);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        if (source['unitPrice']) {
            _this.unitPrice = new Money(source.unitPrice);
        }
        if (source['factor']) {
            _this.factor = new FhirDecimal({ value: source.factor });
        }
        if (source['net']) {
            _this.net = new Money(source.net);
        }
        if (source['bodySite']) {
            _this.bodySite = new CodeableConcept(source.bodySite);
        }
        if (source['subSite']) {
            _this.subSite = source.subSite.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.subSite = [];
        }
        if (source['noteNumber']) {
            _this.noteNumber = source.noteNumber.map(function (x) { return new FhirPositiveInt({ value: x }); });
        }
        else {
            _this.noteNumber = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ExplanationOfBenefitItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['detail']) {
            _this.detail = source.detail.map(function (x) { return new ExplanationOfBenefitAddItemDetail(x); });
        }
        else {
            _this.detail = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitAddItem.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["itemSequence"]) {
            this.itemSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["detailSequence"]) {
            this.detailSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["subDetailSequence"]) {
            this.subDetailSequence.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["provider"]) {
            this.provider.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['productOrService']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property productOrService:fhir.CodeableConcept fhir: ExplanationOfBenefit.addItem.productOrService:CodeableConcept', }));
        }
        if (this["productOrService"]) {
            (_a = outcome.issue).push.apply(_a, this.productOrService.doModelValidation().issue);
        }
        if (this["modifier"]) {
            this.modifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["programCode"]) {
            this.programCode.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["quantity"]) {
            (_b = outcome.issue).push.apply(_b, this.quantity.doModelValidation().issue);
        }
        if (this["unitPrice"]) {
            (_c = outcome.issue).push.apply(_c, this.unitPrice.doModelValidation().issue);
        }
        if (this["factor"]) {
            (_d = outcome.issue).push.apply(_d, this.factor.doModelValidation().issue);
        }
        if (this["net"]) {
            (_e = outcome.issue).push.apply(_e, this.net.doModelValidation().issue);
        }
        if (this["bodySite"]) {
            (_f = outcome.issue).push.apply(_f, this.bodySite.doModelValidation().issue);
        }
        if (this["subSite"]) {
            this.subSite.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["noteNumber"]) {
            this.noteNumber.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["detail"]) {
            this.detail.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitAddItem._fts_dataType = 'ExplanationOfBenefitAddItem';
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.serviced[x]
     */
    ExplanationOfBenefitAddItem._fts_servicedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.addItem.location[x]
     */
    ExplanationOfBenefitAddItem._fts_locationIsChoice = true;
    return ExplanationOfBenefitAddItem;
}(BackboneElement));
/**
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
var ExplanationOfBenefitTotal = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitTotal, _super);
    /**
     * Default constructor for ExplanationOfBenefitTotal - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitTotal(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        else {
            _this.amount = null;
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitTotal.prototype.doModelValidation = function () {
        var _a, _b;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.total.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (!this['amount']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property amount:fhir.Money fhir: ExplanationOfBenefit.total.amount:Money', }));
        }
        if (this["amount"]) {
            (_b = outcome.issue).push.apply(_b, this.amount.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitTotal._fts_dataType = 'ExplanationOfBenefitTotal';
    return ExplanationOfBenefitTotal;
}(BackboneElement));
/**
 * Payment details for the adjudication of the claim.
 */
var ExplanationOfBenefitPayment = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitPayment, _super);
    /**
     * Default constructor for ExplanationOfBenefitPayment - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitPayment(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        if (source['adjustment']) {
            _this.adjustment = new Money(source.adjustment);
        }
        if (source['adjustmentReason']) {
            _this.adjustmentReason = new CodeableConcept(source.adjustmentReason);
        }
        if (source['date']) {
            _this.date = new FhirDate({ value: source.date });
        }
        if (source['amount']) {
            _this.amount = new Money(source.amount);
        }
        if (source['identifier']) {
            _this.identifier = new Identifier(source.identifier);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitPayment.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["adjustment"]) {
            (_b = outcome.issue).push.apply(_b, this.adjustment.doModelValidation().issue);
        }
        if (this["adjustmentReason"]) {
            (_c = outcome.issue).push.apply(_c, this.adjustmentReason.doModelValidation().issue);
        }
        if (this["date"]) {
            (_d = outcome.issue).push.apply(_d, this.date.doModelValidation().issue);
        }
        if (this["amount"]) {
            (_e = outcome.issue).push.apply(_e, this.amount.doModelValidation().issue);
        }
        if (this["identifier"]) {
            (_f = outcome.issue).push.apply(_f, this.identifier.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitPayment._fts_dataType = 'ExplanationOfBenefitPayment';
    return ExplanationOfBenefitPayment;
}(BackboneElement));
/**
 * A note that describes or explains adjudication results in a human readable form.
 */
var ExplanationOfBenefitProcessNote = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitProcessNote, _super);
    /**
     * Default constructor for ExplanationOfBenefitProcessNote - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitProcessNote(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['number']) {
            _this.number = new FhirPositiveInt({ value: source.number });
        }
        if (source['type']) {
            _this.type = source.type;
        }
        if (source['text']) {
            _this.text = new FhirString({ value: source.text });
        }
        if (source['language']) {
            _this.language = new CodeableConcept(source.language);
        }
        return _this;
    }
    /**
     * Required-bound Value Set for type (ExplanationOfBenefit.processNote.type)
     */
    ExplanationOfBenefitProcessNote.typeRequiredCoding = function () {
        return NoteTypeCodings;
    };
    /**
     * Preferred-bound Value Set for language (ExplanationOfBenefit.processNote.language)
     */
    ExplanationOfBenefitProcessNote.languagePreferredCoding = function () {
        return LanguagesCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitProcessNote.prototype.doModelValidation = function () {
        var _a, _b, _c;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (this["number"]) {
            (_a = outcome.issue).push.apply(_a, this.number.doModelValidation().issue);
        }
        if (this["text"]) {
            (_b = outcome.issue).push.apply(_b, this.text.doModelValidation().issue);
        }
        if (this["language"]) {
            (_c = outcome.issue).push.apply(_c, this.language.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitProcessNote._fts_dataType = 'ExplanationOfBenefitProcessNote';
    return ExplanationOfBenefitProcessNote;
}(BackboneElement));
/**
 * Benefits Used to date.
 */
var ExplanationOfBenefitBenefitBalanceFinancial = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitBenefitBalanceFinancial, _super);
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalanceFinancial - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitBenefitBalanceFinancial(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['allowed']) {
            _this.allowed = source.allowed;
        }
        else if (source['allowedUnsignedInt']) {
            _this.allowed = new FhirUnsignedInt({ value: source.allowedUnsignedInt });
        }
        else if (source['allowedString']) {
            _this.allowed = new FhirString({ value: source.allowedString });
        }
        else if (source['allowedMoney']) {
            _this.allowed = new Money(source.allowedMoney);
        }
        if (source['used']) {
            _this.used = source.used;
        }
        else if (source['usedUnsignedInt']) {
            _this.used = new FhirUnsignedInt({ value: source.usedUnsignedInt });
        }
        else if (source['usedMoney']) {
            _this.used = new Money(source.usedMoney);
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitBenefitBalanceFinancial.prototype.doModelValidation = function () {
        var _a;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ExplanationOfBenefit.benefitBalance.financial.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitBenefitBalanceFinancial._fts_dataType = 'ExplanationOfBenefitBenefitBalanceFinancial';
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.allowed[x]
     */
    ExplanationOfBenefitBenefitBalanceFinancial._fts_allowedIsChoice = true;
    /**
     * Internal flag to properly serialize choice-type element ExplanationOfBenefit.benefitBalance.financial.used[x]
     */
    ExplanationOfBenefitBenefitBalanceFinancial._fts_usedIsChoice = true;
    return ExplanationOfBenefitBenefitBalanceFinancial;
}(BackboneElement));
/**
 * Balance by Benefit Category.
 */
var ExplanationOfBenefitBenefitBalance = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefitBenefitBalance, _super);
    /**
     * Default constructor for ExplanationOfBenefitBenefitBalance - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefitBenefitBalance(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        if (source['category']) {
            _this.category = new CodeableConcept(source.category);
        }
        else {
            _this.category = null;
        }
        if (source['excluded']) {
            _this.excluded = new FhirBoolean({ value: source.excluded });
        }
        if (source['name']) {
            _this.name = new FhirString({ value: source.name });
        }
        if (source['description']) {
            _this.description = new FhirString({ value: source.description });
        }
        if (source['network']) {
            _this.network = new CodeableConcept(source.network);
        }
        if (source['unit']) {
            _this.unit = new CodeableConcept(source.unit);
        }
        if (source['term']) {
            _this.term = new CodeableConcept(source.term);
        }
        if (source['financial']) {
            _this.financial = source.financial.map(function (x) { return new ExplanationOfBenefitBenefitBalanceFinancial(x); });
        }
        else {
            _this.financial = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefitBenefitBalance.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['category']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property category:fhir.CodeableConcept fhir: ExplanationOfBenefit.benefitBalance.category:CodeableConcept', }));
        }
        if (this["category"]) {
            (_a = outcome.issue).push.apply(_a, this.category.doModelValidation().issue);
        }
        if (this["excluded"]) {
            (_b = outcome.issue).push.apply(_b, this.excluded.doModelValidation().issue);
        }
        if (this["name"]) {
            (_c = outcome.issue).push.apply(_c, this.name.doModelValidation().issue);
        }
        if (this["description"]) {
            (_d = outcome.issue).push.apply(_d, this.description.doModelValidation().issue);
        }
        if (this["network"]) {
            (_e = outcome.issue).push.apply(_e, this.network.doModelValidation().issue);
        }
        if (this["unit"]) {
            (_f = outcome.issue).push.apply(_f, this.unit.doModelValidation().issue);
        }
        if (this["term"]) {
            (_g = outcome.issue).push.apply(_g, this.term.doModelValidation().issue);
        }
        if (this["financial"]) {
            this.financial.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefitBenefitBalance._fts_dataType = 'ExplanationOfBenefitBenefitBalance';
    return ExplanationOfBenefitBenefitBalance;
}(BackboneElement));
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
var ExplanationOfBenefit = /** @class */ (function (_super) {
    __extends(ExplanationOfBenefit, _super);
    /**
     * Default constructor for ExplanationOfBenefit - initializes any required elements to null if a value is not provided.
     */
    function ExplanationOfBenefit(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'ExplanationOfBenefit';
        if (source['identifier']) {
            _this.identifier = source.identifier.map(function (x) { return new Identifier(x); });
        }
        else {
            _this.identifier = [];
        }
        if (source['status']) {
            _this.status = source.status;
        }
        else {
            _this.status = null;
        }
        if (source['type']) {
            _this.type = new CodeableConcept(source.type);
        }
        else {
            _this.type = null;
        }
        if (source['subType']) {
            _this.subType = new CodeableConcept(source.subType);
        }
        if (source['use']) {
            _this.use = source.use;
        }
        else {
            _this.use = null;
        }
        if (source['patient']) {
            _this.patient = new Reference(source.patient);
        }
        else {
            _this.patient = null;
        }
        if (source['billablePeriod']) {
            _this.billablePeriod = new Period(source.billablePeriod);
        }
        if (source['created']) {
            _this.created = new FhirDateTime({ value: source.created });
        }
        else {
            _this.created = null;
        }
        if (source['enterer']) {
            _this.enterer = new Reference(source.enterer);
        }
        if (source['insurer']) {
            _this.insurer = new Reference(source.insurer);
        }
        else {
            _this.insurer = null;
        }
        if (source['provider']) {
            _this.provider = new Reference(source.provider);
        }
        else {
            _this.provider = null;
        }
        if (source['priority']) {
            _this.priority = new CodeableConcept(source.priority);
        }
        if (source['fundsReserveRequested']) {
            _this.fundsReserveRequested = new CodeableConcept(source.fundsReserveRequested);
        }
        if (source['fundsReserve']) {
            _this.fundsReserve = new CodeableConcept(source.fundsReserve);
        }
        if (source['related']) {
            _this.related = source.related.map(function (x) { return new ExplanationOfBenefitRelated(x); });
        }
        else {
            _this.related = [];
        }
        if (source['prescription']) {
            _this.prescription = new Reference(source.prescription);
        }
        if (source['originalPrescription']) {
            _this.originalPrescription = new Reference(source.originalPrescription);
        }
        if (source['payee']) {
            _this.payee = new ExplanationOfBenefitPayee(source.payee);
        }
        if (source['referral']) {
            _this.referral = new Reference(source.referral);
        }
        if (source['facility']) {
            _this.facility = new Reference(source.facility);
        }
        if (source['claim']) {
            _this.claim = new Reference(source.claim);
        }
        if (source['claimResponse']) {
            _this.claimResponse = new Reference(source.claimResponse);
        }
        if (source['outcome']) {
            _this.outcome = source.outcome;
        }
        else {
            _this.outcome = null;
        }
        if (source['disposition']) {
            _this.disposition = new FhirString({ value: source.disposition });
        }
        if (source['preAuthRef']) {
            _this.preAuthRef = source.preAuthRef.map(function (x) { return new FhirString({ value: x }); });
        }
        else {
            _this.preAuthRef = [];
        }
        if (source['preAuthRefPeriod']) {
            _this.preAuthRefPeriod = source.preAuthRefPeriod.map(function (x) { return new Period(x); });
        }
        else {
            _this.preAuthRefPeriod = [];
        }
        if (source['careTeam']) {
            _this.careTeam = source.careTeam.map(function (x) { return new ExplanationOfBenefitCareTeam(x); });
        }
        else {
            _this.careTeam = [];
        }
        if (source['supportingInfo']) {
            _this.supportingInfo = source.supportingInfo.map(function (x) { return new ExplanationOfBenefitSupportingInfo(x); });
        }
        else {
            _this.supportingInfo = [];
        }
        if (source['diagnosis']) {
            _this.diagnosis = source.diagnosis.map(function (x) { return new ExplanationOfBenefitDiagnosis(x); });
        }
        else {
            _this.diagnosis = [];
        }
        if (source['procedure']) {
            _this.procedure = source.procedure.map(function (x) { return new ExplanationOfBenefitProcedure(x); });
        }
        else {
            _this.procedure = [];
        }
        if (source['precedence']) {
            _this.precedence = new FhirPositiveInt({ value: source.precedence });
        }
        if (source['insurance']) {
            _this.insurance = source.insurance.map(function (x) { return new ExplanationOfBenefitInsurance(x); });
        }
        else {
            _this.insurance = [];
        }
        if (source['accident']) {
            _this.accident = new ExplanationOfBenefitAccident(source.accident);
        }
        if (source['item']) {
            _this.item = source.item.map(function (x) { return new ExplanationOfBenefitItem(x); });
        }
        else {
            _this.item = [];
        }
        if (source['addItem']) {
            _this.addItem = source.addItem.map(function (x) { return new ExplanationOfBenefitAddItem(x); });
        }
        else {
            _this.addItem = [];
        }
        if (source['adjudication']) {
            _this.adjudication = source.adjudication.map(function (x) { return new ExplanationOfBenefitItemAdjudication(x); });
        }
        else {
            _this.adjudication = [];
        }
        if (source['total']) {
            _this.total = source.total.map(function (x) { return new ExplanationOfBenefitTotal(x); });
        }
        else {
            _this.total = [];
        }
        if (source['payment']) {
            _this.payment = new ExplanationOfBenefitPayment(source.payment);
        }
        if (source['formCode']) {
            _this.formCode = new CodeableConcept(source.formCode);
        }
        if (source['form']) {
            _this.form = new Attachment(source.form);
        }
        if (source['processNote']) {
            _this.processNote = source.processNote.map(function (x) { return new ExplanationOfBenefitProcessNote(x); });
        }
        else {
            _this.processNote = [];
        }
        if (source['benefitPeriod']) {
            _this.benefitPeriod = new Period(source.benefitPeriod);
        }
        if (source['benefitBalance']) {
            _this.benefitBalance = source.benefitBalance.map(function (x) { return new ExplanationOfBenefitBenefitBalance(x); });
        }
        else {
            _this.benefitBalance = [];
        }
        return _this;
    }
    /**
     * Required-bound Value Set for status (ExplanationOfBenefit.status)
     */
    ExplanationOfBenefit.statusRequiredCoding = function () {
        return ExplanationofbenefitStatusCodings;
    };
    /**
     * Extensible-bound Value Set for type (ExplanationOfBenefit.type)
     */
    ExplanationOfBenefit.typeExtensibleCoding = function () {
        return ClaimTypeCodings;
    };
    /**
     * Required-bound Value Set for use (ExplanationOfBenefit.use)
     */
    ExplanationOfBenefit.useRequiredCoding = function () {
        return ClaimUseCodings;
    };
    /**
     * Required-bound Value Set for outcome (ExplanationOfBenefit.outcome)
     */
    ExplanationOfBenefit.outcomeRequiredCoding = function () {
        return RemittanceOutcomeCodings;
    };
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    ExplanationOfBenefit.prototype.doModelValidation = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"ExplanationOfBenefit" fhir: ExplanationOfBenefit.resourceType:"ExplanationOfBenefit"', }));
        }
        if (this["identifier"]) {
            this.identifier.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (!this['status']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property status:ExplanationofbenefitStatusCodeType fhir: ExplanationOfBenefit.status:code', }));
        }
        if (!this['type']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property type:fhir.CodeableConcept fhir: ExplanationOfBenefit.type:CodeableConcept', }));
        }
        if (this["type"]) {
            (_a = outcome.issue).push.apply(_a, this.type.doModelValidation().issue);
        }
        if (this["subType"]) {
            (_b = outcome.issue).push.apply(_b, this.subType.doModelValidation().issue);
        }
        if (!this['use']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property use:ClaimUseCodeType fhir: ExplanationOfBenefit.use:code', }));
        }
        if (!this['patient']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property patient:fhir.Reference fhir: ExplanationOfBenefit.patient:Reference', }));
        }
        if (this["patient"]) {
            (_c = outcome.issue).push.apply(_c, this.patient.doModelValidation().issue);
        }
        if (this["billablePeriod"]) {
            (_d = outcome.issue).push.apply(_d, this.billablePeriod.doModelValidation().issue);
        }
        if (!this['created']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property created:fhir.FhirDateTime fhir: ExplanationOfBenefit.created:dateTime', }));
        }
        if (this["created"]) {
            (_e = outcome.issue).push.apply(_e, this.created.doModelValidation().issue);
        }
        if (this["enterer"]) {
            (_f = outcome.issue).push.apply(_f, this.enterer.doModelValidation().issue);
        }
        if (!this['insurer']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property insurer:fhir.Reference fhir: ExplanationOfBenefit.insurer:Reference', }));
        }
        if (this["insurer"]) {
            (_g = outcome.issue).push.apply(_g, this.insurer.doModelValidation().issue);
        }
        if (!this['provider']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property provider:fhir.Reference fhir: ExplanationOfBenefit.provider:Reference', }));
        }
        if (this["provider"]) {
            (_h = outcome.issue).push.apply(_h, this.provider.doModelValidation().issue);
        }
        if (this["priority"]) {
            (_j = outcome.issue).push.apply(_j, this.priority.doModelValidation().issue);
        }
        if (this["fundsReserveRequested"]) {
            (_k = outcome.issue).push.apply(_k, this.fundsReserveRequested.doModelValidation().issue);
        }
        if (this["fundsReserve"]) {
            (_l = outcome.issue).push.apply(_l, this.fundsReserve.doModelValidation().issue);
        }
        if (this["related"]) {
            this.related.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["prescription"]) {
            (_m = outcome.issue).push.apply(_m, this.prescription.doModelValidation().issue);
        }
        if (this["originalPrescription"]) {
            (_o = outcome.issue).push.apply(_o, this.originalPrescription.doModelValidation().issue);
        }
        if (this["payee"]) {
            (_p = outcome.issue).push.apply(_p, this.payee.doModelValidation().issue);
        }
        if (this["referral"]) {
            (_q = outcome.issue).push.apply(_q, this.referral.doModelValidation().issue);
        }
        if (this["facility"]) {
            (_r = outcome.issue).push.apply(_r, this.facility.doModelValidation().issue);
        }
        if (this["claim"]) {
            (_s = outcome.issue).push.apply(_s, this.claim.doModelValidation().issue);
        }
        if (this["claimResponse"]) {
            (_t = outcome.issue).push.apply(_t, this.claimResponse.doModelValidation().issue);
        }
        if (!this['outcome']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property outcome:RemittanceOutcomeCodeType fhir: ExplanationOfBenefit.outcome:code', }));
        }
        if (this["disposition"]) {
            (_u = outcome.issue).push.apply(_u, this.disposition.doModelValidation().issue);
        }
        if (this["preAuthRef"]) {
            this.preAuthRef.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["preAuthRefPeriod"]) {
            this.preAuthRefPeriod.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["careTeam"]) {
            this.careTeam.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["supportingInfo"]) {
            this.supportingInfo.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["diagnosis"]) {
            this.diagnosis.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["procedure"]) {
            this.procedure.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["precedence"]) {
            (_v = outcome.issue).push.apply(_v, this.precedence.doModelValidation().issue);
        }
        if (!this['insurance']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property insurance:fhir.ExplanationOfBenefitInsurance[] fhir: ExplanationOfBenefit.insurance:insurance', }));
        }
        else if (!Array.isArray(this.insurance)) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.StructuralIssue, diagnostics: 'Found scalar in array property insurance:fhir.ExplanationOfBenefitInsurance[] fhir: ExplanationOfBenefit.insurance:insurance', }));
        }
        else if (this.insurance.length === 0) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property insurance:fhir.ExplanationOfBenefitInsurance[] fhir: ExplanationOfBenefit.insurance:insurance', }));
        }
        if (this["insurance"]) {
            this.insurance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["accident"]) {
            (_w = outcome.issue).push.apply(_w, this.accident.doModelValidation().issue);
        }
        if (this["item"]) {
            this.item.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["addItem"]) {
            this.addItem.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["adjudication"]) {
            this.adjudication.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["total"]) {
            this.total.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["payment"]) {
            (_x = outcome.issue).push.apply(_x, this.payment.doModelValidation().issue);
        }
        if (this["formCode"]) {
            (_y = outcome.issue).push.apply(_y, this.formCode.doModelValidation().issue);
        }
        if (this["form"]) {
            (_z = outcome.issue).push.apply(_z, this.form.doModelValidation().issue);
        }
        if (this["processNote"]) {
            this.processNote.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["benefitPeriod"]) {
            (_0 = outcome.issue).push.apply(_0, this.benefitPeriod.doModelValidation().issue);
        }
        if (this["benefitBalance"]) {
            this.benefitBalance.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    ExplanationOfBenefit._fts_dataType = 'ExplanationOfBenefit';
    return ExplanationOfBenefit;
}(DomainResource));

export { ExplanationOfBenefit, ExplanationOfBenefitAccident, ExplanationOfBenefitAddItem, ExplanationOfBenefitAddItemDetail, ExplanationOfBenefitAddItemDetailSubDetail, ExplanationOfBenefitBenefitBalance, ExplanationOfBenefitBenefitBalanceFinancial, ExplanationOfBenefitCareTeam, ExplanationOfBenefitDiagnosis, ExplanationOfBenefitInsurance, ExplanationOfBenefitItem, ExplanationOfBenefitItemAdjudication, ExplanationOfBenefitItemDetail, ExplanationOfBenefitItemDetailSubDetail, ExplanationOfBenefitPayee, ExplanationOfBenefitPayment, ExplanationOfBenefitProcedure, ExplanationOfBenefitProcessNote, ExplanationOfBenefitRelated, ExplanationOfBenefitSupportingInfo, ExplanationOfBenefitTotal };
//# sourceMappingURL=ExplanationOfBenefit.js.map
