{"version":3,"file":"FhirPositiveInt.js","sources":["../../src/fhir/FhirPositiveInt.ts"],"sourcesContent":["// Minimum TypeScript Version: 3.7\r\n// FHIR Primitive: positiveInt\r\n\r\nimport * as fhir from '../fhir.js';\r\n\r\nimport { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';\r\nimport { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';\r\n\r\n/**\r\n * An integer with a value that is positive (e.g. &gt;0)\r\n */\r\nexport interface FhirPositiveIntArgs extends fhir.FhirIntegerArgs {\r\n  /**\r\n   * An integer with a value that is positive (e.g. &gt;0)\r\n   */\r\n  value?:FhirPositiveInt|number|undefined;\r\n}\r\n\r\n/**\r\n * An integer with a value that is positive (e.g. &gt;0)\r\n */\r\nexport class FhirPositiveInt extends fhir.FhirInteger {\r\n  /**\r\n   * Mapping of this datatype to a FHIR equivalent\r\n   */\r\n  public static readonly _fts_dataType:string = 'PositiveInt';\r\n  /**\r\n   * Mapping of this datatype to a JSON equivalent\r\n   */\r\n  public static readonly _fts_jsonType:string = 'number';\r\n  // published regex: [1-9][0-9]*\r\n  public static readonly _fts_regex:RegExp = /^[1-9][0-9]*$/\r\n  /**\r\n   * A positiveInt value, represented as a JS number\r\n   */\r\n  declare value?:number|null|undefined;\r\n  /**\r\n     * Create a FhirPositiveInt\r\n     * @param value An integer with a value that is positive (e.g. >0)\r\n     * @param id Unique id for inter-element referencing (uncommon on primitives)\r\n     * @param extension Additional content defined by implementations\r\n     * @param options Options to pass to extension constructors\r\n  */\r\n  constructor(source:Partial<FhirPositiveIntArgs> = {}, options:fhir.FhirConstructorOptions = { } ) {\r\n    super(source, options);\r\n  }\r\n  /**\r\n   * Function to perform basic model validation (e.g., check if required elements are present).\r\n   */\r\n  public override doModelValidation():fhir.OperationOutcome {\r\n    var outcome:fhir.OperationOutcome = super.doModelValidation();\r\n    if ((this.value) && (!FhirPositiveInt._fts_regex.test(this.value.toString()))) {\r\n      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.InvalidContent,  diagnostics: \"Invalid value in primitive type positiveInt\", }));\r\n    }\r\n    return outcome;\r\n  }\r\n}\r\n"],"names":["fhir.OperationOutcomeIssue","fhir.FhirInteger"],"mappings":";;;;;;;;AAAA;AAkBA;;AAEG;AACH,IAAA,eAAA,kBAAA,UAAA,MAAA,EAAA;IAAqC,SAAgB,CAAA,eAAA,EAAA,MAAA,CAAA,CAAA;AAenD;;;;;;AAME;IACF,SAAY,eAAA,CAAA,MAAwC,EAAE,OAAyC,EAAA;AAAnF,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAwC,GAAA,EAAA,CAAA,EAAA;AAAE,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAyC,GAAA,EAAA,CAAA,EAAA;eAC7F,MAAM,CAAA,IAAA,CAAA,IAAA,EAAA,MAAM,EAAE,OAAO,CAAC,IAAA,IAAA,CAAA;KACvB;AACD;;AAEG;AACa,IAAA,eAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjC,YAAA;AACE,QAAA,IAAI,OAAO,GAAyB,MAAM,CAAA,SAAA,CAAA,iBAAiB,WAAE,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;AAC7E,YAAA,OAAO,CAAC,KAAM,CAAC,IAAI,CAAC,IAAIA,qBAA0B,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,cAAc,EAAG,WAAW,EAAE,6CAA6C,GAAG,CAAC,CAAC,CAAC;AAChM,SAAA;AACD,QAAA,OAAO,OAAO,CAAC;KAChB,CAAA;AAjCD;;AAEG;IACoB,eAAa,CAAA,aAAA,GAAU,aAAa,CAAC;AAC5D;;AAEG;IACoB,eAAa,CAAA,aAAA,GAAU,QAAQ,CAAC;;IAEhC,eAAU,CAAA,UAAA,GAAU,eAAe,CAAA;IAyB5D,OAAC,eAAA,CAAA;AAAA,CAnCD,CAAqCC,WAAgB,CAmCpD;;;;"}