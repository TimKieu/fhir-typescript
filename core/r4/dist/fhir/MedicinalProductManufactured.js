/*! @fhir-typescript/r4-core v0.0.11-beta.2 2022-05-18 */
'use strict';
import { __extends } from '../_virtual/_tslib.js';
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
import { OperationOutcomeIssue } from './OperationOutcome.js';
import { DomainResource } from './DomainResource.js';
import { CodeableConcept } from './CodeableConcept.js';
import { Quantity } from './Quantity.js';
import { Reference } from './Reference.js';
import { ProdCharacteristic } from './ProdCharacteristic.js';

// <auto-generated/>
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
var MedicinalProductManufactured = /** @class */ (function (_super) {
    __extends(MedicinalProductManufactured, _super);
    /**
     * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
     */
    function MedicinalProductManufactured(source, options) {
        if (source === void 0) { source = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, source, options) || this;
        _this.resourceType = 'MedicinalProductManufactured';
        if (source['manufacturedDoseForm']) {
            _this.manufacturedDoseForm = new CodeableConcept(source.manufacturedDoseForm);
        }
        else {
            _this.manufacturedDoseForm = null;
        }
        if (source['unitOfPresentation']) {
            _this.unitOfPresentation = new CodeableConcept(source.unitOfPresentation);
        }
        if (source['quantity']) {
            _this.quantity = new Quantity(source.quantity);
        }
        else {
            _this.quantity = null;
        }
        if (source['manufacturer']) {
            _this.manufacturer = source.manufacturer.map(function (x) { return new Reference(x); });
        }
        else {
            _this.manufacturer = [];
        }
        if (source['ingredient']) {
            _this.ingredient = source.ingredient.map(function (x) { return new Reference(x); });
        }
        else {
            _this.ingredient = [];
        }
        if (source['physicalCharacteristics']) {
            _this.physicalCharacteristics = new ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['otherCharacteristics']) {
            _this.otherCharacteristics = source.otherCharacteristics.map(function (x) { return new CodeableConcept(x); });
        }
        else {
            _this.otherCharacteristics = [];
        }
        return _this;
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    MedicinalProductManufactured.prototype.doModelValidation = function () {
        var _a, _b, _c, _d;
        var outcome = _super.prototype.doModelValidation.call(this);
        if (!this['resourceType']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property resourceType:"MedicinalProductManufactured" fhir: MedicinalProductManufactured.resourceType:"MedicinalProductManufactured"', }));
        }
        if (!this['manufacturedDoseForm']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property manufacturedDoseForm:fhir.CodeableConcept fhir: MedicinalProductManufactured.manufacturedDoseForm:CodeableConcept', }));
        }
        if (this["manufacturedDoseForm"]) {
            (_a = outcome.issue).push.apply(_a, this.manufacturedDoseForm.doModelValidation().issue);
        }
        if (this["unitOfPresentation"]) {
            (_b = outcome.issue).push.apply(_b, this.unitOfPresentation.doModelValidation().issue);
        }
        if (!this['quantity']) {
            outcome.issue.push(new OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing, diagnostics: 'Missing required property quantity:fhir.Quantity fhir: MedicinalProductManufactured.quantity:Quantity', }));
        }
        if (this["quantity"]) {
            (_c = outcome.issue).push.apply(_c, this.quantity.doModelValidation().issue);
        }
        if (this["manufacturer"]) {
            this.manufacturer.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["ingredient"]) {
            this.ingredient.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        if (this["physicalCharacteristics"]) {
            (_d = outcome.issue).push.apply(_d, this.physicalCharacteristics.doModelValidation().issue);
        }
        if (this["otherCharacteristics"]) {
            this.otherCharacteristics.forEach(function (x) {
                var _a;
                (_a = outcome.issue).push.apply(_a, x.doModelValidation().issue);
            });
        }
        return outcome;
    };
    /**
     * Mapping of this datatype to a FHIR equivalent
     */
    MedicinalProductManufactured._fts_dataType = 'MedicinalProductManufactured';
    return MedicinalProductManufactured;
}(DomainResource));

export { MedicinalProductManufactured };
//# sourceMappingURL=MedicinalProductManufactured.js.map
