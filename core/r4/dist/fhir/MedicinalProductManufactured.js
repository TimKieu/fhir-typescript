// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductManufactured
import * as fhir from '../fhir.js';
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductManufactured';
        if (source['manufacturedDoseForm']) {
            this.manufacturedDoseForm = new fhir.CodeableConcept(source.manufacturedDoseForm, options);
        }
        else {
            this.manufacturedDoseForm = null;
        }
        if (source['unitOfPresentation']) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation, options);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity, options);
        }
        else {
            this.quantity = null;
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.manufacturer = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.Reference(x, options));
        }
        else {
            this.ingredient = [];
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics, options);
        }
        if (source['otherCharacteristics']) {
            this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x, options));
        }
        else {
            this.otherCharacteristics = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(exp = '') {
        let iss = super.doModelValidation(exp);
        if (exp === '') {
            exp = 'MedicinalProductManufactured';
        }
        iss.push(...this.vRS('manufacturedDoseForm', exp));
        iss.push(...this.vOS('unitOfPresentation', exp));
        iss.push(...this.vRS('quantity', exp));
        iss.push(...this.vOA('manufacturer', exp));
        iss.push(...this.vOA('ingredient', exp));
        iss.push(...this.vOS('physicalCharacteristics', exp));
        iss.push(...this.vOA('otherCharacteristics', exp));
        return iss;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductManufactured._fts_dataType = 'MedicinalProductManufactured';
//# sourceMappingURL=data:application/json;base64,