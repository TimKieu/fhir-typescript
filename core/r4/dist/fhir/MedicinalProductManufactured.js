// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductManufactured
import * as fhir from '../fhir.js';
/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhir.DomainResource {
    /**
     * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
     */
    constructor(source = {}, options = {}) {
        super(source, options);
        this.resourceType = 'MedicinalProductManufactured';
        if (source['manufacturedDoseForm']) {
            this.manufacturedDoseForm = new fhir.CodeableConcept(source.manufacturedDoseForm);
        }
        else {
            this.manufacturedDoseForm = null;
        }
        if (source['unitOfPresentation']) {
            this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation);
        }
        if (source['quantity']) {
            this.quantity = new fhir.Quantity(source.quantity);
        }
        else {
            this.quantity = null;
        }
        if (source['manufacturer']) {
            this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x));
        }
        else {
            this.manufacturer = [];
        }
        if (source['ingredient']) {
            this.ingredient = source.ingredient.map((x) => new fhir.Reference(x));
        }
        else {
            this.ingredient = [];
        }
        if (source['physicalCharacteristics']) {
            this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics);
        }
        if (source['otherCharacteristics']) {
            this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x));
        }
        else {
            this.otherCharacteristics = [];
        }
    }
    /**
     * Function to perform basic model validation (e.g., check if required elements are present).
     */
    doModelValidation(expression = '') {
        let issues = super.doModelValidation(expression);
        if (expression === '') {
            expression = 'MedicinalProductManufactured';
        }
        this.vReqS('resourceType', expression);
        this.vReqS('manufacturedDoseForm', expression);
        this.vOptS('unitOfPresentation', expression);
        this.vReqS('quantity', expression);
        this.vOptA('manufacturer', expression);
        this.vOptA('ingredient', expression);
        this.vOptS('physicalCharacteristics', expression);
        this.vOptA('otherCharacteristics', expression);
        return issues;
    }
}
/**
 * Mapping of this datatype to a FHIR equivalent
 */
MedicinalProductManufactured._fts_dataType = 'MedicinalProductManufactured';
//# sourceMappingURL=data:application/json;base64,