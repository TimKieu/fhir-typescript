// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceUseStatement
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlVXNlU3RhdGVtZW50LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpckpzb24vRGV2aWNlVXNlU3RhdGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLG9DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogRGV2aWNlVXNlU3RhdGVtZW50XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogQSByZWNvcmQgb2YgYSBkZXZpY2UgYmVpbmcgdXNlZCBieSBhIHBhdGllbnQgd2hlcmUgdGhlIHJlY29yZCBpcyB0aGUgcmVzdWx0IG9mIGEgcmVwb3J0IGZyb20gdGhlIHBhdGllbnQgb3IgYW5vdGhlciBjbGluaWNpYW4uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZVVzZVN0YXRlbWVudCBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2UgeyBcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiRGV2aWNlVXNlU3RhdGVtZW50XCI7XHJcbiAgLyoqXHJcbiAgICogQW4gZXh0ZXJuYWwgaWRlbnRpZmllciBmb3IgdGhpcyBzdGF0ZW1lbnQgc3VjaCBhcyBhbiBJUkkuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcltdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHBsYW4sIHByb3Bvc2FsIG9yIG9yZGVyIHRoYXQgaXMgZnVsZmlsbGVkIGluIHdob2xlIG9yIGluIHBhcnQgYnkgdGhpcyBEZXZpY2VVc2VTdGF0ZW1lbnQuXHJcbiAgICovXHJcbiAgYmFzZWRPbj86IGZoaXIuUmVmZXJlbmNlW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIERldmljZVVzZVN0YXRtZW50IGlzIGEgc3RhdGVtZW50IGF0IGEgcG9pbnQgaW4gdGltZS4gIFRoZSBzdGF0dXMgaXMgb25seSByZXByZXNlbnRhdGl2ZSBhdCB0aGUgcG9pbnQgd2hlbiBpdCB3YXMgYXNzZXJ0ZWQuICBUaGUgdmFsdWUgc2V0IGZvciBjb250YWlucyBjb2RlcyB0aGF0IGFzc2VydCB0aGUgc3RhdHVzIG9mIHRoZSB1c2UgIGJ5IHRoZSBwYXRpZW50IChmb3IgZXhhbXBsZSwgc3RvcHBlZCBvciBvbiBob2xkKSBhcyB3ZWxsIGFzIGNvZGVzIHRoYXQgYXNzZXJ0IHRoZSBzdGF0dXMgb2YgdGhlIHJlc291cmNlIGl0c2VsZiAoZm9yIGV4YW1wbGUsIGVudGVyZWQgaW4gZXJyb3IpLlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIHRoZSBjb2RlcyB0aGF0IG1hcmsgdGhlIHN0YXRlbWVudCBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHN0YXR1czogJ2FjdGl2ZSd8J2NvbXBsZXRlZCd8J2VudGVyZWQtaW4tZXJyb3InfCdpbnRlbmRlZCd8J29uLWhvbGQnfCdzdG9wcGVkJ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VVc2VTdGF0ZW1lbnQuc3RhdHVzXHJcbiAgICovXHJcbiAgX3N0YXR1cz86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgcGF0aWVudCB3aG8gdXNlZCB0aGUgZGV2aWNlLlxyXG4gICAqL1xyXG4gIHN1YmplY3Q6IGZoaXIuUmVmZXJlbmNlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1vc3QgY29tbW9uIHVzZSBjYXNlcyBmb3IgZGVyaXZpbmcgYSBEZXZpY2VVc2VTdGF0ZW1lbnQgY29tZXMgZnJvbSBjcmVhdGluZyBpdCBmcm9tIGEgcmVxdWVzdCBvciBmcm9tIGFuIG9ic2VydmF0aW9uIG9yIGEgY2xhaW0uIGl0IHNob3VsZCBiZSBub3RlZCB0aGF0IHRoZSBhbW91bnQgb2YgaW5mb3JtYXRpb24gdGhhdCBpcyBhdmFpbGFibGUgdmFyaWVzIGZyb20gdGhlIHR5cGUgcmVzb3VyY2UgdGhhdCB5b3UgZGVyaXZlIHRoZSBEZXZpY2VVc2VTdGF0ZW1lbnQgZnJvbS5cclxuICAgKi9cclxuICBkZXJpdmVkRnJvbT86IGZoaXIuUmVmZXJlbmNlW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEhvdyBvZnRlbiB0aGUgZGV2aWNlIHdhcyB1c2VkLlxyXG4gICAqL1xyXG4gIHRpbWluZ1RpbWluZz86IGZoaXIuVGltaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBIb3cgb2Z0ZW4gdGhlIGRldmljZSB3YXMgdXNlZC5cclxuICAgKi9cclxuICB0aW1pbmdQZXJpb2Q/OiBmaGlyLlBlcmlvZHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSG93IG9mdGVuIHRoZSBkZXZpY2Ugd2FzIHVzZWQuXHJcbiAgICovXHJcbiAgdGltaW5nRGF0ZVRpbWU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXZpY2VVc2VTdGF0ZW1lbnQudGltaW5nW3hdXHJcbiAgICovXHJcbiAgX3RpbWluZ0RhdGVUaW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIGF0IHdoaWNoIHRoZSBzdGF0ZW1lbnQgd2FzIG1hZGUvcmVjb3JkZWQuXHJcbiAgICovXHJcbiAgcmVjb3JkZWRPbj86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldmljZVVzZVN0YXRlbWVudC5yZWNvcmRlZE9uXHJcbiAgICovXHJcbiAgX3JlY29yZGVkT24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogV2hvIHJlcG9ydGVkIHRoZSBkZXZpY2Ugd2FzIGJlaW5nIHVzZWQgYnkgdGhlIHBhdGllbnQuXHJcbiAgICovXHJcbiAgc291cmNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXRhaWxzIG9mIHRoZSBkZXZpY2UgdXNlZC5cclxuICAgKi9cclxuICBkZXZpY2U6IGZoaXIuUmVmZXJlbmNlfG51bGw7XHJcbiAgLyoqXHJcbiAgICogUmVhc29uIG9yIGp1c3RpZmljYXRpb24gZm9yIHRoZSB1c2Ugb2YgdGhlIGRldmljZS5cclxuICAgKi9cclxuICByZWFzb25Db2RlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIGFub3RoZXIgcmVzb3VyY2Ugd2hvc2UgZXhpc3RlbmNlIGp1c3RpZmllcyB0aGlzIERldmljZVVzZVN0YXRlbWVudC5cclxuICAgKi9cclxuICByZWFzb25SZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIGFub3RvbWljIGxvY2F0aW9uIG9uIHRoZSBzdWJqZWN0J3MgYm9keSB3aGVyZSB0aGUgZGV2aWNlIHdhcyB1c2VkICggaS5lLiB0aGUgdGFyZ2V0KS5cclxuICAgKi9cclxuICBib2R5U2l0ZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXRhaWxzIGFib3V0IHRoZSBkZXZpY2Ugc3RhdGVtZW50IHRoYXQgd2VyZSBub3QgcmVwcmVzZW50ZWQgYXQgYWxsIG9yIHN1ZmZpY2llbnRseSBpbiBvbmUgb2YgdGhlIGF0dHJpYnV0ZXMgcHJvdmlkZWQgaW4gYSBjbGFzcy4gVGhlc2UgbWF5IGluY2x1ZGUgZm9yIGV4YW1wbGUgYSBjb21tZW50LCBhbiBpbnN0cnVjdGlvbiwgb3IgYSBub3RlIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3RhdGVtZW50LlxyXG4gICAqL1xyXG4gIG5vdGU/OiBmaGlyLkFubm90YXRpb25bXXx1bmRlZmluZWQ7XHJcbn1cclxuIl19