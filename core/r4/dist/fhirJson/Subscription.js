// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Subscription
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Vic2NyaXB0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiZmhpckpzb24vU3Vic2NyaXB0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiwrQ0FBK0M7QUFDL0Msa0NBQWtDO0FBQ2xDLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxhdXRvLWdlbmVyYXRlZC8+XHJcbi8vIENvbnRlbnRzIG9mOiBobDcuZmhpci5yNC5jb3JlIHZlcnNpb246IDQuMC4xXHJcbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcclxuLy8gRkhJUiBSZXNvdXJjZTogU3Vic2NyaXB0aW9uXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogRGV0YWlscyB3aGVyZSB0byBzZW5kIG5vdGlmaWNhdGlvbnMgd2hlbiByZXNvdXJjZXMgYXJlIHJlY2VpdmVkIHRoYXQgbWVldCB0aGUgY3JpdGVyaWEuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvbkNoYW5uZWwgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIGNoYW5uZWwgdG8gc2VuZCBub3RpZmljYXRpb25zIG9uLlxyXG4gICAqL1xyXG4gIHR5cGU6ICdlbWFpbCd8J21lc3NhZ2UnfCdyZXN0LWhvb2snfCdzbXMnfCd3ZWJzb2NrZXQnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRm9yIHJlc3QtaG9vaywgYW5kIHdlYnNvY2tldCwgdGhlIGVuZC1wb2ludCBtdXN0IGJlIGFuIGh0dHA6IG9yIGh0dHBzOiBVUkw7IGZvciBlbWFpbCwgYSBtYWlsdG86IHVybCwgZm9yIHNtcywgYSB0ZWw6IHVybCwgYW5kIGZvciBtZXNzYWdlIHRoZSBlbmRwb2ludCBjYW4gYmUgaW4gYW55IGZvcm0gb2YgdXJsIHRoZSBzZXJ2ZXIgdW5kZXJzdGFuZHMgKHVzdWFsbHksIGh0dHA6IG9yIG1sbHA6KS4gVGhlIFVSSSBpcyBhbGxvd2VkIHRvIGJlIHJlbGF0aXZlOyBpbiB3aGljaCBjYXNlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgc2VydmVyIGVuZC1wb2ludCAoc2luY2UgdGhlcmUgbWF5IGJlIG1vcmUgdGhhbiBvbmUsIGNsaWVudHMgc2hvdWxkIGF2b2lkIHVzaW5nIHJlbGF0aXZlIFVSSXMpLlxyXG4gICAqL1xyXG4gIGVuZHBvaW50Pzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic2NyaXB0aW9uLmNoYW5uZWwuZW5kcG9pbnRcclxuICAgKi9cclxuICBfZW5kcG9pbnQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogU2VuZGluZyB0aGUgcGF5bG9hZCBoYXMgb2J2aW91cyBzZWN1cml0eSBpbXBsaWNhdGlvbnMuIFRoZSBzZXJ2ZXIgaXMgcmVzcG9uc2libGUgZm9yIGVuc3VyaW5nIHRoYXQgdGhlIGNvbnRlbnQgaXMgYXBwcm9wcmlhdGVseSBzZWN1cmVkLlxyXG4gICAqL1xyXG4gIHBheWxvYWQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdWJzY3JpcHRpb24uY2hhbm5lbC5wYXlsb2FkXHJcbiAgICovXHJcbiAgX3BheWxvYWQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogRXhhY3RseSB3aGF0IHRoZXNlIG1lYW4gZGVwZW5kIG9uIHRoZSBjaGFubmVsIHR5cGUuIFRoZXkgY2FuIGNvbnZleSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHRvIHRoZSByZWNpcGllbnQgYW5kL29yIG1lZXQgc2VjdXJpdHkgcmVxdWlyZW1lbnRzOyBmb3IgZXhhbXBsZSwgc3VwcG9ydCBvZiBtdWx0aXBsZSBoZWFkZXJzIGluIHRoZSBvdXRnb2luZyBub3RpZmljYXRpb25zIGZvciByZXN0LWhvb2sgdHlwZSBzdWJzY3JpcHRpb25zLlxyXG4gICAqL1xyXG4gIGhlYWRlcj86IHN0cmluZ1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU3Vic2NyaXB0aW9uLmNoYW5uZWwuaGVhZGVyXHJcbiAgICovXHJcbiAgX2hlYWRlcj86KGZoaXIuRmhpckVsZW1lbnR8bnVsbClbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBzdWJzY3JpcHRpb24gcmVzb3VyY2UgaXMgdXNlZCB0byBkZWZpbmUgYSBwdXNoLWJhc2VkIHN1YnNjcmlwdGlvbiBmcm9tIGEgc2VydmVyIHRvIGFub3RoZXIgc3lzdGVtLiBPbmNlIGEgc3Vic2NyaXB0aW9uIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2VydmVyLCB0aGUgc2VydmVyIGNoZWNrcyBldmVyeSByZXNvdXJjZSB0aGF0IGlzIGNyZWF0ZWQgb3IgdXBkYXRlZCwgYW5kIGlmIHRoZSByZXNvdXJjZSBtYXRjaGVzIHRoZSBnaXZlbiBjcml0ZXJpYSwgaXQgc2VuZHMgYSBtZXNzYWdlIG9uIHRoZSBkZWZpbmVkIFwiY2hhbm5lbFwiIHNvIHRoYXQgYW5vdGhlciBzeXN0ZW0gY2FuIHRha2UgYW4gYXBwcm9wcmlhdGUgYWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpcHRpb24gZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHsgXHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIlN1YnNjcmlwdGlvblwiO1xyXG4gIC8qKlxyXG4gICAqIEEgY2xpZW50IGNhbiBvbmx5IHN1Ym1pdCBzdWJzY3JpcHRpb24gcmVzb3VyY2VzIGluIHRoZSByZXF1ZXN0ZWQgb3Igb2ZmIHN0YXRlLiBPbmx5IHRoZSBzZXJ2ZXIgY2FuICBtb3ZlIGEgc3Vic2NyaXB0aW9uIGZyb20gcmVxdWVzdGVkIHRvIGFjdGl2ZSwgYW5kIHRoZW4gdG8gZXJyb3IuIEVpdGhlciB0aGUgc2VydmVyIG9yIHRoZSBjbGllbnQgY2FuIHR1cm4gYSBzdWJzY3JpcHRpb24gb2ZmLlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIGNvZGVzIHRoYXQgbWFyayB0aGUgcmVzb3VyY2UgYXMgbm90IGN1cnJlbnRseSB2YWxpZC5cclxuICAgKi9cclxuICBzdGF0dXM6ICdhY3RpdmUnfCdlcnJvcid8J29mZid8J3JlcXVlc3RlZCd8bnVsbDtcclxuICAvKipcclxuICAgKiBDb250YWN0IGRldGFpbHMgZm9yIGEgaHVtYW4gdG8gY29udGFjdCBhYm91dCB0aGUgc3Vic2NyaXB0aW9uLiBUaGUgcHJpbWFyeSB1c2Ugb2YgdGhpcyBmb3Igc3lzdGVtIGFkbWluaXN0cmF0b3IgdHJvdWJsZXNob290aW5nLlxyXG4gICAqL1xyXG4gIGNvbnRhY3Q/OiBmaGlyLkNvbnRhY3RQb2ludFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc2VydmVyIGlzIHBlcm1pdHRlZCB0byBkZXZpYXRlIGZyb20gdGhpcyB0aW1lIGJ1dCBzaG91bGQgb2JzZXJ2ZSBpdC5cclxuICAgKi9cclxuICBlbmQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdWJzY3JpcHRpb24uZW5kXHJcbiAgICovXHJcbiAgX2VuZD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHdoeSB0aGlzIHN1YnNjcmlwdGlvbiBpcyBkZWZpbmVkLlxyXG4gICAqL1xyXG4gIHJlYXNvbjogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnNjcmlwdGlvbi5yZWFzb25cclxuICAgKi9cclxuICBfcmVhc29uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBydWxlcyBhcmUgc2VhcmNoIGNyaXRlcmlhICh3aXRob3V0IHRoZSBbYmFzZV0gcGFydCkuIExpa2UgQnVuZGxlLmVudHJ5LnJlcXVlc3QudXJsLCBpdCBoYXMgbm8gbGVhZGluZyBcIi9cIi5cclxuICAgKi9cclxuICBjcml0ZXJpYTogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFN1YnNjcmlwdGlvbi5jcml0ZXJpYVxyXG4gICAqL1xyXG4gIF9jcml0ZXJpYT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBIHJlY29yZCBvZiB0aGUgbGFzdCBlcnJvciB0aGF0IG9jY3VycmVkIHdoZW4gdGhlIHNlcnZlciBwcm9jZXNzZWQgYSBub3RpZmljYXRpb24uXHJcbiAgICovXHJcbiAgZXJyb3I/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBTdWJzY3JpcHRpb24uZXJyb3JcclxuICAgKi9cclxuICBfZXJyb3I/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogRGV0YWlscyB3aGVyZSB0byBzZW5kIG5vdGlmaWNhdGlvbnMgd2hlbiByZXNvdXJjZXMgYXJlIHJlY2VpdmVkIHRoYXQgbWVldCB0aGUgY3JpdGVyaWEuXHJcbiAgICovXHJcbiAgY2hhbm5lbDogZmhpci5TdWJzY3JpcHRpb25DaGFubmVsfG51bGw7XHJcbn1cclxuIl19