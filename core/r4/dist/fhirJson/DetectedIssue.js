// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DetectedIssue
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV0ZWN0ZWRJc3N1ZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJKc29uL0RldGVjdGVkSXNzdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBEZXRlY3RlZElzc3VlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogU3VwcG9ydGluZyBldmlkZW5jZSBvciBtYW5pZmVzdGF0aW9ucyB0aGF0IHByb3ZpZGUgdGhlIGJhc2lzIGZvciBpZGVudGlmeWluZyB0aGUgZGV0ZWN0ZWQgaXNzdWUgc3VjaCBhcyBhIEd1aWRhbmNlUmVzcG9uc2Ugb3IgTWVhc3VyZVJlcG9ydC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV0ZWN0ZWRJc3N1ZUV2aWRlbmNlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBBIG1hbmlmZXN0YXRpb24gdGhhdCBsZWQgdG8gdGhlIHJlY29yZGluZyBvZiB0aGlzIGRldGVjdGVkIGlzc3VlLlxyXG4gICAqL1xyXG4gIGNvZGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBMaW5rcyB0byByZXNvdXJjZXMgdGhhdCBjb25zdGl0dXRlIGV2aWRlbmNlIGZvciB0aGUgZGV0ZWN0ZWQgaXNzdWUgc3VjaCBhcyBhIEd1aWRhbmNlUmVzcG9uc2Ugb3IgTWVhc3VyZVJlcG9ydC5cclxuICAgKi9cclxuICBkZXRhaWw/OiBmaGlyLlJlZmVyZW5jZVtdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyBhbiBhY3Rpb24gdGhhdCBoYXMgYmVlbiB0YWtlbiBvciBpcyBjb21taXR0ZWQgdG8gcmVkdWNlIG9yIGVsaW1pbmF0ZSB0aGUgbGlrZWxpaG9vZCBvZiB0aGUgcmlzayBpZGVudGlmaWVkIGJ5IHRoZSBkZXRlY3RlZCBpc3N1ZSBmcm9tIG1hbmlmZXN0aW5nLiAgQ2FuIGFsc28gcmVmbGVjdCBhbiBvYnNlcnZhdGlvbiBvZiBrbm93biBtaXRpZ2F0aW5nIGZhY3RvcnMgdGhhdCBtYXkgcmVkdWNlL2VsaW1pbmF0ZSB0aGUgbmVlZCBmb3IgYW55IGFjdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV0ZWN0ZWRJc3N1ZU1pdGlnYXRpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFRoZSBcInRleHRcIiBjb21wb25lbnQgY2FuIGJlIHVzZWQgZm9yIGRldGFpbCBvciB3aGVuIG5vIGFwcHJvcHJpYXRlIGNvZGUgZXhpc3RzLlxyXG4gICAqL1xyXG4gIGFjdGlvbjogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBUaGlzIG1pZ2h0IG5vdCBiZSB0aGUgc2FtZSBhcyB3aGVuIHRoZSBtaXRpZ2F0aW5nIHN0ZXAgd2FzIGFjdHVhbGx5IHRha2VuLlxyXG4gICAqL1xyXG4gIGRhdGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXRlY3RlZElzc3VlLm1pdGlnYXRpb24uZGF0ZVxyXG4gICAqL1xyXG4gIF9kYXRlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgdGhlIHByYWN0aXRpb25lciB3aG8gZGV0ZXJtaW5lZCB0aGUgbWl0aWdhdGlvbiBhbmQgdGFrZXMgcmVzcG9uc2liaWxpdHkgZm9yIHRoZSBtaXRpZ2F0aW9uIHN0ZXAgb2NjdXJyaW5nLlxyXG4gICAqL1xyXG4gIGF1dGhvcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyBhbiBhY3R1YWwgb3IgcG90ZW50aWFsIGNsaW5pY2FsIGlzc3VlIHdpdGggb3IgYmV0d2VlbiBvbmUgb3IgbW9yZSBhY3RpdmUgb3IgcHJvcG9zZWQgY2xpbmljYWwgYWN0aW9ucyBmb3IgYSBwYXRpZW50OyBlLmcuIERydWctZHJ1ZyBpbnRlcmFjdGlvbiwgSW5lZmZlY3RpdmUgdHJlYXRtZW50IGZyZXF1ZW5jeSwgUHJvY2VkdXJlLWNvbmRpdGlvbiBjb25mbGljdCwgZXRjLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEZXRlY3RlZElzc3VlIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7IFxyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJEZXRlY3RlZElzc3VlXCI7XHJcbiAgLyoqXHJcbiAgICogQnVzaW5lc3MgaWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIGRldGVjdGVkIGlzc3VlIHJlY29yZC5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIHRoZSBjb2RlcyBjYW5jZWxsZWQgYW5kIGVudGVyZWQtaW4tZXJyb3IgdGhhdCBtYXJrIHRoZSBpc3N1ZSBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHN0YXR1czogJ2FtZW5kZWQnfCdjYW5jZWxsZWQnfCdjb3JyZWN0ZWQnfCdlbnRlcmVkLWluLWVycm9yJ3wnZmluYWwnfCdwcmVsaW1pbmFyeSd8J3JlZ2lzdGVyZWQnfCd1bmtub3duJ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBEZXRlY3RlZElzc3VlLnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZmllcyB0aGUgZ2VuZXJhbCB0eXBlIG9mIGlzc3VlIGlkZW50aWZpZWQuXHJcbiAgICovXHJcbiAgY29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIGRlZ3JlZSBvZiBpbXBvcnRhbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgaWRlbnRpZmllZCBpc3N1ZSBiYXNlZCBvbiB0aGUgcG90ZW50aWFsIGltcGFjdCBvbiB0aGUgcGF0aWVudC5cclxuICAgKi9cclxuICBzZXZlcml0eT86ICdoaWdoJ3wnbG93J3wnbW9kZXJhdGUnfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGV0ZWN0ZWRJc3N1ZS5zZXZlcml0eVxyXG4gICAqL1xyXG4gIF9zZXZlcml0eT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgdGhlIHBhdGllbnQgd2hvc2UgcmVjb3JkIHRoZSBkZXRlY3RlZCBpc3N1ZSBpcyBhc3NvY2lhdGVkIHdpdGguXHJcbiAgICovXHJcbiAgcGF0aWVudD86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgZGF0ZSBvciBwZXJpb2Qgd2hlbiB0aGUgZGV0ZWN0ZWQgaXNzdWUgd2FzIGluaXRpYWxseSBpZGVudGlmaWVkLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZWREYXRlVGltZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IERldGVjdGVkSXNzdWUuaWRlbnRpZmllZFt4XVxyXG4gICAqL1xyXG4gIF9pZGVudGlmaWVkRGF0ZVRpbWU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRhdGUgb3IgcGVyaW9kIHdoZW4gdGhlIGRldGVjdGVkIGlzc3VlIHdhcyBpbml0aWFsbHkgaWRlbnRpZmllZC5cclxuICAgKi9cclxuICBpZGVudGlmaWVkUGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGl2aWR1YWwgb3IgZGV2aWNlIHJlc3BvbnNpYmxlIGZvciB0aGUgaXNzdWUgYmVpbmcgcmFpc2VkLiAgRm9yIGV4YW1wbGUsIGEgZGVjaXNpb24gc3VwcG9ydCBhcHBsaWNhdGlvbiBvciBhIHBoYXJtYWNpc3QgY29uZHVjdGluZyBhIG1lZGljYXRpb24gcmV2aWV3LlxyXG4gICAqL1xyXG4gIGF1dGhvcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGVyZSdzIGFuIGltcGxpY2l0IGNvbnN0cmFpbnQgb24gdGhlIG51bWJlciBvZiBpbXBsaWNhdGVkIHJlc291cmNlcyBiYXNlZCBvbiBEZXRlY3RlZElzc3VlLnR5cGU7IGUuZy4gRm9yIGRydWctZHJ1ZywgdGhlcmUgd291bGQgYmUgbW9yZSB0aGFuIG9uZS4gIEZvciB0aW1pbmcsIHRoZXJlIHdvdWxkIHR5cGljYWxseSBvbmx5IGJlIG9uZS5cclxuICAgKi9cclxuICBpbXBsaWNhdGVkPzogZmhpci5SZWZlcmVuY2VbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3VwcG9ydGluZyBldmlkZW5jZSBvciBtYW5pZmVzdGF0aW9ucyB0aGF0IHByb3ZpZGUgdGhlIGJhc2lzIGZvciBpZGVudGlmeWluZyB0aGUgZGV0ZWN0ZWQgaXNzdWUgc3VjaCBhcyBhIEd1aWRhbmNlUmVzcG9uc2Ugb3IgTWVhc3VyZVJlcG9ydC5cclxuICAgKi9cclxuICBldmlkZW5jZT86IGZoaXIuRGV0ZWN0ZWRJc3N1ZUV2aWRlbmNlW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNob3VsZCBmb2N1cyBvbiBpbmZvcm1hdGlvbiBub3QgY292ZXJlZCBlbHNld2hlcmUgYXMgZGlzY3JldGUgZGF0YSAtIG5vIG5lZWQgdG8gZHVwbGljYXRlIHRoZSBuYXJyYXRpdmUuXHJcbiAgICovXHJcbiAgZGV0YWlsPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGV0ZWN0ZWRJc3N1ZS5kZXRhaWxcclxuICAgKi9cclxuICBfZGV0YWlsPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsaXRlcmF0dXJlLCBrbm93bGVkZ2UtYmFzZSBvciBzaW1pbGFyIHJlZmVyZW5jZSB0aGF0IGRlc2NyaWJlcyB0aGUgcHJvcGVuc2l0eSBmb3IgdGhlIGRldGVjdGVkIGlzc3VlIGlkZW50aWZpZWQuXHJcbiAgICovXHJcbiAgcmVmZXJlbmNlPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRGV0ZWN0ZWRJc3N1ZS5yZWZlcmVuY2VcclxuICAgKi9cclxuICBfcmVmZXJlbmNlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBhbiBhY3Rpb24gdGhhdCBoYXMgYmVlbiB0YWtlbiBvciBpcyBjb21taXR0ZWQgdG8gcmVkdWNlIG9yIGVsaW1pbmF0ZSB0aGUgbGlrZWxpaG9vZCBvZiB0aGUgcmlzayBpZGVudGlmaWVkIGJ5IHRoZSBkZXRlY3RlZCBpc3N1ZSBmcm9tIG1hbmlmZXN0aW5nLiAgQ2FuIGFsc28gcmVmbGVjdCBhbiBvYnNlcnZhdGlvbiBvZiBrbm93biBtaXRpZ2F0aW5nIGZhY3RvcnMgdGhhdCBtYXkgcmVkdWNlL2VsaW1pbmF0ZSB0aGUgbmVlZCBmb3IgYW55IGFjdGlvbi5cclxuICAgKi9cclxuICBtaXRpZ2F0aW9uPzogZmhpci5EZXRlY3RlZElzc3VlTWl0aWdhdGlvbltdfHVuZGVmaW5lZDtcclxufVxyXG4iXX0=