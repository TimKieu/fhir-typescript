// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExampleScenario
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ExampleScenario.js","sourceRoot":"./src/","sources":["fhirJson/ExampleScenario.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,iCAAiC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ExampleScenario\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Actor participating in the resource.\r\n */\r\nexport interface ExampleScenarioActor extends fhir.BackboneElement { \r\n  /**\r\n   * should this be called ID or acronym?\r\n   */\r\n  actorId: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.actor.actorId\r\n   */\r\n  _actorId?:fhir.FhirElement;\r\n  /**\r\n   * The type of actor - person or system.\r\n   */\r\n  type: 'entity'|'person'|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.actor.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * Cardinality: is name and description 1..1?\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.actor.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Cardinality: is name and description 1..1?\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.actor.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A specific version of the resource.\r\n */\r\nexport interface ExampleScenarioInstanceVersion extends fhir.BackboneElement { \r\n  /**\r\n   * The identifier of a specific version of a resource.\r\n   */\r\n  versionId: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.version.versionId\r\n   */\r\n  _versionId?:fhir.FhirElement;\r\n  /**\r\n   * The description of the resource version.\r\n   */\r\n  description: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.version.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Resources contained in the instance (e.g. the observations contained in a bundle).\r\n */\r\nexport interface ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement { \r\n  /**\r\n   * Each resource contained in the instance.\r\n   */\r\n  resourceId: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.containedInstance.resourceId\r\n   */\r\n  _resourceId?:fhir.FhirElement;\r\n  /**\r\n   * A specific version of a resource contained in the instance.\r\n   */\r\n  versionId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.containedInstance.versionId\r\n   */\r\n  _versionId?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Each resource and each version that is present in the workflow.\r\n */\r\nexport interface ExampleScenarioInstance extends fhir.BackboneElement { \r\n  /**\r\n   * The id of the resource for referencing.\r\n   */\r\n  resourceId: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.resourceId\r\n   */\r\n  _resourceId?:fhir.FhirElement;\r\n  /**\r\n   * The type of the resource.\r\n   */\r\n  resourceType: 'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EffectEvidenceSynthesis'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.resourceType\r\n   */\r\n  _resourceType?:fhir.FhirElement;\r\n  /**\r\n   * A short name for the resource instance.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Human-friendly description of the resource instance.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.instance.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * A specific version of the resource.\r\n   */\r\n  version?: fhir.ExampleScenarioInstanceVersion[]|undefined;\r\n  /**\r\n   * Resources contained in the instance (e.g. the observations contained in a bundle).\r\n   */\r\n  containedInstance?: fhir.ExampleScenarioInstanceContainedInstance[]|undefined;\r\n}\r\n\r\n/**\r\n * Each interaction or action.\r\n */\r\nexport interface ExampleScenarioProcessStepOperation extends fhir.BackboneElement { \r\n  /**\r\n   * The sequential number of the interaction, e.g. 1.2.5.\r\n   */\r\n  number: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.number\r\n   */\r\n  _number?:fhir.FhirElement;\r\n  /**\r\n   * The type of operation - CRUD.\r\n   */\r\n  type?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * The human-friendly name of the interaction.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Who starts the transaction.\r\n   */\r\n  initiator?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.initiator\r\n   */\r\n  _initiator?:fhir.FhirElement;\r\n  /**\r\n   * Who receives the transaction.\r\n   */\r\n  receiver?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.receiver\r\n   */\r\n  _receiver?:fhir.FhirElement;\r\n  /**\r\n   * A comment to be inserted in the diagram.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Whether the initiator is deactivated right after the transaction.\r\n   */\r\n  initiatorActive?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.initiatorActive\r\n   */\r\n  _initiatorActive?:fhir.FhirElement;\r\n  /**\r\n   * Whether the receiver is deactivated right after the transaction.\r\n   */\r\n  receiverActive?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.operation.receiverActive\r\n   */\r\n  _receiverActive?:fhir.FhirElement;\r\n  /**\r\n   * Each resource instance used by the initiator.\r\n   */\r\n  request?: fhir.ExampleScenarioInstanceContainedInstance|undefined;\r\n  /**\r\n   * Each resource instance used by the responder.\r\n   */\r\n  response?: fhir.ExampleScenarioInstanceContainedInstance|undefined;\r\n}\r\n\r\n/**\r\n * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.\r\n */\r\nexport interface ExampleScenarioProcessStepAlternative extends fhir.BackboneElement { \r\n  /**\r\n   * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.\r\n   */\r\n  title: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.alternative.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.alternative.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * What happens in each alternative option.\r\n   */\r\n  step?: fhir.ExampleScenarioProcessStep[]|undefined;\r\n}\r\n\r\n/**\r\n * Each step of the process.\r\n */\r\nexport interface ExampleScenarioProcessStep extends fhir.BackboneElement { \r\n  /**\r\n   * Nested process.\r\n   */\r\n  process?: fhir.ExampleScenarioProcess[]|undefined;\r\n  /**\r\n   * If there is a pause in the flow.\r\n   */\r\n  pause?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.step.pause\r\n   */\r\n  _pause?:fhir.FhirElement;\r\n  /**\r\n   * Each interaction or action.\r\n   */\r\n  operation?: fhir.ExampleScenarioProcessStepOperation|undefined;\r\n  /**\r\n   * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.\r\n   */\r\n  alternative?: fhir.ExampleScenarioProcessStepAlternative[]|undefined;\r\n}\r\n\r\n/**\r\n * Each major process - a group of operations.\r\n */\r\nexport interface ExampleScenarioProcess extends fhir.BackboneElement { \r\n  /**\r\n   * The diagram title of the group of operations.\r\n   */\r\n  title: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * A longer description of the group of operations.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Description of initial status before the process starts.\r\n   */\r\n  preConditions?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.preConditions\r\n   */\r\n  _preConditions?:fhir.FhirElement;\r\n  /**\r\n   * Description of final status after the process ends.\r\n   */\r\n  postConditions?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.process.postConditions\r\n   */\r\n  _postConditions?:fhir.FhirElement;\r\n  /**\r\n   * Each step of the process.\r\n   */\r\n  step?: fhir.ExampleScenarioProcessStep[]|undefined;\r\n}\r\n\r\n/**\r\n * Example of workflow instance.\r\n */\r\nexport interface ExampleScenario extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ExampleScenario\";\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: fhir.Identifier[]|undefined;\r\n  /**\r\n   * There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of example scenarios that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of example scenarios that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: fhir.UsageContext[]|undefined;\r\n  /**\r\n   * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * Actor participating in the resource.\r\n   */\r\n  actor?: fhir.ExampleScenarioActor[]|undefined;\r\n  /**\r\n   * Each resource and each version that is present in the workflow.\r\n   */\r\n  instance?: fhir.ExampleScenarioInstance[]|undefined;\r\n  /**\r\n   * Each major process - a group of operations.\r\n   */\r\n  process?: fhir.ExampleScenarioProcess[]|undefined;\r\n  /**\r\n   * Another nested workflow.\r\n   */\r\n  workflow?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExampleScenario.workflow\r\n   */\r\n  _workflow?:(fhir.FhirElement|null)[];\r\n}\r\n"]}