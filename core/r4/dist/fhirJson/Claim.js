// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Claim.js","sourceRoot":"./src/","sources":["fhirJson/Claim.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,uBAAuB","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Claim\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * For example,  for the original treatment and follow-up exams.\r\n */\r\nexport interface ClaimRelated extends fhir.BackboneElement { \r\n  /**\r\n   * Reference to a related claim.\r\n   */\r\n  claim?: fhir.Reference|undefined;\r\n  /**\r\n   * For example, prior claim or umbrella.\r\n   */\r\n  relationship?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example, Property/Casualty insurer claim # or Workers Compensation case # .\r\n   */\r\n  reference?: fhir.Identifier|undefined;\r\n}\r\n\r\n/**\r\n * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.\r\n */\r\nexport interface ClaimPayee extends fhir.BackboneElement { \r\n  /**\r\n   * Type of Party to be reimbursed: subscriber, provider, other.\r\n   */\r\n  type: fhir.CodeableConcept|null;\r\n  /**\r\n   * Not required if the payee is 'subscriber' or 'provider'.\r\n   */\r\n  party?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * The members of the team who provided the products and services.\r\n */\r\nexport interface ClaimCareTeam extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify care team entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.careTeam.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * Member of the team who provided the product or service.\r\n   */\r\n  provider: fhir.Reference|null;\r\n  /**\r\n   * Responsible might not be required when there is only a single provider listed.\r\n   */\r\n  responsible?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.careTeam.responsible\r\n   */\r\n  _responsible?:fhir.FhirElement;\r\n  /**\r\n   * Role might not be required when there is only a single provider listed.\r\n   */\r\n  role?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The qualification of the practitioner which is applicable for this service.\r\n   */\r\n  qualification?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Often there are multiple jurisdiction specific valuesets which are required.\r\n */\r\nexport interface ClaimSupportingInfo extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify supporting information entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.supportingInfo.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * This may contain a category for the local bill type codes.\r\n   */\r\n  category: fhir.CodeableConcept|null;\r\n  /**\r\n   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The date when or period to which this information refers.\r\n   */\r\n  timingDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.supportingInfo.timing[x]\r\n   */\r\n  _timingDate?:fhir.FhirElement;\r\n  /**\r\n   * The date when or period to which this information refers.\r\n   */\r\n  timingPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.supportingInfo.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.supportingInfo.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueReference?: fhir.Reference|undefined;\r\n  /**\r\n   * For example: the reason for the additional stay, or why a tooth is  missing.\r\n   */\r\n  reason?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Information about diagnoses relevant to the claim items.\r\n */\r\nexport interface ClaimDiagnosis extends fhir.BackboneElement { \r\n  /**\r\n   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.diagnosis.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.\r\n   */\r\n  diagnosisCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.\r\n   */\r\n  diagnosisReference?: fhir.Reference|undefined;\r\n  /**\r\n   * For example: admitting, primary, secondary, discharge.\r\n   */\r\n  type?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * Indication of whether the diagnosis was present on admission to a facility.\r\n   */\r\n  onAdmission?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.\r\n   */\r\n  packageCode?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Procedures performed on the patient relevant to the billing items with the claim.\r\n */\r\nexport interface ClaimProcedure extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify procedure entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.procedure.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * For example: primary, secondary.\r\n   */\r\n  type?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * Date and optionally time the procedure was performed.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.procedure.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * The code or reference to a Procedure resource which identifies the clinical intervention performed.\r\n   */\r\n  procedureCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The code or reference to a Procedure resource which identifies the clinical intervention performed.\r\n   */\r\n  procedureReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n}\r\n\r\n/**\r\n * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.\r\n */\r\nexport interface ClaimInsurance extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.\r\n   */\r\n  focal: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.focal\r\n   */\r\n  _focal?:fhir.FhirElement;\r\n  /**\r\n   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.\r\n   */\r\n  identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.\r\n   */\r\n  coverage: fhir.Reference|null;\r\n  /**\r\n   * A business agreement number established between the provider and the insurer for special business processing purposes.\r\n   */\r\n  businessArrangement?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.businessArrangement\r\n   */\r\n  _businessArrangement?:fhir.FhirElement;\r\n  /**\r\n   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.\r\n   */\r\n  preAuthRef?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.insurance.preAuthRef\r\n   */\r\n  _preAuthRef?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Must not be specified when 'focal=true' for this insurance.\r\n   */\r\n  claimResponse?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * Details of an accident which resulted in injuries which required the products and services listed in the claim.\r\n */\r\nexport interface ClaimAccident extends fhir.BackboneElement { \r\n  /**\r\n   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.\r\n   */\r\n  date: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.accident.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The physical location of the accident event.\r\n   */\r\n  locationAddress?: fhir.Address|undefined;\r\n  /**\r\n   * The physical location of the accident event.\r\n   */\r\n  locationReference?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.\r\n */\r\nexport interface ClaimItemDetailSubDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify item entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.subDetail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of revenue or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * For example: Neonatal program, child dental program or drug users recovery program.\r\n   */\r\n  programCode?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.subDetail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n}\r\n\r\n/**\r\n * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.\r\n */\r\nexport interface ClaimItemDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify item entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of revenue or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * For example: Neonatal program, child dental program or drug users recovery program.\r\n   */\r\n  programCode?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.detail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n  /**\r\n   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.\r\n   */\r\n  subDetail?: fhir.ClaimItemDetailSubDetail[]|undefined;\r\n}\r\n\r\n/**\r\n * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.\r\n */\r\nexport interface ClaimItem extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify item entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * CareTeam members related to this service or product.\r\n   */\r\n  careTeamSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.careTeamSequence\r\n   */\r\n  _careTeamSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Diagnosis applicable for this service or product.\r\n   */\r\n  diagnosisSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.diagnosisSequence\r\n   */\r\n  _diagnosisSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Procedures applicable for this service or product.\r\n   */\r\n  procedureSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.procedureSequence\r\n   */\r\n  _procedureSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Exceptions, special conditions and supporting information applicable for this service or product.\r\n   */\r\n  informationSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.informationSequence\r\n   */\r\n  _informationSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The type of revenue or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * For example: Neonatal program, child dental program or drug users recovery program.\r\n   */\r\n  programCode?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The date or dates when the service or product was supplied, performed or completed.\r\n   */\r\n  servicedDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.serviced[x]\r\n   */\r\n  _servicedDate?:fhir.FhirElement;\r\n  /**\r\n   * The date or dates when the service or product was supplied, performed or completed.\r\n   */\r\n  servicedPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationAddress?: fhir.Address|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationReference?: fhir.Reference|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Claim.item.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n  /**\r\n   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.\r\n   */\r\n  bodySite?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).\r\n   */\r\n  subSite?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.\r\n   */\r\n  encounter?: fhir.Reference[]|undefined;\r\n  /**\r\n   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.\r\n   */\r\n  detail?: fhir.ClaimItemDetail[]|undefined;\r\n}\r\n\r\n/**\r\n * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.\r\n */\r\nexport interface Claim extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Claim\";\r\n  /**\r\n   * A unique identifier assigned to this claim.\r\n   */\r\n  identifier?: fhir.Identifier[]|undefined;\r\n  /**\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  status: 'active'|'cancelled'|'draft'|'entered-in-error'|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.\r\n   */\r\n  type: fhir.CodeableConcept|null;\r\n  /**\r\n   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.\r\n   */\r\n  subType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.\r\n   */\r\n  use: 'claim'|'preauthorization'|'predetermination'|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.use\r\n   */\r\n  _use?:fhir.FhirElement;\r\n  /**\r\n   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.\r\n   */\r\n  patient: fhir.Reference|null;\r\n  /**\r\n   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.\r\n   */\r\n  billablePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.\r\n   */\r\n  created: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Claim.created\r\n   */\r\n  _created?:fhir.FhirElement;\r\n  /**\r\n   * Individual who created the claim, predetermination or preauthorization.\r\n   */\r\n  enterer?: fhir.Reference|undefined;\r\n  /**\r\n   * The Insurer who is target of the request.\r\n   */\r\n  insurer?: fhir.Reference|undefined;\r\n  /**\r\n   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.\r\n   */\r\n  provider: fhir.Reference|null;\r\n  /**\r\n   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.\r\n   */\r\n  priority: fhir.CodeableConcept|null;\r\n  /**\r\n   * This field is only used for preauthorizations.\r\n   */\r\n  fundsReserve?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example,  for the original treatment and follow-up exams.\r\n   */\r\n  related?: fhir.ClaimRelated[]|undefined;\r\n  /**\r\n   * Prescription to support the dispensing of pharmacy, device or vision products.\r\n   */\r\n  prescription?: fhir.Reference|undefined;\r\n  /**\r\n   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.\r\n   */\r\n  originalPrescription?: fhir.Reference|undefined;\r\n  /**\r\n   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.\r\n   */\r\n  payee?: fhir.ClaimPayee|undefined;\r\n  /**\r\n   * The referral resource which lists the date, practitioner, reason and other supporting information.\r\n   */\r\n  referral?: fhir.Reference|undefined;\r\n  /**\r\n   * Facility where the services were provided.\r\n   */\r\n  facility?: fhir.Reference|undefined;\r\n  /**\r\n   * The members of the team who provided the products and services.\r\n   */\r\n  careTeam?: fhir.ClaimCareTeam[]|undefined;\r\n  /**\r\n   * Often there are multiple jurisdiction specific valuesets which are required.\r\n   */\r\n  supportingInfo?: fhir.ClaimSupportingInfo[]|undefined;\r\n  /**\r\n   * Information about diagnoses relevant to the claim items.\r\n   */\r\n  diagnosis?: fhir.ClaimDiagnosis[]|undefined;\r\n  /**\r\n   * Procedures performed on the patient relevant to the billing items with the claim.\r\n   */\r\n  procedure?: fhir.ClaimProcedure[]|undefined;\r\n  /**\r\n   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.\r\n   */\r\n  insurance: fhir.ClaimInsurance[]|null;\r\n  /**\r\n   * Details of an accident which resulted in injuries which required the products and services listed in the claim.\r\n   */\r\n  accident?: fhir.ClaimAccident|undefined;\r\n  /**\r\n   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.\r\n   */\r\n  item?: fhir.ClaimItem[]|undefined;\r\n  /**\r\n   * The total value of the all the items in the claim.\r\n   */\r\n  total?: fhir.Money|undefined;\r\n}\r\n"]}