// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Schedule
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9TY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IFNjaGVkdWxlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogQSBjb250YWluZXIgZm9yIHNsb3RzIG9mIHRpbWUgdGhhdCBtYXkgYmUgYXZhaWxhYmxlIGZvciBib29raW5nIGFwcG9pbnRtZW50cy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGUgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHsgXHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIlNjaGVkdWxlXCJ8bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlcm5hbCBJZHMgZm9yIHRoaXMgaXRlbS5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogKGZoaXIuSWRlbnRpZmllcnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgaXMgbGFiZWxlZCBhcyBhIG1vZGlmaWVyIGJlY2F1c2UgaXQgbWF5IGJlIHVzZWQgdG8gbWFyayB0aGF0IHRoZSByZXNvdXJjZSB3YXMgY3JlYXRlZCBpbiBlcnJvci5cclxuICAgKi9cclxuICBhY3RpdmU/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU2NoZWR1bGUuYWN0aXZlXHJcbiAgICovXHJcbiAgX2FjdGl2ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBIGJyb2FkIGNhdGVnb3JpemF0aW9uIG9mIHRoZSBzZXJ2aWNlIHRoYXQgaXMgdG8gYmUgcGVyZm9ybWVkIGR1cmluZyB0aGlzIGFwcG9pbnRtZW50LlxyXG4gICAqL1xyXG4gIHNlcnZpY2VDYXRlZ29yeT86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lmaWMgc2VydmljZSB0aGF0IGlzIHRvIGJlIHBlcmZvcm1lZCBkdXJpbmcgdGhpcyBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBzZXJ2aWNlVHlwZT86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgc3BlY2lhbHR5IG9mIGEgcHJhY3RpdGlvbmVyIHRoYXQgd291bGQgYmUgcmVxdWlyZWQgdG8gcGVyZm9ybSB0aGUgc2VydmljZSByZXF1ZXN0ZWQgaW4gdGhpcyBhcHBvaW50bWVudC5cclxuICAgKi9cclxuICBzcGVjaWFsdHk/OiAoZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcGFjaXR5IHRvIHN1cHBvcnQgbXVsdGlwbGUgcmVmZXJlbmNlZCByZXNvdXJjZSB0eXBlcyBzaG91bGQgYmUgdXNlZCBpbiBjYXNlcyB3aGVyZSB0aGUgc3BlY2lmaWMgcmVzb3VyY2VzIHRoZW1zZWx2ZXMgY2Fubm90IGJlIHNjaGVkdWxlZCB3aXRob3V0IHRoZSBvdGhlciwgYW5kIHRodXMgb25seSBtYWtlIHNlbnNlIHRvIHRoZSBzeXN0ZW0gZXhwb3NpbmcgdGhlbSBhcyBhIGdyb3VwLiBDb21tb24gZXhhbXBsZXMgb2YgdGhpcyBhcmUgd2hlcmUgdGhlIGNvbWJpbmF0aW9uIG9mIGEgcHJhY3RpdGlvbmVyIGFuZCBhIHJvb20gKExvY2F0aW9uKSBhcmUgYWx3YXlzIHJlcXVpcmVkIGJ5IGEgc3lzdGVtLlxyXG4gICAqL1xyXG4gIGFjdG9yOiAoZmhpci5SZWZlcmVuY2V8bnVsbClbXXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwZXJpb2Qgb2YgdGltZSB0aGF0IHRoZSBzbG90cyB0aGF0IHJlZmVyZW5jZSB0aGlzIFNjaGVkdWxlIHJlc291cmNlIGNvdmVyIChldmVuIGlmIG5vbmUgZXhpc3QpLiBUaGVzZSAgY292ZXIgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgYW4gb3JnYW5pemF0aW9uJ3MgcGxhbm5pbmcgaG9yaXpvbjsgdGhlIGludGVydmFsIGZvciB3aGljaCB0aGV5IGFyZSBjdXJyZW50bHkgYWNjZXB0aW5nIGFwcG9pbnRtZW50cy4gVGhpcyBkb2VzIG5vdCBkZWZpbmUgYSBcInRlbXBsYXRlXCIgZm9yIHBsYW5uaW5nIG91dHNpZGUgdGhlc2UgZGF0ZXMuXHJcbiAgICovXHJcbiAgcGxhbm5pbmdIb3Jpem9uPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbW1lbnRzIG9uIHRoZSBhdmFpbGFiaWxpdHkgdG8gZGVzY3JpYmUgYW55IGV4dGVuZGVkIGluZm9ybWF0aW9uLiBTdWNoIGFzIGN1c3RvbSBjb25zdHJhaW50cyBvbiB0aGUgc2xvdHMgdGhhdCBtYXkgYmUgYXNzb2NpYXRlZC5cclxuICAgKi9cclxuICBjb21tZW50Pzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogU2NoZWR1bGUuY29tbWVudFxyXG4gICAqL1xyXG4gIF9jb21tZW50PzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcbiJdfQ==