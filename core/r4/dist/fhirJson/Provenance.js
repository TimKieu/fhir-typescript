// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Provenance
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmVuYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJKc29uL1Byb3ZlbmFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIFJlc291cmNlOiBQcm92ZW5hbmNlXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogU2V2ZXJhbCBhZ2VudHMgbWF5IGJlIGFzc29jaWF0ZWQgKGkuZS4gaGFzIHNvbWUgcmVzcG9uc2liaWxpdHkgZm9yIGFuIGFjdGl2aXR5KSB3aXRoIGFuIGFjdGl2aXR5IGFuZCB2aWNlLXZlcnNhLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQcm92ZW5hbmNlQWdlbnQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIEZvciBleGFtcGxlOiBhdXRob3IsIHBlcmZvcm1lciwgZW50ZXJlciwgYXR0ZXN0ZXIsIGV0Yy5cclxuICAgKi9cclxuICB0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEZvciBleGFtcGxlOiBkb2N0b3IsIG51cnNlLCBjbGVyaywgZXRjLlxyXG4gICAqL1xyXG4gIHJvbGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiB3aG9JZGVudGl0eSBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBhZ2VudCBpcyBub3QgYSBSZXNvdXJjZSB0eXBlLlxyXG4gICAqL1xyXG4gIHdobzogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBvbkJlaGFsZk9mSWRlbnRpdHkgc2hvdWxkIGJlIHVzZWQgd2hlbiB0aGUgYWdlbnQgaXMgbm90IGEgUmVzb3VyY2UgdHlwZS5cclxuICAgKi9cclxuICBvbkJlaGFsZk9mPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gZW50aXR5IHVzZWQgaW4gdGhpcyBhY3Rpdml0eS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmVuYW5jZUVudGl0eSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogSG93IHRoZSBlbnRpdHkgd2FzIHVzZWQgZHVyaW5nIHRoZSBhY3Rpdml0eS5cclxuICAgKi9cclxuICByb2xlOiAnZGVyaXZhdGlvbid8J3F1b3RhdGlvbid8J3JlbW92YWwnfCdyZXZpc2lvbid8J3NvdXJjZSd8bnVsbDtcclxuICAvKipcclxuICAgKiB3aGF0SWRlbnRpdHkgc2hvdWxkIGJlIHVzZWQgZm9yIGVudGl0aWVzIHRoYXQgYXJlIG5vdCBhIFJlc291cmNlIHR5cGUuXHJcbiAgICovXHJcbiAgd2hhdDogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBBIHVzZWNhc2Ugd2hlcmUgb25lIFByb3ZlbmFuY2UuZW50aXR5LmFnZW50IGlzIHVzZWQgd2hlcmUgdGhlIEVudGl0eSB0aGF0IHdhcyB1c2VkIGluIHRoZSBjcmVhdGlvbi91cGRhdGluZyBvZiB0aGUgVGFyZ2V0LCBpcyBub3QgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHNhbWUgY3VzdG9kaWFuc2hpcCBhcyB0aGUgVGFyZ2V0LCBhbmQgdGh1cyB0aGUgbWVhbmluZyBvZiBQcm92ZW5hbmNlLmVudGl0eS5hZ2VudCBpcyB0byBzYXkgdGhhdCB0aGUgZW50aXR5IHJlZmVyZW5jZWQgaXMgbWFuYWdlZCBlbHNld2hlcmUgYW5kIHRoYXQgdGhpcyBBZ2VudCBwcm92aWRlZCBhY2Nlc3MgdG8gaXQuICBUaGlzIHdvdWxkIGJlIHNpbWlsYXIgdG8gd2hlcmUgdGhlIEVudGl0eSBiZWluZyByZWZlcmVuY2VkIGlzIG1hbmFnZWQgb3V0c2lkZSBGSElSLCBzdWNoIGFzIHRocm91Z2ggSEw3IHYyLCB2Mywgb3IgWERTLiBUaGlzIG1pZ2h0IGJlIHdoZXJlIHRoZSBFbnRpdHkgYmVpbmcgcmVmZXJlbmNlZCBpcyBtYW5hZ2VkIGluIGFub3RoZXIgRkhJUiByZXNvdXJjZSBzZXJ2ZXIuIFRodXMgaXQgZXhwbGFpbnMgdGhlIFByb3ZlbmFuY2Ugb2YgdGhhdCBFbnRpdHkncyB1c2UgaW4gdGhlIGNvbnRleHQgb2YgdGhpcyBQcm92ZW5hbmNlIGFjdGl2aXR5LlxyXG4gICAqL1xyXG4gIGFnZW50PzogZmhpci5Qcm92ZW5hbmNlQWdlbnRbXXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcm92ZW5hbmNlIG9mIGEgcmVzb3VyY2UgaXMgYSByZWNvcmQgdGhhdCBkZXNjcmliZXMgZW50aXRpZXMgYW5kIHByb2Nlc3NlcyBpbnZvbHZlZCBpbiBwcm9kdWNpbmcgYW5kIGRlbGl2ZXJpbmcgb3Igb3RoZXJ3aXNlIGluZmx1ZW5jaW5nIHRoYXQgcmVzb3VyY2UuIFByb3ZlbmFuY2UgcHJvdmlkZXMgYSBjcml0aWNhbCBmb3VuZGF0aW9uIGZvciBhc3Nlc3NpbmcgYXV0aGVudGljaXR5LCBlbmFibGluZyB0cnVzdCwgYW5kIGFsbG93aW5nIHJlcHJvZHVjaWJpbGl0eS4gUHJvdmVuYW5jZSBhc3NlcnRpb25zIGFyZSBhIGZvcm0gb2YgY29udGV4dHVhbCBtZXRhZGF0YSBhbmQgY2FuIHRoZW1zZWx2ZXMgYmVjb21lIGltcG9ydGFudCByZWNvcmRzIHdpdGggdGhlaXIgb3duIHByb3ZlbmFuY2UuIFByb3ZlbmFuY2Ugc3RhdGVtZW50IGluZGljYXRlcyBjbGluaWNhbCBzaWduaWZpY2FuY2UgaW4gdGVybXMgb2YgY29uZmlkZW5jZSBpbiBhdXRoZW50aWNpdHksIHJlbGlhYmlsaXR5LCBhbmQgdHJ1c3R3b3J0aGluZXNzLCBpbnRlZ3JpdHksIGFuZCBzdGFnZSBpbiBsaWZlY3ljbGUgKGUuZy4gRG9jdW1lbnQgQ29tcGxldGlvbiAtIGhhcyB0aGUgYXJ0aWZhY3QgYmVlbiBsZWdhbGx5IGF1dGhlbnRpY2F0ZWQpLCBhbGwgb2Ygd2hpY2ggbWF5IGltcGFjdCBzZWN1cml0eSwgcHJpdmFjeSwgYW5kIHRydXN0IHBvbGljaWVzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQcm92ZW5hbmNlIGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7IFxyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJQcm92ZW5hbmNlXCI7XHJcbiAgLyoqXHJcbiAgICogVGFyZ2V0IHJlZmVyZW5jZXMgYXJlIHVzdWFsbHkgdmVyc2lvbiBzcGVjaWZpYywgYnV0IG1pZ2h0IG5vdCBiZSwgaWYgYSB2ZXJzaW9uIGhhcyBub3QgYmVlbiBhc3NpZ25lZCBvciBpZiB0aGUgcHJvdmVuYW5jZSBpbmZvcm1hdGlvbiBpcyBwYXJ0IG9mIHRoZSBzZXQgb2YgcmVzb3VyY2VzIGJlaW5nIG1haW50YWluZWQgKGkuZS4gYSBkb2N1bWVudCkuIFdoZW4gdXNpbmcgdGhlIFJFU1RmdWwgQVBJLCB0aGUgaWRlbnRpdHkgb2YgdGhlIHJlc291cmNlIG1pZ2h0IG5vdCBiZSBrbm93biAoZXNwZWNpYWxseSBub3QgdGhlIHZlcnNpb24gc3BlY2lmaWMgb25lKTsgdGhlIGNsaWVudCBtYXkgZWl0aGVyIHN1Ym1pdCB0aGUgcmVzb3VyY2UgZmlyc3QsIGFuZCB0aGVuIHRoZSBwcm92ZW5hbmNlLCBvciBpdCBtYXkgc3VibWl0IGJvdGggdXNpbmcgYSBzaW5nbGUgdHJhbnNhY3Rpb24uIFNlZSB0aGUgbm90ZXMgb24gdHJhbnNhY3Rpb24gZm9yIGZ1cnRoZXIgZGlzY3Vzc2lvbi5cclxuICAgKi9cclxuICB0YXJnZXQ6IGZoaXIuUmVmZXJlbmNlW118bnVsbDtcclxuICAvKipcclxuICAgKiBUaGUgcGVyaW9kIGNhbiBiZSBhIGxpdHRsZSBhcmJpdHJhcnk7IHdoZXJlIHBvc3NpYmxlLCB0aGUgdGltZSBzaG91bGQgY29ycmVzcG9uZCB0byBodW1hbiBhc3Nlc3NtZW50IG9mIHRoZSBhY3Rpdml0eSB0aW1lLlxyXG4gICAqL1xyXG4gIG9jY3VycmVkUGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwZXJpb2QgY2FuIGJlIGEgbGl0dGxlIGFyYml0cmFyeTsgd2hlcmUgcG9zc2libGUsIHRoZSB0aW1lIHNob3VsZCBjb3JyZXNwb25kIHRvIGh1bWFuIGFzc2Vzc21lbnQgb2YgdGhlIGFjdGl2aXR5IHRpbWUuXHJcbiAgICovXHJcbiAgb2NjdXJyZWREYXRlVGltZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFByb3ZlbmFuY2Uub2NjdXJyZWRbeF1cclxuICAgKi9cclxuICBfb2NjdXJyZWREYXRlVGltZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGlzIGNhbiBiZSBhIGxpdHRsZSBkaWZmZXJlbnQgZnJvbSB0aGUgdGltZSBzdGFtcCBvbiB0aGUgcmVzb3VyY2UgaWYgdGhlcmUgaXMgYSBkZWxheSBiZXR3ZWVuIHJlY29yZGluZyB0aGUgZXZlbnQgYW5kIHVwZGF0aW5nIHRoZSBwcm92ZW5hbmNlIGFuZCB0YXJnZXQgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgcmVjb3JkZWQ6IHN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBQcm92ZW5hbmNlLnJlY29yZGVkXHJcbiAgICovXHJcbiAgX3JlY29yZGVkPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEZvciBleGFtcGxlOiBXaGVyZSBhbiBPQXV0aCB0b2tlbiBhdXRob3JpemVzLCB0aGUgdW5pcXVlIGlkZW50aWZpZXIgZnJvbSB0aGUgT0F1dGggdG9rZW4gaXMgcGxhY2VkIGludG8gdGhlIHBvbGljeSBlbGVtZW50IFdoZXJlIGEgcG9saWN5IGVuZ2luZSAoZS5nLiBYQUNNTCkgaG9sZHMgcG9saWN5IGxvZ2ljLCB0aGUgdW5pcXVlIHBvbGljeSBpZGVudGlmaWVyIGlzIHBsYWNlZCBpbnRvIHRoZSBwb2xpY3kgZWxlbWVudC5cclxuICAgKi9cclxuICBwb2xpY3k/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFByb3ZlbmFuY2UucG9saWN5XHJcbiAgICovXHJcbiAgX3BvbGljeT86KGZoaXIuRmhpckVsZW1lbnR8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBXaGVyZSB0aGUgYWN0aXZpdHkgb2NjdXJyZWQsIGlmIHJlbGV2YW50LlxyXG4gICAqL1xyXG4gIGxvY2F0aW9uPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZWFzb24gdGhhdCB0aGUgYWN0aXZpdHkgd2FzIHRha2luZyBwbGFjZS5cclxuICAgKi9cclxuICByZWFzb24/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBbiBhY3Rpdml0eSBpcyBzb21ldGhpbmcgdGhhdCBvY2N1cnMgb3ZlciBhIHBlcmlvZCBvZiB0aW1lIGFuZCBhY3RzIHVwb24gb3Igd2l0aCBlbnRpdGllczsgaXQgbWF5IGluY2x1ZGUgY29uc3VtaW5nLCBwcm9jZXNzaW5nLCB0cmFuc2Zvcm1pbmcsIG1vZGlmeWluZywgcmVsb2NhdGluZywgdXNpbmcsIG9yIGdlbmVyYXRpbmcgZW50aXRpZXMuXHJcbiAgICovXHJcbiAgYWN0aXZpdHk/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2V2ZXJhbCBhZ2VudHMgbWF5IGJlIGFzc29jaWF0ZWQgKGkuZS4gaGFzIHNvbWUgcmVzcG9uc2liaWxpdHkgZm9yIGFuIGFjdGl2aXR5KSB3aXRoIGFuIGFjdGl2aXR5IGFuZCB2aWNlLXZlcnNhLlxyXG4gICAqL1xyXG4gIGFnZW50OiBmaGlyLlByb3ZlbmFuY2VBZ2VudFtdfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQW4gZW50aXR5IHVzZWQgaW4gdGhpcyBhY3Rpdml0eS5cclxuICAgKi9cclxuICBlbnRpdHk/OiBmaGlyLlByb3ZlbmFuY2VFbnRpdHlbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBkaWdpdGFsIHNpZ25hdHVyZSBvbiB0aGUgdGFyZ2V0IFJlZmVyZW5jZShzKS4gVGhlIHNpZ25lciBzaG91bGQgbWF0Y2ggYSBQcm92ZW5hbmNlLmFnZW50LiBUaGUgcHVycG9zZSBvZiB0aGUgc2lnbmF0dXJlIGlzIGluZGljYXRlZC5cclxuICAgKi9cclxuICBzaWduYXR1cmU/OiBmaGlyLlNpZ25hdHVyZVtdfHVuZGVmaW5lZDtcclxufVxyXG4iXX0=