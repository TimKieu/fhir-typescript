// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: GraphDefinition
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"GraphDefinition.js","sourceRoot":"./src/","sources":["fhirJson/GraphDefinition.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,iCAAiC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: GraphDefinition\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Compartment Consistency Rules.\r\n */\r\nexport interface GraphDefinitionLinkTargetCompartment extends fhir.BackboneElement { \r\n  /**\r\n   * All conditional rules are evaluated; if they are true, then the rules are evaluated.\r\n   */\r\n  use: 'condition'|'requirement'|null;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.compartment.use\r\n   */\r\n  _use?:fhir.FhirElement;\r\n  /**\r\n   * Identifies the compartment.\r\n   */\r\n  code: 'Device'|'Encounter'|'Patient'|'Practitioner'|'RelatedPerson'|null;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.compartment.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * identical | matching | different | no-rule | custom.\r\n   */\r\n  rule: 'custom'|'different'|'identical'|'matching'|null;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.compartment.rule\r\n   */\r\n  _rule?:fhir.FhirElement;\r\n  /**\r\n   * Custom rule, as a FHIRPath expression.\r\n   */\r\n  expression?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.compartment.expression\r\n   */\r\n  _expression?:fhir.FhirElement;\r\n  /**\r\n   * Documentation for FHIRPath expression.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.compartment.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Potential target for the link.\r\n */\r\nexport interface GraphDefinitionLinkTarget extends fhir.BackboneElement { \r\n  /**\r\n   * Type of resource this link refers to.\r\n   */\r\n  type: 'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EffectEvidenceSynthesis'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * At least one of the parameters must have the value {ref} which identifies the focus resource.\r\n   */\r\n  params?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.params\r\n   */\r\n  _params?:fhir.FhirElement;\r\n  /**\r\n   * Profile for the target resource.\r\n   */\r\n  profile?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.target.profile\r\n   */\r\n  _profile?:fhir.FhirElement;\r\n  /**\r\n   * Compartment Consistency Rules.\r\n   */\r\n  compartment?: fhir.GraphDefinitionLinkTargetCompartment[]|undefined;\r\n  /**\r\n   * Additional links from target resource.\r\n   */\r\n  link?: fhir.GraphDefinitionLink[]|undefined;\r\n}\r\n\r\n/**\r\n * Links this graph makes rules about.\r\n */\r\nexport interface GraphDefinitionLink extends fhir.BackboneElement { \r\n  /**\r\n   * The path expression cannot contain a resolve() function. If there is no path, the link is a reverse lookup, using target.params. If the path is \"*\" then this means all references in the resource.\r\n   */\r\n  path?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * Which slice (if profiled).\r\n   */\r\n  sliceName?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.sliceName\r\n   */\r\n  _sliceName?:fhir.FhirElement;\r\n  /**\r\n   * Minimum occurrences for this link.\r\n   */\r\n  min?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.min\r\n   */\r\n  _min?:fhir.FhirElement;\r\n  /**\r\n   * Maximum occurrences for this link.\r\n   */\r\n  max?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.max\r\n   */\r\n  _max?:fhir.FhirElement;\r\n  /**\r\n   * Information about why this link is of interest in this graph definition.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.link.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Potential target for the link.\r\n   */\r\n  target?: fhir.GraphDefinitionLinkTarget[]|undefined;\r\n}\r\n\r\n/**\r\n * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.\r\n */\r\nexport interface GraphDefinition extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"GraphDefinition\";\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the graph definition with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of graph definitions that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of graph definitions that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the graph definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the graph definition is presumed to be the predominant language in the place the graph definition was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: fhir.UsageContext[]|undefined;\r\n  /**\r\n   * It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the graph definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * The type of FHIR resource at which instances of this graph start.\r\n   */\r\n  start: 'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EffectEvidenceSynthesis'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.start\r\n   */\r\n  _start?:fhir.FhirElement;\r\n  /**\r\n   * The code does not include the '$' prefix that is always included in the URL when the operation is invoked.\r\n   */\r\n  profile?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: GraphDefinition.profile\r\n   */\r\n  _profile?:fhir.FhirElement;\r\n  /**\r\n   * Links this graph makes rules about.\r\n   */\r\n  link?: fhir.GraphDefinitionLink[]|undefined;\r\n}\r\n"]}