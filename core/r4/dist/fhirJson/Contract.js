// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Contract
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJhY3QuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9Db250cmFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IENvbnRyYWN0XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogUHJlY3Vzb3J5IGNvbnRlbnQgZGV2ZWxvcGVkIHdpdGggYSBmb2N1cyBhbmQgaW50ZW50IG9mIHN1cHBvcnRpbmcgdGhlIGZvcm1hdGlvbiBhIENvbnRyYWN0IGluc3RhbmNlLCB3aGljaCBtYXkgYmUgYXNzb2NpYXRlZCB3aXRoIGFuZCB0cmFuc2Zvcm1hYmxlIGludG8gYSBDb250cmFjdC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJhY3RDb250ZW50RGVmaW5pdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogUHJlY3Vzb3J5IGNvbnRlbnQgc3RydWN0dXJlIGFuZCB1c2UsIGkuZS4sIGEgYm9pbGVycGxhdGUsIHRlbXBsYXRlLCBhcHBsaWNhdGlvbiBmb3IgYSBjb250cmFjdCBzdWNoIGFzIGFuIGluc3VyYW5jZSBwb2xpY3kgb3IgYmVuZWZpdHMgdW5kZXIgYSBwcm9ncmFtLCBlLmcuLCB3b3JrZXJzIGNvbXBlbnNhdGlvbi5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIERldGFpbGVkIFByZWN1c29yeSBjb250ZW50IHR5cGUuXHJcbiAgICovXHJcbiAgc3ViVHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgIGluZGl2aWR1YWwgb3Igb3JnYW5pemF0aW9uIHRoYXQgcHVibGlzaGVkIHRoZSBDb250cmFjdCBwcmVjdXJzb3IgY29udGVudC5cclxuICAgKi9cclxuICBwdWJsaXNoZXI/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRhdGUgKGFuZCBvcHRpb25hbGx5IHRpbWUpIHdoZW4gdGhlIGNvbnRyYWN0IHdhcyBwdWJsaXNoZWQuIFRoZSBkYXRlIG11c3QgY2hhbmdlIHdoZW4gdGhlIGJ1c2luZXNzIHZlcnNpb24gY2hhbmdlcyBhbmQgaXQgbXVzdCBjaGFuZ2UgaWYgdGhlIHN0YXR1cyBjb2RlIGNoYW5nZXMuIEluIGFkZGl0aW9uLCBpdCBzaG91bGQgY2hhbmdlIHdoZW4gdGhlIHN1YnN0YW50aXZlIGNvbnRlbnQgb2YgdGhlIGNvbnRyYWN0IGNoYW5nZXMuXHJcbiAgICovXHJcbiAgcHVibGljYXRpb25EYXRlPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QuY29udGVudERlZmluaXRpb24ucHVibGljYXRpb25EYXRlXHJcbiAgICovXHJcbiAgX3B1YmxpY2F0aW9uRGF0ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBhbWVuZGVkIHwgYXBwZW5kZWQgfCBjYW5jZWxsZWQgfCBkaXNwdXRlZCB8IGVudGVyZWQtaW4tZXJyb3IgfCBleGVjdXRhYmxlIHwgZXhlY3V0ZWQgfCBuZWdvdGlhYmxlIHwgb2ZmZXJlZCB8IHBvbGljeSB8IHJlamVjdGVkIHwgcmVuZXdlZCB8IHJldm9rZWQgfCByZXNvbHZlZCB8IHRlcm1pbmF0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljYXRpb25TdGF0dXM6ICdhbWVuZGVkJ3wnYXBwZW5kZWQnfCdjYW5jZWxsZWQnfCdkaXNwdXRlZCd8J2VudGVyZWQtaW4tZXJyb3InfCdleGVjdXRhYmxlJ3wnZXhlY3V0ZWQnfCduZWdvdGlhYmxlJ3wnb2ZmZXJlZCd8J3BvbGljeSd8J3JlamVjdGVkJ3wncmVuZXdlZCd8J3Jlc29sdmVkJ3wncmV2b2tlZCd8J3Rlcm1pbmF0ZWQnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogQSBjb3B5cmlnaHQgc3RhdGVtZW50IHJlbGF0aW5nIHRvIENvbnRyYWN0IHByZWN1cnNvciBjb250ZW50LiBDb3B5cmlnaHQgc3RhdGVtZW50cyBhcmUgZ2VuZXJhbGx5IGxlZ2FsIHJlc3RyaWN0aW9ucyBvbiB0aGUgdXNlIGFuZCBwdWJsaXNoaW5nIG9mIHRoZSBDb250cmFjdCBwcmVjdXJzb3IgY29udGVudC5cclxuICAgKi9cclxuICBjb3B5cmlnaHQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC5jb250ZW50RGVmaW5pdGlvbi5jb3B5cmlnaHRcclxuICAgKi9cclxuICBfY29weXJpZ2h0PzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogU2VjdXJpdHkgbGFiZWxzIHRoYXQgcHJvdGVjdCB0aGUgaGFuZGxpbmcgb2YgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlcm0gYW5kIGl0cyBlbGVtZW50cywgd2hpY2ggbWF5IGJlIHNwZWNpZmljYWxseSBpZGVudGlmaWVkLi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJhY3RUZXJtU2VjdXJpdHlMYWJlbCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogTnVtYmVyIHVzZWQgdG8gbGluayB0aGlzIHRlcm0gb3IgdGVybSBlbGVtZW50IHRvIHRoZSBhcHBsaWNhYmxlIFNlY3VyaXR5IExhYmVsLlxyXG4gICAqL1xyXG4gIG51bWJlcj86IG51bWJlcltdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5zZWN1cml0eUxhYmVsLm51bWJlclxyXG4gICAqL1xyXG4gIF9udW1iZXI/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogU2VjdXJpdHkgbGFiZWwgcHJpdmFjeSB0YWcgdGhhdCBzcGVjaWVzIHRoZSBsZXZlbCBvZiBjb25maWRlbnRpYWxpdHkgcHJvdGVjdGlvbiByZXF1aXJlZCBmb3IgdGhpcyB0ZXJtIGFuZC9vciB0ZXJtIGVsZW1lbnRzLlxyXG4gICAqL1xyXG4gIGNsYXNzaWZpY2F0aW9uOiBmaGlyLkNvZGluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFNlY3VyaXR5IGxhYmVsIHByaXZhY3kgdGFnIHRoYXQgc3BlY2llcyB0aGUgYXBwbGljYWJsZSBwcml2YWN5IGFuZCBzZWN1cml0eSBwb2xpY2llcyBnb3Zlcm5pbmcgdGhpcyB0ZXJtIGFuZC9vciB0ZXJtIGVsZW1lbnRzLlxyXG4gICAqL1xyXG4gIGNhdGVnb3J5PzogZmhpci5Db2RpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VjdXJpdHkgbGFiZWwgcHJpdmFjeSB0YWcgdGhhdCBzcGVjaWVzIHRoZSBtYW5uZXIgaW4gd2hpY2ggdGVybSBhbmQvb3IgdGVybSBlbGVtZW50cyBhcmUgdG8gYmUgcHJvdGVjdGVkLlxyXG4gICAqL1xyXG4gIGNvbnRyb2w/OiBmaGlyLkNvZGluZ1tdfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9mZmVyIFJlY2lwaWVudC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJhY3RUZXJtT2ZmZXJQYXJ0eSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogUGFydGljaXBhbnQgaW4gdGhlIG9mZmVyLlxyXG4gICAqL1xyXG4gIHJlZmVyZW5jZTogZmhpci5SZWZlcmVuY2VbXXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEhvdyB0aGUgcGFydHkgcGFydGljaXBhdGVzIGluIHRoZSBvZmZlci5cclxuICAgKi9cclxuICByb2xlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogUmVzcG9uc2UgdG8gb2ZmZXIgdGV4dC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJhY3RUZXJtT2ZmZXJBbnN3ZXIgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZUJvb2xlYW4/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5vZmZlci5hbnN3ZXIudmFsdWVbeF1cclxuICAgKi9cclxuICBfdmFsdWVCb29sZWFuPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZURlY2ltYWw/OiBudW1iZXJ8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLm9mZmVyLmFuc3dlci52YWx1ZVt4XVxyXG4gICAqL1xyXG4gIF92YWx1ZURlY2ltYWw/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogUmVzcG9uc2UgdG8gYW4gb2ZmZXIgY2xhdXNlIG9yIHF1ZXN0aW9uIHRleHQsICB3aGljaCBlbmFibGVzIHNlbGVjdGlvbiBvZiB2YWx1ZXMgdG8gYmUgYWdyZWVkIHRvLCBlLmcuLCB0aGUgcGVyaW9kIG9mIHBhcnRpY2lwYXRpb24sIHRoZSBkYXRlIG9mIG9jY3VwYW5jeSBvZiBhIHJlbnRhbCwgd2FycmVudGx5IGR1cmF0aW9uLCBvciB3aGV0aGVyIGJpb3NwZWNpbWVuIG1heSBiZSB1c2VkIGZvciBmdXJ0aGVyIHJlc2VhcmNoLlxyXG4gICAqL1xyXG4gIHZhbHVlSW50ZWdlcj86IG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0ub2ZmZXIuYW5zd2VyLnZhbHVlW3hdXHJcbiAgICovXHJcbiAgX3ZhbHVlSW50ZWdlcj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBSZXNwb25zZSB0byBhbiBvZmZlciBjbGF1c2Ugb3IgcXVlc3Rpb24gdGV4dCwgIHdoaWNoIGVuYWJsZXMgc2VsZWN0aW9uIG9mIHZhbHVlcyB0byBiZSBhZ3JlZWQgdG8sIGUuZy4sIHRoZSBwZXJpb2Qgb2YgcGFydGljaXBhdGlvbiwgdGhlIGRhdGUgb2Ygb2NjdXBhbmN5IG9mIGEgcmVudGFsLCB3YXJyZW50bHkgZHVyYXRpb24sIG9yIHdoZXRoZXIgYmlvc3BlY2ltZW4gbWF5IGJlIHVzZWQgZm9yIGZ1cnRoZXIgcmVzZWFyY2guXHJcbiAgICovXHJcbiAgdmFsdWVEYXRlPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5vZmZlci5hbnN3ZXIudmFsdWVbeF1cclxuICAgKi9cclxuICBfdmFsdWVEYXRlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZURhdGVUaW1lPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5vZmZlci5hbnN3ZXIudmFsdWVbeF1cclxuICAgKi9cclxuICBfdmFsdWVEYXRlVGltZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBSZXNwb25zZSB0byBhbiBvZmZlciBjbGF1c2Ugb3IgcXVlc3Rpb24gdGV4dCwgIHdoaWNoIGVuYWJsZXMgc2VsZWN0aW9uIG9mIHZhbHVlcyB0byBiZSBhZ3JlZWQgdG8sIGUuZy4sIHRoZSBwZXJpb2Qgb2YgcGFydGljaXBhdGlvbiwgdGhlIGRhdGUgb2Ygb2NjdXBhbmN5IG9mIGEgcmVudGFsLCB3YXJyZW50bHkgZHVyYXRpb24sIG9yIHdoZXRoZXIgYmlvc3BlY2ltZW4gbWF5IGJlIHVzZWQgZm9yIGZ1cnRoZXIgcmVzZWFyY2guXHJcbiAgICovXHJcbiAgdmFsdWVUaW1lPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5vZmZlci5hbnN3ZXIudmFsdWVbeF1cclxuICAgKi9cclxuICBfdmFsdWVUaW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZVN0cmluZz86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0ub2ZmZXIuYW5zd2VyLnZhbHVlW3hdXHJcbiAgICovXHJcbiAgX3ZhbHVlU3RyaW5nPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZVVyaT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0ub2ZmZXIuYW5zd2VyLnZhbHVlW3hdXHJcbiAgICovXHJcbiAgX3ZhbHVlVXJpPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZUF0dGFjaG1lbnQ/OiBmaGlyLkF0dGFjaG1lbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZUNvZGluZz86IGZoaXIuQ29kaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBSZXNwb25zZSB0byBhbiBvZmZlciBjbGF1c2Ugb3IgcXVlc3Rpb24gdGV4dCwgIHdoaWNoIGVuYWJsZXMgc2VsZWN0aW9uIG9mIHZhbHVlcyB0byBiZSBhZ3JlZWQgdG8sIGUuZy4sIHRoZSBwZXJpb2Qgb2YgcGFydGljaXBhdGlvbiwgdGhlIGRhdGUgb2Ygb2NjdXBhbmN5IG9mIGEgcmVudGFsLCB3YXJyZW50bHkgZHVyYXRpb24sIG9yIHdoZXRoZXIgYmlvc3BlY2ltZW4gbWF5IGJlIHVzZWQgZm9yIGZ1cnRoZXIgcmVzZWFyY2guXHJcbiAgICovXHJcbiAgdmFsdWVRdWFudGl0eT86IGZoaXIuUXVhbnRpdHl8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlc3BvbnNlIHRvIGFuIG9mZmVyIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0LCAgd2hpY2ggZW5hYmxlcyBzZWxlY3Rpb24gb2YgdmFsdWVzIHRvIGJlIGFncmVlZCB0bywgZS5nLiwgdGhlIHBlcmlvZCBvZiBwYXJ0aWNpcGF0aW9uLCB0aGUgZGF0ZSBvZiBvY2N1cGFuY3kgb2YgYSByZW50YWwsIHdhcnJlbnRseSBkdXJhdGlvbiwgb3Igd2hldGhlciBiaW9zcGVjaW1lbiBtYXkgYmUgdXNlZCBmb3IgZnVydGhlciByZXNlYXJjaC5cclxuICAgKi9cclxuICB2YWx1ZVJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBtYXR0ZXIgb2YgY29uY2VybiBpbiB0aGUgY29udGV4dCBvZiB0aGlzIHByb3Zpc2lvbiBvZiB0aGUgYWdyZW1lbnQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0VGVybU9mZmVyIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBwYXJ0aWN1bGFyIENvbnRyYWN0IFByb3Zpc2lvbi5cclxuICAgKi9cclxuICBpZGVudGlmaWVyPzogZmhpci5JZGVudGlmaWVyW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE9mZmVyIFJlY2lwaWVudC5cclxuICAgKi9cclxuICBwYXJ0eT86IGZoaXIuQ29udHJhY3RUZXJtT2ZmZXJQYXJ0eVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgQ29udHJhY3QudG9waWMgbWF5IGJlIGFuIGFwcGxpY2F0aW9uIGZvciBvciBvZmZlciBvZiBhIHBvbGljeSBvciBzZXJ2aWNlIChlLmcuLCB1cmkgdG8gYSBjb25zZW50IGRpcmVjdGl2ZSBmb3JtIG9yIGEgaGVhbHRoIGluc3VyYW5jZSBwb2xpY3kpLCB3aGljaCBiZWNvbWVzIHRoZSBDb250cmFjdCBvbmNlIGFjY2VwdGVkIGJ5IGJvdGggdGhlIGdyYW50b3IgYW5kIGdyYW50ZWUuIFxyXG4gICAqIFRoZSBDb250cmFjdCBSZXNvdXJjZSBtYXkgZnVuY3Rpb24gc2ltcGx5IGFzIHRoZSBjb21wdXRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBleGVjdXRlZCBjb250cmFjdCwgd2hpY2ggbWF5IGJlIHRoZSBhdHRhY2hlZCB0byB0aGUgQ29udHJhY3QgUmVzb3VyY2UgYXMgdGhlIOKAnGJpbmRpbmfigJ0gb3IgYXMgdGhlIOKAnGZyaWVuZGx54oCdIGVsZWN0cm9uaWMgZm9ybS4gIEZvciBleGFtcGxlLCBhIENvbnRyYWN0IFJlc291cmNlIG1heSBiZSBhdXRvbWF0aWNhbGx5IHBvcHVsYXRlZCB3aXRoIHRoZSB2YWx1ZXMgZXhwcmVzc2VkIGluIGEgcmVsYXRlZCBRdWVzdGlvbm5haXJlUmVzcG9uc2UuIFxyXG4gICAqIEhvd2V2ZXIsIHRoZSBDb250cmFjdCBSZXNvdXJjZSBtYXkgYmUgY29uc2lkZXJlZCB0aGUgbGVnYWxseSBiaW5kaW5nIGNvbnRyYWN0IGlmIGl0IGlzIHRoZSBvbmx5IOKAnGV4ZWN1dGVk4oCdIGZvcm0gb2YgdGhpcyBjb250cmFjdCwgYW5kIGluY2x1ZGVzIHRoZSBzaWduYXR1cmVzIGFzICpUaGUgQ29udHJhY3QgUmVzb3VyY2UgbWF5IGZ1bmN0aW9uIGFzIHRoZSBjb21wdXRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFwcGxpY2F0aW9uIG9yIG9mZmVyIGluIGEgcHJlLWV4ZWN1dGVkIENvbnRyYWN0IGlmIHRoZSBncmFudG9yIGhhcyBub3QgZW50ZXJlZCBhbnkgdmFsdWVzLiAgSW4gdGhpcyBjYXNlLCBpdCBpcyBwb3B1bGF0ZWQgd2l0aCB2YWx1ZXMgaW4gYSDigJxsZWdhbOKAnSBmb3JtIG9mIHRoZSBhcHBsaWNhdGlvbiBvciBvZmZlciBvciBieSB0aGUgdmFsdWVzIGluIGFuIGFzc29jaWF0ZWQgUXVlc3Rpb25uYWlyZS4gIElmIHRoZSBncmFudG9yIGhhcyBmaWxsZWQgaW4gdGhlIGxlZ2FsIGZvcm0gb3IgdGhlIGFzc29jaWF0ZWQgUXVlc3Rpb25uYWlyZSBSZXNwb25zZSwgdGhlbiB0aGVzZSB2YWx1ZXMgYXJlIHVzZWQgdG8gcG9wdWxhdGUgYSBwcmUtZXhlY3V0ZWQgQ29udHJhY3QgUmVzb3VyY2UuXHJcbiAgICogSWYgdGhlIENvbnRyYWN0LnRvcGljIGlzIGNvbnNpZGVyZWQgYW4gYXBwbGljYXRpb24gb3Igb2ZmZXIsIHRoZW4gdGhlIHBvbGljeSBpcyBvZnRlbiByZXF1aXJlZCB0byBiZSBhdHRhY2hlZCBhcyB0aGUg4oCcbGVnYWzigJ0gYmFzaXMgZm9yIHRoZSBhcHBsaWNhdGlvbiB0byBlbnN1cmUg4oCcaW5mb3JtZWQgY29uc2VudOKAnSB0byB0aGUgY29udHJhY3QsIGFuZCB0aGF0IGFueSBkaXNjcmVwYW5jeSBiZXR3ZWVuIHRoZSBhcHBsaWNhdGlvbiBhbmQgdGhlIHBvbGljeSBhcmUgaW50ZXJwcmV0ZWQgYWdhaW5zdCB0aGUgcG9saWN5LiAgSW1wbGVtZW50ZXJzIHNob3VsZCBjaGVjayBvcmdhbml6YXRpb25hbCBhbmQganVyaXNkaWN0aW9uYWwgcG9saWNpZXMgdG8gZGV0ZXJtaW5lIHRoZSByZWxhdGlvbnNoaXAgYW1vbmcgbXVsdGlwbGUgcmVwcmVzZW50YXRpb25zIG9mIGEgY29udHJhY3QgcHJlLSBhbmQgcG9zdC1leGVjdXRpb24uXHJcbiAgICovXHJcbiAgdG9waWM/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVHlwZSBvZiBDb250cmFjdCBQcm92aXNpb24gc3VjaCBhcyBzcGVjaWZpYyByZXF1aXJlbWVudHMsIHB1cnBvc2VzIGZvciBhY3Rpb25zLCBvYmxpZ2F0aW9ucywgcHJvaGliaXRpb25zLCBlLmcuIGxpZmUgdGltZSBtYXhpbXVtIGJlbmVmaXQuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUeXBlIG9mIGNob2ljZSBtYWRlIGJ5IGFjY2VwdGluZyBwYXJ0eSB3aXRoIHJlc3BlY3QgdG8gYW4gb2ZmZXIgbWFkZSBieSBhbiBvZmZlcm9yLyBncmFudGVlLlxyXG4gICAqL1xyXG4gIGRlY2lzaW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEhvdyB0aGUgZGVjaXNpb24gYWJvdXQgYSBDb250cmFjdCB3YXMgY29udmV5ZWQuXHJcbiAgICovXHJcbiAgZGVjaXNpb25Nb2RlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVzcG9uc2UgdG8gb2ZmZXIgdGV4dC5cclxuICAgKi9cclxuICBhbnN3ZXI/OiBmaGlyLkNvbnRyYWN0VGVybU9mZmVyQW5zd2VyW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEh1bWFuIHJlYWRhYmxlIGZvcm0gb2YgdGhpcyBDb250cmFjdCBPZmZlci5cclxuICAgKi9cclxuICB0ZXh0Pzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5vZmZlci50ZXh0XHJcbiAgICovXHJcbiAgX3RleHQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGlkIG9mIHRoZSBjbGF1c2Ugb3IgcXVlc3Rpb24gdGV4dCBvZiB0aGUgb2ZmZXIgaW4gdGhlIHJlZmVyZW5jZWQgcXVlc3Rpb25uYWlyZS9yZXNwb25zZS5cclxuICAgKi9cclxuICBsaW5rSWQ/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0ub2ZmZXIubGlua0lkXHJcbiAgICovXHJcbiAgX2xpbmtJZD86KGZoaXIuRmhpckVsZW1lbnR8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBTZWN1cml0eSBsYWJlbHMgdGhhdCBwcm90ZWN0cyB0aGUgb2ZmZXIuXHJcbiAgICovXHJcbiAgc2VjdXJpdHlMYWJlbE51bWJlcj86IG51bWJlcltdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5vZmZlci5zZWN1cml0eUxhYmVsTnVtYmVyXHJcbiAgICovXHJcbiAgX3NlY3VyaXR5TGFiZWxOdW1iZXI/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaXJjdW1zdGFuY2Ugb2YgdGhlIGFzc2V0LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb250cmFjdFRlcm1Bc3NldENvbnRleHQgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIEFzc2V0IGNvbnRleHQgcmVmZXJlbmNlIG1heSBpbmNsdWRlIHRoZSBjcmVhdG9yLCBjdXN0b2RpYW4sIG9yIG93bmluZyBQZXJzb24gb3IgT3JnYW5pemF0aW9uIChlLmcuLCBiYW5rLCByZXBvc2l0b3J5KSwgIGxvY2F0aW9uIGhlbGQsIGUuZy4sIGJ1aWxkaW5nLCAganVyaXNkaWN0aW9uLlxyXG4gICAqL1xyXG4gIHJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29udGV4dCBnZW5lcmFsbHkgb3Igb2YgdGhlIFJlZmVyZW5jZWQgZW50aXR5LCBzdWNoIGFzIHRoZSBhc3NldCBob2xkZXIgdHlwZSBvciBsb2NhdGlvbi5cclxuICAgKi9cclxuICBjb2RlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29udGV4dCBkZXNjcmlwdGlvbi5cclxuICAgKi9cclxuICB0ZXh0Pzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5hc3NldC5jb250ZXh0LnRleHRcclxuICAgKi9cclxuICBfdGV4dD86Zmhpci5GaGlyRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnRyYWN0IFZhbHVlZCBJdGVtIExpc3QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0VGVybUFzc2V0VmFsdWVkSXRlbSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWMgdHlwZSBvZiBDb250cmFjdCBWYWx1ZWQgSXRlbSB0aGF0IG1heSBiZSBwcmljZWQuXHJcbiAgICovXHJcbiAgZW50aXR5Q29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmljIHR5cGUgb2YgQ29udHJhY3QgVmFsdWVkIEl0ZW0gdGhhdCBtYXkgYmUgcHJpY2VkLlxyXG4gICAqL1xyXG4gIGVudGl0eVJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIGEgQ29udHJhY3QgVmFsdWVkIEl0ZW0gaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHRoZSB0aW1lIGR1cmluZyB3aGljaCB0aGlzIENvbnRyYWN0IFZhbHVlZEl0ZW0gaW5mb3JtYXRpb24gaXMgZWZmZWN0aXZlLlxyXG4gICAqL1xyXG4gIGVmZmVjdGl2ZVRpbWU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLmFzc2V0LnZhbHVlZEl0ZW0uZWZmZWN0aXZlVGltZVxyXG4gICAqL1xyXG4gIF9lZmZlY3RpdmVUaW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmllcyB0aGUgdW5pdHMgYnkgd2hpY2ggdGhlIENvbnRyYWN0IFZhbHVlZCBJdGVtIGlzIG1lYXN1cmVkIG9yIGNvdW50ZWQsIGFuZCBxdWFudGlmaWVzIHRoZSBjb3VudGFibGUgb3IgbWVhc3VyYWJsZSBDb250cmFjdCBWYWx1ZWQgSXRlbSBpbnN0YW5jZXMuXHJcbiAgICovXHJcbiAgcXVhbnRpdHk/OiBmaGlyLlF1YW50aXR5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIENvbnRyYWN0IFZhbHVlZCBJdGVtIHVuaXQgdmFsdWF0aW9uIG1lYXN1cmUuXHJcbiAgICovXHJcbiAgdW5pdFByaWNlPzogZmhpci5Nb25leXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSByZWFsIG51bWJlciB0aGF0IHJlcHJlc2VudHMgYSBtdWx0aXBsaWVyIHVzZWQgaW4gZGV0ZXJtaW5pbmcgdGhlIG92ZXJhbGwgdmFsdWUgb2YgdGhlIENvbnRyYWN0IFZhbHVlZCBJdGVtIGRlbGl2ZXJlZC4gVGhlIGNvbmNlcHQgb2YgYSBGYWN0b3IgYWxsb3dzIGZvciBhIGRpc2NvdW50IG9yIHN1cmNoYXJnZSBtdWx0aXBsaWVyIHRvIGJlIGFwcGxpZWQgdG8gYSBtb25ldGFyeSBhbW91bnQuXHJcbiAgICovXHJcbiAgZmFjdG9yPzogbnVtYmVyfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5hc3NldC52YWx1ZWRJdGVtLmZhY3RvclxyXG4gICAqL1xyXG4gIF9mYWN0b3I/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogQW4gYW1vdW50IHRoYXQgZXhwcmVzc2VzIHRoZSB3ZWlnaHRpbmcgKGJhc2VkIG9uIGRpZmZpY3VsdHksIGNvc3QgYW5kL29yIHJlc291cmNlIGludGVuc2l2ZW5lc3MpIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ29udHJhY3QgVmFsdWVkIEl0ZW0gZGVsaXZlcmVkLiBUaGUgY29uY2VwdCBvZiBQb2ludHMgYWxsb3dzIGZvciBhc3NpZ25tZW50IG9mIHBvaW50IHZhbHVlcyBmb3IgYSBDb250cmFjdCBWYWx1ZWQgSXRlbSwgc3VjaCB0aGF0IGEgbW9uZXRhcnkgYW1vdW50IGNhbiBiZSBhc3NpZ25lZCB0byBlYWNoIHBvaW50LlxyXG4gICAqL1xyXG4gIHBvaW50cz86IG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYXNzZXQudmFsdWVkSXRlbS5wb2ludHNcclxuICAgKi9cclxuICBfcG9pbnRzPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEV4cHJlc3NlcyB0aGUgcHJvZHVjdCBvZiB0aGUgQ29udHJhY3QgVmFsdWVkIEl0ZW0gdW5pdFF1YW50aXR5IGFuZCB0aGUgdW5pdFByaWNlQW10LiBGb3IgZXhhbXBsZSwgdGhlIGZvcm11bGE6IHVuaXQgUXVhbnRpdHkgKiB1bml0IFByaWNlIChDb3N0IHBlciBQb2ludCkgKiBmYWN0b3IgTnVtYmVyICAqIHBvaW50cyA9IG5ldCBBbW91bnQuIFF1YW50aXR5LCBmYWN0b3IgYW5kIHBvaW50cyBhcmUgYXNzdW1lZCB0byBiZSAxIGlmIG5vdCBzdXBwbGllZC5cclxuICAgKi9cclxuICBuZXQ/OiBmaGlyLk1vbmV5fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUZXJtcyBvZiB2YWx1YXRpb24uXHJcbiAgICovXHJcbiAgcGF5bWVudD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYXNzZXQudmFsdWVkSXRlbS5wYXltZW50XHJcbiAgICovXHJcbiAgX3BheW1lbnQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiBwYXltZW50IGlzIGR1ZS5cclxuICAgKi9cclxuICBwYXltZW50RGF0ZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYXNzZXQudmFsdWVkSXRlbS5wYXltZW50RGF0ZVxyXG4gICAqL1xyXG4gIF9wYXltZW50RGF0ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBXaG8gd2lsbCBtYWtlIHBheW1lbnQuXHJcbiAgICovXHJcbiAgcmVzcG9uc2libGU/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hvIHdpbGwgcmVjZWl2ZSBwYXltZW50LlxyXG4gICAqL1xyXG4gIHJlY2lwaWVudD86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZCAgb2YgdGhlIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0IHJlbGF0ZWQgdG8gdGhlIGNvbnRleHQgb2YgdGhpcyB2YWx1ZWRJdGVtIGluIHRoZSByZWZlcmVuY2VkIGZvcm0gb3IgUXVlc3Rpb25uYWlyZVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIGxpbmtJZD86IHN0cmluZ1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5hc3NldC52YWx1ZWRJdGVtLmxpbmtJZFxyXG4gICAqL1xyXG4gIF9saW5rSWQ/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogQSBzZXQgb2Ygc2VjdXJpdHkgbGFiZWxzIHRoYXQgZGVmaW5lIHdoaWNoIHRlcm1zIGFyZSBjb250cm9sbGVkIGJ5IHRoaXMgY29uZGl0aW9uLlxyXG4gICAqL1xyXG4gIHNlY3VyaXR5TGFiZWxOdW1iZXI/OiBudW1iZXJbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYXNzZXQudmFsdWVkSXRlbS5zZWN1cml0eUxhYmVsTnVtYmVyXHJcbiAgICovXHJcbiAgX3NlY3VyaXR5TGFiZWxOdW1iZXI/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250cmFjdCBUZXJtIEFzc2V0IExpc3QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0VGVybUFzc2V0IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBEaWZmZXJlbnRpYXRlcyB0aGUga2luZCBvZiB0aGUgYXNzZXQgLlxyXG4gICAqL1xyXG4gIHNjb3BlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRhcmdldCBlbnRpdHkgdHlwZSBhYm91dCB3aGljaCB0aGUgdGVybSBtYXkgYmUgY29uY2VybmVkLlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBc3NvY2lhdGVkIGVudGl0aWVzLlxyXG4gICAqL1xyXG4gIHR5cGVSZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBNYXkgYmUgYSBzdWJ0eXBlIG9yIHBhcnQgb2YgYW4gb2ZmZXJlZCBhc3NldC5cclxuICAgKi9cclxuICBzdWJ0eXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHRbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIHRoZSBhcHBsaWNhYmlsaXR5IG9mIHRoZSB0ZXJtIHRvIGFuIGFzc2V0IHJlc291cmNlIGluc3RhbmNlLCBhbmQgaW5zdGFuY2VzIGl0IHJlZmVycyB0byBvcmluc3RhbmNlcyB0aGF0IHJlZmVyIHRvIGl0LCBhbmQvb3IgYXJlIG93bmVkIGJ5IHRoZSBvZmZlcmVlLlxyXG4gICAqL1xyXG4gIHJlbGF0aW9uc2hpcD86IGZoaXIuQ29kaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDaXJjdW1zdGFuY2Ugb2YgdGhlIGFzc2V0LlxyXG4gICAqL1xyXG4gIGNvbnRleHQ/OiBmaGlyLkNvbnRyYWN0VGVybUFzc2V0Q29udGV4dFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGlvbiBvZiB0aGUgcXVhbGl0eSBhbmQgY29tcGxldGVuZXNzIG9mIHRoZSBhc3NldCB0aGF0IGltYXkgYmUgYSBmYWN0b3IgaW4gaXRzIHZhbHVhdGlvbi5cclxuICAgKi9cclxuICBjb25kaXRpb24/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLmFzc2V0LmNvbmRpdGlvblxyXG4gICAqL1xyXG4gIF9jb25kaXRpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVHlwZSBvZiBBc3NldCBhdmFpbGFiaWxpdHkgZm9yIHVzZSBvciBvd25lcnNoaXAuXHJcbiAgICovXHJcbiAgcGVyaW9kVHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0W118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEFzc2V0IHJlbGV2YW50IGNvbnRyYWN0dWFsIHRpbWUgcGVyaW9kLlxyXG4gICAqL1xyXG4gIHBlcmlvZD86IGZoaXIuUGVyaW9kW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRpbWUgcGVyaW9kIG9mIGFzc2V0IHVzZS5cclxuICAgKi9cclxuICB1c2VQZXJpb2Q/OiBmaGlyLlBlcmlvZFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDbGF1c2Ugb3IgcXVlc3Rpb24gdGV4dCAoUHJvc2UgT2JqZWN0KSBjb25jZXJuaW5nIHRoZSBhc3NldCBpbiBhIGxpbmtlZCBmb3JtLCBzdWNoIGFzIGEgUXVlc3Rpb25uYWlyZVJlc3BvbnNlIHVzZWQgaW4gdGhlIGZvcm1hdGlvbiBvZiB0aGUgY29udHJhY3QuXHJcbiAgICovXHJcbiAgdGV4dD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYXNzZXQudGV4dFxyXG4gICAqL1xyXG4gIF90ZXh0PzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElkIFtpZGVudGlmaWVyPz9dIG9mIHRoZSBjbGF1c2Ugb3IgcXVlc3Rpb24gdGV4dCBhYm91dCB0aGUgYXNzZXQgaW4gdGhlIHJlZmVyZW5jZWQgZm9ybSBvciBRdWVzdGlvbm5haXJlUmVzcG9uc2UuXHJcbiAgICovXHJcbiAgbGlua0lkPzogc3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLmFzc2V0LmxpbmtJZFxyXG4gICAqL1xyXG4gIF9saW5rSWQ/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogUmVzcG9uc2UgdG8gYXNzZXRzLlxyXG4gICAqL1xyXG4gIGFuc3dlcj86IGZoaXIuQ29udHJhY3RUZXJtT2ZmZXJBbnN3ZXJbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VjdXJpdHkgbGFiZWxzIHRoYXQgcHJvdGVjdHMgdGhlIGFzc2V0LlxyXG4gICAqL1xyXG4gIHNlY3VyaXR5TGFiZWxOdW1iZXI/OiBudW1iZXJbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYXNzZXQuc2VjdXJpdHlMYWJlbE51bWJlclxyXG4gICAqL1xyXG4gIF9zZWN1cml0eUxhYmVsTnVtYmVyPzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIENvbnRyYWN0IFZhbHVlZCBJdGVtIExpc3QuXHJcbiAgICovXHJcbiAgdmFsdWVkSXRlbT86IGZoaXIuQ29udHJhY3RUZXJtQXNzZXRWYWx1ZWRJdGVtW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogRW50aXR5IG9mIHRoZSBhY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0VGVybUFjdGlvblN1YmplY3QgZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFRoZSBlbnRpdHkgdGhlIGFjdGlvbiBpcyBwZXJmb3JtZWQgb3Igbm90IHBlcmZvcm1lZCBvbiBvciBmb3IuXHJcbiAgICovXHJcbiAgcmVmZXJlbmNlOiBmaGlyLlJlZmVyZW5jZVtdfG51bGw7XHJcbiAgLyoqXHJcbiAgICogUm9sZSB0eXBlIG9mIGFnZW50IGFzc2lnbmVkIHJvbGVzIGluIHRoaXMgQ29udHJhY3QuXHJcbiAgICovXHJcbiAgcm9sZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldmVyYWwgYWdlbnRzIG1heSBiZSBhc3NvY2lhdGVkIChpLmUuIGhhcyBzb21lIHJlc3BvbnNpYmlsaXR5IGZvciBhbiBhY3Rpdml0eSkgd2l0aCBhbiBhY3Rpdml0eSBhbmQgdmljZS12ZXJzYS5cclxuICogRm9yIGV4YW1wbGUsIGluIGNhc2VzIG9mIGFjdGlvbnMgaW5pdGlhdGVkIGJ5IG9uZSB1c2VyIGZvciBvdGhlciB1c2Vycywgb3IgaW4gZXZlbnRzIHRoYXQgaW52b2x2ZSBtb3JlIHRoYW4gb25lIHVzZXIsIGhhcmR3YXJlIGRldmljZSwgc29mdHdhcmUsIG9yIHN5c3RlbSBwcm9jZXNzLiBIb3dldmVyLCBvbmx5IG9uZSB1c2VyIG1heSBiZSB0aGUgaW5pdGlhdG9yL3JlcXVlc3RvciBmb3IgdGhlIGV2ZW50LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb250cmFjdFRlcm1BY3Rpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFRydWUgaWYgdGhlIHRlcm0gcHJvaGliaXRzIHRoZSAgYWN0aW9uLlxyXG4gICAqL1xyXG4gIGRvTm90UGVyZm9ybT86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLmFjdGlvbi5kb05vdFBlcmZvcm1cclxuICAgKi9cclxuICBfZG9Ob3RQZXJmb3JtPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEFjdGl2aXR5IG9yIHNlcnZpY2Ugb2JsaWdhdGlvbiB0byBiZSBkb25lIG9yIG5vdCBkb25lLCBwZXJmb3JtZWQgb3Igbm90IHBlcmZvcm1lZCwgZWZmZWN0dWF0ZWQgb3Igbm90IGJ5IHRoaXMgQ29udHJhY3QgdGVybS5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEVudGl0eSBvZiB0aGUgYWN0aW9uLlxyXG4gICAqL1xyXG4gIHN1YmplY3Q/OiBmaGlyLkNvbnRyYWN0VGVybUFjdGlvblN1YmplY3RbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogUmVhc29uIG9yIHB1cnBvc2UgZm9yIHRoZSBhY3Rpb24gc3RpcHVsYXRlZCBieSB0aGlzIENvbnRyYWN0IFByb3Zpc2lvbi5cclxuICAgKi9cclxuICBpbnRlbnQ6IGZoaXIuQ29kZWFibGVDb25jZXB0fG51bGw7XHJcbiAgLyoqXHJcbiAgICogSWQgW2lkZW50aWZpZXI/P10gb2YgdGhlIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0IHJlbGF0ZWQgdG8gdGhpcyBhY3Rpb24gaW4gdGhlIHJlZmVyZW5jZWQgZm9ybSBvciBRdWVzdGlvbm5haXJlUmVzcG9uc2UuXHJcbiAgICovXHJcbiAgbGlua0lkPzogc3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLmFjdGlvbi5saW5rSWRcclxuICAgKi9cclxuICBfbGlua0lkPzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIEN1cnJlbnQgc3RhdGUgb2YgdGhlIHRlcm0gYWN0aW9uLlxyXG4gICAqL1xyXG4gIHN0YXR1czogZmhpci5Db2RlYWJsZUNvbmNlcHR8bnVsbDtcclxuICAvKipcclxuICAgKiBFbmNvdW50ZXIgb3IgRXBpc29kZSB3aXRoIHByaW1hcnkgYXNzb2NpYXRpb24gdG8gc3BlY2lmaWVkIHRlcm0gYWN0aXZpdHkuXHJcbiAgICovXHJcbiAgY29udGV4dD86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZCBbaWRlbnRpZmllcj8/XSBvZiB0aGUgY2xhdXNlIG9yIHF1ZXN0aW9uIHRleHQgcmVsYXRlZCB0byB0aGUgcmVxdWVzdGVyIG9mIHRoaXMgYWN0aW9uIGluIHRoZSByZWZlcmVuY2VkIGZvcm0gb3IgUXVlc3Rpb25uYWlyZVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIGNvbnRleHRMaW5rSWQ/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYWN0aW9uLmNvbnRleHRMaW5rSWRcclxuICAgKi9cclxuICBfY29udGV4dExpbmtJZD86KGZoaXIuRmhpckVsZW1lbnR8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBXaGVuIGFjdGlvbiBoYXBwZW5zLlxyXG4gICAqL1xyXG4gIG9jY3VycmVuY2VEYXRlVGltZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYWN0aW9uLm9jY3VycmVuY2VbeF1cclxuICAgKi9cclxuICBfb2NjdXJyZW5jZURhdGVUaW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gYWN0aW9uIGhhcHBlbnMuXHJcbiAgICovXHJcbiAgb2NjdXJyZW5jZVBlcmlvZD86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGVuIGFjdGlvbiBoYXBwZW5zLlxyXG4gICAqL1xyXG4gIG9jY3VycmVuY2VUaW1pbmc/OiBmaGlyLlRpbWluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hvIG9yIHdoYXQgaW5pdGlhdGVkIHRoZSBhY3Rpb24gYW5kIGhhcyByZXNwb25zaWJpbGl0eSBmb3IgaXRzIGFjdGl2YXRpb24uXHJcbiAgICovXHJcbiAgcmVxdWVzdGVyPzogZmhpci5SZWZlcmVuY2VbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSWQgW2lkZW50aWZpZXI/P10gb2YgdGhlIGNsYXVzZSBvciBxdWVzdGlvbiB0ZXh0IHJlbGF0ZWQgdG8gdGhlIHJlcXVlc3RlciBvZiB0aGlzIGFjdGlvbiBpbiB0aGUgcmVmZXJlbmNlZCBmb3JtIG9yIFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5cclxuICAgKi9cclxuICByZXF1ZXN0ZXJMaW5rSWQ/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYWN0aW9uLnJlcXVlc3RlckxpbmtJZFxyXG4gICAqL1xyXG4gIF9yZXF1ZXN0ZXJMaW5rSWQ/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgb2YgaW5kaXZpZHVhbCB0aGF0IGlzIGRlc2lyZWQgb3IgcmVxdWlyZWQgdG8gcGVyZm9ybSBvciBub3QgcGVyZm9ybSB0aGUgYWN0aW9uLlxyXG4gICAqL1xyXG4gIHBlcmZvcm1lclR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgdHlwZSBvZiByb2xlIG9yIGNvbXBldGVuY3kgb2YgYW4gaW5kaXZpZHVhbCBkZXNpcmVkIG9yIHJlcXVpcmVkIHRvIHBlcmZvcm0gb3Igbm90IHBlcmZvcm0gdGhlIGFjdGlvbi5cclxuICAgKi9cclxuICBwZXJmb3JtZXJSb2xlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aG8gb3Igd2hhdCBpcyBiZWluZyBhc2tlZCB0byBwZXJmb3JtIChvciBub3QgcGVyZm9ybSkgdGhlIGN0aW9uLlxyXG4gICAqL1xyXG4gIHBlcmZvcm1lcj86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZCBbaWRlbnRpZmllcj8/XSBvZiB0aGUgY2xhdXNlIG9yIHF1ZXN0aW9uIHRleHQgcmVsYXRlZCB0byB0aGUgcmVhc29uIHR5cGUgb3IgcmVmZXJlbmNlIG9mIHRoaXMgIGFjdGlvbiBpbiB0aGUgcmVmZXJlbmNlZCBmb3JtIG9yIFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5cclxuICAgKi9cclxuICBwZXJmb3JtZXJMaW5rSWQ/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYWN0aW9uLnBlcmZvcm1lckxpbmtJZFxyXG4gICAqL1xyXG4gIF9wZXJmb3JtZXJMaW5rSWQ/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogUmF0aW9uYWxlIGZvciB0aGUgYWN0aW9uIHRvIGJlIHBlcmZvcm1lZCBvciBub3QgcGVyZm9ybWVkLiBEZXNjcmliZXMgd2h5IHRoZSBhY3Rpb24gaXMgcGVybWl0dGVkIG9yIHByb2hpYml0ZWQuXHJcbiAgICovXHJcbiAgcmVhc29uQ29kZT86IGZoaXIuQ29kZWFibGVDb25jZXB0W118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBhbm90aGVyIHJlc291cmNlIHdob3NlIGV4aXN0ZW5jZSBqdXN0aWZpZXMgcGVybWl0dGluZyBvciBub3QgcGVybWl0dGluZyB0aGlzIGFjdGlvbi5cclxuICAgKi9cclxuICByZWFzb25SZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBEZXNjcmliZXMgd2h5IHRoZSBhY3Rpb24gaXMgdG8gYmUgcGVyZm9ybWVkIG9yIG5vdCBwZXJmb3JtZWQgaW4gdGV4dHVhbCBmb3JtLlxyXG4gICAqL1xyXG4gIHJlYXNvbj86IHN0cmluZ1tdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGVybS5hY3Rpb24ucmVhc29uXHJcbiAgICovXHJcbiAgX3JlYXNvbj86KGZoaXIuRmhpckVsZW1lbnR8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBJZCBbaWRlbnRpZmllcj8/XSBvZiB0aGUgY2xhdXNlIG9yIHF1ZXN0aW9uIHRleHQgcmVsYXRlZCB0byB0aGUgcmVhc29uIHR5cGUgb3IgcmVmZXJlbmNlIG9mIHRoaXMgIGFjdGlvbiBpbiB0aGUgcmVmZXJlbmNlZCBmb3JtIG9yIFF1ZXN0aW9ubmFpcmVSZXNwb25zZS5cclxuICAgKi9cclxuICByZWFzb25MaW5rSWQ/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uYWN0aW9uLnJlYXNvbkxpbmtJZFxyXG4gICAqL1xyXG4gIF9yZWFzb25MaW5rSWQ/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbiAgLyoqXHJcbiAgICogQ29tbWVudHMgbWFkZSBhYm91dCB0aGUgdGVybSBhY3Rpb24gbWFkZSBieSB0aGUgcmVxdWVzdGVyLCBwZXJmb3JtZXIsIHN1YmplY3Qgb3Igb3RoZXIgcGFydGljaXBhbnRzLlxyXG4gICAqL1xyXG4gIG5vdGU/OiBmaGlyLkFubm90YXRpb25bXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VjdXJpdHkgbGFiZWxzIHRoYXQgcHJvdGVjdHMgdGhlIGFjdGlvbi5cclxuICAgKi9cclxuICBzZWN1cml0eUxhYmVsTnVtYmVyPzogbnVtYmVyW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLmFjdGlvbi5zZWN1cml0eUxhYmVsTnVtYmVyXHJcbiAgICovXHJcbiAgX3NlY3VyaXR5TGFiZWxOdW1iZXI/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPbmUgb3IgbW9yZSBDb250cmFjdCBQcm92aXNpb25zLCB3aGljaCBtYXkgYmUgcmVsYXRlZCBhbmQgY29udmV5ZWQgYXMgYSBncm91cCwgYW5kIG1heSBjb250YWluIG5lc3RlZCBncm91cHMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0VGVybSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcGFydGljdWxhciBDb250cmFjdCBQcm92aXNpb24uXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hlbiB0aGlzIENvbnRyYWN0IFByb3Zpc2lvbiB3YXMgaXNzdWVkLlxyXG4gICAqL1xyXG4gIGlzc3VlZD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LnRlcm0uaXNzdWVkXHJcbiAgICovXHJcbiAgX2lzc3VlZD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBSZWxldmFudCB0aW1lIG9yIHRpbWUtcGVyaW9kIHdoZW4gdGhpcyBDb250cmFjdCBQcm92aXNpb24gaXMgYXBwbGljYWJsZS5cclxuICAgKi9cclxuICBhcHBsaWVzPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbnRpdHkgdGhhdCB0aGUgdGVybSBhcHBsaWVzIHRvLlxyXG4gICAqL1xyXG4gIHRvcGljQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBlbnRpdHkgdGhhdCB0aGUgdGVybSBhcHBsaWVzIHRvLlxyXG4gICAqL1xyXG4gIHRvcGljUmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgbGVnYWwgY2xhdXNlIG9yIGNvbmRpdGlvbiBjb250YWluZWQgd2l0aGluIGEgY29udHJhY3QgdGhhdCByZXF1aXJlcyBvbmUgb3IgYm90aCBwYXJ0aWVzIHRvIHBlcmZvcm0gYSBwYXJ0aWN1bGFyIHJlcXVpcmVtZW50IGJ5IHNvbWUgc3BlY2lmaWVkIHRpbWUgb3IgcHJldmVudHMgb25lIG9yIGJvdGggcGFydGllcyBmcm9tIHBlcmZvcm1pbmcgYSBwYXJ0aWN1bGFyIHJlcXVpcmVtZW50IGJ5IHNvbWUgc3BlY2lmaWVkIHRpbWUuXHJcbiAgICovXHJcbiAgdHlwZT86IGZoaXIuQ29kZWFibGVDb25jZXB0fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBBIHNwZWNpYWxpemVkIGxlZ2FsIGNsYXVzZSBvciBjb25kaXRpb24gYmFzZWQgb24gb3ZlcmFyY2hpbmcgY29udHJhY3QgdHlwZS5cclxuICAgKi9cclxuICBzdWJUeXBlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFN0YXRlbWVudCBvZiBhIHByb3Zpc2lvbiBpbiBhIHBvbGljeSBvciBhIGNvbnRyYWN0LlxyXG4gICAqL1xyXG4gIHRleHQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC50ZXJtLnRleHRcclxuICAgKi9cclxuICBfdGV4dD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBTZWN1cml0eSBsYWJlbHMgdGhhdCBwcm90ZWN0IHRoZSBoYW5kbGluZyBvZiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVybSBhbmQgaXRzIGVsZW1lbnRzLCB3aGljaCBtYXkgYmUgc3BlY2lmaWNhbGx5IGlkZW50aWZpZWQuLlxyXG4gICAqL1xyXG4gIHNlY3VyaXR5TGFiZWw/OiBmaGlyLkNvbnRyYWN0VGVybVNlY3VyaXR5TGFiZWxbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1hdHRlciBvZiBjb25jZXJuIGluIHRoZSBjb250ZXh0IG9mIHRoaXMgcHJvdmlzaW9uIG9mIHRoZSBhZ3JlbWVudC5cclxuICAgKi9cclxuICBvZmZlcjogZmhpci5Db250cmFjdFRlcm1PZmZlcnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIENvbnRyYWN0IFRlcm0gQXNzZXQgTGlzdC5cclxuICAgKi9cclxuICBhc3NldD86IGZoaXIuQ29udHJhY3RUZXJtQXNzZXRbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2V2ZXJhbCBhZ2VudHMgbWF5IGJlIGFzc29jaWF0ZWQgKGkuZS4gaGFzIHNvbWUgcmVzcG9uc2liaWxpdHkgZm9yIGFuIGFjdGl2aXR5KSB3aXRoIGFuIGFjdGl2aXR5IGFuZCB2aWNlLXZlcnNhLlxyXG4gICAqIEZvciBleGFtcGxlLCBpbiBjYXNlcyBvZiBhY3Rpb25zIGluaXRpYXRlZCBieSBvbmUgdXNlciBmb3Igb3RoZXIgdXNlcnMsIG9yIGluIGV2ZW50cyB0aGF0IGludm9sdmUgbW9yZSB0aGFuIG9uZSB1c2VyLCBoYXJkd2FyZSBkZXZpY2UsIHNvZnR3YXJlLCBvciBzeXN0ZW0gcHJvY2Vzcy4gSG93ZXZlciwgb25seSBvbmUgdXNlciBtYXkgYmUgdGhlIGluaXRpYXRvci9yZXF1ZXN0b3IgZm9yIHRoZSBldmVudC5cclxuICAgKi9cclxuICBhY3Rpb24/OiBmaGlyLkNvbnRyYWN0VGVybUFjdGlvbltdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBOZXN0ZWQgZ3JvdXAgb2YgQ29udHJhY3QgUHJvdmlzaW9ucy5cclxuICAgKi9cclxuICBncm91cD86IGZoaXIuQ29udHJhY3RUZXJtW118dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogU2lnbmVycyB3aG8gYXJlIHByaW5jaXBhbCBwYXJ0aWVzIHRvIHRoZSBjb250cmFjdCBhcmUgYm91bmQgYnkgdGhlIENvbnRyYWN0LmFjdGl2aXR5IHJlbGF0ZWQgdG8gdGhlIENvbnRyYWN0LnRvcGljLCBhbmQgdGhlIENvbnRyYWN0LnRlcm0ocyksIHdoaWNoIGVpdGhlciBleHRlbmQgb3IgcmVzdHJpY3QgdGhlIG92ZXJhbGwgYWN0aW9uIG9uIHRoZSB0b3BpYyBieSwgZm9yIGV4YW1wbGUsIHN0aXB1bGF0aW5nIHNwZWNpZmljIHBvbGljaWVzIG9yIG9ibGlnYXRpb25zIGNvbnN0cmFpbmluZyBhY3Rpb25zLCBhY3Rpb24gcmVhc29uLCBvciBhZ2VudHMgd2l0aCByZXNwZWN0IHRvIHNvbWUgb3IgYWxsIG9mIHRoZSB0b3BpYy5cclxuICogRm9yIGV4YW1wbGUsIHNwZWNpZnlpbmcgaG93IHBvbGljaWVzIG9yIG9ibGlnYXRpb25zIHNoYWxsIGNvbnN0cmFpbiBhY3Rpb25zIGFuZCBhY3Rpb24gcmVhc29ucyBwZXJtaXR0ZWQgb3IgZGVuaWVkIG9uIGFsbCBvciBhIHN1YnNldCBvZiB0aGUgQ29udHJhY3QudG9waWMgKGUuZy4sIGFsbCBvciBhIHBvcnRpb24gb2YgcHJvcGVydHkgYmVpbmcgdHJhbnNmZXJyZWQgYnkgdGhlIGNvbnRyYWN0KSwgYWdlbnRzIChlLmcuLCB3aG8gY2FuIHJlc2VsbCwgYXNzaWduIGludGVyZXN0cywgb3IgYWx0ZXIgdGhlIHByb3BlcnR5IGJlaW5nIHRyYW5zZmVycmVkIGJ5IHRoZSBjb250cmFjdCksIGFjdGlvbnMsIGFuZCBhY3Rpb24gcmVhc29uczsgb3Igd2l0aCByZXNwZWN0IHRvIENvbnRyYWN0LnRlcm1zLCBzdGlwdWxhdGluZywgZXh0ZW5kaW5nLCBvciBsaW1pdGluZyB0aGUgQ29udHJhY3QucGVyaW9kIG9mIGFwcGxpY2FiaWxpdHkgb3IgdmFsdWF0aW9uIG9mIGl0ZW1zIHVuZGVyIGNvbnNpZGVyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0U2lnbmVyIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBSb2xlIG9mIHRoaXMgQ29udHJhY3Qgc2lnbmVyLCBlLmcuIG5vdGFyeSwgZ3JhbnRlZS5cclxuICAgKi9cclxuICB0eXBlOiBmaGlyLkNvZGluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIFBhcnR5IHdoaWNoIGlzIGEgc2lnbmF0b3IgdG8gdGhpcyBDb250cmFjdC5cclxuICAgKi9cclxuICBwYXJ0eTogZmhpci5SZWZlcmVuY2V8bnVsbDtcclxuICAvKipcclxuICAgKiBMZWdhbGx5IGJpbmRpbmcgQ29udHJhY3QgRFNJRyBzaWduYXR1cmUgY29udGVudHMgaW4gQmFzZTY0LlxyXG4gICAqL1xyXG4gIHNpZ25hdHVyZTogZmhpci5TaWduYXR1cmVbXXxudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIFwicGF0aWVudCBmcmllbmRseSBsYW5ndWFnZVwiIHZlcnNpb25vZiB0aGUgQ29udHJhY3QgaW4gd2hvbGUgb3IgaW4gcGFydHMuIFwiUGF0aWVudCBmcmllbmRseSBsYW5ndWFnZVwiIG1lYW5zIHRoZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ29udHJhY3QgYW5kIENvbnRyYWN0IFByb3Zpc2lvbnMgaW4gYSBtYW5uZXIgdGhhdCBpcyByZWFkaWx5IGFjY2Vzc2libGUgYW5kIHVuZGVyc3RhbmRhYmxlIGJ5IGEgbGF5cGVyc29uIGluIGFjY29yZGFuY2Ugd2l0aCBiZXN0IHByYWN0aWNlcyBmb3IgY29tbXVuaWNhdGlvbiBzdHlsZXMgdGhhdCBlbnN1cmUgdGhhdCB0aG9zZSBhZ3JlZWluZyB0byBvciBzaWduaW5nIHRoZSBDb250cmFjdCB1bmRlcnN0YW5kIHRoZSByb2xlcywgYWN0aW9ucywgb2JsaWdhdGlvbnMsIHJlc3BvbnNpYmlsaXRpZXMsIGFuZCBpbXBsaWNhdGlvbiBvZiB0aGUgYWdyZWVtZW50LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb250cmFjdEZyaWVuZGx5IGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBIdW1hbiByZWFkYWJsZSByZW5kZXJpbmcgb2YgdGhpcyBDb250cmFjdCBpbiBhIGZvcm1hdCBhbmQgcmVwcmVzZW50YXRpb24gaW50ZW5kZWQgdG8gZW5oYW5jZSBjb21wcmVoZW5zaW9uIGFuZCBlbnN1cmUgdW5kZXJzdGFuZGFiaWxpdHkuXHJcbiAgICovXHJcbiAgY29udGVudEF0dGFjaG1lbnQ/OiBmaGlyLkF0dGFjaG1lbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEh1bWFuIHJlYWRhYmxlIHJlbmRlcmluZyBvZiB0aGlzIENvbnRyYWN0IGluIGEgZm9ybWF0IGFuZCByZXByZXNlbnRhdGlvbiBpbnRlbmRlZCB0byBlbmhhbmNlIGNvbXByZWhlbnNpb24gYW5kIGVuc3VyZSB1bmRlcnN0YW5kYWJpbGl0eS5cclxuICAgKi9cclxuICBjb250ZW50UmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdCBvZiBMZWdhbCBleHByZXNzaW9ucyBvciByZXByZXNlbnRhdGlvbnMgb2YgdGhpcyBDb250cmFjdC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJhY3RMZWdhbCBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogQ29udHJhY3QgbGVnYWwgdGV4dCBpbiBodW1hbiByZW5kZXJhYmxlIGZvcm0uXHJcbiAgICovXHJcbiAgY29udGVudEF0dGFjaG1lbnQ/OiBmaGlyLkF0dGFjaG1lbnR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIENvbnRyYWN0IGxlZ2FsIHRleHQgaW4gaHVtYW4gcmVuZGVyYWJsZSBmb3JtLlxyXG4gICAqL1xyXG4gIGNvbnRlbnRSZWZlcmVuY2U/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIENvbXB1dGFibGUgUG9saWN5IFJ1bGUgTGFuZ3VhZ2UgUmVwcmVzZW50YXRpb25zIG9mIHRoaXMgQ29udHJhY3QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0UnVsZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogQ29tcHV0YWJsZSBDb250cmFjdCBjb252ZXllZCB1c2luZyBhIHBvbGljeSBydWxlIGxhbmd1YWdlIChlLmcuIFhBQ01MLCBES0FMLCBTZWNQYWwpLlxyXG4gICAqL1xyXG4gIGNvbnRlbnRBdHRhY2htZW50PzogZmhpci5BdHRhY2htZW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBDb21wdXRhYmxlIENvbnRyYWN0IGNvbnZleWVkIHVzaW5nIGEgcG9saWN5IHJ1bGUgbGFuZ3VhZ2UgKGUuZy4gWEFDTUwsIERLQUwsIFNlY1BhbCkuXHJcbiAgICovXHJcbiAgY29udGVudFJlZmVyZW5jZT86IGZoaXIuUmVmZXJlbmNlfHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIExlZ2FsbHkgZW5mb3JjZWFibGUsIGZvcm1hbGx5IHJlY29yZGVkIHVuaWxhdGVyYWwgb3IgYmlsYXRlcmFsIGRpcmVjdGl2ZSBpLmUuLCBhIHBvbGljeSBvciBhZ3JlZW1lbnQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0IGV4dGVuZHMgZmhpci5Eb21haW5SZXNvdXJjZSB7IFxyXG4gIC8qKlxyXG4gICAqIFJlc291cmNlIFR5cGUgTmFtZVxyXG4gICAqL1xyXG4gIHJlc291cmNlVHlwZTogXCJDb250cmFjdFwiO1xyXG4gIC8qKlxyXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIENvbnRyYWN0IG9yIGEgZGVyaXZhdGl2ZSB0aGF0IHJlZmVyZW5jZXMgYSBTb3VyY2UgQ29udHJhY3QuXHJcbiAgICovXHJcbiAgaWRlbnRpZmllcj86IGZoaXIuSWRlbnRpZmllcltdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBVc2VkIGluIGEgZG9tYWluIHRoYXQgdXNlcyBhIHN1cHBsaWVkIGNvbnRyYWN0IHJlcG9zaXRvcnkuXHJcbiAgICovXHJcbiAgdXJsPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBOb3RlIC0gIFRoaXMgaXMgYSBidXNpbmVzcyB2ZXJzaW9uSWQsIG5vdCBhIHJlc291cmNlIHZlcnNpb24gaWQgKHNlZSBkaXNjdXNzaW9uIGh0dHA6Ly9idWlsZC5maGlyLm9yZy9yZXNvdXJjZS5odG1sI3ZlcnNpb25zKSBcclxuICAgKiBDb21tZW50cyAtIFRoZXJlIG1heSBiZSBkaWZmZXJlbnQgY29udHJhY3QgaW5zdGFuY2VzIHRoYXQgaGF2ZSB0aGUgc2FtZSBpZGVudGlmaWVyIGJ1dCBkaWZmZXJlbnQgdmVyc2lvbnMuIFRoZSB2ZXJzaW9uIGNhbiBiZSBhcHBlbmRlZCB0byB0aGUgdXJsIGluIGEgcmVmZXJlbmNlIHRvIGFsbG93IGEgcmVmZXJlbmNlIHRvIGEgcGFydGljdWxhciBidXNpbmVzcyB2ZXJzaW9uIG9mIHRoZSBwbGFuIGRlZmluaXRpb24gd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudmVyc2lvblxyXG4gICAqL1xyXG4gIF92ZXJzaW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZWxlbWVudCBpcyBsYWJlbGVkIGFzIGEgbW9kaWZpZXIgYmVjYXVzZSB0aGUgc3RhdHVzIGNvbnRhaW5zIGNvZGVzIHRoYXQgbWFyayB0aGUgY29udHJhY3QgYXMgbm90IGN1cnJlbnRseSB2YWxpZCBvciBhY3RpdmUuXHJcbiAgICovXHJcbiAgc3RhdHVzPzogJ2FtZW5kZWQnfCdhcHBlbmRlZCd8J2NhbmNlbGxlZCd8J2Rpc3B1dGVkJ3wnZW50ZXJlZC1pbi1lcnJvcid8J2V4ZWN1dGFibGUnfCdleGVjdXRlZCd8J25lZ290aWFibGUnfCdvZmZlcmVkJ3wncG9saWN5J3wncmVqZWN0ZWQnfCdyZW5ld2VkJ3wncmVzb2x2ZWQnfCdyZXZva2VkJ3wndGVybWluYXRlZCd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIExlZ2FsIHN0YXRlcyBvZiB0aGUgZm9ybWF0aW9uIG9mIGEgbGVnYWwgaW5zdHJ1bWVudCwgd2hpY2ggaXMgYSBmb3JtYWxseSBleGVjdXRlZCB3cml0dGVuIGRvY3VtZW50IHRoYXQgY2FuIGJlIGZvcm1hbGx5IGF0dHJpYnV0ZWQgdG8gaXRzIGF1dGhvciwgcmVjb3JkcyBhbmQgZm9ybWFsbHkgZXhwcmVzc2VzIGEgbGVnYWxseSBlbmZvcmNlYWJsZSBhY3QsIHByb2Nlc3MsIG9yIGNvbnRyYWN0dWFsIGR1dHksIG9ibGlnYXRpb24sIG9yIHJpZ2h0LCBhbmQgdGhlcmVmb3JlIGV2aWRlbmNlcyB0aGF0IGFjdCwgcHJvY2Vzcywgb3IgYWdyZWVtZW50LlxyXG4gICAqL1xyXG4gIGxlZ2FsU3RhdGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIFVSTCBwb2ludGluZyB0byBhIEZISVItZGVmaW5lZCBDb250cmFjdCBEZWZpbml0aW9uIHRoYXQgaXMgYWRoZXJlZCB0byBpbiB3aG9sZSBvciBwYXJ0IGJ5IHRoaXMgQ29udHJhY3QuXHJcbiAgICovXHJcbiAgaW5zdGFudGlhdGVzQ2Fub25pY2FsPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBVUkwgcG9pbnRpbmcgdG8gYW4gZXh0ZXJuYWxseSBtYWludGFpbmVkIGRlZmluaXRpb24gdGhhdCBpcyBhZGhlcmVkIHRvIGluIHdob2xlIG9yIGluIHBhcnQgYnkgdGhpcyBDb250cmFjdC5cclxuICAgKi9cclxuICBpbnN0YW50aWF0ZXNVcmk/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC5pbnN0YW50aWF0ZXNVcmlcclxuICAgKi9cclxuICBfaW5zdGFudGlhdGVzVXJpPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtaW5pbWFsIGNvbnRlbnQgZGVyaXZlZCBmcm9tIHRoZSBiYXNhbCBpbmZvcm1hdGlvbiBzb3VyY2UgYXQgYSBzcGVjaWZpYyBzdGFnZSBpbiBpdHMgbGlmZWN5Y2xlLlxyXG4gICAqL1xyXG4gIGNvbnRlbnREZXJpdmF0aXZlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gdGhpcyAgQ29udHJhY3Qgd2FzIGlzc3VlZC5cclxuICAgKi9cclxuICBpc3N1ZWQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC5pc3N1ZWRcclxuICAgKi9cclxuICBfaXNzdWVkPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFJlbGV2YW50IHRpbWUgb3IgdGltZS1wZXJpb2Qgd2hlbiB0aGlzIENvbnRyYWN0IGlzIGFwcGxpY2FibGUuXHJcbiAgICovXHJcbiAgYXBwbGllcz86IGZoaXIuUGVyaW9kfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFdmVudCByZXN1bHRpbmcgaW4gZGlzY29udGludWF0aW9uIG9yIHRlcm1pbmF0aW9uIG9mIHRoaXMgQ29udHJhY3QgaW5zdGFuY2UgYnkgb25lIG9yIG1vcmUgcGFydGllcyB0byB0aGUgY29udHJhY3QuXHJcbiAgICovXHJcbiAgZXhwaXJhdGlvblR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIENvbnRyYWN0LnN1YmplY3QgaXMgYW4gZW50aXR5IHRoYXQgaGFzIHNvbWUgcm9sZSB3aXRoIHJlc3BlY3QgdG8gdGhlIENvbnRyYWN0LnRvcGljIGFuZCBDb250cmFjdC50b3BpYy50ZXJtLCB3aGljaCBpcyBvZiBmb2NhbCBpbnRlcmVzdCB0byB0aGUgcGFydGllcyB0byB0aGUgY29udHJhY3QgYW5kIGxpa2VseSBpbXBhY3RlZCBpbiBhIHNpZ25pZmljYW50IHdheSBieSB0aGUgQ29udHJhY3QuYWN0aW9uL0NvbnRyYWN0LmFjdGlvbi5yZWFzb24gYW5kIHRoZSBDb250cmFjdC50ZXJtLmFjdGlvbi9Db250cmFjdC5hY3Rpb24ucmVhc29uLiBcclxuICAgKiBJbiBtYW55IGNhc2VzLCB0aGUgQ29udHJhY3Quc3ViamVjdCBpcyBhIENvbnRyYWN0LnNpZ25lciBpZiB0aGUgc3ViamVjdCBpcyBhbiBhZHVsdDsgaGFzIGEgbGVnYWwgaW50ZXJlc3QgaW4gdGhlIGNvbnRyYWN0OyBhbmQgaW5jb21wZXRlbnQgdG8gcGFydGljaXBhdGUgaW4gdGhlIGNvbnRyYWN0IGFncmVlbWVudC5cclxuICAgKi9cclxuICBzdWJqZWN0PzogZmhpci5SZWZlcmVuY2VbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQSBmb3JtYWxseSBvciBpbmZvcm1hbGx5IHJlY29nbml6ZWQgZ3JvdXBpbmcgb2YgcGVvcGxlLCBwcmluY2lwYWxzLCBvcmdhbml6YXRpb25zLCBvciBqdXJpc2RpY3Rpb25zIGZvcm1lZCBmb3IgdGhlIHB1cnBvc2Ugb2YgYWNoaWV2aW5nIHNvbWUgZm9ybSBvZiBjb2xsZWN0aXZlIGFjdGlvbiBzdWNoIGFzIHRoZSBwcm9tdWxnYXRpb24sIGFkbWluaXN0cmF0aW9uIGFuZCBlbmZvcmNlbWVudCBvZiBjb250cmFjdHMgYW5kIHBvbGljaWVzLlxyXG4gICAqL1xyXG4gIGF1dGhvcml0eT86IGZoaXIuUmVmZXJlbmNlW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFJlY29nbml6ZWQgZ292ZXJuYW5jZSBmcmFtZXdvcmsgb3Igc3lzdGVtIG9wZXJhdGluZyB3aXRoIGEgY2lyY3Vtc2NyaWJlZCBzY29wZSBpbiBhY2NvcmRhbmNlIHdpdGggc3BlY2lmaWVkIHByaW5jaXBsZXMsIHBvbGljaWVzLCBwcm9jZXNzZXMgb3IgcHJvY2VkdXJlcyBmb3IgbWFuYWdpbmcgcmlnaHRzLCBhY3Rpb25zLCBvciBiZWhhdmlvcnMgb2YgcGFydGllcyBvciBwcmluY2lwYWxzIHJlbGF0aXZlIHRvIHJlc291cmNlcy5cclxuICAgKi9cclxuICBkb21haW4/OiBmaGlyLlJlZmVyZW5jZVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBTaXRlcyBpbiB3aGljaCB0aGUgY29udHJhY3QgaXMgY29tcGxpZWQgd2l0aCwgIGV4ZXJjaXNlZCwgb3IgaW4gZm9yY2UuXHJcbiAgICovXHJcbiAgc2l0ZT86IGZoaXIuUmVmZXJlbmNlW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIGlzIG5vdCBleHBlY3RlZCB0byBiZSBnbG9iYWxseSB1bmlxdWUuIFRoZSBuYW1lIHNob3VsZCBiZSBhIHNpbXBsZSBhbHBoYW51bWVyaWMgdHlwZSBuYW1lIHRvIGVuc3VyZSB0aGF0IGl0IGlzIG1hY2hpbmUtcHJvY2Vzc2luZyBmcmllbmRseS5cclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEEgc2hvcnQsIGRlc2NyaXB0aXZlLCB1c2VyLWZyaWVuZGx5IHRpdGxlIGZvciB0aGlzIENvbnRyYWN0IGRlZmluaXRpb24sIGRlcml2YXRpdmUsIG9yIGluc3RhbmNlIGluIGFueSBsZWdhbCBzdGF0ZS50IGdpdmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGl0cyBjb250ZW50LlxyXG4gICAqL1xyXG4gIHRpdGxlPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQ29udHJhY3QudGl0bGVcclxuICAgKi9cclxuICBfdGl0bGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogQW4gZXhwbGFuYXRvcnkgb3IgYWx0ZXJuYXRlIHVzZXItZnJpZW5kbHkgdGl0bGUgZm9yIHRoaXMgQ29udHJhY3QgZGVmaW5pdGlvbiwgZGVyaXZhdGl2ZSwgb3IgaW5zdGFuY2UgaW4gYW55IGxlZ2FsIHN0YXRlLnQgZ2l2aW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgaXRzIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgc3VidGl0bGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBDb250cmFjdC5zdWJ0aXRsZVxyXG4gICAqL1xyXG4gIF9zdWJ0aXRsZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBbHRlcm5hdGl2ZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGl0bGUgZm9yIHRoaXMgQ29udHJhY3QgZGVmaW5pdGlvbiwgZGVyaXZhdGl2ZSwgb3IgaW5zdGFuY2UgaW4gYW55IGxlZ2FsIHN0YXRlLiwgZS5nLiwgYSBkb21haW4gc3BlY2lmaWMgY29udHJhY3QgbnVtYmVyIHJlbGF0ZWQgdG8gbGVnaXNsYXRpb24uXHJcbiAgICovXHJcbiAgYWxpYXM/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IENvbnRyYWN0LmFsaWFzXHJcbiAgICovXHJcbiAgX2FsaWFzPzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbmRpdmlkdWFsIG9yIG9yZ2FuaXphdGlvbiB0aGF0IGF1dGhvcmVkIHRoZSBDb250cmFjdCBkZWZpbml0aW9uLCBkZXJpdmF0aXZlLCBvciBpbnN0YW5jZSBpbiBhbnkgbGVnYWwgc3RhdGUuXHJcbiAgICovXHJcbiAgYXV0aG9yPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgc2VsZWN0b3Igb2YgbGVnYWwgY29uY2VybnMgZm9yIHRoaXMgQ29udHJhY3QgZGVmaW5pdGlvbiwgZGVyaXZhdGl2ZSwgb3IgaW5zdGFuY2UgaW4gYW55IGxlZ2FsIHN0YXRlLlxyXG4gICAqL1xyXG4gIHNjb3BlPzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5hcnJvd3MgdGhlIHJhbmdlIG9mIGxlZ2FsIGNvbmNlcm5zIHRvIGZvY3VzIG9uIHRoZSBhY2hpZXZlbWVudCBvZiBzcGVjaWZpYyBjb250cmFjdHVhbCBvYmplY3RpdmVzLlxyXG4gICAqL1xyXG4gIHRvcGljQ29kZWFibGVDb25jZXB0PzogZmhpci5Db2RlYWJsZUNvbmNlcHR8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIE5hcnJvd3MgdGhlIHJhbmdlIG9mIGxlZ2FsIGNvbmNlcm5zIHRvIGZvY3VzIG9uIHRoZSBhY2hpZXZlbWVudCBvZiBzcGVjaWZpYyBjb250cmFjdHVhbCBvYmplY3RpdmVzLlxyXG4gICAqL1xyXG4gIHRvcGljUmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEEgaGlnaC1sZXZlbCBjYXRlZ29yeSBmb3IgdGhlIGxlZ2FsIGluc3RydW1lbnQsIHdoZXRoZXIgY29uc3RydWN0ZWQgYXMgYSBDb250cmFjdCBkZWZpbml0aW9uLCBkZXJpdmF0aXZlLCBvciBpbnN0YW5jZSBpbiBhbnkgbGVnYWwgc3RhdGUuICBQcm92aWRlcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGl0cyBjb250ZW50IHdpdGhpbiB0aGUgY29udGV4dCBvZiB0aGUgQ29udHJhY3QncyBzY29wZSB0byBkaXN0aW5ndWlzaCB0aGUga2luZHMgb2Ygc3lzdGVtcyB0aGF0IHdvdWxkIGJlIGludGVyZXN0ZWQgaW4gdGhlIGNvbnRyYWN0LlxyXG4gICAqL1xyXG4gIHR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdHx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU3ViLWNhdGVnb3J5IGZvciB0aGUgQ29udHJhY3QgdGhhdCBkaXN0aW5ndWlzaGVzIHRoZSBraW5kcyBvZiBzeXN0ZW1zIHRoYXQgd291bGQgYmUgaW50ZXJlc3RlZCBpbiB0aGUgQ29udHJhY3Qgd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoZSBDb250cmFjdCdzIHNjb3BlLlxyXG4gICAqL1xyXG4gIHN1YlR5cGU/OiBmaGlyLkNvZGVhYmxlQ29uY2VwdFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBQcmVjdXNvcnkgY29udGVudCBkZXZlbG9wZWQgd2l0aCBhIGZvY3VzIGFuZCBpbnRlbnQgb2Ygc3VwcG9ydGluZyB0aGUgZm9ybWF0aW9uIGEgQ29udHJhY3QgaW5zdGFuY2UsIHdoaWNoIG1heSBiZSBhc3NvY2lhdGVkIHdpdGggYW5kIHRyYW5zZm9ybWFibGUgaW50byBhIENvbnRyYWN0LlxyXG4gICAqL1xyXG4gIGNvbnRlbnREZWZpbml0aW9uPzogZmhpci5Db250cmFjdENvbnRlbnREZWZpbml0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBPbmUgb3IgbW9yZSBDb250cmFjdCBQcm92aXNpb25zLCB3aGljaCBtYXkgYmUgcmVsYXRlZCBhbmQgY29udmV5ZWQgYXMgYSBncm91cCwgYW5kIG1heSBjb250YWluIG5lc3RlZCBncm91cHMuXHJcbiAgICovXHJcbiAgdGVybT86IGZoaXIuQ29udHJhY3RUZXJtW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZm9ybWF0aW9uIHRoYXQgbWF5IGJlIG5lZWRlZCBieS9yZWxldmFudCB0byB0aGUgcGVyZm9ybWVyIGluIHRoZWlyIGV4ZWN1dGlvbiBvZiB0aGlzIHRlcm0gYWN0aW9uLlxyXG4gICAqL1xyXG4gIHN1cHBvcnRpbmdJbmZvPzogZmhpci5SZWZlcmVuY2VbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGlua3MgdG8gUHJvdmVuYW5jZSByZWNvcmRzIGZvciBwYXN0IHZlcnNpb25zIG9mIHRoaXMgQ29udHJhY3QgZGVmaW5pdGlvbiwgZGVyaXZhdGl2ZSwgb3IgaW5zdGFuY2UsIHdoaWNoIGlkZW50aWZ5IGtleSBzdGF0ZSB0cmFuc2l0aW9ucyBvciB1cGRhdGVzIHRoYXQgYXJlIGxpa2VseSB0byBiZSByZWxldmFudCB0byBhIHVzZXIgbG9va2luZyBhdCB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBDb250cmFjdC4gIFRoZSBQcm92ZW5jZS5lbnRpdHkgaW5kaWNhdGVzIHRoZSB0YXJnZXQgdGhhdCB3YXMgY2hhbmdlZCBpbiB0aGUgdXBkYXRlLiBodHRwOi8vYnVpbGQuZmhpci5vcmcvcHJvdmVuYW5jZS1kZWZpbml0aW9ucy5odG1sI1Byb3ZlbmFuY2UuZW50aXR5LlxyXG4gICAqL1xyXG4gIHJlbGV2YW50SGlzdG9yeT86IGZoaXIuUmVmZXJlbmNlW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNpZ25lcnMgd2hvIGFyZSBwcmluY2lwYWwgcGFydGllcyB0byB0aGUgY29udHJhY3QgYXJlIGJvdW5kIGJ5IHRoZSBDb250cmFjdC5hY3Rpdml0eSByZWxhdGVkIHRvIHRoZSBDb250cmFjdC50b3BpYywgYW5kIHRoZSBDb250cmFjdC50ZXJtKHMpLCB3aGljaCBlaXRoZXIgZXh0ZW5kIG9yIHJlc3RyaWN0IHRoZSBvdmVyYWxsIGFjdGlvbiBvbiB0aGUgdG9waWMgYnksIGZvciBleGFtcGxlLCBzdGlwdWxhdGluZyBzcGVjaWZpYyBwb2xpY2llcyBvciBvYmxpZ2F0aW9ucyBjb25zdHJhaW5pbmcgYWN0aW9ucywgYWN0aW9uIHJlYXNvbiwgb3IgYWdlbnRzIHdpdGggcmVzcGVjdCB0byBzb21lIG9yIGFsbCBvZiB0aGUgdG9waWMuXHJcbiAgICogRm9yIGV4YW1wbGUsIHNwZWNpZnlpbmcgaG93IHBvbGljaWVzIG9yIG9ibGlnYXRpb25zIHNoYWxsIGNvbnN0cmFpbiBhY3Rpb25zIGFuZCBhY3Rpb24gcmVhc29ucyBwZXJtaXR0ZWQgb3IgZGVuaWVkIG9uIGFsbCBvciBhIHN1YnNldCBvZiB0aGUgQ29udHJhY3QudG9waWMgKGUuZy4sIGFsbCBvciBhIHBvcnRpb24gb2YgcHJvcGVydHkgYmVpbmcgdHJhbnNmZXJyZWQgYnkgdGhlIGNvbnRyYWN0KSwgYWdlbnRzIChlLmcuLCB3aG8gY2FuIHJlc2VsbCwgYXNzaWduIGludGVyZXN0cywgb3IgYWx0ZXIgdGhlIHByb3BlcnR5IGJlaW5nIHRyYW5zZmVycmVkIGJ5IHRoZSBjb250cmFjdCksIGFjdGlvbnMsIGFuZCBhY3Rpb24gcmVhc29uczsgb3Igd2l0aCByZXNwZWN0IHRvIENvbnRyYWN0LnRlcm1zLCBzdGlwdWxhdGluZywgZXh0ZW5kaW5nLCBvciBsaW1pdGluZyB0aGUgQ29udHJhY3QucGVyaW9kIG9mIGFwcGxpY2FiaWxpdHkgb3IgdmFsdWF0aW9uIG9mIGl0ZW1zIHVuZGVyIGNvbnNpZGVyYXRpb24uXHJcbiAgICovXHJcbiAgc2lnbmVyPzogZmhpci5Db250cmFjdFNpZ25lcltdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGUgXCJwYXRpZW50IGZyaWVuZGx5IGxhbmd1YWdlXCIgdmVyc2lvbm9mIHRoZSBDb250cmFjdCBpbiB3aG9sZSBvciBpbiBwYXJ0cy4gXCJQYXRpZW50IGZyaWVuZGx5IGxhbmd1YWdlXCIgbWVhbnMgdGhlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBDb250cmFjdCBhbmQgQ29udHJhY3QgUHJvdmlzaW9ucyBpbiBhIG1hbm5lciB0aGF0IGlzIHJlYWRpbHkgYWNjZXNzaWJsZSBhbmQgdW5kZXJzdGFuZGFibGUgYnkgYSBsYXlwZXJzb24gaW4gYWNjb3JkYW5jZSB3aXRoIGJlc3QgcHJhY3RpY2VzIGZvciBjb21tdW5pY2F0aW9uIHN0eWxlcyB0aGF0IGVuc3VyZSB0aGF0IHRob3NlIGFncmVlaW5nIHRvIG9yIHNpZ25pbmcgdGhlIENvbnRyYWN0IHVuZGVyc3RhbmQgdGhlIHJvbGVzLCBhY3Rpb25zLCBvYmxpZ2F0aW9ucywgcmVzcG9uc2liaWxpdGllcywgYW5kIGltcGxpY2F0aW9uIG9mIHRoZSBhZ3JlZW1lbnQuXHJcbiAgICovXHJcbiAgZnJpZW5kbHk/OiBmaGlyLkNvbnRyYWN0RnJpZW5kbHlbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogTGlzdCBvZiBMZWdhbCBleHByZXNzaW9ucyBvciByZXByZXNlbnRhdGlvbnMgb2YgdGhpcyBDb250cmFjdC5cclxuICAgKi9cclxuICBsZWdhbD86IGZoaXIuQ29udHJhY3RMZWdhbFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBMaXN0IG9mIENvbXB1dGFibGUgUG9saWN5IFJ1bGUgTGFuZ3VhZ2UgUmVwcmVzZW50YXRpb25zIG9mIHRoaXMgQ29udHJhY3QuXHJcbiAgICovXHJcbiAgcnVsZT86IGZoaXIuQ29udHJhY3RSdWxlW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIExlZ2FsbHkgYmluZGluZyBDb250cmFjdDogVGhpcyBpcyB0aGUgc2lnbmVkIGFuZCBsZWdhbGx5IHJlY29nbml6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIENvbnRyYWN0LCB3aGljaCBpcyBjb25zaWRlcmVkIHRoZSBcInNvdXJjZSBvZiB0cnV0aFwiIGFuZCB3aGljaCB3b3VsZCBiZSB0aGUgYmFzaXMgZm9yIGxlZ2FsIGFjdGlvbiByZWxhdGVkIHRvIGVuZm9yY2VtZW50IG9mIHRoaXMgQ29udHJhY3QuXHJcbiAgICovXHJcbiAgbGVnYWxseUJpbmRpbmdBdHRhY2htZW50PzogZmhpci5BdHRhY2htZW50fHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBMZWdhbGx5IGJpbmRpbmcgQ29udHJhY3Q6IFRoaXMgaXMgdGhlIHNpZ25lZCBhbmQgbGVnYWxseSByZWNvZ25pemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBDb250cmFjdCwgd2hpY2ggaXMgY29uc2lkZXJlZCB0aGUgXCJzb3VyY2Ugb2YgdHJ1dGhcIiBhbmQgd2hpY2ggd291bGQgYmUgdGhlIGJhc2lzIGZvciBsZWdhbCBhY3Rpb24gcmVsYXRlZCB0byBlbmZvcmNlbWVudCBvZiB0aGlzIENvbnRyYWN0LlxyXG4gICAqL1xyXG4gIGxlZ2FsbHlCaW5kaW5nUmVmZXJlbmNlPzogZmhpci5SZWZlcmVuY2V8dW5kZWZpbmVkO1xyXG59XHJcbiJdfQ==