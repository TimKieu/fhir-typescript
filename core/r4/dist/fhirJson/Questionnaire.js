// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Questionnaire
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Questionnaire.js","sourceRoot":"./src/","sources":["fhirJson/Questionnaire.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,+BAA+B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Questionnaire\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat \"enableWhen\"s as being joined by an \"or\" clause.  This element is a modifier because if enableWhen is present for an item, \"required\" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.\r\n */\r\nexport interface QuestionnaireItemEnableWhen extends fhir.BackboneElement { \r\n  /**\r\n   * If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the \"ancestor\" axis and then the \"preceding\" axis and then the \"following\" axis.\r\n   */\r\n  question: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.question\r\n   */\r\n  _question?:fhir.FhirElement;\r\n  /**\r\n   * Specifies the criteria by which the question is enabled.\r\n   */\r\n  operator: '!='|'<'|'<='|'='|'>'|'>='|'exists'|null;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.operator\r\n   */\r\n  _operator?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.answer[x]\r\n   */\r\n  _answerBoolean?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.answer[x]\r\n   */\r\n  _answerDecimal?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.answer[x]\r\n   */\r\n  _answerInteger?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.answer[x]\r\n   */\r\n  _answerDate?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.answer[x]\r\n   */\r\n  _answerDateTime?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.answer[x]\r\n   */\r\n  _answerTime?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableWhen.answer[x]\r\n   */\r\n  _answerString?:fhir.FhirElement;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.\r\n   */\r\n  answerReference?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.\r\n */\r\nexport interface QuestionnaireItemAnswerOption extends fhir.BackboneElement { \r\n  /**\r\n   * The data type of the value must agree with the item.type.\r\n   */\r\n  valueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.answerOption.value[x]\r\n   */\r\n  _valueInteger?:fhir.FhirElement;\r\n  /**\r\n   * The data type of the value must agree with the item.type.\r\n   */\r\n  valueDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.answerOption.value[x]\r\n   */\r\n  _valueDate?:fhir.FhirElement;\r\n  /**\r\n   * The data type of the value must agree with the item.type.\r\n   */\r\n  valueTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.answerOption.value[x]\r\n   */\r\n  _valueTime?:fhir.FhirElement;\r\n  /**\r\n   * The data type of the value must agree with the item.type.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.answerOption.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * The data type of the value must agree with the item.type.\r\n   */\r\n  valueCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * The data type of the value must agree with the item.type.\r\n   */\r\n  valueReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Use this instead of initial[v] if answerValueSet is present.\r\n   */\r\n  initialSelected?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.answerOption.initialSelected\r\n   */\r\n  _initialSelected?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.\r\n */\r\nexport interface QuestionnaireItemInitial extends fhir.BackboneElement { \r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueInteger?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueDate?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueDateTime?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueTime?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.initial.value[x]\r\n   */\r\n  _valueUri?:fhir.FhirElement;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * The type of the initial value must be consistent with the type of the item.\r\n   */\r\n  valueReference?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.\r\n */\r\nexport interface QuestionnaireItem extends fhir.BackboneElement { \r\n  /**\r\n   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.\r\n   */\r\n  linkId: string|null;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.linkId\r\n   */\r\n  _linkId?:fhir.FhirElement;\r\n  /**\r\n   * The uri refers to an ElementDefinition in a [StructureDefinition](structuredefinition.html#) and always starts with the [canonical URL](references.html#canonical) for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](element-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition.\r\n   */\r\n  definition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * The value may come from the ElementDefinition referred to by .definition.\r\n   */\r\n  code?: fhir.Coding[]|undefined;\r\n  /**\r\n   * These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.  Typically, these won't be used for \"display\" items, though such use is not prohibited.  Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.\r\n   */\r\n  prefix?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.prefix\r\n   */\r\n  _prefix?:fhir.FhirElement;\r\n  /**\r\n   * When using this element to represent the name of a section, use group type item and also make sure to limit the text element to a short string suitable for display as a section heading.  Group item instructions should be included as a display type item within the group.\r\n   */\r\n  text?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.text\r\n   */\r\n  _text?:fhir.FhirElement;\r\n  /**\r\n   * Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.\r\n   */\r\n  type: 'attachment'|'boolean'|'choice'|'date'|'dateTime'|'decimal'|'display'|'group'|'integer'|'open-choice'|'quantity'|'question'|'reference'|'string'|'text'|'time'|'url'|null;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat \"enableWhen\"s as being joined by an \"or\" clause.  This element is a modifier because if enableWhen is present for an item, \"required\" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.\r\n   */\r\n  enableWhen?: fhir.QuestionnaireItemEnableWhen[]|undefined;\r\n  /**\r\n   * This element must be specified if more than one enableWhen value is provided.\r\n   */\r\n  enableBehavior?: 'all'|'any'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.enableBehavior\r\n   */\r\n  _enableBehavior?:fhir.FhirElement;\r\n  /**\r\n   * Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  If an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one child element). The value may come from the ElementDefinition referred to by .definition.\r\n   */\r\n  required?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.required\r\n   */\r\n  _required?:fhir.FhirElement;\r\n  /**\r\n   * If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition (i.e. \"repeat the question\") or to simply allow entry/selection of multiple answers for the question (repeat the answers).  Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.\r\n   * The resulting QuestionnaireResponse will be populated the same way regardless of rendering - one 'question' item with multiple answer values.\r\n   *  The value may come from the ElementDefinition referred to by .definition.\r\n   */\r\n  repeats?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.repeats\r\n   */\r\n  _repeats?:fhir.FhirElement;\r\n  /**\r\n   * The value of readOnly elements can be established by asserting  extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.\r\n   */\r\n  readOnly?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.readOnly\r\n   */\r\n  _readOnly?:fhir.FhirElement;\r\n  /**\r\n   * For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.\r\n   */\r\n  maxLength?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.maxLength\r\n   */\r\n  _maxLength?:fhir.FhirElement;\r\n  /**\r\n   * LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](loinc.html#alist). The value may come from the ElementDefinition referred to by .definition.\r\n   */\r\n  answerValueSet?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.item.answerValueSet\r\n   */\r\n  _answerValueSet?:fhir.FhirElement;\r\n  /**\r\n   * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.\r\n   */\r\n  answerOption?: fhir.QuestionnaireItemAnswerOption[]|undefined;\r\n  /**\r\n   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.\r\n   */\r\n  initial?: fhir.QuestionnaireItemInitial[]|undefined;\r\n  /**\r\n   * There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.\r\n   */\r\n  item?: fhir.QuestionnaireItem[]|undefined;\r\n}\r\n\r\n/**\r\n * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.\r\n */\r\nexport interface Questionnaire extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Questionnaire\";\r\n  /**\r\n   * The name of the referenced questionnaire can be conveyed using the http://hl7.org/fhir/StructureDefinition/display extension.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: fhir.Identifier[]|undefined;\r\n  /**\r\n   * There may be different questionnaire instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the questionnaire with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * The URL of a Questionnaire that this Questionnaire is based on.\r\n   */\r\n  derivedFrom?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.derivedFrom\r\n   */\r\n  _derivedFrom?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Allows filtering of questionnaires that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of questionnaires that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * If none are specified, then the subject is unlimited.\r\n   */\r\n  subjectType?: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EffectEvidenceSynthesis'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription')[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.subjectType\r\n   */\r\n  _subjectType?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the questionnaire was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the questionnaire is presumed to be the predominant language in the place the questionnaire was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: fhir.UsageContext[]|undefined;\r\n  /**\r\n   * It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the questionnaire. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.\r\n   */\r\n  approvalDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.approvalDate\r\n   */\r\n  _approvalDate?:fhir.FhirElement;\r\n  /**\r\n   * If specified, this date follows the original approval date.\r\n   */\r\n  lastReviewDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Questionnaire.lastReviewDate\r\n   */\r\n  _lastReviewDate?:fhir.FhirElement;\r\n  /**\r\n   * The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.\r\n   */\r\n  effectivePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * An identifier for this question or group of questions in a particular terminology such as LOINC.\r\n   */\r\n  code?: fhir.Coding[]|undefined;\r\n  /**\r\n   * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.\r\n   */\r\n  item?: fhir.QuestionnaireItem[]|undefined;\r\n}\r\n"]}