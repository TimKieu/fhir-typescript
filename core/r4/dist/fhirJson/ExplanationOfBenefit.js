// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExplanationOfBenefit
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ExplanationOfBenefit.js","sourceRoot":"./src/","sources":["fhirJson/ExplanationOfBenefit.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,sCAAsC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ExplanationOfBenefit\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * For example,  for the original treatment and follow-up exams.\r\n */\r\nexport interface ExplanationOfBenefitRelated extends fhir.BackboneElement { \r\n  /**\r\n   * Reference to a related claim.\r\n   */\r\n  claim?: fhir.Reference|undefined;\r\n  /**\r\n   * For example, prior claim or umbrella.\r\n   */\r\n  relationship?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example, Property/Casualty insurer claim number or Workers Compensation case number.\r\n   */\r\n  reference?: fhir.Identifier|undefined;\r\n}\r\n\r\n/**\r\n * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.\r\n */\r\nexport interface ExplanationOfBenefitPayee extends fhir.BackboneElement { \r\n  /**\r\n   * Type of Party to be reimbursed: Subscriber, provider, other.\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Not required if the payee is 'subscriber' or 'provider'.\r\n   */\r\n  party?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * The members of the team who provided the products and services.\r\n */\r\nexport interface ExplanationOfBenefitCareTeam extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify care team entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * Member of the team who provided the product or service.\r\n   */\r\n  provider: fhir.Reference|null;\r\n  /**\r\n   * Responsible might not be required when there is only a single provider listed.\r\n   */\r\n  responsible?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.careTeam.responsible\r\n   */\r\n  _responsible?:fhir.FhirElement;\r\n  /**\r\n   * Role might not be required when there is only a single provider listed.\r\n   */\r\n  role?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The qualification of the practitioner which is applicable for this service.\r\n   */\r\n  qualification?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Often there are multiple jurisdiction specific valuesets which are required.\r\n */\r\nexport interface ExplanationOfBenefitSupportingInfo extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify supporting information entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * This may contain a category for the local bill type codes.\r\n   */\r\n  category: fhir.CodeableConcept|null;\r\n  /**\r\n   * This may contain the local bill type codes such as the US UB-04 bill type code.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The date when or period to which this information refers.\r\n   */\r\n  timingDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.timing[x]\r\n   */\r\n  _timingDate?:fhir.FhirElement;\r\n  /**\r\n   * The date when or period to which this information refers.\r\n   */\r\n  timingPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.supportingInfo.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueAttachment?: fhir.Attachment|undefined;\r\n  /**\r\n   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.\r\n   */\r\n  valueReference?: fhir.Reference|undefined;\r\n  /**\r\n   * For example: the reason for the additional stay, or why a tooth is  missing.\r\n   */\r\n  reason?: fhir.Coding|undefined;\r\n}\r\n\r\n/**\r\n * Information about diagnoses relevant to the claim items.\r\n */\r\nexport interface ExplanationOfBenefitDiagnosis extends fhir.BackboneElement { \r\n  /**\r\n   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.diagnosis.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.\r\n   */\r\n  diagnosisCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.\r\n   */\r\n  diagnosisReference?: fhir.Reference|undefined;\r\n  /**\r\n   * For example: admitting, primary, secondary, discharge.\r\n   */\r\n  type?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * Indication of whether the diagnosis was present on admission to a facility.\r\n   */\r\n  onAdmission?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.\r\n   */\r\n  packageCode?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Procedures performed on the patient relevant to the billing items with the claim.\r\n */\r\nexport interface ExplanationOfBenefitProcedure extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify procedure entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.procedure.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * When the condition was observed or the relative ranking.\r\n   */\r\n  type?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * Date and optionally time the procedure was performed.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.procedure.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * The code or reference to a Procedure resource which identifies the clinical intervention performed.\r\n   */\r\n  procedureCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The code or reference to a Procedure resource which identifies the clinical intervention performed.\r\n   */\r\n  procedureReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n}\r\n\r\n/**\r\n * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.\r\n */\r\nexport interface ExplanationOfBenefitInsurance extends fhir.BackboneElement { \r\n  /**\r\n   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.\r\n   */\r\n  focal: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.insurance.focal\r\n   */\r\n  _focal?:fhir.FhirElement;\r\n  /**\r\n   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.\r\n   */\r\n  coverage: fhir.Reference|null;\r\n  /**\r\n   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.\r\n   */\r\n  preAuthRef?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.insurance.preAuthRef\r\n   */\r\n  _preAuthRef?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * Details of a accident which resulted in injuries which required the products and services listed in the claim.\r\n */\r\nexport interface ExplanationOfBenefitAccident extends fhir.BackboneElement { \r\n  /**\r\n   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.accident.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The physical location of the accident event.\r\n   */\r\n  locationAddress?: fhir.Address|undefined;\r\n  /**\r\n   * The physical location of the accident event.\r\n   */\r\n  locationReference?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.\r\n */\r\nexport interface ExplanationOfBenefitItemAdjudication extends fhir.BackboneElement { \r\n  /**\r\n   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.\r\n   */\r\n  category: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example, may indicate that the funds for this benefit type have been exhausted.\r\n   */\r\n  reason?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example, amount submitted, eligible amount, co-payment, and benefit payable.\r\n   */\r\n  amount?: fhir.Money|undefined;\r\n  /**\r\n   * For example: eligible percentage or co-payment percentage.\r\n   */\r\n  value?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.adjudication.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Third-tier of goods and services.\r\n */\r\nexport interface ExplanationOfBenefitItemDetailSubDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of revenue or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * For example: Neonatal program, child dental program or drug users recovery program.\r\n   */\r\n  programCode?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n  /**\r\n   * The numbers associated with notes below which apply to the adjudication of this item.\r\n   */\r\n  noteNumber?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.subDetail.noteNumber\r\n   */\r\n  _noteNumber?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The adjudication results.\r\n   */\r\n  adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;\r\n}\r\n\r\n/**\r\n * Second-tier of goods and services.\r\n */\r\nexport interface ExplanationOfBenefitItemDetail extends fhir.BackboneElement { \r\n  /**\r\n   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * The type of revenue or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * For example: Neonatal program, child dental program or drug users recovery program.\r\n   */\r\n  programCode?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n  /**\r\n   * The numbers associated with notes below which apply to the adjudication of this item.\r\n   */\r\n  noteNumber?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.detail.noteNumber\r\n   */\r\n  _noteNumber?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The adjudication results.\r\n   */\r\n  adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;\r\n  /**\r\n   * Third-tier of goods and services.\r\n   */\r\n  subDetail?: fhir.ExplanationOfBenefitItemDetailSubDetail[]|undefined;\r\n}\r\n\r\n/**\r\n * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.\r\n */\r\nexport interface ExplanationOfBenefitItem extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify item entries.\r\n   */\r\n  sequence: number|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.sequence\r\n   */\r\n  _sequence?:fhir.FhirElement;\r\n  /**\r\n   * Care team members related to this service or product.\r\n   */\r\n  careTeamSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.careTeamSequence\r\n   */\r\n  _careTeamSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Diagnoses applicable for this service or product.\r\n   */\r\n  diagnosisSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.diagnosisSequence\r\n   */\r\n  _diagnosisSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Procedures applicable for this service or product.\r\n   */\r\n  procedureSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.procedureSequence\r\n   */\r\n  _procedureSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Exceptions, special conditions and supporting information applicable for this service or product.\r\n   */\r\n  informationSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.informationSequence\r\n   */\r\n  _informationSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The type of revenue or cost center providing the product and/or service.\r\n   */\r\n  revenue?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * For example: Neonatal program, child dental program or drug users recovery program.\r\n   */\r\n  programCode?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The date or dates when the service or product was supplied, performed or completed.\r\n   */\r\n  servicedDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.serviced[x]\r\n   */\r\n  _servicedDate?:fhir.FhirElement;\r\n  /**\r\n   * The date or dates when the service or product was supplied, performed or completed.\r\n   */\r\n  servicedPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationAddress?: fhir.Address|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationReference?: fhir.Reference|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * Unique Device Identifiers associated with this line item.\r\n   */\r\n  udi?: fhir.Reference[]|undefined;\r\n  /**\r\n   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.\r\n   */\r\n  bodySite?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).\r\n   */\r\n  subSite?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * A billed item may include goods or services provided in multiple encounters.\r\n   */\r\n  encounter?: fhir.Reference[]|undefined;\r\n  /**\r\n   * The numbers associated with notes below which apply to the adjudication of this item.\r\n   */\r\n  noteNumber?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.item.noteNumber\r\n   */\r\n  _noteNumber?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.\r\n   */\r\n  adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;\r\n  /**\r\n   * Second-tier of goods and services.\r\n   */\r\n  detail?: fhir.ExplanationOfBenefitItemDetail[]|undefined;\r\n}\r\n\r\n/**\r\n * The third-tier service adjudications for payor added services.\r\n */\r\nexport interface ExplanationOfBenefitAddItemDetailSubDetail extends fhir.BackboneElement { \r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * The numbers associated with notes below which apply to the adjudication of this item.\r\n   */\r\n  noteNumber?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.subDetail.noteNumber\r\n   */\r\n  _noteNumber?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The adjudication results.\r\n   */\r\n  adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;\r\n}\r\n\r\n/**\r\n * The second-tier service adjudications for payor added services.\r\n */\r\nexport interface ExplanationOfBenefitAddItemDetail extends fhir.BackboneElement { \r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * The numbers associated with notes below which apply to the adjudication of this item.\r\n   */\r\n  noteNumber?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detail.noteNumber\r\n   */\r\n  _noteNumber?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The adjudication results.\r\n   */\r\n  adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;\r\n  /**\r\n   * The third-tier service adjudications for payor added services.\r\n   */\r\n  subDetail?: fhir.ExplanationOfBenefitAddItemDetailSubDetail[]|undefined;\r\n}\r\n\r\n/**\r\n * The first-tier service adjudications for payor added product or service lines.\r\n */\r\nexport interface ExplanationOfBenefitAddItem extends fhir.BackboneElement { \r\n  /**\r\n   * Claim items which this service line is intended to replace.\r\n   */\r\n  itemSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.itemSequence\r\n   */\r\n  _itemSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The sequence number of the details within the claim item which this line is intended to replace.\r\n   */\r\n  detailSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.detailSequence\r\n   */\r\n  _detailSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.\r\n   */\r\n  subDetailSequence?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.subDetailSequence\r\n   */\r\n  _subDetailSequence?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The providers who are authorized for the services rendered to the patient.\r\n   */\r\n  provider?: fhir.Reference[]|undefined;\r\n  /**\r\n   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.\r\n   */\r\n  productOrService: fhir.CodeableConcept|null;\r\n  /**\r\n   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.\r\n   */\r\n  modifier?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * For example: Neonatal program, child dental program or drug users recovery program.\r\n   */\r\n  programCode?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The date or dates when the service or product was supplied, performed or completed.\r\n   */\r\n  servicedDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.serviced[x]\r\n   */\r\n  _servicedDate?:fhir.FhirElement;\r\n  /**\r\n   * The date or dates when the service or product was supplied, performed or completed.\r\n   */\r\n  servicedPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationAddress?: fhir.Address|undefined;\r\n  /**\r\n   * Where the product or service was provided.\r\n   */\r\n  locationReference?: fhir.Reference|undefined;\r\n  /**\r\n   * The number of repetitions of a service or product.\r\n   */\r\n  quantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.\r\n   */\r\n  unitPrice?: fhir.Money|undefined;\r\n  /**\r\n   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).\r\n   */\r\n  factor?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.factor\r\n   */\r\n  _factor?:fhir.FhirElement;\r\n  /**\r\n   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.\r\n   */\r\n  net?: fhir.Money|undefined;\r\n  /**\r\n   * For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.\r\n   */\r\n  bodySite?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).\r\n   */\r\n  subSite?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * The numbers associated with notes below which apply to the adjudication of this item.\r\n   */\r\n  noteNumber?: number[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.addItem.noteNumber\r\n   */\r\n  _noteNumber?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The adjudication results.\r\n   */\r\n  adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;\r\n  /**\r\n   * The second-tier service adjudications for payor added services.\r\n   */\r\n  detail?: fhir.ExplanationOfBenefitAddItemDetail[]|undefined;\r\n}\r\n\r\n/**\r\n * Totals for amounts submitted, co-pays, benefits payable etc.\r\n */\r\nexport interface ExplanationOfBenefitTotal extends fhir.BackboneElement { \r\n  /**\r\n   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.\r\n   */\r\n  category: fhir.CodeableConcept|null;\r\n  /**\r\n   * Monetary total amount associated with the category.\r\n   */\r\n  amount: fhir.Money|null;\r\n}\r\n\r\n/**\r\n * Payment details for the adjudication of the claim.\r\n */\r\nexport interface ExplanationOfBenefitPayment extends fhir.BackboneElement { \r\n  /**\r\n   * Whether this represents partial or complete payment of the benefits payable.\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.\r\n   */\r\n  adjustment?: fhir.Money|undefined;\r\n  /**\r\n   * Reason for the payment adjustment.\r\n   */\r\n  adjustmentReason?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Estimated date the payment will be issued or the actual issue date of payment.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.payment.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Benefits payable less any payment adjustment.\r\n   */\r\n  amount?: fhir.Money|undefined;\r\n  /**\r\n   * For example: EFT number or check number.\r\n   */\r\n  identifier?: fhir.Identifier|undefined;\r\n}\r\n\r\n/**\r\n * A note that describes or explains adjudication results in a human readable form.\r\n */\r\nexport interface ExplanationOfBenefitProcessNote extends fhir.BackboneElement { \r\n  /**\r\n   * A number to uniquely identify a note entry.\r\n   */\r\n  number?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.processNote.number\r\n   */\r\n  _number?:fhir.FhirElement;\r\n  /**\r\n   * The business purpose of the note text.\r\n   */\r\n  type?: 'display'|'print'|'printoper'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.processNote.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * The explanation or description associated with the processing.\r\n   */\r\n  text?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.processNote.text\r\n   */\r\n  _text?:fhir.FhirElement;\r\n  /**\r\n   * Only required if the language is different from the resource language.\r\n   */\r\n  language?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Benefits Used to date.\r\n */\r\nexport interface ExplanationOfBenefitBenefitBalanceFinancial extends fhir.BackboneElement { \r\n  /**\r\n   * For example: deductible, visits, benefit amount.\r\n   */\r\n  type: fhir.CodeableConcept|null;\r\n  /**\r\n   * The quantity of the benefit which is permitted under the coverage.\r\n   */\r\n  allowedUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.allowed[x]\r\n   */\r\n  _allowedUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * The quantity of the benefit which is permitted under the coverage.\r\n   */\r\n  allowedString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.allowed[x]\r\n   */\r\n  _allowedString?:fhir.FhirElement;\r\n  /**\r\n   * The quantity of the benefit which is permitted under the coverage.\r\n   */\r\n  allowedMoney?: fhir.Money|undefined;\r\n  /**\r\n   * The quantity of the benefit which have been consumed to date.\r\n   */\r\n  usedUnsignedInt?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.financial.used[x]\r\n   */\r\n  _usedUnsignedInt?:fhir.FhirElement;\r\n  /**\r\n   * The quantity of the benefit which have been consumed to date.\r\n   */\r\n  usedMoney?: fhir.Money|undefined;\r\n}\r\n\r\n/**\r\n * Balance by Benefit Category.\r\n */\r\nexport interface ExplanationOfBenefitBenefitBalance extends fhir.BackboneElement { \r\n  /**\r\n   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.\r\n   */\r\n  category: fhir.CodeableConcept|null;\r\n  /**\r\n   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.\r\n   */\r\n  excluded?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.excluded\r\n   */\r\n  _excluded?:fhir.FhirElement;\r\n  /**\r\n   * For example: MED01, or DENT2.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.benefitBalance.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.\r\n   */\r\n  network?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Indicates if the benefits apply to an individual or to the family.\r\n   */\r\n  unit?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.\r\n   */\r\n  term?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Benefits Used to date.\r\n   */\r\n  financial?: fhir.ExplanationOfBenefitBenefitBalanceFinancial[]|undefined;\r\n}\r\n\r\n/**\r\n * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.\r\n */\r\nexport interface ExplanationOfBenefit extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ExplanationOfBenefit\";\r\n  /**\r\n   * A unique identifier assigned to this explanation of benefit.\r\n   */\r\n  identifier?: fhir.Identifier[]|undefined;\r\n  /**\r\n   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.\r\n   */\r\n  status: 'active'|'cancelled'|'draft'|'entered-in-error'|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.\r\n   */\r\n  type: fhir.CodeableConcept|null;\r\n  /**\r\n   * This may contain the local bill type codes such as the US UB-04 bill type code.\r\n   */\r\n  subType?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.\r\n   */\r\n  use: 'claim'|'preauthorization'|'predetermination'|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.use\r\n   */\r\n  _use?:fhir.FhirElement;\r\n  /**\r\n   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.\r\n   */\r\n  patient: fhir.Reference|null;\r\n  /**\r\n   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.\r\n   */\r\n  billablePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.\r\n   */\r\n  created: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.created\r\n   */\r\n  _created?:fhir.FhirElement;\r\n  /**\r\n   * Individual who created the claim, predetermination or preauthorization.\r\n   */\r\n  enterer?: fhir.Reference|undefined;\r\n  /**\r\n   * The party responsible for authorization, adjudication and reimbursement.\r\n   */\r\n  insurer: fhir.Reference|null;\r\n  /**\r\n   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.\r\n   */\r\n  provider: fhir.Reference|null;\r\n  /**\r\n   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.\r\n   */\r\n  priority?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * This field is only used for preauthorizations.\r\n   */\r\n  fundsReserveRequested?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.\r\n   */\r\n  fundsReserve?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * For example,  for the original treatment and follow-up exams.\r\n   */\r\n  related?: fhir.ExplanationOfBenefitRelated[]|undefined;\r\n  /**\r\n   * Prescription to support the dispensing of pharmacy, device or vision products.\r\n   */\r\n  prescription?: fhir.Reference|undefined;\r\n  /**\r\n   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.\r\n   */\r\n  originalPrescription?: fhir.Reference|undefined;\r\n  /**\r\n   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.\r\n   */\r\n  payee?: fhir.ExplanationOfBenefitPayee|undefined;\r\n  /**\r\n   * The referral resource which lists the date, practitioner, reason and other supporting information.\r\n   */\r\n  referral?: fhir.Reference|undefined;\r\n  /**\r\n   * Facility where the services were provided.\r\n   */\r\n  facility?: fhir.Reference|undefined;\r\n  /**\r\n   * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.\r\n   */\r\n  claim?: fhir.Reference|undefined;\r\n  /**\r\n   * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.\r\n   */\r\n  claimResponse?: fhir.Reference|undefined;\r\n  /**\r\n   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).\r\n   */\r\n  outcome: 'complete'|'error'|'partial'|'queued'|null;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.outcome\r\n   */\r\n  _outcome?:fhir.FhirElement;\r\n  /**\r\n   * A human readable description of the status of the adjudication.\r\n   */\r\n  disposition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.disposition\r\n   */\r\n  _disposition?:fhir.FhirElement;\r\n  /**\r\n   * This value is only present on preauthorization adjudications.\r\n   */\r\n  preAuthRef?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.preAuthRef\r\n   */\r\n  _preAuthRef?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * This value is only present on preauthorization adjudications.\r\n   */\r\n  preAuthRefPeriod?: fhir.Period[]|undefined;\r\n  /**\r\n   * The members of the team who provided the products and services.\r\n   */\r\n  careTeam?: fhir.ExplanationOfBenefitCareTeam[]|undefined;\r\n  /**\r\n   * Often there are multiple jurisdiction specific valuesets which are required.\r\n   */\r\n  supportingInfo?: fhir.ExplanationOfBenefitSupportingInfo[]|undefined;\r\n  /**\r\n   * Information about diagnoses relevant to the claim items.\r\n   */\r\n  diagnosis?: fhir.ExplanationOfBenefitDiagnosis[]|undefined;\r\n  /**\r\n   * Procedures performed on the patient relevant to the billing items with the claim.\r\n   */\r\n  procedure?: fhir.ExplanationOfBenefitProcedure[]|undefined;\r\n  /**\r\n   * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.\r\n   */\r\n  precedence?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ExplanationOfBenefit.precedence\r\n   */\r\n  _precedence?:fhir.FhirElement;\r\n  /**\r\n   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.\r\n   */\r\n  insurance: fhir.ExplanationOfBenefitInsurance[]|null;\r\n  /**\r\n   * Details of a accident which resulted in injuries which required the products and services listed in the claim.\r\n   */\r\n  accident?: fhir.ExplanationOfBenefitAccident|undefined;\r\n  /**\r\n   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.\r\n   */\r\n  item?: fhir.ExplanationOfBenefitItem[]|undefined;\r\n  /**\r\n   * The first-tier service adjudications for payor added product or service lines.\r\n   */\r\n  addItem?: fhir.ExplanationOfBenefitAddItem[]|undefined;\r\n  /**\r\n   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.\r\n   */\r\n  adjudication?: fhir.ExplanationOfBenefitItemAdjudication[]|undefined;\r\n  /**\r\n   * Totals for amounts submitted, co-pays, benefits payable etc.\r\n   */\r\n  total?: fhir.ExplanationOfBenefitTotal[]|undefined;\r\n  /**\r\n   * Payment details for the adjudication of the claim.\r\n   */\r\n  payment?: fhir.ExplanationOfBenefitPayment|undefined;\r\n  /**\r\n   * May be needed to identify specific jurisdictional forms.\r\n   */\r\n  formCode?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Needed to permit insurers to include the actual form.\r\n   */\r\n  form?: fhir.Attachment|undefined;\r\n  /**\r\n   * A note that describes or explains adjudication results in a human readable form.\r\n   */\r\n  processNote?: fhir.ExplanationOfBenefitProcessNote[]|undefined;\r\n  /**\r\n   * Not applicable when use=claim.\r\n   */\r\n  benefitPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Balance by Benefit Category.\r\n   */\r\n  benefitBalance?: fhir.ExplanationOfBenefitBenefitBalance[]|undefined;\r\n}\r\n"]}