// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: PlanDefinition
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"PlanDefinition.js","sourceRoot":"./src/","sources":["fhirJson/PlanDefinition.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,gCAAgC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: PlanDefinition\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Indicates what should be done and within what timeframe.\r\n */\r\nexport interface PlanDefinitionGoalTarget extends fhir.BackboneElement { \r\n  /**\r\n   * The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.\r\n   */\r\n  measure?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.\r\n   */\r\n  detailQuantity?: fhir.Quantity|undefined;\r\n  /**\r\n   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.\r\n   */\r\n  detailRange?: fhir.Range|undefined;\r\n  /**\r\n   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.\r\n   */\r\n  detailCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Indicates the timeframe after the start of the goal in which the goal should be met.\r\n   */\r\n  due?: fhir.Duration|undefined;\r\n}\r\n\r\n/**\r\n * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.\r\n */\r\nexport interface PlanDefinitionGoal extends fhir.BackboneElement { \r\n  /**\r\n   * Indicates a category the goal falls within.\r\n   */\r\n  category?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If no code is available, use CodeableConcept.text.\r\n   */\r\n  description: fhir.CodeableConcept|null;\r\n  /**\r\n   * Identifies the expected level of importance associated with reaching/sustaining the defined goal.\r\n   */\r\n  priority?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The event after which the goal should begin being pursued.\r\n   */\r\n  start?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Identifies problems, conditions, issues, or concerns the goal is intended to address.\r\n   */\r\n  addresses?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.\r\n   */\r\n  documentation?: fhir.RelatedArtifact[]|undefined;\r\n  /**\r\n   * Indicates what should be done and within what timeframe.\r\n   */\r\n  target?: fhir.PlanDefinitionGoalTarget[]|undefined;\r\n}\r\n\r\n/**\r\n * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.\r\n */\r\nexport interface PlanDefinitionActionCondition extends fhir.BackboneElement { \r\n  /**\r\n   * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.\r\n   */\r\n  kind: 'applicability'|'start'|'stop'|null;\r\n  /**\r\n   * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.\r\n   */\r\n  expression?: fhir.Expression|undefined;\r\n}\r\n\r\n/**\r\n * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.\r\n */\r\nexport interface PlanDefinitionActionRelatedAction extends fhir.BackboneElement { \r\n  /**\r\n   * The element id of the related action.\r\n   */\r\n  actionId: string|null;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.relatedAction.actionId\r\n   */\r\n  _actionId?:fhir.FhirElement;\r\n  /**\r\n   * The relationship of this action to the related action.\r\n   */\r\n  relationship: 'after'|'after-end'|'after-start'|'before'|'before-end'|'before-start'|'concurrent'|'concurrent-with-end'|'concurrent-with-start'|null;\r\n  /**\r\n   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.\r\n   */\r\n  offsetDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.\r\n   */\r\n  offsetRange?: fhir.Range|undefined;\r\n}\r\n\r\n/**\r\n * Indicates who should participate in performing the action described.\r\n */\r\nexport interface PlanDefinitionActionParticipant extends fhir.BackboneElement { \r\n  /**\r\n   * The type of participant in the action.\r\n   */\r\n  type: 'device'|'patient'|'practitioner'|'related-person'|null;\r\n  /**\r\n   * The role the participant should play in performing the described action.\r\n   */\r\n  role?: fhir.CodeableConcept|undefined;\r\n}\r\n\r\n/**\r\n * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.\r\n */\r\nexport interface PlanDefinitionActionDynamicValue extends fhir.BackboneElement { \r\n  /**\r\n   * To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.\r\n   */\r\n  path?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.dynamicValue.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.\r\n   */\r\n  expression?: fhir.Expression|undefined;\r\n}\r\n\r\n/**\r\n * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.\r\n */\r\nexport interface PlanDefinitionAction extends fhir.BackboneElement { \r\n  /**\r\n   * A user-visible prefix for the action.\r\n   */\r\n  prefix?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.prefix\r\n   */\r\n  _prefix?:fhir.FhirElement;\r\n  /**\r\n   * The title of the action displayed to a user.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * A brief description of the action used to provide a summary to display to the user.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.\r\n   */\r\n  textEquivalent?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.textEquivalent\r\n   */\r\n  _textEquivalent?:fhir.FhirElement;\r\n  /**\r\n   * Indicates how quickly the action should be addressed with respect to other actions.\r\n   */\r\n  priority?: 'asap'|'routine'|'stat'|'urgent'|undefined;\r\n  /**\r\n   * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for the section of a documentation template.\r\n   */\r\n  code?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.\r\n   */\r\n  reason?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.\r\n   */\r\n  documentation?: fhir.RelatedArtifact[]|undefined;\r\n  /**\r\n   * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.\r\n   */\r\n  goalId?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.goalId\r\n   */\r\n  _goalId?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.\r\n   * In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).\r\n   */\r\n  subjectCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.\r\n   * In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).\r\n   */\r\n  subjectReference?: fhir.Reference|undefined;\r\n  /**\r\n   * A description of when the action should be triggered.\r\n   */\r\n  trigger?: fhir.TriggerDefinition[]|undefined;\r\n  /**\r\n   * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.\r\n   */\r\n  condition?: fhir.PlanDefinitionActionCondition[]|undefined;\r\n  /**\r\n   * Defines input data requirements for the action.\r\n   */\r\n  input?: fhir.DataRequirement[]|undefined;\r\n  /**\r\n   * Defines the outputs of the action, if any.\r\n   */\r\n  output?: fhir.DataRequirement[]|undefined;\r\n  /**\r\n   * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.\r\n   */\r\n  relatedAction?: fhir.PlanDefinitionActionRelatedAction[]|undefined;\r\n  /**\r\n   * An optional value describing when the action should be performed.\r\n   */\r\n  timingDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.timing[x]\r\n   */\r\n  _timingDateTime?:fhir.FhirElement;\r\n  /**\r\n   * An optional value describing when the action should be performed.\r\n   */\r\n  timingAge?: fhir.Age|undefined;\r\n  /**\r\n   * An optional value describing when the action should be performed.\r\n   */\r\n  timingPeriod?: fhir.Period|undefined;\r\n  /**\r\n   * An optional value describing when the action should be performed.\r\n   */\r\n  timingDuration?: fhir.Duration|undefined;\r\n  /**\r\n   * An optional value describing when the action should be performed.\r\n   */\r\n  timingRange?: fhir.Range|undefined;\r\n  /**\r\n   * An optional value describing when the action should be performed.\r\n   */\r\n  timingTiming?: fhir.Timing|undefined;\r\n  /**\r\n   * Indicates who should participate in performing the action described.\r\n   */\r\n  participant?: fhir.PlanDefinitionActionParticipant[]|undefined;\r\n  /**\r\n   * The type of action to perform (create, update, remove).\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Defines the grouping behavior for the action and its children.\r\n   */\r\n  groupingBehavior?: 'logical-group'|'sentence-group'|'visual-group'|undefined;\r\n  /**\r\n   * Defines the selection behavior for the action and its children.\r\n   */\r\n  selectionBehavior?: 'all'|'all-or-none'|'any'|'at-most-one'|'exactly-one'|'one-or-more'|undefined;\r\n  /**\r\n   * Defines the required behavior for the action.\r\n   */\r\n  requiredBehavior?: 'could'|'must'|'must-unless-documented'|undefined;\r\n  /**\r\n   * Defines whether the action should usually be preselected.\r\n   */\r\n  precheckBehavior?: 'no'|'yes'|undefined;\r\n  /**\r\n   * Defines whether the action can be selected multiple times.\r\n   */\r\n  cardinalityBehavior?: 'multiple'|'single'|undefined;\r\n  /**\r\n   * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.\r\n   */\r\n  definitionCanonical?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.definition[x]\r\n   */\r\n  _definitionCanonical?:fhir.FhirElement;\r\n  /**\r\n   * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.\r\n   */\r\n  definitionUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.definition[x]\r\n   */\r\n  _definitionUri?:fhir.FhirElement;\r\n  /**\r\n   * Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.\r\n   */\r\n  transform?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.action.transform\r\n   */\r\n  _transform?:fhir.FhirElement;\r\n  /**\r\n   * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.\r\n   */\r\n  dynamicValue?: fhir.PlanDefinitionActionDynamicValue[]|undefined;\r\n  /**\r\n   * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.\r\n   */\r\n  action?: fhir.PlanDefinitionAction[]|undefined;\r\n}\r\n\r\n/**\r\n * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.\r\n */\r\nexport interface PlanDefinition extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"PlanDefinition\";\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this plan definition outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: fhir.Identifier[]|undefined;\r\n  /**\r\n   * There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * An explanatory or alternate title for the plan definition giving additional information about its content.\r\n   */\r\n  subtitle?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.subtitle\r\n   */\r\n  _subtitle?:fhir.FhirElement;\r\n  /**\r\n   * A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.\r\n   */\r\n  type?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Allows filtering of plan definitions that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Allows filtering of plan definitions that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * A code or group definition that describes the intended subject of the plan definition.\r\n   */\r\n  subjectCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * A code or group definition that describes the intended subject of the plan definition.\r\n   */\r\n  subjectReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the plan definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the plan definition is presumed to be the predominant language in the place the plan definition was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: fhir.UsageContext[]|undefined;\r\n  /**\r\n   * It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the plan definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A detailed description of how the plan definition is used from a clinical perspective.\r\n   */\r\n  usage?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.usage\r\n   */\r\n  _usage?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.\r\n   */\r\n  approvalDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.approvalDate\r\n   */\r\n  _approvalDate?:fhir.FhirElement;\r\n  /**\r\n   * If specified, this date follows the original approval date.\r\n   */\r\n  lastReviewDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.lastReviewDate\r\n   */\r\n  _lastReviewDate?:fhir.FhirElement;\r\n  /**\r\n   * The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.\r\n   */\r\n  effectivePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.\r\n   */\r\n  topic?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * An individiual or organization primarily involved in the creation and maintenance of the content.\r\n   */\r\n  author?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * An individual or organization primarily responsible for internal coherence of the content.\r\n   */\r\n  editor?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * An individual or organization primarily responsible for review of some aspect of the content.\r\n   */\r\n  reviewer?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * An individual or organization responsible for officially endorsing the content for use in some setting.\r\n   */\r\n  endorser?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * Each related artifact is either an attachment, or a reference to another resource, but not both.\r\n   */\r\n  relatedArtifact?: fhir.RelatedArtifact[]|undefined;\r\n  /**\r\n   * A reference to a Library resource containing any formal logic used by the plan definition.\r\n   */\r\n  library?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: PlanDefinition.library\r\n   */\r\n  _library?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.\r\n   */\r\n  goal?: fhir.PlanDefinitionGoal[]|undefined;\r\n  /**\r\n   * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.\r\n   */\r\n  action?: fhir.PlanDefinitionAction[]|undefined;\r\n}\r\n"]}