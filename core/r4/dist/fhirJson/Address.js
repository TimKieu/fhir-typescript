// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Address
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImZoaXJKc29uL0FkZHJlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLCtDQUErQztBQUMvQyxrQ0FBa0M7QUFDbEMsNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPGF1dG8tZ2VuZXJhdGVkLz5cclxuLy8gQ29udGVudHMgb2Y6IGhsNy5maGlyLnI0LmNvcmUgdmVyc2lvbjogNC4wLjFcclxuLy8gTWluaW11bSBUeXBlU2NyaXB0IFZlcnNpb246IDMuN1xyXG4vLyBGSElSIENvbXBsZXhUeXBlOiBBZGRyZXNzXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogQW4gYWRkcmVzcyBleHByZXNzZWQgdXNpbmcgcG9zdGFsIGNvbnZlbnRpb25zIChhcyBvcHBvc2VkIHRvIEdQUyBvciBvdGhlciBsb2NhdGlvbiBkZWZpbml0aW9uIGZvcm1hdHMpLiAgVGhpcyBkYXRhIHR5cGUgbWF5IGJlIHVzZWQgdG8gY29udmV5IGFkZHJlc3NlcyBmb3IgdXNlIGluIGRlbGl2ZXJpbmcgbWFpbCBhcyB3ZWxsIGFzIGZvciB2aXNpdGluZyBsb2NhdGlvbnMgd2hpY2ggbWlnaHQgbm90IGJlIHZhbGlkIGZvciBtYWlsIGRlbGl2ZXJ5LiAgVGhlcmUgYXJlIGEgdmFyaWV0eSBvZiBwb3N0YWwgYWRkcmVzcyBmb3JtYXRzIGRlZmluZWQgYXJvdW5kIHRoZSB3b3JsZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRkcmVzcyBleHRlbmRzIGZoaXIuRmhpckVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBBcHBsaWNhdGlvbnMgY2FuIGFzc3VtZSB0aGF0IGFuIGFkZHJlc3MgaXMgY3VycmVudCB1bmxlc3MgaXQgZXhwbGljaXRseSBzYXlzIHRoYXQgaXQgaXMgdGVtcG9yYXJ5IG9yIG9sZC5cclxuICAgKi9cclxuICB1c2U/OiAnYmlsbGluZyd8J2hvbWUnfCdvbGQnfCd0ZW1wJ3wnd29yayd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBZGRyZXNzLnVzZVxyXG4gICAqL1xyXG4gIF91c2U/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRlZmluaXRpb24gb2YgQWRkcmVzcyBzdGF0ZXMgdGhhdCBcImFkZHJlc3MgaXMgaW50ZW5kZWQgdG8gZGVzY3JpYmUgcG9zdGFsIGFkZHJlc3Nlcywgbm90IHBoeXNpY2FsIGxvY2F0aW9uc1wiLiBIb3dldmVyLCBtYW55IGFwcGxpY2F0aW9ucyB0cmFjayB3aGV0aGVyIGFuIGFkZHJlc3MgaGFzIGEgZHVhbCBwdXJwb3NlIG9mIGJlaW5nIGEgbG9jYXRpb24gdGhhdCBjYW4gYmUgdmlzaXRlZCBhcyB3ZWxsIGFzIGJlaW5nIGEgdmFsaWQgZGVsaXZlcnkgZGVzdGluYXRpb24sIGFuZCBQb3N0YWwgYWRkcmVzc2VzIGFyZSBvZnRlbiB1c2VkIGFzIHByb3hpZXMgZm9yIHBoeXNpY2FsIGxvY2F0aW9ucyAoYWxzbyBzZWUgdGhlIFtMb2NhdGlvbl0obG9jYXRpb24uaHRtbCMpIHJlc291cmNlKS5cclxuICAgKi9cclxuICB0eXBlPzogJ2JvdGgnfCdwaHlzaWNhbCd8J3Bvc3RhbCd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBZGRyZXNzLnR5cGVcclxuICAgKi9cclxuICBfdHlwZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBDYW4gcHJvdmlkZSBib3RoIGEgdGV4dCByZXByZXNlbnRhdGlvbiBhbmQgcGFydHMuIEFwcGxpY2F0aW9ucyB1cGRhdGluZyBhbiBhZGRyZXNzIFNIQUxMIGVuc3VyZSB0aGF0ICB3aGVuIGJvdGggdGV4dCBhbmQgcGFydHMgYXJlIHByZXNlbnQsICBubyBjb250ZW50IGlzIGluY2x1ZGVkIGluIHRoZSB0ZXh0IHRoYXQgaXNuJ3QgZm91bmQgaW4gYSBwYXJ0LlxyXG4gICAqL1xyXG4gIHRleHQ/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBZGRyZXNzLnRleHRcclxuICAgKi9cclxuICBfdGV4dD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGlzIGNvbXBvbmVudCBjb250YWlucyB0aGUgaG91c2UgbnVtYmVyLCBhcGFydG1lbnQgbnVtYmVyLCBzdHJlZXQgbmFtZSwgc3RyZWV0IGRpcmVjdGlvbiwgIFAuTy4gQm94IG51bWJlciwgZGVsaXZlcnkgaGludHMsIGFuZCBzaW1pbGFyIGFkZHJlc3MgaW5mb3JtYXRpb24uXHJcbiAgICovXHJcbiAgbGluZT86IChzdHJpbmd8bnVsbClbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFkZHJlc3MubGluZVxyXG4gICAqL1xyXG4gIF9saW5lPzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBjaXR5LCB0b3duLCBzdWJ1cmIsIHZpbGxhZ2Ugb3Igb3RoZXIgY29tbXVuaXR5IG9yIGRlbGl2ZXJ5IGNlbnRlci5cclxuICAgKi9cclxuICBjaXR5Pzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogQWRkcmVzcy5jaXR5XHJcbiAgICovXHJcbiAgX2NpdHk/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogRGlzdHJpY3QgaXMgc29tZXRpbWVzIGtub3duIGFzIGNvdW50eSwgYnV0IGluIHNvbWUgcmVnaW9ucyAnY291bnR5JyBpcyB1c2VkIGluIHBsYWNlIG9mIGNpdHkgKG11bmljaXBhbGl0eSksIHNvIGNvdW50eSBuYW1lIHNob3VsZCBiZSBjb252ZXllZCBpbiBjaXR5IGluc3RlYWQuXHJcbiAgICovXHJcbiAgZGlzdHJpY3Q/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBZGRyZXNzLmRpc3RyaWN0XHJcbiAgICovXHJcbiAgX2Rpc3RyaWN0PzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFN1Yi11bml0IG9mIGEgY291bnRyeSB3aXRoIGxpbWl0ZWQgc292ZXJlaWdudHkgaW4gYSBmZWRlcmFsbHkgb3JnYW5pemVkIGNvdW50cnkuIEEgY29kZSBtYXkgYmUgdXNlZCBpZiBjb2RlcyBhcmUgaW4gY29tbW9uIHVzZSAoZS5nLiBVUyAyIGxldHRlciBzdGF0ZSBjb2RlcykuXHJcbiAgICovXHJcbiAgc3RhdGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBZGRyZXNzLnN0YXRlXHJcbiAgICovXHJcbiAgX3N0YXRlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEEgcG9zdGFsIGNvZGUgZGVzaWduYXRpbmcgYSByZWdpb24gZGVmaW5lZCBieSB0aGUgcG9zdGFsIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgcG9zdGFsQ29kZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEFkZHJlc3MucG9zdGFsQ29kZVxyXG4gICAqL1xyXG4gIF9wb3N0YWxDb2RlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElTTyAzMTY2IDMgbGV0dGVyIGNvZGVzIGNhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGEgaHVtYW4gcmVhZGFibGUgY291bnRyeSBuYW1lLlxyXG4gICAqL1xyXG4gIGNvdW50cnk/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBBZGRyZXNzLmNvdW50cnlcclxuICAgKi9cclxuICBfY291bnRyeT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaW1lIHBlcmlvZCB3aGVuIGFkZHJlc3Mgd2FzL2lzIGluIHVzZS5cclxuICAgKi9cclxuICBwZXJpb2Q/OiBmaGlyLlBlcmlvZHx1bmRlZmluZWQ7XHJcbn1cclxuIl19