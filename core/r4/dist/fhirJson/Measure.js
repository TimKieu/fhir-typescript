// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Measure
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Measure.js","sourceRoot":"./src/","sources":["fhirJson/Measure.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,yBAAyB","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: Measure\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * A population criteria for the measure.\r\n */\r\nexport interface MeasureGroupPopulation extends fhir.BackboneElement { \r\n  /**\r\n   * The type of population criteria.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The human readable description of this population criteria.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.group.population.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * In the case of a continuous-variable or ratio measure, this may be the name of a function that calculates the value of the individual observation for each patient or event in the population. For these types of measures, individual observations are reported as observation resources included in the evaluatedResources bundle for each patient. See the MeasureReport resource or the Quality Reporting topic for more information.\r\n   */\r\n  criteria: fhir.Expression|null;\r\n}\r\n\r\n/**\r\n * Stratifiers are defined either as a single criteria, or as a set of component criteria.\r\n */\r\nexport interface MeasureGroupStratifierComponent extends fhir.BackboneElement { \r\n  /**\r\n   * Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The human readable description of this stratifier criteria component.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.group.stratifier.component.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.\r\n   */\r\n  criteria: fhir.Expression|null;\r\n}\r\n\r\n/**\r\n * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.\r\n */\r\nexport interface MeasureGroupStratifier extends fhir.BackboneElement { \r\n  /**\r\n   * Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The human readable description of this stratifier criteria.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.group.stratifier.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.\r\n   */\r\n  criteria?: fhir.Expression|undefined;\r\n  /**\r\n   * Stratifiers are defined either as a single criteria, or as a set of component criteria.\r\n   */\r\n  component?: (fhir.MeasureGroupStratifierComponent|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * A group of population criteria for the measure.\r\n */\r\nexport interface MeasureGroup extends fhir.BackboneElement { \r\n  /**\r\n   * Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The human readable description of this population group.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.group.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * A population criteria for the measure.\r\n   */\r\n  population?: (fhir.MeasureGroupPopulation|null)[]|undefined;\r\n  /**\r\n   * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.\r\n   */\r\n  stratifier?: (fhir.MeasureGroupStratifier|null)[]|undefined;\r\n}\r\n\r\n/**\r\n * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.\r\n */\r\nexport interface MeasureSupplementalData extends fhir.BackboneElement { \r\n  /**\r\n   * Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.\r\n   */\r\n  code?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.\r\n   */\r\n  usage?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * The human readable description of this supplemental data.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.supplementalData.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.\r\n   */\r\n  criteria: fhir.Expression|null;\r\n}\r\n\r\n/**\r\n * The Measure resource provides the definition of a quality measure.\r\n */\r\nexport interface Measure extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"Measure\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this measure outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * There may be different measure instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the measure with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * An explanatory or alternate title for the measure giving additional information about its content.\r\n   */\r\n  subtitle?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.subtitle\r\n   */\r\n  _subtitle?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of measures that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: Measure.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of measures that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.\r\n   */\r\n  subjectCodeableConcept?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.\r\n   */\r\n  subjectReference?: fhir.Reference|undefined;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the measure. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the measure is the organization or individual primarily responsible for the maintenance and upkeep of the measure. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the measure. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the measure was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the measure as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the measure is presumed to be the predominant language in the place the measure was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the measure to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the measure. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this measure.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A detailed description, from a clinical perspective, of how the measure is used.\r\n   */\r\n  usage?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.usage\r\n   */\r\n  _usage?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.\r\n   */\r\n  approvalDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.approvalDate\r\n   */\r\n  _approvalDate?:fhir.FhirElement;\r\n  /**\r\n   * If specified, this date follows the original approval date.\r\n   */\r\n  lastReviewDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.lastReviewDate\r\n   */\r\n  _lastReviewDate?:fhir.FhirElement;\r\n  /**\r\n   * The effective period for a measure  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.\r\n   */\r\n  effectivePeriod?: fhir.Period|undefined;\r\n  /**\r\n   * Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.\r\n   */\r\n  topic?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * An individiual or organization primarily involved in the creation and maintenance of the content.\r\n   */\r\n  author?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * An individual or organization primarily responsible for internal coherence of the content.\r\n   */\r\n  editor?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * An individual or organization primarily responsible for review of some aspect of the content.\r\n   */\r\n  reviewer?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * An individual or organization responsible for officially endorsing the content for use in some setting.\r\n   */\r\n  endorser?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * Each related artifact is either an attachment, or a reference to another resource, but not both.\r\n   */\r\n  relatedArtifact?: (fhir.RelatedArtifact|null)[]|undefined;\r\n  /**\r\n   * A reference to a Library resource containing the formal logic used by the measure.\r\n   */\r\n  library?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.library\r\n   */\r\n  _library?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.\r\n   */\r\n  disclaimer?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.disclaimer\r\n   */\r\n  _disclaimer?:fhir.FhirElement;\r\n  /**\r\n   * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.\r\n   */\r\n  scoring?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.\r\n   */\r\n  compositeScoring?: fhir.CodeableConcept|undefined;\r\n  /**\r\n   * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.\r\n   */\r\n  type?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * Describes the method of adjusting for clinical severity and conditions present at the start of care that can influence patient outcomes for making valid comparisons of outcome measures across providers. Indicates whether a measure is subject to the statistical process for reducing, removing, or clarifying the influences of confounding factors to allow for more useful comparisons.\r\n   */\r\n  riskAdjustment?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.riskAdjustment\r\n   */\r\n  _riskAdjustment?:fhir.FhirElement;\r\n  /**\r\n   * The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).\r\n   */\r\n  rateAggregation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.rateAggregation\r\n   */\r\n  _rateAggregation?:fhir.FhirElement;\r\n  /**\r\n   * Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.\r\n   */\r\n  rationale?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.rationale\r\n   */\r\n  _rationale?:fhir.FhirElement;\r\n  /**\r\n   * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.\r\n   */\r\n  clinicalRecommendationStatement?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.clinicalRecommendationStatement\r\n   */\r\n  _clinicalRecommendationStatement?:fhir.FhirElement;\r\n  /**\r\n   * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).\r\n   */\r\n  improvementNotation?: 'decrease'|'increase'|undefined;\r\n  /**\r\n   * Provides a description of an individual term used within the measure.\r\n   */\r\n  definition?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.definition\r\n   */\r\n  _definition?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.\r\n   */\r\n  guidance?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: Measure.guidance\r\n   */\r\n  _guidance?:fhir.FhirElement;\r\n  /**\r\n   * A group of population criteria for the measure.\r\n   */\r\n  group?: (fhir.MeasureGroup|null)[]|undefined;\r\n  /**\r\n   * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.\r\n   */\r\n  supplementalData?: (fhir.MeasureSupplementalData|null)[]|undefined;\r\n}\r\n"]}