// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TestScript
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"TestScript.js","sourceRoot":"./src/","sources":["fhirJson/TestScript.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,4BAA4B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: TestScript\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.\r\n */\r\nexport interface TestScriptOrigin extends fhir.BackboneElement { \r\n  /**\r\n   * A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and again as FormProcessor within the same script as that could get confusing during test configuration). \r\n   * Different origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).\r\n   * The origin indices provided elsewhere in the test script must be one of these origin indices.\r\n   */\r\n  index: number|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.origin.index\r\n   */\r\n  _index?:fhir.FhirElement;\r\n  /**\r\n   * Must be a \"sender\"/\"client\" profile.\r\n   */\r\n  profile: fhir.Coding|null;\r\n}\r\n\r\n/**\r\n * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.\r\n */\r\nexport interface TestScriptDestination extends fhir.BackboneElement { \r\n  /**\r\n   * A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration). \r\n   * Different destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).\r\n   * The destination indices provided elsewhere in the test script must be one of these destination indices.\r\n   */\r\n  index: number|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.destination.index\r\n   */\r\n  _index?:fhir.FhirElement;\r\n  /**\r\n   * Must be a \"receiver\"/\"server\" profile.\r\n   */\r\n  profile: fhir.Coding|null;\r\n}\r\n\r\n/**\r\n * A link to the FHIR specification that this test is covering.\r\n */\r\nexport interface TestScriptMetadataLink extends fhir.BackboneElement { \r\n  /**\r\n   * URL to a particular requirement or feature within the FHIR specification.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.link.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Short description of the link.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.link.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The \"metadata.capabilities.required\" and \"metadata.capabilities.validated\" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose \"metadata.capabilities.validated\" flag is true are the primary focus of the test script.\r\n */\r\nexport interface TestScriptMetadataCapability extends fhir.BackboneElement { \r\n  /**\r\n   * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.\r\n   */\r\n  required: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.required\r\n   */\r\n  _required?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.\r\n   */\r\n  validated: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.validated\r\n   */\r\n  _validated?:fhir.FhirElement;\r\n  /**\r\n   * Description of the capabilities that this test script is requiring the server to support.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * Which origin server these requirements apply to.\r\n   */\r\n  origin?: (number|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.origin\r\n   */\r\n  _origin?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Which server these requirements apply to.\r\n   */\r\n  destination?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.destination\r\n   */\r\n  _destination?:fhir.FhirElement;\r\n  /**\r\n   * Links to the FHIR specification that describes this interaction and the resources involved in more detail.\r\n   */\r\n  link?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.link\r\n   */\r\n  _link?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.\r\n   */\r\n  capabilities: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.metadata.capability.capabilities\r\n   */\r\n  _capabilities?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The required capability must exist and are assumed to function correctly on the FHIR server being tested.\r\n */\r\nexport interface TestScriptMetadata extends fhir.BackboneElement { \r\n  /**\r\n   * A link to the FHIR specification that this test is covering.\r\n   */\r\n  link?: (fhir.TestScriptMetadataLink|null)[]|undefined;\r\n  /**\r\n   * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The \"metadata.capabilities.required\" and \"metadata.capabilities.validated\" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose \"metadata.capabilities.validated\" flag is true are the primary focus of the test script.\r\n   */\r\n  capability: (fhir.TestScriptMetadataCapability|null)[]|null;\r\n}\r\n\r\n/**\r\n * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.\r\n */\r\nexport interface TestScriptFixture extends fhir.BackboneElement { \r\n  /**\r\n   * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.\r\n   */\r\n  autocreate: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.fixture.autocreate\r\n   */\r\n  _autocreate?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.\r\n   */\r\n  autodelete: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.fixture.autodelete\r\n   */\r\n  _autodelete?:fhir.FhirElement;\r\n  /**\r\n   * See http://build.fhir.org/resourcelist.html for complete list of resource types.\r\n   */\r\n  resource?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.\r\n */\r\nexport interface TestScriptVariable extends fhir.BackboneElement { \r\n  /**\r\n   * Placeholders would contain the variable name wrapped in ${} in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.\r\n   */\r\n  defaultValue?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.defaultValue\r\n   */\r\n  _defaultValue?:fhir.FhirElement;\r\n  /**\r\n   * A free text natural language description of the variable and its purpose.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.\r\n   */\r\n  expression?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.expression\r\n   */\r\n  _expression?:fhir.FhirElement;\r\n  /**\r\n   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.\r\n   */\r\n  headerField?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.headerField\r\n   */\r\n  _headerField?:fhir.FhirElement;\r\n  /**\r\n   * Displayable text string with hint help information to the user when entering a default value.\r\n   */\r\n  hint?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.hint\r\n   */\r\n  _hint?:fhir.FhirElement;\r\n  /**\r\n   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.\r\n   */\r\n  path?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.\r\n   */\r\n  sourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.variable.sourceId\r\n   */\r\n  _sourceId?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - \"If-Modified-Since\" and \"If-None-Match\" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - \"If-Match\" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using \"If-None-Exist\".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid \"Content-Type\" header for negative testing. - etc.\r\n */\r\nexport interface TestScriptSetupActionOperationRequestHeader extends fhir.BackboneElement { \r\n  /**\r\n   * If header element is specified, then field is required.\r\n   */\r\n  field: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.requestHeader.field\r\n   */\r\n  _field?:fhir.FhirElement;\r\n  /**\r\n   * If header element is specified, then value is required.  No conversions will be done by the test engine e.g. \"xml\" to \"application/fhir+xml\".  The values will be set in HTTP headers \"as-is\".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.requestHeader.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The operation to perform.\r\n */\r\nexport interface TestScriptSetupActionOperation extends fhir.BackboneElement { \r\n  /**\r\n   * See http://build.fhir.org/http.html for list of server interactions.\r\n   */\r\n  type?: fhir.Coding|undefined;\r\n  /**\r\n   * If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored. For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present. For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url. For \"vread\" and \"history\" operations, the versionId value will also be used.\r\n   */\r\n  resource?: 'Account'|'ActivityDefinition'|'Address'|'AdverseEvent'|'Age'|'AllergyIntolerance'|'Annotation'|'Appointment'|'AppointmentResponse'|'Attachment'|'AuditEvent'|'BackboneElement'|'base64Binary'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'boolean'|'Bundle'|'canonical'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'code'|'CodeableConcept'|'CodeSystem'|'Coding'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'ContactDetail'|'ContactPoint'|'Contract'|'Contributor'|'Count'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DataRequirement'|'date'|'dateTime'|'decimal'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'Distance'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'Dosage'|'Duration'|'EffectEvidenceSynthesis'|'Element'|'ElementDefinition'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'Expression'|'Extension'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'HumanName'|'id'|'Identifier'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'instant'|'InsurancePlan'|'integer'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'markdown'|'MarketingStatus'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'Meta'|'MolecularSequence'|'Money'|'MoneyQuantity'|'NamingSystem'|'Narrative'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'oid'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'ParameterDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Period'|'Person'|'PlanDefinition'|'Population'|'positiveInt'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProdCharacteristic'|'ProductShelfLife'|'Provenance'|'Quantity'|'Questionnaire'|'QuestionnaireResponse'|'Range'|'Ratio'|'Reference'|'RelatedArtifact'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'SampledData'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Signature'|'SimpleQuantity'|'Slot'|'Specimen'|'SpecimenDefinition'|'string'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceAmount'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'time'|'Timing'|'TriggerDefinition'|'unsignedInt'|'uri'|'url'|'UsageContext'|'uuid'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'xhtml'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.resource\r\n   */\r\n  _resource?:fhir.FhirElement;\r\n  /**\r\n   * This has no impact on the verification itself.\r\n   */\r\n  label?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.label\r\n   */\r\n  _label?:fhir.FhirElement;\r\n  /**\r\n   * This has no impact on the verification itself.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * If this is specified, then test engine shall set the 'Accept' header to the corresponding value.  If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.\r\n   */\r\n  accept?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.accept\r\n   */\r\n  _accept?:fhir.FhirElement;\r\n  /**\r\n   * If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.  If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.\r\n   */\r\n  contentType?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.contentType\r\n   */\r\n  _contentType?:fhir.FhirElement;\r\n  /**\r\n   * If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.\r\n   */\r\n  destination?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.destination\r\n   */\r\n  _destination?:fhir.FhirElement;\r\n  /**\r\n   * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.\r\n   */\r\n  encodeRequestUrl: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.encodeRequestUrl\r\n   */\r\n  _encodeRequestUrl?:fhir.FhirElement;\r\n  /**\r\n   * The primary purpose of the explicit HTTP method is support of  HTTP POST method invocation of the FHIR search. Other uses will include support of negative testing.\r\n   */\r\n  method?: 'delete'|'get'|'head'|'options'|'patch'|'post'|'put'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.method\r\n   */\r\n  _method?:fhir.FhirElement;\r\n  /**\r\n   * If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.\r\n   */\r\n  origin?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.origin\r\n   */\r\n  _origin?:fhir.FhirElement;\r\n  /**\r\n   * If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.   Test engines would append whatever is specified for \"params\" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The \"params\" element does not correspond exactly to \"search parameters\".  Nor is it the \"path\".  It corresponds to the part of the URL that comes after the [type] (when \"resource\" element is specified); e.g. It corresponds to \"/[id]/_history/[vid] {?_format=[mime-type]}\" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.\r\n   */\r\n  params?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.params\r\n   */\r\n  _params?:fhir.FhirElement;\r\n  /**\r\n   * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - \"If-Modified-Since\" and \"If-None-Match\" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - \"If-Match\" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using \"If-None-Exist\".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid \"Content-Type\" header for negative testing. - etc.\r\n   */\r\n  requestHeader?: (fhir.TestScriptSetupActionOperationRequestHeader|null)[]|undefined;\r\n  /**\r\n   * If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by \"requestId\".  If requestId is not specified, it is the test engine's responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.\r\n   */\r\n  requestId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.requestId\r\n   */\r\n  _requestId?:fhir.FhirElement;\r\n  /**\r\n   * If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by \"responseId\".  If responseId is not specified, it is the test engine's responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.\r\n   */\r\n  responseId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.responseId\r\n   */\r\n  _responseId?:fhir.FhirElement;\r\n  /**\r\n   * The id of the fixture used as the body of a PUT or POST request.\r\n   */\r\n  sourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.sourceId\r\n   */\r\n  _sourceId?:fhir.FhirElement;\r\n  /**\r\n   * If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.\r\n   */\r\n  targetId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.targetId\r\n   */\r\n  _targetId?:fhir.FhirElement;\r\n  /**\r\n   * Used to set the request URL explicitly.  If \"url\" element is defined, then \"targetId\", \"resource\", and \"params\" elements will be ignored.  Test engines would use whatever is specified in \"url\" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.operation.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.\r\n */\r\nexport interface TestScriptSetupActionAssert extends fhir.BackboneElement { \r\n  /**\r\n   * This has no impact on the verification itself.\r\n   */\r\n  label?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.label\r\n   */\r\n  _label?:fhir.FhirElement;\r\n  /**\r\n   * This has no impact on the verification itself.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * If the direction is specified as \"response\" (the default), then the processing of this assert is against the received response message. If the direction is specified as \"request\", then the processing of this assert is against the sent request message.\r\n   */\r\n  direction?: 'request'|'response'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.direction\r\n   */\r\n  _direction?:fhir.FhirElement;\r\n  /**\r\n   * Id of the source fixture used as the contents to be evaluated by either the \"source/expression\" or \"sourceId/path\" definition.\r\n   */\r\n  compareToSourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.compareToSourceId\r\n   */\r\n  _compareToSourceId?:fhir.FhirElement;\r\n  /**\r\n   * Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.\r\n   */\r\n  compareToSourceExpression?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.compareToSourceExpression\r\n   */\r\n  _compareToSourceExpression?:fhir.FhirElement;\r\n  /**\r\n   * The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.\r\n   */\r\n  compareToSourcePath?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.compareToSourcePath\r\n   */\r\n  _compareToSourcePath?:fhir.FhirElement;\r\n  /**\r\n   * If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If \"assert.sourceId\" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).  If you'd like to have more control over the string, then use 'assert.headerField' instead.\r\n   */\r\n  contentType?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.contentType\r\n   */\r\n  _contentType?:fhir.FhirElement;\r\n  /**\r\n   * If both \"expression\" and a \"fixtureId\" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId.  If \"expression\" is specified and a \"fixtureId\" is not, then the expression will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.\r\n   */\r\n  expression?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.expression\r\n   */\r\n  _expression?:fhir.FhirElement;\r\n  /**\r\n   * If \"headerField\" is specified then \"value\" must be specified.  If \"sourceId\" is not specified, then \"headerField\" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.\r\n   */\r\n  headerField?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.headerField\r\n   */\r\n  _headerField?:fhir.FhirElement;\r\n  /**\r\n   * Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.\r\n   */\r\n  minimumId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.minimumId\r\n   */\r\n  _minimumId?:fhir.FhirElement;\r\n  /**\r\n   * Asserts that the Bundle contains first, last, and next links.\r\n   */\r\n  navigationLinks?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.navigationLinks\r\n   */\r\n  _navigationLinks?:fhir.FhirElement;\r\n  /**\r\n   * Operators are useful especially for negative testing.  If operator is not specified, then the \"equals\" operator is assumed; e.g. ```&lt;code&gt;   &lt;assert&gt;  &lt;operator value=\"in\" /&gt;  &lt;responseCode value=\"200,201,204\" /&gt;    &lt;/assert&gt;    &lt;assert&gt;  &lt;operator value=\"notEquals\" /&gt;  &lt;response value=\"okay\"/&gt;   &lt;/assert&gt;    &lt;assert&gt;  &lt;operator value=\"greaterThan\" /&gt;    &lt;responseHeader&gt;     &lt;field value=\"Content-Length\" /&gt;     &lt;value value=\"0\" /&gt;    &lt;/responseHeader/&gt;   &lt;/assert&gt; &lt;/code&gt; ```.\r\n   */\r\n  operator?: 'contains'|'empty'|'equals'|'eval'|'greaterThan'|'in'|'lessThan'|'notContains'|'notEmpty'|'notEquals'|'notIn'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.operator\r\n   */\r\n  _operator?:fhir.FhirElement;\r\n  /**\r\n   * If both \"path\" and a \"fixtureId\" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If \"path\" is specified and a \"fixtureId\" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.\r\n   */\r\n  path?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.path\r\n   */\r\n  _path?:fhir.FhirElement;\r\n  /**\r\n   * If \"requestMethod\" is specified then it will be used in place of \"value\". The \"requestMethod\" will evaluate against the last operation's request HTTP operation.\r\n   */\r\n  requestMethod?: 'delete'|'get'|'head'|'options'|'patch'|'post'|'put'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.requestMethod\r\n   */\r\n  _requestMethod?:fhir.FhirElement;\r\n  /**\r\n   * If \"requestURL\" is specified then it will be used in place of \"value\". The \"requestURL\" will evaluate against the last operation's full request URL path string.\r\n   */\r\n  requestURL?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.requestURL\r\n   */\r\n  _requestURL?:fhir.FhirElement;\r\n  /**\r\n   * This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://build.fhir.org/resourcelist.html for complete list of resource types; e.g. &lt;assert &gt; &lt;resourceType value=\"Patient\" &lt;/assert&gt;.\r\n   */\r\n  resource?: 'Account'|'ActivityDefinition'|'Address'|'AdverseEvent'|'Age'|'AllergyIntolerance'|'Annotation'|'Appointment'|'AppointmentResponse'|'Attachment'|'AuditEvent'|'BackboneElement'|'base64Binary'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'boolean'|'Bundle'|'canonical'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'code'|'CodeableConcept'|'CodeSystem'|'Coding'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'ContactDetail'|'ContactPoint'|'Contract'|'Contributor'|'Count'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DataRequirement'|'date'|'dateTime'|'decimal'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'Distance'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'Dosage'|'Duration'|'EffectEvidenceSynthesis'|'Element'|'ElementDefinition'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'Expression'|'Extension'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'HumanName'|'id'|'Identifier'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'instant'|'InsurancePlan'|'integer'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'markdown'|'MarketingStatus'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'Meta'|'MolecularSequence'|'Money'|'MoneyQuantity'|'NamingSystem'|'Narrative'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'oid'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'ParameterDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Period'|'Person'|'PlanDefinition'|'Population'|'positiveInt'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProdCharacteristic'|'ProductShelfLife'|'Provenance'|'Quantity'|'Questionnaire'|'QuestionnaireResponse'|'Range'|'Ratio'|'Reference'|'RelatedArtifact'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'SampledData'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Signature'|'SimpleQuantity'|'Slot'|'Specimen'|'SpecimenDefinition'|'string'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceAmount'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'time'|'Timing'|'TriggerDefinition'|'unsignedInt'|'uri'|'url'|'UsageContext'|'uuid'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'xhtml'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.resource\r\n   */\r\n  _resource?:fhir.FhirElement;\r\n  /**\r\n   * This is a shorter way of achieving similar verifications via \"assert.responseCode\".  If you need more control, then use \"assert.responseCode\"  e.g. &lt;assert&gt;  &lt;contentType value=\"json\" /&gt;  &lt;response value=\"okay\"/&gt; &lt;/assert&gt;.\r\n   */\r\n  response?: 'bad'|'conflict'|'created'|'forbidden'|'gone'|'methodNotAllowed'|'noContent'|'notFound'|'notModified'|'okay'|'preconditionFailed'|'unprocessable'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.response\r\n   */\r\n  _response?:fhir.FhirElement;\r\n  /**\r\n   * To be used with \"operator\" attribute value. Asserts that the response code equals this value if \"operator\" is not specified.   If the operator is \"in\" or \"notIn\" then the responseCode would be a comma-separated list of values e.g. \"200,201\". Otherwise, it's expected to be a numeric value.   If \"fixture\" is not specified, then the \"responseBodyId\" value of the last operation is assumed.\r\n   */\r\n  responseCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.responseCode\r\n   */\r\n  _responseCode?:fhir.FhirElement;\r\n  /**\r\n   * This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.\r\n   */\r\n  sourceId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.sourceId\r\n   */\r\n  _sourceId?:fhir.FhirElement;\r\n  /**\r\n   * The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.\r\n   */\r\n  validateProfileId?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.validateProfileId\r\n   */\r\n  _validateProfileId?:fhir.FhirElement;\r\n  /**\r\n   * The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.\r\n   */\r\n  value?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n  /**\r\n   * If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.\r\n   */\r\n  warningOnly: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.setup.action.assert.warningOnly\r\n   */\r\n  _warningOnly?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n */\r\nexport interface TestScriptSetupAction extends fhir.BackboneElement { \r\n  /**\r\n   * The operation to perform.\r\n   */\r\n  operation?: fhir.TestScriptSetupActionOperation|undefined;\r\n  /**\r\n   * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.\r\n   */\r\n  assert?: fhir.TestScriptSetupActionAssert|undefined;\r\n}\r\n\r\n/**\r\n * A series of required setup operations before tests are executed.\r\n */\r\nexport interface TestScriptSetup extends fhir.BackboneElement { \r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  action: (fhir.TestScriptSetupAction|null)[]|null;\r\n}\r\n\r\n/**\r\n * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n */\r\nexport interface TestScriptTestAction extends fhir.BackboneElement { \r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  operation?: fhir.TestScriptSetupActionOperation|undefined;\r\n  /**\r\n   * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.\r\n   */\r\n  assert?: fhir.TestScriptSetupActionAssert|undefined;\r\n}\r\n\r\n/**\r\n * A test in this script.\r\n */\r\nexport interface TestScriptTest extends fhir.BackboneElement { \r\n  /**\r\n   * The name of this test used for tracking/logging purposes by test engines.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.test.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * A short description of the test used by test engines for tracking and reporting purposes.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.test.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  action: (fhir.TestScriptTestAction|null)[]|null;\r\n}\r\n\r\n/**\r\n * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n */\r\nexport interface TestScriptTeardownAction extends fhir.BackboneElement { \r\n  /**\r\n   * An operation would involve a REST request to a server.\r\n   */\r\n  operation: fhir.TestScriptSetupActionOperation|null;\r\n}\r\n\r\n/**\r\n * A series of operations required to clean up after all the tests are executed (successfully or otherwise).\r\n */\r\nexport interface TestScriptTeardown extends fhir.BackboneElement { \r\n  /**\r\n   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.\r\n   */\r\n  action: (fhir.TestScriptTeardownAction|null)[]|null;\r\n}\r\n\r\n/**\r\n * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.\r\n */\r\nexport interface TestScript extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"TestScript\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this test script outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: fhir.Identifier|undefined;\r\n  /**\r\n   * There may be different test script instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the test script with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of test scripts that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of test scripts that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test script. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the test script is the organization or individual primarily responsible for the maintenance and upkeep of the test script. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test script. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the test script was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test script as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the test script is presumed to be the predominant language in the place the test script was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the test script to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the test script. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test script.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: TestScript.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.\r\n   */\r\n  origin?: (fhir.TestScriptOrigin|null)[]|undefined;\r\n  /**\r\n   * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.\r\n   */\r\n  destination?: (fhir.TestScriptDestination|null)[]|undefined;\r\n  /**\r\n   * The required capability must exist and are assumed to function correctly on the FHIR server being tested.\r\n   */\r\n  metadata?: fhir.TestScriptMetadata|undefined;\r\n  /**\r\n   * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.\r\n   */\r\n  fixture?: (fhir.TestScriptFixture|null)[]|undefined;\r\n  /**\r\n   * See http://build.fhir.org/resourcelist.html for complete list of resource types.\r\n   */\r\n  profile?: (fhir.Reference|null)[]|undefined;\r\n  /**\r\n   * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.\r\n   */\r\n  variable?: (fhir.TestScriptVariable|null)[]|undefined;\r\n  /**\r\n   * A series of required setup operations before tests are executed.\r\n   */\r\n  setup?: fhir.TestScriptSetup|undefined;\r\n  /**\r\n   * A test in this script.\r\n   */\r\n  test?: (fhir.TestScriptTest|null)[]|undefined;\r\n  /**\r\n   * A series of operations required to clean up after all the tests are executed (successfully or otherwise).\r\n   */\r\n  teardown?: fhir.TestScriptTeardown|undefined;\r\n}\r\n"]}