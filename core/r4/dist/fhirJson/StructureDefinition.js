// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: StructureDefinition
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"StructureDefinition.js","sourceRoot":"./src/","sources":["fhirJson/StructureDefinition.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,qCAAqC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: StructureDefinition\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * An external specification that the content is mapped to.\r\n */\r\nexport interface StructureDefinitionMapping extends fhir.BackboneElement { \r\n  /**\r\n   * The specification is described once, with general comments, and then specific mappings are made that reference this declaration.\r\n   */\r\n  identity: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.mapping.identity\r\n   */\r\n  _identity?:fhir.FhirElement;\r\n  /**\r\n   * A formal identity for the specification being mapped to helps with identifying maps consistently.\r\n   */\r\n  uri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.mapping.uri\r\n   */\r\n  _uri?:fhir.FhirElement;\r\n  /**\r\n   * A name for the specification that is being mapped to.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.mapping.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.\r\n   */\r\n  comment?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.mapping.comment\r\n   */\r\n  _comment?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Identifies the types of resource or data type elements to which the extension can be applied.\r\n */\r\nexport interface StructureDefinitionContext extends fhir.BackboneElement { \r\n  /**\r\n   * Defines how to interpret the expression that defines what the context of the extension is.\r\n   */\r\n  type: 'element'|'extension'|'fhirpath'|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.context.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * An expression that defines where an extension can be used in resources.\r\n   */\r\n  expression: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.context.expression\r\n   */\r\n  _expression?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.\r\n */\r\nexport interface StructureDefinitionSnapshot extends fhir.BackboneElement { \r\n  /**\r\n   * Captures constraints on each element within the resource.\r\n   */\r\n  element: (fhir.ElementDefinition|null)[]|null;\r\n}\r\n\r\n/**\r\n * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.\r\n */\r\nexport interface StructureDefinitionDifferential extends fhir.BackboneElement { \r\n  /**\r\n   * Captures constraints on each element within the resource.\r\n   */\r\n  element: (fhir.ElementDefinition|null)[]|null;\r\n}\r\n\r\n/**\r\n * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.\r\n */\r\nexport interface StructureDefinition extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"StructureDefinition\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure definition outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * There may be different structure definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure definition with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.Some Examples: \r\n   * * O2SatObservation\r\n   * * PresentationReport\r\n   * * Immunization2\r\n   * * AcmeAdmissionRecordOld.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.Applications don't have to use this name but can always fall back to it. The title also corresponds to the label for the root element.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of structure definitions that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of structure definitions that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the structure definition is the organization or individual primarily responsible for the maintenance and upkeep of the structure definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure definition. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the structure definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure definition is presumed to be the predominant language in the place the structure definition was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the structure definition to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the structure definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure definition.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.\r\n   */\r\n  keyword?: (fhir.Coding|null)[]|undefined;\r\n  /**\r\n   * A StructureDefinition does not need to specify the target it applies to as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired.\r\n   */\r\n  fhirVersion?: '0.0.80'|'0.0.81'|'0.0.82'|'0.01'|'0.05'|'0.06'|'0.11'|'0.4.0'|'0.5.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1.0'|'1.4.0'|'1.6.0'|'1.8.0'|'3.0.0'|'3.0.1'|'3.3.0'|'3.5.0'|'4.0.0'|'4.0.1'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.fhirVersion\r\n   */\r\n  _fhirVersion?:fhir.FhirElement;\r\n  /**\r\n   * An external specification that the content is mapped to.\r\n   */\r\n  mapping?: (fhir.StructureDefinitionMapping|null)[]|undefined;\r\n  /**\r\n   * Defines the kind of structure that this definition is describing.\r\n   */\r\n  kind: 'complex-type'|'logical'|'primitive-type'|'resource'|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.kind\r\n   */\r\n  _kind?:fhir.FhirElement;\r\n  /**\r\n   * Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. For logical models, the exact implication of \"abstract\" will rest with the author, depending how the logical model is used. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type \"Element\" in the StructureDefinition, but have children described, are anonymous concrete types that specialize Element.\r\n   */\r\n  abstract: boolean|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.abstract\r\n   */\r\n  _abstract?:fhir.FhirElement;\r\n  /**\r\n   * Identifies the types of resource or data type elements to which the extension can be applied.\r\n   */\r\n  context?: (fhir.StructureDefinitionContext|null)[]|undefined;\r\n  /**\r\n   * The rules are only evaluated when the extension is present. When evaluating the invariant, the FHIRPath focus is the element that holds the extension, and %extension refers to the extension itself.\r\n   */\r\n  contextInvariant?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.contextInvariant\r\n   */\r\n  _contextInvariant?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Note that in the case of constraints, the type could be determined by chasing through the baseDefinition references until a concrete structure (derivation = specialization) is reached, or by looking at the path of the first element in the snapshot - if present - but providing the type directly makes for simpler tooling and indexing. \r\n   * The type must match the elements defined in the differential and the snapshot. For all FHIR defined types, the path name of the element will start with the type name. For logical models, where the type is a URL, the type name SHOULD start with the tail of the type URL where required.\r\n   */\r\n  type: string|null;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * If differential constraints are specified in this structure, they are applied to the base in a \"differential\" fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snapshots from differential constraints. Logical Models have a base of \"Element\" or another logical model.\r\n   */\r\n  baseDefinition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.baseDefinition\r\n   */\r\n  _baseDefinition?:fhir.FhirElement;\r\n  /**\r\n   * If the definition is a specialization, then it adds new elements in the differential, and the snapshot includes the inherited elements.  If the definition is a constraint, then it cannot define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).\r\n   */\r\n  derivation?: 'constraint'|'specialization'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: StructureDefinition.derivation\r\n   */\r\n  _derivation?:fhir.FhirElement;\r\n  /**\r\n   * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.\r\n   */\r\n  snapshot?: fhir.StructureDefinitionSnapshot|undefined;\r\n  /**\r\n   * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.\r\n   */\r\n  differential?: fhir.StructureDefinitionDifferential|undefined;\r\n}\r\n"]}