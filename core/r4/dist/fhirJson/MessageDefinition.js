// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MessageDefinition
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"MessageDefinition.js","sourceRoot":"./src/","sources":["fhirJson/MessageDefinition.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,mCAAmC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: MessageDefinition\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.\r\n */\r\nexport interface MessageDefinitionFocus extends fhir.BackboneElement { \r\n  /**\r\n   * Multiple focuses addressing different resources may occasionally occur.  E.g. to link or unlink a resource from a particular account or encounter, etc.\r\n   */\r\n  code: 'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EffectEvidenceSynthesis'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.focus.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * This should be present for most message definitions.  However, if the message focus is only a single resource and there is no need to include referenced resources or otherwise enforce the presence of particular elements, it can be omitted.\r\n   */\r\n  profile?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.focus.profile\r\n   */\r\n  _profile?:fhir.FhirElement;\r\n  /**\r\n   * Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.\r\n   */\r\n  min: number|null;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.focus.min\r\n   */\r\n  _min?:fhir.FhirElement;\r\n  /**\r\n   * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.\r\n   */\r\n  max?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.focus.max\r\n   */\r\n  _max?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * This indicates an application level response to \"close\" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.\r\n */\r\nexport interface MessageDefinitionAllowedResponse extends fhir.BackboneElement { \r\n  /**\r\n   * A reference to the message definition that must be adhered to by this supported response.\r\n   */\r\n  message: string|null;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.allowedResponse.message\r\n   */\r\n  _message?:fhir.FhirElement;\r\n  /**\r\n   * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).\r\n   */\r\n  situation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.allowedResponse.situation\r\n   */\r\n  _situation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.\r\n */\r\nexport interface MessageDefinition extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"MessageDefinition\"|null;\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this message definition outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: (fhir.Identifier|null)[]|undefined;\r\n  /**\r\n   * There may be different message definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the message definition with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * A MessageDefinition that is superseded by this definition.\r\n   */\r\n  replaces?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.replaces\r\n   */\r\n  _replaces?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Allows filtering of message definitions that are appropriate for use versus not.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of message definitions that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the message definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date: string|null;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the message definition is the organization or individual primarily responsible for the maintenance and upkeep of the message definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the message definition. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: (fhir.ContactDetail|null)[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the message definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the message definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the message definition is presumed to be the predominant language in the place the message definition was created).\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: (fhir.UsageContext|null)[]|undefined;\r\n  /**\r\n   * It may be possible for the message definition to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: (fhir.CodeableConcept|null)[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the message definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this message definition.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The MessageDefinition that is the basis for the contents of this resource.\r\n   */\r\n  base?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.base\r\n   */\r\n  _base?:fhir.FhirElement;\r\n  /**\r\n   * It should be possible to use MessageDefinition to describe a message to be used by certain steps in a particular protocol as part of a PlanDefinition or ActivityDefinition.\r\n   */\r\n  parent?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.parent\r\n   */\r\n  _parent?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Event code or link to the EventDefinition.\r\n   */\r\n  eventCoding?: fhir.Coding|undefined;\r\n  /**\r\n   * Event code or link to the EventDefinition.\r\n   */\r\n  eventUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.event[x]\r\n   */\r\n  _eventUri?:fhir.FhirElement;\r\n  /**\r\n   * The impact of the content of the message.\r\n   */\r\n  category?: 'consequence'|'currency'|'notification'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.category\r\n   */\r\n  _category?:fhir.FhirElement;\r\n  /**\r\n   * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.\r\n   */\r\n  focus?: (fhir.MessageDefinitionFocus|null)[]|undefined;\r\n  /**\r\n   * This enables the capability currently available through MSH-16 (Application Level acknowledgement) in HL7 Version 2 to declare at a message instance level whether a response is required or only upon error or success, or never.\r\n   */\r\n  responseRequired?: 'always'|'never'|'on-error'|'on-success'|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.responseRequired\r\n   */\r\n  _responseRequired?:fhir.FhirElement;\r\n  /**\r\n   * This indicates an application level response to \"close\" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.\r\n   */\r\n  allowedResponse?: (fhir.MessageDefinitionAllowedResponse|null)[]|undefined;\r\n  /**\r\n   * Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a [GraphDefinition](graphdefinition.html) that it controls what resources are to be added to the bundle when building the document. The GraphDefinition can also specify profiles that apply to the various resources.\r\n   */\r\n  graph?: (string|null)[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: MessageDefinition.graph\r\n   */\r\n  _graph?:(fhir.FhirElement|null)[];\r\n}\r\n"]}