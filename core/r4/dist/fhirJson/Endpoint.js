// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Endpoint
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5kcG9pbnQuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9FbmRwb2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IEVuZHBvaW50XHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogVGhlIHRlY2huaWNhbCBkZXRhaWxzIG9mIGFuIGVuZHBvaW50IHRoYXQgY2FuIGJlIHVzZWQgZm9yIGVsZWN0cm9uaWMgc2VydmljZXMsIHN1Y2ggYXMgZm9yIHdlYiBzZXJ2aWNlcyBwcm92aWRpbmcgWERTLmIgb3IgYSBSRVNUIGVuZHBvaW50IGZvciBhbm90aGVyIEZISVIgc2VydmVyLiBUaGlzIG1heSBpbmNsdWRlIGFueSBzZWN1cml0eSBjb250ZXh0IGluZm9ybWF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFbmRwb2ludCBleHRlbmRzIGZoaXIuRG9tYWluUmVzb3VyY2UgeyBcclxuICAvKipcclxuICAgKiBSZXNvdXJjZSBUeXBlIE5hbWVcclxuICAgKi9cclxuICByZXNvdXJjZVR5cGU6IFwiRW5kcG9pbnRcIjtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVyIGZvciB0aGUgb3JnYW5pemF0aW9uIHRoYXQgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgZW5kcG9pbnQgYWNyb3NzIG11bHRpcGxlIGRpc3BhcmF0ZSBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIGlkZW50aWZpZXI/OiBmaGlyLklkZW50aWZpZXJbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGlzIGxhYmVsZWQgYXMgYSBtb2RpZmllciBiZWNhdXNlIHRoZSBzdGF0dXMgY29udGFpbnMgY29kZXMgdGhhdCBtYXJrIHRoZSBlbmRwb2ludCBhcyBub3QgY3VycmVudGx5IHZhbGlkLlxyXG4gICAqL1xyXG4gIHN0YXR1czogJ2FjdGl2ZSd8J2VudGVyZWQtaW4tZXJyb3InfCdlcnJvcid8J29mZid8J3N1c3BlbmRlZCd8J3Rlc3QnfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRm9yIGFkZGl0aW9uYWwgY29ubmVjdGl2aXR5IGRldGFpbHMgZm9yIHRoZSBwcm90b2NvbCwgZXh0ZW5zaW9ucyB3aWxsIGJlIHVzZWQgYXQgdGhpcyBwb2ludCwgYXMgaW4gdGhlIFhEUyBleGFtcGxlLlxyXG4gICAqL1xyXG4gIGNvbm5lY3Rpb25UeXBlOiBmaGlyLkNvZGluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEEgZnJpZW5kbHkgbmFtZSB0aGF0IHRoaXMgZW5kcG9pbnQgY2FuIGJlIHJlZmVycmVkIHRvIHdpdGguXHJcbiAgICovXHJcbiAgbmFtZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEVuZHBvaW50Lm5hbWVcclxuICAgKi9cclxuICBfbmFtZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIG5vdCB0eXBpY2FsbHkgdXNlZCB3aGVuIHNlYXJjaGluZyBmb3IgRW5kcG9pbnQgcmVzb3VyY2VzIGZvciB1c2FnZS4gVGhlIHR5cGljYWwgdXNhZ2UgaXMgdmlhIHRoZSByZWZlcmVuY2UgZnJvbSBhbiBhcHBsaWNhYmxlIE9yZ2FuaXphdGlvbi9Mb2NhdGlvbi9QcmFjdGl0aW9uZXIgcmVzb3VyY2UsIHdoaWNoIGlzIHdoZXJlIHRoZSBjb250ZXh0IGlzIHByb3ZpZGVkLiBNdWx0aXBsZSBMb2NhdGlvbnMgbWF5IHJlZmVyZW5jZSBhIHNpbmdsZSBlbmRwb2ludCwgYW5kIGRvbid0IGhhdmUgdG8gYmUgd2l0aGluIHRoZSBzYW1lIG9yZ2FuaXphdGlvbiByZXNvdXJjZSwgYnV0IG1vc3QgbGlrZWx5IHdpdGhpbiB0aGUgc2FtZSBvcmdhbml6YXRpb25hbCBoaWVyYXJjaHkuXHJcbiAgICovXHJcbiAgbWFuYWdpbmdPcmdhbml6YXRpb24/OiBmaGlyLlJlZmVyZW5jZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogQ29udGFjdCBkZXRhaWxzIGZvciBhIGh1bWFuIHRvIGNvbnRhY3QgYWJvdXQgdGhlIHN1YnNjcmlwdGlvbi4gVGhlIHByaW1hcnkgdXNlIG9mIHRoaXMgZm9yIHN5c3RlbSBhZG1pbmlzdHJhdG9yIHRyb3VibGVzaG9vdGluZy5cclxuICAgKi9cclxuICBjb250YWN0PzogZmhpci5Db250YWN0UG9pbnRbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGludGVydmFsIGR1cmluZyB3aGljaCB0aGUgZW5kcG9pbnQgaXMgZXhwZWN0ZWQgdG8gYmUgb3BlcmF0aW9uYWwuXHJcbiAgICovXHJcbiAgcGVyaW9kPzogZmhpci5QZXJpb2R8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwYXlsb2FkRm9ybWF0IGRlc2NyaWJlcyB0aGUgc2VyaWFsaXphdGlvbiBmb3JtYXQgb2YgdGhlIGRhdGEsIHdoZXJlIHRoZSBwYXlsb2FkVHlwZSBpbmRpY2F0ZXMgdGhlIHNwZWNpZmljIGRvY3VtZW50L3NjaGVtYSB0aGF0IGlzIGJlaW5nIHRyYW5zZmVycmVkOyBlLmcuIERpc2NoYXJnZVN1bW1hcnkgb3IgQ2FyZVBsYW4uXHJcbiAgICovXHJcbiAgcGF5bG9hZFR5cGU6IGZoaXIuQ29kZWFibGVDb25jZXB0W118bnVsbDtcclxuICAvKipcclxuICAgKiBTZW5kaW5nIHRoZSBwYXlsb2FkIGhhcyBvYnZpb3VzIHNlY3VyaXR5IGNvbnNlcXVlbmNlcy4gVGhlIHNlcnZlciBpcyByZXNwb25zaWJsZSBmb3IgZW5zdXJpbmcgdGhhdCB0aGUgY29udGVudCBpcyBhcHByb3ByaWF0ZWx5IHNlY3VyZWQuXHJcbiAgICovXHJcbiAgcGF5bG9hZE1pbWVUeXBlPzogc3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBFbmRwb2ludC5wYXlsb2FkTWltZVR5cGVcclxuICAgKi9cclxuICBfcGF5bG9hZE1pbWVUeXBlPzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIEZvciByZXN0LWhvb2ssIGFuZCB3ZWJzb2NrZXQsIHRoZSBlbmQtcG9pbnQgbXVzdCBiZSBhbiBodHRwOiBvciBodHRwczogVVJMOyBmb3IgZW1haWwsIGEgbWFpbHRvOiB1cmwsIGZvciBzbXMsIGEgdGVsOiB1cmwsIGFuZCBmb3IgbWVzc2FnZSB0aGUgZW5kcG9pbnQgY2FuIGJlIGluIGFueSBmb3JtIG9mIHVybCB0aGUgc2VydmVyIHVuZGVyc3RhbmRzICh1c3VhbGx5LCBodHRwOiBvciBtbGxwOikuIFRoZSBVUkkgaXMgYWxsb3dlZCB0byBiZSByZWxhdGl2ZTsgaW4gd2hpY2ggY2FzZSwgaXQgaXMgcmVsYXRpdmUgdG8gdGhlIHNlcnZlciBlbmQtcG9pbnQgKHNpbmNlIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lLCBjbGllbnRzIHNob3VsZCBhdm9pZCB1c2luZyByZWxhdGl2ZSBVUklzKVxyXG4gICAqIFRoaXMgYWRkcmVzcyB3aWxsIGJlIHRvIHRoZSBzZXJ2aWNlIGJhc2UsIHdpdGhvdXQgYW55IHBhcmFtZXRlcnMsIG9yIHN1Yi1zZXJ2aWNlcyBvciByZXNvdXJjZXMgdGFja2VkIG9uLlxyXG4gICAqIEUuZy4gZm9yIGEgV0FETy1SUyBlbmRwb2ludCwgdGhlIHVybCBzaG91bGQgYmUgXCJodHRwczovL3BhY3MuaG9zcGl0YWwub3JnL3dhZG8tcnNcIlxyXG4gICAqIGFuZCBub3QgXCJodHRwczovL3BhY3MuaG9zcGl0YWwub3JnL3dhZG8tcnMvc3R1ZGllcy8xLjIuMjUwLjEuNTkuNDAyMTEuMTIzNDU2NzguNjc4OTEwL3Nlcmllcy8xLjIuMjUwLjEuNTkuNDAyMTEuNzg5MDAxMjc2LjE0NTU2MTcyLjY3Nzg5L2luc3RhbmNlcy8uLi5cIi5cclxuICAgKi9cclxuICBhZGRyZXNzOiBzdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogRW5kcG9pbnQuYWRkcmVzc1xyXG4gICAqL1xyXG4gIF9hZGRyZXNzPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEV4YWN0bHkgd2hhdCB0aGVzZSBtZWFuIGRlcGVuZHMgb24gdGhlIGNoYW5uZWwgdHlwZS4gVGhlIGNhbiBjb252ZXkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgcmVjaXBpZW50IGFuZC9vciBtZWV0IHNlY3VyaXR5IHJlcXVpcmVtZW50cy5cclxuICAgKi9cclxuICBoZWFkZXI/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IEVuZHBvaW50LmhlYWRlclxyXG4gICAqL1xyXG4gIF9oZWFkZXI/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbn1cclxuIl19