// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ValueSet
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ValueSet.js","sourceRoot":"./src/","sources":["fhirJson/ValueSet.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,0BAA0B","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: ValueSet\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of \"primary code\" and a language equal to the [Resource Language](resource.html#language).\r\n */\r\nexport interface ValueSetComposeIncludeConceptDesignation extends fhir.BackboneElement { \r\n  /**\r\n   * In the absence of a language, the resource language applies.\r\n   */\r\n  language?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.concept.designation.language\r\n   */\r\n  _language?:fhir.FhirElement;\r\n  /**\r\n   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.\r\n   */\r\n  use?: fhir.Coding|undefined;\r\n  /**\r\n   * The text value for this designation.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.concept.designation.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.\r\n */\r\nexport interface ValueSetComposeIncludeConcept extends fhir.BackboneElement { \r\n  /**\r\n   * Expressions are allowed if defined by the underlying code system.\r\n   */\r\n  code: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.concept.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.concept.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of \"primary code\" and a language equal to the [Resource Language](resource.html#language).\r\n   */\r\n  designation?: fhir.ValueSetComposeIncludeConceptDesignation[]|undefined;\r\n}\r\n\r\n/**\r\n * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.\r\n */\r\nexport interface ValueSetComposeIncludeFilter extends fhir.BackboneElement { \r\n  /**\r\n   * A code that identifies a property or a filter defined in the code system.\r\n   */\r\n  property: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.filter.property\r\n   */\r\n  _property?:fhir.FhirElement;\r\n  /**\r\n   * In case filter.property represents a property of the system, the operation applies to the selected property. In case filter.property represents a filter of the system, the operation SHALL match one of the CodeSystem.filter.operator values.\r\n   */\r\n  op: '='|'descendent-of'|'exists'|'generalizes'|'in'|'is-a'|'is-not-a'|'not-in'|'regex'|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.filter.op\r\n   */\r\n  _op?:fhir.FhirElement;\r\n  /**\r\n   * Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example.\r\n   */\r\n  value: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.filter.value\r\n   */\r\n  _value?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.\r\n */\r\nexport interface ValueSetComposeInclude extends fhir.BackboneElement { \r\n  /**\r\n   * If there are no codes or filters, the entire code system is included. Note that the set of codes that are included may contain abstract codes. See ''Coding.system'' for further documentation about the correct value for the system element.\r\n   */\r\n  system?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.system\r\n   */\r\n  _system?:fhir.FhirElement;\r\n  /**\r\n   * This is used when selecting the descendants of a concept - they may change between versions. If no version is specified, then the exact contents of the value set might not be known until a context of use binds it to a particular version. The special value '*' means all versions; It is at server discretion regarding expansions and which versions must be supported.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.\r\n   */\r\n  concept?: fhir.ValueSetComposeIncludeConcept[]|undefined;\r\n  /**\r\n   * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.\r\n   */\r\n  filter?: fhir.ValueSetComposeIncludeFilter[]|undefined;\r\n  /**\r\n   * The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set](snomedct.html#implicit), or a direct reference to a value set definition using ValueSet.url. The reference might not refer to an actual FHIR ValueSet resource; in this case, whatever is referred to is an implicit definition of a value set that needs to be clear about how versions are resolved.\r\n   */\r\n  valueSet?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.include.valueSet\r\n   */\r\n  _valueSet?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).\r\n */\r\nexport interface ValueSetCompose extends fhir.BackboneElement { \r\n  /**\r\n   * With a defined lockedDate the value set is considered \"Locked\". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable.\r\n   */\r\n  lockedDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.lockedDate\r\n   */\r\n  _lockedDate?:fhir.FhirElement;\r\n  /**\r\n   * Note that in the FHIR terminology framework, \"deprecated\" does not mean inactive, but in some code systems, e.g. LOINC, \"deprecated\" does mean inactive. Code systems should define what codes are considered to be inactive. If this is not clearly defined (including in the FHIR code system resource), then all codes are assumed to be active.\r\n   * The Value Set Definition specification defines an ActiveOnly element, which is the reverse of this element e.g. (ValueSet.compose.inactive=FALSE) is the same as (VSD.ActiveOnly=TRUE).\r\n   */\r\n  inactive?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.compose.inactive\r\n   */\r\n  _inactive?:fhir.FhirElement;\r\n  /**\r\n   * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.\r\n   */\r\n  include: fhir.ValueSetComposeInclude[]|null;\r\n  /**\r\n   * Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored.\r\n   */\r\n  exclude?: fhir.ValueSetComposeInclude[]|undefined;\r\n}\r\n\r\n/**\r\n * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).\r\n */\r\nexport interface ValueSetExpansionParameter extends fhir.BackboneElement { \r\n  /**\r\n   * The names are assigned at the discretion of the server.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueString?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueString?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueBoolean?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueBoolean?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueInteger?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueInteger?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueDecimal?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueDecimal?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueUri?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueUri?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueCode?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueCode?:fhir.FhirElement;\r\n  /**\r\n   * The value of the parameter.\r\n   */\r\n  valueDateTime?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.parameter.value[x]\r\n   */\r\n  _valueDateTime?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The codes that are contained in the value set expansion.\r\n */\r\nexport interface ValueSetExpansionContains extends fhir.BackboneElement { \r\n  /**\r\n   * An absolute URI which is the code system in which the code for this item in the expansion is defined.\r\n   */\r\n  system?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.system\r\n   */\r\n  _system?:fhir.FhirElement;\r\n  /**\r\n   * This should not be understood to exclude its use for searching (e.g. by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not.\r\n   */\r\n  abstract?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.abstract\r\n   */\r\n  _abstract?:fhir.FhirElement;\r\n  /**\r\n   * This should only have a value if the concept is inactive.\r\n   */\r\n  inactive?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.inactive\r\n   */\r\n  _inactive?:fhir.FhirElement;\r\n  /**\r\n   * The exact value of the version string is specified by the system from which the code is derived.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.\r\n   */\r\n  code?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.code\r\n   */\r\n  _code?:fhir.FhirElement;\r\n  /**\r\n   * The recommended display for this item in the expansion.\r\n   */\r\n  display?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.contains.display\r\n   */\r\n  _display?:fhir.FhirElement;\r\n  /**\r\n   * The designations provided must be based on the value set and code system definitions.\r\n   */\r\n  designation?: fhir.ValueSetComposeIncludeConceptDesignation[]|undefined;\r\n  /**\r\n   * If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.\r\n   */\r\n  contains?: fhir.ValueSetExpansionContains[]|undefined;\r\n}\r\n\r\n/**\r\n * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.\r\n * Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.\r\n */\r\nexport interface ValueSetExpansion extends fhir.BackboneElement { \r\n  /**\r\n   * Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd).\r\n   */\r\n  identifier?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.identifier\r\n   */\r\n  _identifier?:fhir.FhirElement;\r\n  /**\r\n   * This SHOULD be a fully populated instant, but in some circumstances, value sets are expanded by hand, and the expansion is published without that precision.\r\n   */\r\n  timestamp: string|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.timestamp\r\n   */\r\n  _timestamp?:fhir.FhirElement;\r\n  /**\r\n   * Paging only applies to flat expansions.\r\n   */\r\n  total?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.total\r\n   */\r\n  _total?:fhir.FhirElement;\r\n  /**\r\n   * Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion.\r\n   */\r\n  offset?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.expansion.offset\r\n   */\r\n  _offset?:fhir.FhirElement;\r\n  /**\r\n   * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).\r\n   */\r\n  parameter?: fhir.ValueSetExpansionParameter[]|undefined;\r\n  /**\r\n   * The codes that are contained in the value set expansion.\r\n   */\r\n  contains?: fhir.ValueSetExpansionContains[]|undefined;\r\n}\r\n\r\n/**\r\n * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).\r\n */\r\nexport interface ValueSet extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"ValueSet\";\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this value set outside of FHIR, where it is not possible to use the logical URI.\r\n   */\r\n  identifier?: fhir.Identifier[]|undefined;\r\n  /**\r\n   * There may be different value set instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the value set with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of value sets that are appropriate for use versus not.See also the [valueset-workflowStatus](extension-valueset-workflowstatus.html) extension for additional status information related to the editorial process.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.status\r\n   */\r\n  _status?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of value sets that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the value set. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the value set is the organization or individual primarily responsible for the maintenance and upkeep of the value set. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the value set. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the value set was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the value set as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the value set is presumed to be the predominant language in the place the value set was created).The description is not intended to describe the semantics of the Value Set - there are no intrinsic semantics separate from the codes contained in its expansion. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes. A description should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a description.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: fhir.UsageContext[]|undefined;\r\n  /**\r\n   * It may be possible for the value set to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * Normally immutability is set to 'false', which is the default assumption if it is not populated.  Note that the implication is that if this is set to 'true', there may be only one ValueSet version for this definition. Immutability tends to be set to 'true' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example \"All specializations of ACT in ActClassCode\" - Where there's no safe way to express the \"Purpose\" such that someone else could safely make changes to the value set definition. Source workflow control must guarantee that the same URI always yields the same definition.\r\n   */\r\n  immutable?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.immutable\r\n   */\r\n  _immutable?:fhir.FhirElement;\r\n  /**\r\n   * This element does not describe the usage of the value set. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this value set.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: ValueSet.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).\r\n   */\r\n  compose?: fhir.ValueSetCompose|undefined;\r\n  /**\r\n   * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.\r\n   * Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.\r\n   */\r\n  expansion?: fhir.ValueSetExpansion|undefined;\r\n}\r\n"]}