// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TerminologyCapabilities
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9UZXJtaW5vbG9neUNhcGFiaWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5Q0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogU29mdHdhcmUgdGhhdCBpcyBjb3ZlcmVkIGJ5IHRoaXMgdGVybWlub2xvZ3kgY2FwYWJpbGl0eSBzdGF0ZW1lbnQuICBJdCBpcyB1c2VkIHdoZW4gdGhlIHN0YXRlbWVudCBkZXNjcmliZXMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIHBhcnRpY3VsYXIgc29mdHdhcmUgdmVyc2lvbiwgaW5kZXBlbmRlbnQgb2YgYW4gaW5zdGFsbGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXJtaW5vbG9neUNhcGFiaWxpdGllc1NvZnR3YXJlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBOYW1lIHRoZSBzb2Z0d2FyZSBpcyBrbm93biBieS5cclxuICAgKi9cclxuICBuYW1lOiBzdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuc29mdHdhcmUubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElmIHBvc3NpYmxlLCBhIHZlcnNpb24gc2hvdWxkIGJlIHNwZWNpZmllZCwgYXMgc3RhdGVtZW50cyBhcmUgbGlrZWx5IHRvIGJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IHZlcnNpb25zIG9mIHNvZnR3YXJlLlxyXG4gICAqL1xyXG4gIHZlcnNpb24/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5zb2Z0d2FyZS52ZXJzaW9uXHJcbiAgICovXHJcbiAgX3ZlcnNpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJZGVudGlmaWVzIGEgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gaW5zdGFuY2UgdGhhdCBpcyBkZXNjcmliZWQgYnkgdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdHkgc3RhdGVtZW50IC0gaS5lLiBhIHBhcnRpY3VsYXIgaW5zdGFsbGF0aW9uLCByYXRoZXIgdGhhbiB0aGUgY2FwYWJpbGl0aWVzIG9mIGEgc29mdHdhcmUgcHJvZ3JhbS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNJbXBsZW1lbnRhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIHNwZWNpZmljIGluc3RhbGxhdGlvbiB0aGF0IHRoaXMgdGVybWlub2xvZ3kgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgcmVsYXRlcyB0by5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbjogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmltcGxlbWVudGF0aW9uLmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEFuIGFic29sdXRlIGJhc2UgVVJMIGZvciB0aGUgaW1wbGVtZW50YXRpb24uXHJcbiAgICovXHJcbiAgdXJsPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuaW1wbGVtZW50YXRpb24udXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbHRlciBQcm9wZXJ0aWVzIHN1cHBvcnRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNDb2RlU3lzdGVtVmVyc2lvbkZpbHRlciBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogQ29kZSBvZiB0aGUgcHJvcGVydHkgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIGNvZGU6IHN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5jb2RlU3lzdGVtLnZlcnNpb24uZmlsdGVyLmNvZGVcclxuICAgKi9cclxuICBfY29kZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBPcGVyYXRpb25zIHN1cHBvcnRlZCBmb3IgdGhlIHByb3BlcnR5LlxyXG4gICAqL1xyXG4gIG9wOiAoc3RyaW5nfG51bGwpW118bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuY29kZVN5c3RlbS52ZXJzaW9uLmZpbHRlci5vcFxyXG4gICAqL1xyXG4gIF9vcD86KGZoaXIuRmhpckVsZW1lbnR8bnVsbClbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIExhbmd1YWdlIHRyYW5zbGF0aW9ucyBtaWdodCBub3QgYmUgYXZhaWxhYmxlIGZvciBhbGwgY29kZXMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzQ29kZVN5c3RlbVZlcnNpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIEZvciB2ZXJzaW9uLWxlc3MgY29kZSBzeXN0ZW1zLCB0aGVyZSBzaG91bGQgYmUgYSBzaW5nbGUgdmVyc2lvbiB3aXRoIG5vIGlkZW50aWZpZXIuXHJcbiAgICovXHJcbiAgY29kZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNvZGVTeXN0ZW0udmVyc2lvbi5jb2RlXHJcbiAgICovXHJcbiAgX2NvZGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogSWYgdGhpcyBpcyB0aGUgZGVmYXVsdCB2ZXJzaW9uIGZvciB0aGlzIGNvZGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIGlzRGVmYXVsdD86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5jb2RlU3lzdGVtLnZlcnNpb24uaXNEZWZhdWx0XHJcbiAgICovXHJcbiAgX2lzRGVmYXVsdD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJZiB0aGUgY29tcG9zaXRpb25hbCBncmFtbWFyIGRlZmluZWQgYnkgdGhlIGNvZGUgc3lzdGVtIGlzIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBjb21wb3NpdGlvbmFsPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNvZGVTeXN0ZW0udmVyc2lvbi5jb21wb3NpdGlvbmFsXHJcbiAgICovXHJcbiAgX2NvbXBvc2l0aW9uYWw/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogTGFuZ3VhZ2UgRGlzcGxheXMgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIGxhbmd1YWdlPzogKHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuY29kZVN5c3RlbS52ZXJzaW9uLmxhbmd1YWdlXHJcbiAgICovXHJcbiAgX2xhbmd1YWdlPzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG4gIC8qKlxyXG4gICAqIEZpbHRlciBQcm9wZXJ0aWVzIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBmaWx0ZXI/OiAoZmhpci5UZXJtaW5vbG9neUNhcGFiaWxpdGllc0NvZGVTeXN0ZW1WZXJzaW9uRmlsdGVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFByb3BlcnRpZXMgc3VwcG9ydGVkIGZvciAkbG9va3VwLlxyXG4gICAqL1xyXG4gIHByb3BlcnR5PzogKHN0cmluZ3xudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuY29kZVN5c3RlbS52ZXJzaW9uLnByb3BlcnR5XHJcbiAgICovXHJcbiAgX3Byb3BlcnR5PzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGNvZGUgc3lzdGVtIC0gaWRlbnRpZmllZCBieSBpdHMgc3lzdGVtIFVSTCAtIG1heSBhbHNvIGJlIGRlY2xhcmVkIGV4cGxpY2l0bHkgYXMgYSBDb2RlIFN5c3RlbSBSZXNvdXJjZSBhdCAvQ29kZVN5c3RlbSwgYnV0IGl0IG1pZ2h0IG5vdCBiZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNDb2RlU3lzdGVtIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBVUkkgZm9yIHRoZSBDb2RlIFN5c3RlbS5cclxuICAgKi9cclxuICB1cmk/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5jb2RlU3lzdGVtLnVyaVxyXG4gICAqL1xyXG4gIF91cmk/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogTGFuZ3VhZ2UgdHJhbnNsYXRpb25zIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgZm9yIGFsbCBjb2Rlcy5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogKGZoaXIuVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNDb2RlU3lzdGVtVmVyc2lvbnxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUcnVlIGlmIHN1YnN1bXB0aW9uIGlzIHN1cHBvcnRlZCBmb3IgdGhpcyB2ZXJzaW9uIG9mIHRoZSBjb2RlIHN5c3RlbS5cclxuICAgKi9cclxuICBzdWJzdW1wdGlvbj86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5jb2RlU3lzdGVtLnN1YnN1bXB0aW9uXHJcbiAgICovXHJcbiAgX3N1YnN1bXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogU3VwcG9ydGVkIGV4cGFuc2lvbiBwYXJhbWV0ZXIuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzRXhwYW5zaW9uUGFyYW1ldGVyIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBFeHBhbnNpb24gUGFyYW1ldGVyIG5hbWUuXHJcbiAgICovXHJcbiAgbmFtZTogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmV4cGFuc2lvbi5wYXJhbWV0ZXIubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIERlc2NyaXB0aW9uIG9mIHN1cHBvcnQgZm9yIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBkb2N1bWVudGF0aW9uPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuZXhwYW5zaW9uLnBhcmFtZXRlci5kb2N1bWVudGF0aW9uXHJcbiAgICovXHJcbiAgX2RvY3VtZW50YXRpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgW1ZhbHVlU2V0LyRleHBhbmRdKHZhbHVlc2V0LW9wZXJhdGlvbi1leHBhbmQuaHRtbCkgb3BlcmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXJtaW5vbG9neUNhcGFiaWxpdGllc0V4cGFuc2lvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgc2VydmVyIGNhbiByZXR1cm4gbmVzdGVkIHZhbHVlIHNldHMuXHJcbiAgICovXHJcbiAgaGllcmFyY2hpY2FsPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmV4cGFuc2lvbi5oaWVyYXJjaGljYWxcclxuICAgKi9cclxuICBfaGllcmFyY2hpY2FsPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIHNlcnZlciBzdXBwb3J0cyBwYWdpbmcgb24gZXhwYW5zaW9uLlxyXG4gICAqL1xyXG4gIHBhZ2luZz86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5leHBhbnNpb24ucGFnaW5nXHJcbiAgICovXHJcbiAgX3BhZ2luZz86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBbGxvdyByZXF1ZXN0IGZvciBpbmNvbXBsZXRlIGV4cGFuc2lvbnM/XHJcbiAgICovXHJcbiAgaW5jb21wbGV0ZT86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5leHBhbnNpb24uaW5jb21wbGV0ZVxyXG4gICAqL1xyXG4gIF9pbmNvbXBsZXRlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFN1cHBvcnRlZCBleHBhbnNpb24gcGFyYW1ldGVyLlxyXG4gICAqL1xyXG4gIHBhcmFtZXRlcj86IChmaGlyLlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzRXhwYW5zaW9uUGFyYW1ldGVyfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZG9jdW1lbnRhdGlvbiBzaG91bGQgY292ZXIgdGhpbmdzIGxpa2UgY2FzZSBzZW5zaXRpdml0eSwgIHVzZSBvZiBwdW5jdHVhdGlvbiBpZiBub3QgaWdub3JlZCwgd2hhdCB3aWxkIGNhcmRzIGFyZSBzdXBwb3J0ZWQgKGlmIGFueSksIHdoZXRoZXIgdGV4dCBpcyBzdGFydHMgd2l0aCBvciBjb250YWlucywgYW5kIHdoZXRoZXIgd29yZCBvcmRlciBtYXR0ZXJzLlxyXG4gICAqL1xyXG4gIHRleHRGaWx0ZXI/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5leHBhbnNpb24udGV4dEZpbHRlclxyXG4gICAqL1xyXG4gIF90ZXh0RmlsdGVyPzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIFtWYWx1ZVNldC8kdmFsaWRhdGUtY29kZV0odmFsdWVzZXQtb3BlcmF0aW9uLXZhbGlkYXRlLWNvZGUuaHRtbCkgb3BlcmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXJtaW5vbG9neUNhcGFiaWxpdGllc1ZhbGlkYXRlQ29kZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0cmFuc2xhdGlvbnMgYXJlIHZhbGlkYXRlZC5cclxuICAgKi9cclxuICB0cmFuc2xhdGlvbnM6IGJvb2xlYW58bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMudmFsaWRhdGVDb2RlLnRyYW5zbGF0aW9uc1xyXG4gICAqL1xyXG4gIF90cmFuc2xhdGlvbnM/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgW0NvbmNlcHRNYXAvJHRyYW5zbGF0ZV0oY29uY2VwdG1hcC1vcGVyYXRpb24tdHJhbnNsYXRlLmh0bWwpIG9wZXJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNUcmFuc2xhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgY2xpZW50IG11c3QgaWRlbnRpZnkgdGhlIG1hcC5cclxuICAgKi9cclxuICBuZWVkc01hcDogYm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy50cmFuc2xhdGlvbi5uZWVkc01hcFxyXG4gICAqL1xyXG4gIF9uZWVkc01hcD86Zmhpci5GaGlyRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdoZXRoZXIgdGhlICRjbG9zdXJlIG9wZXJhdGlvbiBpcyBzdXBwb3J0ZWQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzQ2xvc3VyZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogSWYgY3Jvc3Mtc3lzdGVtIGNsb3N1cmUgaXMgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIHRyYW5zbGF0aW9uPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNsb3N1cmUudHJhbnNsYXRpb25cclxuICAgKi9cclxuICBfdHJhbnNsYXRpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzIHJlc291cmNlIGRvY3VtZW50cyBhIHNldCBvZiBjYXBhYmlsaXRpZXMgKGJlaGF2aW9ycykgb2YgYSBGSElSIFRlcm1pbm9sb2d5IFNlcnZlciB0aGF0IG1heSBiZSB1c2VkIGFzIGEgc3RhdGVtZW50IG9mIGFjdHVhbCBzZXJ2ZXIgZnVuY3Rpb25hbGl0eSBvciBhIHN0YXRlbWVudCBvZiByZXF1aXJlZCBvciBkZXNpcmVkIHNlcnZlciBpbXBsZW1lbnRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHsgXHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzXCJ8bnVsbDtcclxuICAvKipcclxuICAgKiBDYW4gYmUgYSB1cm46dXVpZDogb3IgYSB1cm46b2lkOiBidXQgcmVhbCBodHRwOiBhZGRyZXNzZXMgYXJlIHByZWZlcnJlZC4gIE11bHRpcGxlIGluc3RhbmNlcyBtYXkgc2hhcmUgdGhlIHNhbWUgVVJMIGlmIHRoZXkgaGF2ZSBhIGRpc3RpbmN0IHZlcnNpb24uXHJcbiAgICogVGhlIGRldGVybWluYXRpb24gb2Ygd2hlbiB0byBjcmVhdGUgYSBuZXcgdmVyc2lvbiBvZiBhIHJlc291cmNlIChzYW1lIHVybCwgbmV3IHZlcnNpb24pIHZzLiBkZWZpbmluZyBhIG5ldyBhcnRpZmFjdCBpcyB1cCB0byB0aGUgYXV0aG9yLiAgQ29uc2lkZXJhdGlvbnMgZm9yIG1ha2luZyB0aGlzIGRlY2lzaW9uIGFyZSBmb3VuZCBpbiBbVGVjaG5pY2FsIGFuZCBCdXNpbmVzcyBWZXJzaW9uc10ocmVzb3VyY2UuaHRtbCN2ZXJzaW9ucykuIFxyXG4gICAqIEluIHNvbWUgY2FzZXMsIHRoZSByZXNvdXJjZSBjYW4gbm8gbG9uZ2VyIGJlIGZvdW5kIGF0IHRoZSBzdGF0ZWQgdXJsLCBidXQgdGhlIHVybCBpdHNlbGYgY2Fubm90IGNoYW5nZS4gSW1wbGVtZW50YXRpb25zIGNhbiB1c2UgdGhlIFttZXRhLnNvdXJjZV0ocmVzb3VyY2UuaHRtbCNtZXRhKSBlbGVtZW50IHRvIGluZGljYXRlIHdoZXJlIHRoZSBjdXJyZW50IG1hc3RlciBzb3VyY2Ugb2YgdGhlIHJlc291cmNlIGNhbiBiZSBmb3VuZC5cclxuICAgKi9cclxuICB1cmw/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy51cmxcclxuICAgKi9cclxuICBfdXJsPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIG1heSBiZSBkaWZmZXJlbnQgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzIGluc3RhbmNlcyB0aGF0IGhhdmUgdGhlIHNhbWUgaWRlbnRpZmllciBidXQgZGlmZmVyZW50IHZlcnNpb25zLiAgVGhlIHZlcnNpb24gY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSB1cmwgaW4gYSByZWZlcmVuY2UgdG8gYWxsb3cgYSByZWZlcmVuY2UgdG8gYSBwYXJ0aWN1bGFyIGJ1c2luZXNzIHZlcnNpb24gb2YgdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdGllcyB3aXRoIHRoZSBmb3JtYXQgW3VybF18W3ZlcnNpb25dLlxyXG4gICAqL1xyXG4gIHZlcnNpb24/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy52ZXJzaW9uXHJcbiAgICovXHJcbiAgX3ZlcnNpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGdsb2JhbGx5IHVuaXF1ZS4gVGhlIG5hbWUgc2hvdWxkIGJlIGEgc2ltcGxlIGFscGhhbnVtZXJpYyB0eXBlIG5hbWUgdG8gZW5zdXJlIHRoYXQgaXQgaXMgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5LlxyXG4gICAqL1xyXG4gIG5hbWU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5uYW1lXHJcbiAgICovXHJcbiAgX25hbWU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBuYW1lIGRvZXMgbm90IG5lZWQgdG8gYmUgbWFjaGluZS1wcm9jZXNzaW5nIGZyaWVuZGx5IGFuZCBtYXkgY29udGFpbiBwdW5jdHVhdGlvbiwgd2hpdGUtc3BhY2UsIGV0Yy5cclxuICAgKi9cclxuICB0aXRsZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLnRpdGxlXHJcbiAgICovXHJcbiAgX3RpdGxlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2YgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzcyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuVGhpcyBpcyBub3QgaW50ZW5kZWQgZm9yIHVzZSB3aXRoIGFjdHVhbCBjYXBhYmlsaXR5IHN0YXRlbWVudHMsIGJ1dCB3aGVyZSBjYXBhYmlsaXR5IHN0YXRlbWVudHMgYXJlIHVzZWQgdG8gZGVzY3JpYmUgcG9zc2libGUgb3IgZGVzaXJlZCBzeXN0ZW1zLlxyXG4gICAqL1xyXG4gIHN0YXR1czogJ2FjdGl2ZSd8J2RyYWZ0J3wncmV0aXJlZCd8J3Vua25vd24nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLnN0YXR1c1xyXG4gICAqL1xyXG4gIF9zdGF0dXM/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3dzIGZpbHRlcmluZyBvZiB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXNzIHRoYXQgYXJlIGFwcHJvcHJpYXRlIGZvciB1c2UgdmVyc3VzIG5vdC5cclxuICAgKi9cclxuICBleHBlcmltZW50YWw/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuZXhwZXJpbWVudGFsXHJcbiAgICovXHJcbiAgX2V4cGVyaW1lbnRhbD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBOb3RlIHRoYXQgdGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgdGhlIHJlc291cmNlIGxhc3QtbW9kaWZpZWQtZGF0ZSwgc2luY2UgdGhlIHJlc291cmNlIG1heSBiZSBhIHNlY29uZGFyeSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzLiBBZGRpdGlvbmFsIHNwZWNpZmljIGRhdGVzIG1heSBiZSBhZGRlZCBhcyBleHRlbnNpb25zIG9yIGJlIGZvdW5kIGJ5IGNvbnN1bHRpbmcgUHJvdmVuYW5jZXMgYXNzb2NpYXRlZCB3aXRoIHBhc3QgdmVyc2lvbnMgb2YgdGhlIHJlc291cmNlLlxyXG4gICAqL1xyXG4gIGRhdGU6IHN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5kYXRlXHJcbiAgICovXHJcbiAgX2RhdGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVXN1YWxseSBhbiBvcmdhbml6YXRpb24gYnV0IG1heSBiZSBhbiBpbmRpdmlkdWFsLiBUaGUgcHVibGlzaGVyIChvciBzdGV3YXJkKSBvZiB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzIGlzIHRoZSBvcmdhbml6YXRpb24gb3IgaW5kaXZpZHVhbCBwcmltYXJpbHkgcmVzcG9uc2libGUgZm9yIHRoZSBtYWludGVuYW5jZSBhbmQgdXBrZWVwIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMuIFRoaXMgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIGluZGl2aWR1YWwgb3Igb3JnYW5pemF0aW9uIHRoYXQgZGV2ZWxvcGVkIGFuZCBpbml0aWFsbHkgYXV0aG9yZWQgdGhlIGNvbnRlbnQuIFRoZSBwdWJsaXNoZXIgaXMgdGhlIHByaW1hcnkgcG9pbnQgb2YgY29udGFjdCBmb3IgcXVlc3Rpb25zIG9yIGlzc3VlcyB3aXRoIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMuIFRoaXMgaXRlbSBTSE9VTEQgYmUgcG9wdWxhdGVkIHVubGVzcyB0aGUgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIGZyb20gY29udGV4dC5cclxuICAgKi9cclxuICBwdWJsaXNoZXI/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5wdWJsaXNoZXJcclxuICAgKi9cclxuICBfcHVibGlzaGVyPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIE1heSBiZSBhIHdlYiBzaXRlLCBhbiBlbWFpbCBhZGRyZXNzLCBhIHRlbGVwaG9uZSBudW1iZXIsIGV0Yy5cclxuICAgKi9cclxuICBjb250YWN0PzogKGZoaXIuQ29udGFjdERldGFpbHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGRlc2NyaXB0aW9uIGNhbiBiZSB1c2VkIHRvIGNhcHR1cmUgZGV0YWlscyBzdWNoIGFzIHdoeSB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzIHdhcyBidWlsdCwgY29tbWVudHMgYWJvdXQgbWlzdXNlLCBpbnN0cnVjdGlvbnMgZm9yIGNsaW5pY2FsIHVzZSBhbmQgaW50ZXJwcmV0YXRpb24sIGxpdGVyYXR1cmUgcmVmZXJlbmNlcywgZXhhbXBsZXMgZnJvbSB0aGUgcGFwZXIgd29ybGQsIGV0Yy4gSXQgaXMgbm90IGEgcmVuZGVyaW5nIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMgYXMgY29udmV5ZWQgaW4gdGhlICd0ZXh0JyBmaWVsZCBvZiB0aGUgcmVzb3VyY2UgaXRzZWxmLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQgKGUuZy4gdGhlIGxhbmd1YWdlIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMgaXMgcHJlc3VtZWQgdG8gYmUgdGhlIHByZWRvbWluYW50IGxhbmd1YWdlIGluIHRoZSBwbGFjZSB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzIHdhcyBjcmVhdGVkKS5UaGlzIGRvZXMgbm90IG5lZWQgdG8gYmUgcG9wdWxhdGVkIGlmIHRoZSBkZXNjcmlwdGlvbiBpcyBhZGVxdWF0ZWx5IGltcGxpZWQgYnkgdGhlIHNvZnR3YXJlIG9yIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBXaGVuIG11bHRpcGxlIHVzZUNvbnRleHRzIGFyZSBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIGV4cGVjdGF0aW9uIHRoYXQgYWxsIG9yIGFueSBvZiB0aGUgY29udGV4dHMgYXBwbHkuXHJcbiAgICovXHJcbiAgdXNlQ29udGV4dD86IChmaGlyLlVzYWdlQ29udGV4dHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJdCBtYXkgYmUgcG9zc2libGUgZm9yIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMgdG8gYmUgdXNlZCBpbiBqdXJpc2RpY3Rpb25zIG90aGVyIHRoYW4gdGhvc2UgZm9yIHdoaWNoIGl0IHdhcyBvcmlnaW5hbGx5IGRlc2lnbmVkIG9yIGludGVuZGVkLlxyXG4gICAqL1xyXG4gIGp1cmlzZGljdGlvbj86IChmaGlyLkNvZGVhYmxlQ29uY2VwdHxudWxsKVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGVsZW1lbnQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIHVzYWdlIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMuIEluc3RlYWQsIGl0IHByb3ZpZGVzIHRyYWNlYWJpbGl0eSBvZiAnJ3doeScnIHRoZSByZXNvdXJjZSBpcyBlaXRoZXIgbmVlZGVkIG9yICcnd2h5JycgaXQgaXMgZGVmaW5lZCBhcyBpdCBpcy4gIFRoaXMgbWF5IGJlIHVzZWQgdG8gcG9pbnQgdG8gc291cmNlIG1hdGVyaWFscyBvciBzcGVjaWZpY2F0aW9ucyB0aGF0IGRyb3ZlIHRoZSBzdHJ1Y3R1cmUgb2YgdGhpcyB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMuXHJcbiAgICovXHJcbiAgcHVycG9zZT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLnB1cnBvc2VcclxuICAgKi9cclxuICBfcHVycG9zZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBIGNvcHlyaWdodCBzdGF0ZW1lbnQgcmVsYXRpbmcgdG8gdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdGllcyBhbmQvb3IgaXRzIGNvbnRlbnRzLiBDb3B5cmlnaHQgc3RhdGVtZW50cyBhcmUgZ2VuZXJhbGx5IGxlZ2FsIHJlc3RyaWN0aW9ucyBvbiB0aGUgdXNlIGFuZCBwdWJsaXNoaW5nIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMuXHJcbiAgICovXHJcbiAgY29weXJpZ2h0Pzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuY29weXJpZ2h0XHJcbiAgICovXHJcbiAgX2NvcHlyaWdodD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgd2F5IHRoYXQgdGhpcyBzdGF0ZW1lbnQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCwgdG8gZGVzY3JpYmUgYW4gYWN0dWFsIHJ1bm5pbmcgaW5zdGFuY2Ugb2Ygc29mdHdhcmUsIGEgcGFydGljdWxhciBwcm9kdWN0IChraW5kLCBub3QgaW5zdGFuY2Ugb2Ygc29mdHdhcmUpIG9yIGEgY2xhc3Mgb2YgaW1wbGVtZW50YXRpb24gKGUuZy4gYSBkZXNpcmVkIHB1cmNoYXNlKS5cclxuICAgKi9cclxuICBraW5kOiAnY2FwYWJpbGl0eSd8J2luc3RhbmNlJ3wncmVxdWlyZW1lbnRzJ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5raW5kXHJcbiAgICovXHJcbiAgX2tpbmQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogU29mdHdhcmUgdGhhdCBpcyBjb3ZlcmVkIGJ5IHRoaXMgdGVybWlub2xvZ3kgY2FwYWJpbGl0eSBzdGF0ZW1lbnQuICBJdCBpcyB1c2VkIHdoZW4gdGhlIHN0YXRlbWVudCBkZXNjcmliZXMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIHBhcnRpY3VsYXIgc29mdHdhcmUgdmVyc2lvbiwgaW5kZXBlbmRlbnQgb2YgYW4gaW5zdGFsbGF0aW9uLlxyXG4gICAqL1xyXG4gIHNvZnR3YXJlPzogZmhpci5UZXJtaW5vbG9neUNhcGFiaWxpdGllc1NvZnR3YXJlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJZGVudGlmaWVzIGEgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gaW5zdGFuY2UgdGhhdCBpcyBkZXNjcmliZWQgYnkgdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdHkgc3RhdGVtZW50IC0gaS5lLiBhIHBhcnRpY3VsYXIgaW5zdGFsbGF0aW9uLCByYXRoZXIgdGhhbiB0aGUgY2FwYWJpbGl0aWVzIG9mIGEgc29mdHdhcmUgcHJvZ3JhbS5cclxuICAgKi9cclxuICBpbXBsZW1lbnRhdGlvbj86IGZoaXIuVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNJbXBsZW1lbnRhdGlvbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgc2VydmVyIHN1cHBvcnRzIGxvY2tlZERhdGUuXHJcbiAgICovXHJcbiAgbG9ja2VkRGF0ZT86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5sb2NrZWREYXRlXHJcbiAgICovXHJcbiAgX2xvY2tlZERhdGU/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvZGUgc3lzdGVtIC0gaWRlbnRpZmllZCBieSBpdHMgc3lzdGVtIFVSTCAtIG1heSBhbHNvIGJlIGRlY2xhcmVkIGV4cGxpY2l0bHkgYXMgYSBDb2RlIFN5c3RlbSBSZXNvdXJjZSBhdCAvQ29kZVN5c3RlbSwgYnV0IGl0IG1pZ2h0IG5vdCBiZS5cclxuICAgKi9cclxuICBjb2RlU3lzdGVtPzogKGZoaXIuVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNDb2RlU3lzdGVtfG51bGwpW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBbVmFsdWVTZXQvJGV4cGFuZF0odmFsdWVzZXQtb3BlcmF0aW9uLWV4cGFuZC5odG1sKSBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgZXhwYW5zaW9uPzogZmhpci5UZXJtaW5vbG9neUNhcGFiaWxpdGllc0V4cGFuc2lvbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogU2VlIG5vdGVzIG9uIHRoZSBbVmFsdWVTZXRdKHZhbHVlc2V0Lmh0bWwjKSByZXNvdXJjZS5cclxuICAgKi9cclxuICBjb2RlU2VhcmNoPzogJ2FsbCd8J2V4cGxpY2l0J3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNvZGVTZWFyY2hcclxuICAgKi9cclxuICBfY29kZVNlYXJjaD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgW1ZhbHVlU2V0LyR2YWxpZGF0ZS1jb2RlXSh2YWx1ZXNldC1vcGVyYXRpb24tdmFsaWRhdGUtY29kZS5odG1sKSBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgdmFsaWRhdGVDb2RlPzogZmhpci5UZXJtaW5vbG9neUNhcGFiaWxpdGllc1ZhbGlkYXRlQ29kZXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIFtDb25jZXB0TWFwLyR0cmFuc2xhdGVdKGNvbmNlcHRtYXAtb3BlcmF0aW9uLXRyYW5zbGF0ZS5odG1sKSBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgdHJhbnNsYXRpb24/OiBmaGlyLlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzVHJhbnNsYXRpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlICRjbG9zdXJlIG9wZXJhdGlvbiBpcyBzdXBwb3J0ZWQuXHJcbiAgICovXHJcbiAgY2xvc3VyZT86IGZoaXIuVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNDbG9zdXJlfHVuZGVmaW5lZDtcclxufVxyXG4iXX0=