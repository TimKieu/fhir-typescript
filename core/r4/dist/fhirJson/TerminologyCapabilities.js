// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: TerminologyCapabilities
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmaGlySnNvbi9UZXJtaW5vbG9neUNhcGFiaWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQyx5Q0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA8YXV0by1nZW5lcmF0ZWQvPlxyXG4vLyBDb250ZW50cyBvZjogaGw3LmZoaXIucjQuY29yZSB2ZXJzaW9uOiA0LjAuMVxyXG4vLyBNaW5pbXVtIFR5cGVTY3JpcHQgVmVyc2lvbjogMy43XHJcbi8vIEZISVIgUmVzb3VyY2U6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzXHJcblxyXG5pbXBvcnQgKiBhcyBmaGlyIGZyb20gJy4uL2ZoaXJKc29uLmpzJztcclxuXHJcblxyXG4vKipcclxuICogU29mdHdhcmUgdGhhdCBpcyBjb3ZlcmVkIGJ5IHRoaXMgdGVybWlub2xvZ3kgY2FwYWJpbGl0eSBzdGF0ZW1lbnQuICBJdCBpcyB1c2VkIHdoZW4gdGhlIHN0YXRlbWVudCBkZXNjcmliZXMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIHBhcnRpY3VsYXIgc29mdHdhcmUgdmVyc2lvbiwgaW5kZXBlbmRlbnQgb2YgYW4gaW5zdGFsbGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXJtaW5vbG9neUNhcGFiaWxpdGllc1NvZnR3YXJlIGV4dGVuZHMgZmhpci5CYWNrYm9uZUVsZW1lbnQgeyBcclxuICAvKipcclxuICAgKiBOYW1lIHRoZSBzb2Z0d2FyZSBpcyBrbm93biBieS5cclxuICAgKi9cclxuICBuYW1lOiBzdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuc29mdHdhcmUubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElmIHBvc3NpYmxlLCBhIHZlcnNpb24gc2hvdWxkIGJlIHNwZWNpZmllZCwgYXMgc3RhdGVtZW50cyBhcmUgbGlrZWx5IHRvIGJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IHZlcnNpb25zIG9mIHNvZnR3YXJlLlxyXG4gICAqL1xyXG4gIHZlcnNpb24/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5zb2Z0d2FyZS52ZXJzaW9uXHJcbiAgICovXHJcbiAgX3ZlcnNpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJZGVudGlmaWVzIGEgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gaW5zdGFuY2UgdGhhdCBpcyBkZXNjcmliZWQgYnkgdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdHkgc3RhdGVtZW50IC0gaS5lLiBhIHBhcnRpY3VsYXIgaW5zdGFsbGF0aW9uLCByYXRoZXIgdGhhbiB0aGUgY2FwYWJpbGl0aWVzIG9mIGEgc29mdHdhcmUgcHJvZ3JhbS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNJbXBsZW1lbnRhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIHNwZWNpZmljIGluc3RhbGxhdGlvbiB0aGF0IHRoaXMgdGVybWlub2xvZ3kgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgcmVsYXRlcyB0by5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbjogc3RyaW5nfG51bGw7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmltcGxlbWVudGF0aW9uLmRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgX2Rlc2NyaXB0aW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIEFuIGFic29sdXRlIGJhc2UgVVJMIGZvciB0aGUgaW1wbGVtZW50YXRpb24uXHJcbiAgICovXHJcbiAgdXJsPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuaW1wbGVtZW50YXRpb24udXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbHRlciBQcm9wZXJ0aWVzIHN1cHBvcnRlZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNDb2RlU3lzdGVtVmVyc2lvbkZpbHRlciBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogQ29kZSBvZiB0aGUgcHJvcGVydHkgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIGNvZGU6IHN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5jb2RlU3lzdGVtLnZlcnNpb24uZmlsdGVyLmNvZGVcclxuICAgKi9cclxuICBfY29kZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBPcGVyYXRpb25zIHN1cHBvcnRlZCBmb3IgdGhlIHByb3BlcnR5LlxyXG4gICAqL1xyXG4gIG9wOiBzdHJpbmdbXXxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5jb2RlU3lzdGVtLnZlcnNpb24uZmlsdGVyLm9wXHJcbiAgICovXHJcbiAgX29wPzooZmhpci5GaGlyRWxlbWVudHxudWxsKVtdO1xyXG59XHJcblxyXG4vKipcclxuICogTGFuZ3VhZ2UgdHJhbnNsYXRpb25zIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgZm9yIGFsbCBjb2Rlcy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNDb2RlU3lzdGVtVmVyc2lvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogRm9yIHZlcnNpb24tbGVzcyBjb2RlIHN5c3RlbXMsIHRoZXJlIHNob3VsZCBiZSBhIHNpbmdsZSB2ZXJzaW9uIHdpdGggbm8gaWRlbnRpZmllci5cclxuICAgKi9cclxuICBjb2RlPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuY29kZVN5c3RlbS52ZXJzaW9uLmNvZGVcclxuICAgKi9cclxuICBfY29kZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBJZiB0aGlzIGlzIHRoZSBkZWZhdWx0IHZlcnNpb24gZm9yIHRoaXMgY29kZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgaXNEZWZhdWx0PzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNvZGVTeXN0ZW0udmVyc2lvbi5pc0RlZmF1bHRcclxuICAgKi9cclxuICBfaXNEZWZhdWx0PzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIElmIHRoZSBjb21wb3NpdGlvbmFsIGdyYW1tYXIgZGVmaW5lZCBieSB0aGUgY29kZSBzeXN0ZW0gaXMgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIGNvbXBvc2l0aW9uYWw/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuY29kZVN5c3RlbS52ZXJzaW9uLmNvbXBvc2l0aW9uYWxcclxuICAgKi9cclxuICBfY29tcG9zaXRpb25hbD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBMYW5ndWFnZSBEaXNwbGF5cyBzdXBwb3J0ZWQuXHJcbiAgICovXHJcbiAgbGFuZ3VhZ2U/OiBzdHJpbmdbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNvZGVTeXN0ZW0udmVyc2lvbi5sYW5ndWFnZVxyXG4gICAqL1xyXG4gIF9sYW5ndWFnZT86KGZoaXIuRmhpckVsZW1lbnR8bnVsbClbXTtcclxuICAvKipcclxuICAgKiBGaWx0ZXIgUHJvcGVydGllcyBzdXBwb3J0ZWQuXHJcbiAgICovXHJcbiAgZmlsdGVyPzogZmhpci5UZXJtaW5vbG9neUNhcGFiaWxpdGllc0NvZGVTeXN0ZW1WZXJzaW9uRmlsdGVyW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFByb3BlcnRpZXMgc3VwcG9ydGVkIGZvciAkbG9va3VwLlxyXG4gICAqL1xyXG4gIHByb3BlcnR5Pzogc3RyaW5nW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5jb2RlU3lzdGVtLnZlcnNpb24ucHJvcGVydHlcclxuICAgKi9cclxuICBfcHJvcGVydHk/OihmaGlyLkZoaXJFbGVtZW50fG51bGwpW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgY29kZSBzeXN0ZW0gLSBpZGVudGlmaWVkIGJ5IGl0cyBzeXN0ZW0gVVJMIC0gbWF5IGFsc28gYmUgZGVjbGFyZWQgZXhwbGljaXRseSBhcyBhIENvZGUgU3lzdGVtIFJlc291cmNlIGF0IC9Db2RlU3lzdGVtLCBidXQgaXQgbWlnaHQgbm90IGJlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXJtaW5vbG9neUNhcGFiaWxpdGllc0NvZGVTeXN0ZW0gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFVSSSBmb3IgdGhlIENvZGUgU3lzdGVtLlxyXG4gICAqL1xyXG4gIHVyaT86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNvZGVTeXN0ZW0udXJpXHJcbiAgICovXHJcbiAgX3VyaT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBMYW5ndWFnZSB0cmFuc2xhdGlvbnMgbWlnaHQgbm90IGJlIGF2YWlsYWJsZSBmb3IgYWxsIGNvZGVzLlxyXG4gICAqL1xyXG4gIHZlcnNpb24/OiBmaGlyLlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzQ29kZVN5c3RlbVZlcnNpb25bXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVHJ1ZSBpZiBzdWJzdW1wdGlvbiBpcyBzdXBwb3J0ZWQgZm9yIHRoaXMgdmVyc2lvbiBvZiB0aGUgY29kZSBzeXN0ZW0uXHJcbiAgICovXHJcbiAgc3Vic3VtcHRpb24/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuY29kZVN5c3RlbS5zdWJzdW1wdGlvblxyXG4gICAqL1xyXG4gIF9zdWJzdW1wdGlvbj86Zmhpci5GaGlyRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN1cHBvcnRlZCBleHBhbnNpb24gcGFyYW1ldGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXJtaW5vbG9neUNhcGFiaWxpdGllc0V4cGFuc2lvblBhcmFtZXRlciBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogRXhwYW5zaW9uIFBhcmFtZXRlciBuYW1lLlxyXG4gICAqL1xyXG4gIG5hbWU6IHN0cmluZ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5leHBhbnNpb24ucGFyYW1ldGVyLm5hbWVcclxuICAgKi9cclxuICBfbmFtZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBEZXNjcmlwdGlvbiBvZiBzdXBwb3J0IGZvciBwYXJhbWV0ZXIuXHJcbiAgICovXHJcbiAgZG9jdW1lbnRhdGlvbj86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmV4cGFuc2lvbi5wYXJhbWV0ZXIuZG9jdW1lbnRhdGlvblxyXG4gICAqL1xyXG4gIF9kb2N1bWVudGF0aW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIFtWYWx1ZVNldC8kZXhwYW5kXSh2YWx1ZXNldC1vcGVyYXRpb24tZXhwYW5kLmh0bWwpIG9wZXJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNFeHBhbnNpb24gZXh0ZW5kcyBmaGlyLkJhY2tib25lRWxlbWVudCB7IFxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIHNlcnZlciBjYW4gcmV0dXJuIG5lc3RlZCB2YWx1ZSBzZXRzLlxyXG4gICAqL1xyXG4gIGhpZXJhcmNoaWNhbD86IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5leHBhbnNpb24uaGllcmFyY2hpY2FsXHJcbiAgICovXHJcbiAgX2hpZXJhcmNoaWNhbD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgcGFnaW5nIG9uIGV4cGFuc2lvbi5cclxuICAgKi9cclxuICBwYWdpbmc/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuZXhwYW5zaW9uLnBhZ2luZ1xyXG4gICAqL1xyXG4gIF9wYWdpbmc/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogQWxsb3cgcmVxdWVzdCBmb3IgaW5jb21wbGV0ZSBleHBhbnNpb25zP1xyXG4gICAqL1xyXG4gIGluY29tcGxldGU/OiBib29sZWFufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuZXhwYW5zaW9uLmluY29tcGxldGVcclxuICAgKi9cclxuICBfaW5jb21wbGV0ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBTdXBwb3J0ZWQgZXhwYW5zaW9uIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBwYXJhbWV0ZXI/OiBmaGlyLlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzRXhwYW5zaW9uUGFyYW1ldGVyW118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZG9jdW1lbnRhdGlvbiBzaG91bGQgY292ZXIgdGhpbmdzIGxpa2UgY2FzZSBzZW5zaXRpdml0eSwgIHVzZSBvZiBwdW5jdHVhdGlvbiBpZiBub3QgaWdub3JlZCwgd2hhdCB3aWxkIGNhcmRzIGFyZSBzdXBwb3J0ZWQgKGlmIGFueSksIHdoZXRoZXIgdGV4dCBpcyBzdGFydHMgd2l0aCBvciBjb250YWlucywgYW5kIHdoZXRoZXIgd29yZCBvcmRlciBtYXR0ZXJzLlxyXG4gICAqL1xyXG4gIHRleHRGaWx0ZXI/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5leHBhbnNpb24udGV4dEZpbHRlclxyXG4gICAqL1xyXG4gIF90ZXh0RmlsdGVyPzpmaGlyLkZoaXJFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIFtWYWx1ZVNldC8kdmFsaWRhdGUtY29kZV0odmFsdWVzZXQtb3BlcmF0aW9uLXZhbGlkYXRlLWNvZGUuaHRtbCkgb3BlcmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXJtaW5vbG9neUNhcGFiaWxpdGllc1ZhbGlkYXRlQ29kZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0cmFuc2xhdGlvbnMgYXJlIHZhbGlkYXRlZC5cclxuICAgKi9cclxuICB0cmFuc2xhdGlvbnM6IGJvb2xlYW58bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMudmFsaWRhdGVDb2RlLnRyYW5zbGF0aW9uc1xyXG4gICAqL1xyXG4gIF90cmFuc2xhdGlvbnM/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgW0NvbmNlcHRNYXAvJHRyYW5zbGF0ZV0oY29uY2VwdG1hcC1vcGVyYXRpb24tdHJhbnNsYXRlLmh0bWwpIG9wZXJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNUcmFuc2xhdGlvbiBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgY2xpZW50IG11c3QgaWRlbnRpZnkgdGhlIG1hcC5cclxuICAgKi9cclxuICBuZWVkc01hcDogYm9vbGVhbnxudWxsO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy50cmFuc2xhdGlvbi5uZWVkc01hcFxyXG4gICAqL1xyXG4gIF9uZWVkc01hcD86Zmhpci5GaGlyRWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdoZXRoZXIgdGhlICRjbG9zdXJlIG9wZXJhdGlvbiBpcyBzdXBwb3J0ZWQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzQ2xvc3VyZSBleHRlbmRzIGZoaXIuQmFja2JvbmVFbGVtZW50IHsgXHJcbiAgLyoqXHJcbiAgICogSWYgY3Jvc3Mtc3lzdGVtIGNsb3N1cmUgaXMgc3VwcG9ydGVkLlxyXG4gICAqL1xyXG4gIHRyYW5zbGF0aW9uPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNsb3N1cmUudHJhbnNsYXRpb25cclxuICAgKi9cclxuICBfdHJhbnNsYXRpb24/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzIHJlc291cmNlIGRvY3VtZW50cyBhIHNldCBvZiBjYXBhYmlsaXRpZXMgKGJlaGF2aW9ycykgb2YgYSBGSElSIFRlcm1pbm9sb2d5IFNlcnZlciB0aGF0IG1heSBiZSB1c2VkIGFzIGEgc3RhdGVtZW50IG9mIGFjdHVhbCBzZXJ2ZXIgZnVuY3Rpb25hbGl0eSBvciBhIHN0YXRlbWVudCBvZiByZXF1aXJlZCBvciBkZXNpcmVkIHNlcnZlciBpbXBsZW1lbnRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMgZXh0ZW5kcyBmaGlyLkRvbWFpblJlc291cmNlIHsgXHJcbiAgLyoqXHJcbiAgICogUmVzb3VyY2UgVHlwZSBOYW1lXHJcbiAgICovXHJcbiAgcmVzb3VyY2VUeXBlOiBcIlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzXCI7XHJcbiAgLyoqXHJcbiAgICogQ2FuIGJlIGEgdXJuOnV1aWQ6IG9yIGEgdXJuOm9pZDogYnV0IHJlYWwgaHR0cDogYWRkcmVzc2VzIGFyZSBwcmVmZXJyZWQuICBNdWx0aXBsZSBpbnN0YW5jZXMgbWF5IHNoYXJlIHRoZSBzYW1lIFVSTCBpZiB0aGV5IGhhdmUgYSBkaXN0aW5jdCB2ZXJzaW9uLlxyXG4gICAqIFRoZSBkZXRlcm1pbmF0aW9uIG9mIHdoZW4gdG8gY3JlYXRlIGEgbmV3IHZlcnNpb24gb2YgYSByZXNvdXJjZSAoc2FtZSB1cmwsIG5ldyB2ZXJzaW9uKSB2cy4gZGVmaW5pbmcgYSBuZXcgYXJ0aWZhY3QgaXMgdXAgdG8gdGhlIGF1dGhvci4gIENvbnNpZGVyYXRpb25zIGZvciBtYWtpbmcgdGhpcyBkZWNpc2lvbiBhcmUgZm91bmQgaW4gW1RlY2huaWNhbCBhbmQgQnVzaW5lc3MgVmVyc2lvbnNdKHJlc291cmNlLmh0bWwjdmVyc2lvbnMpLiBcclxuICAgKiBJbiBzb21lIGNhc2VzLCB0aGUgcmVzb3VyY2UgY2FuIG5vIGxvbmdlciBiZSBmb3VuZCBhdCB0aGUgc3RhdGVkIHVybCwgYnV0IHRoZSB1cmwgaXRzZWxmIGNhbm5vdCBjaGFuZ2UuIEltcGxlbWVudGF0aW9ucyBjYW4gdXNlIHRoZSBbbWV0YS5zb3VyY2VdKHJlc291cmNlLmh0bWwjbWV0YSkgZWxlbWVudCB0byBpbmRpY2F0ZSB3aGVyZSB0aGUgY3VycmVudCBtYXN0ZXIgc291cmNlIG9mIHRoZSByZXNvdXJjZSBjYW4gYmUgZm91bmQuXHJcbiAgICovXHJcbiAgdXJsPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMudXJsXHJcbiAgICovXHJcbiAgX3VybD86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGVyZSBtYXkgYmUgZGlmZmVyZW50IHRlcm1pbm9sb2d5IGNhcGFiaWxpdGllcyBpbnN0YW5jZXMgdGhhdCBoYXZlIHRoZSBzYW1lIGlkZW50aWZpZXIgYnV0IGRpZmZlcmVudCB2ZXJzaW9ucy4gIFRoZSB2ZXJzaW9uIGNhbiBiZSBhcHBlbmRlZCB0byB0aGUgdXJsIGluIGEgcmVmZXJlbmNlIHRvIGFsbG93IGEgcmVmZXJlbmNlIHRvIGEgcGFydGljdWxhciBidXNpbmVzcyB2ZXJzaW9uIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMgd2l0aCB0aGUgZm9ybWF0IFt1cmxdfFt2ZXJzaW9uXS5cclxuICAgKi9cclxuICB2ZXJzaW9uPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMudmVyc2lvblxyXG4gICAqL1xyXG4gIF92ZXJzaW9uPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lIGlzIG5vdCBleHBlY3RlZCB0byBiZSBnbG9iYWxseSB1bmlxdWUuIFRoZSBuYW1lIHNob3VsZCBiZSBhIHNpbXBsZSBhbHBoYW51bWVyaWMgdHlwZSBuYW1lIHRvIGVuc3VyZSB0aGF0IGl0IGlzIG1hY2hpbmUtcHJvY2Vzc2luZyBmcmllbmRseS5cclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMubmFtZVxyXG4gICAqL1xyXG4gIF9uYW1lPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgbmFtZSBkb2VzIG5vdCBuZWVkIHRvIGJlIG1hY2hpbmUtcHJvY2Vzc2luZyBmcmllbmRseSBhbmQgbWF5IGNvbnRhaW4gcHVuY3R1YXRpb24sIHdoaXRlLXNwYWNlLCBldGMuXHJcbiAgICovXHJcbiAgdGl0bGU/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy50aXRsZVxyXG4gICAqL1xyXG4gIF90aXRsZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBBbGxvd3MgZmlsdGVyaW5nIG9mIHRlcm1pbm9sb2d5IGNhcGFiaWxpdGllc3MgdGhhdCBhcmUgYXBwcm9wcmlhdGUgZm9yIHVzZSB2ZXJzdXMgbm90LlRoaXMgaXMgbm90IGludGVuZGVkIGZvciB1c2Ugd2l0aCBhY3R1YWwgY2FwYWJpbGl0eSBzdGF0ZW1lbnRzLCBidXQgd2hlcmUgY2FwYWJpbGl0eSBzdGF0ZW1lbnRzIGFyZSB1c2VkIHRvIGRlc2NyaWJlIHBvc3NpYmxlIG9yIGRlc2lyZWQgc3lzdGVtcy5cclxuICAgKi9cclxuICBzdGF0dXM6ICdhY3RpdmUnfCdkcmFmdCd8J3JldGlyZWQnfCd1bmtub3duJ3xudWxsO1xyXG4gIC8qKlxyXG4gICAqIEFsbG93cyBmaWx0ZXJpbmcgb2YgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzcyB0aGF0IGFyZSBhcHByb3ByaWF0ZSBmb3IgdXNlIHZlcnN1cyBub3QuXHJcbiAgICovXHJcbiAgZXhwZXJpbWVudGFsPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmV4cGVyaW1lbnRhbFxyXG4gICAqL1xyXG4gIF9leHBlcmltZW50YWw/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSByZXNvdXJjZSBsYXN0LW1vZGlmaWVkLWRhdGUsIHNpbmNlIHRoZSByZXNvdXJjZSBtYXkgYmUgYSBzZWNvbmRhcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdGllcy4gQWRkaXRpb25hbCBzcGVjaWZpYyBkYXRlcyBtYXkgYmUgYWRkZWQgYXMgZXh0ZW5zaW9ucyBvciBiZSBmb3VuZCBieSBjb25zdWx0aW5nIFByb3ZlbmFuY2VzIGFzc29jaWF0ZWQgd2l0aCBwYXN0IHZlcnNpb25zIG9mIHRoZSByZXNvdXJjZS5cclxuICAgKi9cclxuICBkYXRlOiBzdHJpbmd8bnVsbDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMuZGF0ZVxyXG4gICAqL1xyXG4gIF9kYXRlPzpmaGlyLkZoaXJFbGVtZW50O1xyXG4gIC8qKlxyXG4gICAqIFVzdWFsbHkgYW4gb3JnYW5pemF0aW9uIGJ1dCBtYXkgYmUgYW4gaW5kaXZpZHVhbC4gVGhlIHB1Ymxpc2hlciAob3Igc3Rld2FyZCkgb2YgdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdGllcyBpcyB0aGUgb3JnYW5pemF0aW9uIG9yIGluZGl2aWR1YWwgcHJpbWFyaWx5IHJlc3BvbnNpYmxlIGZvciB0aGUgbWFpbnRlbmFuY2UgYW5kIHVwa2VlcCBvZiB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzLiBUaGlzIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBpbmRpdmlkdWFsIG9yIG9yZ2FuaXphdGlvbiB0aGF0IGRldmVsb3BlZCBhbmQgaW5pdGlhbGx5IGF1dGhvcmVkIHRoZSBjb250ZW50LiBUaGUgcHVibGlzaGVyIGlzIHRoZSBwcmltYXJ5IHBvaW50IG9mIGNvbnRhY3QgZm9yIHF1ZXN0aW9ucyBvciBpc3N1ZXMgd2l0aCB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGlzaGVyPzogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBFeHRlbmRlZCBwcm9wZXJ0aWVzIGZvciBwcmltaXRpdmUgZWxlbWVudDogVGVybWlub2xvZ3lDYXBhYmlsaXRpZXMucHVibGlzaGVyXHJcbiAgICovXHJcbiAgX3B1Ymxpc2hlcj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBNYXkgYmUgYSB3ZWIgc2l0ZSwgYW4gZW1haWwgYWRkcmVzcywgYSB0ZWxlcGhvbmUgbnVtYmVyLCBldGMuXHJcbiAgICovXHJcbiAgY29udGFjdD86IGZoaXIuQ29udGFjdERldGFpbFtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBUaGlzIGRlc2NyaXB0aW9uIGNhbiBiZSB1c2VkIHRvIGNhcHR1cmUgZGV0YWlscyBzdWNoIGFzIHdoeSB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzIHdhcyBidWlsdCwgY29tbWVudHMgYWJvdXQgbWlzdXNlLCBpbnN0cnVjdGlvbnMgZm9yIGNsaW5pY2FsIHVzZSBhbmQgaW50ZXJwcmV0YXRpb24sIGxpdGVyYXR1cmUgcmVmZXJlbmNlcywgZXhhbXBsZXMgZnJvbSB0aGUgcGFwZXIgd29ybGQsIGV0Yy4gSXQgaXMgbm90IGEgcmVuZGVyaW5nIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMgYXMgY29udmV5ZWQgaW4gdGhlICd0ZXh0JyBmaWVsZCBvZiB0aGUgcmVzb3VyY2UgaXRzZWxmLiBUaGlzIGl0ZW0gU0hPVUxEIGJlIHBvcHVsYXRlZCB1bmxlc3MgdGhlIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSBmcm9tIGNvbnRleHQgKGUuZy4gdGhlIGxhbmd1YWdlIG9mIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMgaXMgcHJlc3VtZWQgdG8gYmUgdGhlIHByZWRvbWluYW50IGxhbmd1YWdlIGluIHRoZSBwbGFjZSB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzIHdhcyBjcmVhdGVkKS5UaGlzIGRvZXMgbm90IG5lZWQgdG8gYmUgcG9wdWxhdGVkIGlmIHRoZSBkZXNjcmlwdGlvbiBpcyBhZGVxdWF0ZWx5IGltcGxpZWQgYnkgdGhlIHNvZnR3YXJlIG9yIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5kZXNjcmlwdGlvblxyXG4gICAqL1xyXG4gIF9kZXNjcmlwdGlvbj86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBXaGVuIG11bHRpcGxlIHVzZUNvbnRleHRzIGFyZSBzcGVjaWZpZWQsIHRoZXJlIGlzIG5vIGV4cGVjdGF0aW9uIHRoYXQgYWxsIG9yIGFueSBvZiB0aGUgY29udGV4dHMgYXBwbHkuXHJcbiAgICovXHJcbiAgdXNlQ29udGV4dD86IGZoaXIuVXNhZ2VDb250ZXh0W118dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEl0IG1heSBiZSBwb3NzaWJsZSBmb3IgdGhlIHRlcm1pbm9sb2d5IGNhcGFiaWxpdGllcyB0byBiZSB1c2VkIGluIGp1cmlzZGljdGlvbnMgb3RoZXIgdGhhbiB0aG9zZSBmb3Igd2hpY2ggaXQgd2FzIG9yaWdpbmFsbHkgZGVzaWduZWQgb3IgaW50ZW5kZWQuXHJcbiAgICovXHJcbiAganVyaXNkaWN0aW9uPzogZmhpci5Db2RlYWJsZUNvbmNlcHRbXXx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBlbGVtZW50IGRvZXMgbm90IGRlc2NyaWJlIHRoZSB1c2FnZSBvZiB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzLiBJbnN0ZWFkLCBpdCBwcm92aWRlcyB0cmFjZWFiaWxpdHkgb2YgJyd3aHknJyB0aGUgcmVzb3VyY2UgaXMgZWl0aGVyIG5lZWRlZCBvciAnJ3doeScnIGl0IGlzIGRlZmluZWQgYXMgaXQgaXMuICBUaGlzIG1heSBiZSB1c2VkIHRvIHBvaW50IHRvIHNvdXJjZSBtYXRlcmlhbHMgb3Igc3BlY2lmaWNhdGlvbnMgdGhhdCBkcm92ZSB0aGUgc3RydWN0dXJlIG9mIHRoaXMgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzLlxyXG4gICAqL1xyXG4gIHB1cnBvc2U/OiBzdHJpbmd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEV4dGVuZGVkIHByb3BlcnRpZXMgZm9yIHByaW1pdGl2ZSBlbGVtZW50OiBUZXJtaW5vbG9neUNhcGFiaWxpdGllcy5wdXJwb3NlXHJcbiAgICovXHJcbiAgX3B1cnBvc2U/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogQSBjb3B5cmlnaHQgc3RhdGVtZW50IHJlbGF0aW5nIHRvIHRoZSB0ZXJtaW5vbG9neSBjYXBhYmlsaXRpZXMgYW5kL29yIGl0cyBjb250ZW50cy4gQ29weXJpZ2h0IHN0YXRlbWVudHMgYXJlIGdlbmVyYWxseSBsZWdhbCByZXN0cmljdGlvbnMgb24gdGhlIHVzZSBhbmQgcHVibGlzaGluZyBvZiB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0aWVzLlxyXG4gICAqL1xyXG4gIGNvcHlyaWdodD86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmNvcHlyaWdodFxyXG4gICAqL1xyXG4gIF9jb3B5cmlnaHQ/OmZoaXIuRmhpckVsZW1lbnQ7XHJcbiAgLyoqXHJcbiAgICogVGhlIHdheSB0aGF0IHRoaXMgc3RhdGVtZW50IGlzIGludGVuZGVkIHRvIGJlIHVzZWQsIHRvIGRlc2NyaWJlIGFuIGFjdHVhbCBydW5uaW5nIGluc3RhbmNlIG9mIHNvZnR3YXJlLCBhIHBhcnRpY3VsYXIgcHJvZHVjdCAoa2luZCwgbm90IGluc3RhbmNlIG9mIHNvZnR3YXJlKSBvciBhIGNsYXNzIG9mIGltcGxlbWVudGF0aW9uIChlLmcuIGEgZGVzaXJlZCBwdXJjaGFzZSkuXHJcbiAgICovXHJcbiAga2luZDogJ2NhcGFiaWxpdHknfCdpbnN0YW5jZSd8J3JlcXVpcmVtZW50cyd8bnVsbDtcclxuICAvKipcclxuICAgKiBTb2Z0d2FyZSB0aGF0IGlzIGNvdmVyZWQgYnkgdGhpcyB0ZXJtaW5vbG9neSBjYXBhYmlsaXR5IHN0YXRlbWVudC4gIEl0IGlzIHVzZWQgd2hlbiB0aGUgc3RhdGVtZW50IGRlc2NyaWJlcyB0aGUgY2FwYWJpbGl0aWVzIG9mIGEgcGFydGljdWxhciBzb2Z0d2FyZSB2ZXJzaW9uLCBpbmRlcGVuZGVudCBvZiBhbiBpbnN0YWxsYXRpb24uXHJcbiAgICovXHJcbiAgc29mdHdhcmU/OiBmaGlyLlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzU29mdHdhcmV8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIElkZW50aWZpZXMgYSBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBpbnN0YW5jZSB0aGF0IGlzIGRlc2NyaWJlZCBieSB0aGUgdGVybWlub2xvZ3kgY2FwYWJpbGl0eSBzdGF0ZW1lbnQgLSBpLmUuIGEgcGFydGljdWxhciBpbnN0YWxsYXRpb24sIHJhdGhlciB0aGFuIHRoZSBjYXBhYmlsaXRpZXMgb2YgYSBzb2Z0d2FyZSBwcm9ncmFtLlxyXG4gICAqL1xyXG4gIGltcGxlbWVudGF0aW9uPzogZmhpci5UZXJtaW5vbG9neUNhcGFiaWxpdGllc0ltcGxlbWVudGF0aW9ufHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgbG9ja2VkRGF0ZS5cclxuICAgKi9cclxuICBsb2NrZWREYXRlPzogYm9vbGVhbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogRXh0ZW5kZWQgcHJvcGVydGllcyBmb3IgcHJpbWl0aXZlIGVsZW1lbnQ6IFRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzLmxvY2tlZERhdGVcclxuICAgKi9cclxuICBfbG9ja2VkRGF0ZT86Zmhpci5GaGlyRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgY29kZSBzeXN0ZW0gLSBpZGVudGlmaWVkIGJ5IGl0cyBzeXN0ZW0gVVJMIC0gbWF5IGFsc28gYmUgZGVjbGFyZWQgZXhwbGljaXRseSBhcyBhIENvZGUgU3lzdGVtIFJlc291cmNlIGF0IC9Db2RlU3lzdGVtLCBidXQgaXQgbWlnaHQgbm90IGJlLlxyXG4gICAqL1xyXG4gIGNvZGVTeXN0ZW0/OiBmaGlyLlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzQ29kZVN5c3RlbVtdfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgW1ZhbHVlU2V0LyRleHBhbmRdKHZhbHVlc2V0LW9wZXJhdGlvbi1leHBhbmQuaHRtbCkgb3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIGV4cGFuc2lvbj86IGZoaXIuVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNFeHBhbnNpb258dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIFNlZSBub3RlcyBvbiB0aGUgW1ZhbHVlU2V0XSh2YWx1ZXNldC5odG1sIykgcmVzb3VyY2UuXHJcbiAgICovXHJcbiAgY29kZVNlYXJjaD86ICdhbGwnfCdleHBsaWNpdCd8dW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBbVmFsdWVTZXQvJHZhbGlkYXRlLWNvZGVdKHZhbHVlc2V0LW9wZXJhdGlvbi12YWxpZGF0ZS1jb2RlLmh0bWwpIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICB2YWxpZGF0ZUNvZGU/OiBmaGlyLlRlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzVmFsaWRhdGVDb2RlfHVuZGVmaW5lZDtcclxuICAvKipcclxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgW0NvbmNlcHRNYXAvJHRyYW5zbGF0ZV0oY29uY2VwdG1hcC1vcGVyYXRpb24tdHJhbnNsYXRlLmh0bWwpIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICB0cmFuc2xhdGlvbj86IGZoaXIuVGVybWlub2xvZ3lDYXBhYmlsaXRpZXNUcmFuc2xhdGlvbnx1bmRlZmluZWQ7XHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgJGNsb3N1cmUgb3BlcmF0aW9uIGlzIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBjbG9zdXJlPzogZmhpci5UZXJtaW5vbG9neUNhcGFiaWxpdGllc0Nsb3N1cmV8dW5kZWZpbmVkO1xyXG59XHJcbiJdfQ==