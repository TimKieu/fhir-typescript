// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: CapabilityStatement
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"CapabilityStatement.js","sourceRoot":"./src/","sources":["fhirJson/CapabilityStatement.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,+CAA+C;AAC/C,kCAAkC;AAClC,qCAAqC","sourcesContent":["// <auto-generated/>\r\n// Contents of: hl7.fhir.r4.core version: 4.0.1\r\n// Minimum TypeScript Version: 3.7\r\n// FHIR Resource: CapabilityStatement\r\n\r\nimport * as fhir from '../fhirJson.js';\r\n\r\n\r\n/**\r\n * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.\r\n */\r\nexport interface CapabilityStatementSoftware extends fhir.BackboneElement { \r\n  /**\r\n   * Name the software is known by.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.software.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * If possible, a version should be specified, as statements are likely to be different for different versions of software.\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.software.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * Date this version of the software was released.\r\n   */\r\n  releaseDate?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.software.releaseDate\r\n   */\r\n  _releaseDate?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.\r\n */\r\nexport interface CapabilityStatementImplementation extends fhir.BackboneElement { \r\n  /**\r\n   * Information about the specific installation that this capability statement relates to.\r\n   */\r\n  description: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.implementation.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.implementation.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.\r\n   */\r\n  custodian?: fhir.Reference|undefined;\r\n}\r\n\r\n/**\r\n * Information about security implementation from an interface perspective - what a client needs to know.\r\n */\r\nexport interface CapabilityStatementRestSecurity extends fhir.BackboneElement { \r\n  /**\r\n   * The easiest CORS headers to add are Access-Control-Allow-Origin: * &amp; Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.\r\n   */\r\n  cors?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.security.cors\r\n   */\r\n  _cors?:fhir.FhirElement;\r\n  /**\r\n   * Types of security services that are supported/required by the system.\r\n   */\r\n  service?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * General description of how security works.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.security.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).\r\n */\r\nexport interface CapabilityStatementRestResourceInteraction extends fhir.BackboneElement { \r\n  /**\r\n   * Coded identifier of the operation, supported by the system resource.\r\n   */\r\n  code: 'create'|'delete'|'history-instance'|'history-type'|'patch'|'read'|'search-type'|'update'|'vread'|null;\r\n  /**\r\n   * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.interaction.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.\r\n */\r\nexport interface CapabilityStatementRestResourceSearchParam extends fhir.BackboneElement { \r\n  /**\r\n   * Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.searchParam.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.\r\n   */\r\n  definition?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.searchParam.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.\r\n   */\r\n  type: 'composite'|'date'|'number'|'quantity'|'reference'|'special'|'string'|'token'|'uri'|null;\r\n  /**\r\n   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.searchParam.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    \r\n * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.\r\n */\r\nexport interface CapabilityStatementRestResourceOperation extends fhir.BackboneElement { \r\n  /**\r\n   * The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the \"$\" portion that is always included in the URL.\r\n   */\r\n  name: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.operation.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This can be used to build an HTML form to invoke the operation, for instance.\r\n   */\r\n  definition: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.operation.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n  /**\r\n   * Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.operation.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Max of one repetition per resource type.\r\n */\r\nexport interface CapabilityStatementRestResource extends fhir.BackboneElement { \r\n  /**\r\n   * A type of resource exposed via the restful interface.\r\n   */\r\n  type: 'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'CatalogEntry'|'ChargeItem'|'ChargeItemDefinition'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceDefinition'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EffectEvidenceSynthesis'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'InsurancePlan'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionOrder'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RelatedPerson'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'RiskEvidenceSynthesis'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SubstanceSpecification'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestReport'|'TestScript'|'ValueSet'|'VerificationResult'|'VisionPrescription'|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.type\r\n   */\r\n  _type?:fhir.FhirElement;\r\n  /**\r\n   * The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.\r\n   */\r\n  profile?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.profile\r\n   */\r\n  _profile?:fhir.FhirElement;\r\n  /**\r\n   * Supported profiles are different than the profile that applies to a particular resource in .rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that do? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).\r\n   */\r\n  supportedProfile?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.supportedProfile\r\n   */\r\n  _supportedProfile?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Additional information about the resource type used by the system.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).\r\n   */\r\n  interaction?: fhir.CapabilityStatementRestResourceInteraction[]|undefined;\r\n  /**\r\n   * If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.\r\n   */\r\n  versioning?: 'no-version'|'versioned'|'versioned-update'|undefined;\r\n  /**\r\n   * It is useful to support the vRead operation for current operations, even if past versions aren't available.\r\n   */\r\n  readHistory?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.readHistory\r\n   */\r\n  _readHistory?:fhir.FhirElement;\r\n  /**\r\n   * Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.\r\n   */\r\n  updateCreate?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.updateCreate\r\n   */\r\n  _updateCreate?:fhir.FhirElement;\r\n  /**\r\n   * Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.\r\n   */\r\n  conditionalCreate?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.conditionalCreate\r\n   */\r\n  _conditionalCreate?:fhir.FhirElement;\r\n  /**\r\n   * Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.\r\n   */\r\n  conditionalRead?: 'full-support'|'modified-since'|'not-match'|'not-supported'|undefined;\r\n  /**\r\n   * Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.\r\n   */\r\n  conditionalUpdate?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.conditionalUpdate\r\n   */\r\n  _conditionalUpdate?:fhir.FhirElement;\r\n  /**\r\n   * Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.\r\n   */\r\n  conditionalDelete?: 'multiple'|'not-supported'|'single'|undefined;\r\n  /**\r\n   * A set of flags that defines how references are supported.\r\n   */\r\n  referencePolicy?: ('enforced'|'literal'|'local'|'logical'|'resolves')[]|undefined;\r\n  /**\r\n   * If this list is empty, the server does not support includes.\r\n   */\r\n  searchInclude?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.searchInclude\r\n   */\r\n  _searchInclude?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * If this list is empty, the server does not support reverse includes.\r\n   */\r\n  searchRevInclude?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.resource.searchRevInclude\r\n   */\r\n  _searchRevInclude?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.\r\n   */\r\n  searchParam?: fhir.CapabilityStatementRestResourceSearchParam[]|undefined;\r\n  /**\r\n   * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    \r\n   * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.\r\n   */\r\n  operation?: fhir.CapabilityStatementRestResourceOperation[]|undefined;\r\n}\r\n\r\n/**\r\n * A specification of restful operations supported by the system.\r\n */\r\nexport interface CapabilityStatementRestInteraction extends fhir.BackboneElement { \r\n  /**\r\n   * A coded identifier of the operation, supported by the system.\r\n   */\r\n  code: 'batch'|'history-system'|'search-system'|'transaction'|null;\r\n  /**\r\n   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.interaction.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).\r\n */\r\nexport interface CapabilityStatementRest extends fhir.BackboneElement { \r\n  /**\r\n   * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.\r\n   */\r\n  mode: 'client'|'server'|null;\r\n  /**\r\n   * Information about the system's restful capabilities that apply across all applications, such as security.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * Information about security implementation from an interface perspective - what a client needs to know.\r\n   */\r\n  security?: fhir.CapabilityStatementRestSecurity|undefined;\r\n  /**\r\n   * Max of one repetition per resource type.\r\n   */\r\n  resource?: fhir.CapabilityStatementRestResource[]|undefined;\r\n  /**\r\n   * A specification of restful operations supported by the system.\r\n   */\r\n  interaction?: fhir.CapabilityStatementRestInteraction[]|undefined;\r\n  /**\r\n   * Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.\r\n   */\r\n  searchParam?: fhir.CapabilityStatementRestResourceSearchParam[]|undefined;\r\n  /**\r\n   * CapabilityStatement.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.\r\n   */\r\n  operation?: fhir.CapabilityStatementRestResourceOperation[]|undefined;\r\n  /**\r\n   * At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).\r\n   */\r\n  compartment?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.rest.compartment\r\n   */\r\n  _compartment?:(fhir.FhirElement|null)[];\r\n}\r\n\r\n/**\r\n * An endpoint (network accessible address) to which messages and/or replies are to be sent.\r\n */\r\nexport interface CapabilityStatementMessagingEndpoint extends fhir.BackboneElement { \r\n  /**\r\n   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.\r\n   */\r\n  protocol: fhir.Coding|null;\r\n  /**\r\n   * The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.\r\n   */\r\n  address: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.messaging.endpoint.address\r\n   */\r\n  _address?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * This is a proposed alternative to the messaging.event structure.\r\n */\r\nexport interface CapabilityStatementMessagingSupportedMessage extends fhir.BackboneElement { \r\n  /**\r\n   * The mode of this event declaration - whether application is sender or receiver.\r\n   */\r\n  mode: 'receiver'|'sender'|null;\r\n  /**\r\n   * Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.\r\n   */\r\n  definition: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.messaging.supportedMessage.definition\r\n   */\r\n  _definition?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * Multiple repetitions allow the documentation of multiple endpoints per solution.\r\n */\r\nexport interface CapabilityStatementMessaging extends fhir.BackboneElement { \r\n  /**\r\n   * An endpoint (network accessible address) to which messages and/or replies are to be sent.\r\n   */\r\n  endpoint?: fhir.CapabilityStatementMessagingEndpoint[]|undefined;\r\n  /**\r\n   * If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.\r\n   */\r\n  reliableCache?: number|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.messaging.reliableCache\r\n   */\r\n  _reliableCache?:fhir.FhirElement;\r\n  /**\r\n   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.messaging.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * This is a proposed alternative to the messaging.event structure.\r\n   */\r\n  supportedMessage?: fhir.CapabilityStatementMessagingSupportedMessage[]|undefined;\r\n}\r\n\r\n/**\r\n * A document definition.\r\n */\r\nexport interface CapabilityStatementDocument extends fhir.BackboneElement { \r\n  /**\r\n   * Mode of this document declaration - whether an application is a producer or consumer.\r\n   */\r\n  mode: 'consumer'|'producer'|null;\r\n  /**\r\n   * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.\r\n   */\r\n  documentation?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.document.documentation\r\n   */\r\n  _documentation?:fhir.FhirElement;\r\n  /**\r\n   * The profile is actually on the Bundle.\r\n   */\r\n  profile: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.document.profile\r\n   */\r\n  _profile?:fhir.FhirElement;\r\n}\r\n\r\n/**\r\n * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.\r\n */\r\nexport interface CapabilityStatement extends fhir.DomainResource { \r\n  /**\r\n   * Resource Type Name\r\n   */\r\n  resourceType: \"CapabilityStatement\";\r\n  /**\r\n   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.\r\n   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). \r\n   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.\r\n   */\r\n  url?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.url\r\n   */\r\n  _url?:fhir.FhirElement;\r\n  /**\r\n   * There may be different capability statement instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the capability statement with the format [url]|[version].\r\n   */\r\n  version?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.version\r\n   */\r\n  _version?:fhir.FhirElement;\r\n  /**\r\n   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.\r\n   */\r\n  name?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.name\r\n   */\r\n  _name?:fhir.FhirElement;\r\n  /**\r\n   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.\r\n   */\r\n  title?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.title\r\n   */\r\n  _title?:fhir.FhirElement;\r\n  /**\r\n   * Allows filtering of capability statements that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.\r\n   */\r\n  status: 'active'|'draft'|'retired'|'unknown'|null;\r\n  /**\r\n   * Allows filtering of capability statements that are appropriate for use versus not.\r\n   */\r\n  experimental?: boolean|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.experimental\r\n   */\r\n  _experimental?:fhir.FhirElement;\r\n  /**\r\n   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.\r\n   */\r\n  date: string|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.date\r\n   */\r\n  _date?:fhir.FhirElement;\r\n  /**\r\n   * Usually an organization but may be an individual. The publisher (or steward) of the capability statement is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement. This item SHOULD be populated unless the information is available from context.\r\n   */\r\n  publisher?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.publisher\r\n   */\r\n  _publisher?:fhir.FhirElement;\r\n  /**\r\n   * May be a web site, an email address, a telephone number, etc.\r\n   */\r\n  contact?: fhir.ContactDetail[]|undefined;\r\n  /**\r\n   * This description can be used to capture details such as why the capability statement was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the capability statement is presumed to be the predominant language in the place the capability statement was created).This does not need to be populated if the description is adequately implied by the software or implementation details.\r\n   */\r\n  description?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.description\r\n   */\r\n  _description?:fhir.FhirElement;\r\n  /**\r\n   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.\r\n   */\r\n  useContext?: fhir.UsageContext[]|undefined;\r\n  /**\r\n   * It may be possible for the capability statement to be used in jurisdictions other than those for which it was originally designed or intended.\r\n   */\r\n  jurisdiction?: fhir.CodeableConcept[]|undefined;\r\n  /**\r\n   * This element does not describe the usage of the capability statement. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement.\r\n   */\r\n  purpose?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.purpose\r\n   */\r\n  _purpose?:fhir.FhirElement;\r\n  /**\r\n   * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.\r\n   */\r\n  copyright?: string|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.copyright\r\n   */\r\n  _copyright?:fhir.FhirElement;\r\n  /**\r\n   * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).\r\n   */\r\n  kind: 'capability'|'instance'|'requirements'|null;\r\n  /**\r\n   * HL7 defines the following Services: [Terminology Service](terminology-service.html).    \r\n   * Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.\r\n   */\r\n  instantiates?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.instantiates\r\n   */\r\n  _instantiates?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * the contents of any directly or indirectly imported CapabilityStatements SHALL NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name, searchparam/name, interaction/code, messaging/endpoint, document/mode pair.\r\n   * A capability statement that imports another CapabilityStatement automatically instantiates it too (though this is often not a very useful statement for the kinds of CapabilityStatements that are suitable for importing).\r\n   */\r\n  imports?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.imports\r\n   */\r\n  _imports?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.\r\n   */\r\n  software?: fhir.CapabilityStatementSoftware|undefined;\r\n  /**\r\n   * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.\r\n   */\r\n  implementation?: fhir.CapabilityStatementImplementation|undefined;\r\n  /**\r\n   * Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, and the CapabilityStatement is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.\r\n   */\r\n  fhirVersion: '0.0.80'|'0.0.81'|'0.0.82'|'0.01'|'0.05'|'0.06'|'0.11'|'0.4.0'|'0.5.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1.0'|'1.4.0'|'1.6.0'|'1.8.0'|'3.0.0'|'3.0.1'|'3.3.0'|'3.5.0'|'4.0.0'|'4.0.1'|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.fhirVersion\r\n   */\r\n  _fhirVersion?:fhir.FhirElement;\r\n  /**\r\n   * \"xml\", \"json\" and \"ttl\" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.\r\n   */\r\n  format: string[]|null;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.format\r\n   */\r\n  _format?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.\r\n   */\r\n  patchFormat?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.patchFormat\r\n   */\r\n  _patchFormat?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * A list of implementation guides that the server does (or should) support in their entirety.\r\n   */\r\n  implementationGuide?: string[]|undefined;\r\n  /**\r\n   * Extended properties for primitive element: CapabilityStatement.implementationGuide\r\n   */\r\n  _implementationGuide?:(fhir.FhirElement|null)[];\r\n  /**\r\n   * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).\r\n   */\r\n  rest?: fhir.CapabilityStatementRest[]|undefined;\r\n  /**\r\n   * Multiple repetitions allow the documentation of multiple endpoints per solution.\r\n   */\r\n  messaging?: fhir.CapabilityStatementMessaging[]|undefined;\r\n  /**\r\n   * A document definition.\r\n   */\r\n  document?: fhir.CapabilityStatementDocument[]|undefined;\r\n}\r\n"]}