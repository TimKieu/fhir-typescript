// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Period

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the Period type.
 */
export interface PeriodArgs extends fhir.FhirElementArgs {
  /**
   * If the low element is missing, the meaning is that the low boundary is not known.
   */
  start?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Period.start
   */
  _start?:fhir.FhirElementArgs;
  /**
   * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.
   */
  end?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Period.end
   */
  _end?:fhir.FhirElementArgs;
}

/**
 * A time period defined by a start and end date and optionally time.
 */
export class Period extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Period';
  /**
   * If the low element is missing, the meaning is that the low boundary is not known.
   */
  public start?: fhir.FhirDateTime|undefined;
  /**
   * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.
   */
  public end?: fhir.FhirDateTime|undefined;
  /**
   * Default constructor for Period - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<PeriodArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['start']) { this.start = new fhir.FhirDateTime({value: source.start}); }
    if (source['_start']) {
      if (this.start) { this.start.addExtendedProperties(source._start!); }
      else { this.start = new fhir.FhirDateTime(source._start as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['end']) { this.end = new fhir.FhirDateTime({value: source.end}); }
    if (source['_end']) {
      if (this.end) { this.end.addExtendedProperties(source._end!); }
      else { this.end = new fhir.FhirDateTime(source._end as Partial<fhir.FhirDateTimeArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Period' }
    this.vOptS('start',expression)
    this.vOptS('end',expression)
    return issues;
  }
}
