// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductInteraction

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the MedicinalProductInteractionInteractant type.
 */
export interface MedicinalProductInteractionInteractantArgs extends fhir.BackboneElementArgs {
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  item?: fhir.Reference|fhir.CodeableConcept|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  itemReference?: fhir.ReferenceArgs|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  itemCodeableConcept?: fhir.CodeableConceptArgs|undefined;
}

/**
 * The specific medication, food or laboratory test that interacts.
 */
export class MedicinalProductInteractionInteractant extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductInteractionInteractant';
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  public item: (fhir.Reference|fhir.CodeableConcept)|null;
  /**
   * Internal flag to properly serialize choice-type element MedicinalProductInteraction.interactant.item[x]
   */
  protected static readonly _fts_itemIsChoice:true = true;
  /**
   * Default constructor for MedicinalProductInteractionInteractant - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductInteractionInteractantArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['item']) { this.item = source.item; }
    else if (source['itemReference']) { this.item = new fhir.Reference(source.itemReference); }
    else if (source['itemCodeableConcept']) { this.item = new fhir.CodeableConcept(source.itemCodeableConcept); }
    else { this.item = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductInteraction.interactant' }
    iss.push(...this.vRS('item',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicinalProductInteraction type.
 */
export interface MedicinalProductInteractionArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductInteraction"|undefined;
  /**
   * The medication for which this is a described interaction.
   */
  subject?: fhir.ReferenceArgs[]|undefined;
  /**
   * The interaction described.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductInteraction.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  interactant?: fhir.MedicinalProductInteractionInteractantArgs[]|undefined;
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The effect of the interaction, for example "reduced gastric absorption of primary medication".
   */
  effect?: fhir.CodeableConceptArgs|undefined;
  /**
   * The incidence of the interaction, e.g. theoretical, observed.
   */
  incidence?: fhir.CodeableConceptArgs|undefined;
  /**
   * Actions for managing the interaction.
   */
  management?: fhir.CodeableConceptArgs|undefined;
}

/**
 * The interactions of the medicinal product with other medicinal products, or other forms of interactions.
 */
export class MedicinalProductInteraction extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductInteraction';
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductInteraction";
  /**
   * The medication for which this is a described interaction.
   */
  public subject: fhir.Reference[];
  /**
   * The interaction described.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * The specific medication, food or laboratory test that interacts.
   */
  public interactant: fhir.MedicinalProductInteractionInteractant[];
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The effect of the interaction, for example "reduced gastric absorption of primary medication".
   */
  public effect?: fhir.CodeableConcept|undefined;
  /**
   * The incidence of the interaction, e.g. theoretical, observed.
   */
  public incidence?: fhir.CodeableConcept|undefined;
  /**
   * Actions for managing the interaction.
   */
  public management?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for MedicinalProductInteraction - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductInteractionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'MedicinalProductInteraction';
    if (source['subject']) { this.subject = source.subject.map((x) => new fhir.Reference(x)); }
    else { this.subject = []; }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['interactant']) { this.interactant = source.interactant.map((x) => new fhir.MedicinalProductInteractionInteractant(x)); }
    else { this.interactant = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['effect']) { this.effect = new fhir.CodeableConcept(source.effect); }
    if (source['incidence']) { this.incidence = new fhir.CodeableConcept(source.incidence); }
    if (source['management']) { this.management = new fhir.CodeableConcept(source.management); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductInteraction' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOA('subject',exp));
    iss.push(...this.vOS('description',exp));
    iss.push(...this.vOA('interactant',exp));
    iss.push(...this.vOS('type',exp));
    iss.push(...this.vOS('effect',exp));
    iss.push(...this.vOS('incidence',exp));
    iss.push(...this.vOS('management',exp));
    return iss;
  }
}
