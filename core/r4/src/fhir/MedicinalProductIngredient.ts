// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductIngredient

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength type.
 */
export interface MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthArgs extends fhir.BackboneElementArgs {
  /**
   * Relevant reference substance.
   */
  substance?: fhir.CodeableConceptArgs|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strength: fhir.RatioArgs|null;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthLowLimit?: fhir.RatioArgs|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength.measurementPoint
   */
  _measurementPoint?:fhir.FhirElementArgs;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.CodeableConceptArgs[]|undefined;
}

/**
 * Strength expressed in terms of a reference substance.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength';
  /**
   * Relevant reference substance.
   */
  public substance?: fhir.CodeableConcept|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public strength: fhir.Ratio|null;
  /**
   * Strength expressed in terms of a reference substance.
   */
  public strengthLowLimit?: fhir.Ratio|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  public measurementPoint?: fhir.FhirString|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  public country: fhir.CodeableConcept[];
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['substance']) { this.substance = new fhir.CodeableConcept(source.substance); }
    if (source['strength']) { this.strength = new fhir.Ratio(source.strength); }
    else { this.strength = null; }
    if (source['strengthLowLimit']) { this.strengthLowLimit = new fhir.Ratio(source.strengthLowLimit); }
    if (source['measurementPoint']) { this.measurementPoint = new fhir.FhirString({value: source.measurementPoint}); }
    if (source['_measurementPoint']) {
      if (this.measurementPoint) { this.measurementPoint.addExtendedProperties(source._measurementPoint!); }
      else { this.measurementPoint = new fhir.FhirString(source._measurementPoint as Partial<fhir.FhirStringArgs>); }
    }
    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }
    else { this.country = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength' }
    iss.push(...this.vOS('substance',exp));
    iss.push(...this.vRS('strength',exp));
    iss.push(...this.vOS('strengthLowLimit',exp));
    iss.push(...this.vOS('measurementPoint',exp));
    iss.push(...this.vOA('country',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicinalProductIngredientSpecifiedSubstanceStrength type.
 */
export interface MedicinalProductIngredientSpecifiedSubstanceStrengthArgs extends fhir.BackboneElementArgs {
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  presentation: fhir.RatioArgs|null;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  presentationLowLimit?: fhir.RatioArgs|undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentration?: fhir.RatioArgs|undefined;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  concentrationLowLimit?: fhir.RatioArgs|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.specifiedSubstance.strength.measurementPoint
   */
  _measurementPoint?:fhir.FhirElementArgs;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  referenceStrength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthArgs[]|undefined;
}

/**
 * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredientSpecifiedSubstanceStrength extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductIngredientSpecifiedSubstanceStrength';
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
   */
  public presentation: fhir.Ratio|null;
  /**
   * A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
   */
  public presentationLowLimit?: fhir.Ratio|undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  public concentration?: fhir.Ratio|undefined;
  /**
   * A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
   */
  public concentrationLowLimit?: fhir.Ratio|undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  public measurementPoint?: fhir.FhirString|undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  public country: fhir.CodeableConcept[];
  /**
   * Strength expressed in terms of a reference substance.
   */
  public referenceStrength: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength[];
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstanceStrength - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductIngredientSpecifiedSubstanceStrengthArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['presentation']) { this.presentation = new fhir.Ratio(source.presentation); }
    else { this.presentation = null; }
    if (source['presentationLowLimit']) { this.presentationLowLimit = new fhir.Ratio(source.presentationLowLimit); }
    if (source['concentration']) { this.concentration = new fhir.Ratio(source.concentration); }
    if (source['concentrationLowLimit']) { this.concentrationLowLimit = new fhir.Ratio(source.concentrationLowLimit); }
    if (source['measurementPoint']) { this.measurementPoint = new fhir.FhirString({value: source.measurementPoint}); }
    if (source['_measurementPoint']) {
      if (this.measurementPoint) { this.measurementPoint.addExtendedProperties(source._measurementPoint!); }
      else { this.measurementPoint = new fhir.FhirString(source._measurementPoint as Partial<fhir.FhirStringArgs>); }
    }
    if (source['country']) { this.country = source.country.map((x) => new fhir.CodeableConcept(x)); }
    else { this.country = []; }
    if (source['referenceStrength']) { this.referenceStrength = source.referenceStrength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(x)); }
    else { this.referenceStrength = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductIngredient.specifiedSubstance.strength' }
    iss.push(...this.vRS('presentation',exp));
    iss.push(...this.vOS('presentationLowLimit',exp));
    iss.push(...this.vOS('concentration',exp));
    iss.push(...this.vOS('concentrationLowLimit',exp));
    iss.push(...this.vOS('measurementPoint',exp));
    iss.push(...this.vOA('country',exp));
    iss.push(...this.vOA('referenceStrength',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicinalProductIngredientSpecifiedSubstance type.
 */
export interface MedicinalProductIngredientSpecifiedSubstanceArgs extends fhir.BackboneElementArgs {
  /**
   * The specified substance.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  group: fhir.CodeableConceptArgs|null;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  confidentiality?: fhir.CodeableConceptArgs|undefined;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthArgs[]|undefined;
}

/**
 * A specified substance that comprises this ingredient.
 */
export class MedicinalProductIngredientSpecifiedSubstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductIngredientSpecifiedSubstance';
  /**
   * The specified substance.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * The group of specified substance, e.g. group 1 to 4.
   */
  public group: fhir.CodeableConcept|null;
  /**
   * Confidentiality level of the specified substance as the ingredient.
   */
  public confidentiality?: fhir.CodeableConcept|undefined;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  public strength: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[];
  /**
   * Default constructor for MedicinalProductIngredientSpecifiedSubstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductIngredientSpecifiedSubstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
    if (source['group']) { this.group = new fhir.CodeableConcept(source.group); }
    else { this.group = null; }
    if (source['confidentiality']) { this.confidentiality = new fhir.CodeableConcept(source.confidentiality); }
    if (source['strength']) { this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
    else { this.strength = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductIngredient.specifiedSubstance' }
    iss.push(...this.vRS('code',exp));
    iss.push(...this.vRS('group',exp));
    iss.push(...this.vOS('confidentiality',exp));
    iss.push(...this.vOA('strength',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicinalProductIngredientSubstance type.
 */
export interface MedicinalProductIngredientSubstanceArgs extends fhir.BackboneElementArgs {
  /**
   * The ingredient substance.
   */
  code: fhir.CodeableConceptArgs|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  strength?: fhir.MedicinalProductIngredientSpecifiedSubstanceStrengthArgs[]|undefined;
}

/**
 * The ingredient substance.
 */
export class MedicinalProductIngredientSubstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductIngredientSubstance';
  /**
   * The ingredient substance.
   */
  public code: fhir.CodeableConcept|null;
  /**
   * Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
   */
  public strength: fhir.MedicinalProductIngredientSpecifiedSubstanceStrength[];
  /**
   * Default constructor for MedicinalProductIngredientSubstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductIngredientSubstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    else { this.code = null; }
    if (source['strength']) { this.strength = source.strength.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstanceStrength(x)); }
    else { this.strength = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductIngredient.substance' }
    iss.push(...this.vRS('code',exp));
    iss.push(...this.vOA('strength',exp));
    return iss;
  }
}
/**
 * Valid arguments for the MedicinalProductIngredient type.
 */
export interface MedicinalProductIngredientArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductIngredient"|undefined;
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  role: fhir.CodeableConceptArgs|null;
  /**
   * If the ingredient is a known or suspected allergen.
   */
  allergenicIndicator?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductIngredient.allergenicIndicator
   */
  _allergenicIndicator?:fhir.FhirElementArgs;
  /**
   * Manufacturer of this Ingredient.
   */
  manufacturer?: fhir.ReferenceArgs[]|undefined;
  /**
   * A specified substance that comprises this ingredient.
   */
  specifiedSubstance?: fhir.MedicinalProductIngredientSpecifiedSubstanceArgs[]|undefined;
  /**
   * The ingredient substance.
   */
  substance?: fhir.MedicinalProductIngredientSubstanceArgs|undefined;
}

/**
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export class MedicinalProductIngredient extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductIngredient';
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductIngredient";
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Ingredient role e.g. Active ingredient, excipient.
   */
  public role: fhir.CodeableConcept|null;
  /**
   * If the ingredient is a known or suspected allergen.
   */
  public allergenicIndicator?: fhir.FhirBoolean|undefined;
  /**
   * Manufacturer of this Ingredient.
   */
  public manufacturer: fhir.Reference[];
  /**
   * A specified substance that comprises this ingredient.
   */
  public specifiedSubstance: fhir.MedicinalProductIngredientSpecifiedSubstance[];
  /**
   * The ingredient substance.
   */
  public substance?: fhir.MedicinalProductIngredientSubstance|undefined;
  /**
   * Default constructor for MedicinalProductIngredient - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductIngredientArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'MedicinalProductIngredient';
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }
    else { this.role = null; }
    if (source['allergenicIndicator']) { this.allergenicIndicator = new fhir.FhirBoolean({value: source.allergenicIndicator}); }
    if (source['_allergenicIndicator']) {
      if (this.allergenicIndicator) { this.allergenicIndicator.addExtendedProperties(source._allergenicIndicator!); }
      else { this.allergenicIndicator = new fhir.FhirBoolean(source._allergenicIndicator as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }
    else { this.manufacturer = []; }
    if (source['specifiedSubstance']) { this.specifiedSubstance = source.specifiedSubstance.map((x) => new fhir.MedicinalProductIngredientSpecifiedSubstance(x)); }
    else { this.specifiedSubstance = []; }
    if (source['substance']) { this.substance = new fhir.MedicinalProductIngredientSubstance(source.substance); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductIngredient' }
    iss.push(...this.vRPS('resourceType',exp));
    iss.push(...this.vOS('identifier',exp));
    iss.push(...this.vRS('role',exp));
    iss.push(...this.vOS('allergenicIndicator',exp));
    iss.push(...this.vOA('manufacturer',exp));
    iss.push(...this.vOA('specifiedSubstance',exp));
    iss.push(...this.vOS('substance',exp));
    return iss;
  }
}
