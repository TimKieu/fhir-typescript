// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ExampleScenario

import * as fhir from '../fhir.js';

// @ts-ignore
import { ExamplescenarioActorTypeCodings, ExamplescenarioActorTypeCodingType,} from '../fhirValueSets/ExamplescenarioActorTypeCodings.js';
// @ts-ignore
import { ExamplescenarioActorTypeCodes,  ExamplescenarioActorTypeCodeType } from '../fhirValueSets/ExamplescenarioActorTypeCodes.js';
// @ts-ignore
import { ResourceTypesCodings, ResourceTypesCodingType,} from '../fhirValueSets/ResourceTypesCodings.js';
// @ts-ignore
import { ResourceTypesCodes,  ResourceTypesCodeType } from '../fhirValueSets/ResourceTypesCodes.js';
// @ts-ignore
import { PublicationStatusCodings, PublicationStatusCodingType,} from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * Valid arguments for the ExampleScenarioActor type.
 */
export interface ExampleScenarioActorArgs extends fhir.BackboneElementArgs {
  /**
   * should this be called ID or acronym?
   */
  actorId: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.actor.actorId
   */
  _actorId?:fhir.FhirElementArgs;
  /**
   * The type of actor - person or system.
   */
  type: fhir.FhirCode<ExamplescenarioActorTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.actor.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * Cardinality: is name and description 1..1?
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.actor.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Cardinality: is name and description 1..1?
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.actor.description
   */
  _description?:fhir.FhirElementArgs;
}

/**
 * Actor participating in the resource.
 */
export class ExampleScenarioActor extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioActor';
  /**
   * should this be called ID or acronym?
   */
  public actorId: fhir.FhirString|null;
  /**
   * The type of actor - person or system.
   */
  public type: fhir.FhirCode<ExamplescenarioActorTypeCodeType>|null;
  /**
   * Cardinality: is name and description 1..1?
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Cardinality: is name and description 1..1?
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * Default constructor for ExampleScenarioActor - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioActorArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['actorId']) { this.actorId = new fhir.FhirString({value: source.actorId}); }
    else { this.actorId = null; }
    if (source['_actorId']) {
      if (this.actorId) { this.actorId.addExtendedProperties(source._actorId!); }
      else { this.actorId = new fhir.FhirString(source._actorId as Partial<fhir.FhirStringArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirCode<ExamplescenarioActorTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<ExamplescenarioActorTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
  }
  /**
   * Required-bound Value Set for type (ExampleScenario.actor.type)
   */
  public static get typeRequiredCodes() {
    return ExamplescenarioActorTypeCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['actorId']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property actorId:fhir.FhirString fhir: ExampleScenario.actor.actorId:string' });
    }
    if (this["actorId"]) { issues.push(...this.actorId.doModelValidation()); }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<ExamplescenarioActorTypeCodeType> fhir: ExampleScenario.actor.type:code' });
    }
    if (this['type'] && (!Object.values(ExamplescenarioActorTypeCodes).includes(this.type as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<ExamplescenarioActorTypeCodeType> fhir: ExampleScenario.actor.type:code Required binding to: ExamplescenarioActorType' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["name"]) { issues.push(...this.name.doModelValidation()); }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenarioInstanceVersion type.
 */
export interface ExampleScenarioInstanceVersionArgs extends fhir.BackboneElementArgs {
  /**
   * The identifier of a specific version of a resource.
   */
  versionId: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.version.versionId
   */
  _versionId?:fhir.FhirElementArgs;
  /**
   * The description of the resource version.
   */
  description: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.version.description
   */
  _description?:fhir.FhirElementArgs;
}

/**
 * A specific version of the resource.
 */
export class ExampleScenarioInstanceVersion extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioInstanceVersion';
  /**
   * The identifier of a specific version of a resource.
   */
  public versionId: fhir.FhirString|null;
  /**
   * The description of the resource version.
   */
  public description: fhir.FhirMarkdown|null;
  /**
   * Default constructor for ExampleScenarioInstanceVersion - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioInstanceVersionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['versionId']) { this.versionId = new fhir.FhirString({value: source.versionId}); }
    else { this.versionId = null; }
    if (source['_versionId']) {
      if (this.versionId) { this.versionId.addExtendedProperties(source._versionId!); }
      else { this.versionId = new fhir.FhirString(source._versionId as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    else { this.description = null; }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['versionId']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property versionId:fhir.FhirString fhir: ExampleScenario.instance.version.versionId:string' });
    }
    if (this["versionId"]) { issues.push(...this.versionId.doModelValidation()); }
    if (!this['description']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property description:fhir.FhirMarkdown fhir: ExampleScenario.instance.version.description:markdown' });
    }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenarioInstanceContainedInstance type.
 */
export interface ExampleScenarioInstanceContainedInstanceArgs extends fhir.BackboneElementArgs {
  /**
   * Each resource contained in the instance.
   */
  resourceId: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.containedInstance.resourceId
   */
  _resourceId?:fhir.FhirElementArgs;
  /**
   * A specific version of a resource contained in the instance.
   */
  versionId?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.containedInstance.versionId
   */
  _versionId?:fhir.FhirElementArgs;
}

/**
 * Resources contained in the instance (e.g. the observations contained in a bundle).
 */
export class ExampleScenarioInstanceContainedInstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioInstanceContainedInstance';
  /**
   * Each resource contained in the instance.
   */
  public resourceId: fhir.FhirString|null;
  /**
   * A specific version of a resource contained in the instance.
   */
  public versionId?: fhir.FhirString|undefined;
  /**
   * Default constructor for ExampleScenarioInstanceContainedInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioInstanceContainedInstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['resourceId']) { this.resourceId = new fhir.FhirString({value: source.resourceId}); }
    else { this.resourceId = null; }
    if (source['_resourceId']) {
      if (this.resourceId) { this.resourceId.addExtendedProperties(source._resourceId!); }
      else { this.resourceId = new fhir.FhirString(source._resourceId as Partial<fhir.FhirStringArgs>); }
    }
    if (source['versionId']) { this.versionId = new fhir.FhirString({value: source.versionId}); }
    if (source['_versionId']) {
      if (this.versionId) { this.versionId.addExtendedProperties(source._versionId!); }
      else { this.versionId = new fhir.FhirString(source._versionId as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceId']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceId:fhir.FhirString fhir: ExampleScenario.instance.containedInstance.resourceId:string' });
    }
    if (this["resourceId"]) { issues.push(...this.resourceId.doModelValidation()); }
    if (this["versionId"]) { issues.push(...this.versionId.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenarioInstance type.
 */
export interface ExampleScenarioInstanceArgs extends fhir.BackboneElementArgs {
  /**
   * The id of the resource for referencing.
   */
  resourceId: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.resourceId
   */
  _resourceId?:fhir.FhirElementArgs;
  /**
   * The type of the resource.
   */
  resourceType: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.resourceType
   */
  _resourceType?:fhir.FhirElementArgs;
  /**
   * A short name for the resource instance.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Human-friendly description of the resource instance.
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.instance.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * A specific version of the resource.
   */
  version?: fhir.ExampleScenarioInstanceVersionArgs[]|undefined;
  /**
   * Resources contained in the instance (e.g. the observations contained in a bundle).
   */
  containedInstance?: fhir.ExampleScenarioInstanceContainedInstanceArgs[]|undefined;
}

/**
 * Each resource and each version that is present in the workflow.
 */
export class ExampleScenarioInstance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioInstance';
  /**
   * The id of the resource for referencing.
   */
  public resourceId: fhir.FhirString|null;
  /**
   * The type of the resource.
   */
  public resourceType: fhir.FhirCode|null;
  /**
   * A short name for the resource instance.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Human-friendly description of the resource instance.
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * A specific version of the resource.
   */
  public version: fhir.ExampleScenarioInstanceVersion[];
  /**
   * Resources contained in the instance (e.g. the observations contained in a bundle).
   */
  public containedInstance: fhir.ExampleScenarioInstanceContainedInstance[];
  /**
   * Default constructor for ExampleScenarioInstance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioInstanceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['resourceId']) { this.resourceId = new fhir.FhirString({value: source.resourceId}); }
    else { this.resourceId = null; }
    if (source['_resourceId']) {
      if (this.resourceId) { this.resourceId.addExtendedProperties(source._resourceId!); }
      else { this.resourceId = new fhir.FhirString(source._resourceId as Partial<fhir.FhirStringArgs>); }
    }
    if (source['resourceType']) { this.resourceType = new fhir.FhirCode({value: source.resourceType}); }
    else { this.resourceType = null; }
    if (source['_resourceType']) {
      if (this.resourceType) { this.resourceType.addExtendedProperties(source._resourceType!); }
      else { this.resourceType = new fhir.FhirCode(source._resourceType as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['version']) { this.version = source.version.map((x) => new fhir.ExampleScenarioInstanceVersion(x)); }
    else { this.version = []; }
    if (source['containedInstance']) { this.containedInstance = source.containedInstance.map((x) => new fhir.ExampleScenarioInstanceContainedInstance(x)); }
    else { this.containedInstance = []; }
  }
  /**
   * Required-bound Value Set for resourceType (ExampleScenario.instance.resourceType)
   */
  public static get resourceTypeRequiredCodes() {
    return ResourceTypesCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceId']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceId:fhir.FhirString fhir: ExampleScenario.instance.resourceId:string' });
    }
    if (this["resourceId"]) { issues.push(...this.resourceId.doModelValidation()); }
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:fhir.FhirCode fhir: ExampleScenario.instance.resourceType:code' });
    }
    if (this['resourceType'] && (!Object.values(ResourceTypesCodes).includes(this.resourceType as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property resourceType:fhir.FhirCode fhir: ExampleScenario.instance.resourceType:code Required binding to: ResourceTypes' });
    }
    if (this["resourceType"]) { issues.push(...this.resourceType.doModelValidation()); }
    if (this["name"]) { issues.push(...this.name.doModelValidation()); }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    if (this["version"]) { this.version.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["containedInstance"]) { this.containedInstance.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenarioProcessStepOperation type.
 */
export interface ExampleScenarioProcessStepOperationArgs extends fhir.BackboneElementArgs {
  /**
   * The sequential number of the interaction, e.g. 1.2.5.
   */
  number: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.number
   */
  _number?:fhir.FhirElementArgs;
  /**
   * The type of operation - CRUD.
   */
  type?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * The human-friendly name of the interaction.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Who starts the transaction.
   */
  initiator?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.initiator
   */
  _initiator?:fhir.FhirElementArgs;
  /**
   * Who receives the transaction.
   */
  receiver?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.receiver
   */
  _receiver?:fhir.FhirElementArgs;
  /**
   * A comment to be inserted in the diagram.
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Whether the initiator is deactivated right after the transaction.
   */
  initiatorActive?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.initiatorActive
   */
  _initiatorActive?:fhir.FhirElementArgs;
  /**
   * Whether the receiver is deactivated right after the transaction.
   */
  receiverActive?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.operation.receiverActive
   */
  _receiverActive?:fhir.FhirElementArgs;
  /**
   * Each resource instance used by the initiator.
   */
  request?: fhir.ExampleScenarioInstanceContainedInstanceArgs|undefined;
  /**
   * Each resource instance used by the responder.
   */
  response?: fhir.ExampleScenarioInstanceContainedInstanceArgs|undefined;
}

/**
 * Each interaction or action.
 */
export class ExampleScenarioProcessStepOperation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioProcessStepOperation';
  /**
   * The sequential number of the interaction, e.g. 1.2.5.
   */
  public number: fhir.FhirString|null;
  /**
   * The type of operation - CRUD.
   */
  public type?: fhir.FhirString|undefined;
  /**
   * The human-friendly name of the interaction.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Who starts the transaction.
   */
  public initiator?: fhir.FhirString|undefined;
  /**
   * Who receives the transaction.
   */
  public receiver?: fhir.FhirString|undefined;
  /**
   * A comment to be inserted in the diagram.
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * Whether the initiator is deactivated right after the transaction.
   */
  public initiatorActive?: fhir.FhirBoolean|undefined;
  /**
   * Whether the receiver is deactivated right after the transaction.
   */
  public receiverActive?: fhir.FhirBoolean|undefined;
  /**
   * Each resource instance used by the initiator.
   */
  public request?: fhir.ExampleScenarioInstanceContainedInstance|undefined;
  /**
   * Each resource instance used by the responder.
   */
  public response?: fhir.ExampleScenarioInstanceContainedInstance|undefined;
  /**
   * Default constructor for ExampleScenarioProcessStepOperation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioProcessStepOperationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['number']) { this.number = new fhir.FhirString({value: source.number}); }
    else { this.number = null; }
    if (source['_number']) {
      if (this.number) { this.number.addExtendedProperties(source._number!); }
      else { this.number = new fhir.FhirString(source._number as Partial<fhir.FhirStringArgs>); }
    }
    if (source['type']) { this.type = new fhir.FhirString({value: source.type}); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirString(source._type as Partial<fhir.FhirStringArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['initiator']) { this.initiator = new fhir.FhirString({value: source.initiator}); }
    if (source['_initiator']) {
      if (this.initiator) { this.initiator.addExtendedProperties(source._initiator!); }
      else { this.initiator = new fhir.FhirString(source._initiator as Partial<fhir.FhirStringArgs>); }
    }
    if (source['receiver']) { this.receiver = new fhir.FhirString({value: source.receiver}); }
    if (source['_receiver']) {
      if (this.receiver) { this.receiver.addExtendedProperties(source._receiver!); }
      else { this.receiver = new fhir.FhirString(source._receiver as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['initiatorActive']) { this.initiatorActive = new fhir.FhirBoolean({value: source.initiatorActive}); }
    if (source['_initiatorActive']) {
      if (this.initiatorActive) { this.initiatorActive.addExtendedProperties(source._initiatorActive!); }
      else { this.initiatorActive = new fhir.FhirBoolean(source._initiatorActive as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['receiverActive']) { this.receiverActive = new fhir.FhirBoolean({value: source.receiverActive}); }
    if (source['_receiverActive']) {
      if (this.receiverActive) { this.receiverActive.addExtendedProperties(source._receiverActive!); }
      else { this.receiverActive = new fhir.FhirBoolean(source._receiverActive as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['request']) { this.request = new fhir.ExampleScenarioInstanceContainedInstance(source.request); }
    if (source['response']) { this.response = new fhir.ExampleScenarioInstanceContainedInstance(source.response); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['number']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property number:fhir.FhirString fhir: ExampleScenario.process.step.operation.number:string' });
    }
    if (this["number"]) { issues.push(...this.number.doModelValidation()); }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["name"]) { issues.push(...this.name.doModelValidation()); }
    if (this["initiator"]) { issues.push(...this.initiator.doModelValidation()); }
    if (this["receiver"]) { issues.push(...this.receiver.doModelValidation()); }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    if (this["initiatorActive"]) { issues.push(...this.initiatorActive.doModelValidation()); }
    if (this["receiverActive"]) { issues.push(...this.receiverActive.doModelValidation()); }
    if (this["request"]) { issues.push(...this.request.doModelValidation()); }
    if (this["response"]) { issues.push(...this.response.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenarioProcessStepAlternative type.
 */
export interface ExampleScenarioProcessStepAlternativeArgs extends fhir.BackboneElementArgs {
  /**
   * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
   */
  title: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.alternative.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.alternative.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * What happens in each alternative option.
   */
  step?: fhir.ExampleScenarioProcessStepArgs[]|undefined;
}

/**
 * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
 */
export class ExampleScenarioProcessStepAlternative extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioProcessStepAlternative';
  /**
   * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
   */
  public title: fhir.FhirString|null;
  /**
   * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * What happens in each alternative option.
   */
  public step: fhir.ExampleScenarioProcessStep[];
  /**
   * Default constructor for ExampleScenarioProcessStepAlternative - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioProcessStepAlternativeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    else { this.title = null; }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['step']) { this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x)); }
    else { this.step = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['title']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property title:fhir.FhirString fhir: ExampleScenario.process.step.alternative.title:string' });
    }
    if (this["title"]) { issues.push(...this.title.doModelValidation()); }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    if (this["step"]) { this.step.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenarioProcessStep type.
 */
export interface ExampleScenarioProcessStepArgs extends fhir.BackboneElementArgs {
  /**
   * Nested process.
   */
  process?: fhir.ExampleScenarioProcessArgs[]|undefined;
  /**
   * If there is a pause in the flow.
   */
  pause?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.step.pause
   */
  _pause?:fhir.FhirElementArgs;
  /**
   * Each interaction or action.
   */
  operation?: fhir.ExampleScenarioProcessStepOperationArgs|undefined;
  /**
   * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
   */
  alternative?: fhir.ExampleScenarioProcessStepAlternativeArgs[]|undefined;
}

/**
 * Each step of the process.
 */
export class ExampleScenarioProcessStep extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioProcessStep';
  /**
   * Nested process.
   */
  public process: fhir.ExampleScenarioProcess[];
  /**
   * If there is a pause in the flow.
   */
  public pause?: fhir.FhirBoolean|undefined;
  /**
   * Each interaction or action.
   */
  public operation?: fhir.ExampleScenarioProcessStepOperation|undefined;
  /**
   * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
   */
  public alternative: fhir.ExampleScenarioProcessStepAlternative[];
  /**
   * Default constructor for ExampleScenarioProcessStep - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioProcessStepArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['process']) { this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x)); }
    else { this.process = []; }
    if (source['pause']) { this.pause = new fhir.FhirBoolean({value: source.pause}); }
    if (source['_pause']) {
      if (this.pause) { this.pause.addExtendedProperties(source._pause!); }
      else { this.pause = new fhir.FhirBoolean(source._pause as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['operation']) { this.operation = new fhir.ExampleScenarioProcessStepOperation(source.operation); }
    if (source['alternative']) { this.alternative = source.alternative.map((x) => new fhir.ExampleScenarioProcessStepAlternative(x)); }
    else { this.alternative = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["process"]) { this.process.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["pause"]) { issues.push(...this.pause.doModelValidation()); }
    if (this["operation"]) { issues.push(...this.operation.doModelValidation()); }
    if (this["alternative"]) { this.alternative.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenarioProcess type.
 */
export interface ExampleScenarioProcessArgs extends fhir.BackboneElementArgs {
  /**
   * The diagram title of the group of operations.
   */
  title: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.title
   */
  _title?:fhir.FhirElementArgs;
  /**
   * A longer description of the group of operations.
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Description of initial status before the process starts.
   */
  preConditions?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.preConditions
   */
  _preConditions?:fhir.FhirElementArgs;
  /**
   * Description of final status after the process ends.
   */
  postConditions?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.process.postConditions
   */
  _postConditions?:fhir.FhirElementArgs;
  /**
   * Each step of the process.
   */
  step?: fhir.ExampleScenarioProcessStepArgs[]|undefined;
}

/**
 * Each major process - a group of operations.
 */
export class ExampleScenarioProcess extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenarioProcess';
  /**
   * The diagram title of the group of operations.
   */
  public title: fhir.FhirString|null;
  /**
   * A longer description of the group of operations.
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * Description of initial status before the process starts.
   */
  public preConditions?: fhir.FhirMarkdown|undefined;
  /**
   * Description of final status after the process ends.
   */
  public postConditions?: fhir.FhirMarkdown|undefined;
  /**
   * Each step of the process.
   */
  public step: fhir.ExampleScenarioProcessStep[];
  /**
   * Default constructor for ExampleScenarioProcess - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioProcessArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    else { this.title = null; }
    if (source['_title']) {
      if (this.title) { this.title.addExtendedProperties(source._title!); }
      else { this.title = new fhir.FhirString(source._title as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['preConditions']) { this.preConditions = new fhir.FhirMarkdown({value: source.preConditions}); }
    if (source['_preConditions']) {
      if (this.preConditions) { this.preConditions.addExtendedProperties(source._preConditions!); }
      else { this.preConditions = new fhir.FhirMarkdown(source._preConditions as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['postConditions']) { this.postConditions = new fhir.FhirMarkdown({value: source.postConditions}); }
    if (source['_postConditions']) {
      if (this.postConditions) { this.postConditions.addExtendedProperties(source._postConditions!); }
      else { this.postConditions = new fhir.FhirMarkdown(source._postConditions as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['step']) { this.step = source.step.map((x) => new fhir.ExampleScenarioProcessStep(x)); }
    else { this.step = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['title']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property title:fhir.FhirString fhir: ExampleScenario.process.title:string' });
    }
    if (this["title"]) { issues.push(...this.title.doModelValidation()); }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    if (this["preConditions"]) { issues.push(...this.preConditions.doModelValidation()); }
    if (this["postConditions"]) { issues.push(...this.postConditions.doModelValidation()); }
    if (this["step"]) { this.step.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ExampleScenario type.
 */
export interface ExampleScenarioArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ExampleScenario"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.experimental
   */
  _experimental?:fhir.FhirElementArgs;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.copyright
   */
  _copyright?:fhir.FhirElementArgs;
  /**
   * This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
   */
  purpose?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.purpose
   */
  _purpose?:fhir.FhirElementArgs;
  /**
   * Actor participating in the resource.
   */
  actor?: fhir.ExampleScenarioActorArgs[]|undefined;
  /**
   * Each resource and each version that is present in the workflow.
   */
  instance?: fhir.ExampleScenarioInstanceArgs[]|undefined;
  /**
   * Each major process - a group of operations.
   */
  process?: fhir.ExampleScenarioProcessArgs[]|undefined;
  /**
   * Another nested workflow.
   */
  workflow?: fhir.FhirCanonical[]|string[]|undefined;
  /**
   * Extended properties for primitive element: ExampleScenario.workflow
   */
  _workflow?:(fhir.FhirElementArgs|null)[];
}

/**
 * Example of workflow instance.
 */
export class ExampleScenario extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ExampleScenario';
  /**
   * Resource Type Name
   */
  public override resourceType: "ExampleScenario";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier: fhir.Identifier[];
  /**
   * There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact: fhir.ContactDetail[];
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction: fhir.CodeableConcept[];
  /**
   * nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
   */
  public purpose?: fhir.FhirMarkdown|undefined;
  /**
   * Actor participating in the resource.
   */
  public actor: fhir.ExampleScenarioActor[];
  /**
   * Each resource and each version that is present in the workflow.
   */
  public instance: fhir.ExampleScenarioInstance[];
  /**
   * Each major process - a group of operations.
   */
  public process: fhir.ExampleScenarioProcess[];
  /**
   * Another nested workflow.
   */
  public workflow: fhir.FhirCanonical[];
  /**
   * Default constructor for ExampleScenario - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ExampleScenarioArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ExampleScenario';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['_experimental']) {
      if (this.experimental) { this.experimental.addExtendedProperties(source._experimental!); }
      else { this.experimental = new fhir.FhirBoolean(source._experimental as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    else { this.jurisdiction = []; }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['_copyright']) {
      if (this.copyright) { this.copyright.addExtendedProperties(source._copyright!); }
      else { this.copyright = new fhir.FhirMarkdown(source._copyright as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['purpose']) { this.purpose = new fhir.FhirMarkdown({value: source.purpose}); }
    if (source['_purpose']) {
      if (this.purpose) { this.purpose.addExtendedProperties(source._purpose!); }
      else { this.purpose = new fhir.FhirMarkdown(source._purpose as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['actor']) { this.actor = source.actor.map((x) => new fhir.ExampleScenarioActor(x)); }
    else { this.actor = []; }
    if (source['instance']) { this.instance = source.instance.map((x) => new fhir.ExampleScenarioInstance(x)); }
    else { this.instance = []; }
    if (source['process']) { this.process = source.process.map((x) => new fhir.ExampleScenarioProcess(x)); }
    else { this.process = []; }
    if (source['workflow']) { this.workflow = source.workflow.map((x) => new fhir.FhirCanonical({value: x})); }
    else { this.workflow = []; }
    if (source['_workflow']) {
      source._workflow.forEach((x,i) => {
        if (this.workflow.length >= i) { if (x) { this.workflow[i].addExtendedProperties(x); } }
        else { if (x) { this.workflow.push(new fhir.FhirCanonical(x as Partial<fhir.FhirCanonicalArgs>)); } }
      });
    }
  }
  /**
   * Required-bound Value Set for status (ExampleScenario.status)
   */
  public static get statusRequiredCodes() {
    return PublicationStatusCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ExampleScenario" fhir: ExampleScenario.resourceType:"ExampleScenario"' });
    }
    if (this["url"]) { issues.push(...this.url.doModelValidation()); }
    if (this["identifier"]) { this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["version"]) { issues.push(...this.version.doModelValidation()); }
    if (this["name"]) { issues.push(...this.name.doModelValidation()); }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ExampleScenario.status:code' });
    }
    if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ExampleScenario.status:code Required binding to: PublicationStatus' });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation()); }
    if (this["experimental"]) { issues.push(...this.experimental.doModelValidation()); }
    if (this["date"]) { issues.push(...this.date.doModelValidation()); }
    if (this["publisher"]) { issues.push(...this.publisher.doModelValidation()); }
    if (this["contact"]) { this.contact.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["useContext"]) { this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["copyright"]) { issues.push(...this.copyright.doModelValidation()); }
    if (this["purpose"]) { issues.push(...this.purpose.doModelValidation()); }
    if (this["actor"]) { this.actor.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["instance"]) { this.instance.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["process"]) { this.process.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["workflow"]) { this.workflow.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
