// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: ProdCharacteristic

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the ProdCharacteristic type.
 */
export interface ProdCharacteristicArgs extends fhir.BackboneElementArgs {
  /**
   * Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  height?: fhir.QuantityArgs|undefined;
  /**
   * Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  width?: fhir.QuantityArgs|undefined;
  /**
   * Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  depth?: fhir.QuantityArgs|undefined;
  /**
   * Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  weight?: fhir.QuantityArgs|undefined;
  /**
   * Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  nominalVolume?: fhir.QuantityArgs|undefined;
  /**
   * Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  externalDiameter?: fhir.QuantityArgs|undefined;
  /**
   * Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
   */
  shape?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: ProdCharacteristic.shape
   */
  _shape?:fhir.FhirElementArgs;
  /**
   * Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
   */
  color?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: ProdCharacteristic.color
   */
  _color?:(fhir.FhirElementArgs|null)[];
  /**
   * Where applicable, the imprint can be specified as text.
   */
  imprint?: fhir.FhirString[]|(string|null)[]|undefined;
  /**
   * Extended properties for primitive element: ProdCharacteristic.imprint
   */
  _imprint?:(fhir.FhirElementArgs|null)[];
  /**
   * Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
   */
  image?: fhir.AttachmentArgs[]|undefined;
  /**
   * Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
   */
  scoring?: fhir.CodeableConceptArgs|undefined;
}

/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export class ProdCharacteristic extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ProdCharacteristic';
  /**
   * Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  public height?: fhir.Quantity|undefined;
  /**
   * Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  public width?: fhir.Quantity|undefined;
  /**
   * Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  public depth?: fhir.Quantity|undefined;
  /**
   * Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  public weight?: fhir.Quantity|undefined;
  /**
   * Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  public nominalVolume?: fhir.Quantity|undefined;
  /**
   * Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  public externalDiameter?: fhir.Quantity|undefined;
  /**
   * Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
   */
  public shape?: fhir.FhirString|undefined;
  /**
   * Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
   */
  public color: fhir.FhirString[];
  /**
   * Where applicable, the imprint can be specified as text.
   */
  public imprint: fhir.FhirString[];
  /**
   * Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
   */
  public image: fhir.Attachment[];
  /**
   * Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
   */
  public scoring?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ProdCharacteristic - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ProdCharacteristicArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['height']) { this.height = new fhir.Quantity(source.height); }
    if (source['width']) { this.width = new fhir.Quantity(source.width); }
    if (source['depth']) { this.depth = new fhir.Quantity(source.depth); }
    if (source['weight']) { this.weight = new fhir.Quantity(source.weight); }
    if (source['nominalVolume']) { this.nominalVolume = new fhir.Quantity(source.nominalVolume); }
    if (source['externalDiameter']) { this.externalDiameter = new fhir.Quantity(source.externalDiameter); }
    if (source['shape']) { this.shape = new fhir.FhirString({value: source.shape}); }
    if (source['_shape']) {
      if (this.shape) { this.shape.addExtendedProperties(source._shape!); }
      else { this.shape = new fhir.FhirString(source._shape as Partial<fhir.FhirStringArgs>); }
    }
    if (source['color']) { this.color = source.color.map((x) => new fhir.FhirString({value: x})); }
    else { this.color = []; }
    if (source['_color']) {
      source._color.forEach((x,i) => {
        if (this.color.length >= i) { if (x) { this.color[i].addExtendedProperties(x); } }
        else { if (x) { this.color.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['imprint']) { this.imprint = source.imprint.map((x) => new fhir.FhirString({value: x})); }
    else { this.imprint = []; }
    if (source['_imprint']) {
      source._imprint.forEach((x,i) => {
        if (this.imprint.length >= i) { if (x) { this.imprint[i].addExtendedProperties(x); } }
        else { if (x) { this.imprint.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['image']) { this.image = source.image.map((x) => new fhir.Attachment(x)); }
    else { this.image = []; }
    if (source['scoring']) { this.scoring = new fhir.CodeableConcept(source.scoring); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'ProdCharacteristic' }
    this.vOS('height',exp)
    this.vOS('width',exp)
    this.vOS('depth',exp)
    this.vOS('weight',exp)
    this.vOS('nominalVolume',exp)
    this.vOS('externalDiameter',exp)
    this.vOS('shape',exp)
    this.vOA('color',exp)
    this.vOA('imprint',exp)
    this.vOA('image',exp)
    this.vOS('scoring',exp)
    return issues;
  }
}
