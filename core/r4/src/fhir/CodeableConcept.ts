// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: CodeableConcept

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the CodeableConcept type.
 */
export interface CodeableConceptArgs extends fhir.FhirElementArgs {
  /**
   * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
   */
  coding?: fhir.CodingArgs[]|undefined;
  /**
   * Very often the text is the same as a displayName of one of the codings.
   */
  text?: fhir.FhirString|string|undefined;
}

/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
export class CodeableConcept extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'CodeableConcept';
  /**
   * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
   */
  public coding: fhir.Coding[];
  /**
   * Very often the text is the same as a displayName of one of the codings.
   */
  public text?: fhir.FhirString|undefined;
  /**
   * Default constructor for CodeableConcept - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<CodeableConceptArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['coding']) { this.coding = source.coding.map((x) => new fhir.Coding(x)); }
    else { this.coding = []; }
    if (source['text']) { this.text = new fhir.FhirString({value: source.text}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["coding"]) { this.coding.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["text"]) { issues.push(...this.text.doModelValidation()); }
    return issues;
  }
}
