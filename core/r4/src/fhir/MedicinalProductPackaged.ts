// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductPackaged

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the MedicinalProductPackagedBatchIdentifier type.
 */
export interface MedicinalProductPackagedBatchIdentifierArgs extends fhir.BackboneElementArgs {
  /**
   * A number appearing on the outer packaging of a specific batch.
   */
  outerPackaging: fhir.IdentifierArgs|null;
  /**
   * A number appearing on the immediate packaging (and not the outer packaging).
   */
  immediatePackaging?: fhir.IdentifierArgs|undefined;
}

/**
 * Batch numbering.
 */
export class MedicinalProductPackagedBatchIdentifier extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductPackagedBatchIdentifier';
  /**
   * A number appearing on the outer packaging of a specific batch.
   */
  public outerPackaging: fhir.Identifier|null;
  /**
   * A number appearing on the immediate packaging (and not the outer packaging).
   */
  public immediatePackaging?: fhir.Identifier|undefined;
  /**
   * Default constructor for MedicinalProductPackagedBatchIdentifier - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductPackagedBatchIdentifierArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['outerPackaging']) { this.outerPackaging = new fhir.Identifier(source.outerPackaging); }
    else { this.outerPackaging = null; }
    if (source['immediatePackaging']) { this.immediatePackaging = new fhir.Identifier(source.immediatePackaging); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductPackaged.batchIdentifier' }
    this.vRS('outerPackaging',exp)
    this.vOS('immediatePackaging',exp)
    return issues;
  }
}
/**
 * Valid arguments for the MedicinalProductPackagedPackageItem type.
 */
export interface MedicinalProductPackagedPackageItemArgs extends fhir.BackboneElementArgs {
  /**
   * Including possibly Data Carrier Identifier.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The physical type of the container of the medicine.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.
   */
  quantity: fhir.QuantityArgs|null;
  /**
   * Material type of the package item.
   */
  material?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A possible alternate material for the packaging.
   */
  alternateMaterial?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A device accompanying a medicinal product.
   */
  device?: fhir.ReferenceArgs[]|undefined;
  /**
   * The manufactured item as contained in the packaged medicinal product.
   */
  manufacturedItem?: fhir.ReferenceArgs[]|undefined;
  /**
   * Allows containers within containers.
   */
  packageItem?: fhir.MedicinalProductPackagedPackageItemArgs[]|undefined;
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhir.ProdCharacteristicArgs|undefined;
  /**
   * Other codeable characteristics.
   */
  otherCharacteristics?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Shelf Life and storage information.
   */
  shelfLifeStorage?: fhir.ProductShelfLifeArgs[]|undefined;
  /**
   * Manufacturer of this Package Item.
   */
  manufacturer?: fhir.ReferenceArgs[]|undefined;
}

/**
 * A packaging item, as a contained for medicine, possibly with other packaging items within.
 */
export class MedicinalProductPackagedPackageItem extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductPackagedPackageItem';
  /**
   * Including possibly Data Carrier Identifier.
   */
  public identifier: fhir.Identifier[];
  /**
   * The physical type of the container of the medicine.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.
   */
  public quantity: fhir.Quantity|null;
  /**
   * Material type of the package item.
   */
  public material: fhir.CodeableConcept[];
  /**
   * A possible alternate material for the packaging.
   */
  public alternateMaterial: fhir.CodeableConcept[];
  /**
   * A device accompanying a medicinal product.
   */
  public device: fhir.Reference[];
  /**
   * The manufactured item as contained in the packaged medicinal product.
   */
  public manufacturedItem: fhir.Reference[];
  /**
   * Allows containers within containers.
   */
  public packageItem: fhir.MedicinalProductPackagedPackageItem[];
  /**
   * Dimensions, color etc.
   */
  public physicalCharacteristics?: fhir.ProdCharacteristic|undefined;
  /**
   * Other codeable characteristics.
   */
  public otherCharacteristics: fhir.CodeableConcept[];
  /**
   * Shelf Life and storage information.
   */
  public shelfLifeStorage: fhir.ProductShelfLife[];
  /**
   * Manufacturer of this Package Item.
   */
  public manufacturer: fhir.Reference[];
  /**
   * Default constructor for MedicinalProductPackagedPackageItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductPackagedPackageItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    else { this.quantity = null; }
    if (source['material']) { this.material = source.material.map((x) => new fhir.CodeableConcept(x)); }
    else { this.material = []; }
    if (source['alternateMaterial']) { this.alternateMaterial = source.alternateMaterial.map((x) => new fhir.CodeableConcept(x)); }
    else { this.alternateMaterial = []; }
    if (source['device']) { this.device = source.device.map((x) => new fhir.Reference(x)); }
    else { this.device = []; }
    if (source['manufacturedItem']) { this.manufacturedItem = source.manufacturedItem.map((x) => new fhir.Reference(x)); }
    else { this.manufacturedItem = []; }
    if (source['packageItem']) { this.packageItem = source.packageItem.map((x) => new fhir.MedicinalProductPackagedPackageItem(x)); }
    else { this.packageItem = []; }
    if (source['physicalCharacteristics']) { this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics); }
    if (source['otherCharacteristics']) { this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x)); }
    else { this.otherCharacteristics = []; }
    if (source['shelfLifeStorage']) { this.shelfLifeStorage = source.shelfLifeStorage.map((x) => new fhir.ProductShelfLife(x)); }
    else { this.shelfLifeStorage = []; }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }
    else { this.manufacturer = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductPackaged.packageItem' }
    this.vOA('identifier',exp)
    this.vRS('type',exp)
    this.vRS('quantity',exp)
    this.vOA('material',exp)
    this.vOA('alternateMaterial',exp)
    this.vOA('device',exp)
    this.vOA('manufacturedItem',exp)
    this.vOA('packageItem',exp)
    this.vOS('physicalCharacteristics',exp)
    this.vOA('otherCharacteristics',exp)
    this.vOA('shelfLifeStorage',exp)
    this.vOA('manufacturer',exp)
    return issues;
  }
}
/**
 * Valid arguments for the MedicinalProductPackaged type.
 */
export interface MedicinalProductPackagedArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductPackaged"|undefined;
  /**
   * Unique identifier.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * The product with this is a pack for.
   */
  subject?: fhir.ReferenceArgs[]|undefined;
  /**
   * Textual description.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: MedicinalProductPackaged.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  legalStatusOfSupply?: fhir.CodeableConceptArgs|undefined;
  /**
   * Marketing information.
   */
  marketingStatus?: fhir.MarketingStatusArgs[]|undefined;
  /**
   * Manufacturer of this Package Item.
   */
  marketingAuthorization?: fhir.ReferenceArgs|undefined;
  /**
   * Manufacturer of this Package Item.
   */
  manufacturer?: fhir.ReferenceArgs[]|undefined;
  /**
   * Batch numbering.
   */
  batchIdentifier?: fhir.MedicinalProductPackagedBatchIdentifierArgs[]|undefined;
  /**
   * A packaging item, as a contained for medicine, possibly with other packaging items within.
   */
  packageItem: fhir.MedicinalProductPackagedPackageItemArgs[]|null;
}

/**
 * A medicinal product in a container or package.
 */
export class MedicinalProductPackaged extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductPackaged';
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductPackaged";
  /**
   * Unique identifier.
   */
  public identifier: fhir.Identifier[];
  /**
   * The product with this is a pack for.
   */
  public subject: fhir.Reference[];
  /**
   * Textual description.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  public legalStatusOfSupply?: fhir.CodeableConcept|undefined;
  /**
   * Marketing information.
   */
  public marketingStatus: fhir.MarketingStatus[];
  /**
   * Manufacturer of this Package Item.
   */
  public marketingAuthorization?: fhir.Reference|undefined;
  /**
   * Manufacturer of this Package Item.
   */
  public manufacturer: fhir.Reference[];
  /**
   * Batch numbering.
   */
  public batchIdentifier: fhir.MedicinalProductPackagedBatchIdentifier[];
  /**
   * A packaging item, as a contained for medicine, possibly with other packaging items within.
   */
  public packageItem: fhir.MedicinalProductPackagedPackageItem[];
  /**
   * Default constructor for MedicinalProductPackaged - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductPackagedArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'MedicinalProductPackaged';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['subject']) { this.subject = source.subject.map((x) => new fhir.Reference(x)); }
    else { this.subject = []; }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['legalStatusOfSupply']) { this.legalStatusOfSupply = new fhir.CodeableConcept(source.legalStatusOfSupply); }
    if (source['marketingStatus']) { this.marketingStatus = source.marketingStatus.map((x) => new fhir.MarketingStatus(x)); }
    else { this.marketingStatus = []; }
    if (source['marketingAuthorization']) { this.marketingAuthorization = new fhir.Reference(source.marketingAuthorization); }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }
    else { this.manufacturer = []; }
    if (source['batchIdentifier']) { this.batchIdentifier = source.batchIdentifier.map((x) => new fhir.MedicinalProductPackagedBatchIdentifier(x)); }
    else { this.batchIdentifier = []; }
    if (source['packageItem']) { this.packageItem = source.packageItem.map((x) => new fhir.MedicinalProductPackagedPackageItem(x)); }
    else { this.packageItem = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductPackaged' }
    this.vRS('resourceType',exp)
    this.vOA('identifier',exp)
    this.vOA('subject',exp)
    this.vOS('description',exp)
    this.vOS('legalStatusOfSupply',exp)
    this.vOA('marketingStatus',exp)
    this.vOS('marketingAuthorization',exp)
    this.vOA('manufacturer',exp)
    this.vOA('batchIdentifier',exp)
    this.vRA('packageItem',exp)
    return issues;
  }
}
