// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: MedicinalProductManufactured

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the MedicinalProductManufactured type.
 */
export interface MedicinalProductManufacturedArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "MedicinalProductManufactured"|undefined;
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  manufacturedDoseForm: fhir.CodeableConceptArgs|null;
  /**
   * The “real world” units in which the quantity of the manufactured item is described.
   */
  unitOfPresentation?: fhir.CodeableConceptArgs|undefined;
  /**
   * The quantity or "count number" of the manufactured item.
   */
  quantity: fhir.QuantityArgs|null;
  /**
   * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
   */
  manufacturer?: fhir.ReferenceArgs[]|undefined;
  /**
   * Ingredient.
   */
  ingredient?: fhir.ReferenceArgs[]|undefined;
  /**
   * Dimensions, color etc.
   */
  physicalCharacteristics?: fhir.ProdCharacteristicArgs|undefined;
  /**
   * Other codeable characteristics.
   */
  otherCharacteristics?: fhir.CodeableConceptArgs[]|undefined;
}

/**
 * The manufactured item as contained in the packaged medicinal product.
 */
export class MedicinalProductManufactured extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'MedicinalProductManufactured';
  /**
   * Resource Type Name
   */
  public override resourceType: "MedicinalProductManufactured";
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  public manufacturedDoseForm: fhir.CodeableConcept|null;
  /**
   * The “real world” units in which the quantity of the manufactured item is described.
   */
  public unitOfPresentation?: fhir.CodeableConcept|undefined;
  /**
   * The quantity or "count number" of the manufactured item.
   */
  public quantity: fhir.Quantity|null;
  /**
   * Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
   */
  public manufacturer: fhir.Reference[];
  /**
   * Ingredient.
   */
  public ingredient: fhir.Reference[];
  /**
   * Dimensions, color etc.
   */
  public physicalCharacteristics?: fhir.ProdCharacteristic|undefined;
  /**
   * Other codeable characteristics.
   */
  public otherCharacteristics: fhir.CodeableConcept[];
  /**
   * Default constructor for MedicinalProductManufactured - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<MedicinalProductManufacturedArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'MedicinalProductManufactured';
    if (source['manufacturedDoseForm']) { this.manufacturedDoseForm = new fhir.CodeableConcept(source.manufacturedDoseForm); }
    else { this.manufacturedDoseForm = null; }
    if (source['unitOfPresentation']) { this.unitOfPresentation = new fhir.CodeableConcept(source.unitOfPresentation); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    else { this.quantity = null; }
    if (source['manufacturer']) { this.manufacturer = source.manufacturer.map((x) => new fhir.Reference(x)); }
    else { this.manufacturer = []; }
    if (source['ingredient']) { this.ingredient = source.ingredient.map((x) => new fhir.Reference(x)); }
    else { this.ingredient = []; }
    if (source['physicalCharacteristics']) { this.physicalCharacteristics = new fhir.ProdCharacteristic(source.physicalCharacteristics); }
    if (source['otherCharacteristics']) { this.otherCharacteristics = source.otherCharacteristics.map((x) => new fhir.CodeableConcept(x)); }
    else { this.otherCharacteristics = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'MedicinalProductManufactured' }
    this.vRS('resourceType',exp)
    this.vRS('manufacturedDoseForm',exp)
    this.vOS('unitOfPresentation',exp)
    this.vRS('quantity',exp)
    this.vOA('manufacturer',exp)
    this.vOA('ingredient',exp)
    this.vOS('physicalCharacteristics',exp)
    this.vOA('otherCharacteristics',exp)
    return issues;
  }
}
