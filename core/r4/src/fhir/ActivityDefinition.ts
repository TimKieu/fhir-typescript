// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: ActivityDefinition

import * as fhir from '../fhir.js';

// @ts-ignore
import { ActionParticipantTypeCodings, ActionParticipantTypeCodingType,} from '../fhirValueSets/ActionParticipantTypeCodings.js';
// @ts-ignore
import { ActionParticipantTypeCodes,  ActionParticipantTypeCodeType } from '../fhirValueSets/ActionParticipantTypeCodes.js';
// @ts-ignore
import { PublicationStatusCodings, PublicationStatusCodingType,} from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { DefinitionTopicCodings, DefinitionTopicCodingType,} from '../fhirValueSets/DefinitionTopicCodings.js';
// @ts-ignore
import { DefinitionTopicCodes,  DefinitionTopicCodeType } from '../fhirValueSets/DefinitionTopicCodes.js';
// @ts-ignore
import { RequestResourceTypesCodings, RequestResourceTypesCodingType,} from '../fhirValueSets/RequestResourceTypesCodings.js';
// @ts-ignore
import { RequestResourceTypesCodes,  RequestResourceTypesCodeType } from '../fhirValueSets/RequestResourceTypesCodes.js';
// @ts-ignore
import { ProcedureCodeCodings, ProcedureCodeCodingType,} from '../fhirValueSets/ProcedureCodeCodings.js';
// @ts-ignore
import { ProcedureCodeCodes,  ProcedureCodeCodeType } from '../fhirValueSets/ProcedureCodeCodes.js';
// @ts-ignore
import { RequestIntentCodings, RequestIntentCodingType,} from '../fhirValueSets/RequestIntentCodings.js';
// @ts-ignore
import { RequestIntentCodes,  RequestIntentCodeType } from '../fhirValueSets/RequestIntentCodes.js';
// @ts-ignore
import { RequestPriorityCodings, RequestPriorityCodingType,} from '../fhirValueSets/RequestPriorityCodings.js';
// @ts-ignore
import { RequestPriorityCodes,  RequestPriorityCodeType } from '../fhirValueSets/RequestPriorityCodes.js';
// @ts-ignore
import { BodySiteCodings, BodySiteCodingType,} from '../fhirValueSets/BodySiteCodings.js';
// @ts-ignore
import { BodySiteCodes,  BodySiteCodeType } from '../fhirValueSets/BodySiteCodes.js';
/**
 * Valid arguments for the ActivityDefinitionParticipant type.
 */
export interface ActivityDefinitionParticipantArgs extends fhir.BackboneElementArgs {
  /**
   * The type of participant in the action.
   */
  type: fhir.FhirCode<ActionParticipantTypeCodeType>|string|undefined;
  /**
   * The role the participant should play in performing the described action.
   */
  role?: fhir.CodeableConceptArgs|undefined;
}

/**
 * Indicates who should participate in performing the action described.
 */
export class ActivityDefinitionParticipant extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ActivityDefinitionParticipant';
  /**
   * The type of participant in the action.
   */
  public type: fhir.FhirCode<ActionParticipantTypeCodeType>|null;
  /**
   * The role the participant should play in performing the described action.
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ActivityDefinitionParticipant - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ActivityDefinitionParticipantArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode<ActionParticipantTypeCodeType>({value: source.type}); }
    else { this.type = null; }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }
  }
  /**
   * Required-bound Value Set for type (ActivityDefinition.participant.type)
   */
  public static get typeRequiredCodes() {
    return ActionParticipantTypeCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode<ActionParticipantTypeCodeType> fhir: ActivityDefinition.participant.type:code' });
    }
    if (this['type'] && (!Object.values(ActionParticipantTypeCodes).includes(this.type as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode<ActionParticipantTypeCodeType> fhir: ActivityDefinition.participant.type:code Required binding to: ActionParticipantType' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["role"]) { issues.push(...this.role.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ActivityDefinitionDynamicValue type.
 */
export interface ActivityDefinitionDynamicValueArgs extends fhir.BackboneElementArgs {
  /**
   * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  path: fhir.FhirString|string|undefined;
  /**
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression: fhir.ExpressionArgs|null;
}

/**
 * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
 */
export class ActivityDefinitionDynamicValue extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ActivityDefinitionDynamicValue';
  /**
   * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  public path: fhir.FhirString|null;
  /**
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  public expression: fhir.Expression|null;
  /**
   * Default constructor for ActivityDefinitionDynamicValue - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ActivityDefinitionDynamicValueArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['path']) { this.path = new fhir.FhirString({value: source.path}); }
    else { this.path = null; }
    if (source['expression']) { this.expression = new fhir.Expression(source.expression); }
    else { this.expression = null; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['path']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property path:fhir.FhirString fhir: ActivityDefinition.dynamicValue.path:string' });
    }
    if (this["path"]) { issues.push(...this.path.doModelValidation()); }
    if (!this['expression']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property expression:fhir.Expression fhir: ActivityDefinition.dynamicValue.expression:Expression' });
    }
    if (this["expression"]) { issues.push(...this.expression.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the ActivityDefinition type.
 */
export interface ActivityDefinitionArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "ActivityDefinition"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different activity definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the activity definition with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * An explanatory or alternate title for the activity definition giving additional information about its content.
   */
  subtitle?: fhir.FhirString|string|undefined;
  /**
   * Allows filtering of activity definitions that are appropriate for use versus not.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Allows filtering of activity definitions that are appropriate for use versus not.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * A code or group definition that describes the intended subject of the activity being defined.
   */
  subject?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * A code or group definition that describes the intended subject of the activity being defined.
   */
  subjectCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * A code or group definition that describes the intended subject of the activity being defined.
   */
  subjectReference?: fhir.ReferenceArgs|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the activity definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the activity definition is the organization or individual primarily responsible for the maintenance and upkeep of the activity definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the activity definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the activity definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the activity definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the activity definition is presumed to be the predominant language in the place the activity definition was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the activity definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This element does not describe the usage of the activity definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this activity definition.
   */
  purpose?: fhir.FhirMarkdown|string|undefined;
  /**
   * A detailed description of how the activity definition is used from a clinical perspective.
   */
  usage?: fhir.FhirString|string|undefined;
  /**
   * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  approvalDate?: fhir.FhirDate|string|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: fhir.FhirDate|string|undefined;
  /**
   * The effective period for a activity definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: fhir.PeriodArgs|undefined;
  /**
   * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
   */
  topic?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  reviewer?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  endorser?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: fhir.RelatedArtifactArgs[]|undefined;
  /**
   * A reference to a Library resource containing any formal logic used by the activity definition.
   */
  library?: fhir.FhirCanonical[]|string[]|undefined;
  /**
   * May determine what types of extensions are permitted.
   */
  kind?: fhir.FhirCode|string|undefined;
  /**
   * A profile to which the target of the activity definition is expected to conform.
   */
  profile?: fhir.FhirCanonical|string|undefined;
  /**
   * Tends to be less relevant for activities involving particular products.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
   */
  intent?: fhir.FhirCode<RequestIntentCodeType>|string|undefined;
  /**
   * Indicates how quickly the activity  should be addressed with respect to other requests.
   */
  priority?: fhir.FhirCode<RequestPriorityCodeType>|string|undefined;
  /**
   * This element is not intended to be used to communicate a decision support response to cancel an order in progress. That should be done with the "remove" type of a PlanDefinition or RequestGroup.
   */
  doNotPerform?: fhir.FhirBoolean|boolean|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timing?: fhir.Timing|fhir.FhirDateTime|fhir.Age|fhir.Period|fhir.Range|fhir.Duration|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingTiming?: fhir.TimingArgs|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingAge?: fhir.AgeArgs|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingPeriod?: fhir.PeriodArgs|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingRange?: fhir.RangeArgs|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingDuration?: fhir.DurationArgs|undefined;
  /**
   * May reference a specific clinical location or may just identify a type of location.
   */
  location?: fhir.ReferenceArgs|undefined;
  /**
   * Indicates who should participate in performing the action described.
   */
  participant?: fhir.ActivityDefinitionParticipantArgs[]|undefined;
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  product?: fhir.Reference|fhir.CodeableConcept|undefined;
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  productReference?: fhir.ReferenceArgs|undefined;
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  productCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If a dosage instruction is used, the definition should not specify timing or quantity.
   */
  dosage?: fhir.DosageArgs[]|undefined;
  /**
   * Only used if not implicit in the code found in ServiceRequest.type.
   */
  bodySite?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
   */
  specimenRequirement?: fhir.ReferenceArgs[]|undefined;
  /**
   * Defines observation requirements for the action to be performed, such as body weight or surface area.
   */
  observationRequirement?: fhir.ReferenceArgs[]|undefined;
  /**
   * Defines the observations that are expected to be produced by the action.
   */
  observationResultRequirement?: fhir.ReferenceArgs[]|undefined;
  /**
   * Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
   */
  transform?: fhir.FhirCanonical|string|undefined;
  /**
   * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
   */
  dynamicValue?: fhir.ActivityDefinitionDynamicValueArgs[]|undefined;
}

/**
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
export class ActivityDefinition extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ActivityDefinition';
  /**
   * Resource Type Name
   */
  public override resourceType: "ActivityDefinition";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier: fhir.Identifier[];
  /**
   * There may be different activity definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the activity definition with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * An explanatory or alternate title for the activity definition giving additional information about its content.
   */
  public subtitle?: fhir.FhirString|undefined;
  /**
   * Allows filtering of activity definitions that are appropriate for use versus not.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Allows filtering of activity definitions that are appropriate for use versus not.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * A code or group definition that describes the intended subject of the activity being defined.
   */
  public subject?: (fhir.CodeableConcept|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ActivityDefinition.subject[x]
   */
  protected static readonly _fts_subjectIsChoice:true = true;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the activity definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the activity definition is the organization or individual primarily responsible for the maintenance and upkeep of the activity definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the activity definition. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact: fhir.ContactDetail[];
  /**
   * This description can be used to capture details such as why the activity definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the activity definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the activity definition is presumed to be the predominant language in the place the activity definition was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * It may be possible for the activity definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction: fhir.CodeableConcept[];
  /**
   * This element does not describe the usage of the activity definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this activity definition.
   */
  public purpose?: fhir.FhirMarkdown|undefined;
  /**
   * A detailed description of how the activity definition is used from a clinical perspective.
   */
  public usage?: fhir.FhirString|undefined;
  /**
   * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  public approvalDate?: fhir.FhirDate|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  public lastReviewDate?: fhir.FhirDate|undefined;
  /**
   * The effective period for a activity definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  public effectivePeriod?: fhir.Period|undefined;
  /**
   * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
   */
  public topic: fhir.CodeableConcept[];
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  public author: fhir.ContactDetail[];
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  public editor: fhir.ContactDetail[];
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  public reviewer: fhir.ContactDetail[];
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  public endorser: fhir.ContactDetail[];
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  public relatedArtifact: fhir.RelatedArtifact[];
  /**
   * A reference to a Library resource containing any formal logic used by the activity definition.
   */
  public library: fhir.FhirCanonical[];
  /**
   * May determine what types of extensions are permitted.
   */
  public kind?: fhir.FhirCode|undefined;
  /**
   * A profile to which the target of the activity definition is expected to conform.
   */
  public profile?: fhir.FhirCanonical|undefined;
  /**
   * Tends to be less relevant for activities involving particular products.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
   */
  public intent?: fhir.FhirCode<RequestIntentCodeType>|undefined;
  /**
   * Indicates how quickly the activity  should be addressed with respect to other requests.
   */
  public priority?: fhir.FhirCode<RequestPriorityCodeType>|undefined;
  /**
   * This element is not intended to be used to communicate a decision support response to cancel an order in progress. That should be done with the "remove" type of a PlanDefinition or RequestGroup.
   */
  public doNotPerform?: fhir.FhirBoolean|undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  public timing?: (fhir.Timing|fhir.FhirDateTime|fhir.Age|fhir.Period|fhir.Range|fhir.Duration)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ActivityDefinition.timing[x]
   */
  protected static readonly _fts_timingIsChoice:true = true;
  /**
   * May reference a specific clinical location or may just identify a type of location.
   */
  public location?: fhir.Reference|undefined;
  /**
   * Indicates who should participate in performing the action described.
   */
  public participant: fhir.ActivityDefinitionParticipant[];
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  public product?: (fhir.Reference|fhir.CodeableConcept)|undefined;
  /**
   * Internal flag to properly serialize choice-type element ActivityDefinition.product[x]
   */
  protected static readonly _fts_productIsChoice:true = true;
  /**
   * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If a dosage instruction is used, the definition should not specify timing or quantity.
   */
  public dosage: fhir.Dosage[];
  /**
   * Only used if not implicit in the code found in ServiceRequest.type.
   */
  public bodySite: fhir.CodeableConcept[];
  /**
   * Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
   */
  public specimenRequirement: fhir.Reference[];
  /**
   * Defines observation requirements for the action to be performed, such as body weight or surface area.
   */
  public observationRequirement: fhir.Reference[];
  /**
   * Defines the observations that are expected to be produced by the action.
   */
  public observationResultRequirement: fhir.Reference[];
  /**
   * Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
   */
  public transform?: fhir.FhirCanonical|undefined;
  /**
   * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
   */
  public dynamicValue: fhir.ActivityDefinitionDynamicValue[];
  /**
   * Default constructor for ActivityDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ActivityDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'ActivityDefinition';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['subtitle']) { this.subtitle = new fhir.FhirString({value: source.subtitle}); }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['subject']) { this.subject = source.subject; }
    else if (source['subjectCodeableConcept']) { this.subject = new fhir.CodeableConcept(source.subjectCodeableConcept); }
    else if (source['subjectReference']) { this.subject = new fhir.Reference(source.subjectReference); }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    else { this.jurisdiction = []; }
    if (source['purpose']) { this.purpose = new fhir.FhirMarkdown({value: source.purpose}); }
    if (source['usage']) { this.usage = new fhir.FhirString({value: source.usage}); }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['approvalDate']) { this.approvalDate = new fhir.FhirDate({value: source.approvalDate}); }
    if (source['lastReviewDate']) { this.lastReviewDate = new fhir.FhirDate({value: source.lastReviewDate}); }
    if (source['effectivePeriod']) { this.effectivePeriod = new fhir.Period(source.effectivePeriod); }
    if (source['topic']) { this.topic = source.topic.map((x) => new fhir.CodeableConcept(x)); }
    else { this.topic = []; }
    if (source['author']) { this.author = source.author.map((x) => new fhir.ContactDetail(x)); }
    else { this.author = []; }
    if (source['editor']) { this.editor = source.editor.map((x) => new fhir.ContactDetail(x)); }
    else { this.editor = []; }
    if (source['reviewer']) { this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x)); }
    else { this.reviewer = []; }
    if (source['endorser']) { this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x)); }
    else { this.endorser = []; }
    if (source['relatedArtifact']) { this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x)); }
    else { this.relatedArtifact = []; }
    if (source['library']) { this.library = source.library.map((x) => new fhir.FhirCanonical({value: x})); }
    else { this.library = []; }
    if (source['kind']) { this.kind = new fhir.FhirCode({value: source.kind}); }
    if (source['profile']) { this.profile = new fhir.FhirCanonical({value: source.profile}); }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['intent']) { this.intent = new fhir.FhirCode<RequestIntentCodeType>({value: source.intent}); }
    if (source['priority']) { this.priority = new fhir.FhirCode<RequestPriorityCodeType>({value: source.priority}); }
    if (source['doNotPerform']) { this.doNotPerform = new fhir.FhirBoolean({value: source.doNotPerform}); }
    if (source['timing']) { this.timing = source.timing; }
    else if (source['timingTiming']) { this.timing = new fhir.Timing(source.timingTiming); }
    else if (source['timingDateTime']) { this.timing = new fhir.FhirDateTime({value: source.timingDateTime}); }
    else if (source['timingAge']) { this.timing = new fhir.Age(source.timingAge); }
    else if (source['timingPeriod']) { this.timing = new fhir.Period(source.timingPeriod); }
    else if (source['timingRange']) { this.timing = new fhir.Range(source.timingRange); }
    else if (source['timingDuration']) { this.timing = new fhir.Duration(source.timingDuration); }
    if (source['location']) { this.location = new fhir.Reference(source.location); }
    if (source['participant']) { this.participant = source.participant.map((x) => new fhir.ActivityDefinitionParticipant(x)); }
    else { this.participant = []; }
    if (source['product']) { this.product = source.product; }
    else if (source['productReference']) { this.product = new fhir.Reference(source.productReference); }
    else if (source['productCodeableConcept']) { this.product = new fhir.CodeableConcept(source.productCodeableConcept); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['dosage']) { this.dosage = source.dosage.map((x) => new fhir.Dosage(x)); }
    else { this.dosage = []; }
    if (source['bodySite']) { this.bodySite = source.bodySite.map((x) => new fhir.CodeableConcept(x)); }
    else { this.bodySite = []; }
    if (source['specimenRequirement']) { this.specimenRequirement = source.specimenRequirement.map((x) => new fhir.Reference(x)); }
    else { this.specimenRequirement = []; }
    if (source['observationRequirement']) { this.observationRequirement = source.observationRequirement.map((x) => new fhir.Reference(x)); }
    else { this.observationRequirement = []; }
    if (source['observationResultRequirement']) { this.observationResultRequirement = source.observationResultRequirement.map((x) => new fhir.Reference(x)); }
    else { this.observationResultRequirement = []; }
    if (source['transform']) { this.transform = new fhir.FhirCanonical({value: source.transform}); }
    if (source['dynamicValue']) { this.dynamicValue = source.dynamicValue.map((x) => new fhir.ActivityDefinitionDynamicValue(x)); }
    else { this.dynamicValue = []; }
  }
  /**
   * Required-bound Value Set for status (ActivityDefinition.status)
   */
  public static get statusRequiredCodes() {
    return PublicationStatusCodes;
  }
  /**
   * Required-bound Value Set for kind (ActivityDefinition.kind)
   */
  public static get kindRequiredCodes() {
    return RequestResourceTypesCodes;
  }
  /**
   * Required-bound Value Set for intent (ActivityDefinition.intent)
   */
  public static get intentRequiredCodes() {
    return RequestIntentCodes;
  }
  /**
   * Required-bound Value Set for priority (ActivityDefinition.priority)
   */
  public static get priorityRequiredCodes() {
    return RequestPriorityCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"ActivityDefinition" fhir: ActivityDefinition.resourceType:"ActivityDefinition"' });
    }
    if (this["url"]) { issues.push(...this.url.doModelValidation()); }
    if (this["identifier"]) { this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["version"]) { issues.push(...this.version.doModelValidation()); }
    if (this["name"]) { issues.push(...this.name.doModelValidation()); }
    if (this["title"]) { issues.push(...this.title.doModelValidation()); }
    if (this["subtitle"]) { issues.push(...this.subtitle.doModelValidation()); }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ActivityDefinition.status:code' });
    }
    if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: ActivityDefinition.status:code Required binding to: PublicationStatus' });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation()); }
    if (this["experimental"]) { issues.push(...this.experimental.doModelValidation()); }
    if (this["date"]) { issues.push(...this.date.doModelValidation()); }
    if (this["publisher"]) { issues.push(...this.publisher.doModelValidation()); }
    if (this["contact"]) { this.contact.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    if (this["useContext"]) { this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["purpose"]) { issues.push(...this.purpose.doModelValidation()); }
    if (this["usage"]) { issues.push(...this.usage.doModelValidation()); }
    if (this["copyright"]) { issues.push(...this.copyright.doModelValidation()); }
    if (this["approvalDate"]) { issues.push(...this.approvalDate.doModelValidation()); }
    if (this["lastReviewDate"]) { issues.push(...this.lastReviewDate.doModelValidation()); }
    if (this["effectivePeriod"]) { issues.push(...this.effectivePeriod.doModelValidation()); }
    if (this["topic"]) { this.topic.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["author"]) { this.author.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["editor"]) { this.editor.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["reviewer"]) { this.reviewer.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["endorser"]) { this.endorser.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["relatedArtifact"]) { this.relatedArtifact.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["library"]) { this.library.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this['kind'] && (!Object.values(RequestResourceTypesCodes).includes(this.kind as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property kind?:fhir.FhirCode fhir: ActivityDefinition.kind:code Required binding to: RequestResourceTypes' });
    }
    if (this["kind"]) { issues.push(...this.kind.doModelValidation()); }
    if (this["profile"]) { issues.push(...this.profile.doModelValidation()); }
    if (this["code"]) { issues.push(...this.code.doModelValidation()); }
    if (this['intent'] && (!Object.values(RequestIntentCodes).includes(this.intent as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property intent?:fhir.FhirCode<RequestIntentCodeType> fhir: ActivityDefinition.intent:code Required binding to: RequestIntent' });
    }
    if (this["intent"]) { issues.push(...this.intent.doModelValidation()); }
    if (this['priority'] && (!Object.values(RequestPriorityCodes).includes(this.priority as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property priority?:fhir.FhirCode<RequestPriorityCodeType> fhir: ActivityDefinition.priority:code Required binding to: RequestPriority' });
    }
    if (this["priority"]) { issues.push(...this.priority.doModelValidation()); }
    if (this["doNotPerform"]) { issues.push(...this.doNotPerform.doModelValidation()); }
    if (this["location"]) { issues.push(...this.location.doModelValidation()); }
    if (this["participant"]) { this.participant.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation()); }
    if (this["dosage"]) { this.dosage.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["bodySite"]) { this.bodySite.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["specimenRequirement"]) { this.specimenRequirement.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["observationRequirement"]) { this.observationRequirement.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["observationResultRequirement"]) { this.observationResultRequirement.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["transform"]) { issues.push(...this.transform.doModelValidation()); }
    if (this["dynamicValue"]) { this.dynamicValue.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
