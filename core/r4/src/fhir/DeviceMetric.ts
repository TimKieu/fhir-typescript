// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DeviceMetric

import * as fhir from '../fhir.js';

// @ts-ignore
import { MetricCalibrationTypeCodings, MetricCalibrationTypeCodingType,} from '../fhirValueSets/MetricCalibrationTypeCodings.js';
// @ts-ignore
import { MetricCalibrationTypeCodes,  MetricCalibrationTypeCodeType } from '../fhirValueSets/MetricCalibrationTypeCodes.js';
// @ts-ignore
import { MetricCalibrationStateCodings, MetricCalibrationStateCodingType,} from '../fhirValueSets/MetricCalibrationStateCodings.js';
// @ts-ignore
import { MetricCalibrationStateCodes,  MetricCalibrationStateCodeType } from '../fhirValueSets/MetricCalibrationStateCodes.js';
// @ts-ignore
import { MetricOperationalStatusCodings, MetricOperationalStatusCodingType,} from '../fhirValueSets/MetricOperationalStatusCodings.js';
// @ts-ignore
import { MetricOperationalStatusCodes,  MetricOperationalStatusCodeType } from '../fhirValueSets/MetricOperationalStatusCodes.js';
// @ts-ignore
import { MetricColorCodings, MetricColorCodingType,} from '../fhirValueSets/MetricColorCodings.js';
// @ts-ignore
import { MetricColorCodes,  MetricColorCodeType } from '../fhirValueSets/MetricColorCodes.js';
// @ts-ignore
import { MetricCategoryCodings, MetricCategoryCodingType,} from '../fhirValueSets/MetricCategoryCodings.js';
// @ts-ignore
import { MetricCategoryCodes,  MetricCategoryCodeType } from '../fhirValueSets/MetricCategoryCodes.js';
/**
 * Valid arguments for the DeviceMetricCalibration type.
 */
export interface DeviceMetricCalibrationArgs extends fhir.BackboneElementArgs {
  /**
   * Describes the type of the calibration method.
   */
  type?: fhir.FhirCode<MetricCalibrationTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DeviceMetric.calibration.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * Describes the state of the calibration.
   */
  state?: fhir.FhirCode<MetricCalibrationStateCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DeviceMetric.calibration.state
   */
  _state?:fhir.FhirElementArgs;
  /**
   * Describes the time last calibration has been performed.
   */
  time?: fhir.FhirInstant|string|undefined;
  /**
   * Extended properties for primitive element: DeviceMetric.calibration.time
   */
  _time?:fhir.FhirElementArgs;
}

/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export class DeviceMetricCalibration extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DeviceMetricCalibration';
  /**
   * Describes the type of the calibration method.
   */
  public type?: fhir.FhirCode<MetricCalibrationTypeCodeType>|undefined;
  /**
   * Describes the state of the calibration.
   */
  public state?: fhir.FhirCode<MetricCalibrationStateCodeType>|undefined;
  /**
   * Describes the time last calibration has been performed.
   */
  public time?: fhir.FhirInstant|undefined;
  /**
   * Default constructor for DeviceMetricCalibration - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DeviceMetricCalibrationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode<MetricCalibrationTypeCodeType>({value: source.type}); }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode<MetricCalibrationTypeCodeType>(source._type as Partial<fhir.FhirCode>); }
    }
    if (source['state']) { this.state = new fhir.FhirCode<MetricCalibrationStateCodeType>({value: source.state}); }
    if (source['_state']) {
      if (this.state) { this.state.addExtendedProperties(source._state!); }
      else { this.state = new fhir.FhirCode<MetricCalibrationStateCodeType>(source._state as Partial<fhir.FhirCode>); }
    }
    if (source['time']) { this.time = new fhir.FhirInstant({value: source.time}); }
    if (source['_time']) {
      if (this.time) { this.time.addExtendedProperties(source._time!); }
      else { this.time = new fhir.FhirInstant(source._time as Partial<fhir.FhirInstantArgs>); }
    }
  }
  /**
   * Required-bound Value Set for type (DeviceMetric.calibration.type)
   */
  public static get typeRequiredCodes() {
    return MetricCalibrationTypeCodes;
  }
  /**
   * Required-bound Value Set for state (DeviceMetric.calibration.state)
   */
  public static get stateRequiredCodes() {
    return MetricCalibrationStateCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'DeviceMetric.calibration' }
    if (this['type'] && (!Object.values(MetricCalibrationTypeCodes).includes(this.type.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type fhir: DeviceMetric.calibration.type:code Required binding to: MetricCalibrationType', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this['state'] && (!Object.values(MetricCalibrationStateCodes).includes(this.state.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property state fhir: DeviceMetric.calibration.state:code Required binding to: MetricCalibrationState', expression: [expression] });
    }
    if (this["state"]) { issues.push(...this.state.doModelValidation(expression+'.state')); }
    if (this["time"]) { issues.push(...this.time.doModelValidation(expression+'.time')); }
    return issues;
  }
}
/**
 * Valid arguments for the DeviceMetric type.
 */
export interface DeviceMetricArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "DeviceMetric"|undefined;
  /**
   * For identifiers assigned to a device by the device or gateway software, the `system` element of the identifier should be set to the unique identifier of the device.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
   */
  unit?: fhir.CodeableConceptArgs|undefined;
  /**
   * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
   */
  source?: fhir.ReferenceArgs|undefined;
  /**
   * Describes the link to the  Device that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a Device that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
   */
  parent?: fhir.ReferenceArgs|undefined;
  /**
   * Indicates current operational state of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: fhir.FhirCode<MetricOperationalStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DeviceMetric.operationalStatus
   */
  _operationalStatus?:fhir.FhirElementArgs;
  /**
   * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
   */
  color?: fhir.FhirCode<MetricColorCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DeviceMetric.color
   */
  _color?:fhir.FhirElementArgs;
  /**
   * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
   */
  category: fhir.FhirCode<MetricCategoryCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DeviceMetric.category
   */
  _category?:fhir.FhirElementArgs;
  /**
   * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
   */
  measurementPeriod?: fhir.TimingArgs|undefined;
  /**
   * Describes the calibrations that have been performed or that are required to be performed.
   */
  calibration?: fhir.DeviceMetricCalibrationArgs[]|undefined;
}

/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
export class DeviceMetric extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DeviceMetric';
  /**
   * Resource Type Name
   */
  public override resourceType: "DeviceMetric";
  /**
   * For identifiers assigned to a device by the device or gateway software, the `system` element of the identifier should be set to the unique identifier of the device.
   */
  public identifier: fhir.Identifier[];
  /**
   * DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
   */
  public unit?: fhir.CodeableConcept|undefined;
  /**
   * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
   */
  public source?: fhir.Reference|undefined;
  /**
   * Describes the link to the  Device that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a Device that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
   */
  public parent?: fhir.Reference|undefined;
  /**
   * Indicates current operational state of the device. For example: On, Off, Standby, etc.
   */
  public operationalStatus?: fhir.FhirCode<MetricOperationalStatusCodeType>|undefined;
  /**
   * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
   */
  public color?: fhir.FhirCode<MetricColorCodeType>|undefined;
  /**
   * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
   */
  public category: fhir.FhirCode<MetricCategoryCodeType>|null;
  /**
   * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
   */
  public measurementPeriod?: fhir.Timing|undefined;
  /**
   * Describes the calibrations that have been performed or that are required to be performed.
   */
  public calibration: fhir.DeviceMetricCalibration[];
  /**
   * Default constructor for DeviceMetric - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DeviceMetricArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'DeviceMetric';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['unit']) { this.unit = new fhir.CodeableConcept(source.unit); }
    if (source['source']) { this.source = new fhir.Reference(source.source); }
    if (source['parent']) { this.parent = new fhir.Reference(source.parent); }
    if (source['operationalStatus']) { this.operationalStatus = new fhir.FhirCode<MetricOperationalStatusCodeType>({value: source.operationalStatus}); }
    if (source['_operationalStatus']) {
      if (this.operationalStatus) { this.operationalStatus.addExtendedProperties(source._operationalStatus!); }
      else { this.operationalStatus = new fhir.FhirCode<MetricOperationalStatusCodeType>(source._operationalStatus as Partial<fhir.FhirCode>); }
    }
    if (source['color']) { this.color = new fhir.FhirCode<MetricColorCodeType>({value: source.color}); }
    if (source['_color']) {
      if (this.color) { this.color.addExtendedProperties(source._color!); }
      else { this.color = new fhir.FhirCode<MetricColorCodeType>(source._color as Partial<fhir.FhirCode>); }
    }
    if (source['category']) { this.category = new fhir.FhirCode<MetricCategoryCodeType>({value: source.category}); }
    else { this.category = null; }
    if (source['_category']) {
      if (this.category) { this.category.addExtendedProperties(source._category!); }
      else { this.category = new fhir.FhirCode<MetricCategoryCodeType>(source._category as Partial<fhir.FhirCode>); }
    }
    if (source['measurementPeriod']) { this.measurementPeriod = new fhir.Timing(source.measurementPeriod); }
    if (source['calibration']) { this.calibration = source.calibration.map((x) => new fhir.DeviceMetricCalibration(x)); }
    else { this.calibration = []; }
  }
  /**
   * Required-bound Value Set for operationalStatus (DeviceMetric.operationalStatus)
   */
  public static get operationalStatusRequiredCodes() {
    return MetricOperationalStatusCodes;
  }
  /**
   * Required-bound Value Set for color (DeviceMetric.color)
   */
  public static get colorRequiredCodes() {
    return MetricColorCodes;
  }
  /**
   * Required-bound Value Set for category (DeviceMetric.category)
   */
  public static get categoryRequiredCodes() {
    return MetricCategoryCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'DeviceMetric' }
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: DeviceMetric.resourceType:"DeviceMetric"', expression: [expression] });
    }
    if (this["identifier"]) { this.identifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.identifier[${i}]`)); }) }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: DeviceMetric.type:CodeableConcept', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["unit"]) { issues.push(...this.unit.doModelValidation(expression+'.unit')); }
    if (this["source"]) { issues.push(...this.source.doModelValidation(expression+'.source')); }
    if (this["parent"]) { issues.push(...this.parent.doModelValidation(expression+'.parent')); }
    if (this['operationalStatus'] && (!Object.values(MetricOperationalStatusCodes).includes(this.operationalStatus.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property operationalStatus fhir: DeviceMetric.operationalStatus:code Required binding to: MetricOperationalStatus', expression: [expression] });
    }
    if (this["operationalStatus"]) { issues.push(...this.operationalStatus.doModelValidation(expression+'.operationalStatus')); }
    if (this['color'] && (!Object.values(MetricColorCodes).includes(this.color.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property color fhir: DeviceMetric.color:code Required binding to: MetricColor', expression: [expression] });
    }
    if (this["color"]) { issues.push(...this.color.doModelValidation(expression+'.color')); }
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category fhir: DeviceMetric.category:code', expression: [expression] });
    }
    if (this['category'] && (!Object.values(MetricCategoryCodes).includes(this.category.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property category fhir: DeviceMetric.category:code Required binding to: MetricCategory', expression: [expression] });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (this["measurementPeriod"]) { issues.push(...this.measurementPeriod.doModelValidation(expression+'.measurementPeriod')); }
    if (this["calibration"]) { this.calibration.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.calibration[${i}]`)); }) }
    return issues;
  }
}
