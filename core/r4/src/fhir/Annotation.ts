// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR ComplexType: Annotation

import * as fhir from '../fhir.js';

/**
 * Valid arguments for the Annotation type.
 */
export interface AnnotationArgs extends fhir.FhirElementArgs {
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  author?: fhir.Reference|fhir.FhirString|undefined;
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorReference?: fhir.ReferenceArgs|undefined;
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorString?: fhir.FhirString|string|undefined;
  /**
   * Indicates when this particular annotation was made.
   */
  time?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Annotation.time
   */
  _time?:fhir.FhirElementArgs;
  /**
   * The text of the annotation in markdown format.
   */
  text: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: Annotation.text
   */
  _text?:fhir.FhirElementArgs;
}

/**
 * A  text note which also  contains information about who made the statement and when.
 */
export class Annotation extends fhir.FhirElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Annotation';
  /**
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  public author?: (fhir.Reference|fhir.FhirString)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Annotation.author[x]
   */
  protected static readonly _fts_authorIsChoice:true = true;
  /**
   * Indicates when this particular annotation was made.
   */
  public time?: fhir.FhirDateTime|undefined;
  /**
   * The text of the annotation in markdown format.
   */
  public text: fhir.FhirMarkdown|null;
  /**
   * Default constructor for Annotation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<AnnotationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['author']) { this.author = source.author; }
    else if (source['authorReference']) { this.author = new fhir.Reference(source.authorReference); }
    else if (source['authorString']) { this.author = new fhir.FhirString({value: source.authorString}); }
    if (source['time']) { this.time = new fhir.FhirDateTime({value: source.time}); }
    if (source['_time']) {
      if (this.time) { this.time.addExtendedProperties(source._time!); }
      else { this.time = new fhir.FhirDateTime(source._time as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['text']) { this.text = new fhir.FhirMarkdown({value: source.text}); }
    else { this.text = null; }
    if (source['_text']) {
      if (this.text) { this.text.addExtendedProperties(source._text!); }
      else { this.text = new fhir.FhirMarkdown(source._text as Partial<fhir.FhirMarkdownArgs>); }
    }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(exp:string = ''):fhir.FtsIssue[] {
    let iss:fhir.FtsIssue[] = super.doModelValidation(exp);
    if (exp === '') { exp = 'Annotation' }
    iss.push(...this.vOS('author',exp));
    iss.push(...this.vOS('time',exp));
    iss.push(...this.vRS('text',exp));
    return iss;
  }
}
