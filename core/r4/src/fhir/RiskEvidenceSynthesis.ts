// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: RiskEvidenceSynthesis

import * as fhir from '../fhir.js';

// @ts-ignore
import { PrecisionEstimateTypeCodings, PrecisionEstimateTypeCodingType,} from '../fhirValueSets/PrecisionEstimateTypeCodings.js';
// @ts-ignore
import { PrecisionEstimateTypeCodes,  PrecisionEstimateTypeCodeType } from '../fhirValueSets/PrecisionEstimateTypeCodes.js';
// @ts-ignore
import { RiskEstimateTypeCodings, RiskEstimateTypeCodingType,} from '../fhirValueSets/RiskEstimateTypeCodings.js';
// @ts-ignore
import { RiskEstimateTypeCodes,  RiskEstimateTypeCodeType } from '../fhirValueSets/RiskEstimateTypeCodes.js';
// @ts-ignore
import { UcumUnitsCodings, UcumUnitsCodingType,} from '../fhirValueSets/UcumUnitsCodings.js';
// @ts-ignore
import { UcumUnitsCodes,  UcumUnitsCodeType } from '../fhirValueSets/UcumUnitsCodes.js';
// @ts-ignore
import { CertaintySubcomponentTypeCodings, CertaintySubcomponentTypeCodingType,} from '../fhirValueSets/CertaintySubcomponentTypeCodings.js';
// @ts-ignore
import { CertaintySubcomponentTypeCodes,  CertaintySubcomponentTypeCodeType } from '../fhirValueSets/CertaintySubcomponentTypeCodes.js';
// @ts-ignore
import { CertaintySubcomponentRatingCodings, CertaintySubcomponentRatingCodingType,} from '../fhirValueSets/CertaintySubcomponentRatingCodings.js';
// @ts-ignore
import { CertaintySubcomponentRatingCodes,  CertaintySubcomponentRatingCodeType } from '../fhirValueSets/CertaintySubcomponentRatingCodes.js';
// @ts-ignore
import { EvidenceQualityCodings, EvidenceQualityCodingType,} from '../fhirValueSets/EvidenceQualityCodings.js';
// @ts-ignore
import { EvidenceQualityCodes,  EvidenceQualityCodeType } from '../fhirValueSets/EvidenceQualityCodes.js';
// @ts-ignore
import { PublicationStatusCodings, PublicationStatusCodingType,} from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
// @ts-ignore
import { DefinitionTopicCodings, DefinitionTopicCodingType,} from '../fhirValueSets/DefinitionTopicCodings.js';
// @ts-ignore
import { DefinitionTopicCodes,  DefinitionTopicCodeType } from '../fhirValueSets/DefinitionTopicCodes.js';
// @ts-ignore
import { SynthesisTypeCodings, SynthesisTypeCodingType,} from '../fhirValueSets/SynthesisTypeCodings.js';
// @ts-ignore
import { SynthesisTypeCodes,  SynthesisTypeCodeType } from '../fhirValueSets/SynthesisTypeCodes.js';
// @ts-ignore
import { StudyTypeCodings, StudyTypeCodingType,} from '../fhirValueSets/StudyTypeCodings.js';
// @ts-ignore
import { StudyTypeCodes,  StudyTypeCodeType } from '../fhirValueSets/StudyTypeCodes.js';
// @ts-ignore
import { IssueTypeCodes } from '../fhirValueSets/IssueTypeCodes.js';
// @ts-ignore
import { IssueSeverityCodes } from '../fhirValueSets/IssueSeverityCodes.js';
/**
 * Valid arguments for the RiskEvidenceSynthesisSampleSize type.
 */
export interface RiskEvidenceSynthesisSampleSizeArgs extends fhir.BackboneElementArgs {
  /**
   * Human-readable summary of sample size.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Number of studies included in this evidence synthesis.
   */
  numberOfStudies?: fhir.FhirInteger|number|undefined;
  /**
   * Number of participants included in this evidence synthesis.
   */
  numberOfParticipants?: fhir.FhirInteger|number|undefined;
}

/**
 * A description of the size of the sample involved in the synthesis.
 */
export class RiskEvidenceSynthesisSampleSize extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'RiskEvidenceSynthesisSampleSize';
  /**
   * Human-readable summary of sample size.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Number of studies included in this evidence synthesis.
   */
  public numberOfStudies?: fhir.FhirInteger|undefined;
  /**
   * Number of participants included in this evidence synthesis.
   */
  public numberOfParticipants?: fhir.FhirInteger|undefined;
  /**
   * Default constructor for RiskEvidenceSynthesisSampleSize - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskEvidenceSynthesisSampleSizeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['numberOfStudies']) { this.numberOfStudies = new fhir.FhirInteger({value: source.numberOfStudies}); }
    if (source['numberOfParticipants']) { this.numberOfParticipants = new fhir.FhirInteger({value: source.numberOfParticipants}); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["numberOfStudies"]) { outcome.issue!.push(...this.numberOfStudies.doModelValidation().issue!); }
    if (this["numberOfParticipants"]) { outcome.issue!.push(...this.numberOfParticipants.doModelValidation().issue!); }
    return outcome;
  }
}
/**
 * Valid arguments for the RiskEvidenceSynthesisRiskEstimatePrecisionEstimate type.
 */
export interface RiskEvidenceSynthesisRiskEstimatePrecisionEstimateArgs extends fhir.BackboneElementArgs {
  /**
   * Examples include confidence interval and interquartile range.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  level?: fhir.FhirDecimal|number|undefined;
  /**
   * Lower bound of confidence interval.
   */
  from?: fhir.FhirDecimal|number|undefined;
  /**
   * Upper bound of confidence interval.
   */
  to?: fhir.FhirDecimal|number|undefined;
}

/**
 * A description of the precision of the estimate for the effect.
 */
export class RiskEvidenceSynthesisRiskEstimatePrecisionEstimate extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'RiskEvidenceSynthesisRiskEstimatePrecisionEstimate';
  /**
   * Examples include confidence interval and interquartile range.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  public level?: fhir.FhirDecimal|undefined;
  /**
   * Lower bound of confidence interval.
   */
  public from?: fhir.FhirDecimal|undefined;
  /**
   * Upper bound of confidence interval.
   */
  public to?: fhir.FhirDecimal|undefined;
  /**
   * Default constructor for RiskEvidenceSynthesisRiskEstimatePrecisionEstimate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskEvidenceSynthesisRiskEstimatePrecisionEstimateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['level']) { this.level = new fhir.FhirDecimal({value: source.level}); }
    if (source['from']) { this.from = new fhir.FhirDecimal({value: source.from}); }
    if (source['to']) { this.to = new fhir.FhirDecimal({value: source.to}); }
  }
  /**
   * Extensible-bound Value Set for type (RiskEvidenceSynthesis.riskEstimate.precisionEstimate.type)
   */
  public static typeExtensibleCoding():PrecisionEstimateTypeCodingType {
    return PrecisionEstimateTypeCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["level"]) { outcome.issue!.push(...this.level.doModelValidation().issue!); }
    if (this["from"]) { outcome.issue!.push(...this.from.doModelValidation().issue!); }
    if (this["to"]) { outcome.issue!.push(...this.to.doModelValidation().issue!); }
    return outcome;
  }
}
/**
 * Valid arguments for the RiskEvidenceSynthesisRiskEstimate type.
 */
export interface RiskEvidenceSynthesisRiskEstimateArgs extends fhir.BackboneElementArgs {
  /**
   * Human-readable summary of risk estimate.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Examples include proportion and mean.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The point estimate of the risk estimate.
   */
  value?: fhir.FhirDecimal|number|undefined;
  /**
   * Specifies the UCUM unit for the outcome.
   */
  unitOfMeasure?: fhir.CodeableConceptArgs|undefined;
  /**
   * The sample size for the group that was measured for this risk estimate.
   */
  denominatorCount?: fhir.FhirInteger|number|undefined;
  /**
   * The number of group members with the outcome of interest.
   */
  numeratorCount?: fhir.FhirInteger|number|undefined;
  /**
   * A description of the precision of the estimate for the effect.
   */
  precisionEstimate?: fhir.RiskEvidenceSynthesisRiskEstimatePrecisionEstimateArgs[]|undefined;
}

/**
 * The estimated risk of the outcome.
 */
export class RiskEvidenceSynthesisRiskEstimate extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'RiskEvidenceSynthesisRiskEstimate';
  /**
   * Human-readable summary of risk estimate.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Examples include proportion and mean.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The point estimate of the risk estimate.
   */
  public value?: fhir.FhirDecimal|undefined;
  /**
   * Specifies the UCUM unit for the outcome.
   */
  public unitOfMeasure?: fhir.CodeableConcept|undefined;
  /**
   * The sample size for the group that was measured for this risk estimate.
   */
  public denominatorCount?: fhir.FhirInteger|undefined;
  /**
   * The number of group members with the outcome of interest.
   */
  public numeratorCount?: fhir.FhirInteger|undefined;
  /**
   * A description of the precision of the estimate for the effect.
   */
  public precisionEstimate?: fhir.RiskEvidenceSynthesisRiskEstimatePrecisionEstimate[];
  /**
   * Default constructor for RiskEvidenceSynthesisRiskEstimate - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskEvidenceSynthesisRiskEstimateArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['value']) { this.value = new fhir.FhirDecimal({value: source.value}); }
    if (source['unitOfMeasure']) { this.unitOfMeasure = new fhir.CodeableConcept(source.unitOfMeasure); }
    if (source['denominatorCount']) { this.denominatorCount = new fhir.FhirInteger({value: source.denominatorCount}); }
    if (source['numeratorCount']) { this.numeratorCount = new fhir.FhirInteger({value: source.numeratorCount}); }
    if (source['precisionEstimate']) { this.precisionEstimate = source.precisionEstimate.map((x) => new fhir.RiskEvidenceSynthesisRiskEstimatePrecisionEstimate(x)); }
    else { this.precisionEstimate = []; }
  }
  /**
   * Extensible-bound Value Set for type (RiskEvidenceSynthesis.riskEstimate.type)
   */
  public static typeExtensibleCoding():RiskEstimateTypeCodingType {
    return RiskEstimateTypeCodings;
  }
  /**
   * Required-bound Value Set for unitOfMeasure (RiskEvidenceSynthesis.riskEstimate.unitOfMeasure)
   */
  public static unitOfMeasureRequiredCoding():UcumUnitsCodingType {
    return UcumUnitsCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["value"]) { outcome.issue!.push(...this.value.doModelValidation().issue!); }
    if (this["unitOfMeasure"]) { outcome.issue!.push(...this.unitOfMeasure.doModelValidation().issue!); }
    if (this["denominatorCount"]) { outcome.issue!.push(...this.denominatorCount.doModelValidation().issue!); }
    if (this["numeratorCount"]) { outcome.issue!.push(...this.numeratorCount.doModelValidation().issue!); }
    if (this["precisionEstimate"]) { this.precisionEstimate.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
}
/**
 * Valid arguments for the RiskEvidenceSynthesisCertaintyCertaintySubcomponent type.
 */
export interface RiskEvidenceSynthesisCertaintyCertaintySubcomponentArgs extends fhir.BackboneElementArgs {
  /**
   * Type of subcomponent of certainty rating.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * A rating of a subcomponent of rating certainty.
   */
  rating?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.AnnotationArgs[]|undefined;
}

/**
 * A description of a component of the overall certainty.
 */
export class RiskEvidenceSynthesisCertaintyCertaintySubcomponent extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'RiskEvidenceSynthesisCertaintyCertaintySubcomponent';
  /**
   * Type of subcomponent of certainty rating.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * A rating of a subcomponent of rating certainty.
   */
  public rating?: fhir.CodeableConcept[];
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[];
  /**
   * Default constructor for RiskEvidenceSynthesisCertaintyCertaintySubcomponent - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskEvidenceSynthesisCertaintyCertaintySubcomponentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['rating']) { this.rating = source.rating.map((x) => new fhir.CodeableConcept(x)); }
    else { this.rating = []; }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
  }
  /**
   * Extensible-bound Value Set for type (RiskEvidenceSynthesis.certainty.certaintySubcomponent.type)
   */
  public static typeExtensibleCoding():CertaintySubcomponentTypeCodingType {
    return CertaintySubcomponentTypeCodings;
  }
  /**
   * Extensible-bound Value Set for rating (RiskEvidenceSynthesis.certainty.certaintySubcomponent.rating)
   */
  public static ratingExtensibleCoding():CertaintySubcomponentRatingCodingType {
    return CertaintySubcomponentRatingCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["type"]) { outcome.issue!.push(...this.type.doModelValidation().issue!); }
    if (this["rating"]) { this.rating.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["note"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
}
/**
 * Valid arguments for the RiskEvidenceSynthesisCertainty type.
 */
export interface RiskEvidenceSynthesisCertaintyArgs extends fhir.BackboneElementArgs {
  /**
   * A rating of the certainty of the effect estimate.
   */
  rating?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * A description of a component of the overall certainty.
   */
  certaintySubcomponent?: fhir.RiskEvidenceSynthesisCertaintyCertaintySubcomponentArgs[]|undefined;
}

/**
 * A description of the certainty of the risk estimate.
 */
export class RiskEvidenceSynthesisCertainty extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'RiskEvidenceSynthesisCertainty';
  /**
   * A rating of the certainty of the effect estimate.
   */
  public rating?: fhir.CodeableConcept[];
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[];
  /**
   * A description of a component of the overall certainty.
   */
  public certaintySubcomponent?: fhir.RiskEvidenceSynthesisCertaintyCertaintySubcomponent[];
  /**
   * Default constructor for RiskEvidenceSynthesisCertainty - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskEvidenceSynthesisCertaintyArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['rating']) { this.rating = source.rating.map((x) => new fhir.CodeableConcept(x)); }
    else { this.rating = []; }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['certaintySubcomponent']) { this.certaintySubcomponent = source.certaintySubcomponent.map((x) => new fhir.RiskEvidenceSynthesisCertaintyCertaintySubcomponent(x)); }
    else { this.certaintySubcomponent = []; }
  }
  /**
   * Extensible-bound Value Set for rating (RiskEvidenceSynthesis.certainty.rating)
   */
  public static ratingExtensibleCoding():EvidenceQualityCodingType {
    return EvidenceQualityCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (this["rating"]) { this.rating.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["note"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["certaintySubcomponent"]) { this.certaintySubcomponent.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
}
/**
 * Valid arguments for the RiskEvidenceSynthesis type.
 */
export interface RiskEvidenceSynthesisArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "RiskEvidenceSynthesis"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this risk evidence synthesis outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * There may be different risk evidence synthesis instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the risk evidence synthesis with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: fhir.FhirString|string|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: fhir.FhirString|string|undefined;
  /**
   * Allows filtering of risk evidence synthesiss that are appropriate for use versus not.
   */
  status: PublicationStatusCodeType|null;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the risk evidence synthesis. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the risk evidence synthesis is the organization or individual primarily responsible for the maintenance and upkeep of the risk evidence synthesis. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the risk evidence synthesis. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the risk evidence synthesis was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the risk evidence synthesis as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the risk evidence synthesis is presumed to be the predominant language in the place the risk evidence synthesis was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: fhir.AnnotationArgs[]|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the risk evidence synthesis to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * A copyright statement relating to the risk evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the risk evidence synthesis.
   */
  copyright?: fhir.FhirMarkdown|string|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  approvalDate?: fhir.FhirDate|string|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: fhir.FhirDate|string|undefined;
  /**
   * The effective period for a risk evidence synthesis  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: fhir.PeriodArgs|undefined;
  /**
   * Descriptive topics related to the content of the RiskEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
   */
  topic?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  reviewer?: fhir.ContactDetailArgs[]|undefined;
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  endorser?: fhir.ContactDetailArgs[]|undefined;
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: fhir.RelatedArtifactArgs[]|undefined;
  /**
   * Type of synthesis eg meta-analysis.
   */
  synthesisType?: fhir.CodeableConceptArgs|undefined;
  /**
   * Type of study eg randomized trial.
   */
  studyType?: fhir.CodeableConceptArgs|undefined;
  /**
   * A reference to a EvidenceVariable resource that defines the population for the research.
   */
  population: fhir.ReferenceArgs|null;
  /**
   * A reference to a EvidenceVariable resource that defines the exposure for the research.
   */
  exposure?: fhir.ReferenceArgs|undefined;
  /**
   * A reference to a EvidenceVariable resomece that defines the outcome for the research.
   */
  outcome: fhir.ReferenceArgs|null;
  /**
   * A description of the size of the sample involved in the synthesis.
   */
  sampleSize?: fhir.RiskEvidenceSynthesisSampleSizeArgs|undefined;
  /**
   * The estimated risk of the outcome.
   */
  riskEstimate?: fhir.RiskEvidenceSynthesisRiskEstimateArgs|undefined;
  /**
   * A description of the certainty of the risk estimate.
   */
  certainty?: fhir.RiskEvidenceSynthesisCertaintyArgs[]|undefined;
}

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
 */
export class RiskEvidenceSynthesis extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static readonly _fts_dataType:string = 'RiskEvidenceSynthesis';
  /**
   * Resource Type Name
   */
  public resourceType: "RiskEvidenceSynthesis";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this risk evidence synthesis outside of FHIR, where it is not possible to use the logical URI.
   */
  public identifier?: fhir.Identifier[];
  /**
   * There may be different risk evidence synthesis instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the risk evidence synthesis with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name?: fhir.FhirString|undefined;
  /**
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  public title?: fhir.FhirString|undefined;
  /**
   * Allows filtering of risk evidence synthesiss that are appropriate for use versus not.
   */
  public status: PublicationStatusCodeType|null;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the risk evidence synthesis. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the risk evidence synthesis is the organization or individual primarily responsible for the maintenance and upkeep of the risk evidence synthesis. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the risk evidence synthesis. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact?: fhir.ContactDetail[];
  /**
   * This description can be used to capture details such as why the risk evidence synthesis was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the risk evidence synthesis as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the risk evidence synthesis is presumed to be the predominant language in the place the risk evidence synthesis was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  public note?: fhir.Annotation[];
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext?: fhir.UsageContext[];
  /**
   * It may be possible for the risk evidence synthesis to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction?: fhir.CodeableConcept[];
  /**
   * A copyright statement relating to the risk evidence synthesis and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the risk evidence synthesis.
   */
  public copyright?: fhir.FhirMarkdown|undefined;
  /**
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  public approvalDate?: fhir.FhirDate|undefined;
  /**
   * If specified, this date follows the original approval date.
   */
  public lastReviewDate?: fhir.FhirDate|undefined;
  /**
   * The effective period for a risk evidence synthesis  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  public effectivePeriod?: fhir.Period|undefined;
  /**
   * Descriptive topics related to the content of the RiskEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
   */
  public topic?: fhir.CodeableConcept[];
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  public author?: fhir.ContactDetail[];
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  public editor?: fhir.ContactDetail[];
  /**
   * An individual or organization primarily responsible for review of some aspect of the content.
   */
  public reviewer?: fhir.ContactDetail[];
  /**
   * An individual or organization responsible for officially endorsing the content for use in some setting.
   */
  public endorser?: fhir.ContactDetail[];
  /**
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  public relatedArtifact?: fhir.RelatedArtifact[];
  /**
   * Type of synthesis eg meta-analysis.
   */
  public synthesisType?: fhir.CodeableConcept|undefined;
  /**
   * Type of study eg randomized trial.
   */
  public studyType?: fhir.CodeableConcept|undefined;
  /**
   * A reference to a EvidenceVariable resource that defines the population for the research.
   */
  public population: fhir.Reference|null;
  /**
   * A reference to a EvidenceVariable resource that defines the exposure for the research.
   */
  public exposure?: fhir.Reference|undefined;
  /**
   * A reference to a EvidenceVariable resomece that defines the outcome for the research.
   */
  public outcome: fhir.Reference|null;
  /**
   * A description of the size of the sample involved in the synthesis.
   */
  public sampleSize?: fhir.RiskEvidenceSynthesisSampleSize|undefined;
  /**
   * The estimated risk of the outcome.
   */
  public riskEstimate?: fhir.RiskEvidenceSynthesisRiskEstimate|undefined;
  /**
   * A description of the certainty of the risk estimate.
   */
  public certainty?: fhir.RiskEvidenceSynthesisCertainty[];
  /**
   * Default constructor for RiskEvidenceSynthesis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<RiskEvidenceSynthesisArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'RiskEvidenceSynthesis';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    if (source['title']) { this.title = new fhir.FhirString({value: source.title}); }
    if (source['status']) { this.status = source.status; }
    else { this.status = null; }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['note']) { this.note = source.note.map((x) => new fhir.Annotation(x)); }
    else { this.note = []; }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    else { this.jurisdiction = []; }
    if (source['copyright']) { this.copyright = new fhir.FhirMarkdown({value: source.copyright}); }
    if (source['approvalDate']) { this.approvalDate = new fhir.FhirDate({value: source.approvalDate}); }
    if (source['lastReviewDate']) { this.lastReviewDate = new fhir.FhirDate({value: source.lastReviewDate}); }
    if (source['effectivePeriod']) { this.effectivePeriod = new fhir.Period(source.effectivePeriod); }
    if (source['topic']) { this.topic = source.topic.map((x) => new fhir.CodeableConcept(x)); }
    else { this.topic = []; }
    if (source['author']) { this.author = source.author.map((x) => new fhir.ContactDetail(x)); }
    else { this.author = []; }
    if (source['editor']) { this.editor = source.editor.map((x) => new fhir.ContactDetail(x)); }
    else { this.editor = []; }
    if (source['reviewer']) { this.reviewer = source.reviewer.map((x) => new fhir.ContactDetail(x)); }
    else { this.reviewer = []; }
    if (source['endorser']) { this.endorser = source.endorser.map((x) => new fhir.ContactDetail(x)); }
    else { this.endorser = []; }
    if (source['relatedArtifact']) { this.relatedArtifact = source.relatedArtifact.map((x) => new fhir.RelatedArtifact(x)); }
    else { this.relatedArtifact = []; }
    if (source['synthesisType']) { this.synthesisType = new fhir.CodeableConcept(source.synthesisType); }
    if (source['studyType']) { this.studyType = new fhir.CodeableConcept(source.studyType); }
    if (source['population']) { this.population = new fhir.Reference(source.population); }
    else { this.population = null; }
    if (source['exposure']) { this.exposure = new fhir.Reference(source.exposure); }
    if (source['outcome']) { this.outcome = new fhir.Reference(source.outcome); }
    else { this.outcome = null; }
    if (source['sampleSize']) { this.sampleSize = new fhir.RiskEvidenceSynthesisSampleSize(source.sampleSize); }
    if (source['riskEstimate']) { this.riskEstimate = new fhir.RiskEvidenceSynthesisRiskEstimate(source.riskEstimate); }
    if (source['certainty']) { this.certainty = source.certainty.map((x) => new fhir.RiskEvidenceSynthesisCertainty(x)); }
    else { this.certainty = []; }
  }
  /**
   * Required-bound Value Set for status (RiskEvidenceSynthesis.status)
   */
  public static statusRequiredCoding():PublicationStatusCodingType {
    return PublicationStatusCodings;
  }
  /**
   * Extensible-bound Value Set for synthesisType (RiskEvidenceSynthesis.synthesisType)
   */
  public static synthesisTypeExtensibleCoding():SynthesisTypeCodingType {
    return SynthesisTypeCodings;
  }
  /**
   * Extensible-bound Value Set for studyType (RiskEvidenceSynthesis.studyType)
   */
  public static studyTypeExtensibleCoding():StudyTypeCodingType {
    return StudyTypeCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.OperationOutcome {
    var outcome:fhir.OperationOutcome = super.doModelValidation();
    if (!this['resourceType']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property resourceType:"RiskEvidenceSynthesis" fhir: RiskEvidenceSynthesis.resourceType:"RiskEvidenceSynthesis"', }));
    }
    if (this["url"]) { outcome.issue!.push(...this.url.doModelValidation().issue!); }
    if (this["identifier"]) { this.identifier.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["version"]) { outcome.issue!.push(...this.version.doModelValidation().issue!); }
    if (this["name"]) { outcome.issue!.push(...this.name.doModelValidation().issue!); }
    if (this["title"]) { outcome.issue!.push(...this.title.doModelValidation().issue!); }
    if (!this['status']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property status:PublicationStatusCodeType fhir: RiskEvidenceSynthesis.status:code', }));
    }
    if (this["date"]) { outcome.issue!.push(...this.date.doModelValidation().issue!); }
    if (this["publisher"]) { outcome.issue!.push(...this.publisher.doModelValidation().issue!); }
    if (this["contact"]) { this.contact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["description"]) { outcome.issue!.push(...this.description.doModelValidation().issue!); }
    if (this["note"]) { this.note.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["useContext"]) { this.useContext.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["copyright"]) { outcome.issue!.push(...this.copyright.doModelValidation().issue!); }
    if (this["approvalDate"]) { outcome.issue!.push(...this.approvalDate.doModelValidation().issue!); }
    if (this["lastReviewDate"]) { outcome.issue!.push(...this.lastReviewDate.doModelValidation().issue!); }
    if (this["effectivePeriod"]) { outcome.issue!.push(...this.effectivePeriod.doModelValidation().issue!); }
    if (this["topic"]) { this.topic.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["author"]) { this.author.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["editor"]) { this.editor.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["reviewer"]) { this.reviewer.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["endorser"]) { this.endorser.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["relatedArtifact"]) { this.relatedArtifact.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    if (this["synthesisType"]) { outcome.issue!.push(...this.synthesisType.doModelValidation().issue!); }
    if (this["studyType"]) { outcome.issue!.push(...this.studyType.doModelValidation().issue!); }
    if (!this['population']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property population:fhir.Reference fhir: RiskEvidenceSynthesis.population:Reference', }));
    }
    if (this["population"]) { outcome.issue!.push(...this.population.doModelValidation().issue!); }
    if (this["exposure"]) { outcome.issue!.push(...this.exposure.doModelValidation().issue!); }
    if (!this['outcome']) {
      outcome.issue!.push(new fhir.OperationOutcomeIssue({ severity: IssueSeverityCodes.Error, code: IssueTypeCodes.RequiredElementMissing,  diagnostics: 'Missing required property outcome:fhir.Reference fhir: RiskEvidenceSynthesis.outcome:Reference', }));
    }
    if (this["outcome"]) { outcome.issue!.push(...this.outcome.doModelValidation().issue!); }
    if (this["sampleSize"]) { outcome.issue!.push(...this.sampleSize.doModelValidation().issue!); }
    if (this["riskEstimate"]) { outcome.issue!.push(...this.riskEstimate.doModelValidation().issue!); }
    if (this["certainty"]) { this.certainty.forEach((x) => { outcome.issue!.push(...x.doModelValidation().issue!); }) }
    return outcome;
  }
}
