// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: DetectedIssue

import * as fhir from '../fhir.js';

// @ts-ignore
import { ManifestationOrSymptomCodings, ManifestationOrSymptomCodingType,} from '../fhirValueSets/ManifestationOrSymptomCodings.js';
// @ts-ignore
import { ManifestationOrSymptomCodes,  ManifestationOrSymptomCodeType } from '../fhirValueSets/ManifestationOrSymptomCodes.js';
// @ts-ignore
import { DetectedissueMitigationActionCodings, DetectedissueMitigationActionCodingType,} from '../fhirValueSets/DetectedissueMitigationActionCodings.js';
// @ts-ignore
import { DetectedissueMitigationActionCodes,  DetectedissueMitigationActionCodeType } from '../fhirValueSets/DetectedissueMitigationActionCodes.js';
// @ts-ignore
import { ObservationStatusCodings, ObservationStatusCodingType,} from '../fhirValueSets/ObservationStatusCodings.js';
// @ts-ignore
import { ObservationStatusCodes,  ObservationStatusCodeType } from '../fhirValueSets/ObservationStatusCodes.js';
// @ts-ignore
import { DetectedissueCategoryCodings, DetectedissueCategoryCodingType,} from '../fhirValueSets/DetectedissueCategoryCodings.js';
// @ts-ignore
import { DetectedissueCategoryCodes,  DetectedissueCategoryCodeType } from '../fhirValueSets/DetectedissueCategoryCodes.js';
// @ts-ignore
import { DetectedissueSeverityCodings, DetectedissueSeverityCodingType,} from '../fhirValueSets/DetectedissueSeverityCodings.js';
// @ts-ignore
import { DetectedissueSeverityCodes,  DetectedissueSeverityCodeType } from '../fhirValueSets/DetectedissueSeverityCodes.js';
/**
 * Valid arguments for the DetectedIssueEvidence type.
 */
export interface DetectedIssueEvidenceArgs extends fhir.BackboneElementArgs {
  /**
   * A manifestation that led to the recording of this detected issue.
   */
  code?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
   */
  detail?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
export class DetectedIssueEvidence extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DetectedIssueEvidence';
  /**
   * A manifestation that led to the recording of this detected issue.
   */
  public code: fhir.CodeableConcept[];
  /**
   * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
   */
  public detail: fhir.Reference[];
  /**
   * Default constructor for DetectedIssueEvidence - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DetectedIssueEvidenceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['code']) { this.code = source.code.map((x) => new fhir.CodeableConcept(x)); }
    else { this.code = []; }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.Reference(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["code"]) { this.code.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["detail"]) { this.detail.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the DetectedIssueMitigation type.
 */
export interface DetectedIssueMitigationArgs extends fhir.BackboneElementArgs {
  /**
   * The "text" component can be used for detail or when no appropriate code exists.
   */
  action: fhir.CodeableConceptArgs|null;
  /**
   * This might not be the same as when the mitigating step was actually taken.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: DetectedIssue.mitigation.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
   */
  author?: fhir.ReferenceArgs|undefined;
}

/**
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export class DetectedIssueMitigation extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DetectedIssueMitigation';
  /**
   * The "text" component can be used for detail or when no appropriate code exists.
   */
  public action: fhir.CodeableConcept|null;
  /**
   * This might not be the same as when the mitigating step was actually taken.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
   */
  public author?: fhir.Reference|undefined;
  /**
   * Default constructor for DetectedIssueMitigation - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DetectedIssueMitigationArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['action']) { this.action = new fhir.CodeableConcept(source.action); }
    else { this.action = null; }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['author']) { this.author = new fhir.Reference(source.author); }
  }
  /**
   * Preferred-bound Value Set for action (DetectedIssue.mitigation.action)
   */
  public static get actionPreferredCodings():DetectedissueMitigationActionCodingType {
    return DetectedissueMitigationActionCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['action']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property action:fhir.CodeableConcept fhir: DetectedIssue.mitigation.action:CodeableConcept' });
    }
    if (this["action"]) { issues.push(...this.action.doModelValidation()); }
    if (this["date"]) { issues.push(...this.date.doModelValidation()); }
    if (this["author"]) { issues.push(...this.author.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the DetectedIssue type.
 */
export interface DetectedIssueArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "DetectedIssue"|undefined;
  /**
   * Business identifier associated with the detected issue record.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the issue as not currently valid.
   */
  status: fhir.FhirCode<ObservationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DetectedIssue.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Identifies the general type of issue identified.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
   */
  severity?: fhir.FhirCode<DetectedissueSeverityCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: DetectedIssue.severity
   */
  _severity?:fhir.FhirElementArgs;
  /**
   * Indicates the patient whose record the detected issue is associated with.
   */
  patient?: fhir.ReferenceArgs|undefined;
  /**
   * The date or period when the detected issue was initially identified.
   */
  identified?: fhir.FhirDateTime|fhir.Period|undefined;
  /**
   * The date or period when the detected issue was initially identified.
   */
  identifiedDateTime?: fhir.FhirDateTime|string|undefined;
  /**
   * The date or period when the detected issue was initially identified.
   */
  identifiedPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
   */
  author?: fhir.ReferenceArgs|undefined;
  /**
   * There's an implicit constraint on the number of implicated resources based on DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For timing, there would typically only be one.
   */
  implicated?: fhir.ReferenceArgs[]|undefined;
  /**
   * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
   */
  evidence?: fhir.DetectedIssueEvidenceArgs[]|undefined;
  /**
   * Should focus on information not covered elsewhere as discrete data - no need to duplicate the narrative.
   */
  detail?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: DetectedIssue.detail
   */
  _detail?:fhir.FhirElementArgs;
  /**
   * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
   */
  reference?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: DetectedIssue.reference
   */
  _reference?:fhir.FhirElementArgs;
  /**
   * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
   */
  mitigation?: fhir.DetectedIssueMitigationArgs[]|undefined;
}

/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
export class DetectedIssue extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'DetectedIssue';
  /**
   * Resource Type Name
   */
  public override resourceType: "DetectedIssue";
  /**
   * Business identifier associated with the detected issue record.
   */
  public identifier: fhir.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the issue as not currently valid.
   */
  public status: fhir.FhirCode<ObservationStatusCodeType>|null;
  /**
   * Identifies the general type of issue identified.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
   */
  public severity?: fhir.FhirCode<DetectedissueSeverityCodeType>|undefined;
  /**
   * Indicates the patient whose record the detected issue is associated with.
   */
  public patient?: fhir.Reference|undefined;
  /**
   * The date or period when the detected issue was initially identified.
   */
  public identified?: (fhir.FhirDateTime|fhir.Period)|undefined;
  /**
   * Internal flag to properly serialize choice-type element DetectedIssue.identified[x]
   */
  protected static readonly _fts_identifiedIsChoice:true = true;
  /**
   * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
   */
  public author?: fhir.Reference|undefined;
  /**
   * There's an implicit constraint on the number of implicated resources based on DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For timing, there would typically only be one.
   */
  public implicated: fhir.Reference[];
  /**
   * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
   */
  public evidence: fhir.DetectedIssueEvidence[];
  /**
   * Should focus on information not covered elsewhere as discrete data - no need to duplicate the narrative.
   */
  public detail?: fhir.FhirString|undefined;
  /**
   * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
   */
  public reference?: fhir.FhirUri|undefined;
  /**
   * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
   */
  public mitigation: fhir.DetectedIssueMitigation[];
  /**
   * Default constructor for DetectedIssue - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<DetectedIssueArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'DetectedIssue';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['status']) { this.status = new fhir.FhirCode<ObservationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<ObservationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['severity']) { this.severity = new fhir.FhirCode<DetectedissueSeverityCodeType>({value: source.severity}); }
    if (source['_severity']) {
      if (this.severity) { this.severity.addExtendedProperties(source._severity!); }
      else { this.severity = new fhir.FhirCode<DetectedissueSeverityCodeType>(source._severity as Partial<fhir.FhirCode>); }
    }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    if (source['identified']) { this.identified = source.identified; }
    else if (source['identifiedDateTime']) { this.identified = new fhir.FhirDateTime({value: source.identifiedDateTime}); }
    else if (source['identifiedPeriod']) { this.identified = new fhir.Period(source.identifiedPeriod); }
    if (source['author']) { this.author = new fhir.Reference(source.author); }
    if (source['implicated']) { this.implicated = source.implicated.map((x) => new fhir.Reference(x)); }
    else { this.implicated = []; }
    if (source['evidence']) { this.evidence = source.evidence.map((x) => new fhir.DetectedIssueEvidence(x)); }
    else { this.evidence = []; }
    if (source['detail']) { this.detail = new fhir.FhirString({value: source.detail}); }
    if (source['_detail']) {
      if (this.detail) { this.detail.addExtendedProperties(source._detail!); }
      else { this.detail = new fhir.FhirString(source._detail as Partial<fhir.FhirStringArgs>); }
    }
    if (source['reference']) { this.reference = new fhir.FhirUri({value: source.reference}); }
    if (source['_reference']) {
      if (this.reference) { this.reference.addExtendedProperties(source._reference!); }
      else { this.reference = new fhir.FhirUri(source._reference as Partial<fhir.FhirUriArgs>); }
    }
    if (source['mitigation']) { this.mitigation = source.mitigation.map((x) => new fhir.DetectedIssueMitigation(x)); }
    else { this.mitigation = []; }
  }
  /**
   * Required-bound Value Set for status (DetectedIssue.status)
   */
  public static get statusRequiredCodes() {
    return ObservationStatusCodes;
  }
  /**
   * Preferred-bound Value Set for code (DetectedIssue.code)
   */
  public static get codePreferredCodings():DetectedissueCategoryCodingType {
    return DetectedissueCategoryCodings;
  }
  /**
   * Required-bound Value Set for severity (DetectedIssue.severity)
   */
  public static get severityRequiredCodes() {
    return DetectedissueSeverityCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"DetectedIssue" fhir: DetectedIssue.resourceType:"DetectedIssue"' });
    }
    if (this["identifier"]) { this.identifier.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<ObservationStatusCodeType> fhir: DetectedIssue.status:code' });
    }
    if (this['status'] && (!Object.values(ObservationStatusCodes).includes(this.status as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<ObservationStatusCodeType> fhir: DetectedIssue.status:code Required binding to: ObservationStatus' });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation()); }
    if (this["code"]) { issues.push(...this.code.doModelValidation()); }
    if (this['severity'] && (!Object.values(DetectedissueSeverityCodes).includes(this.severity as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property severity?:fhir.FhirCode<DetectedissueSeverityCodeType> fhir: DetectedIssue.severity:code Required binding to: DetectedissueSeverity' });
    }
    if (this["severity"]) { issues.push(...this.severity.doModelValidation()); }
    if (this["patient"]) { issues.push(...this.patient.doModelValidation()); }
    if (this["author"]) { issues.push(...this.author.doModelValidation()); }
    if (this["implicated"]) { this.implicated.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["evidence"]) { this.evidence.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["detail"]) { issues.push(...this.detail.doModelValidation()); }
    if (this["reference"]) { issues.push(...this.reference.doModelValidation()); }
    if (this["mitigation"]) { this.mitigation.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
