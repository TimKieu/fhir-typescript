// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: Claim

import * as fhir from '../fhir.js';

// @ts-ignore
import { RelatedClaimRelationshipCodings, RelatedClaimRelationshipCodingType,} from '../fhirValueSets/RelatedClaimRelationshipCodings.js';
// @ts-ignore
import { RelatedClaimRelationshipCodes,  RelatedClaimRelationshipCodeType } from '../fhirValueSets/RelatedClaimRelationshipCodes.js';
// @ts-ignore
import { PayeetypeCodings, PayeetypeCodingType,} from '../fhirValueSets/PayeetypeCodings.js';
// @ts-ignore
import { PayeetypeCodes,  PayeetypeCodeType } from '../fhirValueSets/PayeetypeCodes.js';
// @ts-ignore
import { ClaimCareteamroleCodings, ClaimCareteamroleCodingType,} from '../fhirValueSets/ClaimCareteamroleCodings.js';
// @ts-ignore
import { ClaimCareteamroleCodes,  ClaimCareteamroleCodeType } from '../fhirValueSets/ClaimCareteamroleCodes.js';
// @ts-ignore
import { ProviderQualificationCodings, ProviderQualificationCodingType,} from '../fhirValueSets/ProviderQualificationCodings.js';
// @ts-ignore
import { ProviderQualificationCodes,  ProviderQualificationCodeType } from '../fhirValueSets/ProviderQualificationCodes.js';
// @ts-ignore
import { ClaimInformationcategoryCodings, ClaimInformationcategoryCodingType,} from '../fhirValueSets/ClaimInformationcategoryCodings.js';
// @ts-ignore
import { ClaimInformationcategoryCodes,  ClaimInformationcategoryCodeType } from '../fhirValueSets/ClaimInformationcategoryCodes.js';
// @ts-ignore
import { ClaimExceptionCodings, ClaimExceptionCodingType,} from '../fhirValueSets/ClaimExceptionCodings.js';
// @ts-ignore
import { ClaimExceptionCodes,  ClaimExceptionCodeType } from '../fhirValueSets/ClaimExceptionCodes.js';
// @ts-ignore
import { MissingToothReasonCodings, MissingToothReasonCodingType,} from '../fhirValueSets/MissingToothReasonCodings.js';
// @ts-ignore
import { MissingToothReasonCodes,  MissingToothReasonCodeType } from '../fhirValueSets/MissingToothReasonCodes.js';
// @ts-ignore
import { ExDiagnosistypeCodings, ExDiagnosistypeCodingType,} from '../fhirValueSets/ExDiagnosistypeCodings.js';
// @ts-ignore
import { ExDiagnosistypeCodes,  ExDiagnosistypeCodeType } from '../fhirValueSets/ExDiagnosistypeCodes.js';
// @ts-ignore
import { ExDiagnosisOnAdmissionCodings, ExDiagnosisOnAdmissionCodingType,} from '../fhirValueSets/ExDiagnosisOnAdmissionCodings.js';
// @ts-ignore
import { ExDiagnosisOnAdmissionCodes,  ExDiagnosisOnAdmissionCodeType } from '../fhirValueSets/ExDiagnosisOnAdmissionCodes.js';
// @ts-ignore
import { ExDiagnosisrelatedgroupCodings, ExDiagnosisrelatedgroupCodingType,} from '../fhirValueSets/ExDiagnosisrelatedgroupCodings.js';
// @ts-ignore
import { ExDiagnosisrelatedgroupCodes,  ExDiagnosisrelatedgroupCodeType } from '../fhirValueSets/ExDiagnosisrelatedgroupCodes.js';
// @ts-ignore
import { ExProcedureTypeCodings, ExProcedureTypeCodingType,} from '../fhirValueSets/ExProcedureTypeCodings.js';
// @ts-ignore
import { ExProcedureTypeCodes,  ExProcedureTypeCodeType } from '../fhirValueSets/ExProcedureTypeCodes.js';
// @ts-ignore
import { V3ActIncidentCodings, V3ActIncidentCodingType,} from '../fhirValueSets/V3ActIncidentCodings.js';
// @ts-ignore
import { V3ActIncidentCodes,  V3ActIncidentCodeType } from '../fhirValueSets/V3ActIncidentCodes.js';
// @ts-ignore
import { ExRevenueCenterCodings, ExRevenueCenterCodingType,} from '../fhirValueSets/ExRevenueCenterCodings.js';
// @ts-ignore
import { ExRevenueCenterCodes,  ExRevenueCenterCodeType } from '../fhirValueSets/ExRevenueCenterCodes.js';
// @ts-ignore
import { ExBenefitcategoryCodings, ExBenefitcategoryCodingType,} from '../fhirValueSets/ExBenefitcategoryCodings.js';
// @ts-ignore
import { ExBenefitcategoryCodes,  ExBenefitcategoryCodeType } from '../fhirValueSets/ExBenefitcategoryCodes.js';
// @ts-ignore
import { ServiceUsclsCodings, ServiceUsclsCodingType,} from '../fhirValueSets/ServiceUsclsCodings.js';
// @ts-ignore
import { ServiceUsclsCodes,  ServiceUsclsCodeType } from '../fhirValueSets/ServiceUsclsCodes.js';
// @ts-ignore
import { ClaimModifiersCodings, ClaimModifiersCodingType,} from '../fhirValueSets/ClaimModifiersCodings.js';
// @ts-ignore
import { ClaimModifiersCodes,  ClaimModifiersCodeType } from '../fhirValueSets/ClaimModifiersCodes.js';
// @ts-ignore
import { ExProgramCodings, ExProgramCodingType,} from '../fhirValueSets/ExProgramCodings.js';
// @ts-ignore
import { ExProgramCodes,  ExProgramCodeType } from '../fhirValueSets/ExProgramCodes.js';
// @ts-ignore
import { ToothCodings, ToothCodingType,} from '../fhirValueSets/ToothCodings.js';
// @ts-ignore
import { ToothCodes,  ToothCodeType } from '../fhirValueSets/ToothCodes.js';
// @ts-ignore
import { SurfaceCodings, SurfaceCodingType,} from '../fhirValueSets/SurfaceCodings.js';
// @ts-ignore
import { SurfaceCodes,  SurfaceCodeType } from '../fhirValueSets/SurfaceCodes.js';
// @ts-ignore
import { FmStatusCodings, FmStatusCodingType,} from '../fhirValueSets/FmStatusCodings.js';
// @ts-ignore
import { FmStatusCodes,  FmStatusCodeType } from '../fhirValueSets/FmStatusCodes.js';
// @ts-ignore
import { ClaimTypeCodings, ClaimTypeCodingType,} from '../fhirValueSets/ClaimTypeCodings.js';
// @ts-ignore
import { ClaimTypeCodes,  ClaimTypeCodeType } from '../fhirValueSets/ClaimTypeCodes.js';
// @ts-ignore
import { ClaimSubtypeCodings, ClaimSubtypeCodingType,} from '../fhirValueSets/ClaimSubtypeCodings.js';
// @ts-ignore
import { ClaimSubtypeCodes,  ClaimSubtypeCodeType } from '../fhirValueSets/ClaimSubtypeCodes.js';
// @ts-ignore
import { ClaimUseCodings, ClaimUseCodingType,} from '../fhirValueSets/ClaimUseCodings.js';
// @ts-ignore
import { ClaimUseCodes,  ClaimUseCodeType } from '../fhirValueSets/ClaimUseCodes.js';
// @ts-ignore
import { ProcessPriorityCodings, ProcessPriorityCodingType,} from '../fhirValueSets/ProcessPriorityCodings.js';
// @ts-ignore
import { ProcessPriorityCodes,  ProcessPriorityCodeType } from '../fhirValueSets/ProcessPriorityCodes.js';
// @ts-ignore
import { FundsreserveCodings, FundsreserveCodingType,} from '../fhirValueSets/FundsreserveCodings.js';
// @ts-ignore
import { FundsreserveCodes,  FundsreserveCodeType } from '../fhirValueSets/FundsreserveCodes.js';
/**
 * Valid arguments for the ClaimRelated type.
 */
export interface ClaimRelatedArgs extends fhir.BackboneElementArgs {
  /**
   * Reference to a related claim.
   */
  claim?: fhir.ReferenceArgs|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  relationship?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example, Property/Casualty insurer claim # or Workers Compensation case # .
   */
  reference?: fhir.IdentifierArgs|undefined;
}

/**
 * For example,  for the original treatment and follow-up exams.
 */
export class ClaimRelated extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimRelated';
  /**
   * Reference to a related claim.
   */
  public claim?: fhir.Reference|undefined;
  /**
   * For example, prior claim or umbrella.
   */
  public relationship?: fhir.CodeableConcept|undefined;
  /**
   * For example, Property/Casualty insurer claim # or Workers Compensation case # .
   */
  public reference?: fhir.Identifier|undefined;
  /**
   * Default constructor for ClaimRelated - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimRelatedArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['claim']) { this.claim = new fhir.Reference(source.claim); }
    if (source['relationship']) { this.relationship = new fhir.CodeableConcept(source.relationship); }
    if (source['reference']) { this.reference = new fhir.Identifier(source.reference); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.related' }
    if (this["claim"]) { issues.push(...this.claim.doModelValidation(expression+'.claim')); }
    if (this["relationship"]) { issues.push(...this.relationship.doModelValidation(expression+'.relationship')); }
    if (this["reference"]) { issues.push(...this.reference.doModelValidation(expression+'.reference')); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimPayee type.
 */
export interface ClaimPayeeArgs extends fhir.BackboneElementArgs {
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  party?: fhir.ReferenceArgs|undefined;
}

/**
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export class ClaimPayee extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimPayee';
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  public party?: fhir.Reference|undefined;
  /**
   * Default constructor for ClaimPayee - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimPayeeArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['party']) { this.party = new fhir.Reference(source.party); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.payee' }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: Claim.payee.type:CodeableConcept', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["party"]) { issues.push(...this.party.doModelValidation(expression+'.party')); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimCareTeam type.
 */
export interface ClaimCareTeamArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify care team entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.careTeam.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * Member of the team who provided the product or service.
   */
  provider: fhir.ReferenceArgs|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  responsible?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Claim.careTeam.responsible
   */
  _responsible?:fhir.FhirElementArgs;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  role?: fhir.CodeableConceptArgs|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  qualification?: fhir.CodeableConceptArgs|undefined;
}

/**
 * The members of the team who provided the products and services.
 */
export class ClaimCareTeam extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimCareTeam';
  /**
   * A number to uniquely identify care team entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * Member of the team who provided the product or service.
   */
  public provider: fhir.Reference|null;
  /**
   * Responsible might not be required when there is only a single provider listed.
   */
  public responsible?: fhir.FhirBoolean|undefined;
  /**
   * Role might not be required when there is only a single provider listed.
   */
  public role?: fhir.CodeableConcept|undefined;
  /**
   * The qualification of the practitioner which is applicable for this service.
   */
  public qualification?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimCareTeam - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimCareTeamArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider); }
    else { this.provider = null; }
    if (source['responsible']) { this.responsible = new fhir.FhirBoolean({value: source.responsible}); }
    if (source['_responsible']) {
      if (this.responsible) { this.responsible.addExtendedProperties(source._responsible!); }
      else { this.responsible = new fhir.FhirBoolean(source._responsible as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['role']) { this.role = new fhir.CodeableConcept(source.role); }
    if (source['qualification']) { this.qualification = new fhir.CodeableConcept(source.qualification); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.careTeam' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.careTeam.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (!this['provider']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property provider fhir: Claim.careTeam.provider:Reference', expression: [expression] });
    }
    if (this["provider"]) { issues.push(...this.provider.doModelValidation(expression+'.provider')); }
    if (this["responsible"]) { issues.push(...this.responsible.doModelValidation(expression+'.responsible')); }
    if (this["role"]) { issues.push(...this.role.doModelValidation(expression+'.role')); }
    if (this["qualification"]) { issues.push(...this.qualification.doModelValidation(expression+'.qualification')); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimSupportingInfo type.
 */
export interface ClaimSupportingInfoArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.supportingInfo.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * This may contain a category for the local bill type codes.
   */
  category: fhir.CodeableConceptArgs|null;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   */
  code?: fhir.CodeableConceptArgs|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timing?: fhir.FhirDate|fhir.Period|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingDate?: fhir.FhirDate|string|undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  value?: fhir.FhirBoolean|fhir.FhirString|fhir.Quantity|fhir.Attachment|fhir.Reference|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueBoolean?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueString?: fhir.FhirString|string|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueQuantity?: fhir.QuantityArgs|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueAttachment?: fhir.AttachmentArgs|undefined;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueReference?: fhir.ReferenceArgs|undefined;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  reason?: fhir.CodeableConceptArgs|undefined;
}

/**
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export class ClaimSupportingInfo extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimSupportingInfo';
  /**
   * A number to uniquely identify supporting information entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * This may contain a category for the local bill type codes.
   */
  public category: fhir.CodeableConcept|null;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   */
  public code?: fhir.CodeableConcept|undefined;
  /**
   * The date when or period to which this information refers.
   */
  public timing?: (fhir.FhirDate|fhir.Period)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Claim.supportingInfo.timing[x]
   */
  protected static readonly _fts_timingIsChoice:true = true;
  /**
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  public value?: (fhir.FhirBoolean|fhir.FhirString|fhir.Quantity|fhir.Attachment|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Claim.supportingInfo.value[x]
   */
  protected static readonly _fts_valueIsChoice:true = true;
  /**
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  public reason?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimSupportingInfo - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimSupportingInfoArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    else { this.category = null; }
    if (source['code']) { this.code = new fhir.CodeableConcept(source.code); }
    if (source['timing']) { this.timing = source.timing; }
    else if (source['timingDate']) { this.timing = new fhir.FhirDate({value: source.timingDate}); }
    else if (source['timingPeriod']) { this.timing = new fhir.Period(source.timingPeriod); }
    if (source['value']) { this.value = source.value; }
    else if (source['valueBoolean']) { this.value = new fhir.FhirBoolean({value: source.valueBoolean}); }
    else if (source['valueString']) { this.value = new fhir.FhirString({value: source.valueString}); }
    else if (source['valueQuantity']) { this.value = new fhir.Quantity(source.valueQuantity); }
    else if (source['valueAttachment']) { this.value = new fhir.Attachment(source.valueAttachment); }
    else if (source['valueReference']) { this.value = new fhir.Reference(source.valueReference); }
    if (source['reason']) { this.reason = new fhir.CodeableConcept(source.reason); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.supportingInfo' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.supportingInfo.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (!this['category']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property category fhir: Claim.supportingInfo.category:CodeableConcept', expression: [expression] });
    }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (this["code"]) { issues.push(...this.code.doModelValidation(expression+'.code')); }
    if (this["reason"]) { issues.push(...this.reason.doModelValidation(expression+'.reason')); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimDiagnosis type.
 */
export interface ClaimDiagnosisArgs extends fhir.BackboneElementArgs {
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.diagnosis.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosis?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: fhir.ReferenceArgs|undefined;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  type?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  onAdmission?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  packageCode?: fhir.CodeableConceptArgs|undefined;
}

/**
 * Information about diagnoses relevant to the claim items.
 */
export class ClaimDiagnosis extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimDiagnosis';
  /**
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  public diagnosis: (fhir.CodeableConcept|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element Claim.diagnosis.diagnosis[x]
   */
  protected static readonly _fts_diagnosisIsChoice:true = true;
  /**
   * For example: admitting, primary, secondary, discharge.
   */
  public type: fhir.CodeableConcept[];
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  public onAdmission?: fhir.CodeableConcept|undefined;
  /**
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  public packageCode?: fhir.CodeableConcept|undefined;
  /**
   * Default constructor for ClaimDiagnosis - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimDiagnosisArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['diagnosis']) { this.diagnosis = source.diagnosis; }
    else if (source['diagnosisCodeableConcept']) { this.diagnosis = new fhir.CodeableConcept(source.diagnosisCodeableConcept); }
    else if (source['diagnosisReference']) { this.diagnosis = new fhir.Reference(source.diagnosisReference); }
    else { this.diagnosis = null; }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    else { this.type = []; }
    if (source['onAdmission']) { this.onAdmission = new fhir.CodeableConcept(source.onAdmission); }
    if (source['packageCode']) { this.packageCode = new fhir.CodeableConcept(source.packageCode); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.diagnosis' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.diagnosis.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (!this['diagnosis']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property diagnosis fhir: Claim.diagnosis.diagnosis[x]:', expression: [expression] });
    }
    if (this["type"]) { this.type.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.type[${i}]`)); }) }
    if (this["onAdmission"]) { issues.push(...this.onAdmission.doModelValidation(expression+'.onAdmission')); }
    if (this["packageCode"]) { issues.push(...this.packageCode.doModelValidation(expression+'.packageCode')); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimProcedure type.
 */
export interface ClaimProcedureArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify procedure entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.procedure.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * For example: primary, secondary.
   */
  type?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * Date and optionally time the procedure was performed.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Claim.procedure.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedure?: fhir.CodeableConcept|fhir.Reference|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureReference?: fhir.ReferenceArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
}

/**
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export class ClaimProcedure extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimProcedure';
  /**
   * A number to uniquely identify procedure entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * For example: primary, secondary.
   */
  public type: fhir.CodeableConcept[];
  /**
   * Date and optionally time the procedure was performed.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  public procedure: (fhir.CodeableConcept|fhir.Reference)|null;
  /**
   * Internal flag to properly serialize choice-type element Claim.procedure.procedure[x]
   */
  protected static readonly _fts_procedureIsChoice:true = true;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * Default constructor for ClaimProcedure - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimProcedureArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['type']) { this.type = source.type.map((x) => new fhir.CodeableConcept(x)); }
    else { this.type = []; }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['procedure']) { this.procedure = source.procedure; }
    else if (source['procedureCodeableConcept']) { this.procedure = new fhir.CodeableConcept(source.procedureCodeableConcept); }
    else if (source['procedureReference']) { this.procedure = new fhir.Reference(source.procedureReference); }
    else { this.procedure = null; }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.procedure' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.procedure.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["type"]) { this.type.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.type[${i}]`)); }) }
    if (this["date"]) { issues.push(...this.date.doModelValidation(expression+'.date')); }
    if (!this['procedure']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property procedure fhir: Claim.procedure.procedure[x]:', expression: [expression] });
    }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimInsurance type.
 */
export interface ClaimInsuranceArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.focal
   */
  _focal?:fhir.FhirElementArgs;
  /**
   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
   */
  identifier?: fhir.IdentifierArgs|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: fhir.ReferenceArgs|null;
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  businessArrangement?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.businessArrangement
   */
  _businessArrangement?:fhir.FhirElementArgs;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  preAuthRef?: fhir.FhirString[]|string[]|undefined;
  /**
   * Extended properties for primitive element: Claim.insurance.preAuthRef
   */
  _preAuthRef?:(fhir.FhirElementArgs|null)[];
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  claimResponse?: fhir.ReferenceArgs|undefined;
}

/**
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export class ClaimInsurance extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimInsurance';
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  public focal: fhir.FhirBoolean|null;
  /**
   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
   */
  public identifier?: fhir.Identifier|undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  public coverage: fhir.Reference|null;
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  public businessArrangement?: fhir.FhirString|undefined;
  /**
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  public preAuthRef: fhir.FhirString[];
  /**
   * Must not be specified when 'focal=true' for this insurance.
   */
  public claimResponse?: fhir.Reference|undefined;
  /**
   * Default constructor for ClaimInsurance - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimInsuranceArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['focal']) { this.focal = new fhir.FhirBoolean({value: source.focal}); }
    else { this.focal = null; }
    if (source['_focal']) {
      if (this.focal) { this.focal.addExtendedProperties(source._focal!); }
      else { this.focal = new fhir.FhirBoolean(source._focal as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['identifier']) { this.identifier = new fhir.Identifier(source.identifier); }
    if (source['coverage']) { this.coverage = new fhir.Reference(source.coverage); }
    else { this.coverage = null; }
    if (source['businessArrangement']) { this.businessArrangement = new fhir.FhirString({value: source.businessArrangement}); }
    if (source['_businessArrangement']) {
      if (this.businessArrangement) { this.businessArrangement.addExtendedProperties(source._businessArrangement!); }
      else { this.businessArrangement = new fhir.FhirString(source._businessArrangement as Partial<fhir.FhirStringArgs>); }
    }
    if (source['preAuthRef']) { this.preAuthRef = source.preAuthRef.map((x) => new fhir.FhirString({value: x})); }
    else { this.preAuthRef = []; }
    if (source['_preAuthRef']) {
      source._preAuthRef.forEach((x,i) => {
        if (this.preAuthRef.length >= i) { if (x) { this.preAuthRef[i].addExtendedProperties(x); } }
        else { if (x) { this.preAuthRef.push(new fhir.FhirString(x as Partial<fhir.FhirStringArgs>)); } }
      });
    }
    if (source['claimResponse']) { this.claimResponse = new fhir.Reference(source.claimResponse); }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.insurance' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.insurance.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (!this['focal']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property focal fhir: Claim.insurance.focal:boolean', expression: [expression] });
    }
    if (this["focal"]) { issues.push(...this.focal.doModelValidation(expression+'.focal')); }
    if (this["identifier"]) { issues.push(...this.identifier.doModelValidation(expression+'.identifier')); }
    if (!this['coverage']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property coverage fhir: Claim.insurance.coverage:Reference', expression: [expression] });
    }
    if (this["coverage"]) { issues.push(...this.coverage.doModelValidation(expression+'.coverage')); }
    if (this["businessArrangement"]) { issues.push(...this.businessArrangement.doModelValidation(expression+'.businessArrangement')); }
    if (this["preAuthRef"]) { this.preAuthRef.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.preAuthRef[${i}]`)); }) }
    if (this["claimResponse"]) { issues.push(...this.claimResponse.doModelValidation(expression+'.claimResponse')); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimAccident type.
 */
export interface ClaimAccidentArgs extends fhir.BackboneElementArgs {
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  date: fhir.FhirDate|string|undefined;
  /**
   * Extended properties for primitive element: Claim.accident.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  type?: fhir.CodeableConceptArgs|undefined;
  /**
   * The physical location of the accident event.
   */
  location?: fhir.Address|fhir.Reference|undefined;
  /**
   * The physical location of the accident event.
   */
  locationAddress?: fhir.AddressArgs|undefined;
  /**
   * The physical location of the accident event.
   */
  locationReference?: fhir.ReferenceArgs|undefined;
}

/**
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export class ClaimAccident extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimAccident';
  /**
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  public date: fhir.FhirDate|null;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  public type?: fhir.CodeableConcept|undefined;
  /**
   * The physical location of the accident event.
   */
  public location?: (fhir.Address|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Claim.accident.location[x]
   */
  protected static readonly _fts_locationIsChoice:true = true;
  /**
   * Default constructor for ClaimAccident - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimAccidentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['date']) { this.date = new fhir.FhirDate({value: source.date}); }
    else { this.date = null; }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDate(source._date as Partial<fhir.FhirDateArgs>); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    if (source['location']) { this.location = source.location; }
    else if (source['locationAddress']) { this.location = new fhir.Address(source.locationAddress); }
    else if (source['locationReference']) { this.location = new fhir.Reference(source.locationReference); }
  }
  /**
   * Extensible-bound Value Set for type (Claim.accident.type)
   */
  public static get typeExtensibleCodings():V3ActIncidentCodingType {
    return V3ActIncidentCodings;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.accident' }
    if (!this['date']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property date fhir: Claim.accident.date:date', expression: [expression] });
    }
    if (this["date"]) { issues.push(...this.date.doModelValidation(expression+'.date')); }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimItemDetailSubDetail type.
 */
export interface ClaimItemDetailSubDetailArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify item entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.subDetail.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.CodeableConceptArgs|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.subDetail.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
}

/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetailSubDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimItemDetailSubDetail';
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * Default constructor for ClaimItemDetailSubDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimItemDetailSubDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.item.detail.subDetail' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.item.detail.subDetail.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["revenue"]) { issues.push(...this.revenue.doModelValidation(expression+'.revenue')); }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: Claim.item.detail.subDetail.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["programCode"]) { this.programCode.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.programCode[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimItemDetail type.
 */
export interface ClaimItemDetailArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify item entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.CodeableConceptArgs|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.detail.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  subDetail?: fhir.ClaimItemDetailSubDetailArgs[]|undefined;
}

/**
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export class ClaimItemDetail extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimItemDetail';
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode: fhir.CodeableConcept[];
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public subDetail: fhir.ClaimItemDetailSubDetail[];
  /**
   * Default constructor for ClaimItemDetail - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimItemDetailArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
    if (source['subDetail']) { this.subDetail = source.subDetail.map((x) => new fhir.ClaimItemDetailSubDetail(x)); }
    else { this.subDetail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.item.detail' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.item.detail.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["revenue"]) { issues.push(...this.revenue.doModelValidation(expression+'.revenue')); }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: Claim.item.detail.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["programCode"]) { this.programCode.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.programCode[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    if (this["subDetail"]) { this.subDetail.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.subDetail[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the ClaimItem type.
 */
export interface ClaimItemArgs extends fhir.BackboneElementArgs {
  /**
   * A number to uniquely identify item entries.
   */
  sequence: fhir.FhirPositiveInt|number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.sequence
   */
  _sequence?:fhir.FhirElementArgs;
  /**
   * CareTeam members related to this service or product.
   */
  careTeamSequence?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.careTeamSequence
   */
  _careTeamSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * Diagnosis applicable for this service or product.
   */
  diagnosisSequence?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.diagnosisSequence
   */
  _diagnosisSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * Procedures applicable for this service or product.
   */
  procedureSequence?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.procedureSequence
   */
  _procedureSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  informationSequence?: fhir.FhirPositiveInt[]|number[]|undefined;
  /**
   * Extended properties for primitive element: Claim.item.informationSequence
   */
  _informationSequence?:(fhir.FhirElementArgs|null)[];
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: fhir.CodeableConceptArgs|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: fhir.CodeableConceptArgs|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService: fhir.CodeableConceptArgs|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  serviced?: fhir.FhirDate|fhir.Period|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedDate?: fhir.FhirDate|string|undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: fhir.PeriodArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  location?: fhir.CodeableConcept|fhir.Address|fhir.Reference|undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: fhir.CodeableConceptArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: fhir.AddressArgs|undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: fhir.ReferenceArgs|undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: fhir.QuantityArgs|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: fhir.MoneyArgs|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: fhir.FhirDecimal|number|undefined;
  /**
   * Extended properties for primitive element: Claim.item.factor
   */
  _factor?:fhir.FhirElementArgs;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: fhir.MoneyArgs|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: fhir.ReferenceArgs[]|undefined;
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  bodySite?: fhir.CodeableConceptArgs|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: fhir.ReferenceArgs[]|undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  detail?: fhir.ClaimItemDetailArgs[]|undefined;
}

/**
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export class ClaimItem extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'ClaimItem';
  /**
   * A number to uniquely identify item entries.
   */
  public sequence: fhir.FhirPositiveInt|null;
  /**
   * CareTeam members related to this service or product.
   */
  public careTeamSequence: fhir.FhirPositiveInt[];
  /**
   * Diagnosis applicable for this service or product.
   */
  public diagnosisSequence: fhir.FhirPositiveInt[];
  /**
   * Procedures applicable for this service or product.
   */
  public procedureSequence: fhir.FhirPositiveInt[];
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  public informationSequence: fhir.FhirPositiveInt[];
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  public revenue?: fhir.CodeableConcept|undefined;
  /**
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  public category?: fhir.CodeableConcept|undefined;
  /**
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  public productOrService: fhir.CodeableConcept|null;
  /**
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  public modifier: fhir.CodeableConcept[];
  /**
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  public programCode: fhir.CodeableConcept[];
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  public serviced?: (fhir.FhirDate|fhir.Period)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Claim.item.serviced[x]
   */
  protected static readonly _fts_servicedIsChoice:true = true;
  /**
   * Where the product or service was provided.
   */
  public location?: (fhir.CodeableConcept|fhir.Address|fhir.Reference)|undefined;
  /**
   * Internal flag to properly serialize choice-type element Claim.item.location[x]
   */
  protected static readonly _fts_locationIsChoice:true = true;
  /**
   * The number of repetitions of a service or product.
   */
  public quantity?: fhir.Quantity|undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  public unitPrice?: fhir.Money|undefined;
  /**
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  public factor?: fhir.FhirDecimal|undefined;
  /**
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  public net?: fhir.Money|undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  public udi: fhir.Reference[];
  /**
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  public bodySite?: fhir.CodeableConcept|undefined;
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  public subSite: fhir.CodeableConcept[];
  /**
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  public encounter: fhir.Reference[];
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  public detail: fhir.ClaimItemDetail[];
  /**
   * Default constructor for ClaimItem - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimItemArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['sequence']) { this.sequence = new fhir.FhirPositiveInt({value: source.sequence}); }
    else { this.sequence = null; }
    if (source['_sequence']) {
      if (this.sequence) { this.sequence.addExtendedProperties(source._sequence!); }
      else { this.sequence = new fhir.FhirPositiveInt(source._sequence as Partial<fhir.FhirPositiveIntArgs>); }
    }
    if (source['careTeamSequence']) { this.careTeamSequence = source.careTeamSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.careTeamSequence = []; }
    if (source['_careTeamSequence']) {
      source._careTeamSequence.forEach((x,i) => {
        if (this.careTeamSequence.length >= i) { if (x) { this.careTeamSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.careTeamSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['diagnosisSequence']) { this.diagnosisSequence = source.diagnosisSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.diagnosisSequence = []; }
    if (source['_diagnosisSequence']) {
      source._diagnosisSequence.forEach((x,i) => {
        if (this.diagnosisSequence.length >= i) { if (x) { this.diagnosisSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.diagnosisSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['procedureSequence']) { this.procedureSequence = source.procedureSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.procedureSequence = []; }
    if (source['_procedureSequence']) {
      source._procedureSequence.forEach((x,i) => {
        if (this.procedureSequence.length >= i) { if (x) { this.procedureSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.procedureSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['informationSequence']) { this.informationSequence = source.informationSequence.map((x) => new fhir.FhirPositiveInt({value: x})); }
    else { this.informationSequence = []; }
    if (source['_informationSequence']) {
      source._informationSequence.forEach((x,i) => {
        if (this.informationSequence.length >= i) { if (x) { this.informationSequence[i].addExtendedProperties(x); } }
        else { if (x) { this.informationSequence.push(new fhir.FhirPositiveInt(x as Partial<fhir.FhirPositiveIntArgs>)); } }
      });
    }
    if (source['revenue']) { this.revenue = new fhir.CodeableConcept(source.revenue); }
    if (source['category']) { this.category = new fhir.CodeableConcept(source.category); }
    if (source['productOrService']) { this.productOrService = new fhir.CodeableConcept(source.productOrService); }
    else { this.productOrService = null; }
    if (source['modifier']) { this.modifier = source.modifier.map((x) => new fhir.CodeableConcept(x)); }
    else { this.modifier = []; }
    if (source['programCode']) { this.programCode = source.programCode.map((x) => new fhir.CodeableConcept(x)); }
    else { this.programCode = []; }
    if (source['serviced']) { this.serviced = source.serviced; }
    else if (source['servicedDate']) { this.serviced = new fhir.FhirDate({value: source.servicedDate}); }
    else if (source['servicedPeriod']) { this.serviced = new fhir.Period(source.servicedPeriod); }
    if (source['location']) { this.location = source.location; }
    else if (source['locationCodeableConcept']) { this.location = new fhir.CodeableConcept(source.locationCodeableConcept); }
    else if (source['locationAddress']) { this.location = new fhir.Address(source.locationAddress); }
    else if (source['locationReference']) { this.location = new fhir.Reference(source.locationReference); }
    if (source['quantity']) { this.quantity = new fhir.Quantity(source.quantity); }
    if (source['unitPrice']) { this.unitPrice = new fhir.Money(source.unitPrice); }
    if (source['factor']) { this.factor = new fhir.FhirDecimal({value: source.factor}); }
    if (source['_factor']) {
      if (this.factor) { this.factor.addExtendedProperties(source._factor!); }
      else { this.factor = new fhir.FhirDecimal(source._factor as Partial<fhir.FhirDecimalArgs>); }
    }
    if (source['net']) { this.net = new fhir.Money(source.net); }
    if (source['udi']) { this.udi = source.udi.map((x) => new fhir.Reference(x)); }
    else { this.udi = []; }
    if (source['bodySite']) { this.bodySite = new fhir.CodeableConcept(source.bodySite); }
    if (source['subSite']) { this.subSite = source.subSite.map((x) => new fhir.CodeableConcept(x)); }
    else { this.subSite = []; }
    if (source['encounter']) { this.encounter = source.encounter.map((x) => new fhir.Reference(x)); }
    else { this.encounter = []; }
    if (source['detail']) { this.detail = source.detail.map((x) => new fhir.ClaimItemDetail(x)); }
    else { this.detail = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim.item' }
    if (!this['sequence']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property sequence fhir: Claim.item.sequence:positiveInt', expression: [expression] });
    }
    if (this["sequence"]) { issues.push(...this.sequence.doModelValidation(expression+'.sequence')); }
    if (this["careTeamSequence"]) { this.careTeamSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.careTeamSequence[${i}]`)); }) }
    if (this["diagnosisSequence"]) { this.diagnosisSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.diagnosisSequence[${i}]`)); }) }
    if (this["procedureSequence"]) { this.procedureSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.procedureSequence[${i}]`)); }) }
    if (this["informationSequence"]) { this.informationSequence.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.informationSequence[${i}]`)); }) }
    if (this["revenue"]) { issues.push(...this.revenue.doModelValidation(expression+'.revenue')); }
    if (this["category"]) { issues.push(...this.category.doModelValidation(expression+'.category')); }
    if (!this['productOrService']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property productOrService fhir: Claim.item.productOrService:CodeableConcept', expression: [expression] });
    }
    if (this["productOrService"]) { issues.push(...this.productOrService.doModelValidation(expression+'.productOrService')); }
    if (this["modifier"]) { this.modifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.modifier[${i}]`)); }) }
    if (this["programCode"]) { this.programCode.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.programCode[${i}]`)); }) }
    if (this["quantity"]) { issues.push(...this.quantity.doModelValidation(expression+'.quantity')); }
    if (this["unitPrice"]) { issues.push(...this.unitPrice.doModelValidation(expression+'.unitPrice')); }
    if (this["factor"]) { issues.push(...this.factor.doModelValidation(expression+'.factor')); }
    if (this["net"]) { issues.push(...this.net.doModelValidation(expression+'.net')); }
    if (this["udi"]) { this.udi.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.udi[${i}]`)); }) }
    if (this["bodySite"]) { issues.push(...this.bodySite.doModelValidation(expression+'.bodySite')); }
    if (this["subSite"]) { this.subSite.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.subSite[${i}]`)); }) }
    if (this["encounter"]) { this.encounter.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.encounter[${i}]`)); }) }
    if (this["detail"]) { this.detail.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.detail[${i}]`)); }) }
    return issues;
  }
}
/**
 * Valid arguments for the Claim type.
 */
export interface ClaimArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "Claim"|undefined;
  /**
   * A unique identifier assigned to this claim.
   */
  identifier?: fhir.IdentifierArgs[]|undefined;
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: fhir.FhirCode<FmStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Claim.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  type: fhir.CodeableConceptArgs|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  subType?: fhir.CodeableConceptArgs|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  use: fhir.FhirCode<ClaimUseCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: Claim.use
   */
  _use?:fhir.FhirElementArgs;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
   */
  patient: fhir.ReferenceArgs|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  billablePeriod?: fhir.PeriodArgs|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  created: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: Claim.created
   */
  _created?:fhir.FhirElementArgs;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  enterer?: fhir.ReferenceArgs|undefined;
  /**
   * The Insurer who is target of the request.
   */
  insurer?: fhir.ReferenceArgs|undefined;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  provider: fhir.ReferenceArgs|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  priority: fhir.CodeableConceptArgs|null;
  /**
   * This field is only used for preauthorizations.
   */
  fundsReserve?: fhir.CodeableConceptArgs|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  related?: fhir.ClaimRelatedArgs[]|undefined;
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  prescription?: fhir.ReferenceArgs|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: fhir.ReferenceArgs|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
   */
  payee?: fhir.ClaimPayeeArgs|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: fhir.ReferenceArgs|undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: fhir.ReferenceArgs|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  careTeam?: fhir.ClaimCareTeamArgs[]|undefined;
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInfo?: fhir.ClaimSupportingInfoArgs[]|undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  diagnosis?: fhir.ClaimDiagnosisArgs[]|undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  procedure?: fhir.ClaimProcedureArgs[]|undefined;
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance: fhir.ClaimInsuranceArgs[]|null;
  /**
   * Details of an accident which resulted in injuries which required the products and services listed in the claim.
   */
  accident?: fhir.ClaimAccidentArgs|undefined;
  /**
   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
   */
  item?: fhir.ClaimItemArgs[]|undefined;
  /**
   * The total value of the all the items in the claim.
   */
  total?: fhir.MoneyArgs|undefined;
}

/**
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 */
export class Claim extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'Claim';
  /**
   * Resource Type Name
   */
  public override resourceType: "Claim";
  /**
   * A unique identifier assigned to this claim.
   */
  public identifier: fhir.Identifier[];
  /**
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  public status: fhir.FhirCode<FmStatusCodeType>|null;
  /**
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  public type: fhir.CodeableConcept|null;
  /**
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  public subType?: fhir.CodeableConcept|undefined;
  /**
   * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
   */
  public use: fhir.FhirCode<ClaimUseCodeType>|null;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
   */
  public patient: fhir.Reference|null;
  /**
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  public billablePeriod?: fhir.Period|undefined;
  /**
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  public created: fhir.FhirDateTime|null;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  public enterer?: fhir.Reference|undefined;
  /**
   * The Insurer who is target of the request.
   */
  public insurer?: fhir.Reference|undefined;
  /**
   * Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
   */
  public provider: fhir.Reference|null;
  /**
   * If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
   */
  public priority: fhir.CodeableConcept|null;
  /**
   * This field is only used for preauthorizations.
   */
  public fundsReserve?: fhir.CodeableConcept|undefined;
  /**
   * For example,  for the original treatment and follow-up exams.
   */
  public related: fhir.ClaimRelated[];
  /**
   * Prescription to support the dispensing of pharmacy, device or vision products.
   */
  public prescription?: fhir.Reference|undefined;
  /**
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  public originalPrescription?: fhir.Reference|undefined;
  /**
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
   */
  public payee?: fhir.ClaimPayee|undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  public referral?: fhir.Reference|undefined;
  /**
   * Facility where the services were provided.
   */
  public facility?: fhir.Reference|undefined;
  /**
   * The members of the team who provided the products and services.
   */
  public careTeam: fhir.ClaimCareTeam[];
  /**
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  public supportingInfo: fhir.ClaimSupportingInfo[];
  /**
   * Information about diagnoses relevant to the claim items.
   */
  public diagnosis: fhir.ClaimDiagnosis[];
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  public procedure: fhir.ClaimProcedure[];
  /**
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  public insurance: fhir.ClaimInsurance[];
  /**
   * Details of an accident which resulted in injuries which required the products and services listed in the claim.
   */
  public accident?: fhir.ClaimAccident|undefined;
  /**
   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
   */
  public item: fhir.ClaimItem[];
  /**
   * The total value of the all the items in the claim.
   */
  public total?: fhir.Money|undefined;
  /**
   * Default constructor for Claim - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<ClaimArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'Claim';
    if (source['identifier']) { this.identifier = source.identifier.map((x) => new fhir.Identifier(x)); }
    else { this.identifier = []; }
    if (source['status']) { this.status = new fhir.FhirCode<FmStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<FmStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['type']) { this.type = new fhir.CodeableConcept(source.type); }
    else { this.type = null; }
    if (source['subType']) { this.subType = new fhir.CodeableConcept(source.subType); }
    if (source['use']) { this.use = new fhir.FhirCode<ClaimUseCodeType>({value: source.use}); }
    else { this.use = null; }
    if (source['_use']) {
      if (this.use) { this.use.addExtendedProperties(source._use!); }
      else { this.use = new fhir.FhirCode<ClaimUseCodeType>(source._use as Partial<fhir.FhirCode>); }
    }
    if (source['patient']) { this.patient = new fhir.Reference(source.patient); }
    else { this.patient = null; }
    if (source['billablePeriod']) { this.billablePeriod = new fhir.Period(source.billablePeriod); }
    if (source['created']) { this.created = new fhir.FhirDateTime({value: source.created}); }
    else { this.created = null; }
    if (source['_created']) {
      if (this.created) { this.created.addExtendedProperties(source._created!); }
      else { this.created = new fhir.FhirDateTime(source._created as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['enterer']) { this.enterer = new fhir.Reference(source.enterer); }
    if (source['insurer']) { this.insurer = new fhir.Reference(source.insurer); }
    if (source['provider']) { this.provider = new fhir.Reference(source.provider); }
    else { this.provider = null; }
    if (source['priority']) { this.priority = new fhir.CodeableConcept(source.priority); }
    else { this.priority = null; }
    if (source['fundsReserve']) { this.fundsReserve = new fhir.CodeableConcept(source.fundsReserve); }
    if (source['related']) { this.related = source.related.map((x) => new fhir.ClaimRelated(x)); }
    else { this.related = []; }
    if (source['prescription']) { this.prescription = new fhir.Reference(source.prescription); }
    if (source['originalPrescription']) { this.originalPrescription = new fhir.Reference(source.originalPrescription); }
    if (source['payee']) { this.payee = new fhir.ClaimPayee(source.payee); }
    if (source['referral']) { this.referral = new fhir.Reference(source.referral); }
    if (source['facility']) { this.facility = new fhir.Reference(source.facility); }
    if (source['careTeam']) { this.careTeam = source.careTeam.map((x) => new fhir.ClaimCareTeam(x)); }
    else { this.careTeam = []; }
    if (source['supportingInfo']) { this.supportingInfo = source.supportingInfo.map((x) => new fhir.ClaimSupportingInfo(x)); }
    else { this.supportingInfo = []; }
    if (source['diagnosis']) { this.diagnosis = source.diagnosis.map((x) => new fhir.ClaimDiagnosis(x)); }
    else { this.diagnosis = []; }
    if (source['procedure']) { this.procedure = source.procedure.map((x) => new fhir.ClaimProcedure(x)); }
    else { this.procedure = []; }
    if (source['insurance']) { this.insurance = source.insurance.map((x) => new fhir.ClaimInsurance(x)); }
    else { this.insurance = []; }
    if (source['accident']) { this.accident = new fhir.ClaimAccident(source.accident); }
    if (source['item']) { this.item = source.item.map((x) => new fhir.ClaimItem(x)); }
    else { this.item = []; }
    if (source['total']) { this.total = new fhir.Money(source.total); }
  }
  /**
   * Required-bound Value Set for status (Claim.status)
   */
  public static get statusRequiredCodes() {
    return FmStatusCodes;
  }
  /**
   * Extensible-bound Value Set for type (Claim.type)
   */
  public static get typeExtensibleCodings():ClaimTypeCodingType {
    return ClaimTypeCodings;
  }
  /**
   * Required-bound Value Set for use (Claim.use)
   */
  public static get useRequiredCodes() {
    return ClaimUseCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation(expression:string = ''):fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation(expression);
    if (expression === '') { expression = 'Claim' }
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType fhir: Claim.resourceType:"Claim"', expression: [expression] });
    }
    if (this["identifier"]) { this.identifier.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.identifier[${i}]`)); }) }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status fhir: Claim.status:code', expression: [expression] });
    }
    if (this['status'] && (!Object.values(FmStatusCodes).includes(this.status.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'status (Claim.status) of type code is missing code for Required binding to: FmStatus', expression: [expression] });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation(expression+'.status')); }
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type fhir: Claim.type:CodeableConcept', expression: [expression] });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation(expression+'.type')); }
    if (this["subType"]) { issues.push(...this.subType.doModelValidation(expression+'.subType')); }
    if (!this['use']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property use fhir: Claim.use:code', expression: [expression] });
    }
    if (this['use'] && (!Object.values(ClaimUseCodes).includes(this.use.value as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'use (Claim.use) of type code is missing code for Required binding to: ClaimUse', expression: [expression] });
    }
    if (this["use"]) { issues.push(...this.use.doModelValidation(expression+'.use')); }
    if (!this['patient']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property patient fhir: Claim.patient:Reference', expression: [expression] });
    }
    if (this["patient"]) { issues.push(...this.patient.doModelValidation(expression+'.patient')); }
    if (this["billablePeriod"]) { issues.push(...this.billablePeriod.doModelValidation(expression+'.billablePeriod')); }
    if (!this['created']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property created fhir: Claim.created:dateTime', expression: [expression] });
    }
    if (this["created"]) { issues.push(...this.created.doModelValidation(expression+'.created')); }
    if (this["enterer"]) { issues.push(...this.enterer.doModelValidation(expression+'.enterer')); }
    if (this["insurer"]) { issues.push(...this.insurer.doModelValidation(expression+'.insurer')); }
    if (!this['provider']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property provider fhir: Claim.provider:Reference', expression: [expression] });
    }
    if (this["provider"]) { issues.push(...this.provider.doModelValidation(expression+'.provider')); }
    if (!this['priority']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property priority fhir: Claim.priority:CodeableConcept', expression: [expression] });
    }
    if (this["priority"]) { issues.push(...this.priority.doModelValidation(expression+'.priority')); }
    if (this["fundsReserve"]) { issues.push(...this.fundsReserve.doModelValidation(expression+'.fundsReserve')); }
    if (this["related"]) { this.related.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.related[${i}]`)); }) }
    if (this["prescription"]) { issues.push(...this.prescription.doModelValidation(expression+'.prescription')); }
    if (this["originalPrescription"]) { issues.push(...this.originalPrescription.doModelValidation(expression+'.originalPrescription')); }
    if (this["payee"]) { issues.push(...this.payee.doModelValidation(expression+'.payee')); }
    if (this["referral"]) { issues.push(...this.referral.doModelValidation(expression+'.referral')); }
    if (this["facility"]) { issues.push(...this.facility.doModelValidation(expression+'.facility')); }
    if (this["careTeam"]) { this.careTeam.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.careTeam[${i}]`)); }) }
    if (this["supportingInfo"]) { this.supportingInfo.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.supportingInfo[${i}]`)); }) }
    if (this["diagnosis"]) { this.diagnosis.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.diagnosis[${i}]`)); }) }
    if (this["procedure"]) { this.procedure.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.procedure[${i}]`)); }) }
    if (!this['insurance']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurance fhir: Claim.insurance:insurance', expression: [expression] });
    } else if (!Array.isArray(this.insurance)) {
      issues.push({ severity: 'error', code: 'structure', diagnostics: 'Found scalar in array property insurance fhir: Claim.insurance:insurance', expression: [expression] });
    } else if (this.insurance.length === 0) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property insurance fhir: Claim.insurance:insurance', expression: [expression] });
    }
    if (this["insurance"]) { this.insurance.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.insurance[${i}]`)); }) }
    if (this["accident"]) { issues.push(...this.accident.doModelValidation(expression+'.accident')); }
    if (this["item"]) { this.item.forEach((x,i) => { issues.push(...x.doModelValidation(expression+`.item[${i}]`)); }) }
    if (this["total"]) { issues.push(...this.total.doModelValidation(expression+'.total')); }
    return issues;
  }
}
