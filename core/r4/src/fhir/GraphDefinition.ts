// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1
// Minimum TypeScript Version: 3.7
// FHIR Resource: GraphDefinition

import * as fhir from '../fhir.js';

// @ts-ignore
import { GraphCompartmentUseCodings, GraphCompartmentUseCodingType,} from '../fhirValueSets/GraphCompartmentUseCodings.js';
// @ts-ignore
import { GraphCompartmentUseCodes,  GraphCompartmentUseCodeType } from '../fhirValueSets/GraphCompartmentUseCodes.js';
// @ts-ignore
import { CompartmentTypeCodings, CompartmentTypeCodingType,} from '../fhirValueSets/CompartmentTypeCodings.js';
// @ts-ignore
import { CompartmentTypeCodes,  CompartmentTypeCodeType } from '../fhirValueSets/CompartmentTypeCodes.js';
// @ts-ignore
import { GraphCompartmentRuleCodings, GraphCompartmentRuleCodingType,} from '../fhirValueSets/GraphCompartmentRuleCodings.js';
// @ts-ignore
import { GraphCompartmentRuleCodes,  GraphCompartmentRuleCodeType } from '../fhirValueSets/GraphCompartmentRuleCodes.js';
// @ts-ignore
import { ResourceTypesCodings, ResourceTypesCodingType,} from '../fhirValueSets/ResourceTypesCodings.js';
// @ts-ignore
import { ResourceTypesCodes,  ResourceTypesCodeType } from '../fhirValueSets/ResourceTypesCodes.js';
// @ts-ignore
import { PublicationStatusCodings, PublicationStatusCodingType,} from '../fhirValueSets/PublicationStatusCodings.js';
// @ts-ignore
import { PublicationStatusCodes,  PublicationStatusCodeType } from '../fhirValueSets/PublicationStatusCodes.js';
/**
 * Valid arguments for the GraphDefinitionLinkTargetCompartment type.
 */
export interface GraphDefinitionLinkTargetCompartmentArgs extends fhir.BackboneElementArgs {
  /**
   * All conditional rules are evaluated; if they are true, then the rules are evaluated.
   */
  use: fhir.FhirCode<GraphCompartmentUseCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.compartment.use
   */
  _use?:fhir.FhirElementArgs;
  /**
   * Identifies the compartment.
   */
  code: fhir.FhirCode<CompartmentTypeCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.compartment.code
   */
  _code?:fhir.FhirElementArgs;
  /**
   * identical | matching | different | no-rule | custom.
   */
  rule: fhir.FhirCode<GraphCompartmentRuleCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.compartment.rule
   */
  _rule?:fhir.FhirElementArgs;
  /**
   * Custom rule, as a FHIRPath expression.
   */
  expression?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.compartment.expression
   */
  _expression?:fhir.FhirElementArgs;
  /**
   * Documentation for FHIRPath expression.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.compartment.description
   */
  _description?:fhir.FhirElementArgs;
}

/**
 * Compartment Consistency Rules.
 */
export class GraphDefinitionLinkTargetCompartment extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'GraphDefinitionLinkTargetCompartment';
  /**
   * All conditional rules are evaluated; if they are true, then the rules are evaluated.
   */
  public use: fhir.FhirCode<GraphCompartmentUseCodeType>|null;
  /**
   * Identifies the compartment.
   */
  public code: fhir.FhirCode<CompartmentTypeCodeType>|null;
  /**
   * identical | matching | different | no-rule | custom.
   */
  public rule: fhir.FhirCode<GraphCompartmentRuleCodeType>|null;
  /**
   * Custom rule, as a FHIRPath expression.
   */
  public expression?: fhir.FhirString|undefined;
  /**
   * Documentation for FHIRPath expression.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Default constructor for GraphDefinitionLinkTargetCompartment - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GraphDefinitionLinkTargetCompartmentArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['use']) { this.use = new fhir.FhirCode<GraphCompartmentUseCodeType>({value: source.use}); }
    else { this.use = null; }
    if (source['_use']) {
      if (this.use) { this.use.addExtendedProperties(source._use!); }
      else { this.use = new fhir.FhirCode<GraphCompartmentUseCodeType>(source._use as Partial<fhir.FhirCode>); }
    }
    if (source['code']) { this.code = new fhir.FhirCode<CompartmentTypeCodeType>({value: source.code}); }
    else { this.code = null; }
    if (source['_code']) {
      if (this.code) { this.code.addExtendedProperties(source._code!); }
      else { this.code = new fhir.FhirCode<CompartmentTypeCodeType>(source._code as Partial<fhir.FhirCode>); }
    }
    if (source['rule']) { this.rule = new fhir.FhirCode<GraphCompartmentRuleCodeType>({value: source.rule}); }
    else { this.rule = null; }
    if (source['_rule']) {
      if (this.rule) { this.rule.addExtendedProperties(source._rule!); }
      else { this.rule = new fhir.FhirCode<GraphCompartmentRuleCodeType>(source._rule as Partial<fhir.FhirCode>); }
    }
    if (source['expression']) { this.expression = new fhir.FhirString({value: source.expression}); }
    if (source['_expression']) {
      if (this.expression) { this.expression.addExtendedProperties(source._expression!); }
      else { this.expression = new fhir.FhirString(source._expression as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
  }
  /**
   * Required-bound Value Set for use (GraphDefinition.link.target.compartment.use)
   */
  public static get useRequiredCodes() {
    return GraphCompartmentUseCodes;
  }
  /**
   * Required-bound Value Set for code (GraphDefinition.link.target.compartment.code)
   */
  public static get codeRequiredCodes() {
    return CompartmentTypeCodes;
  }
  /**
   * Required-bound Value Set for rule (GraphDefinition.link.target.compartment.rule)
   */
  public static get ruleRequiredCodes() {
    return GraphCompartmentRuleCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['use']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property use:fhir.FhirCode<GraphCompartmentUseCodeType> fhir: GraphDefinition.link.target.compartment.use:code' });
    }
    if (this['use'] && (!Object.values(GraphCompartmentUseCodes).includes(this.use as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property use:fhir.FhirCode<GraphCompartmentUseCodeType> fhir: GraphDefinition.link.target.compartment.use:code Required binding to: GraphCompartmentUse' });
    }
    if (this["use"]) { issues.push(...this.use.doModelValidation()); }
    if (!this['code']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property code:fhir.FhirCode<CompartmentTypeCodeType> fhir: GraphDefinition.link.target.compartment.code:code' });
    }
    if (this['code'] && (!Object.values(CompartmentTypeCodes).includes(this.code as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property code:fhir.FhirCode<CompartmentTypeCodeType> fhir: GraphDefinition.link.target.compartment.code:code Required binding to: CompartmentType' });
    }
    if (this["code"]) { issues.push(...this.code.doModelValidation()); }
    if (!this['rule']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property rule:fhir.FhirCode<GraphCompartmentRuleCodeType> fhir: GraphDefinition.link.target.compartment.rule:code' });
    }
    if (this['rule'] && (!Object.values(GraphCompartmentRuleCodes).includes(this.rule as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property rule:fhir.FhirCode<GraphCompartmentRuleCodeType> fhir: GraphDefinition.link.target.compartment.rule:code Required binding to: GraphCompartmentRule' });
    }
    if (this["rule"]) { issues.push(...this.rule.doModelValidation()); }
    if (this["expression"]) { issues.push(...this.expression.doModelValidation()); }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    return issues;
  }
}
/**
 * Valid arguments for the GraphDefinitionLinkTarget type.
 */
export interface GraphDefinitionLinkTargetArgs extends fhir.BackboneElementArgs {
  /**
   * Type of resource this link refers to.
   */
  type: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.type
   */
  _type?:fhir.FhirElementArgs;
  /**
   * At least one of the parameters must have the value {ref} which identifies the focus resource.
   */
  params?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.params
   */
  _params?:fhir.FhirElementArgs;
  /**
   * Profile for the target resource.
   */
  profile?: fhir.FhirCanonical|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.target.profile
   */
  _profile?:fhir.FhirElementArgs;
  /**
   * Compartment Consistency Rules.
   */
  compartment?: fhir.GraphDefinitionLinkTargetCompartmentArgs[]|undefined;
  /**
   * Additional links from target resource.
   */
  link?: fhir.GraphDefinitionLinkArgs[]|undefined;
}

/**
 * Potential target for the link.
 */
export class GraphDefinitionLinkTarget extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'GraphDefinitionLinkTarget';
  /**
   * Type of resource this link refers to.
   */
  public type: fhir.FhirCode|null;
  /**
   * At least one of the parameters must have the value {ref} which identifies the focus resource.
   */
  public params?: fhir.FhirString|undefined;
  /**
   * Profile for the target resource.
   */
  public profile?: fhir.FhirCanonical|undefined;
  /**
   * Compartment Consistency Rules.
   */
  public compartment: fhir.GraphDefinitionLinkTargetCompartment[];
  /**
   * Additional links from target resource.
   */
  public link: fhir.GraphDefinitionLink[];
  /**
   * Default constructor for GraphDefinitionLinkTarget - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GraphDefinitionLinkTargetArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['type']) { this.type = new fhir.FhirCode({value: source.type}); }
    else { this.type = null; }
    if (source['_type']) {
      if (this.type) { this.type.addExtendedProperties(source._type!); }
      else { this.type = new fhir.FhirCode(source._type as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['params']) { this.params = new fhir.FhirString({value: source.params}); }
    if (source['_params']) {
      if (this.params) { this.params.addExtendedProperties(source._params!); }
      else { this.params = new fhir.FhirString(source._params as Partial<fhir.FhirStringArgs>); }
    }
    if (source['profile']) { this.profile = new fhir.FhirCanonical({value: source.profile}); }
    if (source['_profile']) {
      if (this.profile) { this.profile.addExtendedProperties(source._profile!); }
      else { this.profile = new fhir.FhirCanonical(source._profile as Partial<fhir.FhirCanonicalArgs>); }
    }
    if (source['compartment']) { this.compartment = source.compartment.map((x) => new fhir.GraphDefinitionLinkTargetCompartment(x)); }
    else { this.compartment = []; }
    if (source['link']) { this.link = source.link.map((x) => new fhir.GraphDefinitionLink(x)); }
    else { this.link = []; }
  }
  /**
   * Required-bound Value Set for type (GraphDefinition.link.target.type)
   */
  public static get typeRequiredCodes() {
    return ResourceTypesCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['type']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property type:fhir.FhirCode fhir: GraphDefinition.link.target.type:code' });
    }
    if (this['type'] && (!Object.values(ResourceTypesCodes).includes(this.type as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property type:fhir.FhirCode fhir: GraphDefinition.link.target.type:code Required binding to: ResourceTypes' });
    }
    if (this["type"]) { issues.push(...this.type.doModelValidation()); }
    if (this["params"]) { issues.push(...this.params.doModelValidation()); }
    if (this["profile"]) { issues.push(...this.profile.doModelValidation()); }
    if (this["compartment"]) { this.compartment.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["link"]) { this.link.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the GraphDefinitionLink type.
 */
export interface GraphDefinitionLinkArgs extends fhir.BackboneElementArgs {
  /**
   * The path expression cannot contain a resolve() function. If there is no path, the link is a reverse lookup, using target.params. If the path is "*" then this means all references in the resource.
   */
  path?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.path
   */
  _path?:fhir.FhirElementArgs;
  /**
   * Which slice (if profiled).
   */
  sliceName?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.sliceName
   */
  _sliceName?:fhir.FhirElementArgs;
  /**
   * Minimum occurrences for this link.
   */
  min?: fhir.FhirInteger|number|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.min
   */
  _min?:fhir.FhirElementArgs;
  /**
   * Maximum occurrences for this link.
   */
  max?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.max
   */
  _max?:fhir.FhirElementArgs;
  /**
   * Information about why this link is of interest in this graph definition.
   */
  description?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.link.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * Potential target for the link.
   */
  target?: fhir.GraphDefinitionLinkTargetArgs[]|undefined;
}

/**
 * Links this graph makes rules about.
 */
export class GraphDefinitionLink extends fhir.BackboneElement {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'GraphDefinitionLink';
  /**
   * The path expression cannot contain a resolve() function. If there is no path, the link is a reverse lookup, using target.params. If the path is "*" then this means all references in the resource.
   */
  public path?: fhir.FhirString|undefined;
  /**
   * Which slice (if profiled).
   */
  public sliceName?: fhir.FhirString|undefined;
  /**
   * Minimum occurrences for this link.
   */
  public min?: fhir.FhirInteger|undefined;
  /**
   * Maximum occurrences for this link.
   */
  public max?: fhir.FhirString|undefined;
  /**
   * Information about why this link is of interest in this graph definition.
   */
  public description?: fhir.FhirString|undefined;
  /**
   * Potential target for the link.
   */
  public target: fhir.GraphDefinitionLinkTarget[];
  /**
   * Default constructor for GraphDefinitionLink - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GraphDefinitionLinkArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    if (source['path']) { this.path = new fhir.FhirString({value: source.path}); }
    if (source['_path']) {
      if (this.path) { this.path.addExtendedProperties(source._path!); }
      else { this.path = new fhir.FhirString(source._path as Partial<fhir.FhirStringArgs>); }
    }
    if (source['sliceName']) { this.sliceName = new fhir.FhirString({value: source.sliceName}); }
    if (source['_sliceName']) {
      if (this.sliceName) { this.sliceName.addExtendedProperties(source._sliceName!); }
      else { this.sliceName = new fhir.FhirString(source._sliceName as Partial<fhir.FhirStringArgs>); }
    }
    if (source['min']) { this.min = new fhir.FhirInteger({value: source.min}); }
    if (source['_min']) {
      if (this.min) { this.min.addExtendedProperties(source._min!); }
      else { this.min = new fhir.FhirInteger(source._min as Partial<fhir.FhirIntegerArgs>); }
    }
    if (source['max']) { this.max = new fhir.FhirString({value: source.max}); }
    if (source['_max']) {
      if (this.max) { this.max.addExtendedProperties(source._max!); }
      else { this.max = new fhir.FhirString(source._max as Partial<fhir.FhirStringArgs>); }
    }
    if (source['description']) { this.description = new fhir.FhirString({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirString(source._description as Partial<fhir.FhirStringArgs>); }
    }
    if (source['target']) { this.target = source.target.map((x) => new fhir.GraphDefinitionLinkTarget(x)); }
    else { this.target = []; }
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (this["path"]) { issues.push(...this.path.doModelValidation()); }
    if (this["sliceName"]) { issues.push(...this.sliceName.doModelValidation()); }
    if (this["min"]) { issues.push(...this.min.doModelValidation()); }
    if (this["max"]) { issues.push(...this.max.doModelValidation()); }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    if (this["target"]) { this.target.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
/**
 * Valid arguments for the GraphDefinition type.
 */
export interface GraphDefinitionArgs extends fhir.DomainResourceArgs {
  /**
   * Resource Type Name
   */
  resourceType: "GraphDefinition"|undefined;
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: fhir.FhirUri|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.url
   */
  _url?:fhir.FhirElementArgs;
  /**
   * There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the graph definition with the format [url]|[version].
   */
  version?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.version
   */
  _version?:fhir.FhirElementArgs;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.name
   */
  _name?:fhir.FhirElementArgs;
  /**
   * Allows filtering of graph definitions that are appropriate for use versus not.
   */
  status: fhir.FhirCode<PublicationStatusCodeType>|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.status
   */
  _status?:fhir.FhirElementArgs;
  /**
   * Allows filtering of graph definitions that are appropriate for use versus not.
   */
  experimental?: fhir.FhirBoolean|boolean|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.experimental
   */
  _experimental?:fhir.FhirElementArgs;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: fhir.FhirDateTime|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.date
   */
  _date?:fhir.FhirElementArgs;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: fhir.FhirString|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.publisher
   */
  _publisher?:fhir.FhirElementArgs;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: fhir.ContactDetailArgs[]|undefined;
  /**
   * This description can be used to capture details such as why the graph definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the graph definition is presumed to be the predominant language in the place the graph definition was created).
   */
  description?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.description
   */
  _description?:fhir.FhirElementArgs;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: fhir.UsageContextArgs[]|undefined;
  /**
   * It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: fhir.CodeableConceptArgs[]|undefined;
  /**
   * This element does not describe the usage of the graph definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.
   */
  purpose?: fhir.FhirMarkdown|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.purpose
   */
  _purpose?:fhir.FhirElementArgs;
  /**
   * The type of FHIR resource at which instances of this graph start.
   */
  start: fhir.FhirCode|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.start
   */
  _start?:fhir.FhirElementArgs;
  /**
   * The code does not include the '$' prefix that is always included in the URL when the operation is invoked.
   */
  profile?: fhir.FhirCanonical|string|undefined;
  /**
   * Extended properties for primitive element: GraphDefinition.profile
   */
  _profile?:fhir.FhirElementArgs;
  /**
   * Links this graph makes rules about.
   */
  link?: fhir.GraphDefinitionLinkArgs[]|undefined;
}

/**
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
export class GraphDefinition extends fhir.DomainResource {
  /**
   * Mapping of this datatype to a FHIR equivalent
   */
  public static override readonly _fts_dataType:string = 'GraphDefinition';
  /**
   * Resource Type Name
   */
  public override resourceType: "GraphDefinition";
  /**
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  public url?: fhir.FhirUri|undefined;
  /**
   * There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the graph definition with the format [url]|[version].
   */
  public version?: fhir.FhirString|undefined;
  /**
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  public name: fhir.FhirString|null;
  /**
   * Allows filtering of graph definitions that are appropriate for use versus not.
   */
  public status: fhir.FhirCode<PublicationStatusCodeType>|null;
  /**
   * Allows filtering of graph definitions that are appropriate for use versus not.
   */
  public experimental?: fhir.FhirBoolean|undefined;
  /**
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  public date?: fhir.FhirDateTime|undefined;
  /**
   * Usually an organization but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.
   */
  public publisher?: fhir.FhirString|undefined;
  /**
   * May be a web site, an email address, a telephone number, etc.
   */
  public contact: fhir.ContactDetail[];
  /**
   * This description can be used to capture details such as why the graph definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the graph definition is presumed to be the predominant language in the place the graph definition was created).
   */
  public description?: fhir.FhirMarkdown|undefined;
  /**
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  public useContext: fhir.UsageContext[];
  /**
   * It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  public jurisdiction: fhir.CodeableConcept[];
  /**
   * This element does not describe the usage of the graph definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.
   */
  public purpose?: fhir.FhirMarkdown|undefined;
  /**
   * The type of FHIR resource at which instances of this graph start.
   */
  public start: fhir.FhirCode|null;
  /**
   * The code does not include the '$' prefix that is always included in the URL when the operation is invoked.
   */
  public profile?: fhir.FhirCanonical|undefined;
  /**
   * Links this graph makes rules about.
   */
  public link: fhir.GraphDefinitionLink[];
  /**
   * Default constructor for GraphDefinition - initializes any required elements to null if a value is not provided.
   */
  constructor(source:Partial<GraphDefinitionArgs> = {}, options:fhir.FhirConstructorOptions = {}) {
    super(source, options);
    this.resourceType = 'GraphDefinition';
    if (source['url']) { this.url = new fhir.FhirUri({value: source.url}); }
    if (source['_url']) {
      if (this.url) { this.url.addExtendedProperties(source._url!); }
      else { this.url = new fhir.FhirUri(source._url as Partial<fhir.FhirUriArgs>); }
    }
    if (source['version']) { this.version = new fhir.FhirString({value: source.version}); }
    if (source['_version']) {
      if (this.version) { this.version.addExtendedProperties(source._version!); }
      else { this.version = new fhir.FhirString(source._version as Partial<fhir.FhirStringArgs>); }
    }
    if (source['name']) { this.name = new fhir.FhirString({value: source.name}); }
    else { this.name = null; }
    if (source['_name']) {
      if (this.name) { this.name.addExtendedProperties(source._name!); }
      else { this.name = new fhir.FhirString(source._name as Partial<fhir.FhirStringArgs>); }
    }
    if (source['status']) { this.status = new fhir.FhirCode<PublicationStatusCodeType>({value: source.status}); }
    else { this.status = null; }
    if (source['_status']) {
      if (this.status) { this.status.addExtendedProperties(source._status!); }
      else { this.status = new fhir.FhirCode<PublicationStatusCodeType>(source._status as Partial<fhir.FhirCode>); }
    }
    if (source['experimental']) { this.experimental = new fhir.FhirBoolean({value: source.experimental}); }
    if (source['_experimental']) {
      if (this.experimental) { this.experimental.addExtendedProperties(source._experimental!); }
      else { this.experimental = new fhir.FhirBoolean(source._experimental as Partial<fhir.FhirBooleanArgs>); }
    }
    if (source['date']) { this.date = new fhir.FhirDateTime({value: source.date}); }
    if (source['_date']) {
      if (this.date) { this.date.addExtendedProperties(source._date!); }
      else { this.date = new fhir.FhirDateTime(source._date as Partial<fhir.FhirDateTimeArgs>); }
    }
    if (source['publisher']) { this.publisher = new fhir.FhirString({value: source.publisher}); }
    if (source['_publisher']) {
      if (this.publisher) { this.publisher.addExtendedProperties(source._publisher!); }
      else { this.publisher = new fhir.FhirString(source._publisher as Partial<fhir.FhirStringArgs>); }
    }
    if (source['contact']) { this.contact = source.contact.map((x) => new fhir.ContactDetail(x)); }
    else { this.contact = []; }
    if (source['description']) { this.description = new fhir.FhirMarkdown({value: source.description}); }
    if (source['_description']) {
      if (this.description) { this.description.addExtendedProperties(source._description!); }
      else { this.description = new fhir.FhirMarkdown(source._description as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['useContext']) { this.useContext = source.useContext.map((x) => new fhir.UsageContext(x)); }
    else { this.useContext = []; }
    if (source['jurisdiction']) { this.jurisdiction = source.jurisdiction.map((x) => new fhir.CodeableConcept(x)); }
    else { this.jurisdiction = []; }
    if (source['purpose']) { this.purpose = new fhir.FhirMarkdown({value: source.purpose}); }
    if (source['_purpose']) {
      if (this.purpose) { this.purpose.addExtendedProperties(source._purpose!); }
      else { this.purpose = new fhir.FhirMarkdown(source._purpose as Partial<fhir.FhirMarkdownArgs>); }
    }
    if (source['start']) { this.start = new fhir.FhirCode({value: source.start}); }
    else { this.start = null; }
    if (source['_start']) {
      if (this.start) { this.start.addExtendedProperties(source._start!); }
      else { this.start = new fhir.FhirCode(source._start as Partial<fhir.FhirCodeArgs>); }
    }
    if (source['profile']) { this.profile = new fhir.FhirCanonical({value: source.profile}); }
    if (source['_profile']) {
      if (this.profile) { this.profile.addExtendedProperties(source._profile!); }
      else { this.profile = new fhir.FhirCanonical(source._profile as Partial<fhir.FhirCanonicalArgs>); }
    }
    if (source['link']) { this.link = source.link.map((x) => new fhir.GraphDefinitionLink(x)); }
    else { this.link = []; }
  }
  /**
   * Required-bound Value Set for status (GraphDefinition.status)
   */
  public static get statusRequiredCodes() {
    return PublicationStatusCodes;
  }
  /**
   * Required-bound Value Set for start (GraphDefinition.start)
   */
  public static get startRequiredCodes() {
    return ResourceTypesCodes;
  }
  /**
   * Function to perform basic model validation (e.g., check if required elements are present).
   */
  public override doModelValidation():fhir.FtsIssue[] {
    let issues:fhir.FtsIssue[] = super.doModelValidation();
    if (!this['resourceType']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property resourceType:"GraphDefinition" fhir: GraphDefinition.resourceType:"GraphDefinition"' });
    }
    if (this["url"]) { issues.push(...this.url.doModelValidation()); }
    if (this["version"]) { issues.push(...this.version.doModelValidation()); }
    if (!this['name']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property name:fhir.FhirString fhir: GraphDefinition.name:string' });
    }
    if (this["name"]) { issues.push(...this.name.doModelValidation()); }
    if (!this['status']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property status:fhir.FhirCode<PublicationStatusCodeType> fhir: GraphDefinition.status:code' });
    }
    if (this['status'] && (!Object.values(PublicationStatusCodes).includes(this.status as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property status:fhir.FhirCode<PublicationStatusCodeType> fhir: GraphDefinition.status:code Required binding to: PublicationStatus' });
    }
    if (this["status"]) { issues.push(...this.status.doModelValidation()); }
    if (this["experimental"]) { issues.push(...this.experimental.doModelValidation()); }
    if (this["date"]) { issues.push(...this.date.doModelValidation()); }
    if (this["publisher"]) { issues.push(...this.publisher.doModelValidation()); }
    if (this["contact"]) { this.contact.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["description"]) { issues.push(...this.description.doModelValidation()); }
    if (this["useContext"]) { this.useContext.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["jurisdiction"]) { this.jurisdiction.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    if (this["purpose"]) { issues.push(...this.purpose.doModelValidation()); }
    if (!this['start']) {
      issues.push({ severity: 'error', code: 'required', diagnostics: 'Missing required property start:fhir.FhirCode fhir: GraphDefinition.start:code' });
    }
    if (this['start'] && (!Object.values(ResourceTypesCodes).includes(this.start as any))) {
      issues.push({ severity: 'error', code: 'code-invalid', diagnostics: 'Invalid code property start:fhir.FhirCode fhir: GraphDefinition.start:code Required binding to: ResourceTypes' });
    }
    if (this["start"]) { issues.push(...this.start.doModelValidation()); }
    if (this["profile"]) { issues.push(...this.profile.doModelValidation()); }
    if (this["link"]) { this.link.forEach((x) => { issues.push(...x.doModelValidation()); }) }
    return issues;
  }
}
